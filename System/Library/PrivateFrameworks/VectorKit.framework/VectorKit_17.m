void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTileTransformConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTileTransformConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTileTransformConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTileTransformConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278370;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTileTransformConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTileTransformConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278370;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTileTransformConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTileTransformConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD **v53;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t *v88;
  _QWORD *v90;
  uint64_t v91;
  unsigned __int8 v92;
  unint64_t v93;
  unint64_t v94;
  uint8x8_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unsigned __int8 v104;
  uint8x8_t v105;
  unint64_t v106;
  uint64_t ***v107;
  uint64_t **v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  md *v114;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  unint64_t v122;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::TransformConstantDataHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Transform>>>(v2);
  v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v6 = (_QWORD *)v5;
  v7 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v7 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v5 + 32);
  v117 = v7;
  v118 = v3;
  v119 = (_QWORD *)v4;
  v120 = (_QWORD *)v5;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v121 = v8;
  if (v9 == v8)
  {
    v10 = a1;
  }
  else
  {
    v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v117))
    {
      v11 = v8 + 1;
      do
      {
        v8 = v11;
        v121 = v11;
        if (v11 == v9)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v117);
        v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v116 = result;
    while (1)
    {
      *result = *v8;
      v14 = *v8;
      v15 = HIDWORD(*v8);
      v16 = *v8 >> 39;
      v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            v21 = v3[7],
            v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
      {
        v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        v24 = (unint64_t *)v3[11];
      }
      v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            v29 = v6[7],
            v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
      {
        v32 = v6[11];
        v33 = v6[10] + 8 * v27;
      }
      else
      {
        v32 = v6[11];
        v33 = v32;
      }
      if (v33 == v32)
        v34 = 0;
      else
        v34 = (unint64_t *)v33;
      v35 = **(_QWORD **)(v10 + 8);
      v36 = *(_QWORD **)v35;
      v37 = *(_QWORD **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37)
            goto LABEL_45;
        }
      }
      if (v36 == v37)
      {
LABEL_45:
        v38 = 0;
      }
      else
      {
        v38 = (_QWORD *)v36[3];
        v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldxr(p_shared_owners);
          while (__stxr(v41 + 1, p_shared_owners));
          do
            v42 = __ldaxr(p_shared_owners);
          while (__stlxr(v42 - 1, p_shared_owners));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      v43 = *v34;
      v44 = *v34;
      v45 = v38[50];
      v46 = (v38[51] - v45) >> 3;
      if (v44 < v46
        && (v47 = *(_QWORD *)(v45 + 8 * v44)) != 0
        && HIDWORD(v43) == HIDWORD(v47)
        && ((v48 = v38[53], v48 + 16 * v47 != v38[54]) ? (v49 = v48 == 0) : (v49 = 1), !v49))
      {
        v55 = *(_QWORD *)(v45 + 8 * v44);
        v56 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v56[3];
        v57 = v48 + 16 * v55;
        v10 = a1;
        v50 = *(_QWORD **)(v57 + 8);
        v43 = *v34;
        v45 = v38[50];
        v44 = *v34;
        if (v44 >= (v38[51] - v45) >> 3)
        {
LABEL_66:
          v98 = 0;
          goto LABEL_67;
        }
      }
      else
      {
        v50 = 0;
        if (v44 >= v46)
          goto LABEL_66;
      }
      v51 = *(_QWORD *)(v45 + 8 * v44);
      if (!v51 || HIDWORD(v43) != HIDWORD(v51))
        goto LABEL_66;
      v52 = v38[53];
      v53 = (_QWORD **)(v52 + 16 * v51);
      if (v53 == (_QWORD **)v38[54] || v52 == 0)
      {
        v98 = 0;
      }
      else
      {
        v97 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v97[3];
        v98 = *v53;
      }
      v10 = a1;
LABEL_67:
      v58 = *v24;
      v122 = v58;
      v59 = v38[417];
      if (v58 < (unint64_t)((v38[418] - v59) >> 3))
      {
        v60 = *(_QWORD *)(v59 + 8 * v58);
        if (v60 && HIDWORD(v58) == HIDWORD(v60))
        {
          v87 = v38[420];
          v88 = (uint64_t *)(v87 + 24 * v60);
          if (v88 != (uint64_t *)v38[421] && v87 != 0)
          {
            v90 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>> const&>,std::tuple<>>((uint64_t)(v38 + 409), v58, &v122);
            ++v90[3];
            v91 = *v88;
            if (v91)
            {
              if ((v92 & 1) == 0
              {
                do
                  v113 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
                while (__stlxr(v113 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
                gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>(void)::index = v113;
                v10 = a1;
              }
              v93 = v50[1];
              if (v93)
              {
                v94 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>(void)::index;
                v95 = (uint8x8_t)vcnt_s8((int8x8_t)v93);
                v95.i16[0] = vaddlv_u8(v95);
                if (v95.u32[0] > 1uLL)
                {
                  v96 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>(void)::index;
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>(void)::index >= v93)
                    v96 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>(void)::index % v93;
                }
                else
                {
                  v96 = (v93 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>(void)::index;
                }
                v99 = *(_QWORD **)(*v50 + 8 * v96);
                if (v99)
                {
                  v100 = (_QWORD *)*v99;
                  if (v100)
                  {
                    if (v95.u32[0] < 2uLL)
                    {
                      v101 = v93 - 1;
                      while (1)
                      {
                        v103 = v100[1];
                        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>(void)::index == v103)
                        {
                          if (v100[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>(void)::index)
                            goto LABEL_130;
                        }
                        else if ((v103 & v101) != v96)
                        {
                          goto LABEL_72;
                        }
                        v100 = (_QWORD *)*v100;
                        if (!v100)
                          goto LABEL_72;
                      }
                    }
                    do
                    {
                      v102 = v100[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>(void)::index == v102)
                      {
                        if (v100[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>(void)::index)
                        {
LABEL_130:
                          if ((v104 & 1) == 0)
                          {
                            if ((_DWORD)v114)
                            {
                              md::typeToIntMap(v114);
                              v10 = a1;
                            }
                          }
                          if (!qword_1EE5779D0)
                            goto LABEL_162;
                          v105 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                          v105.i16[0] = vaddlv_u8(v105);
                          if (v105.u32[0] > 1uLL)
                          {
                            v106 = v94;
                            if (v94 >= qword_1EE5779D0)
                              v106 = v94 % qword_1EE5779D0;
                          }
                          else
                          {
                            v106 = (qword_1EE5779D0 - 1) & v94;
                          }
                          v107 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v106);
                          if (!v107 || (v108 = *v107) == 0)
LABEL_162:
                            abort();
                          if (v105.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              v110 = v108[1];
                              if ((uint64_t *)v94 == v110)
                              {
                                if (v108[2] == (uint64_t *)v94)
                                  goto LABEL_151;
                              }
                              else if (((unint64_t)v110 & (qword_1EE5779D0 - 1)) != v106)
                              {
                                goto LABEL_162;
                              }
                              v108 = (uint64_t **)*v108;
                              if (!v108)
                                goto LABEL_162;
                            }
                          }
                          while (1)
                          {
                            v109 = (unint64_t)v108[1];
                            if (v94 == v109)
                            {
                              if (v108[2] == (uint64_t *)v94)
                              {
LABEL_151:
                                v111 = *((int *)v108 + 6);
                                v112 = *((int *)v108 + 7);
                                if ((_DWORD)v111 != -1)
                                  ggl::PipelineSetup::setConstantData(v98, v111, v91, 1);
                                if ((_DWORD)v112 != -1)
                                  ggl::PipelineSetup::setConstantData(v98, v112, v91, 2);
                                goto LABEL_72;
                              }
                            }
                            else
                            {
                              if (v109 >= qword_1EE5779D0)
                                v109 %= (unint64_t)qword_1EE5779D0;
                              if (v109 != v106)
                                goto LABEL_162;
                            }
                            v108 = (uint64_t **)*v108;
                            if (!v108)
                              goto LABEL_162;
                          }
                        }
                      }
                      else
                      {
                        if (v102 >= v93)
                          v102 %= v93;
                        if (v102 != v96)
                          break;
                      }
                      v100 = (_QWORD *)*v100;
                    }
                    while (v100);
                  }
                }
              }
            }
          }
        }
      }
LABEL_72:
      v8 = (_QWORD *)v117[4];
      v62 = v121 + 1;
      v121 = v62;
      if (v62 == v8)
      {
        result = v116;
        if (v9 == v8)
          goto LABEL_161;
      }
      else
      {
        v63 = v118[4];
        result = v116;
        do
        {
          v64 = *((unsigned int *)v62 + 1);
          v65 = v64 >> 7;
          if (v64 >> 7 < (v118[5] - v63) >> 3)
          {
            v66 = *(_QWORD *)(v63 + 8 * v65);
            if (v66)
            {
              v67 = v64 & 0x7F;
              v68 = *(unsigned __int16 *)(v66 + 2 * v67);
              v69 = v118[7];
              v70 = v118[8];
              if (v68 < (v70 - v69) >> 3)
              {
                v71 = v69 + 8 * v68;
                if (v71 != v70 && *(_DWORD *)(v71 + 4) == (_DWORD)v64)
                {
                  v73 = v119[4];
                  if (v65 < (v119[5] - v73) >> 3)
                  {
                    v74 = *(_QWORD *)(v73 + 8 * v65);
                    if (v74)
                    {
                      v75 = *(unsigned __int16 *)(v74 + 2 * v67);
                      v76 = v119[7];
                      v77 = v119[8];
                      if (v75 < (v77 - v76) >> 3)
                      {
                        v78 = v76 + 8 * v75;
                        if (v78 != v77 && *(_DWORD *)(v78 + 4) == (_DWORD)v64)
                        {
                          v80 = v120[4];
                          if (v65 < (v120[5] - v80) >> 3)
                          {
                            v81 = *(_QWORD *)(v80 + 8 * v65);
                            if (v81)
                            {
                              v82 = *(unsigned __int16 *)(v81 + 2 * v67);
                              v84 = v120[7];
                              v83 = v120[8];
                              if (v82 < (v83 - v84) >> 3)
                              {
                                v85 = v84 + 8 * v82;
                                if (*(_DWORD *)(v85 + 4) == (_DWORD)v64 && v85 != v83)
                                {
                                  v8 = v62;
                                  goto LABEL_100;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v62;
        }
        while (v62 != v8);
        v62 = v8;
LABEL_100:
        v121 = v62;
        if (v9 == v8)
          goto LABEL_161;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_161:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v10 + 8) = 0;
  return result;
}

void sub_19F6C0DBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TransformConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x74DC502726E97929;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x74DC502726E97929;
      if (*(_QWORD *)&v3 <= 0x74DC502726E97929uLL)
        v5 = 0x74DC502726E97929uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x74DC502726E97929;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x74DC502726E97929)
            {
              if (v7[2] == 0x74DC502726E97929)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x74DC502726E97929)
          {
            if (v7[2] == 0x74DC502726E97929)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::TransformConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 35;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273488;
  *(_QWORD *)(v11 + 8) = 0x74DC502726E97929;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x74DC502726E97929uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x74DC502726E97929;
  v15[1] = "md::ls::TransformConstantDataHandle]";
  v15[2] = 35;
  gdc::Registry::_registerStorageDataSignals(a1, 0x74DC502726E97929, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6C0FE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Transform>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCDFBB34DE0FFB731;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCDFBB34DE0FFB731;
      if (*(_QWORD *)&v3 <= 0xCDFBB34DE0FFB731)
        v5 = 0xCDFBB34DE0FFB731 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCDFBB34DE0FFB731;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCDFBB34DE0FFB731)
            {
              if (v7[2] == 0xCDFBB34DE0FFB731)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCDFBB34DE0FFB731)
          {
            if (v7[2] == 0xCDFBB34DE0FFB731)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Transform>>]";
  *(_QWORD *)(v11 + 24) = 82;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42736F8;
  *(_QWORD *)(v11 + 8) = 0xCDFBB34DE0FFB731;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCDFBB34DE0FFB731, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCDFBB34DE0FFB731;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Transform>>]";
  v15[2] = 82;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCDFBB34DE0FFB731, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6C1208(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Transform>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Transform>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Transform>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Transform>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::TransformConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TransformConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TransformConstantDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TransformConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleCameraLightingConstantData>(md::ita::AssignStyleCameraLightingConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleCameraLightingConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleCameraLightingConstantData>(md::ita::AssignStyleCameraLightingConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleCameraLightingConstantData>(md::ita::AssignStyleCameraLightingConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleCameraLightingConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleCameraLightingConstantData>(md::ita::AssignStyleCameraLightingConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288798;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleCameraLightingConstantData>(md::ita::AssignStyleCameraLightingConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleCameraLightingConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleCameraLightingConstantData>(md::ita::AssignStyleCameraLightingConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288798;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleCameraLightingConstantData>(md::ita::AssignStyleCameraLightingConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleCameraLightingConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleCameraLightingConstantData>(md::ita::AssignStyleCameraLightingConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6C1590(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleCameraLightingConstantData>(md::ita::AssignStyleCameraLightingConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleCameraLightingConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleCameraLightingConstantData>(md::ita::AssignStyleCameraLightingConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleCameraLightingConstantData>(md::ita::AssignStyleCameraLightingConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleCameraLightingConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleCameraLightingConstantData>(md::ita::AssignStyleCameraLightingConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42887E0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleCameraLightingConstantData>(md::ita::AssignStyleCameraLightingConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleCameraLightingConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleCameraLightingConstantData>(md::ita::AssignStyleCameraLightingConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42887E0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleCameraLightingConstantData>(md::ita::AssignStyleCameraLightingConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleCameraLightingConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleCameraLightingConstantData>(md::ita::AssignStyleCameraLightingConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x96F87A2692FE4013;
  v2[1] = "md::ls::StyleCameraConstantDataHandle]";
  *(_QWORD *)&result = 37;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4130;
  v2[4] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>]";
  v2[5] = 95;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleCameraLightingConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleCameraLightingConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleCameraLightingConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleCameraLightingConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278C70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleCameraLightingConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleCameraLightingConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278C70;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleCameraLightingConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleCameraLightingConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD **v53;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  unint64_t v61;
  unint64_t v62;
  uint8x8_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  unsigned __int8 v72;
  uint8x8_t v73;
  unint64_t v74;
  uint64_t ***v75;
  uint64_t **v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v106;
  md *v107;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::StyleCameraConstantDataHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>>(v2);
  v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v6 = (_QWORD *)v5;
  v7 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v7 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v5 + 32);
  v110 = v7;
  v111 = v3;
  v112 = (_QWORD *)v4;
  v113 = (_QWORD *)v5;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v114 = v8;
  if (v9 == v8)
  {
    v10 = a1;
  }
  else
  {
    v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v110))
    {
      v11 = v8 + 1;
      do
      {
        v8 = v11;
        v114 = v11;
        if (v11 == v9)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v110);
        v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v109 = result;
    while (1)
    {
      *result = *v8;
      v14 = *v8;
      v15 = HIDWORD(*v8);
      v16 = *v8 >> 39;
      v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            v21 = v3[7],
            v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
      {
        v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        v24 = (unint64_t *)v3[11];
      }
      v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            v29 = v6[7],
            v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
      {
        v32 = v6[11];
        v33 = v6[10] + 8 * v27;
      }
      else
      {
        v32 = v6[11];
        v33 = v32;
      }
      if (v33 == v32)
        v34 = 0;
      else
        v34 = (unint64_t *)v33;
      v35 = **(_QWORD **)(v10 + 8);
      v36 = *(_QWORD **)v35;
      v37 = *(_QWORD **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37)
            goto LABEL_45;
        }
      }
      if (v36 == v37)
      {
LABEL_45:
        v38 = 0;
      }
      else
      {
        v38 = (_QWORD *)v36[3];
        v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldxr(p_shared_owners);
          while (__stxr(v41 + 1, p_shared_owners));
          do
            v42 = __ldaxr(p_shared_owners);
          while (__stlxr(v42 - 1, p_shared_owners));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      v43 = *v34;
      v44 = *v34;
      v45 = v38[50];
      v46 = (v38[51] - v45) >> 3;
      if (v44 < v46
        && (v47 = *(_QWORD *)(v45 + 8 * v44)) != 0
        && HIDWORD(v43) == HIDWORD(v47)
        && ((v48 = v38[53], v48 + 16 * v47 != v38[54]) ? (v49 = v48 == 0) : (v49 = 1), !v49))
      {
        v55 = *(_QWORD *)(v45 + 8 * v44);
        v56 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v56[3];
        v57 = v48 + 16 * v55;
        v10 = a1;
        v50 = *(_QWORD **)(v57 + 8);
        v43 = *v34;
        v45 = v38[50];
        v44 = *v34;
        if (v44 >= (v38[51] - v45) >> 3)
        {
LABEL_66:
          v71 = 0;
          goto LABEL_67;
        }
      }
      else
      {
        v50 = 0;
        if (v44 >= v46)
          goto LABEL_66;
      }
      v51 = *(_QWORD *)(v45 + 8 * v44);
      if (!v51 || HIDWORD(v43) != HIDWORD(v51))
        goto LABEL_66;
      v52 = v38[53];
      v53 = (_QWORD **)(v52 + 16 * v51);
      if (v53 == (_QWORD **)v38[54] || v52 == 0)
      {
        v71 = 0;
      }
      else
      {
        v70 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v70[3];
        v71 = *v53;
      }
      v10 = a1;
LABEL_67:
      v58 = md::VKMRenderResourcesStore::getConstantData<ggl::DaVinci::StyleCameraLighting>((uint64_t)v38, *v24);
      if (v58)
      {
        v59 = v58;
        if ((v60 & 1) == 0
        {
          do
            v106 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
          while (__stlxr(v106 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
          gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>(void)::index = v106;
          v10 = a1;
        }
        v61 = v50[1];
        if (v61)
        {
          v62 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>(void)::index;
          v63 = (uint8x8_t)vcnt_s8((int8x8_t)v61);
          v63.i16[0] = vaddlv_u8(v63);
          if (v63.u32[0] > 1uLL)
          {
            v64 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>(void)::index;
            if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>(void)::index >= v61)
              v64 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>(void)::index % v61;
          }
          else
          {
            v64 = (v61 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>(void)::index;
          }
          v65 = *(_QWORD **)(*v50 + 8 * v64);
          if (v65)
          {
            v66 = (_QWORD *)*v65;
            if (v66)
            {
              if (v63.u32[0] < 2uLL)
              {
                v67 = v61 - 1;
                while (1)
                {
                  v69 = v66[1];
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>(void)::index == v69)
                  {
                    if (v66[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>(void)::index)
                      goto LABEL_91;
                  }
                  else if ((v69 & v67) != v64)
                  {
                    goto LABEL_116;
                  }
                  v66 = (_QWORD *)*v66;
                  if (!v66)
                    goto LABEL_116;
                }
              }
              do
              {
                v68 = v66[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>(void)::index == v68)
                {
                  if (v66[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>(void)::index)
                  {
LABEL_91:
                    if ((v72 & 1) == 0)
                    {
                      if ((_DWORD)v107)
                      {
                        md::typeToIntMap(v107);
                        v10 = a1;
                      }
                    }
                    if (!qword_1EE5779D0)
                      goto LABEL_153;
                    v73 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                    v73.i16[0] = vaddlv_u8(v73);
                    if (v73.u32[0] > 1uLL)
                    {
                      v74 = v62;
                      if (v62 >= qword_1EE5779D0)
                        v74 = v62 % qword_1EE5779D0;
                    }
                    else
                    {
                      v74 = (qword_1EE5779D0 - 1) & v62;
                    }
                    v75 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v74);
                    if (!v75 || (v76 = *v75) == 0)
LABEL_153:
                      abort();
                    if (v73.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v78 = v76[1];
                        if ((uint64_t *)v62 == v78)
                        {
                          if (v76[2] == (uint64_t *)v62)
                            goto LABEL_112;
                        }
                        else if (((unint64_t)v78 & (qword_1EE5779D0 - 1)) != v74)
                        {
                          goto LABEL_153;
                        }
                        v76 = (uint64_t **)*v76;
                        if (!v76)
                          goto LABEL_153;
                      }
                    }
                    while (1)
                    {
                      v77 = (unint64_t)v76[1];
                      if (v62 == v77)
                      {
                        if (v76[2] == (uint64_t *)v62)
                        {
LABEL_112:
                          v79 = *((int *)v76 + 6);
                          v80 = *((int *)v76 + 7);
                          if ((_DWORD)v79 != -1)
                            ggl::PipelineSetup::setConstantData(v71, v79, v59, 1);
                          if ((_DWORD)v80 != -1)
                            ggl::PipelineSetup::setConstantData(v71, v80, v59, 2);
                          goto LABEL_116;
                        }
                      }
                      else
                      {
                        if (v77 >= qword_1EE5779D0)
                          v77 %= (unint64_t)qword_1EE5779D0;
                        if (v77 != v74)
                          goto LABEL_153;
                      }
                      v76 = (uint64_t **)*v76;
                      if (!v76)
                        goto LABEL_153;
                    }
                  }
                }
                else
                {
                  if (v68 >= v61)
                    v68 %= v61;
                  if (v68 != v64)
                    break;
                }
                v66 = (_QWORD *)*v66;
              }
              while (v66);
            }
          }
        }
      }
LABEL_116:
      v8 = (_QWORD *)v110[4];
      v81 = v114 + 1;
      v114 = v81;
      if (v81 == v8)
      {
        result = v109;
        if (v9 == v8)
          goto LABEL_152;
      }
      else
      {
        v82 = v111[4];
        result = v109;
        do
        {
          v83 = *((unsigned int *)v81 + 1);
          v84 = v83 >> 7;
          if (v83 >> 7 < (v111[5] - v82) >> 3)
          {
            v85 = *(_QWORD *)(v82 + 8 * v84);
            if (v85)
            {
              v86 = v83 & 0x7F;
              v87 = *(unsigned __int16 *)(v85 + 2 * v86);
              v88 = v111[7];
              v89 = v111[8];
              if (v87 < (v89 - v88) >> 3)
              {
                v90 = v88 + 8 * v87;
                if (v90 != v89 && *(_DWORD *)(v90 + 4) == (_DWORD)v83)
                {
                  v92 = v112[4];
                  if (v84 < (v112[5] - v92) >> 3)
                  {
                    v93 = *(_QWORD *)(v92 + 8 * v84);
                    if (v93)
                    {
                      v94 = *(unsigned __int16 *)(v93 + 2 * v86);
                      v95 = v112[7];
                      v96 = v112[8];
                      if (v94 < (v96 - v95) >> 3)
                      {
                        v97 = v95 + 8 * v94;
                        if (v97 != v96 && *(_DWORD *)(v97 + 4) == (_DWORD)v83)
                        {
                          v99 = v113[4];
                          if (v84 < (v113[5] - v99) >> 3)
                          {
                            v100 = *(_QWORD *)(v99 + 8 * v84);
                            if (v100)
                            {
                              v101 = *(unsigned __int16 *)(v100 + 2 * v86);
                              v103 = v113[7];
                              v102 = v113[8];
                              if (v101 < (v102 - v103) >> 3)
                              {
                                v104 = v103 + 8 * v101;
                                if (*(_DWORD *)(v104 + 4) == (_DWORD)v83 && v104 != v102)
                                {
                                  v8 = v81;
                                  goto LABEL_144;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v81;
        }
        while (v81 != v8);
        v81 = v8;
LABEL_144:
        v114 = v81;
        if (v9 == v8)
          goto LABEL_152;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_152:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v10 + 8) = 0;
  return result;
}

void sub_19F6C1E20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::StyleCameraConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x96F87A2692FE4013;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x96F87A2692FE4013;
      if (*(_QWORD *)&v3 <= 0x96F87A2692FE4013)
        v5 = 0x96F87A2692FE4013 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x96F87A2692FE4013;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x96F87A2692FE4013)
            {
              if (v7[2] == 0x96F87A2692FE4013)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x96F87A2692FE4013)
          {
            if (v7[2] == 0x96F87A2692FE4013)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::StyleCameraConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 37;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273D28;
  *(_QWORD *)(v11 + 8) = 0x96F87A2692FE4013;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x96F87A2692FE4013, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x96F87A2692FE4013;
  v15[1] = "md::ls::StyleCameraConstantDataHandle]";
  v15[2] = 37;
  gdc::Registry::_registerStorageDataSignals(a1, 0x96F87A2692FE4013, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6C2044(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x8AED3586A1D729D9;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x8AED3586A1D729D9;
      if (*(_QWORD *)&v3 <= 0x8AED3586A1D729D9)
        v5 = 0x8AED3586A1D729D9 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x8AED3586A1D729D9;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x8AED3586A1D729D9)
            {
              if (v7[2] == 0x8AED3586A1D729D9)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x8AED3586A1D729D9)
          {
            if (v7[2] == 0x8AED3586A1D729D9)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>]";
  *(_QWORD *)(v11 + 24) = 95;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42739C8;
  *(_QWORD *)(v11 + 8) = 0x8AED3586A1D729D9;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x8AED3586A1D729D9, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x8AED3586A1D729D9;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>]";
  v15[2] = 95;
  gdc::Registry::_registerStorageDataSignals(a1, 0x8AED3586A1D729D9, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6C226C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::StyleCameraConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::StyleCameraConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::StyleCameraConstantDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::StyleCameraConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignClippingConstantData>(md::ita::AssignClippingConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignClippingConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignClippingConstantData>(md::ita::AssignClippingConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignClippingConstantData>(md::ita::AssignClippingConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignClippingConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignClippingConstantData>(md::ita::AssignClippingConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285858;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignClippingConstantData>(md::ita::AssignClippingConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignClippingConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignClippingConstantData>(md::ita::AssignClippingConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285858;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignClippingConstantData>(md::ita::AssignClippingConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignClippingConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignClippingConstantData>(md::ita::AssignClippingConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6C25F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignClippingConstantData>(md::ita::AssignClippingConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignClippingConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignClippingConstantData>(md::ita::AssignClippingConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignClippingConstantData>(md::ita::AssignClippingConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignClippingConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignClippingConstantData>(md::ita::AssignClippingConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42858A0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignClippingConstantData>(md::ita::AssignClippingConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignClippingConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignClippingConstantData>(md::ita::AssignClippingConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42858A0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignClippingConstantData>(md::ita::AssignClippingConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignClippingConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignClippingConstantData>(md::ita::AssignClippingConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x9292F9031FE6DB5;
  v2[1] = "md::ls::ClippingConstantDataHandle]";
  *(_QWORD *)&result = 34;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4140;
  v2[4] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Clipping>>]";
  v2[5] = 81;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignClippingConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignClippingConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignClippingConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignClippingConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42774D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignClippingConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignClippingConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42774D0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignClippingConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignClippingConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD **v53;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t *v88;
  _QWORD *v90;
  uint64_t v91;
  unsigned __int8 v92;
  unint64_t v93;
  unint64_t v94;
  uint8x8_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unsigned __int8 v104;
  uint8x8_t v105;
  unint64_t v106;
  uint64_t ***v107;
  uint64_t **v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  md *v114;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  unint64_t v122;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::ClippingConstantDataHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Clipping>>>(v2);
  v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v6 = (_QWORD *)v5;
  v7 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v7 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v5 + 32);
  v117 = v7;
  v118 = v3;
  v119 = (_QWORD *)v4;
  v120 = (_QWORD *)v5;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v121 = v8;
  if (v9 == v8)
  {
    v10 = a1;
  }
  else
  {
    v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v117))
    {
      v11 = v8 + 1;
      do
      {
        v8 = v11;
        v121 = v11;
        if (v11 == v9)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v117);
        v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v116 = result;
    while (1)
    {
      *result = *v8;
      v14 = *v8;
      v15 = HIDWORD(*v8);
      v16 = *v8 >> 39;
      v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            v21 = v3[7],
            v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
      {
        v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        v24 = (unint64_t *)v3[11];
      }
      v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            v29 = v6[7],
            v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
      {
        v32 = v6[11];
        v33 = v6[10] + 8 * v27;
      }
      else
      {
        v32 = v6[11];
        v33 = v32;
      }
      if (v33 == v32)
        v34 = 0;
      else
        v34 = (unint64_t *)v33;
      v35 = **(_QWORD **)(v10 + 8);
      v36 = *(_QWORD **)v35;
      v37 = *(_QWORD **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37)
            goto LABEL_45;
        }
      }
      if (v36 == v37)
      {
LABEL_45:
        v38 = 0;
      }
      else
      {
        v38 = (_QWORD *)v36[3];
        v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldxr(p_shared_owners);
          while (__stxr(v41 + 1, p_shared_owners));
          do
            v42 = __ldaxr(p_shared_owners);
          while (__stlxr(v42 - 1, p_shared_owners));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      v43 = *v34;
      v44 = *v34;
      v45 = v38[50];
      v46 = (v38[51] - v45) >> 3;
      if (v44 < v46
        && (v47 = *(_QWORD *)(v45 + 8 * v44)) != 0
        && HIDWORD(v43) == HIDWORD(v47)
        && ((v48 = v38[53], v48 + 16 * v47 != v38[54]) ? (v49 = v48 == 0) : (v49 = 1), !v49))
      {
        v55 = *(_QWORD *)(v45 + 8 * v44);
        v56 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v56[3];
        v57 = v48 + 16 * v55;
        v10 = a1;
        v50 = *(_QWORD **)(v57 + 8);
        v43 = *v34;
        v45 = v38[50];
        v44 = *v34;
        if (v44 >= (v38[51] - v45) >> 3)
        {
LABEL_66:
          v98 = 0;
          goto LABEL_67;
        }
      }
      else
      {
        v50 = 0;
        if (v44 >= v46)
          goto LABEL_66;
      }
      v51 = *(_QWORD *)(v45 + 8 * v44);
      if (!v51 || HIDWORD(v43) != HIDWORD(v51))
        goto LABEL_66;
      v52 = v38[53];
      v53 = (_QWORD **)(v52 + 16 * v51);
      if (v53 == (_QWORD **)v38[54] || v52 == 0)
      {
        v98 = 0;
      }
      else
      {
        v97 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v97[3];
        v98 = *v53;
      }
      v10 = a1;
LABEL_67:
      v58 = *v24;
      v122 = v58;
      v59 = v38[483];
      if (v58 < (unint64_t)((v38[484] - v59) >> 3))
      {
        v60 = *(_QWORD *)(v59 + 8 * v58);
        if (v60 && HIDWORD(v58) == HIDWORD(v60))
        {
          v87 = v38[486];
          v88 = (uint64_t *)(v87 + 24 * v60);
          if (v88 != (uint64_t *)v38[487] && v87 != 0)
          {
            v90 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>> const&>,std::tuple<>>((uint64_t)(v38 + 475), v58, &v122);
            ++v90[3];
            v91 = *v88;
            if (v91)
            {
              if ((v92 & 1) == 0
              {
                do
                  v113 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
                while (__stlxr(v113 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
                gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>(void)::index = v113;
                v10 = a1;
              }
              v93 = v50[1];
              if (v93)
              {
                v94 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>(void)::index;
                v95 = (uint8x8_t)vcnt_s8((int8x8_t)v93);
                v95.i16[0] = vaddlv_u8(v95);
                if (v95.u32[0] > 1uLL)
                {
                  v96 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>(void)::index;
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>(void)::index >= v93)
                    v96 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>(void)::index % v93;
                }
                else
                {
                  v96 = (v93 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>(void)::index;
                }
                v99 = *(_QWORD **)(*v50 + 8 * v96);
                if (v99)
                {
                  v100 = (_QWORD *)*v99;
                  if (v100)
                  {
                    if (v95.u32[0] < 2uLL)
                    {
                      v101 = v93 - 1;
                      while (1)
                      {
                        v103 = v100[1];
                        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>(void)::index == v103)
                        {
                          if (v100[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>(void)::index)
                            goto LABEL_130;
                        }
                        else if ((v103 & v101) != v96)
                        {
                          goto LABEL_72;
                        }
                        v100 = (_QWORD *)*v100;
                        if (!v100)
                          goto LABEL_72;
                      }
                    }
                    do
                    {
                      v102 = v100[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>(void)::index == v102)
                      {
                        if (v100[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>(void)::index)
                        {
LABEL_130:
                          if ((v104 & 1) == 0)
                          {
                            if ((_DWORD)v114)
                            {
                              md::typeToIntMap(v114);
                              v10 = a1;
                            }
                          }
                          if (!qword_1EE5779D0)
                            goto LABEL_162;
                          v105 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                          v105.i16[0] = vaddlv_u8(v105);
                          if (v105.u32[0] > 1uLL)
                          {
                            v106 = v94;
                            if (v94 >= qword_1EE5779D0)
                              v106 = v94 % qword_1EE5779D0;
                          }
                          else
                          {
                            v106 = (qword_1EE5779D0 - 1) & v94;
                          }
                          v107 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v106);
                          if (!v107 || (v108 = *v107) == 0)
LABEL_162:
                            abort();
                          if (v105.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              v110 = v108[1];
                              if ((uint64_t *)v94 == v110)
                              {
                                if (v108[2] == (uint64_t *)v94)
                                  goto LABEL_151;
                              }
                              else if (((unint64_t)v110 & (qword_1EE5779D0 - 1)) != v106)
                              {
                                goto LABEL_162;
                              }
                              v108 = (uint64_t **)*v108;
                              if (!v108)
                                goto LABEL_162;
                            }
                          }
                          while (1)
                          {
                            v109 = (unint64_t)v108[1];
                            if (v94 == v109)
                            {
                              if (v108[2] == (uint64_t *)v94)
                              {
LABEL_151:
                                v111 = *((int *)v108 + 6);
                                v112 = *((int *)v108 + 7);
                                if ((_DWORD)v111 != -1)
                                  ggl::PipelineSetup::setConstantData(v98, v111, v91, 1);
                                if ((_DWORD)v112 != -1)
                                  ggl::PipelineSetup::setConstantData(v98, v112, v91, 2);
                                goto LABEL_72;
                              }
                            }
                            else
                            {
                              if (v109 >= qword_1EE5779D0)
                                v109 %= (unint64_t)qword_1EE5779D0;
                              if (v109 != v106)
                                goto LABEL_162;
                            }
                            v108 = (uint64_t **)*v108;
                            if (!v108)
                              goto LABEL_162;
                          }
                        }
                      }
                      else
                      {
                        if (v102 >= v93)
                          v102 %= v93;
                        if (v102 != v96)
                          break;
                      }
                      v100 = (_QWORD *)*v100;
                    }
                    while (v100);
                  }
                }
              }
            }
          }
        }
      }
LABEL_72:
      v8 = (_QWORD *)v117[4];
      v62 = v121 + 1;
      v121 = v62;
      if (v62 == v8)
      {
        result = v116;
        if (v9 == v8)
          goto LABEL_161;
      }
      else
      {
        v63 = v118[4];
        result = v116;
        do
        {
          v64 = *((unsigned int *)v62 + 1);
          v65 = v64 >> 7;
          if (v64 >> 7 < (v118[5] - v63) >> 3)
          {
            v66 = *(_QWORD *)(v63 + 8 * v65);
            if (v66)
            {
              v67 = v64 & 0x7F;
              v68 = *(unsigned __int16 *)(v66 + 2 * v67);
              v69 = v118[7];
              v70 = v118[8];
              if (v68 < (v70 - v69) >> 3)
              {
                v71 = v69 + 8 * v68;
                if (v71 != v70 && *(_DWORD *)(v71 + 4) == (_DWORD)v64)
                {
                  v73 = v119[4];
                  if (v65 < (v119[5] - v73) >> 3)
                  {
                    v74 = *(_QWORD *)(v73 + 8 * v65);
                    if (v74)
                    {
                      v75 = *(unsigned __int16 *)(v74 + 2 * v67);
                      v76 = v119[7];
                      v77 = v119[8];
                      if (v75 < (v77 - v76) >> 3)
                      {
                        v78 = v76 + 8 * v75;
                        if (v78 != v77 && *(_DWORD *)(v78 + 4) == (_DWORD)v64)
                        {
                          v80 = v120[4];
                          if (v65 < (v120[5] - v80) >> 3)
                          {
                            v81 = *(_QWORD *)(v80 + 8 * v65);
                            if (v81)
                            {
                              v82 = *(unsigned __int16 *)(v81 + 2 * v67);
                              v84 = v120[7];
                              v83 = v120[8];
                              if (v82 < (v83 - v84) >> 3)
                              {
                                v85 = v84 + 8 * v82;
                                if (*(_DWORD *)(v85 + 4) == (_DWORD)v64 && v85 != v83)
                                {
                                  v8 = v62;
                                  goto LABEL_100;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v62;
        }
        while (v62 != v8);
        v62 = v8;
LABEL_100:
        v121 = v62;
        if (v9 == v8)
          goto LABEL_161;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_161:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v10 + 8) = 0;
  return result;
}

void sub_19F6C2EEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::ClippingConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x9292F9031FE6DB5;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x9292F9031FE6DB5;
      if (*(_QWORD *)&v3 <= 0x9292F9031FE6DB5uLL)
        v5 = 0x9292F9031FE6DB5uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x9292F9031FE6DB5;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x9292F9031FE6DB5)
            {
              if (v7[2] == 0x9292F9031FE6DB5)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x9292F9031FE6DB5)
          {
            if (v7[2] == 0x9292F9031FE6DB5)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::ClippingConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 34;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42730C8;
  *(_QWORD *)(v11 + 8) = 0x9292F9031FE6DB5;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x9292F9031FE6DB5uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x9292F9031FE6DB5;
  v15[1] = "md::ls::ClippingConstantDataHandle]";
  v15[2] = 34;
  gdc::Registry::_registerStorageDataSignals(a1, 0x9292F9031FE6DB5, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6C3110(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Clipping>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x365426C0E4B6F01DLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x365426C0E4B6F01DLL;
      if (*(_QWORD *)&v3 <= 0x365426C0E4B6F01DuLL)
        v5 = 0x365426C0E4B6F01DuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x365426C0E4B6F01DLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x365426C0E4B6F01DLL)
            {
              if (v7[2] == 0x365426C0E4B6F01DLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x365426C0E4B6F01DLL)
          {
            if (v7[2] == 0x365426C0E4B6F01DLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Clipping>>]";
  *(_QWORD *)(v11 + 24) = 81;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42736C8;
  *(_QWORD *)(v11 + 8) = 0x365426C0E4B6F01DLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x365426C0E4B6F01DuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x365426C0E4B6F01DLL;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Clipping>>]";
  v15[2] = 81;
  gdc::Registry::_registerStorageDataSignals(a1, 0x365426C0E4B6F01DLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6C3338(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Clipping>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Clipping>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Clipping>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Clipping>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::ClippingConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ClippingConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ClippingConstantDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ClippingConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightingConfigurationVertexData>(md::ita::AssignLightingConfigurationVertexData &&)::{lambda(void)#2},std::allocator<md::ita::AssignLightingConfigurationVertexData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightingConfigurationVertexData>(md::ita::AssignLightingConfigurationVertexData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightingConfigurationVertexData>(md::ita::AssignLightingConfigurationVertexData &&)::{lambda(void)#2},std::allocator<md::ita::AssignLightingConfigurationVertexData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightingConfigurationVertexData>(md::ita::AssignLightingConfigurationVertexData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288708;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightingConfigurationVertexData>(md::ita::AssignLightingConfigurationVertexData &&)::{lambda(void)#2},std::allocator<md::ita::AssignLightingConfigurationVertexData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightingConfigurationVertexData>(md::ita::AssignLightingConfigurationVertexData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288708;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightingConfigurationVertexData>(md::ita::AssignLightingConfigurationVertexData &&)::{lambda(void)#2},std::allocator<md::ita::AssignLightingConfigurationVertexData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightingConfigurationVertexData>(md::ita::AssignLightingConfigurationVertexData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6C36C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightingConfigurationVertexData>(md::ita::AssignLightingConfigurationVertexData &&)::{lambda(void)#1},std::allocator<md::ita::AssignLightingConfigurationVertexData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightingConfigurationVertexData>(md::ita::AssignLightingConfigurationVertexData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightingConfigurationVertexData>(md::ita::AssignLightingConfigurationVertexData &&)::{lambda(void)#1},std::allocator<md::ita::AssignLightingConfigurationVertexData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightingConfigurationVertexData>(md::ita::AssignLightingConfigurationVertexData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288750;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightingConfigurationVertexData>(md::ita::AssignLightingConfigurationVertexData &&)::{lambda(void)#1},std::allocator<md::ita::AssignLightingConfigurationVertexData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightingConfigurationVertexData>(md::ita::AssignLightingConfigurationVertexData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288750;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightingConfigurationVertexData>(md::ita::AssignLightingConfigurationVertexData &&)::{lambda(void)#1},std::allocator<md::ita::AssignLightingConfigurationVertexData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightingConfigurationVertexData>(md::ita::AssignLightingConfigurationVertexData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x4A991B37E344929BLL;
  result[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>]";
  result[2] = 101;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLightingConfigurationVertexData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLightingConfigurationVertexData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLightingConfigurationVertexData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLightingConfigurationVertexData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278C28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLightingConfigurationVertexData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLightingConfigurationVertexData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278C28;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLightingConfigurationVertexData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLightingConfigurationVertexData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (***v27)(_QWORD);
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  int8x8_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  _QWORD **v64;
  _QWORD **v65;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t *v70;
  unint64_t v71;
  unsigned __int8 v72;
  unint64_t v73;
  unint64_t v74;
  uint8x8_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint8x8_t v83;
  unint64_t v84;
  uint64_t ***v85;
  uint64_t **v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v113;
  md *v114;
  uint64_t v115;
  uint64_t v116[4];
  unint64_t *v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  unint64_t *v121;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v118, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v116, v9, v4, v6, *(_QWORD *)(v9 + 32));
  if (v117 == v121)
  {
    v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    goto LABEL_177;
  }
  v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (2)
  {
    *v11 = *v10;
    v12 = *v10;
    v13 = v6[4];
    if (v12 >> 39 < (v6[5] - v13) >> 3
      && (v14 = *(_QWORD *)(v13 + 8 * (v12 >> 39))) != 0
      && (v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)), v17 = v6[7], v16 = v6[8], v15 < (v16 - v17) >> 3)
      && ((v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
        ? (v20 = *(_DWORD *)(v19 + 4) == (_DWORD)v18)
        : (v20 = 0),
          v20))
    {
      v21 = v6[11];
      v22 = v6[10] + 8 * v15;
    }
    else
    {
      v21 = v6[11];
      v22 = v21;
    }
    if (v22 == v21)
      v23 = 0;
    else
      v23 = (unint64_t *)v22;
    v24 = ***(uint64_t ****)(a1 + 8);
    if (v24 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v24 != 0x22D45F5AAD4BF408)
    {
      v25 = v24 + 5;
      do
      {
        v26 = *v25;
        v25 += 5;
      }
      while (v26 != 0x22D45F5AAD4BF408);
      v24 = v25 - 5;
    }
    v27 = (uint64_t (***)(_QWORD))v24[3];
    v28 = (std::__shared_weak_count *)v24[4];
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(p_shared_owners);
      while (__stxr(v30 + 1, p_shared_owners));
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v32 = *(_QWORD **)((**v27)(v27) + 8);
    v33 = (int8x8_t)v32[1];
    if (!*(_QWORD *)&v33)
      goto LABEL_151;
    v34 = (uint8x8_t)vcnt_s8(v33);
    v34.i16[0] = vaddlv_u8(v34);
    if (v34.u32[0] > 1uLL)
    {
      v35 = 0x41E8D6E445F4145;
      if (*(_QWORD *)&v33 <= 0x41E8D6E445F4145uLL)
        v35 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v33;
    }
    else
    {
      v35 = (*(_QWORD *)&v33 - 1) & 0x41E8D6E445F4145;
    }
    v36 = *(_QWORD **)(*v32 + 8 * v35);
    if (!v36)
      goto LABEL_151;
    v37 = (_QWORD *)*v36;
    if (!v37)
      goto LABEL_151;
    if (v34.u32[0] < 2uLL)
    {
      v38 = *(_QWORD *)&v33 - 1;
      while (1)
      {
        v40 = v37[1];
        if (v40 == 0x41E8D6E445F4145)
        {
          if (v37[2] == 0x41E8D6E445F4145)
            goto LABEL_54;
        }
        else if ((v40 & v38) != v35)
        {
          goto LABEL_151;
        }
        v37 = (_QWORD *)*v37;
        if (!v37)
          goto LABEL_151;
      }
    }
    while (1)
    {
      v39 = v37[1];
      if (v39 == 0x41E8D6E445F4145)
        break;
      if (v39 >= *(_QWORD *)&v33)
        v39 %= *(_QWORD *)&v33;
      if (v39 != v35)
        goto LABEL_151;
LABEL_42:
      v37 = (_QWORD *)*v37;
      if (!v37)
        goto LABEL_151;
    }
    if (v37[2] != 0x41E8D6E445F4145)
      goto LABEL_42;
LABEL_54:
    v41 = v37[5];
    if (*(_QWORD *)(v41 + 8) != 0x41E8D6E445F4145)
      goto LABEL_151;
    v42 = *(_QWORD *)(v41 + 32);
    if (!v42)
      goto LABEL_151;
    v43 = *(std::__shared_weak_count **)(v42 + 24);
    v115 = *(_QWORD *)(v42 + 16);
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v46 = **(_QWORD **)(a1 + 8);
    v47 = *(_QWORD **)v46;
    v48 = *(_QWORD **)(v46 + 8);
    if (v47 != v48)
    {
      while (*v47 != 0x41D4E9297E100630)
      {
        v47 += 5;
        if (v47 == v48)
          goto LABEL_70;
      }
    }
    if (v47 == v48)
    {
LABEL_70:
      v49 = 0;
    }
    else
    {
      v49 = (_QWORD *)v47[3];
      v50 = (std::__shared_weak_count *)v47[4];
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
        do
          v53 = __ldaxr(v51);
        while (__stlxr(v53 - 1, v51));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
    }
    v54 = (uint64_t)(v49 + 37);
    v55 = *v23;
    v56 = *v23;
    v57 = v49[50];
    v58 = (v49[51] - v57) >> 3;
    if (v56 >= v58)
    {
LABEL_79:
      v59 = 0;
      if (v56 < v58)
        goto LABEL_83;
      goto LABEL_92;
    }
    v59 = *(_QWORD **)(v57 + 8 * v56);
    if (!v59)
    {
LABEL_82:
      if (v56 >= v58)
        goto LABEL_92;
      goto LABEL_83;
    }
    if (HIDWORD(v55) != HIDWORD(v59))
    {
      v59 = 0;
      goto LABEL_82;
    }
    v60 = v49[53];
    if (v60 + 16 * v59 == v49[54] || v60 == 0)
      goto LABEL_79;
    v69 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v54, v55, v23);
    ++v69[3];
    v59 = *(_QWORD **)(v60 + 16 * v59 + 8);
    v55 = *v23;
    v57 = v49[50];
    v56 = *v23;
    v54 = (uint64_t)(v49 + 37);
    if (v56 >= (v49[51] - v57) >> 3)
      goto LABEL_92;
LABEL_83:
    v62 = *(_QWORD *)(v57 + 8 * v56);
    if (v62 && HIDWORD(v55) == HIDWORD(v62))
    {
      v63 = v49[53];
      v64 = (_QWORD **)v49[54];
      v65 = (_QWORD **)(v63 + 16 * v62);
      if (v65 != v64 && v63 != 0)
      {
        v67 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v54, v55, v23);
        ++v67[3];
        v68 = *v65;
        if (!v43)
          goto LABEL_95;
LABEL_93:
        v70 = (unint64_t *)&v43->__shared_owners_;
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
        goto LABEL_95;
      }
    }
LABEL_92:
    v68 = 0;
    if (v43)
      goto LABEL_93;
LABEL_95:
    if (v115)
    {
      if ((v72 & 1) == 0
      {
        do
          v113 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
        while (__stlxr(v113 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
        gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>(void)::index = v113;
      }
      v73 = v59[1];
      if (v73)
      {
        v74 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>(void)::index;
        v75 = (uint8x8_t)vcnt_s8((int8x8_t)v73);
        v75.i16[0] = vaddlv_u8(v75);
        if (v75.u32[0] > 1uLL)
        {
          v76 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>(void)::index;
          if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>(void)::index >= v73)
            v76 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>(void)::index % v73;
        }
        else
        {
          v76 = (v73 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>(void)::index;
        }
        v77 = *(_QWORD **)(*v59 + 8 * v76);
        if (v77)
        {
          v78 = (_QWORD *)*v77;
          if (v78)
          {
            if (v75.u32[0] < 2uLL)
            {
              v79 = v73 - 1;
              while (1)
              {
                v81 = v78[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>(void)::index == v81)
                {
                  if (v78[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>(void)::index)
                    goto LABEL_118;
                }
                else if ((v81 & v79) != v76)
                {
                  goto LABEL_143;
                }
                v78 = (_QWORD *)*v78;
                if (!v78)
                  goto LABEL_143;
              }
            }
            do
            {
              v80 = v78[1];
              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>(void)::index == v80)
              {
                if (v78[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>(void)::index)
                {
LABEL_118:
                  if ((v82 & 1) == 0)
                  {
                    if ((_DWORD)v114)
                    {
                      md::typeToIntMap(v114);
                    }
                  }
                  if (!qword_1EE5779D0)
                    goto LABEL_178;
                  v83 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                  v83.i16[0] = vaddlv_u8(v83);
                  if (v83.u32[0] > 1uLL)
                  {
                    v84 = v74;
                    if (v74 >= qword_1EE5779D0)
                      v84 = v74 % qword_1EE5779D0;
                  }
                  else
                  {
                    v84 = (qword_1EE5779D0 - 1) & v74;
                  }
                  v85 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v84);
                  if (!v85 || (v86 = *v85) == 0)
LABEL_178:
                    abort();
                  if (v83.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v88 = v86[1];
                      if ((uint64_t *)v74 == v88)
                      {
                        if (v86[2] == (uint64_t *)v74)
                          goto LABEL_139;
                      }
                      else if (((unint64_t)v88 & (qword_1EE5779D0 - 1)) != v84)
                      {
                        goto LABEL_178;
                      }
                      v86 = (uint64_t **)*v86;
                      if (!v86)
                        goto LABEL_178;
                    }
                  }
                  while (1)
                  {
                    v87 = (unint64_t)v86[1];
                    if (v74 == v87)
                    {
                      if (v86[2] == (uint64_t *)v74)
                      {
LABEL_139:
                        v89 = *((int *)v86 + 6);
                        v90 = *((int *)v86 + 7);
                        if ((_DWORD)v89 != -1)
                          ggl::PipelineSetup::setConstantData(v68, v89, v115, 1);
                        if ((_DWORD)v90 != -1)
                          ggl::PipelineSetup::setConstantData(v68, v90, v115, 2);
                        goto LABEL_143;
                      }
                    }
                    else
                    {
                      if (v87 >= qword_1EE5779D0)
                        v87 %= (unint64_t)qword_1EE5779D0;
                      if (v87 != v84)
                        goto LABEL_178;
                    }
                    v86 = (uint64_t **)*v86;
                    if (!v86)
                      goto LABEL_178;
                  }
                }
              }
              else
              {
                if (v80 >= v73)
                  v80 %= v73;
                if (v80 != v76)
                  break;
              }
              v78 = (_QWORD *)*v78;
            }
            while (v78);
          }
        }
      }
    }
LABEL_143:
    if (v43)
    {
      v91 = (unint64_t *)&v43->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
      do
        v93 = __ldaxr(v91);
      while (__stlxr(v93 - 1, v91));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
LABEL_151:
    v94 = v121;
    v10 = *(unint64_t **)(v118 + 32);
    if (++v121 != v10)
    {
      v95 = v119[4];
      v96 = (v119[5] - v95) >> 3;
      v97 = v94 + 2;
      while (1)
      {
        v98 = *((unsigned int *)v97 - 1);
        v99 = v98 >> 7;
        if (v98 >> 7 < v96)
        {
          v100 = *(_QWORD *)(v95 + 8 * v99);
          if (v100)
          {
            v101 = *(unsigned __int16 *)(v100 + 2 * (v98 & 0x7F));
            v103 = v119[7];
            v102 = v119[8];
            if (v101 < (v102 - v103) >> 3)
            {
              v104 = v103 + 8 * v101;
              if (v104 != v102 && *(_DWORD *)(v104 + 4) == (_DWORD)v98)
              {
                v106 = v120[4];
                if (v99 < (v120[5] - v106) >> 3)
                {
                  v107 = *(_QWORD *)(v106 + 8 * v99);
                  if (v107)
                  {
                    v108 = *(unsigned __int16 *)(v107 + 2 * (v98 & 0x7F));
                    v110 = v120[7];
                    v109 = v120[8];
                    if (v108 < (v109 - v110) >> 3)
                    {
                      v111 = v110 + 8 * v108;
                      if (v111 != v109 && *(_DWORD *)(v111 + 4) == (_DWORD)v98)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v121 = v97;
        v20 = v97++ == v10;
        if (v20)
          goto LABEL_9;
      }
      v10 = v97 - 1;
    }
LABEL_9:
    if (v117 != v10)
      continue;
    break;
  }
LABEL_177:
  *v11 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_19F6C40CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
    v5 = (unint64_t *)&v1->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x4A991B37E344929BLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x4A991B37E344929BLL;
      if (*(_QWORD *)&v3 <= 0x4A991B37E344929BuLL)
        v5 = 0x4A991B37E344929BuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x4A991B37E344929BLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x4A991B37E344929BLL)
            {
              if (v7[2] == 0x4A991B37E344929BLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x4A991B37E344929BLL)
          {
            if (v7[2] == 0x4A991B37E344929BLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>]";
  *(_QWORD *)(v11 + 24) = 101;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273B48;
  *(_QWORD *)(v11 + 8) = 0x4A991B37E344929BLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x4A991B37E344929BuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x4A991B37E344929BLL;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>]";
  v15[2] = 101;
  gdc::Registry::_registerStorageDataSignals(a1, 0x4A991B37E344929BLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6C4374(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSunMatrixData>(md::ita::AssignStyleSunMatrixData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleSunMatrixData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSunMatrixData>(md::ita::AssignStyleSunMatrixData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSunMatrixData>(md::ita::AssignStyleSunMatrixData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleSunMatrixData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSunMatrixData>(md::ita::AssignStyleSunMatrixData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285108;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSunMatrixData>(md::ita::AssignStyleSunMatrixData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleSunMatrixData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSunMatrixData>(md::ita::AssignStyleSunMatrixData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285108;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSunMatrixData>(md::ita::AssignStyleSunMatrixData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleSunMatrixData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSunMatrixData>(md::ita::AssignStyleSunMatrixData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6C4588(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSunMatrixData>(md::ita::AssignStyleSunMatrixData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleSunMatrixData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSunMatrixData>(md::ita::AssignStyleSunMatrixData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSunMatrixData>(md::ita::AssignStyleSunMatrixData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleSunMatrixData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSunMatrixData>(md::ita::AssignStyleSunMatrixData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285150;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSunMatrixData>(md::ita::AssignStyleSunMatrixData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleSunMatrixData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSunMatrixData>(md::ita::AssignStyleSunMatrixData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285150;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSunMatrixData>(md::ita::AssignStyleSunMatrixData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleSunMatrixData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSunMatrixData>(md::ita::AssignStyleSunMatrixData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x7EE4E2CB5D22239;
  result[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>]";
  result[2] = 90;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleSunMatrixData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleSunMatrixData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleSunMatrixData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleSunMatrixData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277128;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleSunMatrixData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleSunMatrixData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277128;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleSunMatrixData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleSunMatrixData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  _QWORD *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD **v52;
  _QWORD **v53;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned __int8 v60;
  unint64_t v61;
  unint64_t v62;
  uint8x8_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint8x8_t v71;
  unint64_t v72;
  uint64_t ***v73;
  uint64_t **v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v98;
  md *v99;
  unint64_t *v100;
  uint64_t v101[4];
  unint64_t *v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t *v106;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v103, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v101, v9, v4, v6, *(_QWORD *)(v9 + 32));
  if (v102 != v106)
  {
    v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v100 = v11;
    while (1)
    {
      *v11 = *v10;
      v12 = *v10;
      v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (v14 = *(_QWORD *)(v13 + 8 * (v12 >> 39))) != 0
        && (v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            v17 = v6[7],
            v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (v20 = *(_DWORD *)(v19 + 4) == (_DWORD)v18)
          : (v20 = 0),
            v20))
      {
        v21 = v6[11];
        v22 = v6[10] + 8 * v15;
      }
      else
      {
        v21 = v6[11];
        v22 = v21;
      }
      if (v22 == v21)
        v23 = 0;
      else
        v23 = (unint64_t *)v22;
      v24 = ***(uint64_t ****)(a1 + 8);
      if (v24 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v24 != 0xC94DD89A7B09BE9CLL)
      {
        v25 = v24 + 5;
        do
        {
          v26 = *v25;
          v25 += 5;
        }
        while (v26 != 0xC94DD89A7B09BE9CLL);
        v24 = v25 - 5;
      }
      v27 = v24[3];
      v28 = (std::__shared_weak_count *)v24[4];
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(p_shared_owners);
        while (__stxr(v30 + 1, p_shared_owners));
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v32 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27) + 1248);
      v33 = **(_QWORD **)(a1 + 8);
      v34 = *(_QWORD **)v33;
      v35 = *(_QWORD **)(v33 + 8);
      if (v34 != v35)
      {
        while (*v34 != 0x41D4E9297E100630)
        {
          v34 += 5;
          if (v34 == v35)
            goto LABEL_43;
        }
      }
      if (v34 == v35)
      {
LABEL_43:
        v37 = 0;
      }
      else
      {
        v37 = (_QWORD *)v34[3];
        v36 = (std::__shared_weak_count *)v34[4];
        if (v36)
        {
          v38 = (unint64_t *)&v36->__shared_owners_;
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
          do
            v40 = __ldaxr(v38);
          while (__stlxr(v40 - 1, v38));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      v41 = (uint64_t)(v37 + 37);
      v42 = *v23;
      v43 = *v23;
      v44 = v37[50];
      v45 = (v37[51] - v44) >> 3;
      if (v43 < v45
        && (v46 = *(_QWORD *)(v44 + 8 * v43)) != 0
        && HIDWORD(v42) == HIDWORD(v46)
        && ((v47 = v37[53], v47 + 16 * v46 != v37[54]) ? (v48 = v47 == 0) : (v48 = 1), !v48))
      {
        v57 = *(_QWORD *)(v44 + 8 * v43);
        v58 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v37 + 37), v42, v23);
        ++v58[3];
        v59 = v47 + 16 * v57;
        v11 = v100;
        v49 = *(_QWORD **)(v59 + 8);
        v42 = *v23;
        v44 = v37[50];
        v43 = *v23;
        if (v43 >= (v37[51] - v44) >> 3)
          goto LABEL_63;
      }
      else
      {
        v49 = 0;
        if (v43 >= v45)
          goto LABEL_63;
      }
      v50 = *(_QWORD *)(v44 + 8 * v43);
      if (v50 && HIDWORD(v42) == HIDWORD(v50))
      {
        v51 = v37[53];
        v52 = (_QWORD **)v37[54];
        v53 = (_QWORD **)(v51 + 16 * v50);
        if (v53 != v52 && v51 != 0)
        {
          v55 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v41, v42, v23);
          ++v55[3];
          v56 = *v53;
          if (!v32)
            goto LABEL_111;
          goto LABEL_64;
        }
      }
LABEL_63:
      v56 = 0;
      if (!v32)
        goto LABEL_111;
LABEL_64:
      if ((v60 & 1) == 0
      {
        do
          v98 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
        while (__stlxr(v98 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
        gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>(void)::index = v98;
        v11 = v100;
      }
      v61 = v49[1];
      if (v61)
      {
        v62 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>(void)::index;
        v63 = (uint8x8_t)vcnt_s8((int8x8_t)v61);
        v63.i16[0] = vaddlv_u8(v63);
        if (v63.u32[0] > 1uLL)
        {
          v64 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>(void)::index;
          if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>(void)::index >= v61)
            v64 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>(void)::index % v61;
        }
        else
        {
          v64 = (v61 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>(void)::index;
        }
        v65 = *(_QWORD **)(*v49 + 8 * v64);
        if (v65)
        {
          v66 = (_QWORD *)*v65;
          if (v66)
          {
            if (v63.u32[0] < 2uLL)
            {
              v67 = v61 - 1;
              while (1)
              {
                v69 = v66[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>(void)::index == v69)
                {
                  if (v66[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>(void)::index)
                    goto LABEL_86;
                }
                else if ((v69 & v67) != v64)
                {
                  goto LABEL_111;
                }
                v66 = (_QWORD *)*v66;
                if (!v66)
                  goto LABEL_111;
              }
            }
            do
            {
              v68 = v66[1];
              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>(void)::index == v68)
              {
                if (v66[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>(void)::index)
                {
LABEL_86:
                  if ((v70 & 1) == 0)
                  {
                    if ((_DWORD)v99)
                    {
                      md::typeToIntMap(v99);
                      v11 = v100;
                    }
                  }
                  if (!qword_1EE5779D0)
                    goto LABEL_138;
                  v71 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                  v71.i16[0] = vaddlv_u8(v71);
                  if (v71.u32[0] > 1uLL)
                  {
                    v72 = v62;
                    if (v62 >= qword_1EE5779D0)
                      v72 = v62 % qword_1EE5779D0;
                  }
                  else
                  {
                    v72 = (qword_1EE5779D0 - 1) & v62;
                  }
                  v73 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v72);
                  if (!v73 || (v74 = *v73) == 0)
LABEL_138:
                    abort();
                  if (v71.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v76 = v74[1];
                      if ((uint64_t *)v62 == v76)
                      {
                        if (v74[2] == (uint64_t *)v62)
                          goto LABEL_107;
                      }
                      else if (((unint64_t)v76 & (qword_1EE5779D0 - 1)) != v72)
                      {
                        goto LABEL_138;
                      }
                      v74 = (uint64_t **)*v74;
                      if (!v74)
                        goto LABEL_138;
                    }
                  }
                  while (1)
                  {
                    v75 = (unint64_t)v74[1];
                    if (v62 == v75)
                    {
                      if (v74[2] == (uint64_t *)v62)
                      {
LABEL_107:
                        v77 = *((int *)v74 + 6);
                        v78 = *((int *)v74 + 7);
                        if ((_DWORD)v77 != -1)
                          ggl::PipelineSetup::setConstantData(v56, v77, v32, 1);
                        if ((_DWORD)v78 != -1)
                          ggl::PipelineSetup::setConstantData(v56, v78, v32, 2);
                        goto LABEL_111;
                      }
                    }
                    else
                    {
                      if (v75 >= qword_1EE5779D0)
                        v75 %= (unint64_t)qword_1EE5779D0;
                      if (v75 != v72)
                        goto LABEL_138;
                    }
                    v74 = (uint64_t **)*v74;
                    if (!v74)
                      goto LABEL_138;
                  }
                }
              }
              else
              {
                if (v68 >= v61)
                  v68 %= v61;
                if (v68 != v64)
                  break;
              }
              v66 = (_QWORD *)*v66;
            }
            while (v66);
          }
        }
      }
LABEL_111:
      v79 = v106;
      v10 = *(unint64_t **)(v103 + 32);
      if (++v106 != v10)
      {
        v80 = v104[4];
        v81 = (v104[5] - v80) >> 3;
        v82 = v79 + 2;
        while (1)
        {
          v83 = *((unsigned int *)v82 - 1);
          v84 = v83 >> 7;
          if (v83 >> 7 < v81)
          {
            v85 = *(_QWORD *)(v80 + 8 * v84);
            if (v85)
            {
              v86 = *(unsigned __int16 *)(v85 + 2 * (v83 & 0x7F));
              v88 = v104[7];
              v87 = v104[8];
              if (v86 < (v87 - v88) >> 3)
              {
                v89 = v88 + 8 * v86;
                if (v89 != v87 && *(_DWORD *)(v89 + 4) == (_DWORD)v83)
                {
                  v91 = v105[4];
                  if (v84 < (v105[5] - v91) >> 3)
                  {
                    v92 = *(_QWORD *)(v91 + 8 * v84);
                    if (v92)
                    {
                      v93 = *(unsigned __int16 *)(v92 + 2 * (v83 & 0x7F));
                      v95 = v105[7];
                      v94 = v105[8];
                      if (v93 < (v94 - v95) >> 3)
                      {
                        v96 = v95 + 8 * v93;
                        if (v96 != v94 && *(_DWORD *)(v96 + 4) == (_DWORD)v83)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v106 = v82;
          v20 = v82++ == v10;
          if (v20)
            goto LABEL_9;
        }
        v10 = v82 - 1;
      }
LABEL_9:
      if (v102 == v10)
        goto LABEL_137;
    }
  }
  v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_137:
  *v11 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_19F6C4DC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x7EE4E2CB5D22239;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x7EE4E2CB5D22239;
      if (*(_QWORD *)&v3 <= 0x7EE4E2CB5D22239uLL)
        v5 = 0x7EE4E2CB5D22239uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x7EE4E2CB5D22239;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x7EE4E2CB5D22239)
            {
              if (v7[2] == 0x7EE4E2CB5D22239)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x7EE4E2CB5D22239)
          {
            if (v7[2] == 0x7EE4E2CB5D22239)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>]";
  *(_QWORD *)(v11 + 24) = 90;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273848;
  *(_QWORD *)(v11 + 8) = 0x7EE4E2CB5D22239;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x7EE4E2CB5D22239uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x7EE4E2CB5D22239;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>]";
  v15[2] = 90;
  gdc::Registry::_registerStorageDataSignals(a1, 0x7EE4E2CB5D22239, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6C4FEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTransitionToFlatData>(md::ita::AssignStyleTransitionToFlatData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleTransitionToFlatData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTransitionToFlatData>(md::ita::AssignStyleTransitionToFlatData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTransitionToFlatData>(md::ita::AssignStyleTransitionToFlatData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleTransitionToFlatData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTransitionToFlatData>(md::ita::AssignStyleTransitionToFlatData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287508;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTransitionToFlatData>(md::ita::AssignStyleTransitionToFlatData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleTransitionToFlatData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTransitionToFlatData>(md::ita::AssignStyleTransitionToFlatData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287508;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTransitionToFlatData>(md::ita::AssignStyleTransitionToFlatData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleTransitionToFlatData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTransitionToFlatData>(md::ita::AssignStyleTransitionToFlatData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6C5200(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTransitionToFlatData>(md::ita::AssignStyleTransitionToFlatData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleTransitionToFlatData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTransitionToFlatData>(md::ita::AssignStyleTransitionToFlatData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTransitionToFlatData>(md::ita::AssignStyleTransitionToFlatData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleTransitionToFlatData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTransitionToFlatData>(md::ita::AssignStyleTransitionToFlatData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287550;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTransitionToFlatData>(md::ita::AssignStyleTransitionToFlatData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleTransitionToFlatData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTransitionToFlatData>(md::ita::AssignStyleTransitionToFlatData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287550;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTransitionToFlatData>(md::ita::AssignStyleTransitionToFlatData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleTransitionToFlatData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTransitionToFlatData>(md::ita::AssignStyleTransitionToFlatData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x4ED66455113F81E3;
  result[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>]";
  result[2] = 97;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleTransitionToFlatData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleTransitionToFlatData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleTransitionToFlatData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleTransitionToFlatData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278328;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleTransitionToFlatData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleTransitionToFlatData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278328;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleTransitionToFlatData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleTransitionToFlatData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  _QWORD *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD **v52;
  _QWORD **v53;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned __int8 v60;
  unint64_t v61;
  unint64_t v62;
  uint8x8_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint8x8_t v71;
  unint64_t v72;
  uint64_t ***v73;
  uint64_t **v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v98;
  md *v99;
  unint64_t *v100;
  uint64_t v101[4];
  unint64_t *v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t *v106;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v103, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v101, v9, v4, v6, *(_QWORD *)(v9 + 32));
  if (v102 != v106)
  {
    v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v100 = v11;
    while (1)
    {
      *v11 = *v10;
      v12 = *v10;
      v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (v14 = *(_QWORD *)(v13 + 8 * (v12 >> 39))) != 0
        && (v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            v17 = v6[7],
            v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (v20 = *(_DWORD *)(v19 + 4) == (_DWORD)v18)
          : (v20 = 0),
            v20))
      {
        v21 = v6[11];
        v22 = v6[10] + 8 * v15;
      }
      else
      {
        v21 = v6[11];
        v22 = v21;
      }
      if (v22 == v21)
        v23 = 0;
      else
        v23 = (unint64_t *)v22;
      v24 = ***(uint64_t ****)(a1 + 8);
      if (v24 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v24 != 0xC94DD89A7B09BE9CLL)
      {
        v25 = v24 + 5;
        do
        {
          v26 = *v25;
          v25 += 5;
        }
        while (v26 != 0xC94DD89A7B09BE9CLL);
        v24 = v25 - 5;
      }
      v27 = v24[3];
      v28 = (std::__shared_weak_count *)v24[4];
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(p_shared_owners);
        while (__stxr(v30 + 1, p_shared_owners));
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v32 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27) + 1264);
      v33 = **(_QWORD **)(a1 + 8);
      v34 = *(_QWORD **)v33;
      v35 = *(_QWORD **)(v33 + 8);
      if (v34 != v35)
      {
        while (*v34 != 0x41D4E9297E100630)
        {
          v34 += 5;
          if (v34 == v35)
            goto LABEL_43;
        }
      }
      if (v34 == v35)
      {
LABEL_43:
        v37 = 0;
      }
      else
      {
        v37 = (_QWORD *)v34[3];
        v36 = (std::__shared_weak_count *)v34[4];
        if (v36)
        {
          v38 = (unint64_t *)&v36->__shared_owners_;
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
          do
            v40 = __ldaxr(v38);
          while (__stlxr(v40 - 1, v38));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      v41 = (uint64_t)(v37 + 37);
      v42 = *v23;
      v43 = *v23;
      v44 = v37[50];
      v45 = (v37[51] - v44) >> 3;
      if (v43 < v45
        && (v46 = *(_QWORD *)(v44 + 8 * v43)) != 0
        && HIDWORD(v42) == HIDWORD(v46)
        && ((v47 = v37[53], v47 + 16 * v46 != v37[54]) ? (v48 = v47 == 0) : (v48 = 1), !v48))
      {
        v57 = *(_QWORD *)(v44 + 8 * v43);
        v58 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v37 + 37), v42, v23);
        ++v58[3];
        v59 = v47 + 16 * v57;
        v11 = v100;
        v49 = *(_QWORD **)(v59 + 8);
        v42 = *v23;
        v44 = v37[50];
        v43 = *v23;
        if (v43 >= (v37[51] - v44) >> 3)
          goto LABEL_63;
      }
      else
      {
        v49 = 0;
        if (v43 >= v45)
          goto LABEL_63;
      }
      v50 = *(_QWORD *)(v44 + 8 * v43);
      if (v50 && HIDWORD(v42) == HIDWORD(v50))
      {
        v51 = v37[53];
        v52 = (_QWORD **)v37[54];
        v53 = (_QWORD **)(v51 + 16 * v50);
        if (v53 != v52 && v51 != 0)
        {
          v55 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v41, v42, v23);
          ++v55[3];
          v56 = *v53;
          if (!v32)
            goto LABEL_111;
          goto LABEL_64;
        }
      }
LABEL_63:
      v56 = 0;
      if (!v32)
        goto LABEL_111;
LABEL_64:
      if ((v60 & 1) == 0
      {
        do
          v98 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
        while (__stlxr(v98 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
        gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>(void)::index = v98;
        v11 = v100;
      }
      v61 = v49[1];
      if (v61)
      {
        v62 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>(void)::index;
        v63 = (uint8x8_t)vcnt_s8((int8x8_t)v61);
        v63.i16[0] = vaddlv_u8(v63);
        if (v63.u32[0] > 1uLL)
        {
          v64 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>(void)::index;
          if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>(void)::index >= v61)
            v64 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>(void)::index % v61;
        }
        else
        {
          v64 = (v61 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>(void)::index;
        }
        v65 = *(_QWORD **)(*v49 + 8 * v64);
        if (v65)
        {
          v66 = (_QWORD *)*v65;
          if (v66)
          {
            if (v63.u32[0] < 2uLL)
            {
              v67 = v61 - 1;
              while (1)
              {
                v69 = v66[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>(void)::index == v69)
                {
                  if (v66[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>(void)::index)
                    goto LABEL_86;
                }
                else if ((v69 & v67) != v64)
                {
                  goto LABEL_111;
                }
                v66 = (_QWORD *)*v66;
                if (!v66)
                  goto LABEL_111;
              }
            }
            do
            {
              v68 = v66[1];
              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>(void)::index == v68)
              {
                if (v66[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>(void)::index)
                {
LABEL_86:
                  if ((v70 & 1) == 0)
                  {
                    if ((_DWORD)v99)
                    {
                      md::typeToIntMap(v99);
                      v11 = v100;
                    }
                  }
                  if (!qword_1EE5779D0)
                    goto LABEL_138;
                  v71 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                  v71.i16[0] = vaddlv_u8(v71);
                  if (v71.u32[0] > 1uLL)
                  {
                    v72 = v62;
                    if (v62 >= qword_1EE5779D0)
                      v72 = v62 % qword_1EE5779D0;
                  }
                  else
                  {
                    v72 = (qword_1EE5779D0 - 1) & v62;
                  }
                  v73 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v72);
                  if (!v73 || (v74 = *v73) == 0)
LABEL_138:
                    abort();
                  if (v71.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v76 = v74[1];
                      if ((uint64_t *)v62 == v76)
                      {
                        if (v74[2] == (uint64_t *)v62)
                          goto LABEL_107;
                      }
                      else if (((unint64_t)v76 & (qword_1EE5779D0 - 1)) != v72)
                      {
                        goto LABEL_138;
                      }
                      v74 = (uint64_t **)*v74;
                      if (!v74)
                        goto LABEL_138;
                    }
                  }
                  while (1)
                  {
                    v75 = (unint64_t)v74[1];
                    if (v62 == v75)
                    {
                      if (v74[2] == (uint64_t *)v62)
                      {
LABEL_107:
                        v77 = *((int *)v74 + 6);
                        v78 = *((int *)v74 + 7);
                        if ((_DWORD)v77 != -1)
                          ggl::PipelineSetup::setConstantData(v56, v77, v32, 1);
                        if ((_DWORD)v78 != -1)
                          ggl::PipelineSetup::setConstantData(v56, v78, v32, 2);
                        goto LABEL_111;
                      }
                    }
                    else
                    {
                      if (v75 >= qword_1EE5779D0)
                        v75 %= (unint64_t)qword_1EE5779D0;
                      if (v75 != v72)
                        goto LABEL_138;
                    }
                    v74 = (uint64_t **)*v74;
                    if (!v74)
                      goto LABEL_138;
                  }
                }
              }
              else
              {
                if (v68 >= v61)
                  v68 %= v61;
                if (v68 != v64)
                  break;
              }
              v66 = (_QWORD *)*v66;
            }
            while (v66);
          }
        }
      }
LABEL_111:
      v79 = v106;
      v10 = *(unint64_t **)(v103 + 32);
      if (++v106 != v10)
      {
        v80 = v104[4];
        v81 = (v104[5] - v80) >> 3;
        v82 = v79 + 2;
        while (1)
        {
          v83 = *((unsigned int *)v82 - 1);
          v84 = v83 >> 7;
          if (v83 >> 7 < v81)
          {
            v85 = *(_QWORD *)(v80 + 8 * v84);
            if (v85)
            {
              v86 = *(unsigned __int16 *)(v85 + 2 * (v83 & 0x7F));
              v88 = v104[7];
              v87 = v104[8];
              if (v86 < (v87 - v88) >> 3)
              {
                v89 = v88 + 8 * v86;
                if (v89 != v87 && *(_DWORD *)(v89 + 4) == (_DWORD)v83)
                {
                  v91 = v105[4];
                  if (v84 < (v105[5] - v91) >> 3)
                  {
                    v92 = *(_QWORD *)(v91 + 8 * v84);
                    if (v92)
                    {
                      v93 = *(unsigned __int16 *)(v92 + 2 * (v83 & 0x7F));
                      v95 = v105[7];
                      v94 = v105[8];
                      if (v93 < (v94 - v95) >> 3)
                      {
                        v96 = v95 + 8 * v93;
                        if (v96 != v94 && *(_DWORD *)(v96 + 4) == (_DWORD)v83)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v106 = v82;
          v20 = v82++ == v10;
          if (v20)
            goto LABEL_9;
        }
        v10 = v82 - 1;
      }
LABEL_9:
      if (v102 == v10)
        goto LABEL_137;
    }
  }
  v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_137:
  *v11 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_19F6C5A40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x4ED66455113F81E3;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x4ED66455113F81E3;
      if (*(_QWORD *)&v3 <= 0x4ED66455113F81E3uLL)
        v5 = 0x4ED66455113F81E3uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x4ED66455113F81E3;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x4ED66455113F81E3)
            {
              if (v7[2] == 0x4ED66455113F81E3)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x4ED66455113F81E3)
          {
            if (v7[2] == 0x4ED66455113F81E3)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>]";
  *(_QWORD *)(v11 + 24) = 97;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273A58;
  *(_QWORD *)(v11 + 8) = 0x4ED66455113F81E3;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x4ED66455113F81E3uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x4ED66455113F81E3;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>]";
  v15[2] = 97;
  gdc::Registry::_registerStorageDataSignals(a1, 0x4ED66455113F81E3, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6C5C64(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileElevatedStrokeData>(md::ita::AssignTileElevatedStrokeData &&)::{lambda(void)#2},std::allocator<md::ita::AssignTileElevatedStrokeData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileElevatedStrokeData>(md::ita::AssignTileElevatedStrokeData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileElevatedStrokeData>(md::ita::AssignTileElevatedStrokeData &&)::{lambda(void)#2},std::allocator<md::ita::AssignTileElevatedStrokeData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileElevatedStrokeData>(md::ita::AssignTileElevatedStrokeData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42864B8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileElevatedStrokeData>(md::ita::AssignTileElevatedStrokeData &&)::{lambda(void)#2},std::allocator<md::ita::AssignTileElevatedStrokeData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileElevatedStrokeData>(md::ita::AssignTileElevatedStrokeData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42864B8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileElevatedStrokeData>(md::ita::AssignTileElevatedStrokeData &&)::{lambda(void)#2},std::allocator<md::ita::AssignTileElevatedStrokeData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileElevatedStrokeData>(md::ita::AssignTileElevatedStrokeData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6C5E78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileElevatedStrokeData>(md::ita::AssignTileElevatedStrokeData &&)::{lambda(void)#1},std::allocator<md::ita::AssignTileElevatedStrokeData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileElevatedStrokeData>(md::ita::AssignTileElevatedStrokeData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileElevatedStrokeData>(md::ita::AssignTileElevatedStrokeData &&)::{lambda(void)#1},std::allocator<md::ita::AssignTileElevatedStrokeData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileElevatedStrokeData>(md::ita::AssignTileElevatedStrokeData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286500;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileElevatedStrokeData>(md::ita::AssignTileElevatedStrokeData &&)::{lambda(void)#1},std::allocator<md::ita::AssignTileElevatedStrokeData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileElevatedStrokeData>(md::ita::AssignTileElevatedStrokeData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286500;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileElevatedStrokeData>(md::ita::AssignTileElevatedStrokeData &&)::{lambda(void)#1},std::allocator<md::ita::AssignTileElevatedStrokeData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileElevatedStrokeData>(md::ita::AssignTileElevatedStrokeData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xB3E1F50BFD41E071;
  v2[1] = "md::ls::ElevatedStrokeConstantDataHandle]";
  *(_QWORD *)&result = 40;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4150;
  v2[4] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>]";
  v2[5] = 90;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTileElevatedStrokeData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTileElevatedStrokeData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTileElevatedStrokeData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTileElevatedStrokeData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277B00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTileElevatedStrokeData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTileElevatedStrokeData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277B00;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTileElevatedStrokeData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTileElevatedStrokeData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD **v53;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t *v88;
  _QWORD *v90;
  uint64_t v91;
  unsigned __int8 v92;
  unint64_t v93;
  unint64_t v94;
  uint8x8_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unsigned __int8 v104;
  uint8x8_t v105;
  unint64_t v106;
  uint64_t ***v107;
  uint64_t **v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  md *v114;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  unint64_t v122;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::ElevatedStrokeConstantDataHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>>(v2);
  v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v6 = (_QWORD *)v5;
  v7 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v7 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v5 + 32);
  v117 = v7;
  v118 = v3;
  v119 = (_QWORD *)v4;
  v120 = (_QWORD *)v5;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v121 = v8;
  if (v9 == v8)
  {
    v10 = a1;
  }
  else
  {
    v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v117))
    {
      v11 = v8 + 1;
      do
      {
        v8 = v11;
        v121 = v11;
        if (v11 == v9)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v117);
        v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v116 = result;
    while (1)
    {
      *result = *v8;
      v14 = *v8;
      v15 = HIDWORD(*v8);
      v16 = *v8 >> 39;
      v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            v21 = v3[7],
            v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
      {
        v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        v24 = (unint64_t *)v3[11];
      }
      v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            v29 = v6[7],
            v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
      {
        v32 = v6[11];
        v33 = v6[10] + 8 * v27;
      }
      else
      {
        v32 = v6[11];
        v33 = v32;
      }
      if (v33 == v32)
        v34 = 0;
      else
        v34 = (unint64_t *)v33;
      v35 = **(_QWORD **)(v10 + 8);
      v36 = *(_QWORD **)v35;
      v37 = *(_QWORD **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37)
            goto LABEL_45;
        }
      }
      if (v36 == v37)
      {
LABEL_45:
        v38 = 0;
      }
      else
      {
        v38 = (_QWORD *)v36[3];
        v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldxr(p_shared_owners);
          while (__stxr(v41 + 1, p_shared_owners));
          do
            v42 = __ldaxr(p_shared_owners);
          while (__stlxr(v42 - 1, p_shared_owners));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      v43 = *v34;
      v44 = *v34;
      v45 = v38[50];
      v46 = (v38[51] - v45) >> 3;
      if (v44 < v46
        && (v47 = *(_QWORD *)(v45 + 8 * v44)) != 0
        && HIDWORD(v43) == HIDWORD(v47)
        && ((v48 = v38[53], v48 + 16 * v47 != v38[54]) ? (v49 = v48 == 0) : (v49 = 1), !v49))
      {
        v55 = *(_QWORD *)(v45 + 8 * v44);
        v56 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v56[3];
        v57 = v48 + 16 * v55;
        v10 = a1;
        v50 = *(_QWORD **)(v57 + 8);
        v43 = *v34;
        v45 = v38[50];
        v44 = *v34;
        if (v44 >= (v38[51] - v45) >> 3)
        {
LABEL_66:
          v98 = 0;
          goto LABEL_67;
        }
      }
      else
      {
        v50 = 0;
        if (v44 >= v46)
          goto LABEL_66;
      }
      v51 = *(_QWORD *)(v45 + 8 * v44);
      if (!v51 || HIDWORD(v43) != HIDWORD(v51))
        goto LABEL_66;
      v52 = v38[53];
      v53 = (_QWORD **)(v52 + 16 * v51);
      if (v53 == (_QWORD **)v38[54] || v52 == 0)
      {
        v98 = 0;
      }
      else
      {
        v97 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v97[3];
        v98 = *v53;
      }
      v10 = a1;
LABEL_67:
      v58 = *v24;
      v122 = v58;
      v59 = v38[834];
      if (v58 < (unint64_t)((v38[835] - v59) >> 3))
      {
        v60 = *(_QWORD *)(v59 + 8 * v58);
        if (v60 && HIDWORD(v58) == HIDWORD(v60))
        {
          v87 = v38[837];
          v88 = (uint64_t *)(v87 + 24 * v60);
          if (v88 != (uint64_t *)v38[838] && v87 != 0)
          {
            v90 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>> const&>,std::tuple<>>((uint64_t)(v38 + 821), v58, &v122);
            ++v90[3];
            v91 = *v88;
            if (v91)
            {
              if ((v92 & 1) == 0
              {
                do
                  v113 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
                while (__stlxr(v113 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
                gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>(void)::index = v113;
                v10 = a1;
              }
              v93 = v50[1];
              if (v93)
              {
                v94 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>(void)::index;
                v95 = (uint8x8_t)vcnt_s8((int8x8_t)v93);
                v95.i16[0] = vaddlv_u8(v95);
                if (v95.u32[0] > 1uLL)
                {
                  v96 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>(void)::index;
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>(void)::index >= v93)
                    v96 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>(void)::index % v93;
                }
                else
                {
                  v96 = (v93 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>(void)::index;
                }
                v99 = *(_QWORD **)(*v50 + 8 * v96);
                if (v99)
                {
                  v100 = (_QWORD *)*v99;
                  if (v100)
                  {
                    if (v95.u32[0] < 2uLL)
                    {
                      v101 = v93 - 1;
                      while (1)
                      {
                        v103 = v100[1];
                        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>(void)::index == v103)
                        {
                          if (v100[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>(void)::index)
                            goto LABEL_130;
                        }
                        else if ((v103 & v101) != v96)
                        {
                          goto LABEL_72;
                        }
                        v100 = (_QWORD *)*v100;
                        if (!v100)
                          goto LABEL_72;
                      }
                    }
                    do
                    {
                      v102 = v100[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>(void)::index == v102)
                      {
                        if (v100[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>(void)::index)
                        {
LABEL_130:
                          if ((v104 & 1) == 0)
                          {
                            if ((_DWORD)v114)
                            {
                              md::typeToIntMap(v114);
                              v10 = a1;
                            }
                          }
                          if (!qword_1EE5779D0)
                            goto LABEL_162;
                          v105 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                          v105.i16[0] = vaddlv_u8(v105);
                          if (v105.u32[0] > 1uLL)
                          {
                            v106 = v94;
                            if (v94 >= qword_1EE5779D0)
                              v106 = v94 % qword_1EE5779D0;
                          }
                          else
                          {
                            v106 = (qword_1EE5779D0 - 1) & v94;
                          }
                          v107 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v106);
                          if (!v107 || (v108 = *v107) == 0)
LABEL_162:
                            abort();
                          if (v105.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              v110 = v108[1];
                              if ((uint64_t *)v94 == v110)
                              {
                                if (v108[2] == (uint64_t *)v94)
                                  goto LABEL_151;
                              }
                              else if (((unint64_t)v110 & (qword_1EE5779D0 - 1)) != v106)
                              {
                                goto LABEL_162;
                              }
                              v108 = (uint64_t **)*v108;
                              if (!v108)
                                goto LABEL_162;
                            }
                          }
                          while (1)
                          {
                            v109 = (unint64_t)v108[1];
                            if (v94 == v109)
                            {
                              if (v108[2] == (uint64_t *)v94)
                              {
LABEL_151:
                                v111 = *((int *)v108 + 6);
                                v112 = *((int *)v108 + 7);
                                if ((_DWORD)v111 != -1)
                                  ggl::PipelineSetup::setConstantData(v98, v111, v91, 1);
                                if ((_DWORD)v112 != -1)
                                  ggl::PipelineSetup::setConstantData(v98, v112, v91, 2);
                                goto LABEL_72;
                              }
                            }
                            else
                            {
                              if (v109 >= qword_1EE5779D0)
                                v109 %= (unint64_t)qword_1EE5779D0;
                              if (v109 != v106)
                                goto LABEL_162;
                            }
                            v108 = (uint64_t **)*v108;
                            if (!v108)
                              goto LABEL_162;
                          }
                        }
                      }
                      else
                      {
                        if (v102 >= v93)
                          v102 %= v93;
                        if (v102 != v96)
                          break;
                      }
                      v100 = (_QWORD *)*v100;
                    }
                    while (v100);
                  }
                }
              }
            }
          }
        }
      }
LABEL_72:
      v8 = (_QWORD *)v117[4];
      v62 = v121 + 1;
      v121 = v62;
      if (v62 == v8)
      {
        result = v116;
        if (v9 == v8)
          goto LABEL_161;
      }
      else
      {
        v63 = v118[4];
        result = v116;
        do
        {
          v64 = *((unsigned int *)v62 + 1);
          v65 = v64 >> 7;
          if (v64 >> 7 < (v118[5] - v63) >> 3)
          {
            v66 = *(_QWORD *)(v63 + 8 * v65);
            if (v66)
            {
              v67 = v64 & 0x7F;
              v68 = *(unsigned __int16 *)(v66 + 2 * v67);
              v69 = v118[7];
              v70 = v118[8];
              if (v68 < (v70 - v69) >> 3)
              {
                v71 = v69 + 8 * v68;
                if (v71 != v70 && *(_DWORD *)(v71 + 4) == (_DWORD)v64)
                {
                  v73 = v119[4];
                  if (v65 < (v119[5] - v73) >> 3)
                  {
                    v74 = *(_QWORD *)(v73 + 8 * v65);
                    if (v74)
                    {
                      v75 = *(unsigned __int16 *)(v74 + 2 * v67);
                      v76 = v119[7];
                      v77 = v119[8];
                      if (v75 < (v77 - v76) >> 3)
                      {
                        v78 = v76 + 8 * v75;
                        if (v78 != v77 && *(_DWORD *)(v78 + 4) == (_DWORD)v64)
                        {
                          v80 = v120[4];
                          if (v65 < (v120[5] - v80) >> 3)
                          {
                            v81 = *(_QWORD *)(v80 + 8 * v65);
                            if (v81)
                            {
                              v82 = *(unsigned __int16 *)(v81 + 2 * v67);
                              v84 = v120[7];
                              v83 = v120[8];
                              if (v82 < (v83 - v84) >> 3)
                              {
                                v85 = v84 + 8 * v82;
                                if (*(_DWORD *)(v85 + 4) == (_DWORD)v64 && v85 != v83)
                                {
                                  v8 = v62;
                                  goto LABEL_100;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v62;
        }
        while (v62 != v8);
        v62 = v8;
LABEL_100:
        v121 = v62;
        if (v9 == v8)
          goto LABEL_161;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_161:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v10 + 8) = 0;
  return result;
}

void sub_19F6C6774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xDC9FD09A63403ED3;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xDC9FD09A63403ED3;
      if (*(_QWORD *)&v3 <= 0xDC9FD09A63403ED3)
        v5 = 0xDC9FD09A63403ED3 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xDC9FD09A63403ED3;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xDC9FD09A63403ED3)
            {
              if (v7[2] == 0xDC9FD09A63403ED3)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xDC9FD09A63403ED3)
          {
            if (v7[2] == 0xDC9FD09A63403ED3)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>]";
  *(_QWORD *)(v11 + 24) = 90;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273818;
  *(_QWORD *)(v11 + 8) = 0xDC9FD09A63403ED3;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xDC9FD09A63403ED3, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xDC9FD09A63403ED3;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>]";
  v15[2] = 90;
  gdc::Registry::_registerStorageDataSignals(a1, 0xDC9FD09A63403ED3, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6C6998(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignSRGBBlendStyleData>(md::ita::AssignSRGBBlendStyleData &&)::{lambda(void)#2},std::allocator<md::ita::AssignSRGBBlendStyleData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignSRGBBlendStyleData>(md::ita::AssignSRGBBlendStyleData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignSRGBBlendStyleData>(md::ita::AssignSRGBBlendStyleData &&)::{lambda(void)#2},std::allocator<md::ita::AssignSRGBBlendStyleData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignSRGBBlendStyleData>(md::ita::AssignSRGBBlendStyleData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284F58;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignSRGBBlendStyleData>(md::ita::AssignSRGBBlendStyleData &&)::{lambda(void)#2},std::allocator<md::ita::AssignSRGBBlendStyleData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignSRGBBlendStyleData>(md::ita::AssignSRGBBlendStyleData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284F58;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignSRGBBlendStyleData>(md::ita::AssignSRGBBlendStyleData &&)::{lambda(void)#2},std::allocator<md::ita::AssignSRGBBlendStyleData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignSRGBBlendStyleData>(md::ita::AssignSRGBBlendStyleData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6C6BAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignSRGBBlendStyleData>(md::ita::AssignSRGBBlendStyleData &&)::{lambda(void)#1},std::allocator<md::ita::AssignSRGBBlendStyleData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignSRGBBlendStyleData>(md::ita::AssignSRGBBlendStyleData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignSRGBBlendStyleData>(md::ita::AssignSRGBBlendStyleData &&)::{lambda(void)#1},std::allocator<md::ita::AssignSRGBBlendStyleData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignSRGBBlendStyleData>(md::ita::AssignSRGBBlendStyleData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284FA0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignSRGBBlendStyleData>(md::ita::AssignSRGBBlendStyleData &&)::{lambda(void)#1},std::allocator<md::ita::AssignSRGBBlendStyleData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignSRGBBlendStyleData>(md::ita::AssignSRGBBlendStyleData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284FA0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignSRGBBlendStyleData>(md::ita::AssignSRGBBlendStyleData &&)::{lambda(void)#1},std::allocator<md::ita::AssignSRGBBlendStyleData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignSRGBBlendStyleData>(md::ita::AssignSRGBBlendStyleData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xDF0018B9242ADFDBLL;
  v2[1] = "md::ls::BlendRasterConstantDataHandle]";
  *(_QWORD *)&result = 37;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4160;
  v2[4] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>]";
  v2[5] = 91;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignSRGBBlendStyleData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignSRGBBlendStyleData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignSRGBBlendStyleData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignSRGBBlendStyleData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277050;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignSRGBBlendStyleData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignSRGBBlendStyleData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277050;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignSRGBBlendStyleData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignSRGBBlendStyleData>>,void ()(ecs2::Runtime &)>::operator()(unint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD **v53;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  unint64_t v90;
  uint8x8_t v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD **v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  float v98;
  float v99;
  _BOOL8 v100;
  unint64_t v101;
  unint64_t v102;
  size_t prime;
  unint64_t v104;
  uint8x8_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t v110;
  unsigned __int8 v111;
  unint64_t v112;
  unint64_t v113;
  uint8x8_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unsigned __int8 v121;
  uint8x8_t v122;
  unint64_t v123;
  uint64_t ***v124;
  uint64_t **v125;
  unint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  md *v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;

  v2 = a1;
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::BlendRasterConstantDataHandle>(v3);
  v5 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>>(v3);
  v6 = gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  v7 = (_QWORD *)v6;
  v8 = v4 + 4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v4[8] - v4[7])
    v8 = (_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < v8[4] - v8[3])
    v8 = (_QWORD *)(v6 + 32);
  v137 = v8;
  v138 = v4;
  v139 = (_QWORD *)v5;
  v140 = (_QWORD *)v6;
  v9 = (_QWORD *)v8[3];
  v10 = (_QWORD *)v8[4];
  v141 = v9;
  if (v10 != v9
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v137))
  {
    v11 = v9 + 1;
    do
    {
      v9 = v11;
      v141 = v11;
      if (v11 == v10)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v137);
      v11 = v9 + 1;
    }
    while (!isValid);
  }
  if (v10 == v9)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    goto LABEL_218;
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v135 = v10;
  v136 = result;
  v132 = v2;
  do
  {
LABEL_13:
    *result = *v9;
    v14 = *v9;
    v15 = HIDWORD(*v9);
    v16 = *v9 >> 39;
    v17 = v4[4];
    if (v16 < (v4[5] - v17) >> 3
      && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
      && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)), v21 = v4[7], v20 = v4[8], v19 < (v20 - v21) >> 3)
      && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
    {
      v24 = (unint64_t *)(v4[10] + 8 * v19);
    }
    else
    {
      v24 = (unint64_t *)v4[11];
    }
    v25 = v7[4];
    if (v16 < (v7[5] - v25) >> 3
      && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
      && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)), v29 = v7[7], v28 = v7[8], v27 < (v28 - v29) >> 3)
      && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
    {
      v32 = v7[11];
      v33 = v7[10] + 8 * v27;
    }
    else
    {
      v32 = v7[11];
      v33 = v32;
    }
    if (v33 == v32)
      v34 = 0;
    else
      v34 = (unint64_t *)v33;
    v35 = **(_QWORD **)(v2 + 8);
    v36 = *(_QWORD **)v35;
    v37 = *(_QWORD **)(v35 + 8);
    if (v36 != v37)
    {
      while (*v36 != 0x41D4E9297E100630)
      {
        v36 += 5;
        if (v36 == v37)
          goto LABEL_43;
      }
    }
    if (v36 == v37)
    {
LABEL_43:
      v38 = 0;
    }
    else
    {
      v38 = v36[3];
      v39 = (std::__shared_weak_count *)v36[4];
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(p_shared_owners);
        while (__stxr(v41 + 1, p_shared_owners));
        do
          v42 = __ldaxr(p_shared_owners);
        while (__stlxr(v42 - 1, p_shared_owners));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
    }
    v43 = *v34;
    v44 = *v34;
    v45 = *(_QWORD *)(v38 + 400);
    v46 = (*(_QWORD *)(v38 + 408) - v45) >> 3;
    if (v44 < v46
      && (v47 = *(_QWORD *)(v45 + 8 * v44)) != 0
      && HIDWORD(v43) == HIDWORD(v47)
      && ((v48 = *(_QWORD *)(v38 + 424), v48 + 16 * v47 != *(_QWORD *)(v38 + 432))
        ? (v49 = v48 == 0)
        : (v49 = 1),
          !v49))
    {
      v55 = *(_QWORD *)(v45 + 8 * v44);
      v56 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v38 + 296, v43, v34);
      ++v56[3];
      v57 = v48 + 16 * v55;
      v10 = v135;
      v50 = *(_QWORD **)(v57 + 8);
      v43 = *v34;
      v45 = *(_QWORD *)(v38 + 400);
      v44 = *v34;
      if (v44 >= (*(_QWORD *)(v38 + 408) - v45) >> 3)
        goto LABEL_64;
    }
    else
    {
      v50 = 0;
      if (v44 >= v46)
        goto LABEL_64;
    }
    v51 = *(_QWORD *)(v45 + 8 * v44);
    if (v51 && HIDWORD(v43) == HIDWORD(v51))
    {
      v52 = *(_QWORD *)(v38 + 424);
      v53 = (_QWORD **)(v52 + 16 * v51);
      if (v53 == *(_QWORD ***)(v38 + 432) || v52 == 0)
      {
        v93 = 0;
      }
      else
      {
        v92 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v38 + 296, v43, v34);
        ++v92[3];
        v93 = *v53;
      }
      v10 = v135;
      goto LABEL_65;
    }
LABEL_64:
    v93 = 0;
LABEL_65:
    v58 = *v24;
    v59 = *v24;
    v60 = *(_QWORD *)(v38 + 5904);
    if (v59 >= (*(_QWORD *)(v38 + 5912) - v60) >> 3)
      goto LABEL_70;
    v61 = *(_QWORD *)(v60 + 8 * v59);
    if (!v61 || HIDWORD(v58) != HIDWORD(v61))
      goto LABEL_70;
    v88 = *(_QWORD *)(v38 + 5928);
    if (v88 + 24 * v61 == *(_QWORD *)(v38 + 5936) || v88 == 0)
      goto LABEL_70;
    v133 = (uint64_t *)(v88 + 24 * v61);
    v134 = (uint64_t *)(v38 + 5800);
    v90 = *(_QWORD *)(v38 + 5808);
    if (!v90)
      goto LABEL_126;
    v91 = (uint8x8_t)vcnt_s8((int8x8_t)v90);
    v91.i16[0] = vaddlv_u8(v91);
    if (v91.u32[0] > 1uLL)
    {
      v2 = *v24;
      if (v58 >= v90)
        v2 = v58 % v90;
    }
    else
    {
      v2 = (v90 - 1) & v58;
    }
    v94 = *(_QWORD ***)(*v134 + 8 * v2);
    if (!v94 || (v95 = *v94) == 0)
    {
LABEL_126:
      v95 = operator new(0x30uLL);
      *v95 = 0;
      v95[1] = v58;
      v95[2] = v58;
      v95[3] = 0;
      v95[4] = 0;
      v95[5] = 0;
      v98 = (float)(unint64_t)(*(_QWORD *)(v38 + 5824) + 1);
      v99 = *(float *)(v38 + 5832);
      if (!v90 || (float)(v99 * (float)v90) < v98)
      {
        v100 = (v90 & (v90 - 1)) != 0;
        if (v90 < 3)
          v100 = 1;
        v101 = v100 | (2 * v90);
        v102 = vcvtps_u32_f32(v98 / v99);
        if (v101 <= v102)
          prime = v102;
        else
          prime = v101;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v90 = *(_QWORD *)(v38 + 5808);
        }
        if (prime > v90)
          goto LABEL_138;
        if (prime < v90)
        {
          v104 = vcvtps_u32_f32((float)*(unint64_t *)(v38 + 5824) / *(float *)(v38 + 5832));
          if (v90 < 3 || (v105 = (uint8x8_t)vcnt_s8((int8x8_t)v90), v105.i16[0] = vaddlv_u8(v105), v105.u32[0] > 1uLL))
          {
            v104 = std::__next_prime(v104);
          }
          else
          {
            v106 = 1 << -(char)__clz(v104 - 1);
            if (v104 >= 2)
              v104 = v106;
          }
          if (prime <= v104)
            prime = v104;
          if (prime < v90)
LABEL_138:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v134, prime);
        }
        v90 = *(_QWORD *)(v38 + 5808);
        if ((v90 & (v90 - 1)) != 0)
        {
          if (v58 >= v90)
            v2 = v58 % v90;
          else
            v2 = v58;
        }
        else
        {
          v2 = (v90 - 1) & v58;
        }
      }
      v107 = *v134;
      v108 = *(_QWORD **)(*v134 + 8 * v2);
      if (v108)
      {
        *v95 = *v108;
        v2 = v132;
        goto LABEL_162;
      }
      *v95 = *(_QWORD *)(v38 + 5816);
      *(_QWORD *)(v38 + 5816) = v95;
      *(_QWORD *)(v107 + 8 * v2) = v38 + 5816;
      v2 = v132;
      if (*v95)
      {
        v109 = *(_QWORD *)(*v95 + 8);
        if ((v90 & (v90 - 1)) != 0)
        {
          if (v109 >= v90)
            v109 %= v90;
        }
        else
        {
          v109 &= v90 - 1;
        }
        v108 = (_QWORD *)(*v134 + 8 * v109);
LABEL_162:
        *v108 = v95;
      }
      ++*(_QWORD *)(v38 + 5824);
      goto LABEL_164;
    }
    if (v91.u32[0] < 2uLL)
    {
      while (1)
      {
        v97 = v95[1];
        if (v97 == v58)
        {
          if (v95[2] == v58)
            goto LABEL_125;
        }
        else if ((v97 & (v90 - 1)) != v2)
        {
          goto LABEL_126;
        }
        v95 = (_QWORD *)*v95;
        if (!v95)
          goto LABEL_126;
      }
    }
    while (1)
    {
      v96 = v95[1];
      if (v96 == v58)
        break;
      if (v96 >= v90)
        v96 %= v90;
      if (v96 != v2)
        goto LABEL_126;
LABEL_115:
      v95 = (_QWORD *)*v95;
      if (!v95)
        goto LABEL_126;
    }
    if (v95[2] != v58)
      goto LABEL_115;
LABEL_125:
    v2 = v132;
LABEL_164:
    ++v95[3];
    v110 = *v133;
    v10 = v135;
    if (*v133)
    {
      if ((v111 & 1) == 0
      {
        do
          v130 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
        while (__stlxr(v130 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
        gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>(void)::index = v130;
        v2 = v132;
        v10 = v135;
      }
      v112 = v50[1];
      if (v112)
      {
        v113 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>(void)::index;
        v114 = (uint8x8_t)vcnt_s8((int8x8_t)v112);
        v114.i16[0] = vaddlv_u8(v114);
        if (v114.u32[0] > 1uLL)
        {
          v115 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>(void)::index;
          if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>(void)::index >= v112)
            v115 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>(void)::index % v112;
        }
        else
        {
          v115 = (v112 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>(void)::index;
        }
        v116 = *(_QWORD **)(*v50 + 8 * v115);
        if (v116)
        {
          v117 = (_QWORD *)*v116;
          if (v117)
          {
            if (v114.u32[0] < 2uLL)
            {
              v118 = v112 - 1;
              while (1)
              {
                v120 = v117[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>(void)::index == v120)
                {
                  if (v117[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>(void)::index)
                    goto LABEL_187;
                }
                else if ((v120 & v118) != v115)
                {
                  goto LABEL_70;
                }
                v117 = (_QWORD *)*v117;
                if (!v117)
                  goto LABEL_70;
              }
            }
            do
            {
              v119 = v117[1];
              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>(void)::index == v119)
              {
                if (v117[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>(void)::index)
                {
LABEL_187:
                  if ((v121 & 1) == 0)
                  {
                    if ((_DWORD)v131)
                    {
                      md::typeToIntMap(v131);
                      v2 = v132;
                      v10 = v135;
                    }
                  }
                  if (!qword_1EE5779D0)
                    goto LABEL_219;
                  v122 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                  v122.i16[0] = vaddlv_u8(v122);
                  if (v122.u32[0] > 1uLL)
                  {
                    v123 = v113;
                    if (v113 >= qword_1EE5779D0)
                      v123 = v113 % qword_1EE5779D0;
                  }
                  else
                  {
                    v123 = (qword_1EE5779D0 - 1) & v113;
                  }
                  v124 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v123);
                  if (!v124 || (v125 = *v124) == 0)
LABEL_219:
                    abort();
                  if (v122.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v127 = v125[1];
                      if ((uint64_t *)v113 == v127)
                      {
                        if (v125[2] == (uint64_t *)v113)
                          goto LABEL_208;
                      }
                      else if (((unint64_t)v127 & (qword_1EE5779D0 - 1)) != v123)
                      {
                        goto LABEL_219;
                      }
                      v125 = (uint64_t **)*v125;
                      if (!v125)
                        goto LABEL_219;
                    }
                  }
                  while (1)
                  {
                    v126 = (unint64_t)v125[1];
                    if (v113 == v126)
                    {
                      if (v125[2] == (uint64_t *)v113)
                      {
LABEL_208:
                        v128 = *((int *)v125 + 6);
                        v129 = *((int *)v125 + 7);
                        if ((_DWORD)v128 != -1)
                          ggl::PipelineSetup::setConstantData(v93, v128, v110, 1);
                        if ((_DWORD)v129 != -1)
                          ggl::PipelineSetup::setConstantData(v93, v129, v110, 2);
                        goto LABEL_70;
                      }
                    }
                    else
                    {
                      if (v126 >= qword_1EE5779D0)
                        v126 %= (unint64_t)qword_1EE5779D0;
                      if (v126 != v123)
                        goto LABEL_219;
                    }
                    v125 = (uint64_t **)*v125;
                    if (!v125)
                      goto LABEL_219;
                  }
                }
              }
              else
              {
                if (v119 >= v112)
                  v119 %= v112;
                if (v119 != v115)
                  break;
              }
              v117 = (_QWORD *)*v117;
            }
            while (v117);
          }
        }
      }
    }
LABEL_70:
    v9 = (_QWORD *)v137[4];
    v63 = v141 + 1;
    v141 = v63;
    if (v63 == v9)
    {
      result = v136;
      if (v10 == v9)
        break;
      goto LABEL_13;
    }
    v64 = v138[4];
    result = v136;
    do
    {
      v65 = *((unsigned int *)v63 + 1);
      v66 = v65 >> 7;
      if (v65 >> 7 < (v138[5] - v64) >> 3)
      {
        v67 = *(_QWORD *)(v64 + 8 * v66);
        if (v67)
        {
          v68 = v65 & 0x7F;
          v69 = *(unsigned __int16 *)(v67 + 2 * v68);
          v70 = v138[7];
          v71 = v138[8];
          if (v69 < (v71 - v70) >> 3)
          {
            v72 = v70 + 8 * v69;
            if (v72 != v71 && *(_DWORD *)(v72 + 4) == (_DWORD)v65)
            {
              v74 = v139[4];
              if (v66 < (v139[5] - v74) >> 3)
              {
                v75 = *(_QWORD *)(v74 + 8 * v66);
                if (v75)
                {
                  v76 = *(unsigned __int16 *)(v75 + 2 * v68);
                  v77 = v139[7];
                  v78 = v139[8];
                  if (v76 < (v78 - v77) >> 3)
                  {
                    v79 = v77 + 8 * v76;
                    if (v79 != v78 && *(_DWORD *)(v79 + 4) == (_DWORD)v65)
                    {
                      v81 = v140[4];
                      if (v66 < (v140[5] - v81) >> 3)
                      {
                        v82 = *(_QWORD *)(v81 + 8 * v66);
                        if (v82)
                        {
                          v83 = *(unsigned __int16 *)(v82 + 2 * v68);
                          v85 = v140[7];
                          v84 = v140[8];
                          if (v83 < (v84 - v85) >> 3)
                          {
                            v86 = v85 + 8 * v83;
                            if (*(_DWORD *)(v86 + 4) == (_DWORD)v65 && v86 != v84)
                            {
                              v9 = v63;
                              goto LABEL_98;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v63;
    }
    while (v63 != v9);
    v63 = v9;
LABEL_98:
    v141 = v63;
  }
  while (v10 != v9);
LABEL_218:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
  return result;
}

void sub_19F6C7750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19F6C7768(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::BlendRasterConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xDF0018B9242ADFDBLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xDF0018B9242ADFDBLL;
      if (*(_QWORD *)&v3 <= 0xDF0018B9242ADFDBLL)
        v5 = 0xDF0018B9242ADFDBLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xDF0018B9242ADFDBLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xDF0018B9242ADFDBLL)
            {
              if (v7[2] == 0xDF0018B9242ADFDBLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xDF0018B9242ADFDBLL)
          {
            if (v7[2] == 0xDF0018B9242ADFDBLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::BlendRasterConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 37;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273C68;
  *(_QWORD *)(v11 + 8) = 0xDF0018B9242ADFDBLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xDF0018B9242ADFDBLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xDF0018B9242ADFDBLL;
  v15[1] = "md::ls::BlendRasterConstantDataHandle]";
  v15[2] = 37;
  gdc::Registry::_registerStorageDataSignals(a1, 0xDF0018B9242ADFDBLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6C7988(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xF94A4E2652CF266ELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xF94A4E2652CF266ELL;
      if (*(_QWORD *)&v3 <= 0xF94A4E2652CF266ELL)
        v5 = 0xF94A4E2652CF266ELL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xF94A4E2652CF266ELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xF94A4E2652CF266ELL)
            {
              if (v7[2] == 0xF94A4E2652CF266ELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xF94A4E2652CF266ELL)
          {
            if (v7[2] == 0xF94A4E2652CF266ELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>]";
  *(_QWORD *)(v11 + 24) = 91;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273B18;
  *(_QWORD *)(v11 + 8) = 0xF94A4E2652CF266ELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xF94A4E2652CF266ELL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xF94A4E2652CF266ELL;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>]";
  v15[2] = 91;
  gdc::Registry::_registerStorageDataSignals(a1, 0xF94A4E2652CF266ELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6C7BB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::BlendRasterConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::BlendRasterConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::BlendRasterConstantDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::BlendRasterConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRasterOverlayData>(md::ita::AssignRasterOverlayData &&)::{lambda(void)#2},std::allocator<md::ita::AssignRasterOverlayData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRasterOverlayData>(md::ita::AssignRasterOverlayData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRasterOverlayData>(md::ita::AssignRasterOverlayData &&)::{lambda(void)#2},std::allocator<md::ita::AssignRasterOverlayData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRasterOverlayData>(md::ita::AssignRasterOverlayData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284B68;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRasterOverlayData>(md::ita::AssignRasterOverlayData &&)::{lambda(void)#2},std::allocator<md::ita::AssignRasterOverlayData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRasterOverlayData>(md::ita::AssignRasterOverlayData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284B68;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRasterOverlayData>(md::ita::AssignRasterOverlayData &&)::{lambda(void)#2},std::allocator<md::ita::AssignRasterOverlayData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRasterOverlayData>(md::ita::AssignRasterOverlayData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6C7F38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRasterOverlayData>(md::ita::AssignRasterOverlayData &&)::{lambda(void)#1},std::allocator<md::ita::AssignRasterOverlayData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRasterOverlayData>(md::ita::AssignRasterOverlayData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRasterOverlayData>(md::ita::AssignRasterOverlayData &&)::{lambda(void)#1},std::allocator<md::ita::AssignRasterOverlayData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRasterOverlayData>(md::ita::AssignRasterOverlayData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284BB0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRasterOverlayData>(md::ita::AssignRasterOverlayData &&)::{lambda(void)#1},std::allocator<md::ita::AssignRasterOverlayData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRasterOverlayData>(md::ita::AssignRasterOverlayData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284BB0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRasterOverlayData>(md::ita::AssignRasterOverlayData &&)::{lambda(void)#1},std::allocator<md::ita::AssignRasterOverlayData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRasterOverlayData>(md::ita::AssignRasterOverlayData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xDC66BF6D06F6D0BALL;
  v2[1] = "md::ls::RasterOverlayConstantDataHandle]";
  *(_QWORD *)&result = 39;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4170;
  v2[4] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>]";
  v2[5] = 89;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRasterOverlayData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRasterOverlayData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRasterOverlayData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRasterOverlayData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276E58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRasterOverlayData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRasterOverlayData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276E58;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRasterOverlayData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRasterOverlayData>>,void ()(ecs2::Runtime &)>::operator()(unint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD **v53;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  unint64_t v90;
  uint8x8_t v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD **v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  float v98;
  float v99;
  _BOOL8 v100;
  unint64_t v101;
  unint64_t v102;
  size_t prime;
  unint64_t v104;
  uint8x8_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t v110;
  unsigned __int8 v111;
  unint64_t v112;
  unint64_t v113;
  uint8x8_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unsigned __int8 v121;
  uint8x8_t v122;
  unint64_t v123;
  uint64_t ***v124;
  uint64_t **v125;
  unint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  md *v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;

  v2 = a1;
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::RasterOverlayConstantDataHandle>(v3);
  v5 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>>(v3);
  v6 = gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  v7 = (_QWORD *)v6;
  v8 = v4 + 4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v4[8] - v4[7])
    v8 = (_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < v8[4] - v8[3])
    v8 = (_QWORD *)(v6 + 32);
  v137 = v8;
  v138 = v4;
  v139 = (_QWORD *)v5;
  v140 = (_QWORD *)v6;
  v9 = (_QWORD *)v8[3];
  v10 = (_QWORD *)v8[4];
  v141 = v9;
  if (v10 != v9
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v137))
  {
    v11 = v9 + 1;
    do
    {
      v9 = v11;
      v141 = v11;
      if (v11 == v10)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v137);
      v11 = v9 + 1;
    }
    while (!isValid);
  }
  if (v10 == v9)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    goto LABEL_218;
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v135 = v10;
  v136 = result;
  v132 = v2;
  do
  {
LABEL_13:
    *result = *v9;
    v14 = *v9;
    v15 = HIDWORD(*v9);
    v16 = *v9 >> 39;
    v17 = v4[4];
    if (v16 < (v4[5] - v17) >> 3
      && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
      && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)), v21 = v4[7], v20 = v4[8], v19 < (v20 - v21) >> 3)
      && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
    {
      v24 = (unint64_t *)(v4[10] + 32 * v19);
    }
    else
    {
      v24 = (unint64_t *)v4[11];
    }
    v25 = v7[4];
    if (v16 < (v7[5] - v25) >> 3
      && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
      && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)), v29 = v7[7], v28 = v7[8], v27 < (v28 - v29) >> 3)
      && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
    {
      v32 = v7[11];
      v33 = v7[10] + 8 * v27;
    }
    else
    {
      v32 = v7[11];
      v33 = v32;
    }
    if (v33 == v32)
      v34 = 0;
    else
      v34 = (unint64_t *)v33;
    v35 = **(_QWORD **)(v2 + 8);
    v36 = *(_QWORD **)v35;
    v37 = *(_QWORD **)(v35 + 8);
    if (v36 != v37)
    {
      while (*v36 != 0x41D4E9297E100630)
      {
        v36 += 5;
        if (v36 == v37)
          goto LABEL_43;
      }
    }
    if (v36 == v37)
    {
LABEL_43:
      v38 = 0;
    }
    else
    {
      v38 = v36[3];
      v39 = (std::__shared_weak_count *)v36[4];
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(p_shared_owners);
        while (__stxr(v41 + 1, p_shared_owners));
        do
          v42 = __ldaxr(p_shared_owners);
        while (__stlxr(v42 - 1, p_shared_owners));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
    }
    v43 = *v34;
    v44 = *v34;
    v45 = *(_QWORD *)(v38 + 400);
    v46 = (*(_QWORD *)(v38 + 408) - v45) >> 3;
    if (v44 < v46
      && (v47 = *(_QWORD *)(v45 + 8 * v44)) != 0
      && HIDWORD(v43) == HIDWORD(v47)
      && ((v48 = *(_QWORD *)(v38 + 424), v48 + 16 * v47 != *(_QWORD *)(v38 + 432))
        ? (v49 = v48 == 0)
        : (v49 = 1),
          !v49))
    {
      v55 = *(_QWORD *)(v45 + 8 * v44);
      v56 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v38 + 296, v43, v34);
      ++v56[3];
      v57 = v48 + 16 * v55;
      v10 = v135;
      v50 = *(_QWORD **)(v57 + 8);
      v43 = *v34;
      v45 = *(_QWORD *)(v38 + 400);
      v44 = *v34;
      if (v44 >= (*(_QWORD *)(v38 + 408) - v45) >> 3)
        goto LABEL_64;
    }
    else
    {
      v50 = 0;
      if (v44 >= v46)
        goto LABEL_64;
    }
    v51 = *(_QWORD *)(v45 + 8 * v44);
    if (v51 && HIDWORD(v43) == HIDWORD(v51))
    {
      v52 = *(_QWORD *)(v38 + 424);
      v53 = (_QWORD **)(v52 + 16 * v51);
      if (v53 == *(_QWORD ***)(v38 + 432) || v52 == 0)
      {
        v93 = 0;
      }
      else
      {
        v92 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v38 + 296, v43, v34);
        ++v92[3];
        v93 = *v53;
      }
      v10 = v135;
      goto LABEL_65;
    }
LABEL_64:
    v93 = 0;
LABEL_65:
    v58 = *v24;
    v59 = *v24;
    v60 = *(_QWORD *)(v38 + 6968);
    if (v59 >= (*(_QWORD *)(v38 + 6976) - v60) >> 3)
      goto LABEL_70;
    v61 = *(_QWORD *)(v60 + 8 * v59);
    if (!v61 || HIDWORD(v58) != HIDWORD(v61))
      goto LABEL_70;
    v88 = *(_QWORD *)(v38 + 6992);
    if (v88 + 24 * v61 == *(_QWORD *)(v38 + 7000) || v88 == 0)
      goto LABEL_70;
    v133 = (uint64_t *)(v88 + 24 * v61);
    v134 = (uint64_t *)(v38 + 6864);
    v90 = *(_QWORD *)(v38 + 6872);
    if (!v90)
      goto LABEL_126;
    v91 = (uint8x8_t)vcnt_s8((int8x8_t)v90);
    v91.i16[0] = vaddlv_u8(v91);
    if (v91.u32[0] > 1uLL)
    {
      v2 = *v24;
      if (v58 >= v90)
        v2 = v58 % v90;
    }
    else
    {
      v2 = (v90 - 1) & v58;
    }
    v94 = *(_QWORD ***)(*v134 + 8 * v2);
    if (!v94 || (v95 = *v94) == 0)
    {
LABEL_126:
      v95 = operator new(0x30uLL);
      *v95 = 0;
      v95[1] = v58;
      v95[2] = v58;
      v95[3] = 0;
      v95[4] = 0;
      v95[5] = 0;
      v98 = (float)(unint64_t)(*(_QWORD *)(v38 + 6888) + 1);
      v99 = *(float *)(v38 + 6896);
      if (!v90 || (float)(v99 * (float)v90) < v98)
      {
        v100 = (v90 & (v90 - 1)) != 0;
        if (v90 < 3)
          v100 = 1;
        v101 = v100 | (2 * v90);
        v102 = vcvtps_u32_f32(v98 / v99);
        if (v101 <= v102)
          prime = v102;
        else
          prime = v101;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v90 = *(_QWORD *)(v38 + 6872);
        }
        if (prime > v90)
          goto LABEL_138;
        if (prime < v90)
        {
          v104 = vcvtps_u32_f32((float)*(unint64_t *)(v38 + 6888) / *(float *)(v38 + 6896));
          if (v90 < 3 || (v105 = (uint8x8_t)vcnt_s8((int8x8_t)v90), v105.i16[0] = vaddlv_u8(v105), v105.u32[0] > 1uLL))
          {
            v104 = std::__next_prime(v104);
          }
          else
          {
            v106 = 1 << -(char)__clz(v104 - 1);
            if (v104 >= 2)
              v104 = v106;
          }
          if (prime <= v104)
            prime = v104;
          if (prime < v90)
LABEL_138:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v134, prime);
        }
        v90 = *(_QWORD *)(v38 + 6872);
        if ((v90 & (v90 - 1)) != 0)
        {
          if (v58 >= v90)
            v2 = v58 % v90;
          else
            v2 = v58;
        }
        else
        {
          v2 = (v90 - 1) & v58;
        }
      }
      v107 = *v134;
      v108 = *(_QWORD **)(*v134 + 8 * v2);
      if (v108)
      {
        *v95 = *v108;
        v2 = v132;
        goto LABEL_162;
      }
      *v95 = *(_QWORD *)(v38 + 6880);
      *(_QWORD *)(v38 + 6880) = v95;
      *(_QWORD *)(v107 + 8 * v2) = v38 + 6880;
      v2 = v132;
      if (*v95)
      {
        v109 = *(_QWORD *)(*v95 + 8);
        if ((v90 & (v90 - 1)) != 0)
        {
          if (v109 >= v90)
            v109 %= v90;
        }
        else
        {
          v109 &= v90 - 1;
        }
        v108 = (_QWORD *)(*v134 + 8 * v109);
LABEL_162:
        *v108 = v95;
      }
      ++*(_QWORD *)(v38 + 6888);
      goto LABEL_164;
    }
    if (v91.u32[0] < 2uLL)
    {
      while (1)
      {
        v97 = v95[1];
        if (v97 == v58)
        {
          if (v95[2] == v58)
            goto LABEL_125;
        }
        else if ((v97 & (v90 - 1)) != v2)
        {
          goto LABEL_126;
        }
        v95 = (_QWORD *)*v95;
        if (!v95)
          goto LABEL_126;
      }
    }
    while (1)
    {
      v96 = v95[1];
      if (v96 == v58)
        break;
      if (v96 >= v90)
        v96 %= v90;
      if (v96 != v2)
        goto LABEL_126;
LABEL_115:
      v95 = (_QWORD *)*v95;
      if (!v95)
        goto LABEL_126;
    }
    if (v95[2] != v58)
      goto LABEL_115;
LABEL_125:
    v2 = v132;
LABEL_164:
    ++v95[3];
    v110 = *v133;
    v10 = v135;
    if (*v133)
    {
      if ((v111 & 1) == 0
      {
        do
          v130 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
        while (__stlxr(v130 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
        gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>(void)::index = v130;
        v2 = v132;
        v10 = v135;
      }
      v112 = v50[1];
      if (v112)
      {
        v113 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>(void)::index;
        v114 = (uint8x8_t)vcnt_s8((int8x8_t)v112);
        v114.i16[0] = vaddlv_u8(v114);
        if (v114.u32[0] > 1uLL)
        {
          v115 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>(void)::index;
          if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>(void)::index >= v112)
            v115 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>(void)::index % v112;
        }
        else
        {
          v115 = (v112 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>(void)::index;
        }
        v116 = *(_QWORD **)(*v50 + 8 * v115);
        if (v116)
        {
          v117 = (_QWORD *)*v116;
          if (v117)
          {
            if (v114.u32[0] < 2uLL)
            {
              v118 = v112 - 1;
              while (1)
              {
                v120 = v117[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>(void)::index == v120)
                {
                  if (v117[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>(void)::index)
                    goto LABEL_187;
                }
                else if ((v120 & v118) != v115)
                {
                  goto LABEL_70;
                }
                v117 = (_QWORD *)*v117;
                if (!v117)
                  goto LABEL_70;
              }
            }
            do
            {
              v119 = v117[1];
              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>(void)::index == v119)
              {
                if (v117[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>(void)::index)
                {
LABEL_187:
                  if ((v121 & 1) == 0)
                  {
                    if ((_DWORD)v131)
                    {
                      md::typeToIntMap(v131);
                      v2 = v132;
                      v10 = v135;
                    }
                  }
                  if (!qword_1EE5779D0)
                    goto LABEL_219;
                  v122 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                  v122.i16[0] = vaddlv_u8(v122);
                  if (v122.u32[0] > 1uLL)
                  {
                    v123 = v113;
                    if (v113 >= qword_1EE5779D0)
                      v123 = v113 % qword_1EE5779D0;
                  }
                  else
                  {
                    v123 = (qword_1EE5779D0 - 1) & v113;
                  }
                  v124 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v123);
                  if (!v124 || (v125 = *v124) == 0)
LABEL_219:
                    abort();
                  if (v122.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v127 = v125[1];
                      if ((uint64_t *)v113 == v127)
                      {
                        if (v125[2] == (uint64_t *)v113)
                          goto LABEL_208;
                      }
                      else if (((unint64_t)v127 & (qword_1EE5779D0 - 1)) != v123)
                      {
                        goto LABEL_219;
                      }
                      v125 = (uint64_t **)*v125;
                      if (!v125)
                        goto LABEL_219;
                    }
                  }
                  while (1)
                  {
                    v126 = (unint64_t)v125[1];
                    if (v113 == v126)
                    {
                      if (v125[2] == (uint64_t *)v113)
                      {
LABEL_208:
                        v128 = *((int *)v125 + 6);
                        v129 = *((int *)v125 + 7);
                        if ((_DWORD)v128 != -1)
                          ggl::PipelineSetup::setConstantData(v93, v128, v110, 1);
                        if ((_DWORD)v129 != -1)
                          ggl::PipelineSetup::setConstantData(v93, v129, v110, 2);
                        goto LABEL_70;
                      }
                    }
                    else
                    {
                      if (v126 >= qword_1EE5779D0)
                        v126 %= (unint64_t)qword_1EE5779D0;
                      if (v126 != v123)
                        goto LABEL_219;
                    }
                    v125 = (uint64_t **)*v125;
                    if (!v125)
                      goto LABEL_219;
                  }
                }
              }
              else
              {
                if (v119 >= v112)
                  v119 %= v112;
                if (v119 != v115)
                  break;
              }
              v117 = (_QWORD *)*v117;
            }
            while (v117);
          }
        }
      }
    }
LABEL_70:
    v9 = (_QWORD *)v137[4];
    v63 = v141 + 1;
    v141 = v63;
    if (v63 == v9)
    {
      result = v136;
      if (v10 == v9)
        break;
      goto LABEL_13;
    }
    v64 = v138[4];
    result = v136;
    do
    {
      v65 = *((unsigned int *)v63 + 1);
      v66 = v65 >> 7;
      if (v65 >> 7 < (v138[5] - v64) >> 3)
      {
        v67 = *(_QWORD *)(v64 + 8 * v66);
        if (v67)
        {
          v68 = v65 & 0x7F;
          v69 = *(unsigned __int16 *)(v67 + 2 * v68);
          v70 = v138[7];
          v71 = v138[8];
          if (v69 < (v71 - v70) >> 3)
          {
            v72 = v70 + 8 * v69;
            if (v72 != v71 && *(_DWORD *)(v72 + 4) == (_DWORD)v65)
            {
              v74 = v139[4];
              if (v66 < (v139[5] - v74) >> 3)
              {
                v75 = *(_QWORD *)(v74 + 8 * v66);
                if (v75)
                {
                  v76 = *(unsigned __int16 *)(v75 + 2 * v68);
                  v77 = v139[7];
                  v78 = v139[8];
                  if (v76 < (v78 - v77) >> 3)
                  {
                    v79 = v77 + 8 * v76;
                    if (v79 != v78 && *(_DWORD *)(v79 + 4) == (_DWORD)v65)
                    {
                      v81 = v140[4];
                      if (v66 < (v140[5] - v81) >> 3)
                      {
                        v82 = *(_QWORD *)(v81 + 8 * v66);
                        if (v82)
                        {
                          v83 = *(unsigned __int16 *)(v82 + 2 * v68);
                          v85 = v140[7];
                          v84 = v140[8];
                          if (v83 < (v84 - v85) >> 3)
                          {
                            v86 = v85 + 8 * v83;
                            if (*(_DWORD *)(v86 + 4) == (_DWORD)v65 && v86 != v84)
                            {
                              v9 = v63;
                              goto LABEL_98;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v63;
    }
    while (v63 != v9);
    v63 = v9;
LABEL_98:
    v141 = v63;
  }
  while (v10 != v9);
LABEL_218:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
  return result;
}

void sub_19F6C8ADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19F6C8AF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RasterOverlayConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xDC66BF6D06F6D0BALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xDC66BF6D06F6D0BALL;
      if (*(_QWORD *)&v3 <= 0xDC66BF6D06F6D0BALL)
        v5 = 0xDC66BF6D06F6D0BALL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xDC66BF6D06F6D0BALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xDC66BF6D06F6D0BALL)
            {
              if (v7[2] == 0xDC66BF6D06F6D0BALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xDC66BF6D06F6D0BALL)
          {
            if (v7[2] == 0xDC66BF6D06F6D0BALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RasterOverlayConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 39;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273F98;
  *(_QWORD *)(v11 + 8) = 0xDC66BF6D06F6D0BALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xDC66BF6D06F6D0BALL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xDC66BF6D06F6D0BALL;
  v15[1] = "md::ls::RasterOverlayConstantDataHandle]";
  v15[2] = 39;
  gdc::Registry::_registerStorageDataSignals(a1, 0xDC66BF6D06F6D0BALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6C8D14(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xDC269C102C25EFECLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xDC269C102C25EFECLL;
      if (*(_QWORD *)&v3 <= 0xDC269C102C25EFECLL)
        v5 = 0xDC269C102C25EFECLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xDC269C102C25EFECLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xDC269C102C25EFECLL)
            {
              if (v7[2] == 0xDC269C102C25EFECLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xDC269C102C25EFECLL)
          {
            if (v7[2] == 0xDC269C102C25EFECLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>]";
  *(_QWORD *)(v11 + 24) = 89;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42737E8;
  *(_QWORD *)(v11 + 8) = 0xDC269C102C25EFECLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xDC269C102C25EFECLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xDC269C102C25EFECLL;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>]";
  v15[2] = 89;
  gdc::Registry::_registerStorageDataSignals(a1, 0xDC269C102C25EFECLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6C8F3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::RasterOverlayConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RasterOverlayConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_OWORD *)(a1[10] + 32 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_OWORD *)(v15 - 16);
  *v14 = *(_OWORD *)(v15 - 32);
  v14[1] = v16;
  a1[11] -= 32;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RasterOverlayConstantDataHandle>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RasterOverlayConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283C38;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283C38;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6C92C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283C80;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283C80;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x7E6F38B7040F8E0FLL;
  v2[1] = "md::ls::StyleColorConstantDataHandle]";
  *(_QWORD *)&result = 36;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4180;
  v2[4] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>]";
  v2[5] = 86;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleColorData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleColorData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleColorData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleColorData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42766C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleColorData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleColorData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42766C0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleColorData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleColorData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD **v53;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t *v88;
  _QWORD *v90;
  uint64_t v91;
  unsigned __int8 v92;
  unint64_t v93;
  unint64_t v94;
  uint8x8_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unsigned __int8 v104;
  uint8x8_t v105;
  unint64_t v106;
  uint64_t ***v107;
  uint64_t **v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  md *v114;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  unint64_t v122;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::StyleColorConstantDataHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>(v2);
  v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v6 = (_QWORD *)v5;
  v7 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v7 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v5 + 32);
  v117 = v7;
  v118 = v3;
  v119 = (_QWORD *)v4;
  v120 = (_QWORD *)v5;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v121 = v8;
  if (v9 == v8)
  {
    v10 = a1;
  }
  else
  {
    v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v117))
    {
      v11 = v8 + 1;
      do
      {
        v8 = v11;
        v121 = v11;
        if (v11 == v9)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v117);
        v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v116 = result;
    while (1)
    {
      *result = *v8;
      v14 = *v8;
      v15 = HIDWORD(*v8);
      v16 = *v8 >> 39;
      v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            v21 = v3[7],
            v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
      {
        v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        v24 = (unint64_t *)v3[11];
      }
      v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            v29 = v6[7],
            v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
      {
        v32 = v6[11];
        v33 = v6[10] + 8 * v27;
      }
      else
      {
        v32 = v6[11];
        v33 = v32;
      }
      if (v33 == v32)
        v34 = 0;
      else
        v34 = (unint64_t *)v33;
      v35 = **(_QWORD **)(v10 + 8);
      v36 = *(_QWORD **)v35;
      v37 = *(_QWORD **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37)
            goto LABEL_45;
        }
      }
      if (v36 == v37)
      {
LABEL_45:
        v38 = 0;
      }
      else
      {
        v38 = (_QWORD *)v36[3];
        v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldxr(p_shared_owners);
          while (__stxr(v41 + 1, p_shared_owners));
          do
            v42 = __ldaxr(p_shared_owners);
          while (__stlxr(v42 - 1, p_shared_owners));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      v43 = *v34;
      v44 = *v34;
      v45 = v38[50];
      v46 = (v38[51] - v45) >> 3;
      if (v44 < v46
        && (v47 = *(_QWORD *)(v45 + 8 * v44)) != 0
        && HIDWORD(v43) == HIDWORD(v47)
        && ((v48 = v38[53], v48 + 16 * v47 != v38[54]) ? (v49 = v48 == 0) : (v49 = 1), !v49))
      {
        v55 = *(_QWORD *)(v45 + 8 * v44);
        v56 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v56[3];
        v57 = v48 + 16 * v55;
        v10 = a1;
        v50 = *(_QWORD **)(v57 + 8);
        v43 = *v34;
        v45 = v38[50];
        v44 = *v34;
        if (v44 >= (v38[51] - v45) >> 3)
        {
LABEL_66:
          v98 = 0;
          goto LABEL_67;
        }
      }
      else
      {
        v50 = 0;
        if (v44 >= v46)
          goto LABEL_66;
      }
      v51 = *(_QWORD *)(v45 + 8 * v44);
      if (!v51 || HIDWORD(v43) != HIDWORD(v51))
        goto LABEL_66;
      v52 = v38[53];
      v53 = (_QWORD **)(v52 + 16 * v51);
      if (v53 == (_QWORD **)v38[54] || v52 == 0)
      {
        v98 = 0;
      }
      else
      {
        v97 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v97[3];
        v98 = *v53;
      }
      v10 = a1;
LABEL_67:
      v58 = *v24;
      v122 = v58;
      v59 = v38[797];
      if (v58 < (unint64_t)((v38[798] - v59) >> 3))
      {
        v60 = *(_QWORD *)(v59 + 8 * v58);
        if (v60 && HIDWORD(v58) == HIDWORD(v60))
        {
          v87 = v38[800];
          v88 = (uint64_t *)(v87 + 24 * v60);
          if (v88 != (uint64_t *)v38[801] && v87 != 0)
          {
            v90 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>> const&>,std::tuple<>>((uint64_t)(v38 + 784), v58, &v122);
            ++v90[3];
            v91 = *v88;
            if (v91)
            {
              if ((v92 & 1) == 0
              {
                do
                  v113 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
                while (__stlxr(v113 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
                gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>(void)::index = v113;
                v10 = a1;
              }
              v93 = v50[1];
              if (v93)
              {
                v94 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>(void)::index;
                v95 = (uint8x8_t)vcnt_s8((int8x8_t)v93);
                v95.i16[0] = vaddlv_u8(v95);
                if (v95.u32[0] > 1uLL)
                {
                  v96 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>(void)::index;
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>(void)::index >= v93)
                    v96 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>(void)::index % v93;
                }
                else
                {
                  v96 = (v93 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>(void)::index;
                }
                v99 = *(_QWORD **)(*v50 + 8 * v96);
                if (v99)
                {
                  v100 = (_QWORD *)*v99;
                  if (v100)
                  {
                    if (v95.u32[0] < 2uLL)
                    {
                      v101 = v93 - 1;
                      while (1)
                      {
                        v103 = v100[1];
                        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>(void)::index == v103)
                        {
                          if (v100[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>(void)::index)
                            goto LABEL_130;
                        }
                        else if ((v103 & v101) != v96)
                        {
                          goto LABEL_72;
                        }
                        v100 = (_QWORD *)*v100;
                        if (!v100)
                          goto LABEL_72;
                      }
                    }
                    do
                    {
                      v102 = v100[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>(void)::index == v102)
                      {
                        if (v100[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>(void)::index)
                        {
LABEL_130:
                          if ((v104 & 1) == 0)
                          {
                            if ((_DWORD)v114)
                            {
                              md::typeToIntMap(v114);
                              v10 = a1;
                            }
                          }
                          if (!qword_1EE5779D0)
                            goto LABEL_162;
                          v105 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                          v105.i16[0] = vaddlv_u8(v105);
                          if (v105.u32[0] > 1uLL)
                          {
                            v106 = v94;
                            if (v94 >= qword_1EE5779D0)
                              v106 = v94 % qword_1EE5779D0;
                          }
                          else
                          {
                            v106 = (qword_1EE5779D0 - 1) & v94;
                          }
                          v107 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v106);
                          if (!v107 || (v108 = *v107) == 0)
LABEL_162:
                            abort();
                          if (v105.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              v110 = v108[1];
                              if ((uint64_t *)v94 == v110)
                              {
                                if (v108[2] == (uint64_t *)v94)
                                  goto LABEL_151;
                              }
                              else if (((unint64_t)v110 & (qword_1EE5779D0 - 1)) != v106)
                              {
                                goto LABEL_162;
                              }
                              v108 = (uint64_t **)*v108;
                              if (!v108)
                                goto LABEL_162;
                            }
                          }
                          while (1)
                          {
                            v109 = (unint64_t)v108[1];
                            if (v94 == v109)
                            {
                              if (v108[2] == (uint64_t *)v94)
                              {
LABEL_151:
                                v111 = *((int *)v108 + 6);
                                v112 = *((int *)v108 + 7);
                                if ((_DWORD)v111 != -1)
                                  ggl::PipelineSetup::setConstantData(v98, v111, v91, 1);
                                if ((_DWORD)v112 != -1)
                                  ggl::PipelineSetup::setConstantData(v98, v112, v91, 2);
                                goto LABEL_72;
                              }
                            }
                            else
                            {
                              if (v109 >= qword_1EE5779D0)
                                v109 %= (unint64_t)qword_1EE5779D0;
                              if (v109 != v106)
                                goto LABEL_162;
                            }
                            v108 = (uint64_t **)*v108;
                            if (!v108)
                              goto LABEL_162;
                          }
                        }
                      }
                      else
                      {
                        if (v102 >= v93)
                          v102 %= v93;
                        if (v102 != v96)
                          break;
                      }
                      v100 = (_QWORD *)*v100;
                    }
                    while (v100);
                  }
                }
              }
            }
          }
        }
      }
LABEL_72:
      v8 = (_QWORD *)v117[4];
      v62 = v121 + 1;
      v121 = v62;
      if (v62 == v8)
      {
        result = v116;
        if (v9 == v8)
          goto LABEL_161;
      }
      else
      {
        v63 = v118[4];
        result = v116;
        do
        {
          v64 = *((unsigned int *)v62 + 1);
          v65 = v64 >> 7;
          if (v64 >> 7 < (v118[5] - v63) >> 3)
          {
            v66 = *(_QWORD *)(v63 + 8 * v65);
            if (v66)
            {
              v67 = v64 & 0x7F;
              v68 = *(unsigned __int16 *)(v66 + 2 * v67);
              v69 = v118[7];
              v70 = v118[8];
              if (v68 < (v70 - v69) >> 3)
              {
                v71 = v69 + 8 * v68;
                if (v71 != v70 && *(_DWORD *)(v71 + 4) == (_DWORD)v64)
                {
                  v73 = v119[4];
                  if (v65 < (v119[5] - v73) >> 3)
                  {
                    v74 = *(_QWORD *)(v73 + 8 * v65);
                    if (v74)
                    {
                      v75 = *(unsigned __int16 *)(v74 + 2 * v67);
                      v76 = v119[7];
                      v77 = v119[8];
                      if (v75 < (v77 - v76) >> 3)
                      {
                        v78 = v76 + 8 * v75;
                        if (v78 != v77 && *(_DWORD *)(v78 + 4) == (_DWORD)v64)
                        {
                          v80 = v120[4];
                          if (v65 < (v120[5] - v80) >> 3)
                          {
                            v81 = *(_QWORD *)(v80 + 8 * v65);
                            if (v81)
                            {
                              v82 = *(unsigned __int16 *)(v81 + 2 * v67);
                              v84 = v120[7];
                              v83 = v120[8];
                              if (v82 < (v83 - v84) >> 3)
                              {
                                v85 = v84 + 8 * v82;
                                if (*(_DWORD *)(v85 + 4) == (_DWORD)v64 && v85 != v83)
                                {
                                  v8 = v62;
                                  goto LABEL_100;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v62;
        }
        while (v62 != v8);
        v62 = v8;
LABEL_100:
        v121 = v62;
        if (v9 == v8)
          goto LABEL_161;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_161:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v10 + 8) = 0;
  return result;
}

void sub_19F6C9BC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::StyleColorConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x7E6F38B7040F8E0FLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x7E6F38B7040F8E0FLL;
      if (*(_QWORD *)&v3 <= 0x7E6F38B7040F8E0FuLL)
        v5 = 0x7E6F38B7040F8E0FuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x7E6F38B7040F8E0FLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x7E6F38B7040F8E0FLL)
            {
              if (v7[2] == 0x7E6F38B7040F8E0FLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x7E6F38B7040F8E0FLL)
          {
            if (v7[2] == 0x7E6F38B7040F8E0FLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::StyleColorConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 36;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273BD8;
  *(_QWORD *)(v11 + 8) = 0x7E6F38B7040F8E0FLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x7E6F38B7040F8E0FuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x7E6F38B7040F8E0FLL;
  v15[1] = "md::ls::StyleColorConstantDataHandle]";
  v15[2] = 36;
  gdc::Registry::_registerStorageDataSignals(a1, 0x7E6F38B7040F8E0FLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6C9DE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xF10E3A2DC308C279;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xF10E3A2DC308C279;
      if (*(_QWORD *)&v3 <= 0xF10E3A2DC308C279)
        v5 = 0xF10E3A2DC308C279 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xF10E3A2DC308C279;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xF10E3A2DC308C279)
            {
              if (v7[2] == 0xF10E3A2DC308C279)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xF10E3A2DC308C279)
          {
            if (v7[2] == 0xF10E3A2DC308C279)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>]";
  *(_QWORD *)(v11 + 24) = 86;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273758;
  *(_QWORD *)(v11 + 8) = 0xF10E3A2DC308C279;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xF10E3A2DC308C279, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xF10E3A2DC308C279;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>]";
  v15[2] = 86;
  gdc::Registry::_registerStorageDataSignals(a1, 0xF10E3A2DC308C279, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6CA010(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::StyleColorConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::StyleColorConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::StyleColorConstantDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::StyleColorConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#2},std::allocator<md::ita::AssignTileViewData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#2},std::allocator<md::ita::AssignTileViewData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283608;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#2},std::allocator<md::ita::AssignTileViewData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283608;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#2},std::allocator<md::ita::AssignTileViewData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6CA398(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#1},std::allocator<md::ita::AssignTileViewData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#1},std::allocator<md::ita::AssignTileViewData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283650;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#1},std::allocator<md::ita::AssignTileViewData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283650;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#1},std::allocator<md::ita::AssignTileViewData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xCFE242268B958ADALL;
  v2[1] = "md::ls::ViewConstantDataHandle]";
  *(_QWORD *)&result = 30;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4190;
  v2[4] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::View>>]";
  v2[5] = 77;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTileViewData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTileViewData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTileViewData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTileViewData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42763A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTileViewData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTileViewData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42763A8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTileViewData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTileViewData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD **v53;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  unint64_t v61;
  unint64_t v62;
  uint8x8_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  unsigned __int8 v72;
  uint8x8_t v73;
  unint64_t v74;
  uint64_t ***v75;
  uint64_t **v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v106;
  md *v107;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::ViewConstantDataHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::View>>>(v2);
  v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v6 = (_QWORD *)v5;
  v7 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v7 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v5 + 32);
  v110 = v7;
  v111 = v3;
  v112 = (_QWORD *)v4;
  v113 = (_QWORD *)v5;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v114 = v8;
  if (v9 == v8)
  {
    v10 = a1;
  }
  else
  {
    v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v110))
    {
      v11 = v8 + 1;
      do
      {
        v8 = v11;
        v114 = v11;
        if (v11 == v9)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v110);
        v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v109 = result;
    while (1)
    {
      *result = *v8;
      v14 = *v8;
      v15 = HIDWORD(*v8);
      v16 = *v8 >> 39;
      v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            v21 = v3[7],
            v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
      {
        v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        v24 = (unint64_t *)v3[11];
      }
      v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            v29 = v6[7],
            v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
      {
        v32 = v6[11];
        v33 = v6[10] + 8 * v27;
      }
      else
      {
        v32 = v6[11];
        v33 = v32;
      }
      if (v33 == v32)
        v34 = 0;
      else
        v34 = (unint64_t *)v33;
      v35 = **(_QWORD **)(v10 + 8);
      v36 = *(_QWORD **)v35;
      v37 = *(_QWORD **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37)
            goto LABEL_45;
        }
      }
      if (v36 == v37)
      {
LABEL_45:
        v38 = 0;
      }
      else
      {
        v38 = (_QWORD *)v36[3];
        v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldxr(p_shared_owners);
          while (__stxr(v41 + 1, p_shared_owners));
          do
            v42 = __ldaxr(p_shared_owners);
          while (__stlxr(v42 - 1, p_shared_owners));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      v43 = *v34;
      v44 = *v34;
      v45 = v38[50];
      v46 = (v38[51] - v45) >> 3;
      if (v44 < v46
        && (v47 = *(_QWORD *)(v45 + 8 * v44)) != 0
        && HIDWORD(v43) == HIDWORD(v47)
        && ((v48 = v38[53], v48 + 16 * v47 != v38[54]) ? (v49 = v48 == 0) : (v49 = 1), !v49))
      {
        v55 = *(_QWORD *)(v45 + 8 * v44);
        v56 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v56[3];
        v57 = v48 + 16 * v55;
        v10 = a1;
        v50 = *(_QWORD **)(v57 + 8);
        v43 = *v34;
        v45 = v38[50];
        v44 = *v34;
        if (v44 >= (v38[51] - v45) >> 3)
        {
LABEL_66:
          v71 = 0;
          goto LABEL_67;
        }
      }
      else
      {
        v50 = 0;
        if (v44 >= v46)
          goto LABEL_66;
      }
      v51 = *(_QWORD *)(v45 + 8 * v44);
      if (!v51 || HIDWORD(v43) != HIDWORD(v51))
        goto LABEL_66;
      v52 = v38[53];
      v53 = (_QWORD **)(v52 + 16 * v51);
      if (v53 == (_QWORD **)v38[54] || v52 == 0)
      {
        v71 = 0;
      }
      else
      {
        v70 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v70[3];
        v71 = *v53;
      }
      v10 = a1;
LABEL_67:
      v58 = md::VKMRenderResourcesStore::getConstantData<ggl::Tile::View>((uint64_t)v38, *v24);
      if (v58)
      {
        v59 = v58;
        if ((v60 & 1) == 0
        {
          do
            v106 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
          while (__stlxr(v106 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
          gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>(void)::index = v106;
          v10 = a1;
        }
        v61 = v50[1];
        if (v61)
        {
          v62 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>(void)::index;
          v63 = (uint8x8_t)vcnt_s8((int8x8_t)v61);
          v63.i16[0] = vaddlv_u8(v63);
          if (v63.u32[0] > 1uLL)
          {
            v64 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>(void)::index;
            if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>(void)::index >= v61)
              v64 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>(void)::index % v61;
          }
          else
          {
            v64 = (v61 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>(void)::index;
          }
          v65 = *(_QWORD **)(*v50 + 8 * v64);
          if (v65)
          {
            v66 = (_QWORD *)*v65;
            if (v66)
            {
              if (v63.u32[0] < 2uLL)
              {
                v67 = v61 - 1;
                while (1)
                {
                  v69 = v66[1];
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>(void)::index == v69)
                  {
                    if (v66[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>(void)::index)
                      goto LABEL_91;
                  }
                  else if ((v69 & v67) != v64)
                  {
                    goto LABEL_116;
                  }
                  v66 = (_QWORD *)*v66;
                  if (!v66)
                    goto LABEL_116;
                }
              }
              do
              {
                v68 = v66[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>(void)::index == v68)
                {
                  if (v66[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>(void)::index)
                  {
LABEL_91:
                    if ((v72 & 1) == 0)
                    {
                      if ((_DWORD)v107)
                      {
                        md::typeToIntMap(v107);
                        v10 = a1;
                      }
                    }
                    if (!qword_1EE5779D0)
                      goto LABEL_153;
                    v73 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                    v73.i16[0] = vaddlv_u8(v73);
                    if (v73.u32[0] > 1uLL)
                    {
                      v74 = v62;
                      if (v62 >= qword_1EE5779D0)
                        v74 = v62 % qword_1EE5779D0;
                    }
                    else
                    {
                      v74 = (qword_1EE5779D0 - 1) & v62;
                    }
                    v75 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v74);
                    if (!v75 || (v76 = *v75) == 0)
LABEL_153:
                      abort();
                    if (v73.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v78 = v76[1];
                        if ((uint64_t *)v62 == v78)
                        {
                          if (v76[2] == (uint64_t *)v62)
                            goto LABEL_112;
                        }
                        else if (((unint64_t)v78 & (qword_1EE5779D0 - 1)) != v74)
                        {
                          goto LABEL_153;
                        }
                        v76 = (uint64_t **)*v76;
                        if (!v76)
                          goto LABEL_153;
                      }
                    }
                    while (1)
                    {
                      v77 = (unint64_t)v76[1];
                      if (v62 == v77)
                      {
                        if (v76[2] == (uint64_t *)v62)
                        {
LABEL_112:
                          v79 = *((int *)v76 + 6);
                          v80 = *((int *)v76 + 7);
                          if ((_DWORD)v79 != -1)
                            ggl::PipelineSetup::setConstantData(v71, v79, v59, 1);
                          if ((_DWORD)v80 != -1)
                            ggl::PipelineSetup::setConstantData(v71, v80, v59, 2);
                          goto LABEL_116;
                        }
                      }
                      else
                      {
                        if (v77 >= qword_1EE5779D0)
                          v77 %= (unint64_t)qword_1EE5779D0;
                        if (v77 != v74)
                          goto LABEL_153;
                      }
                      v76 = (uint64_t **)*v76;
                      if (!v76)
                        goto LABEL_153;
                    }
                  }
                }
                else
                {
                  if (v68 >= v61)
                    v68 %= v61;
                  if (v68 != v64)
                    break;
                }
                v66 = (_QWORD *)*v66;
              }
              while (v66);
            }
          }
        }
      }
LABEL_116:
      v8 = (_QWORD *)v110[4];
      v81 = v114 + 1;
      v114 = v81;
      if (v81 == v8)
      {
        result = v109;
        if (v9 == v8)
          goto LABEL_152;
      }
      else
      {
        v82 = v111[4];
        result = v109;
        do
        {
          v83 = *((unsigned int *)v81 + 1);
          v84 = v83 >> 7;
          if (v83 >> 7 < (v111[5] - v82) >> 3)
          {
            v85 = *(_QWORD *)(v82 + 8 * v84);
            if (v85)
            {
              v86 = v83 & 0x7F;
              v87 = *(unsigned __int16 *)(v85 + 2 * v86);
              v88 = v111[7];
              v89 = v111[8];
              if (v87 < (v89 - v88) >> 3)
              {
                v90 = v88 + 8 * v87;
                if (v90 != v89 && *(_DWORD *)(v90 + 4) == (_DWORD)v83)
                {
                  v92 = v112[4];
                  if (v84 < (v112[5] - v92) >> 3)
                  {
                    v93 = *(_QWORD *)(v92 + 8 * v84);
                    if (v93)
                    {
                      v94 = *(unsigned __int16 *)(v93 + 2 * v86);
                      v95 = v112[7];
                      v96 = v112[8];
                      if (v94 < (v96 - v95) >> 3)
                      {
                        v97 = v95 + 8 * v94;
                        if (v97 != v96 && *(_DWORD *)(v97 + 4) == (_DWORD)v83)
                        {
                          v99 = v113[4];
                          if (v84 < (v113[5] - v99) >> 3)
                          {
                            v100 = *(_QWORD *)(v99 + 8 * v84);
                            if (v100)
                            {
                              v101 = *(unsigned __int16 *)(v100 + 2 * v86);
                              v103 = v113[7];
                              v102 = v113[8];
                              if (v101 < (v102 - v103) >> 3)
                              {
                                v104 = v103 + 8 * v101;
                                if (*(_DWORD *)(v104 + 4) == (_DWORD)v83 && v104 != v102)
                                {
                                  v8 = v81;
                                  goto LABEL_144;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v81;
        }
        while (v81 != v8);
        v81 = v8;
LABEL_144:
        v114 = v81;
        if (v9 == v8)
          goto LABEL_152;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_152:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v10 + 8) = 0;
  return result;
}

void sub_19F6CAC28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::ViewConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCFE242268B958ADALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCFE242268B958ADALL;
      if (*(_QWORD *)&v3 <= 0xCFE242268B958ADALL)
        v5 = 0xCFE242268B958ADALL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCFE242268B958ADALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCFE242268B958ADALL)
            {
              if (v7[2] == 0xCFE242268B958ADALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCFE242268B958ADALL)
          {
            if (v7[2] == 0xCFE242268B958ADALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::ViewConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 30;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272A98;
  *(_QWORD *)(v11 + 8) = 0xCFE242268B958ADALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCFE242268B958ADALL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCFE242268B958ADALL;
  v15[1] = "md::ls::ViewConstantDataHandle]";
  v15[2] = 30;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCFE242268B958ADALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6CAE4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::View>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x90CDA7E17AF1623ELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x90CDA7E17AF1623ELL;
      if (*(_QWORD *)&v3 <= 0x90CDA7E17AF1623ELL)
        v5 = 0x90CDA7E17AF1623ELL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x90CDA7E17AF1623ELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x90CDA7E17AF1623ELL)
            {
              if (v7[2] == 0x90CDA7E17AF1623ELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x90CDA7E17AF1623ELL)
          {
            if (v7[2] == 0x90CDA7E17AF1623ELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::View>>]";
  *(_QWORD *)(v11 + 24) = 77;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273698;
  *(_QWORD *)(v11 + 8) = 0x90CDA7E17AF1623ELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x90CDA7E17AF1623ELL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x90CDA7E17AF1623ELL;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::View>>]";
  v15[2] = 77;
  gdc::Registry::_registerStorageDataSignals(a1, 0x90CDA7E17AF1623ELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6CB074(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::View>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::View>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::View>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::View>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::ViewConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ViewConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ViewConstantDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ViewConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#2},std::allocator<md::ita::AssignPositionScaleInfo &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#2},std::allocator<md::ita::AssignPositionScaleInfo &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284AD8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#2},std::allocator<md::ita::AssignPositionScaleInfo &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284AD8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#2},std::allocator<md::ita::AssignPositionScaleInfo &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6CB3FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#1},std::allocator<md::ita::AssignPositionScaleInfo &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#1},std::allocator<md::ita::AssignPositionScaleInfo &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284B20;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#1},std::allocator<md::ita::AssignPositionScaleInfo &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284B20;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#1},std::allocator<md::ita::AssignPositionScaleInfo &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x6C7EE74910D42096;
  v2[1] = "md::ls::PositionScaleInfoConstantDataHandle]";
  *(_QWORD *)&result = 43;
  *((_OWORD *)v2 + 1) = xmmword_19FFB41A0;
  v2[4] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>]";
  v2[5] = 90;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignPositionScaleInfo>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignPositionScaleInfo>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignPositionScaleInfo>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignPositionScaleInfo>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276E10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignPositionScaleInfo>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignPositionScaleInfo>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276E10;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignPositionScaleInfo>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignPositionScaleInfo>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD **v53;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t *v88;
  _QWORD *v90;
  uint64_t v91;
  unsigned __int8 v92;
  unint64_t v93;
  unint64_t v94;
  uint8x8_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unsigned __int8 v104;
  uint8x8_t v105;
  unint64_t v106;
  uint64_t ***v107;
  uint64_t **v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  md *v114;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  unint64_t v122;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::PositionScaleInfoConstantDataHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>>(v2);
  v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v6 = (_QWORD *)v5;
  v7 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v7 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v5 + 32);
  v117 = v7;
  v118 = v3;
  v119 = (_QWORD *)v4;
  v120 = (_QWORD *)v5;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v121 = v8;
  if (v9 == v8)
  {
    v10 = a1;
  }
  else
  {
    v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v117))
    {
      v11 = v8 + 1;
      do
      {
        v8 = v11;
        v121 = v11;
        if (v11 == v9)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v117);
        v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v116 = result;
    while (1)
    {
      *result = *v8;
      v14 = *v8;
      v15 = HIDWORD(*v8);
      v16 = *v8 >> 39;
      v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            v21 = v3[7],
            v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
      {
        v24 = (unint64_t *)(v3[10] + 16 * v19);
      }
      else
      {
        v24 = (unint64_t *)v3[11];
      }
      v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            v29 = v6[7],
            v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
      {
        v32 = v6[11];
        v33 = v6[10] + 8 * v27;
      }
      else
      {
        v32 = v6[11];
        v33 = v32;
      }
      if (v33 == v32)
        v34 = 0;
      else
        v34 = (unint64_t *)v33;
      v35 = **(_QWORD **)(v10 + 8);
      v36 = *(_QWORD **)v35;
      v37 = *(_QWORD **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37)
            goto LABEL_45;
        }
      }
      if (v36 == v37)
      {
LABEL_45:
        v38 = 0;
      }
      else
      {
        v38 = (_QWORD *)v36[3];
        v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldxr(p_shared_owners);
          while (__stxr(v41 + 1, p_shared_owners));
          do
            v42 = __ldaxr(p_shared_owners);
          while (__stlxr(v42 - 1, p_shared_owners));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      v43 = *v34;
      v44 = *v34;
      v45 = v38[50];
      v46 = (v38[51] - v45) >> 3;
      if (v44 < v46
        && (v47 = *(_QWORD *)(v45 + 8 * v44)) != 0
        && HIDWORD(v43) == HIDWORD(v47)
        && ((v48 = v38[53], v48 + 16 * v47 != v38[54]) ? (v49 = v48 == 0) : (v49 = 1), !v49))
      {
        v55 = *(_QWORD *)(v45 + 8 * v44);
        v56 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v56[3];
        v57 = v48 + 16 * v55;
        v10 = a1;
        v50 = *(_QWORD **)(v57 + 8);
        v43 = *v34;
        v45 = v38[50];
        v44 = *v34;
        if (v44 >= (v38[51] - v45) >> 3)
        {
LABEL_66:
          v98 = 0;
          goto LABEL_67;
        }
      }
      else
      {
        v50 = 0;
        if (v44 >= v46)
          goto LABEL_66;
      }
      v51 = *(_QWORD *)(v45 + 8 * v44);
      if (!v51 || HIDWORD(v43) != HIDWORD(v51))
        goto LABEL_66;
      v52 = v38[53];
      v53 = (_QWORD **)(v52 + 16 * v51);
      if (v53 == (_QWORD **)v38[54] || v52 == 0)
      {
        v98 = 0;
      }
      else
      {
        v97 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v97[3];
        v98 = *v53;
      }
      v10 = a1;
LABEL_67:
      v58 = *v24;
      v122 = v58;
      v59 = v38[711];
      if (v58 < (unint64_t)((v38[712] - v59) >> 3))
      {
        v60 = *(_QWORD *)(v59 + 8 * v58);
        if (v60 && HIDWORD(v58) == HIDWORD(v60))
        {
          v87 = v38[714];
          v88 = (uint64_t *)(v87 + 24 * v60);
          if (v88 != (uint64_t *)v38[715] && v87 != 0)
          {
            v90 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>> const&>,std::tuple<>>((uint64_t)(v38 + 703), v58, &v122);
            ++v90[3];
            v91 = *v88;
            if (v91)
            {
              if ((v92 & 1) == 0
              {
                do
                  v113 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
                while (__stlxr(v113 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
                gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>(void)::index = v113;
                v10 = a1;
              }
              v93 = v50[1];
              if (v93)
              {
                v94 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>(void)::index;
                v95 = (uint8x8_t)vcnt_s8((int8x8_t)v93);
                v95.i16[0] = vaddlv_u8(v95);
                if (v95.u32[0] > 1uLL)
                {
                  v96 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>(void)::index;
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>(void)::index >= v93)
                    v96 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>(void)::index % v93;
                }
                else
                {
                  v96 = (v93 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>(void)::index;
                }
                v99 = *(_QWORD **)(*v50 + 8 * v96);
                if (v99)
                {
                  v100 = (_QWORD *)*v99;
                  if (v100)
                  {
                    if (v95.u32[0] < 2uLL)
                    {
                      v101 = v93 - 1;
                      while (1)
                      {
                        v103 = v100[1];
                        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>(void)::index == v103)
                        {
                          if (v100[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>(void)::index)
                            goto LABEL_130;
                        }
                        else if ((v103 & v101) != v96)
                        {
                          goto LABEL_72;
                        }
                        v100 = (_QWORD *)*v100;
                        if (!v100)
                          goto LABEL_72;
                      }
                    }
                    do
                    {
                      v102 = v100[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>(void)::index == v102)
                      {
                        if (v100[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>(void)::index)
                        {
LABEL_130:
                          if ((v104 & 1) == 0)
                          {
                            if ((_DWORD)v114)
                            {
                              md::typeToIntMap(v114);
                              v10 = a1;
                            }
                          }
                          if (!qword_1EE5779D0)
                            goto LABEL_162;
                          v105 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                          v105.i16[0] = vaddlv_u8(v105);
                          if (v105.u32[0] > 1uLL)
                          {
                            v106 = v94;
                            if (v94 >= qword_1EE5779D0)
                              v106 = v94 % qword_1EE5779D0;
                          }
                          else
                          {
                            v106 = (qword_1EE5779D0 - 1) & v94;
                          }
                          v107 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v106);
                          if (!v107 || (v108 = *v107) == 0)
LABEL_162:
                            abort();
                          if (v105.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              v110 = v108[1];
                              if ((uint64_t *)v94 == v110)
                              {
                                if (v108[2] == (uint64_t *)v94)
                                  goto LABEL_151;
                              }
                              else if (((unint64_t)v110 & (qword_1EE5779D0 - 1)) != v106)
                              {
                                goto LABEL_162;
                              }
                              v108 = (uint64_t **)*v108;
                              if (!v108)
                                goto LABEL_162;
                            }
                          }
                          while (1)
                          {
                            v109 = (unint64_t)v108[1];
                            if (v94 == v109)
                            {
                              if (v108[2] == (uint64_t *)v94)
                              {
LABEL_151:
                                v111 = *((int *)v108 + 6);
                                v112 = *((int *)v108 + 7);
                                if ((_DWORD)v111 != -1)
                                  ggl::PipelineSetup::setConstantData(v98, v111, v91, 1);
                                if ((_DWORD)v112 != -1)
                                  ggl::PipelineSetup::setConstantData(v98, v112, v91, 2);
                                goto LABEL_72;
                              }
                            }
                            else
                            {
                              if (v109 >= qword_1EE5779D0)
                                v109 %= (unint64_t)qword_1EE5779D0;
                              if (v109 != v106)
                                goto LABEL_162;
                            }
                            v108 = (uint64_t **)*v108;
                            if (!v108)
                              goto LABEL_162;
                          }
                        }
                      }
                      else
                      {
                        if (v102 >= v93)
                          v102 %= v93;
                        if (v102 != v96)
                          break;
                      }
                      v100 = (_QWORD *)*v100;
                    }
                    while (v100);
                  }
                }
              }
            }
          }
        }
      }
LABEL_72:
      v8 = (_QWORD *)v117[4];
      v62 = v121 + 1;
      v121 = v62;
      if (v62 == v8)
      {
        result = v116;
        if (v9 == v8)
          goto LABEL_161;
      }
      else
      {
        v63 = v118[4];
        result = v116;
        do
        {
          v64 = *((unsigned int *)v62 + 1);
          v65 = v64 >> 7;
          if (v64 >> 7 < (v118[5] - v63) >> 3)
          {
            v66 = *(_QWORD *)(v63 + 8 * v65);
            if (v66)
            {
              v67 = v64 & 0x7F;
              v68 = *(unsigned __int16 *)(v66 + 2 * v67);
              v69 = v118[7];
              v70 = v118[8];
              if (v68 < (v70 - v69) >> 3)
              {
                v71 = v69 + 8 * v68;
                if (v71 != v70 && *(_DWORD *)(v71 + 4) == (_DWORD)v64)
                {
                  v73 = v119[4];
                  if (v65 < (v119[5] - v73) >> 3)
                  {
                    v74 = *(_QWORD *)(v73 + 8 * v65);
                    if (v74)
                    {
                      v75 = *(unsigned __int16 *)(v74 + 2 * v67);
                      v76 = v119[7];
                      v77 = v119[8];
                      if (v75 < (v77 - v76) >> 3)
                      {
                        v78 = v76 + 8 * v75;
                        if (v78 != v77 && *(_DWORD *)(v78 + 4) == (_DWORD)v64)
                        {
                          v80 = v120[4];
                          if (v65 < (v120[5] - v80) >> 3)
                          {
                            v81 = *(_QWORD *)(v80 + 8 * v65);
                            if (v81)
                            {
                              v82 = *(unsigned __int16 *)(v81 + 2 * v67);
                              v84 = v120[7];
                              v83 = v120[8];
                              if (v82 < (v83 - v84) >> 3)
                              {
                                v85 = v84 + 8 * v82;
                                if (*(_DWORD *)(v85 + 4) == (_DWORD)v64 && v85 != v83)
                                {
                                  v8 = v62;
                                  goto LABEL_100;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v62;
        }
        while (v62 != v8);
        v62 = v8;
LABEL_100:
        v121 = v62;
        if (v9 == v8)
          goto LABEL_161;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_161:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v10 + 8) = 0;
  return result;
}

void sub_19F6CBCF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::PositionScaleInfoConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x6C7EE74910D42096;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x6C7EE74910D42096;
      if (*(_QWORD *)&v3 <= 0x6C7EE74910D42096uLL)
        v5 = 0x6C7EE74910D42096uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x6C7EE74910D42096;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x6C7EE74910D42096)
            {
              if (v7[2] == 0x6C7EE74910D42096)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x6C7EE74910D42096)
          {
            if (v7[2] == 0x6C7EE74910D42096)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::PositionScaleInfoConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 43;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42741A8;
  *(_QWORD *)(v11 + 8) = 0x6C7EE74910D42096;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x6C7EE74910D42096uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x6C7EE74910D42096;
  v15[1] = "md::ls::PositionScaleInfoConstantDataHandle]";
  v15[2] = 43;
  gdc::Registry::_registerStorageDataSignals(a1, 0x6C7EE74910D42096, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6CBF1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x9E3F3811EAB07CCALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x9E3F3811EAB07CCALL;
      if (*(_QWORD *)&v3 <= 0x9E3F3811EAB07CCALL)
        v5 = 0x9E3F3811EAB07CCALL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x9E3F3811EAB07CCALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x9E3F3811EAB07CCALL)
            {
              if (v7[2] == 0x9E3F3811EAB07CCALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x9E3F3811EAB07CCALL)
          {
            if (v7[2] == 0x9E3F3811EAB07CCALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>]";
  *(_QWORD *)(v11 + 24) = 90;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273668;
  *(_QWORD *)(v11 + 8) = 0x9E3F3811EAB07CCALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x9E3F3811EAB07CCALL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x9E3F3811EAB07CCALL;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>]";
  v15[2] = 90;
  gdc::Registry::_registerStorageDataSignals(a1, 0x9E3F3811EAB07CCALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6CC144(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::PositionScaleInfoConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PositionScaleInfoConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 16 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_BYTE *)(v15 - 8);
  *(_QWORD *)v14 = *(_QWORD *)(v15 - 16);
  *(_BYTE *)(v14 + 8) = v16;
  a1[11] -= 16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PositionScaleInfoConstantDataHandle>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PositionScaleInfoConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightSpecularConfiguration>(md::ita::AssignLightSpecularConfiguration &&)::{lambda(void)#2},std::allocator<md::ita::AssignLightSpecularConfiguration &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightSpecularConfiguration>(md::ita::AssignLightSpecularConfiguration &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightSpecularConfiguration>(md::ita::AssignLightSpecularConfiguration &&)::{lambda(void)#2},std::allocator<md::ita::AssignLightSpecularConfiguration &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightSpecularConfiguration>(md::ita::AssignLightSpecularConfiguration &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42878F8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightSpecularConfiguration>(md::ita::AssignLightSpecularConfiguration &&)::{lambda(void)#2},std::allocator<md::ita::AssignLightSpecularConfiguration &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightSpecularConfiguration>(md::ita::AssignLightSpecularConfiguration &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42878F8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightSpecularConfiguration>(md::ita::AssignLightSpecularConfiguration &&)::{lambda(void)#2},std::allocator<md::ita::AssignLightSpecularConfiguration &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightSpecularConfiguration>(md::ita::AssignLightSpecularConfiguration &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6CC4D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightSpecularConfiguration>(md::ita::AssignLightSpecularConfiguration &&)::{lambda(void)#1},std::allocator<md::ita::AssignLightSpecularConfiguration &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightSpecularConfiguration>(md::ita::AssignLightSpecularConfiguration &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightSpecularConfiguration>(md::ita::AssignLightSpecularConfiguration &&)::{lambda(void)#1},std::allocator<md::ita::AssignLightSpecularConfiguration &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightSpecularConfiguration>(md::ita::AssignLightSpecularConfiguration &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287940;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightSpecularConfiguration>(md::ita::AssignLightSpecularConfiguration &&)::{lambda(void)#1},std::allocator<md::ita::AssignLightSpecularConfiguration &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightSpecularConfiguration>(md::ita::AssignLightSpecularConfiguration &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287940;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightSpecularConfiguration>(md::ita::AssignLightSpecularConfiguration &&)::{lambda(void)#1},std::allocator<md::ita::AssignLightSpecularConfiguration &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightSpecularConfiguration>(md::ita::AssignLightSpecularConfiguration &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  v3 = 0;
  *a1 = result;
  a1[1] = result;
  a1[2] = result + 3;
  v4 = 0xCBF29CE484222325;
  do
    v4 = 0x100000001B3 * (v4 ^ aStdStringViewG_654[v3++ + 38]);
  while (v3 != 103);
  *result = v4;
  result[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>]";
  result[2] = 103;
  a1[1] = result + 3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLightSpecularConfiguration>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLightSpecularConfiguration>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLightSpecularConfiguration>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLightSpecularConfiguration>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278520;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLightSpecularConfiguration>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLightSpecularConfiguration>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278520;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLightSpecularConfiguration>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLightSpecularConfiguration>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t (***v37)(_QWORD);
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  int8x8_t v43;
  uint8x8_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD **v64;
  _QWORD **v65;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  unsigned __int8 v70;
  unint64_t v71;
  unint64_t v72;
  uint8x8_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unsigned __int8 v80;
  uint8x8_t v81;
  unint64_t v82;
  uint64_t ***v83;
  uint64_t **v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v108;
  md *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112[4];
  unint64_t *v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  unint64_t *v117;

  v3 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = 0xCBF29CE484222325;
  do
    v5 = 0x100000001B3 * (v5 ^ aStdStringViewG_654[v3++ + 38]);
  while (v3 != 103);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>>(v4, v5);
  v7 = (_QWORD *)gdc::Registry::storage<md::ls::PipelineSetup>(v4);
  v8 = v7;
  v9 = v7 + 4;
  if (v7[8] - v7[7] >= v6[8] - v6[7])
    v10 = (uint64_t)(v6 + 4);
  else
    v10 = (uint64_t)(v7 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v114, v10, v6, v7, *(_QWORD *)(v10 + 24));
  if (v8[8] - v8[7] >= v6[8] - v6[7])
    v11 = (uint64_t)(v6 + 4);
  else
    v11 = (uint64_t)v9;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v112, v11, v6, v8, *(_QWORD *)(v11 + 32));
  if (v113 != v117)
  {
    v13 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      *v13 = *v12;
      v14 = *v12;
      v15 = v8[4];
      if (v14 >> 39 < (v8[5] - v15) >> 3
        && (v16 = *(_QWORD *)(v15 + 8 * (v14 >> 39))) != 0
        && (v17 = *(unsigned __int16 *)(v16 + 2 * (HIDWORD(v14) & 0x7F)),
            v19 = v8[7],
            v18 = v8[8],
            v17 < (v18 - v19) >> 3)
        && ((v20 = HIDWORD(v14), v21 = v19 + 8 * v17, v21 != v18)
          ? (v22 = *(_DWORD *)(v21 + 4) == (_DWORD)v20)
          : (v22 = 0),
            v22))
      {
        v23 = v8[11];
        v24 = v8[10] + 8 * v17;
      }
      else
      {
        v23 = v8[11];
        v24 = v23;
      }
      if (v24 == v23)
        v25 = 0;
      else
        v25 = (unint64_t *)v24;
      v26 = **(_QWORD **)(a1 + 8);
      v27 = *(_QWORD **)v26;
      v28 = *(_QWORD **)(v26 + 8);
      if (v27 != v28)
      {
        while (*v27 != 0x41D4E9297E100630)
        {
          v27 += 5;
          if (v27 == v28)
            goto LABEL_34;
        }
      }
      if (v27 == v28)
      {
LABEL_34:
        v29 = 0;
      }
      else
      {
        v29 = (_QWORD *)v27[3];
        v30 = (std::__shared_weak_count *)v27[4];
        if (v30)
        {
          p_shared_owners = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldxr(p_shared_owners);
          while (__stxr(v32 + 1, p_shared_owners));
          do
            v33 = __ldaxr(p_shared_owners);
          while (__stlxr(v33 - 1, p_shared_owners));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
      }
      v34 = ***(uint64_t ****)(a1 + 8);
      if (v34 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v34 != 0x22D45F5AAD4BF408)
      {
        v35 = v34 + 5;
        do
        {
          v36 = *v35;
          v35 += 5;
        }
        while (v36 != 0x22D45F5AAD4BF408);
        v34 = v35 - 5;
      }
      v37 = (uint64_t (***)(_QWORD))v34[3];
      v38 = (std::__shared_weak_count *)v34[4];
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
        do
          v41 = __ldaxr(v39);
        while (__stlxr(v41 - 1, v39));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v42 = *(_QWORD **)((**v37)(v37) + 8);
      v43 = (int8x8_t)v42[1];
      if (!*(_QWORD *)&v43)
        goto LABEL_136;
      v44 = (uint8x8_t)vcnt_s8(v43);
      v44.i16[0] = vaddlv_u8(v44);
      if (v44.u32[0] > 1uLL)
      {
        v45 = 0x41E8D6E445F4145;
        if (*(_QWORD *)&v43 <= 0x41E8D6E445F4145uLL)
          v45 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v43;
      }
      else
      {
        v45 = (*(_QWORD *)&v43 - 1) & 0x41E8D6E445F4145;
      }
      v46 = *(_QWORD **)(*v42 + 8 * v45);
      if (!v46)
        goto LABEL_136;
      v47 = (_QWORD *)*v46;
      if (!v47)
        goto LABEL_136;
      if (v44.u32[0] < 2uLL)
      {
        v48 = *(_QWORD *)&v43 - 1;
        while (1)
        {
          v50 = v47[1];
          if (v50 == 0x41E8D6E445F4145)
          {
            if (v47[2] == 0x41E8D6E445F4145)
              goto LABEL_68;
          }
          else if ((v50 & v48) != v45)
          {
            goto LABEL_136;
          }
          v47 = (_QWORD *)*v47;
          if (!v47)
            goto LABEL_136;
        }
      }
      while (1)
      {
        v49 = v47[1];
        if (v49 == 0x41E8D6E445F4145)
          break;
        if (v49 >= *(_QWORD *)&v43)
          v49 %= *(_QWORD *)&v43;
        if (v49 != v45)
          goto LABEL_136;
LABEL_56:
        v47 = (_QWORD *)*v47;
        if (!v47)
          goto LABEL_136;
      }
      if (v47[2] != 0x41E8D6E445F4145)
        goto LABEL_56;
LABEL_68:
      v51 = v47[5];
      if (*(_QWORD *)(v51 + 8) != 0x41E8D6E445F4145)
        goto LABEL_136;
      v52 = *(_QWORD *)(v51 + 32);
      if (!v52)
        goto LABEL_136;
      v111 = *(_QWORD *)(v52 + 32);
      v53 = (uint64_t)(v29 + 37);
      v54 = *v25;
      v55 = *v25;
      v56 = v29[50];
      v57 = (v29[51] - v56) >> 3;
      if (v55 < v57
        && (v58 = *(_QWORD *)(v56 + 8 * v55)) != 0
        && HIDWORD(v54) == HIDWORD(v58)
        && ((v59 = v29[53], v59 + 16 * v58 != v29[54]) ? (v60 = v59 == 0) : (v60 = 1), !v60))
      {
        v110 = *(_QWORD *)(v56 + 8 * v55);
        v69 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v29 + 37), v54, v25);
        ++v69[3];
        v61 = *(_QWORD **)(v59 + 16 * v110 + 8);
        v54 = *v25;
        v56 = v29[50];
        v55 = *v25;
        if (v55 >= (v29[51] - v56) >> 3)
          goto LABEL_88;
LABEL_79:
        v62 = *(_QWORD *)(v56 + 8 * v55);
        if (!v62 || HIDWORD(v54) != HIDWORD(v62))
          goto LABEL_88;
        v63 = v29[53];
        v64 = (_QWORD **)v29[54];
        v65 = (_QWORD **)(v63 + 16 * v62);
        if (v65 == v64 || v63 == 0)
          goto LABEL_88;
        v67 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v53, v54, v25);
        ++v67[3];
        v68 = *v65;
        if (!v111)
          goto LABEL_136;
      }
      else
      {
        v61 = 0;
        if (v55 < v57)
          goto LABEL_79;
LABEL_88:
        v68 = 0;
        if (!v111)
          goto LABEL_136;
      }
      if ((v70 & 1) == 0
      {
        do
          v108 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
        while (__stlxr(v108 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
        gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>(void)::index = v108;
      }
      v71 = v61[1];
      if (v71)
      {
        v72 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>(void)::index;
        v73 = (uint8x8_t)vcnt_s8((int8x8_t)v71);
        v73.i16[0] = vaddlv_u8(v73);
        if (v73.u32[0] > 1uLL)
        {
          v74 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>(void)::index;
          if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>(void)::index >= v71)
            v74 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>(void)::index % v71;
        }
        else
        {
          v74 = (v71 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>(void)::index;
        }
        v75 = *(_QWORD **)(*v61 + 8 * v74);
        if (v75)
        {
          v76 = (_QWORD *)*v75;
          if (v76)
          {
            if (v73.u32[0] < 2uLL)
            {
              v77 = v71 - 1;
              while (1)
              {
                v79 = v76[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>(void)::index == v79)
                {
                  if (v76[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>(void)::index)
                    goto LABEL_111;
                }
                else if ((v79 & v77) != v74)
                {
                  goto LABEL_136;
                }
                v76 = (_QWORD *)*v76;
                if (!v76)
                  goto LABEL_136;
              }
            }
            do
            {
              v78 = v76[1];
              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>(void)::index == v78)
              {
                if (v76[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>(void)::index)
                {
LABEL_111:
                  if ((v80 & 1) == 0)
                  {
                    if ((_DWORD)v109)
                    {
                      md::typeToIntMap(v109);
                    }
                  }
                  if (!qword_1EE5779D0)
                    goto LABEL_163;
                  v81 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                  v81.i16[0] = vaddlv_u8(v81);
                  if (v81.u32[0] > 1uLL)
                  {
                    v82 = v72;
                    if (v72 >= qword_1EE5779D0)
                      v82 = v72 % qword_1EE5779D0;
                  }
                  else
                  {
                    v82 = (qword_1EE5779D0 - 1) & v72;
                  }
                  v83 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v82);
                  if (!v83 || (v84 = *v83) == 0)
LABEL_163:
                    abort();
                  if (v81.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v86 = v84[1];
                      if ((uint64_t *)v72 == v86)
                      {
                        if (v84[2] == (uint64_t *)v72)
                          goto LABEL_132;
                      }
                      else if (((unint64_t)v86 & (qword_1EE5779D0 - 1)) != v82)
                      {
                        goto LABEL_163;
                      }
                      v84 = (uint64_t **)*v84;
                      if (!v84)
                        goto LABEL_163;
                    }
                  }
                  while (1)
                  {
                    v85 = (unint64_t)v84[1];
                    if (v72 == v85)
                    {
                      if (v84[2] == (uint64_t *)v72)
                      {
LABEL_132:
                        v87 = *((int *)v84 + 6);
                        v88 = *((int *)v84 + 7);
                        if ((_DWORD)v87 != -1)
                          ggl::PipelineSetup::setConstantData(v68, v87, v111, 1);
                        if ((_DWORD)v88 != -1)
                          ggl::PipelineSetup::setConstantData(v68, v88, v111, 2);
                        goto LABEL_136;
                      }
                    }
                    else
                    {
                      if (v85 >= qword_1EE5779D0)
                        v85 %= (unint64_t)qword_1EE5779D0;
                      if (v85 != v82)
                        goto LABEL_163;
                    }
                    v84 = (uint64_t **)*v84;
                    if (!v84)
                      goto LABEL_163;
                  }
                }
              }
              else
              {
                if (v78 >= v71)
                  v78 %= v71;
                if (v78 != v74)
                  break;
              }
              v76 = (_QWORD *)*v76;
            }
            while (v76);
          }
        }
      }
LABEL_136:
      v89 = v117;
      v12 = *(unint64_t **)(v114 + 32);
      if (++v117 != v12)
      {
        v90 = v115[4];
        v91 = (v115[5] - v90) >> 3;
        v92 = v89 + 2;
        while (1)
        {
          v93 = *((unsigned int *)v92 - 1);
          v94 = v93 >> 7;
          if (v93 >> 7 < v91)
          {
            v95 = *(_QWORD *)(v90 + 8 * v94);
            if (v95)
            {
              v96 = *(unsigned __int16 *)(v95 + 2 * (v93 & 0x7F));
              v98 = v115[7];
              v97 = v115[8];
              if (v96 < (v97 - v98) >> 3)
              {
                v99 = v98 + 8 * v96;
                if (v99 != v97 && *(_DWORD *)(v99 + 4) == (_DWORD)v93)
                {
                  v101 = v116[4];
                  if (v94 < (v116[5] - v101) >> 3)
                  {
                    v102 = *(_QWORD *)(v101 + 8 * v94);
                    if (v102)
                    {
                      v103 = *(unsigned __int16 *)(v102 + 2 * (v93 & 0x7F));
                      v105 = v116[7];
                      v104 = v116[8];
                      if (v103 < (v104 - v105) >> 3)
                      {
                        v106 = v105 + 8 * v103;
                        if (v106 != v104 && *(_DWORD *)(v106 + 4) == (_DWORD)v93)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v117 = v92;
          v22 = v92++ == v12;
          if (v22)
            goto LABEL_11;
        }
        v12 = v92 - 1;
      }
LABEL_11:
      if (v113 == v12)
        goto LABEL_162;
    }
  }
  v13 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_162:
  *v13 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_19F6CCE98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t i;
  _QWORD v22[3];
  unint64_t v23;

  v23 = a2;
  v4 = (uint64_t *)(a1 + 120);
  v5 = *(int8x8_t *)(a1 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = a2;
      if (*(_QWORD *)&v5 <= a2)
        v7 = a2 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & a2;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == a2)
            {
              if (v9[2] == a2)
                return v9[3];
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == a2)
          {
            if (v9[2] == a2)
              return v9[3];
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = 0xCBF29CE484222325;
  v14 = operator new();
  v15 = v14;
  v16 = 0;
  v17 = 0xCBF29CE484222325;
  do
    v17 = 0x100000001B3 * (v17 ^ aStdStringViewG_654[v16++ + 38]);
  while (v16 != 103);
  *(_QWORD *)(v14 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>]";
  *(_QWORD *)(v14 + 24) = 103;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_DWORD *)(v14 + 144) = 1065353216;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_QWORD *)(v14 + 184) = 0;
  *(_DWORD *)(v14 + 192) = 1065353216;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 232) = 0;
  *(_DWORD *)(v14 + 240) = 1065353216;
  *(_QWORD *)v14 = &off_1E4273B78;
  *(_QWORD *)(v14 + 8) = v17;
  *(_QWORD *)(v14 + 248) = a1;
  v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, a2, &v23);
  v19 = v18[3];
  v18[3] = v15;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  for (i = 0; i != 103; ++i)
    v13 = 0x100000001B3 * (v13 ^ aStdStringViewG_654[i + 38]);
  v22[0] = v13;
  v22[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>]";
  v22[2] = 103;
  gdc::Registry::_registerStorageDataSignals(a1, a2, (uint64_t)v22, (uint64_t *)(v15 + 104));
  return v15;
}

void sub_19F6CD0FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignColorCorrectionFactor>(md::ita::AssignColorCorrectionFactor &&)::{lambda(void)#2},std::allocator<md::ita::AssignColorCorrectionFactor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignColorCorrectionFactor>(md::ita::AssignColorCorrectionFactor &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignColorCorrectionFactor>(md::ita::AssignColorCorrectionFactor &&)::{lambda(void)#2},std::allocator<md::ita::AssignColorCorrectionFactor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignColorCorrectionFactor>(md::ita::AssignColorCorrectionFactor &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285CD8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignColorCorrectionFactor>(md::ita::AssignColorCorrectionFactor &&)::{lambda(void)#2},std::allocator<md::ita::AssignColorCorrectionFactor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignColorCorrectionFactor>(md::ita::AssignColorCorrectionFactor &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285CD8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignColorCorrectionFactor>(md::ita::AssignColorCorrectionFactor &&)::{lambda(void)#2},std::allocator<md::ita::AssignColorCorrectionFactor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignColorCorrectionFactor>(md::ita::AssignColorCorrectionFactor &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6CD310(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignColorCorrectionFactor>(md::ita::AssignColorCorrectionFactor &&)::{lambda(void)#1},std::allocator<md::ita::AssignColorCorrectionFactor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignColorCorrectionFactor>(md::ita::AssignColorCorrectionFactor &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignColorCorrectionFactor>(md::ita::AssignColorCorrectionFactor &&)::{lambda(void)#1},std::allocator<md::ita::AssignColorCorrectionFactor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignColorCorrectionFactor>(md::ita::AssignColorCorrectionFactor &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285D20;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignColorCorrectionFactor>(md::ita::AssignColorCorrectionFactor &&)::{lambda(void)#1},std::allocator<md::ita::AssignColorCorrectionFactor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignColorCorrectionFactor>(md::ita::AssignColorCorrectionFactor &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285D20;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignColorCorrectionFactor>(md::ita::AssignColorCorrectionFactor &&)::{lambda(void)#1},std::allocator<md::ita::AssignColorCorrectionFactor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignColorCorrectionFactor>(md::ita::AssignColorCorrectionFactor &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x65937AC5D2157F71;
  v2[1] = "md::ls::ColorCorrectionFactorConstantHandle]";
  *(_QWORD *)&result = 43;
  *((_OWORD *)v2 + 1) = xmmword_19FFB41B0;
  v2[4] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>]";
  v2[5] = 97;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignColorCorrectionFactor>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignColorCorrectionFactor>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignColorCorrectionFactor>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignColorCorrectionFactor>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277710;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignColorCorrectionFactor>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignColorCorrectionFactor>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277710;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignColorCorrectionFactor>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignColorCorrectionFactor>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD **v53;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t *v88;
  _QWORD *v90;
  uint64_t v91;
  unsigned __int8 v92;
  unint64_t v93;
  unint64_t v94;
  uint8x8_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unsigned __int8 v104;
  uint8x8_t v105;
  unint64_t v106;
  uint64_t ***v107;
  uint64_t **v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  md *v114;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  unint64_t v122;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::ColorCorrectionFactorConstantHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>>(v2);
  v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v6 = (_QWORD *)v5;
  v7 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v7 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v5 + 32);
  v117 = v7;
  v118 = v3;
  v119 = (_QWORD *)v4;
  v120 = (_QWORD *)v5;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v121 = v8;
  if (v9 == v8)
  {
    v10 = a1;
  }
  else
  {
    v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v117))
    {
      v11 = v8 + 1;
      do
      {
        v8 = v11;
        v121 = v11;
        if (v11 == v9)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v117);
        v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v116 = result;
    while (1)
    {
      *result = *v8;
      v14 = *v8;
      v15 = HIDWORD(*v8);
      v16 = *v8 >> 39;
      v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            v21 = v3[7],
            v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
      {
        v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        v24 = (unint64_t *)v3[11];
      }
      v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            v29 = v6[7],
            v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
      {
        v32 = v6[11];
        v33 = v6[10] + 8 * v27;
      }
      else
      {
        v32 = v6[11];
        v33 = v32;
      }
      if (v33 == v32)
        v34 = 0;
      else
        v34 = (unint64_t *)v33;
      v35 = **(_QWORD **)(v10 + 8);
      v36 = *(_QWORD **)v35;
      v37 = *(_QWORD **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37)
            goto LABEL_45;
        }
      }
      if (v36 == v37)
      {
LABEL_45:
        v38 = 0;
      }
      else
      {
        v38 = (_QWORD *)v36[3];
        v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldxr(p_shared_owners);
          while (__stxr(v41 + 1, p_shared_owners));
          do
            v42 = __ldaxr(p_shared_owners);
          while (__stlxr(v42 - 1, p_shared_owners));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      v43 = *v34;
      v44 = *v34;
      v45 = v38[50];
      v46 = (v38[51] - v45) >> 3;
      if (v44 < v46
        && (v47 = *(_QWORD *)(v45 + 8 * v44)) != 0
        && HIDWORD(v43) == HIDWORD(v47)
        && ((v48 = v38[53], v48 + 16 * v47 != v38[54]) ? (v49 = v48 == 0) : (v49 = 1), !v49))
      {
        v55 = *(_QWORD *)(v45 + 8 * v44);
        v56 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v56[3];
        v57 = v48 + 16 * v55;
        v10 = a1;
        v50 = *(_QWORD **)(v57 + 8);
        v43 = *v34;
        v45 = v38[50];
        v44 = *v34;
        if (v44 >= (v38[51] - v45) >> 3)
        {
LABEL_66:
          v98 = 0;
          goto LABEL_67;
        }
      }
      else
      {
        v50 = 0;
        if (v44 >= v46)
          goto LABEL_66;
      }
      v51 = *(_QWORD *)(v45 + 8 * v44);
      if (!v51 || HIDWORD(v43) != HIDWORD(v51))
        goto LABEL_66;
      v52 = v38[53];
      v53 = (_QWORD **)(v52 + 16 * v51);
      if (v53 == (_QWORD **)v38[54] || v52 == 0)
      {
        v98 = 0;
      }
      else
      {
        v97 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v97[3];
        v98 = *v53;
      }
      v10 = a1;
LABEL_67:
      v58 = *v24;
      v122 = v58;
      v59 = v38[1004];
      if (v58 < (unint64_t)((v38[1005] - v59) >> 3))
      {
        v60 = *(_QWORD *)(v59 + 8 * v58);
        if (v60 && HIDWORD(v58) == HIDWORD(v60))
        {
          v87 = v38[1007];
          v88 = (uint64_t *)(v87 + 24 * v60);
          if (v88 != (uint64_t *)v38[1008] && v87 != 0)
          {
            v90 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>> const&>,std::tuple<>>((uint64_t)(v38 + 991), v58, &v122);
            ++v90[3];
            v91 = *v88;
            if (v91)
            {
              if ((v92 & 1) == 0
              {
                do
                  v113 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
                while (__stlxr(v113 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
                gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>(void)::index = v113;
                v10 = a1;
              }
              v93 = v50[1];
              if (v93)
              {
                v94 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>(void)::index;
                v95 = (uint8x8_t)vcnt_s8((int8x8_t)v93);
                v95.i16[0] = vaddlv_u8(v95);
                if (v95.u32[0] > 1uLL)
                {
                  v96 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>(void)::index;
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>(void)::index >= v93)
                    v96 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>(void)::index % v93;
                }
                else
                {
                  v96 = (v93 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>(void)::index;
                }
                v99 = *(_QWORD **)(*v50 + 8 * v96);
                if (v99)
                {
                  v100 = (_QWORD *)*v99;
                  if (v100)
                  {
                    if (v95.u32[0] < 2uLL)
                    {
                      v101 = v93 - 1;
                      while (1)
                      {
                        v103 = v100[1];
                        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>(void)::index == v103)
                        {
                          if (v100[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>(void)::index)
                            goto LABEL_130;
                        }
                        else if ((v103 & v101) != v96)
                        {
                          goto LABEL_72;
                        }
                        v100 = (_QWORD *)*v100;
                        if (!v100)
                          goto LABEL_72;
                      }
                    }
                    do
                    {
                      v102 = v100[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>(void)::index == v102)
                      {
                        if (v100[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>(void)::index)
                        {
LABEL_130:
                          if ((v104 & 1) == 0)
                          {
                            if ((_DWORD)v114)
                            {
                              md::typeToIntMap(v114);
                              v10 = a1;
                            }
                          }
                          if (!qword_1EE5779D0)
                            goto LABEL_162;
                          v105 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                          v105.i16[0] = vaddlv_u8(v105);
                          if (v105.u32[0] > 1uLL)
                          {
                            v106 = v94;
                            if (v94 >= qword_1EE5779D0)
                              v106 = v94 % qword_1EE5779D0;
                          }
                          else
                          {
                            v106 = (qword_1EE5779D0 - 1) & v94;
                          }
                          v107 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v106);
                          if (!v107 || (v108 = *v107) == 0)
LABEL_162:
                            abort();
                          if (v105.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              v110 = v108[1];
                              if ((uint64_t *)v94 == v110)
                              {
                                if (v108[2] == (uint64_t *)v94)
                                  goto LABEL_151;
                              }
                              else if (((unint64_t)v110 & (qword_1EE5779D0 - 1)) != v106)
                              {
                                goto LABEL_162;
                              }
                              v108 = (uint64_t **)*v108;
                              if (!v108)
                                goto LABEL_162;
                            }
                          }
                          while (1)
                          {
                            v109 = (unint64_t)v108[1];
                            if (v94 == v109)
                            {
                              if (v108[2] == (uint64_t *)v94)
                              {
LABEL_151:
                                v111 = *((int *)v108 + 6);
                                v112 = *((int *)v108 + 7);
                                if ((_DWORD)v111 != -1)
                                  ggl::PipelineSetup::setConstantData(v98, v111, v91, 1);
                                if ((_DWORD)v112 != -1)
                                  ggl::PipelineSetup::setConstantData(v98, v112, v91, 2);
                                goto LABEL_72;
                              }
                            }
                            else
                            {
                              if (v109 >= qword_1EE5779D0)
                                v109 %= (unint64_t)qword_1EE5779D0;
                              if (v109 != v106)
                                goto LABEL_162;
                            }
                            v108 = (uint64_t **)*v108;
                            if (!v108)
                              goto LABEL_162;
                          }
                        }
                      }
                      else
                      {
                        if (v102 >= v93)
                          v102 %= v93;
                        if (v102 != v96)
                          break;
                      }
                      v100 = (_QWORD *)*v100;
                    }
                    while (v100);
                  }
                }
              }
            }
          }
        }
      }
LABEL_72:
      v8 = (_QWORD *)v117[4];
      v62 = v121 + 1;
      v121 = v62;
      if (v62 == v8)
      {
        result = v116;
        if (v9 == v8)
          goto LABEL_161;
      }
      else
      {
        v63 = v118[4];
        result = v116;
        do
        {
          v64 = *((unsigned int *)v62 + 1);
          v65 = v64 >> 7;
          if (v64 >> 7 < (v118[5] - v63) >> 3)
          {
            v66 = *(_QWORD *)(v63 + 8 * v65);
            if (v66)
            {
              v67 = v64 & 0x7F;
              v68 = *(unsigned __int16 *)(v66 + 2 * v67);
              v69 = v118[7];
              v70 = v118[8];
              if (v68 < (v70 - v69) >> 3)
              {
                v71 = v69 + 8 * v68;
                if (v71 != v70 && *(_DWORD *)(v71 + 4) == (_DWORD)v64)
                {
                  v73 = v119[4];
                  if (v65 < (v119[5] - v73) >> 3)
                  {
                    v74 = *(_QWORD *)(v73 + 8 * v65);
                    if (v74)
                    {
                      v75 = *(unsigned __int16 *)(v74 + 2 * v67);
                      v76 = v119[7];
                      v77 = v119[8];
                      if (v75 < (v77 - v76) >> 3)
                      {
                        v78 = v76 + 8 * v75;
                        if (v78 != v77 && *(_DWORD *)(v78 + 4) == (_DWORD)v64)
                        {
                          v80 = v120[4];
                          if (v65 < (v120[5] - v80) >> 3)
                          {
                            v81 = *(_QWORD *)(v80 + 8 * v65);
                            if (v81)
                            {
                              v82 = *(unsigned __int16 *)(v81 + 2 * v67);
                              v84 = v120[7];
                              v83 = v120[8];
                              if (v82 < (v83 - v84) >> 3)
                              {
                                v85 = v84 + 8 * v82;
                                if (*(_DWORD *)(v85 + 4) == (_DWORD)v64 && v85 != v83)
                                {
                                  v8 = v62;
                                  goto LABEL_100;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v62;
        }
        while (v62 != v8);
        v62 = v8;
LABEL_100:
        v121 = v62;
        if (v9 == v8)
          goto LABEL_161;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_161:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v10 + 8) = 0;
  return result;
}

void sub_19F6CDC0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x31572B1B4D58BE2BLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x31572B1B4D58BE2BLL;
      if (*(_QWORD *)&v3 <= 0x31572B1B4D58BE2BuLL)
        v5 = 0x31572B1B4D58BE2BuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x31572B1B4D58BE2BLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x31572B1B4D58BE2BLL)
            {
              if (v7[2] == 0x31572B1B4D58BE2BLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x31572B1B4D58BE2BLL)
          {
            if (v7[2] == 0x31572B1B4D58BE2BLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>]";
  *(_QWORD *)(v11 + 24) = 97;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273A28;
  *(_QWORD *)(v11 + 8) = 0x31572B1B4D58BE2BLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x31572B1B4D58BE2BuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x31572B1B4D58BE2BLL;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>]";
  v15[2] = 97;
  gdc::Registry::_registerStorageDataSignals(a1, 0x31572B1B4D58BE2BLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6CDE30(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleConstantData>(md::ita::AssignStyleConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleConstantData>(md::ita::AssignStyleConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleConstantData>(md::ita::AssignStyleConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleConstantData>(md::ita::AssignStyleConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284BF8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleConstantData>(md::ita::AssignStyleConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleConstantData>(md::ita::AssignStyleConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284BF8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleConstantData>(md::ita::AssignStyleConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleConstantData>(md::ita::AssignStyleConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6CE044(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleConstantData>(md::ita::AssignStyleConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleConstantData>(md::ita::AssignStyleConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleConstantData>(md::ita::AssignStyleConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleConstantData>(md::ita::AssignStyleConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284C40;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleConstantData>(md::ita::AssignStyleConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleConstantData>(md::ita::AssignStyleConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284C40;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleConstantData>(md::ita::AssignStyleConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleConstantData>(md::ita::AssignStyleConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x9C1597C84433D2CALL;
  v2[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Style>>]";
  *(_QWORD *)&result = 81;
  *((_OWORD *)v2 + 1) = xmmword_19FFB41C0;
  v2[4] = "md::ls::StyleDataKeyHandle]";
  v2[5] = 26;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276EA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276EA0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD **v55;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  float *v67;
  _QWORD *v68;
  float *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  _QWORD *v75;
  uint64_t v76;
  unsigned __int8 v77;
  unint64_t v78;
  unint64_t v79;
  uint8x8_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unsigned __int8 v89;
  uint8x8_t v90;
  unint64_t v91;
  uint64_t ***v92;
  uint64_t **v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v123;
  md *v124;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  unint64_t v132;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Style>>>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::StyleDataKeyHandle>(v2);
  v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v6 = (_QWORD *)v5;
  v7 = (_QWORD *)(v3 + 32);
  if (v4[8] - v4[7] < *(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56))
    v7 = v4 + 4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v5 + 32);
  v127 = v7;
  v128 = (_QWORD *)v3;
  v129 = v4;
  v130 = (_QWORD *)v5;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v131 = v8;
  if (v9 == v8)
  {
    v10 = a1;
  }
  else
  {
    v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v127))
    {
      v11 = v8 + 1;
      do
      {
        v8 = v11;
        v131 = v11;
        if (v11 == v9)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v127);
        v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v126 = result;
    while (1)
    {
      *result = *v8;
      v14 = *v8;
      v15 = HIDWORD(*v8);
      v16 = *v8 >> 39;
      v17 = v4[4];
      if (v16 < (v4[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            v21 = v4[7],
            v20 = v4[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
      {
        v24 = v4[11];
        v25 = v4[10] + 8 * v19;
      }
      else
      {
        v24 = v4[11];
        v25 = v24;
      }
      if (v25 == v24)
        v26 = 0;
      else
        v26 = (unint64_t *)v25;
      v27 = v6[4];
      if (v16 < (v6[5] - v27) >> 3
        && (v28 = *(_QWORD *)(v27 + 8 * v16)) != 0
        && (v29 = *(unsigned __int16 *)(v28 + 2 * (HIDWORD(v14) & 0x7F)),
            v31 = v6[7],
            v30 = v6[8],
            v29 < (v30 - v31) >> 3)
        && ((v32 = v31 + 8 * v29, v32 != v30) ? (v33 = *(_DWORD *)(v32 + 4) == (_DWORD)v15) : (v33 = 0), v33))
      {
        v34 = v6[11];
        v35 = v6[10] + 8 * v29;
      }
      else
      {
        v34 = v6[11];
        v35 = v34;
      }
      if (v35 == v34)
        v36 = 0;
      else
        v36 = (unint64_t *)v35;
      v37 = **(_QWORD **)(v10 + 8);
      v38 = *(_QWORD **)v37;
      v39 = *(_QWORD **)(v37 + 8);
      if (v38 != v39)
      {
        while (*v38 != 0x41D4E9297E100630)
        {
          v38 += 5;
          if (v38 == v39)
            goto LABEL_48;
        }
      }
      if (v38 == v39)
      {
LABEL_48:
        v40 = 0;
      }
      else
      {
        v40 = (_QWORD *)v38[3];
        v41 = (std::__shared_weak_count *)v38[4];
        if (v41)
        {
          p_shared_owners = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldxr(p_shared_owners);
          while (__stxr(v43 + 1, p_shared_owners));
          do
            v44 = __ldaxr(p_shared_owners);
          while (__stlxr(v44 - 1, p_shared_owners));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
      }
      v45 = *v36;
      v46 = *v36;
      v47 = v40[50];
      v48 = (v40[51] - v47) >> 3;
      if (v46 < v48
        && (v49 = *(_QWORD *)(v47 + 8 * v46)) != 0
        && HIDWORD(v45) == HIDWORD(v49)
        && ((v50 = v40[53], v50 + 16 * v49 != v40[54]) ? (v51 = v50 == 0) : (v51 = 1), !v51))
      {
        v57 = *(_QWORD *)(v47 + 8 * v46);
        v58 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v40 + 37), v45, v36);
        ++v58[3];
        v59 = v50 + 16 * v57;
        v10 = a1;
        v52 = *(_QWORD **)(v59 + 8);
        v45 = *v36;
        v47 = v40[50];
        v46 = *v36;
        if (v46 >= (v40[51] - v47) >> 3)
          goto LABEL_69;
      }
      else
      {
        v52 = 0;
        if (v46 >= v48)
          goto LABEL_69;
      }
      v53 = *(_QWORD *)(v47 + 8 * v46);
      if (v53 && HIDWORD(v45) == HIDWORD(v53))
      {
        v54 = v40[53];
        v55 = (_QWORD **)(v54 + 16 * v53);
        if (v55 == (_QWORD **)v40[54] || v54 == 0)
        {
          v83 = 0;
        }
        else
        {
          v82 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v40 + 37), v45, v36);
          ++v82[3];
          v83 = *v55;
        }
        v10 = a1;
        goto LABEL_70;
      }
LABEL_69:
      v83 = 0;
LABEL_70:
      v60 = *v26;
      v61 = *v26;
      v62 = v40[195];
      if (v61 < (v40[196] - v62) >> 3
        && ((v63 = *(_QWORD *)(v62 + 8 * v61)) != 0 ? (v64 = HIDWORD(v60) == HIDWORD(v63)) : (v64 = 0), v64))
      {
        v66 = v40[198] + 20 * v63;
        v65 = v40[199];
      }
      else
      {
        v65 = v40[199];
        v66 = v65;
      }
      if (v66 == v65)
        v67 = 0;
      else
        v67 = (float *)v66;
      if (v67)
      {
        v68 = std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,md::Counter>,std::hash<geo::handle<md::CachedKey<md::StyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,md::Counter>,std::equal_to<geo::handle<md::CachedKey<md::StyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::CachedKey<md::StyleCacheKey>> const&>,std::tuple<>>((uint64_t)(v40 + 182), v60, v26);
        ++v68[3];
      }
      v69 = std::__hash_table<std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::__unordered_map_hasher<md::StyleCacheKey,std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,md::StyleCacheKeyHasher,std::equal_to<md::StyleCacheKey>,true>,std::__unordered_map_equal<md::StyleCacheKey,std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::equal_to<md::StyleCacheKey>,md::StyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>>>::find<md::StyleCacheKey>(v40 + 172, v67);
      if (v69)
        v70 = *((_QWORD *)v69 + 5);
      else
        v70 = 0;
      v132 = v70;
      v71 = v40[158];
      if (v70 < (unint64_t)((v40[159] - v71) >> 3))
      {
        v72 = *(_QWORD *)(v71 + 8 * v70);
        if (v72)
        {
          if (HIDWORD(v70) == HIDWORD(v72))
          {
            v73 = v40[161];
            if (v73)
            {
              v74 = (uint64_t *)(v73 + 24 * v72);
              if (v74 != (uint64_t *)v40[162])
              {
                v75 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>> const&>,std::tuple<>>((uint64_t)(v40 + 145), v70, &v132);
                ++v75[3];
                v76 = *v74;
                if (v76)
                {
                  if ((v77 & 1) == 0
                  {
                    do
                      v123 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
                    while (__stlxr(v123 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
                    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>(void)::index = v123;
                    v10 = a1;
                  }
                  v78 = v52[1];
                  if (v78)
                  {
                    v79 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>(void)::index;
                    v80 = (uint8x8_t)vcnt_s8((int8x8_t)v78);
                    v80.i16[0] = vaddlv_u8(v80);
                    if (v80.u32[0] > 1uLL)
                    {
                      v81 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>(void)::index;
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>(void)::index >= v78)
                        v81 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>(void)::index % v78;
                    }
                    else
                    {
                      v81 = (v78 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>(void)::index;
                    }
                    v84 = *(_QWORD **)(*v52 + 8 * v81);
                    if (v84)
                    {
                      v85 = (_QWORD *)*v84;
                      if (v85)
                      {
                        if (v80.u32[0] < 2uLL)
                        {
                          v86 = v78 - 1;
                          while (1)
                          {
                            v88 = v85[1];
                            if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>(void)::index == v88)
                            {
                              if (v85[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>(void)::index)
                                goto LABEL_114;
                            }
                            else if ((v88 & v86) != v81)
                            {
                              goto LABEL_139;
                            }
                            v85 = (_QWORD *)*v85;
                            if (!v85)
                              goto LABEL_139;
                          }
                        }
                        do
                        {
                          v87 = v85[1];
                          if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>(void)::index == v87)
                          {
                            if (v85[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>(void)::index)
                            {
LABEL_114:
                              if ((v89 & 1) == 0)
                              {
                                if ((_DWORD)v124)
                                {
                                  md::typeToIntMap(v124);
                                  v10 = a1;
                                }
                              }
                              if (!qword_1EE5779D0)
                                goto LABEL_176;
                              v90 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                              v90.i16[0] = vaddlv_u8(v90);
                              if (v90.u32[0] > 1uLL)
                              {
                                v91 = v79;
                                if (v79 >= qword_1EE5779D0)
                                  v91 = v79 % qword_1EE5779D0;
                              }
                              else
                              {
                                v91 = (qword_1EE5779D0 - 1) & v79;
                              }
                              v92 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v91);
                              if (!v92 || (v93 = *v92) == 0)
LABEL_176:
                                abort();
                              if (v90.u32[0] < 2uLL)
                              {
                                while (1)
                                {
                                  v95 = v93[1];
                                  if ((uint64_t *)v79 == v95)
                                  {
                                    if (v93[2] == (uint64_t *)v79)
                                      goto LABEL_135;
                                  }
                                  else if (((unint64_t)v95 & (qword_1EE5779D0 - 1)) != v91)
                                  {
                                    goto LABEL_176;
                                  }
                                  v93 = (uint64_t **)*v93;
                                  if (!v93)
                                    goto LABEL_176;
                                }
                              }
                              while (1)
                              {
                                v94 = (unint64_t)v93[1];
                                if (v79 == v94)
                                {
                                  if (v93[2] == (uint64_t *)v79)
                                  {
LABEL_135:
                                    v96 = *((int *)v93 + 6);
                                    v97 = *((int *)v93 + 7);
                                    if ((_DWORD)v96 != -1)
                                      ggl::PipelineSetup::setConstantData(v83, v96, v76, 1);
                                    if ((_DWORD)v97 != -1)
                                      ggl::PipelineSetup::setConstantData(v83, v97, v76, 2);
                                    goto LABEL_139;
                                  }
                                }
                                else
                                {
                                  if (v94 >= qword_1EE5779D0)
                                    v94 %= (unint64_t)qword_1EE5779D0;
                                  if (v94 != v91)
                                    goto LABEL_176;
                                }
                                v93 = (uint64_t **)*v93;
                                if (!v93)
                                  goto LABEL_176;
                              }
                            }
                          }
                          else
                          {
                            if (v87 >= v78)
                              v87 %= v78;
                            if (v87 != v81)
                              break;
                          }
                          v85 = (_QWORD *)*v85;
                        }
                        while (v85);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_139:
      v8 = (_QWORD *)v127[4];
      v98 = v131 + 1;
      v131 = v98;
      if (v98 == v8)
      {
        result = v126;
        if (v9 == v8)
          goto LABEL_175;
      }
      else
      {
        v99 = v128[4];
        result = v126;
        do
        {
          v100 = *((unsigned int *)v98 + 1);
          v101 = v100 >> 7;
          if (v100 >> 7 < (v128[5] - v99) >> 3)
          {
            v102 = *(_QWORD *)(v99 + 8 * v101);
            if (v102)
            {
              v103 = v100 & 0x7F;
              v104 = *(unsigned __int16 *)(v102 + 2 * v103);
              v105 = v128[7];
              v106 = v128[8];
              if (v104 < (v106 - v105) >> 3)
              {
                v107 = v105 + 8 * v104;
                if (v107 != v106 && *(_DWORD *)(v107 + 4) == (_DWORD)v100)
                {
                  v109 = v129[4];
                  if (v101 < (v129[5] - v109) >> 3)
                  {
                    v110 = *(_QWORD *)(v109 + 8 * v101);
                    if (v110)
                    {
                      v111 = *(unsigned __int16 *)(v110 + 2 * v103);
                      v112 = v129[7];
                      v113 = v129[8];
                      if (v111 < (v113 - v112) >> 3)
                      {
                        v114 = v112 + 8 * v111;
                        if (v114 != v113 && *(_DWORD *)(v114 + 4) == (_DWORD)v100)
                        {
                          v116 = v130[4];
                          if (v101 < (v130[5] - v116) >> 3)
                          {
                            v117 = *(_QWORD *)(v116 + 8 * v101);
                            if (v117)
                            {
                              v118 = *(unsigned __int16 *)(v117 + 2 * v103);
                              v120 = v130[7];
                              v119 = v130[8];
                              if (v118 < (v119 - v120) >> 3)
                              {
                                v121 = v120 + 8 * v118;
                                if (*(_DWORD *)(v121 + 4) == (_DWORD)v100 && v121 != v119)
                                {
                                  v8 = v98;
                                  goto LABEL_167;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v98;
        }
        while (v98 != v8);
        v98 = v8;
LABEL_167:
        v131 = v98;
        if (v9 == v8)
          goto LABEL_175;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_175:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v10 + 8) = 0;
  return result;
}

void sub_19F6CE9D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Style>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x9C1597C84433D2CALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x9C1597C84433D2CALL;
      if (*(_QWORD *)&v3 <= 0x9C1597C84433D2CALL)
        v5 = 0x9C1597C84433D2CALL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x9C1597C84433D2CALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x9C1597C84433D2CALL)
            {
              if (v7[2] == 0x9C1597C84433D2CALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x9C1597C84433D2CALL)
          {
            if (v7[2] == 0x9C1597C84433D2CALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Style>>]";
  *(_QWORD *)(v11 + 24) = 81;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273A88;
  *(_QWORD *)(v11 + 8) = 0x9C1597C84433D2CALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x9C1597C84433D2CALL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x9C1597C84433D2CALL;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Style>>]";
  v15[2] = 81;
  gdc::Registry::_registerStorageDataSignals(a1, 0x9C1597C84433D2CALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6CEBF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::StyleDataKeyHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x1BB343378E1EE5BLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x1BB343378E1EE5BLL;
      if (*(_QWORD *)&v3 <= 0x1BB343378E1EE5BuLL)
        v5 = 0x1BB343378E1EE5BuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x1BB343378E1EE5BLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x1BB343378E1EE5BLL)
            {
              if (v7[2] == 0x1BB343378E1EE5BLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x1BB343378E1EE5BLL)
          {
            if (v7[2] == 0x1BB343378E1EE5BLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::StyleDataKeyHandle]";
  *(_QWORD *)(v11 + 24) = 26;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272228;
  *(_QWORD *)(v11 + 8) = 0x1BB343378E1EE5BLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x1BB343378E1EE5BuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x1BB343378E1EE5BLL;
  v15[1] = "md::ls::StyleDataKeyHandle]";
  v15[2] = 26;
  gdc::Registry::_registerStorageDataSignals(a1, 0x1BB343378E1EE5BLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6CEE20(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::StyleDataKeyHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::StyleDataKeyHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::StyleDataKeyHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::StyleDataKeyHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Style>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Style>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Style>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Style>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::MarkPipelineDataRequirements>(md::ita::MarkPipelineDataRequirements &&)::{lambda(void)#2},std::allocator<md::ita::MarkPipelineDataRequirements &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::MarkPipelineDataRequirements>(md::ita::MarkPipelineDataRequirements &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::MarkPipelineDataRequirements>(md::ita::MarkPipelineDataRequirements &&)::{lambda(void)#2},std::allocator<md::ita::MarkPipelineDataRequirements &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::MarkPipelineDataRequirements>(md::ita::MarkPipelineDataRequirements &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42866F8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::MarkPipelineDataRequirements>(md::ita::MarkPipelineDataRequirements &&)::{lambda(void)#2},std::allocator<md::ita::MarkPipelineDataRequirements &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::MarkPipelineDataRequirements>(md::ita::MarkPipelineDataRequirements &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42866F8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::MarkPipelineDataRequirements>(md::ita::MarkPipelineDataRequirements &&)::{lambda(void)#2},std::allocator<md::ita::MarkPipelineDataRequirements &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::MarkPipelineDataRequirements>(md::ita::MarkPipelineDataRequirements &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6CF1A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::MarkPipelineDataRequirements>(md::ita::MarkPipelineDataRequirements &&)::{lambda(void)#1},std::allocator<md::ita::MarkPipelineDataRequirements &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::MarkPipelineDataRequirements>(md::ita::MarkPipelineDataRequirements &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::MarkPipelineDataRequirements>(md::ita::MarkPipelineDataRequirements &&)::{lambda(void)#1},std::allocator<md::ita::MarkPipelineDataRequirements &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::MarkPipelineDataRequirements>(md::ita::MarkPipelineDataRequirements &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286740;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::MarkPipelineDataRequirements>(md::ita::MarkPipelineDataRequirements &&)::{lambda(void)#1},std::allocator<md::ita::MarkPipelineDataRequirements &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::MarkPipelineDataRequirements>(md::ita::MarkPipelineDataRequirements &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286740;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::MarkPipelineDataRequirements>(md::ita::MarkPipelineDataRequirements &&)::{lambda(void)#1},std::allocator<md::ita::MarkPipelineDataRequirements &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::MarkPipelineDataRequirements>(md::ita::MarkPipelineDataRequirements &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x60uLL);
  a1[2] = (char *)(v2 + 12);
  *v2 = 0xD68EA0DE832DEC03;
  v2[1] = "md::ls::RenderItemID]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB41D0;
  v2[4] = "md::ls::RenderItemUpdate]";
  v2[5] = 24;
  v2[6] = 0xB3837544666C5A60;
  v2[7] = "md::ls::DataIDSetToUse]";
  v2[8] = 22;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 12)
  {
    *(_QWORD *)v3 = 0xE54E641F7C1F9B89;
    v2[10] = "md::ls::RequiredPipelinePoolID]";
    v2[11] = 30;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 12) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0xE54E641F7C1F9B89;
  *((_QWORD *)v10 + 1) = "md::ls::RequiredPipelinePoolID]";
  *((_QWORD *)v10 + 2) = 30;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
}

void sub_19F6CF3FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::MarkPipelineDataRequirements>,std::allocator<ecs2::ForwardToExecute<md::ita::MarkPipelineDataRequirements>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::MarkPipelineDataRequirements>,std::allocator<ecs2::ForwardToExecute<md::ita::MarkPipelineDataRequirements>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277C20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::MarkPipelineDataRequirements>,std::allocator<ecs2::ForwardToExecute<md::ita::MarkPipelineDataRequirements>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277C20;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::MarkPipelineDataRequirements>,std::allocator<ecs2::ForwardToExecute<md::ita::MarkPipelineDataRequirements>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4274BD8;
  v4[1] = a2;
  v16 = 0;
  v5 = **v3;
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (v6 != v7)
  {
    while (*v6 != 0x41D4E9297E100630)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    v9 = 0;
  }
  else
  {
    v9 = v6[3];
    v8 = (std::__shared_weak_count *)v6[4];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v16 = v9;
  v17[0] = &off_1E427BEC8;
  v17[1] = &v16;
  v17[2] = v3;
  v18 = v17;
  (*(void (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v17);
  v13 = v18;
  if (v18 == v17)
  {
    v14 = 4;
    v13 = v17;
    goto LABEL_17;
  }
  if (v18)
  {
    v14 = 5;
LABEL_17:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F6CF618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderItemUpdate const&,md::ls::DataIDSetToUse const&,md::ls::RequiredPipelinePoolID const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::RenderItemID const&,md::ls::RenderItemUpdate const&,md::ls::DataIDSetToUse const&,md::ls::RequiredPipelinePoolID const&,md::ls::PipelineSetup &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderItemUpdate const&,md::ls::DataIDSetToUse const&,md::ls::RequiredPipelinePoolID const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::RenderItemID const&,md::ls::RenderItemUpdate const&,md::ls::DataIDSetToUse const&,md::ls::RequiredPipelinePoolID const&,md::ls::PipelineSetup &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t result;
  unint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v112[7];
  unint64_t *v113;
  uint64_t v114[5];

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::RenderItemID>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::RenderItemUpdate>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::DataIDSetToUse>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::RequiredPipelinePoolID>(v2);
  v7 = (_QWORD *)gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v114[0] = (uint64_t)v3;
  v114[1] = (uint64_t)v4;
  v114[2] = (uint64_t)v5;
  v114[3] = (uint64_t)v6;
  v114[4] = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::begin(v112, v114);
  v8 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7])
    v8 = v4 + 4;
  if (v5[8] - v5[7] < v8[4] - v8[3])
    v8 = v5 + 4;
  if (v6[8] - v6[7] < v8[4] - v8[3])
    v8 = v6 + 4;
  if (v7[8] - v7[7] < v8[4] - v8[3])
    v8 = v7 + 4;
  v9 = (unint64_t *)v8[4];
  v10 = v113;
  if (v9 == v113)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v11 = (_QWORD *)result;
LABEL_114:
    *v11 = 0xFFFFFFFF00000000;
  }
  else
  {
    v11 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v12 = (_QWORD *)v112[1];
    v13 = (_QWORD *)v112[2];
    v109 = (_QWORD *)v112[3];
    v110 = v112[0];
    v107 = (_QWORD *)v112[5];
    v108 = (_QWORD *)v112[4];
    while (1)
    {
      *v11 = *v10;
      v15 = *v10;
      v16 = HIDWORD(*v10);
      v17 = *v10 >> 39;
      v18 = v3[4];
      if (v17 >= (v3[5] - v18) >> 3)
        goto LABEL_21;
      v19 = *(_QWORD *)(v18 + 8 * v17);
      if (!v19)
        goto LABEL_21;
      v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F));
      v22 = v3[7];
      v21 = v3[8];
      if (v20 >= (v21 - v22) >> 3)
        goto LABEL_21;
      v23 = v22 + 8 * v20;
      if (v23 != v21 && *(_DWORD *)(v23 + 4) == (_DWORD)v16)
      {
        v25 = v3[11];
        v26 = v3[10] + 24 * v20;
      }
      else
      {
LABEL_21:
        v25 = v3[11];
        v26 = v25;
      }
      v27 = v26 == v25 ? 0 : v26;
      if ((v28 = v4[4], v17 < (v4[5] - v28) >> 3)
        && (v29 = *(_QWORD *)(v28 + 8 * v17)) != 0
        && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            v32 = v4[7],
            v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == (_DWORD)v16) : (v34 = 0), v34))
      {
        v35 = v4[11];
        v36 = v4[10] + 8 * v30;
      }
      else
      {
        v35 = v4[11];
        v36 = v35;
      }
      v37 = v36 == v35 ? 0 : v36;
      if ((v38 = v5[4], v17 < (v5[5] - v38) >> 3)
        && (v39 = *(_QWORD *)(v38 + 8 * v17)) != 0
        && (v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            v42 = v5[7],
            v41 = v5[8],
            v40 < (v41 - v42) >> 3)
        && ((v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == (_DWORD)v16) : (v44 = 0), v44))
      {
        v45 = v5[11];
        v46 = v5[10] + 8 * v40;
      }
      else
      {
        v45 = v5[11];
        v46 = v45;
      }
      v47 = v46 == v45 ? 0 : v46;
      if ((v48 = v6[4], v17 < (v6[5] - v48) >> 3)
        && (v49 = *(_QWORD *)(v48 + 8 * v17)) != 0
        && (v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            v52 = v6[7],
            v51 = v6[8],
            v50 < (v51 - v52) >> 3)
        && ((v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == (_DWORD)v16) : (v54 = 0), v54))
      {
        v55 = v6[11];
        v56 = v6[10] + v50;
      }
      else
      {
        v55 = v6[11];
        v56 = v55;
      }
      v57 = v56 == v55 ? 0 : v56;
      if ((v58 = v7[4], v17 < (v7[5] - v58) >> 3)
        && (v59 = *(_QWORD *)(v58 + 8 * v17)) != 0
        && (v60 = *(unsigned __int16 *)(v59 + 2 * (HIDWORD(v15) & 0x7F)),
            v62 = v7[7],
            v61 = v7[8],
            v60 < (v61 - v62) >> 3)
        && ((v63 = v62 + 8 * v60, v63 != v61) ? (v64 = *(_DWORD *)(v63 + 4) == (_DWORD)v16) : (v64 = 0), v64))
      {
        v65 = v7[11];
        v66 = v7[10] + 8 * v60;
      }
      else
      {
        v65 = v7[11];
        v66 = v65;
      }
      v67 = *(_QWORD *)(a2 + 24);
      if (!v67)
        break;
      if (v66 == v65)
        v68 = 0;
      else
        v68 = v66;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v67 + 48))(v67, v27, v37, v47, v57, v68);
      v70 = *(unint64_t **)(v110 + 32);
      v14 = v10 + 1;
      v113 = v10 + 1;
      if (v10 + 1 != v70)
      {
        v71 = v12[4];
        while (1)
        {
          v72 = *((unsigned int *)v14 + 1);
          v73 = v72 >> 7;
          if (v72 >> 7 < (v12[5] - v71) >> 3)
          {
            v74 = *(_QWORD *)(v71 + 8 * v73);
            if (v74)
            {
              v75 = v72 & 0x7F;
              v76 = *(unsigned __int16 *)(v74 + 2 * v75);
              v78 = v12[7];
              v77 = v12[8];
              result = v77 - v78;
              if (v76 < (v77 - v78) >> 3)
              {
                v79 = v78 + 8 * v76;
                if (v79 != v77 && *(_DWORD *)(v79 + 4) == (_DWORD)v72)
                {
                  v81 = v13[4];
                  if (v73 < (v13[5] - v81) >> 3)
                  {
                    v82 = *(_QWORD *)(v81 + 8 * v73);
                    if (v82)
                    {
                      v83 = *(unsigned __int16 *)(v82 + 2 * v75);
                      v85 = v13[7];
                      v84 = v13[8];
                      result = v84 - v85;
                      if (v83 < (v84 - v85) >> 3)
                      {
                        v86 = v85 + 8 * v83;
                        if (v86 != v84 && *(_DWORD *)(v86 + 4) == (_DWORD)v72)
                        {
                          v88 = v109[4];
                          if (v73 < (v109[5] - v88) >> 3)
                          {
                            v89 = *(_QWORD *)(v88 + 8 * v73);
                            if (v89)
                            {
                              v90 = *(unsigned __int16 *)(v89 + 2 * v75);
                              v92 = v109[7];
                              v91 = v109[8];
                              result = v91 - v92;
                              if (v90 < (v91 - v92) >> 3)
                              {
                                v93 = v92 + 8 * v90;
                                if (v93 != v91 && *(_DWORD *)(v93 + 4) == (_DWORD)v72)
                                {
                                  v95 = v108[4];
                                  if (v73 < (v108[5] - v95) >> 3)
                                  {
                                    v96 = *(_QWORD *)(v95 + 8 * v73);
                                    if (v96)
                                    {
                                      v97 = *(unsigned __int16 *)(v96 + 2 * v75);
                                      v99 = v108[7];
                                      v98 = v108[8];
                                      result = v98 - v99;
                                      if (v97 < (v98 - v99) >> 3)
                                      {
                                        v100 = v99 + 8 * v97;
                                        if (v100 != v98 && *(_DWORD *)(v100 + 4) == (_DWORD)v72)
                                        {
                                          v101 = v107[4];
                                          if (v73 < (v107[5] - v101) >> 3)
                                          {
                                            v102 = *(_QWORD *)(v101 + 8 * v73);
                                            if (v102)
                                            {
                                              v103 = *(unsigned __int16 *)(v102 + 2 * v75);
                                              v105 = v107[7];
                                              v104 = v107[8];
                                              if (v103 < (v104 - v105) >> 3)
                                              {
                                                v106 = v105 + 8 * v103;
                                                if (*(_DWORD *)(v106 + 4) == (_DWORD)v72 && v106 != v104)
                                                  break;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v70)
          {
            v14 = v70;
            goto LABEL_12;
          }
        }
        v70 = v14;
LABEL_12:
        v113 = v14;
      }
      v10 = v70;
      if (v9 == v70)
        goto LABEL_114;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderItemUpdate const&,md::ls::DataIDSetToUse const&,md::ls::RequiredPipelinePoolID const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::RenderItemID const&,md::ls::RenderItemUpdate const&,md::ls::DataIDSetToUse const&,md::ls::RequiredPipelinePoolID const&,md::ls::PipelineSetup &>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderItemUpdate const&,md::ls::DataIDSetToUse const&,md::ls::RequiredPipelinePoolID const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::RenderItemID const&,md::ls::RenderItemUpdate const&,md::ls::DataIDSetToUse const&,md::ls::RequiredPipelinePoolID const&,md::ls::PipelineSetup &>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[5];
  uint64_t v10[8];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::RenderItemID>(v1);
  v3 = gdc::Registry::storage<md::ls::RenderItemUpdate>(v1);
  v4 = gdc::Registry::storage<md::ls::DataIDSetToUse>(v1);
  v5 = gdc::Registry::storage<md::ls::RequiredPipelinePoolID>(v1);
  v6 = gdc::Registry::storage<md::ls::PipelineSetup>(v1);
  v9[0] = v2;
  v9[1] = v3;
  v9[2] = v4;
  v9[3] = v5;
  v9[4] = v6;
  gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::begin(v10, v9);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v7 = v2;
  else
    v7 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56))
    v7 = v4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56))
    v7 = v5;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < *(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56))
    v7 = v6;
  return *(_QWORD *)(v7 + 64) == v10[7];
}

uint64_t gdc::Registry::storage<md::ls::RenderItemUpdate>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x78C3BD332555ACA7;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x78C3BD332555ACA7;
      if (*(_QWORD *)&v3 <= 0x78C3BD332555ACA7uLL)
        v5 = 0x78C3BD332555ACA7uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x78C3BD332555ACA7;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x78C3BD332555ACA7)
            {
              if (v7[2] == 0x78C3BD332555ACA7)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x78C3BD332555ACA7)
          {
            if (v7[2] == 0x78C3BD332555ACA7)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RenderItemUpdate]";
  *(_QWORD *)(v11 + 24) = 24;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271C88;
  *(_QWORD *)(v11 + 8) = 0x78C3BD332555ACA7;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x78C3BD332555ACA7uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x78C3BD332555ACA7;
  v15[1] = "md::ls::RenderItemUpdate]";
  v15[2] = 24;
  gdc::Registry::_registerStorageDataSignals(a1, 0x78C3BD332555ACA7, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6CFEAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::DataIDSetToUse>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xB3837544666C5A60;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xB3837544666C5A60;
      if (*(_QWORD *)&v3 <= 0xB3837544666C5A60)
        v5 = 0xB3837544666C5A60 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xB3837544666C5A60;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xB3837544666C5A60)
            {
              if (v7[2] == 0xB3837544666C5A60)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xB3837544666C5A60)
          {
            if (v7[2] == 0xB3837544666C5A60)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::DataIDSetToUse]";
  *(_QWORD *)(v11 + 24) = 22;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271718;
  *(_QWORD *)(v11 + 8) = 0xB3837544666C5A60;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xB3837544666C5A60, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xB3837544666C5A60;
  v15[1] = "md::ls::DataIDSetToUse]";
  v15[2] = 22;
  gdc::Registry::_registerStorageDataSignals(a1, 0xB3837544666C5A60, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6D00D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiredPipelinePoolID>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xE54E641F7C1F9B89;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xE54E641F7C1F9B89;
      if (*(_QWORD *)&v3 <= 0xE54E641F7C1F9B89)
        v5 = 0xE54E641F7C1F9B89 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xE54E641F7C1F9B89;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xE54E641F7C1F9B89)
            {
              if (v7[2] == 0xE54E641F7C1F9B89)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xE54E641F7C1F9B89)
          {
            if (v7[2] == 0xE54E641F7C1F9B89)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiredPipelinePoolID]";
  *(_QWORD *)(v11 + 24) = 30;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272A68;
  *(_QWORD *)(v11 + 8) = 0xE54E641F7C1F9B89;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xE54E641F7C1F9B89, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xE54E641F7C1F9B89;
  v15[1] = "md::ls::RequiredPipelinePoolID]";
  v15[2] = 30;
  gdc::Registry::_registerStorageDataSignals(a1, 0xE54E641F7C1F9B89, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6D02FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::begin(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = *a2 + 32;
  if (!*a2)
    v8 = 0;
  v9 = v4 + 32;
  if (!v4)
    v9 = 0;
  v10 = v5 + 32;
  if (!v5)
    v10 = 0;
  v11 = v6 + 32;
  if (!v6)
    v11 = 0;
  v12 = v7 + 32;
  if (!v7)
    v12 = 0;
  if (*(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24) < *(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24))
    v8 = v9;
  if (*(_QWORD *)(v10 + 32) - *(_QWORD *)(v10 + 24) < *(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24))
    v8 = v10;
  result = *(_QWORD *)(v8 + 24);
  if (*(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24) < (unint64_t)(*(_QWORD *)(v8 + 32) - result))
    v8 = v11;
  if (*(_QWORD *)(v12 + 32) - *(_QWORD *)(v12 + 24) < *(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24))
    v8 = v12;
  *a1 = v8;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  v15 = *(_QWORD *)(v8 + 24);
  v14 = *(_QWORD *)(v8 + 32);
  a1[7] = v15;
  if (v14 != v15)
  {
    result = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
    if ((result & 1) == 0)
    {
      v16 = v15 + 8;
      do
      {
        a1[7] = v16;
        if (v16 == v14)
          break;
        result = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
        v16 += 8;
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

BOOL gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;

  v1 = (_QWORD *)a1[1];
  v2 = *(unsigned int *)(a1[7] + 4);
  v3 = v2 >> 7;
  v4 = v1[4];
  if (v2 >> 7 >= (v1[5] - v4) >> 3)
    return 0;
  v5 = *(_QWORD *)(v4 + 8 * v3);
  if (!v5)
    return 0;
  v6 = v2 & 0x7F;
  v7 = *(unsigned __int16 *)(v5 + 2 * v6);
  v10 = v1 + 7;
  v8 = v1[7];
  v9 = v10[1];
  if (v7 >= (v9 - v8) >> 3)
    return 0;
  v11 = v8 + 8 * v7;
  if (v11 == v9 || *(_DWORD *)(v11 + 4) != (_DWORD)v2)
    return 0;
  v13 = (_QWORD *)a1[2];
  v14 = v13[4];
  if (v3 >= (v13[5] - v14) >> 3)
    return 0;
  v15 = *(_QWORD *)(v14 + 8 * v3);
  if (!v15)
    return 0;
  v16 = *(unsigned __int16 *)(v15 + 2 * v6);
  v19 = v13 + 7;
  v17 = v13[7];
  v18 = v19[1];
  if (v16 >= (v18 - v17) >> 3)
    return 0;
  v20 = v17 + 8 * v16;
  if (v20 == v18 || *(_DWORD *)(v20 + 4) != (_DWORD)v2)
    return 0;
  v22 = (_QWORD *)a1[3];
  v23 = v22[4];
  if (v3 >= (v22[5] - v23) >> 3)
    return 0;
  v24 = *(_QWORD *)(v23 + 8 * v3);
  if (!v24)
    return 0;
  v25 = *(unsigned __int16 *)(v24 + 2 * v6);
  v28 = v22 + 7;
  v26 = v22[7];
  v27 = v28[1];
  if (v25 >= (v27 - v26) >> 3)
    return 0;
  v29 = v26 + 8 * v25;
  if (v29 == v27 || *(_DWORD *)(v29 + 4) != (_DWORD)v2)
    return 0;
  v31 = (_QWORD *)a1[4];
  v32 = v31[4];
  if (v3 >= (v31[5] - v32) >> 3)
    return 0;
  v33 = *(_QWORD *)(v32 + 8 * v3);
  if (!v33)
    return 0;
  v34 = *(unsigned __int16 *)(v33 + 2 * v6);
  v37 = v31 + 7;
  v35 = v31[7];
  v36 = v37[1];
  if (v34 >= (v36 - v35) >> 3)
    return 0;
  v38 = v35 + 8 * v34;
  if (v38 == v36 || *(_DWORD *)(v38 + 4) != (_DWORD)v2)
    return 0;
  v41 = (_QWORD *)a1[5];
  v42 = v41[4];
  if (v3 < (v41[5] - v42) >> 3 && (v43 = *(_QWORD *)(v42 + 8 * v3)) != 0)
  {
    v44 = *(unsigned __int16 *)(v43 + 2 * v6);
    v47 = v41 + 7;
    v46 = v41[7];
    v45 = v47[1];
    if (v44 < (v45 - v46) >> 3)
    {
      v48 = v46 + 8 * v44;
      if (*(_DWORD *)(v48 + 4) == (_DWORD)v2)
        v49 = v48;
      else
        v49 = v45;
      return v49 != v45;
    }
  }
  else
  {
    v45 = v41[8];
  }
  v49 = v45;
  return v49 != v45;
}

void gdc::ComponentStorageWrapper<md::ls::RequiredPipelinePoolID>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiredPipelinePoolID>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiredPipelinePoolID>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiredPipelinePoolID>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::DataIDSetToUse>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::DataIDSetToUse>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::DataIDSetToUse>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::DataIDSetToUse>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::RenderItemUpdate>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderItemUpdate>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(v15 - 8);
  a1[11] = v15 - 8;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RenderItemUpdate>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderItemUpdate>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::TransferPipelines>(md::ita::TransferPipelines &&)::{lambda(void)#2},std::allocator<md::ita::TransferPipelines &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::TransferPipelines>(md::ita::TransferPipelines &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::TransferPipelines>(md::ita::TransferPipelines &&)::{lambda(void)#2},std::allocator<md::ita::TransferPipelines &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::TransferPipelines>(md::ita::TransferPipelines &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283578;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::TransferPipelines>(md::ita::TransferPipelines &&)::{lambda(void)#2},std::allocator<md::ita::TransferPipelines &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::TransferPipelines>(md::ita::TransferPipelines &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283578;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::TransferPipelines>(md::ita::TransferPipelines &&)::{lambda(void)#2},std::allocator<md::ita::TransferPipelines &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::TransferPipelines>(md::ita::TransferPipelines &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::TransferPipelines>(md::ita::TransferPipelines &&)::{lambda(void)#1},std::allocator<md::ita::TransferPipelines &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::TransferPipelines>(md::ita::TransferPipelines &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::TransferPipelines>(md::ita::TransferPipelines &&)::{lambda(void)#1},std::allocator<md::ita::TransferPipelines &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::TransferPipelines>(md::ita::TransferPipelines &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42835C0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::TransferPipelines>(md::ita::TransferPipelines &&)::{lambda(void)#1},std::allocator<md::ita::TransferPipelines &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::TransferPipelines>(md::ita::TransferPipelines &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42835C0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::TransferPipelines>(md::ita::TransferPipelines &&)::{lambda(void)#1},std::allocator<md::ita::TransferPipelines &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::TransferPipelines>(md::ita::TransferPipelines &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x78uLL);
  a1[2] = (char *)(v2 + 15);
  *v2 = 0xBBB17A4464CB2E03;
  v2[1] = "md::ls::PipelineSetupToApply]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB41E0;
  v2[4] = "md::ls::DataIDSetToUse]";
  v2[5] = 22;
  v2[6] = 0xB160D04D0F4A35A4;
  v2[7] = "md::ls::PipelineState]";
  v2[8] = 21;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 15)
  {
    *(_QWORD *)v3 = 0x52AC71251090DBDELL;
    v2[10] = "md::ls::RenderState]";
    v2[11] = 19;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_38;
  if (0x5555555555555556 * (((char *)(v2 + 15) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 15) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 15) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_39;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x52AC71251090DBDELL;
  *((_QWORD *)v10 + 1) = "md::ls::RenderState]";
  *((_QWORD *)v10 + 2) = 19;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0xD68EA0DE832DEC03;
    *((_QWORD *)v4 + 1) = "md::ls::RenderItemID]";
    *((_QWORD *)v4 + 2) = 20;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_38:
    abort();
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 <= 0xAAAAAAAAAAAAAAALL)
    {
      v20 = (char *)operator new(24 * v19);
      goto LABEL_31;
    }
LABEL_39:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v20 = 0;
LABEL_31:
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0xD68EA0DE832DEC03;
  *((_QWORD *)v21 + 1) = "md::ls::RenderItemID]";
  *((_QWORD *)v21 + 2) = 20;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
}

void sub_19F6D0DC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::TransferPipelines>,std::allocator<ecs2::ForwardToExecute<md::ita::TransferPipelines>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::TransferPipelines>,std::allocator<ecs2::ForwardToExecute<md::ita::TransferPipelines>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276360;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::TransferPipelines>,std::allocator<ecs2::ForwardToExecute<md::ita::TransferPipelines>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276360;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::TransferPipelines>,std::allocator<ecs2::ForwardToExecute<md::ita::TransferPipelines>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t (**v20)();
  uint64_t *v21;
  uint64_t **v22;
  uint64_t (***v23)();
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42753B8;
  v4[1] = a2;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E4275388;
  v5[1] = a2;
  v19 = 0;
  v6 = **v3;
  v7 = *(_QWORD **)v6;
  v8 = *(_QWORD **)(v6 + 8);
  if (v7 != v8)
  {
    while (*v7 != 0x41D4E9297E100630)
    {
      v7 += 5;
      if (v7 == v8)
        goto LABEL_12;
    }
  }
  if (v7 == v8)
  {
LABEL_12:
    v10 = 0;
  }
  else
  {
    v10 = v7[3];
    v9 = (std::__shared_weak_count *)v7[4];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v19 = v10;
  v20 = &off_1E427B460;
  v21 = &v19;
  v23 = &v20;
  (*(void (**)(_QWORD *, uint64_t (***)()))(*v4 + 16))(v4, &v20);
  v14 = v23;
  if (v23 == &v20)
  {
    v15 = 4;
    v14 = &v20;
  }
  else
  {
    if (!v23)
      goto LABEL_18;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_18:
  v20 = &off_1E427B4A8;
  v21 = &v19;
  v22 = v3;
  v23 = &v20;
  (*(void (**)(_QWORD *, uint64_t (***)()))(*v5 + 16))(v5, &v20);
  v16 = v23;
  if (v23 == &v20)
  {
    v17 = 4;
    v16 = &v20;
    goto LABEL_22;
  }
  if (v23)
  {
    v17 = 5;
LABEL_22:
    (*v16)[v17]();
  }
  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F6D1078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a13;
  if (a13 == v15)
  {
    v18 = 4;
    v17 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>::Model<ecs2::RuntimeQuery<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>::Model<ecs2::RuntimeQuery<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  unint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v95[6];
  unint64_t *v96;
  uint64_t v97[4];

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::PipelineSetupToApply>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::RenderState>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::DataIDSetToUse>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::RenderItemID>(v2);
  v97[0] = (uint64_t)v3;
  v97[1] = (uint64_t)v4;
  v97[2] = (uint64_t)v5;
  v97[3] = (uint64_t)v6;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v95, v97);
  v7 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7])
    v7 = v4 + 4;
  if (v5[8] - v5[7] < v7[4] - v7[3])
    v7 = v5 + 4;
  if (v6[8] - v6[7] < v7[4] - v7[3])
    v7 = v6 + 4;
  v8 = (unint64_t *)v7[4];
  v9 = v96;
  if (v8 == v96)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v10 = (_QWORD *)result;
LABEL_97:
    *v10 = 0xFFFFFFFF00000000;
  }
  else
  {
    v10 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v11 = v95[0];
    v12 = (_QWORD *)v95[1];
    v13 = (_QWORD *)v95[2];
    v92 = (_QWORD *)v95[4];
    v93 = (_QWORD *)v95[3];
    while (1)
    {
      *v10 = *v9;
      v15 = *v9;
      v16 = HIDWORD(*v9);
      v17 = *v9 >> 39;
      v18 = v3[4];
      if (v17 >= (v3[5] - v18) >> 3)
        goto LABEL_19;
      v19 = *(_QWORD *)(v18 + 8 * v17);
      if (!v19)
        goto LABEL_19;
      v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F));
      v22 = v3[7];
      v21 = v3[8];
      if (v20 >= (v21 - v22) >> 3)
        goto LABEL_19;
      v23 = v22 + 8 * v20;
      if (v23 != v21 && *(_DWORD *)(v23 + 4) == (_DWORD)v16)
      {
        v25 = v3[11];
        v26 = v3[10] + 8 * v20;
      }
      else
      {
LABEL_19:
        v25 = v3[11];
        v26 = v25;
      }
      v27 = v26 == v25 ? 0 : v26;
      if ((v28 = v4[4], v17 < (v4[5] - v28) >> 3)
        && (v29 = *(_QWORD *)(v28 + 8 * v17)) != 0
        && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            v32 = v4[7],
            v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == (_DWORD)v16) : (v34 = 0), v34))
      {
        v35 = v4[11];
        v36 = v4[10] + 8 * v30;
      }
      else
      {
        v35 = v4[11];
        v36 = v35;
      }
      v37 = v36 == v35 ? 0 : v36;
      if ((v38 = v5[4], v17 < (v5[5] - v38) >> 3)
        && (v39 = *(_QWORD *)(v38 + 8 * v17)) != 0
        && (v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            v42 = v5[7],
            v41 = v5[8],
            v40 < (v41 - v42) >> 3)
        && ((v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == (_DWORD)v16) : (v44 = 0), v44))
      {
        v45 = v5[11];
        v46 = v5[10] + 8 * v40;
      }
      else
      {
        v45 = v5[11];
        v46 = v45;
      }
      v47 = v46 == v45 ? 0 : v46;
      if ((v48 = v6[4], v17 < (v6[5] - v48) >> 3)
        && (v49 = *(_QWORD *)(v48 + 8 * v17)) != 0
        && (v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            v52 = v6[7],
            v51 = v6[8],
            v50 < (v51 - v52) >> 3)
        && ((v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == (_DWORD)v16) : (v54 = 0), v54))
      {
        v55 = v6[11];
        v56 = v6[10] + 24 * v50;
      }
      else
      {
        v55 = v6[11];
        v56 = v55;
      }
      v57 = *(_QWORD *)(a2 + 24);
      if (!v57)
        break;
      if (v56 == v55)
        v58 = 0;
      else
        v58 = v56;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57 + 48))(v57, v27, v37, v47, v58);
      v60 = *(unint64_t **)(v11 + 32);
      v14 = v9 + 1;
      v96 = v9 + 1;
      if (v9 + 1 != v60)
      {
        v61 = v12[4];
        while (1)
        {
          v62 = *((unsigned int *)v14 + 1);
          v63 = v62 >> 7;
          if (v62 >> 7 < (v12[5] - v61) >> 3)
          {
            v64 = *(_QWORD *)(v61 + 8 * v63);
            if (v64)
            {
              v65 = v62 & 0x7F;
              v66 = *(unsigned __int16 *)(v64 + 2 * v65);
              v68 = v12[7];
              v67 = v12[8];
              result = v67 - v68;
              if (v66 < (v67 - v68) >> 3)
              {
                v69 = v68 + 8 * v66;
                if (v69 != v67 && *(_DWORD *)(v69 + 4) == (_DWORD)v62)
                {
                  v71 = v13[4];
                  if (v63 < (v13[5] - v71) >> 3)
                  {
                    v72 = *(_QWORD *)(v71 + 8 * v63);
                    if (v72)
                    {
                      v73 = *(unsigned __int16 *)(v72 + 2 * v65);
                      v75 = v13[7];
                      v74 = v13[8];
                      result = v74 - v75;
                      if (v73 < (v74 - v75) >> 3)
                      {
                        v76 = v75 + 8 * v73;
                        if (v76 != v74 && *(_DWORD *)(v76 + 4) == (_DWORD)v62)
                        {
                          v78 = v93[4];
                          if (v63 < (v93[5] - v78) >> 3)
                          {
                            v79 = *(_QWORD *)(v78 + 8 * v63);
                            if (v79)
                            {
                              v80 = *(unsigned __int16 *)(v79 + 2 * v65);
                              v82 = v93[7];
                              v81 = v93[8];
                              result = v81 - v82;
                              if (v80 < (v81 - v82) >> 3)
                              {
                                v83 = v82 + 8 * v80;
                                if (v83 != v81 && *(_DWORD *)(v83 + 4) == (_DWORD)v62)
                                {
                                  v85 = v92[4];
                                  if (v63 < (v92[5] - v85) >> 3)
                                  {
                                    v86 = *(_QWORD *)(v85 + 8 * v63);
                                    if (v86)
                                    {
                                      v87 = *(unsigned __int16 *)(v86 + 2 * v65);
                                      v89 = v92[7];
                                      v88 = v92[8];
                                      if (v87 < (v88 - v89) >> 3)
                                      {
                                        v90 = v89 + 8 * v87;
                                        if (*(_DWORD *)(v90 + 4) == (_DWORD)v62 && v90 != v88)
                                          break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v60)
          {
            v14 = v60;
            goto LABEL_10;
          }
        }
        v60 = v14;
LABEL_10:
        v96 = v14;
      }
      v9 = v60;
      if (v8 == v60)
        goto LABEL_97;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>::Model<ecs2::RuntimeQuery<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>::Model<ecs2::RuntimeQuery<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[4];
  uint64_t v9[7];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::PipelineSetupToApply>(v1);
  v3 = gdc::Registry::storage<md::ls::RenderState>(v1);
  v4 = gdc::Registry::storage<md::ls::DataIDSetToUse>(v1);
  v5 = gdc::Registry::storage<md::ls::RenderItemID>(v1);
  v8[0] = v2;
  v8[1] = v3;
  v8[2] = v4;
  v8[3] = v5;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v9, v8);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v6 = v2;
  else
    v6 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v6 = v4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v6 = v5;
  return *(_QWORD *)(v6 + 64) == v9[6];
}

uint64_t gdc::Registry::storage<md::ls::PipelineSetupToApply>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xBBB17A4464CB2E03;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xBBB17A4464CB2E03;
      if (*(_QWORD *)&v3 <= 0xBBB17A4464CB2E03)
        v5 = 0xBBB17A4464CB2E03 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xBBB17A4464CB2E03;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xBBB17A4464CB2E03)
            {
              if (v7[2] == 0xBBB17A4464CB2E03)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xBBB17A4464CB2E03)
          {
            if (v7[2] == 0xBBB17A4464CB2E03)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::PipelineSetupToApply]";
  *(_QWORD *)(v11 + 24) = 28;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272558;
  *(_QWORD *)(v11 + 8) = 0xBBB17A4464CB2E03;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xBBB17A4464CB2E03, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xBBB17A4464CB2E03;
  v15[1] = "md::ls::PipelineSetupToApply]";
  v15[2] = 28;
  gdc::Registry::_registerStorageDataSignals(a1, 0xBBB17A4464CB2E03, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6D1810(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = *a2 + 32;
  if (!*a2)
    v7 = 0;
  v8 = v4 + 32;
  if (!v4)
    v8 = 0;
  v9 = v5 + 32;
  if (!v5)
    v9 = 0;
  v10 = v6 + 32;
  if (!v6)
    v10 = 0;
  result = *(_QWORD *)(v7 + 24);
  if (*(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24) < (unint64_t)(*(_QWORD *)(v7 + 32) - result))
    v7 = v8;
  if (*(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24) < *(_QWORD *)(v7 + 32) - *(_QWORD *)(v7 + 24))
    v7 = v9;
  if (*(_QWORD *)(v10 + 32) - *(_QWORD *)(v10 + 24) < *(_QWORD *)(v7 + 32) - *(_QWORD *)(v7 + 24))
    v7 = v10;
  *a1 = v7;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  v13 = *(_QWORD *)(v7 + 24);
  v12 = *(_QWORD *)(v7 + 32);
  a1[6] = v13;
  if (v12 != v13)
  {
    result = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
    if ((result & 1) == 0)
    {
      v14 = v13 + 8;
      do
      {
        a1[6] = v14;
        if (v14 == v12)
          break;
        result = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
        v14 += 8;
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

void gdc::ComponentStorageWrapper<md::ls::PipelineSetupToApply>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PipelineSetupToApply>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PipelineSetupToApply>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PipelineSetupToApply>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&>::Model<ecs2::RuntimeQuery<md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&>::Model<ecs2::RuntimeQuery<md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL4 isValid;
  uint64_t (**v17)(_QWORD);
  uint64_t (*v18)(_QWORD);
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD v82[5];
  _QWORD *v83;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::PipelineSetupToApply>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::DataIDSetToUse>(v3);
  v6 = gdc::Registry::storage<md::ls::PipelineState>(v3);
  v10 = (_QWORD *)v6;
  v11 = v4 + 4;
  if (v5[8] - v5[7] < v4[8] - v4[7])
    v11 = v5 + 4;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) >= v11[4] - v11[3])
    v12 = (uint64_t)v11;
  else
    v12 = v6 + 32;
  v82[0] = v12;
  v82[1] = v4;
  v82[2] = v5;
  v82[3] = v6;
  v14 = *(_QWORD **)(v12 + 24);
  v13 = *(_QWORD **)(v12 + 32);
  v83 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82))
  {
    v15 = v14 + 1;
    do
    {
      v14 = v15;
      v83 = v15;
      if (v15 == v13)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82);
      v15 = v14 + 1;
    }
    while (!isValid);
  }
  v17 = &ecs2::Runtime::_localEntity;
  v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14)
    goto LABEL_82;
  v19 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v19 = *v14;
    v21 = *v14;
    v22 = HIDWORD(*v14);
    v23 = *v14 >> 39;
    v24 = v4[4];
    if (v23 >= (v4[5] - v24) >> 3)
      goto LABEL_23;
    v25 = *(_QWORD *)(v24 + 8 * v23);
    if (!v25)
      goto LABEL_23;
    v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    v28 = v4[7];
    v27 = v4[8];
    if (v26 >= (v27 - v28) >> 3)
      goto LABEL_23;
    v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == (_DWORD)v22)
    {
      v31 = v4[11];
      v32 = v4[10] + 8 * v26;
    }
    else
    {
LABEL_23:
      v31 = v4[11];
      v32 = v31;
    }
    v33 = v32 == v31 ? 0 : v32;
    if ((v34 = v5[4], v23 < (v5[5] - v34) >> 3)
      && (v35 = *(_QWORD *)(v34 + 8 * v23)) != 0
      && (v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v5[7], v37 = v5[8], v36 < (v37 - v38) >> 3)
      && ((v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == (_DWORD)v22) : (v40 = 0), v40))
    {
      v41 = v5[11];
      v42 = v5[10] + 8 * v36;
    }
    else
    {
      v41 = v5[11];
      v42 = v41;
    }
    v43 = v42 == v41 ? 0 : v42;
    v44 = v10[4];
    if (v23 < (v10[5] - v44) >> 3)
    {
      v45 = *(_QWORD *)(v44 + 8 * v23);
      if (v45)
      {
        v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        v48 = v10[7];
        v47 = v10[8];
        if (v46 < (v47 - v48) >> 3)
        {
          v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == (_DWORD)v22)
            break;
        }
      }
    }
    v51 = v10[11];
    v52 = v51;
    v53 = *(_QWORD *)(a2 + 24);
    if (!v53)
      goto LABEL_81;
LABEL_46:
    if (v52 == v51)
      v54 = 0;
    else
      v54 = v52;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 48))(v53, v33, v43, v54);
    v56 = *(_QWORD **)(v12 + 32);
    v20 = v14 + 1;
    v83 = v14 + 1;
    if (v14 + 1 != v56)
    {
      v57 = v4[4];
      v59 = v4[7];
      v58 = v4[8];
      v60 = v5[4];
      result = v5[7];
      v61 = v5[8];
      v62 = v10[4];
      v64 = v10[7];
      v63 = v10[8];
      while (1)
      {
        v65 = *((unsigned int *)v20 + 1);
        v66 = v65 >> 7;
        if (v65 >> 7 < (v4[5] - v57) >> 3)
        {
          v67 = *(_QWORD *)(v57 + 8 * v66);
          if (v67)
          {
            v68 = v65 & 0x7F;
            v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              v70 = v59 + 8 * v69;
              v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == (_DWORD)v65;
              if (v71 && v66 < (v5[5] - v60) >> 3)
              {
                v73 = *(_QWORD *)(v60 + 8 * v66);
                if (v73)
                {
                  v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    v75 = result + 8 * v74;
                    v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == (_DWORD)v65;
                    if (v76 && v66 < (v10[5] - v62) >> 3)
                    {
                      v78 = *(_QWORD *)(v62 + 8 * v66);
                      if (v78)
                      {
                        v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == (_DWORD)v65 && v80 != v63)
                            break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          v20 = v56;
          goto LABEL_14;
        }
      }
      v56 = v20;
LABEL_14:
      v83 = v20;
    }
    v14 = v56;
    if (v13 == v56)
      goto LABEL_83;
  }
  v51 = v10[11];
  v52 = v10[10] + 8 * v46;
  v53 = *(_QWORD *)(a2 + 24);
  if (v53)
    goto LABEL_46;
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  result = ((uint64_t (*)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  v19 = (_QWORD *)result;
LABEL_83:
  *v19 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&>::Model<ecs2::RuntimeQuery<md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 isValid;
  _QWORD v11[5];
  uint64_t v12;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::PipelineSetupToApply>(v1);
  v3 = gdc::Registry::storage<md::ls::DataIDSetToUse>(v1);
  v4 = gdc::Registry::storage<md::ls::PipelineState>(v1);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v5 = v2;
  else
    v5 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56))
    v5 = v4;
  v11[0] = v5 + 32;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  v7 = *(_QWORD *)(v5 + 56);
  v6 = *(_QWORD *)(v5 + 64);
  v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    v8 = v7 + 8;
    do
    {
      v7 = v8;
      v12 = v8;
      if (v8 == v6)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

uint64_t gdc::Registry::storage<md::ls::PipelineState>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xB160D04D0F4A35A4;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xB160D04D0F4A35A4;
      if (*(_QWORD *)&v3 <= 0xB160D04D0F4A35A4)
        v5 = 0xB160D04D0F4A35A4 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xB160D04D0F4A35A4;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xB160D04D0F4A35A4)
            {
              if (v7[2] == 0xB160D04D0F4A35A4)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xB160D04D0F4A35A4)
          {
            if (v7[2] == 0xB160D04D0F4A35A4)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::PipelineState]";
  *(_QWORD *)(v11 + 24) = 21;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271658;
  *(_QWORD *)(v11 + 8) = 0xB160D04D0F4A35A4;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xB160D04D0F4A35A4, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xB160D04D0F4A35A4;
  v15[1] = "md::ls::PipelineState]";
  v15[2] = 21;
  gdc::Registry::_registerStorageDataSignals(a1, 0xB160D04D0F4A35A4, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6D2114(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::PipelineState>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PipelineState>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PipelineState>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PipelineState>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignCommandBuffersToRenderItems>(md::ita::AssignCommandBuffersToRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::AssignCommandBuffersToRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignCommandBuffersToRenderItems>(md::ita::AssignCommandBuffersToRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignCommandBuffersToRenderItems>(md::ita::AssignCommandBuffersToRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::AssignCommandBuffersToRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignCommandBuffersToRenderItems>(md::ita::AssignCommandBuffersToRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287AA8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignCommandBuffersToRenderItems>(md::ita::AssignCommandBuffersToRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::AssignCommandBuffersToRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignCommandBuffersToRenderItems>(md::ita::AssignCommandBuffersToRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287AA8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignCommandBuffersToRenderItems>(md::ita::AssignCommandBuffersToRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::AssignCommandBuffersToRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignCommandBuffersToRenderItems>(md::ita::AssignCommandBuffersToRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignCommandBuffersToRenderItems>(md::ita::AssignCommandBuffersToRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::AssignCommandBuffersToRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignCommandBuffersToRenderItems>(md::ita::AssignCommandBuffersToRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignCommandBuffersToRenderItems>(md::ita::AssignCommandBuffersToRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::AssignCommandBuffersToRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignCommandBuffersToRenderItems>(md::ita::AssignCommandBuffersToRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287AF0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignCommandBuffersToRenderItems>(md::ita::AssignCommandBuffersToRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::AssignCommandBuffersToRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignCommandBuffersToRenderItems>(md::ita::AssignCommandBuffersToRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287AF0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignCommandBuffersToRenderItems>(md::ita::AssignCommandBuffersToRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::AssignCommandBuffersToRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignCommandBuffersToRenderItems>(md::ita::AssignCommandBuffersToRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x171C8753A53C145FLL;
  v2[1] = "md::ls::DataForCommandBuffer]";
  *(_QWORD *)&result = 28;
  *((_OWORD *)v2 + 1) = xmmword_19FFB41F0;
  v2[4] = "md::ls::VisibilityTestResult]";
  v2[5] = 28;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignCommandBuffersToRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignCommandBuffersToRenderItems>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignCommandBuffersToRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignCommandBuffersToRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42785F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignCommandBuffersToRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignCommandBuffersToRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42785F8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignCommandBuffersToRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignCommandBuffersToRenderItems>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  BOOL v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t (***v61)();
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *result;
  unint64_t *v71;
  char v72;
  uint64_t (**v73)();
  __int128 v74;
  uint64_t (***v75)();
  uint64_t (**v76)();
  __int128 v77;
  uint64_t (***v78)();
  int v79;
  uint64_t v80;

  v2 = a1;
  v80 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::DataForCommandBuffer>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::VisibilityTestResult>(v3);
  v7 = (unint64_t *)v4[7];
  v6 = (uint64_t *)v4[8];
  v8 = (char *)v6 - (char *)v7;
  if (v6 != (uint64_t *)v7)
  {
    if ((v9 = *((unsigned int *)v7 + 1), v10 = v4[4], v11 = (v4[5] - v10) >> 3, v9 >> 7 >= v11)
      || (v12 = *(_QWORD *)(v10 + 8 * (v9 >> 7))) == 0
      || (v13 = *(unsigned __int16 *)(v12 + 2 * (v9 & 0x7F)), v13 >= v8 >> 3)
      || ((v14 = (uint64_t *)&v7[v13], v14 != v6) ? (v15 = *((_DWORD *)v14 + 1) == (_DWORD)v9) : (v15 = 0), !v15))
    {
      v16 = v8 >> 3;
      v17 = (uint64_t *)(v7 + 1);
      do
      {
        if (v17 == v6)
          goto LABEL_84;
        v18 = *((unsigned int *)v17 + 1);
        v19 = (uint64_t *)v4[8];
        if (v18 >> 7 < v11)
        {
          v20 = *(_QWORD *)(v10 + 8 * (v18 >> 7));
          v19 = (uint64_t *)v4[8];
          if (v20)
          {
            v21 = *(unsigned __int16 *)(v20 + 2 * (v18 & 0x7F));
            v19 = (uint64_t *)v4[8];
            if (v16 > v21)
            {
              v19 = (uint64_t *)&v7[v21];
              if (*((_DWORD *)v19 + 1) != (_DWORD)v18)
                v19 = (uint64_t *)v4[8];
            }
          }
        }
        ++v17;
      }
      while (v19 == v6);
      v7 = (unint64_t *)(v17 - 1);
    }
  }
  if (v6 != (uint64_t *)v7)
  {
    v22 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v71 = v22;
    do
    {
      *v22 = *v7;
      v24 = *v7;
      v25 = HIDWORD(*v7);
      v26 = *v7 >> 39;
      v27 = v4[4];
      if (v26 < (v4[5] - v27) >> 3
        && (v28 = *(_QWORD *)(v27 + 8 * v26)) != 0
        && (v29 = *(unsigned __int16 *)(v28 + 2 * (HIDWORD(v24) & 0x7F)),
            v31 = v4[7],
            v30 = v4[8],
            v29 < (v30 - v31) >> 3)
        && ((v32 = v31 + 8 * v29, v32 != v30) ? (v33 = *(_DWORD *)(v32 + 4) == (_DWORD)v25) : (v33 = 0), v33))
      {
        v34 = v4[11];
        v35 = v4[10] + 24 * v29;
      }
      else
      {
        v34 = v4[11];
        v35 = v34;
      }
      if (v35 == v34)
        v36 = 0;
      else
        v36 = (unsigned __int8 *)v35;
      v37 = v5[4];
      if (v26 < (v5[5] - v37) >> 3
        && (v38 = *(_QWORD *)(v37 + 8 * v26)) != 0
        && (v39 = *(unsigned __int16 *)(v38 + 2 * (HIDWORD(v24) & 0x7F)),
            v41 = v5[7],
            v40 = v5[8],
            v39 < (v40 - v41) >> 3)
        && ((v42 = v41 + 8 * v39, v42 != v40) ? (v43 = *(_DWORD *)(v42 + 4) == (_DWORD)v25) : (v43 = 0), v43))
      {
        v44 = (_BYTE *)v5[11];
        v45 = (_BYTE *)(v5[10] + v39);
      }
      else
      {
        v44 = (_BYTE *)v5[11];
        v45 = v44;
      }
      if (v45 == v44)
        v46 = 0;
      else
        v46 = v45;
      v47 = **(_QWORD **)(v2 + 8);
      v48 = *(_QWORD **)v47;
      v49 = *(_QWORD **)(v47 + 8);
      if (v48 != v49)
      {
        while (*v48 != 0xC94DD89A7B09BE9CLL)
        {
          v48 += 5;
          if (v48 == v49)
          {
            v50 = 0;
            goto LABEL_59;
          }
        }
      }
      if (v48 == v49)
      {
        v50 = 0;
      }
      else
      {
        v51 = v2;
        v50 = v48[3];
        v52 = (std::__shared_weak_count *)v48[4];
        if (v52)
        {
          p_shared_owners = (unint64_t *)&v52->__shared_owners_;
          do
            v54 = __ldxr(p_shared_owners);
          while (__stxr(v54 + 1, p_shared_owners));
          do
            v55 = __ldaxr(p_shared_owners);
          while (__stlxr(v55 - 1, p_shared_owners));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        v2 = v51;
      }
      v22 = v71;
LABEL_59:
      v56 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v50 + 80))(v50, *((_QWORD *)v36 + 1), *v36);
      v57 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v50 + 24))(v50, v56, *v36, *((_QWORD *)v36 + 2));
      if (v46)
        v58 = *v46 == 0;
      else
        v58 = 0;
      v59 = *(_QWORD **)(v2 + 8);
      v60 = *v22;
      if (!v57 || v58)
      {
        v73 = &off_1E4282600;
        *(_QWORD *)&v74 = v60;
        v75 = &v73;
        v76 = &off_1E4282600;
        v78 = &v76;
        *(_QWORD *)&v77 = v60;
        v79 = 1;
      }
      else
      {
        v73 = &off_1E427E310;
        *(_QWORD *)&v74 = v57;
        *((_QWORD *)&v74 + 1) = v60;
        v75 = &v73;
        v78 = &v76;
        v76 = &off_1E427E310;
        v77 = v74;
        v79 = 0;
      }
      ecs2::Runtime::queueCommand(v59, (uint64_t)&v76);
      if (v79 != -1)
        ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v79])(&v72, &v76);
      v79 = -1;
      v61 = v75;
      if (v75 == &v73)
      {
        v61 = &v73;
        v62 = 4;
      }
      else
      {
        if (!v75)
          goto LABEL_73;
        v62 = 5;
      }
      (*v61)[v62]();
LABEL_73:
      v63 = v4[4];
      v64 = v4[7];
      v23 = (uint64_t *)v4[8];
      v65 = (uint64_t *)(v7 + 1);
      while (v65 != v23)
      {
        v66 = *((unsigned int *)v65 + 1);
        v67 = v4[8];
        if (v66 >> 7 < (v4[5] - v63) >> 3)
        {
          v68 = *(_QWORD *)(v63 + 8 * (v66 >> 7));
          v67 = v4[8];
          if (v68)
          {
            v69 = *(unsigned __int16 *)(v68 + 2 * (v66 & 0x7F));
            v67 = v4[8];
            if (((uint64_t)v23 - v64) >> 3 > v69)
            {
              v67 = v64 + 8 * v69;
              if (*(_DWORD *)(v67 + 4) != (_DWORD)v66)
                v67 = v4[8];
            }
          }
        }
        ++v65;
        if ((uint64_t *)v67 != v23)
        {
          v23 = v65 - 1;
          break;
        }
      }
      v7 = (unint64_t *)v23;
    }
    while (v6 != v23);
  }
LABEL_84:
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::DataForCommandBuffer>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x171C8753A53C145FLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x171C8753A53C145FLL;
      if (*(_QWORD *)&v3 <= 0x171C8753A53C145FuLL)
        v5 = 0x171C8753A53C145FuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x171C8753A53C145FLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x171C8753A53C145FLL)
            {
              if (v7[2] == 0x171C8753A53C145FLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x171C8753A53C145FLL)
          {
            if (v7[2] == 0x171C8753A53C145FLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::DataForCommandBuffer]";
  *(_QWORD *)(v11 + 24) = 28;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42724C8;
  *(_QWORD *)(v11 + 8) = 0x171C8753A53C145FLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x171C8753A53C145FuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x171C8753A53C145FLL;
  v15[1] = "md::ls::DataForCommandBuffer]";
  v15[2] = 28;
  gdc::Registry::_registerStorageDataSignals(a1, 0x171C8753A53C145FLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6D2B14(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::DataForCommandBuffer>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::DataForCommandBuffer>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 24 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_QWORD *)(v15 - 8);
  *(_OWORD *)v14 = *(_OWORD *)(v15 - 24);
  *(_QWORD *)(v14 + 16) = v16;
  a1[11] -= 24;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::DataForCommandBuffer>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::DataForCommandBuffer>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleColorConstantDataHandle>(md::ita::UpdateStyleColorConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::UpdateStyleColorConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleColorConstantDataHandle>(md::ita::UpdateStyleColorConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleColorConstantDataHandle>(md::ita::UpdateStyleColorConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::UpdateStyleColorConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleColorConstantDataHandle>(md::ita::UpdateStyleColorConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288048;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleColorConstantDataHandle>(md::ita::UpdateStyleColorConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::UpdateStyleColorConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleColorConstantDataHandle>(md::ita::UpdateStyleColorConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288048;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleColorConstantDataHandle>(md::ita::UpdateStyleColorConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::UpdateStyleColorConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleColorConstantDataHandle>(md::ita::UpdateStyleColorConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleColorConstantDataHandle>(md::ita::UpdateStyleColorConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::UpdateStyleColorConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleColorConstantDataHandle>(md::ita::UpdateStyleColorConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleColorConstantDataHandle>(md::ita::UpdateStyleColorConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::UpdateStyleColorConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleColorConstantDataHandle>(md::ita::UpdateStyleColorConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288090;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleColorConstantDataHandle>(md::ita::UpdateStyleColorConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::UpdateStyleColorConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleColorConstantDataHandle>(md::ita::UpdateStyleColorConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288090;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleColorConstantDataHandle>(md::ita::UpdateStyleColorConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::UpdateStyleColorConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleColorConstantDataHandle>(md::ita::UpdateStyleColorConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xD68EA0DE832DEC03;
  v2[1] = "md::ls::RenderItemID]";
  *(_QWORD *)&result = 20;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4200;
  v2[4] = "md::ls::ColorDataHandle]";
  v2[5] = 23;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateStyleColorConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateStyleColorConstantDataHandle>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateStyleColorConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateStyleColorConstantDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42788C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateStyleColorConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateStyleColorConstantDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42788C8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateStyleColorConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateStyleColorConstantDataHandle>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (***v21)();
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  _QWORD *v44;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  int64_t v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  __int128 v82;
  _QWORD *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t prime;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _BYTE *v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  _OWORD *v98;
  __int128 *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  uint8x8_t v105;
  _QWORD *v106;
  _QWORD *v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  float v111;
  float v112;
  _BOOL8 v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint8x8_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint8x8_t v133;
  void **v134;
  _QWORD *v135;
  unint64_t v136;
  uint64_t v138;
  float v140;
  float v141;
  _BOOL8 v142;
  unint64_t v143;
  unint64_t v144;
  size_t v145;
  void *v146;
  _QWORD *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  size_t v151;
  size_t v152;
  size_t v153;
  _QWORD *v154;
  size_t v155;
  uint64_t v156;
  unint64_t v157;
  uint8x8_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  size_t v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  unint64_t v166;
  unint64_t v167;
  uint8x8_t v168;
  void **v169;
  _QWORD *v170;
  unint64_t v171;
  uint64_t v172;
  float v173;
  float v174;
  _BOOL8 v175;
  unint64_t v176;
  unint64_t v177;
  size_t v178;
  void *v179;
  void *v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  size_t v184;
  size_t v185;
  size_t v186;
  _QWORD *v187;
  size_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint8x8_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  size_t v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  _QWORD *v200;
  unint64_t v201;
  uint64_t v202;
  unsigned int v203;
  uint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  unint64_t v207;
  uint8x8_t v208;
  _QWORD **v209;
  _QWORD *v210;
  unint64_t v211;
  uint64_t v212;
  float v213;
  _QWORD *v214;
  float v215;
  _BOOL8 v216;
  unint64_t v217;
  unint64_t v218;
  size_t v219;
  void *v220;
  void *v221;
  uint64_t v222;
  _QWORD *v223;
  size_t v224;
  size_t v225;
  size_t v226;
  _QWORD *v227;
  size_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint8x8_t v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  size_t v236;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  _QWORD *v240;
  unint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  unint64_t v244;
  _WORD *v245;
  _QWORD *v253;
  uint64_t v254;
  uint64_t result;
  uint64_t v256;
  unint64_t *v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t v278[4];
  unint64_t *v279;
  uint64_t v280;
  _QWORD *v281;
  _QWORD *v282;
  unint64_t *v283;
  char v284[4];
  __int128 v285;
  unsigned __int8 v286;
  char v287;
  uint64_t (**v288)();
  __int128 v289;
  uint64_t (***v290)();
  uint64_t (**v291)();
  __int128 v292;
  uint64_t (***v293)();
  int v294;
  uint64_t v295;

  v2 = a1;
  v295 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::RenderItemID>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::ColorDataHandle>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v280, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v278, v9, v4, v6, *(_QWORD *)(v9 + 32));
  if (v279 == v283)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v11 = (_QWORD *)result;
    goto LABEL_500;
  }
  v11 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v276 = v6;
  v277 = v2;
  v275 = v11;
  do
  {
    *v11 = *v10;
    v12 = *v10;
    v13 = v6[4];
    if (v12 >> 39 < (v6[5] - v13) >> 3
      && (v14 = *(_QWORD *)(v13 + 8 * (v12 >> 39))) != 0
      && (v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)), v17 = v6[7], v16 = v6[8], v15 < (v16 - v17) >> 3)
      && ((v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
        ? (_ZF = *(_DWORD *)(v19 + 4) == (_DWORD)v18)
        : (_ZF = 0),
          _ZF))
    {
      v21 = (uint64_t (***)())(v6[10] + 8 * v15);
    }
    else
    {
      v21 = (uint64_t (***)())v6[11];
    }
    v22 = **(_QWORD **)(v2 + 8);
    v23 = *(_QWORD **)v22;
    v24 = *(_QWORD **)(v22 + 8);
    if (v23 != v24)
    {
      while (*v23 != 0x41D4E9297E100630)
      {
        v23 += 5;
        if (v23 == v24)
          goto LABEL_29;
      }
    }
    if (v23 == v24)
    {
LABEL_29:
      v25 = 0;
    }
    else
    {
      v25 = v23[3];
      v26 = (std::__shared_weak_count *)v23[4];
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
        do
          v29 = __ldaxr(p_shared_owners);
        while (__stlxr(v29 - 1, p_shared_owners));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
    v30 = **(_QWORD **)(v2 + 8);
    v31 = *(_QWORD **)v30;
    v32 = *(_QWORD **)(v30 + 8);
    if (v31 != v32)
    {
      while (*v31 != 0x4EDAD23DFB014132)
      {
        v31 += 5;
        if (v31 == v32)
          goto LABEL_41;
      }
    }
    if (v31 == v32)
    {
LABEL_41:
      v33 = 0;
    }
    else
    {
      v33 = (_QWORD *)v31[3];
      v34 = (std::__shared_weak_count *)v31[4];
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        do
          v37 = __ldaxr(v35);
        while (__stlxr(v37 - 1, v35));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
    }
    v291 = *v21;
    v38 = v33[126];
    if (v291 < (unint64_t)((v33[127] - v38) >> 3)
      && ((v39 = *(_QWORD *)(v38 + 8 * v291)) != 0 ? (v40 = HIDWORD(v291) == HIDWORD(v39)) : (v40 = 0),
          v40))
    {
      v42 = v33[129] + 20 * v39;
      v41 = v33[130];
    }
    else
    {
      v41 = v33[130];
      v42 = v41;
    }
    if (v42 == v41)
      v43 = 0;
    else
      v43 = (unsigned int *)v42;
    if (v43)
    {
      v44 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>((uint64_t)(v33 + 118), (unint64_t)v291, &v291);
      ++v44[3];
    }
    _S8 = *v43;
    _S9 = v43[1];
    _S10 = v43[2];
    _S11 = v43[3];
    v284[0] = 0;
    *(_QWORD *)&v285 = __PAIR64__(_S9, _S8);
    *((_QWORD *)&v285 + 1) = __PAIR64__(_S11, _S10);
    v286 = 1;
    v49 = (_QWORD *)(v25 + 6488);
    v50 = std::__hash_table<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::__unordered_map_hasher<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,md::ColorStyleCacheKeyHasher,std::equal_to<md::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::equal_to<md::ColorStyleCacheKey>,md::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>>>::find<md::ColorStyleCacheKey>((_QWORD *)(v25 + 6488), (uint64_t)v284);
    if (!v50 || (v51 = *(_QWORD *)(v50 + 40)) == 0)
    {
      v52 = *(_QWORD *)(v25 + 6360);
      if (*(_QWORD *)(v25 + 6352) == v52)
      {
        v54 = (-1431655765 * ((*(_QWORD *)(v25 + 6408) - *(_QWORD *)(v25 + 6400)) >> 3)) | 0x100000000;
        v55 = *(uint64_t **)(v25 + 6384);
        v56 = *(_QWORD *)(v25 + 6392);
        if ((unint64_t)v55 >= v56)
        {
          v58 = *(char **)(v25 + 6376);
          v59 = ((char *)v55 - v58) >> 3;
          v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 61)
            goto LABEL_502;
          v61 = v56 - (_QWORD)v58;
          if (v61 >> 2 > v60)
            v60 = v61 >> 2;
          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
            v62 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v62 = v60;
          if (v62)
          {
            if (v62 >> 61)
              goto LABEL_501;
            v63 = (char *)operator new(8 * v62);
          }
          else
          {
            v63 = 0;
          }
          v64 = (uint64_t *)&v63[8 * v59];
          *v64 = v54;
          v57 = v64 + 1;
          if (v55 != (uint64_t *)v58)
          {
            v65 = (char *)v55 - v58 - 8;
            if (v65 < 0x58)
              goto LABEL_506;
            if ((unint64_t)(v58 - v63) < 0x20)
              goto LABEL_506;
            v66 = (v65 >> 3) + 1;
            v67 = &v63[(char *)v55 - v58 - 16];
            v68 = v55 - 2;
            v69 = v66 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v70 = *(_OWORD *)v68;
              *((_OWORD *)v67 - 1) = *((_OWORD *)v68 - 1);
              *(_OWORD *)v67 = v70;
              v67 -= 32;
              v68 -= 4;
              v69 -= 4;
            }
            while (v69);
            v64 -= v66 & 0x3FFFFFFFFFFFFFFCLL;
            v55 -= v66 & 0x3FFFFFFFFFFFFFFCLL;
            if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_506:
              do
              {
                v71 = *--v55;
                *--v64 = v71;
              }
              while (v55 != (uint64_t *)v58);
            }
            v55 = *(uint64_t **)(v25 + 6376);
          }
          *(_QWORD *)(v25 + 6376) = v64;
          *(_QWORD *)(v25 + 6384) = v57;
          *(_QWORD *)(v25 + 6392) = &v63[8 * v62];
          if (v55)
            operator delete(v55);
        }
        else
        {
          *v55 = v54;
          v57 = v55 + 1;
        }
        *(_QWORD *)(v25 + 6384) = v57;
        v51 = *(v57 - 1);
      }
      else
      {
        v53 = *(_QWORD *)(v52 - 8);
        *(_QWORD *)(v25 + 6360) = v52 - 8;
        *(_DWORD *)(*(_QWORD *)(v25 + 6376) + 8 * v53) = -1431655765
                                                       * ((*(_QWORD *)(v25 + 6408) - *(_QWORD *)(v25 + 6400)) >> 3);
        *(_DWORD *)(*(_QWORD *)(v25 + 6376) + 8 * v53 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(v25 + 6376)
                                                                                                 + 8 * v53
                                                                                                 + 4) << 32)
                                                            + 0x100000000) >> 32;
        v51 = v53 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v25 + 6376) + 8 * v53 + 4) << 32);
      }
      v72 = *(_QWORD *)(v25 + 6408);
      v73 = *(_QWORD *)(v25 + 6416);
      if (v72 >= v73)
      {
        v75 = *(_QWORD **)(v25 + 6400);
        v76 = 0xAAAAAAAAAAAAAAABLL * ((v72 - (uint64_t)v75) >> 3) + 1;
        if (v76 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_502;
        v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - (_QWORD)v75) >> 3);
        if (2 * v77 > v76)
          v76 = 2 * v77;
        if (v77 >= 0x555555555555555)
          v78 = 0xAAAAAAAAAAAAAAALL;
        else
          v78 = v76;
        if (v78 > 0xAAAAAAAAAAAAAAALL)
LABEL_501:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v79 = (char *)operator new(24 * v78);
        v80 = &v79[8 * ((v72 - (uint64_t)v75) >> 3)];
        v81 = &v79[24 * v78];
        *(_QWORD *)v80 = 0;
        *((_QWORD *)v80 + 1) = 0;
        *((_QWORD *)v80 + 2) = 0;
        v74 = v80 + 24;
        if ((_QWORD *)v72 == v75)
        {
          *(_QWORD *)(v25 + 6400) = v80;
          *(_QWORD *)(v25 + 6408) = v74;
          *(_QWORD *)(v25 + 6416) = v81;
        }
        else
        {
          do
          {
            v82 = *(_OWORD *)(v72 - 24);
            v72 -= 24;
            *(_OWORD *)(v80 - 24) = v82;
            v80 -= 24;
            *((_QWORD *)v80 + 2) = *(_QWORD *)(v72 + 16);
            *(_QWORD *)(v72 + 8) = 0;
            *(_QWORD *)(v72 + 16) = 0;
          }
          while ((_QWORD *)v72 != v75);
          v72 = *(_QWORD *)(v25 + 6400);
          v83 = *(_QWORD **)(v25 + 6408);
          *(_QWORD *)(v25 + 6400) = v80;
          *(_QWORD *)(v25 + 6408) = v74;
          *(_QWORD *)(v25 + 6416) = v81;
          while (v83 != (_QWORD *)v72)
          {
            v84 = (std::__shared_weak_count *)*(v83 - 1);
            if (v84)
            {
              v85 = (unint64_t *)&v84->__shared_owners_;
              do
                v86 = __ldaxr(v85);
              while (__stlxr(v86 - 1, v85));
              if (!v86)
              {
                ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                std::__shared_weak_count::__release_weak(v84);
              }
            }
            v83 -= 3;
          }
        }
        if (v72)
          operator delete((void *)v72);
      }
      else
      {
        *(_QWORD *)v72 = 0;
        *(_QWORD *)(v72 + 8) = 0;
        v74 = (_QWORD *)(v72 + 24);
        *(_QWORD *)(v72 + 16) = 0;
      }
      *(_QWORD *)(v25 + 6408) = v74;
      prime = *(_QWORD *)(v25 + 6432);
      v88 = *(_QWORD *)(v25 + 6440);
      if (prime >= v88)
      {
        v72 = *(_QWORD *)(v25 + 6424);
        v90 = (uint64_t)(prime - v72) >> 3;
        v91 = v90 + 1;
        if ((unint64_t)(v90 + 1) >> 61)
LABEL_502:
          abort();
        v92 = v88 - v72;
        if (v92 >> 2 > v91)
          v91 = v92 >> 2;
        if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
          v93 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v93 = v91;
        if (v93)
        {
          if (v93 >> 61)
            goto LABEL_501;
          v94 = operator new(8 * v93);
        }
        else
        {
          v94 = 0;
        }
        v95 = &v94[8 * v90];
        *v95 = v51;
        v89 = v95 + 1;
        if (prime != v72)
        {
          v96 = prime - v72 - 8;
          if (v96 < 0x58)
            goto LABEL_507;
          if ((unint64_t)(v72 - (_QWORD)v94) < 0x20)
            goto LABEL_507;
          v97 = (v96 >> 3) + 1;
          v98 = &v94[prime - v72 - 16];
          v99 = (__int128 *)(prime - 16);
          v100 = v97 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v101 = *v99;
            *(v98 - 1) = *(v99 - 1);
            *v98 = v101;
            v98 -= 2;
            v99 -= 2;
            v100 -= 4;
          }
          while (v100);
          v95 -= v97 & 0x3FFFFFFFFFFFFFFCLL;
          prime -= 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
          if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_507:
            do
            {
              v102 = *(_QWORD *)(prime - 8);
              prime -= 8;
              *--v95 = v102;
            }
            while (prime != v72);
          }
        }
        *(_QWORD *)(v25 + 6424) = v95;
        *(_QWORD *)(v25 + 6432) = v89;
        *(_QWORD *)(v25 + 6440) = &v94[8 * v93];
        if (v72)
          operator delete((void *)v72);
      }
      else
      {
        *(_QWORD *)prime = v51;
        prime += 8;
        v89 = (_QWORD *)prime;
      }
      v103 = (uint64_t *)(v25 + 6272);
      *(_QWORD *)(v25 + 6432) = v89;
      v104 = *(_QWORD *)(v25 + 6280);
      if (v104)
      {
        v105 = (uint8x8_t)vcnt_s8((int8x8_t)v104);
        v105.i16[0] = vaddlv_u8(v105);
        if (v105.u32[0] > 1uLL)
        {
          v72 = v51;
          if (v51 >= v104)
            v72 = v51 % v104;
        }
        else
        {
          v72 = (v104 - 1) & v51;
        }
        v106 = *(_QWORD **)(*v103 + 8 * v72);
        if (v106)
        {
          v107 = (_QWORD *)*v106;
          if (v107)
          {
            if (v105.u32[0] < 2uLL)
            {
              while (1)
              {
                v109 = v107[1];
                if (v109 == v51)
                {
                  if (v107[2] == v51)
                    goto LABEL_183;
                }
                else if ((v109 & (v104 - 1)) != v72)
                {
                  goto LABEL_145;
                }
                v107 = (_QWORD *)*v107;
                if (!v107)
                  goto LABEL_145;
              }
            }
            do
            {
              v108 = v107[1];
              if (v108 == v51)
              {
                if (v107[2] == v51)
                  goto LABEL_183;
              }
              else
              {
                if (v108 >= v104)
                  v108 %= v104;
                if (v108 != v72)
                  break;
              }
              v107 = (_QWORD *)*v107;
            }
            while (v107);
          }
        }
      }
LABEL_145:
      prime = v104 == 0;
      v110 = (char *)operator new(0x30uLL);
      *(_QWORD *)v110 = 0;
      *((_QWORD *)v110 + 1) = v51;
      *((_QWORD *)v110 + 2) = v51;
      *(_OWORD *)(v110 + 24) = xmmword_19FFB3350;
      v110[40] = 0;
      v111 = (float)(unint64_t)(*(_QWORD *)(v25 + 6296) + 1);
      v112 = *(float *)(v25 + 6304);
      if ((((float)(v112 * (float)v104) >= v111) & ~(_DWORD)prime) == 0)
      {
        v113 = v104 < 3 || (v104 & (v104 - 1)) != 0;
        v114 = v113 | (2 * v104);
        v115 = vcvtps_u32_f32(v111 / v112);
        if (v114 <= v115)
          prime = v115;
        else
          prime = v114;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v104 = *(_QWORD *)(v25 + 6280);
        }
        if (prime > v104)
          goto LABEL_157;
        if (prime < v104)
        {
          v116 = vcvtps_u32_f32((float)*(unint64_t *)(v25 + 6296) / *(float *)(v25 + 6304));
          if (v104 < 3
            || (v117 = (uint8x8_t)vcnt_s8((int8x8_t)v104), v117.i16[0] = vaddlv_u8(v117), v117.u32[0] > 1uLL))
          {
            v116 = std::__next_prime(v116);
          }
          else
          {
            v118 = 1 << -(char)__clz(v116 - 1);
            if (v116 >= 2)
              v116 = v118;
          }
          if (prime <= v116)
            prime = v116;
          if (prime < v104)
LABEL_157:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v25 + 6272, prime);
        }
        v104 = *(_QWORD *)(v25 + 6280);
        if ((v104 & (v104 - 1)) != 0)
        {
          if (v51 >= v104)
            v72 = v51 % v104;
          else
            v72 = v51;
        }
        else
        {
          v72 = (v104 - 1) & v51;
        }
      }
      v119 = *v103;
      v120 = *(_QWORD **)(*v103 + 8 * v72);
      if (v120)
      {
        *(_QWORD *)v110 = *v120;
      }
      else
      {
        *(_QWORD *)v110 = *(_QWORD *)(v25 + 6288);
        *(_QWORD *)(v25 + 6288) = v110;
        *(_QWORD *)(v119 + 8 * v72) = v25 + 6288;
        if (!*(_QWORD *)v110)
        {
LABEL_182:
          ++*(_QWORD *)(v25 + 6296);
LABEL_183:
          if (!v286)
          {
            std::__throw_bad_optional_access[abi:nn180100]();
            __break(1u);
          }
          v122 = v285;
          v123 = v285 - 0x61C8864680B583EBLL;
          if (*(float *)&v285 == 0.0)
            v123 = 0x9E3779B97F4A7C15;
          v124 = DWORD1(v285) - 0x61C8864680B583EBLL;
          if (*((float *)&v285 + 1) == 0.0)
            v124 = 0x9E3779B97F4A7C15;
          v125 = ((v123 >> 2) + (v123 << 6) + v124) ^ v123;
          v126 = *((_QWORD *)&v285 + 1);
          v127 = DWORD2(v285) - 0x61C8864680B583EBLL;
          if (*((float *)&v285 + 2) == 0.0)
            v127 = 0x9E3779B97F4A7C15;
          v128 = (v127 + (v125 << 6) + (v125 >> 2)) ^ v125;
          v129 = HIDWORD(v285) - 0x61C8864680B583EBLL;
          if (*((float *)&v285 + 3) == 0.0)
            v129 = 0x9E3779B97F4A7C15;
          v130 = (v129 + (v128 << 6) + (v128 >> 2)) ^ v128;
          v131 = (((v130 << 6) - 0x61C8864680B583EBLL + (v130 >> 2)) ^ v130) - 0x61C8864680B583EBLL;
          v132 = *(_QWORD *)(v25 + 6496);
          if (v132)
          {
            v133 = (uint8x8_t)vcnt_s8((int8x8_t)v132);
            v133.i16[0] = vaddlv_u8(v133);
            if (v133.u32[0] > 1uLL)
            {
              prime = (((v130 << 6) - 0x61C8864680B583EBLL + (v130 >> 2)) ^ v130) - 0x61C8864680B583EBLL;
              if (v131 >= v132)
                prime = v131 % v132;
            }
            else
            {
              prime = v131 & (v132 - 1);
            }
            v134 = *(void ***)(*v49 + 8 * prime);
            if (v134)
            {
              v135 = *v134;
              if (*v134)
              {
                if (v133.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v138 = v135[1];
                    if (v138 == v131)
                    {
                      if (*((_BYTE *)v135 + 36))
                      {
                        if (*(_QWORD *)((char *)v135 + 20) == (_QWORD)v285
                          && *(_QWORD *)((char *)v135 + 28) == *((_QWORD *)&v285 + 1))
                        {
                          goto LABEL_289;
                        }
                      }
                    }
                    else if ((v138 & (v132 - 1)) != prime)
                    {
                      goto LABEL_223;
                    }
                    v135 = (_QWORD *)*v135;
                    if (!v135)
                      goto LABEL_223;
                  }
                }
                do
                {
                  v136 = v135[1];
                  if (v136 == v131)
                  {
                    if (*((_BYTE *)v135 + 36))
                    {
                      if (*(_QWORD *)((char *)v135 + 20) == (_QWORD)v285
                        && *(_QWORD *)((char *)v135 + 28) == *((_QWORD *)&v285 + 1))
                      {
                        goto LABEL_289;
                      }
                    }
                  }
                  else
                  {
                    if (v136 >= v132)
                      v136 %= v132;
                    if (v136 != prime)
                      break;
                  }
                  v135 = (_QWORD *)*v135;
                }
                while (v135);
              }
            }
          }
LABEL_223:
          v135 = operator new(0x30uLL);
          *v135 = 0;
          v135[1] = v131;
          *((_BYTE *)v135 + 16) = v284[0];
          *(_OWORD *)((char *)v135 + 20) = v285;
          *((_BYTE *)v135 + 36) = 1;
          v135[5] = 0;
          v140 = (float)(unint64_t)(*(_QWORD *)(v25 + 6512) + 1);
          v141 = *(float *)(v25 + 6520);
          if ((((float)(v141 * (float)v132) >= v140) & ~(v132 == 0)) != 0)
          {
LABEL_279:
            v164 = (_QWORD *)*v49;
            v165 = *(_QWORD **)(*v49 + 8 * prime);
            if (v165)
            {
              *v135 = *v165;
            }
            else
            {
              *v135 = *(_QWORD *)(v25 + 6504);
              *(_QWORD *)(v25 + 6504) = v135;
              v164[prime] = v25 + 6504;
              if (!*v135)
              {
LABEL_288:
                ++*(_QWORD *)(v25 + 6512);
LABEL_289:
                v135[5] = v51;
                v167 = *(_QWORD *)(v25 + 6536);
                if (v167)
                {
                  v168 = (uint8x8_t)vcnt_s8((int8x8_t)v167);
                  v168.i16[0] = vaddlv_u8(v168);
                  if (v168.u32[0] > 1uLL)
                  {
                    v131 = v51;
                    if (v51 >= v167)
                      v131 = v51 % v167;
                  }
                  else
                  {
                    v131 = (v167 - 1) & v51;
                  }
                  v169 = *(void ***)(*(_QWORD *)(v25 + 6528) + 8 * v131);
                  if (v169)
                  {
                    v170 = *v169;
                    if (*v169)
                    {
                      if (v168.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          v172 = v170[1];
                          if (v172 == v51)
                          {
                            if (v170[2] == v51)
                              goto LABEL_375;
                          }
                          else if ((v172 & (v167 - 1)) != v131)
                          {
                            goto LABEL_309;
                          }
                          v170 = (_QWORD *)*v170;
                          if (!v170)
                            goto LABEL_309;
                        }
                      }
                      do
                      {
                        v171 = v170[1];
                        if (v171 == v51)
                        {
                          if (v170[2] == v51)
                            goto LABEL_375;
                        }
                        else
                        {
                          if (v171 >= v167)
                            v171 %= v167;
                          if (v171 != v131)
                            break;
                        }
                        v170 = (_QWORD *)*v170;
                      }
                      while (v170);
                    }
                  }
                }
LABEL_309:
                v170 = operator new(0x30uLL);
                *v170 = 0;
                v170[1] = v51;
                v170[2] = v51;
                v170[3] = 0;
                v170[4] = 0;
                v170[5] = 0;
                v173 = (float)(unint64_t)(*(_QWORD *)(v25 + 6552) + 1);
                v174 = *(float *)(v25 + 6560);
                if ((((float)(v174 * (float)v167) >= v173) & ~(v167 == 0)) != 0)
                {
LABEL_365:
                  v199 = *(_QWORD *)(v25 + 6528);
                  v200 = *(_QWORD **)(v199 + 8 * v131);
                  if (v200)
                  {
                    *v170 = *v200;
                  }
                  else
                  {
                    *v170 = *(_QWORD *)(v25 + 6544);
                    *(_QWORD *)(v25 + 6544) = v170;
                    *(_QWORD *)(v199 + 8 * v131) = v25 + 6544;
                    if (!*v170)
                    {
LABEL_374:
                      ++*(_QWORD *)(v25 + 6552);
LABEL_375:
                      *((_BYTE *)v170 + 24) = v284[0];
                      if (*((unsigned __int8 *)v170 + 44) == v286)
                      {
                        if (*((_BYTE *)v170 + 44))
                        {
                          *(_QWORD *)((char *)v170 + 28) = v122;
                          *(_QWORD *)((char *)v170 + 36) = v126;
                        }
                      }
                      else if (*((_BYTE *)v170 + 44))
                      {
                        *((_BYTE *)v170 + 44) = 0;
                      }
                      else
                      {
                        *(_OWORD *)((char *)v170 + 28) = v285;
                        *((_BYTE *)v170 + 44) = 1;
                      }
                      v202 = *(_QWORD *)(v25 + 6376);
                      v291 = (uint64_t (**)())v51;
                      v203 = *(_DWORD *)(v202 + 8 * v51);
                      v204 = *(_QWORD *)(v25 + 6400);
                      v205 = (_QWORD *)operator new();
                      v206 = (_QWORD *)ggl::BufferData::BufferData((uint64_t)v205, qword_1EE54A408, 2, 0, 6, 1);
                      v206[25] = ggl::DaVinci::StyleColor::reflection(void)::reflection;
                      *v206 = &off_1E42B9AD0;
                      v207 = *(_QWORD *)(v25 + 6456);
                      if (v207)
                      {
                        v208 = (uint8x8_t)vcnt_s8((int8x8_t)v207);
                        v208.i16[0] = vaddlv_u8(v208);
                        if (v208.u32[0] > 1uLL)
                        {
                          prime = v51;
                          if (v51 >= v207)
                            prime = v51 % v207;
                        }
                        else
                        {
                          prime = (v207 - 1) & v51;
                        }
                        v209 = *(_QWORD ***)(*(_QWORD *)(v25 + 6448) + 8 * prime);
                        if (v209)
                        {
                          v210 = *v209;
                          if (*v209)
                          {
                            if (v208.u32[0] < 2uLL)
                            {
                              while (1)
                              {
                                v212 = v210[1];
                                if (v212 == v51)
                                {
                                  if (v210[2] == v51)
                                    goto LABEL_467;
                                }
                                else if ((v212 & (v207 - 1)) != prime)
                                {
                                  goto LABEL_401;
                                }
                                v210 = (_QWORD *)*v210;
                                if (!v210)
                                  goto LABEL_401;
                              }
                            }
                            do
                            {
                              v211 = v210[1];
                              if (v211 == v51)
                              {
                                if (v210[2] == v51)
                                  goto LABEL_467;
                              }
                              else
                              {
                                if (v211 >= v207)
                                  v211 %= v207;
                                if (v211 != prime)
                                  break;
                              }
                              v210 = (_QWORD *)*v210;
                            }
                            while (v210);
                          }
                        }
                      }
LABEL_401:
                      v210 = operator new(0x20uLL);
                      *v210 = 0;
                      v210[1] = v51;
                      v210[2] = v51;
                      v210[3] = 0;
                      v213 = (float)(unint64_t)(*(_QWORD *)(v25 + 6472) + 1);
                      v214 = (_QWORD *)(v25 + 6464);
                      v215 = *(float *)(v25 + 6480);
                      if ((((float)(v215 * (float)v207) >= v213) & ~(v207 == 0)) != 0)
                      {
LABEL_457:
                        v239 = *(_QWORD *)(v25 + 6448);
                        v240 = *(_QWORD **)(v239 + 8 * prime);
                        if (v240)
                        {
                          *v210 = *v240;
                        }
                        else
                        {
                          *v210 = *v214;
                          *v214 = v210;
                          *(_QWORD *)(v239 + 8 * prime) = v214;
                          if (!*v210)
                            goto LABEL_466;
                          v241 = *(_QWORD *)(*v210 + 8);
                          if ((v207 & (v207 - 1)) != 0)
                          {
                            if (v241 >= v207)
                              v241 %= v207;
                          }
                          else
                          {
                            v241 &= v207 - 1;
                          }
                          v240 = (_QWORD *)(*(_QWORD *)(v25 + 6448) + 8 * v241);
                        }
                        *v240 = v210;
LABEL_466:
                        ++*(_QWORD *)(v25 + 6472);
LABEL_467:
                        v242 = v210[3];
                        v210[3] = v205;
                        if (v242)
                          (*(void (**)(uint64_t))(*(_QWORD *)v242 + 8))(v242);
                        v243 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>> const&>,std::tuple<>>(v25 + 6272, (unint64_t)v291, &v291);
                        ++v243[3];
                        *(_QWORD *)(v204 + 24 * v203) = v205;
                        v244 = v205[1];
                        v245 = (_WORD *)v205[9];
                        __asm
                        {
                          FCVT            H0, S8
                          FCVT            H1, S9
                          FCVT            H2, S10
                          FCVT            H3, S11
                        }
                        *v245 = _H0;
                        v245[1] = _H1;
                        v245[2] = _H2;
                        v245[3] = _H3;
                        if (v205[8] > v244)
                          v244 = v205[8];
                        v205[7] = 0;
                        v205[8] = v244;
                        goto LABEL_472;
                      }
                      v216 = (v207 & (v207 - 1)) != 0;
                      if (v207 < 3)
                        v216 = 1;
                      v217 = v216 | (2 * v207);
                      v218 = vcvtps_u32_f32(v213 / v215);
                      if (v217 <= v218)
                        v219 = v218;
                      else
                        v219 = v217;
                      if (v219 == 1)
                      {
                        v219 = 2;
                      }
                      else if ((v219 & (v219 - 1)) != 0)
                      {
                        v219 = std::__next_prime(v219);
                        v207 = *(_QWORD *)(v25 + 6456);
                      }
                      if (v219 <= v207)
                      {
                        if (v219 >= v207)
                          goto LABEL_452;
                        v231 = vcvtps_u32_f32((float)*(unint64_t *)(v25 + 6472) / *(float *)(v25 + 6480));
                        if (v207 < 3
                          || (v232 = (uint8x8_t)vcnt_s8((int8x8_t)v207),
                              v232.i16[0] = vaddlv_u8(v232),
                              v232.u32[0] > 1uLL))
                        {
                          v231 = std::__next_prime(v231);
                        }
                        else
                        {
                          v233 = 1 << -(char)__clz(v231 - 1);
                          if (v231 >= 2)
                            v231 = v233;
                        }
                        if (v219 <= v231)
                          v219 = v231;
                        if (v219 >= v207)
                          goto LABEL_452;
                        if (!v219)
                        {
                          v238 = *(void **)(v25 + 6448);
                          *(_QWORD *)(v25 + 6448) = 0;
                          if (v238)
                            operator delete(v238);
                          *(_QWORD *)(v25 + 6456) = 0;
                          goto LABEL_452;
                        }
                      }
                      if (v219 >> 61)
                        goto LABEL_501;
                      v220 = operator new(8 * v219);
                      v221 = *(void **)(v25 + 6448);
                      *(_QWORD *)(v25 + 6448) = v220;
                      if (v221)
                        operator delete(v221);
                      v222 = 0;
                      *(_QWORD *)(v25 + 6456) = v219;
                      do
                        *(_QWORD *)(*(_QWORD *)(v25 + 6448) + 8 * v222++) = 0;
                      while (v219 != v222);
                      v223 = (_QWORD *)*v214;
                      if (!*v214)
                        goto LABEL_452;
                      v224 = v223[1];
                      v225 = v219 - 1;
                      if ((v219 & (v219 - 1)) == 0)
                      {
                        v226 = v224 & v225;
                        *(_QWORD *)(*(_QWORD *)(v25 + 6448) + 8 * v226) = v214;
                        while (1)
                        {
                          v227 = (_QWORD *)*v223;
                          if (!*v223)
                            break;
                          v228 = v227[1] & v225;
                          if (v228 == v226)
                          {
                            v223 = (_QWORD *)*v223;
                          }
                          else
                          {
                            v229 = *(_QWORD *)(v25 + 6448);
                            if (*(_QWORD *)(v229 + 8 * v228))
                            {
                              *v223 = *v227;
                              v230 = 8 * v228;
                              *v227 = **(_QWORD **)(*(_QWORD *)(v25 + 6448) + v230);
                              **(_QWORD **)(*(_QWORD *)(v25 + 6448) + v230) = v227;
                            }
                            else
                            {
                              *(_QWORD *)(v229 + 8 * v228) = v223;
                              v223 = v227;
                              v226 = v228;
                            }
                          }
                        }
LABEL_452:
                        v207 = *(_QWORD *)(v25 + 6456);
                        if ((v207 & (v207 - 1)) != 0)
                        {
                          if (v51 >= v207)
                            prime = v51 % v207;
                          else
                            prime = v51;
                        }
                        else
                        {
                          prime = (v207 - 1) & v51;
                        }
                        goto LABEL_457;
                      }
                      if (v224 >= v219)
                        v224 %= v219;
                      *(_QWORD *)(*(_QWORD *)(v25 + 6448) + 8 * v224) = v214;
                      v234 = (_QWORD *)*v223;
                      if (!*v223)
                        goto LABEL_452;
                      while (1)
                      {
                        v236 = v234[1];
                        if (v236 >= v219)
                          v236 %= v219;
                        if (v236 != v224)
                        {
                          v237 = *(_QWORD *)(v25 + 6448);
                          if (!*(_QWORD *)(v237 + 8 * v236))
                          {
                            *(_QWORD *)(v237 + 8 * v236) = v223;
                            goto LABEL_438;
                          }
                          *v223 = *v234;
                          v235 = 8 * v236;
                          *v234 = **(_QWORD **)(*(_QWORD *)(v25 + 6448) + v235);
                          **(_QWORD **)(*(_QWORD *)(v25 + 6448) + v235) = v234;
                          v234 = v223;
                        }
                        v236 = v224;
LABEL_438:
                        v223 = v234;
                        v234 = (_QWORD *)*v234;
                        v224 = v236;
                        if (!v234)
                          goto LABEL_452;
                      }
                    }
                    v201 = *(_QWORD *)(*v170 + 8);
                    if ((v167 & (v167 - 1)) != 0)
                    {
                      if (v201 >= v167)
                        v201 %= v167;
                    }
                    else
                    {
                      v201 &= v167 - 1;
                    }
                    v200 = (_QWORD *)(*(_QWORD *)(v25 + 6528) + 8 * v201);
                  }
                  *v200 = v170;
                  goto LABEL_374;
                }
                v175 = (v167 & (v167 - 1)) != 0;
                if (v167 < 3)
                  v175 = 1;
                v176 = v175 | (2 * v167);
                v177 = vcvtps_u32_f32(v173 / v174);
                if (v176 <= v177)
                  v178 = v177;
                else
                  v178 = v176;
                if (v178 == 1)
                {
                  v178 = 2;
                }
                else if ((v178 & (v178 - 1)) != 0)
                {
                  v178 = std::__next_prime(v178);
                  v167 = *(_QWORD *)(v25 + 6536);
                }
                if (v178 <= v167)
                {
                  if (v178 >= v167)
                    goto LABEL_360;
                  v191 = vcvtps_u32_f32((float)*(unint64_t *)(v25 + 6552) / *(float *)(v25 + 6560));
                  if (v167 < 3
                    || (v192 = (uint8x8_t)vcnt_s8((int8x8_t)v167), v192.i16[0] = vaddlv_u8(v192), v192.u32[0] > 1uLL))
                  {
                    v191 = std::__next_prime(v191);
                  }
                  else
                  {
                    v193 = 1 << -(char)__clz(v191 - 1);
                    if (v191 >= 2)
                      v191 = v193;
                  }
                  if (v178 <= v191)
                    v178 = v191;
                  if (v178 >= v167)
                    goto LABEL_360;
                  if (!v178)
                  {
                    v198 = *(void **)(v25 + 6528);
                    *(_QWORD *)(v25 + 6528) = 0;
                    if (v198)
                      operator delete(v198);
                    *(_QWORD *)(v25 + 6536) = 0;
                    goto LABEL_360;
                  }
                }
                if (v178 >> 61)
                  goto LABEL_501;
                v179 = operator new(8 * v178);
                v180 = *(void **)(v25 + 6528);
                *(_QWORD *)(v25 + 6528) = v179;
                if (v180)
                  operator delete(v180);
                v181 = 0;
                *(_QWORD *)(v25 + 6536) = v178;
                do
                  *(_QWORD *)(*(_QWORD *)(v25 + 6528) + 8 * v181++) = 0;
                while (v178 != v181);
                v182 = *(_QWORD **)(v25 + 6544);
                if (!v182)
                  goto LABEL_360;
                v183 = v25 + 6544;
                v184 = v182[1];
                v185 = v178 - 1;
                if ((v178 & (v178 - 1)) == 0)
                {
                  v186 = v184 & v185;
                  *(_QWORD *)(*(_QWORD *)(v25 + 6528) + 8 * v186) = v183;
                  while (1)
                  {
                    v187 = (_QWORD *)*v182;
                    if (!*v182)
                      break;
                    v188 = v187[1] & v185;
                    if (v188 == v186)
                    {
                      v182 = (_QWORD *)*v182;
                    }
                    else
                    {
                      v189 = *(_QWORD *)(v25 + 6528);
                      if (*(_QWORD *)(v189 + 8 * v188))
                      {
                        *v182 = *v187;
                        v190 = 8 * v188;
                        *v187 = **(_QWORD **)(*(_QWORD *)(v25 + 6528) + v190);
                        **(_QWORD **)(*(_QWORD *)(v25 + 6528) + v190) = v187;
                      }
                      else
                      {
                        *(_QWORD *)(v189 + 8 * v188) = v182;
                        v182 = v187;
                        v186 = v188;
                      }
                    }
                  }
LABEL_360:
                  v167 = *(_QWORD *)(v25 + 6536);
                  if ((v167 & (v167 - 1)) != 0)
                  {
                    if (v51 >= v167)
                      v131 = v51 % v167;
                    else
                      v131 = v51;
                  }
                  else
                  {
                    v131 = (v167 - 1) & v51;
                  }
                  goto LABEL_365;
                }
                if (v184 >= v178)
                  v184 %= v178;
                *(_QWORD *)(*(_QWORD *)(v25 + 6528) + 8 * v184) = v183;
                v194 = (_QWORD *)*v182;
                if (!*v182)
                  goto LABEL_360;
                while (1)
                {
                  v196 = v194[1];
                  if (v196 >= v178)
                    v196 %= v178;
                  if (v196 != v184)
                  {
                    v197 = *(_QWORD *)(v25 + 6528);
                    if (!*(_QWORD *)(v197 + 8 * v196))
                    {
                      *(_QWORD *)(v197 + 8 * v196) = v182;
                      goto LABEL_346;
                    }
                    *v182 = *v194;
                    v195 = 8 * v196;
                    *v194 = **(_QWORD **)(*(_QWORD *)(v25 + 6528) + v195);
                    **(_QWORD **)(*(_QWORD *)(v25 + 6528) + v195) = v194;
                    v194 = v182;
                  }
                  v196 = v184;
LABEL_346:
                  v182 = v194;
                  v194 = (_QWORD *)*v194;
                  v184 = v196;
                  if (!v194)
                    goto LABEL_360;
                }
              }
              v166 = *(_QWORD *)(*v135 + 8);
              if ((v132 & (v132 - 1)) != 0)
              {
                if (v166 >= v132)
                  v166 %= v132;
              }
              else
              {
                v166 &= v132 - 1;
              }
              v165 = (_QWORD *)(*v49 + 8 * v166);
            }
            *v165 = v135;
            goto LABEL_288;
          }
          v142 = (v132 & (v132 - 1)) != 0;
          if (v132 < 3)
            v142 = 1;
          v143 = v142 | (2 * v132);
          v144 = vcvtps_u32_f32(v140 / v141);
          if (v143 <= v144)
            v145 = v144;
          else
            v145 = v143;
          if (v145 == 1)
          {
            v145 = 2;
          }
          else if ((v145 & (v145 - 1)) != 0)
          {
            v145 = std::__next_prime(v145);
            v132 = *(_QWORD *)(v25 + 6496);
          }
          if (v145 <= v132)
          {
            if (v145 >= v132)
              goto LABEL_274;
            v157 = vcvtps_u32_f32((float)*(unint64_t *)(v25 + 6512) / *(float *)(v25 + 6520));
            if (v132 < 3
              || (v158 = (uint8x8_t)vcnt_s8((int8x8_t)v132), v158.i16[0] = vaddlv_u8(v158), v158.u32[0] > 1uLL))
            {
              v157 = std::__next_prime(v157);
            }
            else
            {
              v159 = 1 << -(char)__clz(v157 - 1);
              if (v157 >= 2)
                v157 = v159;
            }
            if (v145 <= v157)
              v145 = v157;
            if (v145 >= v132)
              goto LABEL_274;
            if (!v145)
            {
              v163 = (_QWORD *)*v49;
              *v49 = 0;
              if (v163)
                operator delete(v163);
              *(_QWORD *)(v25 + 6496) = 0;
              goto LABEL_274;
            }
          }
          if (v145 >> 61)
            goto LABEL_501;
          v146 = operator new(8 * v145);
          v147 = (_QWORD *)*v49;
          *v49 = v146;
          if (v147)
            operator delete(v147);
          v148 = 0;
          *(_QWORD *)(v25 + 6496) = v145;
          do
            *(_QWORD *)(*v49 + 8 * v148++) = 0;
          while (v145 != v148);
          v149 = *(_QWORD **)(v25 + 6504);
          if (!v149)
            goto LABEL_274;
          v150 = v25 + 6504;
          v151 = v149[1];
          v152 = v145 - 1;
          if ((v145 & (v145 - 1)) == 0)
          {
            v153 = v151 & v152;
            *(_QWORD *)(*v49 + 8 * v153) = v150;
            while (1)
            {
              v154 = (_QWORD *)*v149;
              if (!*v149)
                break;
              v155 = v154[1] & v152;
              if (v155 == v153)
              {
                v149 = (_QWORD *)*v149;
              }
              else if (*(_QWORD *)(*v49 + 8 * v155))
              {
                *v149 = *v154;
                v156 = 8 * v155;
                *v154 = **(_QWORD **)(*v49 + v156);
                **(_QWORD **)(*v49 + v156) = v154;
              }
              else
              {
                *(_QWORD *)(*v49 + 8 * v155) = v149;
                v149 = v154;
                v153 = v155;
              }
            }
LABEL_274:
            v132 = *(_QWORD *)(v25 + 6496);
            if ((v132 & (v132 - 1)) != 0)
            {
              if (v131 >= v132)
                prime = v131 % v132;
              else
                prime = v131;
            }
            else
            {
              prime = (v132 - 1) & v131;
            }
            goto LABEL_279;
          }
          if (v151 >= v145)
            v151 %= v145;
          *(_QWORD *)(*v49 + 8 * v151) = v150;
          v160 = (_QWORD *)*v149;
          if (!*v149)
            goto LABEL_274;
          while (1)
          {
            v162 = v160[1];
            if (v162 >= v145)
              v162 %= v145;
            if (v162 != v151)
            {
              if (!*(_QWORD *)(*v49 + 8 * v162))
              {
                *(_QWORD *)(*v49 + 8 * v162) = v149;
                goto LABEL_260;
              }
              *v149 = *v160;
              v161 = 8 * v162;
              *v160 = **(_QWORD **)(*v49 + v161);
              **(_QWORD **)(*v49 + v161) = v160;
              v160 = v149;
            }
            v162 = v151;
LABEL_260:
            v149 = v160;
            v160 = (_QWORD *)*v160;
            v151 = v162;
            if (!v160)
              goto LABEL_274;
          }
        }
        v121 = *(_QWORD *)(*(_QWORD *)v110 + 8);
        if ((v104 & (v104 - 1)) != 0)
        {
          if (v121 >= v104)
            v121 %= v104;
        }
        else
        {
          v121 &= v104 - 1;
        }
        v120 = (_QWORD *)(*v103 + 8 * v121);
      }
      *v120 = v110;
      goto LABEL_182;
    }
LABEL_472:
    v2 = v277;
    v253 = *(_QWORD **)(v277 + 8);
    v11 = v275;
    v254 = *v275;
    v288 = &off_1E4281490;
    *(_QWORD *)&v289 = v51;
    *((_QWORD *)&v289 + 1) = v254;
    v290 = &v288;
    v293 = &v291;
    v291 = &off_1E4281490;
    v292 = v289;
    v294 = 0;
    ecs2::Runtime::queueCommand(v253, (uint64_t)&v291);
    if (v294 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v294])(&v287, &v291);
    v294 = -1;
    result = (uint64_t)v290;
    v6 = v276;
    if (v290 == &v288)
    {
      result = (uint64_t)&v288;
      v256 = 4;
    }
    else
    {
      if (!v290)
        goto LABEL_479;
      v256 = 5;
    }
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v256))();
LABEL_479:
    v257 = v283;
    v10 = *(unint64_t **)(v280 + 32);
    if (++v283 != v10)
    {
      v258 = v281[4];
      v259 = (v281[5] - v258) >> 3;
      v260 = v257 + 2;
      while (1)
      {
        v261 = *((unsigned int *)v260 - 1);
        v262 = v261 >> 7;
        if (v261 >> 7 < v259)
        {
          v263 = *(_QWORD *)(v258 + 8 * v262);
          if (v263)
          {
            v264 = *(unsigned __int16 *)(v263 + 2 * (v261 & 0x7F));
            v265 = v281[7];
            result = v281[8];
            if (v264 < (result - v265) >> 3)
            {
              v266 = v265 + 8 * v264;
              if (v266 != result && *(_DWORD *)(v266 + 4) == (_DWORD)v261)
              {
                v268 = v282[4];
                result = v282[5] - v268;
                if (v262 < result >> 3)
                {
                  v269 = *(_QWORD *)(v268 + 8 * v262);
                  if (v269)
                  {
                    v270 = *(unsigned __int16 *)(v269 + 2 * (v261 & 0x7F));
                    v272 = v282[7];
                    v271 = v282[8];
                    result = v271 - v272;
                    if (v270 < (v271 - v272) >> 3)
                    {
                      v273 = v272 + 8 * v270;
                      if (v273 != v271 && *(_DWORD *)(v273 + 4) == (_DWORD)v261)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v283 = v260;
        _ZF = v260++ == v10;
        if (_ZF)
          goto LABEL_9;
      }
      v10 = v260 - 1;
    }
LABEL_9:
    ;
  }
  while (v279 != v10);
LABEL_500:
  *v11 = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
  return result;
}

void sub_19F6D48CC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[3];
  v1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::ColorDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xA3F884E4E2541296;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xA3F884E4E2541296;
      if (*(_QWORD *)&v3 <= 0xA3F884E4E2541296)
        v5 = 0xA3F884E4E2541296 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xA3F884E4E2541296;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xA3F884E4E2541296)
            {
              if (v7[2] == 0xA3F884E4E2541296)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xA3F884E4E2541296)
          {
            if (v7[2] == 0xA3F884E4E2541296)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::ColorDataHandle]";
  *(_QWORD *)(v11 + 24) = 23;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271928;
  *(_QWORD *)(v11 + 8) = 0xA3F884E4E2541296;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xA3F884E4E2541296, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xA3F884E4E2541296;
  v15[1] = "md::ls::ColorDataHandle]";
  v15[2] = 23;
  gdc::Registry::_registerStorageDataSignals(a1, 0xA3F884E4E2541296, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6D4B18(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::ColorDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ColorDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ColorDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ColorDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateColorRampGradientResources>(md::ita::UpdateColorRampGradientResources &&)::{lambda(void)#2},std::allocator<md::ita::UpdateColorRampGradientResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateColorRampGradientResources>(md::ita::UpdateColorRampGradientResources &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateColorRampGradientResources>(md::ita::UpdateColorRampGradientResources &&)::{lambda(void)#2},std::allocator<md::ita::UpdateColorRampGradientResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateColorRampGradientResources>(md::ita::UpdateColorRampGradientResources &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287988;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateColorRampGradientResources>(md::ita::UpdateColorRampGradientResources &&)::{lambda(void)#2},std::allocator<md::ita::UpdateColorRampGradientResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateColorRampGradientResources>(md::ita::UpdateColorRampGradientResources &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287988;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateColorRampGradientResources>(md::ita::UpdateColorRampGradientResources &&)::{lambda(void)#2},std::allocator<md::ita::UpdateColorRampGradientResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateColorRampGradientResources>(md::ita::UpdateColorRampGradientResources &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateColorRampGradientResources>(md::ita::UpdateColorRampGradientResources &&)::{lambda(void)#1},std::allocator<md::ita::UpdateColorRampGradientResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateColorRampGradientResources>(md::ita::UpdateColorRampGradientResources &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateColorRampGradientResources>(md::ita::UpdateColorRampGradientResources &&)::{lambda(void)#1},std::allocator<md::ita::UpdateColorRampGradientResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateColorRampGradientResources>(md::ita::UpdateColorRampGradientResources &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42879D0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateColorRampGradientResources>(md::ita::UpdateColorRampGradientResources &&)::{lambda(void)#1},std::allocator<md::ita::UpdateColorRampGradientResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateColorRampGradientResources>(md::ita::UpdateColorRampGradientResources &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42879D0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateColorRampGradientResources>(md::ita::UpdateColorRampGradientResources &&)::{lambda(void)#1},std::allocator<md::ita::UpdateColorRampGradientResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateColorRampGradientResources>(md::ita::UpdateColorRampGradientResources &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xD68EA0DE832DEC03;
  v2[1] = "md::ls::RenderItemID]";
  *(_QWORD *)&result = 20;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4210;
  v2[4] = "md::ls::ColorRampDataHandle]";
  v2[5] = 27;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateColorRampGradientResources>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateColorRampGradientResources>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateColorRampGradientResources>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateColorRampGradientResources>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278568;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateColorRampGradientResources>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateColorRampGradientResources>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278568;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateColorRampGradientResources>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateColorRampGradientResources>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t (***v35)();
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t (***v40)();
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t (***v45)();
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69[4];
  unint64_t *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t *v74;
  char v75;
  uint64_t (**v76)();
  __int128 v77;
  uint64_t (***v78)();
  uint64_t (**v79)();
  __int128 v80;
  uint64_t (***v81)();
  int v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::RenderItemID>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::ColorRampDataHandle>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v71, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v69, v9, v4, v6, *(_QWORD *)(v9 + 32));
  if (v70 != v74)
  {
    v11 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      *v11 = *v10;
      v12 = *v10;
      v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (v14 = *(_QWORD *)(v13 + 8 * (v12 >> 39))) != 0
        && (v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            v17 = v6[7],
            v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (v20 = *(_DWORD *)(v19 + 4) == (_DWORD)v18)
          : (v20 = 0),
            v20))
      {
        v21 = (unint64_t *)(v6[10] + 8 * v15);
      }
      else
      {
        v21 = (unint64_t *)v6[11];
      }
      v22 = **(_QWORD **)(a1 + 8);
      v23 = *(_QWORD **)v22;
      v24 = *(_QWORD **)(v22 + 8);
      if (v23 != v24)
      {
        while (*v23 != 0x41D4E9297E100630)
        {
          v23 += 5;
          if (v23 == v24)
            goto LABEL_30;
        }
      }
      if (v23 == v24)
      {
LABEL_30:
        v25 = 0;
      }
      else
      {
        v25 = v23[3];
        v26 = (std::__shared_weak_count *)v23[4];
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldxr(p_shared_owners);
          while (__stxr(v28 + 1, p_shared_owners));
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
      }
      result = md::VKMRenderResourcesStore::getColorRampData(v25, *v21);
      v31 = result;
      if (!result || !*(_BYTE *)(result + 32))
        goto LABEL_76;
      v32 = *(_QWORD *)result;
      v33 = *(_QWORD **)(a1 + 8);
      v34 = *v11;
      if (*(_QWORD *)v31)
      {
        v76 = &off_1E42807E8;
        *(_QWORD *)&v77 = v32;
        *((_QWORD *)&v77 + 1) = v34;
        v78 = &v76;
        v81 = &v79;
        v79 = &off_1E42807E8;
        v80 = v77;
        v82 = 0;
      }
      else
      {
        v76 = &off_1E4282840;
        *(_QWORD *)&v77 = v34;
        v78 = &v76;
        v79 = &off_1E4282840;
        v81 = &v79;
        *(_QWORD *)&v80 = v34;
        v82 = 1;
      }
      ecs2::Runtime::queueCommand(v33, (uint64_t)&v79);
      if (v82 != -1)
        ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v82])(&v75, &v79);
      v82 = -1;
      v35 = v78;
      if (v78 == &v76)
      {
        v35 = &v76;
        v36 = 4;
      }
      else
      {
        if (!v78)
          goto LABEL_43;
        v36 = 5;
      }
      (*v35)[v36]();
LABEL_43:
      if (!*(_BYTE *)(v31 + 32))
        goto LABEL_99;
      v37 = *(_QWORD *)(v31 + 8);
      v38 = *(_QWORD **)(a1 + 8);
      v39 = *v11;
      if (v37)
      {
        v76 = &off_1E4280830;
        *(_QWORD *)&v77 = v37;
        *((_QWORD *)&v77 + 1) = v39;
        v78 = &v76;
        v81 = &v79;
        v79 = &off_1E4280830;
        v80 = v77;
        v82 = 0;
      }
      else
      {
        v76 = &off_1E4282888;
        *(_QWORD *)&v77 = v39;
        v78 = &v76;
        v79 = &off_1E4282888;
        v81 = &v79;
        *(_QWORD *)&v80 = v39;
        v82 = 1;
      }
      ecs2::Runtime::queueCommand(v38, (uint64_t)&v79);
      if (v82 != -1)
        ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v82])(&v75, &v79);
      v82 = -1;
      v40 = v78;
      if (v78 == &v76)
      {
        v40 = &v76;
        v41 = 4;
      }
      else
      {
        if (!v78)
          goto LABEL_54;
        v41 = 5;
      }
      (*v40)[v41]();
LABEL_54:
      if (!*(_BYTE *)(v31 + 32))
        goto LABEL_99;
      v42 = *(_QWORD *)(v31 + 16);
      v43 = *(_QWORD **)(a1 + 8);
      v44 = *v11;
      if (v42)
      {
        v76 = &off_1E427F318;
        *(_QWORD *)&v77 = v42;
        *((_QWORD *)&v77 + 1) = v44;
        v78 = &v76;
        v81 = &v79;
        v79 = &off_1E427F318;
        v80 = v77;
        v82 = 0;
      }
      else
      {
        v76 = &off_1E4282720;
        *(_QWORD *)&v77 = v44;
        v78 = &v76;
        v79 = &off_1E4282720;
        v81 = &v79;
        *(_QWORD *)&v80 = v44;
        v82 = 1;
      }
      ecs2::Runtime::queueCommand(v43, (uint64_t)&v79);
      if (v82 != -1)
        ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v82])(&v75, &v79);
      v82 = -1;
      v45 = v78;
      if (v78 == &v76)
      {
        v45 = &v76;
        v46 = 4;
      }
      else
      {
        if (!v78)
          goto LABEL_65;
        v46 = 5;
      }
      (*v45)[v46]();
LABEL_65:
      if (!*(_BYTE *)(v31 + 32))
      {
LABEL_99:
        std::__throw_bad_optional_access[abi:nn180100]();
        __break(1u);
      }
      v47 = *(_QWORD *)(v31 + 24);
      v48 = *(_QWORD **)(a1 + 8);
      v49 = *v11;
      if (v47)
      {
        v76 = &off_1E427F360;
        *(_QWORD *)&v77 = v47;
        *((_QWORD *)&v77 + 1) = v49;
        v78 = &v76;
        v81 = &v79;
        v79 = &off_1E427F360;
        v80 = v77;
        v82 = 0;
      }
      else
      {
        v76 = &off_1E4282768;
        *(_QWORD *)&v77 = v49;
        v78 = &v76;
        v79 = &off_1E4282768;
        v81 = &v79;
        *(_QWORD *)&v80 = v49;
        v82 = 1;
      }
      ecs2::Runtime::queueCommand(v48, (uint64_t)&v79);
      if (v82 != -1)
        ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v82])(&v75, &v79);
      v82 = -1;
      result = (uint64_t)v78;
      if (v78 == &v76)
      {
        result = (uint64_t)&v76;
        v50 = 4;
        goto LABEL_75;
      }
      if (v78)
      {
        v50 = 5;
LABEL_75:
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v50))();
      }
LABEL_76:
      v51 = v74;
      v10 = *(unint64_t **)(v71 + 32);
      if (++v74 != v10)
      {
        v52 = v72[4];
        v53 = (v72[5] - v52) >> 3;
        v54 = v51 + 2;
        while (1)
        {
          v55 = *((unsigned int *)v54 - 1);
          v56 = v55 >> 7;
          if (v55 >> 7 < v53)
          {
            v57 = *(_QWORD *)(v52 + 8 * v56);
            if (v57)
            {
              v58 = *(unsigned __int16 *)(v57 + 2 * (v55 & 0x7F));
              v59 = v72[7];
              result = v72[8];
              if (v58 < (result - v59) >> 3)
              {
                v60 = v59 + 8 * v58;
                if (v60 != result && *(_DWORD *)(v60 + 4) == (_DWORD)v55)
                {
                  v62 = v73[4];
                  result = v73[5] - v62;
                  if (v56 < result >> 3)
                  {
                    v63 = *(_QWORD *)(v62 + 8 * v56);
                    if (v63)
                    {
                      v64 = *(unsigned __int16 *)(v63 + 2 * (v55 & 0x7F));
                      v66 = v73[7];
                      v65 = v73[8];
                      result = v65 - v66;
                      if (v64 < (v65 - v66) >> 3)
                      {
                        v67 = v66 + 8 * v64;
                        if (v67 != v65 && *(_DWORD *)(v67 + 4) == (_DWORD)v55)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v74 = v54;
          v20 = v54++ == v10;
          if (v20)
            goto LABEL_9;
        }
        v10 = v54 - 1;
      }
LABEL_9:
      if (v70 == v10)
        goto LABEL_98;
    }
  }
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v11 = (uint64_t *)result;
LABEL_98:
  *v11 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::ColorRampDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xE103B5C60804137ELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xE103B5C60804137ELL;
      if (*(_QWORD *)&v3 <= 0xE103B5C60804137ELL)
        v5 = 0xE103B5C60804137ELL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xE103B5C60804137ELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xE103B5C60804137ELL)
            {
              if (v7[2] == 0xE103B5C60804137ELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xE103B5C60804137ELL)
          {
            if (v7[2] == 0xE103B5C60804137ELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::ColorRampDataHandle]";
  *(_QWORD *)(v11 + 24) = 27;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272288;
  *(_QWORD *)(v11 + 8) = 0xE103B5C60804137ELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xE103B5C60804137ELL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xE103B5C60804137ELL;
  v15[1] = "md::ls::ColorRampDataHandle]";
  v15[2] = 27;
  gdc::Registry::_registerStorageDataSignals(a1, 0xE103B5C60804137ELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6D56A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::ColorRampDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ColorRampDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ColorRampDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ColorRampDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DecidePipelineForMainPass>(md::ita::DecidePipelineForMainPass &&)::{lambda(void)#2},std::allocator<md::ita::DecidePipelineForMainPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DecidePipelineForMainPass>(md::ita::DecidePipelineForMainPass &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DecidePipelineForMainPass>(md::ita::DecidePipelineForMainPass &&)::{lambda(void)#2},std::allocator<md::ita::DecidePipelineForMainPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DecidePipelineForMainPass>(md::ita::DecidePipelineForMainPass &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285738;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DecidePipelineForMainPass>(md::ita::DecidePipelineForMainPass &&)::{lambda(void)#2},std::allocator<md::ita::DecidePipelineForMainPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DecidePipelineForMainPass>(md::ita::DecidePipelineForMainPass &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285738;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DecidePipelineForMainPass>(md::ita::DecidePipelineForMainPass &&)::{lambda(void)#2},std::allocator<md::ita::DecidePipelineForMainPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DecidePipelineForMainPass>(md::ita::DecidePipelineForMainPass &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls22RequiredPipelinePoolIDEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6D58CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls22RequiredPipelinePoolIDEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;

  v3 = a1[1];
  v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
    v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (_QWORD)v5) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[24 * v6];
    *(_QWORD *)v11 = 0xE54E641F7C1F9B89;
    *((_QWORD *)v11 + 1) = "md::ls::RequiredPipelinePoolID]";
    *((_QWORD *)v11 + 2) = 30;
    v4 = v11 + 24;
    if (v3 != v5)
    {
      do
      {
        v12 = *(_OWORD *)(v3 - 24);
        *((_QWORD *)v11 - 1) = *((_QWORD *)v3 - 1);
        *(_OWORD *)(v11 - 24) = v12;
        v11 -= 24;
        v3 -= 24;
      }
      while (v3 != v5);
      v3 = *a1;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = &v10[24 * v9];
    if (v3)
      operator delete(v3);
  }
  else
  {
    *(_QWORD *)v3 = 0xE54E641F7C1F9B89;
    *((_QWORD *)v3 + 1) = "md::ls::RequiredPipelinePoolID]";
    *((_QWORD *)v3 + 2) = 30;
    v4 = v3 + 24;
  }
  a1[1] = v4;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DecidePipelineForMainPass>(md::ita::DecidePipelineForMainPass &&)::{lambda(void)#1},std::allocator<md::ita::DecidePipelineForMainPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DecidePipelineForMainPass>(md::ita::DecidePipelineForMainPass &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DecidePipelineForMainPass>(md::ita::DecidePipelineForMainPass &&)::{lambda(void)#1},std::allocator<md::ita::DecidePipelineForMainPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DecidePipelineForMainPass>(md::ita::DecidePipelineForMainPass &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285780;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DecidePipelineForMainPass>(md::ita::DecidePipelineForMainPass &&)::{lambda(void)#1},std::allocator<md::ita::DecidePipelineForMainPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DecidePipelineForMainPass>(md::ita::DecidePipelineForMainPass &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285780;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DecidePipelineForMainPass>(md::ita::DecidePipelineForMainPass &&)::{lambda(void)#1},std::allocator<md::ita::DecidePipelineForMainPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DecidePipelineForMainPass>(md::ita::DecidePipelineForMainPass &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x90uLL);
  a1[2] = (char *)(v2 + 18);
  *v2 = 0xDB4F0ABC43345F6ALL;
  v2[1] = "md::ls::MainPassItem]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB4220;
  v2[4] = "md::ls::IsDecal]";
  v2[5] = 15;
  v2[6] = 0xE1A4D8CDA8432F0;
  v2[7] = "md::ls::IsS2]";
  v2[8] = 12;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 18)
  {
    *(_QWORD *)v3 = 0x237F9D3BCC905318;
    v2[10] = "md::ls::IsMercator]";
    v2[11] = 18;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_56;
  if (0x5555555555555556 * (((char *)(v2 + 18) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 18) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 18) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_57;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x237F9D3BCC905318;
  *((_QWORD *)v10 + 1) = "md::ls::IsMercator]";
  *((_QWORD *)v10 + 2) = 18;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0x69465F3BE0BF85FBLL;
    *((_QWORD *)v4 + 1) = "md::ls::FlyoverInstance]";
    *((_QWORD *)v4 + 2) = 23;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_56;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_57;
    v20 = (char *)operator new(24 * v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0x69465F3BE0BF85FBLL;
  *((_QWORD *)v21 + 1) = "md::ls::FlyoverInstance]";
  *((_QWORD *)v21 + 2) = 23;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
  v24 = (unint64_t)a1[2];
  if ((unint64_t)v14 < v24)
  {
    *(_QWORD *)v14 = 0xD49B968135FE1A73;
    *((_QWORD *)v14 + 1) = "md::ls::TextureHandleForType<Flyover::NightTexture>]";
    *((_QWORD *)v14 + 2) = 51;
    v25 = v14 + 24;
    goto LABEL_55;
  }
  v26 = *a1;
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3);
  v28 = v27 + 1;
  if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_56:
    abort();
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x555555555555555)
    v30 = 0xAAAAAAAAAAAAAAALL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 <= 0xAAAAAAAAAAAAAAALL)
    {
      v31 = (char *)operator new(24 * v30);
      goto LABEL_49;
    }
LABEL_57:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v31 = 0;
LABEL_49:
  v32 = &v31[24 * v27];
  v33 = &v31[24 * v30];
  *(_QWORD *)v32 = 0xD49B968135FE1A73;
  *((_QWORD *)v32 + 1) = "md::ls::TextureHandleForType<Flyover::NightTexture>]";
  *((_QWORD *)v32 + 2) = 51;
  v25 = v32 + 24;
  if (v14 == v26)
  {
    *a1 = v32;
    a1[1] = v25;
    a1[2] = v33;
LABEL_54:
    operator delete(v14);
    goto LABEL_55;
  }
  do
  {
    v34 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v32 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v32 - 24) = v34;
    v32 -= 24;
    v14 -= 24;
  }
  while (v14 != v26);
  v14 = *a1;
  *a1 = v32;
  a1[1] = v25;
  a1[2] = v33;
  if (v14)
    goto LABEL_54;
LABEL_55:
  a1[1] = v25;
}

void sub_19F6D5ECC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::DecidePipelineForMainPass>,std::allocator<ecs2::ForwardToExecute<md::ita::DecidePipelineForMainPass>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::DecidePipelineForMainPass>,std::allocator<ecs2::ForwardToExecute<md::ita::DecidePipelineForMainPass>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277440;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::DecidePipelineForMainPass>,std::allocator<ecs2::ForwardToExecute<md::ita::DecidePipelineForMainPass>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277440;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::DecidePipelineForMainPass>,std::allocator<ecs2::ForwardToExecute<md::ita::DecidePipelineForMainPass>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *result;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  BOOL v75;
  char v76;
  BOOL v77;
  unint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98[4];
  unint64_t *v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  unint64_t *v103;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::MainPassItem>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::IsDecal>(v3);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::IsS2>(v3);
  v7 = (_QWORD *)gdc::Registry::storage<md::ls::IsMercator>(v3);
  v8 = (_QWORD *)gdc::Registry::storage<md::ls::FlyoverInstance>(v3);
  v9 = (_QWORD *)gdc::Registry::storage<md::ls::TextureHandleForType<Flyover::NightTexture>>(v3);
  v10 = (_QWORD *)gdc::Registry::storage<md::ls::RequiredPipelinePoolID>(v3);
  v11 = v10;
  v12 = v10 + 4;
  if (v4[8] - v4[7] >= v10[8] - v10[7])
    v13 = (uint64_t)(v10 + 4);
  else
    v13 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v100, v13, v10, v4, *(_QWORD *)(v13 + 24));
  if (v4[8] - v4[7] >= v11[8] - v11[7])
    v14 = (uint64_t)v12;
  else
    v14 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v98, v14, v11, v4, *(_QWORD *)(v14 + 32));
  if (v99 != v103)
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      *result = *v16;
      v17 = *v16;
      v18 = HIDWORD(*v16);
      v19 = *v16 >> 39;
      v20 = v11[4];
      if (v19 < (v11[5] - v20) >> 3
        && (v21 = *(_QWORD *)(v20 + 8 * v19)) != 0
        && (v22 = *(unsigned __int16 *)(v21 + 2 * (HIDWORD(v17) & 0x7F)),
            v24 = v11[7],
            v23 = v11[8],
            v22 < (v23 - v24) >> 3)
        && ((v25 = v24 + 8 * v22, v25 != v23) ? (v26 = *(_DWORD *)(v25 + 4) == (_DWORD)v18) : (v26 = 0), v26))
      {
        v27 = (char *)v11[11];
        v28 = (char *)(v11[10] + v22);
      }
      else
      {
        v27 = (char *)v11[11];
        v28 = v27;
      }
      if (v28 == v27)
        v28 = 0;
      v29 = v5[4];
      if (v19 < (v5[5] - v29) >> 3
        && (v30 = *(_QWORD *)(v29 + 8 * v19)) != 0
        && (v31 = *(unsigned __int16 *)(v30 + 2 * (HIDWORD(v17) & 0x7F)),
            v32 = v5[7],
            v33 = v5[8],
            v31 < (v33 - v32) >> 3)
        && ((v34 = v32 + 8 * v31, v34 != v33) ? (v35 = *(_DWORD *)(v34 + 4) == (_DWORD)v18) : (v35 = 0), v35))
      {
        v36 = v5[11];
        v37 = v5[10] + v31;
      }
      else
      {
        v36 = v5[11];
        v37 = v36;
      }
      v38 = v6[4];
      if (v19 < (v6[5] - v38) >> 3
        && (v39 = *(_QWORD *)(v38 + 8 * v19)) != 0
        && (v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v17) & 0x7F)),
            v42 = v6[7],
            v41 = v6[8],
            v40 < (v41 - v42) >> 3)
        && ((v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == (_DWORD)v18) : (v44 = 0), v44))
      {
        v45 = v6[11];
        v46 = v6[10] + v40;
      }
      else
      {
        v45 = v6[11];
        v46 = v45;
      }
      v47 = v7[4];
      if (v19 < (v7[5] - v47) >> 3
        && (v48 = *(_QWORD *)(v47 + 8 * v19)) != 0
        && (v49 = *(unsigned __int16 *)(v48 + 2 * (HIDWORD(v17) & 0x7F)),
            v51 = v7[7],
            v50 = v7[8],
            v49 < (v50 - v51) >> 3)
        && ((v52 = v51 + 8 * v49, v52 != v50) ? (v53 = *(_DWORD *)(v52 + 4) == (_DWORD)v18) : (v53 = 0), v53))
      {
        v54 = v7[11];
        v55 = v7[10] + v49;
      }
      else
      {
        v54 = v7[11];
        v55 = v54;
      }
      v56 = v8[4];
      if (v19 < (v8[5] - v56) >> 3
        && (v57 = *(_QWORD *)(v56 + 8 * v19)) != 0
        && (v58 = *(unsigned __int16 *)(v57 + 2 * (HIDWORD(v17) & 0x7F)),
            v60 = v8[7],
            v59 = v8[8],
            v58 < (v59 - v60) >> 3)
        && ((v61 = v60 + 8 * v58, v61 != v59) ? (v62 = *(_DWORD *)(v61 + 4) == (_DWORD)v18) : (v62 = 0), v62))
      {
        v63 = v8[11];
        v64 = v8[10] + v58;
      }
      else
      {
        v63 = v8[11];
        v64 = v63;
      }
      v65 = v9[4];
      if (v19 < (v9[5] - v65) >> 3
        && (v66 = *(_QWORD *)(v65 + 8 * v19)) != 0
        && (v67 = *(unsigned __int16 *)(v66 + 2 * (HIDWORD(v17) & 0x7F)),
            v68 = v9[7],
            v69 = v9[8],
            v67 < (v69 - v68) >> 3)
        && ((v70 = v68 + 8 * v67, v70 != v69) ? (v71 = *(_DWORD *)(v70 + 4) == (_DWORD)v18) : (v71 = 0), v71))
      {
        v72 = v9[11];
        v73 = v9[10] + 8 * v67;
        if (v37 == v36)
        {
LABEL_68:
          if (v64 == v63 || !v64)
          {
            v74 = v55 == v54 || v55 == 0;
          }
          else
          {
            v75 = v73 == v72 || v73 == 0;
            if (v75)
              v74 = 8;
            else
              v74 = 10;
            if (v75)
              v76 = 9;
            else
              v76 = 11;
            if (v46)
              v77 = v46 == v45;
            else
              v77 = 1;
            if (!v77)
              v74 = v76;
          }
          goto LABEL_90;
        }
      }
      else
      {
        v72 = v9[11];
        v73 = v72;
        if (v37 == v36)
          goto LABEL_68;
      }
      if (!v37)
        goto LABEL_68;
      v74 = 5;
LABEL_90:
      *v28 = v74;
      v79 = v103;
      v16 = *(unint64_t **)(v100 + 32);
      if (++v103 != v16)
      {
        v80 = v101[4];
        v81 = (v101[5] - v80) >> 3;
        v82 = v79 + 2;
        while (1)
        {
          v83 = *((unsigned int *)v82 - 1);
          v84 = v83 >> 7;
          if (v83 >> 7 < v81)
          {
            v85 = *(_QWORD *)(v80 + 8 * v84);
            if (v85)
            {
              v86 = *(unsigned __int16 *)(v85 + 2 * (v83 & 0x7F));
              v88 = v101[7];
              v87 = v101[8];
              if (v86 < (v87 - v88) >> 3)
              {
                v89 = v88 + 8 * v86;
                if (v89 != v87 && *(_DWORD *)(v89 + 4) == (_DWORD)v83)
                {
                  v91 = v102[4];
                  if (v84 < (v102[5] - v91) >> 3)
                  {
                    v92 = *(_QWORD *)(v91 + 8 * v84);
                    if (v92)
                    {
                      v93 = *(unsigned __int16 *)(v92 + 2 * (v83 & 0x7F));
                      v95 = v102[7];
                      v94 = v102[8];
                      if (v93 < (v94 - v95) >> 3)
                      {
                        v96 = v95 + 8 * v93;
                        if (v96 != v94 && *(_DWORD *)(v96 + 4) == (_DWORD)v83)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v103 = v82;
          v26 = v82++ == v16;
          if (v26)
            goto LABEL_9;
        }
        v16 = v82 - 1;
      }
LABEL_9:
      if (v99 == v16)
        goto LABEL_111;
    }
  }
  result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_111:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::MainPassItem>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xDB4F0ABC43345F6ALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xDB4F0ABC43345F6ALL;
      if (*(_QWORD *)&v3 <= 0xDB4F0ABC43345F6ALL)
        v5 = 0xDB4F0ABC43345F6ALL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xDB4F0ABC43345F6ALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xDB4F0ABC43345F6ALL)
            {
              if (v7[2] == 0xDB4F0ABC43345F6ALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xDB4F0ABC43345F6ALL)
          {
            if (v7[2] == 0xDB4F0ABC43345F6ALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::MainPassItem]";
  *(_QWORD *)(v11 + 24) = 20;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271268;
  *(_QWORD *)(v11 + 8) = 0xDB4F0ABC43345F6ALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xDB4F0ABC43345F6ALL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xDB4F0ABC43345F6ALL;
  v15[1] = "md::ls::MainPassItem]";
  v15[2] = 20;
  gdc::Registry::_registerStorageDataSignals(a1, 0xDB4F0ABC43345F6ALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6D6608(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::IsDecal>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x76B9BA390004E44ELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x76B9BA390004E44ELL;
      if (*(_QWORD *)&v3 <= 0x76B9BA390004E44EuLL)
        v5 = 0x76B9BA390004E44EuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x76B9BA390004E44ELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x76B9BA390004E44ELL)
            {
              if (v7[2] == 0x76B9BA390004E44ELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x76B9BA390004E44ELL)
          {
            if (v7[2] == 0x76B9BA390004E44ELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::IsDecal]";
  *(_QWORD *)(v11 + 24) = 15;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42743E8;
  *(_QWORD *)(v11 + 8) = 0x76B9BA390004E44ELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x76B9BA390004E44EuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x76B9BA390004E44ELL;
  v15[1] = "md::ls::IsDecal]";
  v15[2] = 15;
  gdc::Registry::_registerStorageDataSignals(a1, 0x76B9BA390004E44ELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6D6830(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::IsS2>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0xE1A4D8CDA8432F0;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xE1A4D8CDA8432F0;
      if (*(_QWORD *)&v3 <= 0xE1A4D8CDA8432F0uLL)
        v5 = 0xE1A4D8CDA8432F0uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xE1A4D8CDA8432F0;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xE1A4D8CDA8432F0)
            {
              if (v7[2] == 0xE1A4D8CDA8432F0)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xE1A4D8CDA8432F0)
          {
            if (v7[2] == 0xE1A4D8CDA8432F0)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::IsS2]";
  *(_QWORD *)(v11 + 24) = 12;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4274358;
  *(_QWORD *)(v11 + 8) = 0xE1A4D8CDA8432F0;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xE1A4D8CDA8432F0uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xE1A4D8CDA8432F0;
  v15[1] = "md::ls::IsS2]";
  v15[2] = 12;
  gdc::Registry::_registerStorageDataSignals(a1, 0xE1A4D8CDA8432F0, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6D6A58(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::IsMercator>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x237F9D3BCC905318;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x237F9D3BCC905318;
      if (*(_QWORD *)&v3 <= 0x237F9D3BCC905318uLL)
        v5 = 0x237F9D3BCC905318uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x237F9D3BCC905318;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x237F9D3BCC905318)
            {
              if (v7[2] == 0x237F9D3BCC905318)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x237F9D3BCC905318)
          {
            if (v7[2] == 0x237F9D3BCC905318)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::IsMercator]";
  *(_QWORD *)(v11 + 24) = 18;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270F08;
  *(_QWORD *)(v11 + 8) = 0x237F9D3BCC905318;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x237F9D3BCC905318uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x237F9D3BCC905318;
  v15[1] = "md::ls::IsMercator]";
  v15[2] = 18;
  gdc::Registry::_registerStorageDataSignals(a1, 0x237F9D3BCC905318, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6D6C80(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::IsMercator>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsMercator>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IsMercator>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsMercator>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::IsS2>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsS2>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_BYTE *)(v14 + v7) = *(_BYTE *)--a1[11];
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IsS2>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsS2>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::IsDecal>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsDecal>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IsDecal>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsDecal>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::MainPassItem>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MainPassItem>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MainPassItem>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MainPassItem>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelineStates>(md::ita::CreatePipelineStates &&)::{lambda(void)#2},std::allocator<md::ita::CreatePipelineStates &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelineStates>(md::ita::CreatePipelineStates &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelineStates>(md::ita::CreatePipelineStates &&)::{lambda(void)#2},std::allocator<md::ita::CreatePipelineStates &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelineStates>(md::ita::CreatePipelineStates &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283D58;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelineStates>(md::ita::CreatePipelineStates &&)::{lambda(void)#2},std::allocator<md::ita::CreatePipelineStates &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelineStates>(md::ita::CreatePipelineStates &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283D58;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelineStates>(md::ita::CreatePipelineStates &&)::{lambda(void)#2},std::allocator<md::ita::CreatePipelineStates &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelineStates>(md::ita::CreatePipelineStates &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelineStates>(md::ita::CreatePipelineStates &&)::{lambda(void)#1},std::allocator<md::ita::CreatePipelineStates &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelineStates>(md::ita::CreatePipelineStates &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelineStates>(md::ita::CreatePipelineStates &&)::{lambda(void)#1},std::allocator<md::ita::CreatePipelineStates &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelineStates>(md::ita::CreatePipelineStates &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283DA0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelineStates>(md::ita::CreatePipelineStates &&)::{lambda(void)#1},std::allocator<md::ita::CreatePipelineStates &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelineStates>(md::ita::CreatePipelineStates &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283DA0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelineStates>(md::ita::CreatePipelineStates &&)::{lambda(void)#1},std::allocator<md::ita::CreatePipelineStates &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelineStates>(md::ita::CreatePipelineStates &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x60uLL);
  a1[2] = (char *)(v2 + 12);
  *v2 = 0xC62D89929260CB56;
  v2[1] = "md::ls::FunctionConstants]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB4230;
  v2[4] = "md::ls::RequiredPipelinePoolID]";
  v2[5] = 30;
  v2[6] = 0x7087983DEF28DBFELL;
  v2[7] = "md::ls::IsOpaque]";
  v2[8] = 16;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 12)
  {
    *(_QWORD *)v3 = 0x73F0259EC1934FB1;
    v2[10] = "md::ls::IsTransparent]";
    v2[11] = 21;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 12) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x73F0259EC1934FB1;
  *((_QWORD *)v10 + 1) = "md::ls::IsTransparent]";
  *((_QWORD *)v10 + 2) = 21;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
}

void sub_19F6D74D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CreatePipelineStates>,std::allocator<ecs2::ForwardToExecute<md::ita::CreatePipelineStates>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CreatePipelineStates>,std::allocator<ecs2::ForwardToExecute<md::ita::CreatePipelineStates>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276750;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreatePipelineStates>,std::allocator<ecs2::ForwardToExecute<md::ita::CreatePipelineStates>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276750;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreatePipelineStates>,std::allocator<ecs2::ForwardToExecute<md::ita::CreatePipelineStates>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t (**v20)();
  uint64_t *v21;
  uint64_t **v22;
  uint64_t (***v23)();
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275148;
  v4[1] = a2;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E4275118;
  v5[1] = a2;
  v19 = 0;
  v6 = **v3;
  v7 = *(_QWORD **)v6;
  v8 = *(_QWORD **)(v6 + 8);
  if (v7 != v8)
  {
    while (*v7 != 0x41D4E9297E100630)
    {
      v7 += 5;
      if (v7 == v8)
        goto LABEL_12;
    }
  }
  if (v7 == v8)
  {
LABEL_12:
    v10 = 0;
  }
  else
  {
    v10 = v7[3];
    v9 = (std::__shared_weak_count *)v7[4];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v19 = v10;
  v20 = &off_1E427B5C8;
  v21 = &v19;
  v22 = v3;
  v23 = &v20;
  (*(void (**)(_QWORD *, uint64_t (***)()))(*v4 + 16))(v4, &v20);
  v14 = v23;
  if (v23 == &v20)
  {
    v15 = 4;
    v14 = &v20;
  }
  else
  {
    if (!v23)
      goto LABEL_18;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_18:
  v20 = &off_1E427B610;
  v21 = &v19;
  v22 = v3;
  v23 = &v20;
  (*(void (**)(_QWORD *, uint64_t (***)()))(*v5 + 16))(v5, &v20);
  v16 = v23;
  if (v23 == &v20)
  {
    v17 = 4;
    v16 = &v20;
    goto LABEL_22;
  }
  if (v23)
  {
    v17 = 5;
LABEL_22:
    (*v16)[v17]();
  }
  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F6D7788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a13;
  if (a13 == v15)
  {
    v18 = 4;
    v17 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL4 isValid;
  uint64_t (**v17)(_QWORD);
  uint64_t (*v18)(_QWORD);
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v82;
  _QWORD v83[5];
  _QWORD *v84;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::RequiredPipelinePoolID>(v3);
  v6 = gdc::Registry::storage<md::ls::IsTransparent>(v3);
  v10 = (_QWORD *)v6;
  v11 = v4 + 4;
  if (v5[8] - v5[7] < v4[8] - v4[7])
    v11 = v5 + 4;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) >= v11[4] - v11[3])
    v12 = (uint64_t)v11;
  else
    v12 = v6 + 32;
  v83[0] = v12;
  v83[1] = v4;
  v83[2] = v5;
  v83[3] = v6;
  v14 = *(_QWORD **)(v12 + 24);
  v13 = *(_QWORD **)(v12 + 32);
  v84 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v83))
  {
    v15 = v14 + 1;
    do
    {
      v14 = v15;
      v84 = v15;
      if (v15 == v13)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v83);
      v15 = v14 + 1;
    }
    while (!isValid);
  }
  v17 = &ecs2::Runtime::_localEntity;
  v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14)
    goto LABEL_82;
  v19 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v19 = *v14;
    v21 = *v14;
    v22 = HIDWORD(*v14);
    v23 = *v14 >> 39;
    v24 = v4[4];
    if (v23 >= (v4[5] - v24) >> 3)
      goto LABEL_23;
    v25 = *(_QWORD *)(v24 + 8 * v23);
    if (!v25)
      goto LABEL_23;
    v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    v28 = v4[7];
    v27 = v4[8];
    if (v26 >= (v27 - v28) >> 3)
      goto LABEL_23;
    v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == (_DWORD)v22)
    {
      v82 = 33 * v26;
      v31 = v4[11];
      v32 = v4[10] + v82;
    }
    else
    {
LABEL_23:
      v31 = v4[11];
      v32 = v31;
    }
    v33 = v32 == v31 ? 0 : v32;
    if ((v34 = v5[4], v23 < (v5[5] - v34) >> 3)
      && (v35 = *(_QWORD *)(v34 + 8 * v23)) != 0
      && (v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v5[7], v37 = v5[8], v36 < (v37 - v38) >> 3)
      && ((v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == (_DWORD)v22) : (v40 = 0), v40))
    {
      v41 = v5[11];
      v42 = v5[10] + v36;
    }
    else
    {
      v41 = v5[11];
      v42 = v41;
    }
    v43 = v42 == v41 ? 0 : v42;
    v44 = v10[4];
    if (v23 < (v10[5] - v44) >> 3)
    {
      v45 = *(_QWORD *)(v44 + 8 * v23);
      if (v45)
      {
        v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        v48 = v10[7];
        v47 = v10[8];
        if (v46 < (v47 - v48) >> 3)
        {
          v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == (_DWORD)v22)
            break;
        }
      }
    }
    v51 = v10[11];
    v52 = v51;
    v53 = *(_QWORD *)(a2 + 24);
    if (!v53)
      goto LABEL_81;
LABEL_46:
    if (v52 == v51)
      v54 = 0;
    else
      v54 = v52;
    result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v53 + 48))(v53, v33, v43, v54);
    v56 = *(_QWORD **)(v12 + 32);
    v20 = v14 + 1;
    v84 = v14 + 1;
    if (v14 + 1 != v56)
    {
      v57 = v4[4];
      v59 = v4[7];
      v58 = v4[8];
      v60 = v5[4];
      result = v5[7];
      v61 = v5[8];
      v62 = v10[4];
      v64 = v10[7];
      v63 = v10[8];
      while (1)
      {
        v65 = *((unsigned int *)v20 + 1);
        v66 = v65 >> 7;
        if (v65 >> 7 < (v4[5] - v57) >> 3)
        {
          v67 = *(_QWORD *)(v57 + 8 * v66);
          if (v67)
          {
            v68 = v65 & 0x7F;
            v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              v70 = v59 + 8 * v69;
              v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == (_DWORD)v65;
              if (v71 && v66 < (v5[5] - v60) >> 3)
              {
                v73 = *(_QWORD *)(v60 + 8 * v66);
                if (v73)
                {
                  v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    v75 = result + 8 * v74;
                    v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == (_DWORD)v65;
                    if (v76 && v66 < (v10[5] - v62) >> 3)
                    {
                      v78 = *(_QWORD *)(v62 + 8 * v66);
                      if (v78)
                      {
                        v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == (_DWORD)v65 && v80 != v63)
                            break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          v20 = v56;
          goto LABEL_14;
        }
      }
      v56 = v20;
LABEL_14:
      v84 = v20;
    }
    v14 = v56;
    if (v13 == v56)
      goto LABEL_83;
  }
  v51 = v10[11];
  v52 = v10[10] + 4 * v46;
  v53 = *(_QWORD *)(a2 + 24);
  if (v53)
    goto LABEL_46;
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  result = ((uint64_t (*)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  v19 = (_QWORD *)result;
LABEL_83:
  *v19 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 isValid;
  _QWORD v11[5];
  uint64_t v12;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::FunctionConstants>(v1);
  v3 = gdc::Registry::storage<md::ls::RequiredPipelinePoolID>(v1);
  v4 = gdc::Registry::storage<md::ls::IsTransparent>(v1);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v5 = v2;
  else
    v5 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56))
    v5 = v4;
  v11[0] = v5 + 32;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  v7 = *(_QWORD *)(v5 + 56);
  v6 = *(_QWORD *)(v5 + 64);
  v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    v8 = v7 + 8;
    do
    {
      v7 = v8;
      v12 = v8;
      if (v8 == v6)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

uint64_t gdc::Registry::storage<md::ls::IsTransparent>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x73F0259EC1934FB1;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x73F0259EC1934FB1;
      if (*(_QWORD *)&v3 <= 0x73F0259EC1934FB1uLL)
        v5 = 0x73F0259EC1934FB1uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x73F0259EC1934FB1;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x73F0259EC1934FB1)
            {
              if (v7[2] == 0x73F0259EC1934FB1)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x73F0259EC1934FB1)
          {
            if (v7[2] == 0x73F0259EC1934FB1)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::IsTransparent]";
  *(_QWORD *)(v11 + 24) = 21;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271598;
  *(_QWORD *)(v11 + 8) = 0x73F0259EC1934FB1;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x73F0259EC1934FB1uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x73F0259EC1934FB1;
  v15[1] = "md::ls::IsTransparent]";
  v15[2] = 21;
  gdc::Registry::_registerStorageDataSignals(a1, 0x73F0259EC1934FB1, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6D7E78(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::IsTransparent>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsTransparent>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IsTransparent>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsTransparent>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL4 isValid;
  uint64_t (**v17)(_QWORD);
  uint64_t (*v18)(_QWORD);
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t result;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v82;
  _QWORD v83[5];
  _QWORD *v84;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::RequiredPipelinePoolID>(v3);
  v6 = gdc::Registry::storage<md::ls::IsOpaque>(v3);
  v10 = (_QWORD *)v6;
  v11 = v4 + 4;
  if (v5[8] - v5[7] < v4[8] - v4[7])
    v11 = v5 + 4;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) >= v11[4] - v11[3])
    v12 = (uint64_t)v11;
  else
    v12 = v6 + 32;
  v83[0] = v12;
  v83[1] = v4;
  v83[2] = v5;
  v83[3] = v6;
  v14 = *(_QWORD **)(v12 + 24);
  v13 = *(_QWORD **)(v12 + 32);
  v84 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v83))
  {
    v15 = v14 + 1;
    do
    {
      v14 = v15;
      v84 = v15;
      if (v15 == v13)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v83);
      v15 = v14 + 1;
    }
    while (!isValid);
  }
  v17 = &ecs2::Runtime::_localEntity;
  v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14)
    goto LABEL_82;
  v19 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v19 = *v14;
    v21 = *v14;
    v22 = HIDWORD(*v14);
    v23 = *v14 >> 39;
    v24 = v4[4];
    if (v23 >= (v4[5] - v24) >> 3)
      goto LABEL_23;
    v25 = *(_QWORD *)(v24 + 8 * v23);
    if (!v25)
      goto LABEL_23;
    v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    v28 = v4[7];
    v27 = v4[8];
    if (v26 >= (v27 - v28) >> 3)
      goto LABEL_23;
    v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == (_DWORD)v22)
    {
      v82 = 33 * v26;
      v31 = v4[11];
      v32 = v4[10] + v82;
    }
    else
    {
LABEL_23:
      v31 = v4[11];
      v32 = v31;
    }
    v33 = v32 == v31 ? 0 : v32;
    if ((v34 = v5[4], v23 < (v5[5] - v34) >> 3)
      && (v35 = *(_QWORD *)(v34 + 8 * v23)) != 0
      && (v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v5[7], v37 = v5[8], v36 < (v37 - v38) >> 3)
      && ((v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == (_DWORD)v22) : (v40 = 0), v40))
    {
      v41 = v5[11];
      v42 = v5[10] + v36;
    }
    else
    {
      v41 = v5[11];
      v42 = v41;
    }
    v43 = v42 == v41 ? 0 : v42;
    v44 = v10[4];
    if (v23 < (v10[5] - v44) >> 3)
    {
      v45 = *(_QWORD *)(v44 + 8 * v23);
      if (v45)
      {
        v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        v48 = v10[7];
        v47 = v10[8];
        if (v46 < (v47 - v48) >> 3)
        {
          v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == (_DWORD)v22)
            break;
        }
      }
    }
    v51 = v10[11];
    v52 = v51;
    v53 = *(_QWORD *)(a2 + 24);
    if (!v53)
      goto LABEL_81;
LABEL_46:
    if (v52 == v51)
      v54 = 0;
    else
      v54 = v52;
    result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)v53 + 48))(v53, v33, v43, v54);
    v56 = *(_QWORD **)(v12 + 32);
    v20 = v14 + 1;
    v84 = v14 + 1;
    if (v14 + 1 != v56)
    {
      v57 = v4[4];
      v59 = v4[7];
      v58 = v4[8];
      v60 = v5[4];
      result = v5[7];
      v61 = v5[8];
      v62 = v10[4];
      v64 = v10[7];
      v63 = v10[8];
      while (1)
      {
        v65 = *((unsigned int *)v20 + 1);
        v66 = v65 >> 7;
        if (v65 >> 7 < (v4[5] - v57) >> 3)
        {
          v67 = *(_QWORD *)(v57 + 8 * v66);
          if (v67)
          {
            v68 = v65 & 0x7F;
            v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              v70 = v59 + 8 * v69;
              v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == (_DWORD)v65;
              if (v71 && v66 < (v5[5] - v60) >> 3)
              {
                v73 = *(_QWORD *)(v60 + 8 * v66);
                if (v73)
                {
                  v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    v75 = result + 8 * v74;
                    v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == (_DWORD)v65;
                    if (v76 && v66 < (v10[5] - v62) >> 3)
                    {
                      v78 = *(_QWORD *)(v62 + 8 * v66);
                      if (v78)
                      {
                        v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == (_DWORD)v65 && v80 != v63)
                            break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          v20 = v56;
          goto LABEL_14;
        }
      }
      v56 = v20;
LABEL_14:
      v84 = v20;
    }
    v14 = v56;
    if (v13 == v56)
      goto LABEL_83;
  }
  v51 = v10[11];
  v52 = v10[10] + v46;
  v53 = *(_QWORD *)(a2 + 24);
  if (v53)
    goto LABEL_46;
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  result = ((uint64_t (*)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  v19 = (_QWORD *)result;
LABEL_83:
  *v19 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 isValid;
  _QWORD v11[5];
  uint64_t v12;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::FunctionConstants>(v1);
  v3 = gdc::Registry::storage<md::ls::RequiredPipelinePoolID>(v1);
  v4 = gdc::Registry::storage<md::ls::IsOpaque>(v1);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v5 = v2;
  else
    v5 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56))
    v5 = v4;
  v11[0] = v5 + 32;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  v7 = *(_QWORD *)(v5 + 56);
  v6 = *(_QWORD *)(v5 + 64);
  v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    v8 = v7 + 8;
    do
    {
      v7 = v8;
      v12 = v8;
      if (v8 == v6)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

uint64_t gdc::Registry::storage<md::ls::IsOpaque>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x7087983DEF28DBFELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x7087983DEF28DBFELL;
      if (*(_QWORD *)&v3 <= 0x7087983DEF28DBFEuLL)
        v5 = 0x7087983DEF28DBFEuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x7087983DEF28DBFELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x7087983DEF28DBFELL)
            {
              if (v7[2] == 0x7087983DEF28DBFELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x7087983DEF28DBFELL)
          {
            if (v7[2] == 0x7087983DEF28DBFELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::IsOpaque]";
  *(_QWORD *)(v11 + 24) = 16;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4274418;
  *(_QWORD *)(v11 + 8) = 0x7087983DEF28DBFELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x7087983DEF28DBFEuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x7087983DEF28DBFELL;
  v15[1] = "md::ls::IsOpaque]";
  v15[2] = 16;
  gdc::Registry::_registerStorageDataSignals(a1, 0x7087983DEF28DBFELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6D868C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::IsOpaque>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsOpaque>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IsOpaque>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsOpaque>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#2},std::allocator<md::ita::DetermineDataIDsNeeded &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#2},std::allocator<md::ita::DetermineDataIDsNeeded &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42846E8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#2},std::allocator<md::ita::DetermineDataIDsNeeded &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42846E8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#2},std::allocator<md::ita::DetermineDataIDsNeeded &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#1},std::allocator<md::ita::DetermineDataIDsNeeded &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#1},std::allocator<md::ita::DetermineDataIDsNeeded &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284730;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#1},std::allocator<md::ita::DetermineDataIDsNeeded &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284730;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#1},std::allocator<md::ita::DetermineDataIDsNeeded &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls22RequiredPipelinePoolIDEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6D8900(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::DetermineDataIDsNeeded>,std::allocator<ecs2::ForwardToExecute<md::ita::DetermineDataIDsNeeded>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::DetermineDataIDsNeeded>,std::allocator<ecs2::ForwardToExecute<md::ita::DetermineDataIDsNeeded>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276C18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::DetermineDataIDsNeeded>,std::allocator<ecs2::ForwardToExecute<md::ita::DetermineDataIDsNeeded>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276C18;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::DetermineDataIDsNeeded>,std::allocator<ecs2::ForwardToExecute<md::ita::DetermineDataIDsNeeded>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  Flyover *v21;
  Flyover *v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  unsigned __int8 *v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  __int128 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *result;
  char v50;
  uint64_t (**v51)();
  __int128 v52;
  uint64_t (***v53)();
  uint64_t (**v54)();
  __int128 v55;
  uint64_t (***v56)();
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::RequiredPipelinePoolID>(*(_QWORD *)(a2 + 8));
  v4 = v3;
  v6 = (unint64_t *)v3[7];
  v5 = (uint64_t *)v3[8];
  v7 = (char *)v5 - (char *)v6;
  if (v5 != (uint64_t *)v6)
  {
    if ((v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 >= v10)
      || (v11 = *(_QWORD *)(v9 + 8 * (v8 >> 7))) == 0
      || (v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 >= v7 >> 3)
      || ((v13 = (uint64_t *)&v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == (_DWORD)v8) : (v14 = 0), !v14))
    {
      v15 = v7 >> 3;
      v16 = (uint64_t *)(v6 + 1);
      do
      {
        if (v16 == v5)
          goto LABEL_52;
        v17 = *((unsigned int *)v16 + 1);
        v18 = (uint64_t *)v3[8];
        if (v17 >> 7 < v10)
        {
          v19 = *(_QWORD *)(v9 + 8 * (v17 >> 7));
          v18 = (uint64_t *)v3[8];
          if (v19)
          {
            v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
            v18 = (uint64_t *)v3[8];
            if (v15 > v20)
            {
              v18 = (uint64_t *)&v6[v20];
              if (*((_DWORD *)v18 + 1) != (_DWORD)v17)
                v18 = (uint64_t *)v3[8];
            }
          }
        }
        ++v16;
      }
      while (v18 == v5);
      v6 = (unint64_t *)(v16 - 1);
    }
  }
  if (v5 != (uint64_t *)v6)
  {
    v21 = (Flyover *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v22 = v21;
    do
    {
      *(_QWORD *)v22 = *v6;
      v24 = *v6;
      v25 = *v6 >> 39;
      v26 = v4[4];
      if (v25 < (v4[5] - v26) >> 3
        && (v27 = *(_QWORD *)(v26 + 8 * v25)) != 0
        && (v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v24) & 0x7F)),
            v30 = v4[7],
            v29 = v4[8],
            v28 < (v29 - v30) >> 3)
        && ((v31 = HIDWORD(v24), v32 = v30 + 8 * v28, v32 != v29)
          ? (v33 = *(_DWORD *)(v32 + 4) == (_DWORD)v31)
          : (v33 = 0),
            v33))
      {
        v34 = (unsigned __int8 *)(v4[10] + v28);
      }
      else
      {
        v34 = (unsigned __int8 *)v4[11];
      }
      v35 = *v34;
      v36 = v35 >= 8;
      v37 = v35 - 8;
      if (v36)
      {
        if (v37 >= 4)
          goto LABEL_42;
        Flyover::GetDataIDs(v21);
        v38 = *(_QWORD **)(a1 + 8);
        v39 = *(_QWORD *)v22;
        v51 = &off_1E427DED8;
        v40 = &Flyover::GetDataIDs(void)::kDataIDs;
      }
      else
      {
        DaVinci::GetDataIDs(v21);
        v38 = *(_QWORD **)(a1 + 8);
        v39 = *(_QWORD *)v22;
        v51 = &off_1E427DED8;
        v40 = &DaVinci::GetDataIDs(void)::kDataIDs;
      }
      *(_QWORD *)&v52 = v40;
      *((_QWORD *)&v52 + 1) = v39;
      v53 = &v51;
      v54 = &off_1E427DED8;
      v56 = &v54;
      v55 = v52;
      v57 = 0;
      ecs2::Runtime::queueCommand(v38, (uint64_t)&v54);
      if (v57 != -1)
        ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v57])(&v50, &v54);
      v57 = -1;
      v21 = (Flyover *)v53;
      if (v53 == &v51)
      {
        v21 = (Flyover *)&v51;
        v41 = 4;
      }
      else
      {
        if (!v53)
          goto LABEL_42;
        v41 = 5;
      }
      v21 = (Flyover *)(*(uint64_t (**)(void))(*(_QWORD *)v21 + 8 * v41))();
LABEL_42:
      v42 = v4[4];
      v43 = v4[7];
      v23 = (uint64_t *)v4[8];
      v44 = (uint64_t *)(v6 + 1);
      while (v44 != v23)
      {
        v45 = *((unsigned int *)v44 + 1);
        v46 = v4[8];
        if (v45 >> 7 < (v4[5] - v42) >> 3)
        {
          v47 = *(_QWORD *)(v42 + 8 * (v45 >> 7));
          v46 = v4[8];
          if (v47)
          {
            v48 = *(unsigned __int16 *)(v47 + 2 * (v45 & 0x7F));
            v46 = v4[8];
            if (((uint64_t)v23 - v43) >> 3 > v48)
            {
              v46 = v43 + 8 * v48;
              if (*(_DWORD *)(v46 + 4) != (_DWORD)v45)
                v46 = v4[8];
            }
          }
        }
        ++v44;
        if ((uint64_t *)v46 != v23)
        {
          v23 = v44 - 1;
          break;
        }
      }
      v6 = (unint64_t *)v23;
    }
    while (v5 != v23);
  }
LABEL_52:
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelines>(md::ita::CreatePipelines &&)::{lambda(void)#2},std::allocator<md::ita::CreatePipelines &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelines>(md::ita::CreatePipelines &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelines>(md::ita::CreatePipelines &&)::{lambda(void)#2},std::allocator<md::ita::CreatePipelines &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelines>(md::ita::CreatePipelines &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4282E28;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelines>(md::ita::CreatePipelines &&)::{lambda(void)#2},std::allocator<md::ita::CreatePipelines &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelines>(md::ita::CreatePipelines &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4282E28;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelines>(md::ita::CreatePipelines &&)::{lambda(void)#2},std::allocator<md::ita::CreatePipelines &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelines>(md::ita::CreatePipelines &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelines>(md::ita::CreatePipelines &&)::{lambda(void)#1},std::allocator<md::ita::CreatePipelines &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelines>(md::ita::CreatePipelines &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelines>(md::ita::CreatePipelines &&)::{lambda(void)#1},std::allocator<md::ita::CreatePipelines &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelines>(md::ita::CreatePipelines &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4282E70;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelines>(md::ita::CreatePipelines &&)::{lambda(void)#1},std::allocator<md::ita::CreatePipelines &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelines>(md::ita::CreatePipelines &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4282E70;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelines>(md::ita::CreatePipelines &&)::{lambda(void)#1},std::allocator<md::ita::CreatePipelines &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelines>(md::ita::CreatePipelines &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xD68EA0DE832DEC03;
  v2[1] = "md::ls::RenderItemID]";
  *(_QWORD *)&result = 20;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4240;
  v2[4] = "md::ls::RequiredPipelinePoolID]";
  v2[5] = 30;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CreatePipelines>,std::allocator<ecs2::ForwardToExecute<md::ita::CreatePipelines>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CreatePipelines>,std::allocator<ecs2::ForwardToExecute<md::ita::CreatePipelines>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4275FB8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreatePipelines>,std::allocator<ecs2::ForwardToExecute<md::ita::CreatePipelines>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4275FB8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CreatePipelines>,std::allocator<ecs2::ForwardToExecute<md::ita::CreatePipelines>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  __int128 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  _QWORD *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  _QWORD *v86;
  uint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  _BYTE *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _BYTE *v103;
  _QWORD *v104;
  unint64_t v105;
  uint64_t v106;
  _OWORD *v107;
  __int128 *v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  uint64_t *v112;
  unint64_t v113;
  uint8x8_t v114;
  _QWORD *v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  float v120;
  float v121;
  _BOOL8 v122;
  unint64_t v123;
  unint64_t v124;
  size_t prime;
  unint64_t v126;
  uint8x8_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v153;
  unint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t *v177;
  __int128 *v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t *v187;
  __int128 *v188;
  uint64_t v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  __int128 *v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  __int128 *v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217[4];
  unint64_t *v218;
  uint64_t v219;
  _QWORD *v220;
  _QWORD *v221;
  unint64_t *v222;
  char v223;
  uint64_t (**v224)();
  __int128 v225;
  uint64_t (***v226)();
  uint64_t (**v227)();
  __int128 v228;
  uint64_t (***v229)();
  int v230;
  uint64_t v231;

  v2 = a1;
  v231 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::RenderItemID>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::RequiredPipelinePoolID>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v219, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v217, v9, v4, v6, *(_QWORD *)(v9 + 32));
  if (v218 != v222)
  {
    v10 = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v12 = (_QWORD *)v10;
    v215 = v6;
    v216 = v2;
    v214 = (_QWORD *)v10;
    while (1)
    {
      *v12 = *v11;
      v13 = *v11;
      v14 = v6[4];
      if (v13 >> 39 < (v6[5] - v14) >> 3
        && (v15 = *(_QWORD *)(v14 + 8 * (v13 >> 39))) != 0
        && (v16 = *(unsigned __int16 *)(v15 + 2 * (HIDWORD(v13) & 0x7F)),
            v18 = v6[7],
            v17 = v6[8],
            v16 < (v17 - v18) >> 3)
        && ((v19 = HIDWORD(v13), v20 = v18 + 8 * v16, v20 != v17)
          ? (v21 = *(_DWORD *)(v20 + 4) == (_DWORD)v19)
          : (v21 = 0),
            v21))
      {
        v22 = (unsigned __int8 *)v6[11];
        v23 = (unsigned __int8 *)(v6[10] + v16);
      }
      else
      {
        v22 = (unsigned __int8 *)v6[11];
        v23 = v22;
      }
      if (v23 == v22)
        v24 = 0;
      else
        v24 = v23;
      v25 = **(_QWORD **)(v2 + 8);
      v26 = *(_QWORD **)v25;
      v27 = *(_QWORD **)(v25 + 8);
      if (v26 != v27)
      {
        while (*v26 != 0x41D4E9297E100630)
        {
          v26 += 5;
          if (v26 == v27)
            goto LABEL_32;
        }
      }
      if (v26 == v27)
      {
LABEL_32:
        v29 = 0;
      }
      else
      {
        v29 = v26[3];
        v28 = (std::__shared_weak_count *)v26[4];
        if (v28)
        {
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          do
            v31 = __ldxr(p_shared_owners);
          while (__stxr(v31 + 1, p_shared_owners));
          do
            v32 = __ldaxr(p_shared_owners);
          while (__stlxr(v32 - 1, p_shared_owners));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
      }
      v33 = *v24;
      if (v33 < 8)
        break;
      if (v33 - 8 < 4)
      {
        Flyover::GetDataIDs((Flyover *)v10);
        v34 = &Flyover::GetDataIDs(void)::kDataIDs;
        goto LABEL_37;
      }
      v34 = 0;
      if (v33 > 0xB)
      {
LABEL_87:
        v38 = 0;
        goto LABEL_73;
      }
LABEL_38:
      switch(v33)
      {
        case 0u:
          v35 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(v29 + 10496) + 1080));
          goto LABEL_72;
        case 1u:
          v35 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(v29 + 10496) + 1096));
          goto LABEL_72;
        case 2u:
          v35 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(v29 + 10496) + 1104));
          goto LABEL_72;
        case 3u:
          v38 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(v29 + 10496) + 1112));
          v61 = *(_QWORD **)(v38 + 32);
          *v61 = 0;
          v61[1] = 0;
          v62 = *(_QWORD *)(v38 + 32);
          *(_QWORD *)(v62 + 16) = 0;
          *(_QWORD *)(v62 + 24) = 0;
          break;
        case 4u:
          v35 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(v29 + 10496) + 1120));
          goto LABEL_72;
        case 5u:
          v35 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(v29 + 10496) + 1128));
          goto LABEL_72;
        case 6u:
          v35 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(v29 + 10496) + 1432));
          goto LABEL_72;
        case 7u:
          v35 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(v29 + 10496) + 1440));
          goto LABEL_72;
        case 8u:
          v35 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(v29 + 10504) + 1120));
          goto LABEL_72;
        case 9u:
          v49 = *(_QWORD *)(*(_QWORD *)(v29 + 10504) + 1144);
          v50 = *(_QWORD *)(v49 + 8);
          if (v50 == *(_QWORD *)v49)
          {
            v156 = *(_QWORD *)(v49 + 88);
            if (!v156)
              goto LABEL_311;
            v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v156 + 48))(v156);
            v51 = *(uint64_t **)(v49 + 40);
            v157 = *(_QWORD *)(v49 + 48);
            if ((unint64_t)v51 >= v157)
            {
              v165 = *(_QWORD *)(v49 + 32);
              v166 = ((uint64_t)v51 - v165) >> 3;
              v167 = v166 + 1;
              if ((unint64_t)(v166 + 1) >> 61)
                abort();
              v168 = v157 - v165;
              if (v168 >> 2 > v167)
                v167 = v168 >> 2;
              if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFF8)
                v169 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v169 = v167;
              if (v169)
              {
                v170 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v49 + 56) + 16))(*(_QWORD *)(v49 + 56), 8 * v169, 8);
                v59 = (uint64_t *)(v170 + 8 * v166);
                v60 = v170 + 8 * v169;
                if (v170)
                  *v59 = v38;
              }
              else
              {
                v60 = 0;
                v59 = (uint64_t *)(8 * v166);
              }
              v199 = *(_QWORD *)(v49 + 32);
              v181 = *(_QWORD *)(v49 + 40);
              v200 = v181 - v199;
              if (v181 != v199)
              {
                v201 = v200 - 8;
                if ((unint64_t)(v200 - 8) < 0x38)
                {
                  v185 = v59;
                }
                else
                {
                  v185 = v59;
                  if ((unint64_t)(v181 - (_QWORD)v59) >= 0x20)
                  {
                    v202 = (v201 >> 3) + 1;
                    v203 = v59 - 2;
                    v204 = (__int128 *)(v181 - 16);
                    v205 = v202 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v206 = *v204;
                      *((_OWORD *)v203 - 1) = *(v204 - 1);
                      *(_OWORD *)v203 = v206;
                      v203 -= 4;
                      v204 -= 2;
                      v205 -= 4;
                    }
                    while (v205);
                    v185 = &v59[-(v202 & 0x3FFFFFFFFFFFFFFCLL)];
                    v181 -= 8 * (v202 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v202 == (v202 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_300:
                      v181 = *(_QWORD *)(v49 + 32);
LABEL_301:
                      v158 = v59 + 1;
                      *(_QWORD *)(v49 + 32) = v185;
                      *(_QWORD *)(v49 + 40) = v59 + 1;
                      v213 = *(_QWORD *)(v49 + 48);
                      *(_QWORD *)(v49 + 48) = v60;
                      if (v181)
                        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v49 + 56) + 40))(*(_QWORD *)(v49 + 56), v181, v213 - v181);
                      goto LABEL_303;
                    }
                  }
                }
                do
                {
                  v212 = *(_QWORD *)(v181 - 8);
                  v181 -= 8;
                  *--v185 = v212;
                }
                while (v181 != v199);
                goto LABEL_300;
              }
LABEL_284:
              v185 = v59;
              goto LABEL_301;
            }
          }
          else
          {
            v38 = *(_QWORD *)(v50 - 8);
            *(_QWORD *)(v49 + 8) = v50 - 8;
            v51 = *(uint64_t **)(v49 + 40);
            v52 = *(_QWORD *)(v49 + 48);
            if ((unint64_t)v51 >= v52)
            {
              v53 = *(_QWORD *)(v49 + 32);
              v54 = ((uint64_t)v51 - v53) >> 3;
              v55 = v54 + 1;
              if ((unint64_t)(v54 + 1) >> 61)
                abort();
              v56 = v52 - v53;
              if (v56 >> 2 > v55)
                v55 = v56 >> 2;
              if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
                v57 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v57 = v55;
              if (v57)
              {
                v58 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v49 + 56) + 16))(*(_QWORD *)(v49 + 56), 8 * v57, 8);
                v59 = (uint64_t *)(v58 + 8 * v54);
                v60 = v58 + 8 * v57;
                if (v58)
                  *v59 = v38;
              }
              else
              {
                v60 = 0;
                v59 = (uint64_t *)(8 * v54);
              }
              v182 = *(_QWORD *)(v49 + 32);
              v181 = *(_QWORD *)(v49 + 40);
              v183 = v181 - v182;
              if (v181 != v182)
              {
                v184 = v183 - 8;
                if ((unint64_t)(v183 - 8) < 0x38)
                {
                  v185 = v59;
                }
                else
                {
                  v185 = v59;
                  if ((unint64_t)(v181 - (_QWORD)v59) >= 0x20)
                  {
                    v186 = (v184 >> 3) + 1;
                    v187 = v59 - 2;
                    v188 = (__int128 *)(v181 - 16);
                    v189 = v186 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v190 = *v188;
                      *((_OWORD *)v187 - 1) = *(v188 - 1);
                      *(_OWORD *)v187 = v190;
                      v187 -= 4;
                      v188 -= 2;
                      v189 -= 4;
                    }
                    while (v189);
                    v185 = &v59[-(v186 & 0x3FFFFFFFFFFFFFFCLL)];
                    v181 -= 8 * (v186 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v186 == (v186 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_300;
                  }
                }
                do
                {
                  v208 = *(_QWORD *)(v181 - 8);
                  v181 -= 8;
                  *--v185 = v208;
                }
                while (v181 != v182);
                goto LABEL_300;
              }
              goto LABEL_284;
            }
          }
          if (v51)
            *v51 = v38;
          v158 = v51 + 1;
LABEL_303:
          *(_QWORD *)(v49 + 40) = v158;
          v227 = (uint64_t (**)())v38;
          v211 = *(_QWORD *)(v49 + 120);
          if (!v211)
          {
LABEL_311:
            std::__throw_bad_function_call[abi:nn180100]();
            __break(1u);
            return;
          }
          goto LABEL_297;
        case 0xAu:
          v35 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(v29 + 10504) + 1168));
LABEL_72:
          v38 = v35;
          break;
        case 0xBu:
          v36 = *(_QWORD *)(*(_QWORD *)(v29 + 10504) + 1192);
          v37 = *(_QWORD *)(v36 + 8);
          if (v37 == *(_QWORD *)v36)
          {
            v153 = *(_QWORD *)(v36 + 88);
            if (!v153)
              goto LABEL_311;
            v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v153 + 48))(v153);
            v39 = *(uint64_t **)(v36 + 40);
            v154 = *(_QWORD *)(v36 + 48);
            if ((unint64_t)v39 >= v154)
            {
              v159 = *(_QWORD *)(v36 + 32);
              v160 = ((uint64_t)v39 - v159) >> 3;
              v161 = v160 + 1;
              if ((unint64_t)(v160 + 1) >> 61)
                abort();
              v162 = v154 - v159;
              if (v162 >> 2 > v161)
                v161 = v162 >> 2;
              if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFF8)
                v163 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v163 = v161;
              if (v163)
              {
                v164 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v36 + 56) + 16))(*(_QWORD *)(v36 + 56), 8 * v163, 8);
                v47 = (uint64_t *)(v164 + 8 * v160);
                v48 = v164 + 8 * v163;
                if (v164)
                  *v47 = v38;
              }
              else
              {
                v48 = 0;
                v47 = (uint64_t *)(8 * v160);
              }
              v191 = *(_QWORD *)(v36 + 32);
              v171 = *(_QWORD *)(v36 + 40);
              v192 = v171 - v191;
              if (v171 != v191)
              {
                v193 = v192 - 8;
                if ((unint64_t)(v192 - 8) < 0x38)
                {
                  v175 = v47;
                }
                else
                {
                  v175 = v47;
                  if ((unint64_t)(v171 - (_QWORD)v47) >= 0x20)
                  {
                    v194 = (v193 >> 3) + 1;
                    v195 = v47 - 2;
                    v196 = (__int128 *)(v171 - 16);
                    v197 = v194 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v198 = *v196;
                      *((_OWORD *)v195 - 1) = *(v196 - 1);
                      *(_OWORD *)v195 = v198;
                      v195 -= 4;
                      v196 -= 2;
                      v197 -= 4;
                    }
                    while (v197);
                    v175 = &v47[-(v194 & 0x3FFFFFFFFFFFFFFCLL)];
                    v171 -= 8 * (v194 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v194 == (v194 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_293:
                      v171 = *(_QWORD *)(v36 + 32);
LABEL_294:
                      v155 = v47 + 1;
                      *(_QWORD *)(v36 + 32) = v175;
                      *(_QWORD *)(v36 + 40) = v47 + 1;
                      v210 = *(_QWORD *)(v36 + 48);
                      *(_QWORD *)(v36 + 48) = v48;
                      if (v171)
                        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v36 + 56) + 40))(*(_QWORD *)(v36 + 56), v171, v210 - v171);
                      goto LABEL_296;
                    }
                  }
                }
                do
                {
                  v209 = *(_QWORD *)(v171 - 8);
                  v171 -= 8;
                  *--v175 = v209;
                }
                while (v171 != v191);
                goto LABEL_293;
              }
LABEL_275:
              v175 = v47;
              goto LABEL_294;
            }
          }
          else
          {
            v38 = *(_QWORD *)(v37 - 8);
            *(_QWORD *)(v36 + 8) = v37 - 8;
            v39 = *(uint64_t **)(v36 + 40);
            v40 = *(_QWORD *)(v36 + 48);
            if ((unint64_t)v39 >= v40)
            {
              v41 = *(_QWORD *)(v36 + 32);
              v42 = ((uint64_t)v39 - v41) >> 3;
              v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 61)
                abort();
              v44 = v40 - v41;
              if (v44 >> 2 > v43)
                v43 = v44 >> 2;
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
                v45 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v45 = v43;
              if (v45)
              {
                v46 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v36 + 56) + 16))(*(_QWORD *)(v36 + 56), 8 * v45, 8);
                v47 = (uint64_t *)(v46 + 8 * v42);
                v48 = v46 + 8 * v45;
                if (v46)
                  *v47 = v38;
              }
              else
              {
                v48 = 0;
                v47 = (uint64_t *)(8 * v42);
              }
              v172 = *(_QWORD *)(v36 + 32);
              v171 = *(_QWORD *)(v36 + 40);
              v173 = v171 - v172;
              if (v171 != v172)
              {
                v174 = v173 - 8;
                if ((unint64_t)(v173 - 8) < 0x38)
                {
                  v175 = v47;
                }
                else
                {
                  v175 = v47;
                  if ((unint64_t)(v171 - (_QWORD)v47) >= 0x20)
                  {
                    v176 = (v174 >> 3) + 1;
                    v177 = v47 - 2;
                    v178 = (__int128 *)(v171 - 16);
                    v179 = v176 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v180 = *v178;
                      *((_OWORD *)v177 - 1) = *(v178 - 1);
                      *(_OWORD *)v177 = v180;
                      v177 -= 4;
                      v178 -= 2;
                      v179 -= 4;
                    }
                    while (v179);
                    v175 = &v47[-(v176 & 0x3FFFFFFFFFFFFFFCLL)];
                    v171 -= 8 * (v176 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v176 == (v176 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_293;
                  }
                }
                do
                {
                  v207 = *(_QWORD *)(v171 - 8);
                  v171 -= 8;
                  *--v175 = v207;
                }
                while (v171 != v172);
                goto LABEL_293;
              }
              goto LABEL_275;
            }
          }
          if (v39)
            *v39 = v38;
          v155 = v39 + 1;
LABEL_296:
          *(_QWORD *)(v36 + 40) = v155;
          v227 = (uint64_t (**)())v38;
          v211 = *(_QWORD *)(v36 + 120);
          if (!v211)
            goto LABEL_311;
LABEL_297:
          (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v211 + 48))(v211, &v227);
          break;
        default:
          goto LABEL_87;
      }
LABEL_73:
      ggl::PipelineSetup::resetData(v38);
      v63 = *(_QWORD *)(v29 + 384);
      if (*(_QWORD *)(v29 + 376) == v63)
      {
        v66 = ((*(_QWORD *)(v29 + 432) - *(_QWORD *)(v29 + 424)) >> 4) | 0x100000000;
        v68 = *(uint64_t **)(v29 + 408);
        v67 = *(_QWORD *)(v29 + 416);
        if ((unint64_t)v68 >= v67)
        {
          v70 = *(char **)(v29 + 400);
          v71 = ((char *)v68 - v70) >> 3;
          v72 = v71 + 1;
          if ((unint64_t)(v71 + 1) >> 61)
            abort();
          v73 = v67 - (_QWORD)v70;
          if (v73 >> 2 > v72)
            v72 = v73 >> 2;
          if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
            v74 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v74 = v72;
          if (v74)
          {
            if (v74 >> 61)
              goto LABEL_307;
            v75 = (char *)operator new(8 * v74);
          }
          else
          {
            v75 = 0;
          }
          v76 = (uint64_t *)&v75[8 * v71];
          *v76 = v66;
          v69 = v76 + 1;
          if (v68 != (uint64_t *)v70)
          {
            v77 = (char *)v68 - v70 - 8;
            if (v77 < 0x58)
              goto LABEL_319;
            if ((unint64_t)(v70 - v75) < 0x20)
              goto LABEL_319;
            v78 = (v77 >> 3) + 1;
            v79 = &v75[8 * v71 - 16];
            v80 = v68 - 2;
            v81 = v78 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v82 = *(_OWORD *)v80;
              *((_OWORD *)v79 - 1) = *((_OWORD *)v80 - 1);
              *(_OWORD *)v79 = v82;
              v79 -= 32;
              v80 -= 4;
              v81 -= 4;
            }
            while (v81);
            v76 -= v78 & 0x3FFFFFFFFFFFFFFCLL;
            v68 -= v78 & 0x3FFFFFFFFFFFFFFCLL;
            if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_319:
              do
              {
                v83 = *--v68;
                *--v76 = v83;
              }
              while (v68 != (uint64_t *)v70);
            }
            v68 = *(uint64_t **)(v29 + 400);
          }
          *(_QWORD *)(v29 + 400) = v76;
          *(_QWORD *)(v29 + 408) = v69;
          *(_QWORD *)(v29 + 416) = &v75[8 * v74];
          if (v68)
            operator delete(v68);
        }
        else
        {
          *v68 = v66;
          v69 = v68 + 1;
        }
        *(_QWORD *)(v29 + 408) = v69;
        v65 = *(v69 - 1);
      }
      else
      {
        v64 = *(_QWORD *)(v63 - 8);
        *(_QWORD *)(v29 + 384) = v63 - 8;
        *(_DWORD *)(*(_QWORD *)(v29 + 400) + 8 * v64) = (*(_QWORD *)(v29 + 432) - *(_QWORD *)(v29 + 424)) >> 4;
        *(_DWORD *)(*(_QWORD *)(v29 + 400) + 8 * v64 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(v29 + 400)
                                                                                                + 8 * v64
                                                                                                + 4) << 32)
                                                           + 0x100000000) >> 32;
        v65 = v64 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v29 + 400) + 8 * v64 + 4) << 32);
      }
      v85 = *(uint64_t **)(v29 + 432);
      v84 = *(_QWORD *)(v29 + 440);
      if ((unint64_t)v85 >= v84)
      {
        v87 = *(uint64_t **)(v29 + 424);
        v88 = ((char *)v85 - (char *)v87) >> 4;
        v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 60)
          abort();
        v90 = v84 - (_QWORD)v87;
        if (v90 >> 3 > v89)
          v89 = v90 >> 3;
        if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF0)
          v91 = 0xFFFFFFFFFFFFFFFLL;
        else
          v91 = v89;
        if (v91)
        {
          if (v91 >> 60)
            goto LABEL_307;
          v92 = (char *)operator new(16 * v91);
        }
        else
        {
          v92 = 0;
        }
        v93 = (uint64_t *)&v92[16 * v88];
        *v93 = v38;
        v93[1] = (uint64_t)v34;
        v94 = v93;
        if (v85 != v87)
        {
          do
          {
            *((_OWORD *)v94 - 1) = *((_OWORD *)v85 - 1);
            v94 -= 2;
            v85 -= 2;
          }
          while (v85 != v87);
          v85 = *(uint64_t **)(v29 + 424);
        }
        v86 = v93 + 2;
        *(_QWORD *)(v29 + 424) = v94;
        *(_QWORD *)(v29 + 432) = v93 + 2;
        *(_QWORD *)(v29 + 440) = &v92[16 * v91];
        if (v85)
          operator delete(v85);
      }
      else
      {
        *v85 = v38;
        v85[1] = (uint64_t)v34;
        v86 = v85 + 2;
      }
      *(_QWORD *)(v29 + 432) = v86;
      v96 = *(_QWORD *)(v29 + 456);
      v95 = *(_QWORD *)(v29 + 464);
      if (v96 >= v95)
      {
        v98 = *(_BYTE **)(v29 + 448);
        v99 = (uint64_t)(v96 - (_QWORD)v98) >> 3;
        v100 = v99 + 1;
        if ((unint64_t)(v99 + 1) >> 61)
          abort();
        v101 = v95 - (_QWORD)v98;
        if (v101 >> 2 > v100)
          v100 = v101 >> 2;
        if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8)
          v102 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v102 = v100;
        if (v102)
        {
          if (v102 >> 61)
LABEL_307:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v103 = operator new(8 * v102);
        }
        else
        {
          v103 = 0;
        }
        v104 = &v103[8 * v99];
        *v104 = v65;
        v97 = v104 + 1;
        if ((_BYTE *)v96 != v98)
        {
          v105 = v96 - (_QWORD)v98 - 8;
          if (v105 < 0x58)
            goto LABEL_320;
          if ((unint64_t)(v98 - v103) < 0x20)
            goto LABEL_320;
          v106 = (v105 >> 3) + 1;
          v107 = &v103[8 * v99 - 16];
          v108 = (__int128 *)(v96 - 16);
          v109 = v106 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v110 = *v108;
            *(v107 - 1) = *(v108 - 1);
            *v107 = v110;
            v107 -= 2;
            v108 -= 2;
            v109 -= 4;
          }
          while (v109);
          v104 -= v106 & 0x3FFFFFFFFFFFFFFCLL;
          v96 -= 8 * (v106 & 0x3FFFFFFFFFFFFFFCLL);
          if (v106 != (v106 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_320:
            do
            {
              v111 = *(_QWORD *)(v96 - 8);
              v96 -= 8;
              *--v104 = v111;
            }
            while ((_BYTE *)v96 != v98);
          }
        }
        *(_QWORD *)(v29 + 448) = v104;
        *(_QWORD *)(v29 + 456) = v97;
        *(_QWORD *)(v29 + 464) = &v103[8 * v102];
        if (v98)
          operator delete(v98);
      }
      else
      {
        *(_QWORD *)v96 = v65;
        v96 += 8;
        v97 = (_QWORD *)v96;
      }
      v112 = (uint64_t *)(v29 + 296);
      *(_QWORD *)(v29 + 456) = v97;
      v113 = *(_QWORD *)(v29 + 304);
      if (v113)
      {
        v114 = (uint8x8_t)vcnt_s8((int8x8_t)v113);
        v114.i16[0] = vaddlv_u8(v114);
        if (v114.u32[0] > 1uLL)
        {
          v96 = v65;
          if (v65 >= v113)
            v96 = v65 % v113;
        }
        else
        {
          v96 = (v113 - 1) & v65;
        }
        v115 = *(_QWORD **)(*v112 + 8 * v96);
        if (v115)
        {
          v116 = (_QWORD *)*v115;
          if (v116)
          {
            if (v114.u32[0] < 2uLL)
            {
              while (1)
              {
                v118 = v116[1];
                if (v118 == v65)
                {
                  if (v116[2] == v65)
                    goto LABEL_196;
                }
                else if ((v118 & (v113 - 1)) != v96)
                {
                  goto LABEL_158;
                }
                v116 = (_QWORD *)*v116;
                if (!v116)
                  goto LABEL_158;
              }
            }
            do
            {
              v117 = v116[1];
              if (v117 == v65)
              {
                if (v116[2] == v65)
                  goto LABEL_196;
              }
              else
              {
                if (v117 >= v113)
                  v117 %= v113;
                if (v117 != v96)
                  break;
              }
              v116 = (_QWORD *)*v116;
            }
            while (v116);
          }
        }
      }
LABEL_158:
      v119 = (char *)operator new(0x30uLL);
      *(_QWORD *)v119 = 0;
      *((_QWORD *)v119 + 1) = v65;
      *((_QWORD *)v119 + 2) = v65;
      *(_OWORD *)(v119 + 24) = xmmword_19FFB3350;
      v119[40] = 0;
      v120 = (float)(unint64_t)(*(_QWORD *)(v29 + 320) + 1);
      v121 = *(float *)(v29 + 328);
      if ((((float)(v121 * (float)v113) >= v120) & ~(v113 == 0)) == 0)
      {
        v122 = v113 < 3 || (v113 & (v113 - 1)) != 0;
        v123 = v122 | (2 * v113);
        v124 = vcvtps_u32_f32(v120 / v121);
        if (v123 <= v124)
          prime = v124;
        else
          prime = v123;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v113 = *(_QWORD *)(v29 + 304);
        }
        if (prime > v113)
          goto LABEL_170;
        if (prime < v113)
        {
          v126 = vcvtps_u32_f32((float)*(unint64_t *)(v29 + 320) / *(float *)(v29 + 328));
          if (v113 < 3
            || (v127 = (uint8x8_t)vcnt_s8((int8x8_t)v113), v127.i16[0] = vaddlv_u8(v127), v127.u32[0] > 1uLL))
          {
            v126 = std::__next_prime(v126);
          }
          else
          {
            v128 = 1 << -(char)__clz(v126 - 1);
            if (v126 >= 2)
              v126 = v128;
          }
          if (prime <= v126)
            prime = v126;
          if (prime < v113)
LABEL_170:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v29 + 296, prime);
        }
        v113 = *(_QWORD *)(v29 + 304);
        if ((v113 & (v113 - 1)) != 0)
        {
          if (v65 >= v113)
            v96 = v65 % v113;
          else
            v96 = v65;
        }
        else
        {
          v96 = (v113 - 1) & v65;
        }
      }
      v129 = *v112;
      v130 = *(_QWORD **)(*v112 + 8 * v96);
      if (v130)
      {
        *(_QWORD *)v119 = *v130;
LABEL_194:
        *v130 = v119;
        goto LABEL_195;
      }
      *(_QWORD *)v119 = *(_QWORD *)(v29 + 312);
      *(_QWORD *)(v29 + 312) = v119;
      *(_QWORD *)(v129 + 8 * v96) = v29 + 312;
      if (*(_QWORD *)v119)
      {
        v131 = *(_QWORD *)(*(_QWORD *)v119 + 8);
        if ((v113 & (v113 - 1)) != 0)
        {
          if (v131 >= v113)
            v131 %= v113;
        }
        else
        {
          v131 &= v113 - 1;
        }
        v130 = (_QWORD *)(*v112 + 8 * v131);
        goto LABEL_194;
      }
LABEL_195:
      ++*(_QWORD *)(v29 + 320);
LABEL_196:
      v2 = v216;
      v132 = *(_QWORD **)(v216 + 8);
      v12 = v214;
      v133 = *v214;
      v224 = &off_1E427F168;
      *(_QWORD *)&v225 = v65;
      *((_QWORD *)&v225 + 1) = v133;
      v226 = &v224;
      v229 = &v227;
      v227 = &off_1E427F168;
      v228 = v225;
      v230 = 0;
      ecs2::Runtime::queueCommand(v132, (uint64_t)&v227);
      if (v230 != -1)
        ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v230])(&v223, &v227);
      v230 = -1;
      v10 = (uint64_t)v226;
      v6 = v215;
      if (v226 == &v224)
      {
        v10 = (uint64_t)&v224;
        v134 = 4;
        goto LABEL_202;
      }
      if (v226)
      {
        v134 = 5;
LABEL_202:
        v10 = (*(uint64_t (**)(void))(*(_QWORD *)v10 + 8 * v134))();
      }
      v135 = v222;
      v11 = *(unint64_t **)(v219 + 32);
      if (++v222 != v11)
      {
        v136 = v220[4];
        v137 = (v220[5] - v136) >> 3;
        v138 = v135 + 2;
        while (1)
        {
          v139 = *((unsigned int *)v138 - 1);
          v140 = v139 >> 7;
          if (v139 >> 7 < v137)
          {
            v141 = *(_QWORD *)(v136 + 8 * v140);
            if (v141)
            {
              v142 = *(unsigned __int16 *)(v141 + 2 * (v139 & 0x7F));
              v143 = v220[7];
              v10 = v220[8];
              if (v142 < (v10 - v143) >> 3)
              {
                v144 = v143 + 8 * v142;
                if (v144 != v10 && *(_DWORD *)(v144 + 4) == (_DWORD)v139)
                {
                  v146 = v221[4];
                  v10 = v221[5] - v146;
                  if (v140 < v10 >> 3)
                  {
                    v147 = *(_QWORD *)(v146 + 8 * v140);
                    if (v147)
                    {
                      v148 = *(unsigned __int16 *)(v147 + 2 * (v139 & 0x7F));
                      v150 = v221[7];
                      v149 = v221[8];
                      v10 = v149 - v150;
                      if (v148 < (v149 - v150) >> 3)
                      {
                        v151 = v150 + 8 * v148;
                        if (v151 != v149 && *(_DWORD *)(v151 + 4) == (_DWORD)v139)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v222 = v138;
          v21 = v138++ == v11;
          if (v21)
            goto LABEL_9;
        }
        v11 = v138 - 1;
      }
LABEL_9:
      if (v218 == v11)
        goto LABEL_306;
    }
    DaVinci::GetDataIDs((DaVinci *)v10);
    v34 = &DaVinci::GetDataIDs(void)::kDataIDs;
LABEL_37:
    v33 = *v24;
    goto LABEL_38;
  }
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_306:
  *v12 = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
}

void sub_19F6D9F54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStates>(md::ita::SetupRenderStates &&)::{lambda(void)#2},std::allocator<md::ita::SetupRenderStates &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStates>(md::ita::SetupRenderStates &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStates>(md::ita::SetupRenderStates &&)::{lambda(void)#2},std::allocator<md::ita::SetupRenderStates &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStates>(md::ita::SetupRenderStates &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42834E8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStates>(md::ita::SetupRenderStates &&)::{lambda(void)#2},std::allocator<md::ita::SetupRenderStates &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStates>(md::ita::SetupRenderStates &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42834E8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStates>(md::ita::SetupRenderStates &&)::{lambda(void)#2},std::allocator<md::ita::SetupRenderStates &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStates>(md::ita::SetupRenderStates &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStates>(md::ita::SetupRenderStates &&)::{lambda(void)#1},std::allocator<md::ita::SetupRenderStates &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStates>(md::ita::SetupRenderStates &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStates>(md::ita::SetupRenderStates &&)::{lambda(void)#1},std::allocator<md::ita::SetupRenderStates &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStates>(md::ita::SetupRenderStates &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283530;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStates>(md::ita::SetupRenderStates &&)::{lambda(void)#1},std::allocator<md::ita::SetupRenderStates &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStates>(md::ita::SetupRenderStates &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283530;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStates>(md::ita::SetupRenderStates &&)::{lambda(void)#1},std::allocator<md::ita::SetupRenderStates &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStates>(md::ita::SetupRenderStates &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x56D66E00519BD989;
  result[1] = "md::ls::NeedsNewRenderState]";
  result[2] = 27;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupRenderStates>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupRenderStates>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupRenderStates>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupRenderStates>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276318;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupRenderStates>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupRenderStates>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276318;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupRenderStates>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupRenderStates>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  BOOL v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *result;
  int64x2_t v67;
  char v68;
  uint64_t v69;
  __int128 v70;
  uint64_t *v71;
  _BYTE v72[24];
  _BYTE *v73;
  int v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v69 = 0x56D66E00519BD989;
  v4 = *(int8x8_t *)(v3 + 128);
  if (v4)
  {
    v5 = (uint8x8_t)vcnt_s8(v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      v6 = 0x56D66E00519BD989;
      if (*(_QWORD *)&v4 <= 0x56D66E00519BD989uLL)
        v6 = 0x56D66E00519BD989uLL % *(_QWORD *)&v4;
    }
    else
    {
      v6 = (*(_QWORD *)&v4 - 1) & 0x56D66E00519BD989;
    }
    v7 = *(_QWORD **)(*(_QWORD *)(v3 + 120) + 8 * v6);
    if (v7)
    {
      v8 = (_QWORD *)*v7;
      if (v8)
      {
        if (v5.u32[0] < 2uLL)
        {
          v9 = *(_QWORD *)&v4 - 1;
          while (1)
          {
            v11 = v8[1];
            if (v11 == 0x56D66E00519BD989)
            {
              if (v8[2] == 0x56D66E00519BD989)
                goto LABEL_87;
            }
            else if ((v11 & v9) != v6)
            {
              goto LABEL_21;
            }
            v8 = (_QWORD *)*v8;
            if (!v8)
              goto LABEL_21;
          }
        }
        do
        {
          v10 = v8[1];
          if (v10 == 0x56D66E00519BD989)
          {
            if (v8[2] == 0x56D66E00519BD989)
            {
LABEL_87:
              v12 = v8[3];
              goto LABEL_24;
            }
          }
          else
          {
            if (v10 >= *(_QWORD *)&v4)
              v10 %= *(_QWORD *)&v4;
            if (v10 != v6)
              break;
          }
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
    }
  }
LABEL_21:
  v12 = operator new();
  *(_QWORD *)(v12 + 16) = "md::ls::NeedsNewRenderState]";
  *(_QWORD *)(v12 + 24) = 27;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_DWORD *)(v12 + 144) = 1065353216;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 168) = 0u;
  *(_QWORD *)(v12 + 184) = 0;
  *(_DWORD *)(v12 + 192) = 1065353216;
  *(_OWORD *)(v12 + 200) = 0u;
  *(_OWORD *)(v12 + 216) = 0u;
  *(_QWORD *)(v12 + 232) = 0;
  *(_DWORD *)(v12 + 240) = 1065353216;
  *(_QWORD *)v12 = &off_1E4272348;
  *(_QWORD *)(v12 + 8) = 0x56D66E00519BD989;
  *(_QWORD *)(v12 + 248) = v3;
  v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v3 + 120), 0x56D66E00519BD989uLL, &v69);
  v14 = v13[3];
  v13[3] = v12;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *(_QWORD *)v72 = 0x56D66E00519BD989;
  *(_QWORD *)&v72[8] = "md::ls::NeedsNewRenderState]";
  *(_QWORD *)&v72[16] = 27;
  gdc::Registry::_registerStorageDataSignals(v3, 0x56D66E00519BD989, (uint64_t)v72, (uint64_t *)(v12 + 104));
LABEL_24:
  v16 = *(unint64_t **)(v12 + 56);
  v15 = *(uint64_t **)(v12 + 64);
  v17 = (char *)v15 - (char *)v16;
  if (v15 != (uint64_t *)v16)
  {
    if ((v18 = *((unsigned int *)v16 + 1),
          v19 = *(_QWORD *)(v12 + 32),
          v20 = (*(_QWORD *)(v12 + 40) - v19) >> 3,
          v18 >> 7 >= v20)
      || (v21 = *(_QWORD *)(v19 + 8 * (v18 >> 7))) == 0
      || (v22 = *(unsigned __int16 *)(v21 + 2 * (v18 & 0x7F)), v22 >= v17 >> 3)
      || ((v23 = (uint64_t *)&v16[v22], v23 != v15) ? (v24 = *((_DWORD *)v23 + 1) == (_DWORD)v18) : (v24 = 0), !v24))
    {
      v25 = v17 >> 3;
      v26 = (uint64_t *)(v16 + 1);
      do
      {
        if (v26 == v15)
          goto LABEL_86;
        v27 = *((unsigned int *)v26 + 1);
        v28 = *(uint64_t **)(v12 + 64);
        if (v27 >> 7 < v20)
        {
          v29 = *(_QWORD *)(v19 + 8 * (v27 >> 7));
          v28 = *(uint64_t **)(v12 + 64);
          if (v29)
          {
            v30 = *(unsigned __int16 *)(v29 + 2 * (v27 & 0x7F));
            v28 = *(uint64_t **)(v12 + 64);
            if (v25 > v30)
            {
              v28 = (uint64_t *)&v16[v30];
              if (*((_DWORD *)v28 + 1) != (_DWORD)v27)
                v28 = *(uint64_t **)(v12 + 64);
            }
          }
        }
        ++v26;
      }
      while (v28 == v15);
      v16 = (unint64_t *)(v26 - 1);
    }
  }
  if (v15 != (uint64_t *)v16)
  {
    v31 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v67 = vdupq_n_s64(1uLL);
    do
    {
      *v31 = *v16;
      v33 = *v16;
      v34 = *v16 >> 39;
      v35 = *(_QWORD *)(v12 + 32);
      if (v34 < (*(_QWORD *)(v12 + 40) - v35) >> 3
        && (v36 = *(_QWORD *)(v35 + 8 * v34)) != 0
        && (v37 = *(unsigned __int16 *)(v36 + 2 * (HIDWORD(v33) & 0x7F)),
            v39 = *(_QWORD *)(v12 + 56),
            v38 = *(_QWORD *)(v12 + 64),
            v37 < (v38 - v39) >> 3)
        && ((v40 = HIDWORD(v33), v41 = v39 + 8 * v37, v41 != v38)
          ? (v42 = *(_DWORD *)(v41 + 4) == (_DWORD)v40)
          : (v42 = 0),
            v42))
      {
        v43 = *(_QWORD *)(v12 + 88);
        v44 = *(_QWORD *)(v12 + 80) - v37 + 8 * v37;
      }
      else
      {
        v43 = *(_QWORD *)(v12 + 88);
        v44 = v43;
      }
      if (v44 == v43)
        v45 = 0;
      else
        v45 = (unsigned __int8 *)v44;
      v46 = **(_QWORD **)(a1 + 8);
      v47 = *(_QWORD **)v46;
      v48 = *(_QWORD **)(v46 + 8);
      if (v47 != v48)
      {
        while (*v47 != 0x41D4E9297E100630)
        {
          v47 += 5;
          if (v47 == v48)
            goto LABEL_68;
        }
      }
      if (v47 == v48)
      {
LABEL_68:
        v50 = 0;
      }
      else
      {
        v50 = v47[3];
        v49 = (std::__shared_weak_count *)v47[4];
        if (v49)
        {
          p_shared_owners = (unint64_t *)&v49->__shared_owners_;
          do
            v52 = __ldxr(p_shared_owners);
          while (__stxr(v52 + 1, p_shared_owners));
          do
            v53 = __ldaxr(p_shared_owners);
          while (__stlxr(v53 - 1, p_shared_owners));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
      }
      v69 = md::DaVinciRenderStateCache::renderState((unsigned __int8 **)(*(_QWORD *)(v50 + 10496) + 2424), *v45, v45[1], v45[2], v45[3], v45[4], v45[5], v45[6]);
      v54 = geo::packed_array<md::RenderStateStorage,geo::handle<md::RenderStateItem>>::push_back((_QWORD *)(v50 + 728), &v69);
      *(int64x2_t *)v72 = v67;
      v72[16] = 0;
      std::__hash_table<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::hash<geo::handle<md::RenderStateItem>>,std::equal_to<geo::handle<md::RenderStateItem>>,true>,std::__unordered_map_equal<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::equal_to<geo::handle<md::RenderStateItem>>,std::hash<geo::handle<md::RenderStateItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::RenderStateItem>,geo::handle<md::RenderStateItem> const&,md::Counter>(v50 + 688, v54, v54, (uint64_t)v72);
      v55 = *(_QWORD **)(a1 + 8);
      v56 = *v31;
      v69 = (uint64_t)&off_1E427D938;
      *(_QWORD *)&v70 = v54;
      *((_QWORD *)&v70 + 1) = v56;
      v71 = &v69;
      v73 = v72;
      *(_QWORD *)v72 = &off_1E427D938;
      *(_OWORD *)&v72[8] = v70;
      v74 = 0;
      ecs2::Runtime::queueCommand(v55, (uint64_t)v72);
      if (v74 != -1)
        ((void (*)(char *, _BYTE *))off_1E42FB340[v74])(&v68, v72);
      v74 = -1;
      v57 = v71;
      if (v71 == &v69)
      {
        v57 = &v69;
        v58 = 4;
      }
      else
      {
        if (!v71)
          goto LABEL_76;
        v58 = 5;
      }
      (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_76:
      v59 = *(_QWORD *)(v12 + 32);
      v60 = *(_QWORD *)(v12 + 56);
      v32 = *(uint64_t **)(v12 + 64);
      v61 = (uint64_t *)(v16 + 1);
      while (v61 != v32)
      {
        v62 = *((unsigned int *)v61 + 1);
        v63 = *(_QWORD *)(v12 + 64);
        if (v62 >> 7 < (*(_QWORD *)(v12 + 40) - v59) >> 3)
        {
          v64 = *(_QWORD *)(v59 + 8 * (v62 >> 7));
          v63 = *(_QWORD *)(v12 + 64);
          if (v64)
          {
            v65 = *(unsigned __int16 *)(v64 + 2 * (v62 & 0x7F));
            v63 = *(_QWORD *)(v12 + 64);
            if (((uint64_t)v32 - v60) >> 3 > v65)
            {
              v63 = v60 + 8 * v65;
              if (*(_DWORD *)(v63 + 4) != (_DWORD)v62)
                v63 = *(_QWORD *)(v12 + 64);
            }
          }
        }
        ++v61;
        if ((uint64_t *)v63 != v32)
        {
          v32 = v61 - 1;
          break;
        }
      }
      v16 = (unint64_t *)v32;
    }
    while (v15 != v32);
  }
LABEL_86:
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F6DA6E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::NeedsNewRenderState>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::NeedsNewRenderState>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_DWORD *)(a1[10] - v7 + 8 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_DWORD *)(v15 - 4);
  *v14 = *(_DWORD *)(v15 - 7);
  *(_DWORD *)((char *)v14 + 3) = v16;
  a1[11] -= 7;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::NeedsNewRenderState>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::NeedsNewRenderState>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForDecals>(md::ita::SetupRenderStatesForDecals &&)::{lambda(void)#2},std::allocator<md::ita::SetupRenderStatesForDecals &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForDecals>(md::ita::SetupRenderStatesForDecals &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForDecals>(md::ita::SetupRenderStatesForDecals &&)::{lambda(void)#2},std::allocator<md::ita::SetupRenderStatesForDecals &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForDecals>(md::ita::SetupRenderStatesForDecals &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285C48;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForDecals>(md::ita::SetupRenderStatesForDecals &&)::{lambda(void)#2},std::allocator<md::ita::SetupRenderStatesForDecals &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForDecals>(md::ita::SetupRenderStatesForDecals &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285C48;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForDecals>(md::ita::SetupRenderStatesForDecals &&)::{lambda(void)#2},std::allocator<md::ita::SetupRenderStatesForDecals &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForDecals>(md::ita::SetupRenderStatesForDecals &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForDecals>(md::ita::SetupRenderStatesForDecals &&)::{lambda(void)#1},std::allocator<md::ita::SetupRenderStatesForDecals &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForDecals>(md::ita::SetupRenderStatesForDecals &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForDecals>(md::ita::SetupRenderStatesForDecals &&)::{lambda(void)#1},std::allocator<md::ita::SetupRenderStatesForDecals &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForDecals>(md::ita::SetupRenderStatesForDecals &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285C90;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForDecals>(md::ita::SetupRenderStatesForDecals &&)::{lambda(void)#1},std::allocator<md::ita::SetupRenderStatesForDecals &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForDecals>(md::ita::SetupRenderStatesForDecals &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285C90;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForDecals>(md::ita::SetupRenderStatesForDecals &&)::{lambda(void)#1},std::allocator<md::ita::SetupRenderStatesForDecals &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForDecals>(md::ita::SetupRenderStatesForDecals &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0x76B9BA390004E44ELL;
  v2[1] = "md::ls::IsDecal]";
  *(_QWORD *)&result = 15;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4250;
  v2[4] = "md::ls::RenderItemID]";
  v2[5] = 20;
  v2[6] = 0x1E85A99FD528C623;
  v2[7] = "md::ls::NeedsRenderState]";
  v2[8] = 24;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForDecals>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForDecals>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForDecals>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForDecals>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42776C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForDecals>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForDecals>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42776C8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForDecals>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForDecals>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _BOOL4 isValid;
  uint64_t result;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  _QWORD *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  char v54;
  uint64_t (**v55)();
  __int128 v56;
  uint64_t (***v57)();
  _BYTE v58[24];
  _BYTE *v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = gdc::Registry::storage<md::ls::IsDecal>(v3);
  v5 = gdc::Registry::storage<md::ls::RenderItemID>(v3);
  v6 = gdc::Registry::storage<md::ls::NeedsRenderState>(v3);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) >= *(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56))
    v7 = v4;
  else
    v7 = v5;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < *(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56))
    v7 = v6;
  v49 = v7 + 32;
  v50 = (_QWORD *)v4;
  v51 = (_QWORD *)v5;
  v52 = (_QWORD *)v6;
  v8 = *(_QWORD **)(v7 + 56);
  v9 = *(_QWORD **)(v7 + 64);
  v53 = v8;
  if (v9 != v8
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v49))
  {
    v10 = v8 + 1;
    do
    {
      v8 = v10;
      v53 = v10;
      if (v10 == v9)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v49);
      v10 = v8 + 1;
    }
    while (!isValid);
  }
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v13 = (uint64_t *)result;
  if (v9 != v8)
  {
    while (1)
    {
      *v13 = *v8;
      v15 = **(_QWORD **)(a1 + 8);
      v16 = *(_QWORD **)v15;
      v17 = *(_QWORD **)(v15 + 8);
      if (v16 != v17)
      {
        while (*v16 != 0x41D4E9297E100630)
        {
          v16 += 5;
          if (v16 == v17)
            goto LABEL_28;
        }
      }
      if (v16 == v17)
        break;
      v19 = (_QWORD *)v16[3];
      v18 = (std::__shared_weak_count *)v16[4];
      if (!v18)
        goto LABEL_26;
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (v22)
      {
LABEL_26:
        v23 = v19[1314];
        if (v23)
          goto LABEL_30;
LABEL_29:
        v55 = (uint64_t (**)())(v19[1312] + 1560);
        v23 = geo::packed_array<md::RenderStateStorage,geo::handle<md::RenderStateItem>>::push_back(v19 + 91, &v55);
        *(int64x2_t *)v58 = vdupq_n_s64(1uLL);
        v58[16] = 1;
        std::__hash_table<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::hash<geo::handle<md::RenderStateItem>>,std::equal_to<geo::handle<md::RenderStateItem>>,true>,std::__unordered_map_equal<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::equal_to<geo::handle<md::RenderStateItem>>,std::hash<geo::handle<md::RenderStateItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::RenderStateItem>,geo::handle<md::RenderStateItem> const&,md::Counter>((uint64_t)(v19 + 86), v23, v23, (uint64_t)v58);
        v19[1314] = v23;
        goto LABEL_30;
      }
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      v23 = v19[1314];
      if (!v23)
        goto LABEL_29;
LABEL_30:
      v24 = *(_QWORD **)(a1 + 8);
      v25 = *v13;
      v55 = &off_1E427D938;
      *(_QWORD *)&v56 = v23;
      *((_QWORD *)&v56 + 1) = v25;
      v57 = &v55;
      v59 = v58;
      *(_QWORD *)v58 = &off_1E427D938;
      *(_OWORD *)&v58[8] = v56;
      v60 = 0;
      ecs2::Runtime::queueCommand(v24, (uint64_t)v58);
      if (v60 != -1)
        ((void (*)(char *, _BYTE *))off_1E42FB340[v60])(&v54, v58);
      v60 = -1;
      result = (uint64_t)v57;
      if (v57 == &v55)
      {
        result = (uint64_t)&v55;
        v26 = 4;
        goto LABEL_36;
      }
      if (v57)
      {
        v26 = 5;
LABEL_36:
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v26))();
      }
      v8 = *(_QWORD **)(v49 + 32);
      v14 = v53 + 1;
      v53 = v14;
      if (v14 != v8)
      {
        v27 = v50[4];
        while (1)
        {
          v28 = *((unsigned int *)v14 + 1);
          v29 = v28 >> 7;
          if (v28 >> 7 < (v50[5] - v27) >> 3)
          {
            v30 = *(_QWORD *)(v27 + 8 * v29);
            if (v30)
            {
              v31 = v28 & 0x7F;
              v32 = *(unsigned __int16 *)(v30 + 2 * v31);
              v33 = v50[7];
              result = v50[8];
              if (v32 < (result - v33) >> 3)
              {
                v34 = v33 + 8 * v32;
                if (v34 != result && *(_DWORD *)(v34 + 4) == (_DWORD)v28)
                {
                  v36 = v51[4];
                  result = v51[5] - v36;
                  if (v29 < result >> 3)
                  {
                    v37 = *(_QWORD *)(v36 + 8 * v29);
                    if (v37)
                    {
                      v38 = *(unsigned __int16 *)(v37 + 2 * v31);
                      v39 = v51[7];
                      result = v51[8];
                      if (v38 < (result - v39) >> 3)
                      {
                        v40 = v39 + 8 * v38;
                        if (v40 != result && *(_DWORD *)(v40 + 4) == (_DWORD)v28)
                        {
                          v42 = v52[4];
                          result = v52[5] - v42;
                          if (v29 < result >> 3)
                          {
                            v43 = *(_QWORD *)(v42 + 8 * v29);
                            if (v43)
                            {
                              v44 = *(unsigned __int16 *)(v43 + 2 * v31);
                              v46 = v52[7];
                              v45 = v52[8];
                              result = v45 - v46;
                              if (v44 < (v45 - v46) >> 3)
                              {
                                v47 = v46 + 8 * v44;
                                if (*(_DWORD *)(v47 + 4) == (_DWORD)v28 && v47 != v45)
                                  break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v8)
          {
            v14 = v8;
            goto LABEL_14;
          }
        }
        v8 = v14;
LABEL_14:
        v53 = v14;
      }
      if (v9 == v8)
        goto LABEL_66;
    }
LABEL_28:
    v19 = 0;
    v23 = MEMORY[0x2910];
    if (MEMORY[0x2910])
      goto LABEL_30;
    goto LABEL_29;
  }
LABEL_66:
  *v13 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::NeedsRenderState>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x1E85A99FD528C623;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x1E85A99FD528C623;
      if (*(_QWORD *)&v3 <= 0x1E85A99FD528C623uLL)
        v5 = 0x1E85A99FD528C623uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x1E85A99FD528C623;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x1E85A99FD528C623)
            {
              if (v7[2] == 0x1E85A99FD528C623)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x1E85A99FD528C623)
          {
            if (v7[2] == 0x1E85A99FD528C623)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::NeedsRenderState]";
  *(_QWORD *)(v11 + 24) = 24;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271BF8;
  *(_QWORD *)(v11 + 8) = 0x1E85A99FD528C623;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x1E85A99FD528C623uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x1E85A99FD528C623;
  v15[1] = "md::ls::NeedsRenderState]";
  v15[2] = 24;
  gdc::Registry::_registerStorageDataSignals(a1, 0x1E85A99FD528C623, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6DB04C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::NeedsRenderState>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::NeedsRenderState>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::NeedsRenderState>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::NeedsRenderState>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupPredefinedRenderState>(md::ita::SetupPredefinedRenderState &&)::{lambda(void)#2},std::allocator<md::ita::SetupPredefinedRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupPredefinedRenderState>(md::ita::SetupPredefinedRenderState &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupPredefinedRenderState>(md::ita::SetupPredefinedRenderState &&)::{lambda(void)#2},std::allocator<md::ita::SetupPredefinedRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupPredefinedRenderState>(md::ita::SetupPredefinedRenderState &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285BB8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupPredefinedRenderState>(md::ita::SetupPredefinedRenderState &&)::{lambda(void)#2},std::allocator<md::ita::SetupPredefinedRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupPredefinedRenderState>(md::ita::SetupPredefinedRenderState &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285BB8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupPredefinedRenderState>(md::ita::SetupPredefinedRenderState &&)::{lambda(void)#2},std::allocator<md::ita::SetupPredefinedRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupPredefinedRenderState>(md::ita::SetupPredefinedRenderState &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupPredefinedRenderState>(md::ita::SetupPredefinedRenderState &&)::{lambda(void)#1},std::allocator<md::ita::SetupPredefinedRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupPredefinedRenderState>(md::ita::SetupPredefinedRenderState &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupPredefinedRenderState>(md::ita::SetupPredefinedRenderState &&)::{lambda(void)#1},std::allocator<md::ita::SetupPredefinedRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupPredefinedRenderState>(md::ita::SetupPredefinedRenderState &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285C00;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupPredefinedRenderState>(md::ita::SetupPredefinedRenderState &&)::{lambda(void)#1},std::allocator<md::ita::SetupPredefinedRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupPredefinedRenderState>(md::ita::SetupPredefinedRenderState &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285C00;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupPredefinedRenderState>(md::ita::SetupPredefinedRenderState &&)::{lambda(void)#1},std::allocator<md::ita::SetupPredefinedRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupPredefinedRenderState>(md::ita::SetupPredefinedRenderState &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x60uLL);
  a1[2] = (char *)(v2 + 12);
  *v2 = 0xCB8AA7FBA6BCD25CLL;
  v2[1] = "md::ls::PredefinedRenderState]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB4260;
  v2[4] = "md::ls::RenderItemID]";
  v2[5] = 20;
  v2[6] = 0x1E85A99FD528C623;
  v2[7] = "md::ls::NeedsRenderState]";
  v2[8] = 24;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 12)
  {
    *(_QWORD *)v3 = 0x69465F3BE0BF85FBLL;
    v2[10] = "md::ls::FlyoverInstance]";
    v2[11] = 23;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 12) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x69465F3BE0BF85FBLL;
  *((_QWORD *)v10 + 1) = "md::ls::FlyoverInstance]";
  *((_QWORD *)v10 + 2) = 23;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
}

void sub_19F6DB464(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupPredefinedRenderState>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupPredefinedRenderState>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupPredefinedRenderState>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupPredefinedRenderState>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277680;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupPredefinedRenderState>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupPredefinedRenderState>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277680;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupPredefinedRenderState>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupPredefinedRenderState>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _BOOL4 isValid;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  unsigned __int8 *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  uint64_t (**v40)();
  void *v41;
  int v42;
  uint64_t (**v43)();
  _QWORD *v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  char v75;
  uint64_t (**v76)();
  __int128 v77;
  uint64_t (***v78)();
  _BYTE v79[24];
  _BYTE *v80;
  int v81;
  uint64_t v82;

  v2 = a1;
  v82 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::PredefinedRenderState>(v3);
  v5 = gdc::Registry::storage<md::ls::RenderItemID>(v3);
  v6 = gdc::Registry::storage<md::ls::NeedsRenderState>(v3);
  gdc::Registry::storage<md::ls::FlyoverInstance>(v3);
  v7 = v4 + 4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v4[8] - v4[7])
    v7 = (_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v6 + 32);
  v70 = v7;
  v71 = v4;
  v72 = (_QWORD *)v5;
  v73 = (_QWORD *)v6;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v74 = v8;
  if (v9 != v8
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v70))
  {
    v10 = v8 + 1;
    do
    {
      v8 = v10;
      v74 = v10;
      if (v10 == v9)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v70);
      v10 = v8 + 1;
    }
    while (!isValid);
  }
  if (v9 != v8)
  {
    v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      *v12 = *v8;
      v14 = *v8;
      v15 = *v8 >> 39;
      v16 = v4[4];
      if (v15 < (v4[5] - v16) >> 3
        && (v17 = *(_QWORD *)(v16 + 8 * v15)) != 0
        && (v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v14) & 0x7F)),
            v20 = v4[7],
            v19 = v4[8],
            v18 < (v19 - v20) >> 3)
        && ((v21 = HIDWORD(v14), v22 = v20 + 8 * v18, v22 != v19)
          ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v21)
          : (v23 = 0),
            v23))
      {
        v24 = (unsigned __int8 *)(v4[10] + v18);
      }
      else
      {
        v24 = (unsigned __int8 *)v4[11];
      }
      v25 = **(_QWORD **)(v2 + 8);
      v26 = *(_QWORD **)v25;
      v27 = *(_QWORD **)(v25 + 8);
      if (v26 != v27)
      {
        while (*v26 != 0x41D4E9297E100630)
        {
          v26 += 5;
          if (v26 == v27)
            goto LABEL_34;
        }
      }
      if (v26 == v27)
      {
LABEL_34:
        v29 = 0;
      }
      else
      {
        v29 = v26[3];
        v28 = (std::__shared_weak_count *)v26[4];
        if (v28)
        {
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          do
            v31 = __ldxr(p_shared_owners);
          while (__stxr(v31 + 1, p_shared_owners));
          do
            v32 = __ldaxr(p_shared_owners);
          while (__stlxr(v32 - 1, p_shared_owners));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
      }
      v33 = v29 + 8 * *v24;
      v34 = *(_QWORD *)(v33 + 10520);
      if (!v34)
      {
        v35 = v4;
        v36 = v12;
        v37 = v2;
        v38 = v9;
        if (*v24 >= 4u)
          v39 = 0;
        else
          v39 = *v24;
        v40 = *(uint64_t (***)())(v29 + 10504);
        +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        v42 = objc_msgSend(v41, "flyoverSkipTileRendering");

        if (v42)
        {
          v43 = v40 + 111;
        }
        else
        {
          switch(v39)
          {
            case 1:
              v43 = v40 + 30;
              break;
            case 3:
              v43 = v40 + 84;
              break;
            case 2:
              v43 = v40 + 57;
              break;
            default:
              v43 = v40 + 3;
              break;
          }
        }
        v76 = v43;
        v34 = geo::packed_array<md::RenderStateStorage,geo::handle<md::RenderStateItem>>::push_back((_QWORD *)(v29 + 728), &v76);
        *(int64x2_t *)v79 = vdupq_n_s64(1uLL);
        v79[16] = 1;
        std::__hash_table<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::hash<geo::handle<md::RenderStateItem>>,std::equal_to<geo::handle<md::RenderStateItem>>,true>,std::__unordered_map_equal<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::equal_to<geo::handle<md::RenderStateItem>>,std::hash<geo::handle<md::RenderStateItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::RenderStateItem>,geo::handle<md::RenderStateItem> const&,md::Counter>(v29 + 688, v34, v34, (uint64_t)v79);
        *(_QWORD *)(v33 + 10520) = v34;
        v9 = v38;
        v2 = v37;
        v12 = v36;
        v4 = v35;
      }
      v44 = *(_QWORD **)(v2 + 8);
      v45 = *v12;
      v76 = &off_1E427D938;
      *(_QWORD *)&v77 = v34;
      *((_QWORD *)&v77 + 1) = v45;
      v78 = &v76;
      v80 = v79;
      *(_QWORD *)v79 = &off_1E427D938;
      *(_OWORD *)&v79[8] = v77;
      v81 = 0;
      ecs2::Runtime::queueCommand(v44, (uint64_t)v79);
      if (v81 != -1)
        ((void (*)(char *, _BYTE *))off_1E42FB340[v81])(&v75, v79);
      v81 = -1;
      result = (uint64_t)v78;
      if (v78 == &v76)
        break;
      if (v78)
      {
        v47 = 5;
LABEL_48:
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v47))();
      }
      v8 = (_QWORD *)v70[4];
      v13 = v74 + 1;
      v74 = v13;
      if (v13 != v8)
      {
        v48 = v71[4];
        while (1)
        {
          v49 = *((unsigned int *)v13 + 1);
          v50 = v49 >> 7;
          if (v49 >> 7 < (v71[5] - v48) >> 3)
          {
            v51 = *(_QWORD *)(v48 + 8 * v50);
            if (v51)
            {
              v52 = v49 & 0x7F;
              v53 = *(unsigned __int16 *)(v51 + 2 * v52);
              v54 = v71[7];
              result = v71[8];
              if (v53 < (result - v54) >> 3)
              {
                v55 = v54 + 8 * v53;
                if (v55 != result && *(_DWORD *)(v55 + 4) == (_DWORD)v49)
                {
                  v57 = v72[4];
                  result = v72[5] - v57;
                  if (v50 < result >> 3)
                  {
                    v58 = *(_QWORD *)(v57 + 8 * v50);
                    if (v58)
                    {
                      v59 = *(unsigned __int16 *)(v58 + 2 * v52);
                      v60 = v72[7];
                      result = v72[8];
                      if (v59 < (result - v60) >> 3)
                      {
                        v61 = v60 + 8 * v59;
                        if (v61 != result && *(_DWORD *)(v61 + 4) == (_DWORD)v49)
                        {
                          v63 = v73[4];
                          result = v73[5] - v63;
                          if (v50 < result >> 3)
                          {
                            v64 = *(_QWORD *)(v63 + 8 * v50);
                            if (v64)
                            {
                              v65 = *(unsigned __int16 *)(v64 + 2 * v52);
                              v67 = v73[7];
                              v66 = v73[8];
                              result = v66 - v67;
                              if (v65 < (v66 - v67) >> 3)
                              {
                                v68 = v67 + 8 * v65;
                                if (*(_DWORD *)(v68 + 4) == (_DWORD)v49 && v68 != v66)
                                  break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v13 == v8)
          {
            v13 = v8;
            goto LABEL_13;
          }
        }
        v8 = v13;
LABEL_13:
        v74 = v13;
      }
      if (v9 == v8)
        goto LABEL_85;
    }
    result = (uint64_t)&v76;
    v47 = 4;
    goto LABEL_48;
  }
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v12 = (_QWORD *)result;
LABEL_85:
  *v12 = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
  return result;
}

void sub_19F6DBA08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::PredefinedRenderState>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCB8AA7FBA6BCD25CLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCB8AA7FBA6BCD25CLL;
      if (*(_QWORD *)&v3 <= 0xCB8AA7FBA6BCD25CLL)
        v5 = 0xCB8AA7FBA6BCD25CLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCB8AA7FBA6BCD25CLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCB8AA7FBA6BCD25CLL)
            {
              if (v7[2] == 0xCB8AA7FBA6BCD25CLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCB8AA7FBA6BCD25CLL)
          {
            if (v7[2] == 0xCB8AA7FBA6BCD25CLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::PredefinedRenderState]";
  *(_QWORD *)(v11 + 24) = 29;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272858;
  *(_QWORD *)(v11 + 8) = 0xCB8AA7FBA6BCD25CLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCB8AA7FBA6BCD25CLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCB8AA7FBA6BCD25CLL;
  v15[1] = "md::ls::PredefinedRenderState]";
  v15[2] = 29;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCB8AA7FBA6BCD25CLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6DBC2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::PredefinedRenderState>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PredefinedRenderState>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PredefinedRenderState>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PredefinedRenderState>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForSeeThrough>(md::ita::SetupRenderStatesForSeeThrough &&)::{lambda(void)#2},std::allocator<md::ita::SetupRenderStatesForSeeThrough &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForSeeThrough>(md::ita::SetupRenderStatesForSeeThrough &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForSeeThrough>(md::ita::SetupRenderStatesForSeeThrough &&)::{lambda(void)#2},std::allocator<md::ita::SetupRenderStatesForSeeThrough &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForSeeThrough>(md::ita::SetupRenderStatesForSeeThrough &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287358;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForSeeThrough>(md::ita::SetupRenderStatesForSeeThrough &&)::{lambda(void)#2},std::allocator<md::ita::SetupRenderStatesForSeeThrough &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForSeeThrough>(md::ita::SetupRenderStatesForSeeThrough &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287358;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForSeeThrough>(md::ita::SetupRenderStatesForSeeThrough &&)::{lambda(void)#2},std::allocator<md::ita::SetupRenderStatesForSeeThrough &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForSeeThrough>(md::ita::SetupRenderStatesForSeeThrough &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForSeeThrough>(md::ita::SetupRenderStatesForSeeThrough &&)::{lambda(void)#1},std::allocator<md::ita::SetupRenderStatesForSeeThrough &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForSeeThrough>(md::ita::SetupRenderStatesForSeeThrough &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForSeeThrough>(md::ita::SetupRenderStatesForSeeThrough &&)::{lambda(void)#1},std::allocator<md::ita::SetupRenderStatesForSeeThrough &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForSeeThrough>(md::ita::SetupRenderStatesForSeeThrough &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42873A0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForSeeThrough>(md::ita::SetupRenderStatesForSeeThrough &&)::{lambda(void)#1},std::allocator<md::ita::SetupRenderStatesForSeeThrough &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForSeeThrough>(md::ita::SetupRenderStatesForSeeThrough &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42873A0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForSeeThrough>(md::ita::SetupRenderStatesForSeeThrough &&)::{lambda(void)#1},std::allocator<md::ita::SetupRenderStatesForSeeThrough &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForSeeThrough>(md::ita::SetupRenderStatesForSeeThrough &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x60uLL);
  a1[2] = (char *)(v2 + 12);
  *v2 = 0x40FCAF57579CC039;
  v2[1] = "md::ls::IntendedSceneLayerType<md::SceneLayer::SeeThrough>]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB4270;
  v2[4] = "md::ls::MainPassItem]";
  v2[5] = 20;
  v2[6] = 0x73F0259EC1934FB1;
  v2[7] = "md::ls::IsTransparent]";
  v2[8] = 21;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 12)
  {
    *(_QWORD *)v3 = 0x1E85A99FD528C623;
    v2[10] = "md::ls::NeedsRenderState]";
    v2[11] = 24;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 12) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x1E85A99FD528C623;
  *((_QWORD *)v10 + 1) = "md::ls::NeedsRenderState]";
  *((_QWORD *)v10 + 2) = 24;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
}

void sub_19F6DC048(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForSeeThrough>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForSeeThrough>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForSeeThrough>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForSeeThrough>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278250;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForSeeThrough>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForSeeThrough>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278250;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

unint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForSeeThrough>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForSeeThrough>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 isValid;
  unint64_t result;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  char v52;
  uint64_t (**v53)();
  __int128 v54;
  uint64_t (***v55)();
  _BYTE v56[24];
  _BYTE *v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = gdc::Registry::storage<md::ls::IntendedSceneLayerType<(md::SceneLayer)3>>(v3);
  v5 = gdc::Registry::storage<md::ls::MainPassItem>(v3);
  v6 = gdc::Registry::storage<md::ls::IsTransparent>(v3);
  v7 = gdc::Registry::storage<md::ls::NeedsRenderState>(v3);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) >= *(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56))
    v8 = v4;
  else
    v8 = v5;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56))
    v8 = v6;
  if (*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56) < *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56))
    v8 = v7;
  v46 = v8 + 32;
  v47 = (_QWORD *)v4;
  v48 = (_QWORD *)v5;
  v49 = (_QWORD *)v6;
  v9 = *(_QWORD **)(v8 + 56);
  v10 = *(_QWORD **)(v8 + 64);
  v50 = (_QWORD *)v7;
  v51 = v9;
  if (v10 != v9
    && !gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v46))
  {
    v11 = v9 + 1;
    do
    {
      v9 = v11;
      v51 = v11;
      if (v11 == v10)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v46);
      v11 = v9 + 1;
    }
    while (!isValid);
  }
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v14 = (uint64_t *)result;
  if (v10 != v9)
  {
    while (1)
    {
      *v14 = *v9;
      v16 = **(_QWORD **)(a1 + 8);
      v17 = *(_QWORD **)v16;
      v18 = *(_QWORD **)(v16 + 8);
      if (v17 != v18)
      {
        while (*v17 != 0x41D4E9297E100630)
        {
          v17 += 5;
          if (v17 == v18)
            goto LABEL_30;
        }
      }
      if (v17 == v18)
        break;
      v20 = (_QWORD *)v17[3];
      v19 = (std::__shared_weak_count *)v17[4];
      if (!v19)
        goto LABEL_28;
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (v23)
      {
LABEL_28:
        v24 = v20[1319];
        if (v24)
          goto LABEL_32;
LABEL_31:
        v53 = (uint64_t (**)())(v20[1312] + 2208);
        v24 = geo::packed_array<md::RenderStateStorage,geo::handle<md::RenderStateItem>>::push_back(v20 + 91, &v53);
        *(int64x2_t *)v56 = vdupq_n_s64(1uLL);
        v56[16] = 1;
        std::__hash_table<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::hash<geo::handle<md::RenderStateItem>>,std::equal_to<geo::handle<md::RenderStateItem>>,true>,std::__unordered_map_equal<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::equal_to<geo::handle<md::RenderStateItem>>,std::hash<geo::handle<md::RenderStateItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::RenderStateItem>,geo::handle<md::RenderStateItem> const&,md::Counter>((uint64_t)(v20 + 86), v24, v24, (uint64_t)v56);
        v20[1319] = v24;
        goto LABEL_32;
      }
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      v24 = v20[1319];
      if (!v24)
        goto LABEL_31;
LABEL_32:
      v25 = *(_QWORD **)(a1 + 8);
      v26 = *v14;
      v53 = &off_1E427D938;
      *(_QWORD *)&v54 = v24;
      *((_QWORD *)&v54 + 1) = v26;
      v55 = &v53;
      v57 = v56;
      *(_QWORD *)v56 = &off_1E427D938;
      *(_OWORD *)&v56[8] = v54;
      v58 = 0;
      ecs2::Runtime::queueCommand(v25, (uint64_t)v56);
      if (v58 != -1)
        ((void (*)(char *, _BYTE *))off_1E42FB340[v58])(&v52, v56);
      v58 = -1;
      result = (unint64_t)v55;
      if (v55 == &v53)
      {
        result = (unint64_t)&v53;
        v27 = 4;
        goto LABEL_38;
      }
      if (v55)
      {
        v27 = 5;
LABEL_38:
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v27))();
      }
      v9 = *(_QWORD **)(v46 + 32);
      v15 = v51 + 1;
      v51 = v15;
      if (v15 != v9)
      {
        v28 = v47[4];
        while (1)
        {
          v29 = *((unsigned int *)v15 + 1);
          v30 = v29 >> 7;
          if (v29 >> 7 < (v47[5] - v28) >> 3)
          {
            result = *(_QWORD *)(v28 + 8 * v30);
            if (result)
            {
              v31 = v29 & 0x7F;
              result = *(unsigned __int16 *)(result + 2 * v31);
              v33 = v47[7];
              v32 = v47[8];
              if (result < (v32 - v33) >> 3)
              {
                result = v33 + 8 * result;
                if (result != v32 && *(_DWORD *)(result + 4) == (_DWORD)v29)
                {
                  result = v48[4];
                  if (v30 < (uint64_t)(v48[5] - result) >> 3)
                  {
                    result = *(_QWORD *)(result + 8 * v30);
                    if (result)
                    {
                      result = *(unsigned __int16 *)(result + 2 * v31);
                      v36 = v48[7];
                      v35 = v48[8];
                      if (result < (v35 - v36) >> 3)
                      {
                        result = v36 + 8 * result;
                        if (result != v35 && *(_DWORD *)(result + 4) == (_DWORD)v29)
                        {
                          result = v49[4];
                          if (v30 < (uint64_t)(v49[5] - result) >> 3)
                          {
                            result = *(_QWORD *)(result + 8 * v30);
                            if (result)
                            {
                              result = *(unsigned __int16 *)(result + 2 * v31);
                              v39 = v49[7];
                              v38 = v49[8];
                              if (result < (v38 - v39) >> 3)
                              {
                                result = v39 + 8 * result;
                                if (result != v38 && *(_DWORD *)(result + 4) == (_DWORD)v29)
                                {
                                  result = v50[4];
                                  if (v30 < (uint64_t)(v50[5] - result) >> 3)
                                  {
                                    v41 = *(_QWORD *)(result + 8 * v30);
                                    if (v41)
                                    {
                                      v42 = *(unsigned __int16 *)(v41 + 2 * v31);
                                      result = v50[7];
                                      v43 = v50[8];
                                      if (v42 < (uint64_t)(v43 - result) >> 3)
                                      {
                                        v44 = result + 8 * v42;
                                        result = *(unsigned int *)(v44 + 4);
                                        if ((_DWORD)result == (_DWORD)v29 && v44 != v43)
                                          break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v15 == v9)
          {
            v15 = v9;
            goto LABEL_16;
          }
        }
        v9 = v15;
LABEL_16:
        v51 = v15;
      }
      if (v10 == v9)
        goto LABEL_76;
    }
LABEL_30:
    v20 = 0;
    v24 = MEMORY[0x2938];
    if (MEMORY[0x2938])
      goto LABEL_32;
    goto LABEL_31;
  }
LABEL_76:
  *v14 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::IntendedSceneLayerType<(md::SceneLayer)3>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x40FCAF57579CC039;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x40FCAF57579CC039;
      if (*(_QWORD *)&v3 <= 0x40FCAF57579CC039uLL)
        v5 = 0x40FCAF57579CC039uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x40FCAF57579CC039;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x40FCAF57579CC039)
            {
              if (v7[2] == 0x40FCAF57579CC039)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x40FCAF57579CC039)
          {
            if (v7[2] == 0x40FCAF57579CC039)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::IntendedSceneLayerType<md::SceneLayer::SeeThrough>]";
  *(_QWORD *)(v11 + 24) = 58;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42729A8;
  *(_QWORD *)(v11 + 8) = 0x40FCAF57579CC039;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x40FCAF57579CC039uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x40FCAF57579CC039;
  v15[1] = "md::ls::IntendedSceneLayerType<md::SceneLayer::SeeThrough>]";
  v15[2] = 58;
  gdc::Registry::_registerStorageDataSignals(a1, 0x40FCAF57579CC039, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6DC748(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)3>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)3>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)3>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)3>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderStateStencilRefValue>(md::ita::SetupCustomRenderStateStencilRefValue &&)::{lambda(void)#2},std::allocator<md::ita::SetupCustomRenderStateStencilRefValue &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderStateStencilRefValue>(md::ita::SetupCustomRenderStateStencilRefValue &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderStateStencilRefValue>(md::ita::SetupCustomRenderStateStencilRefValue &&)::{lambda(void)#2},std::allocator<md::ita::SetupCustomRenderStateStencilRefValue &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderStateStencilRefValue>(md::ita::SetupCustomRenderStateStencilRefValue &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288948;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderStateStencilRefValue>(md::ita::SetupCustomRenderStateStencilRefValue &&)::{lambda(void)#2},std::allocator<md::ita::SetupCustomRenderStateStencilRefValue &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderStateStencilRefValue>(md::ita::SetupCustomRenderStateStencilRefValue &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288948;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderStateStencilRefValue>(md::ita::SetupCustomRenderStateStencilRefValue &&)::{lambda(void)#2},std::allocator<md::ita::SetupCustomRenderStateStencilRefValue &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderStateStencilRefValue>(md::ita::SetupCustomRenderStateStencilRefValue &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderStateStencilRefValue>(md::ita::SetupCustomRenderStateStencilRefValue &&)::{lambda(void)#1},std::allocator<md::ita::SetupCustomRenderStateStencilRefValue &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderStateStencilRefValue>(md::ita::SetupCustomRenderStateStencilRefValue &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderStateStencilRefValue>(md::ita::SetupCustomRenderStateStencilRefValue &&)::{lambda(void)#1},std::allocator<md::ita::SetupCustomRenderStateStencilRefValue &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderStateStencilRefValue>(md::ita::SetupCustomRenderStateStencilRefValue &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288990;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderStateStencilRefValue>(md::ita::SetupCustomRenderStateStencilRefValue &&)::{lambda(void)#1},std::allocator<md::ita::SetupCustomRenderStateStencilRefValue &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderStateStencilRefValue>(md::ita::SetupCustomRenderStateStencilRefValue &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288990;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderStateStencilRefValue>(md::ita::SetupCustomRenderStateStencilRefValue &&)::{lambda(void)#1},std::allocator<md::ita::SetupCustomRenderStateStencilRefValue &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderStateStencilRefValue>(md::ita::SetupCustomRenderStateStencilRefValue &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xA0C97F52893883B7;
  v2[1] = "md::ls::CustomRenderState]";
  *(_QWORD *)&result = 25;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4280;
  v2[4] = "md::ls::RenderItemID]";
  v2[5] = 20;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupCustomRenderStateStencilRefValue>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupCustomRenderStateStencilRefValue>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupCustomRenderStateStencilRefValue>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupCustomRenderStateStencilRefValue>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278D48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupCustomRenderStateStencilRefValue>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupCustomRenderStateStencilRefValue>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278D48;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupCustomRenderStateStencilRefValue>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupCustomRenderStateStencilRefValue>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58[4];
  unint64_t *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t *v63;
  char v64;
  _QWORD v65[2];
  int v66;
  _QWORD *v67;
  _QWORD v68[2];
  int v69;
  _QWORD *v70;
  int v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::CustomRenderState>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::RenderItemID>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v60, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v58, v9, v4, v6, *(_QWORD *)(v9 + 32));
  if (v59 != v63)
  {
    v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      *v11 = *v10;
      v12 = *v10;
      v13 = v4[4];
      if (v12 >> 39 < (v4[5] - v13) >> 3
        && (v14 = *(_QWORD *)(v13 + 8 * (v12 >> 39))) != 0
        && (v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            v17 = v4[7],
            v16 = v4[8],
            v15 < (v16 - v17) >> 3)
        && ((v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (v20 = *(_DWORD *)(v19 + 4) == (_DWORD)v18)
          : (v20 = 0),
            v20))
      {
        v21 = v4[11];
        v22 = v4[10] + 24 * v15;
      }
      else
      {
        v21 = v4[11];
        v22 = v21;
      }
      if (v22 == v21)
        v23 = 0;
      else
        v23 = v22;
      v24 = **(_QWORD **)(a1 + 8);
      v25 = *(_QWORD **)v24;
      v26 = *(_QWORD **)(v24 + 8);
      if (v25 != v26)
      {
        while (*v25 != 0xC94DD89A7B09BE9CLL)
        {
          v25 += 5;
          if (v25 == v26)
            goto LABEL_33;
        }
      }
      if (v25 == v26)
      {
LABEL_33:
        v27 = 0;
        if (!*(_BYTE *)(v23 + 17))
          goto LABEL_42;
      }
      else
      {
        v27 = v25[3];
        v28 = (std::__shared_weak_count *)v25[4];
        if (!v28)
          goto LABEL_70;
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(p_shared_owners);
        while (__stxr(v30 + 1, p_shared_owners));
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
          if (!*(_BYTE *)(v23 + 17))
            goto LABEL_42;
        }
        else
        {
LABEL_70:
          if (!*(_BYTE *)(v23 + 17))
            goto LABEL_42;
        }
      }
      v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
      if (!*(_BYTE *)(v23 + 17))
      {
        std::__throw_bad_optional_access[abi:nn180100]();
        __break(1u);
      }
      v33 = *(_BYTE *)(v23 + 16) + *(_BYTE *)(v32 + 2620);
      v34 = *(_QWORD **)(a1 + 8);
      v35 = HIDWORD(*v11);
      v36 = v33 | (*v11 << 32);
      v65[0] = &off_1E427F1B0;
      v65[1] = v36;
      v66 = v35;
      v67 = v65;
      v68[0] = &off_1E427F1B0;
      v70 = v68;
      v68[1] = v36;
      v69 = v35;
      v71 = 0;
      ecs2::Runtime::queueCommand(v34, (uint64_t)v68);
      if (v71 != -1)
        ((void (*)(char *, _QWORD *))off_1E42FB340[v71])(&v64, v68);
      v71 = -1;
      v37 = v67;
      if (v67 == v65)
      {
        v37 = v65;
        v38 = 4;
        goto LABEL_41;
      }
      if (v67)
      {
        v38 = 5;
LABEL_41:
        (*(void (**)(void))(*v37 + 8 * v38))();
      }
LABEL_42:
      v39 = v63;
      v10 = *(unint64_t **)(v60 + 32);
      if (++v63 != v10)
      {
        v40 = v61[4];
        v41 = (v61[5] - v40) >> 3;
        v42 = v39 + 2;
        while (1)
        {
          v43 = *((unsigned int *)v42 - 1);
          v44 = v43 >> 7;
          if (v43 >> 7 < v41)
          {
            v45 = *(_QWORD *)(v40 + 8 * v44);
            if (v45)
            {
              v46 = *(unsigned __int16 *)(v45 + 2 * (v43 & 0x7F));
              v48 = v61[7];
              v47 = v61[8];
              if (v46 < (v47 - v48) >> 3)
              {
                v49 = v48 + 8 * v46;
                if (v49 != v47 && *(_DWORD *)(v49 + 4) == (_DWORD)v43)
                {
                  v51 = v62[4];
                  if (v44 < (v62[5] - v51) >> 3)
                  {
                    v52 = *(_QWORD *)(v51 + 8 * v44);
                    if (v52)
                    {
                      v53 = *(unsigned __int16 *)(v52 + 2 * (v43 & 0x7F));
                      v55 = v62[7];
                      v54 = v62[8];
                      if (v53 < (v54 - v55) >> 3)
                      {
                        v56 = v55 + 8 * v53;
                        if (v56 != v54 && *(_DWORD *)(v56 + 4) == (_DWORD)v43)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v63 = v42;
          v20 = v42++ == v10;
          if (v20)
            goto LABEL_9;
        }
        v10 = v42 - 1;
      }
LABEL_9:
      if (v59 == v10)
        goto LABEL_66;
    }
  }
  v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_66:
  *v11 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
}

uint64_t gdc::Registry::storage<md::ls::CustomRenderState>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xA0C97F52893883B7;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xA0C97F52893883B7;
      if (*(_QWORD *)&v3 <= 0xA0C97F52893883B7)
        v5 = 0xA0C97F52893883B7 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xA0C97F52893883B7;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xA0C97F52893883B7)
            {
              if (v7[2] == 0xA0C97F52893883B7)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xA0C97F52893883B7)
          {
            if (v7[2] == 0xA0C97F52893883B7)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::CustomRenderState]";
  *(_QWORD *)(v11 + 24) = 25;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271F88;
  *(_QWORD *)(v11 + 8) = 0xA0C97F52893883B7;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xA0C97F52893883B7, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xA0C97F52893883B7;
  v15[1] = "md::ls::CustomRenderState]";
  v15[2] = 25;
  gdc::Registry::_registerStorageDataSignals(a1, 0xA0C97F52893883B7, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6DD08C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::ComponentStorageWrapper<md::ls::CustomRenderState>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,md::components::CustomRenderState>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<md::ls::CustomRenderState>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,md::components::CustomRenderState>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::CustomRenderState>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD v35[2];

  v33 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = a1[10];
  v15 = (_QWORD *)(v14 + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v16 = a1[11];
  v18 = *(_QWORD *)(v16 - 24);
  v17 = *(_QWORD *)(v16 - 16);
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (std::__shared_weak_count *)v15[1];
  *v15 = v18;
  v15[1] = v17;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  *(_WORD *)(v14 + 24 * v7 + 16) = *(_WORD *)(v16 - 8);
  v24 = a1[11];
  v25 = *(std::__shared_weak_count **)(v24 - 16);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  a1[11] = v24 - 24;
  v28 = (_QWORD *)a1[28];
  if (!v28)
    return 1;
  v29 = a1[31];
  while (1)
  {
    v35[0] = &v33;
    v35[1] = 1;
    v34 = v29;
    v30 = v28[6];
    if (!v30)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v30 + 48))(v30, &v34, v35);
    v28 = (_QWORD *)*v28;
    if (!v28)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::CustomRenderState>::contains(v31, v32);
}

BOOL gdc::ComponentStorageWrapper<md::ls::CustomRenderState>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderState>(md::ita::SetupCustomRenderState &&)::{lambda(void)#2},std::allocator<md::ita::SetupCustomRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderState>(md::ita::SetupCustomRenderState &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderState>(md::ita::SetupCustomRenderState &&)::{lambda(void)#2},std::allocator<md::ita::SetupCustomRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderState>(md::ita::SetupCustomRenderState &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284898;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderState>(md::ita::SetupCustomRenderState &&)::{lambda(void)#2},std::allocator<md::ita::SetupCustomRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderState>(md::ita::SetupCustomRenderState &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284898;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderState>(md::ita::SetupCustomRenderState &&)::{lambda(void)#2},std::allocator<md::ita::SetupCustomRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderState>(md::ita::SetupCustomRenderState &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderState>(md::ita::SetupCustomRenderState &&)::{lambda(void)#1},std::allocator<md::ita::SetupCustomRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderState>(md::ita::SetupCustomRenderState &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderState>(md::ita::SetupCustomRenderState &&)::{lambda(void)#1},std::allocator<md::ita::SetupCustomRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderState>(md::ita::SetupCustomRenderState &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42848E0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderState>(md::ita::SetupCustomRenderState &&)::{lambda(void)#1},std::allocator<md::ita::SetupCustomRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderState>(md::ita::SetupCustomRenderState &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42848E0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderState>(md::ita::SetupCustomRenderState &&)::{lambda(void)#1},std::allocator<md::ita::SetupCustomRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderState>(md::ita::SetupCustomRenderState &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0xA0C97F52893883B7;
  v2[1] = "md::ls::CustomRenderState]";
  *(_QWORD *)&result = 25;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4290;
  v2[4] = "md::ls::IntendedSceneLayerType<md::SceneLayer::AboveRoute>]";
  v2[5] = 58;
  v2[6] = 0x1E85A99FD528C623;
  v2[7] = "md::ls::NeedsRenderState]";
  v2[8] = 24;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupCustomRenderState>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupCustomRenderState>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupCustomRenderState>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupCustomRenderState>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276CF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupCustomRenderState>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupCustomRenderState>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276CF0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupCustomRenderState>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupCustomRenderState>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _BOOL4 isValid;
  uint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  char v68;
  uint64_t (**v69)();
  __int128 v70;
  uint64_t (***v71)();
  _BYTE v72[24];
  _BYTE *v73;
  int v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::CustomRenderState>(v3);
  v5 = gdc::Registry::storage<md::ls::IntendedSceneLayerType<(md::SceneLayer)4>>(v3);
  v6 = gdc::Registry::storage<md::ls::NeedsRenderState>(v3);
  v7 = v4 + 4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v4[8] - v4[7])
    v7 = (_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v6 + 32);
  v63 = v7;
  v64 = v4;
  v65 = (_QWORD *)v5;
  v66 = (_QWORD *)v6;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v67 = v8;
  if (v9 != v8
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v63))
  {
    v10 = v8 + 1;
    do
    {
      v8 = v10;
      v67 = v10;
      if (v10 == v9)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v63);
      v10 = v8 + 1;
    }
    while (!isValid);
  }
  if (v9 != v8)
  {
    v12 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      *v12 = *v8;
      v14 = *v8;
      v15 = *v8 >> 39;
      v16 = v4[4];
      if (v15 < (v4[5] - v16) >> 3
        && (v17 = *(_QWORD *)(v16 + 8 * v15)) != 0
        && (v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v14) & 0x7F)),
            v20 = v4[7],
            v19 = v4[8],
            v18 < (v19 - v20) >> 3)
        && ((v21 = HIDWORD(v14), v22 = v20 + 8 * v18, v22 != v19)
          ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v21)
          : (v23 = 0),
            v23))
      {
        v24 = v4[11];
        v25 = v4[10] + 24 * v18;
      }
      else
      {
        v24 = v4[11];
        v25 = v24;
      }
      if (v25 == v24)
        v26 = 0;
      else
        v26 = v25;
      v27 = **(_QWORD **)(a1 + 8);
      v28 = *(_QWORD **)v27;
      v29 = *(_QWORD **)(v27 + 8);
      if (v28 != v29)
      {
        while (*v28 != 0x41D4E9297E100630)
        {
          v28 += 5;
          if (v28 == v29)
            goto LABEL_37;
        }
      }
      if (v28 == v29)
      {
LABEL_37:
        v31 = 0;
      }
      else
      {
        v31 = v28[3];
        v30 = (std::__shared_weak_count *)v28[4];
        if (v30)
        {
          p_shared_owners = (unint64_t *)&v30->__shared_owners_;
          do
            v33 = __ldxr(p_shared_owners);
          while (__stxr(v33 + 1, p_shared_owners));
          do
            v34 = __ldaxr(p_shared_owners);
          while (__stlxr(v34 - 1, p_shared_owners));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
      }
      v35 = *(_QWORD *)v26;
      if (*(_BYTE *)(v26 + 17))
        *(_BYTE *)(v35 + 208) = 1;
      v69 = (uint64_t (**)())v35;
      v36 = geo::packed_array<md::RenderStateStorage,geo::handle<md::RenderStateItem>>::push_back((_QWORD *)(v31 + 728), &v69);
      *(int64x2_t *)v72 = vdupq_n_s64(1uLL);
      v72[16] = 1;
      std::__hash_table<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::hash<geo::handle<md::RenderStateItem>>,std::equal_to<geo::handle<md::RenderStateItem>>,true>,std::__unordered_map_equal<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::equal_to<geo::handle<md::RenderStateItem>>,std::hash<geo::handle<md::RenderStateItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::RenderStateItem>,geo::handle<md::RenderStateItem> const&,md::Counter>(v31 + 688, v36, v36, (uint64_t)v72);
      v37 = *(_QWORD **)(a1 + 8);
      v38 = *v12;
      v69 = &off_1E427D938;
      *(_QWORD *)&v70 = v36;
      *((_QWORD *)&v70 + 1) = v38;
      v71 = &v69;
      v73 = v72;
      *(_QWORD *)v72 = &off_1E427D938;
      *(_OWORD *)&v72[8] = v70;
      v74 = 0;
      ecs2::Runtime::queueCommand(v37, (uint64_t)v72);
      if (v74 != -1)
        ((void (*)(char *, _BYTE *))off_1E42FB340[v74])(&v68, v72);
      v74 = -1;
      result = (uint64_t)v71;
      if (v71 == &v69)
        break;
      if (v71)
      {
        v40 = 5;
LABEL_46:
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v40))();
      }
      v8 = (_QWORD *)v63[4];
      v13 = v67 + 1;
      v67 = v13;
      if (v13 != v8)
      {
        v41 = v64[4];
        while (1)
        {
          v42 = *((unsigned int *)v13 + 1);
          v43 = v42 >> 7;
          if (v42 >> 7 < (v64[5] - v41) >> 3)
          {
            v44 = *(_QWORD *)(v41 + 8 * v43);
            if (v44)
            {
              v45 = v42 & 0x7F;
              v46 = *(unsigned __int16 *)(v44 + 2 * v45);
              v47 = v64[7];
              result = v64[8];
              if (v46 < (result - v47) >> 3)
              {
                v48 = v47 + 8 * v46;
                if (v48 != result && *(_DWORD *)(v48 + 4) == (_DWORD)v42)
                {
                  v50 = v65[4];
                  result = v65[5] - v50;
                  if (v43 < result >> 3)
                  {
                    v51 = *(_QWORD *)(v50 + 8 * v43);
                    if (v51)
                    {
                      v52 = *(unsigned __int16 *)(v51 + 2 * v45);
                      v53 = v65[7];
                      result = v65[8];
                      if (v52 < (result - v53) >> 3)
                      {
                        v54 = v53 + 8 * v52;
                        if (v54 != result && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        {
                          v56 = v66[4];
                          result = v66[5] - v56;
                          if (v43 < result >> 3)
                          {
                            v57 = *(_QWORD *)(v56 + 8 * v43);
                            if (v57)
                            {
                              v58 = *(unsigned __int16 *)(v57 + 2 * v45);
                              v60 = v66[7];
                              v59 = v66[8];
                              result = v59 - v60;
                              if (v58 < (v59 - v60) >> 3)
                              {
                                v61 = v60 + 8 * v58;
                                if (*(_DWORD *)(v61 + 4) == (_DWORD)v42 && v61 != v59)
                                  break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v13 == v8)
          {
            v13 = v8;
            goto LABEL_13;
          }
        }
        v8 = v13;
LABEL_13:
        v67 = v13;
      }
      if (v9 == v8)
        goto LABEL_76;
    }
    result = (uint64_t)&v69;
    v40 = 4;
    goto LABEL_46;
  }
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v12 = (uint64_t *)result;
LABEL_76:
  *v12 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::IntendedSceneLayerType<(md::SceneLayer)4>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x5DA2A39FD10CA33BLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x5DA2A39FD10CA33BLL;
      if (*(_QWORD *)&v3 <= 0x5DA2A39FD10CA33BuLL)
        v5 = 0x5DA2A39FD10CA33BuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x5DA2A39FD10CA33BLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x5DA2A39FD10CA33BLL)
            {
              if (v7[2] == 0x5DA2A39FD10CA33BLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x5DA2A39FD10CA33BLL)
          {
            if (v7[2] == 0x5DA2A39FD10CA33BLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::IntendedSceneLayerType<md::SceneLayer::AboveRoute>]";
  *(_QWORD *)(v11 + 24) = 58;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42729D8;
  *(_QWORD *)(v11 + 8) = 0x5DA2A39FD10CA33BLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x5DA2A39FD10CA33BuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x5DA2A39FD10CA33BLL;
  v15[1] = "md::ls::IntendedSceneLayerType<md::SceneLayer::AboveRoute>]";
  v15[2] = 58;
  gdc::Registry::_registerStorageDataSignals(a1, 0x5DA2A39FD10CA33BLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6DDB44(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)4>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)4>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)4>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)4>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupDefaultRenderState>(md::ita::SetupDefaultRenderState &&)::{lambda(void)#2},std::allocator<md::ita::SetupDefaultRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupDefaultRenderState>(md::ita::SetupDefaultRenderState &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupDefaultRenderState>(md::ita::SetupDefaultRenderState &&)::{lambda(void)#2},std::allocator<md::ita::SetupDefaultRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupDefaultRenderState>(md::ita::SetupDefaultRenderState &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284E38;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupDefaultRenderState>(md::ita::SetupDefaultRenderState &&)::{lambda(void)#2},std::allocator<md::ita::SetupDefaultRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupDefaultRenderState>(md::ita::SetupDefaultRenderState &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284E38;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupDefaultRenderState>(md::ita::SetupDefaultRenderState &&)::{lambda(void)#2},std::allocator<md::ita::SetupDefaultRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupDefaultRenderState>(md::ita::SetupDefaultRenderState &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupDefaultRenderState>(md::ita::SetupDefaultRenderState &&)::{lambda(void)#1},std::allocator<md::ita::SetupDefaultRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupDefaultRenderState>(md::ita::SetupDefaultRenderState &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupDefaultRenderState>(md::ita::SetupDefaultRenderState &&)::{lambda(void)#1},std::allocator<md::ita::SetupDefaultRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupDefaultRenderState>(md::ita::SetupDefaultRenderState &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284E80;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupDefaultRenderState>(md::ita::SetupDefaultRenderState &&)::{lambda(void)#1},std::allocator<md::ita::SetupDefaultRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupDefaultRenderState>(md::ita::SetupDefaultRenderState &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284E80;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupDefaultRenderState>(md::ita::SetupDefaultRenderState &&)::{lambda(void)#1},std::allocator<md::ita::SetupDefaultRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupDefaultRenderState>(md::ita::SetupDefaultRenderState &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0x1E85A99FD528C623;
  v2[1] = "md::ls::NeedsRenderState]";
  *(_QWORD *)&result = 24;
  *((_OWORD *)v2 + 1) = xmmword_19FFB42A0;
  v2[4] = "md::ls::IsTransparent]";
  v2[5] = 21;
  v2[6] = 0xD68EA0DE832DEC03;
  v2[7] = "md::ls::RenderItemID]";
  v2[8] = 20;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupDefaultRenderState>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupDefaultRenderState>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupDefaultRenderState>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupDefaultRenderState>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276FC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupDefaultRenderState>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupDefaultRenderState>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276FC0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupDefaultRenderState>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupDefaultRenderState>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  uint64_t *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;
  char v62;
  uint64_t (**v63)();
  __int128 v64;
  uint64_t (***v65)();
  _BYTE v66[24];
  _BYTE *v67;
  int v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::NeedsRenderState>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::RenderItemID>(v3);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::IsTransparent>(v3);
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v7 = (uint64_t)(v4 + 4);
  else
    v7 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v7, v4, v5, *(_QWORD *)(v7 + 24));
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v8, v4, v5, *(_QWORD *)(v8 + 32));
  if (v57 != v61)
  {
    v10 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      *v10 = *v9;
      v11 = *v9;
      v12 = v6[4];
      if (v11 >> 39 < (v6[5] - v12) >> 3
        && (v13 = *(_QWORD *)(v12 + 8 * (v11 >> 39))) != 0
        && (v14 = *(unsigned __int16 *)(v13 + 2 * (HIDWORD(v11) & 0x7F)),
            v16 = v6[7],
            v15 = v6[8],
            v14 < (v15 - v16) >> 3)
        && ((v17 = HIDWORD(v11), v18 = v16 + 8 * v14, v18 != v15)
          ? (v19 = *(_DWORD *)(v18 + 4) == (_DWORD)v17)
          : (v19 = 0),
            v19))
      {
        v20 = v6[11];
        v21 = v6[10] + 4 * v14;
      }
      else
      {
        v20 = v6[11];
        v21 = v20;
      }
      v22 = **(_QWORD **)(a1 + 8);
      v23 = *(_QWORD **)v22;
      v24 = *(_QWORD **)(v22 + 8);
      if (v23 != v24)
      {
        while (*v23 != 0x41D4E9297E100630)
        {
          v23 += 5;
          if (v23 == v24)
            goto LABEL_31;
        }
      }
      if (v23 == v24)
      {
LABEL_31:
        v26 = 0;
        v30 = MEMORY[0x20];
        if (MEMORY[0x20])
          goto LABEL_29;
      }
      else
      {
        v26 = (uint64_t *)v23[3];
        v25 = (std::__shared_weak_count *)v23[4];
        if (!v25)
          goto LABEL_28;
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
        do
          v29 = __ldaxr(p_shared_owners);
        while (__stlxr(v29 - 1, p_shared_owners));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
          v30 = v26[4];
          if (v30)
          {
LABEL_29:
            v31 = v26[5];
            if (!v31)
              goto LABEL_33;
            goto LABEL_34;
          }
        }
        else
        {
LABEL_28:
          v30 = v26[4];
          if (v30)
            goto LABEL_29;
        }
      }
      v32 = md::DaVinciRenderStateCache::renderState((unsigned __int8 **)(v26[1312] + 2424), 3, 1, 1, 0, 1, 0, 3);
      *v26 = v32;
      v63 = (uint64_t (**)())v32;
      v30 = geo::packed_array<md::RenderStateStorage,geo::handle<md::RenderStateItem>>::push_back(v26 + 91, &v63);
      *(int64x2_t *)v66 = vdupq_n_s64(1uLL);
      v66[16] = 1;
      std::__hash_table<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::hash<geo::handle<md::RenderStateItem>>,std::equal_to<geo::handle<md::RenderStateItem>>,true>,std::__unordered_map_equal<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::equal_to<geo::handle<md::RenderStateItem>>,std::hash<geo::handle<md::RenderStateItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::RenderStateItem>,geo::handle<md::RenderStateItem> const&,md::Counter>((uint64_t)(v26 + 86), v30, v30, (uint64_t)v66);
      v26[4] = v30;
      v31 = v26[5];
      if (!v31)
      {
LABEL_33:
        v33 = md::DaVinciRenderStateCache::renderState((unsigned __int8 **)(v26[1312] + 2424), 3, 0, 1, 0, 1, 0, 3);
        v26[1] = v33;
        v63 = (uint64_t (**)())v33;
        v31 = geo::packed_array<md::RenderStateStorage,geo::handle<md::RenderStateItem>>::push_back(v26 + 91, &v63);
        *(int64x2_t *)v66 = vdupq_n_s64(1uLL);
        v66[16] = 1;
        std::__hash_table<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::hash<geo::handle<md::RenderStateItem>>,std::equal_to<geo::handle<md::RenderStateItem>>,true>,std::__unordered_map_equal<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::equal_to<geo::handle<md::RenderStateItem>>,std::hash<geo::handle<md::RenderStateItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::RenderStateItem>,geo::handle<md::RenderStateItem> const&,md::Counter>((uint64_t)(v26 + 86), v31, v31, (uint64_t)v66);
        v26[5] = v31;
      }
LABEL_34:
      v34 = *(_QWORD **)(a1 + 8);
      v35 = *v10;
      if (v21 == v20 || !v21)
      {
        v63 = &off_1E427D938;
        *(_QWORD *)&v64 = v30;
      }
      else
      {
        v63 = &off_1E427D938;
        *(_QWORD *)&v64 = v31;
      }
      *((_QWORD *)&v64 + 1) = v35;
      v65 = &v63;
      *(_QWORD *)v66 = &off_1E427D938;
      v67 = v66;
      *(_OWORD *)&v66[8] = v64;
      v68 = 0;
      ecs2::Runtime::queueCommand(v34, (uint64_t)v66);
      if (v68 != -1)
        ((void (*)(char *, _BYTE *))off_1E42FB340[v68])(&v62, v66);
      v68 = -1;
      result = (uint64_t)v65;
      if (v65 == &v63)
      {
        result = (uint64_t)&v63;
        v37 = 4;
        goto LABEL_44;
      }
      if (v65)
      {
        v37 = 5;
LABEL_44:
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v37))();
      }
      v38 = v61;
      v9 = *(unint64_t **)(v58 + 32);
      if (++v61 != v9)
      {
        v39 = v59[4];
        v40 = (v59[5] - v39) >> 3;
        v41 = v38 + 2;
        while (1)
        {
          v42 = *((unsigned int *)v41 - 1);
          v43 = v42 >> 7;
          if (v42 >> 7 < v40)
          {
            v44 = *(_QWORD *)(v39 + 8 * v43);
            if (v44)
            {
              v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
              v46 = v59[7];
              result = v59[8];
              if (v45 < (result - v46) >> 3)
              {
                v47 = v46 + 8 * v45;
                if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
                {
                  v49 = v60[4];
                  result = v60[5] - v49;
                  if (v43 < result >> 3)
                  {
                    v50 = *(_QWORD *)(v49 + 8 * v43);
                    if (v50)
                    {
                      v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                      v53 = v60[7];
                      v52 = v60[8];
                      result = v52 - v53;
                      if (v51 < (v52 - v53) >> 3)
                      {
                        v54 = v53 + 8 * v51;
                        if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v61 = v41;
          v19 = v41++ == v9;
          if (v19)
            goto LABEL_9;
        }
        v9 = v41 - 1;
      }
LABEL_9:
      if (v57 == v9)
        goto LABEL_69;
    }
  }
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v10 = (uint64_t *)result;
LABEL_69:
  *v10 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorBlendedWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorBlendedWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289488;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorBlendedWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289488;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorBlendedWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6DE3F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;

  v3 = a1[1];
  v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
    v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (_QWORD)v5) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[24 * v6];
    *(_QWORD *)v11 = 0xC62D89929260CB56;
    *((_QWORD *)v11 + 1) = "md::ls::FunctionConstants]";
    *((_QWORD *)v11 + 2) = 25;
    v4 = v11 + 24;
    if (v3 != v5)
    {
      do
      {
        v12 = *(_OWORD *)(v3 - 24);
        *((_QWORD *)v11 - 1) = *((_QWORD *)v3 - 1);
        *(_OWORD *)(v11 - 24) = v12;
        v11 -= 24;
        v3 -= 24;
      }
      while (v3 != v5);
      v3 = *a1;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = &v10[24 * v9];
    if (v3)
      operator delete(v3);
  }
  else
  {
    *(_QWORD *)v3 = 0xC62D89929260CB56;
    *((_QWORD *)v3 + 1) = "md::ls::FunctionConstants]";
    *((_QWORD *)v3 + 2) = 25;
    v4 = v3 + 24;
  }
  a1[1] = v4;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorBlendedWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorBlendedWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42894D0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorBlendedWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42894D0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorBlendedWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls19ColorRampDataHandleEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6DE604(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls19ColorRampDataHandleEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;

  v3 = a1[1];
  v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
    v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (_QWORD)v5) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[24 * v6];
    *(_QWORD *)v11 = 0xE103B5C60804137ELL;
    *((_QWORD *)v11 + 1) = "md::ls::ColorRampDataHandle]";
    *((_QWORD *)v11 + 2) = 27;
    v4 = v11 + 24;
    if (v3 != v5)
    {
      do
      {
        v12 = *(_OWORD *)(v3 - 24);
        *((_QWORD *)v11 - 1) = *((_QWORD *)v3 - 1);
        *(_OWORD *)(v11 - 24) = v12;
        v11 -= 24;
        v3 -= 24;
      }
      while (v3 != v5);
      v3 = *a1;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = &v10[24 * v9];
    if (v3)
      operator delete(v3);
  }
  else
  {
    *(_QWORD *)v3 = 0xE103B5C60804137ELL;
    *((_QWORD *)v3 + 1) = "md::ls::ColorRampDataHandle]";
    *((_QWORD *)v3 + 2) = 27;
    v4 = v3 + 24;
  }
  a1[1] = v4;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorBlendedWater>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorBlendedWater>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorBlendedWater>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorBlendedWater>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42792E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorBlendedWater>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorBlendedWater>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42792E8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorBlendedWater>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorBlendedWater>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (***v8)(_QWORD);
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42758F8;
  v4[1] = a2;
  v5 = ***(uint64_t ****)(a1 + 8);
  if (v5 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v5 != 0x22D45F5AAD4BF408)
  {
    v6 = v5 + 5;
    do
    {
      v7 = *v6;
      v6 += 5;
    }
    while (v7 != 0x22D45F5AAD4BF408);
    v5 = v6 - 5;
  }
  v8 = (uint64_t (***)(_QWORD))v5[3];
  v9 = (std::__shared_weak_count *)v5[4];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = *(_QWORD **)((**v8)(v8) + 8);
  v14 = v13[1];
  if ((v14 & (v14 - 1)) != 0)
  {
    v16 = 0xE42D19AFCA302E68;
    if (v14 <= 0xE42D19AFCA302E68)
      v16 = 0xE42D19AFCA302E68 % v14;
    v15 = *(_QWORD **)(*v13 + 8 * v16);
    do
    {
      do
        v15 = (_QWORD *)*v15;
      while (v15[1] != 0xE42D19AFCA302E68);
    }
    while (v15[2] != 0xE42D19AFCA302E68);
  }
  else
  {
    v15 = *(_QWORD **)(*v13 + 8 * ((v14 - 1) & 0xE42D19AFCA302E68));
    do
    {
      do
        v15 = (_QWORD *)*v15;
      while (v15[1] != 0xE42D19AFCA302E68);
    }
    while (v15[2] != 0xE42D19AFCA302E68);
  }
  v17 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v15[5] + 32) + 32) + 254));
  if ((v17 & 1) != 0)
  {
    v29 = 0;
    v18 = **(_QWORD **)(a1 + 8);
    v19 = *(_QWORD **)v18;
    v20 = *(_QWORD **)(v18 + 8);
    if (v19 != v20)
    {
      while (*v19 != 0x41D4E9297E100630)
      {
        v19 += 5;
        if (v19 == v20)
          goto LABEL_34;
      }
    }
    if (v19 == v20)
    {
LABEL_34:
      v22 = 0;
    }
    else
    {
      v22 = v19[3];
      v21 = (std::__shared_weak_count *)v19[4];
      if (v21)
      {
        v23 = (unint64_t *)&v21->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
        do
          v25 = __ldaxr(v23);
        while (__stlxr(v25 - 1, v23));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
    v29 = v22;
    v30[0] = &off_1E427C9C0;
    v30[1] = &v29;
    v31 = v30;
    (*(void (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v30);
    v26 = v31;
    if (v31 == v30)
    {
      v27 = 4;
      v26 = v30;
      goto LABEL_39;
    }
    if (v31)
    {
      v27 = 5;
LABEL_39:
      (*(void (**)(void))(*v26 + 8 * v27))();
    }
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F6DEACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::FunctionConstants &,md::ls::ColorRampDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::ColorRampDataHandle const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::FunctionConstants &,md::ls::ColorRampDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::ColorRampDataHandle const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57[4];
  unint64_t *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t *v62;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::ColorRampDataHandle>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7])
    v8 = (uint64_t)(v5 + 4);
  else
    v8 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v59, v8, v5, v4, *(_QWORD *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7])
    v9 = (uint64_t)v7;
  else
    v9 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v57, v9, v6, v4, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v58 == v62)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v6[4];
    if (v13 >> 39 >= (v6[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v6[7];
    v19 = v6[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v56 = 33 * v18;
      v23 = v6[11];
      v24 = v6[10] + v56;
    }
    else
    {
LABEL_17:
      v23 = v6[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v4[4];
    if (v15 < (v4[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v4[7];
        v29 = v4[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v4[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v62;
    v11 = *(unint64_t **)(v59 + 32);
    if (++v62 != v11)
    {
      v39 = v60[4];
      v40 = (v60[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v60[7];
            result = v60[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v61[4];
                result = v61[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v61[7];
                    v52 = v61[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v62 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v58 == v11)
      goto LABEL_56;
  }
  v33 = v4[11];
  v34 = v4[10] + 8 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::FunctionConstants &,md::ls::ColorRampDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::ColorRampDataHandle const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::ColorRampDataHandle>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v2[8] - v2[7] >= v3[8] - v3[7])
    v6 = (uint64_t)(v3 + 4);
  else
    v6 = (uint64_t)(v2 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v3, v2, *(_QWORD *)(v6 + 24));
  if (v2[8] - v2[7] >= v4[8] - v4[7])
    v7 = (uint64_t)v5;
  else
    v7 = (uint64_t)(v2 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v4, v2, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288A68;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288A68;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6DEF44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288AB0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288AB0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls19ColorRampDataHandleEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6DEFF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorWater>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorWater>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorWater>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorWater>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278DD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorWater>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorWater>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278DD8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorWater>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorWater>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t v40;
  uint64_t result;
  unint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61[4];
  unint64_t *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  unint64_t *v66;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::ColorRampDataHandle>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7])
    v8 = (uint64_t)(v5 + 4);
  else
    v8 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v63, v8, v5, v4, *(_QWORD *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7])
    v9 = (uint64_t)v7;
  else
    v9 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v61, v9, v6, v4, *(_QWORD *)(v9 + 32));
  if (v62 == v66)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v11 = (_QWORD *)result;
  }
  else
  {
    v11 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *v11 = *v10;
      v12 = *v10;
      v13 = HIDWORD(*v10);
      v14 = v12 >> 39;
      v15 = v6[4];
      if (v12 >> 39 < (v6[5] - v15) >> 3
        && (v16 = *(_QWORD *)(v15 + 8 * v14)) != 0
        && (v17 = *(unsigned __int16 *)(v16 + 2 * (HIDWORD(v12) & 0x7F)),
            v19 = v6[7],
            v18 = v6[8],
            v17 < (v18 - v19) >> 3)
        && ((v20 = v19 + 8 * v17, v20 != v18) ? (v21 = *(_DWORD *)(v20 + 4) == (_DWORD)v13) : (v21 = 0), v21))
      {
        v60 = 33 * v17;
        v22 = v6[11];
        v23 = v6[10] + v60;
      }
      else
      {
        v22 = v6[11];
        v23 = v22;
      }
      if (v23 == v22)
        v24 = 0;
      else
        v24 = v23;
      v25 = v4[4];
      if (v14 < (v4[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v14)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v12) & 0x7F)),
            v29 = v4[7],
            v28 = v4[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v13) : (v31 = 0), v31))
      {
        v32 = (unint64_t *)(v4[10] + 8 * v27);
      }
      else
      {
        v32 = (unint64_t *)v4[11];
      }
      v33 = **(_QWORD **)(a1 + 8);
      v34 = *(_QWORD **)v33;
      v35 = *(_QWORD **)(v33 + 8);
      if (v34 != v35)
      {
        while (*v34 != 0x41D4E9297E100630)
        {
          v34 += 5;
          if (v34 == v35)
            goto LABEL_40;
        }
      }
      if (v34 == v35)
      {
LABEL_40:
        v36 = 0;
      }
      else
      {
        v36 = v34[3];
        v37 = (std::__shared_weak_count *)v34[4];
        if (v37)
        {
          p_shared_owners = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldxr(p_shared_owners);
          while (__stxr(v39 + 1, p_shared_owners));
          do
            v40 = __ldaxr(p_shared_owners);
          while (__stlxr(v40 - 1, p_shared_owners));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
      }
      result = md::VKMRenderResourcesStore::getColorRampData(v36, *v32);
      if (result && *(_BYTE *)(result + 32) && *(_QWORD *)(result + 16))
        *(_BYTE *)(v24 + 5) = 1;
      v42 = v66;
      v10 = *(unint64_t **)(v63 + 32);
      if (++v66 != v10)
      {
        v43 = v64[4];
        v44 = (v64[5] - v43) >> 3;
        v45 = v42 + 2;
        while (1)
        {
          v46 = *((unsigned int *)v45 - 1);
          v47 = v46 >> 7;
          if (v46 >> 7 < v44)
          {
            v48 = *(_QWORD *)(v43 + 8 * v47);
            if (v48)
            {
              v49 = *(unsigned __int16 *)(v48 + 2 * (v46 & 0x7F));
              v50 = v64[7];
              result = v64[8];
              if (v49 < (result - v50) >> 3)
              {
                v51 = v50 + 8 * v49;
                if (v51 != result && *(_DWORD *)(v51 + 4) == (_DWORD)v46)
                {
                  v53 = v65[4];
                  result = v65[5] - v53;
                  if (v47 < result >> 3)
                  {
                    v54 = *(_QWORD *)(v53 + 8 * v47);
                    if (v54)
                    {
                      v55 = *(unsigned __int16 *)(v54 + 2 * (v46 & 0x7F));
                      v57 = v65[7];
                      v56 = v65[8];
                      result = v56 - v57;
                      if (v55 < (v56 - v57) >> 3)
                      {
                        v58 = v57 + 8 * v55;
                        if (v58 != v56 && *(_DWORD *)(v58 + 4) == (_DWORD)v46)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v66 = v45;
          v21 = v45++ == v10;
          if (v21)
            goto LABEL_9;
        }
        v10 = v45 - 1;
      }
LABEL_9:
      ;
    }
    while (v62 != v10);
  }
  *v11 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorClimateTint>(md::ita::PrepareFunctionConstantDescriptorClimateTint &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorClimateTint &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorClimateTint>(md::ita::PrepareFunctionConstantDescriptorClimateTint &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorClimateTint>(md::ita::PrepareFunctionConstantDescriptorClimateTint &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorClimateTint &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorClimateTint>(md::ita::PrepareFunctionConstantDescriptorClimateTint &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42893F8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorClimateTint>(md::ita::PrepareFunctionConstantDescriptorClimateTint &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorClimateTint &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorClimateTint>(md::ita::PrepareFunctionConstantDescriptorClimateTint &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42893F8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorClimateTint>(md::ita::PrepareFunctionConstantDescriptorClimateTint &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorClimateTint &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorClimateTint>(md::ita::PrepareFunctionConstantDescriptorClimateTint &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6DF480(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorClimateTint>(md::ita::PrepareFunctionConstantDescriptorClimateTint &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorClimateTint &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorClimateTint>(md::ita::PrepareFunctionConstantDescriptorClimateTint &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorClimateTint>(md::ita::PrepareFunctionConstantDescriptorClimateTint &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorClimateTint &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorClimateTint>(md::ita::PrepareFunctionConstantDescriptorClimateTint &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289440;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorClimateTint>(md::ita::PrepareFunctionConstantDescriptorClimateTint &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorClimateTint &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorClimateTint>(md::ita::PrepareFunctionConstantDescriptorClimateTint &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289440;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorClimateTint>(md::ita::PrepareFunctionConstantDescriptorClimateTint &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorClimateTint &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorClimateTint>(md::ita::PrepareFunctionConstantDescriptorClimateTint &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x11BB47B172EB0B40;
  result[1] = "md::ls::NeedsClimateTint]";
  result[2] = 24;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorClimateTint>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorClimateTint>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorClimateTint>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorClimateTint>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42792A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorClimateTint>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorClimateTint>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42792A0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorClimateTint>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorClimateTint>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t *v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  int8x8_t *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t v38;
  int8x8_t v39;
  unint64_t v40;
  uint8x8_t v41;
  unint64_t v42;
  uint64_t **v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69[4];
  unint64_t *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t *v74;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::NeedsClimateTint>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7])
    v8 = (uint64_t)(v5 + 4);
  else
    v8 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v71, v8, v5, v4, *(_QWORD *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7])
    v9 = (uint64_t)v7;
  else
    v9 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v69, v9, v6, v4, *(_QWORD *)(v9 + 32));
  if (v70 != v74)
  {
    v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      *v11 = *v10;
      v12 = *v10;
      v13 = HIDWORD(*v10);
      v14 = v12 >> 39;
      v15 = v6[4];
      if (v12 >> 39 < (v6[5] - v15) >> 3
        && (v16 = *(_QWORD *)(v15 + 8 * v14)) != 0
        && (v17 = *(unsigned __int16 *)(v16 + 2 * (HIDWORD(v12) & 0x7F)),
            v19 = v6[7],
            v18 = v6[8],
            v17 < (v18 - v19) >> 3)
        && ((v20 = v19 + 8 * v17, v20 != v18) ? (v21 = *(_DWORD *)(v20 + 4) == (_DWORD)v13) : (v21 = 0), v21))
      {
        v68 = 33 * v17;
        v22 = v6[11];
        v23 = v6[10] + v68;
      }
      else
      {
        v22 = v6[11];
        v23 = v22;
      }
      if (v23 == v22)
        v24 = 0;
      else
        v24 = v23;
      v25 = v4[4];
      if (v14 < (v4[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v14)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v12) & 0x7F)),
            v29 = v4[7],
            v28 = v4[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v13) : (v31 = 0), v31))
      {
        v32 = (unint64_t *)(v4[10] + 8 * v27);
      }
      else
      {
        v32 = (unint64_t *)v4[11];
      }
      v33 = ***(_QWORD ****)(a1 + 8);
      if (v33 != *(_QWORD **)(**(_QWORD **)(a1 + 8) + 8))
      {
        while (*v33 != 0x41D4E9297E100630)
          v33 += 5;
      }
      v35 = (int8x8_t *)v33[3];
      v34 = (std::__shared_weak_count *)v33[4];
      if (!v34)
        goto LABEL_38;
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v37 = __ldxr(p_shared_owners);
      while (__stxr(v37 + 1, p_shared_owners));
      do
        v38 = __ldaxr(p_shared_owners);
      while (__stlxr(v38 - 1, p_shared_owners));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
        v39 = v35[1286];
        if (!*(_QWORD *)&v39)
          goto LABEL_60;
      }
      else
      {
LABEL_38:
        v39 = v35[1286];
        if (!*(_QWORD *)&v39)
          goto LABEL_60;
      }
      v40 = *v32;
      v41 = (uint8x8_t)vcnt_s8(v39);
      v41.i16[0] = vaddlv_u8(v41);
      if (v41.u32[0] > 1uLL)
      {
        v42 = *v32;
        if (*(_QWORD *)&v39 <= v40)
          v42 = v40 % *(_QWORD *)&v39;
      }
      else
      {
        v42 = (*(_QWORD *)&v39 - 1) & v40;
      }
      v43 = *(uint64_t ***)(*(_QWORD *)&v35[1285] + 8 * v42);
      if (!v43 || (v44 = *v43) == 0)
      {
LABEL_60:
        v48 = 0;
        goto LABEL_61;
      }
      if (v41.u32[0] < 2uLL)
      {
        v45 = *(_QWORD *)&v39 - 1;
        while (1)
        {
          v47 = v44[1];
          if (v47 == v40)
          {
            if (v44[2] == v40)
              goto LABEL_83;
          }
          else if ((v47 & v45) != v42)
          {
            goto LABEL_60;
          }
          v44 = (uint64_t *)*v44;
          if (!v44)
            goto LABEL_60;
        }
      }
      while (1)
      {
        v46 = v44[1];
        if (v46 == v40)
          break;
        if (v46 >= *(_QWORD *)&v39)
          v46 %= *(_QWORD *)&v39;
        if (v46 != v42)
          goto LABEL_60;
LABEL_48:
        v44 = (uint64_t *)*v44;
        if (!v44)
          goto LABEL_60;
      }
      if (v44[2] != v40)
        goto LABEL_48;
LABEL_83:
      v48 = *((_BYTE *)v44 + 24) != 0;
LABEL_61:
      *(_BYTE *)(v24 + 28) = v48;
      v49 = v74;
      v10 = *(unint64_t **)(v71 + 32);
      if (++v74 != v10)
      {
        v50 = v72[4];
        v51 = (v72[5] - v50) >> 3;
        v52 = v49 + 2;
        while (1)
        {
          v53 = *((unsigned int *)v52 - 1);
          v54 = v53 >> 7;
          if (v53 >> 7 < v51)
          {
            v55 = *(_QWORD *)(v50 + 8 * v54);
            if (v55)
            {
              v56 = *(unsigned __int16 *)(v55 + 2 * (v53 & 0x7F));
              v58 = v72[7];
              v57 = v72[8];
              if (v56 < (v57 - v58) >> 3)
              {
                v59 = v58 + 8 * v56;
                if (v59 != v57 && *(_DWORD *)(v59 + 4) == (_DWORD)v53)
                {
                  v61 = v73[4];
                  if (v54 < (v73[5] - v61) >> 3)
                  {
                    v62 = *(_QWORD *)(v61 + 8 * v54);
                    if (v62)
                    {
                      v63 = *(unsigned __int16 *)(v62 + 2 * (v53 & 0x7F));
                      v65 = v73[7];
                      v64 = v73[8];
                      if (v63 < (v64 - v65) >> 3)
                      {
                        v66 = v65 + 8 * v63;
                        if (v66 != v64 && *(_DWORD *)(v66 + 4) == (_DWORD)v53)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v74 = v52;
          v21 = v52++ == v10;
          if (v21)
            goto LABEL_9;
        }
        v10 = v52 - 1;
      }
LABEL_9:
      if (v70 == v10)
        goto LABEL_85;
    }
  }
  v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_85:
  *v11 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>(md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>(md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>(md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>(md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42896C8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>(md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>(md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42896C8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>(md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>(md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6DFA78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>(md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>(md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>(md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>(md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289710;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>(md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>(md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289710;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>(md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>(md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls31StyleRouteLineMaskDataKeyHandleEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6DFB28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls31StyleRouteLineMaskDataKeyHandleEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;

  v3 = a1[1];
  v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
    v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (_QWORD)v5) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[24 * v6];
    *(_QWORD *)v11 = 0x8E45E81B6E5A8E0ELL;
    *((_QWORD *)v11 + 1) = "md::ls::StyleRouteLineMaskDataKeyHandle]";
    *((_QWORD *)v11 + 2) = 39;
    v4 = v11 + 24;
    if (v3 != v5)
    {
      do
      {
        v12 = *(_OWORD *)(v3 - 24);
        *((_QWORD *)v11 - 1) = *((_QWORD *)v3 - 1);
        *(_OWORD *)(v11 - 24) = v12;
        v11 -= 24;
        v3 -= 24;
      }
      while (v3 != v5);
      v3 = *a1;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = &v10[24 * v9];
    if (v3)
      operator delete(v3);
  }
  else
  {
    *(_QWORD *)v3 = 0x8E45E81B6E5A8E0ELL;
    *((_QWORD *)v3 + 1) = "md::ls::StyleRouteLineMaskDataKeyHandle]";
    *((_QWORD *)v3 + 2) = 39;
    v4 = v3 + 24;
  }
  a1[1] = v4;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279408;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4279408;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275928;
  v4[1] = a2;
  v5 = ***(uint64_t ****)(a1 + 8);
  if (v5 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v5 != 0xD369A4D92C8FFE6CLL)
  {
    v6 = v5 + 5;
    do
    {
      v7 = *v6;
      v6 += 5;
    }
    while (v7 != 0xD369A4D92C8FFE6CLL);
    v5 = v6 - 5;
  }
  v8 = v5[3];
  v9 = (std::__shared_weak_count *)v5[4];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 160);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 32);
      v16 = *(_QWORD *)(*(_QWORD *)(v13 + 8) + 96);
      if (v15 < (*(_QWORD *)(*(_QWORD *)(v13 + 8) + 104) - v16) >> 3)
      {
        if (*(_QWORD *)(*(_QWORD *)(v16 + 8 * v15) + 16))
        {
          v28 = 0;
          v17 = **(_QWORD **)(a1 + 8);
          v18 = *(_QWORD **)v17;
          v19 = *(_QWORD **)(v17 + 8);
          if (v18 != v19)
          {
            while (*v18 != 0x41D4E9297E100630)
            {
              v18 += 5;
              if (v18 == v19)
                goto LABEL_27;
            }
          }
          if (v18 == v19)
          {
LABEL_27:
            v21 = 0;
          }
          else
          {
            v21 = v18[3];
            v20 = (std::__shared_weak_count *)v18[4];
            if (v20)
            {
              v22 = (unint64_t *)&v20->__shared_owners_;
              do
                v23 = __ldxr(v22);
              while (__stxr(v23 + 1, v22));
              do
                v24 = __ldaxr(v22);
              while (__stlxr(v24 - 1, v22));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                std::__shared_weak_count::__release_weak(v20);
              }
            }
          }
          v28 = v21;
          v29[0] = &off_1E427CA08;
          v29[1] = &v28;
          v30 = v29;
          (*(void (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v29);
          v25 = v30;
          if (v30 == v29)
          {
            v26 = 4;
            v25 = v29;
            goto LABEL_32;
          }
          if (v30)
          {
            v26 = 5;
LABEL_32:
            (*(void (**)(void))(*v25 + 8 * v26))();
          }
        }
      }
    }
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F6DFF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::FunctionConstants &,md::ls::StyleRouteLineMaskDataKeyHandle const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::StyleRouteLineMaskDataKeyHandle const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::FunctionConstants &,md::ls::StyleRouteLineMaskDataKeyHandle const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::StyleRouteLineMaskDataKeyHandle const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57[4];
  unint64_t *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t *v62;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::StyleRouteLineMaskDataKeyHandle>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7])
    v8 = (uint64_t)(v5 + 4);
  else
    v8 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v59, v8, v5, v4, *(_QWORD *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7])
    v9 = (uint64_t)v7;
  else
    v9 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v57, v9, v6, v4, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v58 == v62)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v6[4];
    if (v13 >> 39 >= (v6[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v6[7];
    v19 = v6[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v56 = 33 * v18;
      v23 = v6[11];
      v24 = v6[10] + v56;
    }
    else
    {
LABEL_17:
      v23 = v6[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v4[4];
    if (v15 < (v4[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v4[7];
        v29 = v4[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v4[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v62;
    v11 = *(unint64_t **)(v59 + 32);
    if (++v62 != v11)
    {
      v39 = v60[4];
      v40 = (v60[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v60[7];
            result = v60[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v61[4];
                result = v61[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v61[7];
                    v52 = v61[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v62 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v58 == v11)
      goto LABEL_56;
  }
  v33 = v4[11];
  v34 = v4[10] + 8 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::FunctionConstants &,md::ls::StyleRouteLineMaskDataKeyHandle const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::StyleRouteLineMaskDataKeyHandle const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::StyleRouteLineMaskDataKeyHandle>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v2[8] - v2[7] >= v3[8] - v3[7])
    v6 = (uint64_t)(v3 + 4);
  else
    v6 = (uint64_t)(v2 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v3, v2, *(_QWORD *)(v6 + 24));
  if (v2[8] - v2[7] >= v4[8] - v4[7])
    v7 = (uint64_t)v5;
  else
    v7 = (uint64_t)(v2 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v4, v2, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>(md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>(md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>(md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>(md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289908;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>(md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>(md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289908;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>(md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>(md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6E03EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>(md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>(md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>(md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>(md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289950;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>(md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>(md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289950;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>(md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>(md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x499CE17DBD9A1615;
  result[1] = "md::ls::NeedsZBias]";
  result[2] = 18;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279528;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4279528;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *result;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43[4];
  unint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t *v48;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::NeedsZBias>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7])
    v8 = (uint64_t)(v5 + 4);
  else
    v8 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v45, v8, v5, v4, *(_QWORD *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7])
    v9 = (uint64_t)v7;
  else
    v9 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v43, v9, v6, v4, *(_QWORD *)(v9 + 32));
  if (v44 == v48)
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *result = *v11;
      v12 = *v11;
      v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (v14 = *(_QWORD *)(v13 + 8 * (v12 >> 39))) != 0
        && (v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            v17 = v6[7],
            v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (v20 = *(_DWORD *)(v19 + 4) == (_DWORD)v18)
          : (v20 = 0),
            v20))
      {
        v21 = v6[11];
        v22 = v6[10] + 33 * v15;
      }
      else
      {
        v21 = v6[11];
        v22 = v21;
      }
      if (v22 == v21)
        v23 = 0;
      else
        v23 = v22;
      *(_BYTE *)(v23 + 7) = 1;
      v24 = v48;
      v11 = *(unint64_t **)(v45 + 32);
      if (++v48 != v11)
      {
        v25 = v46[4];
        v26 = (v46[5] - v25) >> 3;
        v27 = v24 + 2;
        while (1)
        {
          v28 = *((unsigned int *)v27 - 1);
          v29 = v28 >> 7;
          if (v28 >> 7 < v26)
          {
            v30 = *(_QWORD *)(v25 + 8 * v29);
            if (v30)
            {
              v31 = *(unsigned __int16 *)(v30 + 2 * (v28 & 0x7F));
              v33 = v46[7];
              v32 = v46[8];
              if (v31 < (v32 - v33) >> 3)
              {
                v34 = v33 + 8 * v31;
                if (v34 != v32 && *(_DWORD *)(v34 + 4) == (_DWORD)v28)
                {
                  v36 = v47[4];
                  if (v29 < (v47[5] - v36) >> 3)
                  {
                    v37 = *(_QWORD *)(v36 + 8 * v29);
                    if (v37)
                    {
                      v38 = *(unsigned __int16 *)(v37 + 2 * (v28 & 0x7F));
                      v39 = v47[7];
                      v40 = v47[8];
                      if (v38 < (v40 - v39) >> 3)
                      {
                        v41 = v39 + 8 * v38;
                        if (v41 != v40 && *(_DWORD *)(v41 + 4) == (_DWORD)v28)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v48 = v27;
          v20 = v27++ == v11;
          if (v20)
            goto LABEL_9;
        }
        v11 = v27 - 1;
      }
LABEL_9:
      ;
    }
    while (v44 != v11);
  }
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::NeedsZBias>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x499CE17DBD9A1615;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x499CE17DBD9A1615;
      if (*(_QWORD *)&v3 <= 0x499CE17DBD9A1615uLL)
        v5 = 0x499CE17DBD9A1615uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x499CE17DBD9A1615;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x499CE17DBD9A1615)
            {
              if (v7[2] == 0x499CE17DBD9A1615)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x499CE17DBD9A1615)
          {
            if (v7[2] == 0x499CE17DBD9A1615)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::NeedsZBias]";
  *(_QWORD *)(v11 + 24) = 18;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270F98;
  *(_QWORD *)(v11 + 8) = 0x499CE17DBD9A1615;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x499CE17DBD9A1615uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x499CE17DBD9A1615;
  v15[1] = "md::ls::NeedsZBias]";
  v15[2] = 18;
  gdc::Registry::_registerStorageDataSignals(a1, 0x499CE17DBD9A1615, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6E097C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::NeedsZBias>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::NeedsZBias>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::NeedsZBias>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::NeedsZBias>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289878;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289878;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6E0B90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42898C0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42898C0;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x1D932F2BF291491;
  result[1] = "md::ls::TextureHandleForType<DaVinci::TexTexture>]";
  result[2] = 49;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42794E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42794E0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *result;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t *v54;
  uint64_t *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  unint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87[4];
  unint64_t *v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  unint64_t *v92;
  unint64_t v93;

  v2 = a1;
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::TexTexture>>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7])
    v8 = (uint64_t)(v5 + 4);
  else
    v8 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v89, v8, v5, v4, *(_QWORD *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7])
    v9 = (uint64_t)v7;
  else
    v9 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v87, v9, v6, v4, *(_QWORD *)(v9 + 32));
  if (v88 == v92)
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v84 = result;
    v85 = v2;
    do
    {
      *result = *v11;
      v12 = *v11;
      v13 = HIDWORD(*v11);
      v14 = v12 >> 39;
      v15 = v6[4];
      if (v12 >> 39 < (v6[5] - v15) >> 3
        && (v16 = *(_QWORD *)(v15 + 8 * v14)) != 0
        && (v17 = *(unsigned __int16 *)(v16 + 2 * (HIDWORD(v12) & 0x7F)),
            v19 = v6[7],
            v18 = v6[8],
            v17 < (v18 - v19) >> 3)
        && ((v20 = v19 + 8 * v17, v20 != v18) ? (v21 = *(_DWORD *)(v20 + 4) == (_DWORD)v13) : (v21 = 0), v21))
      {
        v83 = 33 * v17;
        v22 = v6[11];
        v23 = v6[10] + v83;
      }
      else
      {
        v22 = v6[11];
        v23 = v22;
      }
      if (v23 == v22)
        v24 = 0;
      else
        v24 = v23;
      v86 = v24;
      v25 = v4[4];
      if (v14 < (v4[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v14)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v12) & 0x7F)),
            v29 = v4[7],
            v28 = v4[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v13) : (v31 = 0), v31))
      {
        v32 = (unint64_t *)(v4[10] + 8 * v27);
      }
      else
      {
        v32 = (unint64_t *)v4[11];
      }
      v33 = **(_QWORD **)(v2 + 8);
      v34 = *(_QWORD **)v33;
      v35 = *(_QWORD **)(v33 + 8);
      if (v34 != v35)
      {
        while (*v34 != 0x348A0B0E758C07C2)
        {
          v34 += 5;
          if (v34 == v35)
            goto LABEL_41;
        }
      }
      if (v34 == v35)
      {
LABEL_41:
        v37 = 0;
      }
      else
      {
        v37 = v34[3];
        v36 = (std::__shared_weak_count *)v34[4];
        if (v36)
        {
          p_shared_owners = (unint64_t *)&v36->__shared_owners_;
          do
            v39 = __ldxr(p_shared_owners);
          while (__stxr(v39 + 1, p_shared_owners));
          do
            v40 = __ldaxr(p_shared_owners);
          while (__stlxr(v40 - 1, p_shared_owners));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      v41 = ***(uint64_t ****)(v2 + 8);
      if (v41 != *(uint64_t **)(**(_QWORD **)(v2 + 8) + 8) && *v41 != 0xC94DD89A7B09BE9CLL)
      {
        v42 = v41 + 5;
        do
        {
          v43 = *v42;
          v42 += 5;
        }
        while (v43 != 0xC94DD89A7B09BE9CLL);
        v41 = v42 - 5;
      }
      v44 = v41[3];
      v45 = (std::__shared_weak_count *)v41[4];
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
        do
          v48 = __ldaxr(v46);
        while (__stlxr(v48 - 1, v46));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 32))(v44);
      v93 = *v32;
      v50 = v93;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v37 + 104));
      v51 = *(_QWORD *)(v37 + 504);
      if (v50 < (unint64_t)((*(_QWORD *)(v37 + 512) - v51) >> 3)
        && ((v52 = *(_QWORD *)(v51 + 8 * v50)) != 0 ? (v53 = HIDWORD(v50) == HIDWORD(v52)) : (v53 = 0),
            v53))
      {
        v55 = (uint64_t *)(*(_QWORD *)(v37 + 528) + 40 * v52);
        v54 = *(uint64_t **)(v37 + 536);
      }
      else
      {
        v54 = *(uint64_t **)(v37 + 536);
        v55 = v54;
      }
      std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v37 + 104));
      v56 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v37 + 440), v93, &v93);
      v57 = 0;
      ++v56[3];
      if (v55 != v54 && v55)
        v57 = *v55;
      v58 = *(_QWORD *)(v49 + 2576);
      v60 = *(_QWORD *)(v58 + 312);
      v59 = *(std::__shared_weak_count **)(v58 + 320);
      if (v59)
      {
        v61 = (unint64_t *)&v59->__shared_owners_;
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
        do
          v63 = __ldaxr(v61);
        while (__stlxr(v63 - 1, v61));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      *(_BYTE *)(v86 + 17) = v60 != v57;
      v64 = v92;
      v11 = *(unint64_t **)(v89 + 32);
      if (++v92 == v11)
      {
        v2 = v85;
      }
      else
      {
        v65 = v90[4];
        v66 = (v90[5] - v65) >> 3;
        v67 = v64 + 2;
        v2 = v85;
        while (1)
        {
          v68 = *((unsigned int *)v67 - 1);
          v69 = v68 >> 7;
          if (v68 >> 7 < v66)
          {
            v70 = *(_QWORD *)(v65 + 8 * v69);
            if (v70)
            {
              v71 = *(unsigned __int16 *)(v70 + 2 * (v68 & 0x7F));
              v73 = v90[7];
              v72 = v90[8];
              if (v71 < (v72 - v73) >> 3)
              {
                v74 = v73 + 8 * v71;
                if (v74 != v72 && *(_DWORD *)(v74 + 4) == (_DWORD)v68)
                {
                  v76 = v91[4];
                  if (v69 < (v91[5] - v76) >> 3)
                  {
                    v77 = *(_QWORD *)(v76 + 8 * v69);
                    if (v77)
                    {
                      v78 = *(unsigned __int16 *)(v77 + 2 * (v68 & 0x7F));
                      v80 = v91[7];
                      v79 = v91[8];
                      if (v78 < (v79 - v80) >> 3)
                      {
                        v81 = v80 + 8 * v78;
                        if (v81 != v79 && *(_DWORD *)(v81 + 4) == (_DWORD)v68)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v92 = v67;
          v21 = v67++ == v11;
          if (v21)
            goto LABEL_10;
        }
        v11 = v67 - 1;
      }
LABEL_10:
      result = v84;
    }
    while (v88 != v11);
  }
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289BD8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289BD8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6E1254(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289C20;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289C20;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0xCE03281732FA0019;
  result[1] = "md::ls::TextureHandleForType<DaVinci::EmissiveTexture>]";
  result[2] = 54;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279690;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4279690;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *result;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t *v54;
  uint64_t *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  BOOL v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  unint64_t *v86;
  uint64_t v87;
  uint64_t v88[4];
  unint64_t *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  unint64_t *v93;
  unint64_t v94;

  v2 = a1;
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7])
    v8 = (uint64_t)(v5 + 4);
  else
    v8 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v90, v8, v5, v4, *(_QWORD *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7])
    v9 = (uint64_t)v7;
  else
    v9 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v88, v9, v6, v4, *(_QWORD *)(v9 + 32));
  if (v89 != v93)
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v86 = result;
    v87 = v2;
    while (1)
    {
      *result = *v11;
      v12 = *v11;
      v13 = HIDWORD(*v11);
      v14 = v12 >> 39;
      v15 = v6[4];
      if (v12 >> 39 < (v6[5] - v15) >> 3
        && (v16 = *(_QWORD *)(v15 + 8 * v14)) != 0
        && (v17 = *(unsigned __int16 *)(v16 + 2 * (HIDWORD(v12) & 0x7F)),
            v19 = v6[7],
            v18 = v6[8],
            v17 < (v18 - v19) >> 3)
        && ((v20 = v19 + 8 * v17, v20 != v18) ? (v21 = *(_DWORD *)(v20 + 4) == (_DWORD)v13) : (v21 = 0), v21))
      {
        v85 = 33 * v17;
        v22 = v6[11];
        v23 = v6[10] + v85;
      }
      else
      {
        v22 = v6[11];
        v23 = v22;
      }
      if (v23 == v22)
        v24 = 0;
      else
        v24 = v23;
      v25 = v4[4];
      if (v14 < (v4[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v14)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v12) & 0x7F)),
            v29 = v4[7],
            v28 = v4[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v13) : (v31 = 0), v31))
      {
        v32 = (unint64_t *)(v4[10] + 8 * v27);
      }
      else
      {
        v32 = (unint64_t *)v4[11];
      }
      v33 = **(_QWORD **)(v2 + 8);
      v34 = *(_QWORD **)v33;
      v35 = *(_QWORD **)(v33 + 8);
      if (v34 != v35)
      {
        while (*v34 != 0x348A0B0E758C07C2)
        {
          v34 += 5;
          if (v34 == v35)
            goto LABEL_40;
        }
      }
      if (v34 == v35)
      {
LABEL_40:
        v37 = 0;
      }
      else
      {
        v37 = v34[3];
        v36 = (std::__shared_weak_count *)v34[4];
        if (v36)
        {
          p_shared_owners = (unint64_t *)&v36->__shared_owners_;
          do
            v39 = __ldxr(p_shared_owners);
          while (__stxr(v39 + 1, p_shared_owners));
          do
            v40 = __ldaxr(p_shared_owners);
          while (__stlxr(v40 - 1, p_shared_owners));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      v41 = ***(uint64_t ****)(v2 + 8);
      if (v41 != *(uint64_t **)(**(_QWORD **)(v2 + 8) + 8) && *v41 != 0xC94DD89A7B09BE9CLL)
      {
        v42 = v41 + 5;
        do
        {
          v43 = *v42;
          v42 += 5;
        }
        while (v43 != 0xC94DD89A7B09BE9CLL);
        v41 = v42 - 5;
      }
      v44 = v41[3];
      v45 = (std::__shared_weak_count *)v41[4];
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
        do
          v48 = __ldaxr(v46);
        while (__stlxr(v48 - 1, v46));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 32))(v44);
      v94 = *v32;
      v50 = v94;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v37 + 104));
      v51 = *(_QWORD *)(v37 + 504);
      if (v50 < (unint64_t)((*(_QWORD *)(v37 + 512) - v51) >> 3)
        && ((v52 = *(_QWORD *)(v51 + 8 * v50)) != 0 ? (v53 = HIDWORD(v50) == HIDWORD(v52)) : (v53 = 0),
            v53))
      {
        v55 = (uint64_t *)(*(_QWORD *)(v37 + 528) + 40 * v52);
        v54 = *(uint64_t **)(v37 + 536);
      }
      else
      {
        v54 = *(uint64_t **)(v37 + 536);
        v55 = v54;
      }
      std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v37 + 104));
      v56 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v37 + 440), v94, &v94);
      ++v56[3];
      if (v55 == v54 || !v55)
      {
        v2 = v87;
      }
      else
      {
        v57 = *v55;
        v2 = v87;
        if (*v55)
        {
          v58 = *(_QWORD *)(v49 + 2576);
          v59 = *(_QWORD *)(v58 + 312);
          v60 = *(std::__shared_weak_count **)(v58 + 320);
          if (v60)
          {
            v61 = (unint64_t *)&v60->__shared_owners_;
            do
              v62 = __ldxr(v61);
            while (__stxr(v62 + 1, v61));
            v63 = v59 != v57;
            v64 = (unint64_t *)&v60->__shared_owners_;
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          else
          {
            v63 = v59 != v57;
          }
          *(_BYTE *)(v24 + 18) = v63;
          goto LABEL_73;
        }
      }
      *(_BYTE *)(v24 + 18) = 0;
LABEL_73:
      v66 = v93;
      v11 = *(unint64_t **)(v90 + 32);
      if (++v93 != v11)
      {
        v67 = v91[4];
        v68 = (v91[5] - v67) >> 3;
        v69 = v66 + 2;
        while (1)
        {
          v70 = *((unsigned int *)v69 - 1);
          v71 = v70 >> 7;
          if (v70 >> 7 < v68)
          {
            v72 = *(_QWORD *)(v67 + 8 * v71);
            if (v72)
            {
              v73 = *(unsigned __int16 *)(v72 + 2 * (v70 & 0x7F));
              v75 = v91[7];
              v74 = v91[8];
              if (v73 < (v74 - v75) >> 3)
              {
                v76 = v75 + 8 * v73;
                if (v76 != v74 && *(_DWORD *)(v76 + 4) == (_DWORD)v70)
                {
                  v78 = v92[4];
                  if (v71 < (v92[5] - v78) >> 3)
                  {
                    v79 = *(_QWORD *)(v78 + 8 * v71);
                    if (v79)
                    {
                      v80 = *(unsigned __int16 *)(v79 + 2 * (v70 & 0x7F));
                      v82 = v92[7];
                      v81 = v92[8];
                      if (v80 < (v81 - v82) >> 3)
                      {
                        v83 = v82 + 8 * v80;
                        if (v83 != v81 && *(_DWORD *)(v83 + 4) == (_DWORD)v70)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v93 = v69;
          v21 = v69++ == v11;
          if (v21)
            goto LABEL_9;
        }
        v11 = v69 - 1;
      }
LABEL_9:
      result = v86;
      if (v89 == v11)
        goto LABEL_96;
    }
  }
  result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_96:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>(md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>(md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>(md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>(md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289A28;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>(md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>(md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289A28;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>(md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>(md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6E1928(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>(md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>(md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>(md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>(md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289A70;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>(md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>(md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289A70;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>(md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>(md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0xA50DD2A5BD75DBD6;
  result[1] = "md::ls::StyleEmissiveDataKeyHandle]";
  result[2] = 34;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42795B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42795B8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  int8x8_t *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t v40;
  uint64_t result;
  int8x8_t v42;
  uint64_t v43;
  int8x8_t v44;
  float *v45;
  _QWORD *v47;
  unint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67[4];
  unint64_t *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t *v72;
  uint64_t v73;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::StyleEmissiveDataKeyHandle>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7])
    v8 = (uint64_t)(v5 + 4);
  else
    v8 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v69, v8, v5, v4, *(_QWORD *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7])
    v9 = (uint64_t)v7;
  else
    v9 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v67, v9, v6, v4, *(_QWORD *)(v9 + 32));
  if (v68 != v72)
  {
    v11 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      *v11 = *v10;
      v12 = *v10;
      v13 = HIDWORD(*v10);
      v14 = v12 >> 39;
      v15 = v6[4];
      if (v12 >> 39 < (v6[5] - v15) >> 3
        && (v16 = *(_QWORD *)(v15 + 8 * v14)) != 0
        && (v17 = *(unsigned __int16 *)(v16 + 2 * (HIDWORD(v12) & 0x7F)),
            v19 = v6[7],
            v18 = v6[8],
            v17 < (v18 - v19) >> 3)
        && ((v20 = v19 + 8 * v17, v20 != v18) ? (v21 = *(_DWORD *)(v20 + 4) == (_DWORD)v13) : (v21 = 0), v21))
      {
        v66 = 33 * v17;
        v22 = v6[11];
        v23 = v6[10] + v66;
      }
      else
      {
        v22 = v6[11];
        v23 = v22;
      }
      if (v23 == v22)
        v24 = 0;
      else
        v24 = v23;
      v25 = v4[4];
      if (v14 < (v4[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v14)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v12) & 0x7F)),
            v29 = v4[7],
            v28 = v4[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v13) : (v31 = 0), v31))
      {
        v32 = (unint64_t *)(v4[10] + 8 * v27);
      }
      else
      {
        v32 = (unint64_t *)v4[11];
      }
      v33 = **(_QWORD **)(a1 + 8);
      v34 = *(_QWORD **)v33;
      v35 = *(_QWORD **)(v33 + 8);
      if (v34 != v35)
      {
        while (*v34 != 0x41D4E9297E100630)
        {
          v34 += 5;
          if (v34 == v35)
            goto LABEL_40;
        }
      }
      if (v34 == v35)
      {
LABEL_40:
        v37 = 0;
      }
      else
      {
        v37 = (int8x8_t *)v34[3];
        v36 = (std::__shared_weak_count *)v34[4];
        if (v36)
        {
          p_shared_owners = (unint64_t *)&v36->__shared_owners_;
          do
            v39 = __ldxr(p_shared_owners);
          while (__stxr(v39 + 1, p_shared_owners));
          do
            v40 = __ldaxr(p_shared_owners);
          while (__stlxr(v40 - 1, p_shared_owners));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      result = md::getCachedHandle<md::CachedKey<md::StyleEmissiveColorCacheKey>,geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,unsigned long,md::CachedKey<md::StyleEmissiveColorCacheKey>,std::hash<unsigned long>>(v37 + 330, *v32);
      v73 = result;
      if (!result)
        break;
      v42 = v37[343];
      if (result >= (unint64_t)((uint64_t)(*(_QWORD *)&v37[344] - *(_QWORD *)&v42) >> 3))
        break;
      v43 = *(_QWORD *)(*(_QWORD *)&v42 + 8 * result);
      if (v43)
      {
        if (HIDWORD(result) != HIDWORD(v43))
          break;
        v44 = v37[346];
        v45 = (float *)(*(_QWORD *)&v44 + 24 * v43);
        if (v45 == (float *)v37[347] || *(_QWORD *)&v44 == 0)
          break;
        v47 = std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>> const&>,std::tuple<>>((uint64_t)&v37[335], result, &v73);
        ++v47[3];
        result = (uint64_t)std::__hash_table<std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::__unordered_map_hasher<md::StyleEmissiveColorCacheKey,std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,md::StyleEmissiveColorCacheKeyHasher,std::equal_to<md::StyleEmissiveColorCacheKey>,true>,std::__unordered_map_equal<md::StyleEmissiveColorCacheKey,std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::equal_to<md::StyleEmissiveColorCacheKey>,md::StyleEmissiveColorCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>>>::find<md::StyleEmissiveColorCacheKey>(&v37[320], v45);
        if (!result)
          break;
        LOBYTE(v43) = *(_QWORD *)(result + 40) != 0;
      }
LABEL_52:
      *(_BYTE *)(v24 + 22) = v43;
      v48 = v72;
      v10 = *(unint64_t **)(v69 + 32);
      if (++v72 != v10)
      {
        v49 = v70[4];
        v50 = (v70[5] - v49) >> 3;
        v51 = v48 + 2;
        while (1)
        {
          v52 = *((unsigned int *)v51 - 1);
          v53 = v52 >> 7;
          if (v52 >> 7 < v50)
          {
            v54 = *(_QWORD *)(v49 + 8 * v53);
            if (v54)
            {
              v55 = *(unsigned __int16 *)(v54 + 2 * (v52 & 0x7F));
              v56 = v70[7];
              result = v70[8];
              if (v55 < (result - v56) >> 3)
              {
                v57 = v56 + 8 * v55;
                if (v57 != result && *(_DWORD *)(v57 + 4) == (_DWORD)v52)
                {
                  v59 = v71[4];
                  result = v71[5] - v59;
                  if (v53 < result >> 3)
                  {
                    v60 = *(_QWORD *)(v59 + 8 * v53);
                    if (v60)
                    {
                      v61 = *(unsigned __int16 *)(v60 + 2 * (v52 & 0x7F));
                      v63 = v71[7];
                      v62 = v71[8];
                      result = v62 - v63;
                      if (v61 < (v62 - v63) >> 3)
                      {
                        v64 = v63 + 8 * v61;
                        if (v64 != v62 && *(_DWORD *)(v64 + 4) == (_DWORD)v52)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v72 = v51;
          v21 = v51++ == v10;
          if (v21)
            goto LABEL_9;
        }
        v10 = v51 - 1;
      }
LABEL_9:
      if (v68 == v10)
        goto LABEL_75;
    }
    LOBYTE(v43) = 0;
    goto LABEL_52;
  }
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v11 = (_QWORD *)result;
LABEL_75:
  *v11 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>(md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>(md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>(md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>(md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42897E8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>(md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>(md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42897E8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>(md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>(md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6E1EE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>(md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>(md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>(md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>(md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289830;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>(md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>(md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289830;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>(md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>(md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x98A9F01DBB8BCCCELL;
  result[1] = "md::ls::PreserveHeight]";
  result[2] = 22;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279498;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4279498;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *result;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43[4];
  unint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t *v48;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::PreserveHeight>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7])
    v8 = (uint64_t)(v5 + 4);
  else
    v8 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v45, v8, v5, v4, *(_QWORD *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7])
    v9 = (uint64_t)v7;
  else
    v9 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v43, v9, v6, v4, *(_QWORD *)(v9 + 32));
  if (v44 == v48)
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *result = *v11;
      v12 = *v11;
      v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (v14 = *(_QWORD *)(v13 + 8 * (v12 >> 39))) != 0
        && (v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            v17 = v6[7],
            v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (v20 = *(_DWORD *)(v19 + 4) == (_DWORD)v18)
          : (v20 = 0),
            v20))
      {
        v21 = v6[11];
        v22 = v6[10] + 33 * v15;
      }
      else
      {
        v21 = v6[11];
        v22 = v21;
      }
      if (v22 == v21)
        v23 = 0;
      else
        v23 = v22;
      *(_BYTE *)(v23 + 8) = 1;
      v24 = v48;
      v11 = *(unint64_t **)(v45 + 32);
      if (++v48 != v11)
      {
        v25 = v46[4];
        v26 = (v46[5] - v25) >> 3;
        v27 = v24 + 2;
        while (1)
        {
          v28 = *((unsigned int *)v27 - 1);
          v29 = v28 >> 7;
          if (v28 >> 7 < v26)
          {
            v30 = *(_QWORD *)(v25 + 8 * v29);
            if (v30)
            {
              v31 = *(unsigned __int16 *)(v30 + 2 * (v28 & 0x7F));
              v33 = v46[7];
              v32 = v46[8];
              if (v31 < (v32 - v33) >> 3)
              {
                v34 = v33 + 8 * v31;
                if (v34 != v32 && *(_DWORD *)(v34 + 4) == (_DWORD)v28)
                {
                  v36 = v47[4];
                  if (v29 < (v47[5] - v36) >> 3)
                  {
                    v37 = *(_QWORD *)(v36 + 8 * v29);
                    if (v37)
                    {
                      v38 = *(unsigned __int16 *)(v37 + 2 * (v28 & 0x7F));
                      v39 = v47[7];
                      v40 = v47[8];
                      if (v38 < (v40 - v39) >> 3)
                      {
                        v41 = v39 + 8 * v38;
                        if (v41 != v40 && *(_DWORD *)(v41 + 4) == (_DWORD)v28)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v48 = v27;
          v20 = v27++ == v11;
          if (v20)
            goto LABEL_9;
        }
        v11 = v27 - 1;
      }
LABEL_9:
      ;
    }
    while (v44 != v11);
  }
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::PreserveHeight>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x98A9F01DBB8BCCCELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x98A9F01DBB8BCCCELL;
      if (*(_QWORD *)&v3 <= 0x98A9F01DBB8BCCCELL)
        v5 = 0x98A9F01DBB8BCCCELL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x98A9F01DBB8BCCCELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x98A9F01DBB8BCCCELL)
            {
              if (v7[2] == 0x98A9F01DBB8BCCCELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x98A9F01DBB8BCCCELL)
          {
            if (v7[2] == 0x98A9F01DBB8BCCCELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::PreserveHeight]";
  *(_QWORD *)(v11 + 24) = 22;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42717A8;
  *(_QWORD *)(v11 + 8) = 0x98A9F01DBB8BCCCELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x98A9F01DBB8BCCCELL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x98A9F01DBB8BCCCELL;
  v15[1] = "md::ls::PreserveHeight]";
  v15[2] = 22;
  gdc::Registry::_registerStorageDataSignals(a1, 0x98A9F01DBB8BCCCELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6E2474(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::PreserveHeight>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PreserveHeight>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PreserveHeight>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PreserveHeight>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorColorCorrection>(md::ita::PrepareFunctionConstantDescriptorColorCorrection &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorColorCorrection &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorColorCorrection>(md::ita::PrepareFunctionConstantDescriptorColorCorrection &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorColorCorrection>(md::ita::PrepareFunctionConstantDescriptorColorCorrection &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorColorCorrection &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorColorCorrection>(md::ita::PrepareFunctionConstantDescriptorColorCorrection &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289998;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorColorCorrection>(md::ita::PrepareFunctionConstantDescriptorColorCorrection &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorColorCorrection &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorColorCorrection>(md::ita::PrepareFunctionConstantDescriptorColorCorrection &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289998;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorColorCorrection>(md::ita::PrepareFunctionConstantDescriptorColorCorrection &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorColorCorrection &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorColorCorrection>(md::ita::PrepareFunctionConstantDescriptorColorCorrection &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6E2688(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorColorCorrection>(md::ita::PrepareFunctionConstantDescriptorColorCorrection &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorColorCorrection &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorColorCorrection>(md::ita::PrepareFunctionConstantDescriptorColorCorrection &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorColorCorrection>(md::ita::PrepareFunctionConstantDescriptorColorCorrection &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorColorCorrection &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorColorCorrection>(md::ita::PrepareFunctionConstantDescriptorColorCorrection &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42899E0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorColorCorrection>(md::ita::PrepareFunctionConstantDescriptorColorCorrection &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorColorCorrection &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorColorCorrection>(md::ita::PrepareFunctionConstantDescriptorColorCorrection &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42899E0;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorColorCorrection>(md::ita::PrepareFunctionConstantDescriptorColorCorrection &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorColorCorrection &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorColorCorrection>(md::ita::PrepareFunctionConstantDescriptorColorCorrection &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x65937AC5D2157F71;
  result[1] = "md::ls::ColorCorrectionFactorConstantHandle]";
  result[2] = 43;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorColorCorrection>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorColorCorrection>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorColorCorrection>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorColorCorrection>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279570;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorColorCorrection>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorColorCorrection>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4279570;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorColorCorrection>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorColorCorrection>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *result;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43[4];
  unint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t *v48;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::ColorCorrectionFactorConstantHandle>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7])
    v8 = (uint64_t)(v5 + 4);
  else
    v8 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v45, v8, v5, v4, *(_QWORD *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7])
    v9 = (uint64_t)v7;
  else
    v9 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v43, v9, v6, v4, *(_QWORD *)(v9 + 32));
  if (v44 == v48)
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *result = *v11;
      v12 = *v11;
      v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (v14 = *(_QWORD *)(v13 + 8 * (v12 >> 39))) != 0
        && (v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            v17 = v6[7],
            v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (v20 = *(_DWORD *)(v19 + 4) == (_DWORD)v18)
          : (v20 = 0),
            v20))
      {
        v21 = v6[11];
        v22 = v6[10] + 33 * v15;
      }
      else
      {
        v21 = v6[11];
        v22 = v21;
      }
      if (v22 == v21)
        v23 = 0;
      else
        v23 = v22;
      *(_BYTE *)(v23 + 14) = 1;
      v24 = v48;
      v11 = *(unint64_t **)(v45 + 32);
      if (++v48 != v11)
      {
        v25 = v46[4];
        v26 = (v46[5] - v25) >> 3;
        v27 = v24 + 2;
        while (1)
        {
          v28 = *((unsigned int *)v27 - 1);
          v29 = v28 >> 7;
          if (v28 >> 7 < v26)
          {
            v30 = *(_QWORD *)(v25 + 8 * v29);
            if (v30)
            {
              v31 = *(unsigned __int16 *)(v30 + 2 * (v28 & 0x7F));
              v33 = v46[7];
              v32 = v46[8];
              if (v31 < (v32 - v33) >> 3)
              {
                v34 = v33 + 8 * v31;
                if (v34 != v32 && *(_DWORD *)(v34 + 4) == (_DWORD)v28)
                {
                  v36 = v47[4];
                  if (v29 < (v47[5] - v36) >> 3)
                  {
                    v37 = *(_QWORD *)(v36 + 8 * v29);
                    if (v37)
                    {
                      v38 = *(unsigned __int16 *)(v37 + 2 * (v28 & 0x7F));
                      v39 = v47[7];
                      v40 = v47[8];
                      if (v38 < (v40 - v39) >> 3)
                      {
                        v41 = v39 + 8 * v38;
                        if (v41 != v40 && *(_DWORD *)(v41 + 4) == (_DWORD)v28)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v48 = v27;
          v20 = v27++ == v11;
          if (v20)
            goto LABEL_9;
        }
        v11 = v27 - 1;
      }
LABEL_9:
      ;
    }
    while (v44 != v11);
  }
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLandCover>(md::ita::PrepareFunctionConstantDescriptorLandCover &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorLandCover &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLandCover>(md::ita::PrepareFunctionConstantDescriptorLandCover &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLandCover>(md::ita::PrepareFunctionConstantDescriptorLandCover &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorLandCover &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLandCover>(md::ita::PrepareFunctionConstantDescriptorLandCover &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289098;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLandCover>(md::ita::PrepareFunctionConstantDescriptorLandCover &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorLandCover &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLandCover>(md::ita::PrepareFunctionConstantDescriptorLandCover &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289098;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLandCover>(md::ita::PrepareFunctionConstantDescriptorLandCover &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorLandCover &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLandCover>(md::ita::PrepareFunctionConstantDescriptorLandCover &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6E2AA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLandCover>(md::ita::PrepareFunctionConstantDescriptorLandCover &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorLandCover &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLandCover>(md::ita::PrepareFunctionConstantDescriptorLandCover &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLandCover>(md::ita::PrepareFunctionConstantDescriptorLandCover &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorLandCover &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLandCover>(md::ita::PrepareFunctionConstantDescriptorLandCover &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42890E0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLandCover>(md::ita::PrepareFunctionConstantDescriptorLandCover &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorLandCover &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLandCover>(md::ita::PrepareFunctionConstantDescriptorLandCover &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42890E0;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLandCover>(md::ita::PrepareFunctionConstantDescriptorLandCover &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorLandCover &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLandCover>(md::ita::PrepareFunctionConstantDescriptorLandCover &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0xD5B48B62BD07EF80;
  result[1] = "md::ls::HasMaterialRasterRenderItem]";
  result[2] = 35;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLandCover>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLandCover>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLandCover>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLandCover>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42790F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLandCover>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLandCover>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42790F0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLandCover>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLandCover>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *HasMaterialRasterRender;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *result;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43[4];
  unint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t *v48;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  HasMaterialRasterRender = (_QWORD *)gdc::Registry::storage<md::ls::HasMaterialRasterRenderItem>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (HasMaterialRasterRender[8] - HasMaterialRasterRender[7] >= v5[8] - v5[7])
    v8 = (uint64_t)(v5 + 4);
  else
    v8 = (uint64_t)(HasMaterialRasterRender + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v45, v8, v5, HasMaterialRasterRender, *(_QWORD *)(v8 + 24));
  if (HasMaterialRasterRender[8] - HasMaterialRasterRender[7] >= v6[8] - v6[7])
    v9 = (uint64_t)v7;
  else
    v9 = (uint64_t)(HasMaterialRasterRender + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v43, v9, v6, HasMaterialRasterRender, *(_QWORD *)(v9 + 32));
  if (v44 == v48)
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *result = *v11;
      v12 = *v11;
      v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (v14 = *(_QWORD *)(v13 + 8 * (v12 >> 39))) != 0
        && (v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            v17 = v6[7],
            v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (v20 = *(_DWORD *)(v19 + 4) == (_DWORD)v18)
          : (v20 = 0),
            v20))
      {
        v21 = v6[11];
        v22 = v6[10] + 33 * v15;
      }
      else
      {
        v21 = v6[11];
        v22 = v21;
      }
      if (v22 == v21)
        v23 = 0;
      else
        v23 = v22;
      *(_WORD *)(v23 + 9) = 257;
      v24 = v48;
      v11 = *(unint64_t **)(v45 + 32);
      if (++v48 != v11)
      {
        v25 = v46[4];
        v26 = (v46[5] - v25) >> 3;
        v27 = v24 + 2;
        while (1)
        {
          v28 = *((unsigned int *)v27 - 1);
          v29 = v28 >> 7;
          if (v28 >> 7 < v26)
          {
            v30 = *(_QWORD *)(v25 + 8 * v29);
            if (v30)
            {
              v31 = *(unsigned __int16 *)(v30 + 2 * (v28 & 0x7F));
              v33 = v46[7];
              v32 = v46[8];
              if (v31 < (v32 - v33) >> 3)
              {
                v34 = v33 + 8 * v31;
                if (v34 != v32 && *(_DWORD *)(v34 + 4) == (_DWORD)v28)
                {
                  v36 = v47[4];
                  if (v29 < (v47[5] - v36) >> 3)
                  {
                    v37 = *(_QWORD *)(v36 + 8 * v29);
                    if (v37)
                    {
                      v38 = *(unsigned __int16 *)(v37 + 2 * (v28 & 0x7F));
                      v39 = v47[7];
                      v40 = v47[8];
                      if (v38 < (v40 - v39) >> 3)
                      {
                        v41 = v39 + 8 * v38;
                        if (v41 != v40 && *(_DWORD *)(v41 + 4) == (_DWORD)v28)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v48 = v27;
          v20 = v27++ == v11;
          if (v20)
            goto LABEL_9;
        }
        v11 = v27 - 1;
      }
LABEL_9:
      ;
    }
    while (v44 != v11);
  }
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPlanar>(md::ita::PrepareFunctionConstantDescriptorPlanar &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorPlanar &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPlanar>(md::ita::PrepareFunctionConstantDescriptorPlanar &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPlanar>(md::ita::PrepareFunctionConstantDescriptorPlanar &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorPlanar &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPlanar>(md::ita::PrepareFunctionConstantDescriptorPlanar &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288CA8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPlanar>(md::ita::PrepareFunctionConstantDescriptorPlanar &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorPlanar &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPlanar>(md::ita::PrepareFunctionConstantDescriptorPlanar &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288CA8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPlanar>(md::ita::PrepareFunctionConstantDescriptorPlanar &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorPlanar &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPlanar>(md::ita::PrepareFunctionConstantDescriptorPlanar &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6E2EB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPlanar>(md::ita::PrepareFunctionConstantDescriptorPlanar &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorPlanar &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPlanar>(md::ita::PrepareFunctionConstantDescriptorPlanar &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPlanar>(md::ita::PrepareFunctionConstantDescriptorPlanar &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorPlanar &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPlanar>(md::ita::PrepareFunctionConstantDescriptorPlanar &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288CF0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPlanar>(md::ita::PrepareFunctionConstantDescriptorPlanar &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorPlanar &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPlanar>(md::ita::PrepareFunctionConstantDescriptorPlanar &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288CF0;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPlanar>(md::ita::PrepareFunctionConstantDescriptorPlanar &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorPlanar &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPlanar>(md::ita::PrepareFunctionConstantDescriptorPlanar &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x32FFF5E924C6D657;
  result[1] = "md::ls::PlanarConstantDataHandle]";
  result[2] = 32;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPlanar>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPlanar>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPlanar>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPlanar>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278EF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPlanar>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPlanar>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278EF8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPlanar>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPlanar>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *result;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55[4];
  unint64_t *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t *v60;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::PlanarConstantDataHandle>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7])
    v8 = (uint64_t)(v5 + 4);
  else
    v8 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v57, v8, v5, v4, *(_QWORD *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7])
    v9 = (uint64_t)v7;
  else
    v9 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v55, v9, v6, v4, *(_QWORD *)(v9 + 32));
  if (v56 == v60)
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *result = *v11;
      v12 = *v11;
      v13 = HIDWORD(*v11);
      v14 = v12 >> 39;
      v15 = v6[4];
      if (v12 >> 39 < (v6[5] - v15) >> 3
        && (v16 = *(_QWORD *)(v15 + 8 * v14)) != 0
        && (v17 = *(unsigned __int16 *)(v16 + 2 * (HIDWORD(v12) & 0x7F)),
            v19 = v6[7],
            v18 = v6[8],
            v17 < (v18 - v19) >> 3)
        && ((v20 = v19 + 8 * v17, v20 != v18) ? (v21 = *(_DWORD *)(v20 + 4) == (_DWORD)v13) : (v21 = 0), v21))
      {
        v54 = 33 * v17;
        v22 = v6[11];
        v23 = v6[10] + v54;
      }
      else
      {
        v22 = v6[11];
        v23 = v22;
      }
      if (v23 == v22)
        v24 = 0;
      else
        v24 = v23;
      v25 = v4[4];
      if (v14 < (v4[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v14)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v12) & 0x7F)),
            v29 = v4[7],
            v28 = v4[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v13) : (v31 = 0), v31))
      {
        v32 = v4[11];
        v33 = v4[10] + 16 * v27;
      }
      else
      {
        v32 = v4[11];
        v33 = v32;
      }
      if (v33 == v32)
        v34 = 0;
      else
        v34 = v33;
      *(_BYTE *)(v24 + 2) = 1;
      *(_BYTE *)(v24 + 3) = *(_BYTE *)(v34 + 8);
      v35 = v60;
      v11 = *(unint64_t **)(v57 + 32);
      if (++v60 != v11)
      {
        v36 = v58[4];
        v37 = (v58[5] - v36) >> 3;
        v38 = v35 + 2;
        while (1)
        {
          v39 = *((unsigned int *)v38 - 1);
          v40 = v39 >> 7;
          if (v39 >> 7 < v37)
          {
            v41 = *(_QWORD *)(v36 + 8 * v40);
            if (v41)
            {
              v42 = *(unsigned __int16 *)(v41 + 2 * (v39 & 0x7F));
              v44 = v58[7];
              v43 = v58[8];
              if (v42 < (v43 - v44) >> 3)
              {
                v45 = v44 + 8 * v42;
                if (v45 != v43 && *(_DWORD *)(v45 + 4) == (_DWORD)v39)
                {
                  v47 = v59[4];
                  if (v40 < (v59[5] - v47) >> 3)
                  {
                    v48 = *(_QWORD *)(v47 + 8 * v40);
                    if (v48)
                    {
                      v49 = *(unsigned __int16 *)(v48 + 2 * (v39 & 0x7F));
                      v50 = v59[7];
                      v51 = v59[8];
                      if (v49 < (v51 - v50) >> 3)
                      {
                        v52 = v50 + 8 * v49;
                        if (v52 != v51 && *(_DWORD *)(v52 + 4) == (_DWORD)v39)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v60 = v38;
          v21 = v38++ == v11;
          if (v21)
            goto LABEL_9;
        }
        v11 = v38 - 1;
      }
LABEL_9:
      ;
    }
    while (v56 != v11);
  }
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>(md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>(md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>(md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>(md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289AB8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>(md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>(md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289AB8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>(md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>(md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6E3338(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>(md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>(md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>(md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>(md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289B00;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>(md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>(md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289B00;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>(md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>(md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0xE7D1C5E790E8E07;
  result[1] = "md::ls::IntendedStandardPassSceneDepth]";
  result[2] = 38;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279600;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4279600;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *result;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43[4];
  unint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t *v48;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::IntendedStandardPassSceneDepth>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7])
    v8 = (uint64_t)(v5 + 4);
  else
    v8 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v45, v8, v5, v4, *(_QWORD *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7])
    v9 = (uint64_t)v7;
  else
    v9 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v43, v9, v6, v4, *(_QWORD *)(v9 + 32));
  if (v44 == v48)
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *result = *v11;
      v12 = *v11;
      v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (v14 = *(_QWORD *)(v13 + 8 * (v12 >> 39))) != 0
        && (v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            v17 = v6[7],
            v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (v20 = *(_DWORD *)(v19 + 4) == (_DWORD)v18)
          : (v20 = 0),
            v20))
      {
        v21 = v6[11];
        v22 = v6[10] + 33 * v15;
      }
      else
      {
        v21 = v6[11];
        v22 = v21;
      }
      if (v22 == v21)
        v23 = 0;
      else
        v23 = v22;
      *(_BYTE *)(v23 + 31) = 1;
      v24 = v48;
      v11 = *(unint64_t **)(v45 + 32);
      if (++v48 != v11)
      {
        v25 = v46[4];
        v26 = (v46[5] - v25) >> 3;
        v27 = v24 + 2;
        while (1)
        {
          v28 = *((unsigned int *)v27 - 1);
          v29 = v28 >> 7;
          if (v28 >> 7 < v26)
          {
            v30 = *(_QWORD *)(v25 + 8 * v29);
            if (v30)
            {
              v31 = *(unsigned __int16 *)(v30 + 2 * (v28 & 0x7F));
              v33 = v46[7];
              v32 = v46[8];
              if (v31 < (v32 - v33) >> 3)
              {
                v34 = v33 + 8 * v31;
                if (v34 != v32 && *(_DWORD *)(v34 + 4) == (_DWORD)v28)
                {
                  v36 = v47[4];
                  if (v29 < (v47[5] - v36) >> 3)
                  {
                    v37 = *(_QWORD *)(v36 + 8 * v29);
                    if (v37)
                    {
                      v38 = *(unsigned __int16 *)(v37 + 2 * (v28 & 0x7F));
                      v39 = v47[7];
                      v40 = v47[8];
                      if (v38 < (v40 - v39) >> 3)
                      {
                        v41 = v39 + 8 * v38;
                        if (v41 != v40 && *(_DWORD *)(v41 + 4) == (_DWORD)v28)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v48 = v27;
          v20 = v27++ == v11;
          if (v20)
            goto LABEL_9;
        }
        v11 = v27 - 1;
      }
LABEL_9:
      ;
    }
    while (v44 != v11);
  }
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::IntendedStandardPassSceneDepth>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0xE7D1C5E790E8E07;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xE7D1C5E790E8E07;
      if (*(_QWORD *)&v3 <= 0xE7D1C5E790E8E07uLL)
        v5 = 0xE7D1C5E790E8E07uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xE7D1C5E790E8E07;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xE7D1C5E790E8E07)
            {
              if (v7[2] == 0xE7D1C5E790E8E07)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xE7D1C5E790E8E07)
          {
            if (v7[2] == 0xE7D1C5E790E8E07)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::IntendedStandardPassSceneDepth]";
  *(_QWORD *)(v11 + 24) = 38;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273E48;
  *(_QWORD *)(v11 + 8) = 0xE7D1C5E790E8E07;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xE7D1C5E790E8E07uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xE7D1C5E790E8E07;
  v15[1] = "md::ls::IntendedStandardPassSceneDepth]";
  v15[2] = 38;
  gdc::Registry::_registerStorageDataSignals(a1, 0xE7D1C5E790E8E07, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6E38C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::IntendedStandardPassSceneDepth>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IntendedStandardPassSceneDepth>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IntendedStandardPassSceneDepth>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IntendedStandardPassSceneDepth>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>(md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>(md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>(md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>(md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289758;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>(md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>(md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289758;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>(md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>(md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6E3ADC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>(md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>(md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>(md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>(md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42897A0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>(md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>(md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42897A0;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>(md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>(md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x944162BB9DE8E7EBLL;
  result[1] = "md::ls::UseIdentityMatrix]";
  result[2] = 25;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279450;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4279450;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *result;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43[4];
  unint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t *v48;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::UseIdentityMatrix>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7])
    v8 = (uint64_t)(v5 + 4);
  else
    v8 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v45, v8, v5, v4, *(_QWORD *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7])
    v9 = (uint64_t)v7;
  else
    v9 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v43, v9, v6, v4, *(_QWORD *)(v9 + 32));
  if (v44 == v48)
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *result = *v11;
      v12 = *v11;
      v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (v14 = *(_QWORD *)(v13 + 8 * (v12 >> 39))) != 0
        && (v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            v17 = v6[7],
            v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (v20 = *(_DWORD *)(v19 + 4) == (_DWORD)v18)
          : (v20 = 0),
            v20))
      {
        v21 = v6[11];
        v22 = v6[10] + 33 * v15;
      }
      else
      {
        v21 = v6[11];
        v22 = v21;
      }
      if (v22 == v21)
        v23 = 0;
      else
        v23 = v22;
      *(_BYTE *)(v23 + 32) = 1;
      v24 = v48;
      v11 = *(unint64_t **)(v45 + 32);
      if (++v48 != v11)
      {
        v25 = v46[4];
        v26 = (v46[5] - v25) >> 3;
        v27 = v24 + 2;
        while (1)
        {
          v28 = *((unsigned int *)v27 - 1);
          v29 = v28 >> 7;
          if (v28 >> 7 < v26)
          {
            v30 = *(_QWORD *)(v25 + 8 * v29);
            if (v30)
            {
              v31 = *(unsigned __int16 *)(v30 + 2 * (v28 & 0x7F));
              v33 = v46[7];
              v32 = v46[8];
              if (v31 < (v32 - v33) >> 3)
              {
                v34 = v33 + 8 * v31;
                if (v34 != v32 && *(_DWORD *)(v34 + 4) == (_DWORD)v28)
                {
                  v36 = v47[4];
                  if (v29 < (v47[5] - v36) >> 3)
                  {
                    v37 = *(_QWORD *)(v36 + 8 * v29);
                    if (v37)
                    {
                      v38 = *(unsigned __int16 *)(v37 + 2 * (v28 & 0x7F));
                      v39 = v47[7];
                      v40 = v47[8];
                      if (v38 < (v40 - v39) >> 3)
                      {
                        v41 = v39 + 8 * v38;
                        if (v41 != v40 && *(_DWORD *)(v41 + 4) == (_DWORD)v28)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v48 = v27;
          v20 = v27++ == v11;
          if (v20)
            goto LABEL_9;
        }
        v11 = v27 - 1;
      }
LABEL_9:
      ;
    }
    while (v44 != v11);
  }
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::UseIdentityMatrix>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x944162BB9DE8E7EBLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x944162BB9DE8E7EBLL;
      if (*(_QWORD *)&v3 <= 0x944162BB9DE8E7EBLL)
        v5 = 0x944162BB9DE8E7EBLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x944162BB9DE8E7EBLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x944162BB9DE8E7EBLL)
            {
              if (v7[2] == 0x944162BB9DE8E7EBLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x944162BB9DE8E7EBLL)
          {
            if (v7[2] == 0x944162BB9DE8E7EBLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::UseIdentityMatrix]";
  *(_QWORD *)(v11 + 24) = 25;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42720A8;
  *(_QWORD *)(v11 + 8) = 0x944162BB9DE8E7EBLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x944162BB9DE8E7EBLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x944162BB9DE8E7EBLL;
  v15[1] = "md::ls::UseIdentityMatrix]";
  v15[2] = 25;
  gdc::Registry::_registerStorageDataSignals(a1, 0x944162BB9DE8E7EBLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6E406C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::UseIdentityMatrix>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UseIdentityMatrix>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UseIdentityMatrix>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UseIdentityMatrix>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTileClipping>(md::ita::PrepareFunctionConstantDescriptorTileClipping &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorTileClipping &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTileClipping>(md::ita::PrepareFunctionConstantDescriptorTileClipping &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTileClipping>(md::ita::PrepareFunctionConstantDescriptorTileClipping &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorTileClipping &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTileClipping>(md::ita::PrepareFunctionConstantDescriptorTileClipping &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289518;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTileClipping>(md::ita::PrepareFunctionConstantDescriptorTileClipping &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorTileClipping &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTileClipping>(md::ita::PrepareFunctionConstantDescriptorTileClipping &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289518;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTileClipping>(md::ita::PrepareFunctionConstantDescriptorTileClipping &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorTileClipping &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTileClipping>(md::ita::PrepareFunctionConstantDescriptorTileClipping &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6E4280(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTileClipping>(md::ita::PrepareFunctionConstantDescriptorTileClipping &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorTileClipping &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTileClipping>(md::ita::PrepareFunctionConstantDescriptorTileClipping &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTileClipping>(md::ita::PrepareFunctionConstantDescriptorTileClipping &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorTileClipping &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTileClipping>(md::ita::PrepareFunctionConstantDescriptorTileClipping &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289560;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTileClipping>(md::ita::PrepareFunctionConstantDescriptorTileClipping &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorTileClipping &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTileClipping>(md::ita::PrepareFunctionConstantDescriptorTileClipping &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289560;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTileClipping>(md::ita::PrepareFunctionConstantDescriptorTileClipping &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorTileClipping &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTileClipping>(md::ita::PrepareFunctionConstantDescriptorTileClipping &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0x4F0CC5B74BC3AC16;
  v2[1] = "md::ls::UniqueRenderArrayID]";
  *(_QWORD *)&result = 27;
  *((_OWORD *)v2 + 1) = xmmword_19FFB42B0;
  v2[4] = "md::ls::ClippingConstantDataHandle]";
  v2[5] = 34;
  v2[6] = 0x7931433C9A6EB2C6;
  v2[7] = "md::ls::SharedUniqueID]";
  v2[8] = 22;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTileClipping>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTileClipping>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTileClipping>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTileClipping>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279330;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTileClipping>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTileClipping>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4279330;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTileClipping>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTileClipping>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  int v47;
  void *v48;
  char v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  _QWORD *v87;
  BOOL v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  unint64_t v100;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = gdc::Registry::storage<md::ls::UniqueRenderArrayID>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::ClippingConstantDataHandle>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::SharedUniqueID>(v2);
  v6 = gdc::Registry::storage<md::ls::FunctionConstants>(v2);
  v7 = (_QWORD *)v6;
  v8 = (_QWORD *)(v6 + 32);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v8 = (_QWORD *)(v3 + 32);
  if (v4[8] - v4[7] < v8[4] - v8[3])
    v8 = v4 + 4;
  v95 = v8;
  v96 = (_QWORD *)v6;
  v97 = (_QWORD *)v3;
  v98 = v4;
  v10 = (_QWORD *)v8[3];
  v9 = (_QWORD *)v8[4];
  v99 = v10;
  v94 = v9;
  if (v9 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v95))
  {
    v11 = v10 + 1;
    do
    {
      v10 = v11;
      v99 = v11;
      if (v11 == v94)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v95);
      v11 = v10 + 1;
    }
    while (!isValid);
  }
  if (v94 != v10)
  {
    v13 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v91 = v4;
    v92 = v5;
    while (1)
    {
      *v13 = *v10;
      v15 = *v10;
      v16 = HIDWORD(*v10);
      v17 = *v10 >> 39;
      v18 = v7[4];
      if (v17 < (v7[5] - v18) >> 3
        && (v19 = *(_QWORD *)(v18 + 8 * v17)) != 0
        && (v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            v22 = v7[7],
            v21 = v7[8],
            v20 < (v21 - v22) >> 3)
        && ((v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == (_DWORD)v16) : (v24 = 0), v24))
      {
        v90 = 33 * v20;
        v25 = v7[11];
        v26 = v7[10] + v90;
      }
      else
      {
        v25 = v7[11];
        v26 = v25;
      }
      if (v26 == v25)
        v27 = 0;
      else
        v27 = v26;
      v28 = v4[4];
      if (v17 < (v4[5] - v28) >> 3
        && (v29 = *(_QWORD *)(v28 + 8 * v17)) != 0
        && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            v32 = v4[7],
            v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == (_DWORD)v16) : (v34 = 0), v34))
      {
        v35 = (unint64_t *)(v4[10] + 8 * v30);
      }
      else
      {
        v35 = (unint64_t *)v4[11];
      }
      v36 = v5[4];
      if (v17 < (v5[5] - v36) >> 3
        && (v37 = *(_QWORD *)(v36 + 8 * v17)) != 0
        && (v38 = *(unsigned __int16 *)(v37 + 2 * (HIDWORD(v15) & 0x7F)),
            v40 = v5[7],
            v39 = v5[8],
            v38 < (v39 - v40) >> 3)
        && ((v41 = v40 + 8 * v38, v41 != v39) ? (v42 = *(_DWORD *)(v41 + 4) == (_DWORD)v16) : (v42 = 0), v42))
      {
        v43 = v5[11];
        v44 = v5[10] + 24 * v38;
      }
      else
      {
        v43 = v5[11];
        v44 = v43;
      }
      if (v44 == v43)
        v45 = 0;
      else
        v45 = v44;
      +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      v47 = objc_msgSend(v46, "enableTileClipping");

      if (v47)
      {
        +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        v49 = objc_msgSend(v48, "enableTileClippingDebug");

      }
      else
      {
        v49 = 0;
      }
      v50 = **(_QWORD **)(a1 + 8);
      v51 = *(_QWORD **)v50;
      v52 = *(_QWORD **)(v50 + 8);
      if (v51 != v52)
      {
        while (*v51 != 0x41D4E9297E100630)
        {
          v51 += 5;
          if (v51 == v52)
            goto LABEL_59;
        }
      }
      if (v51 == v52)
      {
LABEL_59:
        v53 = 0;
      }
      else
      {
        v53 = (_QWORD *)v51[3];
        v54 = (std::__shared_weak_count *)v51[4];
        if (v54)
        {
          p_shared_owners = (unint64_t *)&v54->__shared_owners_;
          do
            v56 = __ldxr(p_shared_owners);
          while (__stxr(v56 + 1, p_shared_owners));
          do
            v57 = __ldaxr(p_shared_owners);
          while (__stlxr(v57 - 1, p_shared_owners));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
      }
      v58 = *v35;
      v100 = v58;
      v59 = v53[483];
      if (v58 >= (unint64_t)((v53[484] - v59) >> 3)
        || ((v60 = *(_QWORD *)(v59 + 8 * v58)) != 0 ? (v61 = HIDWORD(v58) == HIDWORD(v60)) : (v61 = 0),
            !v61
         || ((v86 = v53[486], v87 = (_QWORD *)(v86 + 24 * v60), v87 != (_QWORD *)v53[487])
           ? (v88 = v86 == 0)
           : (v88 = 1),
             v88)))
      {
        v5 = v92;
      }
      else
      {
        v89 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>> const&>,std::tuple<>>((uint64_t)(v53 + 475), v58, &v100);
        ++v89[3];
        v5 = v92;
        if (*v87)
        {
          if (v45 && *(_BYTE *)(v45 + 16))
            LOBYTE(v47) = 0;
          *(_BYTE *)(v27 + 26) = v47;
          goto LABEL_67;
        }
      }
      v49 = 0;
      *(_BYTE *)(v27 + 26) = 0;
LABEL_67:
      *(_BYTE *)(v27 + 27) = v49;
      v10 = (_QWORD *)v95[4];
      v14 = v99 + 1;
      v99 = v14;
      v4 = v91;
      if (v14 != v10)
      {
        v62 = v96[4];
        while (1)
        {
          v63 = *((unsigned int *)v14 + 1);
          v64 = v63 >> 7;
          if (v63 >> 7 < (v96[5] - v62) >> 3)
          {
            v65 = *(_QWORD *)(v62 + 8 * v64);
            if (v65)
            {
              v66 = v63 & 0x7F;
              v67 = *(unsigned __int16 *)(v65 + 2 * v66);
              v69 = v96[7];
              v68 = v96[8];
              if (v67 < (v68 - v69) >> 3)
              {
                v70 = v69 + 8 * v67;
                if (v70 != v68 && *(_DWORD *)(v70 + 4) == (_DWORD)v63)
                {
                  v72 = v97[4];
                  if (v64 < (v97[5] - v72) >> 3)
                  {
                    v73 = *(_QWORD *)(v72 + 8 * v64);
                    if (v73)
                    {
                      v74 = *(unsigned __int16 *)(v73 + 2 * v66);
                      v76 = v97[7];
                      v75 = v97[8];
                      if (v74 < (v75 - v76) >> 3)
                      {
                        v77 = v76 + 8 * v74;
                        if (v77 != v75 && *(_DWORD *)(v77 + 4) == (_DWORD)v63)
                        {
                          v79 = v98[4];
                          if (v64 < (v98[5] - v79) >> 3)
                          {
                            v80 = *(_QWORD *)(v79 + 8 * v64);
                            if (v80)
                            {
                              v81 = *(unsigned __int16 *)(v80 + 2 * v66);
                              v83 = v98[7];
                              v82 = v98[8];
                              if (v81 < (v82 - v83) >> 3)
                              {
                                v84 = v83 + 8 * v81;
                                if (*(_DWORD *)(v84 + 4) == (_DWORD)v63 && v84 != v82)
                                  break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v10)
          {
            v14 = v10;
            goto LABEL_13;
          }
        }
        v10 = v14;
LABEL_13:
        v99 = v14;
      }
      if (v94 == v10)
        goto LABEL_107;
    }
  }
  v13 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_107:
  *v13 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_19F6E491C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::UniqueRenderArrayID>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x4F0CC5B74BC3AC16;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x4F0CC5B74BC3AC16;
      if (*(_QWORD *)&v3 <= 0x4F0CC5B74BC3AC16uLL)
        v5 = 0x4F0CC5B74BC3AC16uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x4F0CC5B74BC3AC16;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x4F0CC5B74BC3AC16)
            {
              if (v7[2] == 0x4F0CC5B74BC3AC16)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x4F0CC5B74BC3AC16)
          {
            if (v7[2] == 0x4F0CC5B74BC3AC16)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::UniqueRenderArrayID]";
  *(_QWORD *)(v11 + 24) = 27;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272468;
  *(_QWORD *)(v11 + 8) = 0x4F0CC5B74BC3AC16;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x4F0CC5B74BC3AC16uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x4F0CC5B74BC3AC16;
  v15[1] = "md::ls::UniqueRenderArrayID]";
  v15[2] = 27;
  gdc::Registry::_registerStorageDataSignals(a1, 0x4F0CC5B74BC3AC16, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6E4B3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::SharedUniqueID>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x7931433C9A6EB2C6;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x7931433C9A6EB2C6;
      if (*(_QWORD *)&v3 <= 0x7931433C9A6EB2C6uLL)
        v5 = 0x7931433C9A6EB2C6uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x7931433C9A6EB2C6;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x7931433C9A6EB2C6)
            {
              if (v7[2] == 0x7931433C9A6EB2C6)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x7931433C9A6EB2C6)
          {
            if (v7[2] == 0x7931433C9A6EB2C6)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::SharedUniqueID]";
  *(_QWORD *)(v11 + 24) = 22;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271868;
  *(_QWORD *)(v11 + 8) = 0x7931433C9A6EB2C6;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x7931433C9A6EB2C6uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x7931433C9A6EB2C6;
  v15[1] = "md::ls::SharedUniqueID]";
  v15[2] = 22;
  gdc::Registry::_registerStorageDataSignals(a1, 0x7931433C9A6EB2C6, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6E4D64(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::SharedUniqueID>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedUniqueID>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 24 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_QWORD *)(v15 - 8);
  *(_OWORD *)v14 = *(_OWORD *)(v15 - 24);
  *(_QWORD *)(v14 + 16) = v16;
  a1[11] -= 24;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SharedUniqueID>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedUniqueID>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::UniqueRenderArrayID>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueRenderArrayID>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(v15 - 8);
  a1[11] = v15 - 8;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UniqueRenderArrayID>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueRenderArrayID>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPositionScale>(md::ita::PrepareFunctionConstantDescriptorPositionScale &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorPositionScale &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPositionScale>(md::ita::PrepareFunctionConstantDescriptorPositionScale &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPositionScale>(md::ita::PrepareFunctionConstantDescriptorPositionScale &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorPositionScale &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPositionScale>(md::ita::PrepareFunctionConstantDescriptorPositionScale &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289638;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPositionScale>(md::ita::PrepareFunctionConstantDescriptorPositionScale &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorPositionScale &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPositionScale>(md::ita::PrepareFunctionConstantDescriptorPositionScale &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289638;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPositionScale>(md::ita::PrepareFunctionConstantDescriptorPositionScale &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorPositionScale &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPositionScale>(md::ita::PrepareFunctionConstantDescriptorPositionScale &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6E5104(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPositionScale>(md::ita::PrepareFunctionConstantDescriptorPositionScale &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorPositionScale &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPositionScale>(md::ita::PrepareFunctionConstantDescriptorPositionScale &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPositionScale>(md::ita::PrepareFunctionConstantDescriptorPositionScale &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorPositionScale &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPositionScale>(md::ita::PrepareFunctionConstantDescriptorPositionScale &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289680;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPositionScale>(md::ita::PrepareFunctionConstantDescriptorPositionScale &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorPositionScale &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPositionScale>(md::ita::PrepareFunctionConstantDescriptorPositionScale &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289680;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPositionScale>(md::ita::PrepareFunctionConstantDescriptorPositionScale &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorPositionScale &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPositionScale>(md::ita::PrepareFunctionConstantDescriptorPositionScale &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x6C7EE74910D42096;
  v2[1] = "md::ls::PositionScaleInfoConstantDataHandle]";
  *(_QWORD *)&result = 43;
  *((_OWORD *)v2 + 1) = xmmword_19FFB42C0;
  v2[4] = "md::ls::IsMercator]";
  v2[5] = 18;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPositionScale>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPositionScale>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPositionScale>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPositionScale>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42793C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPositionScale>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPositionScale>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42793C0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPositionScale>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPositionScale>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD v56[5];
  _QWORD *v57;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::PositionScaleInfoConstantDataHandle>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::IsMercator>(v2);
  v5 = gdc::Registry::storage<md::ls::FunctionConstants>(v2);
  v6 = (_QWORD *)v5;
  v7 = (_QWORD *)(v5 + 32);
  if (v3[8] - v3[7] < *(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56))
    v7 = v3 + 4;
  if (v4[8] - v4[7] >= v7[4] - v7[3])
    v8 = v7;
  else
    v8 = v4 + 4;
  v56[0] = v8;
  v56[1] = v5;
  v56[2] = v3;
  v56[3] = v4;
  v10 = (_QWORD *)v8[3];
  v9 = (_QWORD *)v8[4];
  v57 = v10;
  if (v9 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v56))
  {
    v11 = v10 + 1;
    do
    {
      v10 = v11;
      v57 = v11;
      if (v11 == v9)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v56);
      v11 = v10 + 1;
    }
    while (!isValid);
  }
  if (v9 == v10)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *result = *v10;
      v15 = *v10;
      v16 = *v10 >> 39;
      v17 = v6[4];
      v18 = (v6[5] - v17) >> 3;
      if (v16 < v18
        && (v19 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            v22 = v6[7],
            v21 = v6[8],
            v20 < (v21 - v22) >> 3)
        && ((v23 = HIDWORD(v15), v24 = v22 + 8 * v20, v24 != v21)
          ? (v25 = *(_DWORD *)(v24 + 4) == (_DWORD)v23)
          : (v25 = 0),
            v25))
      {
        v26 = v6[11];
        v27 = v6[10] + 33 * v20;
      }
      else
      {
        v26 = v6[11];
        v27 = v26;
      }
      if (v27 == v26)
        v28 = 0;
      else
        v28 = v27;
      *(_BYTE *)(v28 + 25) = 1;
      v29 = (_QWORD *)v8[4];
      v14 = v10 + 1;
      v57 = v10 + 1;
      if (v10 + 1 != v29)
      {
        v31 = v6[7];
        v30 = v6[8];
        v32 = v3[4];
        v34 = v3[7];
        v33 = v3[8];
        v35 = v4[4];
        v37 = v4[7];
        v36 = v4[8];
        while (1)
        {
          v38 = *((unsigned int *)v14 + 1);
          v39 = v38 >> 7;
          if (v38 >> 7 < v18)
          {
            v40 = *(_QWORD *)(v17 + 8 * v39);
            if (v40)
            {
              v41 = v38 & 0x7F;
              v42 = *(unsigned __int16 *)(v40 + 2 * v41);
              if ((v30 - v31) >> 3 > v42)
              {
                v43 = v31 + 8 * v42;
                v44 = v43 != v30 && *(_DWORD *)(v43 + 4) == (_DWORD)v38;
                if (v44 && v39 < (v3[5] - v32) >> 3)
                {
                  v46 = *(_QWORD *)(v32 + 8 * v39);
                  if (v46)
                  {
                    v47 = *(unsigned __int16 *)(v46 + 2 * v41);
                    if ((v33 - v34) >> 3 > v47)
                    {
                      v48 = v34 + 8 * v47;
                      v49 = v48 != v33 && *(_DWORD *)(v48 + 4) == (_DWORD)v38;
                      if (v49 && v39 < (v4[5] - v35) >> 3)
                      {
                        v51 = *(_QWORD *)(v35 + 8 * v39);
                        if (v51)
                        {
                          v52 = *(unsigned __int16 *)(v51 + 2 * v41);
                          if ((v36 - v37) >> 3 > v52)
                          {
                            v53 = v37 + 8 * v52;
                            if (*(_DWORD *)(v53 + 4) == (_DWORD)v38 && v53 != v36)
                              break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v29)
          {
            v14 = v29;
            goto LABEL_14;
          }
        }
        v29 = v14;
LABEL_14:
        v57 = v14;
      }
      v10 = v29;
    }
    while (v9 != v29);
  }
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorECEF &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorECEF &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288828;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorECEF &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288828;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorECEF &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;
  char **v3;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 48;
  v3 = (char **)a1;
  _ZZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsES5_EEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_ENKUlTpTnmNS1_16integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSH_(&v3);
}

void sub_19F6E55A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsES5_EEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_ENKUlTpTnmNS1_16integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSH_(char ***a1)
{
  char **v2;
  unint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  char **v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;

  v2 = *a1;
  v4 = (*a1)[1];
  v3 = (unint64_t)(*a1)[2];
  if ((unint64_t)v4 >= v3)
  {
    v6 = *v2;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *v2) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_36;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - (_QWORD)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_37;
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[24 * v7];
    *(_QWORD *)v12 = 0xC62D89929260CB56;
    *((_QWORD *)v12 + 1) = "md::ls::FunctionConstants]";
    *((_QWORD *)v12 + 2) = 25;
    v5 = v12 + 24;
    if (v4 != v6)
    {
      do
      {
        v13 = *(_OWORD *)(v4 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v4 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v4 -= 24;
      }
      while (v4 != v6);
      v4 = *v2;
    }
    *v2 = v12;
    v2[1] = v5;
    v2[2] = &v11[24 * v10];
    if (v4)
      operator delete(v4);
  }
  else
  {
    *(_QWORD *)v4 = 0xC62D89929260CB56;
    *((_QWORD *)v4 + 1) = "md::ls::FunctionConstants]";
    *((_QWORD *)v4 + 2) = 25;
    v5 = v4 + 24;
  }
  v2[1] = v5;
  v14 = *a1;
  v16 = (*a1)[1];
  v15 = (unint64_t)v14[2];
  if ((unint64_t)v16 < v15)
  {
    *(_QWORD *)v16 = 0xC62D89929260CB56;
    *((_QWORD *)v16 + 1) = "md::ls::FunctionConstants]";
    *((_QWORD *)v16 + 2) = 25;
    v17 = v16 + 24;
    goto LABEL_35;
  }
  v18 = *v14;
  v19 = 0xAAAAAAAAAAAAAAABLL * ((v16 - *v14) >> 3);
  v20 = v19 + 1;
  if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_36:
    abort();
  v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v18) >> 3);
  if (2 * v21 > v20)
    v20 = 2 * v21;
  if (v21 >= 0x555555555555555)
    v22 = 0xAAAAAAAAAAAAAAALL;
  else
    v22 = v20;
  if (!v22)
  {
    v23 = 0;
    goto LABEL_30;
  }
  if (v22 > 0xAAAAAAAAAAAAAAALL)
LABEL_37:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v23 = (char *)operator new(24 * v22);
LABEL_30:
  v24 = &v23[24 * v19];
  *(_QWORD *)v24 = 0xC62D89929260CB56;
  *((_QWORD *)v24 + 1) = "md::ls::FunctionConstants]";
  *((_QWORD *)v24 + 2) = 25;
  v17 = v24 + 24;
  if (v16 != v18)
  {
    do
    {
      v25 = *(_OWORD *)(v16 - 24);
      *((_QWORD *)v24 - 1) = *((_QWORD *)v16 - 1);
      *(_OWORD *)(v24 - 24) = v25;
      v24 -= 24;
      v16 -= 24;
    }
    while (v16 != v18);
    v16 = *v14;
  }
  *v14 = v24;
  v14[1] = v17;
  v14[2] = &v23[24 * v22];
  if (v16)
    operator delete(v16);
LABEL_35:
  v14[1] = v17;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorECEF &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorECEF &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288870;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorECEF &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288870;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorECEF &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x237F9D3BCC905318;
  v2[1] = "md::ls::IsMercator]";
  *(_QWORD *)&result = 18;
  *((_OWORD *)v2 + 1) = xmmword_19FFB42D0;
  v2[4] = "md::ls::IsNotMercator]";
  v2[5] = 21;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorECEF>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorECEF>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorECEF>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorECEF>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278CB8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorECEF>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorECEF>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278CB8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorECEF>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorECEF>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42757D8;
  v4[1] = a2;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E4275898;
  v5[1] = a2;
  v11[0] = &off_1E427C618;
  v12 = v11;
  (*(void (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v11);
  v6 = v12;
  if (v12 == v11)
  {
    v7 = 4;
    v6 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v11[0] = &off_1E427C660;
  v12 = v11;
  (*(void (**)(_QWORD *, _QWORD *))(*v5 + 16))(v5, v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_10;
  }
  if (v12)
  {
    v9 = 5;
LABEL_10:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F6E5AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a13;
  if (a13 == v15)
  {
    v18 = 4;
    v17 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *IsNot;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57[4];
  unint64_t *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t *v62;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  IsNot = (_QWORD *)gdc::Registry::storage<md::ls::IsNotMercator>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (IsNot[8] - IsNot[7] >= v5[8] - v5[7])
    v8 = (uint64_t)(v5 + 4);
  else
    v8 = (uint64_t)(IsNot + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v59, v8, v5, IsNot, *(_QWORD *)(v8 + 24));
  if (IsNot[8] - IsNot[7] >= v6[8] - v6[7])
    v9 = (uint64_t)v7;
  else
    v9 = (uint64_t)(IsNot + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v57, v9, v6, IsNot, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v58 == v62)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v6[4];
    if (v13 >> 39 >= (v6[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v6[7];
    v19 = v6[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v56 = 33 * v18;
      v23 = v6[11];
      v24 = v6[10] + v56;
    }
    else
    {
LABEL_17:
      v23 = v6[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = IsNot[4];
    if (v15 < (IsNot[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = IsNot[7];
        v29 = IsNot[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = IsNot[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v62;
    v11 = *(unint64_t **)(v59 + 32);
    if (++v62 != v11)
    {
      v39 = v60[4];
      v40 = (v60[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v60[7];
            result = v60[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v61[4];
                result = v61[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v61[7];
                    v52 = v61[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v62 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v58 == v11)
      goto LABEL_56;
  }
  v33 = IsNot[11];
  v34 = IsNot[10] + v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *IsNot;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  IsNot = (_QWORD *)gdc::Registry::storage<md::ls::IsNotMercator>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (IsNot[8] - IsNot[7] >= v3[8] - v3[7])
    v6 = (uint64_t)(v3 + 4);
  else
    v6 = (uint64_t)(IsNot + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v3, IsNot, *(_QWORD *)(v6 + 24));
  if (IsNot[8] - IsNot[7] >= v4[8] - v4[7])
    v7 = (uint64_t)v5;
  else
    v7 = (uint64_t)(IsNot + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v4, IsNot, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t gdc::Registry::storage<md::ls::IsNotMercator>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xB3266AFC8DD8D727;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xB3266AFC8DD8D727;
      if (*(_QWORD *)&v3 <= 0xB3266AFC8DD8D727)
        v5 = 0xB3266AFC8DD8D727 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xB3266AFC8DD8D727;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xB3266AFC8DD8D727)
            {
              if (v7[2] == 0xB3266AFC8DD8D727)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xB3266AFC8DD8D727)
          {
            if (v7[2] == 0xB3266AFC8DD8D727)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::IsNotMercator]";
  *(_QWORD *)(v11 + 24) = 21;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271568;
  *(_QWORD *)(v11 + 8) = 0xB3266AFC8DD8D727;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xB3266AFC8DD8D727, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xB3266AFC8DD8D727;
  v15[1] = "md::ls::IsNotMercator]";
  v15[2] = 21;
  gdc::Registry::_registerStorageDataSignals(a1, 0xB3266AFC8DD8D727, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6E60D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::IsNotMercator>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsNotMercator>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IsNotMercator>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsNotMercator>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsMercator const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsMercator const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57[4];
  unint64_t *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t *v62;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::IsMercator>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7])
    v8 = (uint64_t)(v5 + 4);
  else
    v8 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v59, v8, v5, v4, *(_QWORD *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7])
    v9 = (uint64_t)v7;
  else
    v9 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v57, v9, v6, v4, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v58 == v62)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v6[4];
    if (v13 >> 39 >= (v6[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v6[7];
    v19 = v6[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v56 = 33 * v18;
      v23 = v6[11];
      v24 = v6[10] + v56;
    }
    else
    {
LABEL_17:
      v23 = v6[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v4[4];
    if (v15 < (v4[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v4[7];
        v29 = v4[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v4[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v62;
    v11 = *(unint64_t **)(v59 + 32);
    if (++v62 != v11)
    {
      v39 = v60[4];
      v40 = (v60[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v60[7];
            result = v60[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v61[4];
                result = v61[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v61[7];
                    v52 = v61[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v62 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v58 == v11)
      goto LABEL_56;
  }
  v33 = v4[11];
  v34 = v4[10] + v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsMercator const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::IsMercator>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v2[8] - v2[7] >= v3[8] - v3[7])
    v6 = (uint64_t)(v3 + 4);
  else
    v6 = (uint64_t)(v2 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v3, v2, *(_QWORD *)(v6 + 24));
  if (v2[8] - v2[7] >= v4[8] - v4[7])
    v7 = (uint64_t)v5;
  else
    v7 = (uint64_t)(v2 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v4, v2, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorAO>(md::ita::PrepareFunctionConstantDescriptorAO &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorAO &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorAO>(md::ita::PrepareFunctionConstantDescriptorAO &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorAO>(md::ita::PrepareFunctionConstantDescriptorAO &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorAO &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorAO>(md::ita::PrepareFunctionConstantDescriptorAO &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42881F8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorAO>(md::ita::PrepareFunctionConstantDescriptorAO &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorAO &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorAO>(md::ita::PrepareFunctionConstantDescriptorAO &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42881F8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorAO>(md::ita::PrepareFunctionConstantDescriptorAO &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorAO &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorAO>(md::ita::PrepareFunctionConstantDescriptorAO &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6E6680(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorAO>(md::ita::PrepareFunctionConstantDescriptorAO &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorAO &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorAO>(md::ita::PrepareFunctionConstantDescriptorAO &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorAO>(md::ita::PrepareFunctionConstantDescriptorAO &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorAO &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorAO>(md::ita::PrepareFunctionConstantDescriptorAO &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288240;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorAO>(md::ita::PrepareFunctionConstantDescriptorAO &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorAO &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorAO>(md::ita::PrepareFunctionConstantDescriptorAO &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288240;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorAO>(md::ita::PrepareFunctionConstantDescriptorAO &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorAO &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorAO>(md::ita::PrepareFunctionConstantDescriptorAO &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0xD5AD9B8C3FE62EE8;
  result[1] = "md::ls::StyleGroundOcclusionConstantDataHandle]";
  result[2] = 46;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorAO>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorAO>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorAO>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorAO>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42789A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorAO>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorAO>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42789A0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorAO>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorAO>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *result;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43[4];
  unint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t *v48;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::StyleGroundOcclusionConstantDataHandle>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7])
    v8 = (uint64_t)(v5 + 4);
  else
    v8 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v45, v8, v5, v4, *(_QWORD *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7])
    v9 = (uint64_t)v7;
  else
    v9 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v43, v9, v6, v4, *(_QWORD *)(v9 + 32));
  if (v44 == v48)
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *result = *v11;
      v12 = *v11;
      v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (v14 = *(_QWORD *)(v13 + 8 * (v12 >> 39))) != 0
        && (v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            v17 = v6[7],
            v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (v20 = *(_DWORD *)(v19 + 4) == (_DWORD)v18)
          : (v20 = 0),
            v20))
      {
        v21 = v6[11];
        v22 = v6[10] + 33 * v15;
      }
      else
      {
        v21 = v6[11];
        v22 = v21;
      }
      if (v22 == v21)
        v23 = 0;
      else
        v23 = v22;
      *(_BYTE *)(v23 + 16) = 1;
      v24 = v48;
      v11 = *(unint64_t **)(v45 + 32);
      if (++v48 != v11)
      {
        v25 = v46[4];
        v26 = (v46[5] - v25) >> 3;
        v27 = v24 + 2;
        while (1)
        {
          v28 = *((unsigned int *)v27 - 1);
          v29 = v28 >> 7;
          if (v28 >> 7 < v26)
          {
            v30 = *(_QWORD *)(v25 + 8 * v29);
            if (v30)
            {
              v31 = *(unsigned __int16 *)(v30 + 2 * (v28 & 0x7F));
              v33 = v46[7];
              v32 = v46[8];
              if (v31 < (v32 - v33) >> 3)
              {
                v34 = v33 + 8 * v31;
                if (v34 != v32 && *(_DWORD *)(v34 + 4) == (_DWORD)v28)
                {
                  v36 = v47[4];
                  if (v29 < (v47[5] - v36) >> 3)
                  {
                    v37 = *(_QWORD *)(v36 + 8 * v29);
                    if (v37)
                    {
                      v38 = *(unsigned __int16 *)(v37 + 2 * (v28 & 0x7F));
                      v39 = v47[7];
                      v40 = v47[8];
                      if (v38 < (v40 - v39) >> 3)
                      {
                        v41 = v39 + 8 * v38;
                        if (v41 != v40 && *(_DWORD *)(v41 + 4) == (_DWORD)v28)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v48 = v27;
          v20 = v27++ == v11;
          if (v20)
            goto LABEL_9;
        }
        v11 = v27 - 1;
      }
LABEL_9:
      ;
    }
    while (v44 != v11);
  }
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorFog>(md::ita::PrepareFunctionConstantDescriptorFog &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorFog &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorFog>(md::ita::PrepareFunctionConstantDescriptorFog &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorFog>(md::ita::PrepareFunctionConstantDescriptorFog &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorFog &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorFog>(md::ita::PrepareFunctionConstantDescriptorFog &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42885E8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorFog>(md::ita::PrepareFunctionConstantDescriptorFog &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorFog &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorFog>(md::ita::PrepareFunctionConstantDescriptorFog &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42885E8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorFog>(md::ita::PrepareFunctionConstantDescriptorFog &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorFog &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorFog>(md::ita::PrepareFunctionConstantDescriptorFog &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6E6A98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorFog>(md::ita::PrepareFunctionConstantDescriptorFog &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorFog &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorFog>(md::ita::PrepareFunctionConstantDescriptorFog &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorFog>(md::ita::PrepareFunctionConstantDescriptorFog &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorFog &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorFog>(md::ita::PrepareFunctionConstantDescriptorFog &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288630;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorFog>(md::ita::PrepareFunctionConstantDescriptorFog &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorFog &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorFog>(md::ita::PrepareFunctionConstantDescriptorFog &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288630;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorFog>(md::ita::PrepareFunctionConstantDescriptorFog &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorFog &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorFog>(md::ita::PrepareFunctionConstantDescriptorFog &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x3E8485C60908F920;
  v2[1] = "md::ls::IsMaterial]";
  *(_QWORD *)&result = 18;
  *((_OWORD *)v2 + 1) = xmmword_19FFB42E0;
  v2[4] = "md::ls::MainPassItem]";
  v2[5] = 20;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorFog>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorFog>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorFog>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorFog>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278B98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorFog>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorFog>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278B98;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorFog>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorFog>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (***v8)(_QWORD);
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  float v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42757A8;
  v4[1] = a2;
  v5 = ***(uint64_t ****)(a1 + 8);
  if (v5 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v5 != 0x22D45F5AAD4BF408)
  {
    v6 = v5 + 5;
    do
    {
      v7 = *v6;
      v6 += 5;
    }
    while (v7 != 0x22D45F5AAD4BF408);
    v5 = v6 - 5;
  }
  v8 = (uint64_t (***)(_QWORD))v5[3];
  v9 = (std::__shared_weak_count *)v5[4];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = *(_QWORD **)((**v8)(v8) + 8);
  v14 = v13[1];
  if ((v14 & (v14 - 1)) != 0)
  {
    v16 = 0x1AF456233693CD46;
    if (v14 <= 0x1AF456233693CD46)
      v16 = 0x1AF456233693CD46 % v14;
    v15 = *(_QWORD **)(*v13 + 8 * v16);
    do
    {
      do
        v15 = (_QWORD *)*v15;
      while (v15[1] != 0x1AF456233693CD46);
    }
    while (v15[2] != 0x1AF456233693CD46);
  }
  else
  {
    v15 = *(_QWORD **)(*v13 + 8 * ((v14 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v15 = (_QWORD *)*v15;
      while (v15[1] != 0x1AF456233693CD46);
    }
    while (v15[2] != 0x1AF456233693CD46);
  }
  v17 = *(double *)(*(_QWORD *)(v15[5] + 32) + 3040);
  if (v17 < 1.0)
  {
    v21[0] = &off_1E427C588;
    v22 = v21;
    (*(void (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v21);
    v18 = v22;
    if (v22 == v21)
    {
      v19 = 4;
      v18 = v21;
      goto LABEL_27;
    }
    if (v22)
    {
      v19 = 5;
LABEL_27:
      (*(void (**)(void))(*v18 + 8 * v19))();
    }
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F6E6E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMaterial const&,md::ls::MainPassItem const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsMaterial const&,md::ls::MainPassItem const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMaterial const&,md::ls::MainPassItem const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsMaterial const&,md::ls::MainPassItem const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL4 isValid;
  uint64_t (**v17)(_QWORD);
  uint64_t (*v18)(_QWORD);
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t result;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v82;
  _QWORD v83[5];
  _QWORD *v84;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::IsMaterial>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::MainPassItem>(v3);
  v6 = gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v10 = (_QWORD *)v6;
  v11 = (_QWORD *)(v6 + 32);
  if (v4[8] - v4[7] < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v11 = v4 + 4;
  if (v5[8] - v5[7] >= v11[4] - v11[3])
    v12 = v11;
  else
    v12 = v5 + 4;
  v83[0] = v12;
  v83[1] = v6;
  v83[2] = v4;
  v83[3] = v5;
  v14 = (_QWORD *)v12[3];
  v13 = (_QWORD *)v12[4];
  v84 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v83))
  {
    v15 = v14 + 1;
    do
    {
      v14 = v15;
      v84 = v15;
      if (v15 == v13)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v83);
      v15 = v14 + 1;
    }
    while (!isValid);
  }
  v17 = &ecs2::Runtime::_localEntity;
  v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14)
    goto LABEL_82;
  v19 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v19 = *v14;
    v21 = *v14;
    v22 = HIDWORD(*v14);
    v23 = *v14 >> 39;
    v24 = v10[4];
    if (v23 >= (v10[5] - v24) >> 3)
      goto LABEL_23;
    v25 = *(_QWORD *)(v24 + 8 * v23);
    if (!v25)
      goto LABEL_23;
    v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    v28 = v10[7];
    v27 = v10[8];
    if (v26 >= (v27 - v28) >> 3)
      goto LABEL_23;
    v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == (_DWORD)v22)
    {
      v82 = 33 * v26;
      v31 = v10[11];
      v32 = v10[10] + v82;
    }
    else
    {
LABEL_23:
      v31 = v10[11];
      v32 = v31;
    }
    v33 = v32 == v31 ? 0 : v32;
    if ((v34 = v4[4], v23 < (v4[5] - v34) >> 3)
      && (v35 = *(_QWORD *)(v34 + 8 * v23)) != 0
      && (v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v4[7], v37 = v4[8], v36 < (v37 - v38) >> 3)
      && ((v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == (_DWORD)v22) : (v40 = 0), v40))
    {
      v41 = v4[11];
      v42 = v4[10] + 8 * v36;
    }
    else
    {
      v41 = v4[11];
      v42 = v41;
    }
    v43 = v42 == v41 ? 0 : v42;
    v44 = v5[4];
    if (v23 < (v5[5] - v44) >> 3)
    {
      v45 = *(_QWORD *)(v44 + 8 * v23);
      if (v45)
      {
        v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        v48 = v5[7];
        v47 = v5[8];
        if (v46 < (v47 - v48) >> 3)
        {
          v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == (_DWORD)v22)
            break;
        }
      }
    }
    v51 = v5[11];
    v52 = v51;
    v53 = *(_QWORD *)(a2 + 24);
    if (!v53)
      goto LABEL_81;
LABEL_46:
    if (v52 == v51)
      v54 = 0;
    else
      v54 = v52;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)v53 + 48))(v53, v33, v43, v54);
    v56 = (_QWORD *)v12[4];
    v20 = v14 + 1;
    v84 = v14 + 1;
    if (v14 + 1 != v56)
    {
      v57 = v10[4];
      v59 = v10[7];
      v58 = v10[8];
      v60 = v4[4];
      result = v4[7];
      v61 = v4[8];
      v62 = v5[4];
      v64 = v5[7];
      v63 = v5[8];
      while (1)
      {
        v65 = *((unsigned int *)v20 + 1);
        v66 = v65 >> 7;
        if (v65 >> 7 < (v10[5] - v57) >> 3)
        {
          v67 = *(_QWORD *)(v57 + 8 * v66);
          if (v67)
          {
            v68 = v65 & 0x7F;
            v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              v70 = v59 + 8 * v69;
              v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == (_DWORD)v65;
              if (v71 && v66 < (v4[5] - v60) >> 3)
              {
                v73 = *(_QWORD *)(v60 + 8 * v66);
                if (v73)
                {
                  v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    v75 = result + 8 * v74;
                    v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == (_DWORD)v65;
                    if (v76 && v66 < (v5[5] - v62) >> 3)
                    {
                      v78 = *(_QWORD *)(v62 + 8 * v66);
                      if (v78)
                      {
                        v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == (_DWORD)v65 && v80 != v63)
                            break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          v20 = v56;
          goto LABEL_14;
        }
      }
      v56 = v20;
LABEL_14:
      v84 = v20;
    }
    v14 = v56;
    if (v13 == v56)
      goto LABEL_83;
  }
  v51 = v5[11];
  v52 = v5[10] + v46;
  v53 = *(_QWORD *)(a2 + 24);
  if (v53)
    goto LABEL_46;
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  result = ((uint64_t (*)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  v19 = (_QWORD *)result;
LABEL_83:
  *v19 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMaterial const&,md::ls::MainPassItem const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsMaterial const&,md::ls::MainPassItem const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 isValid;
  _QWORD v11[5];
  uint64_t v12;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::IsMaterial>(v1);
  v3 = gdc::Registry::storage<md::ls::MainPassItem>(v1);
  v4 = gdc::Registry::storage<md::ls::FunctionConstants>(v1);
  if (*(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56) >= *(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56))
    v5 = v4;
  else
    v5 = v2;
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) < *(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56))
    v5 = v3;
  v11[0] = v5 + 32;
  v11[1] = v4;
  v11[2] = v2;
  v11[3] = v3;
  v7 = *(_QWORD *)(v5 + 56);
  v6 = *(_QWORD *)(v5 + 64);
  v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    v8 = v7 + 8;
    do
    {
      v7 = v8;
      v12 = v8;
      if (v8 == v6)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLightDebug>(md::ita::PrepareFunctionConstantDescriptorLightDebug &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorLightDebug &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLightDebug>(md::ita::PrepareFunctionConstantDescriptorLightDebug &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLightDebug>(md::ita::PrepareFunctionConstantDescriptorLightDebug &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorLightDebug &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLightDebug>(md::ita::PrepareFunctionConstantDescriptorLightDebug &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42892D8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLightDebug>(md::ita::PrepareFunctionConstantDescriptorLightDebug &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorLightDebug &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLightDebug>(md::ita::PrepareFunctionConstantDescriptorLightDebug &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42892D8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLightDebug>(md::ita::PrepareFunctionConstantDescriptorLightDebug &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorLightDebug &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLightDebug>(md::ita::PrepareFunctionConstantDescriptorLightDebug &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6E738C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLightDebug>(md::ita::PrepareFunctionConstantDescriptorLightDebug &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorLightDebug &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLightDebug>(md::ita::PrepareFunctionConstantDescriptorLightDebug &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLightDebug>(md::ita::PrepareFunctionConstantDescriptorLightDebug &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorLightDebug &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLightDebug>(md::ita::PrepareFunctionConstantDescriptorLightDebug &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289320;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLightDebug>(md::ita::PrepareFunctionConstantDescriptorLightDebug &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorLightDebug &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLightDebug>(md::ita::PrepareFunctionConstantDescriptorLightDebug &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289320;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLightDebug>(md::ita::PrepareFunctionConstantDescriptorLightDebug &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorLightDebug &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLightDebug>(md::ita::PrepareFunctionConstantDescriptorLightDebug &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x888DE670CA75E2DCLL;
  result[1] = "md::ls::UsesDebugLight]";
  result[2] = 22;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLightDebug>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLightDebug>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLightDebug>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLightDebug>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279210;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLightDebug>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLightDebug>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4279210;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLightDebug>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLightDebug>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t (***v37)(_QWORD);
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  int8x8_t v43;
  uint8x8_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  int v55;
  int v56;
  int v57;
  unint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v77;
  int v78;
  _QWORD v79[4];
  unint64_t *v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t *v84;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v79[0] = 0x888DE670CA75E2DCLL;
  v4 = *(int8x8_t *)(v3 + 128);
  if (v4)
  {
    v5 = (uint8x8_t)vcnt_s8(v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      v6 = 0x888DE670CA75E2DCLL;
      if (*(_QWORD *)&v4 <= 0x888DE670CA75E2DCLL)
        v6 = 0x888DE670CA75E2DCLL % *(_QWORD *)&v4;
    }
    else
    {
      v6 = (*(_QWORD *)&v4 - 1) & 0x888DE670CA75E2DCLL;
    }
    v7 = *(_QWORD **)(*(_QWORD *)(v3 + 120) + 8 * v6);
    if (v7)
    {
      v8 = (_QWORD *)*v7;
      if (v8)
      {
        if (v5.u32[0] < 2uLL)
        {
          v9 = *(_QWORD *)&v4 - 1;
          while (1)
          {
            v11 = v8[1];
            if (v11 == 0x888DE670CA75E2DCLL)
            {
              if (v8[2] == 0x888DE670CA75E2DCLL)
                goto LABEL_120;
            }
            else if ((v11 & v9) != v6)
            {
              goto LABEL_21;
            }
            v8 = (_QWORD *)*v8;
            if (!v8)
              goto LABEL_21;
          }
        }
        do
        {
          v10 = v8[1];
          if (v10 == 0x888DE670CA75E2DCLL)
          {
            if (v8[2] == 0x888DE670CA75E2DCLL)
            {
LABEL_120:
              v12 = v8[3];
              goto LABEL_24;
            }
          }
          else
          {
            if (v10 >= *(_QWORD *)&v4)
              v10 %= *(_QWORD *)&v4;
            if (v10 != v6)
              break;
          }
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
    }
  }
LABEL_21:
  v12 = operator new();
  *(_QWORD *)(v12 + 16) = "md::ls::UsesDebugLight]";
  *(_QWORD *)(v12 + 24) = 22;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_DWORD *)(v12 + 144) = 1065353216;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 168) = 0u;
  *(_QWORD *)(v12 + 184) = 0;
  *(_DWORD *)(v12 + 192) = 1065353216;
  *(_OWORD *)(v12 + 200) = 0u;
  *(_OWORD *)(v12 + 216) = 0u;
  *(_QWORD *)(v12 + 232) = 0;
  *(_DWORD *)(v12 + 240) = 1065353216;
  *(_QWORD *)v12 = &off_1E42718C8;
  *(_QWORD *)(v12 + 8) = 0x888DE670CA75E2DCLL;
  *(_QWORD *)(v12 + 248) = v3;
  v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v3 + 120), 0x888DE670CA75E2DCLL, v79);
  v14 = v13[3];
  v13[3] = v12;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v81 = 0x888DE670CA75E2DCLL;
  v82 = "md::ls::UsesDebugLight]";
  v83 = 22;
  gdc::Registry::_registerStorageDataSignals(v3, 0x888DE670CA75E2DCLL, (uint64_t)&v81, (uint64_t *)(v12 + 104));
LABEL_24:
  v15 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v16 = v15;
  v17 = v15 + 4;
  if (*(_QWORD *)(v12 + 64) - *(_QWORD *)(v12 + 56) >= v15[8] - v15[7])
    v18 = (uint64_t)(v15 + 4);
  else
    v18 = v12 + 32;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v81, v18, v15, (_QWORD *)v12, *(_QWORD *)(v18 + 24));
  if (*(_QWORD *)(v12 + 64) - *(_QWORD *)(v12 + 56) >= v16[8] - v16[7])
    v19 = (uint64_t)v17;
  else
    v19 = v12 + 32;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v79, v19, v16, (_QWORD *)v12, *(_QWORD *)(v19 + 32));
  if (v80 == v84)
  {
    v21 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    v21 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *v21 = *v20;
      v22 = *v20;
      v23 = v16[4];
      if (v22 >> 39 < (v16[5] - v23) >> 3
        && (v24 = *(_QWORD *)(v23 + 8 * (v22 >> 39))) != 0
        && (v25 = *(unsigned __int16 *)(v24 + 2 * (HIDWORD(v22) & 0x7F)),
            v27 = v16[7],
            v26 = v16[8],
            v25 < (v26 - v27) >> 3)
        && ((v28 = HIDWORD(v22), v29 = v27 + 8 * v25, v29 != v26)
          ? (v30 = *(_DWORD *)(v29 + 4) == (_DWORD)v28)
          : (v30 = 0),
            v30))
      {
        v31 = v16[11];
        v32 = v16[10] + 33 * v25;
      }
      else
      {
        v31 = v16[11];
        v32 = v31;
      }
      if (v32 == v31)
        v33 = 0;
      else
        v33 = v32;
      v34 = ***(uint64_t ****)(a1 + 8);
      if (v34 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v34 != 0x22D45F5AAD4BF408)
      {
        v35 = v34 + 5;
        do
        {
          v36 = *v35;
          v35 += 5;
        }
        while (v36 != 0x22D45F5AAD4BF408);
        v34 = v35 - 5;
      }
      v37 = (uint64_t (***)(_QWORD))v34[3];
      v38 = (std::__shared_weak_count *)v34[4];
      if (v38)
      {
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldxr(p_shared_owners);
        while (__stxr(v40 + 1, p_shared_owners));
        do
          v41 = __ldaxr(p_shared_owners);
        while (__stlxr(v41 - 1, p_shared_owners));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v42 = *(_QWORD **)((**v37)(v37) + 8);
      v43 = (int8x8_t)v42[1];
      if (v43)
      {
        v44 = (uint8x8_t)vcnt_s8(v43);
        v44.i16[0] = vaddlv_u8(v44);
        if (v44.u32[0] > 1uLL)
        {
          v45 = 0x41E8D6E445F4145;
          if (*(_QWORD *)&v43 <= 0x41E8D6E445F4145uLL)
            v45 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v43;
        }
        else
        {
          v45 = (*(_QWORD *)&v43 - 1) & 0x41E8D6E445F4145;
        }
        v46 = *(_QWORD **)(*v42 + 8 * v45);
        if (v46)
        {
          v47 = (_QWORD *)*v46;
          if (v47)
          {
            if (v44.u32[0] < 2uLL)
            {
              v48 = *(_QWORD *)&v43 - 1;
              while (1)
              {
                v50 = v47[1];
                if (v50 == 0x41E8D6E445F4145)
                {
                  if (v47[2] == 0x41E8D6E445F4145)
                    goto LABEL_77;
                }
                else if ((v50 & v48) != v45)
                {
                  goto LABEL_98;
                }
                v47 = (_QWORD *)*v47;
                if (!v47)
                  goto LABEL_98;
              }
            }
            do
            {
              v49 = v47[1];
              if (v49 == 0x41E8D6E445F4145)
              {
                if (v47[2] == 0x41E8D6E445F4145)
                {
LABEL_77:
                  v51 = v47[5];
                  if (*(_QWORD *)(v51 + 8) == 0x41E8D6E445F4145)
                  {
                    v52 = *(_QWORD *)(v51 + 32);
                    if (v52)
                    {
                      +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
                      v53 = (void *)objc_claimAutoreleasedReturnValue();
                      v54 = v53;
                      if (*(_BYTE *)(v52 + 227) && objc_msgSend(v53, "daVinciSSAOOcclusionOnly"))
                        v78 = objc_msgSend(v54, "daVinciAdvancedLightingEnabled");
                      else
                        v78 = 0;
                      if (objc_msgSend(v54, "daVinciLightingDebugAlbedoOnly"))
                        v77 = objc_msgSend(v54, "daVinciAdvancedLightingEnabled");
                      else
                        v77 = 0;
                      if (objc_msgSend(v54, "daVinciLightingDebugLightsOnly"))
                        v55 = objc_msgSend(v54, "daVinciAdvancedLightingEnabled");
                      else
                        v55 = 0;
                      if (objc_msgSend(v54, "daVinciLightingDebugShowOverexposure"))
                        v56 = objc_msgSend(v54, "daVinciAdvancedLightingEnabled");
                      else
                        v56 = 0;
                      if (objc_msgSend(v54, "daVinciLightingDebugShowNormals"))
                        v57 = objc_msgSend(v54, "daVinciAdvancedLightingEnabled");
                      else
                        v57 = 0;
                      if ((v78 | v77 | v55 | v56 | v57 | objc_msgSend(v54, "daVinciRenderingDebugShowUVs")) == 1)*(_BYTE *)(v33 + 13) = 1;

                    }
                  }
                  break;
                }
              }
              else
              {
                if (v49 >= *(_QWORD *)&v43)
                  v49 %= *(_QWORD *)&v43;
                if (v49 != v45)
                  break;
              }
              v47 = (_QWORD *)*v47;
            }
            while (v47);
          }
        }
      }
LABEL_98:
      v58 = v84;
      v20 = *(unint64_t **)(v81 + 32);
      if (++v84 != v20)
      {
        v59 = *((_QWORD *)v82 + 4);
        v60 = (*((_QWORD *)v82 + 5) - v59) >> 3;
        v61 = v58 + 2;
        while (1)
        {
          v62 = *((unsigned int *)v61 - 1);
          v63 = v62 >> 7;
          if (v62 >> 7 < v60)
          {
            v64 = *(_QWORD *)(v59 + 8 * v63);
            if (v64)
            {
              v65 = *(unsigned __int16 *)(v64 + 2 * (v62 & 0x7F));
              v67 = *((_QWORD *)v82 + 7);
              v66 = *((_QWORD *)v82 + 8);
              if (v65 < (v66 - v67) >> 3)
              {
                v68 = v67 + 8 * v65;
                if (v68 != v66 && *(_DWORD *)(v68 + 4) == (_DWORD)v62)
                {
                  v70 = *(_QWORD *)(v83 + 32);
                  if (v63 < (*(_QWORD *)(v83 + 40) - v70) >> 3)
                  {
                    v71 = *(_QWORD *)(v70 + 8 * v63);
                    if (v71)
                    {
                      v72 = *(unsigned __int16 *)(v71 + 2 * (v62 & 0x7F));
                      v74 = *(_QWORD *)(v83 + 56);
                      v73 = *(_QWORD *)(v83 + 64);
                      if (v72 < (v73 - v74) >> 3)
                      {
                        v75 = v74 + 8 * v72;
                        if (v75 != v73 && *(_DWORD *)(v75 + 4) == (_DWORD)v62)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v84 = v61;
          v30 = v61++ == v20;
          if (v30)
            goto LABEL_32;
        }
        v20 = v61 - 1;
      }
LABEL_32:
      ;
    }
    while (v80 != v20);
  }
  *v21 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_19F6E7B88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F6E7BAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::UsesDebugLight>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UsesDebugLight>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UsesDebugLight>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UsesDebugLight>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorShadows>(md::ita::PrepareFunctionConstantDescriptorShadows &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorShadows &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorShadows>(md::ita::PrepareFunctionConstantDescriptorShadows &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorShadows>(md::ita::PrepareFunctionConstantDescriptorShadows &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorShadows &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorShadows>(md::ita::PrepareFunctionConstantDescriptorShadows &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288DC8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorShadows>(md::ita::PrepareFunctionConstantDescriptorShadows &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorShadows &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorShadows>(md::ita::PrepareFunctionConstantDescriptorShadows &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288DC8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorShadows>(md::ita::PrepareFunctionConstantDescriptorShadows &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorShadows &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorShadows>(md::ita::PrepareFunctionConstantDescriptorShadows &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;
  char **v3;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 48;
  v3 = (char **)a1;
  _ZZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsES5_EEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_ENKUlTpTnmNS1_16integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSH_(&v3);
}

void sub_19F6E7DCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorShadows>(md::ita::PrepareFunctionConstantDescriptorShadows &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorShadows &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorShadows>(md::ita::PrepareFunctionConstantDescriptorShadows &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorShadows>(md::ita::PrepareFunctionConstantDescriptorShadows &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorShadows &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorShadows>(md::ita::PrepareFunctionConstantDescriptorShadows &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288E10;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorShadows>(md::ita::PrepareFunctionConstantDescriptorShadows &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorShadows &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorShadows>(md::ita::PrepareFunctionConstantDescriptorShadows &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288E10;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorShadows>(md::ita::PrepareFunctionConstantDescriptorShadows &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorShadows &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorShadows>(md::ita::PrepareFunctionConstantDescriptorShadows &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0x4C30532B0D2F6731;
  v2[1] = "md::ls::UsesShadow]";
  *(_QWORD *)&result = 18;
  *((_OWORD *)v2 + 1) = xmmword_19FFB42F0;
  v2[4] = "md::ls::IntendedStandardPassSceneDepth]";
  v2[5] = 38;
  v2[6] = 0x3EB2A2A09E298E0ELL;
  v2[7] = "md::ls::IntendedStandardPassShadow]";
  v2[8] = 34;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorShadows>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorShadows>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorShadows>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorShadows>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278F88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorShadows>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorShadows>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278F88;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorShadows>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorShadows>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (***v9)(_QWORD);
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  int8x8_t v15;
  uint8x8_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t result;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275838;
  v4[1] = a2;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E4275868;
  v5[1] = a2;
  v6 = ***(uint64_t ****)(a1 + 8);
  if (v6 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v6 != 0x22D45F5AAD4BF408)
  {
    v7 = v6 + 5;
    do
    {
      v8 = *v7;
      v7 += 5;
    }
    while (v8 != 0x22D45F5AAD4BF408);
    v6 = v7 - 5;
  }
  v9 = (uint64_t (***)(_QWORD))v6[3];
  v10 = (std::__shared_weak_count *)v6[4];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v14 = *(_QWORD **)((**v9)(v9) + 8);
  v15 = (int8x8_t)v14[1];
  if (!*(_QWORD *)&v15)
    goto LABEL_45;
  v16 = (uint8x8_t)vcnt_s8(v15);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    v17 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v15 <= 0x41E8D6E445F4145uLL)
      v17 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v15;
  }
  else
  {
    v17 = (*(_QWORD *)&v15 - 1) & 0x41E8D6E445F4145;
  }
  v18 = *(_QWORD **)(*v14 + 8 * v17);
  if (!v18)
    goto LABEL_45;
  v19 = (_QWORD *)*v18;
  if (!v19)
    goto LABEL_45;
  if (v16.u32[0] < 2uLL)
  {
    v20 = *(_QWORD *)&v15 - 1;
    while (1)
    {
      v22 = v19[1];
      if (v22 == 0x41E8D6E445F4145)
      {
        if (v19[2] == 0x41E8D6E445F4145)
          goto LABEL_33;
      }
      else if ((v22 & v20) != v17)
      {
        goto LABEL_45;
      }
      v19 = (_QWORD *)*v19;
      if (!v19)
        goto LABEL_45;
    }
  }
  while (1)
  {
    v21 = v19[1];
    if (v21 == 0x41E8D6E445F4145)
      break;
    if (v21 >= *(_QWORD *)&v15)
      v21 %= *(_QWORD *)&v15;
    if (v21 != v17)
      goto LABEL_45;
LABEL_22:
    v19 = (_QWORD *)*v19;
    if (!v19)
      goto LABEL_45;
  }
  if (v19[2] != 0x41E8D6E445F4145)
    goto LABEL_22;
LABEL_33:
  v23 = v19[5];
  if (*(_QWORD *)(v23 + 8) == 0x41E8D6E445F4145)
  {
    v24 = *(_QWORD *)(v23 + 32);
    if (v24)
    {
      +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v25, "daVinciAdvancedLightingEnabled") && *(_BYTE *)(v24 + 225))
      {
        v29[0] = &off_1E427C780;
        v30 = v29;
        (*(void (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v29);
      }
      else
      {
        v29[0] = &off_1E427C7C8;
        v30 = v29;
        (*(void (**)(_QWORD *, _QWORD *))(*v5 + 16))(v5, v29);
      }
      v26 = v30;
      if (v30 == v29)
      {
        v27 = 4;
        v26 = v29;
LABEL_43:
        (*(void (**)(void))(*v26 + 8 * v27))();
      }
      else if (v30)
      {
        v27 = 5;
        goto LABEL_43;
      }

    }
  }
LABEL_45:
  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F6E826C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == v16)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t result;
  unint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77[4];
  unint64_t *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::UsesShadow>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::IntendedStandardPassSceneDepth>(v3);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::IntendedStandardPassShadow>(v3);
  v7 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v8 = v7;
  v9 = v7 + 4;
  if (v4[8] - v4[7] >= v7[8] - v7[7])
    v10 = (uint64_t)(v7 + 4);
  else
    v10 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v79, v10, v7, v4, *(_QWORD *)(v10 + 24));
  if (v4[8] - v4[7] >= v8[8] - v8[7])
    v11 = (uint64_t)v9;
  else
    v11 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v77, v11, v8, v4, *(_QWORD *)(v11 + 32));
  if (v78 == v82)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v13 = (_QWORD *)result;
LABEL_79:
    *v13 = 0xFFFFFFFF00000000;
  }
  else
  {
    v13 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      *v13 = *v12;
      v14 = *v12;
      v15 = HIDWORD(*v12);
      v16 = v14 >> 39;
      v17 = v8[4];
      if (v14 >> 39 < (v8[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            v21 = v8[7],
            v20 = v8[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
      {
        v76 = 33 * v19;
        v24 = v8[11];
        v25 = v8[10] + v76;
      }
      else
      {
        v24 = v8[11];
        v25 = v24;
      }
      if (v25 == v24)
        v26 = 0;
      else
        v26 = v25;
      v27 = v4[4];
      if (v16 < (v4[5] - v27) >> 3
        && (v28 = *(_QWORD *)(v27 + 8 * v16)) != 0
        && (v29 = *(unsigned __int16 *)(v28 + 2 * (HIDWORD(v14) & 0x7F)),
            v31 = v4[7],
            v30 = v4[8],
            v29 < (v30 - v31) >> 3)
        && ((v32 = v31 + 8 * v29, v32 != v30) ? (v33 = *(_DWORD *)(v32 + 4) == (_DWORD)v15) : (v33 = 0), v33))
      {
        v34 = v4[11];
        v35 = v4[10] + v29;
      }
      else
      {
        v34 = v4[11];
        v35 = v34;
      }
      if (v35 == v34)
        v36 = 0;
      else
        v36 = v35;
      v37 = v5[4];
      if (v16 < (v5[5] - v37) >> 3
        && (v38 = *(_QWORD *)(v37 + 8 * v16)) != 0
        && (v39 = *(unsigned __int16 *)(v38 + 2 * (HIDWORD(v14) & 0x7F)),
            v41 = v5[7],
            v40 = v5[8],
            v39 < (v40 - v41) >> 3)
        && ((v42 = v41 + 8 * v39, v42 != v40) ? (v43 = *(_DWORD *)(v42 + 4) == (_DWORD)v15) : (v43 = 0), v43))
      {
        v44 = v5[11];
        v45 = v5[10] + v39;
      }
      else
      {
        v44 = v5[11];
        v45 = v44;
      }
      if (v45 == v44)
        v45 = 0;
      if ((v46 = v6[4], v16 < (v6[5] - v46) >> 3)
        && (v47 = *(_QWORD *)(v46 + 8 * v16)) != 0
        && (v48 = *(unsigned __int16 *)(v47 + 2 * (HIDWORD(v14) & 0x7F)),
            v50 = v6[7],
            v49 = v6[8],
            v48 < (v49 - v50) >> 3)
        && ((v51 = v50 + 8 * v48, v51 != v49) ? (v52 = *(_DWORD *)(v51 + 4) == (_DWORD)v15) : (v52 = 0), v52))
      {
        v53 = v6[11];
        v54 = v6[10] + v48;
      }
      else
      {
        v53 = v6[11];
        v54 = v53;
      }
      v55 = v54 == v53 ? 0 : v54;
      v84 = v45;
      v83 = v55;
      v56 = *(_QWORD *)(a2 + 24);
      if (!v56)
        break;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t *, unint64_t *))(*(_QWORD *)v56 + 48))(v56, v26, v36, &v84, &v83);
      v58 = v82;
      v12 = *(unint64_t **)(v79 + 32);
      if (++v82 != v12)
      {
        v59 = v80[4];
        v60 = (v80[5] - v59) >> 3;
        v61 = v58 + 2;
        while (1)
        {
          v62 = *((unsigned int *)v61 - 1);
          v63 = v62 >> 7;
          if (v62 >> 7 < v60)
          {
            v64 = *(_QWORD *)(v59 + 8 * v63);
            if (v64)
            {
              v65 = *(unsigned __int16 *)(v64 + 2 * (v62 & 0x7F));
              v66 = v80[7];
              result = v80[8];
              if (v65 < (result - v66) >> 3)
              {
                v67 = v66 + 8 * v65;
                if (v67 != result && *(_DWORD *)(v67 + 4) == (_DWORD)v62)
                {
                  v69 = v81[4];
                  result = v81[5] - v69;
                  if (v63 < result >> 3)
                  {
                    v70 = *(_QWORD *)(v69 + 8 * v63);
                    if (v70)
                    {
                      v71 = *(unsigned __int16 *)(v70 + 2 * (v62 & 0x7F));
                      v73 = v81[7];
                      v72 = v81[8];
                      result = v72 - v73;
                      if (v71 < (v72 - v73) >> 3)
                      {
                        v74 = v73 + 8 * v71;
                        if (v74 != v72 && *(_DWORD *)(v74 + 4) == (_DWORD)v62)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v82 = v61;
          v23 = v61++ == v12;
          if (v23)
            goto LABEL_9;
        }
        v12 = v61 - 1;
      }
LABEL_9:
      if (v78 == v12)
        goto LABEL_79;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::UsesShadow>(v1);
  gdc::Registry::storage<md::ls::IntendedStandardPassSceneDepth>(v1);
  gdc::Registry::storage<md::ls::IntendedStandardPassShadow>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v2[8] - v2[7] >= v3[8] - v3[7])
    v6 = (uint64_t)(v3 + 4);
  else
    v6 = (uint64_t)(v2 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v3, v2, *(_QWORD *)(v6 + 24));
  if (v2[8] - v2[7] >= v4[8] - v4[7])
    v7 = (uint64_t)v5;
  else
    v7 = (uint64_t)(v2 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v4, v2, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t gdc::Registry::storage<md::ls::UsesShadow>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x4C30532B0D2F6731;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x4C30532B0D2F6731;
      if (*(_QWORD *)&v3 <= 0x4C30532B0D2F6731uLL)
        v5 = 0x4C30532B0D2F6731uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x4C30532B0D2F6731;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x4C30532B0D2F6731)
            {
              if (v7[2] == 0x4C30532B0D2F6731)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x4C30532B0D2F6731)
          {
            if (v7[2] == 0x4C30532B0D2F6731)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::UsesShadow]";
  *(_QWORD *)(v11 + 24) = 18;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271028;
  *(_QWORD *)(v11 + 8) = 0x4C30532B0D2F6731;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x4C30532B0D2F6731uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x4C30532B0D2F6731;
  v15[1] = "md::ls::UsesShadow]";
  v15[2] = 18;
  gdc::Registry::_registerStorageDataSignals(a1, 0x4C30532B0D2F6731, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6E8984(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::IntendedStandardPassShadow>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x3EB2A2A09E298E0ELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x3EB2A2A09E298E0ELL;
      if (*(_QWORD *)&v3 <= 0x3EB2A2A09E298E0EuLL)
        v5 = 0x3EB2A2A09E298E0EuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x3EB2A2A09E298E0ELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x3EB2A2A09E298E0ELL)
            {
              if (v7[2] == 0x3EB2A2A09E298E0ELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x3EB2A2A09E298E0ELL)
          {
            if (v7[2] == 0x3EB2A2A09E298E0ELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::IntendedStandardPassShadow]";
  *(_QWORD *)(v11 + 24) = 34;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273128;
  *(_QWORD *)(v11 + 8) = 0x3EB2A2A09E298E0ELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x3EB2A2A09E298E0EuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x3EB2A2A09E298E0ELL;
  v15[1] = "md::ls::IntendedStandardPassShadow]";
  v15[2] = 34;
  gdc::Registry::_registerStorageDataSignals(a1, 0x3EB2A2A09E298E0ELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6E8BAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::IntendedStandardPassShadow>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IntendedStandardPassShadow>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IntendedStandardPassShadow>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IntendedStandardPassShadow>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::UsesShadow>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UsesShadow>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UsesShadow>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UsesShadow>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::UsesShadow const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::UsesShadow const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57[4];
  unint64_t *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t *v62;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::UsesShadow>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7])
    v8 = (uint64_t)(v5 + 4);
  else
    v8 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v59, v8, v5, v4, *(_QWORD *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7])
    v9 = (uint64_t)v7;
  else
    v9 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v57, v9, v6, v4, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v58 == v62)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v6[4];
    if (v13 >> 39 >= (v6[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v6[7];
    v19 = v6[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v56 = 33 * v18;
      v23 = v6[11];
      v24 = v6[10] + v56;
    }
    else
    {
LABEL_17:
      v23 = v6[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v4[4];
    if (v15 < (v4[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v4[7];
        v29 = v4[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v4[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v62;
    v11 = *(unint64_t **)(v59 + 32);
    if (++v62 != v11)
    {
      v39 = v60[4];
      v40 = (v60[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v60[7];
            result = v60[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v61[4];
                result = v61[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v61[7];
                    v52 = v61[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v62 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v58 == v11)
      goto LABEL_56;
  }
  v33 = v4[11];
  v34 = v4[10] + v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::UsesShadow const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::UsesShadow>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v2[8] - v2[7] >= v3[8] - v3[7])
    v6 = (uint64_t)(v3 + 4);
  else
    v6 = (uint64_t)(v2 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v3, v2, *(_QWORD *)(v6 + 24));
  if (v2[8] - v2[7] >= v4[8] - v4[7])
    v7 = (uint64_t)v5;
  else
    v7 = (uint64_t)(v2 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v4, v2, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorGlobeLight>(md::ita::PrepareFunctionConstantDescriptorGlobeLight &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorGlobeLight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorGlobeLight>(md::ita::PrepareFunctionConstantDescriptorGlobeLight &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorGlobeLight>(md::ita::PrepareFunctionConstantDescriptorGlobeLight &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorGlobeLight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorGlobeLight>(md::ita::PrepareFunctionConstantDescriptorGlobeLight &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289248;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorGlobeLight>(md::ita::PrepareFunctionConstantDescriptorGlobeLight &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorGlobeLight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorGlobeLight>(md::ita::PrepareFunctionConstantDescriptorGlobeLight &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289248;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorGlobeLight>(md::ita::PrepareFunctionConstantDescriptorGlobeLight &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorGlobeLight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorGlobeLight>(md::ita::PrepareFunctionConstantDescriptorGlobeLight &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6E92B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorGlobeLight>(md::ita::PrepareFunctionConstantDescriptorGlobeLight &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorGlobeLight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorGlobeLight>(md::ita::PrepareFunctionConstantDescriptorGlobeLight &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorGlobeLight>(md::ita::PrepareFunctionConstantDescriptorGlobeLight &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorGlobeLight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorGlobeLight>(md::ita::PrepareFunctionConstantDescriptorGlobeLight &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289290;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorGlobeLight>(md::ita::PrepareFunctionConstantDescriptorGlobeLight &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorGlobeLight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorGlobeLight>(md::ita::PrepareFunctionConstantDescriptorGlobeLight &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289290;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorGlobeLight>(md::ita::PrepareFunctionConstantDescriptorGlobeLight &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorGlobeLight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorGlobeLight>(md::ita::PrepareFunctionConstantDescriptorGlobeLight &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x97E77A2C4FA4C0B5;
  result[1] = "md::ls::UseGlobeLighting]";
  result[2] = 24;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorGlobeLight>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorGlobeLight>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorGlobeLight>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorGlobeLight>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42791C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorGlobeLight>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorGlobeLight>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42791C8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorGlobeLight>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorGlobeLight>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44[4];
  unint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t *v49;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::UseGlobeLighting>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7])
    v8 = (uint64_t)(v5 + 4);
  else
    v8 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v46, v8, v5, v4, *(_QWORD *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7])
    v9 = (uint64_t)v7;
  else
    v9 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v44, v9, v6, v4, *(_QWORD *)(v9 + 32));
  if (v45 == v49)
  {
    v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *v11 = *v10;
      v12 = *v10;
      v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (v14 = *(_QWORD *)(v13 + 8 * (v12 >> 39))) != 0
        && (v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            v17 = v6[7],
            v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (v20 = *(_DWORD *)(v19 + 4) == (_DWORD)v18)
          : (v20 = 0),
            v20))
      {
        v21 = v6[11];
        v22 = v6[10] + 33 * v15;
      }
      else
      {
        v21 = v6[11];
        v22 = v21;
      }
      if (v22 == v21)
        v23 = 0;
      else
        v23 = v22;
      +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v24, "daVinciGlobeLighting")
        && objc_msgSend(v24, "daVinciAdvancedLightingEnabled"))
      {
        *(_BYTE *)(v23 + 1) = 1;
      }

      v25 = v49;
      v10 = *(unint64_t **)(v46 + 32);
      if (++v49 != v10)
      {
        v26 = v47[4];
        v27 = (v47[5] - v26) >> 3;
        v28 = v25 + 2;
        while (1)
        {
          v29 = *((unsigned int *)v28 - 1);
          v30 = v29 >> 7;
          if (v29 >> 7 < v27)
          {
            v31 = *(_QWORD *)(v26 + 8 * v30);
            if (v31)
            {
              v32 = *(unsigned __int16 *)(v31 + 2 * (v29 & 0x7F));
              v34 = v47[7];
              v33 = v47[8];
              if (v32 < (v33 - v34) >> 3)
              {
                v35 = v34 + 8 * v32;
                if (v35 != v33 && *(_DWORD *)(v35 + 4) == (_DWORD)v29)
                {
                  v37 = v48[4];
                  if (v30 < (v48[5] - v37) >> 3)
                  {
                    v38 = *(_QWORD *)(v37 + 8 * v30);
                    if (v38)
                    {
                      v39 = *(unsigned __int16 *)(v38 + 2 * (v29 & 0x7F));
                      v41 = v48[7];
                      v40 = v48[8];
                      if (v39 < (v40 - v41) >> 3)
                      {
                        v42 = v41 + 8 * v39;
                        if (v42 != v40 && *(_DWORD *)(v42 + 4) == (_DWORD)v29)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v49 = v28;
          v20 = v28++ == v10;
          if (v20)
            goto LABEL_9;
        }
        v10 = v28 - 1;
      }
LABEL_9:
      ;
    }
    while (v45 != v10);
  }
  *v11 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_19F6E9678(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::UseGlobeLighting>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x97E77A2C4FA4C0B5;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x97E77A2C4FA4C0B5;
      if (*(_QWORD *)&v3 <= 0x97E77A2C4FA4C0B5)
        v5 = 0x97E77A2C4FA4C0B5 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x97E77A2C4FA4C0B5;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x97E77A2C4FA4C0B5)
            {
              if (v7[2] == 0x97E77A2C4FA4C0B5)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x97E77A2C4FA4C0B5)
          {
            if (v7[2] == 0x97E77A2C4FA4C0B5)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::UseGlobeLighting]";
  *(_QWORD *)(v11 + 24) = 24;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271EF8;
  *(_QWORD *)(v11 + 8) = 0x97E77A2C4FA4C0B5;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x97E77A2C4FA4C0B5, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x97E77A2C4FA4C0B5;
  v15[1] = "md::ls::UseGlobeLighting]";
  v15[2] = 24;
  gdc::Registry::_registerStorageDataSignals(a1, 0x97E77A2C4FA4C0B5, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6E9894(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::UseGlobeLighting>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UseGlobeLighting>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UseGlobeLighting>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UseGlobeLighting>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>(md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>(md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>(md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>(md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289B48;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>(md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>(md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289B48;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>(md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>(md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6E9AA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>(md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>(md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>(md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>(md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289B90;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>(md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>(md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289B90;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>(md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>(md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x1631ACE79ACA9DD7;
  result[1] = "md::ls::MaterialSpecularity]";
  result[2] = 27;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279648;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4279648;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *result;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v53[4];
  unint64_t *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t *v58;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v53[0] = 0x1631ACE79ACA9DD7;
  v4 = *(int8x8_t *)(v3 + 128);
  if (v4)
  {
    v5 = (uint8x8_t)vcnt_s8(v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      v6 = 0x1631ACE79ACA9DD7;
      if (*(_QWORD *)&v4 <= 0x1631ACE79ACA9DD7uLL)
        v6 = 0x1631ACE79ACA9DD7uLL % *(_QWORD *)&v4;
    }
    else
    {
      v6 = (*(_QWORD *)&v4 - 1) & 0x1631ACE79ACA9DD7;
    }
    v7 = *(_QWORD **)(*(_QWORD *)(v3 + 120) + 8 * v6);
    if (v7)
    {
      v8 = (_QWORD *)*v7;
      if (v8)
      {
        if (v5.u32[0] < 2uLL)
        {
          v9 = *(_QWORD *)&v4 - 1;
          while (1)
          {
            v11 = v8[1];
            if (v11 == 0x1631ACE79ACA9DD7)
            {
              if (v8[2] == 0x1631ACE79ACA9DD7)
                goto LABEL_67;
            }
            else if ((v11 & v9) != v6)
            {
              goto LABEL_21;
            }
            v8 = (_QWORD *)*v8;
            if (!v8)
              goto LABEL_21;
          }
        }
        do
        {
          v10 = v8[1];
          if (v10 == 0x1631ACE79ACA9DD7)
          {
            if (v8[2] == 0x1631ACE79ACA9DD7)
            {
LABEL_67:
              v12 = v8[3];
              goto LABEL_24;
            }
          }
          else
          {
            if (v10 >= *(_QWORD *)&v4)
              v10 %= *(_QWORD *)&v4;
            if (v10 != v6)
              break;
          }
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
    }
  }
LABEL_21:
  v12 = operator new();
  *(_QWORD *)(v12 + 16) = "md::ls::MaterialSpecularity]";
  *(_QWORD *)(v12 + 24) = 27;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_DWORD *)(v12 + 144) = 1065353216;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 168) = 0u;
  *(_QWORD *)(v12 + 184) = 0;
  *(_DWORD *)(v12 + 192) = 1065353216;
  *(_OWORD *)(v12 + 200) = 0u;
  *(_OWORD *)(v12 + 216) = 0u;
  *(_QWORD *)(v12 + 232) = 0;
  *(_DWORD *)(v12 + 240) = 1065353216;
  *(_QWORD *)v12 = &off_1E4272318;
  *(_QWORD *)(v12 + 8) = 0x1631ACE79ACA9DD7;
  *(_QWORD *)(v12 + 248) = v3;
  v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v3 + 120), 0x1631ACE79ACA9DD7uLL, v53);
  v14 = v13[3];
  v13[3] = v12;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v55 = 0x1631ACE79ACA9DD7;
  v56 = "md::ls::MaterialSpecularity]";
  v57 = 27;
  gdc::Registry::_registerStorageDataSignals(v3, 0x1631ACE79ACA9DD7, (uint64_t)&v55, (uint64_t *)(v12 + 104));
LABEL_24:
  v15 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v16 = v15;
  v17 = v15 + 4;
  if (*(_QWORD *)(v12 + 64) - *(_QWORD *)(v12 + 56) >= v15[8] - v15[7])
    v18 = (uint64_t)(v15 + 4);
  else
    v18 = v12 + 32;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v55, v18, v15, (_QWORD *)v12, *(_QWORD *)(v18 + 24));
  if (*(_QWORD *)(v12 + 64) - *(_QWORD *)(v12 + 56) >= v16[8] - v16[7])
    v19 = (uint64_t)v17;
  else
    v19 = v12 + 32;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v53, v19, v16, (_QWORD *)v12, *(_QWORD *)(v19 + 32));
  if (v54 == v58)
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *result = *v21;
      v22 = *v21;
      v23 = v16[4];
      if (v22 >> 39 < (v16[5] - v23) >> 3
        && (v24 = *(_QWORD *)(v23 + 8 * (v22 >> 39))) != 0
        && (v25 = *(unsigned __int16 *)(v24 + 2 * (HIDWORD(v22) & 0x7F)),
            v27 = v16[7],
            v26 = v16[8],
            v25 < (v26 - v27) >> 3)
        && ((v28 = HIDWORD(v22), v29 = v27 + 8 * v25, v29 != v26)
          ? (v30 = *(_DWORD *)(v29 + 4) == (_DWORD)v28)
          : (v30 = 0),
            v30))
      {
        v31 = v16[11];
        v32 = v16[10] + 33 * v25;
      }
      else
      {
        v31 = v16[11];
        v32 = v31;
      }
      if (v32 == v31)
        v33 = 0;
      else
        v33 = v32;
      *(_BYTE *)(v33 + 21) = 1;
      v34 = v58;
      v21 = *(unint64_t **)(v55 + 32);
      if (++v58 != v21)
      {
        v35 = *((_QWORD *)v56 + 4);
        v36 = (*((_QWORD *)v56 + 5) - v35) >> 3;
        v37 = v34 + 2;
        while (1)
        {
          v38 = *((unsigned int *)v37 - 1);
          v39 = v38 >> 7;
          if (v38 >> 7 < v36)
          {
            v40 = *(_QWORD *)(v35 + 8 * v39);
            if (v40)
            {
              v41 = *(unsigned __int16 *)(v40 + 2 * (v38 & 0x7F));
              v43 = *((_QWORD *)v56 + 7);
              v42 = *((_QWORD *)v56 + 8);
              if (v41 < (v42 - v43) >> 3)
              {
                v44 = v43 + 8 * v41;
                if (v44 != v42 && *(_DWORD *)(v44 + 4) == (_DWORD)v38)
                {
                  v46 = *(_QWORD *)(v57 + 32);
                  if (v39 < (*(_QWORD *)(v57 + 40) - v46) >> 3)
                  {
                    v47 = *(_QWORD *)(v46 + 8 * v39);
                    if (v47)
                    {
                      v48 = *(unsigned __int16 *)(v47 + 2 * (v38 & 0x7F));
                      v49 = *(_QWORD *)(v57 + 56);
                      v50 = *(_QWORD *)(v57 + 64);
                      if (v48 < (v50 - v49) >> 3)
                      {
                        v51 = v49 + 8 * v48;
                        if (v51 != v50 && *(_DWORD *)(v51 + 4) == (_DWORD)v38)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v58 = v37;
          v30 = v37++ == v21;
          if (v30)
            goto LABEL_32;
        }
        v21 = v37 - 1;
      }
LABEL_32:
      ;
    }
    while (v54 != v21);
  }
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F6E9FF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::MaterialSpecularity>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MaterialSpecularity>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MaterialSpecularity>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MaterialSpecularity>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOverlay>(md::ita::PrepareFunctionConstantDescriptorOverlay &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorOverlay &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOverlay>(md::ita::PrepareFunctionConstantDescriptorOverlay &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOverlay>(md::ita::PrepareFunctionConstantDescriptorOverlay &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorOverlay &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOverlay>(md::ita::PrepareFunctionConstantDescriptorOverlay &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288D38;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOverlay>(md::ita::PrepareFunctionConstantDescriptorOverlay &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorOverlay &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOverlay>(md::ita::PrepareFunctionConstantDescriptorOverlay &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288D38;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOverlay>(md::ita::PrepareFunctionConstantDescriptorOverlay &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorOverlay &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOverlay>(md::ita::PrepareFunctionConstantDescriptorOverlay &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6EA210(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOverlay>(md::ita::PrepareFunctionConstantDescriptorOverlay &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorOverlay &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOverlay>(md::ita::PrepareFunctionConstantDescriptorOverlay &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOverlay>(md::ita::PrepareFunctionConstantDescriptorOverlay &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorOverlay &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOverlay>(md::ita::PrepareFunctionConstantDescriptorOverlay &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288D80;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOverlay>(md::ita::PrepareFunctionConstantDescriptorOverlay &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorOverlay &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOverlay>(md::ita::PrepareFunctionConstantDescriptorOverlay &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288D80;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOverlay>(md::ita::PrepareFunctionConstantDescriptorOverlay &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorOverlay &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOverlay>(md::ita::PrepareFunctionConstantDescriptorOverlay &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0xE40027D1222182B5;
  result[1] = "md::ls::HasOverlayPatch]";
  result[2] = 23;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOverlay>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOverlay>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOverlay>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOverlay>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278F40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOverlay>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOverlay>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278F40;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOverlay>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOverlay>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *HasOverlay;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *result;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43[4];
  unint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t *v48;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  HasOverlay = (_QWORD *)gdc::Registry::storage<md::ls::HasOverlayPatch>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (HasOverlay[8] - HasOverlay[7] >= v5[8] - v5[7])
    v8 = (uint64_t)(v5 + 4);
  else
    v8 = (uint64_t)(HasOverlay + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v45, v8, v5, HasOverlay, *(_QWORD *)(v8 + 24));
  if (HasOverlay[8] - HasOverlay[7] >= v6[8] - v6[7])
    v9 = (uint64_t)v7;
  else
    v9 = (uint64_t)(HasOverlay + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v43, v9, v6, HasOverlay, *(_QWORD *)(v9 + 32));
  if (v44 == v48)
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *result = *v11;
      v12 = *v11;
      v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (v14 = *(_QWORD *)(v13 + 8 * (v12 >> 39))) != 0
        && (v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            v17 = v6[7],
            v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (v20 = *(_DWORD *)(v19 + 4) == (_DWORD)v18)
          : (v20 = 0),
            v20))
      {
        v21 = v6[11];
        v22 = v6[10] + 33 * v15;
      }
      else
      {
        v21 = v6[11];
        v22 = v21;
      }
      if (v22 == v21)
        v23 = 0;
      else
        v23 = v22;
      *(_BYTE *)(v23 + 19) = 1;
      v24 = v48;
      v11 = *(unint64_t **)(v45 + 32);
      if (++v48 != v11)
      {
        v25 = v46[4];
        v26 = (v46[5] - v25) >> 3;
        v27 = v24 + 2;
        while (1)
        {
          v28 = *((unsigned int *)v27 - 1);
          v29 = v28 >> 7;
          if (v28 >> 7 < v26)
          {
            v30 = *(_QWORD *)(v25 + 8 * v29);
            if (v30)
            {
              v31 = *(unsigned __int16 *)(v30 + 2 * (v28 & 0x7F));
              v33 = v46[7];
              v32 = v46[8];
              if (v31 < (v32 - v33) >> 3)
              {
                v34 = v33 + 8 * v31;
                if (v34 != v32 && *(_DWORD *)(v34 + 4) == (_DWORD)v28)
                {
                  v36 = v47[4];
                  if (v29 < (v47[5] - v36) >> 3)
                  {
                    v37 = *(_QWORD *)(v36 + 8 * v29);
                    if (v37)
                    {
                      v38 = *(unsigned __int16 *)(v37 + 2 * (v28 & 0x7F));
                      v39 = v47[7];
                      v40 = v47[8];
                      if (v38 < (v40 - v39) >> 3)
                      {
                        v41 = v39 + 8 * v38;
                        if (v41 != v40 && *(_DWORD *)(v41 + 4) == (_DWORD)v28)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v48 = v27;
          v20 = v27++ == v11;
          if (v20)
            goto LABEL_9;
        }
        v11 = v27 - 1;
      }
LABEL_9:
      ;
    }
    while (v44 != v11);
  }
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::HasOverlayPatch>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xE40027D1222182B5;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xE40027D1222182B5;
      if (*(_QWORD *)&v3 <= 0xE40027D1222182B5)
        v5 = 0xE40027D1222182B5 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xE40027D1222182B5;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xE40027D1222182B5)
            {
              if (v7[2] == 0xE40027D1222182B5)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xE40027D1222182B5)
          {
            if (v7[2] == 0xE40027D1222182B5)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::HasOverlayPatch]";
  *(_QWORD *)(v11 + 24) = 23;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42719E8;
  *(_QWORD *)(v11 + 8) = 0xE40027D1222182B5;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xE40027D1222182B5, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xE40027D1222182B5;
  v15[1] = "md::ls::HasOverlayPatch]";
  v15[2] = 23;
  gdc::Registry::_registerStorageDataSignals(a1, 0xE40027D1222182B5, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6EA7A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::HasOverlayPatch>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::HasOverlayPatch>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::HasOverlayPatch>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::HasOverlayPatch>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorDualElevation>(md::ita::PrepareFunctionConstantDescriptorDualElevation &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorDualElevation &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorDualElevation>(md::ita::PrepareFunctionConstantDescriptorDualElevation &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorDualElevation>(md::ita::PrepareFunctionConstantDescriptorDualElevation &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorDualElevation &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorDualElevation>(md::ita::PrepareFunctionConstantDescriptorDualElevation &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42895A8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorDualElevation>(md::ita::PrepareFunctionConstantDescriptorDualElevation &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorDualElevation &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorDualElevation>(md::ita::PrepareFunctionConstantDescriptorDualElevation &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42895A8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorDualElevation>(md::ita::PrepareFunctionConstantDescriptorDualElevation &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorDualElevation &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorDualElevation>(md::ita::PrepareFunctionConstantDescriptorDualElevation &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6EA9BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorDualElevation>(md::ita::PrepareFunctionConstantDescriptorDualElevation &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorDualElevation &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorDualElevation>(md::ita::PrepareFunctionConstantDescriptorDualElevation &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorDualElevation>(md::ita::PrepareFunctionConstantDescriptorDualElevation &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorDualElevation &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorDualElevation>(md::ita::PrepareFunctionConstantDescriptorDualElevation &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42895F0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorDualElevation>(md::ita::PrepareFunctionConstantDescriptorDualElevation &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorDualElevation &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorDualElevation>(md::ita::PrepareFunctionConstantDescriptorDualElevation &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42895F0;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorDualElevation>(md::ita::PrepareFunctionConstantDescriptorDualElevation &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorDualElevation &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorDualElevation>(md::ita::PrepareFunctionConstantDescriptorDualElevation &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x8261D2F258A435BBLL;
  result[1] = "md::ls::IsElevated]";
  result[2] = 18;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorDualElevation>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorDualElevation>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorDualElevation>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorDualElevation>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279378;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorDualElevation>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorDualElevation>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4279378;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorDualElevation>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorDualElevation>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *result;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43[4];
  unint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t *v48;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::IsElevated>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7])
    v8 = (uint64_t)(v5 + 4);
  else
    v8 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v45, v8, v5, v4, *(_QWORD *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7])
    v9 = (uint64_t)v7;
  else
    v9 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v43, v9, v6, v4, *(_QWORD *)(v9 + 32));
  if (v44 == v48)
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *result = *v11;
      v12 = *v11;
      v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (v14 = *(_QWORD *)(v13 + 8 * (v12 >> 39))) != 0
        && (v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            v17 = v6[7],
            v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (v20 = *(_DWORD *)(v19 + 4) == (_DWORD)v18)
          : (v20 = 0),
            v20))
      {
        v21 = v6[11];
        v22 = v6[10] + 33 * v15;
      }
      else
      {
        v21 = v6[11];
        v22 = v21;
      }
      if (v22 == v21)
        v23 = 0;
      else
        v23 = v22;
      *(_BYTE *)(v23 + 12) = 1;
      v24 = v48;
      v11 = *(unint64_t **)(v45 + 32);
      if (++v48 != v11)
      {
        v25 = v46[4];
        v26 = (v46[5] - v25) >> 3;
        v27 = v24 + 2;
        while (1)
        {
          v28 = *((unsigned int *)v27 - 1);
          v29 = v28 >> 7;
          if (v28 >> 7 < v26)
          {
            v30 = *(_QWORD *)(v25 + 8 * v29);
            if (v30)
            {
              v31 = *(unsigned __int16 *)(v30 + 2 * (v28 & 0x7F));
              v33 = v46[7];
              v32 = v46[8];
              if (v31 < (v32 - v33) >> 3)
              {
                v34 = v33 + 8 * v31;
                if (v34 != v32 && *(_DWORD *)(v34 + 4) == (_DWORD)v28)
                {
                  v36 = v47[4];
                  if (v29 < (v47[5] - v36) >> 3)
                  {
                    v37 = *(_QWORD *)(v36 + 8 * v29);
                    if (v37)
                    {
                      v38 = *(unsigned __int16 *)(v37 + 2 * (v28 & 0x7F));
                      v39 = v47[7];
                      v40 = v47[8];
                      if (v38 < (v40 - v39) >> 3)
                      {
                        v41 = v39 + 8 * v38;
                        if (v41 != v40 && *(_DWORD *)(v41 + 4) == (_DWORD)v28)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v48 = v27;
          v20 = v27++ == v11;
          if (v20)
            goto LABEL_9;
        }
        v11 = v27 - 1;
      }
LABEL_9:
      ;
    }
    while (v44 != v11);
  }
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::IsElevated>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x8261D2F258A435BBLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x8261D2F258A435BBLL;
      if (*(_QWORD *)&v3 <= 0x8261D2F258A435BBLL)
        v5 = 0x8261D2F258A435BBLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x8261D2F258A435BBLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x8261D2F258A435BBLL)
            {
              if (v7[2] == 0x8261D2F258A435BBLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x8261D2F258A435BBLL)
          {
            if (v7[2] == 0x8261D2F258A435BBLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::IsElevated]";
  *(_QWORD *)(v11 + 24) = 18;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270EA8;
  *(_QWORD *)(v11 + 8) = 0x8261D2F258A435BBLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x8261D2F258A435BBLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x8261D2F258A435BBLL;
  v15[1] = "md::ls::IsElevated]";
  v15[2] = 18;
  gdc::Registry::_registerStorageDataSignals(a1, 0x8261D2F258A435BBLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6EAF4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::IsElevated>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsElevated>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IsElevated>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsElevated>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSSAO>(md::ita::PrepareFunctionConstantDescriptorSSAO &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorSSAO &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSSAO>(md::ita::PrepareFunctionConstantDescriptorSSAO &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSSAO>(md::ita::PrepareFunctionConstantDescriptorSSAO &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorSSAO &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSSAO>(md::ita::PrepareFunctionConstantDescriptorSSAO &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42888B8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSSAO>(md::ita::PrepareFunctionConstantDescriptorSSAO &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorSSAO &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSSAO>(md::ita::PrepareFunctionConstantDescriptorSSAO &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42888B8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSSAO>(md::ita::PrepareFunctionConstantDescriptorSSAO &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorSSAO &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSSAO>(md::ita::PrepareFunctionConstantDescriptorSSAO &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6EB160(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSSAO>(md::ita::PrepareFunctionConstantDescriptorSSAO &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorSSAO &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSSAO>(md::ita::PrepareFunctionConstantDescriptorSSAO &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSSAO>(md::ita::PrepareFunctionConstantDescriptorSSAO &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorSSAO &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSSAO>(md::ita::PrepareFunctionConstantDescriptorSSAO &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288900;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSSAO>(md::ita::PrepareFunctionConstantDescriptorSSAO &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorSSAO &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSSAO>(md::ita::PrepareFunctionConstantDescriptorSSAO &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288900;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSSAO>(md::ita::PrepareFunctionConstantDescriptorSSAO &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorSSAO &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSSAO>(md::ita::PrepareFunctionConstantDescriptorSSAO &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x237F9D3BCC905318;
  v2[1] = "md::ls::IsMercator]";
  *(_QWORD *)&result = 18;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4300;
  v2[4] = "md::ls::IsMaterial]";
  v2[5] = 18;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSSAO>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSSAO>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSSAO>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSSAO>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278D00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSSAO>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSSAO>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278D00;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSSAO>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSSAO>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t (***v48)(_QWORD);
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  int8x8_t v54;
  uint8x8_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  float v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  int8x8_t *v83;
  float v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v112;
  unint64_t *v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t v123;
  uint64_t v124[2];

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = gdc::Registry::storage<md::ls::IsMercator>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::IsMaterial>(v3);
  v6 = gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v7 = (_QWORD *)v6;
  v8 = (_QWORD *)(v6 + 32);
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v8 = (_QWORD *)(v4 + 32);
  if (v5[8] - v5[7] < v8[4] - v8[3])
    v8 = v5 + 4;
  v116 = v8;
  v117 = (_QWORD *)v6;
  v118 = (_QWORD *)v4;
  v119 = v5;
  v10 = (_QWORD *)v8[3];
  v9 = (_QWORD *)v8[4];
  v120 = v10;
  v115 = v9;
  if (v9 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v116))
  {
    v11 = v10 + 1;
    do
    {
      v10 = v11;
      v120 = v11;
      if (v11 == v115)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v116);
      v11 = v10 + 1;
    }
    while (!isValid);
  }
  if (v115 != v10)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      v15 = result;
      *result = *v10;
      v16 = *v10;
      v17 = HIDWORD(*v10);
      v18 = *v10 >> 39;
      v19 = v7[4];
      if (v18 < (v7[5] - v19) >> 3
        && (v20 = *(_QWORD *)(v19 + 8 * v18)) != 0
        && (v21 = *(unsigned __int16 *)(v20 + 2 * (HIDWORD(v16) & 0x7F)),
            v23 = v7[7],
            v22 = v7[8],
            v21 < (v22 - v23) >> 3)
        && ((v24 = v23 + 8 * v21, v24 != v22) ? (v25 = *(_DWORD *)(v24 + 4) == (_DWORD)v17) : (v25 = 0), v25))
      {
        v63 = 33 * v21;
        v26 = v7[11];
        v27 = v7[10] + v63;
      }
      else
      {
        v26 = v7[11];
        v27 = v26;
      }
      if (v27 == v26)
        v28 = 0;
      else
        v28 = v27;
      v114 = v28;
      v29 = v5[4];
      if (v18 < (v5[5] - v29) >> 3
        && (v30 = *(_QWORD *)(v29 + 8 * v18)) != 0
        && (v31 = *(unsigned __int16 *)(v30 + 2 * (HIDWORD(v16) & 0x7F)),
            v33 = v5[7],
            v32 = v5[8],
            v31 < (v32 - v33) >> 3)
        && ((v34 = v33 + 8 * v31, v34 != v32) ? (v35 = *(_DWORD *)(v34 + 4) == (_DWORD)v17) : (v35 = 0), v35))
      {
        v36 = v5[10] + 8 * v31;
      }
      else
      {
        v36 = v5[11];
      }
      v113 = (unint64_t *)v36;
      v37 = **(_QWORD **)(a1 + 8);
      v38 = *(_QWORD **)v37;
      v39 = *(_QWORD **)(v37 + 8);
      if (v38 != v39)
      {
        while (*v38 != 0x4EDAD23DFB014132)
        {
          v38 += 5;
          if (v38 == v39)
            goto LABEL_45;
        }
      }
      if (v38 == v39)
      {
LABEL_45:
        v40 = 0;
      }
      else
      {
        v40 = v38[3];
        v41 = (std::__shared_weak_count *)v38[4];
        if (v41)
        {
          p_shared_owners = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldxr(p_shared_owners);
          while (__stxr(v43 + 1, p_shared_owners));
          do
            v44 = __ldaxr(p_shared_owners);
          while (__stlxr(v44 - 1, p_shared_owners));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
      }
      v45 = ***(uint64_t ****)(a1 + 8);
      if (v45 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v45 != 0x22D45F5AAD4BF408)
      {
        v46 = v45 + 5;
        do
        {
          v47 = *v46;
          v46 += 5;
        }
        while (v47 != 0x22D45F5AAD4BF408);
        v45 = v46 - 5;
      }
      v48 = (uint64_t (***)(_QWORD))v45[3];
      v49 = (std::__shared_weak_count *)v45[4];
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
        do
          v52 = __ldaxr(v50);
        while (__stlxr(v52 - 1, v50));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v53 = *(uint64_t **)((**v48)(v48) + 8);
      v54 = (int8x8_t)v53[1];
      if (!*(_QWORD *)&v54)
        goto LABEL_123;
      v55 = (uint8x8_t)vcnt_s8(v54);
      v55.i16[0] = vaddlv_u8(v55);
      if (v55.u32[0] > 1uLL)
      {
        v56 = 0x41E8D6E445F4145;
        if (*(_QWORD *)&v54 <= 0x41E8D6E445F4145uLL)
          v56 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v54;
      }
      else
      {
        v56 = (*(_QWORD *)&v54 - 1) & 0x41E8D6E445F4145;
      }
      v57 = *v53;
      v58 = *(_QWORD **)(*v53 + 8 * v56);
      if (!v58)
        goto LABEL_123;
      v59 = (_QWORD *)*v58;
      if (!*v58)
        goto LABEL_123;
      v60 = *(_QWORD *)&v54 - 1;
      if (v55.u32[0] < 2uLL)
      {
        while (1)
        {
          v61 = v59[1];
          if (v61 == 0x41E8D6E445F4145)
          {
            if (v59[2] == 0x41E8D6E445F4145)
              goto LABEL_80;
          }
          else if ((v61 & v60) != v56)
          {
            goto LABEL_123;
          }
          v59 = (_QWORD *)*v59;
          if (!v59)
            goto LABEL_123;
        }
      }
      while (1)
      {
        v62 = v59[1];
        if (v62 == 0x41E8D6E445F4145)
          break;
        if (v62 >= *(_QWORD *)&v54)
          v62 %= *(_QWORD *)&v54;
        if (v62 != v56)
          goto LABEL_123;
LABEL_72:
        v59 = (_QWORD *)*v59;
        if (!v59)
          goto LABEL_123;
      }
      if (v59[2] != 0x41E8D6E445F4145)
        goto LABEL_72;
LABEL_80:
      v64 = v59[5];
      if (*(_QWORD *)(v64 + 8) != 0x41E8D6E445F4145)
        goto LABEL_123;
      v65 = *(_QWORD *)(v64 + 32);
      if (!v65)
        goto LABEL_123;
      if (v55.u32[0] > 1uLL)
      {
        v66 = 0x1AF456233693CD46;
        if (*(_QWORD *)&v54 <= 0x1AF456233693CD46uLL)
          v66 = 0x1AF456233693CD46uLL % *(_QWORD *)&v54;
      }
      else
      {
        v66 = v60 & 0x1AF456233693CD46;
      }
      v67 = *(_QWORD **)(v57 + 8 * v66);
      if (!v67 || (v68 = (_QWORD *)*v67) == 0)
      {
LABEL_105:
        v72 = 0;
        if (!*(_BYTE *)(v65 + 227))
          goto LABEL_123;
        goto LABEL_106;
      }
      if (v55.u32[0] < 2uLL)
      {
        while (1)
        {
          v69 = v68[1];
          if (v69 == 0x1AF456233693CD46)
          {
            if (v68[2] == 0x1AF456233693CD46)
              goto LABEL_102;
          }
          else if ((v69 & v60) != v66)
          {
            goto LABEL_105;
          }
          v68 = (_QWORD *)*v68;
          if (!v68)
            goto LABEL_105;
        }
      }
      while (2)
      {
        v70 = v68[1];
        if (v70 != 0x1AF456233693CD46)
        {
          if (v70 >= *(_QWORD *)&v54)
            v70 %= *(_QWORD *)&v54;
          if (v70 != v66)
            goto LABEL_105;
          goto LABEL_96;
        }
        if (v68[2] != 0x1AF456233693CD46)
        {
LABEL_96:
          v68 = (_QWORD *)*v68;
          if (!v68)
            goto LABEL_105;
          continue;
        }
        break;
      }
LABEL_102:
      v71 = v68[5];
      if (*(_QWORD *)(v71 + 8) != 0x1AF456233693CD46)
        goto LABEL_105;
      v72 = *(_QWORD *)(v71 + 32);
      if (!*(_BYTE *)(v65 + 227))
        goto LABEL_123;
LABEL_106:
      v73 = *(float *)(v72 + 3076);
      v74 = *(float *)(v72 + 3080);
      v75 = *v113;
      v123 = v75;
      v76 = *(_QWORD *)(v40 + 120);
      if (v75 >= (unint64_t)((*(_QWORD *)(v40 + 128) - v76) >> 3))
        goto LABEL_115;
      v77 = *(_QWORD *)(v76 + 8 * v75);
      if (!v77)
        goto LABEL_116;
      if (HIDWORD(v75) == HIDWORD(v77))
      {
        v78 = *(_QWORD *)(v40 + 144);
        v79 = *(uint64_t **)(v40 + 152);
        v80 = v40;
        v81 = (uint64_t *)(v78 + 8 * v77);
        if (v81 == v79 || v78 == 0)
        {
          v77 = 0;
        }
        else
        {
          v112 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v80 + 56, v75, &v123);
          ++v112[3];
          v77 = *v81;
        }
        v40 = v80;
      }
      else
      {
LABEL_115:
        v77 = 0;
      }
LABEL_116:
      v83 = *(int8x8_t **)v40;
      v124[0] = v77;
      v124[1] = 0;
      gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v121, v83, v124, 0);
      (*(void (**)(uint64_t *__return_ptr, float))(*(_QWORD *)v121 + 1224))(v124, fmaxf(v74 + v73, 1.0));
      v84 = *((float *)v124 + 1);
      if (!LOBYTE(v124[0]))
        v84 = 1.0;
      *(_BYTE *)(v114 + 20) = v84 > 0.01;
      v85 = v122;
      if (v122)
      {
        v86 = (unint64_t *)&v122->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
LABEL_123:
      v10 = (_QWORD *)v116[4];
      v14 = v120 + 1;
      v120 = v14;
      if (v14 != v10)
      {
        v88 = v117[4];
        while (1)
        {
          v89 = *((unsigned int *)v14 + 1);
          v90 = v89 >> 7;
          if (v89 >> 7 < (v117[5] - v88) >> 3)
          {
            v91 = *(_QWORD *)(v88 + 8 * v90);
            if (v91)
            {
              v92 = v89 & 0x7F;
              v93 = *(unsigned __int16 *)(v91 + 2 * v92);
              v95 = v117[7];
              v94 = v117[8];
              if (v93 < (v94 - v95) >> 3)
              {
                v96 = v95 + 8 * v93;
                if (v96 != v94 && *(_DWORD *)(v96 + 4) == (_DWORD)v89)
                {
                  v98 = v118[4];
                  if (v90 < (v118[5] - v98) >> 3)
                  {
                    v99 = *(_QWORD *)(v98 + 8 * v90);
                    if (v99)
                    {
                      v100 = *(unsigned __int16 *)(v99 + 2 * v92);
                      v102 = v118[7];
                      v101 = v118[8];
                      if (v100 < (v101 - v102) >> 3)
                      {
                        v103 = v102 + 8 * v100;
                        if (v103 != v101 && *(_DWORD *)(v103 + 4) == (_DWORD)v89)
                        {
                          v105 = v119[4];
                          if (v90 < (v119[5] - v105) >> 3)
                          {
                            v106 = *(_QWORD *)(v105 + 8 * v90);
                            if (v106)
                            {
                              v107 = *(unsigned __int16 *)(v106 + 2 * v92);
                              v109 = v119[7];
                              v108 = v119[8];
                              if (v107 < (v108 - v109) >> 3)
                              {
                                v110 = v109 + 8 * v107;
                                if (*(_DWORD *)(v110 + 4) == (_DWORD)v89 && v110 != v108)
                                  break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v10)
          {
            v14 = v10;
            goto LABEL_13;
          }
        }
        v10 = v14;
LABEL_13:
        v120 = v14;
      }
      result = v15;
      if (v115 == v10)
        goto LABEL_152;
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_152:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F6EBA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  unint64_t *p_shared_owners;
  unint64_t v21;

  if (a19)
  {
    p_shared_owners = (unint64_t *)&a19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))a19->__on_zero_shared)(a19);
      std::__shared_weak_count::__release_weak(a19);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSplined>(md::ita::PrepareFunctionConstantDescriptorSplined &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorSplined &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSplined>(md::ita::PrepareFunctionConstantDescriptorSplined &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSplined>(md::ita::PrepareFunctionConstantDescriptorSplined &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorSplined &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSplined>(md::ita::PrepareFunctionConstantDescriptorSplined &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288E58;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSplined>(md::ita::PrepareFunctionConstantDescriptorSplined &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorSplined &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSplined>(md::ita::PrepareFunctionConstantDescriptorSplined &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288E58;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSplined>(md::ita::PrepareFunctionConstantDescriptorSplined &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorSplined &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSplined>(md::ita::PrepareFunctionConstantDescriptorSplined &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;
  char **v3;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 48;
  v3 = (char **)a1;
  _ZZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsES5_EEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_ENKUlTpTnmNS1_16integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSH_(&v3);
}

void sub_19F6EBB30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSplined>(md::ita::PrepareFunctionConstantDescriptorSplined &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorSplined &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSplined>(md::ita::PrepareFunctionConstantDescriptorSplined &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSplined>(md::ita::PrepareFunctionConstantDescriptorSplined &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorSplined &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSplined>(md::ita::PrepareFunctionConstantDescriptorSplined &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288EA0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSplined>(md::ita::PrepareFunctionConstantDescriptorSplined &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorSplined &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSplined>(md::ita::PrepareFunctionConstantDescriptorSplined &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288EA0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSplined>(md::ita::PrepareFunctionConstantDescriptorSplined &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorSplined &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSplined>(md::ita::PrepareFunctionConstantDescriptorSplined &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0x237F9D3BCC905318;
  v2[1] = "md::ls::IsMercator]";
  *(_QWORD *)&result = 18;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4310;
  v2[4] = "md::ls::IsOpaque]";
  v2[5] = 16;
  v2[6] = 0x73F0259EC1934FB1;
  v2[7] = "md::ls::IsTransparent]";
  v2[8] = 21;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSplined>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSplined>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSplined>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSplined>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278FD0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSplined>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSplined>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278FD0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSplined>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSplined>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (***v9)(_QWORD);
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  int8x8_t v15;
  uint8x8_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  void *v27;
  float v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t result;
  _QWORD v35[3];
  _QWORD *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275808;
  v4[1] = a2;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E42758C8;
  v5[1] = a2;
  v6 = ***(uint64_t ****)(a1 + 8);
  if (v6 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v6 != 0x22D45F5AAD4BF408)
  {
    v7 = v6 + 5;
    do
    {
      v8 = *v7;
      v7 += 5;
    }
    while (v8 != 0x22D45F5AAD4BF408);
    v6 = v7 - 5;
  }
  v9 = (uint64_t (***)(_QWORD))v6[3];
  v10 = (std::__shared_weak_count *)v6[4];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v14 = *(_QWORD **)((**v9)(v9) + 8);
  v15 = (int8x8_t)v14[1];
  if (!*(_QWORD *)&v15)
    goto LABEL_35;
  v16 = (uint8x8_t)vcnt_s8(v15);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    v17 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v15 <= 0x1AF456233693CD46uLL)
      v17 = 0x1AF456233693CD46uLL % *(_QWORD *)&v15;
  }
  else
  {
    v17 = (*(_QWORD *)&v15 - 1) & 0x1AF456233693CD46;
  }
  v18 = *(_QWORD **)(*v14 + 8 * v17);
  if (!v18)
    goto LABEL_35;
  v19 = (_QWORD *)*v18;
  if (!v19)
    goto LABEL_35;
  if (v16.u32[0] < 2uLL)
  {
    v20 = *(_QWORD *)&v15 - 1;
    while (1)
    {
      v22 = v19[1];
      if (v22 == 0x1AF456233693CD46)
      {
        if (v19[2] == 0x1AF456233693CD46)
          goto LABEL_33;
      }
      else if ((v22 & v20) != v17)
      {
        goto LABEL_35;
      }
      v19 = (_QWORD *)*v19;
      if (!v19)
        goto LABEL_35;
    }
  }
  while (1)
  {
    v21 = v19[1];
    if (v21 == 0x1AF456233693CD46)
      break;
    if (v21 >= *(_QWORD *)&v15)
      v21 %= *(_QWORD *)&v15;
    if (v21 != v17)
      goto LABEL_35;
LABEL_22:
    v19 = (_QWORD *)*v19;
    if (!v19)
      goto LABEL_35;
  }
  if (v19[2] != 0x1AF456233693CD46)
    goto LABEL_22;
LABEL_33:
  v23 = v19[5];
  if (*(_QWORD *)(v23 + 8) == 0x1AF456233693CD46)
  {
    v24 = *(_QWORD *)(v23 + 32);
    goto LABEL_36;
  }
LABEL_35:
  v24 = 0;
LABEL_36:
  v25 = *(float *)(v24 + 3076);
  v26 = *(float *)(v24 + 3080);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "daVinciGlobeSplinedMaxZoom");
  if (fmaxf(v26 + v25, 1.0) <= v28)
  {
    v29 = *(unsigned __int8 *)(v24 + 3776) - 1;

    if (v29 > 2)
      goto LABEL_49;
    v35[0] = &off_1E427C810;
    v36 = v35;
    (*(void (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v35);
    v30 = v36;
    if (v36 == v35)
    {
      v31 = 4;
      v30 = v35;
    }
    else
    {
      if (!v36)
        goto LABEL_44;
      v31 = 5;
    }
    (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_44:
    v35[0] = &off_1E427C858;
    v36 = v35;
    (*(void (**)(_QWORD *, _QWORD *))(*v5 + 16))(v5, v35);
    v32 = v36;
    if (v36 == v35)
    {
      v33 = 4;
      v32 = v35;
    }
    else
    {
      if (!v36)
        goto LABEL_49;
      v33 = 5;
    }
    (*(void (**)(void))(*v32 + 8 * v33))();
    goto LABEL_49;
  }

LABEL_49:
  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F6EC02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a13;
  if (a13 == v15)
  {
    v18 = 4;
    v17 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::FunctionConstants &,md::ls::IsTransparent const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsTransparent const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::FunctionConstants &,md::ls::IsTransparent const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsTransparent const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57[4];
  unint64_t *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t *v62;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::IsTransparent>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7])
    v8 = (uint64_t)(v5 + 4);
  else
    v8 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v59, v8, v5, v4, *(_QWORD *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7])
    v9 = (uint64_t)v7;
  else
    v9 = (uint64_t)(v4 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v57, v9, v6, v4, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v58 == v62)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v6[4];
    if (v13 >> 39 >= (v6[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v6[7];
    v19 = v6[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v56 = 33 * v18;
      v23 = v6[11];
      v24 = v6[10] + v56;
    }
    else
    {
LABEL_17:
      v23 = v6[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v4[4];
    if (v15 < (v4[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v4[7];
        v29 = v4[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v4[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v62;
    v11 = *(unint64_t **)(v59 + 32);
    if (++v62 != v11)
    {
      v39 = v60[4];
      v40 = (v60[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v60[7];
            result = v60[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v61[4];
                result = v61[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v61[7];
                    v52 = v61[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v62 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v58 == v11)
      goto LABEL_56;
  }
  v33 = v4[11];
  v34 = v4[10] + 4 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::FunctionConstants &,md::ls::IsTransparent const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsTransparent const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::IsTransparent>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v2[8] - v2[7] >= v3[8] - v3[7])
    v6 = (uint64_t)(v3 + 4);
  else
    v6 = (uint64_t)(v2 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v3, v2, *(_QWORD *)(v6 + 24));
  if (v2[8] - v2[7] >= v4[8] - v4[7])
    v7 = (uint64_t)v5;
  else
    v7 = (uint64_t)(v2 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v4, v2, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

void ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL4 isValid;
  uint64_t (**v17)(_QWORD);
  uint64_t (*v18)(_QWORD);
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t result;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v82;
  _QWORD v83[5];
  _QWORD *v84;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::IsMercator>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::IsOpaque>(v3);
  v6 = gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  v10 = (_QWORD *)v6;
  v11 = (_QWORD *)(v6 + 32);
  if (v4[8] - v4[7] < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v11 = v4 + 4;
  if (v5[8] - v5[7] >= v11[4] - v11[3])
    v12 = v11;
  else
    v12 = v5 + 4;
  v83[0] = v12;
  v83[1] = v6;
  v83[2] = v4;
  v83[3] = v5;
  v14 = (_QWORD *)v12[3];
  v13 = (_QWORD *)v12[4];
  v84 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v83))
  {
    v15 = v14 + 1;
    do
    {
      v14 = v15;
      v84 = v15;
      if (v15 == v13)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v83);
      v15 = v14 + 1;
    }
    while (!isValid);
  }
  v17 = &ecs2::Runtime::_localEntity;
  v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14)
    goto LABEL_82;
  v19 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v19 = *v14;
    v21 = *v14;
    v22 = HIDWORD(*v14);
    v23 = *v14 >> 39;
    v24 = v10[4];
    if (v23 >= (v10[5] - v24) >> 3)
      goto LABEL_23;
    v25 = *(_QWORD *)(v24 + 8 * v23);
    if (!v25)
      goto LABEL_23;
    v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    v28 = v10[7];
    v27 = v10[8];
    if (v26 >= (v27 - v28) >> 3)
      goto LABEL_23;
    v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == (_DWORD)v22)
    {
      v82 = 33 * v26;
      v31 = v10[11];
      v32 = v10[10] + v82;
    }
    else
    {
LABEL_23:
      v31 = v10[11];
      v32 = v31;
    }
    v33 = v32 == v31 ? 0 : v32;
    if ((v34 = v4[4], v23 < (v4[5] - v34) >> 3)
      && (v35 = *(_QWORD *)(v34 + 8 * v23)) != 0
      && (v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v4[7], v37 = v4[8], v36 < (v37 - v38) >> 3)
      && ((v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == (_DWORD)v22) : (v40 = 0), v40))
    {
      v41 = v4[11];
      v42 = v4[10] + v36;
    }
    else
    {
      v41 = v4[11];
      v42 = v41;
    }
    v43 = v42 == v41 ? 0 : v42;
    v44 = v5[4];
    if (v23 < (v5[5] - v44) >> 3)
    {
      v45 = *(_QWORD *)(v44 + 8 * v23);
      if (v45)
      {
        v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        v48 = v5[7];
        v47 = v5[8];
        if (v46 < (v47 - v48) >> 3)
        {
          v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == (_DWORD)v22)
            break;
        }
      }
    }
    v51 = v5[11];
    v52 = v51;
    v53 = *(_QWORD *)(a2 + 24);
    if (!v53)
      goto LABEL_81;
LABEL_46:
    if (v52 == v51)
      v54 = 0;
    else
      v54 = v52;
    result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)v53 + 48))(v53, v33, v43, v54);
    v56 = (_QWORD *)v12[4];
    v20 = v14 + 1;
    v84 = v14 + 1;
    if (v14 + 1 != v56)
    {
      v57 = v10[4];
      v59 = v10[7];
      v58 = v10[8];
      v60 = v4[4];
      result = v4[7];
      v61 = v4[8];
      v62 = v5[4];
      v64 = v5[7];
      v63 = v5[8];
      while (1)
      {
        v65 = *((unsigned int *)v20 + 1);
        v66 = v65 >> 7;
        if (v65 >> 7 < (v10[5] - v57) >> 3)
        {
          v67 = *(_QWORD *)(v57 + 8 * v66);
          if (v67)
          {
            v68 = v65 & 0x7F;
            v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              v70 = v59 + 8 * v69;
              v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == (_DWORD)v65;
              if (v71 && v66 < (v4[5] - v60) >> 3)
              {
                v73 = *(_QWORD *)(v60 + 8 * v66);
                if (v73)
                {
                  v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    v75 = result + 8 * v74;
                    v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == (_DWORD)v65;
                    if (v76 && v66 < (v5[5] - v62) >> 3)
                    {
                      v78 = *(_QWORD *)(v62 + 8 * v66);
                      if (v78)
                      {
                        v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == (_DWORD)v65 && v80 != v63)
                            break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          v20 = v56;
          goto LABEL_14;
        }
      }
      v56 = v20;
LABEL_14:
      v84 = v20;
    }
    v14 = v56;
    if (v13 == v56)
      goto LABEL_83;
  }
  v51 = v5[11];
  v52 = v5[10] + v46;
  v53 = *(_QWORD *)(a2 + 24);
  if (v53)
    goto LABEL_46;
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  result = ((uint64_t (*)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  v19 = (_QWORD *)result;
LABEL_83:
  *v19 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 isValid;
  _QWORD v11[5];
  uint64_t v12;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::IsMercator>(v1);
  v3 = gdc::Registry::storage<md::ls::IsOpaque>(v1);
  v4 = gdc::Registry::storage<md::ls::FunctionConstants>(v1);
  if (*(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56) >= *(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56))
    v5 = v4;
  else
    v5 = v2;
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) < *(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56))
    v5 = v3;
  v11[0] = v5 + 32;
  v11[1] = v4;
  v11[2] = v2;
  v11[3] = v3;
  v7 = *(_QWORD *)(v5 + 56);
  v6 = *(_QWORD *)(v5 + 64);
  v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    v8 = v7 + 8;
    do
    {
      v7 = v8;
      v12 = v8;
      if (v8 == v6)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PerformVisibilityTestOnRenderItem>(md::ita::PerformVisibilityTestOnRenderItem &&)::{lambda(void)#2},std::allocator<md::ita::PerformVisibilityTestOnRenderItem &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PerformVisibilityTestOnRenderItem>(md::ita::PerformVisibilityTestOnRenderItem &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PerformVisibilityTestOnRenderItem>(md::ita::PerformVisibilityTestOnRenderItem &&)::{lambda(void)#2},std::allocator<md::ita::PerformVisibilityTestOnRenderItem &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PerformVisibilityTestOnRenderItem>(md::ita::PerformVisibilityTestOnRenderItem &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287CE8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PerformVisibilityTestOnRenderItem>(md::ita::PerformVisibilityTestOnRenderItem &&)::{lambda(void)#2},std::allocator<md::ita::PerformVisibilityTestOnRenderItem &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PerformVisibilityTestOnRenderItem>(md::ita::PerformVisibilityTestOnRenderItem &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287CE8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PerformVisibilityTestOnRenderItem>(md::ita::PerformVisibilityTestOnRenderItem &&)::{lambda(void)#2},std::allocator<md::ita::PerformVisibilityTestOnRenderItem &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PerformVisibilityTestOnRenderItem>(md::ita::PerformVisibilityTestOnRenderItem &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PerformVisibilityTestOnRenderItem>(md::ita::PerformVisibilityTestOnRenderItem &&)::{lambda(void)#1},std::allocator<md::ita::PerformVisibilityTestOnRenderItem &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PerformVisibilityTestOnRenderItem>(md::ita::PerformVisibilityTestOnRenderItem &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PerformVisibilityTestOnRenderItem>(md::ita::PerformVisibilityTestOnRenderItem &&)::{lambda(void)#1},std::allocator<md::ita::PerformVisibilityTestOnRenderItem &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PerformVisibilityTestOnRenderItem>(md::ita::PerformVisibilityTestOnRenderItem &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287D30;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PerformVisibilityTestOnRenderItem>(md::ita::PerformVisibilityTestOnRenderItem &&)::{lambda(void)#1},std::allocator<md::ita::PerformVisibilityTestOnRenderItem &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PerformVisibilityTestOnRenderItem>(md::ita::PerformVisibilityTestOnRenderItem &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287D30;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PerformVisibilityTestOnRenderItem>(md::ita::PerformVisibilityTestOnRenderItem &&)::{lambda(void)#1},std::allocator<md::ita::PerformVisibilityTestOnRenderItem &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PerformVisibilityTestOnRenderItem>(md::ita::PerformVisibilityTestOnRenderItem &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xFA77EBF8E4CA45B8;
  v2[1] = "md::ls::VisibilityGroupTest]";
  *(_QWORD *)&result = 27;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4320;
  v2[4] = "md::ls::AssociationHandle]";
  v2[5] = 25;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PerformVisibilityTestOnRenderItem>,std::allocator<ecs2::ForwardToExecute<md::ita::PerformVisibilityTestOnRenderItem>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PerformVisibilityTestOnRenderItem>,std::allocator<ecs2::ForwardToExecute<md::ita::PerformVisibilityTestOnRenderItem>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278718;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PerformVisibilityTestOnRenderItem>,std::allocator<ecs2::ForwardToExecute<md::ita::PerformVisibilityTestOnRenderItem>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278718;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PerformVisibilityTestOnRenderItem>,std::allocator<ecs2::ForwardToExecute<md::ita::PerformVisibilityTestOnRenderItem>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  BOOL v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  int8x8_t *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  unint64_t v52;
  int8x8_t v53;
  unint64_t v54;
  uint8x8_t v55;
  unint64_t v56;
  int8x8_t *v57;
  uint64_t v58;
  int8x8_t v59;
  int8x8_t v60;
  unsigned int v61;
  int8x8_t v62;
  unint64_t v63;
  uint8x8_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *result;
  uint64_t v83;
  char v84;
  _QWORD v85[2];
  int v86;
  _QWORD *v87;
  _QWORD v88[2];
  int v89;
  _QWORD *v90;
  int v91;
  uint64_t v92;

  v2 = a1;
  v92 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::VisibilityGroupTest>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::AssociationHandle>(v3);
  v7 = (unint64_t *)v4[7];
  v6 = (uint64_t *)v4[8];
  v8 = (char *)v6 - (char *)v7;
  if (v6 != (uint64_t *)v7)
  {
    if ((v9 = *((unsigned int *)v7 + 1), v10 = v4[4], v11 = (v4[5] - v10) >> 3, v9 >> 7 >= v11)
      || (v12 = *(_QWORD *)(v10 + 8 * (v9 >> 7))) == 0
      || (v13 = *(unsigned __int16 *)(v12 + 2 * (v9 & 0x7F)), v13 >= v8 >> 3)
      || ((v14 = (uint64_t *)&v7[v13], v14 != v6) ? (v15 = *((_DWORD *)v14 + 1) == (_DWORD)v9) : (v15 = 0), !v15))
    {
      v16 = v8 >> 3;
      v17 = (uint64_t *)(v7 + 1);
      do
      {
        if (v17 == v6)
          goto LABEL_123;
        v18 = *((unsigned int *)v17 + 1);
        v19 = (uint64_t *)v4[8];
        if (v18 >> 7 < v11)
        {
          v20 = *(_QWORD *)(v10 + 8 * (v18 >> 7));
          v19 = (uint64_t *)v4[8];
          if (v20)
          {
            v21 = *(unsigned __int16 *)(v20 + 2 * (v18 & 0x7F));
            v19 = (uint64_t *)v4[8];
            if (v16 > v21)
            {
              v19 = (uint64_t *)&v7[v21];
              if (*((_DWORD *)v19 + 1) != (_DWORD)v18)
                v19 = (uint64_t *)v4[8];
            }
          }
        }
        ++v17;
      }
      while (v19 == v6);
      v7 = (unint64_t *)(v17 - 1);
    }
  }
  if (v6 != (uint64_t *)v7)
  {
    v22 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v83 = v2;
    do
    {
      *v22 = *v7;
      v24 = *v7;
      v25 = HIDWORD(*v7);
      v26 = *v7 >> 39;
      v27 = v4[4];
      if (v26 < (v4[5] - v27) >> 3
        && (v28 = *(_QWORD *)(v27 + 8 * v26)) != 0
        && (v29 = *(unsigned __int16 *)(v28 + 2 * (HIDWORD(v24) & 0x7F)),
            v31 = v4[7],
            v30 = v4[8],
            v29 < (v30 - v31) >> 3)
        && ((v32 = v31 + 8 * v29, v32 != v30) ? (v33 = *(_DWORD *)(v32 + 4) == (_DWORD)v25) : (v33 = 0), v33))
      {
        v34 = v4[11];
        v35 = v4[10] + 8 * v29;
      }
      else
      {
        v34 = v4[11];
        v35 = v34;
      }
      if (v35 == v34)
        v36 = 0;
      else
        v36 = (unsigned int *)v35;
      v37 = v5[4];
      if (v26 < (v5[5] - v37) >> 3
        && (v38 = *(_QWORD *)(v37 + 8 * v26)) != 0
        && (v39 = *(unsigned __int16 *)(v38 + 2 * (HIDWORD(v24) & 0x7F)),
            v41 = v5[7],
            v40 = v5[8],
            v39 < (v40 - v41) >> 3)
        && ((v42 = v41 + 8 * v39, v42 != v40) ? (v43 = *(_DWORD *)(v42 + 4) == (_DWORD)v25) : (v43 = 0), v43))
      {
        v44 = v5[11];
        v45 = v5[10] + 16 * v39;
      }
      else
      {
        v44 = v5[11];
        v45 = v44;
      }
      if (v45 == v44)
        v46 = 0;
      else
        v46 = v45;
      v47 = ***(_QWORD ****)(v2 + 8);
      if (v47 != *(_QWORD **)(**(_QWORD **)(v2 + 8) + 8))
      {
        while (*v47 != 0x41D4E9297E100630)
          v47 += 5;
      }
      v49 = (int8x8_t *)v47[3];
      v48 = (std::__shared_weak_count *)v47[4];
      if (!v48)
        goto LABEL_53;
      p_shared_owners = (unint64_t *)&v48->__shared_owners_;
      do
        v51 = __ldxr(p_shared_owners);
      while (__stxr(v51 + 1, p_shared_owners));
      do
        v52 = __ldaxr(p_shared_owners);
      while (__stlxr(v52 - 1, p_shared_owners));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
        v53 = v49[104];
        if (!*(_QWORD *)&v53)
        {
LABEL_75:
          v57 = 0;
          v2 = v83;
          goto LABEL_76;
        }
      }
      else
      {
LABEL_53:
        v53 = v49[104];
        if (!*(_QWORD *)&v53)
          goto LABEL_75;
      }
      v54 = *v36;
      v55 = (uint8x8_t)vcnt_s8(v53);
      v55.i16[0] = vaddlv_u8(v55);
      v2 = v83;
      if (v55.u32[0] > 1uLL)
      {
        v56 = *v36;
        if (*(_QWORD *)&v53 <= v54)
          v56 = v54 % *(_QWORD *)&v53;
      }
      else
      {
        v56 = (v53.i32[0] - 1) & v54;
      }
      v57 = *(int8x8_t **)(*(_QWORD *)&v49[103] + 8 * v56);
      if (v57)
      {
        v57 = (int8x8_t *)*v57;
        if (v57)
        {
          if (v55.u32[0] < 2uLL)
          {
            v58 = *(_QWORD *)&v53 - 1;
            while (1)
            {
              v60 = v57[1];
              if (*(_QWORD *)&v60 == v54)
              {
                if (v57[2].i32[0] == (_DWORD)v54)
                  goto LABEL_76;
              }
              else if ((*(_QWORD *)&v60 & v58) != v56)
              {
                goto LABEL_73;
              }
              v57 = (int8x8_t *)*v57;
              if (!v57)
                goto LABEL_76;
            }
          }
          do
          {
            v59 = v57[1];
            if (*(_QWORD *)&v59 == v54)
            {
              if (v57[2].i32[0] == (_DWORD)v54)
                break;
            }
            else
            {
              if (*(_QWORD *)&v59 >= *(_QWORD *)&v53)
                *(_QWORD *)&v59 %= *(_QWORD *)&v53;
              if (*(_QWORD *)&v59 != v56)
              {
LABEL_73:
                v57 = 0;
                break;
              }
            }
            v57 = (int8x8_t *)*v57;
          }
          while (v57);
        }
      }
LABEL_76:
      v61 = *((unsigned __int8 *)v36 + 4);
      if (v61 == 1)
      {
        if (!v57)
        {
LABEL_85:
          v61 = 0;
          goto LABEL_107;
        }
        v66 = (_QWORD *)v57[6];
        goto LABEL_106;
      }
      if (*((_BYTE *)v36 + 4))
        goto LABEL_85;
      if (v46 && v57)
      {
        v62 = v57[4];
        if (v62)
        {
          v63 = *(_QWORD *)(v46 + 8);
          v64 = (uint8x8_t)vcnt_s8(v62);
          v64.i16[0] = vaddlv_u8(v64);
          if (v64.u32[0] > 1uLL)
          {
            v65 = *(_QWORD *)(v46 + 8);
            if (v63 >= *(_QWORD *)&v62)
              v65 = v63 % *(_QWORD *)&v62;
          }
          else
          {
            v65 = (*(_QWORD *)&v62 - 1) & v63;
          }
          v66 = *(_QWORD **)(*(_QWORD *)&v57[3] + 8 * v65);
          if (v66)
          {
            v66 = (_QWORD *)*v66;
            if (v66)
            {
              if (v64.u32[0] < 2uLL)
              {
                v67 = *(_QWORD *)&v62 - 1;
                while (1)
                {
                  v69 = v66[1];
                  if (v63 == v69)
                  {
                    if (v66[2] == v63)
                      goto LABEL_106;
                  }
                  else if ((v69 & v67) != v65)
                  {
                    goto LABEL_105;
                  }
                  v66 = (_QWORD *)*v66;
                  if (!v66)
                    goto LABEL_106;
                }
              }
              do
              {
                v68 = v66[1];
                if (v63 == v68)
                {
                  if (v66[2] == v63)
                    break;
                }
                else
                {
                  if (v68 >= *(_QWORD *)&v62)
                    v68 %= *(_QWORD *)&v62;
                  if (v68 != v65)
                    goto LABEL_105;
                }
                v66 = (_QWORD *)*v66;
              }
              while (v66);
            }
          }
        }
        else
        {
LABEL_105:
          v66 = 0;
        }
LABEL_106:
        v61 = v66 != 0;
      }
LABEL_107:
      v70 = *(_QWORD **)(v2 + 8);
      v71 = HIDWORD(*v22);
      v72 = v61 | (*v22 << 32);
      v85[0] = &off_1E427F480;
      v85[1] = v72;
      v86 = v71;
      v87 = v85;
      v88[0] = &off_1E427F480;
      v90 = v88;
      v88[1] = v72;
      v89 = v71;
      v91 = 0;
      ecs2::Runtime::queueCommand(v70, (uint64_t)v88);
      if (v91 != -1)
        ((void (*)(char *, _QWORD *))off_1E42FB340[v91])(&v84, v88);
      v91 = -1;
      v73 = v87;
      if (v87 == v85)
      {
        v73 = v85;
        v74 = 4;
      }
      else
      {
        if (!v87)
          goto LABEL_114;
        v74 = 5;
      }
      (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_114:
      v75 = v4[4];
      v76 = v4[7];
      v23 = (uint64_t *)v4[8];
      v77 = (uint64_t *)(v7 + 1);
      while (v77 != v23)
      {
        v78 = *((unsigned int *)v77 + 1);
        v79 = v4[8];
        if (v78 >> 7 < (v4[5] - v75) >> 3)
        {
          v80 = *(_QWORD *)(v75 + 8 * (v78 >> 7));
          v79 = v4[8];
          if (v80)
          {
            v81 = *(unsigned __int16 *)(v80 + 2 * (v78 & 0x7F));
            v79 = v4[8];
            if (((uint64_t)v23 - v76) >> 3 > v81)
            {
              v79 = v76 + 8 * v81;
              if (*(_DWORD *)(v79 + 4) != (_DWORD)v78)
                v79 = v4[8];
            }
          }
        }
        ++v77;
        if ((uint64_t *)v79 != v23)
        {
          v23 = v77 - 1;
          break;
        }
      }
      v7 = (unint64_t *)v23;
    }
    while (v6 != v23);
  }
LABEL_123:
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::VisibilityGroupTest>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xFA77EBF8E4CA45B8;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xFA77EBF8E4CA45B8;
      if (*(_QWORD *)&v3 <= 0xFA77EBF8E4CA45B8)
        v5 = 0xFA77EBF8E4CA45B8 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xFA77EBF8E4CA45B8;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xFA77EBF8E4CA45B8)
            {
              if (v7[2] == 0xFA77EBF8E4CA45B8)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xFA77EBF8E4CA45B8)
          {
            if (v7[2] == 0xFA77EBF8E4CA45B8)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::VisibilityGroupTest]";
  *(_QWORD *)(v11 + 24) = 27;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272498;
  *(_QWORD *)(v11 + 8) = 0xFA77EBF8E4CA45B8;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xFA77EBF8E4CA45B8, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xFA77EBF8E4CA45B8;
  v15[1] = "md::ls::VisibilityGroupTest]";
  v15[2] = 27;
  gdc::Registry::_registerStorageDataSignals(a1, 0xFA77EBF8E4CA45B8, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6ED284(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::AssociationHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x523816724122CCE2;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x523816724122CCE2;
      if (*(_QWORD *)&v3 <= 0x523816724122CCE2uLL)
        v5 = 0x523816724122CCE2uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x523816724122CCE2;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x523816724122CCE2)
            {
              if (v7[2] == 0x523816724122CCE2)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x523816724122CCE2)
          {
            if (v7[2] == 0x523816724122CCE2)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::AssociationHandle]";
  *(_QWORD *)(v11 + 24) = 25;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271F28;
  *(_QWORD *)(v11 + 8) = 0x523816724122CCE2;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x523816724122CCE2uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x523816724122CCE2;
  v15[1] = "md::ls::AssociationHandle]";
  v15[2] = 25;
  gdc::Registry::_registerStorageDataSignals(a1, 0x523816724122CCE2, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6ED4AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::AssociationHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::AssociationHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_OWORD *)(v14 + 16 * v7) = *(_OWORD *)(a1[11] - 16);
  a1[11] -= 16;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::AssociationHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::AssociationHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::VisibilityGroupTest>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::VisibilityGroupTest>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 8 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_BYTE *)(v15 - 4);
  *(_DWORD *)v14 = *(_DWORD *)(v15 - 8);
  *(_BYTE *)(v14 + 4) = v16;
  a1[11] -= 8;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::VisibilityGroupTest>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::VisibilityGroupTest>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderOrder>(md::ita::AssignRenderOrder &&)::{lambda(void)#2},std::allocator<md::ita::AssignRenderOrder &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderOrder>(md::ita::AssignRenderOrder &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderOrder>(md::ita::AssignRenderOrder &&)::{lambda(void)#2},std::allocator<md::ita::AssignRenderOrder &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderOrder>(md::ita::AssignRenderOrder &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283218;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderOrder>(md::ita::AssignRenderOrder &&)::{lambda(void)#2},std::allocator<md::ita::AssignRenderOrder &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderOrder>(md::ita::AssignRenderOrder &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283218;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderOrder>(md::ita::AssignRenderOrder &&)::{lambda(void)#2},std::allocator<md::ita::AssignRenderOrder &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderOrder>(md::ita::AssignRenderOrder &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x78uLL);
  *v2 = 0x9158B59D97A4E38DLL;
  v2[1] = "md::ls::RenderOrderToUse]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB4330;
  v2[4] = "md::ls::RenderOrderToUse]";
  v2[5] = 24;
  v2[6] = 0x9158B59D97A4E38DLL;
  v2[7] = "md::ls::RenderOrderToUse]";
  v2[8] = 24;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  a1[2] = (char *)(v2 + 15);
  if (v2 + 9 < v2 + 15)
  {
    *(_QWORD *)v3 = 0x9158B59D97A4E38DLL;
    v2[10] = "md::ls::RenderOrderToUse]";
    v2[11] = 24;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_38;
  if (0x5555555555555556 * (((char *)(v2 + 15) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 15) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 15) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_39;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x9158B59D97A4E38DLL;
  *((_QWORD *)v10 + 1) = "md::ls::RenderOrderToUse]";
  *((_QWORD *)v10 + 2) = 24;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0x9158B59D97A4E38DLL;
    *((_QWORD *)v4 + 1) = "md::ls::RenderOrderToUse]";
    *((_QWORD *)v4 + 2) = 24;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_38:
    abort();
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 <= 0xAAAAAAAAAAAAAAALL)
    {
      v20 = (char *)operator new(24 * v19);
      goto LABEL_31;
    }
LABEL_39:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v20 = 0;
LABEL_31:
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0x9158B59D97A4E38DLL;
  *((_QWORD *)v21 + 1) = "md::ls::RenderOrderToUse]";
  *((_QWORD *)v21 + 2) = 24;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
}

void sub_19F6EDAA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderOrder>(md::ita::AssignRenderOrder &&)::{lambda(void)#1},std::allocator<md::ita::AssignRenderOrder &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderOrder>(md::ita::AssignRenderOrder &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderOrder>(md::ita::AssignRenderOrder &&)::{lambda(void)#1},std::allocator<md::ita::AssignRenderOrder &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderOrder>(md::ita::AssignRenderOrder &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283260;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderOrder>(md::ita::AssignRenderOrder &&)::{lambda(void)#1},std::allocator<md::ita::AssignRenderOrder &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderOrder>(md::ita::AssignRenderOrder &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283260;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderOrder>(md::ita::AssignRenderOrder &&)::{lambda(void)#1},std::allocator<md::ita::AssignRenderOrder &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderOrder>(md::ita::AssignRenderOrder &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0xD8uLL);
  a1[2] = (char *)(v2 + 27);
  *v2 = 0x76B9BA390004E44ELL;
  v2[1] = "md::ls::IsDecal]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB4250;
  v2[4] = "md::ls::RenderItemID]";
  v2[5] = 20;
  v2[6] = 0x3E8485C60908F920;
  v2[7] = "md::ls::IsMaterial]";
  v2[8] = 18;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 27)
  {
    *(_QWORD *)v3 = 0x3EAAB620EAA88EC8;
    v2[10] = "md::ls::CustomZIndex]";
    v2[11] = 20;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_110;
  if (0x5555555555555556 * (((char *)(v2 + 27) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 27) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 27) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_111;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x3EAAB620EAA88EC8;
  *((_QWORD *)v10 + 1) = "md::ls::CustomZIndex]";
  *((_QWORD *)v10 + 2) = 20;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0x7087983DEF28DBFELL;
    *((_QWORD *)v4 + 1) = "md::ls::IsOpaque]";
    *((_QWORD *)v4 + 2) = 16;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_110;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_111;
    v20 = (char *)operator new(24 * v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0x7087983DEF28DBFELL;
  *((_QWORD *)v21 + 1) = "md::ls::IsOpaque]";
  *((_QWORD *)v21 + 2) = 16;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
  v24 = (unint64_t)a1[2];
  if ((unint64_t)v14 < v24)
  {
    *(_QWORD *)v14 = 0x763953A644184BA9;
    *((_QWORD *)v14 + 1) = "md::ls::RenderableHash]";
    *((_QWORD *)v14 + 2) = 22;
    v25 = v14 + 24;
    goto LABEL_55;
  }
  v26 = *a1;
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3);
  v28 = v27 + 1;
  if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_110;
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x555555555555555)
    v30 = 0xAAAAAAAAAAAAAAALL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_111;
    v31 = (char *)operator new(24 * v30);
  }
  else
  {
    v31 = 0;
  }
  v32 = &v31[24 * v27];
  v33 = &v31[24 * v30];
  *(_QWORD *)v32 = 0x763953A644184BA9;
  *((_QWORD *)v32 + 1) = "md::ls::RenderableHash]";
  *((_QWORD *)v32 + 2) = 22;
  v25 = v32 + 24;
  if (v14 == v26)
  {
    *a1 = v32;
    a1[1] = v25;
    a1[2] = v33;
LABEL_54:
    operator delete(v14);
    goto LABEL_55;
  }
  do
  {
    v34 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v32 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v32 - 24) = v34;
    v32 -= 24;
    v14 -= 24;
  }
  while (v14 != v26);
  v14 = *a1;
  *a1 = v32;
  a1[1] = v25;
  a1[2] = v33;
  if (v14)
    goto LABEL_54;
LABEL_55:
  a1[1] = v25;
  v35 = (unint64_t)a1[2];
  if ((unint64_t)v25 < v35)
  {
    *(_QWORD *)v25 = 0x9705908F280836EDLL;
    *((_QWORD *)v25 + 1) = "md::ls::SharedMaterialZIndexHandle]";
    *((_QWORD *)v25 + 2) = 34;
    v36 = v25 + 24;
    goto LABEL_73;
  }
  v37 = *a1;
  v38 = 0xAAAAAAAAAAAAAAABLL * ((v25 - *a1) >> 3);
  v39 = v38 + 1;
  if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_110;
  v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v37) >> 3);
  if (2 * v40 > v39)
    v39 = 2 * v40;
  if (v40 >= 0x555555555555555)
    v41 = 0xAAAAAAAAAAAAAAALL;
  else
    v41 = v39;
  if (v41)
  {
    if (v41 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_111;
    v42 = (char *)operator new(24 * v41);
  }
  else
  {
    v42 = 0;
  }
  v43 = &v42[24 * v38];
  v44 = &v42[24 * v41];
  *(_QWORD *)v43 = 0x9705908F280836EDLL;
  *((_QWORD *)v43 + 1) = "md::ls::SharedMaterialZIndexHandle]";
  *((_QWORD *)v43 + 2) = 34;
  v36 = v43 + 24;
  if (v25 == v37)
  {
    *a1 = v43;
    a1[1] = v36;
    a1[2] = v44;
LABEL_72:
    operator delete(v25);
    goto LABEL_73;
  }
  do
  {
    v45 = *(_OWORD *)(v25 - 24);
    *((_QWORD *)v43 - 1) = *((_QWORD *)v25 - 1);
    *(_OWORD *)(v43 - 24) = v45;
    v43 -= 24;
    v25 -= 24;
  }
  while (v25 != v37);
  v25 = *a1;
  *a1 = v43;
  a1[1] = v36;
  a1[2] = v44;
  if (v25)
    goto LABEL_72;
LABEL_73:
  a1[1] = v36;
  v46 = (unint64_t)a1[2];
  if ((unint64_t)v36 < v46)
  {
    *(_QWORD *)v36 = 0x3EB2A2A09E298E0ELL;
    *((_QWORD *)v36 + 1) = "md::ls::IntendedStandardPassShadow]";
    *((_QWORD *)v36 + 2) = 34;
    v47 = v36 + 24;
    goto LABEL_91;
  }
  v48 = *a1;
  v49 = 0xAAAAAAAAAAAAAAABLL * ((v36 - *a1) >> 3);
  v50 = v49 + 1;
  if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_110;
  v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - (_QWORD)v48) >> 3);
  if (2 * v51 > v50)
    v50 = 2 * v51;
  if (v51 >= 0x555555555555555)
    v52 = 0xAAAAAAAAAAAAAAALL;
  else
    v52 = v50;
  if (v52)
  {
    if (v52 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_111;
    v53 = (char *)operator new(24 * v52);
  }
  else
  {
    v53 = 0;
  }
  v54 = &v53[24 * v49];
  v55 = &v53[24 * v52];
  *(_QWORD *)v54 = 0x3EB2A2A09E298E0ELL;
  *((_QWORD *)v54 + 1) = "md::ls::IntendedStandardPassShadow]";
  *((_QWORD *)v54 + 2) = 34;
  v47 = v54 + 24;
  if (v36 == v48)
  {
    *a1 = v54;
    a1[1] = v47;
    a1[2] = v55;
LABEL_90:
    operator delete(v36);
    goto LABEL_91;
  }
  do
  {
    v56 = *(_OWORD *)(v36 - 24);
    *((_QWORD *)v54 - 1) = *((_QWORD *)v36 - 1);
    *(_OWORD *)(v54 - 24) = v56;
    v54 -= 24;
    v36 -= 24;
  }
  while (v36 != v48);
  v36 = *a1;
  *a1 = v54;
  a1[1] = v47;
  a1[2] = v55;
  if (v36)
    goto LABEL_90;
LABEL_91:
  a1[1] = v47;
  v57 = (unint64_t)a1[2];
  if ((unint64_t)v47 < v57)
  {
    *(_QWORD *)v47 = 0xE7D1C5E790E8E07;
    *((_QWORD *)v47 + 1) = "md::ls::IntendedStandardPassSceneDepth]";
    *((_QWORD *)v47 + 2) = 38;
    v58 = v47 + 24;
    goto LABEL_109;
  }
  v59 = *a1;
  v60 = 0xAAAAAAAAAAAAAAABLL * ((v47 - *a1) >> 3);
  v61 = v60 + 1;
  if (v60 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_110:
    abort();
  v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - (_QWORD)v59) >> 3);
  if (2 * v62 > v61)
    v61 = 2 * v62;
  if (v62 >= 0x555555555555555)
    v63 = 0xAAAAAAAAAAAAAAALL;
  else
    v63 = v61;
  if (v63)
  {
    if (v63 <= 0xAAAAAAAAAAAAAAALL)
    {
      v64 = (char *)operator new(24 * v63);
      goto LABEL_103;
    }
LABEL_111:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v64 = 0;
LABEL_103:
  v65 = &v64[24 * v60];
  v66 = &v64[24 * v63];
  *(_QWORD *)v65 = 0xE7D1C5E790E8E07;
  *((_QWORD *)v65 + 1) = "md::ls::IntendedStandardPassSceneDepth]";
  *((_QWORD *)v65 + 2) = 38;
  v58 = v65 + 24;
  if (v47 == v59)
  {
    *a1 = v65;
    a1[1] = v58;
    a1[2] = v66;
LABEL_108:
    operator delete(v47);
    goto LABEL_109;
  }
  do
  {
    v67 = *(_OWORD *)(v47 - 24);
    *((_QWORD *)v65 - 1) = *((_QWORD *)v47 - 1);
    *(_OWORD *)(v65 - 24) = v67;
    v65 -= 24;
    v47 -= 24;
  }
  while (v47 != v59);
  v47 = *a1;
  *a1 = v65;
  a1[1] = v58;
  a1[2] = v66;
  if (v47)
    goto LABEL_108;
LABEL_109:
  a1[1] = v58;
}

void sub_19F6EE2B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRenderOrder>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRenderOrder>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRenderOrder>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRenderOrder>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42761B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRenderOrder>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRenderOrder>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42761B0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRenderOrder>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRenderOrder>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275718;
  v4[1] = a2;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E42749F8;
  v5[1] = a2;
  v6 = (_QWORD *)operator new();
  *v6 = &off_1E4274A28;
  v6[1] = a2;
  v7 = (_QWORD *)operator new();
  *v7 = &off_1E4274B78;
  v7[1] = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E4274BA8;
  v8[1] = a2;
  v28 = 0;
  v9 = **(_QWORD **)(a1 + 8);
  v10 = *(_QWORD **)v9;
  v11 = *(_QWORD **)(v9 + 8);
  if (v10 != v11)
  {
    while (*v10 != 0x4EDAD23DFB014132)
    {
      v10 += 5;
      if (v10 == v11)
        goto LABEL_12;
    }
  }
  if (v10 == v11)
  {
LABEL_12:
    v13 = 0;
  }
  else
  {
    v13 = v10[3];
    v12 = (std::__shared_weak_count *)v10[4];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  v28 = v13;
  v29[0] = &off_1E427B268;
  v30 = v29;
  (*(void (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v29);
  v17 = v30;
  if (v30 == v29)
  {
    v18 = 4;
    v17 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_18;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_18:
  v29[0] = &off_1E427B2B0;
  v30 = v29;
  (*(void (**)(_QWORD *, _QWORD *))(*v5 + 16))(v5, v29);
  v19 = v30;
  if (v30 == v29)
  {
    v20 = 4;
    v19 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_23;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_23:
  v29[0] = &off_1E427B2F8;
  v29[1] = &v28;
  v30 = v29;
  (*(void (**)(_QWORD *, _QWORD *))(*v6 + 16))(v6, v29);
  v21 = v30;
  if (v30 == v29)
  {
    v22 = 4;
    v21 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_28;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_28:
  v29[0] = &off_1E427B340;
  v30 = v29;
  (*(void (**)(_QWORD *, _QWORD *))(*v7 + 16))(v7, v29);
  v23 = v30;
  if (v30 == v29)
  {
    v24 = 4;
    v23 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_33;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_33:
  v29[0] = &off_1E427B388;
  v30 = v29;
  (*(void (**)(_QWORD *, _QWORD *))(*v8 + 16))(v8, v29);
  v25 = v30;
  if (v30 == v29)
  {
    v26 = 4;
    v25 = v29;
    goto LABEL_37;
  }
  if (v30)
  {
    v26 = 5;
LABEL_37:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F6EE70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a13;
  if (a13 == v18)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void sub_19F6EE7A4()
{
  JUMPOUT(0x19F6EE75CLL);
}

void sub_19F6EE7AC()
{
  JUMPOUT(0x19F6EE76CLL);
}

void sub_19F6EE7B4()
{
  JUMPOUT(0x19F6EE77CLL);
}

void sub_19F6EE7BC()
{
  JUMPOUT(0x19F6EE78CLL);
}

void ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  unint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v95[6];
  unint64_t *v96;
  uint64_t v97[4];

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::RenderItemID>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::RenderableHash>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::IntendedStandardPassSceneDepth>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::RenderOrderToUse>(v2);
  v97[0] = (uint64_t)v3;
  v97[1] = (uint64_t)v4;
  v97[2] = (uint64_t)v5;
  v97[3] = (uint64_t)v6;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v95, v97);
  v7 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7])
    v7 = v4 + 4;
  if (v5[8] - v5[7] < v7[4] - v7[3])
    v7 = v5 + 4;
  if (v6[8] - v6[7] < v7[4] - v7[3])
    v7 = v6 + 4;
  v8 = (unint64_t *)v7[4];
  v9 = v96;
  if (v8 == v96)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v10 = (_QWORD *)result;
LABEL_97:
    *v10 = 0xFFFFFFFF00000000;
  }
  else
  {
    v10 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v11 = v95[0];
    v12 = (_QWORD *)v95[1];
    v13 = (_QWORD *)v95[2];
    v92 = (_QWORD *)v95[4];
    v93 = (_QWORD *)v95[3];
    while (1)
    {
      *v10 = *v9;
      v15 = *v9;
      v16 = HIDWORD(*v9);
      v17 = *v9 >> 39;
      v18 = v3[4];
      if (v17 >= (v3[5] - v18) >> 3)
        goto LABEL_19;
      v19 = *(_QWORD *)(v18 + 8 * v17);
      if (!v19)
        goto LABEL_19;
      v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F));
      v22 = v3[7];
      v21 = v3[8];
      if (v20 >= (v21 - v22) >> 3)
        goto LABEL_19;
      v23 = v22 + 8 * v20;
      if (v23 != v21 && *(_DWORD *)(v23 + 4) == (_DWORD)v16)
      {
        v25 = v3[11];
        v26 = v3[10] + 24 * v20;
      }
      else
      {
LABEL_19:
        v25 = v3[11];
        v26 = v25;
      }
      v27 = v26 == v25 ? 0 : v26;
      if ((v28 = v4[4], v17 < (v4[5] - v28) >> 3)
        && (v29 = *(_QWORD *)(v28 + 8 * v17)) != 0
        && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            v32 = v4[7],
            v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == (_DWORD)v16) : (v34 = 0), v34))
      {
        v35 = v4[11];
        v36 = v4[10] + 8 * v30;
      }
      else
      {
        v35 = v4[11];
        v36 = v35;
      }
      v37 = v36 == v35 ? 0 : v36;
      if ((v38 = v5[4], v17 < (v5[5] - v38) >> 3)
        && (v39 = *(_QWORD *)(v38 + 8 * v17)) != 0
        && (v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            v42 = v5[7],
            v41 = v5[8],
            v40 < (v41 - v42) >> 3)
        && ((v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == (_DWORD)v16) : (v44 = 0), v44))
      {
        v45 = v5[11];
        v46 = v5[10] + v40;
      }
      else
      {
        v45 = v5[11];
        v46 = v45;
      }
      v47 = v46 == v45 ? 0 : v46;
      if ((v48 = v6[4], v17 < (v6[5] - v48) >> 3)
        && (v49 = *(_QWORD *)(v48 + 8 * v17)) != 0
        && (v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            v52 = v6[7],
            v51 = v6[8],
            v50 < (v51 - v52) >> 3)
        && ((v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == (_DWORD)v16) : (v54 = 0), v54))
      {
        v55 = v6[11];
        v56 = v6[10] + 8 * v50;
      }
      else
      {
        v55 = v6[11];
        v56 = v55;
      }
      v57 = *(_QWORD *)(a2 + 24);
      if (!v57)
        break;
      if (v56 == v55)
        v58 = 0;
      else
        v58 = v56;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v57 + 48))(v57, v27, v37, v47, v58);
      v60 = *(unint64_t **)(v11 + 32);
      v14 = v9 + 1;
      v96 = v9 + 1;
      if (v9 + 1 != v60)
      {
        v61 = v12[4];
        while (1)
        {
          v62 = *((unsigned int *)v14 + 1);
          v63 = v62 >> 7;
          if (v62 >> 7 < (v12[5] - v61) >> 3)
          {
            v64 = *(_QWORD *)(v61 + 8 * v63);
            if (v64)
            {
              v65 = v62 & 0x7F;
              v66 = *(unsigned __int16 *)(v64 + 2 * v65);
              v68 = v12[7];
              v67 = v12[8];
              result = v67 - v68;
              if (v66 < (v67 - v68) >> 3)
              {
                v69 = v68 + 8 * v66;
                if (v69 != v67 && *(_DWORD *)(v69 + 4) == (_DWORD)v62)
                {
                  v71 = v13[4];
                  if (v63 < (v13[5] - v71) >> 3)
                  {
                    v72 = *(_QWORD *)(v71 + 8 * v63);
                    if (v72)
                    {
                      v73 = *(unsigned __int16 *)(v72 + 2 * v65);
                      v75 = v13[7];
                      v74 = v13[8];
                      result = v74 - v75;
                      if (v73 < (v74 - v75) >> 3)
                      {
                        v76 = v75 + 8 * v73;
                        if (v76 != v74 && *(_DWORD *)(v76 + 4) == (_DWORD)v62)
                        {
                          v78 = v93[4];
                          if (v63 < (v93[5] - v78) >> 3)
                          {
                            v79 = *(_QWORD *)(v78 + 8 * v63);
                            if (v79)
                            {
                              v80 = *(unsigned __int16 *)(v79 + 2 * v65);
                              v82 = v93[7];
                              v81 = v93[8];
                              result = v81 - v82;
                              if (v80 < (v81 - v82) >> 3)
                              {
                                v83 = v82 + 8 * v80;
                                if (v83 != v81 && *(_DWORD *)(v83 + 4) == (_DWORD)v62)
                                {
                                  v85 = v92[4];
                                  if (v63 < (v92[5] - v85) >> 3)
                                  {
                                    v86 = *(_QWORD *)(v85 + 8 * v63);
                                    if (v86)
                                    {
                                      v87 = *(unsigned __int16 *)(v86 + 2 * v65);
                                      v89 = v92[7];
                                      v88 = v92[8];
                                      if (v87 < (v88 - v89) >> 3)
                                      {
                                        v90 = v89 + 8 * v87;
                                        if (*(_DWORD *)(v90 + 4) == (_DWORD)v62 && v90 != v88)
                                          break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v60)
          {
            v14 = v60;
            goto LABEL_10;
          }
        }
        v60 = v14;
LABEL_10:
        v96 = v14;
      }
      v9 = v60;
      if (v8 == v60)
        goto LABEL_97;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[4];
  uint64_t v9[7];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::RenderItemID>(v1);
  v3 = gdc::Registry::storage<md::ls::RenderableHash>(v1);
  v4 = gdc::Registry::storage<md::ls::IntendedStandardPassSceneDepth>(v1);
  v5 = gdc::Registry::storage<md::ls::RenderOrderToUse>(v1);
  v8[0] = v2;
  v8[1] = v3;
  v8[2] = v4;
  v8[3] = v5;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v9, v8);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v6 = v2;
  else
    v6 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v6 = v4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v6 = v5;
  return *(_QWORD *)(v6 + 64) == v9[6];
}

uint64_t gdc::Registry::storage<md::ls::RenderableHash>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x763953A644184BA9;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x763953A644184BA9;
      if (*(_QWORD *)&v3 <= 0x763953A644184BA9uLL)
        v5 = 0x763953A644184BA9uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x763953A644184BA9;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x763953A644184BA9)
            {
              if (v7[2] == 0x763953A644184BA9)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x763953A644184BA9)
          {
            if (v7[2] == 0x763953A644184BA9)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RenderableHash]";
  *(_QWORD *)(v11 + 24) = 22;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271808;
  *(_QWORD *)(v11 + 8) = 0x763953A644184BA9;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x763953A644184BA9uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x763953A644184BA9;
  v15[1] = "md::ls::RenderableHash]";
  v15[2] = 22;
  gdc::Registry::_registerStorageDataSignals(a1, 0x763953A644184BA9, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6EEEF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RenderableHash>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderableHash>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(v15 - 8);
  a1[11] = v15 - 8;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RenderableHash>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderableHash>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  unint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v95[6];
  unint64_t *v96;
  uint64_t v97[4];

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::RenderItemID>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::RenderableHash>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::IntendedStandardPassShadow>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::RenderOrderToUse>(v2);
  v97[0] = (uint64_t)v3;
  v97[1] = (uint64_t)v4;
  v97[2] = (uint64_t)v5;
  v97[3] = (uint64_t)v6;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v95, v97);
  v7 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7])
    v7 = v4 + 4;
  if (v5[8] - v5[7] < v7[4] - v7[3])
    v7 = v5 + 4;
  if (v6[8] - v6[7] < v7[4] - v7[3])
    v7 = v6 + 4;
  v8 = (unint64_t *)v7[4];
  v9 = v96;
  if (v8 == v96)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v10 = (_QWORD *)result;
LABEL_97:
    *v10 = 0xFFFFFFFF00000000;
  }
  else
  {
    v10 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v11 = v95[0];
    v12 = (_QWORD *)v95[1];
    v13 = (_QWORD *)v95[2];
    v92 = (_QWORD *)v95[4];
    v93 = (_QWORD *)v95[3];
    while (1)
    {
      *v10 = *v9;
      v15 = *v9;
      v16 = HIDWORD(*v9);
      v17 = *v9 >> 39;
      v18 = v3[4];
      if (v17 >= (v3[5] - v18) >> 3)
        goto LABEL_19;
      v19 = *(_QWORD *)(v18 + 8 * v17);
      if (!v19)
        goto LABEL_19;
      v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F));
      v22 = v3[7];
      v21 = v3[8];
      if (v20 >= (v21 - v22) >> 3)
        goto LABEL_19;
      v23 = v22 + 8 * v20;
      if (v23 != v21 && *(_DWORD *)(v23 + 4) == (_DWORD)v16)
      {
        v25 = v3[11];
        v26 = v3[10] + 24 * v20;
      }
      else
      {
LABEL_19:
        v25 = v3[11];
        v26 = v25;
      }
      v27 = v26 == v25 ? 0 : v26;
      if ((v28 = v4[4], v17 < (v4[5] - v28) >> 3)
        && (v29 = *(_QWORD *)(v28 + 8 * v17)) != 0
        && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            v32 = v4[7],
            v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == (_DWORD)v16) : (v34 = 0), v34))
      {
        v35 = v4[11];
        v36 = v4[10] + 8 * v30;
      }
      else
      {
        v35 = v4[11];
        v36 = v35;
      }
      v37 = v36 == v35 ? 0 : v36;
      if ((v38 = v5[4], v17 < (v5[5] - v38) >> 3)
        && (v39 = *(_QWORD *)(v38 + 8 * v17)) != 0
        && (v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            v42 = v5[7],
            v41 = v5[8],
            v40 < (v41 - v42) >> 3)
        && ((v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == (_DWORD)v16) : (v44 = 0), v44))
      {
        v45 = v5[11];
        v46 = v5[10] + v40;
      }
      else
      {
        v45 = v5[11];
        v46 = v45;
      }
      v47 = v46 == v45 ? 0 : v46;
      if ((v48 = v6[4], v17 < (v6[5] - v48) >> 3)
        && (v49 = *(_QWORD *)(v48 + 8 * v17)) != 0
        && (v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            v52 = v6[7],
            v51 = v6[8],
            v50 < (v51 - v52) >> 3)
        && ((v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == (_DWORD)v16) : (v54 = 0), v54))
      {
        v55 = v6[11];
        v56 = v6[10] + 8 * v50;
      }
      else
      {
        v55 = v6[11];
        v56 = v55;
      }
      v57 = *(_QWORD *)(a2 + 24);
      if (!v57)
        break;
      if (v56 == v55)
        v58 = 0;
      else
        v58 = v56;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v57 + 48))(v57, v27, v37, v47, v58);
      v60 = *(unint64_t **)(v11 + 32);
      v14 = v9 + 1;
      v96 = v9 + 1;
      if (v9 + 1 != v60)
      {
        v61 = v12[4];
        while (1)
        {
          v62 = *((unsigned int *)v14 + 1);
          v63 = v62 >> 7;
          if (v62 >> 7 < (v12[5] - v61) >> 3)
          {
            v64 = *(_QWORD *)(v61 + 8 * v63);
            if (v64)
            {
              v65 = v62 & 0x7F;
              v66 = *(unsigned __int16 *)(v64 + 2 * v65);
              v68 = v12[7];
              v67 = v12[8];
              result = v67 - v68;
              if (v66 < (v67 - v68) >> 3)
              {
                v69 = v68 + 8 * v66;
                if (v69 != v67 && *(_DWORD *)(v69 + 4) == (_DWORD)v62)
                {
                  v71 = v13[4];
                  if (v63 < (v13[5] - v71) >> 3)
                  {
                    v72 = *(_QWORD *)(v71 + 8 * v63);
                    if (v72)
                    {
                      v73 = *(unsigned __int16 *)(v72 + 2 * v65);
                      v75 = v13[7];
                      v74 = v13[8];
                      result = v74 - v75;
                      if (v73 < (v74 - v75) >> 3)
                      {
                        v76 = v75 + 8 * v73;
                        if (v76 != v74 && *(_DWORD *)(v76 + 4) == (_DWORD)v62)
                        {
                          v78 = v93[4];
                          if (v63 < (v93[5] - v78) >> 3)
                          {
                            v79 = *(_QWORD *)(v78 + 8 * v63);
                            if (v79)
                            {
                              v80 = *(unsigned __int16 *)(v79 + 2 * v65);
                              v82 = v93[7];
                              v81 = v93[8];
                              result = v81 - v82;
                              if (v80 < (v81 - v82) >> 3)
                              {
                                v83 = v82 + 8 * v80;
                                if (v83 != v81 && *(_DWORD *)(v83 + 4) == (_DWORD)v62)
                                {
                                  v85 = v92[4];
                                  if (v63 < (v92[5] - v85) >> 3)
                                  {
                                    v86 = *(_QWORD *)(v85 + 8 * v63);
                                    if (v86)
                                    {
                                      v87 = *(unsigned __int16 *)(v86 + 2 * v65);
                                      v89 = v92[7];
                                      v88 = v92[8];
                                      if (v87 < (v88 - v89) >> 3)
                                      {
                                        v90 = v89 + 8 * v87;
                                        if (*(_DWORD *)(v90 + 4) == (_DWORD)v62 && v90 != v88)
                                          break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v60)
          {
            v14 = v60;
            goto LABEL_10;
          }
        }
        v60 = v14;
LABEL_10:
        v96 = v14;
      }
      v9 = v60;
      if (v8 == v60)
        goto LABEL_97;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[4];
  uint64_t v9[7];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::RenderItemID>(v1);
  v3 = gdc::Registry::storage<md::ls::RenderableHash>(v1);
  v4 = gdc::Registry::storage<md::ls::IntendedStandardPassShadow>(v1);
  v5 = gdc::Registry::storage<md::ls::RenderOrderToUse>(v1);
  v8[0] = v2;
  v8[1] = v3;
  v8[2] = v4;
  v8[3] = v5;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v9, v8);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v6 = v2;
  else
    v6 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v6 = v4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v6 = v5;
  return *(_QWORD *)(v6 + 64) == v9[6];
}

void ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t result;
  unint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  unint64_t *v120;
  uint64_t v122[7];
  unint64_t *v123;
  uint64_t v124[6];
  unint64_t v125;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::IsMaterial>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::RenderItemID>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::SharedMaterialZIndexHandle>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::RenderableHash>(v2);
  v7 = (_QWORD *)gdc::Registry::storage<md::ls::IsOpaque>(v2);
  v8 = (_QWORD *)gdc::Registry::storage<md::ls::RenderOrderToUse>(v2);
  v124[0] = (uint64_t)v3;
  v124[1] = (uint64_t)v4;
  v124[2] = (uint64_t)v5;
  v124[3] = (uint64_t)v6;
  v124[4] = (uint64_t)v7;
  v124[5] = (uint64_t)v8;
  gdc::RegistryQueryView<gdc::All<md::ls::IsMaterial const,md::ls::RenderItemID const,md::ls::SharedMaterialZIndexHandle const,md::ls::RenderableHash const,md::ls::RenderOrderToUse>,gdc::Any<md::ls::IsOpaque const>,gdc::None<>>::begin(v122, v124);
  v9 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7])
    v9 = v4 + 4;
  if (v5[8] - v5[7] < v9[4] - v9[3])
    v9 = v5 + 4;
  if (v6[8] - v6[7] < v9[4] - v9[3])
    v9 = v6 + 4;
  if (v8[8] - v8[7] < v9[4] - v9[3])
    v9 = v8 + 4;
  v10 = v123;
  v120 = (unint64_t *)v9[4];
  if (v120 == v123)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v11 = (_QWORD *)result;
LABEL_125:
    *v11 = 0xFFFFFFFF00000000;
  }
  else
  {
    v11 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v12 = (_QWORD *)v122[1];
    v13 = (_QWORD *)v122[2];
    v118 = (_QWORD *)v122[3];
    v119 = v122[0];
    v116 = (_QWORD *)v122[5];
    v117 = (_QWORD *)v122[4];
    while (1)
    {
      *v11 = *v10;
      v15 = *v10;
      v16 = HIDWORD(*v10);
      v17 = *v10 >> 39;
      v18 = v3[4];
      if (v17 < (v3[5] - v18) >> 3
        && (v19 = *(_QWORD *)(v18 + 8 * v17)) != 0
        && (v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            v22 = v3[7],
            v21 = v3[8],
            v20 < (v21 - v22) >> 3)
        && ((v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == (_DWORD)v16) : (v24 = 0), v24))
      {
        v25 = v3[11];
        v26 = v3[10] + 8 * v20;
      }
      else
      {
        v25 = v3[11];
        v26 = v25;
      }
      if (v26 == v25)
        v27 = 0;
      else
        v27 = v26;
      v28 = v4[4];
      if (v17 < (v4[5] - v28) >> 3
        && (v29 = *(_QWORD *)(v28 + 8 * v17)) != 0
        && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            v32 = v4[7],
            v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == (_DWORD)v16) : (v34 = 0), v34))
      {
        v35 = v4[11];
        v36 = v4[10] + 24 * v30;
      }
      else
      {
        v35 = v4[11];
        v36 = v35;
      }
      if (v36 == v35)
        v37 = 0;
      else
        v37 = v36;
      v38 = v5[4];
      if (v17 < (v5[5] - v38) >> 3
        && (v39 = *(_QWORD *)(v38 + 8 * v17)) != 0
        && (v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            v42 = v5[7],
            v41 = v5[8],
            v40 < (v41 - v42) >> 3)
        && ((v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == (_DWORD)v16) : (v44 = 0), v44))
      {
        v45 = v5[11];
        v46 = v5[10] + 8 * v40;
      }
      else
      {
        v45 = v5[11];
        v46 = v45;
      }
      if (v46 == v45)
        v47 = 0;
      else
        v47 = v46;
      v48 = v7[4];
      if (v17 < (v7[5] - v48) >> 3
        && (v49 = *(_QWORD *)(v48 + 8 * v17)) != 0
        && (v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            v52 = v7[7],
            v51 = v7[8],
            v50 < (v51 - v52) >> 3)
        && ((v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == (_DWORD)v16) : (v54 = 0), v54))
      {
        v55 = v7[11];
        v56 = v7[10] + v50;
      }
      else
      {
        v55 = v7[11];
        v56 = v55;
      }
      if (v56 == v55)
        v56 = 0;
      if ((v57 = v6[4], v17 < (v6[5] - v57) >> 3)
        && (v58 = *(_QWORD *)(v57 + 8 * v17)) != 0
        && (v59 = *(unsigned __int16 *)(v58 + 2 * (HIDWORD(v15) & 0x7F)),
            v61 = v6[7],
            v60 = v6[8],
            v59 < (v60 - v61) >> 3)
        && ((v62 = v61 + 8 * v59, v62 != v60) ? (v63 = *(_DWORD *)(v62 + 4) == (_DWORD)v16) : (v63 = 0), v63))
      {
        v64 = v6[11];
        v65 = v6[10] + 8 * v59;
      }
      else
      {
        v64 = v6[11];
        v65 = v64;
      }
      v66 = v65 == v64 ? 0 : v65;
      if ((v67 = v8[4], v17 < (v8[5] - v67) >> 3)
        && (v68 = *(_QWORD *)(v67 + 8 * v17)) != 0
        && (v69 = *(unsigned __int16 *)(v68 + 2 * (HIDWORD(v15) & 0x7F)),
            v71 = v8[7],
            v70 = v8[8],
            v69 < (v70 - v71) >> 3)
        && ((v72 = v71 + 8 * v69, v72 != v70) ? (v73 = *(_DWORD *)(v72 + 4) == (_DWORD)v16) : (v73 = 0), v73))
      {
        v74 = v8[11];
        v75 = v8[10] + 8 * v69;
      }
      else
      {
        v74 = v8[11];
        v75 = v74;
      }
      v125 = v56;
      v76 = *(_QWORD *)(a2 + 24);
      if (!v76)
        break;
      if (v75 == v74)
        v77 = 0;
      else
        v77 = v75;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v76 + 48))(v76, v27, v37, v47, &v125, v66, v77);
      v79 = *(unint64_t **)(v119 + 32);
      v14 = v10 + 1;
      v123 = v10 + 1;
      if (v10 + 1 != v79)
      {
        v80 = v12[4];
        while (1)
        {
          v81 = *((unsigned int *)v14 + 1);
          v82 = v81 >> 7;
          if (v81 >> 7 < (v12[5] - v80) >> 3)
          {
            v83 = *(_QWORD *)(v80 + 8 * v82);
            if (v83)
            {
              v84 = v81 & 0x7F;
              v85 = *(unsigned __int16 *)(v83 + 2 * v84);
              v87 = v12[7];
              v86 = v12[8];
              result = v86 - v87;
              if (v85 < (v86 - v87) >> 3)
              {
                v88 = v87 + 8 * v85;
                if (v88 != v86 && *(_DWORD *)(v88 + 4) == (_DWORD)v81)
                {
                  v90 = v13[4];
                  if (v82 < (v13[5] - v90) >> 3)
                  {
                    v91 = *(_QWORD *)(v90 + 8 * v82);
                    if (v91)
                    {
                      v92 = *(unsigned __int16 *)(v91 + 2 * v84);
                      v94 = v13[7];
                      v93 = v13[8];
                      result = v93 - v94;
                      if (v92 < (v93 - v94) >> 3)
                      {
                        v95 = v94 + 8 * v92;
                        if (v95 != v93 && *(_DWORD *)(v95 + 4) == (_DWORD)v81)
                        {
                          v97 = v118[4];
                          if (v82 < (v118[5] - v97) >> 3)
                          {
                            v98 = *(_QWORD *)(v97 + 8 * v82);
                            if (v98)
                            {
                              v99 = *(unsigned __int16 *)(v98 + 2 * v84);
                              v101 = v118[7];
                              v100 = v118[8];
                              result = v100 - v101;
                              if (v99 < (v100 - v101) >> 3)
                              {
                                v102 = v101 + 8 * v99;
                                if (v102 != v100 && *(_DWORD *)(v102 + 4) == (_DWORD)v81)
                                {
                                  v104 = v117[4];
                                  if (v82 < (v117[5] - v104) >> 3)
                                  {
                                    v105 = *(_QWORD *)(v104 + 8 * v82);
                                    if (v105)
                                    {
                                      v106 = *(unsigned __int16 *)(v105 + 2 * v84);
                                      v108 = v117[7];
                                      v107 = v117[8];
                                      result = v107 - v108;
                                      if (v106 < (v107 - v108) >> 3)
                                      {
                                        v109 = v108 + 8 * v106;
                                        if (v109 != v107 && *(_DWORD *)(v109 + 4) == (_DWORD)v81)
                                        {
                                          v110 = v116[4];
                                          if (v82 < (v116[5] - v110) >> 3)
                                          {
                                            v111 = *(_QWORD *)(v110 + 8 * v82);
                                            if (v111)
                                            {
                                              v112 = *(unsigned __int16 *)(v111 + 2 * v84);
                                              v114 = v116[7];
                                              v113 = v116[8];
                                              if (v112 < (v113 - v114) >> 3)
                                              {
                                                v115 = v114 + 8 * v112;
                                                if (*(_DWORD *)(v115 + 4) == (_DWORD)v81 && v115 != v113)
                                                  break;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v79)
          {
            v14 = v79;
            goto LABEL_12;
          }
        }
        v79 = v14;
LABEL_12:
        v123 = v14;
      }
      v10 = v79;
      if (v120 == v79)
        goto LABEL_125;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10[6];
  uint64_t v11[8];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::IsMaterial>(v1);
  v3 = gdc::Registry::storage<md::ls::RenderItemID>(v1);
  v4 = gdc::Registry::storage<md::ls::SharedMaterialZIndexHandle>(v1);
  v5 = gdc::Registry::storage<md::ls::RenderableHash>(v1);
  v6 = gdc::Registry::storage<md::ls::IsOpaque>(v1);
  v7 = gdc::Registry::storage<md::ls::RenderOrderToUse>(v1);
  v10[0] = v2;
  v10[1] = v3;
  v10[2] = v4;
  v10[3] = v5;
  v10[4] = v6;
  v10[5] = v7;
  gdc::RegistryQueryView<gdc::All<md::ls::IsMaterial const,md::ls::RenderItemID const,md::ls::SharedMaterialZIndexHandle const,md::ls::RenderableHash const,md::ls::RenderOrderToUse>,gdc::Any<md::ls::IsOpaque const>,gdc::None<>>::begin(v11, v10);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v8 = v2;
  else
    v8 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56))
    v8 = v4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56))
    v8 = v5;
  if (*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56) < *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56))
    v8 = v7;
  return *(_QWORD *)(v8 + 64) == v11[7];
}

uint64_t gdc::Registry::storage<md::ls::SharedMaterialZIndexHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x9705908F280836EDLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x9705908F280836EDLL;
      if (*(_QWORD *)&v3 <= 0x9705908F280836EDLL)
        v5 = 0x9705908F280836EDLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x9705908F280836EDLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x9705908F280836EDLL)
            {
              if (v7[2] == 0x9705908F280836EDLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x9705908F280836EDLL)
          {
            if (v7[2] == 0x9705908F280836EDLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::SharedMaterialZIndexHandle]";
  *(_QWORD *)(v11 + 24) = 34;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273248;
  *(_QWORD *)(v11 + 8) = 0x9705908F280836EDLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x9705908F280836EDLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x9705908F280836EDLL;
  v15[1] = "md::ls::SharedMaterialZIndexHandle]";
  v15[2] = 34;
  gdc::Registry::_registerStorageDataSignals(a1, 0x9705908F280836EDLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6EFE80(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::RegistryQueryView<gdc::All<md::ls::IsMaterial const,md::ls::RenderItemID const,md::ls::SharedMaterialZIndexHandle const,md::ls::RenderableHash const,md::ls::RenderOrderToUse>,gdc::Any<md::ls::IsOpaque const>,gdc::None<>>::begin(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[5];
  v8 = *a2 + 32;
  if (!*a2)
    v8 = 0;
  v9 = v4 + 32;
  if (!v4)
    v9 = 0;
  v10 = v5 + 32;
  if (!v5)
    v10 = 0;
  v11 = v6 + 32;
  if (!v6)
    v11 = 0;
  v12 = v7 + 32;
  if (!v7)
    v12 = 0;
  if (*(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24) < *(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24))
    v8 = v9;
  if (*(_QWORD *)(v10 + 32) - *(_QWORD *)(v10 + 24) < *(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24))
    v8 = v10;
  result = *(_QWORD *)(v8 + 24);
  if (*(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24) < (unint64_t)(*(_QWORD *)(v8 + 32) - result))
    v8 = v11;
  if (*(_QWORD *)(v12 + 32) - *(_QWORD *)(v12 + 24) < *(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24))
    v8 = v12;
  *a1 = v8;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  v15 = *(_QWORD *)(v8 + 24);
  v14 = *(_QWORD *)(v8 + 32);
  a1[7] = v15;
  if (v14 != v15)
  {
    result = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
    if ((result & 1) == 0)
    {
      v16 = v15 + 8;
      do
      {
        a1[7] = v16;
        if (v16 == v14)
          break;
        result = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
        v16 += 8;
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

void gdc::ComponentStorageWrapper<md::ls::SharedMaterialZIndexHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedMaterialZIndexHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SharedMaterialZIndexHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedMaterialZIndexHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t result;
  unint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  unint64_t *v120;
  uint64_t v122[7];
  unint64_t *v123;
  uint64_t v124[6];
  unint64_t v125;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::IsMaterial>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::RenderItemID>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::CustomZIndex>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::RenderableHash>(v2);
  v7 = (_QWORD *)gdc::Registry::storage<md::ls::IsOpaque>(v2);
  v8 = (_QWORD *)gdc::Registry::storage<md::ls::RenderOrderToUse>(v2);
  v124[0] = (uint64_t)v3;
  v124[1] = (uint64_t)v4;
  v124[2] = (uint64_t)v5;
  v124[3] = (uint64_t)v6;
  v124[4] = (uint64_t)v7;
  v124[5] = (uint64_t)v8;
  gdc::RegistryQueryView<gdc::All<md::ls::IsMaterial const,md::ls::RenderItemID const,md::ls::SharedMaterialZIndexHandle const,md::ls::RenderableHash const,md::ls::RenderOrderToUse>,gdc::Any<md::ls::IsOpaque const>,gdc::None<>>::begin(v122, v124);
  v9 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7])
    v9 = v4 + 4;
  if (v5[8] - v5[7] < v9[4] - v9[3])
    v9 = v5 + 4;
  if (v6[8] - v6[7] < v9[4] - v9[3])
    v9 = v6 + 4;
  if (v8[8] - v8[7] < v9[4] - v9[3])
    v9 = v8 + 4;
  v10 = v123;
  v120 = (unint64_t *)v9[4];
  if (v120 == v123)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v11 = (_QWORD *)result;
LABEL_125:
    *v11 = 0xFFFFFFFF00000000;
  }
  else
  {
    v11 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v12 = (_QWORD *)v122[1];
    v13 = (_QWORD *)v122[2];
    v118 = (_QWORD *)v122[3];
    v119 = v122[0];
    v116 = (_QWORD *)v122[5];
    v117 = (_QWORD *)v122[4];
    while (1)
    {
      *v11 = *v10;
      v15 = *v10;
      v16 = HIDWORD(*v10);
      v17 = *v10 >> 39;
      v18 = v3[4];
      if (v17 < (v3[5] - v18) >> 3
        && (v19 = *(_QWORD *)(v18 + 8 * v17)) != 0
        && (v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            v22 = v3[7],
            v21 = v3[8],
            v20 < (v21 - v22) >> 3)
        && ((v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == (_DWORD)v16) : (v24 = 0), v24))
      {
        v25 = v3[11];
        v26 = v3[10] + 8 * v20;
      }
      else
      {
        v25 = v3[11];
        v26 = v25;
      }
      if (v26 == v25)
        v27 = 0;
      else
        v27 = v26;
      v28 = v4[4];
      if (v17 < (v4[5] - v28) >> 3
        && (v29 = *(_QWORD *)(v28 + 8 * v17)) != 0
        && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            v32 = v4[7],
            v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == (_DWORD)v16) : (v34 = 0), v34))
      {
        v35 = v4[11];
        v36 = v4[10] + 24 * v30;
      }
      else
      {
        v35 = v4[11];
        v36 = v35;
      }
      if (v36 == v35)
        v37 = 0;
      else
        v37 = v36;
      v38 = v5[4];
      if (v17 < (v5[5] - v38) >> 3
        && (v39 = *(_QWORD *)(v38 + 8 * v17)) != 0
        && (v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            v42 = v5[7],
            v41 = v5[8],
            v40 < (v41 - v42) >> 3)
        && ((v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == (_DWORD)v16) : (v44 = 0), v44))
      {
        v45 = v5[11];
        v46 = v5[10] + 8 * v40;
      }
      else
      {
        v45 = v5[11];
        v46 = v45;
      }
      if (v46 == v45)
        v47 = 0;
      else
        v47 = v46;
      v48 = v7[4];
      if (v17 < (v7[5] - v48) >> 3
        && (v49 = *(_QWORD *)(v48 + 8 * v17)) != 0
        && (v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            v52 = v7[7],
            v51 = v7[8],
            v50 < (v51 - v52) >> 3)
        && ((v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == (_DWORD)v16) : (v54 = 0), v54))
      {
        v55 = v7[11];
        v56 = v7[10] + v50;
      }
      else
      {
        v55 = v7[11];
        v56 = v55;
      }
      if (v56 == v55)
        v56 = 0;
      if ((v57 = v6[4], v17 < (v6[5] - v57) >> 3)
        && (v58 = *(_QWORD *)(v57 + 8 * v17)) != 0
        && (v59 = *(unsigned __int16 *)(v58 + 2 * (HIDWORD(v15) & 0x7F)),
            v61 = v6[7],
            v60 = v6[8],
            v59 < (v60 - v61) >> 3)
        && ((v62 = v61 + 8 * v59, v62 != v60) ? (v63 = *(_DWORD *)(v62 + 4) == (_DWORD)v16) : (v63 = 0), v63))
      {
        v64 = v6[11];
        v65 = v6[10] + 8 * v59;
      }
      else
      {
        v64 = v6[11];
        v65 = v64;
      }
      v66 = v65 == v64 ? 0 : v65;
      if ((v67 = v8[4], v17 < (v8[5] - v67) >> 3)
        && (v68 = *(_QWORD *)(v67 + 8 * v17)) != 0
        && (v69 = *(unsigned __int16 *)(v68 + 2 * (HIDWORD(v15) & 0x7F)),
            v71 = v8[7],
            v70 = v8[8],
            v69 < (v70 - v71) >> 3)
        && ((v72 = v71 + 8 * v69, v72 != v70) ? (v73 = *(_DWORD *)(v72 + 4) == (_DWORD)v16) : (v73 = 0), v73))
      {
        v74 = v8[11];
        v75 = v8[10] + 8 * v69;
      }
      else
      {
        v74 = v8[11];
        v75 = v74;
      }
      v125 = v56;
      v76 = *(_QWORD *)(a2 + 24);
      if (!v76)
        break;
      if (v75 == v74)
        v77 = 0;
      else
        v77 = v75;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v76 + 48))(v76, v27, v37, v47, &v125, v66, v77);
      v79 = *(unint64_t **)(v119 + 32);
      v14 = v10 + 1;
      v123 = v10 + 1;
      if (v10 + 1 != v79)
      {
        v80 = v12[4];
        while (1)
        {
          v81 = *((unsigned int *)v14 + 1);
          v82 = v81 >> 7;
          if (v81 >> 7 < (v12[5] - v80) >> 3)
          {
            v83 = *(_QWORD *)(v80 + 8 * v82);
            if (v83)
            {
              v84 = v81 & 0x7F;
              v85 = *(unsigned __int16 *)(v83 + 2 * v84);
              v87 = v12[7];
              v86 = v12[8];
              result = v86 - v87;
              if (v85 < (v86 - v87) >> 3)
              {
                v88 = v87 + 8 * v85;
                if (v88 != v86 && *(_DWORD *)(v88 + 4) == (_DWORD)v81)
                {
                  v90 = v13[4];
                  if (v82 < (v13[5] - v90) >> 3)
                  {
                    v91 = *(_QWORD *)(v90 + 8 * v82);
                    if (v91)
                    {
                      v92 = *(unsigned __int16 *)(v91 + 2 * v84);
                      v94 = v13[7];
                      v93 = v13[8];
                      result = v93 - v94;
                      if (v92 < (v93 - v94) >> 3)
                      {
                        v95 = v94 + 8 * v92;
                        if (v95 != v93 && *(_DWORD *)(v95 + 4) == (_DWORD)v81)
                        {
                          v97 = v118[4];
                          if (v82 < (v118[5] - v97) >> 3)
                          {
                            v98 = *(_QWORD *)(v97 + 8 * v82);
                            if (v98)
                            {
                              v99 = *(unsigned __int16 *)(v98 + 2 * v84);
                              v101 = v118[7];
                              v100 = v118[8];
                              result = v100 - v101;
                              if (v99 < (v100 - v101) >> 3)
                              {
                                v102 = v101 + 8 * v99;
                                if (v102 != v100 && *(_DWORD *)(v102 + 4) == (_DWORD)v81)
                                {
                                  v104 = v117[4];
                                  if (v82 < (v117[5] - v104) >> 3)
                                  {
                                    v105 = *(_QWORD *)(v104 + 8 * v82);
                                    if (v105)
                                    {
                                      v106 = *(unsigned __int16 *)(v105 + 2 * v84);
                                      v108 = v117[7];
                                      v107 = v117[8];
                                      result = v107 - v108;
                                      if (v106 < (v107 - v108) >> 3)
                                      {
                                        v109 = v108 + 8 * v106;
                                        if (v109 != v107 && *(_DWORD *)(v109 + 4) == (_DWORD)v81)
                                        {
                                          v110 = v116[4];
                                          if (v82 < (v116[5] - v110) >> 3)
                                          {
                                            v111 = *(_QWORD *)(v110 + 8 * v82);
                                            if (v111)
                                            {
                                              v112 = *(unsigned __int16 *)(v111 + 2 * v84);
                                              v114 = v116[7];
                                              v113 = v116[8];
                                              if (v112 < (v113 - v114) >> 3)
                                              {
                                                v115 = v114 + 8 * v112;
                                                if (*(_DWORD *)(v115 + 4) == (_DWORD)v81 && v115 != v113)
                                                  break;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v79)
          {
            v14 = v79;
            goto LABEL_12;
          }
        }
        v79 = v14;
LABEL_12:
        v123 = v14;
      }
      v10 = v79;
      if (v120 == v79)
        goto LABEL_125;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10[6];
  uint64_t v11[8];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::IsMaterial>(v1);
  v3 = gdc::Registry::storage<md::ls::RenderItemID>(v1);
  v4 = gdc::Registry::storage<md::ls::CustomZIndex>(v1);
  v5 = gdc::Registry::storage<md::ls::RenderableHash>(v1);
  v6 = gdc::Registry::storage<md::ls::IsOpaque>(v1);
  v7 = gdc::Registry::storage<md::ls::RenderOrderToUse>(v1);
  v10[0] = v2;
  v10[1] = v3;
  v10[2] = v4;
  v10[3] = v5;
  v10[4] = v6;
  v10[5] = v7;
  gdc::RegistryQueryView<gdc::All<md::ls::IsMaterial const,md::ls::RenderItemID const,md::ls::SharedMaterialZIndexHandle const,md::ls::RenderableHash const,md::ls::RenderOrderToUse>,gdc::Any<md::ls::IsOpaque const>,gdc::None<>>::begin(v11, v10);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v8 = v2;
  else
    v8 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56))
    v8 = v4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56))
    v8 = v5;
  if (*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56) < *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56))
    v8 = v7;
  return *(_QWORD *)(v8 + 64) == v11[7];
}

uint64_t gdc::Registry::storage<md::ls::CustomZIndex>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x3EAAB620EAA88EC8;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x3EAAB620EAA88EC8;
      if (*(_QWORD *)&v3 <= 0x3EAAB620EAA88EC8uLL)
        v5 = 0x3EAAB620EAA88EC8uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x3EAAB620EAA88EC8;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x3EAAB620EAA88EC8)
            {
              if (v7[2] == 0x3EAAB620EAA88EC8)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x3EAAB620EAA88EC8)
          {
            if (v7[2] == 0x3EAAB620EAA88EC8)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::CustomZIndex]";
  *(_QWORD *)(v11 + 24) = 20;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271208;
  *(_QWORD *)(v11 + 8) = 0x3EAAB620EAA88EC8;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x3EAAB620EAA88EC8uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x3EAAB620EAA88EC8;
  v15[1] = "md::ls::CustomZIndex]";
  v15[2] = 20;
  gdc::Registry::_registerStorageDataSignals(a1, 0x3EAAB620EAA88EC8, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6F09FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::CustomZIndex>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::CustomZIndex>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(v15 - 8);
  a1[11] = v15 - 8;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::CustomZIndex>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::CustomZIndex>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL4 isValid;
  uint64_t (**v17)(_QWORD);
  uint64_t (*v18)(_QWORD);
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD v82[5];
  _QWORD *v83;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::IsDecal>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::RenderItemID>(v3);
  v6 = gdc::Registry::storage<md::ls::RenderOrderToUse>(v3);
  v10 = (_QWORD *)v6;
  v11 = v4 + 4;
  if (v5[8] - v5[7] < v4[8] - v4[7])
    v11 = v5 + 4;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) >= v11[4] - v11[3])
    v12 = (uint64_t)v11;
  else
    v12 = v6 + 32;
  v82[0] = v12;
  v82[1] = v4;
  v82[2] = v5;
  v82[3] = v6;
  v14 = *(_QWORD **)(v12 + 24);
  v13 = *(_QWORD **)(v12 + 32);
  v83 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82))
  {
    v15 = v14 + 1;
    do
    {
      v14 = v15;
      v83 = v15;
      if (v15 == v13)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82);
      v15 = v14 + 1;
    }
    while (!isValid);
  }
  v17 = &ecs2::Runtime::_localEntity;
  v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14)
    goto LABEL_82;
  v19 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v19 = *v14;
    v21 = *v14;
    v22 = HIDWORD(*v14);
    v23 = *v14 >> 39;
    v24 = v4[4];
    if (v23 >= (v4[5] - v24) >> 3)
      goto LABEL_23;
    v25 = *(_QWORD *)(v24 + 8 * v23);
    if (!v25)
      goto LABEL_23;
    v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    v28 = v4[7];
    v27 = v4[8];
    if (v26 >= (v27 - v28) >> 3)
      goto LABEL_23;
    v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == (_DWORD)v22)
    {
      v31 = v4[11];
      v32 = v4[10] + v26;
    }
    else
    {
LABEL_23:
      v31 = v4[11];
      v32 = v31;
    }
    v33 = v32 == v31 ? 0 : v32;
    if ((v34 = v5[4], v23 < (v5[5] - v34) >> 3)
      && (v35 = *(_QWORD *)(v34 + 8 * v23)) != 0
      && (v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v5[7], v37 = v5[8], v36 < (v37 - v38) >> 3)
      && ((v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == (_DWORD)v22) : (v40 = 0), v40))
    {
      v41 = v5[11];
      v42 = v5[10] + 24 * v36;
    }
    else
    {
      v41 = v5[11];
      v42 = v41;
    }
    v43 = v42 == v41 ? 0 : v42;
    v44 = v10[4];
    if (v23 < (v10[5] - v44) >> 3)
    {
      v45 = *(_QWORD *)(v44 + 8 * v23);
      if (v45)
      {
        v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        v48 = v10[7];
        v47 = v10[8];
        if (v46 < (v47 - v48) >> 3)
        {
          v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == (_DWORD)v22)
            break;
        }
      }
    }
    v51 = v10[11];
    v52 = v51;
    v53 = *(_QWORD *)(a2 + 24);
    if (!v53)
      goto LABEL_81;
LABEL_46:
    if (v52 == v51)
      v54 = 0;
    else
      v54 = v52;
    result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 48))(v53, v33, v43, v54);
    v56 = *(_QWORD **)(v12 + 32);
    v20 = v14 + 1;
    v83 = v14 + 1;
    if (v14 + 1 != v56)
    {
      v57 = v4[4];
      v59 = v4[7];
      v58 = v4[8];
      v60 = v5[4];
      result = v5[7];
      v61 = v5[8];
      v62 = v10[4];
      v64 = v10[7];
      v63 = v10[8];
      while (1)
      {
        v65 = *((unsigned int *)v20 + 1);
        v66 = v65 >> 7;
        if (v65 >> 7 < (v4[5] - v57) >> 3)
        {
          v67 = *(_QWORD *)(v57 + 8 * v66);
          if (v67)
          {
            v68 = v65 & 0x7F;
            v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              v70 = v59 + 8 * v69;
              v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == (_DWORD)v65;
              if (v71 && v66 < (v5[5] - v60) >> 3)
              {
                v73 = *(_QWORD *)(v60 + 8 * v66);
                if (v73)
                {
                  v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    v75 = result + 8 * v74;
                    v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == (_DWORD)v65;
                    if (v76 && v66 < (v10[5] - v62) >> 3)
                    {
                      v78 = *(_QWORD *)(v62 + 8 * v66);
                      if (v78)
                      {
                        v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == (_DWORD)v65 && v80 != v63)
                            break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          v20 = v56;
          goto LABEL_14;
        }
      }
      v56 = v20;
LABEL_14:
      v83 = v20;
    }
    v14 = v56;
    if (v13 == v56)
      goto LABEL_83;
  }
  v51 = v10[11];
  v52 = v10[10] + 8 * v46;
  v53 = *(_QWORD *)(a2 + 24);
  if (v53)
    goto LABEL_46;
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  result = ((uint64_t (*)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  v19 = (_QWORD *)result;
LABEL_83:
  *v19 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 isValid;
  _QWORD v11[5];
  uint64_t v12;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::IsDecal>(v1);
  v3 = gdc::Registry::storage<md::ls::RenderItemID>(v1);
  v4 = gdc::Registry::storage<md::ls::RenderOrderToUse>(v1);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v5 = v2;
  else
    v5 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56))
    v5 = v4;
  v11[0] = v5 + 32;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  v7 = *(_QWORD *)(v5 + 56);
  v6 = *(_QWORD *)(v5 + 64);
  v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    v8 = v7 + 8;
    do
    {
      v7 = v8;
      v12 = v8;
      if (v8 == v6)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfRenderableIsUnique>(md::ita::CheckIfRenderableIsUnique &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfRenderableIsUnique &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfRenderableIsUnique>(md::ita::CheckIfRenderableIsUnique &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfRenderableIsUnique>(md::ita::CheckIfRenderableIsUnique &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfRenderableIsUnique &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfRenderableIsUnique>(md::ita::CheckIfRenderableIsUnique &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42856A8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfRenderableIsUnique>(md::ita::CheckIfRenderableIsUnique &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfRenderableIsUnique &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfRenderableIsUnique>(md::ita::CheckIfRenderableIsUnique &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42856A8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfRenderableIsUnique>(md::ita::CheckIfRenderableIsUnique &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfRenderableIsUnique &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfRenderableIsUnique>(md::ita::CheckIfRenderableIsUnique &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfRenderableIsUnique>(md::ita::CheckIfRenderableIsUnique &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfRenderableIsUnique &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfRenderableIsUnique>(md::ita::CheckIfRenderableIsUnique &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfRenderableIsUnique>(md::ita::CheckIfRenderableIsUnique &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfRenderableIsUnique &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfRenderableIsUnique>(md::ita::CheckIfRenderableIsUnique &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42856F0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfRenderableIsUnique>(md::ita::CheckIfRenderableIsUnique &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfRenderableIsUnique &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfRenderableIsUnique>(md::ita::CheckIfRenderableIsUnique &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42856F0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfRenderableIsUnique>(md::ita::CheckIfRenderableIsUnique &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfRenderableIsUnique &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfRenderableIsUnique>(md::ita::CheckIfRenderableIsUnique &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x4F0CC5B74BC3AC16;
  v2[1] = "md::ls::UniqueRenderArrayID]";
  *(_QWORD *)&result = 27;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4340;
  v2[4] = "md::ls::SharedUniqueID]";
  v2[5] = 22;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfRenderableIsUnique>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfRenderableIsUnique>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfRenderableIsUnique>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfRenderableIsUnique>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42773F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfRenderableIsUnique>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfRenderableIsUnique>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42773F8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfRenderableIsUnique>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfRenderableIsUnique>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t i;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t j;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t k;
  _QWORD *v25;
  uint64_t v26;
  uint64_t result;
  _QWORD *v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42EE608;
  v4[1] = a2;
  v28 = 0;
  v5 = **v3;
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (v6 != v7)
  {
    while (*v6 != 0x41D4E9297E100630)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    v9 = 0;
  }
  else
  {
    v9 = (_QWORD *)v6[3];
    v8 = (std::__shared_weak_count *)v6[4];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v28 = v9;
  if (v9[11])
  {
    v13 = (_QWORD *)v9[10];
    if (v13)
    {
      do
      {
        v14 = (_QWORD *)*v13;
        operator delete(v13);
        v13 = v14;
      }
      while (v14);
    }
    v9[10] = 0;
    v15 = v9[9];
    if (v15)
    {
      for (i = 0; i != v15; ++i)
        *(_QWORD *)(v9[8] + 8 * i) = 0;
    }
    v9[11] = 0;
  }
  if (v9[16])
  {
    v17 = (_QWORD *)v9[15];
    if (v17)
    {
      do
      {
        v18 = (_QWORD *)*v17;
        operator delete(v17);
        v17 = v18;
      }
      while (v18);
    }
    v9[15] = 0;
    v19 = v9[14];
    if (v19)
    {
      for (j = 0; j != v19; ++j)
        *(_QWORD *)(v9[13] + 8 * j) = 0;
    }
    v9[16] = 0;
  }
  if (v9[21])
  {
    v21 = (_QWORD *)v9[20];
    if (v21)
    {
      do
      {
        v22 = (_QWORD *)*v21;
        operator delete(v21);
        v21 = v22;
      }
      while (v22);
    }
    v9[20] = 0;
    v23 = v9[19];
    if (v23)
    {
      for (k = 0; k != v23; ++k)
        *(_QWORD *)(v9[18] + 8 * k) = 0;
    }
    v9[21] = 0;
  }
  v29[0] = &off_1E42F58B8;
  v29[1] = &v28;
  v29[2] = v3;
  v30 = v29;
  (*(void (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v29);
  v25 = v30;
  if (v30 == v29)
  {
    v26 = 4;
    v25 = v29;
    goto LABEL_38;
  }
  if (v30)
  {
    v26 = 5;
LABEL_38:
    (*(void (**)(_QWORD *))(*v25 + 8 * v26))(v25);
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F6F1400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::UniqueRenderArrayID const&,md::ls::SharedUniqueID const&>::Model<ecs2::RuntimeQuery<md::ls::UniqueRenderArrayID const&,md::ls::SharedUniqueID const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::UniqueRenderArrayID const&,md::ls::SharedUniqueID const&>::Model<ecs2::RuntimeQuery<md::ls::UniqueRenderArrayID const&,md::ls::SharedUniqueID const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueRenderArrayID>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::SharedUniqueID>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v4[7];
    v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v4[11];
      v24 = v4[10] + 8 * v18;
    }
    else
    {
LABEL_17:
      v23 = v4[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v6[7];
        v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v6[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v6[11];
  v34 = v6[10] + 24 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::UniqueRenderArrayID const&,md::ls::SharedUniqueID const&>::Model<ecs2::RuntimeQuery<md::ls::UniqueRenderArrayID const&,md::ls::SharedUniqueID const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueRenderArrayID>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::SharedUniqueID>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResetFunctionConstants>(md::ita::ResetFunctionConstants &&)::{lambda(void)#2},std::allocator<md::ita::ResetFunctionConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResetFunctionConstants>(md::ita::ResetFunctionConstants &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResetFunctionConstants>(md::ita::ResetFunctionConstants &&)::{lambda(void)#2},std::allocator<md::ita::ResetFunctionConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResetFunctionConstants>(md::ita::ResetFunctionConstants &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284808;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResetFunctionConstants>(md::ita::ResetFunctionConstants &&)::{lambda(void)#2},std::allocator<md::ita::ResetFunctionConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResetFunctionConstants>(md::ita::ResetFunctionConstants &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284808;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResetFunctionConstants>(md::ita::ResetFunctionConstants &&)::{lambda(void)#2},std::allocator<md::ita::ResetFunctionConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResetFunctionConstants>(md::ita::ResetFunctionConstants &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FunctionConstantsEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6F1870(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResetFunctionConstants>(md::ita::ResetFunctionConstants &&)::{lambda(void)#1},std::allocator<md::ita::ResetFunctionConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResetFunctionConstants>(md::ita::ResetFunctionConstants &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResetFunctionConstants>(md::ita::ResetFunctionConstants &&)::{lambda(void)#1},std::allocator<md::ita::ResetFunctionConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResetFunctionConstants>(md::ita::ResetFunctionConstants &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284850;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResetFunctionConstants>(md::ita::ResetFunctionConstants &&)::{lambda(void)#1},std::allocator<md::ita::ResetFunctionConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResetFunctionConstants>(md::ita::ResetFunctionConstants &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284850;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResetFunctionConstants>(md::ita::ResetFunctionConstants &&)::{lambda(void)#1},std::allocator<md::ita::ResetFunctionConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResetFunctionConstants>(md::ita::ResetFunctionConstants &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ResetFunctionConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::ResetFunctionConstants>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::ResetFunctionConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::ResetFunctionConstants>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276CA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ResetFunctionConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::ResetFunctionConstants>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276CA8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::ResetFunctionConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::ResetFunctionConstants>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)(_QWORD);
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *result;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::FunctionConstants>(*(_QWORD *)(a2 + 8));
  v5 = v3[7];
  v4 = v3[8];
  v6 = &ecs2::Runtime::_localEntity;
  v7 = v4 - v5;
  if (v4 == v5
    || (v8 = *(unsigned int *)(v5 + 4), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 < v10)
    && (v11 = *(_QWORD *)(v9 + 8 * (v8 >> 7))) != 0
    && (v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 < v7 >> 3)
    && ((v13 = v5 + 8 * v12, v13 != v4) ? (v14 = *(_DWORD *)(v13 + 4) == (_DWORD)v8) : (v14 = 0), v14))
  {
LABEL_19:
    if (v4 != v5)
    {
      v21 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      do
      {
        *v21 = *v24;
        v26 = *v24;
        v27 = *v24 >> 39;
        v28 = v22[4];
        if (v27 < (v22[5] - v28) >> 3
          && (v29 = *(_QWORD *)(v28 + 8 * v27)) != 0
          && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v26) & 0x7F)),
              v31 = v22[7],
              v32 = v22[8],
              v30 < (v32 - v31) >> 3)
          && ((v33 = HIDWORD(v26), v34 = v31 + 8 * v30, v34 != v32)
            ? (v35 = *(_DWORD *)(v34 + 4) == (_DWORD)v33)
            : (v35 = 0),
              v35))
        {
          v36 = v22[11];
          v37 = v22[10] + 33 * v30;
        }
        else
        {
          v36 = v22[11];
          v37 = v36;
        }
        if (v37 == v36)
          v38 = 0;
        else
          v38 = v37;
        *(_QWORD *)v38 = 0;
        *(_QWORD *)(v38 + 8) = 0;
        *(_WORD *)(v38 + 16) = 256;
        *(_BYTE *)(v38 + 18) = 1;
        *(_DWORD *)(v38 + 19) = 0;
        *(_BYTE *)(v38 + 23) = 2;
        *(_QWORD *)(v38 + 24) = 0;
        *(_BYTE *)(v38 + 32) = 0;
        v39 = v22[4];
        v40 = v22[7];
        v25 = (unint64_t *)v22[8];
        v41 = v24 + 1;
        while (v41 != v25)
        {
          v42 = *((unsigned int *)v41 + 1);
          v43 = v22[8];
          if (v42 >> 7 < (v22[5] - v39) >> 3)
          {
            v44 = *(_QWORD *)(v39 + 8 * (v42 >> 7));
            v43 = v22[8];
            if (v44)
            {
              v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
              v43 = v22[8];
              if (((uint64_t)v25 - v40) >> 3 > v45)
              {
                v43 = v40 + 8 * v45;
                if (*(_DWORD *)(v43 + 4) != (_DWORD)v42)
                  v43 = v22[8];
              }
            }
          }
          ++v41;
          if ((unint64_t *)v43 != v25)
          {
            v25 = v41 - 1;
            break;
          }
        }
        v24 = v25;
      }
      while (v23 != v25);
    }
  }
  else
  {
    v15 = v7 >> 3;
    v16 = v5 + 8;
    while (v16 != v4)
    {
      v17 = *(unsigned int *)(v16 + 4);
      v18 = v4;
      if (v17 >> 7 < v10)
      {
        v19 = *(_QWORD *)(v9 + 8 * (v17 >> 7));
        v18 = v4;
        if (v19)
        {
          v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
          v18 = v4;
          if (v15 > v20)
          {
            v18 = v5 + 8 * v20;
            if (*(_DWORD *)(v18 + 4) != (_DWORD)v17)
              v18 = v4;
          }
        }
      }
      v16 += 8;
      if (v18 != v4)
      {
        v5 = v16 - 8;
        goto LABEL_19;
      }
    }
  }
  result = (_QWORD *)(*v6)(v6);
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPeeledRenderItems>(md::ita::CreateDepthPeeledRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateDepthPeeledRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPeeledRenderItems>(md::ita::CreateDepthPeeledRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPeeledRenderItems>(md::ita::CreateDepthPeeledRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateDepthPeeledRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPeeledRenderItems>(md::ita::CreateDepthPeeledRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42865D8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPeeledRenderItems>(md::ita::CreateDepthPeeledRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateDepthPeeledRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPeeledRenderItems>(md::ita::CreateDepthPeeledRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42865D8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPeeledRenderItems>(md::ita::CreateDepthPeeledRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateDepthPeeledRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPeeledRenderItems>(md::ita::CreateDepthPeeledRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  unint64_t v68;
  char *v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  __int128 v78;
  unint64_t v79;
  char *v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  __int128 v89;
  unint64_t v90;
  char *v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  __int128 v100;
  unint64_t v101;
  char *v102;
  char *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  __int128 v111;
  unint64_t v112;
  char *v113;
  char *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  __int128 v122;
  unint64_t v123;
  char *v124;
  char *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  __int128 v133;
  unint64_t v134;
  char *v135;
  char *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  __int128 v144;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x180uLL);
  a1[2] = (char *)(v2 + 48);
  *v2 = 0x523816724122CCE2;
  v2[1] = "md::ls::AssociationHandle]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB4350;
  v2[4] = "md::ls::PrepassConstantDataHandle]";
  v2[5] = 33;
  v2[6] = 0xEAA0B82FC49F7277;
  v2[7] = "md::ls::ShadowConstantDataHandle]";
  v2[8] = 32;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 48)
  {
    *(_QWORD *)v3 = 0x98A9F01DBB8BCCCELL;
    v2[10] = "md::ls::PreserveHeight]";
    v2[11] = 22;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_236;
  if (0x5555555555555556 * (((char *)(v2 + 48) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 48) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 48) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x98A9F01DBB8BCCCELL;
  *((_QWORD *)v10 + 1) = "md::ls::PreserveHeight]";
  *((_QWORD *)v10 + 2) = 22;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0xCD844FF303308290;
    *((_QWORD *)v4 + 1) = "md::ls::HasMeshHandle]";
    *((_QWORD *)v4 + 2) = 21;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_236;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    v20 = (char *)operator new(24 * v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0xCD844FF303308290;
  *((_QWORD *)v21 + 1) = "md::ls::HasMeshHandle]";
  *((_QWORD *)v21 + 2) = 21;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
  v24 = (unint64_t)a1[2];
  if ((unint64_t)v14 < v24)
  {
    *(_QWORD *)v14 = 0x6C7EE74910D42096;
    *((_QWORD *)v14 + 1) = "md::ls::PositionScaleInfoConstantDataHandle]";
    *((_QWORD *)v14 + 2) = 43;
    v25 = v14 + 24;
    goto LABEL_55;
  }
  v26 = *a1;
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3);
  v28 = v27 + 1;
  if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_236;
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x555555555555555)
    v30 = 0xAAAAAAAAAAAAAAALL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    v31 = (char *)operator new(24 * v30);
  }
  else
  {
    v31 = 0;
  }
  v32 = &v31[24 * v27];
  v33 = &v31[24 * v30];
  *(_QWORD *)v32 = 0x6C7EE74910D42096;
  *((_QWORD *)v32 + 1) = "md::ls::PositionScaleInfoConstantDataHandle]";
  *((_QWORD *)v32 + 2) = 43;
  v25 = v32 + 24;
  if (v14 == v26)
  {
    *a1 = v32;
    a1[1] = v25;
    a1[2] = v33;
LABEL_54:
    operator delete(v14);
    goto LABEL_55;
  }
  do
  {
    v34 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v32 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v32 - 24) = v34;
    v32 -= 24;
    v14 -= 24;
  }
  while (v14 != v26);
  v14 = *a1;
  *a1 = v32;
  a1[1] = v25;
  a1[2] = v33;
  if (v14)
    goto LABEL_54;
LABEL_55:
  a1[1] = v25;
  v35 = (unint64_t)a1[2];
  if ((unint64_t)v25 < v35)
  {
    *(_QWORD *)v25 = 0xCFE242268B958ADALL;
    *((_QWORD *)v25 + 1) = "md::ls::ViewConstantDataHandle]";
    *((_QWORD *)v25 + 2) = 30;
    v36 = v25 + 24;
    goto LABEL_73;
  }
  v37 = *a1;
  v38 = 0xAAAAAAAAAAAAAAABLL * ((v25 - *a1) >> 3);
  v39 = v38 + 1;
  if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_236;
  v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v37) >> 3);
  if (2 * v40 > v39)
    v39 = 2 * v40;
  if (v40 >= 0x555555555555555)
    v41 = 0xAAAAAAAAAAAAAAALL;
  else
    v41 = v39;
  if (v41)
  {
    if (v41 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    v42 = (char *)operator new(24 * v41);
  }
  else
  {
    v42 = 0;
  }
  v43 = &v42[24 * v38];
  v44 = &v42[24 * v41];
  *(_QWORD *)v43 = 0xCFE242268B958ADALL;
  *((_QWORD *)v43 + 1) = "md::ls::ViewConstantDataHandle]";
  *((_QWORD *)v43 + 2) = 30;
  v36 = v43 + 24;
  if (v25 == v37)
  {
    *a1 = v43;
    a1[1] = v36;
    a1[2] = v44;
LABEL_72:
    operator delete(v25);
    goto LABEL_73;
  }
  do
  {
    v45 = *(_OWORD *)(v25 - 24);
    *((_QWORD *)v43 - 1) = *((_QWORD *)v25 - 1);
    *(_OWORD *)(v43 - 24) = v45;
    v43 -= 24;
    v25 -= 24;
  }
  while (v25 != v37);
  v25 = *a1;
  *a1 = v43;
  a1[1] = v36;
  a1[2] = v44;
  if (v25)
    goto LABEL_72;
LABEL_73:
  a1[1] = v36;
  v46 = (unint64_t)a1[2];
  if ((unint64_t)v36 < v46)
  {
    *(_QWORD *)v36 = 0x74DC502726E97929;
    *((_QWORD *)v36 + 1) = "md::ls::TransformConstantDataHandle]";
    *((_QWORD *)v36 + 2) = 35;
    v47 = v36 + 24;
    goto LABEL_91;
  }
  v48 = *a1;
  v49 = 0xAAAAAAAAAAAAAAABLL * ((v36 - *a1) >> 3);
  v50 = v49 + 1;
  if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_236;
  v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - (_QWORD)v48) >> 3);
  if (2 * v51 > v50)
    v50 = 2 * v51;
  if (v51 >= 0x555555555555555)
    v52 = 0xAAAAAAAAAAAAAAALL;
  else
    v52 = v50;
  if (v52)
  {
    if (v52 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    v53 = (char *)operator new(24 * v52);
  }
  else
  {
    v53 = 0;
  }
  v54 = &v53[24 * v49];
  v55 = &v53[24 * v52];
  *(_QWORD *)v54 = 0x74DC502726E97929;
  *((_QWORD *)v54 + 1) = "md::ls::TransformConstantDataHandle]";
  *((_QWORD *)v54 + 2) = 35;
  v47 = v54 + 24;
  if (v36 == v48)
  {
    *a1 = v54;
    a1[1] = v47;
    a1[2] = v55;
LABEL_90:
    operator delete(v36);
    goto LABEL_91;
  }
  do
  {
    v56 = *(_OWORD *)(v36 - 24);
    *((_QWORD *)v54 - 1) = *((_QWORD *)v36 - 1);
    *(_OWORD *)(v54 - 24) = v56;
    v54 -= 24;
    v36 -= 24;
  }
  while (v36 != v48);
  v36 = *a1;
  *a1 = v54;
  a1[1] = v47;
  a1[2] = v55;
  if (v36)
    goto LABEL_90;
LABEL_91:
  a1[1] = v47;
  v57 = (unint64_t)a1[2];
  if ((unint64_t)v47 < v57)
  {
    *(_QWORD *)v47 = 0x71CBA64B1A9CA230;
    *((_QWORD *)v47 + 1) = "md::ls::IndexRange]";
    *((_QWORD *)v47 + 2) = 18;
    v58 = v47 + 24;
    goto LABEL_109;
  }
  v59 = *a1;
  v60 = 0xAAAAAAAAAAAAAAABLL * ((v47 - *a1) >> 3);
  v61 = v60 + 1;
  if (v60 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_236;
  v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - (_QWORD)v59) >> 3);
  if (2 * v62 > v61)
    v61 = 2 * v62;
  if (v62 >= 0x555555555555555)
    v63 = 0xAAAAAAAAAAAAAAALL;
  else
    v63 = v61;
  if (v63)
  {
    if (v63 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    v64 = (char *)operator new(24 * v63);
  }
  else
  {
    v64 = 0;
  }
  v65 = &v64[24 * v60];
  v66 = &v64[24 * v63];
  *(_QWORD *)v65 = 0x71CBA64B1A9CA230;
  *((_QWORD *)v65 + 1) = "md::ls::IndexRange]";
  *((_QWORD *)v65 + 2) = 18;
  v58 = v65 + 24;
  if (v47 == v59)
  {
    *a1 = v65;
    a1[1] = v58;
    a1[2] = v66;
LABEL_108:
    operator delete(v47);
    goto LABEL_109;
  }
  do
  {
    v67 = *(_OWORD *)(v47 - 24);
    *((_QWORD *)v65 - 1) = *((_QWORD *)v47 - 1);
    *(_OWORD *)(v65 - 24) = v67;
    v65 -= 24;
    v47 -= 24;
  }
  while (v47 != v59);
  v47 = *a1;
  *a1 = v65;
  a1[1] = v58;
  a1[2] = v66;
  if (v47)
    goto LABEL_108;
LABEL_109:
  a1[1] = v58;
  v68 = (unint64_t)a1[2];
  if ((unint64_t)v58 < v68)
  {
    *(_QWORD *)v58 = 0x3218EFD67197A145;
    *((_QWORD *)v58 + 1) = "md::ls::NormalsHandle]";
    *((_QWORD *)v58 + 2) = 21;
    v69 = v58 + 24;
    goto LABEL_127;
  }
  v70 = *a1;
  v71 = 0xAAAAAAAAAAAAAAABLL * ((v58 - *a1) >> 3);
  v72 = v71 + 1;
  if (v71 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_236;
  v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - (_QWORD)v70) >> 3);
  if (2 * v73 > v72)
    v72 = 2 * v73;
  if (v73 >= 0x555555555555555)
    v74 = 0xAAAAAAAAAAAAAAALL;
  else
    v74 = v72;
  if (v74)
  {
    if (v74 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    v75 = (char *)operator new(24 * v74);
  }
  else
  {
    v75 = 0;
  }
  v76 = &v75[24 * v71];
  v77 = &v75[24 * v74];
  *(_QWORD *)v76 = 0x3218EFD67197A145;
  *((_QWORD *)v76 + 1) = "md::ls::NormalsHandle]";
  *((_QWORD *)v76 + 2) = 21;
  v69 = v76 + 24;
  if (v58 == v70)
  {
    *a1 = v76;
    a1[1] = v69;
    a1[2] = v77;
LABEL_126:
    operator delete(v58);
    goto LABEL_127;
  }
  do
  {
    v78 = *(_OWORD *)(v58 - 24);
    *((_QWORD *)v76 - 1) = *((_QWORD *)v58 - 1);
    *(_OWORD *)(v76 - 24) = v78;
    v76 -= 24;
    v58 -= 24;
  }
  while (v58 != v70);
  v58 = *a1;
  *a1 = v76;
  a1[1] = v69;
  a1[2] = v77;
  if (v58)
    goto LABEL_126;
LABEL_127:
  a1[1] = v69;
  v79 = (unint64_t)a1[2];
  if ((unint64_t)v69 < v79)
  {
    *(_QWORD *)v69 = 0xAF179EFD8A4C83D4;
    *((_QWORD *)v69 + 1) = "md::ls::InstanceTransformHandle]";
    *((_QWORD *)v69 + 2) = 31;
    v80 = v69 + 24;
    goto LABEL_145;
  }
  v81 = *a1;
  v82 = 0xAAAAAAAAAAAAAAABLL * ((v69 - *a1) >> 3);
  v83 = v82 + 1;
  if (v82 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_236;
  v84 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - (_QWORD)v81) >> 3);
  if (2 * v84 > v83)
    v83 = 2 * v84;
  if (v84 >= 0x555555555555555)
    v85 = 0xAAAAAAAAAAAAAAALL;
  else
    v85 = v83;
  if (v85)
  {
    if (v85 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    v86 = (char *)operator new(24 * v85);
  }
  else
  {
    v86 = 0;
  }
  v87 = &v86[24 * v82];
  v88 = &v86[24 * v85];
  *(_QWORD *)v87 = 0xAF179EFD8A4C83D4;
  *((_QWORD *)v87 + 1) = "md::ls::InstanceTransformHandle]";
  *((_QWORD *)v87 + 2) = 31;
  v80 = v87 + 24;
  if (v69 == v81)
  {
    *a1 = v87;
    a1[1] = v80;
    a1[2] = v88;
LABEL_144:
    operator delete(v69);
    goto LABEL_145;
  }
  do
  {
    v89 = *(_OWORD *)(v69 - 24);
    *((_QWORD *)v87 - 1) = *((_QWORD *)v69 - 1);
    *(_OWORD *)(v87 - 24) = v89;
    v87 -= 24;
    v69 -= 24;
  }
  while (v69 != v81);
  v69 = *a1;
  *a1 = v87;
  a1[1] = v80;
  a1[2] = v88;
  if (v69)
    goto LABEL_144;
LABEL_145:
  a1[1] = v80;
  v90 = (unint64_t)a1[2];
  if ((unint64_t)v80 < v90)
  {
    *(_QWORD *)v80 = 0xCBB77B1CBD05D7C5;
    *((_QWORD *)v80 + 1) = "md::ls::UVsHandle]";
    *((_QWORD *)v80 + 2) = 17;
    v91 = v80 + 24;
    goto LABEL_163;
  }
  v92 = *a1;
  v93 = 0xAAAAAAAAAAAAAAABLL * ((v80 - *a1) >> 3);
  v94 = v93 + 1;
  if (v93 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_236;
  v95 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v90 - (_QWORD)v92) >> 3);
  if (2 * v95 > v94)
    v94 = 2 * v95;
  if (v95 >= 0x555555555555555)
    v96 = 0xAAAAAAAAAAAAAAALL;
  else
    v96 = v94;
  if (v96)
  {
    if (v96 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    v97 = (char *)operator new(24 * v96);
  }
  else
  {
    v97 = 0;
  }
  v98 = &v97[24 * v93];
  v99 = &v97[24 * v96];
  *(_QWORD *)v98 = 0xCBB77B1CBD05D7C5;
  *((_QWORD *)v98 + 1) = "md::ls::UVsHandle]";
  *((_QWORD *)v98 + 2) = 17;
  v91 = v98 + 24;
  if (v80 == v92)
  {
    *a1 = v98;
    a1[1] = v91;
    a1[2] = v99;
LABEL_162:
    operator delete(v80);
    goto LABEL_163;
  }
  do
  {
    v100 = *(_OWORD *)(v80 - 24);
    *((_QWORD *)v98 - 1) = *((_QWORD *)v80 - 1);
    *(_OWORD *)(v98 - 24) = v100;
    v98 -= 24;
    v80 -= 24;
  }
  while (v80 != v92);
  v80 = *a1;
  *a1 = v98;
  a1[1] = v91;
  a1[2] = v99;
  if (v80)
    goto LABEL_162;
LABEL_163:
  a1[1] = v91;
  v101 = (unint64_t)a1[2];
  if ((unint64_t)v91 < v101)
  {
    *(_QWORD *)v91 = 0x499CE17DBD9A1615;
    *((_QWORD *)v91 + 1) = "md::ls::NeedsZBias]";
    *((_QWORD *)v91 + 2) = 18;
    v102 = v91 + 24;
    goto LABEL_181;
  }
  v103 = *a1;
  v104 = 0xAAAAAAAAAAAAAAABLL * ((v91 - *a1) >> 3);
  v105 = v104 + 1;
  if (v104 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_236;
  v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (_QWORD)v103) >> 3);
  if (2 * v106 > v105)
    v105 = 2 * v106;
  if (v106 >= 0x555555555555555)
    v107 = 0xAAAAAAAAAAAAAAALL;
  else
    v107 = v105;
  if (v107)
  {
    if (v107 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    v108 = (char *)operator new(24 * v107);
  }
  else
  {
    v108 = 0;
  }
  v109 = &v108[24 * v104];
  v110 = &v108[24 * v107];
  *(_QWORD *)v109 = 0x499CE17DBD9A1615;
  *((_QWORD *)v109 + 1) = "md::ls::NeedsZBias]";
  *((_QWORD *)v109 + 2) = 18;
  v102 = v109 + 24;
  if (v91 == v103)
  {
    *a1 = v109;
    a1[1] = v102;
    a1[2] = v110;
LABEL_180:
    operator delete(v91);
    goto LABEL_181;
  }
  do
  {
    v111 = *(_OWORD *)(v91 - 24);
    *((_QWORD *)v109 - 1) = *((_QWORD *)v91 - 1);
    *(_OWORD *)(v109 - 24) = v111;
    v109 -= 24;
    v91 -= 24;
  }
  while (v91 != v103);
  v91 = *a1;
  *a1 = v109;
  a1[1] = v102;
  a1[2] = v110;
  if (v91)
    goto LABEL_180;
LABEL_181:
  a1[1] = v102;
  v112 = (unint64_t)a1[2];
  if ((unint64_t)v102 < v112)
  {
    *(_QWORD *)v102 = 0x9292F9031FE6DB5;
    *((_QWORD *)v102 + 1) = "md::ls::ClippingConstantDataHandle]";
    *((_QWORD *)v102 + 2) = 34;
    v113 = v102 + 24;
    goto LABEL_199;
  }
  v114 = *a1;
  v115 = 0xAAAAAAAAAAAAAAABLL * ((v102 - *a1) >> 3);
  v116 = v115 + 1;
  if (v115 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_236;
  v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v112 - (_QWORD)v114) >> 3);
  if (2 * v117 > v116)
    v116 = 2 * v117;
  if (v117 >= 0x555555555555555)
    v118 = 0xAAAAAAAAAAAAAAALL;
  else
    v118 = v116;
  if (v118)
  {
    if (v118 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    v119 = (char *)operator new(24 * v118);
  }
  else
  {
    v119 = 0;
  }
  v120 = &v119[24 * v115];
  v121 = &v119[24 * v118];
  *(_QWORD *)v120 = 0x9292F9031FE6DB5;
  *((_QWORD *)v120 + 1) = "md::ls::ClippingConstantDataHandle]";
  *((_QWORD *)v120 + 2) = 34;
  v113 = v120 + 24;
  if (v102 == v114)
  {
    *a1 = v120;
    a1[1] = v113;
    a1[2] = v121;
LABEL_198:
    operator delete(v102);
    goto LABEL_199;
  }
  do
  {
    v122 = *(_OWORD *)(v102 - 24);
    *((_QWORD *)v120 - 1) = *((_QWORD *)v102 - 1);
    *(_OWORD *)(v120 - 24) = v122;
    v120 -= 24;
    v102 -= 24;
  }
  while (v102 != v114);
  v102 = *a1;
  *a1 = v120;
  a1[1] = v113;
  a1[2] = v121;
  if (v102)
    goto LABEL_198;
LABEL_199:
  a1[1] = v113;
  v123 = (unint64_t)a1[2];
  if ((unint64_t)v113 < v123)
  {
    *(_QWORD *)v113 = 0x237F9D3BCC905318;
    *((_QWORD *)v113 + 1) = "md::ls::IsMercator]";
    *((_QWORD *)v113 + 2) = 18;
    v124 = v113 + 24;
    goto LABEL_217;
  }
  v125 = *a1;
  v126 = 0xAAAAAAAAAAAAAAABLL * ((v113 - *a1) >> 3);
  v127 = v126 + 1;
  if (v126 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_236;
  v128 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v123 - (_QWORD)v125) >> 3);
  if (2 * v128 > v127)
    v127 = 2 * v128;
  if (v128 >= 0x555555555555555)
    v129 = 0xAAAAAAAAAAAAAAALL;
  else
    v129 = v127;
  if (v129)
  {
    if (v129 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    v130 = (char *)operator new(24 * v129);
  }
  else
  {
    v130 = 0;
  }
  v131 = &v130[24 * v126];
  v132 = &v130[24 * v129];
  *(_QWORD *)v131 = 0x237F9D3BCC905318;
  *((_QWORD *)v131 + 1) = "md::ls::IsMercator]";
  *((_QWORD *)v131 + 2) = 18;
  v124 = v131 + 24;
  if (v113 == v125)
  {
    *a1 = v131;
    a1[1] = v124;
    a1[2] = v132;
LABEL_216:
    operator delete(v113);
    goto LABEL_217;
  }
  do
  {
    v133 = *(_OWORD *)(v113 - 24);
    *((_QWORD *)v131 - 1) = *((_QWORD *)v113 - 1);
    *(_OWORD *)(v131 - 24) = v133;
    v131 -= 24;
    v113 -= 24;
  }
  while (v113 != v125);
  v113 = *a1;
  *a1 = v131;
  a1[1] = v124;
  a1[2] = v132;
  if (v113)
    goto LABEL_216;
LABEL_217:
  a1[1] = v124;
  v134 = (unint64_t)a1[2];
  if ((unint64_t)v124 < v134)
  {
    *(_QWORD *)v124 = 0xD443D3DCBB78491ALL;
    *((_QWORD *)v124 + 1) = "md::ls::ElevationHandle]";
    *((_QWORD *)v124 + 2) = 23;
    v135 = v124 + 24;
    goto LABEL_235;
  }
  v136 = *a1;
  v137 = 0xAAAAAAAAAAAAAAABLL * ((v124 - *a1) >> 3);
  v138 = v137 + 1;
  if (v137 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_236:
    abort();
  v139 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v134 - (_QWORD)v136) >> 3);
  if (2 * v139 > v138)
    v138 = 2 * v139;
  if (v139 >= 0x555555555555555)
    v140 = 0xAAAAAAAAAAAAAAALL;
  else
    v140 = v138;
  if (v140)
  {
    if (v140 <= 0xAAAAAAAAAAAAAAALL)
    {
      v141 = (char *)operator new(24 * v140);
      goto LABEL_229;
    }
LABEL_237:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v141 = 0;
LABEL_229:
  v142 = &v141[24 * v137];
  v143 = &v141[24 * v140];
  *(_QWORD *)v142 = 0xD443D3DCBB78491ALL;
  *((_QWORD *)v142 + 1) = "md::ls::ElevationHandle]";
  *((_QWORD *)v142 + 2) = 23;
  v135 = v142 + 24;
  if (v124 == v136)
  {
    *a1 = v142;
    a1[1] = v135;
    a1[2] = v143;
LABEL_234:
    operator delete(v124);
    goto LABEL_235;
  }
  do
  {
    v144 = *(_OWORD *)(v124 - 24);
    *((_QWORD *)v142 - 1) = *((_QWORD *)v124 - 1);
    *(_OWORD *)(v142 - 24) = v144;
    v142 -= 24;
    v124 -= 24;
  }
  while (v124 != v136);
  v124 = *a1;
  *a1 = v142;
  a1[1] = v135;
  a1[2] = v143;
  if (v124)
    goto LABEL_234;
LABEL_235:
  a1[1] = v135;
}

void sub_19F6F2B98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPeeledRenderItems>(md::ita::CreateDepthPeeledRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateDepthPeeledRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPeeledRenderItems>(md::ita::CreateDepthPeeledRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPeeledRenderItems>(md::ita::CreateDepthPeeledRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateDepthPeeledRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPeeledRenderItems>(md::ita::CreateDepthPeeledRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286620;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPeeledRenderItems>(md::ita::CreateDepthPeeledRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateDepthPeeledRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPeeledRenderItems>(md::ita::CreateDepthPeeledRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286620;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPeeledRenderItems>(md::ita::CreateDepthPeeledRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateDepthPeeledRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPeeledRenderItems>(md::ita::CreateDepthPeeledRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0xA8uLL);
  a1[2] = (char *)(v2 + 21);
  *v2 = 0xAC1208F38C3ADC06;
  v2[1] = "md::ls::SliceAssignmentT<md::SliceType::Main>]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB4360;
  v2[4] = "md::ls::RenderableMeshVertexFormat]";
  v2[5] = 34;
  v2[6] = 0x751B872B282C3971;
  v2[7] = "md::ls::TileType]";
  v2[8] = 16;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 21)
  {
    *(_QWORD *)v3 = 0xCB7F6519084BB4D0;
    v2[10] = "md::ls::RequiresDepthPeel]";
    v2[11] = 25;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_74;
  if (0x5555555555555556 * (((char *)(v2 + 21) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 21) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 21) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_75;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0xCB7F6519084BB4D0;
  *((_QWORD *)v10 + 1) = "md::ls::RequiresDepthPeel]";
  *((_QWORD *)v10 + 2) = 25;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0xECC498AF223943D5;
    *((_QWORD *)v4 + 1) = "md::ls::MeshLayerTypeV]";
    *((_QWORD *)v4 + 2) = 22;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_74;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_75;
    v20 = (char *)operator new(24 * v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0xECC498AF223943D5;
  *((_QWORD *)v21 + 1) = "md::ls::MeshLayerTypeV]";
  *((_QWORD *)v21 + 2) = 22;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
  v24 = (unint64_t)a1[2];
  if ((unint64_t)v14 < v24)
  {
    *(_QWORD *)v14 = 0xEC2A00DC914732D7;
    *((_QWORD *)v14 + 1) = "md::ls::IntendedSceneLayer]";
    *((_QWORD *)v14 + 2) = 26;
    v25 = v14 + 24;
    goto LABEL_55;
  }
  v26 = *a1;
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3);
  v28 = v27 + 1;
  if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_74;
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x555555555555555)
    v30 = 0xAAAAAAAAAAAAAAALL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_75;
    v31 = (char *)operator new(24 * v30);
  }
  else
  {
    v31 = 0;
  }
  v32 = &v31[24 * v27];
  v33 = &v31[24 * v30];
  *(_QWORD *)v32 = 0xEC2A00DC914732D7;
  *((_QWORD *)v32 + 1) = "md::ls::IntendedSceneLayer]";
  *((_QWORD *)v32 + 2) = 26;
  v25 = v32 + 24;
  if (v14 == v26)
  {
    *a1 = v32;
    a1[1] = v25;
    a1[2] = v33;
LABEL_54:
    operator delete(v14);
    goto LABEL_55;
  }
  do
  {
    v34 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v32 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v32 - 24) = v34;
    v32 -= 24;
    v14 -= 24;
  }
  while (v14 != v26);
  v14 = *a1;
  *a1 = v32;
  a1[1] = v25;
  a1[2] = v33;
  if (v14)
    goto LABEL_54;
LABEL_55:
  a1[1] = v25;
  v35 = (unint64_t)a1[2];
  if ((unint64_t)v25 < v35)
  {
    *(_QWORD *)v25 = 0x75DBD6381F1903FFLL;
    *((_QWORD *)v25 + 1) = "md::ls::PendingProcessing]";
    *((_QWORD *)v25 + 2) = 25;
    v36 = v25 + 24;
    goto LABEL_73;
  }
  v37 = *a1;
  v38 = 0xAAAAAAAAAAAAAAABLL * ((v25 - *a1) >> 3);
  v39 = v38 + 1;
  if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_74:
    abort();
  v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v37) >> 3);
  if (2 * v40 > v39)
    v39 = 2 * v40;
  if (v40 >= 0x555555555555555)
    v41 = 0xAAAAAAAAAAAAAAALL;
  else
    v41 = v39;
  if (v41)
  {
    if (v41 <= 0xAAAAAAAAAAAAAAALL)
    {
      v42 = (char *)operator new(24 * v41);
      goto LABEL_67;
    }
LABEL_75:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v42 = 0;
LABEL_67:
  v43 = &v42[24 * v38];
  v44 = &v42[24 * v41];
  *(_QWORD *)v43 = 0x75DBD6381F1903FFLL;
  *((_QWORD *)v43 + 1) = "md::ls::PendingProcessing]";
  *((_QWORD *)v43 + 2) = 25;
  v36 = v43 + 24;
  if (v25 == v37)
  {
    *a1 = v43;
    a1[1] = v36;
    a1[2] = v44;
LABEL_72:
    operator delete(v25);
    goto LABEL_73;
  }
  do
  {
    v45 = *(_OWORD *)(v25 - 24);
    *((_QWORD *)v43 - 1) = *((_QWORD *)v25 - 1);
    *(_OWORD *)(v43 - 24) = v45;
    v43 -= 24;
    v25 -= 24;
  }
  while (v25 != v37);
  v25 = *a1;
  *a1 = v43;
  a1[1] = v36;
  a1[2] = v44;
  if (v25)
    goto LABEL_72;
LABEL_73:
  a1[1] = v36;
}

void sub_19F6F3160(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateDepthPeeledRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateDepthPeeledRenderItems>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateDepthPeeledRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateDepthPeeledRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277B90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateDepthPeeledRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateDepthPeeledRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277B90;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateDepthPeeledRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateDepthPeeledRenderItems>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _BOOL4 isValid;
  uint64_t result;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  std::__shared_weak_count *v199;
  unint64_t *p_shared_owners;
  unint64_t v201;
  unint64_t v202;
  int v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  char *v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t RenderItem;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  _QWORD *v219;
  uint64_t (***v220)();
  uint64_t v221;
  _QWORD *v222;
  uint64_t (***v223)();
  uint64_t v224;
  _QWORD *v225;
  uint64_t (***v226)();
  uint64_t v227;
  _QWORD *v228;
  uint64_t (***v229)();
  uint64_t v230;
  _QWORD *v231;
  _QWORD *v232;
  uint64_t (***v233)();
  uint64_t v234;
  char v235;
  _QWORD *v236;
  _BYTE *v237;
  uint64_t (***v238)();
  uint64_t v239;
  _QWORD *v240;
  uint64_t (***v241)();
  uint64_t v242;
  _QWORD *v243;
  uint64_t (***v244)();
  uint64_t v245;
  _QWORD *v246;
  uint64_t (***v247)();
  unsigned __int8 *v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t (***v251)();
  uint64_t v252;
  uint64_t v253;
  _QWORD *v254;
  _QWORD *v255;
  uint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  unint64_t v260;
  _QWORD *AssociationItemStorage;
  _QWORD *v262;
  unint64_t v263;
  unint64_t *v264;
  _QWORD *v265;
  char *v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  char *v271;
  unint64_t *v272;
  unint64_t v273;
  uint64_t v274;
  char *v275;
  unint64_t *v276;
  uint64_t v277;
  __int128 v278;
  unint64_t v279;
  _QWORD *v280;
  char *v281;
  uint64_t (***v282)();
  uint64_t v283;
  _QWORD *v284;
  uint64_t (***v285)();
  uint64_t v286;
  _QWORD *v287;
  uint64_t (***v288)();
  uint64_t v289;
  _QWORD *v290;
  uint64_t (***v291)();
  uint64_t v292;
  _QWORD *v293;
  uint64_t (***v294)();
  uint64_t v295;
  _QWORD *v296;
  uint64_t (***v297)();
  uint64_t v298;
  _QWORD *v299;
  char *v300;
  uint64_t v301;
  _QWORD *v302;
  uint64_t v303;
  _QWORD *v304;
  char *v305;
  uint64_t v306;
  _QWORD *v307;
  uint64_t v308;
  uint64_t v309;
  _QWORD *v310;
  uint64_t v311;
  uint64_t v312;
  _QWORD *v313;
  uint64_t v314;
  uint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  uint64_t v318;
  _QWORD *v319;
  char *v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  uint64_t v324;
  _QWORD *v325;
  uint64_t v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  uint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  uint64_t v336;
  _QWORD *v337;
  uint64_t v338;
  _QWORD *v339;
  uint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  _QWORD *v343;
  _QWORD *v344;
  _QWORD *v345;
  _QWORD *v346;
  _QWORD *v347;
  _QWORD *v348;
  _QWORD *v349;
  _QWORD *v350;
  _QWORD *v351;
  _QWORD *v352;
  _QWORD *v353;
  _QWORD *v354;
  _QWORD *HasMesh;
  _QWORD *v356;
  _QWORD *v357;
  _QWORD *v358;
  _QWORD *v359;
  _QWORD *v360;
  _QWORD *v361;
  _QWORD *v362;
  _QWORD *v363;
  _QWORD *v364;
  unsigned __int8 *v365;
  uint64_t *v366;
  uint64_t *v367;
  uint64_t *v368;
  uint64_t *v369;
  uint64_t *v370;
  uint64_t *v371;
  unint64_t v372;
  unint64_t v373;
  uint64_t *v374;
  uint64_t *v375;
  uint64_t *v376;
  __int128 *v377;
  unint64_t v378;
  unint64_t v379;
  uint64_t v380;
  unint64_t v381;
  unint64_t v382;
  _BYTE *v383;
  unint64_t v384;
  unint64_t *v385;
  unint64_t v386;
  unsigned __int8 *v387;
  _QWORD v388[9];
  _QWORD *v389;
  __int128 v390;
  char v391;
  uint64_t (**v392)();
  __int128 v393;
  uint64_t (***v394)();
  _BYTE v395[24];
  _BYTE *v396;
  int v397;
  uint64_t v398;

  v398 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)7>>(v3);
  v5 = gdc::Registry::storage<md::ls::RenderableMeshVertexFormat>(v3);
  v6 = gdc::Registry::storage<md::ls::TileType>(v3);
  v7 = gdc::Registry::storage<md::ls::RequiresDepthPeel>(v3);
  v8 = gdc::Registry::storage<md::ls::MeshLayerTypeV>(v3);
  v9 = gdc::Registry::storage<md::ls::IntendedSceneLayer>(v3);
  v10 = gdc::Registry::storage<md::ls::PendingProcessing>(v3);
  v359 = (_QWORD *)gdc::Registry::storage<md::ls::AssociationHandle>(v3);
  v358 = (_QWORD *)gdc::Registry::storage<md::ls::PrepassConstantDataHandle>(v3);
  v357 = (_QWORD *)gdc::Registry::storage<md::ls::ShadowConstantDataHandle>(v3);
  v356 = (_QWORD *)gdc::Registry::storage<md::ls::PreserveHeight>(v3);
  HasMesh = (_QWORD *)gdc::Registry::storage<md::ls::HasMeshHandle>(v3);
  v354 = (_QWORD *)gdc::Registry::storage<md::ls::PositionScaleInfoConstantDataHandle>(v3);
  v353 = (_QWORD *)gdc::Registry::storage<md::ls::ViewConstantDataHandle>(v3);
  v352 = (_QWORD *)gdc::Registry::storage<md::ls::TransformConstantDataHandle>(v3);
  v351 = (_QWORD *)gdc::Registry::storage<md::ls::IndexRange>(v3);
  v350 = (_QWORD *)gdc::Registry::storage<md::ls::NormalsHandle>(v3);
  v349 = (_QWORD *)gdc::Registry::storage<md::ls::InstanceTransformHandle>(v3);
  v348 = (_QWORD *)gdc::Registry::storage<md::ls::UVsHandle>(v3);
  v347 = (_QWORD *)gdc::Registry::storage<md::ls::NeedsZBias>(v3);
  v346 = (_QWORD *)gdc::Registry::storage<md::ls::ClippingConstantDataHandle>(v3);
  v345 = (_QWORD *)gdc::Registry::storage<md::ls::IsMercator>(v3);
  v344 = (_QWORD *)gdc::Registry::storage<md::ls::ElevationHandle>(v3);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) >= *(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56))
    v11 = v4 + 32;
  else
    v11 = v5 + 32;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24))
    v11 = v6 + 32;
  if (*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56) < *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24))
    v11 = v7 + 32;
  if (*(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56) < *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24))
    v11 = v8 + 32;
  if (*(_QWORD *)(v9 + 64) - *(_QWORD *)(v9 + 56) < *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24))
    v11 = v9 + 32;
  if (*(_QWORD *)(v10 + 64) - *(_QWORD *)(v10 + 56) < *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24))
    v11 = v10 + 32;
  v388[0] = v11;
  v388[1] = v4;
  v363 = (_QWORD *)v6;
  v364 = (_QWORD *)v5;
  v388[2] = v5;
  v388[3] = v6;
  v388[4] = v7;
  v388[5] = v8;
  v360 = (_QWORD *)v9;
  v361 = (_QWORD *)v8;
  v388[6] = v9;
  v388[7] = v10;
  v12 = *(_QWORD **)(v11 + 24);
  v13 = *(_QWORD **)(v11 + 32);
  v389 = v12;
  if (v13 != v12
    && !gdc::RegistryQueryView<gdc::All<md::ls::SliceAssignmentT<(md::SliceType)7> const,md::ls::RenderableMeshVertexFormat const,md::ls::TileType const,md::ls::RequiresDepthPeel const,md::ls::MeshLayerTypeV const,md::ls::IntendedSceneLayer const,md::ls::PendingProcessing const>,gdc::Any<md::ls::AssociationHandle,md::ls::PrepassConstantDataHandle,md::ls::ShadowConstantDataHandle,md::ls::PreserveHeight,md::ls::HasMeshHandle,md::ls::PositionScaleInfoConstantDataHandle,md::ls::ViewConstantDataHandle,md::ls::TransformConstantDataHandle,md::ls::IndexRange,md::ls::NormalsHandle,md::ls::InstanceTransformHandle,md::ls::UVsHandle,md::ls::NeedsZBias,md::ls::ClippingConstantDataHandle,md::ls::IsMercator,md::ls::ElevationHandle>,gdc::None<>>::Iterator::isValid(v388))
  {
    v14 = v12 + 1;
    do
    {
      v12 = v14;
      v389 = v14;
      if (v14 == v13)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::SliceAssignmentT<(md::SliceType)7> const,md::ls::RenderableMeshVertexFormat const,md::ls::TileType const,md::ls::RequiresDepthPeel const,md::ls::MeshLayerTypeV const,md::ls::IntendedSceneLayer const,md::ls::PendingProcessing const>,gdc::Any<md::ls::AssociationHandle,md::ls::PrepassConstantDataHandle,md::ls::ShadowConstantDataHandle,md::ls::PreserveHeight,md::ls::HasMeshHandle,md::ls::PositionScaleInfoConstantDataHandle,md::ls::ViewConstantDataHandle,md::ls::TransformConstantDataHandle,md::ls::IndexRange,md::ls::NormalsHandle,md::ls::InstanceTransformHandle,md::ls::UVsHandle,md::ls::NeedsZBias,md::ls::ClippingConstantDataHandle,md::ls::IsMercator,md::ls::ElevationHandle>,gdc::None<>>::Iterator::isValid(v388);
      v14 = v12 + 1;
    }
    while (!isValid);
  }
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v362 = (_QWORD *)result;
  v343 = v17;
  while (v343 != v12)
  {
    *v362 = *v12;
    v18 = *v12;
    v19 = HIDWORD(*v12);
    v20 = *v12 >> 39;
    v21 = v364[4];
    if (v20 < (v364[5] - v21) >> 3
      && (v22 = *(_QWORD *)(v21 + 8 * v20)) != 0
      && (v23 = *(unsigned __int16 *)(v22 + 2 * (HIDWORD(v18) & 0x7F)),
          v25 = v364[7],
          v24 = v364[8],
          v23 < (v24 - v25) >> 3)
      && ((v26 = v25 + 8 * v23, v26 != v24) ? (v27 = *(_DWORD *)(v26 + 4) == (_DWORD)v19) : (v27 = 0), v27))
    {
      v28 = (_BYTE *)(v364[10] + v23);
    }
    else
    {
      v28 = (_BYTE *)v364[11];
    }
    v383 = v28;
    v29 = v363[4];
    if (v20 < (v363[5] - v29) >> 3
      && (v30 = *(_QWORD *)(v29 + 8 * v20)) != 0
      && (v31 = *(unsigned __int16 *)(v30 + 2 * (HIDWORD(v18) & 0x7F)),
          v33 = v363[7],
          v32 = v363[8],
          v31 < (v32 - v33) >> 3)
      && ((v34 = v33 + 8 * v31, v34 != v32) ? (v35 = *(_DWORD *)(v34 + 4) == (_DWORD)v19) : (v35 = 0), v35))
    {
      v36 = v363[10] + v31;
    }
    else
    {
      v36 = v363[11];
    }
    v37 = v361[4];
    if (v20 < (v361[5] - v37) >> 3
      && (v38 = *(_QWORD *)(v37 + 8 * v20)) != 0
      && (v39 = *(unsigned __int16 *)(v38 + 2 * (HIDWORD(v18) & 0x7F)),
          v41 = v361[7],
          v40 = v361[8],
          v39 < (v40 - v41) >> 3)
      && ((v42 = v41 + 8 * v39, v42 != v40) ? (v43 = *(_DWORD *)(v42 + 4) == (_DWORD)v19) : (v43 = 0), v43))
    {
      v44 = (unsigned __int8 *)(v361[10] + v39);
    }
    else
    {
      v44 = (unsigned __int8 *)v361[11];
    }
    v387 = v44;
    v45 = v360[4];
    if (v20 < (v360[5] - v45) >> 3
      && (v46 = *(_QWORD *)(v45 + 8 * v20)) != 0
      && (v47 = *(unsigned __int16 *)(v46 + 2 * (HIDWORD(v18) & 0x7F)),
          v49 = v360[7],
          v48 = v360[8],
          v47 < (v48 - v49) >> 3)
      && ((v50 = v49 + 8 * v47, v50 != v48) ? (v51 = *(_DWORD *)(v50 + 4) == (_DWORD)v19) : (v51 = 0), v51))
    {
      v52 = v360[11];
      v53 = v360[10] + v47;
    }
    else
    {
      v52 = v360[11];
      v53 = v52;
    }
    if (v53 == v52)
      v54 = 0;
    else
      v54 = (char *)v53;
    v55 = v359[4];
    if (v20 < (v359[5] - v55) >> 3
      && (v56 = *(_QWORD *)(v55 + 8 * v20)) != 0
      && (v57 = *(unsigned __int16 *)(v56 + 2 * (HIDWORD(v18) & 0x7F)),
          v59 = v359[7],
          v58 = v359[8],
          v57 < (v58 - v59) >> 3)
      && ((v60 = v59 + 8 * v57, v60 != v58) ? (v61 = *(_DWORD *)(v60 + 4) == (_DWORD)v19) : (v61 = 0), v61))
    {
      v62 = v359[11];
      v63 = v359[10] + 16 * v57;
    }
    else
    {
      v62 = v359[11];
      v63 = v62;
    }
    if (v63 == v62)
      v63 = 0;
    v385 = (unint64_t *)v63;
    v64 = v358[4];
    if (v20 < (v358[5] - v64) >> 3
      && (v65 = *(_QWORD *)(v64 + 8 * v20)) != 0
      && (v66 = *(unsigned __int16 *)(v65 + 2 * (HIDWORD(v18) & 0x7F)),
          v68 = v358[7],
          v67 = v358[8],
          v66 < (v67 - v68) >> 3)
      && ((v69 = v68 + 8 * v66, v69 != v67) ? (v70 = *(_DWORD *)(v69 + 4) == (_DWORD)v19) : (v70 = 0), v70))
    {
      v71 = v358[11];
      v72 = v358[10] + 8 * v66;
    }
    else
    {
      v71 = v358[11];
      v72 = v71;
    }
    if (v72 == v71)
      v73 = 0;
    else
      v73 = (uint64_t *)v72;
    v74 = v357[4];
    v365 = (unsigned __int8 *)v36;
    if (v20 < (v357[5] - v74) >> 3
      && (v75 = *(_QWORD *)(v74 + 8 * v20)) != 0
      && (v76 = *(unsigned __int16 *)(v75 + 2 * (HIDWORD(v18) & 0x7F)),
          v78 = v357[7],
          v77 = v357[8],
          v76 < (v77 - v78) >> 3)
      && ((v79 = v78 + 8 * v76, v79 != v77) ? (v80 = *(_DWORD *)(v79 + 4) == (_DWORD)v19) : (v80 = 0), v80))
    {
      v81 = v357[11];
      v82 = v357[10] + 8 * v76;
    }
    else
    {
      v81 = v357[11];
      v82 = v81;
    }
    if (v82 == v81)
      v83 = 0;
    else
      v83 = (uint64_t *)v82;
    v84 = v356[4];
    if (v20 < (v356[5] - v84) >> 3
      && (v85 = *(_QWORD *)(v84 + 8 * v20)) != 0
      && (v86 = *(unsigned __int16 *)(v85 + 2 * (HIDWORD(v18) & 0x7F)),
          v88 = v356[7],
          v87 = v356[8],
          v86 < (v87 - v88) >> 3)
      && (v89 = v88 + 8 * v86, v89 != v87)
      && *(_DWORD *)(v89 + 4) == (_DWORD)v19)
    {
      v90 = v356[11];
      v91 = v356[10] + v86;
    }
    else
    {
      v90 = v356[11];
      v91 = v90;
    }
    v92 = HasMesh[4];
    if (v20 < (HasMesh[5] - v92) >> 3
      && (v93 = *(_QWORD *)(v92 + 8 * v20)) != 0
      && (v94 = *(unsigned __int16 *)(v93 + 2 * (HIDWORD(v18) & 0x7F)),
          v96 = HasMesh[7],
          v95 = HasMesh[8],
          v94 < (v95 - v96) >> 3)
      && (v97 = v96 + 8 * v94, v97 != v95)
      && *(_DWORD *)(v97 + 4) == (_DWORD)v19)
    {
      v98 = HasMesh[11];
      v99 = HasMesh[10] + 8 * v94;
    }
    else
    {
      v98 = HasMesh[11];
      v99 = v98;
    }
    if (v99 == v98)
      v100 = 0;
    else
      v100 = (uint64_t *)v99;
    v101 = v354[4];
    if (v20 < (v354[5] - v101) >> 3
      && (v102 = *(_QWORD *)(v101 + 8 * v20)) != 0
      && (v103 = *(unsigned __int16 *)(v102 + 2 * (HIDWORD(v18) & 0x7F)),
          v105 = v354[7],
          v104 = v354[8],
          v103 < (v104 - v105) >> 3)
      && (v106 = v105 + 8 * v103, v106 != v104)
      && *(_DWORD *)(v106 + 4) == (_DWORD)v19)
    {
      v107 = v354[11];
      v108 = v354[10] + 16 * v103;
    }
    else
    {
      v107 = v354[11];
      v108 = v107;
    }
    if (v108 == v107)
      v108 = 0;
    v380 = v108;
    v109 = v353[4];
    if (v20 < (v353[5] - v109) >> 3
      && (v110 = *(_QWORD *)(v109 + 8 * v20)) != 0
      && (v111 = *(unsigned __int16 *)(v110 + 2 * (HIDWORD(v18) & 0x7F)),
          v113 = v353[7],
          v112 = v353[8],
          v111 < (v112 - v113) >> 3)
      && (v114 = v113 + 8 * v111, v114 != v112)
      && *(_DWORD *)(v114 + 4) == (_DWORD)v19)
    {
      v115 = v353[11];
      v116 = v353[10] + 8 * v111;
    }
    else
    {
      v115 = v353[11];
      v116 = v115;
    }
    if (v116 == v115)
      v116 = 0;
    v375 = (uint64_t *)v116;
    v117 = v352[4];
    if (v20 < (v352[5] - v117) >> 3
      && (v118 = *(_QWORD *)(v117 + 8 * v20)) != 0
      && (v119 = *(unsigned __int16 *)(v118 + 2 * (HIDWORD(v18) & 0x7F)),
          v121 = v352[7],
          v120 = v352[8],
          v119 < (v120 - v121) >> 3)
      && (v122 = v121 + 8 * v119, v122 != v120)
      && *(_DWORD *)(v122 + 4) == (_DWORD)v19)
    {
      v123 = v352[11];
      v124 = v352[10] + 8 * v119;
    }
    else
    {
      v123 = v352[11];
      v124 = v123;
    }
    if (v124 == v123)
      v124 = 0;
    v376 = (uint64_t *)v124;
    v125 = v351[4];
    if (v20 < (v351[5] - v125) >> 3
      && (v126 = *(_QWORD *)(v125 + 8 * v20)) != 0
      && (v127 = *(unsigned __int16 *)(v126 + 2 * (HIDWORD(v18) & 0x7F)),
          v129 = v351[7],
          v128 = v351[8],
          v127 < (v128 - v129) >> 3)
      && (v130 = v129 + 8 * v127, v130 != v128)
      && *(_DWORD *)(v130 + 4) == (_DWORD)v19)
    {
      v131 = v351[11];
      v132 = v351[10] + 16 * v127;
    }
    else
    {
      v131 = v351[11];
      v132 = v131;
    }
    if (v132 == v131)
      v133 = 0;
    else
      v133 = (__int128 *)v132;
    v134 = v350[4];
    if (v20 < (v350[5] - v134) >> 3
      && (v135 = *(_QWORD *)(v134 + 8 * v20)) != 0
      && (v136 = *(unsigned __int16 *)(v135 + 2 * (HIDWORD(v18) & 0x7F)),
          v138 = v350[7],
          v137 = v350[8],
          v136 < (v137 - v138) >> 3)
      && (v139 = v138 + 8 * v136, v139 != v137)
      && *(_DWORD *)(v139 + 4) == (_DWORD)v19)
    {
      v140 = v350[11];
      v141 = v350[10] + 8 * v136;
    }
    else
    {
      v140 = v350[11];
      v141 = v140;
    }
    if (v141 == v140)
      v142 = 0;
    else
      v142 = (uint64_t *)v141;
    v143 = v349[4];
    if (v20 < (v349[5] - v143) >> 3
      && (v144 = *(_QWORD *)(v143 + 8 * v20)) != 0
      && (v145 = *(unsigned __int16 *)(v144 + 2 * (HIDWORD(v18) & 0x7F)),
          v147 = v349[7],
          v146 = v349[8],
          v145 < (v146 - v147) >> 3)
      && (v148 = v147 + 8 * v145, v148 != v146)
      && *(_DWORD *)(v148 + 4) == (_DWORD)v19)
    {
      v149 = v349[11];
      v150 = v349[10] + 8 * v145;
    }
    else
    {
      v149 = v349[11];
      v150 = v149;
    }
    if (v150 == v149)
      v151 = 0;
    else
      v151 = (uint64_t *)v150;
    v152 = v348[4];
    if (v20 < (v348[5] - v152) >> 3
      && (v153 = *(_QWORD *)(v152 + 8 * v20)) != 0
      && (v154 = *(unsigned __int16 *)(v153 + 2 * (HIDWORD(v18) & 0x7F)),
          v156 = v348[7],
          v155 = v348[8],
          v154 < (v155 - v156) >> 3)
      && (v157 = v156 + 8 * v154, v157 != v155)
      && *(_DWORD *)(v157 + 4) == (_DWORD)v19)
    {
      v158 = v348[11];
      v159 = v348[10] + 8 * v154;
    }
    else
    {
      v158 = v348[11];
      v159 = v158;
    }
    if (v159 == v158)
      v160 = 0;
    else
      v160 = (uint64_t *)v159;
    v161 = v347[4];
    if (v20 < (v347[5] - v161) >> 3
      && (v162 = *(_QWORD *)(v161 + 8 * v20)) != 0
      && (v163 = *(unsigned __int16 *)(v162 + 2 * (HIDWORD(v18) & 0x7F)),
          v165 = v347[7],
          v164 = v347[8],
          v163 < (v164 - v165) >> 3)
      && (v166 = v165 + 8 * v163, v166 != v164)
      && *(_DWORD *)(v166 + 4) == (_DWORD)v19)
    {
      v167 = v347[11];
      v168 = v347[10] + v163;
    }
    else
    {
      v167 = v347[11];
      v168 = v167;
    }
    v169 = v346[4];
    if (v20 < (v346[5] - v169) >> 3
      && (v170 = *(_QWORD *)(v169 + 8 * v20)) != 0
      && (v171 = *(unsigned __int16 *)(v170 + 2 * (HIDWORD(v18) & 0x7F)),
          v173 = v346[7],
          v172 = v346[8],
          v171 < (v172 - v173) >> 3)
      && (v174 = v173 + 8 * v171, v174 != v172)
      && *(_DWORD *)(v174 + 4) == (_DWORD)v19)
    {
      v175 = v346[11];
      v176 = v346[10] + 8 * v171;
    }
    else
    {
      v175 = v346[11];
      v176 = v175;
    }
    if (v176 == v175)
      v177 = 0;
    else
      v177 = (uint64_t *)v176;
    v178 = v345[4];
    if (v20 < (v345[5] - v178) >> 3
      && (v179 = *(_QWORD *)(v178 + 8 * v20)) != 0
      && (v180 = *(unsigned __int16 *)(v179 + 2 * (HIDWORD(v18) & 0x7F)),
          v182 = v345[7],
          v181 = v345[8],
          v180 < (v181 - v182) >> 3)
      && (v183 = v182 + 8 * v180, v183 != v181)
      && *(_DWORD *)(v183 + 4) == (_DWORD)v19)
    {
      v184 = v345[11];
      v185 = v345[10] + v180;
    }
    else
    {
      v184 = v345[11];
      v185 = v184;
    }
    v186 = v344[4];
    if (v20 < (v344[5] - v186) >> 3
      && (v187 = *(_QWORD *)(v186 + 8 * v20)) != 0
      && (v188 = *(unsigned __int16 *)(v187 + 2 * (HIDWORD(v18) & 0x7F)),
          v190 = v344[7],
          v189 = v344[8],
          v188 < (v189 - v190) >> 3)
      && (v191 = v190 + 8 * v188, v191 != v189)
      && *(_DWORD *)(v191 + 4) == (_DWORD)v19)
    {
      v192 = v344[11];
      v193 = v344[10] + 8 * v188;
    }
    else
    {
      v192 = v344[11];
      v193 = v192;
    }
    if (v193 == v192)
      v194 = 0;
    else
      v194 = (uint64_t *)v193;
    v195 = **(_QWORD **)(a1 + 8);
    v196 = *(_QWORD **)v195;
    v197 = *(_QWORD **)(v195 + 8);
    v372 = v90;
    v373 = v91;
    v370 = v73;
    v371 = v83;
    v368 = v160;
    v369 = v177;
    v377 = v133;
    v366 = v194;
    v367 = v151;
    v374 = v142;
    v378 = v167;
    v379 = v168;
    v381 = v184;
    v382 = v185;
    if (v196 != v197)
    {
      while (*v196 != 0x41D4E9297E100630)
      {
        v196 += 5;
        if (v196 == v197)
          goto LABEL_219;
      }
    }
    if (v196 == v197)
    {
LABEL_219:
      v198 = 0;
    }
    else
    {
      v198 = (_QWORD *)v196[3];
      v199 = (std::__shared_weak_count *)v196[4];
      if (v199)
      {
        p_shared_owners = (unint64_t *)&v199->__shared_owners_;
        do
          v201 = __ldxr(p_shared_owners);
        while (__stxr(v201 + 1, p_shared_owners));
        do
          v202 = __ldaxr(p_shared_owners);
        while (__stlxr(v202 - 1, p_shared_owners));
        if (!v202)
        {
          ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
          std::__shared_weak_count::__release_weak(v199);
        }
      }
    }
    v384 = v198[1320];
    if (!v384)
    {
      v392 = (uint64_t (**)())(v198[1312] + 1992);
      v384 = geo::packed_array<md::RenderStateStorage,geo::handle<md::RenderStateItem>>::push_back(v198 + 91, &v392);
      *(int64x2_t *)v395 = vdupq_n_s64(1uLL);
      v395[16] = 1;
      std::__hash_table<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::hash<geo::handle<md::RenderStateItem>>,std::equal_to<geo::handle<md::RenderStateItem>>,true>,std::__unordered_map_equal<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::equal_to<geo::handle<md::RenderStateItem>>,std::hash<geo::handle<md::RenderStateItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::RenderStateItem>,geo::handle<md::RenderStateItem> const&,md::Counter>((uint64_t)(v198 + 86), v384, v384, (uint64_t)v395);
      v198[1320] = v384;
    }
    v203 = *v387;
    if (v203 == 3)
      v204 = 2;
    else
      v204 = v203 == 2;
    v205 = gdc::Registry::create(*(gdc::Registry **)(*(_QWORD *)(a1 + 8) + 8));
    v206 = **(_QWORD **)(a1 + 8);
    v207 = *(_QWORD **)v206;
    v208 = *(_QWORD **)(v206 + 8);
    if (v207 != v208)
    {
      while (*v207 != 0x41D4E9297E100630)
      {
        v207 += 5;
        if (v207 == v208)
        {
          v209 = 0;
          v210 = v54;
          goto LABEL_237;
        }
      }
    }
    v210 = v54;
    if (v207 == v208)
    {
      v209 = 0;
    }
    else
    {
      v209 = v207[3];
      v211 = (std::__shared_weak_count *)v207[4];
      if (v211)
      {
        v212 = (unint64_t *)&v211->__shared_owners_;
        do
          v213 = __ldxr(v212);
        while (__stxr(v213 + 1, v212));
        do
          v214 = __ldaxr(v212);
        while (__stlxr(v214 - 1, v212));
        if (!v214)
        {
          ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
          std::__shared_weak_count::__release_weak(v211);
        }
      }
    }
LABEL_237:
    RenderItem = md::VKMRenderResourcesStore::createRenderItem(v209, v385);
    v217 = v216;
    v218 = *(_QWORD **)(a1 + 8);
    v219 = operator new(0x28uLL);
    *v219 = &off_1E427DAA0;
    v219[1] = RenderItem;
    v219[2] = v217;
    v219[3] = 91;
    v219[4] = v205;
    v396 = v219;
    v394 = 0;
    v397 = 0;
    ecs2::Runtime::queueCommand(v218, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
    v397 = -1;
    v220 = v394;
    if (v394 == &v392)
    {
      v220 = &v392;
      v221 = 4;
    }
    else
    {
      if (!v394)
        goto LABEL_244;
      v221 = 5;
    }
    (*v220)[v221]();
LABEL_244:
    v222 = *(_QWORD **)(a1 + 8);
    v392 = &off_1E427E550;
    *(_QWORD *)&v393 = 0;
    *((_QWORD *)&v393 + 1) = v205;
    v394 = &v392;
    v396 = v395;
    *(_QWORD *)v395 = &off_1E427E550;
    *(_OWORD *)&v395[8] = v393;
    v397 = 0;
    ecs2::Runtime::queueCommand(v222, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
    v397 = -1;
    v223 = v394;
    if (v394 == &v392)
    {
      v223 = &v392;
      v224 = 4;
    }
    else
    {
      if (!v394)
        goto LABEL_251;
      v224 = 5;
    }
    (*v223)[v224]();
LABEL_251:
    v225 = *(_QWORD **)(a1 + 8);
    v392 = &off_1E427EF28;
    *(_QWORD *)&v393 = 0;
    *((_QWORD *)&v393 + 1) = v205;
    v394 = &v392;
    v396 = v395;
    *(_QWORD *)v395 = &off_1E427EF28;
    *(_OWORD *)&v395[8] = v393;
    v397 = 0;
    ecs2::Runtime::queueCommand(v225, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
    v397 = -1;
    v226 = v394;
    if (v394 == &v392)
    {
      v226 = &v392;
      v227 = 4;
    }
    else
    {
      if (!v394)
        goto LABEL_258;
      v227 = 5;
    }
    (*v226)[v227]();
LABEL_258:
    v228 = *(_QWORD **)(a1 + 8);
    v392 = &off_1E427EE08;
    *(_QWORD *)&v393 = v205 << 32;
    v386 = v205 << 32;
    DWORD2(v393) = HIDWORD(v205);
    v394 = &v392;
    *(_QWORD *)v395 = &off_1E427EE08;
    v396 = v395;
    *(_QWORD *)&v395[8] = v205 << 32;
    *(_DWORD *)&v395[16] = HIDWORD(v205);
    v397 = 0;
    ecs2::Runtime::queueCommand(v228, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
    v397 = -1;
    v229 = v394;
    if (v394 == &v392)
    {
      v229 = &v392;
      v230 = 4;
    }
    else
    {
      if (!v394)
        goto LABEL_265;
      v230 = 5;
    }
    (*v229)[v230]();
LABEL_265:
    v231 = *(_QWORD **)(a1 + 8);
    v232 = operator new(0x28uLL);
    *v232 = &off_1E427E508;
    v232[1] = 0xB1EC8A230021F56BLL;
    v232[2] = "md::ls::DepthPeeledPassItem]";
    v232[3] = 27;
    v232[4] = v205;
    v396 = v232;
    v394 = 0;
    v397 = 0;
    ecs2::Runtime::queueCommand(v231, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
    v397 = -1;
    v233 = v394;
    if (v394 == &v392)
    {
      v233 = &v392;
      v234 = 4;
    }
    else
    {
      if (!v394)
        goto LABEL_272;
      v234 = 5;
    }
    (*v233)[v234]();
LABEL_272:
    v235 = *v210;
    v236 = *(_QWORD **)(a1 + 8);
    v237 = operator new(0x28uLL);
    *(_QWORD *)v237 = &off_1E427EFB8;
    v237[8] = v235;
    *((_QWORD *)v237 + 2) = 9;
    *((_QWORD *)v237 + 3) = v204;
    *((_QWORD *)v237 + 4) = v205;
    v396 = v237;
    v394 = 0;
    v397 = 0;
    ecs2::Runtime::queueCommand(v236, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
    v397 = -1;
    v238 = v394;
    if (v394 == &v392)
    {
      v238 = &v392;
      v239 = 4;
    }
    else
    {
      if (!v394)
        goto LABEL_279;
      v239 = 5;
    }
    (*v238)[v239]();
LABEL_279:
    addIntendedSceneLayer<ecs2::Runtime>(*(_QWORD **)(a1 + 8), v205, *v210);
    v240 = *(_QWORD **)(a1 + 8);
    v392 = &off_1E427EF70;
    *(_QWORD *)&v393 = 7;
    *((_QWORD *)&v393 + 1) = v205;
    v394 = &v392;
    v396 = v395;
    *(_QWORD *)v395 = &off_1E427EF70;
    *(_OWORD *)&v395[8] = v393;
    v397 = 0;
    ecs2::Runtime::queueCommand(v240, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
    v397 = -1;
    v241 = v394;
    if (v394 == &v392)
    {
      v241 = &v392;
      v242 = 4;
    }
    else
    {
      if (!v394)
        goto LABEL_286;
      v242 = 5;
    }
    (*v241)[v242]();
LABEL_286:
    if (*v383 == 1)
    {
      v243 = *(_QWORD **)(a1 + 8);
      v392 = &off_1E427D548;
      *(_QWORD *)&v393 = v205 << 32;
      DWORD2(v393) = HIDWORD(v205);
      v394 = &v392;
      *(_QWORD *)v395 = &off_1E427D548;
      v396 = v395;
      *(_QWORD *)&v395[8] = v205 << 32;
      *(_DWORD *)&v395[16] = HIDWORD(v205);
      v397 = 0;
      ecs2::Runtime::queueCommand(v243, (uint64_t)v395);
      if (v397 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
      v397 = -1;
      v244 = v394;
      if (v394 == &v392)
      {
        v244 = &v392;
        v245 = 4;
        goto LABEL_293;
      }
      if (v394)
      {
        v245 = 5;
LABEL_293:
        (*v244)[v245]();
      }
    }
    v246 = *(_QWORD **)(a1 + 8);
    if (v382 != v381 && v382)
    {
      v392 = &off_1E427D5D8;
      *(_QWORD *)&v393 = v205 << 32;
      DWORD2(v393) = HIDWORD(v205);
      v394 = &v392;
      *(_QWORD *)v395 = &off_1E427D5D8;
      goto LABEL_305;
    }
    v392 = &off_1E427DC98;
    *(_QWORD *)&v393 = v205 << 32;
    DWORD2(v393) = HIDWORD(v205);
    v394 = &v392;
    *(_QWORD *)v395 = &off_1E427DC98;
    v396 = v395;
    *(_QWORD *)&v395[8] = v205 << 32;
    *(_DWORD *)&v395[16] = HIDWORD(v205);
    v397 = 0;
    ecs2::Runtime::queueCommand(v246, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
    v397 = -1;
    v247 = v394;
    if (v394 == &v392)
    {
      v247 = &v392;
      v249 = 4;
      v248 = v365;
      goto LABEL_303;
    }
    v248 = v365;
    if (v394)
    {
      v249 = 5;
LABEL_303:
      (*v247)[v249]();
    }
    v246 = *(_QWORD **)(a1 + 8);
    v250 = v386 | *v248;
    v392 = &off_1E4281D48;
    *(_QWORD *)&v393 = v250;
    DWORD2(v393) = HIDWORD(v205);
    v394 = &v392;
    *(_QWORD *)v395 = &off_1E4281D48;
LABEL_305:
    v396 = v395;
    *(_QWORD *)&v395[8] = v393;
    *(_DWORD *)&v395[16] = DWORD2(v393);
    v397 = 0;
    ecs2::Runtime::queueCommand(v246, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
    v397 = -1;
    v251 = v394;
    if (v394 == &v392)
    {
      v251 = &v392;
      v252 = 4;
    }
    else
    {
      if (!v394)
        goto LABEL_312;
      v252 = 5;
    }
    (*v251)[v252]();
LABEL_312:
    v253 = **(_QWORD **)(a1 + 8);
    v254 = *(_QWORD **)v253;
    v255 = *(_QWORD **)(v253 + 8);
    if (v254 != v255)
    {
      while (*v254 != 0x41D4E9297E100630)
      {
        v254 += 5;
        if (v254 == v255)
          goto LABEL_323;
      }
    }
    if (v254 == v255)
    {
LABEL_323:
      v256 = 0;
    }
    else
    {
      v256 = v254[3];
      v257 = (std::__shared_weak_count *)v254[4];
      if (v257)
      {
        v258 = (unint64_t *)&v257->__shared_owners_;
        do
          v259 = __ldxr(v258);
        while (__stxr(v259 + 1, v258));
        do
          v260 = __ldaxr(v258);
        while (__stlxr(v260 - 1, v258));
        if (!v260)
        {
          ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
          std::__shared_weak_count::__release_weak(v257);
        }
      }
    }
    AssociationItemStorage = (_QWORD *)md::VKMRenderResourcesStore::getAssociationItemStorage(v256, *v385, 1);
    v262 = AssociationItemStorage;
    v264 = (unint64_t *)AssociationItemStorage[2];
    v263 = AssociationItemStorage[3];
    if ((unint64_t)v264 >= v263)
    {
      v266 = (char *)AssociationItemStorage[1];
      v267 = ((char *)v264 - v266) >> 3;
      v268 = v267 + 1;
      if ((unint64_t)(v267 + 1) >> 61)
        abort();
      v269 = v263 - (_QWORD)v266;
      if (v269 >> 2 > v268)
        v268 = v269 >> 2;
      if ((unint64_t)v269 >= 0x7FFFFFFFFFFFFFF8)
        v270 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v270 = v268;
      if (v270)
      {
        if (v270 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v271 = (char *)operator new(8 * v270);
      }
      else
      {
        v271 = 0;
      }
      v272 = (unint64_t *)&v271[8 * v267];
      *v272 = v205;
      v265 = v272 + 1;
      if (v264 != (unint64_t *)v266)
      {
        v273 = (char *)v264 - v266 - 8;
        if (v273 < 0x58)
          goto LABEL_525;
        if ((unint64_t)(v266 - v271) < 0x20)
          goto LABEL_525;
        v274 = (v273 >> 3) + 1;
        v275 = &v271[8 * v267 - 16];
        v276 = v264 - 2;
        v277 = v274 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v278 = *(_OWORD *)v276;
          *((_OWORD *)v275 - 1) = *((_OWORD *)v276 - 1);
          *(_OWORD *)v275 = v278;
          v275 -= 32;
          v276 -= 4;
          v277 -= 4;
        }
        while (v277);
        v272 -= v274 & 0x3FFFFFFFFFFFFFFCLL;
        v264 -= v274 & 0x3FFFFFFFFFFFFFFCLL;
        if (v274 != (v274 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_525:
          do
          {
            v279 = *--v264;
            *--v272 = v279;
          }
          while (v264 != (unint64_t *)v266);
        }
        v264 = (unint64_t *)v262[1];
      }
      v262[1] = v272;
      v262[2] = v265;
      v262[3] = &v271[8 * v270];
      if (v264)
        operator delete(v264);
    }
    else
    {
      *v264 = v205;
      v265 = v264 + 1;
    }
    v262[2] = v265;
    v280 = *(_QWORD **)(a1 + 8);
    v281 = (char *)operator new(0x38uLL);
    *((_QWORD *)v281 + 1) = 0;
    *((_QWORD *)v281 + 2) = 0;
    *(_QWORD *)v281 = &off_1E427E9D0;
    v281[24] = 0;
    *(_WORD *)(v281 + 25) = 257;
    *(_DWORD *)(v281 + 27) = 0;
    v281[31] = 2;
    *((_QWORD *)v281 + 4) = 0;
    v281[40] = 0;
    *(_QWORD *)(v281 + 44) = v205;
    v396 = v281;
    v394 = 0;
    v397 = 0;
    ecs2::Runtime::queueCommand(v280, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
    v397 = -1;
    v282 = v394;
    if (v394 == &v392)
    {
      v282 = &v392;
      v283 = 4;
    }
    else
    {
      if (!v394)
        goto LABEL_353;
      v283 = 5;
    }
    (*v282)[v283]();
LABEL_353:
    v284 = *(_QWORD **)(a1 + 8);
    v392 = &off_1E427D938;
    *(_QWORD *)&v393 = v384;
    *((_QWORD *)&v393 + 1) = v205;
    v394 = &v392;
    v396 = v395;
    *(_QWORD *)v395 = &off_1E427D938;
    *(_OWORD *)&v395[8] = v393;
    v397 = 0;
    ecs2::Runtime::queueCommand(v284, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
    v397 = -1;
    v285 = v394;
    if (v394 == &v392)
    {
      v285 = &v392;
      v286 = 4;
    }
    else
    {
      if (!v394)
        goto LABEL_360;
      v286 = 5;
    }
    (*v285)[v286]();
LABEL_360:
    v287 = *(_QWORD **)(a1 + 8);
    v392 = &off_1E427E598;
    *(_QWORD *)&v393 = 0;
    *((_QWORD *)&v393 + 1) = v205;
    v394 = &v392;
    v396 = v395;
    *(_QWORD *)v395 = &off_1E427E598;
    *(_OWORD *)&v395[8] = v393;
    v397 = 0;
    ecs2::Runtime::queueCommand(v287, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
    v397 = -1;
    v288 = v394;
    if (v394 == &v392)
    {
      v288 = &v392;
      v289 = 4;
    }
    else
    {
      if (!v394)
        goto LABEL_367;
      v289 = 5;
    }
    (*v288)[v289]();
LABEL_367:
    v290 = *(_QWORD **)(a1 + 8);
    v392 = &off_1E427E8B0;
    *(_QWORD *)&v393 = v205 << 32;
    DWORD2(v393) = HIDWORD(v205);
    v394 = &v392;
    *(_QWORD *)v395 = &off_1E427E8B0;
    v396 = v395;
    *(_QWORD *)&v395[8] = v205 << 32;
    *(_DWORD *)&v395[16] = HIDWORD(v205);
    v397 = 0;
    ecs2::Runtime::queueCommand(v290, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
    v397 = -1;
    v291 = v394;
    if (v394 == &v392)
    {
      v291 = &v392;
      v292 = 4;
    }
    else
    {
      if (!v394)
        goto LABEL_374;
      v292 = 5;
    }
    (*v291)[v292]();
LABEL_374:
    v293 = *(_QWORD **)(a1 + 8);
    v392 = &off_1E427F9D8;
    *(_QWORD *)&v393 = v386 | 2;
    DWORD2(v393) = HIDWORD(v205);
    v394 = &v392;
    *(_QWORD *)v395 = &off_1E427F9D8;
    v396 = v395;
    *(_QWORD *)&v395[8] = v386 | 2;
    *(_DWORD *)&v395[16] = HIDWORD(v205);
    v397 = 0;
    ecs2::Runtime::queueCommand(v293, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
    v397 = -1;
    v294 = v394;
    if (v394 == &v392)
    {
      v294 = &v392;
      v295 = 4;
    }
    else
    {
      if (!v394)
        goto LABEL_381;
      v295 = 5;
    }
    (*v294)[v295]();
LABEL_381:
    v296 = *(_QWORD **)(a1 + 8);
    v392 = &off_1E4281E68;
    *(_QWORD *)&v393 = v205 << 32;
    DWORD2(v393) = HIDWORD(v205);
    v394 = &v392;
    *(_QWORD *)v395 = &off_1E4281E68;
    v396 = v395;
    *(_QWORD *)&v395[8] = v205 << 32;
    *(_DWORD *)&v395[16] = HIDWORD(v205);
    v397 = 0;
    ecs2::Runtime::queueCommand(v296, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
    v397 = -1;
    v297 = v394;
    if (v394 == &v392)
    {
      v297 = &v392;
      v298 = 4;
    }
    else
    {
      if (!v394)
        goto LABEL_388;
      v298 = 5;
    }
    (*v297)[v298]();
LABEL_388:
    v299 = *(_QWORD **)(a1 + 8);
    v390 = *(_OWORD *)v385;
    v300 = (char *)operator new(0x20uLL);
    *(_QWORD *)v300 = &off_1E427E8F8;
    *(_OWORD *)(v300 + 8) = v390;
    *((_QWORD *)v300 + 3) = v205;
    v396 = v300;
    v394 = 0;
    v397 = 0;
    ecs2::Runtime::queueCommand(v299, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(char *, _BYTE *))off_1E42FB340[v397])(&v391, v395);
    v397 = -1;
    result = (uint64_t)v394;
    if (v394 == &v392)
    {
      result = (uint64_t)&v392;
      v301 = 4;
      goto LABEL_394;
    }
    if (v394)
    {
      v301 = 5;
LABEL_394:
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v301))();
    }
    if (v379 != v378 && v379)
    {
      v302 = *(_QWORD **)(a1 + 8);
      v392 = &off_1E427D6B0;
      *(_QWORD *)&v393 = v205 << 32;
      DWORD2(v393) = HIDWORD(v205);
      v394 = &v392;
      *(_QWORD *)v395 = &off_1E427D6B0;
      v396 = v395;
      *(_QWORD *)&v395[8] = v205 << 32;
      *(_DWORD *)&v395[16] = HIDWORD(v205);
      v397 = 0;
      ecs2::Runtime::queueCommand(v302, (uint64_t)v395);
      if (v397 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
      v397 = -1;
      result = (uint64_t)v394;
      if (v394 == &v392)
      {
        result = (uint64_t)&v392;
        v303 = 4;
      }
      else
      {
        if (!v394)
          goto LABEL_404;
        v303 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v303))();
    }
LABEL_404:
    if (!v380)
      goto LABEL_412;
    v304 = *(_QWORD **)(a1 + 8);
    *(_QWORD *)&v390 = *(_QWORD *)v380;
    BYTE8(v390) = *(_BYTE *)(v380 + 8);
    *(_QWORD *)v395 = v390;
    v395[8] = BYTE8(v390);
    v305 = (char *)operator new(0x20uLL);
    *(_QWORD *)v305 = &off_1E4281B98;
    *(_OWORD *)(v305 + 8) = *(_OWORD *)v395;
    *((_QWORD *)v305 + 3) = v205;
    v396 = v305;
    v394 = 0;
    v397 = 0;
    ecs2::Runtime::queueCommand(v304, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(char *, _BYTE *))off_1E42FB340[v397])(&v391, v395);
    v397 = -1;
    result = (uint64_t)v394;
    if (v394 == &v392)
    {
      result = (uint64_t)&v392;
      v306 = 4;
    }
    else
    {
      if (!v394)
        goto LABEL_412;
      v306 = 5;
    }
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v306))();
LABEL_412:
    if (!v100)
      goto LABEL_420;
    v307 = *(_QWORD **)(a1 + 8);
    v308 = *v100;
    v392 = &off_1E427DB78;
    *(_QWORD *)&v393 = v308;
    *((_QWORD *)&v393 + 1) = v205;
    v394 = &v392;
    v396 = v395;
    *(_QWORD *)v395 = &off_1E427DB78;
    *(_OWORD *)&v395[8] = v393;
    v397 = 0;
    ecs2::Runtime::queueCommand(v307, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
    v397 = -1;
    result = (uint64_t)v394;
    if (v394 == &v392)
    {
      result = (uint64_t)&v392;
      v309 = 4;
    }
    else
    {
      if (!v394)
        goto LABEL_420;
      v309 = 5;
    }
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v309))();
LABEL_420:
    if (!v375)
      goto LABEL_428;
    v310 = *(_QWORD **)(a1 + 8);
    v311 = *v375;
    v392 = &off_1E427FA68;
    *(_QWORD *)&v393 = v311;
    *((_QWORD *)&v393 + 1) = v205;
    v394 = &v392;
    v396 = v395;
    *(_QWORD *)v395 = &off_1E427FA68;
    *(_OWORD *)&v395[8] = v393;
    v397 = 0;
    ecs2::Runtime::queueCommand(v310, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
    v397 = -1;
    result = (uint64_t)v394;
    if (v394 == &v392)
    {
      result = (uint64_t)&v392;
      v312 = 4;
    }
    else
    {
      if (!v394)
        goto LABEL_428;
      v312 = 5;
    }
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v312))();
LABEL_428:
    if (!v376)
      goto LABEL_436;
    v313 = *(_QWORD **)(a1 + 8);
    v314 = *v376;
    v392 = &off_1E4280998;
    *(_QWORD *)&v393 = v314;
    *((_QWORD *)&v393 + 1) = v205;
    v394 = &v392;
    v396 = v395;
    *(_QWORD *)v395 = &off_1E4280998;
    *(_OWORD *)&v395[8] = v393;
    v397 = 0;
    ecs2::Runtime::queueCommand(v313, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
    v397 = -1;
    result = (uint64_t)v394;
    if (v394 == &v392)
    {
      result = (uint64_t)&v392;
      v315 = 4;
    }
    else
    {
      if (!v394)
        goto LABEL_436;
      v315 = 5;
    }
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v315))();
LABEL_436:
    if (!v374)
      goto LABEL_444;
    v316 = *(_QWORD **)(a1 + 8);
    v317 = *v374;
    v392 = &off_1E427DD70;
    *(_QWORD *)&v393 = v317;
    *((_QWORD *)&v393 + 1) = v205;
    v394 = &v392;
    v396 = v395;
    *(_QWORD *)v395 = &off_1E427DD70;
    *(_OWORD *)&v395[8] = v393;
    v397 = 0;
    ecs2::Runtime::queueCommand(v316, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
    v397 = -1;
    result = (uint64_t)v394;
    if (v394 == &v392)
    {
      result = (uint64_t)&v392;
      v318 = 4;
    }
    else
    {
      if (!v394)
        goto LABEL_444;
      v318 = 5;
    }
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v318))();
LABEL_444:
    if (!v377)
      goto LABEL_452;
    v319 = *(_QWORD **)(a1 + 8);
    v390 = *v377;
    v320 = (char *)operator new(0x20uLL);
    *(_QWORD *)v320 = &off_1E427D500;
    *(_OWORD *)(v320 + 8) = v390;
    *((_QWORD *)v320 + 3) = v205;
    v396 = v320;
    v394 = 0;
    v397 = 0;
    ecs2::Runtime::queueCommand(v319, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(char *, _BYTE *))off_1E42FB340[v397])(&v391, v395);
    v397 = -1;
    result = (uint64_t)v394;
    if (v394 == &v392)
    {
      result = (uint64_t)&v392;
      v321 = 4;
    }
    else
    {
      if (!v394)
        goto LABEL_452;
      v321 = 5;
    }
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v321))();
LABEL_452:
    if (!v367)
      goto LABEL_460;
    v322 = *(_QWORD **)(a1 + 8);
    v323 = *v367;
    v392 = &off_1E427FAB0;
    *(_QWORD *)&v393 = v323;
    *((_QWORD *)&v393 + 1) = v205;
    v394 = &v392;
    v396 = v395;
    *(_QWORD *)v395 = &off_1E427FAB0;
    *(_OWORD *)&v395[8] = v393;
    v397 = 0;
    ecs2::Runtime::queueCommand(v322, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
    v397 = -1;
    result = (uint64_t)v394;
    if (v394 == &v392)
    {
      result = (uint64_t)&v392;
      v324 = 4;
    }
    else
    {
      if (!v394)
        goto LABEL_460;
      v324 = 5;
    }
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v324))();
LABEL_460:
    if (!v368)
      goto LABEL_468;
    v325 = *(_QWORD **)(a1 + 8);
    v326 = *v368;
    v392 = &off_1E4281F40;
    *(_QWORD *)&v393 = v326;
    *((_QWORD *)&v393 + 1) = v205;
    v394 = &v392;
    v396 = v395;
    *(_QWORD *)v395 = &off_1E4281F40;
    *(_OWORD *)&v395[8] = v393;
    v397 = 0;
    ecs2::Runtime::queueCommand(v325, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
    v397 = -1;
    result = (uint64_t)v394;
    if (v394 == &v392)
    {
      result = (uint64_t)&v392;
      v327 = 4;
    }
    else
    {
      if (!v394)
        goto LABEL_468;
      v327 = 5;
    }
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v327))();
LABEL_468:
    if (!v366)
      goto LABEL_476;
    v328 = *(_QWORD **)(a1 + 8);
    v329 = *v366;
    v392 = &off_1E427E118;
    *(_QWORD *)&v393 = v329;
    *((_QWORD *)&v393 + 1) = v205;
    v394 = &v392;
    v396 = v395;
    *(_QWORD *)v395 = &off_1E427E118;
    *(_OWORD *)&v395[8] = v393;
    v397 = 0;
    ecs2::Runtime::queueCommand(v328, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
    v397 = -1;
    result = (uint64_t)v394;
    if (v394 == &v392)
    {
      result = (uint64_t)&v392;
      v330 = 4;
    }
    else
    {
      if (!v394)
        goto LABEL_476;
      v330 = 5;
    }
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v330))();
LABEL_476:
    if (!v370)
      goto LABEL_484;
    v331 = *(_QWORD **)(a1 + 8);
    v332 = *v370;
    v392 = &off_1E42803F8;
    *(_QWORD *)&v393 = v332;
    *((_QWORD *)&v393 + 1) = v205;
    v394 = &v392;
    v396 = v395;
    *(_QWORD *)v395 = &off_1E42803F8;
    *(_OWORD *)&v395[8] = v393;
    v397 = 0;
    ecs2::Runtime::queueCommand(v331, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
    v397 = -1;
    result = (uint64_t)v394;
    if (v394 == &v392)
    {
      result = (uint64_t)&v392;
      v333 = 4;
    }
    else
    {
      if (!v394)
        goto LABEL_484;
      v333 = 5;
    }
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v333))();
LABEL_484:
    if (v371)
    {
      v334 = *(_QWORD **)(a1 + 8);
      v335 = *v371;
      v392 = &off_1E4280248;
      *(_QWORD *)&v393 = v335;
      *((_QWORD *)&v393 + 1) = v205;
      v394 = &v392;
      v396 = v395;
      *(_QWORD *)v395 = &off_1E4280248;
      *(_OWORD *)&v395[8] = v393;
      v397 = 0;
      ecs2::Runtime::queueCommand(v334, (uint64_t)v395);
      if (v397 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
      v397 = -1;
      result = (uint64_t)v394;
      if (v394 == &v392)
      {
        result = (uint64_t)&v392;
        v336 = 4;
        goto LABEL_491;
      }
      if (v394)
      {
        v336 = 5;
LABEL_491:
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v336))();
      }
    }
    if (v373 != v372 && v373)
    {
      v337 = *(_QWORD **)(a1 + 8);
      v392 = &off_1E427DF68;
      *(_QWORD *)&v393 = v205 << 32;
      DWORD2(v393) = HIDWORD(v205);
      v394 = &v392;
      *(_QWORD *)v395 = &off_1E427DF68;
      v396 = v395;
      *(_QWORD *)&v395[8] = v205 << 32;
      *(_DWORD *)&v395[16] = HIDWORD(v205);
      v397 = 0;
      ecs2::Runtime::queueCommand(v337, (uint64_t)v395);
      if (v397 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
      v397 = -1;
      result = (uint64_t)v394;
      if (v394 == &v392)
      {
        result = (uint64_t)&v392;
        v338 = 4;
      }
      else
      {
        if (!v394)
          goto LABEL_501;
        v338 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v338))();
    }
LABEL_501:
    if (!v369)
      goto LABEL_509;
    v339 = *(_QWORD **)(a1 + 8);
    v340 = *v369;
    v392 = &off_1E4280440;
    *(_QWORD *)&v393 = v340;
    *((_QWORD *)&v393 + 1) = v205;
    v394 = &v392;
    v396 = v395;
    *(_QWORD *)v395 = &off_1E4280440;
    *(_OWORD *)&v395[8] = v393;
    v397 = 0;
    ecs2::Runtime::queueCommand(v339, (uint64_t)v395);
    if (v397 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v397])(&v390, v395);
    v397 = -1;
    result = (uint64_t)v394;
    if (v394 == &v392)
    {
      result = (uint64_t)&v392;
      v341 = 4;
    }
    else
    {
      if (!v394)
        goto LABEL_509;
      v341 = 5;
    }
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v341))();
LABEL_509:
    v12 = v389;
    v342 = *(_QWORD **)(v388[0] + 32);
    while (1)
    {
      v389 = ++v12;
      if (v12 == v342)
        break;
      result = gdc::RegistryQueryView<gdc::All<md::ls::SliceAssignmentT<(md::SliceType)7> const,md::ls::RenderableMeshVertexFormat const,md::ls::TileType const,md::ls::RequiresDepthPeel const,md::ls::MeshLayerTypeV const,md::ls::IntendedSceneLayer const,md::ls::PendingProcessing const>,gdc::Any<md::ls::AssociationHandle,md::ls::PrepassConstantDataHandle,md::ls::ShadowConstantDataHandle,md::ls::PreserveHeight,md::ls::HasMeshHandle,md::ls::PositionScaleInfoConstantDataHandle,md::ls::ViewConstantDataHandle,md::ls::TransformConstantDataHandle,md::ls::IndexRange,md::ls::NormalsHandle,md::ls::InstanceTransformHandle,md::ls::UVsHandle,md::ls::NeedsZBias,md::ls::ClippingConstantDataHandle,md::ls::IsMercator,md::ls::ElevationHandle>,gdc::None<>>::Iterator::isValid(v388);
      if ((_DWORD)result)
        goto LABEL_22;
    }
    v12 = v342;
LABEL_22:
    ;
  }
  *v362 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

BOOL gdc::RegistryQueryView<gdc::All<md::ls::SliceAssignmentT<(md::SliceType)7> const,md::ls::RenderableMeshVertexFormat const,md::ls::TileType const,md::ls::RequiresDepthPeel const,md::ls::MeshLayerTypeV const,md::ls::IntendedSceneLayer const,md::ls::PendingProcessing const>,gdc::Any<md::ls::AssociationHandle,md::ls::PrepassConstantDataHandle,md::ls::ShadowConstantDataHandle,md::ls::PreserveHeight,md::ls::HasMeshHandle,md::ls::PositionScaleInfoConstantDataHandle,md::ls::ViewConstantDataHandle,md::ls::TransformConstantDataHandle,md::ls::IndexRange,md::ls::NormalsHandle,md::ls::InstanceTransformHandle,md::ls::UVsHandle,md::ls::NeedsZBias,md::ls::ClippingConstantDataHandle,md::ls::IsMercator,md::ls::ElevationHandle>,gdc::None<>>::Iterator::isValid(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v1 = (_QWORD *)a1[1];
  v2 = *(unsigned int *)(a1[9] + 4);
  v3 = v2 >> 7;
  v4 = v1[4];
  if (v2 >> 7 >= (v1[5] - v4) >> 3)
    return 0;
  v5 = *(_QWORD *)(v4 + 8 * v3);
  if (!v5)
    return 0;
  v6 = v2 & 0x7F;
  v7 = *(unsigned __int16 *)(v5 + 2 * v6);
  v10 = v1 + 7;
  v8 = v1[7];
  v9 = v10[1];
  if (v7 >= (v9 - v8) >> 3)
    return 0;
  v11 = v8 + 8 * v7;
  if (v11 == v9 || *(_DWORD *)(v11 + 4) != (_DWORD)v2)
    return 0;
  v13 = (_QWORD *)a1[2];
  v14 = v13[4];
  if (v3 >= (v13[5] - v14) >> 3)
    return 0;
  v15 = *(_QWORD *)(v14 + 8 * v3);
  if (!v15)
    return 0;
  v16 = *(unsigned __int16 *)(v15 + 2 * v6);
  v19 = v13 + 7;
  v17 = v13[7];
  v18 = v19[1];
  if (v16 >= (v18 - v17) >> 3)
    return 0;
  v20 = v17 + 8 * v16;
  if (v20 == v18 || *(_DWORD *)(v20 + 4) != (_DWORD)v2)
    return 0;
  v22 = (_QWORD *)a1[3];
  v23 = v22[4];
  if (v3 >= (v22[5] - v23) >> 3)
    return 0;
  v24 = *(_QWORD *)(v23 + 8 * v3);
  if (!v24)
    return 0;
  v25 = *(unsigned __int16 *)(v24 + 2 * v6);
  v28 = v22 + 7;
  v26 = v22[7];
  v27 = v28[1];
  if (v25 >= (v27 - v26) >> 3)
    return 0;
  v29 = v26 + 8 * v25;
  if (v29 == v27 || *(_DWORD *)(v29 + 4) != (_DWORD)v2)
    return 0;
  v31 = (_QWORD *)a1[4];
  v32 = v31[4];
  if (v3 >= (v31[5] - v32) >> 3)
    return 0;
  v33 = *(_QWORD *)(v32 + 8 * v3);
  if (!v33)
    return 0;
  v34 = *(unsigned __int16 *)(v33 + 2 * v6);
  v37 = v31 + 7;
  v35 = v31[7];
  v36 = v37[1];
  if (v34 >= (v36 - v35) >> 3)
    return 0;
  v38 = v35 + 8 * v34;
  if (v38 == v36 || *(_DWORD *)(v38 + 4) != (_DWORD)v2)
    return 0;
  v40 = (_QWORD *)a1[5];
  v41 = v40[4];
  if (v3 >= (v40[5] - v41) >> 3)
    return 0;
  v42 = *(_QWORD *)(v41 + 8 * v3);
  if (!v42)
    return 0;
  v43 = *(unsigned __int16 *)(v42 + 2 * v6);
  v45 = v40[7];
  v44 = v40[8];
  if (v43 >= (v44 - v45) >> 3)
    return 0;
  v46 = 0;
  v47 = v45 + 8 * v43;
  if (v47 == v44 || *(_DWORD *)(v47 + 4) != (_DWORD)v2)
    return v46;
  v48 = (_QWORD *)a1[6];
  v49 = v48[4];
  if (v3 >= (v48[5] - v49) >> 3)
    return 0;
  v50 = *(_QWORD *)(v49 + 8 * v3);
  if (!v50)
    return 0;
  v51 = *(unsigned __int16 *)(v50 + 2 * v6);
  v53 = v48[7];
  v52 = v48[8];
  if (v51 >= (v52 - v53) >> 3)
    return 0;
  v46 = 0;
  v54 = v53 + 8 * v51;
  if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v2)
  {
    v55 = (_QWORD *)a1[7];
    v56 = v55[4];
    if (v3 < (v55[5] - v56) >> 3 && (v57 = *(_QWORD *)(v56 + 8 * v3)) != 0)
    {
      v58 = *(unsigned __int16 *)(v57 + 2 * v6);
      v60 = v55[7];
      v59 = v55[8];
      if (v58 < (v59 - v60) >> 3)
      {
        v61 = v60 + 8 * v58;
        if (*(_DWORD *)(v61 + 4) == (_DWORD)v2)
          v62 = v61;
        else
          v62 = v55[8];
        return v62 != v59;
      }
    }
    else
    {
      v59 = v55[8];
    }
    v62 = v59;
    return v62 != v59;
  }
  return v46;
}

uint64_t gdc::Registry::storage<md::ls::RenderableMeshVertexFormat>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xE8C803AC798645E1;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xE8C803AC798645E1;
      if (*(_QWORD *)&v3 <= 0xE8C803AC798645E1)
        v5 = 0xE8C803AC798645E1 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xE8C803AC798645E1;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xE8C803AC798645E1)
            {
              if (v7[2] == 0xE8C803AC798645E1)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xE8C803AC798645E1)
          {
            if (v7[2] == 0xE8C803AC798645E1)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RenderableMeshVertexFormat]";
  *(_QWORD *)(v11 + 24) = 34;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273158;
  *(_QWORD *)(v11 + 8) = 0xE8C803AC798645E1;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xE8C803AC798645E1, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xE8C803AC798645E1;
  v15[1] = "md::ls::RenderableMeshVertexFormat]";
  v15[2] = 34;
  gdc::Registry::_registerStorageDataSignals(a1, 0xE8C803AC798645E1, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6F5900(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresDepthPeel>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCB7F6519084BB4D0;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCB7F6519084BB4D0;
      if (*(_QWORD *)&v3 <= 0xCB7F6519084BB4D0)
        v5 = 0xCB7F6519084BB4D0 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCB7F6519084BB4D0;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCB7F6519084BB4D0)
            {
              if (v7[2] == 0xCB7F6519084BB4D0)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCB7F6519084BB4D0)
          {
            if (v7[2] == 0xCB7F6519084BB4D0)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresDepthPeel]";
  *(_QWORD *)(v11 + 24) = 25;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272048;
  *(_QWORD *)(v11 + 8) = 0xCB7F6519084BB4D0;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCB7F6519084BB4D0, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCB7F6519084BB4D0;
  v15[1] = "md::ls::RequiresDepthPeel]";
  v15[2] = 25;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCB7F6519084BB4D0, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6F5B28(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::MeshLayerTypeV>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xECC498AF223943D5;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xECC498AF223943D5;
      if (*(_QWORD *)&v3 <= 0xECC498AF223943D5)
        v5 = 0xECC498AF223943D5 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xECC498AF223943D5;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xECC498AF223943D5)
            {
              if (v7[2] == 0xECC498AF223943D5)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xECC498AF223943D5)
          {
            if (v7[2] == 0xECC498AF223943D5)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::MeshLayerTypeV]";
  *(_QWORD *)(v11 + 24) = 22;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271778;
  *(_QWORD *)(v11 + 8) = 0xECC498AF223943D5;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xECC498AF223943D5, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xECC498AF223943D5;
  v15[1] = "md::ls::MeshLayerTypeV]";
  v15[2] = 22;
  gdc::Registry::_registerStorageDataSignals(a1, 0xECC498AF223943D5, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6F5D50(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::IntendedSceneLayer>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xEC2A00DC914732D7;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xEC2A00DC914732D7;
      if (*(_QWORD *)&v3 <= 0xEC2A00DC914732D7)
        v5 = 0xEC2A00DC914732D7 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xEC2A00DC914732D7;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xEC2A00DC914732D7)
            {
              if (v7[2] == 0xEC2A00DC914732D7)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xEC2A00DC914732D7)
          {
            if (v7[2] == 0xEC2A00DC914732D7)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::IntendedSceneLayer]";
  *(_QWORD *)(v11 + 24) = 26;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272168;
  *(_QWORD *)(v11 + 8) = 0xEC2A00DC914732D7;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xEC2A00DC914732D7, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xEC2A00DC914732D7;
  v15[1] = "md::ls::IntendedSceneLayer]";
  v15[2] = 26;
  gdc::Registry::_registerStorageDataSignals(a1, 0xEC2A00DC914732D7, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6F5F78(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayer>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayer>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayer>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayer>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::MeshLayerTypeV>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MeshLayerTypeV>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MeshLayerTypeV>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MeshLayerTypeV>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::RequiresDepthPeel>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresDepthPeel>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresDepthPeel>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresDepthPeel>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::RenderableMeshVertexFormat>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderableMeshVertexFormat>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RenderableMeshVertexFormat>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderableMeshVertexFormat>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForShadowPass>(md::ita::CreateTileClearRenderItemsForShadowPass &&)::{lambda(void)#2},std::allocator<md::ita::CreateTileClearRenderItemsForShadowPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForShadowPass>(md::ita::CreateTileClearRenderItemsForShadowPass &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForShadowPass>(md::ita::CreateTileClearRenderItemsForShadowPass &&)::{lambda(void)#2},std::allocator<md::ita::CreateTileClearRenderItemsForShadowPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForShadowPass>(md::ita::CreateTileClearRenderItemsForShadowPass &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288C18;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForShadowPass>(md::ita::CreateTileClearRenderItemsForShadowPass &&)::{lambda(void)#2},std::allocator<md::ita::CreateTileClearRenderItemsForShadowPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForShadowPass>(md::ita::CreateTileClearRenderItemsForShadowPass &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288C18;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForShadowPass>(md::ita::CreateTileClearRenderItemsForShadowPass &&)::{lambda(void)#2},std::allocator<md::ita::CreateTileClearRenderItemsForShadowPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForShadowPass>(md::ita::CreateTileClearRenderItemsForShadowPass &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForShadowPass>(md::ita::CreateTileClearRenderItemsForShadowPass &&)::{lambda(void)#1},std::allocator<md::ita::CreateTileClearRenderItemsForShadowPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForShadowPass>(md::ita::CreateTileClearRenderItemsForShadowPass &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForShadowPass>(md::ita::CreateTileClearRenderItemsForShadowPass &&)::{lambda(void)#1},std::allocator<md::ita::CreateTileClearRenderItemsForShadowPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForShadowPass>(md::ita::CreateTileClearRenderItemsForShadowPass &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288C60;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForShadowPass>(md::ita::CreateTileClearRenderItemsForShadowPass &&)::{lambda(void)#1},std::allocator<md::ita::CreateTileClearRenderItemsForShadowPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForShadowPass>(md::ita::CreateTileClearRenderItemsForShadowPass &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288C60;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForShadowPass>(md::ita::CreateTileClearRenderItemsForShadowPass &&)::{lambda(void)#1},std::allocator<md::ita::CreateTileClearRenderItemsForShadowPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForShadowPass>(md::ita::CreateTileClearRenderItemsForShadowPass &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0xC0uLL);
  a1[2] = (char *)(v2 + 24);
  *v2 = 0xE0AB1B46607846E6;
  v2[1] = "md::ls::EnteringView]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB4370;
  v2[4] = "md::ls::SupportsShadows]";
  v2[5] = 23;
  v2[6] = 0x24B7D588576BB14ELL;
  v2[7] = "md::ls::AssociationTileHandle]";
  v2[8] = 29;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 24)
  {
    *(_QWORD *)v3 = 0x695C99F828CA9E84;
    v2[10] = "md::ls::BaseMapTileHandle]";
    v2[11] = 25;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_92;
  if (0x5555555555555556 * (((char *)(v2 + 24) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 24) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 24) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_93;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x695C99F828CA9E84;
  *((_QWORD *)v10 + 1) = "md::ls::BaseMapTileHandle]";
  *((_QWORD *)v10 + 2) = 25;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0x414BF8D9069621AELL;
    *((_QWORD *)v4 + 1) = "md::ls::TileViewConstantDataHandle]";
    *((_QWORD *)v4 + 2) = 34;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_92;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_93;
    v20 = (char *)operator new(24 * v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0x414BF8D9069621AELL;
  *((_QWORD *)v21 + 1) = "md::ls::TileViewConstantDataHandle]";
  *((_QWORD *)v21 + 2) = 34;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
  v24 = (unint64_t)a1[2];
  if ((unint64_t)v14 < v24)
  {
    *(_QWORD *)v14 = 0xD270E8E58701C515;
    *((_QWORD *)v14 + 1) = "md::ls::TileTransformConstantDataHandle]";
    *((_QWORD *)v14 + 2) = 39;
    v25 = v14 + 24;
    goto LABEL_55;
  }
  v26 = *a1;
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3);
  v28 = v27 + 1;
  if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_92;
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x555555555555555)
    v30 = 0xAAAAAAAAAAAAAAALL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_93;
    v31 = (char *)operator new(24 * v30);
  }
  else
  {
    v31 = 0;
  }
  v32 = &v31[24 * v27];
  v33 = &v31[24 * v30];
  *(_QWORD *)v32 = 0xD270E8E58701C515;
  *((_QWORD *)v32 + 1) = "md::ls::TileTransformConstantDataHandle]";
  *((_QWORD *)v32 + 2) = 39;
  v25 = v32 + 24;
  if (v14 == v26)
  {
    *a1 = v32;
    a1[1] = v25;
    a1[2] = v33;
LABEL_54:
    operator delete(v14);
    goto LABEL_55;
  }
  do
  {
    v34 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v32 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v32 - 24) = v34;
    v32 -= 24;
    v14 -= 24;
  }
  while (v14 != v26);
  v14 = *a1;
  *a1 = v32;
  a1[1] = v25;
  a1[2] = v33;
  if (v14)
    goto LABEL_54;
LABEL_55:
  a1[1] = v25;
  v35 = (unint64_t)a1[2];
  if ((unint64_t)v25 < v35)
  {
    *(_QWORD *)v25 = 0xBCC33905201D8160;
    *((_QWORD *)v25 + 1) = "md::ls::TileMatrix]";
    *((_QWORD *)v25 + 2) = 18;
    v36 = v25 + 24;
    goto LABEL_73;
  }
  v37 = *a1;
  v38 = 0xAAAAAAAAAAAAAAABLL * ((v25 - *a1) >> 3);
  v39 = v38 + 1;
  if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_92;
  v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v37) >> 3);
  if (2 * v40 > v39)
    v39 = 2 * v40;
  if (v40 >= 0x555555555555555)
    v41 = 0xAAAAAAAAAAAAAAALL;
  else
    v41 = v39;
  if (v41)
  {
    if (v41 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_93;
    v42 = (char *)operator new(24 * v41);
  }
  else
  {
    v42 = 0;
  }
  v43 = &v42[24 * v38];
  v44 = &v42[24 * v41];
  *(_QWORD *)v43 = 0xBCC33905201D8160;
  *((_QWORD *)v43 + 1) = "md::ls::TileMatrix]";
  *((_QWORD *)v43 + 2) = 18;
  v36 = v43 + 24;
  if (v25 == v37)
  {
    *a1 = v43;
    a1[1] = v36;
    a1[2] = v44;
LABEL_72:
    operator delete(v25);
    goto LABEL_73;
  }
  do
  {
    v45 = *(_OWORD *)(v25 - 24);
    *((_QWORD *)v43 - 1) = *((_QWORD *)v25 - 1);
    *(_OWORD *)(v43 - 24) = v45;
    v43 -= 24;
    v25 -= 24;
  }
  while (v25 != v37);
  v25 = *a1;
  *a1 = v43;
  a1[1] = v36;
  a1[2] = v44;
  if (v25)
    goto LABEL_72;
LABEL_73:
  a1[1] = v36;
  v46 = (unint64_t)a1[2];
  if ((unint64_t)v36 < v46)
  {
    *(_QWORD *)v36 = 0xF2296D6406C155CBLL;
    *((_QWORD *)v36 + 1) = "md::ls::TileShadowConstantDataHandle]";
    *((_QWORD *)v36 + 2) = 36;
    v47 = v36 + 24;
    goto LABEL_91;
  }
  v48 = *a1;
  v49 = 0xAAAAAAAAAAAAAAABLL * ((v36 - *a1) >> 3);
  v50 = v49 + 1;
  if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_92:
    abort();
  v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - (_QWORD)v48) >> 3);
  if (2 * v51 > v50)
    v50 = 2 * v51;
  if (v51 >= 0x555555555555555)
    v52 = 0xAAAAAAAAAAAAAAALL;
  else
    v52 = v50;
  if (v52)
  {
    if (v52 <= 0xAAAAAAAAAAAAAAALL)
    {
      v53 = (char *)operator new(24 * v52);
      goto LABEL_85;
    }
LABEL_93:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v53 = 0;
LABEL_85:
  v54 = &v53[24 * v49];
  v55 = &v53[24 * v52];
  *(_QWORD *)v54 = 0xF2296D6406C155CBLL;
  *((_QWORD *)v54 + 1) = "md::ls::TileShadowConstantDataHandle]";
  *((_QWORD *)v54 + 2) = 36;
  v47 = v54 + 24;
  if (v36 == v48)
  {
    *a1 = v54;
    a1[1] = v47;
    a1[2] = v55;
LABEL_90:
    operator delete(v36);
    goto LABEL_91;
  }
  do
  {
    v56 = *(_OWORD *)(v36 - 24);
    *((_QWORD *)v54 - 1) = *((_QWORD *)v36 - 1);
    *(_OWORD *)(v54 - 24) = v56;
    v54 -= 24;
    v36 -= 24;
  }
  while (v36 != v48);
  v36 = *a1;
  *a1 = v54;
  a1[1] = v47;
  a1[2] = v55;
  if (v36)
    goto LABEL_90;
LABEL_91:
  a1[1] = v47;
}

void sub_19F6F6C6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForShadowPass>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForShadowPass>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForShadowPass>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForShadowPass>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278EB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForShadowPass>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForShadowPass>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278EB0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForShadowPass>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForShadowPass>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  md::DaVinciGroundRenderResources *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];
  _BYTE *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4274B48;
  v4[1] = a2;
  v28 = 0;
  v5 = **v3;
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (v6 != v7)
  {
    while (*v6 != 0x41D4E9297E100630)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    v9 = 0;
  }
  else
  {
    v9 = v6[3];
    v8 = (std::__shared_weak_count *)v6[4];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v28 = v9;
  v13 = *(uint64_t **)**v3;
  if (v13 != *(uint64_t **)(**v3 + 8) && *v13 != 0xC94DD89A7B09BE9CLL)
  {
    v14 = v13 + 5;
    do
    {
      v15 = *v14;
      v14 += 5;
    }
    while (v15 != 0xC94DD89A7B09BE9CLL);
    v13 = v14 - 5;
  }
  v16 = v13[3];
  v17 = (std::__shared_weak_count *)v13[4];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v27 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16) + 2712);
  if (!v27)
  {
    v21 = (md::DaVinciGroundRenderResources *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
    md::DaVinciGroundRenderResources::buildShadowPlane(v21);
    v27 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16) + 2712);
  }
  v26 = 0;
  v22 = operator new(0x28uLL);
  *v22 = &off_1E427C738;
  v22[1] = v3;
  v22[2] = &v28;
  v22[3] = &v27;
  v22[4] = &v26;
  v30 = v22;
  (*(void (**)(_QWORD *, _BYTE *))(*v4 + 16))(v4, v29);
  v23 = v30;
  if (v30 == v29)
  {
    v24 = 4;
    v23 = v29;
    goto LABEL_30;
  }
  if (v30)
  {
    v24 = 5;
LABEL_30:
    (*(void (**)(_QWORD *))(*v23 + 8 * v24))(v23);
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F6F6F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

unint64_t *ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *result;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t *v107;
  uint64_t v109[10];
  unint64_t *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = gdc::Registry::storage<md::ls::EnteringView>(v2);
  v4 = gdc::Registry::storage<md::ls::SupportsShadows>(v2);
  v5 = gdc::Registry::storage<md::ls::AssociationTileHandle>(v2);
  v6 = gdc::Registry::storage<md::ls::BaseMapTileHandle>(v2);
  v7 = gdc::Registry::storage<md::ls::TileViewConstantDataHandle>(v2);
  v8 = gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>(v2);
  v9 = gdc::Registry::storage<md::ls::TileMatrix>(v2);
  v10 = gdc::Registry::storage<md::ls::TileShadowConstantDataHandle>(v2);
  v111 = (_QWORD *)v3;
  v112 = (_QWORD *)v4;
  v113 = (_QWORD *)v5;
  v114 = (_QWORD *)v6;
  v115 = (_QWORD *)v7;
  v116 = (_QWORD *)v8;
  v117 = (_QWORD *)v9;
  v118 = (_QWORD *)v10;
  gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsShadows const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileShadowConstantDataHandle const>,gdc::Any<>,gdc::None<>>::begin(v109, (uint64_t *)&v111);
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) >= *(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56))
    v11 = v3;
  else
    v11 = v4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v11 + 64) - *(_QWORD *)(v11 + 56))
    v11 = v5;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < *(_QWORD *)(v11 + 64) - *(_QWORD *)(v11 + 56))
    v11 = v6;
  if (*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56) < *(_QWORD *)(v11 + 64) - *(_QWORD *)(v11 + 56))
    v11 = v7;
  if (*(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56) < *(_QWORD *)(v11 + 64) - *(_QWORD *)(v11 + 56))
    v11 = v8;
  if (*(_QWORD *)(v9 + 64) - *(_QWORD *)(v9 + 56) < *(_QWORD *)(v11 + 64) - *(_QWORD *)(v11 + 56))
    v11 = v9;
  if (*(_QWORD *)(v10 + 64) - *(_QWORD *)(v10 + 56) < *(_QWORD *)(v11 + 64) - *(_QWORD *)(v11 + 56))
    v11 = v10;
  v12 = v110;
  v107 = *(unint64_t **)(v11 + 64);
  if (v107 == v110)
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_118:
    *result = 0xFFFFFFFF00000000;
  }
  else
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v14 = v111;
    v15 = v112;
    v16 = v113;
    v17 = v114;
    v18 = v115;
    v19 = v116;
    v20 = v117;
    v21 = v118;
    v105 = v109[0];
    v106 = result;
    while (1)
    {
      *result = *v12;
      v22 = *v12;
      v23 = HIDWORD(*v12);
      v24 = *v12 >> 39;
      v25 = v14[4];
      if (v24 >= (v14[5] - v25) >> 3)
        goto LABEL_27;
      v26 = *(_QWORD *)(v25 + 8 * v24);
      if (!v26)
        goto LABEL_27;
      v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v22) & 0x7F));
      v29 = v14[7];
      v28 = v14[8];
      if (v27 >= (v28 - v29) >> 3)
        goto LABEL_27;
      v30 = v29 + 8 * v27;
      if (v30 != v28 && *(_DWORD *)(v30 + 4) == (_DWORD)v23)
      {
        v32 = v14[11];
        v33 = v14[10] + v27;
      }
      else
      {
LABEL_27:
        v32 = v14[11];
        v33 = v32;
      }
      v34 = v33 == v32 ? 0 : v33;
      if ((v35 = v15[4], v24 < (v15[5] - v35) >> 3)
        && (v36 = *(_QWORD *)(v35 + 8 * v24)) != 0
        && (v37 = *(unsigned __int16 *)(v36 + 2 * (HIDWORD(v22) & 0x7F)),
            v39 = v15[7],
            v38 = v15[8],
            v37 < (v38 - v39) >> 3)
        && ((v40 = v39 + 8 * v37, v40 != v38) ? (v41 = *(_DWORD *)(v40 + 4) == (_DWORD)v23) : (v41 = 0), v41))
      {
        v42 = v15[11];
        v43 = v15[10] + v37;
      }
      else
      {
        v42 = v15[11];
        v43 = v42;
      }
      v44 = v43 == v42 ? 0 : v43;
      if ((v45 = v16[4], v24 < (v16[5] - v45) >> 3)
        && (v46 = *(_QWORD *)(v45 + 8 * v24)) != 0
        && (v47 = *(unsigned __int16 *)(v46 + 2 * (HIDWORD(v22) & 0x7F)),
            v49 = v16[7],
            v48 = v16[8],
            v47 < (v48 - v49) >> 3)
        && ((v50 = v49 + 8 * v47, v50 != v48) ? (v51 = *(_DWORD *)(v50 + 4) == (_DWORD)v23) : (v51 = 0), v51))
      {
        v52 = v16[11];
        v53 = v16[10] + 8 * v47;
      }
      else
      {
        v52 = v16[11];
        v53 = v52;
      }
      v54 = v53 == v52 ? 0 : v53;
      if ((v55 = v17[4], v24 < (v17[5] - v55) >> 3)
        && (v56 = *(_QWORD *)(v55 + 8 * v24)) != 0
        && (v57 = *(unsigned __int16 *)(v56 + 2 * (HIDWORD(v22) & 0x7F)),
            v59 = v17[7],
            v58 = v17[8],
            v57 < (v58 - v59) >> 3)
        && ((v60 = v59 + 8 * v57, v60 != v58) ? (v61 = *(_DWORD *)(v60 + 4) == (_DWORD)v23) : (v61 = 0), v61))
      {
        v62 = v17[11];
        v63 = v17[10] + 8 * v57;
      }
      else
      {
        v62 = v17[11];
        v63 = v62;
      }
      v64 = v63 == v62 ? 0 : v63;
      if ((v65 = v18[4], v24 < (v18[5] - v65) >> 3)
        && (v66 = *(_QWORD *)(v65 + 8 * v24)) != 0
        && (v67 = *(unsigned __int16 *)(v66 + 2 * (HIDWORD(v22) & 0x7F)),
            v69 = v18[7],
            v68 = v18[8],
            v67 < (v68 - v69) >> 3)
        && ((v70 = v69 + 8 * v67, v70 != v68) ? (v71 = *(_DWORD *)(v70 + 4) == (_DWORD)v23) : (v71 = 0), v71))
      {
        v72 = v18[11];
        v73 = v18[10] + 8 * v67;
      }
      else
      {
        v72 = v18[11];
        v73 = v72;
      }
      v74 = v73 == v72 ? 0 : v73;
      if ((v75 = v19[4], v24 < (v19[5] - v75) >> 3)
        && (v76 = *(_QWORD *)(v75 + 8 * v24)) != 0
        && (v77 = *(unsigned __int16 *)(v76 + 2 * (HIDWORD(v22) & 0x7F)),
            v79 = v19[7],
            v78 = v19[8],
            v77 < (v78 - v79) >> 3)
        && ((v80 = v79 + 8 * v77, v80 != v78) ? (v81 = *(_DWORD *)(v80 + 4) == (_DWORD)v23) : (v81 = 0), v81))
      {
        v82 = v19[11];
        v83 = v19[10] + 8 * v77;
      }
      else
      {
        v82 = v19[11];
        v83 = v82;
      }
      v84 = v83 == v82 ? 0 : v83;
      v85 = v20[4];
      if (v24 < (v20[5] - v85) >> 3
        && (v86 = *(_QWORD *)(v85 + 8 * v24)) != 0
        && (v87 = *(unsigned __int16 *)(v86 + 2 * (HIDWORD(v22) & 0x7F)),
            v89 = v20[7],
            v88 = v20[8],
            v87 < (v88 - v89) >> 3)
        && (v90 = v89 + 8 * v87, v90 != v88)
        && *(_DWORD *)(v90 + 4) == (_DWORD)v23)
      {
        v91 = v20[11];
        v92 = v20[10] + 8 * v87;
      }
      else
      {
        v91 = v20[11];
        v92 = v91;
      }
      v93 = v92 == v91 ? 0 : v92;
      v94 = v21[4];
      if (v24 < (v21[5] - v94) >> 3
        && (v95 = *(_QWORD *)(v94 + 8 * v24)) != 0
        && (v96 = *(unsigned __int16 *)(v95 + 2 * (HIDWORD(v22) & 0x7F)),
            v98 = v21[7],
            v97 = v21[8],
            v96 < (v97 - v98) >> 3)
        && (v99 = v98 + 8 * v96, v99 != v97)
        && *(_DWORD *)(v99 + 4) == (_DWORD)v23)
      {
        v100 = v21[11];
        v101 = v21[10] + 8 * v96;
      }
      else
      {
        v100 = v21[11];
        v101 = v100;
      }
      v102 = *(_QWORD *)(a2 + 24);
      if (!v102)
        break;
      if (v101 == v100)
        v103 = 0;
      else
        v103 = v101;
      (*(void (**)(uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v102 + 48))(v102, v34, v44, v54, v64, v74, v84, v93, v103);
      v104 = *(unint64_t **)(v105 + 32);
      while (1)
      {
        v110 = ++v12;
        if (v12 == v104)
          break;
        if (gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsShadows const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileShadowConstantDataHandle const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v109))
          goto LABEL_19;
      }
      v12 = v104;
LABEL_19:
      result = v106;
      if (v107 == v12)
        goto LABEL_118;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (unint64_t *)ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[8];
  uint64_t v13[11];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::EnteringView>(v1);
  v3 = gdc::Registry::storage<md::ls::SupportsShadows>(v1);
  v4 = gdc::Registry::storage<md::ls::AssociationTileHandle>(v1);
  v5 = gdc::Registry::storage<md::ls::BaseMapTileHandle>(v1);
  v6 = gdc::Registry::storage<md::ls::TileViewConstantDataHandle>(v1);
  v7 = gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>(v1);
  v8 = gdc::Registry::storage<md::ls::TileMatrix>(v1);
  v9 = gdc::Registry::storage<md::ls::TileShadowConstantDataHandle>(v1);
  v12[0] = v2;
  v12[1] = v3;
  v12[2] = v4;
  v12[3] = v5;
  v12[4] = v6;
  v12[5] = v7;
  v12[6] = v8;
  v12[7] = v9;
  gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsShadows const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileShadowConstantDataHandle const>,gdc::Any<>,gdc::None<>>::begin(v13, v12);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v10 = v2;
  else
    v10 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v10 + 64) - *(_QWORD *)(v10 + 56))
    v10 = v4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v10 + 64) - *(_QWORD *)(v10 + 56))
    v10 = v5;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < *(_QWORD *)(v10 + 64) - *(_QWORD *)(v10 + 56))
    v10 = v6;
  if (*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56) < *(_QWORD *)(v10 + 64) - *(_QWORD *)(v10 + 56))
    v10 = v7;
  if (*(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56) < *(_QWORD *)(v10 + 64) - *(_QWORD *)(v10 + 56))
    v10 = v8;
  if (*(_QWORD *)(v9 + 64) - *(_QWORD *)(v9 + 56) < *(_QWORD *)(v10 + 64) - *(_QWORD *)(v10 + 56))
    v10 = v9;
  return *(_QWORD *)(v10 + 64) == v13[10];
}

uint64_t gdc::Registry::storage<md::ls::EnteringView>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xE0AB1B46607846E6;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xE0AB1B46607846E6;
      if (*(_QWORD *)&v3 <= 0xE0AB1B46607846E6)
        v5 = 0xE0AB1B46607846E6 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xE0AB1B46607846E6;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xE0AB1B46607846E6)
            {
              if (v7[2] == 0xE0AB1B46607846E6)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xE0AB1B46607846E6)
          {
            if (v7[2] == 0xE0AB1B46607846E6)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::EnteringView]";
  *(_QWORD *)(v11 + 24) = 20;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271238;
  *(_QWORD *)(v11 + 8) = 0xE0AB1B46607846E6;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xE0AB1B46607846E6, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xE0AB1B46607846E6;
  v15[1] = "md::ls::EnteringView]";
  v15[2] = 20;
  gdc::Registry::_registerStorageDataSignals(a1, 0xE0AB1B46607846E6, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6F789C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unint64_t gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsShadows const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileShadowConstantDataHandle const>,gdc::Any<>,gdc::None<>>::begin(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = *a2 + 32;
  if (!*a2)
    v11 = 0;
  v12 = v4 + 32;
  if (!v4)
    v12 = 0;
  v13 = v5 + 32;
  if (!v5)
    v13 = 0;
  v14 = v6 + 32;
  if (!v6)
    v14 = 0;
  v15 = v7 + 32;
  if (!v7)
    v15 = 0;
  v16 = v8 + 32;
  if (!v8)
    v16 = 0;
  v17 = v9 + 32;
  if (!v9)
    v17 = 0;
  v18 = v10 + 32;
  if (!v10)
    v18 = 0;
  if (*(_QWORD *)(v12 + 32) - *(_QWORD *)(v12 + 24) < *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24))
    v11 = v12;
  if (*(_QWORD *)(v13 + 32) - *(_QWORD *)(v13 + 24) < *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24))
    v11 = v13;
  if (*(_QWORD *)(v14 + 32) - *(_QWORD *)(v14 + 24) < *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24))
    v11 = v14;
  if (*(_QWORD *)(v15 + 32) - *(_QWORD *)(v15 + 24) < *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24))
    v11 = v15;
  if (*(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24) < *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24))
    v11 = v16;
  if (*(_QWORD *)(v17 + 32) - *(_QWORD *)(v17 + 24) < *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24))
    v11 = v17;
  result = *(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24);
  if (*(_QWORD *)(v18 + 32) - *(_QWORD *)(v18 + 24) < result)
    v11 = v18;
  *a1 = v11;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  v21 = *(_QWORD *)(v11 + 24);
  v20 = *(_QWORD *)(v11 + 32);
  a1[10] = v21;
  if (v20 != v21)
  {
    result = gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsShadows const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileShadowConstantDataHandle const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
    if ((result & 1) == 0)
    {
      v22 = v21 + 8;
      do
      {
        a1[10] = v22;
        if (v22 == v20)
          break;
        result = gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsShadows const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileShadowConstantDataHandle const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
        v22 += 8;
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

BOOL gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsShadows const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileShadowConstantDataHandle const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v1 = (_QWORD *)a1[1];
  v2 = *(unsigned int *)(a1[10] + 4);
  v3 = v2 >> 7;
  v4 = v1[4];
  if (v2 >> 7 >= (v1[5] - v4) >> 3)
    return 0;
  v5 = *(_QWORD *)(v4 + 8 * v3);
  if (!v5)
    return 0;
  v6 = v2 & 0x7F;
  v7 = *(unsigned __int16 *)(v5 + 2 * v6);
  v10 = v1 + 7;
  v8 = v1[7];
  v9 = v10[1];
  if (v7 >= (v9 - v8) >> 3)
    return 0;
  v11 = v8 + 8 * v7;
  if (v11 == v9 || *(_DWORD *)(v11 + 4) != (_DWORD)v2)
    return 0;
  v13 = (_QWORD *)a1[2];
  v14 = v13[4];
  if (v3 >= (v13[5] - v14) >> 3)
    return 0;
  v15 = *(_QWORD *)(v14 + 8 * v3);
  if (!v15)
    return 0;
  v16 = *(unsigned __int16 *)(v15 + 2 * v6);
  v19 = v13 + 7;
  v17 = v13[7];
  v18 = v19[1];
  if (v16 >= (v18 - v17) >> 3)
    return 0;
  v20 = v17 + 8 * v16;
  if (v20 == v18 || *(_DWORD *)(v20 + 4) != (_DWORD)v2)
    return 0;
  v22 = (_QWORD *)a1[3];
  v23 = v22[4];
  if (v3 >= (v22[5] - v23) >> 3)
    return 0;
  v24 = *(_QWORD *)(v23 + 8 * v3);
  if (!v24)
    return 0;
  v25 = *(unsigned __int16 *)(v24 + 2 * v6);
  v28 = v22 + 7;
  v26 = v22[7];
  v27 = v28[1];
  if (v25 >= (v27 - v26) >> 3)
    return 0;
  v29 = v26 + 8 * v25;
  if (v29 == v27 || *(_DWORD *)(v29 + 4) != (_DWORD)v2)
    return 0;
  v31 = (_QWORD *)a1[4];
  v32 = v31[4];
  if (v3 >= (v31[5] - v32) >> 3)
    return 0;
  v33 = *(_QWORD *)(v32 + 8 * v3);
  if (!v33)
    return 0;
  v34 = *(unsigned __int16 *)(v33 + 2 * v6);
  v37 = v31 + 7;
  v35 = v31[7];
  v36 = v37[1];
  if (v34 >= (v36 - v35) >> 3)
    return 0;
  v38 = v35 + 8 * v34;
  if (v38 == v36 || *(_DWORD *)(v38 + 4) != (_DWORD)v2)
    return 0;
  v40 = (_QWORD *)a1[5];
  v41 = v40[4];
  if (v3 >= (v40[5] - v41) >> 3)
    return 0;
  v42 = *(_QWORD *)(v41 + 8 * v3);
  if (!v42)
    return 0;
  v43 = *(unsigned __int16 *)(v42 + 2 * v6);
  v45 = v40[7];
  v44 = v40[8];
  if (v43 >= (v44 - v45) >> 3)
    return 0;
  v46 = 0;
  v47 = v45 + 8 * v43;
  if (v47 == v44 || *(_DWORD *)(v47 + 4) != (_DWORD)v2)
    return v46;
  v48 = (_QWORD *)a1[6];
  v49 = v48[4];
  if (v3 >= (v48[5] - v49) >> 3)
    return 0;
  v50 = *(_QWORD *)(v49 + 8 * v3);
  if (!v50)
    return 0;
  v51 = *(unsigned __int16 *)(v50 + 2 * v6);
  v53 = v48[7];
  v52 = v48[8];
  if (v51 >= (v52 - v53) >> 3)
    return 0;
  v46 = 0;
  v54 = v53 + 8 * v51;
  if (v54 == v52 || *(_DWORD *)(v54 + 4) != (_DWORD)v2)
    return v46;
  v55 = (_QWORD *)a1[7];
  v56 = v55[4];
  if (v3 >= (v55[5] - v56) >> 3)
    return 0;
  v57 = *(_QWORD *)(v56 + 8 * v3);
  if (!v57)
    return 0;
  v58 = *(unsigned __int16 *)(v57 + 2 * v6);
  v60 = v55[7];
  v59 = v55[8];
  if (v58 >= (v59 - v60) >> 3)
    return 0;
  v46 = 0;
  v61 = v60 + 8 * v58;
  if (v61 != v59 && *(_DWORD *)(v61 + 4) == (_DWORD)v2)
  {
    v62 = (_QWORD *)a1[8];
    v63 = v62[4];
    if (v3 < (v62[5] - v63) >> 3 && (v64 = *(_QWORD *)(v63 + 8 * v3)) != 0)
    {
      v65 = *(unsigned __int16 *)(v64 + 2 * v6);
      v67 = v62[7];
      v66 = v62[8];
      if (v65 < (v66 - v67) >> 3)
      {
        v68 = v67 + 8 * v65;
        if (*(_DWORD *)(v68 + 4) == (_DWORD)v2)
          v69 = v68;
        else
          v69 = v62[8];
        return v69 != v66;
      }
    }
    else
    {
      v66 = v62[8];
    }
    v69 = v66;
    return v69 != v66;
  }
  return v46;
}

void gdc::ComponentStorageWrapper<md::ls::EnteringView>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::EnteringView>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::EnteringView>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::EnteringView>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForDepthPrePass>(md::ita::CreateTileClearRenderItemsForDepthPrePass &&)::{lambda(void)#2},std::allocator<md::ita::CreateTileClearRenderItemsForDepthPrePass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForDepthPrePass>(md::ita::CreateTileClearRenderItemsForDepthPrePass &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForDepthPrePass>(md::ita::CreateTileClearRenderItemsForDepthPrePass &&)::{lambda(void)#2},std::allocator<md::ita::CreateTileClearRenderItemsForDepthPrePass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForDepthPrePass>(md::ita::CreateTileClearRenderItemsForDepthPrePass &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288F78;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForDepthPrePass>(md::ita::CreateTileClearRenderItemsForDepthPrePass &&)::{lambda(void)#2},std::allocator<md::ita::CreateTileClearRenderItemsForDepthPrePass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForDepthPrePass>(md::ita::CreateTileClearRenderItemsForDepthPrePass &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288F78;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForDepthPrePass>(md::ita::CreateTileClearRenderItemsForDepthPrePass &&)::{lambda(void)#2},std::allocator<md::ita::CreateTileClearRenderItemsForDepthPrePass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForDepthPrePass>(md::ita::CreateTileClearRenderItemsForDepthPrePass &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForDepthPrePass>(md::ita::CreateTileClearRenderItemsForDepthPrePass &&)::{lambda(void)#1},std::allocator<md::ita::CreateTileClearRenderItemsForDepthPrePass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForDepthPrePass>(md::ita::CreateTileClearRenderItemsForDepthPrePass &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForDepthPrePass>(md::ita::CreateTileClearRenderItemsForDepthPrePass &&)::{lambda(void)#1},std::allocator<md::ita::CreateTileClearRenderItemsForDepthPrePass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForDepthPrePass>(md::ita::CreateTileClearRenderItemsForDepthPrePass &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288FC0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForDepthPrePass>(md::ita::CreateTileClearRenderItemsForDepthPrePass &&)::{lambda(void)#1},std::allocator<md::ita::CreateTileClearRenderItemsForDepthPrePass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForDepthPrePass>(md::ita::CreateTileClearRenderItemsForDepthPrePass &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288FC0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForDepthPrePass>(md::ita::CreateTileClearRenderItemsForDepthPrePass &&)::{lambda(void)#1},std::allocator<md::ita::CreateTileClearRenderItemsForDepthPrePass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForDepthPrePass>(md::ita::CreateTileClearRenderItemsForDepthPrePass &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  unint64_t v68;
  char *v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  __int128 v78;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0xF0uLL);
  a1[2] = (char *)(v2 + 30);
  *v2 = 0xE0AB1B46607846E6;
  v2[1] = "md::ls::EnteringView]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB4380;
  v2[4] = "md::ls::SupportsDepthPrePass]";
  v2[5] = 28;
  v2[6] = 0x684A78DCF1B284C1;
  v2[7] = "md::ls::RenderablesCount]";
  v2[8] = 24;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 30)
  {
    *(_QWORD *)v3 = 0x24B7D588576BB14ELL;
    v2[10] = "md::ls::AssociationTileHandle]";
    v2[11] = 29;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_128;
  if (0x5555555555555556 * (((char *)(v2 + 30) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 30) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 30) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_129;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x24B7D588576BB14ELL;
  *((_QWORD *)v10 + 1) = "md::ls::AssociationTileHandle]";
  *((_QWORD *)v10 + 2) = 29;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0x695C99F828CA9E84;
    *((_QWORD *)v4 + 1) = "md::ls::BaseMapTileHandle]";
    *((_QWORD *)v4 + 2) = 25;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_128;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_129;
    v20 = (char *)operator new(24 * v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0x695C99F828CA9E84;
  *((_QWORD *)v21 + 1) = "md::ls::BaseMapTileHandle]";
  *((_QWORD *)v21 + 2) = 25;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
  v24 = (unint64_t)a1[2];
  if ((unint64_t)v14 < v24)
  {
    *(_QWORD *)v14 = 0x414BF8D9069621AELL;
    *((_QWORD *)v14 + 1) = "md::ls::TileViewConstantDataHandle]";
    *((_QWORD *)v14 + 2) = 34;
    v25 = v14 + 24;
    goto LABEL_55;
  }
  v26 = *a1;
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3);
  v28 = v27 + 1;
  if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_128;
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x555555555555555)
    v30 = 0xAAAAAAAAAAAAAAALL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_129;
    v31 = (char *)operator new(24 * v30);
  }
  else
  {
    v31 = 0;
  }
  v32 = &v31[24 * v27];
  v33 = &v31[24 * v30];
  *(_QWORD *)v32 = 0x414BF8D9069621AELL;
  *((_QWORD *)v32 + 1) = "md::ls::TileViewConstantDataHandle]";
  *((_QWORD *)v32 + 2) = 34;
  v25 = v32 + 24;
  if (v14 == v26)
  {
    *a1 = v32;
    a1[1] = v25;
    a1[2] = v33;
LABEL_54:
    operator delete(v14);
    goto LABEL_55;
  }
  do
  {
    v34 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v32 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v32 - 24) = v34;
    v32 -= 24;
    v14 -= 24;
  }
  while (v14 != v26);
  v14 = *a1;
  *a1 = v32;
  a1[1] = v25;
  a1[2] = v33;
  if (v14)
    goto LABEL_54;
LABEL_55:
  a1[1] = v25;
  v35 = (unint64_t)a1[2];
  if ((unint64_t)v25 < v35)
  {
    *(_QWORD *)v25 = 0xD270E8E58701C515;
    *((_QWORD *)v25 + 1) = "md::ls::TileTransformConstantDataHandle]";
    *((_QWORD *)v25 + 2) = 39;
    v36 = v25 + 24;
    goto LABEL_73;
  }
  v37 = *a1;
  v38 = 0xAAAAAAAAAAAAAAABLL * ((v25 - *a1) >> 3);
  v39 = v38 + 1;
  if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_128;
  v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v37) >> 3);
  if (2 * v40 > v39)
    v39 = 2 * v40;
  if (v40 >= 0x555555555555555)
    v41 = 0xAAAAAAAAAAAAAAALL;
  else
    v41 = v39;
  if (v41)
  {
    if (v41 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_129;
    v42 = (char *)operator new(24 * v41);
  }
  else
  {
    v42 = 0;
  }
  v43 = &v42[24 * v38];
  v44 = &v42[24 * v41];
  *(_QWORD *)v43 = 0xD270E8E58701C515;
  *((_QWORD *)v43 + 1) = "md::ls::TileTransformConstantDataHandle]";
  *((_QWORD *)v43 + 2) = 39;
  v36 = v43 + 24;
  if (v25 == v37)
  {
    *a1 = v43;
    a1[1] = v36;
    a1[2] = v44;
LABEL_72:
    operator delete(v25);
    goto LABEL_73;
  }
  do
  {
    v45 = *(_OWORD *)(v25 - 24);
    *((_QWORD *)v43 - 1) = *((_QWORD *)v25 - 1);
    *(_OWORD *)(v43 - 24) = v45;
    v43 -= 24;
    v25 -= 24;
  }
  while (v25 != v37);
  v25 = *a1;
  *a1 = v43;
  a1[1] = v36;
  a1[2] = v44;
  if (v25)
    goto LABEL_72;
LABEL_73:
  a1[1] = v36;
  v46 = (unint64_t)a1[2];
  if ((unint64_t)v36 < v46)
  {
    *(_QWORD *)v36 = 0xBCC33905201D8160;
    *((_QWORD *)v36 + 1) = "md::ls::TileMatrix]";
    *((_QWORD *)v36 + 2) = 18;
    v47 = v36 + 24;
    goto LABEL_91;
  }
  v48 = *a1;
  v49 = 0xAAAAAAAAAAAAAAABLL * ((v36 - *a1) >> 3);
  v50 = v49 + 1;
  if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_128;
  v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - (_QWORD)v48) >> 3);
  if (2 * v51 > v50)
    v50 = 2 * v51;
  if (v51 >= 0x555555555555555)
    v52 = 0xAAAAAAAAAAAAAAALL;
  else
    v52 = v50;
  if (v52)
  {
    if (v52 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_129;
    v53 = (char *)operator new(24 * v52);
  }
  else
  {
    v53 = 0;
  }
  v54 = &v53[24 * v49];
  v55 = &v53[24 * v52];
  *(_QWORD *)v54 = 0xBCC33905201D8160;
  *((_QWORD *)v54 + 1) = "md::ls::TileMatrix]";
  *((_QWORD *)v54 + 2) = 18;
  v47 = v54 + 24;
  if (v36 == v48)
  {
    *a1 = v54;
    a1[1] = v47;
    a1[2] = v55;
LABEL_90:
    operator delete(v36);
    goto LABEL_91;
  }
  do
  {
    v56 = *(_OWORD *)(v36 - 24);
    *((_QWORD *)v54 - 1) = *((_QWORD *)v36 - 1);
    *(_OWORD *)(v54 - 24) = v56;
    v54 -= 24;
    v36 -= 24;
  }
  while (v36 != v48);
  v36 = *a1;
  *a1 = v54;
  a1[1] = v47;
  a1[2] = v55;
  if (v36)
    goto LABEL_90;
LABEL_91:
  a1[1] = v47;
  v57 = (unint64_t)a1[2];
  if ((unint64_t)v47 < v57)
  {
    *(_QWORD *)v47 = 0xB4E92DEB291A7B99;
    *((_QWORD *)v47 + 1) = "md::ls::TilePrepassShadowConstantDataHandle]";
    *((_QWORD *)v47 + 2) = 43;
    v58 = v47 + 24;
    goto LABEL_109;
  }
  v59 = *a1;
  v60 = 0xAAAAAAAAAAAAAAABLL * ((v47 - *a1) >> 3);
  v61 = v60 + 1;
  if (v60 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_128;
  v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - (_QWORD)v59) >> 3);
  if (2 * v62 > v61)
    v61 = 2 * v62;
  if (v62 >= 0x555555555555555)
    v63 = 0xAAAAAAAAAAAAAAALL;
  else
    v63 = v61;
  if (v63)
  {
    if (v63 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_129;
    v64 = (char *)operator new(24 * v63);
  }
  else
  {
    v64 = 0;
  }
  v65 = &v64[24 * v60];
  v66 = &v64[24 * v63];
  *(_QWORD *)v65 = 0xB4E92DEB291A7B99;
  *((_QWORD *)v65 + 1) = "md::ls::TilePrepassShadowConstantDataHandle]";
  *((_QWORD *)v65 + 2) = 43;
  v58 = v65 + 24;
  if (v47 == v59)
  {
    *a1 = v65;
    a1[1] = v58;
    a1[2] = v66;
LABEL_108:
    operator delete(v47);
    goto LABEL_109;
  }
  do
  {
    v67 = *(_OWORD *)(v47 - 24);
    *((_QWORD *)v65 - 1) = *((_QWORD *)v47 - 1);
    *(_OWORD *)(v65 - 24) = v67;
    v65 -= 24;
    v47 -= 24;
  }
  while (v47 != v59);
  v47 = *a1;
  *a1 = v65;
  a1[1] = v58;
  a1[2] = v66;
  if (v47)
    goto LABEL_108;
LABEL_109:
  a1[1] = v58;
  v68 = (unint64_t)a1[2];
  if ((unint64_t)v58 < v68)
  {
    *(_QWORD *)v58 = 0x33C39664142A0949;
    *((_QWORD *)v58 + 1) = "md::ls::TilePrepassConstantDataHandle]";
    *((_QWORD *)v58 + 2) = 37;
    v69 = v58 + 24;
    goto LABEL_127;
  }
  v70 = *a1;
  v71 = 0xAAAAAAAAAAAAAAABLL * ((v58 - *a1) >> 3);
  v72 = v71 + 1;
  if (v71 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_128:
    abort();
  v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - (_QWORD)v70) >> 3);
  if (2 * v73 > v72)
    v72 = 2 * v73;
  if (v73 >= 0x555555555555555)
    v74 = 0xAAAAAAAAAAAAAAALL;
  else
    v74 = v72;
  if (v74)
  {
    if (v74 <= 0xAAAAAAAAAAAAAAALL)
    {
      v75 = (char *)operator new(24 * v74);
      goto LABEL_121;
    }
LABEL_129:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v75 = 0;
LABEL_121:
  v76 = &v75[24 * v71];
  v77 = &v75[24 * v74];
  *(_QWORD *)v76 = 0x33C39664142A0949;
  *((_QWORD *)v76 + 1) = "md::ls::TilePrepassConstantDataHandle]";
  *((_QWORD *)v76 + 2) = 37;
  v69 = v76 + 24;
  if (v58 == v70)
  {
    *a1 = v76;
    a1[1] = v69;
    a1[2] = v77;
LABEL_126:
    operator delete(v58);
    goto LABEL_127;
  }
  do
  {
    v78 = *(_OWORD *)(v58 - 24);
    *((_QWORD *)v76 - 1) = *((_QWORD *)v58 - 1);
    *(_OWORD *)(v76 - 24) = v78;
    v76 -= 24;
    v58 -= 24;
  }
  while (v58 != v70);
  v58 = *a1;
  *a1 = v76;
  a1[1] = v69;
  a1[2] = v77;
  if (v58)
    goto LABEL_126;
LABEL_127:
  a1[1] = v69;
}

void sub_19F6F8790(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForDepthPrePass>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForDepthPrePass>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForDepthPrePass>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForDepthPrePass>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279060;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForDepthPrePass>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForDepthPrePass>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4279060;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForDepthPrePass>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForDepthPrePass>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  md::DaVinciGroundRenderResources *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];
  _BYTE *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42EE5A8;
  v4[1] = a2;
  v28 = 0;
  v5 = **v3;
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (v6 != v7)
  {
    while (*v6 != 0x41D4E9297E100630)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    v9 = 0;
  }
  else
  {
    v9 = v6[3];
    v8 = (std::__shared_weak_count *)v6[4];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v28 = v9;
  v13 = *(uint64_t **)**v3;
  if (v13 != *(uint64_t **)(**v3 + 8) && *v13 != 0xC94DD89A7B09BE9CLL)
  {
    v14 = v13 + 5;
    do
    {
      v15 = *v14;
      v14 += 5;
    }
    while (v15 != 0xC94DD89A7B09BE9CLL);
    v13 = v14 - 5;
  }
  v16 = v13[3];
  v17 = (std::__shared_weak_count *)v13[4];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v27 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16) + 2712);
  if (!v27)
  {
    v21 = (md::DaVinciGroundRenderResources *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
    md::DaVinciGroundRenderResources::buildShadowPlane(v21);
    v27 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16) + 2712);
  }
  v26 = 0;
  v22 = operator new(0x28uLL);
  *v22 = &off_1E42F9528;
  v22[1] = v3;
  v22[2] = &v28;
  v22[3] = &v27;
  v22[4] = &v26;
  v30 = v22;
  (*(void (**)(_QWORD *, _BYTE *))(*v4 + 16))(v4, v29);
  v23 = v30;
  if (v30 == v29)
  {
    v24 = 4;
    v23 = v29;
    goto LABEL_30;
  }
  if (v30)
  {
    v24 = 5;
LABEL_30:
    (*(void (**)(_QWORD *))(*v23 + 8 * v24))(v23);
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F6F8AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

unint64_t *ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t *result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t *v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  unint64_t *v114;
  __int128 v115;
  __int128 v116;
  unint64_t *v117;
  uint64_t v119[12];
  unint64_t *v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  _OWORD v126[6];

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  *(_QWORD *)&v121 = gdc::Registry::storage<md::ls::EnteringView>(v2);
  *((_QWORD *)&v121 + 1) = gdc::Registry::storage<md::ls::SupportsDepthPrePass>(v2);
  *(_QWORD *)&v122 = gdc::Registry::storage<md::ls::RenderablesCount>(v2);
  *((_QWORD *)&v122 + 1) = gdc::Registry::storage<md::ls::AssociationTileHandle>(v2);
  *(_QWORD *)&v123 = gdc::Registry::storage<md::ls::BaseMapTileHandle>(v2);
  *((_QWORD *)&v123 + 1) = gdc::Registry::storage<md::ls::TileViewConstantDataHandle>(v2);
  *(_QWORD *)&v124 = gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>(v2);
  *((_QWORD *)&v124 + 1) = gdc::Registry::storage<md::ls::TileMatrix>(v2);
  *(_QWORD *)&v125 = gdc::Registry::storage<md::ls::TilePrepassShadowConstantDataHandle>(v2);
  *((_QWORD *)&v125 + 1) = gdc::Registry::storage<md::ls::TilePrepassConstantDataHandle>(v2);
  gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsDepthPrePass const,md::ls::RenderablesCount const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const>,gdc::Any<>,gdc::None<>>::begin(v119, &v121);
  v113 = v122;
  v115 = v121;
  v126[0] = v121;
  v126[1] = v122;
  v110 = v124;
  v111 = v123;
  v126[2] = v123;
  v126[3] = v124;
  v116 = v125;
  v126[4] = v125;
  v3 = *(unint64_t **)(gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsDepthPrePass const,md::ls::RenderablesCount const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const>,gdc::Any<>,gdc::None<>>::minSizeStorage<gdc::ComponentStorageWrapper<md::ls::EnteringView> const*,gdc::ComponentStorageWrapper<md::ls::SupportsDepthPrePass> const*,gdc::ComponentStorageWrapper<md::ls::RenderablesCount> const*,gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileMatrix> const*,gdc::ComponentStorageWrapper<md::ls::TilePrepassShadowConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TilePrepassConstantDataHandle> const*>(v126)
                            + 32);
  v4 = v120;
  v117 = v3;
  if (v3 == v120)
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_121:
    *result = 0xFFFFFFFF00000000;
  }
  else
  {
    v5 = (_QWORD *)*((_QWORD *)&v116 + 1);
    v6 = (_QWORD *)v116;
    v7 = (_QWORD *)v111;
    v8 = (_QWORD *)v113;
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v112 = v119[0];
    v114 = result;
    while (1)
    {
      *result = *v4;
      v10 = *v4;
      v11 = HIDWORD(*v4);
      v12 = *v4 >> 39;
      v13 = *(_QWORD *)(v115 + 32);
      if (v12 < (*(_QWORD *)(v115 + 40) - v13) >> 3
        && (v14 = *(_QWORD *)(v13 + 8 * v12)) != 0
        && (v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v10) & 0x7F)),
            v17 = *(_QWORD *)(v115 + 56),
            v16 = *(_QWORD *)(v115 + 64),
            v15 < (v16 - v17) >> 3)
        && ((v18 = v17 + 8 * v15, v18 != v16) ? (v19 = *(_DWORD *)(v18 + 4) == (_DWORD)v11) : (v19 = 0), v19))
      {
        v20 = *(_QWORD *)(v115 + 88);
        v21 = *(_QWORD *)(v115 + 80) + v15;
      }
      else
      {
        v20 = *(_QWORD *)(v115 + 88);
        v21 = v20;
      }
      if (v21 == v20)
        v22 = 0;
      else
        v22 = v21;
      v23 = *(_QWORD *)(*((_QWORD *)&v115 + 1) + 32);
      if (v12 < (*(_QWORD *)(*((_QWORD *)&v115 + 1) + 40) - v23) >> 3
        && (v24 = *(_QWORD *)(v23 + 8 * v12)) != 0
        && (v25 = *(unsigned __int16 *)(v24 + 2 * (HIDWORD(v10) & 0x7F)),
            v27 = *(_QWORD *)(*((_QWORD *)&v115 + 1) + 56),
            v26 = *(_QWORD *)(*((_QWORD *)&v115 + 1) + 64),
            v25 < (v26 - v27) >> 3)
        && ((v28 = v27 + 8 * v25, v28 != v26) ? (v29 = *(_DWORD *)(v28 + 4) == (_DWORD)v11) : (v29 = 0), v29))
      {
        v30 = *(_QWORD *)(*((_QWORD *)&v115 + 1) + 88);
        v31 = *(_QWORD *)(*((_QWORD *)&v115 + 1) + 80) + v25;
      }
      else
      {
        v30 = *(_QWORD *)(*((_QWORD *)&v115 + 1) + 88);
        v31 = v30;
      }
      if (v31 == v30)
        v32 = 0;
      else
        v32 = v31;
      v33 = v8[4];
      if (v12 < (v8[5] - v33) >> 3
        && (v34 = *(_QWORD *)(v33 + 8 * v12)) != 0
        && (v35 = *(unsigned __int16 *)(v34 + 2 * (HIDWORD(v10) & 0x7F)),
            v37 = v8[7],
            v36 = v8[8],
            v35 < (v36 - v37) >> 3)
        && ((v38 = v37 + 8 * v35, v38 != v36) ? (v39 = *(_DWORD *)(v38 + 4) == (_DWORD)v11) : (v39 = 0), v39))
      {
        v40 = v8[11];
        v41 = v8[10] + 32 * v35;
      }
      else
      {
        v40 = v8[11];
        v41 = v40;
      }
      if (v41 == v40)
        v42 = 0;
      else
        v42 = v41;
      v43 = *(_QWORD *)(*((_QWORD *)&v113 + 1) + 32);
      if (v12 < (*(_QWORD *)(*((_QWORD *)&v113 + 1) + 40) - v43) >> 3
        && (v44 = *(_QWORD *)(v43 + 8 * v12)) != 0
        && (v45 = *(unsigned __int16 *)(v44 + 2 * (HIDWORD(v10) & 0x7F)),
            v47 = *(_QWORD *)(*((_QWORD *)&v113 + 1) + 56),
            v46 = *(_QWORD *)(*((_QWORD *)&v113 + 1) + 64),
            v45 < (v46 - v47) >> 3)
        && ((v48 = v47 + 8 * v45, v48 != v46) ? (v49 = *(_DWORD *)(v48 + 4) == (_DWORD)v11) : (v49 = 0), v49))
      {
        v50 = *(_QWORD *)(*((_QWORD *)&v113 + 1) + 88);
        v51 = *(_QWORD *)(*((_QWORD *)&v113 + 1) + 80) + 8 * v45;
      }
      else
      {
        v50 = *(_QWORD *)(*((_QWORD *)&v113 + 1) + 88);
        v51 = v50;
      }
      if (v51 == v50)
        v52 = 0;
      else
        v52 = v51;
      v53 = v7[4];
      if (v12 < (v7[5] - v53) >> 3
        && (v54 = *(_QWORD *)(v53 + 8 * v12)) != 0
        && (v55 = *(unsigned __int16 *)(v54 + 2 * (HIDWORD(v10) & 0x7F)),
            v57 = v7[7],
            v56 = v7[8],
            v55 < (v56 - v57) >> 3)
        && ((v58 = v57 + 8 * v55, v58 != v56) ? (v59 = *(_DWORD *)(v58 + 4) == (_DWORD)v11) : (v59 = 0), v59))
      {
        v60 = v7[11];
        v61 = v7[10] + 8 * v55;
      }
      else
      {
        v60 = v7[11];
        v61 = v60;
      }
      if (v61 == v60)
        v62 = 0;
      else
        v62 = v61;
      v63 = *(_QWORD *)(*((_QWORD *)&v111 + 1) + 32);
      if (v12 < (*(_QWORD *)(*((_QWORD *)&v111 + 1) + 40) - v63) >> 3
        && (v64 = *(_QWORD *)(v63 + 8 * v12)) != 0
        && (v65 = *(unsigned __int16 *)(v64 + 2 * (HIDWORD(v10) & 0x7F)),
            v67 = *(_QWORD *)(*((_QWORD *)&v111 + 1) + 56),
            v66 = *(_QWORD *)(*((_QWORD *)&v111 + 1) + 64),
            v65 < (v66 - v67) >> 3)
        && ((v68 = v67 + 8 * v65, v68 != v66) ? (v69 = *(_DWORD *)(v68 + 4) == (_DWORD)v11) : (v69 = 0), v69))
      {
        v70 = *(_QWORD *)(*((_QWORD *)&v111 + 1) + 88);
        v71 = *(_QWORD *)(*((_QWORD *)&v111 + 1) + 80) + 8 * v65;
      }
      else
      {
        v70 = *(_QWORD *)(*((_QWORD *)&v111 + 1) + 88);
        v71 = v70;
      }
      if (v71 == v70)
        v72 = 0;
      else
        v72 = v71;
      v73 = *(_QWORD *)(v110 + 32);
      if (v12 < (*(_QWORD *)(v110 + 40) - v73) >> 3
        && (v74 = *(_QWORD *)(v73 + 8 * v12)) != 0
        && (v75 = *(unsigned __int16 *)(v74 + 2 * (HIDWORD(v10) & 0x7F)),
            v77 = *(_QWORD *)(v110 + 56),
            v76 = *(_QWORD *)(v110 + 64),
            v75 < (v76 - v77) >> 3)
        && (v78 = v77 + 8 * v75, v78 != v76)
        && *(_DWORD *)(v78 + 4) == (_DWORD)v11)
      {
        v79 = *(_QWORD *)(v110 + 88);
        v80 = *(_QWORD *)(v110 + 80) + 8 * v75;
      }
      else
      {
        v79 = *(_QWORD *)(v110 + 88);
        v80 = v79;
      }
      if (v80 == v79)
        v81 = 0;
      else
        v81 = v80;
      v82 = *(_QWORD *)(*((_QWORD *)&v110 + 1) + 32);
      if (v12 < (*(_QWORD *)(*((_QWORD *)&v110 + 1) + 40) - v82) >> 3
        && (v83 = *(_QWORD *)(v82 + 8 * v12)) != 0
        && (v84 = *(unsigned __int16 *)(v83 + 2 * (HIDWORD(v10) & 0x7F)),
            v86 = *(_QWORD *)(*((_QWORD *)&v110 + 1) + 56),
            v85 = *(_QWORD *)(*((_QWORD *)&v110 + 1) + 64),
            v84 < (v85 - v86) >> 3)
        && (v87 = v86 + 8 * v84, v87 != v85)
        && *(_DWORD *)(v87 + 4) == (_DWORD)v11)
      {
        v88 = *(_QWORD *)(*((_QWORD *)&v110 + 1) + 88);
        v89 = *(_QWORD *)(*((_QWORD *)&v110 + 1) + 80) + 8 * v84;
      }
      else
      {
        v88 = *(_QWORD *)(*((_QWORD *)&v110 + 1) + 88);
        v89 = v88;
      }
      if (v89 == v88)
        v89 = 0;
      v90 = v6[4];
      if (v12 < (v6[5] - v90) >> 3
        && (v91 = *(_QWORD *)(v90 + 8 * v12)) != 0
        && (v92 = *(unsigned __int16 *)(v91 + 2 * (HIDWORD(v10) & 0x7F)),
            v94 = v6[7],
            v93 = v6[8],
            v92 < (v93 - v94) >> 3)
        && (v95 = v94 + 8 * v92, v95 != v93)
        && *(_DWORD *)(v95 + 4) == (_DWORD)v11)
      {
        v96 = v6[11];
        v97 = v6[10] + 8 * v92;
      }
      else
      {
        v96 = v6[11];
        v97 = v96;
      }
      if (v97 == v96)
        v97 = 0;
      v98 = v5[4];
      if (v12 < (v5[5] - v98) >> 3
        && (v99 = *(_QWORD *)(v98 + 8 * v12)) != 0
        && (v100 = *(unsigned __int16 *)(v99 + 2 * (HIDWORD(v10) & 0x7F)),
            v102 = v5[7],
            v101 = v5[8],
            v100 < (v101 - v102) >> 3)
        && (v103 = v102 + 8 * v100, v103 != v101)
        && *(_DWORD *)(v103 + 4) == (_DWORD)v11)
      {
        v104 = v5[11];
        v105 = v5[10] + 8 * v100;
      }
      else
      {
        v104 = v5[11];
        v105 = v104;
      }
      v106 = *(_QWORD *)(a2 + 24);
      if (!v106)
        break;
      v107 = v5;
      if (v105 == v104)
        v108 = 0;
      else
        v108 = v105;
      (*(void (**)(uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v106 + 48))(v106, v22, v32, v42, v52, v62, v72, v81, v89, v97, v108);
      v109 = *(unint64_t **)(v112 + 32);
      while (1)
      {
        v120 = ++v4;
        if (v4 == v109)
          break;
        if (gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsDepthPrePass const,md::ls::RenderablesCount const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v119))
          goto LABEL_4;
      }
      v4 = v109;
LABEL_4:
      v5 = v107;
      v6 = (_QWORD *)v116;
      result = v114;
      if (v117 == v4)
        goto LABEL_121;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (unint64_t *)ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9[13];
  _OWORD v10[6];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  *(_QWORD *)&v4 = gdc::Registry::storage<md::ls::EnteringView>(v1);
  *((_QWORD *)&v4 + 1) = gdc::Registry::storage<md::ls::SupportsDepthPrePass>(v1);
  *(_QWORD *)&v5 = gdc::Registry::storage<md::ls::RenderablesCount>(v1);
  *((_QWORD *)&v5 + 1) = gdc::Registry::storage<md::ls::AssociationTileHandle>(v1);
  *(_QWORD *)&v6 = gdc::Registry::storage<md::ls::BaseMapTileHandle>(v1);
  *((_QWORD *)&v6 + 1) = gdc::Registry::storage<md::ls::TileViewConstantDataHandle>(v1);
  *(_QWORD *)&v7 = gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>(v1);
  *((_QWORD *)&v7 + 1) = gdc::Registry::storage<md::ls::TileMatrix>(v1);
  *(_QWORD *)&v8 = gdc::Registry::storage<md::ls::TilePrepassShadowConstantDataHandle>(v1);
  *((_QWORD *)&v8 + 1) = gdc::Registry::storage<md::ls::TilePrepassConstantDataHandle>(v1);
  gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsDepthPrePass const,md::ls::RenderablesCount const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const>,gdc::Any<>,gdc::None<>>::begin(v9, &v4);
  v10[0] = v4;
  v10[1] = v5;
  v10[2] = v6;
  v10[3] = v7;
  v10[4] = v8;
  v2 = gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsDepthPrePass const,md::ls::RenderablesCount const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const>,gdc::Any<>,gdc::None<>>::minSizeStorage<gdc::ComponentStorageWrapper<md::ls::EnteringView> const*,gdc::ComponentStorageWrapper<md::ls::SupportsDepthPrePass> const*,gdc::ComponentStorageWrapper<md::ls::RenderablesCount> const*,gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileMatrix> const*,gdc::ComponentStorageWrapper<md::ls::TilePrepassShadowConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TilePrepassConstantDataHandle> const*>(v10);
  return *(_QWORD *)(v2 + 32) == v9[12];
}

uint64_t gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsDepthPrePass const,md::ls::RenderablesCount const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const>,gdc::Any<>,gdc::None<>>::begin(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[10];

  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v16 = a2[9];
  v17[0] = *a2;
  v3 = v17[0];
  v17[1] = v4;
  v17[2] = v5;
  v17[3] = v6;
  v17[4] = v7;
  v17[5] = v8;
  v17[6] = v9;
  v17[7] = v10;
  v17[8] = v11;
  v17[9] = v16;
  result = gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsDepthPrePass const,md::ls::RenderablesCount const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const>,gdc::Any<>,gdc::None<>>::minSizeStorage<gdc::ComponentStorageWrapper<md::ls::EnteringView> const*,gdc::ComponentStorageWrapper<md::ls::SupportsDepthPrePass> const*,gdc::ComponentStorageWrapper<md::ls::RenderablesCount> const*,gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileMatrix> const*,gdc::ComponentStorageWrapper<md::ls::TilePrepassShadowConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TilePrepassConstantDataHandle> const*>(v17);
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v16;
  v14 = *(_QWORD *)(result + 24);
  v13 = *(_QWORD *)(result + 32);
  a1[12] = v14;
  if (v13 != v14)
  {
    result = gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsDepthPrePass const,md::ls::RenderablesCount const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
    if ((result & 1) == 0)
    {
      v15 = v14 + 8;
      do
      {
        a1[12] = v15;
        if (v15 == v13)
          break;
        result = gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsDepthPrePass const,md::ls::RenderablesCount const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
        v15 += 8;
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

uint64_t gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsDepthPrePass const,md::ls::RenderablesCount const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const>,gdc::Any<>,gdc::None<>>::minSizeStorage<gdc::ComponentStorageWrapper<md::ls::EnteringView> const*,gdc::ComponentStorageWrapper<md::ls::SupportsDepthPrePass> const*,gdc::ComponentStorageWrapper<md::ls::RenderablesCount> const*,gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileMatrix> const*,gdc::ComponentStorageWrapper<md::ls::TilePrepassShadowConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TilePrepassConstantDataHandle> const*>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = a1[1];
  if (*a1)
    v2 = *a1 + 32;
  else
    v2 = 0;
  if (v1)
    v3 = v1 + 32;
  else
    v3 = 0;
  v4 = a1[2];
  v5 = a1[3];
  if (v4)
    v6 = v4 + 32;
  else
    v6 = 0;
  if (v5)
    v7 = v5 + 32;
  else
    v7 = 0;
  v8 = a1[4];
  v9 = a1[5];
  if (v8)
    v10 = v8 + 32;
  else
    v10 = 0;
  if (v9)
    v11 = v9 + 32;
  else
    v11 = 0;
  v12 = a1[6];
  v13 = a1[7];
  if (v12)
    v14 = v12 + 32;
  else
    v14 = 0;
  if (v13)
    v15 = v13 + 32;
  else
    v15 = 0;
  v17 = a1[8];
  v16 = a1[9];
  v18 = v17 + 32;
  if (!v17)
    v18 = 0;
  v19 = v16 + 32;
  if (!v16)
    v19 = 0;
  if (*(_QWORD *)(v3 + 32) - *(_QWORD *)(v3 + 24) < *(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24))
    v2 = v3;
  if (*(_QWORD *)(v6 + 32) - *(_QWORD *)(v6 + 24) < *(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24))
    v2 = v6;
  if (*(_QWORD *)(v7 + 32) - *(_QWORD *)(v7 + 24) < *(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24))
    v2 = v7;
  if (*(_QWORD *)(v10 + 32) - *(_QWORD *)(v10 + 24) < *(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24))
    v2 = v10;
  if (*(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24) < *(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24))
    v2 = v11;
  if (*(_QWORD *)(v14 + 32) - *(_QWORD *)(v14 + 24) < *(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24))
    v2 = v14;
  if (*(_QWORD *)(v15 + 32) - *(_QWORD *)(v15 + 24) >= *(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24))
    v15 = v2;
  if (*(_QWORD *)(v18 + 32) - *(_QWORD *)(v18 + 24) >= *(_QWORD *)(v15 + 32) - *(_QWORD *)(v15 + 24))
    v18 = v15;
  if (*(_QWORD *)(v19 + 32) - *(_QWORD *)(v19 + 24) >= *(_QWORD *)(v18 + 32) - *(_QWORD *)(v18 + 24))
    return v18;
  else
    return v19;
}

BOOL gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsDepthPrePass const,md::ls::RenderablesCount const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v1 = (_QWORD *)a1[1];
  v2 = *(unsigned int *)(a1[12] + 4);
  v3 = v2 >> 7;
  v4 = v1[4];
  if (v2 >> 7 >= (v1[5] - v4) >> 3)
    return 0;
  v5 = *(_QWORD *)(v4 + 8 * v3);
  if (!v5)
    return 0;
  v6 = v2 & 0x7F;
  v7 = *(unsigned __int16 *)(v5 + 2 * v6);
  v10 = v1 + 7;
  v8 = v1[7];
  v9 = v10[1];
  if (v7 >= (v9 - v8) >> 3)
    return 0;
  v11 = v8 + 8 * v7;
  if (v11 == v9 || *(_DWORD *)(v11 + 4) != (_DWORD)v2)
    return 0;
  v13 = (_QWORD *)a1[2];
  v14 = v13[4];
  if (v3 >= (v13[5] - v14) >> 3)
    return 0;
  v15 = *(_QWORD *)(v14 + 8 * v3);
  if (!v15)
    return 0;
  v16 = *(unsigned __int16 *)(v15 + 2 * v6);
  v19 = v13 + 7;
  v17 = v13[7];
  v18 = v19[1];
  if (v16 >= (v18 - v17) >> 3)
    return 0;
  v20 = v17 + 8 * v16;
  if (v20 == v18 || *(_DWORD *)(v20 + 4) != (_DWORD)v2)
    return 0;
  v22 = (_QWORD *)a1[3];
  v23 = v22[4];
  if (v3 >= (v22[5] - v23) >> 3)
    return 0;
  v24 = *(_QWORD *)(v23 + 8 * v3);
  if (!v24)
    return 0;
  v25 = *(unsigned __int16 *)(v24 + 2 * v6);
  v28 = v22 + 7;
  v26 = v22[7];
  v27 = v28[1];
  if (v25 >= (v27 - v26) >> 3)
    return 0;
  v29 = v26 + 8 * v25;
  if (v29 == v27 || *(_DWORD *)(v29 + 4) != (_DWORD)v2)
    return 0;
  v31 = (_QWORD *)a1[4];
  v32 = v31[4];
  if (v3 >= (v31[5] - v32) >> 3)
    return 0;
  v33 = *(_QWORD *)(v32 + 8 * v3);
  if (!v33)
    return 0;
  v34 = *(unsigned __int16 *)(v33 + 2 * v6);
  v37 = v31 + 7;
  v35 = v31[7];
  v36 = v37[1];
  if (v34 >= (v36 - v35) >> 3)
    return 0;
  v38 = v35 + 8 * v34;
  if (v38 == v36 || *(_DWORD *)(v38 + 4) != (_DWORD)v2)
    return 0;
  v40 = (_QWORD *)a1[5];
  v41 = v40[4];
  if (v3 >= (v40[5] - v41) >> 3)
    return 0;
  v42 = *(_QWORD *)(v41 + 8 * v3);
  if (!v42)
    return 0;
  v43 = *(unsigned __int16 *)(v42 + 2 * v6);
  v45 = v40[7];
  v44 = v40[8];
  if (v43 >= (v44 - v45) >> 3)
    return 0;
  v46 = 0;
  v47 = v45 + 8 * v43;
  if (v47 == v44 || *(_DWORD *)(v47 + 4) != (_DWORD)v2)
    return v46;
  v48 = (_QWORD *)a1[6];
  v49 = v48[4];
  if (v3 >= (v48[5] - v49) >> 3)
    return 0;
  v50 = *(_QWORD *)(v49 + 8 * v3);
  if (!v50)
    return 0;
  v51 = *(unsigned __int16 *)(v50 + 2 * v6);
  v53 = v48[7];
  v52 = v48[8];
  if (v51 >= (v52 - v53) >> 3)
    return 0;
  v46 = 0;
  v54 = v53 + 8 * v51;
  if (v54 == v52 || *(_DWORD *)(v54 + 4) != (_DWORD)v2)
    return v46;
  v55 = (_QWORD *)a1[7];
  v56 = v55[4];
  if (v3 >= (v55[5] - v56) >> 3)
    return 0;
  v57 = *(_QWORD *)(v56 + 8 * v3);
  if (!v57)
    return 0;
  v58 = *(unsigned __int16 *)(v57 + 2 * v6);
  v60 = v55[7];
  v59 = v55[8];
  if (v58 >= (v59 - v60) >> 3)
    return 0;
  v46 = 0;
  v61 = v60 + 8 * v58;
  if (v61 == v59 || *(_DWORD *)(v61 + 4) != (_DWORD)v2)
    return v46;
  v62 = (_QWORD *)a1[8];
  v63 = v62[4];
  if (v3 >= (v62[5] - v63) >> 3)
    return 0;
  v64 = *(_QWORD *)(v63 + 8 * v3);
  if (!v64)
    return 0;
  v65 = *(unsigned __int16 *)(v64 + 2 * v6);
  v67 = v62[7];
  v66 = v62[8];
  if (v65 >= (v66 - v67) >> 3)
    return 0;
  v46 = 0;
  v68 = v67 + 8 * v65;
  if (v68 == v66 || *(_DWORD *)(v68 + 4) != (_DWORD)v2)
    return v46;
  v69 = (_QWORD *)a1[9];
  v70 = v69[4];
  if (v3 >= (v69[5] - v70) >> 3)
    return 0;
  v71 = *(_QWORD *)(v70 + 8 * v3);
  if (!v71)
    return 0;
  v72 = *(unsigned __int16 *)(v71 + 2 * v6);
  v74 = v69[7];
  v73 = v69[8];
  if (v72 >= (v73 - v74) >> 3)
    return 0;
  v46 = 0;
  v75 = v74 + 8 * v72;
  if (v75 != v73 && *(_DWORD *)(v75 + 4) == (_DWORD)v2)
    return geo::sparse_map<gdc::Entity,md::ls::TilePrepassConstantDataHandle>::count((_QWORD *)(a1[10] + 32), v2);
  return v46;
}

BOOL geo::sparse_map<gdc::Entity,md::ls::TilePrepassConstantDataHandle>::count(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (unint64_t)a2 >> 7;
  if (v2 >= (uint64_t)(a1[1] - *a1) >> 3 || (v3 = *(_QWORD *)(*a1 + 8 * v2)) == 0)
  {
    v5 = a1[4];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (a2 & 0x7F));
  v6 = a1[3];
  v5 = a1[4];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != a2)
    v7 = a1[4];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateUnflattenedRenderItems>(md::ita::CreateUnflattenedRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateUnflattenedRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateUnflattenedRenderItems>(md::ita::CreateUnflattenedRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateUnflattenedRenderItems>(md::ita::CreateUnflattenedRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateUnflattenedRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateUnflattenedRenderItems>(md::ita::CreateUnflattenedRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286668;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateUnflattenedRenderItems>(md::ita::CreateUnflattenedRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateUnflattenedRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateUnflattenedRenderItems>(md::ita::CreateUnflattenedRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286668;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateUnflattenedRenderItems>(md::ita::CreateUnflattenedRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateUnflattenedRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateUnflattenedRenderItems>(md::ita::CreateUnflattenedRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  unint64_t v68;
  char *v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  __int128 v78;
  unint64_t v79;
  char *v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  __int128 v89;
  unint64_t v90;
  char *v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  __int128 v100;
  unint64_t v101;
  char *v102;
  char *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  __int128 v111;
  unint64_t v112;
  char *v113;
  char *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  __int128 v122;
  unint64_t v123;
  char *v124;
  char *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  __int128 v133;
  unint64_t v134;
  char *v135;
  char *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  __int128 v144;
  unint64_t v145;
  char *v146;
  char *v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  __int128 v155;
  unint64_t v156;
  char *v157;
  char *v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  __int128 v166;
  unint64_t v167;
  char *v168;
  char *v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  unint64_t v178;
  char *v179;
  char *v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  __int128 v188;
  unint64_t v189;
  char *v190;
  char *v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  char *v196;
  char *v197;
  char *v198;
  __int128 v199;
  unint64_t v200;
  char *v201;
  char *v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  char *v207;
  char *v208;
  char *v209;
  __int128 v210;
  unint64_t v211;
  char *v212;
  char *v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  __int128 v221;
  unint64_t v222;
  char *v223;
  char *v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  char *v230;
  char *v231;
  __int128 v232;
  unint64_t v233;
  char *v234;
  char *v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  char *v240;
  char *v241;
  char *v242;
  __int128 v243;
  unint64_t v244;
  char *v245;
  char *v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  char *v251;
  char *v252;
  char *v253;
  __int128 v254;
  unint64_t v255;
  char *v256;
  char *v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  char *v262;
  char *v263;
  char *v264;
  __int128 v265;
  unint64_t v266;
  char *v267;
  char *v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  char *v273;
  char *v274;
  char *v275;
  __int128 v276;
  unint64_t v277;
  char *v278;
  char *v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  char *v284;
  char *v285;
  char *v286;
  __int128 v287;
  unint64_t v288;
  char *v289;
  char *v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  char *v295;
  char *v296;
  char *v297;
  __int128 v298;
  unint64_t v299;
  char *v300;
  char *v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  char *v306;
  char *v307;
  char *v308;
  __int128 v309;
  unint64_t v310;
  char *v311;
  char *v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  char *v317;
  char *v318;
  char *v319;
  __int128 v320;
  unint64_t v321;
  char *v322;
  char *v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  char *v328;
  char *v329;
  char *v330;
  __int128 v331;
  unint64_t v332;
  char *v333;
  char *v334;
  unint64_t v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t v338;
  char *v339;
  char *v340;
  char *v341;
  __int128 v342;
  unint64_t v343;
  char *v344;
  char *v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  unint64_t v349;
  char *v350;
  char *v351;
  char *v352;
  __int128 v353;
  unint64_t v354;
  char *v355;
  char *v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  char *v361;
  char *v362;
  char *v363;
  __int128 v364;
  unint64_t v365;
  char *v366;
  char *v367;
  unint64_t v368;
  unint64_t v369;
  unint64_t v370;
  unint64_t v371;
  char *v372;
  char *v373;
  char *v374;
  __int128 v375;
  unint64_t v376;
  char *v377;
  char *v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unint64_t v382;
  char *v383;
  char *v384;
  char *v385;
  __int128 v386;
  unint64_t v387;
  char *v388;
  char *v389;
  unint64_t v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v393;
  char *v394;
  char *v395;
  char *v396;
  __int128 v397;
  unint64_t v398;
  char *v399;
  char *v400;
  unint64_t v401;
  unint64_t v402;
  unint64_t v403;
  unint64_t v404;
  char *v405;
  char *v406;
  char *v407;
  __int128 v408;
  unint64_t v409;
  char *v410;
  char *v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  char *v416;
  char *v417;
  char *v418;
  __int128 v419;
  unint64_t v420;
  char *v421;
  char *v422;
  unint64_t v423;
  unint64_t v424;
  unint64_t v425;
  unint64_t v426;
  char *v427;
  char *v428;
  char *v429;
  __int128 v430;
  unint64_t v431;
  char *v432;
  char *v433;
  unint64_t v434;
  unint64_t v435;
  unint64_t v436;
  unint64_t v437;
  char *v438;
  char *v439;
  char *v440;
  __int128 v441;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x408uLL);
  a1[2] = (char *)(v2 + 129);
  *v2 = 0x523816724122CCE2;
  v2[1] = "md::ls::AssociationHandle]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB4390;
  v2[4] = "md::ls::HasMeshHandle]";
  v2[5] = 21;
  v2[6] = 0x6C7EE74910D42096;
  v2[7] = "md::ls::PositionScaleInfoConstantDataHandle]";
  v2[8] = 43;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 129)
  {
    *(_QWORD *)v3 = 0xCFE242268B958ADALL;
    v2[10] = "md::ls::ViewConstantDataHandle]";
    v2[11] = 30;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  if (0x5555555555555556 * (((char *)(v2 + 129) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 129) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 129) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0xCFE242268B958ADALL;
  *((_QWORD *)v10 + 1) = "md::ls::ViewConstantDataHandle]";
  *((_QWORD *)v10 + 2) = 30;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0x74DC502726E97929;
    *((_QWORD *)v4 + 1) = "md::ls::TransformConstantDataHandle]";
    *((_QWORD *)v4 + 2) = 35;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v20 = (char *)operator new(24 * v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0x74DC502726E97929;
  *((_QWORD *)v21 + 1) = "md::ls::TransformConstantDataHandle]";
  *((_QWORD *)v21 + 2) = 35;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
  v24 = (unint64_t)a1[2];
  if ((unint64_t)v14 < v24)
  {
    *(_QWORD *)v14 = 0x1BB343378E1EE5BLL;
    *((_QWORD *)v14 + 1) = "md::ls::StyleDataKeyHandle]";
    *((_QWORD *)v14 + 2) = 26;
    v25 = v14 + 24;
    goto LABEL_55;
  }
  v26 = *a1;
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3);
  v28 = v27 + 1;
  if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x555555555555555)
    v30 = 0xAAAAAAAAAAAAAAALL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v31 = (char *)operator new(24 * v30);
  }
  else
  {
    v31 = 0;
  }
  v32 = &v31[24 * v27];
  v33 = &v31[24 * v30];
  *(_QWORD *)v32 = 0x1BB343378E1EE5BLL;
  *((_QWORD *)v32 + 1) = "md::ls::StyleDataKeyHandle]";
  *((_QWORD *)v32 + 2) = 26;
  v25 = v32 + 24;
  if (v14 == v26)
  {
    *a1 = v32;
    a1[1] = v25;
    a1[2] = v33;
LABEL_54:
    operator delete(v14);
    goto LABEL_55;
  }
  do
  {
    v34 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v32 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v32 - 24) = v34;
    v32 -= 24;
    v14 -= 24;
  }
  while (v14 != v26);
  v14 = *a1;
  *a1 = v32;
  a1[1] = v25;
  a1[2] = v33;
  if (v14)
    goto LABEL_54;
LABEL_55:
  a1[1] = v25;
  v35 = (unint64_t)a1[2];
  if ((unint64_t)v25 < v35)
  {
    *(_QWORD *)v25 = 0xA50DD2A5BD75DBD6;
    *((_QWORD *)v25 + 1) = "md::ls::StyleEmissiveDataKeyHandle]";
    *((_QWORD *)v25 + 2) = 34;
    v36 = v25 + 24;
    goto LABEL_73;
  }
  v37 = *a1;
  v38 = 0xAAAAAAAAAAAAAAABLL * ((v25 - *a1) >> 3);
  v39 = v38 + 1;
  if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v37) >> 3);
  if (2 * v40 > v39)
    v39 = 2 * v40;
  if (v40 >= 0x555555555555555)
    v41 = 0xAAAAAAAAAAAAAAALL;
  else
    v41 = v39;
  if (v41)
  {
    if (v41 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v42 = (char *)operator new(24 * v41);
  }
  else
  {
    v42 = 0;
  }
  v43 = &v42[24 * v38];
  v44 = &v42[24 * v41];
  *(_QWORD *)v43 = 0xA50DD2A5BD75DBD6;
  *((_QWORD *)v43 + 1) = "md::ls::StyleEmissiveDataKeyHandle]";
  *((_QWORD *)v43 + 2) = 34;
  v36 = v43 + 24;
  if (v25 == v37)
  {
    *a1 = v43;
    a1[1] = v36;
    a1[2] = v44;
LABEL_72:
    operator delete(v25);
    goto LABEL_73;
  }
  do
  {
    v45 = *(_OWORD *)(v25 - 24);
    *((_QWORD *)v43 - 1) = *((_QWORD *)v25 - 1);
    *(_OWORD *)(v43 - 24) = v45;
    v43 -= 24;
    v25 -= 24;
  }
  while (v25 != v37);
  v25 = *a1;
  *a1 = v43;
  a1[1] = v36;
  a1[2] = v44;
  if (v25)
    goto LABEL_72;
LABEL_73:
  a1[1] = v36;
  v46 = (unint64_t)a1[2];
  if ((unint64_t)v36 < v46)
  {
    *(_QWORD *)v36 = 0x96F87A2692FE4013;
    *((_QWORD *)v36 + 1) = "md::ls::StyleCameraConstantDataHandle]";
    *((_QWORD *)v36 + 2) = 37;
    v47 = v36 + 24;
    goto LABEL_91;
  }
  v48 = *a1;
  v49 = 0xAAAAAAAAAAAAAAABLL * ((v36 - *a1) >> 3);
  v50 = v49 + 1;
  if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - (_QWORD)v48) >> 3);
  if (2 * v51 > v50)
    v50 = 2 * v51;
  if (v51 >= 0x555555555555555)
    v52 = 0xAAAAAAAAAAAAAAALL;
  else
    v52 = v50;
  if (v52)
  {
    if (v52 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v53 = (char *)operator new(24 * v52);
  }
  else
  {
    v53 = 0;
  }
  v54 = &v53[24 * v49];
  v55 = &v53[24 * v52];
  *(_QWORD *)v54 = 0x96F87A2692FE4013;
  *((_QWORD *)v54 + 1) = "md::ls::StyleCameraConstantDataHandle]";
  *((_QWORD *)v54 + 2) = 37;
  v47 = v54 + 24;
  if (v36 == v48)
  {
    *a1 = v54;
    a1[1] = v47;
    a1[2] = v55;
LABEL_90:
    operator delete(v36);
    goto LABEL_91;
  }
  do
  {
    v56 = *(_OWORD *)(v36 - 24);
    *((_QWORD *)v54 - 1) = *((_QWORD *)v36 - 1);
    *(_OWORD *)(v54 - 24) = v56;
    v54 -= 24;
    v36 -= 24;
  }
  while (v36 != v48);
  v36 = *a1;
  *a1 = v54;
  a1[1] = v47;
  a1[2] = v55;
  if (v36)
    goto LABEL_90;
LABEL_91:
  a1[1] = v47;
  v57 = (unint64_t)a1[2];
  if ((unint64_t)v47 < v57)
  {
    *(_QWORD *)v47 = 0xA3F884E4E2541296;
    *((_QWORD *)v47 + 1) = "md::ls::ColorDataHandle]";
    *((_QWORD *)v47 + 2) = 23;
    v58 = v47 + 24;
    goto LABEL_109;
  }
  v59 = *a1;
  v60 = 0xAAAAAAAAAAAAAAABLL * ((v47 - *a1) >> 3);
  v61 = v60 + 1;
  if (v60 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - (_QWORD)v59) >> 3);
  if (2 * v62 > v61)
    v61 = 2 * v62;
  if (v62 >= 0x555555555555555)
    v63 = 0xAAAAAAAAAAAAAAALL;
  else
    v63 = v61;
  if (v63)
  {
    if (v63 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v64 = (char *)operator new(24 * v63);
  }
  else
  {
    v64 = 0;
  }
  v65 = &v64[24 * v60];
  v66 = &v64[24 * v63];
  *(_QWORD *)v65 = 0xA3F884E4E2541296;
  *((_QWORD *)v65 + 1) = "md::ls::ColorDataHandle]";
  *((_QWORD *)v65 + 2) = 23;
  v58 = v65 + 24;
  if (v47 == v59)
  {
    *a1 = v65;
    a1[1] = v58;
    a1[2] = v66;
LABEL_108:
    operator delete(v47);
    goto LABEL_109;
  }
  do
  {
    v67 = *(_OWORD *)(v47 - 24);
    *((_QWORD *)v65 - 1) = *((_QWORD *)v47 - 1);
    *(_OWORD *)(v65 - 24) = v67;
    v65 -= 24;
    v47 -= 24;
  }
  while (v47 != v59);
  v47 = *a1;
  *a1 = v65;
  a1[1] = v58;
  a1[2] = v66;
  if (v47)
    goto LABEL_108;
LABEL_109:
  a1[1] = v58;
  v68 = (unint64_t)a1[2];
  if ((unint64_t)v58 < v68)
  {
    *(_QWORD *)v58 = 0x71CBA64B1A9CA230;
    *((_QWORD *)v58 + 1) = "md::ls::IndexRange]";
    *((_QWORD *)v58 + 2) = 18;
    v69 = v58 + 24;
    goto LABEL_127;
  }
  v70 = *a1;
  v71 = 0xAAAAAAAAAAAAAAABLL * ((v58 - *a1) >> 3);
  v72 = v71 + 1;
  if (v71 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - (_QWORD)v70) >> 3);
  if (2 * v73 > v72)
    v72 = 2 * v73;
  if (v73 >= 0x555555555555555)
    v74 = 0xAAAAAAAAAAAAAAALL;
  else
    v74 = v72;
  if (v74)
  {
    if (v74 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v75 = (char *)operator new(24 * v74);
  }
  else
  {
    v75 = 0;
  }
  v76 = &v75[24 * v71];
  v77 = &v75[24 * v74];
  *(_QWORD *)v76 = 0x71CBA64B1A9CA230;
  *((_QWORD *)v76 + 1) = "md::ls::IndexRange]";
  *((_QWORD *)v76 + 2) = 18;
  v69 = v76 + 24;
  if (v58 == v70)
  {
    *a1 = v76;
    a1[1] = v69;
    a1[2] = v77;
LABEL_126:
    operator delete(v58);
    goto LABEL_127;
  }
  do
  {
    v78 = *(_OWORD *)(v58 - 24);
    *((_QWORD *)v76 - 1) = *((_QWORD *)v58 - 1);
    *(_OWORD *)(v76 - 24) = v78;
    v76 -= 24;
    v58 -= 24;
  }
  while (v58 != v70);
  v58 = *a1;
  *a1 = v76;
  a1[1] = v69;
  a1[2] = v77;
  if (v58)
    goto LABEL_126;
LABEL_127:
  a1[1] = v69;
  v79 = (unint64_t)a1[2];
  if ((unint64_t)v69 < v79)
  {
    *(_QWORD *)v69 = 0xD5AD9B8C3FE62EE8;
    *((_QWORD *)v69 + 1) = "md::ls::StyleGroundOcclusionConstantDataHandle]";
    *((_QWORD *)v69 + 2) = 46;
    v80 = v69 + 24;
    goto LABEL_145;
  }
  v81 = *a1;
  v82 = 0xAAAAAAAAAAAAAAABLL * ((v69 - *a1) >> 3);
  v83 = v82 + 1;
  if (v82 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v84 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - (_QWORD)v81) >> 3);
  if (2 * v84 > v83)
    v83 = 2 * v84;
  if (v84 >= 0x555555555555555)
    v85 = 0xAAAAAAAAAAAAAAALL;
  else
    v85 = v83;
  if (v85)
  {
    if (v85 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v86 = (char *)operator new(24 * v85);
  }
  else
  {
    v86 = 0;
  }
  v87 = &v86[24 * v82];
  v88 = &v86[24 * v85];
  *(_QWORD *)v87 = 0xD5AD9B8C3FE62EE8;
  *((_QWORD *)v87 + 1) = "md::ls::StyleGroundOcclusionConstantDataHandle]";
  *((_QWORD *)v87 + 2) = 46;
  v80 = v87 + 24;
  if (v69 == v81)
  {
    *a1 = v87;
    a1[1] = v80;
    a1[2] = v88;
LABEL_144:
    operator delete(v69);
    goto LABEL_145;
  }
  do
  {
    v89 = *(_OWORD *)(v69 - 24);
    *((_QWORD *)v87 - 1) = *((_QWORD *)v69 - 1);
    *(_OWORD *)(v87 - 24) = v89;
    v87 -= 24;
    v69 -= 24;
  }
  while (v69 != v81);
  v69 = *a1;
  *a1 = v87;
  a1[1] = v80;
  a1[2] = v88;
  if (v69)
    goto LABEL_144;
LABEL_145:
  a1[1] = v80;
  v90 = (unint64_t)a1[2];
  if ((unint64_t)v80 < v90)
  {
    *(_QWORD *)v80 = 0x3218EFD67197A145;
    *((_QWORD *)v80 + 1) = "md::ls::NormalsHandle]";
    *((_QWORD *)v80 + 2) = 21;
    v91 = v80 + 24;
    goto LABEL_163;
  }
  v92 = *a1;
  v93 = 0xAAAAAAAAAAAAAAABLL * ((v80 - *a1) >> 3);
  v94 = v93 + 1;
  if (v93 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v95 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v90 - (_QWORD)v92) >> 3);
  if (2 * v95 > v94)
    v94 = 2 * v95;
  if (v95 >= 0x555555555555555)
    v96 = 0xAAAAAAAAAAAAAAALL;
  else
    v96 = v94;
  if (v96)
  {
    if (v96 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v97 = (char *)operator new(24 * v96);
  }
  else
  {
    v97 = 0;
  }
  v98 = &v97[24 * v93];
  v99 = &v97[24 * v96];
  *(_QWORD *)v98 = 0x3218EFD67197A145;
  *((_QWORD *)v98 + 1) = "md::ls::NormalsHandle]";
  *((_QWORD *)v98 + 2) = 21;
  v91 = v98 + 24;
  if (v80 == v92)
  {
    *a1 = v98;
    a1[1] = v91;
    a1[2] = v99;
LABEL_162:
    operator delete(v80);
    goto LABEL_163;
  }
  do
  {
    v100 = *(_OWORD *)(v80 - 24);
    *((_QWORD *)v98 - 1) = *((_QWORD *)v80 - 1);
    *(_OWORD *)(v98 - 24) = v100;
    v98 -= 24;
    v80 -= 24;
  }
  while (v80 != v92);
  v80 = *a1;
  *a1 = v98;
  a1[1] = v91;
  a1[2] = v99;
  if (v80)
    goto LABEL_162;
LABEL_163:
  a1[1] = v91;
  v101 = (unint64_t)a1[2];
  if ((unint64_t)v91 < v101)
  {
    *(_QWORD *)v91 = 0xAF179EFD8A4C83D4;
    *((_QWORD *)v91 + 1) = "md::ls::InstanceTransformHandle]";
    *((_QWORD *)v91 + 2) = 31;
    v102 = v91 + 24;
    goto LABEL_181;
  }
  v103 = *a1;
  v104 = 0xAAAAAAAAAAAAAAABLL * ((v91 - *a1) >> 3);
  v105 = v104 + 1;
  if (v104 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (_QWORD)v103) >> 3);
  if (2 * v106 > v105)
    v105 = 2 * v106;
  if (v106 >= 0x555555555555555)
    v107 = 0xAAAAAAAAAAAAAAALL;
  else
    v107 = v105;
  if (v107)
  {
    if (v107 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v108 = (char *)operator new(24 * v107);
  }
  else
  {
    v108 = 0;
  }
  v109 = &v108[24 * v104];
  v110 = &v108[24 * v107];
  *(_QWORD *)v109 = 0xAF179EFD8A4C83D4;
  *((_QWORD *)v109 + 1) = "md::ls::InstanceTransformHandle]";
  *((_QWORD *)v109 + 2) = 31;
  v102 = v109 + 24;
  if (v91 == v103)
  {
    *a1 = v109;
    a1[1] = v102;
    a1[2] = v110;
LABEL_180:
    operator delete(v91);
    goto LABEL_181;
  }
  do
  {
    v111 = *(_OWORD *)(v91 - 24);
    *((_QWORD *)v109 - 1) = *((_QWORD *)v91 - 1);
    *(_OWORD *)(v109 - 24) = v111;
    v109 -= 24;
    v91 -= 24;
  }
  while (v91 != v103);
  v91 = *a1;
  *a1 = v109;
  a1[1] = v102;
  a1[2] = v110;
  if (v91)
    goto LABEL_180;
LABEL_181:
  a1[1] = v102;
  v112 = (unint64_t)a1[2];
  if ((unint64_t)v102 < v112)
  {
    *(_QWORD *)v102 = 0xCBB77B1CBD05D7C5;
    *((_QWORD *)v102 + 1) = "md::ls::UVsHandle]";
    *((_QWORD *)v102 + 2) = 17;
    v113 = v102 + 24;
    goto LABEL_199;
  }
  v114 = *a1;
  v115 = 0xAAAAAAAAAAAAAAABLL * ((v102 - *a1) >> 3);
  v116 = v115 + 1;
  if (v115 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v112 - (_QWORD)v114) >> 3);
  if (2 * v117 > v116)
    v116 = 2 * v117;
  if (v117 >= 0x555555555555555)
    v118 = 0xAAAAAAAAAAAAAAALL;
  else
    v118 = v116;
  if (v118)
  {
    if (v118 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v119 = (char *)operator new(24 * v118);
  }
  else
  {
    v119 = 0;
  }
  v120 = &v119[24 * v115];
  v121 = &v119[24 * v118];
  *(_QWORD *)v120 = 0xCBB77B1CBD05D7C5;
  *((_QWORD *)v120 + 1) = "md::ls::UVsHandle]";
  *((_QWORD *)v120 + 2) = 17;
  v113 = v120 + 24;
  if (v102 == v114)
  {
    *a1 = v120;
    a1[1] = v113;
    a1[2] = v121;
LABEL_198:
    operator delete(v102);
    goto LABEL_199;
  }
  do
  {
    v122 = *(_OWORD *)(v102 - 24);
    *((_QWORD *)v120 - 1) = *((_QWORD *)v102 - 1);
    *(_OWORD *)(v120 - 24) = v122;
    v120 -= 24;
    v102 -= 24;
  }
  while (v102 != v114);
  v102 = *a1;
  *a1 = v120;
  a1[1] = v113;
  a1[2] = v121;
  if (v102)
    goto LABEL_198;
LABEL_199:
  a1[1] = v113;
  v123 = (unint64_t)a1[2];
  if ((unint64_t)v113 < v123)
  {
    *(_QWORD *)v113 = 0xD443D3DCBB78491ALL;
    *((_QWORD *)v113 + 1) = "md::ls::ElevationHandle]";
    *((_QWORD *)v113 + 2) = 23;
    v124 = v113 + 24;
    goto LABEL_217;
  }
  v125 = *a1;
  v126 = 0xAAAAAAAAAAAAAAABLL * ((v113 - *a1) >> 3);
  v127 = v126 + 1;
  if (v126 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v128 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v123 - (_QWORD)v125) >> 3);
  if (2 * v128 > v127)
    v127 = 2 * v128;
  if (v128 >= 0x555555555555555)
    v129 = 0xAAAAAAAAAAAAAAALL;
  else
    v129 = v127;
  if (v129)
  {
    if (v129 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v130 = (char *)operator new(24 * v129);
  }
  else
  {
    v130 = 0;
  }
  v131 = &v130[24 * v126];
  v132 = &v130[24 * v129];
  *(_QWORD *)v131 = 0xD443D3DCBB78491ALL;
  *((_QWORD *)v131 + 1) = "md::ls::ElevationHandle]";
  *((_QWORD *)v131 + 2) = 23;
  v124 = v131 + 24;
  if (v113 == v125)
  {
    *a1 = v131;
    a1[1] = v124;
    a1[2] = v132;
LABEL_216:
    operator delete(v113);
    goto LABEL_217;
  }
  do
  {
    v133 = *(_OWORD *)(v113 - 24);
    *((_QWORD *)v131 - 1) = *((_QWORD *)v113 - 1);
    *(_OWORD *)(v131 - 24) = v133;
    v131 -= 24;
    v113 -= 24;
  }
  while (v113 != v125);
  v113 = *a1;
  *a1 = v131;
  a1[1] = v124;
  a1[2] = v132;
  if (v113)
    goto LABEL_216;
LABEL_217:
  a1[1] = v124;
  v134 = (unint64_t)a1[2];
  if ((unint64_t)v124 < v134)
  {
    *(_QWORD *)v124 = 0xDD9825BCFA7911B2;
    *((_QWORD *)v124 + 1) = "md::ls::TextureHandleForType<DaVinci::DiffuseTexture>]";
    *((_QWORD *)v124 + 2) = 53;
    v135 = v124 + 24;
    goto LABEL_235;
  }
  v136 = *a1;
  v137 = 0xAAAAAAAAAAAAAAABLL * ((v124 - *a1) >> 3);
  v138 = v137 + 1;
  if (v137 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v139 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v134 - (_QWORD)v136) >> 3);
  if (2 * v139 > v138)
    v138 = 2 * v139;
  if (v139 >= 0x555555555555555)
    v140 = 0xAAAAAAAAAAAAAAALL;
  else
    v140 = v138;
  if (v140)
  {
    if (v140 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v141 = (char *)operator new(24 * v140);
  }
  else
  {
    v141 = 0;
  }
  v142 = &v141[24 * v137];
  v143 = &v141[24 * v140];
  *(_QWORD *)v142 = 0xDD9825BCFA7911B2;
  *((_QWORD *)v142 + 1) = "md::ls::TextureHandleForType<DaVinci::DiffuseTexture>]";
  *((_QWORD *)v142 + 2) = 53;
  v135 = v142 + 24;
  if (v124 == v136)
  {
    *a1 = v142;
    a1[1] = v135;
    a1[2] = v143;
LABEL_234:
    operator delete(v124);
    goto LABEL_235;
  }
  do
  {
    v144 = *(_OWORD *)(v124 - 24);
    *((_QWORD *)v142 - 1) = *((_QWORD *)v124 - 1);
    *(_OWORD *)(v142 - 24) = v144;
    v142 -= 24;
    v124 -= 24;
  }
  while (v124 != v136);
  v124 = *a1;
  *a1 = v142;
  a1[1] = v135;
  a1[2] = v143;
  if (v124)
    goto LABEL_234;
LABEL_235:
  a1[1] = v135;
  v145 = (unint64_t)a1[2];
  if ((unint64_t)v135 < v145)
  {
    *(_QWORD *)v135 = 0xDC98991DB7473274;
    *((_QWORD *)v135 + 1) = "md::ls::LandCoverSettingsConstantDataHandle]";
    *((_QWORD *)v135 + 2) = 43;
    v146 = v135 + 24;
    goto LABEL_253;
  }
  v147 = *a1;
  v148 = 0xAAAAAAAAAAAAAAABLL * ((v135 - *a1) >> 3);
  v149 = v148 + 1;
  if (v148 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v150 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v145 - (_QWORD)v147) >> 3);
  if (2 * v150 > v149)
    v149 = 2 * v150;
  if (v150 >= 0x555555555555555)
    v151 = 0xAAAAAAAAAAAAAAALL;
  else
    v151 = v149;
  if (v151)
  {
    if (v151 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v152 = (char *)operator new(24 * v151);
  }
  else
  {
    v152 = 0;
  }
  v153 = &v152[24 * v148];
  v154 = &v152[24 * v151];
  *(_QWORD *)v153 = 0xDC98991DB7473274;
  *((_QWORD *)v153 + 1) = "md::ls::LandCoverSettingsConstantDataHandle]";
  *((_QWORD *)v153 + 2) = 43;
  v146 = v153 + 24;
  if (v135 == v147)
  {
    *a1 = v153;
    a1[1] = v146;
    a1[2] = v154;
LABEL_252:
    operator delete(v135);
    goto LABEL_253;
  }
  do
  {
    v155 = *(_OWORD *)(v135 - 24);
    *((_QWORD *)v153 - 1) = *((_QWORD *)v135 - 1);
    *(_OWORD *)(v153 - 24) = v155;
    v153 -= 24;
    v135 -= 24;
  }
  while (v135 != v147);
  v135 = *a1;
  *a1 = v153;
  a1[1] = v146;
  a1[2] = v154;
  if (v135)
    goto LABEL_252;
LABEL_253:
  a1[1] = v146;
  v156 = (unint64_t)a1[2];
  if ((unint64_t)v146 < v156)
  {
    *(_QWORD *)v146 = 0xEAA0B82FC49F7277;
    *((_QWORD *)v146 + 1) = "md::ls::ShadowConstantDataHandle]";
    *((_QWORD *)v146 + 2) = 32;
    v157 = v146 + 24;
    goto LABEL_271;
  }
  v158 = *a1;
  v159 = 0xAAAAAAAAAAAAAAABLL * ((v146 - *a1) >> 3);
  v160 = v159 + 1;
  if (v159 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v161 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v156 - (_QWORD)v158) >> 3);
  if (2 * v161 > v160)
    v160 = 2 * v161;
  if (v161 >= 0x555555555555555)
    v162 = 0xAAAAAAAAAAAAAAALL;
  else
    v162 = v160;
  if (v162)
  {
    if (v162 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v163 = (char *)operator new(24 * v162);
  }
  else
  {
    v163 = 0;
  }
  v164 = &v163[24 * v159];
  v165 = &v163[24 * v162];
  *(_QWORD *)v164 = 0xEAA0B82FC49F7277;
  *((_QWORD *)v164 + 1) = "md::ls::ShadowConstantDataHandle]";
  *((_QWORD *)v164 + 2) = 32;
  v157 = v164 + 24;
  if (v146 == v158)
  {
    *a1 = v164;
    a1[1] = v157;
    a1[2] = v165;
LABEL_270:
    operator delete(v146);
    goto LABEL_271;
  }
  do
  {
    v166 = *(_OWORD *)(v146 - 24);
    *((_QWORD *)v164 - 1) = *((_QWORD *)v146 - 1);
    *(_OWORD *)(v164 - 24) = v166;
    v164 -= 24;
    v146 -= 24;
  }
  while (v146 != v158);
  v146 = *a1;
  *a1 = v164;
  a1[1] = v157;
  a1[2] = v165;
  if (v146)
    goto LABEL_270;
LABEL_271:
  a1[1] = v157;
  v167 = (unint64_t)a1[2];
  if ((unint64_t)v157 < v167)
  {
    *(_QWORD *)v157 = 0x1EBB3E0519E8FF9DLL;
    *((_QWORD *)v157 + 1) = "md::ls::PrepassConstantDataHandle]";
    *((_QWORD *)v157 + 2) = 33;
    v168 = v157 + 24;
    goto LABEL_289;
  }
  v169 = *a1;
  v170 = 0xAAAAAAAAAAAAAAABLL * ((v157 - *a1) >> 3);
  v171 = v170 + 1;
  if (v170 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v172 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v167 - (_QWORD)v169) >> 3);
  if (2 * v172 > v171)
    v171 = 2 * v172;
  if (v172 >= 0x555555555555555)
    v173 = 0xAAAAAAAAAAAAAAALL;
  else
    v173 = v171;
  if (v173)
  {
    if (v173 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v174 = (char *)operator new(24 * v173);
  }
  else
  {
    v174 = 0;
  }
  v175 = &v174[24 * v170];
  v176 = &v174[24 * v173];
  *(_QWORD *)v175 = 0x1EBB3E0519E8FF9DLL;
  *((_QWORD *)v175 + 1) = "md::ls::PrepassConstantDataHandle]";
  *((_QWORD *)v175 + 2) = 33;
  v168 = v175 + 24;
  if (v157 == v169)
  {
    *a1 = v175;
    a1[1] = v168;
    a1[2] = v176;
LABEL_288:
    operator delete(v157);
    goto LABEL_289;
  }
  do
  {
    v177 = *(_OWORD *)(v157 - 24);
    *((_QWORD *)v175 - 1) = *((_QWORD *)v157 - 1);
    *(_OWORD *)(v175 - 24) = v177;
    v175 -= 24;
    v157 -= 24;
  }
  while (v157 != v169);
  v157 = *a1;
  *a1 = v175;
  a1[1] = v168;
  a1[2] = v176;
  if (v157)
    goto LABEL_288;
LABEL_289:
  a1[1] = v168;
  v178 = (unint64_t)a1[2];
  if ((unint64_t)v168 < v178)
  {
    *(_QWORD *)v168 = 0x65937AC5D2157F71;
    *((_QWORD *)v168 + 1) = "md::ls::ColorCorrectionFactorConstantHandle]";
    *((_QWORD *)v168 + 2) = 43;
    v179 = v168 + 24;
    goto LABEL_307;
  }
  v180 = *a1;
  v181 = 0xAAAAAAAAAAAAAAABLL * ((v168 - *a1) >> 3);
  v182 = v181 + 1;
  if (v181 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v183 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v178 - (_QWORD)v180) >> 3);
  if (2 * v183 > v182)
    v182 = 2 * v183;
  if (v183 >= 0x555555555555555)
    v184 = 0xAAAAAAAAAAAAAAALL;
  else
    v184 = v182;
  if (v184)
  {
    if (v184 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v185 = (char *)operator new(24 * v184);
  }
  else
  {
    v185 = 0;
  }
  v186 = &v185[24 * v181];
  v187 = &v185[24 * v184];
  *(_QWORD *)v186 = 0x65937AC5D2157F71;
  *((_QWORD *)v186 + 1) = "md::ls::ColorCorrectionFactorConstantHandle]";
  *((_QWORD *)v186 + 2) = 43;
  v179 = v186 + 24;
  if (v168 == v180)
  {
    *a1 = v186;
    a1[1] = v179;
    a1[2] = v187;
LABEL_306:
    operator delete(v168);
    goto LABEL_307;
  }
  do
  {
    v188 = *(_OWORD *)(v168 - 24);
    *((_QWORD *)v186 - 1) = *((_QWORD *)v168 - 1);
    *(_OWORD *)(v186 - 24) = v188;
    v186 -= 24;
    v168 -= 24;
  }
  while (v168 != v180);
  v168 = *a1;
  *a1 = v186;
  a1[1] = v179;
  a1[2] = v187;
  if (v168)
    goto LABEL_306;
LABEL_307:
  a1[1] = v179;
  v189 = (unint64_t)a1[2];
  if ((unint64_t)v179 < v189)
  {
    *(_QWORD *)v179 = 0x9292F9031FE6DB5;
    *((_QWORD *)v179 + 1) = "md::ls::ClippingConstantDataHandle]";
    *((_QWORD *)v179 + 2) = 34;
    v190 = v179 + 24;
    goto LABEL_325;
  }
  v191 = *a1;
  v192 = 0xAAAAAAAAAAAAAAABLL * ((v179 - *a1) >> 3);
  v193 = v192 + 1;
  if (v192 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v194 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v189 - (_QWORD)v191) >> 3);
  if (2 * v194 > v193)
    v193 = 2 * v194;
  if (v194 >= 0x555555555555555)
    v195 = 0xAAAAAAAAAAAAAAALL;
  else
    v195 = v193;
  if (v195)
  {
    if (v195 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v196 = (char *)operator new(24 * v195);
  }
  else
  {
    v196 = 0;
  }
  v197 = &v196[24 * v192];
  v198 = &v196[24 * v195];
  *(_QWORD *)v197 = 0x9292F9031FE6DB5;
  *((_QWORD *)v197 + 1) = "md::ls::ClippingConstantDataHandle]";
  *((_QWORD *)v197 + 2) = 34;
  v190 = v197 + 24;
  if (v179 == v191)
  {
    *a1 = v197;
    a1[1] = v190;
    a1[2] = v198;
LABEL_324:
    operator delete(v179);
    goto LABEL_325;
  }
  do
  {
    v199 = *(_OWORD *)(v179 - 24);
    *((_QWORD *)v197 - 1) = *((_QWORD *)v179 - 1);
    *(_OWORD *)(v197 - 24) = v199;
    v197 -= 24;
    v179 -= 24;
  }
  while (v179 != v191);
  v179 = *a1;
  *a1 = v197;
  a1[1] = v190;
  a1[2] = v198;
  if (v179)
    goto LABEL_324;
LABEL_325:
  a1[1] = v190;
  v200 = (unint64_t)a1[2];
  if ((unint64_t)v190 < v200)
  {
    *(_QWORD *)v190 = 0x32FFF5E924C6D657;
    *((_QWORD *)v190 + 1) = "md::ls::PlanarConstantDataHandle]";
    *((_QWORD *)v190 + 2) = 32;
    v201 = v190 + 24;
    goto LABEL_343;
  }
  v202 = *a1;
  v203 = 0xAAAAAAAAAAAAAAABLL * ((v190 - *a1) >> 3);
  v204 = v203 + 1;
  if (v203 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v205 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v200 - (_QWORD)v202) >> 3);
  if (2 * v205 > v204)
    v204 = 2 * v205;
  if (v205 >= 0x555555555555555)
    v206 = 0xAAAAAAAAAAAAAAALL;
  else
    v206 = v204;
  if (v206)
  {
    if (v206 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v207 = (char *)operator new(24 * v206);
  }
  else
  {
    v207 = 0;
  }
  v208 = &v207[24 * v203];
  v209 = &v207[24 * v206];
  *(_QWORD *)v208 = 0x32FFF5E924C6D657;
  *((_QWORD *)v208 + 1) = "md::ls::PlanarConstantDataHandle]";
  *((_QWORD *)v208 + 2) = 32;
  v201 = v208 + 24;
  if (v190 == v202)
  {
    *a1 = v208;
    a1[1] = v201;
    a1[2] = v209;
LABEL_342:
    operator delete(v190);
    goto LABEL_343;
  }
  do
  {
    v210 = *(_OWORD *)(v190 - 24);
    *((_QWORD *)v208 - 1) = *((_QWORD *)v190 - 1);
    *(_OWORD *)(v208 - 24) = v210;
    v208 -= 24;
    v190 -= 24;
  }
  while (v190 != v202);
  v190 = *a1;
  *a1 = v208;
  a1[1] = v201;
  a1[2] = v209;
  if (v190)
    goto LABEL_342;
LABEL_343:
  a1[1] = v201;
  v211 = (unint64_t)a1[2];
  if ((unint64_t)v201 < v211)
  {
    *(_QWORD *)v201 = 0x1D932F2BF291491;
    *((_QWORD *)v201 + 1) = "md::ls::TextureHandleForType<DaVinci::TexTexture>]";
    *((_QWORD *)v201 + 2) = 49;
    v212 = v201 + 24;
    goto LABEL_361;
  }
  v213 = *a1;
  v214 = 0xAAAAAAAAAAAAAAABLL * ((v201 - *a1) >> 3);
  v215 = v214 + 1;
  if (v214 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v216 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v211 - (_QWORD)v213) >> 3);
  if (2 * v216 > v215)
    v215 = 2 * v216;
  if (v216 >= 0x555555555555555)
    v217 = 0xAAAAAAAAAAAAAAALL;
  else
    v217 = v215;
  if (v217)
  {
    if (v217 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v218 = (char *)operator new(24 * v217);
  }
  else
  {
    v218 = 0;
  }
  v219 = &v218[24 * v214];
  v220 = &v218[24 * v217];
  *(_QWORD *)v219 = 0x1D932F2BF291491;
  *((_QWORD *)v219 + 1) = "md::ls::TextureHandleForType<DaVinci::TexTexture>]";
  *((_QWORD *)v219 + 2) = 49;
  v212 = v219 + 24;
  if (v201 == v213)
  {
    *a1 = v219;
    a1[1] = v212;
    a1[2] = v220;
LABEL_360:
    operator delete(v201);
    goto LABEL_361;
  }
  do
  {
    v221 = *(_OWORD *)(v201 - 24);
    *((_QWORD *)v219 - 1) = *((_QWORD *)v201 - 1);
    *(_OWORD *)(v219 - 24) = v221;
    v219 -= 24;
    v201 -= 24;
  }
  while (v201 != v213);
  v201 = *a1;
  *a1 = v219;
  a1[1] = v212;
  a1[2] = v220;
  if (v201)
    goto LABEL_360;
LABEL_361:
  a1[1] = v212;
  v222 = (unint64_t)a1[2];
  if ((unint64_t)v212 < v222)
  {
    *(_QWORD *)v212 = 0xCE03281732FA0019;
    *((_QWORD *)v212 + 1) = "md::ls::TextureHandleForType<DaVinci::EmissiveTexture>]";
    *((_QWORD *)v212 + 2) = 54;
    v223 = v212 + 24;
    goto LABEL_379;
  }
  v224 = *a1;
  v225 = 0xAAAAAAAAAAAAAAABLL * ((v212 - *a1) >> 3);
  v226 = v225 + 1;
  if (v225 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v227 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v222 - (_QWORD)v224) >> 3);
  if (2 * v227 > v226)
    v226 = 2 * v227;
  if (v227 >= 0x555555555555555)
    v228 = 0xAAAAAAAAAAAAAAALL;
  else
    v228 = v226;
  if (v228)
  {
    if (v228 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v229 = (char *)operator new(24 * v228);
  }
  else
  {
    v229 = 0;
  }
  v230 = &v229[24 * v225];
  v231 = &v229[24 * v228];
  *(_QWORD *)v230 = 0xCE03281732FA0019;
  *((_QWORD *)v230 + 1) = "md::ls::TextureHandleForType<DaVinci::EmissiveTexture>]";
  *((_QWORD *)v230 + 2) = 54;
  v223 = v230 + 24;
  if (v212 == v224)
  {
    *a1 = v230;
    a1[1] = v223;
    a1[2] = v231;
LABEL_378:
    operator delete(v212);
    goto LABEL_379;
  }
  do
  {
    v232 = *(_OWORD *)(v212 - 24);
    *((_QWORD *)v230 - 1) = *((_QWORD *)v212 - 1);
    *(_OWORD *)(v230 - 24) = v232;
    v230 -= 24;
    v212 -= 24;
  }
  while (v212 != v224);
  v212 = *a1;
  *a1 = v230;
  a1[1] = v223;
  a1[2] = v231;
  if (v212)
    goto LABEL_378;
LABEL_379:
  a1[1] = v223;
  v233 = (unint64_t)a1[2];
  if ((unint64_t)v223 < v233)
  {
    *(_QWORD *)v223 = 0xD2D99CA7D5B116C8;
    *((_QWORD *)v223 + 1) = "md::ls::TextureHandleForType<DaVinci::OverlayTexture>]";
    *((_QWORD *)v223 + 2) = 53;
    v234 = v223 + 24;
    goto LABEL_397;
  }
  v235 = *a1;
  v236 = 0xAAAAAAAAAAAAAAABLL * ((v223 - *a1) >> 3);
  v237 = v236 + 1;
  if (v236 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v238 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v233 - (_QWORD)v235) >> 3);
  if (2 * v238 > v237)
    v237 = 2 * v238;
  if (v238 >= 0x555555555555555)
    v239 = 0xAAAAAAAAAAAAAAALL;
  else
    v239 = v237;
  if (v239)
  {
    if (v239 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v240 = (char *)operator new(24 * v239);
  }
  else
  {
    v240 = 0;
  }
  v241 = &v240[24 * v236];
  v242 = &v240[24 * v239];
  *(_QWORD *)v241 = 0xD2D99CA7D5B116C8;
  *((_QWORD *)v241 + 1) = "md::ls::TextureHandleForType<DaVinci::OverlayTexture>]";
  *((_QWORD *)v241 + 2) = 53;
  v234 = v241 + 24;
  if (v223 == v235)
  {
    *a1 = v241;
    a1[1] = v234;
    a1[2] = v242;
LABEL_396:
    operator delete(v223);
    goto LABEL_397;
  }
  do
  {
    v243 = *(_OWORD *)(v223 - 24);
    *((_QWORD *)v241 - 1) = *((_QWORD *)v223 - 1);
    *(_OWORD *)(v241 - 24) = v243;
    v241 -= 24;
    v223 -= 24;
  }
  while (v223 != v235);
  v223 = *a1;
  *a1 = v241;
  a1[1] = v234;
  a1[2] = v242;
  if (v223)
    goto LABEL_396;
LABEL_397:
  a1[1] = v234;
  v244 = (unint64_t)a1[2];
  if ((unint64_t)v234 < v244)
  {
    *(_QWORD *)v234 = 0xDF0018B9242ADFDBLL;
    *((_QWORD *)v234 + 1) = "md::ls::BlendRasterConstantDataHandle]";
    *((_QWORD *)v234 + 2) = 37;
    v245 = v234 + 24;
    goto LABEL_415;
  }
  v246 = *a1;
  v247 = 0xAAAAAAAAAAAAAAABLL * ((v234 - *a1) >> 3);
  v248 = v247 + 1;
  if (v247 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v249 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v244 - (_QWORD)v246) >> 3);
  if (2 * v249 > v248)
    v248 = 2 * v249;
  if (v249 >= 0x555555555555555)
    v250 = 0xAAAAAAAAAAAAAAALL;
  else
    v250 = v248;
  if (v250)
  {
    if (v250 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v251 = (char *)operator new(24 * v250);
  }
  else
  {
    v251 = 0;
  }
  v252 = &v251[24 * v247];
  v253 = &v251[24 * v250];
  *(_QWORD *)v252 = 0xDF0018B9242ADFDBLL;
  *((_QWORD *)v252 + 1) = "md::ls::BlendRasterConstantDataHandle]";
  *((_QWORD *)v252 + 2) = 37;
  v245 = v252 + 24;
  if (v234 == v246)
  {
    *a1 = v252;
    a1[1] = v245;
    a1[2] = v253;
LABEL_414:
    operator delete(v234);
    goto LABEL_415;
  }
  do
  {
    v254 = *(_OWORD *)(v234 - 24);
    *((_QWORD *)v252 - 1) = *((_QWORD *)v234 - 1);
    *(_OWORD *)(v252 - 24) = v254;
    v252 -= 24;
    v234 -= 24;
  }
  while (v234 != v246);
  v234 = *a1;
  *a1 = v252;
  a1[1] = v245;
  a1[2] = v253;
  if (v234)
    goto LABEL_414;
LABEL_415:
  a1[1] = v245;
  v255 = (unint64_t)a1[2];
  if ((unint64_t)v245 < v255)
  {
    *(_QWORD *)v245 = 0xDC66BF6D06F6D0BALL;
    *((_QWORD *)v245 + 1) = "md::ls::RasterOverlayConstantDataHandle]";
    *((_QWORD *)v245 + 2) = 39;
    v256 = v245 + 24;
    goto LABEL_433;
  }
  v257 = *a1;
  v258 = 0xAAAAAAAAAAAAAAABLL * ((v245 - *a1) >> 3);
  v259 = v258 + 1;
  if (v258 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v260 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v255 - (_QWORD)v257) >> 3);
  if (2 * v260 > v259)
    v259 = 2 * v260;
  if (v260 >= 0x555555555555555)
    v261 = 0xAAAAAAAAAAAAAAALL;
  else
    v261 = v259;
  if (v261)
  {
    if (v261 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v262 = (char *)operator new(24 * v261);
  }
  else
  {
    v262 = 0;
  }
  v263 = &v262[24 * v258];
  v264 = &v262[24 * v261];
  *(_QWORD *)v263 = 0xDC66BF6D06F6D0BALL;
  *((_QWORD *)v263 + 1) = "md::ls::RasterOverlayConstantDataHandle]";
  *((_QWORD *)v263 + 2) = 39;
  v256 = v263 + 24;
  if (v245 == v257)
  {
    *a1 = v263;
    a1[1] = v256;
    a1[2] = v264;
LABEL_432:
    operator delete(v245);
    goto LABEL_433;
  }
  do
  {
    v265 = *(_OWORD *)(v245 - 24);
    *((_QWORD *)v263 - 1) = *((_QWORD *)v245 - 1);
    *(_OWORD *)(v263 - 24) = v265;
    v263 -= 24;
    v245 -= 24;
  }
  while (v245 != v257);
  v245 = *a1;
  *a1 = v263;
  a1[1] = v256;
  a1[2] = v264;
  if (v245)
    goto LABEL_432;
LABEL_433:
  a1[1] = v256;
  v266 = (unint64_t)a1[2];
  if ((unint64_t)v256 < v266)
  {
    *(_QWORD *)v256 = 0x985FB09D9DF9959FLL;
    *((_QWORD *)v256 + 1) = "md::ls::HasStyleAttributeRasterSet]";
    *((_QWORD *)v256 + 2) = 34;
    v267 = v256 + 24;
    goto LABEL_451;
  }
  v268 = *a1;
  v269 = 0xAAAAAAAAAAAAAAABLL * ((v256 - *a1) >> 3);
  v270 = v269 + 1;
  if (v269 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v271 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v266 - (_QWORD)v268) >> 3);
  if (2 * v271 > v270)
    v270 = 2 * v271;
  if (v271 >= 0x555555555555555)
    v272 = 0xAAAAAAAAAAAAAAALL;
  else
    v272 = v270;
  if (v272)
  {
    if (v272 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v273 = (char *)operator new(24 * v272);
  }
  else
  {
    v273 = 0;
  }
  v274 = &v273[24 * v269];
  v275 = &v273[24 * v272];
  *(_QWORD *)v274 = 0x985FB09D9DF9959FLL;
  *((_QWORD *)v274 + 1) = "md::ls::HasStyleAttributeRasterSet]";
  *((_QWORD *)v274 + 2) = 34;
  v267 = v274 + 24;
  if (v256 == v268)
  {
    *a1 = v274;
    a1[1] = v267;
    a1[2] = v275;
LABEL_450:
    operator delete(v256);
    goto LABEL_451;
  }
  do
  {
    v276 = *(_OWORD *)(v256 - 24);
    *((_QWORD *)v274 - 1) = *((_QWORD *)v256 - 1);
    *(_OWORD *)(v274 - 24) = v276;
    v274 -= 24;
    v256 -= 24;
  }
  while (v256 != v268);
  v256 = *a1;
  *a1 = v274;
  a1[1] = v267;
  a1[2] = v275;
  if (v256)
    goto LABEL_450;
LABEL_451:
  a1[1] = v267;
  v277 = (unint64_t)a1[2];
  if ((unint64_t)v267 < v277)
  {
    *(_QWORD *)v267 = 0x11BB47B172EB0B40;
    *((_QWORD *)v267 + 1) = "md::ls::NeedsClimateTint]";
    *((_QWORD *)v267 + 2) = 24;
    v278 = v267 + 24;
    goto LABEL_469;
  }
  v279 = *a1;
  v280 = 0xAAAAAAAAAAAAAAABLL * ((v267 - *a1) >> 3);
  v281 = v280 + 1;
  if (v280 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v282 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v277 - (_QWORD)v279) >> 3);
  if (2 * v282 > v281)
    v281 = 2 * v282;
  if (v282 >= 0x555555555555555)
    v283 = 0xAAAAAAAAAAAAAAALL;
  else
    v283 = v281;
  if (v283)
  {
    if (v283 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v284 = (char *)operator new(24 * v283);
  }
  else
  {
    v284 = 0;
  }
  v285 = &v284[24 * v280];
  v286 = &v284[24 * v283];
  *(_QWORD *)v285 = 0x11BB47B172EB0B40;
  *((_QWORD *)v285 + 1) = "md::ls::NeedsClimateTint]";
  *((_QWORD *)v285 + 2) = 24;
  v278 = v285 + 24;
  if (v267 == v279)
  {
    *a1 = v285;
    a1[1] = v278;
    a1[2] = v286;
LABEL_468:
    operator delete(v267);
    goto LABEL_469;
  }
  do
  {
    v287 = *(_OWORD *)(v267 - 24);
    *((_QWORD *)v285 - 1) = *((_QWORD *)v267 - 1);
    *(_OWORD *)(v285 - 24) = v287;
    v285 -= 24;
    v267 -= 24;
  }
  while (v267 != v279);
  v267 = *a1;
  *a1 = v285;
  a1[1] = v278;
  a1[2] = v286;
  if (v267)
    goto LABEL_468;
LABEL_469:
  a1[1] = v278;
  v288 = (unint64_t)a1[2];
  if ((unint64_t)v278 < v288)
  {
    *(_QWORD *)v278 = 0xA0C97F52893883B7;
    *((_QWORD *)v278 + 1) = "md::ls::CustomRenderState]";
    *((_QWORD *)v278 + 2) = 25;
    v289 = v278 + 24;
    goto LABEL_487;
  }
  v290 = *a1;
  v291 = 0xAAAAAAAAAAAAAAABLL * ((v278 - *a1) >> 3);
  v292 = v291 + 1;
  if (v291 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v293 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v288 - (_QWORD)v290) >> 3);
  if (2 * v293 > v292)
    v292 = 2 * v293;
  if (v293 >= 0x555555555555555)
    v294 = 0xAAAAAAAAAAAAAAALL;
  else
    v294 = v292;
  if (v294)
  {
    if (v294 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v295 = (char *)operator new(24 * v294);
  }
  else
  {
    v295 = 0;
  }
  v296 = &v295[24 * v291];
  v297 = &v295[24 * v294];
  *(_QWORD *)v296 = 0xA0C97F52893883B7;
  *((_QWORD *)v296 + 1) = "md::ls::CustomRenderState]";
  *((_QWORD *)v296 + 2) = 25;
  v289 = v296 + 24;
  if (v278 == v290)
  {
    *a1 = v296;
    a1[1] = v289;
    a1[2] = v297;
LABEL_486:
    operator delete(v278);
    goto LABEL_487;
  }
  do
  {
    v298 = *(_OWORD *)(v278 - 24);
    *((_QWORD *)v296 - 1) = *((_QWORD *)v278 - 1);
    *(_OWORD *)(v296 - 24) = v298;
    v296 -= 24;
    v278 -= 24;
  }
  while (v278 != v290);
  v278 = *a1;
  *a1 = v296;
  a1[1] = v289;
  a1[2] = v297;
  if (v278)
    goto LABEL_486;
LABEL_487:
  a1[1] = v289;
  v299 = (unint64_t)a1[2];
  if ((unint64_t)v289 < v299)
  {
    *(_QWORD *)v289 = 0xE103B5C60804137ELL;
    *((_QWORD *)v289 + 1) = "md::ls::ColorRampDataHandle]";
    *((_QWORD *)v289 + 2) = 27;
    v300 = v289 + 24;
    goto LABEL_505;
  }
  v301 = *a1;
  v302 = 0xAAAAAAAAAAAAAAABLL * ((v289 - *a1) >> 3);
  v303 = v302 + 1;
  if (v302 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v304 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v299 - (_QWORD)v301) >> 3);
  if (2 * v304 > v303)
    v303 = 2 * v304;
  if (v304 >= 0x555555555555555)
    v305 = 0xAAAAAAAAAAAAAAALL;
  else
    v305 = v303;
  if (v305)
  {
    if (v305 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v306 = (char *)operator new(24 * v305);
  }
  else
  {
    v306 = 0;
  }
  v307 = &v306[24 * v302];
  v308 = &v306[24 * v305];
  *(_QWORD *)v307 = 0xE103B5C60804137ELL;
  *((_QWORD *)v307 + 1) = "md::ls::ColorRampDataHandle]";
  *((_QWORD *)v307 + 2) = 27;
  v300 = v307 + 24;
  if (v289 == v301)
  {
    *a1 = v307;
    a1[1] = v300;
    a1[2] = v308;
LABEL_504:
    operator delete(v289);
    goto LABEL_505;
  }
  do
  {
    v309 = *(_OWORD *)(v289 - 24);
    *((_QWORD *)v307 - 1) = *((_QWORD *)v289 - 1);
    *(_OWORD *)(v307 - 24) = v309;
    v307 -= 24;
    v289 -= 24;
  }
  while (v289 != v301);
  v289 = *a1;
  *a1 = v307;
  a1[1] = v300;
  a1[2] = v308;
  if (v289)
    goto LABEL_504;
LABEL_505:
  a1[1] = v300;
  v310 = (unint64_t)a1[2];
  if ((unint64_t)v300 < v310)
  {
    *(_QWORD *)v300 = 0x7931433C9A6EB2C6;
    *((_QWORD *)v300 + 1) = "md::ls::SharedUniqueID]";
    *((_QWORD *)v300 + 2) = 22;
    v311 = v300 + 24;
    goto LABEL_523;
  }
  v312 = *a1;
  v313 = 0xAAAAAAAAAAAAAAABLL * ((v300 - *a1) >> 3);
  v314 = v313 + 1;
  if (v313 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v315 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v310 - (_QWORD)v312) >> 3);
  if (2 * v315 > v314)
    v314 = 2 * v315;
  if (v315 >= 0x555555555555555)
    v316 = 0xAAAAAAAAAAAAAAALL;
  else
    v316 = v314;
  if (v316)
  {
    if (v316 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v317 = (char *)operator new(24 * v316);
  }
  else
  {
    v317 = 0;
  }
  v318 = &v317[24 * v313];
  v319 = &v317[24 * v316];
  *(_QWORD *)v318 = 0x7931433C9A6EB2C6;
  *((_QWORD *)v318 + 1) = "md::ls::SharedUniqueID]";
  *((_QWORD *)v318 + 2) = 22;
  v311 = v318 + 24;
  if (v300 == v312)
  {
    *a1 = v318;
    a1[1] = v311;
    a1[2] = v319;
LABEL_522:
    operator delete(v300);
    goto LABEL_523;
  }
  do
  {
    v320 = *(_OWORD *)(v300 - 24);
    *((_QWORD *)v318 - 1) = *((_QWORD *)v300 - 1);
    *(_OWORD *)(v318 - 24) = v320;
    v318 -= 24;
    v300 -= 24;
  }
  while (v300 != v312);
  v300 = *a1;
  *a1 = v318;
  a1[1] = v311;
  a1[2] = v319;
  if (v300)
    goto LABEL_522;
LABEL_523:
  a1[1] = v311;
  v321 = (unint64_t)a1[2];
  if ((unint64_t)v311 < v321)
  {
    *(_QWORD *)v311 = 0x7087983DEF28DBFELL;
    *((_QWORD *)v311 + 1) = "md::ls::IsOpaque]";
    *((_QWORD *)v311 + 2) = 16;
    v322 = v311 + 24;
    goto LABEL_541;
  }
  v323 = *a1;
  v324 = 0xAAAAAAAAAAAAAAABLL * ((v311 - *a1) >> 3);
  v325 = v324 + 1;
  if (v324 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v326 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v321 - (_QWORD)v323) >> 3);
  if (2 * v326 > v325)
    v325 = 2 * v326;
  if (v326 >= 0x555555555555555)
    v327 = 0xAAAAAAAAAAAAAAALL;
  else
    v327 = v325;
  if (v327)
  {
    if (v327 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v328 = (char *)operator new(24 * v327);
  }
  else
  {
    v328 = 0;
  }
  v329 = &v328[24 * v324];
  v330 = &v328[24 * v327];
  *(_QWORD *)v329 = 0x7087983DEF28DBFELL;
  *((_QWORD *)v329 + 1) = "md::ls::IsOpaque]";
  *((_QWORD *)v329 + 2) = 16;
  v322 = v329 + 24;
  if (v311 == v323)
  {
    *a1 = v329;
    a1[1] = v322;
    a1[2] = v330;
LABEL_540:
    operator delete(v311);
    goto LABEL_541;
  }
  do
  {
    v331 = *(_OWORD *)(v311 - 24);
    *((_QWORD *)v329 - 1) = *((_QWORD *)v311 - 1);
    *(_OWORD *)(v329 - 24) = v331;
    v329 -= 24;
    v311 -= 24;
  }
  while (v311 != v323);
  v311 = *a1;
  *a1 = v329;
  a1[1] = v322;
  a1[2] = v330;
  if (v311)
    goto LABEL_540;
LABEL_541:
  a1[1] = v322;
  v332 = (unint64_t)a1[2];
  if ((unint64_t)v322 < v332)
  {
    *(_QWORD *)v322 = 0x73F0259EC1934FB1;
    *((_QWORD *)v322 + 1) = "md::ls::IsTransparent]";
    *((_QWORD *)v322 + 2) = 21;
    v333 = v322 + 24;
    goto LABEL_559;
  }
  v334 = *a1;
  v335 = 0xAAAAAAAAAAAAAAABLL * ((v322 - *a1) >> 3);
  v336 = v335 + 1;
  if (v335 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v337 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v332 - (_QWORD)v334) >> 3);
  if (2 * v337 > v336)
    v336 = 2 * v337;
  if (v337 >= 0x555555555555555)
    v338 = 0xAAAAAAAAAAAAAAALL;
  else
    v338 = v336;
  if (v338)
  {
    if (v338 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v339 = (char *)operator new(24 * v338);
  }
  else
  {
    v339 = 0;
  }
  v340 = &v339[24 * v335];
  v341 = &v339[24 * v338];
  *(_QWORD *)v340 = 0x73F0259EC1934FB1;
  *((_QWORD *)v340 + 1) = "md::ls::IsTransparent]";
  *((_QWORD *)v340 + 2) = 21;
  v333 = v340 + 24;
  if (v322 == v334)
  {
    *a1 = v340;
    a1[1] = v333;
    a1[2] = v341;
LABEL_558:
    operator delete(v322);
    goto LABEL_559;
  }
  do
  {
    v342 = *(_OWORD *)(v322 - 24);
    *((_QWORD *)v340 - 1) = *((_QWORD *)v322 - 1);
    *(_OWORD *)(v340 - 24) = v342;
    v340 -= 24;
    v322 -= 24;
  }
  while (v322 != v334);
  v322 = *a1;
  *a1 = v340;
  a1[1] = v333;
  a1[2] = v341;
  if (v322)
    goto LABEL_558;
LABEL_559:
  a1[1] = v333;
  v343 = (unint64_t)a1[2];
  if ((unint64_t)v333 < v343)
  {
    *(_QWORD *)v333 = 0x499CE17DBD9A1615;
    *((_QWORD *)v333 + 1) = "md::ls::NeedsZBias]";
    *((_QWORD *)v333 + 2) = 18;
    v344 = v333 + 24;
    goto LABEL_577;
  }
  v345 = *a1;
  v346 = 0xAAAAAAAAAAAAAAABLL * ((v333 - *a1) >> 3);
  v347 = v346 + 1;
  if (v346 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v348 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v343 - (_QWORD)v345) >> 3);
  if (2 * v348 > v347)
    v347 = 2 * v348;
  if (v348 >= 0x555555555555555)
    v349 = 0xAAAAAAAAAAAAAAALL;
  else
    v349 = v347;
  if (v349)
  {
    if (v349 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v350 = (char *)operator new(24 * v349);
  }
  else
  {
    v350 = 0;
  }
  v351 = &v350[24 * v346];
  v352 = &v350[24 * v349];
  *(_QWORD *)v351 = 0x499CE17DBD9A1615;
  *((_QWORD *)v351 + 1) = "md::ls::NeedsZBias]";
  *((_QWORD *)v351 + 2) = 18;
  v344 = v351 + 24;
  if (v333 == v345)
  {
    *a1 = v351;
    a1[1] = v344;
    a1[2] = v352;
LABEL_576:
    operator delete(v333);
    goto LABEL_577;
  }
  do
  {
    v353 = *(_OWORD *)(v333 - 24);
    *((_QWORD *)v351 - 1) = *((_QWORD *)v333 - 1);
    *(_OWORD *)(v351 - 24) = v353;
    v351 -= 24;
    v333 -= 24;
  }
  while (v333 != v345);
  v333 = *a1;
  *a1 = v351;
  a1[1] = v344;
  a1[2] = v352;
  if (v333)
    goto LABEL_576;
LABEL_577:
  a1[1] = v344;
  v354 = (unint64_t)a1[2];
  if ((unint64_t)v344 < v354)
  {
    *(_QWORD *)v344 = 0x98A9F01DBB8BCCCELL;
    *((_QWORD *)v344 + 1) = "md::ls::PreserveHeight]";
    *((_QWORD *)v344 + 2) = 22;
    v355 = v344 + 24;
    goto LABEL_595;
  }
  v356 = *a1;
  v357 = 0xAAAAAAAAAAAAAAABLL * ((v344 - *a1) >> 3);
  v358 = v357 + 1;
  if (v357 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v359 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v354 - (_QWORD)v356) >> 3);
  if (2 * v359 > v358)
    v358 = 2 * v359;
  if (v359 >= 0x555555555555555)
    v360 = 0xAAAAAAAAAAAAAAALL;
  else
    v360 = v358;
  if (v360)
  {
    if (v360 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v361 = (char *)operator new(24 * v360);
  }
  else
  {
    v361 = 0;
  }
  v362 = &v361[24 * v357];
  v363 = &v361[24 * v360];
  *(_QWORD *)v362 = 0x98A9F01DBB8BCCCELL;
  *((_QWORD *)v362 + 1) = "md::ls::PreserveHeight]";
  *((_QWORD *)v362 + 2) = 22;
  v355 = v362 + 24;
  if (v344 == v356)
  {
    *a1 = v362;
    a1[1] = v355;
    a1[2] = v363;
LABEL_594:
    operator delete(v344);
    goto LABEL_595;
  }
  do
  {
    v364 = *(_OWORD *)(v344 - 24);
    *((_QWORD *)v362 - 1) = *((_QWORD *)v344 - 1);
    *(_OWORD *)(v362 - 24) = v364;
    v362 -= 24;
    v344 -= 24;
  }
  while (v344 != v356);
  v344 = *a1;
  *a1 = v362;
  a1[1] = v355;
  a1[2] = v363;
  if (v344)
    goto LABEL_594;
LABEL_595:
  a1[1] = v355;
  v365 = (unint64_t)a1[2];
  if ((unint64_t)v355 < v365)
  {
    *(_QWORD *)v355 = 0xE53EF176130D7769;
    *((_QWORD *)v355 + 1) = "md::ls::InstanceCount]";
    *((_QWORD *)v355 + 2) = 21;
    v366 = v355 + 24;
    goto LABEL_613;
  }
  v367 = *a1;
  v368 = 0xAAAAAAAAAAAAAAABLL * ((v355 - *a1) >> 3);
  v369 = v368 + 1;
  if (v368 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v370 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v365 - (_QWORD)v367) >> 3);
  if (2 * v370 > v369)
    v369 = 2 * v370;
  if (v370 >= 0x555555555555555)
    v371 = 0xAAAAAAAAAAAAAAALL;
  else
    v371 = v369;
  if (v371)
  {
    if (v371 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v372 = (char *)operator new(24 * v371);
  }
  else
  {
    v372 = 0;
  }
  v373 = &v372[24 * v368];
  v374 = &v372[24 * v371];
  *(_QWORD *)v373 = 0xE53EF176130D7769;
  *((_QWORD *)v373 + 1) = "md::ls::InstanceCount]";
  *((_QWORD *)v373 + 2) = 21;
  v366 = v373 + 24;
  if (v355 == v367)
  {
    *a1 = v373;
    a1[1] = v366;
    a1[2] = v374;
LABEL_612:
    operator delete(v355);
    goto LABEL_613;
  }
  do
  {
    v375 = *(_OWORD *)(v355 - 24);
    *((_QWORD *)v373 - 1) = *((_QWORD *)v355 - 1);
    *(_OWORD *)(v373 - 24) = v375;
    v373 -= 24;
    v355 -= 24;
  }
  while (v355 != v367);
  v355 = *a1;
  *a1 = v373;
  a1[1] = v366;
  a1[2] = v374;
  if (v355)
    goto LABEL_612;
LABEL_613:
  a1[1] = v366;
  v376 = (unint64_t)a1[2];
  if ((unint64_t)v366 < v376)
  {
    *(_QWORD *)v366 = 0x76B9BA390004E44ELL;
    *((_QWORD *)v366 + 1) = "md::ls::IsDecal]";
    *((_QWORD *)v366 + 2) = 15;
    v377 = v366 + 24;
    goto LABEL_631;
  }
  v378 = *a1;
  v379 = 0xAAAAAAAAAAAAAAABLL * ((v366 - *a1) >> 3);
  v380 = v379 + 1;
  if (v379 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v381 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v376 - (_QWORD)v378) >> 3);
  if (2 * v381 > v380)
    v380 = 2 * v381;
  if (v381 >= 0x555555555555555)
    v382 = 0xAAAAAAAAAAAAAAALL;
  else
    v382 = v380;
  if (v382)
  {
    if (v382 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v383 = (char *)operator new(24 * v382);
  }
  else
  {
    v383 = 0;
  }
  v384 = &v383[24 * v379];
  v385 = &v383[24 * v382];
  *(_QWORD *)v384 = 0x76B9BA390004E44ELL;
  *((_QWORD *)v384 + 1) = "md::ls::IsDecal]";
  *((_QWORD *)v384 + 2) = 15;
  v377 = v384 + 24;
  if (v366 == v378)
  {
    *a1 = v384;
    a1[1] = v377;
    a1[2] = v385;
LABEL_630:
    operator delete(v366);
    goto LABEL_631;
  }
  do
  {
    v386 = *(_OWORD *)(v366 - 24);
    *((_QWORD *)v384 - 1) = *((_QWORD *)v366 - 1);
    *(_OWORD *)(v384 - 24) = v386;
    v384 -= 24;
    v366 -= 24;
  }
  while (v366 != v378);
  v366 = *a1;
  *a1 = v384;
  a1[1] = v377;
  a1[2] = v385;
  if (v366)
    goto LABEL_630;
LABEL_631:
  a1[1] = v377;
  v387 = (unint64_t)a1[2];
  if ((unint64_t)v377 < v387)
  {
    *(_QWORD *)v377 = 0x3E8485C60908F920;
    *((_QWORD *)v377 + 1) = "md::ls::IsMaterial]";
    *((_QWORD *)v377 + 2) = 18;
    v388 = v377 + 24;
    goto LABEL_649;
  }
  v389 = *a1;
  v390 = 0xAAAAAAAAAAAAAAABLL * ((v377 - *a1) >> 3);
  v391 = v390 + 1;
  if (v390 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v392 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v387 - (_QWORD)v389) >> 3);
  if (2 * v392 > v391)
    v391 = 2 * v392;
  if (v392 >= 0x555555555555555)
    v393 = 0xAAAAAAAAAAAAAAALL;
  else
    v393 = v391;
  if (v393)
  {
    if (v393 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v394 = (char *)operator new(24 * v393);
  }
  else
  {
    v394 = 0;
  }
  v395 = &v394[24 * v390];
  v396 = &v394[24 * v393];
  *(_QWORD *)v395 = 0x3E8485C60908F920;
  *((_QWORD *)v395 + 1) = "md::ls::IsMaterial]";
  *((_QWORD *)v395 + 2) = 18;
  v388 = v395 + 24;
  if (v377 == v389)
  {
    *a1 = v395;
    a1[1] = v388;
    a1[2] = v396;
LABEL_648:
    operator delete(v377);
    goto LABEL_649;
  }
  do
  {
    v397 = *(_OWORD *)(v377 - 24);
    *((_QWORD *)v395 - 1) = *((_QWORD *)v377 - 1);
    *(_OWORD *)(v395 - 24) = v397;
    v395 -= 24;
    v377 -= 24;
  }
  while (v377 != v389);
  v377 = *a1;
  *a1 = v395;
  a1[1] = v388;
  a1[2] = v396;
  if (v377)
    goto LABEL_648;
LABEL_649:
  a1[1] = v388;
  v398 = (unint64_t)a1[2];
  if ((unint64_t)v388 < v398)
  {
    *(_QWORD *)v388 = 0x237F9D3BCC905318;
    *((_QWORD *)v388 + 1) = "md::ls::IsMercator]";
    *((_QWORD *)v388 + 2) = 18;
    v399 = v388 + 24;
    goto LABEL_667;
  }
  v400 = *a1;
  v401 = 0xAAAAAAAAAAAAAAABLL * ((v388 - *a1) >> 3);
  v402 = v401 + 1;
  if (v401 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v403 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v398 - (_QWORD)v400) >> 3);
  if (2 * v403 > v402)
    v402 = 2 * v403;
  if (v403 >= 0x555555555555555)
    v404 = 0xAAAAAAAAAAAAAAALL;
  else
    v404 = v402;
  if (v404)
  {
    if (v404 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v405 = (char *)operator new(24 * v404);
  }
  else
  {
    v405 = 0;
  }
  v406 = &v405[24 * v401];
  v407 = &v405[24 * v404];
  *(_QWORD *)v406 = 0x237F9D3BCC905318;
  *((_QWORD *)v406 + 1) = "md::ls::IsMercator]";
  *((_QWORD *)v406 + 2) = 18;
  v399 = v406 + 24;
  if (v388 == v400)
  {
    *a1 = v406;
    a1[1] = v399;
    a1[2] = v407;
LABEL_666:
    operator delete(v388);
    goto LABEL_667;
  }
  do
  {
    v408 = *(_OWORD *)(v388 - 24);
    *((_QWORD *)v406 - 1) = *((_QWORD *)v388 - 1);
    *(_OWORD *)(v406 - 24) = v408;
    v406 -= 24;
    v388 -= 24;
  }
  while (v388 != v400);
  v388 = *a1;
  *a1 = v406;
  a1[1] = v399;
  a1[2] = v407;
  if (v388)
    goto LABEL_666;
LABEL_667:
  a1[1] = v399;
  v409 = (unint64_t)a1[2];
  if ((unint64_t)v399 < v409)
  {
    *(_QWORD *)v399 = 0xE115FCB3272B65A3;
    *((_QWORD *)v399 + 1) = "md::ls::ZIndex]";
    *((_QWORD *)v399 + 2) = 14;
    v410 = v399 + 24;
    goto LABEL_685;
  }
  v411 = *a1;
  v412 = 0xAAAAAAAAAAAAAAABLL * ((v399 - *a1) >> 3);
  v413 = v412 + 1;
  if (v412 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v414 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v409 - (_QWORD)v411) >> 3);
  if (2 * v414 > v413)
    v413 = 2 * v414;
  if (v414 >= 0x555555555555555)
    v415 = 0xAAAAAAAAAAAAAAALL;
  else
    v415 = v413;
  if (v415)
  {
    if (v415 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v416 = (char *)operator new(24 * v415);
  }
  else
  {
    v416 = 0;
  }
  v417 = &v416[24 * v412];
  v418 = &v416[24 * v415];
  *(_QWORD *)v417 = 0xE115FCB3272B65A3;
  *((_QWORD *)v417 + 1) = "md::ls::ZIndex]";
  *((_QWORD *)v417 + 2) = 14;
  v410 = v417 + 24;
  if (v399 == v411)
  {
    *a1 = v417;
    a1[1] = v410;
    a1[2] = v418;
LABEL_684:
    operator delete(v399);
    goto LABEL_685;
  }
  do
  {
    v419 = *(_OWORD *)(v399 - 24);
    *((_QWORD *)v417 - 1) = *((_QWORD *)v399 - 1);
    *(_OWORD *)(v417 - 24) = v419;
    v417 -= 24;
    v399 -= 24;
  }
  while (v399 != v411);
  v399 = *a1;
  *a1 = v417;
  a1[1] = v410;
  a1[2] = v418;
  if (v399)
    goto LABEL_684;
LABEL_685:
  a1[1] = v410;
  v420 = (unint64_t)a1[2];
  if ((unint64_t)v410 < v420)
  {
    *(_QWORD *)v410 = 0x58D7FF1BC7A42F8;
    *((_QWORD *)v410 + 1) = "md::ls::DefaultZIndex]";
    *((_QWORD *)v410 + 2) = 21;
    v421 = v410 + 24;
    goto LABEL_703;
  }
  v422 = *a1;
  v423 = 0xAAAAAAAAAAAAAAABLL * ((v410 - *a1) >> 3);
  v424 = v423 + 1;
  if (v423 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_722;
  v425 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v420 - (_QWORD)v422) >> 3);
  if (2 * v425 > v424)
    v424 = 2 * v425;
  if (v425 >= 0x555555555555555)
    v426 = 0xAAAAAAAAAAAAAAALL;
  else
    v426 = v424;
  if (v426)
  {
    if (v426 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_723;
    v427 = (char *)operator new(24 * v426);
  }
  else
  {
    v427 = 0;
  }
  v428 = &v427[24 * v423];
  v429 = &v427[24 * v426];
  *(_QWORD *)v428 = 0x58D7FF1BC7A42F8;
  *((_QWORD *)v428 + 1) = "md::ls::DefaultZIndex]";
  *((_QWORD *)v428 + 2) = 21;
  v421 = v428 + 24;
  if (v410 == v422)
  {
    *a1 = v428;
    a1[1] = v421;
    a1[2] = v429;
LABEL_702:
    operator delete(v410);
    goto LABEL_703;
  }
  do
  {
    v430 = *(_OWORD *)(v410 - 24);
    *((_QWORD *)v428 - 1) = *((_QWORD *)v410 - 1);
    *(_OWORD *)(v428 - 24) = v430;
    v428 -= 24;
    v410 -= 24;
  }
  while (v410 != v422);
  v410 = *a1;
  *a1 = v428;
  a1[1] = v421;
  a1[2] = v429;
  if (v410)
    goto LABEL_702;
LABEL_703:
  a1[1] = v421;
  v431 = (unint64_t)a1[2];
  if ((unint64_t)v421 < v431)
  {
    *(_QWORD *)v421 = 0x763953A644184BA9;
    *((_QWORD *)v421 + 1) = "md::ls::RenderableHash]";
    *((_QWORD *)v421 + 2) = 22;
    v432 = v421 + 24;
    goto LABEL_721;
  }
  v433 = *a1;
  v434 = 0xAAAAAAAAAAAAAAABLL * ((v421 - *a1) >> 3);
  v435 = v434 + 1;
  if (v434 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_722:
    abort();
  v436 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v431 - (_QWORD)v433) >> 3);
  if (2 * v436 > v435)
    v435 = 2 * v436;
  if (v436 >= 0x555555555555555)
    v437 = 0xAAAAAAAAAAAAAAALL;
  else
    v437 = v435;
  if (v437)
  {
    if (v437 <= 0xAAAAAAAAAAAAAAALL)
    {
      v438 = (char *)operator new(24 * v437);
      goto LABEL_715;
    }
LABEL_723:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v438 = 0;
LABEL_715:
  v439 = &v438[24 * v434];
  v440 = &v438[24 * v437];
  *(_QWORD *)v439 = 0x763953A644184BA9;
  *((_QWORD *)v439 + 1) = "md::ls::RenderableHash]";
  *((_QWORD *)v439 + 2) = 22;
  v432 = v439 + 24;
  if (v421 == v433)
  {
    *a1 = v439;
    a1[1] = v432;
    a1[2] = v440;
LABEL_720:
    operator delete(v421);
    goto LABEL_721;
  }
  do
  {
    v441 = *(_OWORD *)(v421 - 24);
    *((_QWORD *)v439 - 1) = *((_QWORD *)v421 - 1);
    *(_OWORD *)(v439 - 24) = v441;
    v439 -= 24;
    v421 -= 24;
  }
  while (v421 != v433);
  v421 = *a1;
  *a1 = v439;
  a1[1] = v432;
  a1[2] = v440;
  if (v421)
    goto LABEL_720;
LABEL_721:
  a1[1] = v432;
}

void sub_19F6FC624(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateUnflattenedRenderItems>(md::ita::CreateUnflattenedRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateUnflattenedRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateUnflattenedRenderItems>(md::ita::CreateUnflattenedRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateUnflattenedRenderItems>(md::ita::CreateUnflattenedRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateUnflattenedRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateUnflattenedRenderItems>(md::ita::CreateUnflattenedRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42866B0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateUnflattenedRenderItems>(md::ita::CreateUnflattenedRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateUnflattenedRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateUnflattenedRenderItems>(md::ita::CreateUnflattenedRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42866B0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateUnflattenedRenderItems>(md::ita::CreateUnflattenedRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateUnflattenedRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateUnflattenedRenderItems>(md::ita::CreateUnflattenedRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0xA8uLL);
  a1[2] = (char *)(v2 + 21);
  *v2 = 0xF5773E2F171FA967;
  v2[1] = "md::ls::SliceAssignmentT<md::SliceType::CulledUnflattenedMain>]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB43A0;
  v2[4] = "md::ls::RenderableMeshVertexFormat]";
  v2[5] = 34;
  v2[6] = 0x751B872B282C3971;
  v2[7] = "md::ls::TileType]";
  v2[8] = 16;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 21)
  {
    *(_QWORD *)v3 = 0xEC2A00DC914732D7;
    v2[10] = "md::ls::IntendedSceneLayer]";
    v2[11] = 26;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_74;
  if (0x5555555555555556 * (((char *)(v2 + 21) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 21) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 21) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_75;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0xEC2A00DC914732D7;
  *((_QWORD *)v10 + 1) = "md::ls::IntendedSceneLayer]";
  *((_QWORD *)v10 + 2) = 26;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0xECC498AF223943D5;
    *((_QWORD *)v4 + 1) = "md::ls::MeshLayerTypeV]";
    *((_QWORD *)v4 + 2) = 22;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_74;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_75;
    v20 = (char *)operator new(24 * v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0xECC498AF223943D5;
  *((_QWORD *)v21 + 1) = "md::ls::MeshLayerTypeV]";
  *((_QWORD *)v21 + 2) = 22;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
  v24 = (unint64_t)a1[2];
  if ((unint64_t)v14 < v24)
  {
    *(_QWORD *)v14 = 0x75DBD6381F1903FFLL;
    *((_QWORD *)v14 + 1) = "md::ls::PendingProcessing]";
    *((_QWORD *)v14 + 2) = 25;
    v25 = v14 + 24;
    goto LABEL_55;
  }
  v26 = *a1;
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3);
  v28 = v27 + 1;
  if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_74;
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x555555555555555)
    v30 = 0xAAAAAAAAAAAAAAALL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_75;
    v31 = (char *)operator new(24 * v30);
  }
  else
  {
    v31 = 0;
  }
  v32 = &v31[24 * v27];
  v33 = &v31[24 * v30];
  *(_QWORD *)v32 = 0x75DBD6381F1903FFLL;
  *((_QWORD *)v32 + 1) = "md::ls::PendingProcessing]";
  *((_QWORD *)v32 + 2) = 25;
  v25 = v32 + 24;
  if (v14 == v26)
  {
    *a1 = v32;
    a1[1] = v25;
    a1[2] = v33;
LABEL_54:
    operator delete(v14);
    goto LABEL_55;
  }
  do
  {
    v34 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v32 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v32 - 24) = v34;
    v32 -= 24;
    v14 -= 24;
  }
  while (v14 != v26);
  v14 = *a1;
  *a1 = v32;
  a1[1] = v25;
  a1[2] = v33;
  if (v14)
    goto LABEL_54;
LABEL_55:
  a1[1] = v25;
  v35 = (unint64_t)a1[2];
  if ((unint64_t)v25 < v35)
  {
    *(_QWORD *)v25 = 0x9D7520A01DC69D83;
    *((_QWORD *)v25 + 1) = "md::ls::HasMaterialRaster]";
    *((_QWORD *)v25 + 2) = 25;
    v36 = v25 + 24;
    goto LABEL_73;
  }
  v37 = *a1;
  v38 = 0xAAAAAAAAAAAAAAABLL * ((v25 - *a1) >> 3);
  v39 = v38 + 1;
  if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_74:
    abort();
  v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v37) >> 3);
  if (2 * v40 > v39)
    v39 = 2 * v40;
  if (v40 >= 0x555555555555555)
    v41 = 0xAAAAAAAAAAAAAAALL;
  else
    v41 = v39;
  if (v41)
  {
    if (v41 <= 0xAAAAAAAAAAAAAAALL)
    {
      v42 = (char *)operator new(24 * v41);
      goto LABEL_67;
    }
LABEL_75:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v42 = 0;
LABEL_67:
  v43 = &v42[24 * v38];
  v44 = &v42[24 * v41];
  *(_QWORD *)v43 = 0x9D7520A01DC69D83;
  *((_QWORD *)v43 + 1) = "md::ls::HasMaterialRaster]";
  *((_QWORD *)v43 + 2) = 25;
  v36 = v43 + 24;
  if (v25 == v37)
  {
    *a1 = v43;
    a1[1] = v36;
    a1[2] = v44;
LABEL_72:
    operator delete(v25);
    goto LABEL_73;
  }
  do
  {
    v45 = *(_OWORD *)(v25 - 24);
    *((_QWORD *)v43 - 1) = *((_QWORD *)v25 - 1);
    *(_OWORD *)(v43 - 24) = v45;
    v43 -= 24;
    v25 -= 24;
  }
  while (v25 != v37);
  v25 = *a1;
  *a1 = v43;
  a1[1] = v36;
  a1[2] = v44;
  if (v25)
    goto LABEL_72;
LABEL_73:
  a1[1] = v36;
}

void sub_19F6FCBEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateUnflattenedRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateUnflattenedRenderItems>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateUnflattenedRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateUnflattenedRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277BD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateUnflattenedRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateUnflattenedRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277BD8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateUnflattenedRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateUnflattenedRenderItems>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = (_QWORD *)(a1 + 8);
  result = ecs2::Runtime::entities<md::ita::CreateUnflattenedRenderItems,md::ls::SliceAssignmentT<(md::SliceType)2> const&,md::ls::RenderableMeshVertexFormat const&,md::ls::TileType const&,md::ls::IntendedSceneLayer const&,md::ls::MeshLayerTypeV const&,md::ls::AssociationHandle *,md::ls::HasMeshHandle *,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::ViewConstantDataHandle *,md::ls::TransformConstantDataHandle *,md::ls::StyleDataKeyHandle *,md::ls::StyleEmissiveDataKeyHandle *,md::ls::StyleCameraConstantDataHandle *,md::ls::ColorDataHandle *,md::ls::IndexRange *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::PendingProcessing const&,md::ls::NormalsHandle *,md::ls::InstanceTransformHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::ShadowConstantDataHandle *,md::ls::PrepassConstantDataHandle *,md::ls::ColorCorrectionFactorConstantHandle *,md::ls::ClippingConstantDataHandle *,md::ls::PlanarConstantDataHandle *,md::ls::TextureHandleForType<DaVinci::TexTexture> *,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> *,md::ls::TextureHandleForType<DaVinci::OverlayTexture> *,md::ls::BlendRasterConstantDataHandle *,md::ls::RasterOverlayConstantDataHandle *,md::ls::HasStyleAttributeRasterSet *,md::ls::HasMaterialRaster const*,md::ls::NeedsClimateTint *,md::ls::CustomRenderState *,md::ls::ColorRampDataHandle *,md::ls::SharedUniqueID *,md::ls::IsOpaque *,md::ls::IsTransparent *,md::ls::NeedsZBias *,md::ls::PreserveHeight *,md::ls::InstanceCount *,md::ls::IsDecal *,md::ls::IsMaterial *,md::ls::IsMercator *,md::ls::ZIndex *,md::ls::DefaultZIndex *,md::ls::RenderableHash *>(*(_QWORD *)(a2 + 8), (uint64_t **)(a1 + 8));
  *v2 = 0;
  return result;
}

uint64_t ecs2::Runtime::entities<md::ita::CreateUnflattenedRenderItems,md::ls::SliceAssignmentT<(md::SliceType)2> const&,md::ls::RenderableMeshVertexFormat const&,md::ls::TileType const&,md::ls::IntendedSceneLayer const&,md::ls::MeshLayerTypeV const&,md::ls::AssociationHandle *,md::ls::HasMeshHandle *,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::ViewConstantDataHandle *,md::ls::TransformConstantDataHandle *,md::ls::StyleDataKeyHandle *,md::ls::StyleEmissiveDataKeyHandle *,md::ls::StyleCameraConstantDataHandle *,md::ls::ColorDataHandle *,md::ls::IndexRange *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::PendingProcessing const&,md::ls::NormalsHandle *,md::ls::InstanceTransformHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::ShadowConstantDataHandle *,md::ls::PrepassConstantDataHandle *,md::ls::ColorCorrectionFactorConstantHandle *,md::ls::ClippingConstantDataHandle *,md::ls::PlanarConstantDataHandle *,md::ls::TextureHandleForType<DaVinci::TexTexture> *,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> *,md::ls::TextureHandleForType<DaVinci::OverlayTexture> *,md::ls::BlendRasterConstantDataHandle *,md::ls::RasterOverlayConstantDataHandle *,md::ls::HasStyleAttributeRasterSet *,md::ls::HasMaterialRaster const*,md::ls::NeedsClimateTint *,md::ls::CustomRenderState *,md::ls::ColorRampDataHandle *,md::ls::SharedUniqueID *,md::ls::IsOpaque *,md::ls::IsTransparent *,md::ls::NeedsZBias *,md::ls::PreserveHeight *,md::ls::InstanceCount *,md::ls::IsDecal *,md::ls::IsMaterial *,md::ls::IsMercator *,md::ls::ZIndex *,md::ls::DefaultZIndex *,md::ls::RenderableHash *>(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _BOOL4 isValid;
  uint64_t result;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t **v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t *v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t *v405;
  uint64_t *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t (***v409)();
  uint64_t v410;
  int v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  _QWORD *v416;
  _QWORD *v417;
  uint64_t v418;
  std::__shared_weak_count *v419;
  unint64_t *p_shared_owners;
  unint64_t v421;
  unint64_t v422;
  unint64_t RenderItem;
  uint64_t v424;
  uint64_t v425;
  uint64_t *v426;
  _QWORD *v427;
  uint64_t (***v428)();
  uint64_t v429;
  uint64_t *v430;
  uint64_t (***v431)();
  uint64_t v432;
  uint64_t v433;
  uint64_t *v434;
  uint64_t (***v435)();
  uint64_t v436;
  uint64_t *v437;
  uint64_t v438;
  uint64_t (***v439)();
  uint64_t v440;
  uint64_t *v441;
  uint64_t (***v442)();
  uint64_t v443;
  uint64_t *v444;
  uint64_t (***v445)();
  uint64_t v446;
  uint64_t *v447;
  _QWORD *v448;
  uint64_t (***v449)();
  uint64_t v450;
  char v451;
  uint64_t *v452;
  _BYTE *v453;
  uint64_t (***v454)();
  uint64_t v455;
  uint64_t *v456;
  uint64_t (***v457)();
  uint64_t v458;
  uint64_t *v459;
  uint64_t (***v460)();
  uint64_t v461;
  uint64_t v462;
  unint64_t *v463;
  unint64_t v464;
  std::__shared_weak_count *v465;
  unint64_t *v466;
  unint64_t v467;
  uint64_t *v468;
  uint64_t (***v469)();
  uint64_t v470;
  uint64_t *v471;
  uint64_t (**v472)();
  unint64_t v473;
  uint64_t (***v474)();
  uint64_t v475;
  uint64_t (***v476)();
  uint64_t v477;
  uint64_t v478;
  _QWORD *v479;
  _QWORD *v480;
  uint64_t v481;
  std::__shared_weak_count *v482;
  unint64_t *v483;
  unint64_t v484;
  unint64_t v485;
  _QWORD *AssociationItemStorage;
  _QWORD *v487;
  unint64_t v488;
  unint64_t *v489;
  unint64_t v490;
  _QWORD *v491;
  uint64_t **v492;
  char *v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t v496;
  unint64_t v497;
  char *v498;
  unint64_t *v499;
  unint64_t v500;
  uint64_t v501;
  char *v502;
  unint64_t *v503;
  uint64_t v504;
  __int128 v505;
  unint64_t v506;
  uint64_t *v507;
  uint64_t (***v508)();
  uint64_t v509;
  uint64_t *v510;
  char *v511;
  uint64_t (***v512)();
  uint64_t v513;
  uint64_t *v514;
  uint64_t (***v515)();
  uint64_t v516;
  uint64_t *v517;
  uint64_t (***v518)();
  uint64_t v519;
  uint64_t *v520;
  uint64_t (***v521)();
  uint64_t v522;
  uint64_t *v523;
  char *v524;
  uint64_t v525;
  uint64_t *v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t *v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t *v532;
  uint64_t v533;
  uint64_t *v534;
  char *v535;
  uint64_t v536;
  uint64_t *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t *v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t *v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t *v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t *v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t *v558;
  char *v559;
  uint64_t v560;
  uint64_t *v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t *v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t *v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t *v573;
  uint64_t v574;
  uint64_t *v575;
  unint64_t v576;
  uint64_t v577;
  uint64_t *v578;
  uint64_t v579;
  uint64_t *v580;
  uint64_t v581;
  uint64_t *v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t *v585;
  uint64_t v586;
  uint64_t *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t *v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t *v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t *v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t *v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t *v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t *v605;
  char *v606;
  uint64_t v607;
  uint64_t *v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t *v611;
  char *v612;
  uint64_t v613;
  uint64_t *v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t *v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t *v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t *v623;
  char *v624;
  __int128 v625;
  uint64_t v626;
  uint64_t *v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t *v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t *v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t *v636;
  uint64_t v637;
  uint64_t v638;
  _QWORD *v639;
  _QWORD *v640;
  _QWORD *v641;
  _QWORD *v642;
  _QWORD *v643;
  _QWORD *v644;
  _QWORD *v645;
  _QWORD *v646;
  _QWORD *v647;
  _QWORD *v648;
  _QWORD *v649;
  _QWORD *v650;
  _QWORD *v651;
  _QWORD *v652;
  _QWORD *v653;
  _QWORD *v654;
  _QWORD *v655;
  _QWORD *v656;
  _QWORD *HasStyleAttributeRaster;
  _QWORD *v658;
  _QWORD *v659;
  _QWORD *v660;
  _QWORD *v661;
  _QWORD *v662;
  _QWORD *v663;
  _QWORD *v664;
  _QWORD *v665;
  _QWORD *v666;
  _QWORD *v667;
  _QWORD *v668;
  _QWORD *v669;
  _QWORD *v670;
  _QWORD *v671;
  _QWORD *v672;
  _QWORD *v673;
  _QWORD *v674;
  _QWORD *v675;
  _QWORD *v676;
  _QWORD *v677;
  _QWORD *v678;
  _QWORD *v679;
  _QWORD *v680;
  _QWORD *v681;
  _QWORD *v682;
  _QWORD *HasMesh;
  _QWORD *v684;
  _QWORD *HasMaterial;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  unsigned __int8 *v690;
  uint64_t *v691;
  uint64_t *v692;
  uint64_t *v693;
  uint64_t *v694;
  uint64_t *v695;
  uint64_t *v696;
  uint64_t *v697;
  __int128 *v698;
  uint64_t v699;
  uint64_t *v700;
  unint64_t v701;
  unint64_t v702;
  unsigned int *v703;
  unint64_t v704;
  unint64_t v705;
  unint64_t v706;
  unint64_t v707;
  uint64_t *v708;
  unint64_t v709;
  unint64_t v710;
  uint64_t *v711;
  uint64_t *v712;
  uint64_t *v713;
  uint64_t *v714;
  uint64_t *v715;
  uint64_t *v716;
  uint64_t *v717;
  uint64_t *v718;
  uint64_t v719;
  uint64_t *v720;
  uint64_t *v721;
  uint64_t *v722;
  uint64_t *v723;
  uint64_t *v724;
  uint64_t *v725;
  uint64_t *v726;
  uint64_t *v727;
  uint64_t *v728;
  __int128 *v729;
  uint64_t *v730;
  uint64_t *v731;
  unint64_t v732;
  unint64_t v733;
  uint64_t v734;
  unint64_t v735;
  unint64_t v736;
  uint64_t v737;
  _BYTE *v738;
  unint64_t *v739;
  unsigned __int8 *v740;
  uint64_t *v741;
  unint64_t v742;
  _QWORD v744[8];
  _QWORD *v745;
  __int128 v746;
  __int128 v747;
  char v748;
  uint64_t (**v749)();
  __int128 v750;
  uint64_t (***v751)();
  _BYTE v752[24];
  _BYTE *v753;
  int v754;
  uint64_t v755;

  v755 = *MEMORY[0x1E0C80C00];
  v3 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)2>>(a1);
  v689 = gdc::Registry::storage<md::ls::RenderableMeshVertexFormat>(a1);
  v688 = gdc::Registry::storage<md::ls::TileType>(a1);
  v687 = gdc::Registry::storage<md::ls::IntendedSceneLayer>(a1);
  v686 = gdc::Registry::storage<md::ls::MeshLayerTypeV>(a1);
  v4 = gdc::Registry::storage<md::ls::PendingProcessing>(a1);
  HasMaterial = (_QWORD *)gdc::Registry::storage<md::ls::HasMaterialRaster>(a1);
  v684 = (_QWORD *)gdc::Registry::storage<md::ls::AssociationHandle>(a1);
  HasMesh = (_QWORD *)gdc::Registry::storage<md::ls::HasMeshHandle>(a1);
  v682 = (_QWORD *)gdc::Registry::storage<md::ls::PositionScaleInfoConstantDataHandle>(a1);
  v681 = (_QWORD *)gdc::Registry::storage<md::ls::ViewConstantDataHandle>(a1);
  v680 = (_QWORD *)gdc::Registry::storage<md::ls::TransformConstantDataHandle>(a1);
  v679 = (_QWORD *)gdc::Registry::storage<md::ls::StyleDataKeyHandle>(a1);
  v678 = (_QWORD *)gdc::Registry::storage<md::ls::StyleEmissiveDataKeyHandle>(a1);
  v677 = (_QWORD *)gdc::Registry::storage<md::ls::StyleCameraConstantDataHandle>(a1);
  v676 = (_QWORD *)gdc::Registry::storage<md::ls::ColorDataHandle>(a1);
  v675 = (_QWORD *)gdc::Registry::storage<md::ls::IndexRange>(a1);
  v674 = (_QWORD *)gdc::Registry::storage<md::ls::StyleGroundOcclusionConstantDataHandle>(a1);
  v673 = (_QWORD *)gdc::Registry::storage<md::ls::NormalsHandle>(a1);
  v672 = (_QWORD *)gdc::Registry::storage<md::ls::InstanceTransformHandle>(a1);
  v671 = (_QWORD *)gdc::Registry::storage<md::ls::UVsHandle>(a1);
  v670 = (_QWORD *)gdc::Registry::storage<md::ls::ElevationHandle>(a1);
  v669 = (_QWORD *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>(a1);
  v668 = (_QWORD *)gdc::Registry::storage<md::ls::LandCoverSettingsConstantDataHandle>(a1);
  v667 = (_QWORD *)gdc::Registry::storage<md::ls::ShadowConstantDataHandle>(a1);
  v666 = (_QWORD *)gdc::Registry::storage<md::ls::PrepassConstantDataHandle>(a1);
  v665 = (_QWORD *)gdc::Registry::storage<md::ls::ColorCorrectionFactorConstantHandle>(a1);
  v664 = (_QWORD *)gdc::Registry::storage<md::ls::ClippingConstantDataHandle>(a1);
  v663 = (_QWORD *)gdc::Registry::storage<md::ls::PlanarConstantDataHandle>(a1);
  v662 = (_QWORD *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::TexTexture>>(a1);
  v661 = (_QWORD *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>(a1);
  v660 = (_QWORD *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>(a1);
  v659 = (_QWORD *)gdc::Registry::storage<md::ls::BlendRasterConstantDataHandle>(a1);
  v658 = (_QWORD *)gdc::Registry::storage<md::ls::RasterOverlayConstantDataHandle>(a1);
  HasStyleAttributeRaster = (_QWORD *)gdc::Registry::storage<md::ls::HasStyleAttributeRasterSet>(a1);
  v656 = (_QWORD *)gdc::Registry::storage<md::ls::NeedsClimateTint>(a1);
  v655 = (_QWORD *)gdc::Registry::storage<md::ls::CustomRenderState>(a1);
  v654 = (_QWORD *)gdc::Registry::storage<md::ls::ColorRampDataHandle>(a1);
  v653 = (_QWORD *)gdc::Registry::storage<md::ls::SharedUniqueID>(a1);
  v652 = (_QWORD *)gdc::Registry::storage<md::ls::IsOpaque>(a1);
  v651 = (_QWORD *)gdc::Registry::storage<md::ls::IsTransparent>(a1);
  v650 = (_QWORD *)gdc::Registry::storage<md::ls::NeedsZBias>(a1);
  v649 = (_QWORD *)gdc::Registry::storage<md::ls::PreserveHeight>(a1);
  v648 = (_QWORD *)gdc::Registry::storage<md::ls::InstanceCount>(a1);
  v647 = (_QWORD *)gdc::Registry::storage<md::ls::IsDecal>(a1);
  v646 = (_QWORD *)gdc::Registry::storage<md::ls::IsMaterial>(a1);
  v645 = (_QWORD *)gdc::Registry::storage<md::ls::IsMercator>(a1);
  v644 = (_QWORD *)gdc::Registry::storage<md::ls::ZIndex>(a1);
  v643 = (_QWORD *)gdc::Registry::storage<md::ls::DefaultZIndex>(a1);
  v642 = (_QWORD *)gdc::Registry::storage<md::ls::RenderableHash>(a1);
  if (*(_QWORD *)(v689 + 64) - *(_QWORD *)(v689 + 56) >= *(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56))
    v5 = v3 + 32;
  else
    v5 = v689 + 32;
  if (*(_QWORD *)(v688 + 64) - *(_QWORD *)(v688 + 56) < *(_QWORD *)(v5 + 32) - *(_QWORD *)(v5 + 24))
    v5 = v688 + 32;
  if (*(_QWORD *)(v687 + 64) - *(_QWORD *)(v687 + 56) < *(_QWORD *)(v5 + 32) - *(_QWORD *)(v5 + 24))
    v5 = v687 + 32;
  if (*(_QWORD *)(v686 + 64) - *(_QWORD *)(v686 + 56) < *(_QWORD *)(v5 + 32) - *(_QWORD *)(v5 + 24))
    v5 = v686 + 32;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v5 + 32) - *(_QWORD *)(v5 + 24))
    v5 = v4 + 32;
  v744[0] = v5;
  v744[1] = v3;
  v744[2] = v689;
  v744[3] = v688;
  v744[4] = v687;
  v744[5] = v686;
  v7 = *(_QWORD **)(v5 + 24);
  v6 = *(_QWORD **)(v5 + 32);
  v744[6] = v4;
  v745 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(v744))
  {
    v8 = v7 + 1;
    do
    {
      v7 = v8;
      v745 = v8;
      if (v8 == v6)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(v744);
      v8 = v7 + 1;
    }
    while (!isValid);
  }
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v15 = (_QWORD *)result;
  v641 = v16;
  v17 = a2;
  if (v16 != v7)
  {
    v640 = (_QWORD *)result;
    do
    {
      *v15 = *v7;
      v18 = *v7;
      v19 = HIDWORD(*v7);
      v20 = *v7 >> 39;
      v21 = v14[4];
      if (v20 < (v14[5] - v21) >> 3
        && (v22 = *(_QWORD *)(v21 + 8 * v20)) != 0
        && (v23 = *(unsigned __int16 *)(v22 + 2 * (HIDWORD(v18) & 0x7F)),
            v25 = v14[7],
            v24 = v14[8],
            v23 < (v24 - v25) >> 3)
        && ((v26 = v25 + 8 * v23, v26 != v24) ? (v27 = *(_DWORD *)(v26 + 4) == (_DWORD)v19) : (v27 = 0), v27))
      {
        v28 = (_BYTE *)(v14[10] + v23);
      }
      else
      {
        v28 = (_BYTE *)v14[11];
      }
      v738 = v28;
      v29 = v11[4];
      if (v20 < (v11[5] - v29) >> 3
        && (v30 = *(_QWORD *)(v29 + 8 * v20)) != 0
        && (v31 = *(unsigned __int16 *)(v30 + 2 * (HIDWORD(v18) & 0x7F)),
            v33 = v11[7],
            v32 = v11[8],
            v31 < (v32 - v33) >> 3)
        && ((v34 = v33 + 8 * v31, v34 != v32) ? (v35 = *(_DWORD *)(v34 + 4) == (_DWORD)v19) : (v35 = 0), v35))
      {
        v36 = (unsigned __int8 *)(v11[10] + v31);
      }
      else
      {
        v36 = (unsigned __int8 *)v11[11];
      }
      v690 = v36;
      v37 = v12[4];
      if (v20 < (v12[5] - v37) >> 3
        && (v38 = *(_QWORD *)(v37 + 8 * v20)) != 0
        && (v39 = *(unsigned __int16 *)(v38 + 2 * (HIDWORD(v18) & 0x7F)),
            v41 = v12[7],
            v40 = v12[8],
            v39 < (v40 - v41) >> 3)
        && ((v42 = v41 + 8 * v39, v42 != v40) ? (v43 = *(_DWORD *)(v42 + 4) == (_DWORD)v19) : (v43 = 0), v43))
      {
        v44 = (unsigned __int8 *)v12[11];
        v45 = (unsigned __int8 *)(v12[10] + v39);
      }
      else
      {
        v44 = (unsigned __int8 *)v12[11];
        v45 = v44;
      }
      if (v45 == v44)
        v45 = 0;
      v740 = v45;
      v46 = v13[4];
      if (v20 < (v13[5] - v46) >> 3
        && (v47 = *(_QWORD *)(v46 + 8 * v20)) != 0
        && (v48 = *(unsigned __int16 *)(v47 + 2 * (HIDWORD(v18) & 0x7F)),
            v50 = v13[7],
            v49 = v13[8],
            v48 < (v49 - v50) >> 3)
        && ((v51 = v50 + 8 * v48, v51 != v49) ? (v52 = *(_DWORD *)(v51 + 4) == (_DWORD)v19) : (v52 = 0), v52))
      {
        v53 = (unsigned __int8 *)(v13[10] + v48);
      }
      else
      {
        v53 = (unsigned __int8 *)v13[11];
      }
      v54 = v684[4];
      if (v20 < (v684[5] - v54) >> 3
        && (v55 = *(_QWORD *)(v54 + 8 * v20)) != 0
        && (v56 = *(unsigned __int16 *)(v55 + 2 * (HIDWORD(v18) & 0x7F)),
            v58 = v684[7],
            v57 = v684[8],
            v56 < (v57 - v58) >> 3)
        && ((v59 = v58 + 8 * v56, v59 != v57) ? (v60 = *(_DWORD *)(v59 + 4) == (_DWORD)v19) : (v60 = 0), v60))
      {
        v61 = v684[11];
        v62 = v684[10] + 16 * v56;
      }
      else
      {
        v61 = v684[11];
        v62 = v61;
      }
      if (v62 == v61)
        v63 = 0;
      else
        v63 = (unint64_t *)v62;
      v64 = HasMesh[4];
      if (v20 < (HasMesh[5] - v64) >> 3
        && (v65 = *(_QWORD *)(v64 + 8 * v20)) != 0
        && (v66 = *(unsigned __int16 *)(v65 + 2 * (HIDWORD(v18) & 0x7F)),
            v68 = HasMesh[7],
            v67 = HasMesh[8],
            v66 < (v67 - v68) >> 3)
        && ((v69 = v68 + 8 * v66, v69 != v67) ? (v70 = *(_DWORD *)(v69 + 4) == (_DWORD)v19) : (v70 = 0), v70))
      {
        v71 = HasMesh[11];
        v72 = HasMesh[10] + 8 * v66;
      }
      else
      {
        v71 = HasMesh[11];
        v72 = v71;
      }
      if (v72 == v71)
        v72 = 0;
      v728 = (uint64_t *)v72;
      v73 = v682[4];
      if (v20 < (v682[5] - v73) >> 3
        && (v74 = *(_QWORD *)(v73 + 8 * v20)) != 0
        && (v75 = *(unsigned __int16 *)(v74 + 2 * (HIDWORD(v18) & 0x7F)),
            v77 = v682[7],
            v76 = v682[8],
            v75 < (v76 - v77) >> 3)
        && ((v78 = v77 + 8 * v75, v78 != v76) ? (v79 = *(_DWORD *)(v78 + 4) == (_DWORD)v19) : (v79 = 0), v79))
      {
        v80 = v682[11];
        v81 = v682[10] + 16 * v75;
      }
      else
      {
        v80 = v682[11];
        v81 = v80;
      }
      if (v81 == v80)
        v81 = 0;
      v734 = v81;
      v82 = v681[4];
      if (v20 < (v681[5] - v82) >> 3
        && (v83 = *(_QWORD *)(v82 + 8 * v20)) != 0
        && (v84 = *(unsigned __int16 *)(v83 + 2 * (HIDWORD(v18) & 0x7F)),
            v86 = v681[7],
            v85 = v681[8],
            v84 < (v85 - v86) >> 3)
        && (v87 = v86 + 8 * v84, v87 != v85)
        && *(_DWORD *)(v87 + 4) == (_DWORD)v19)
      {
        v88 = v681[11];
        v89 = v681[10] + 8 * v84;
      }
      else
      {
        v88 = v681[11];
        v89 = v88;
      }
      if (v89 == v88)
        v89 = 0;
      v725 = (uint64_t *)v89;
      v90 = v680[4];
      if (v20 < (v680[5] - v90) >> 3
        && (v91 = *(_QWORD *)(v90 + 8 * v20)) != 0
        && (v92 = *(unsigned __int16 *)(v91 + 2 * (HIDWORD(v18) & 0x7F)),
            v94 = v680[7],
            v93 = v680[8],
            v92 < (v93 - v94) >> 3)
        && (v95 = v94 + 8 * v92, v95 != v93)
        && *(_DWORD *)(v95 + 4) == (_DWORD)v19)
      {
        v96 = v680[11];
        v97 = v680[10] + 8 * v92;
      }
      else
      {
        v96 = v680[11];
        v97 = v96;
      }
      if (v97 == v96)
        v97 = 0;
      v726 = (uint64_t *)v97;
      v98 = v679[4];
      if (v20 < (v679[5] - v98) >> 3
        && (v99 = *(_QWORD *)(v98 + 8 * v20)) != 0
        && (v100 = *(unsigned __int16 *)(v99 + 2 * (HIDWORD(v18) & 0x7F)),
            v102 = v679[7],
            v101 = v679[8],
            v100 < (v101 - v102) >> 3)
        && (v103 = v102 + 8 * v100, v103 != v101)
        && *(_DWORD *)(v103 + 4) == (_DWORD)v19)
      {
        v104 = v679[11];
        v105 = v679[10] + 8 * v100;
      }
      else
      {
        v104 = v679[11];
        v105 = v104;
      }
      if (v105 == v104)
        v105 = 0;
      v727 = (uint64_t *)v105;
      v106 = v678[4];
      if (v20 < (v678[5] - v106) >> 3
        && (v107 = *(_QWORD *)(v106 + 8 * v20)) != 0
        && (v108 = *(unsigned __int16 *)(v107 + 2 * (HIDWORD(v18) & 0x7F)),
            v110 = v678[7],
            v109 = v678[8],
            v108 < (v109 - v110) >> 3)
        && (v111 = v110 + 8 * v108, v111 != v109)
        && *(_DWORD *)(v111 + 4) == (_DWORD)v19)
      {
        v112 = v678[11];
        v113 = v678[10] + 8 * v108;
      }
      else
      {
        v112 = v678[11];
        v113 = v112;
      }
      if (v113 == v112)
        v113 = 0;
      v721 = (uint64_t *)v113;
      v114 = v677[4];
      if (v20 < (v677[5] - v114) >> 3
        && (v115 = *(_QWORD *)(v114 + 8 * v20)) != 0
        && (v116 = *(unsigned __int16 *)(v115 + 2 * (HIDWORD(v18) & 0x7F)),
            v118 = v677[7],
            v117 = v677[8],
            v116 < (v117 - v118) >> 3)
        && (v119 = v118 + 8 * v116, v119 != v117)
        && *(_DWORD *)(v119 + 4) == (_DWORD)v19)
      {
        v120 = v677[11];
        v121 = v677[10] + 8 * v116;
      }
      else
      {
        v120 = v677[11];
        v121 = v120;
      }
      if (v121 == v120)
        v121 = 0;
      v723 = (uint64_t *)v121;
      v122 = v676[4];
      if (v20 < (v676[5] - v122) >> 3
        && (v123 = *(_QWORD *)(v122 + 8 * v20)) != 0
        && (v124 = *(unsigned __int16 *)(v123 + 2 * (HIDWORD(v18) & 0x7F)),
            v126 = v676[7],
            v125 = v676[8],
            v124 < (v125 - v126) >> 3)
        && (v127 = v126 + 8 * v124, v127 != v125)
        && *(_DWORD *)(v127 + 4) == (_DWORD)v19)
      {
        v128 = v676[11];
        v129 = v676[10] + 8 * v124;
      }
      else
      {
        v128 = v676[11];
        v129 = v128;
      }
      if (v129 == v128)
        v129 = 0;
      v724 = (uint64_t *)v129;
      v130 = v675[4];
      if (v20 < (v675[5] - v130) >> 3
        && (v131 = *(_QWORD *)(v130 + 8 * v20)) != 0
        && (v132 = *(unsigned __int16 *)(v131 + 2 * (HIDWORD(v18) & 0x7F)),
            v134 = v675[7],
            v133 = v675[8],
            v132 < (v133 - v134) >> 3)
        && (v135 = v134 + 8 * v132, v135 != v133)
        && *(_DWORD *)(v135 + 4) == (_DWORD)v19)
      {
        v136 = v675[11];
        v137 = v675[10] + 16 * v132;
      }
      else
      {
        v136 = v675[11];
        v137 = v136;
      }
      if (v137 == v136)
        v137 = 0;
      v729 = (__int128 *)v137;
      v138 = v674[4];
      if (v20 < (v674[5] - v138) >> 3
        && (v139 = *(_QWORD *)(v138 + 8 * v20)) != 0
        && (v140 = *(unsigned __int16 *)(v139 + 2 * (HIDWORD(v18) & 0x7F)),
            v142 = v674[7],
            v141 = v674[8],
            v140 < (v141 - v142) >> 3)
        && (v143 = v142 + 8 * v140, v143 != v141)
        && *(_DWORD *)(v143 + 4) == (_DWORD)v19)
      {
        v144 = v674[11];
        v145 = v674[10] + 8 * v140;
      }
      else
      {
        v144 = v674[11];
        v145 = v144;
      }
      if (v145 == v144)
        v145 = 0;
      v700 = (uint64_t *)v145;
      v146 = v673[4];
      if (v20 < (v673[5] - v146) >> 3
        && (v147 = *(_QWORD *)(v146 + 8 * v20)) != 0
        && (v148 = *(unsigned __int16 *)(v147 + 2 * (HIDWORD(v18) & 0x7F)),
            v150 = v673[7],
            v149 = v673[8],
            v148 < (v149 - v150) >> 3)
        && (v151 = v150 + 8 * v148, v151 != v149)
        && *(_DWORD *)(v151 + 4) == (_DWORD)v19)
      {
        v152 = v673[11];
        v153 = v673[10] + 8 * v148;
      }
      else
      {
        v152 = v673[11];
        v153 = v152;
      }
      if (v153 == v152)
        v153 = 0;
      v712 = (uint64_t *)v153;
      v154 = v672[4];
      if (v20 < (v672[5] - v154) >> 3
        && (v155 = *(_QWORD *)(v154 + 8 * v20)) != 0
        && (v156 = *(unsigned __int16 *)(v155 + 2 * (HIDWORD(v18) & 0x7F)),
            v158 = v672[7],
            v157 = v672[8],
            v156 < (v157 - v158) >> 3)
        && (v159 = v158 + 8 * v156, v159 != v157)
        && *(_DWORD *)(v159 + 4) == (_DWORD)v19)
      {
        v160 = v672[11];
        v161 = v672[10] + 8 * v156;
      }
      else
      {
        v160 = v672[11];
        v161 = v160;
      }
      if (v161 == v160)
        v161 = 0;
      v713 = (uint64_t *)v161;
      v162 = v671[4];
      if (v20 < (v671[5] - v162) >> 3
        && (v163 = *(_QWORD *)(v162 + 8 * v20)) != 0
        && (v164 = *(unsigned __int16 *)(v163 + 2 * (HIDWORD(v18) & 0x7F)),
            v166 = v671[7],
            v165 = v671[8],
            v164 < (v165 - v166) >> 3)
        && (v167 = v166 + 8 * v164, v167 != v165)
        && *(_DWORD *)(v167 + 4) == (_DWORD)v19)
      {
        v168 = v671[11];
        v169 = v671[10] + 8 * v164;
      }
      else
      {
        v168 = v671[11];
        v169 = v168;
      }
      if (v169 == v168)
        v169 = 0;
      v714 = (uint64_t *)v169;
      v170 = v670[4];
      if (v20 < (v670[5] - v170) >> 3
        && (v171 = *(_QWORD *)(v170 + 8 * v20)) != 0
        && (v172 = *(unsigned __int16 *)(v171 + 2 * (HIDWORD(v18) & 0x7F)),
            v174 = v670[7],
            v173 = v670[8],
            v172 < (v173 - v174) >> 3)
        && (v175 = v174 + 8 * v172, v175 != v173)
        && *(_DWORD *)(v175 + 4) == (_DWORD)v19)
      {
        v176 = v670[11];
        v177 = v670[10] + 8 * v172;
      }
      else
      {
        v176 = v670[11];
        v177 = v176;
      }
      if (v177 == v176)
        v177 = 0;
      v715 = (uint64_t *)v177;
      v178 = v669[4];
      if (v20 < (v669[5] - v178) >> 3
        && (v179 = *(_QWORD *)(v178 + 8 * v20)) != 0
        && (v180 = *(unsigned __int16 *)(v179 + 2 * (HIDWORD(v18) & 0x7F)),
            v182 = v669[7],
            v181 = v669[8],
            v180 < (v181 - v182) >> 3)
        && (v183 = v182 + 8 * v180, v183 != v181)
        && *(_DWORD *)(v183 + 4) == (_DWORD)v19)
      {
        v184 = v669[11];
        v185 = v669[10] + 8 * v180;
      }
      else
      {
        v184 = v669[11];
        v185 = v184;
      }
      if (v185 == v184)
        v185 = 0;
      v718 = (uint64_t *)v185;
      v186 = v668[4];
      if (v20 < (v668[5] - v186) >> 3
        && (v187 = *(_QWORD *)(v186 + 8 * v20)) != 0
        && (v188 = *(unsigned __int16 *)(v187 + 2 * (HIDWORD(v18) & 0x7F)),
            v190 = v668[7],
            v189 = v668[8],
            v188 < (v189 - v190) >> 3)
        && (v191 = v190 + 8 * v188, v191 != v189)
        && *(_DWORD *)(v191 + 4) == (_DWORD)v19)
      {
        v192 = v668[11];
        v193 = v668[10] + 8 * v188;
      }
      else
      {
        v192 = v668[11];
        v193 = v192;
      }
      if (v193 == v192)
        v193 = 0;
      v720 = (uint64_t *)v193;
      v194 = v667[4];
      if (v20 < (v667[5] - v194) >> 3
        && (v195 = *(_QWORD *)(v194 + 8 * v20)) != 0
        && (v196 = *(unsigned __int16 *)(v195 + 2 * (HIDWORD(v18) & 0x7F)),
            v198 = v667[7],
            v197 = v667[8],
            v196 < (v197 - v198) >> 3)
        && (v199 = v198 + 8 * v196, v199 != v197)
        && *(_DWORD *)(v199 + 4) == (_DWORD)v19)
      {
        v200 = v667[11];
        v201 = v667[10] + 8 * v196;
      }
      else
      {
        v200 = v667[11];
        v201 = v200;
      }
      if (v201 == v200)
        v201 = 0;
      v693 = (uint64_t *)v201;
      v202 = v666[4];
      if (v20 < (v666[5] - v202) >> 3
        && (v203 = *(_QWORD *)(v202 + 8 * v20)) != 0
        && (v204 = *(unsigned __int16 *)(v203 + 2 * (HIDWORD(v18) & 0x7F)),
            v206 = v666[7],
            v205 = v666[8],
            v204 < (v205 - v206) >> 3)
        && (v207 = v206 + 8 * v204, v207 != v205)
        && *(_DWORD *)(v207 + 4) == (_DWORD)v19)
      {
        v208 = v666[11];
        v209 = v666[10] + 8 * v204;
      }
      else
      {
        v208 = v666[11];
        v209 = v208;
      }
      if (v209 == v208)
        v209 = 0;
      v694 = (uint64_t *)v209;
      v210 = v665[4];
      if (v20 < (v665[5] - v210) >> 3
        && (v211 = *(_QWORD *)(v210 + 8 * v20)) != 0
        && (v212 = *(unsigned __int16 *)(v211 + 2 * (HIDWORD(v18) & 0x7F)),
            v214 = v665[7],
            v213 = v665[8],
            v212 < (v213 - v214) >> 3)
        && (v215 = v214 + 8 * v212, v215 != v213)
        && *(_DWORD *)(v215 + 4) == (_DWORD)v19)
      {
        v216 = v665[11];
        v217 = v665[10] + 8 * v212;
      }
      else
      {
        v216 = v665[11];
        v217 = v216;
      }
      if (v217 == v216)
        v217 = 0;
      v716 = (uint64_t *)v217;
      v218 = v664[4];
      if (v20 < (v664[5] - v218) >> 3
        && (v219 = *(_QWORD *)(v218 + 8 * v20)) != 0
        && (v220 = *(unsigned __int16 *)(v219 + 2 * (HIDWORD(v18) & 0x7F)),
            v222 = v664[7],
            v221 = v664[8],
            v220 < (v221 - v222) >> 3)
        && (v223 = v222 + 8 * v220, v223 != v221)
        && *(_DWORD *)(v223 + 4) == (_DWORD)v19)
      {
        v224 = v664[11];
        v225 = v664[10] + 8 * v220;
      }
      else
      {
        v224 = v664[11];
        v225 = v224;
      }
      if (v225 == v224)
        v225 = 0;
      v717 = (uint64_t *)v225;
      v226 = v663[4];
      if (v20 < (v663[5] - v226) >> 3
        && (v227 = *(_QWORD *)(v226 + 8 * v20)) != 0
        && (v228 = *(unsigned __int16 *)(v227 + 2 * (HIDWORD(v18) & 0x7F)),
            v230 = v663[7],
            v229 = v663[8],
            v228 < (v229 - v230) >> 3)
        && (v231 = v230 + 8 * v228, v231 != v229)
        && *(_DWORD *)(v231 + 4) == (_DWORD)v19)
      {
        v232 = v663[11];
        v233 = v663[10] + 16 * v228;
      }
      else
      {
        v232 = v663[11];
        v233 = v232;
      }
      if (v233 == v232)
        v233 = 0;
      v719 = v233;
      v234 = v662[4];
      if (v20 < (v662[5] - v234) >> 3
        && (v235 = *(_QWORD *)(v234 + 8 * v20)) != 0
        && (v236 = *(unsigned __int16 *)(v235 + 2 * (HIDWORD(v18) & 0x7F)),
            v238 = v662[7],
            v237 = v662[8],
            v236 < (v237 - v238) >> 3)
        && (v239 = v238 + 8 * v236, v239 != v237)
        && *(_DWORD *)(v239 + 4) == (_DWORD)v19)
      {
        v240 = v662[11];
        v241 = v662[10] + 8 * v236;
      }
      else
      {
        v240 = v662[11];
        v241 = v240;
      }
      if (v241 == v240)
        v241 = 0;
      v722 = (uint64_t *)v241;
      v242 = v661[4];
      if (v20 < (v661[5] - v242) >> 3
        && (v243 = *(_QWORD *)(v242 + 8 * v20)) != 0
        && (v244 = *(unsigned __int16 *)(v243 + 2 * (HIDWORD(v18) & 0x7F)),
            v246 = v661[7],
            v245 = v661[8],
            v244 < (v245 - v246) >> 3)
        && (v247 = v246 + 8 * v244, v247 != v245)
        && *(_DWORD *)(v247 + 4) == (_DWORD)v19)
      {
        v248 = v661[11];
        v249 = v661[10] + 8 * v244;
      }
      else
      {
        v248 = v661[11];
        v249 = v248;
      }
      if (v249 == v248)
        v249 = 0;
      v695 = (uint64_t *)v249;
      v250 = v660[4];
      if (v20 < (v660[5] - v250) >> 3
        && (v251 = *(_QWORD *)(v250 + 8 * v20)) != 0
        && (v252 = *(unsigned __int16 *)(v251 + 2 * (HIDWORD(v18) & 0x7F)),
            v254 = v660[7],
            v253 = v660[8],
            v252 < (v253 - v254) >> 3)
        && (v255 = v254 + 8 * v252, v255 != v253)
        && *(_DWORD *)(v255 + 4) == (_DWORD)v19)
      {
        v256 = v660[11];
        v257 = v660[10] + 8 * v252;
      }
      else
      {
        v256 = v660[11];
        v257 = v256;
      }
      if (v257 == v256)
        v257 = 0;
      v696 = (uint64_t *)v257;
      v258 = v659[4];
      if (v20 < (v659[5] - v258) >> 3
        && (v259 = *(_QWORD *)(v258 + 8 * v20)) != 0
        && (v260 = *(unsigned __int16 *)(v259 + 2 * (HIDWORD(v18) & 0x7F)),
            v262 = v659[7],
            v261 = v659[8],
            v260 < (v261 - v262) >> 3)
        && (v263 = v262 + 8 * v260, v263 != v261)
        && *(_DWORD *)(v263 + 4) == (_DWORD)v19)
      {
        v264 = v659[11];
        v265 = v659[10] + 8 * v260;
      }
      else
      {
        v264 = v659[11];
        v265 = v264;
      }
      if (v265 == v264)
        v265 = 0;
      v697 = (uint64_t *)v265;
      v266 = v658[4];
      if (v20 < (v658[5] - v266) >> 3
        && (v267 = *(_QWORD *)(v266 + 8 * v20)) != 0
        && (v268 = *(unsigned __int16 *)(v267 + 2 * (HIDWORD(v18) & 0x7F)),
            v270 = v658[7],
            v269 = v658[8],
            v268 < (v269 - v270) >> 3)
        && (v271 = v270 + 8 * v268, v271 != v269)
        && *(_DWORD *)(v271 + 4) == (_DWORD)v19)
      {
        v272 = v658[11];
        v273 = v658[10] + 32 * v268;
      }
      else
      {
        v272 = v658[11];
        v273 = v272;
      }
      if (v273 == v272)
        v273 = 0;
      v698 = (__int128 *)v273;
      v274 = HasStyleAttributeRaster[4];
      if (v20 < (HasStyleAttributeRaster[5] - v274) >> 3
        && (v275 = *(_QWORD *)(v274 + 8 * v20)) != 0
        && (v276 = *(unsigned __int16 *)(v275 + 2 * (HIDWORD(v18) & 0x7F)),
            v278 = HasStyleAttributeRaster[7],
            v277 = HasStyleAttributeRaster[8],
            v276 < (v277 - v278) >> 3)
        && (v279 = v278 + 8 * v276, v279 != v277)
        && *(_DWORD *)(v279 + 4) == (_DWORD)v19)
      {
        v280 = HasStyleAttributeRaster[11];
        v281 = HasStyleAttributeRaster[10] + 8 * v276;
      }
      else
      {
        v280 = HasStyleAttributeRaster[11];
        v281 = v280;
      }
      if (v281 == v280)
        v281 = 0;
      v692 = (uint64_t *)v281;
      v282 = HasMaterial[4];
      if (v20 < (HasMaterial[5] - v282) >> 3
        && (v283 = *(_QWORD *)(v282 + 8 * v20)) != 0
        && (v284 = *(unsigned __int16 *)(v283 + 2 * (HIDWORD(v18) & 0x7F)),
            v286 = HasMaterial[7],
            v285 = HasMaterial[8],
            v284 < (v285 - v286) >> 3)
        && (v287 = v286 + 8 * v284, v287 != v285)
        && *(_DWORD *)(v287 + 4) == (_DWORD)v19)
      {
        v288 = HasMaterial[11];
        v289 = HasMaterial[10] + 8 * v284;
      }
      else
      {
        v288 = HasMaterial[11];
        v289 = v288;
      }
      if (v289 == v288)
        v290 = 0;
      else
        v290 = (uint64_t *)v289;
      v291 = v656[4];
      if (v20 < (v656[5] - v291) >> 3
        && (v292 = *(_QWORD *)(v291 + 8 * v20)) != 0
        && (v293 = *(unsigned __int16 *)(v292 + 2 * (HIDWORD(v18) & 0x7F)),
            v295 = v656[7],
            v294 = v656[8],
            v293 < (v294 - v295) >> 3)
        && (v296 = v295 + 8 * v293, v296 != v294)
        && *(_DWORD *)(v296 + 4) == (_DWORD)v19)
      {
        v297 = v656[11];
        v298 = v656[10] + 8 * v293;
      }
      else
      {
        v297 = v656[11];
        v298 = v297;
      }
      if (v298 == v297)
        v298 = 0;
      v741 = (uint64_t *)v298;
      v299 = v655[4];
      if (v20 < (v655[5] - v299) >> 3
        && (v300 = *(_QWORD *)(v299 + 8 * v20)) != 0
        && (v301 = *(unsigned __int16 *)(v300 + 2 * (HIDWORD(v18) & 0x7F)),
            v303 = v655[7],
            v302 = v655[8],
            v301 < (v302 - v303) >> 3)
        && (v304 = v303 + 8 * v301, v304 != v302)
        && *(_DWORD *)(v304 + 4) == (_DWORD)v19)
      {
        v305 = v655[11];
        v306 = v655[10] + 24 * v301;
      }
      else
      {
        v305 = v655[11];
        v306 = v305;
      }
      if (v306 == v305)
        v306 = 0;
      v737 = v306;
      v307 = v654[4];
      if (v20 < (v654[5] - v307) >> 3
        && (v308 = *(_QWORD *)(v307 + 8 * v20)) != 0
        && (v309 = *(unsigned __int16 *)(v308 + 2 * (HIDWORD(v18) & 0x7F)),
            v311 = v654[7],
            v310 = v654[8],
            v309 < (v310 - v311) >> 3)
        && (v312 = v311 + 8 * v309, v312 != v310)
        && *(_DWORD *)(v312 + 4) == (_DWORD)v19)
      {
        v313 = v654[11];
        v314 = v654[10] + 8 * v309;
      }
      else
      {
        v313 = v654[11];
        v314 = v313;
      }
      if (v314 == v313)
        v314 = 0;
      v691 = (uint64_t *)v314;
      v315 = v653[4];
      if (v20 < (v653[5] - v315) >> 3
        && (v316 = *(_QWORD *)(v315 + 8 * v20)) != 0
        && (v317 = *(unsigned __int16 *)(v316 + 2 * (HIDWORD(v18) & 0x7F)),
            v319 = v653[7],
            v318 = v653[8],
            v317 < (v318 - v319) >> 3)
        && (v320 = v319 + 8 * v317, v320 != v318)
        && *(_DWORD *)(v320 + 4) == (_DWORD)v19)
      {
        v321 = v653[11];
        v322 = v653[10] + 24 * v317;
      }
      else
      {
        v321 = v653[11];
        v322 = v321;
      }
      if (v322 == v321)
        v322 = 0;
      v699 = v322;
      v323 = v652[4];
      if (v20 < (v652[5] - v323) >> 3
        && (v324 = *(_QWORD *)(v323 + 8 * v20)) != 0
        && (v325 = *(unsigned __int16 *)(v324 + 2 * (HIDWORD(v18) & 0x7F)),
            v327 = v652[7],
            v326 = v652[8],
            v325 < (v326 - v327) >> 3)
        && (v328 = v327 + 8 * v325, v328 != v326)
        && *(_DWORD *)(v328 + 4) == (_DWORD)v19)
      {
        v701 = v652[11];
        v329 = v652[10] + v325;
      }
      else
      {
        v329 = v652[11];
        v701 = v329;
      }
      v702 = v329;
      v330 = v651[4];
      if (v20 < (v651[5] - v330) >> 3
        && (v331 = *(_QWORD *)(v330 + 8 * v20)) != 0
        && (v332 = *(unsigned __int16 *)(v331 + 2 * (HIDWORD(v18) & 0x7F)),
            v334 = v651[7],
            v333 = v651[8],
            v332 < (v333 - v334) >> 3)
        && (v335 = v334 + 8 * v332, v335 != v333)
        && *(_DWORD *)(v335 + 4) == (_DWORD)v19)
      {
        v336 = v651[11];
        v337 = v651[10] + 4 * v332;
      }
      else
      {
        v336 = v651[11];
        v337 = v336;
      }
      if (v337 == v336)
        v337 = 0;
      v703 = (unsigned int *)v337;
      v338 = v650[4];
      if (v20 < (v650[5] - v338) >> 3
        && (v339 = *(_QWORD *)(v338 + 8 * v20)) != 0
        && (v340 = *(unsigned __int16 *)(v339 + 2 * (HIDWORD(v18) & 0x7F)),
            v342 = v650[7],
            v341 = v650[8],
            v340 < (v341 - v342) >> 3)
        && (v343 = v342 + 8 * v340, v343 != v341)
        && *(_DWORD *)(v343 + 4) == (_DWORD)v19)
      {
        v704 = v650[11];
        v344 = v650[10] + v340;
      }
      else
      {
        v344 = v650[11];
        v704 = v344;
      }
      v705 = v344;
      v345 = v649[4];
      if (v20 < (v649[5] - v345) >> 3
        && (v346 = *(_QWORD *)(v345 + 8 * v20)) != 0
        && (v347 = *(unsigned __int16 *)(v346 + 2 * (HIDWORD(v18) & 0x7F)),
            v349 = v649[7],
            v348 = v649[8],
            v347 < (v348 - v349) >> 3)
        && (v350 = v349 + 8 * v347, v350 != v348)
        && *(_DWORD *)(v350 + 4) == (_DWORD)v19)
      {
        v706 = v649[11];
        v351 = v649[10] + v347;
      }
      else
      {
        v351 = v649[11];
        v706 = v351;
      }
      v707 = v351;
      v352 = v648[4];
      if (v20 < (v648[5] - v352) >> 3
        && (v353 = *(_QWORD *)(v352 + 8 * v20)) != 0
        && (v354 = *(unsigned __int16 *)(v353 + 2 * (HIDWORD(v18) & 0x7F)),
            v356 = v648[7],
            v355 = v648[8],
            v354 < (v355 - v356) >> 3)
        && (v357 = v356 + 8 * v354, v357 != v355)
        && *(_DWORD *)(v357 + 4) == (_DWORD)v19)
      {
        v358 = v648[11];
        v359 = v648[10] + 8 * v354;
      }
      else
      {
        v358 = v648[11];
        v359 = v358;
      }
      if (v359 == v358)
        v359 = 0;
      v708 = (uint64_t *)v359;
      v360 = v647[4];
      if (v20 < (v647[5] - v360) >> 3
        && (v361 = *(_QWORD *)(v360 + 8 * v20)) != 0
        && (v362 = *(unsigned __int16 *)(v361 + 2 * (HIDWORD(v18) & 0x7F)),
            v364 = v647[7],
            v363 = v647[8],
            v362 < (v363 - v364) >> 3)
        && (v365 = v364 + 8 * v362, v365 != v363)
        && *(_DWORD *)(v365 + 4) == (_DWORD)v19)
      {
        v709 = v647[11];
        v366 = v647[10] + v362;
      }
      else
      {
        v366 = v647[11];
        v709 = v366;
      }
      v710 = v366;
      v367 = v646[4];
      if (v20 < (v646[5] - v367) >> 3
        && (v368 = *(_QWORD *)(v367 + 8 * v20)) != 0
        && (v369 = *(unsigned __int16 *)(v368 + 2 * (HIDWORD(v18) & 0x7F)),
            v371 = v646[7],
            v370 = v646[8],
            v369 < (v370 - v371) >> 3)
        && (v372 = v371 + 8 * v369, v372 != v370)
        && *(_DWORD *)(v372 + 4) == (_DWORD)v19)
      {
        v373 = v646[11];
        v374 = v646[10] + 8 * v369;
      }
      else
      {
        v373 = v646[11];
        v374 = v373;
      }
      if (v374 == v373)
        v374 = 0;
      v711 = (uint64_t *)v374;
      v375 = v645[4];
      if (v20 < (v645[5] - v375) >> 3
        && (v376 = *(_QWORD *)(v375 + 8 * v20)) != 0
        && (v377 = *(unsigned __int16 *)(v376 + 2 * (HIDWORD(v18) & 0x7F)),
            v379 = v645[7],
            v378 = v645[8],
            v377 < (v378 - v379) >> 3)
        && (v380 = v379 + 8 * v377, v380 != v378)
        && *(_DWORD *)(v380 + 4) == (_DWORD)v19)
      {
        v735 = v645[11];
        v381 = v645[10] + v377;
      }
      else
      {
        v381 = v645[11];
        v735 = v381;
      }
      v736 = v381;
      v382 = v644[4];
      if (v20 < (v644[5] - v382) >> 3
        && (v383 = *(_QWORD *)(v382 + 8 * v20)) != 0
        && (v384 = *(unsigned __int16 *)(v383 + 2 * (HIDWORD(v18) & 0x7F)),
            v386 = v644[7],
            v385 = v644[8],
            v384 < (v385 - v386) >> 3)
        && (v387 = v386 + 8 * v384, v387 != v385)
        && *(_DWORD *)(v387 + 4) == (_DWORD)v19)
      {
        v388 = v644[11];
        v389 = v644[10] + 8 * v384;
      }
      else
      {
        v388 = v644[11];
        v389 = v388;
      }
      if (v389 == v388)
        v389 = 0;
      v731 = (uint64_t *)v389;
      v390 = v643[4];
      if (v20 < (v643[5] - v390) >> 3
        && (v391 = *(_QWORD *)(v390 + 8 * v20)) != 0
        && (v392 = *(unsigned __int16 *)(v391 + 2 * (HIDWORD(v18) & 0x7F)),
            v394 = v643[7],
            v393 = v643[8],
            v392 < (v393 - v394) >> 3)
        && (v395 = v394 + 8 * v392, v395 != v393)
        && *(_DWORD *)(v395 + 4) == (_DWORD)v19)
      {
        v732 = v643[11];
        v396 = v643[10] + v392;
      }
      else
      {
        v396 = v643[11];
        v732 = v396;
      }
      v733 = v396;
      v397 = v642[4];
      if (v20 < (v642[5] - v397) >> 3
        && (v398 = *(_QWORD *)(v397 + 8 * v20)) != 0
        && (v399 = *(unsigned __int16 *)(v398 + 2 * (HIDWORD(v18) & 0x7F)),
            v401 = v642[7],
            v400 = v642[8],
            v399 < (v400 - v401) >> 3)
        && (v402 = v401 + 8 * v399, v402 != v400)
        && *(_DWORD *)(v402 + 4) == (_DWORD)v19)
      {
        v403 = v642[11];
        v404 = v642[10] + 8 * v399;
      }
      else
      {
        v403 = v642[11];
        v404 = v403;
      }
      if (v404 == v403)
        v405 = 0;
      else
        v405 = (uint64_t *)v404;
      v730 = v405;
      v406 = *v17;
      v407 = HIDWORD(*v15);
      v408 = *v15 << 32;
      v749 = &off_1E427EBC8;
      *(_QWORD *)&v750 = v408;
      DWORD2(v750) = v407;
      v751 = &v749;
      *(_QWORD *)v752 = &off_1E427EBC8;
      v753 = v752;
      *(_QWORD *)&v752[8] = v408;
      *(_DWORD *)&v752[16] = v407;
      v754 = 0;
      ecs2::Runtime::queueCommand(v406, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      v409 = v751;
      if (v751 == &v749)
      {
        v409 = &v749;
        v410 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_452;
        v410 = 5;
      }
      (*v409)[v410]();
LABEL_452:
      v411 = *v53;
      v412 = 5;
      if (v411 != 2)
        v412 = 0;
      if (v411 == 1)
        v413 = 3;
      else
        v413 = v412;
      v414 = gdc::Registry::create((gdc::Registry *)(*v17)[1]);
      v415 = **v17;
      v416 = *(_QWORD **)v415;
      v417 = *(_QWORD **)(v415 + 8);
      if (v416 != v417)
      {
        while (*v416 != 0x41D4E9297E100630)
        {
          v416 += 5;
          if (v416 == v417)
            goto LABEL_468;
        }
      }
      if (v416 == v417)
      {
LABEL_468:
        v418 = 0;
      }
      else
      {
        v418 = v416[3];
        v419 = (std::__shared_weak_count *)v416[4];
        if (v419)
        {
          p_shared_owners = (unint64_t *)&v419->__shared_owners_;
          do
            v421 = __ldxr(p_shared_owners);
          while (__stxr(v421 + 1, p_shared_owners));
          do
            v422 = __ldaxr(p_shared_owners);
          while (__stlxr(v422 - 1, p_shared_owners));
          if (!v422)
          {
            ((void (*)(std::__shared_weak_count *))v419->__on_zero_shared)(v419);
            std::__shared_weak_count::__release_weak(v419);
          }
        }
      }
      v739 = v63;
      RenderItem = md::VKMRenderResourcesStore::createRenderItem(v418, v63);
      v425 = v424;
      v426 = *a2;
      v427 = operator new(0x28uLL);
      *v427 = &off_1E427DAA0;
      v427[1] = RenderItem;
      v427[2] = v425;
      v427[3] = 48;
      v427[4] = v414;
      v753 = v427;
      v751 = 0;
      v754 = 0;
      ecs2::Runtime::queueCommand(v426, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      v428 = v751;
      if (v751 == &v749)
      {
        v428 = &v749;
        v429 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_476;
        v429 = 5;
      }
      (*v428)[v429]();
LABEL_476:
      v430 = *a2;
      v749 = &off_1E427E550;
      *(_QWORD *)&v750 = 0;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E427E550;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v430, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      v431 = v751;
      if (v751 == &v749)
      {
        v431 = &v749;
        v432 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_483;
        v432 = 5;
      }
      (*v431)[v432]();
LABEL_483:
      if (!v290)
        goto LABEL_491;
      v433 = *v290;
      v434 = *a2;
      v749 = &off_1E4280878;
      *(_QWORD *)&v750 = v433;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E4280878;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v434, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      v435 = v751;
      if (v751 == &v749)
      {
        v435 = &v749;
        v436 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_491;
        v436 = 5;
      }
      (*v435)[v436]();
LABEL_491:
      if (!v741)
        goto LABEL_499;
      v437 = *a2;
      v438 = *v741;
      v749 = &off_1E427E430;
      *(_QWORD *)&v750 = v438;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E427E430;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v437, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      v439 = v751;
      if (v751 == &v749)
      {
        v439 = &v749;
        v440 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_499;
        v440 = 5;
      }
      (*v439)[v440]();
LABEL_499:
      v441 = *a2;
      v749 = &off_1E427EF28;
      *(_QWORD *)&v750 = 0;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E427EF28;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v441, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      v442 = v751;
      if (v751 == &v749)
      {
        v442 = &v749;
        v443 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_506;
        v443 = 5;
      }
      (*v442)[v443]();
LABEL_506:
      v444 = *a2;
      v749 = &off_1E427EEE0;
      *(_QWORD *)&v750 = v414 << 32;
      v742 = v414 << 32;
      DWORD2(v750) = HIDWORD(v414);
      v751 = &v749;
      *(_QWORD *)v752 = &off_1E427EEE0;
      v753 = v752;
      *(_QWORD *)&v752[8] = v414 << 32;
      *(_DWORD *)&v752[16] = HIDWORD(v414);
      v754 = 0;
      ecs2::Runtime::queueCommand(v444, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      v445 = v751;
      if (v751 == &v749)
      {
        v445 = &v749;
        v446 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_513;
        v446 = 5;
      }
      (*v445)[v446]();
LABEL_513:
      v447 = *a2;
      v448 = operator new(0x28uLL);
      *v448 = &off_1E427E508;
      v448[1] = 0x525987C8040ACB5FLL;
      v448[2] = "md::ls::UnflattenedPassItem]";
      v448[3] = 27;
      v448[4] = v414;
      v753 = v448;
      v751 = 0;
      v754 = 0;
      ecs2::Runtime::queueCommand(v447, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      v449 = v751;
      if (v751 == &v749)
      {
        v449 = &v749;
        v450 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_520;
        v450 = 5;
      }
      (*v449)[v450]();
LABEL_520:
      v451 = *v740;
      v452 = *a2;
      v453 = operator new(0x28uLL);
      *(_QWORD *)v453 = &off_1E427EFB8;
      v453[8] = v451;
      *((_QWORD *)v453 + 2) = 9;
      *((_QWORD *)v453 + 3) = v413;
      *((_QWORD *)v453 + 4) = v414;
      v753 = v453;
      v751 = 0;
      v754 = 0;
      ecs2::Runtime::queueCommand(v452, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      v454 = v751;
      if (v751 == &v749)
      {
        v454 = &v749;
        v455 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_527;
        v455 = 5;
      }
      (*v454)[v455]();
LABEL_527:
      addIntendedSceneLayer<ecs2::Runtime>(*a2, v414, *v740);
      v456 = *a2;
      v749 = &off_1E427EF70;
      *(_QWORD *)&v750 = 2;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E427EF70;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v456, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      v457 = v751;
      if (v751 == &v749)
      {
        v457 = &v749;
        v458 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_534;
        v458 = 5;
      }
      (*v457)[v458]();
LABEL_534:
      if (*v738 != 1)
        goto LABEL_542;
      v459 = *a2;
      v749 = &off_1E427D548;
      *(_QWORD *)&v750 = v414 << 32;
      DWORD2(v750) = HIDWORD(v414);
      v751 = &v749;
      *(_QWORD *)v752 = &off_1E427D548;
      v753 = v752;
      *(_QWORD *)&v752[8] = v414 << 32;
      *(_DWORD *)&v752[16] = HIDWORD(v414);
      v754 = 0;
      ecs2::Runtime::queueCommand(v459, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      v460 = v751;
      if (v751 == &v749)
      {
        v460 = &v749;
        v461 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_542;
        v461 = 5;
      }
      (*v460)[v461]();
LABEL_542:
      if (v737)
      {
        v462 = *(_QWORD *)(v737 + 8);
        *(_QWORD *)v752 = *(_QWORD *)v737;
        *(_QWORD *)&v752[8] = v462;
        if (v462)
        {
          v463 = (unint64_t *)(v462 + 8);
          do
            v464 = __ldxr(v463);
          while (__stxr(v464 + 1, v463));
        }
        *(_WORD *)&v752[16] = *(_WORD *)(v737 + 16);
        ecs2::addComponent<md::ls::CustomRenderState>(*a2, v414, (uint64_t *)v752);
        v465 = *(std::__shared_weak_count **)&v752[8];
        if (*(_QWORD *)&v752[8])
        {
          v466 = (unint64_t *)(*(_QWORD *)&v752[8] + 8);
          do
            v467 = __ldaxr(v466);
          while (__stlxr(v467 - 1, v466));
          if (!v467)
          {
            ((void (*)(std::__shared_weak_count *))v465->__on_zero_shared)(v465);
            std::__shared_weak_count::__release_weak(v465);
          }
        }
      }
      v468 = *a2;
      v749 = &off_1E427E478;
      *(_QWORD *)&v750 = v414 << 32;
      DWORD2(v750) = HIDWORD(v414);
      v751 = &v749;
      *(_QWORD *)v752 = &off_1E427E478;
      v753 = v752;
      *(_QWORD *)&v752[8] = v414 << 32;
      *(_DWORD *)&v752[16] = HIDWORD(v414);
      v754 = 0;
      ecs2::Runtime::queueCommand(v468, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      v469 = v751;
      if (v751 == &v749)
      {
        v469 = &v749;
        v470 = 4;
        goto LABEL_557;
      }
      if (v751)
      {
        v470 = 5;
LABEL_557:
        (*v469)[v470]();
      }
      v471 = *a2;
      if (v736 != v735 && v736)
      {
        v472 = &off_1E427D5D8;
        v473 = v414 << 32;
        goto LABEL_569;
      }
      v749 = &off_1E427DC98;
      *(_QWORD *)&v750 = v414 << 32;
      DWORD2(v750) = HIDWORD(v414);
      v751 = &v749;
      *(_QWORD *)v752 = &off_1E427DC98;
      v753 = v752;
      *(_QWORD *)&v752[8] = v414 << 32;
      *(_DWORD *)&v752[16] = HIDWORD(v414);
      v754 = 0;
      ecs2::Runtime::queueCommand(v471, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      v474 = v751;
      if (v751 == &v749)
      {
        v474 = &v749;
        v475 = 4;
        goto LABEL_567;
      }
      if (v751)
      {
        v475 = 5;
LABEL_567:
        (*v474)[v475]();
      }
      v471 = *a2;
      v473 = v742 | *v690;
      v472 = &off_1E4281D48;
LABEL_569:
      v749 = v472;
      *(_QWORD *)&v750 = v473;
      DWORD2(v750) = HIDWORD(v414);
      v751 = &v749;
      *(_QWORD *)v752 = v472;
      v753 = v752;
      *(_QWORD *)&v752[8] = v473;
      *(_DWORD *)&v752[16] = HIDWORD(v414);
      v754 = 0;
      ecs2::Runtime::queueCommand(v471, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      v476 = v751;
      if (v751 == &v749)
      {
        v476 = &v749;
        v477 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_576;
        v477 = 5;
      }
      (*v476)[v477]();
LABEL_576:
      v478 = **a2;
      v479 = *(_QWORD **)v478;
      v480 = *(_QWORD **)(v478 + 8);
      if (v479 != v480)
      {
        while (*v479 != 0x41D4E9297E100630)
        {
          v479 += 5;
          if (v479 == v480)
            goto LABEL_587;
        }
      }
      if (v479 == v480)
      {
LABEL_587:
        v481 = 0;
      }
      else
      {
        v481 = v479[3];
        v482 = (std::__shared_weak_count *)v479[4];
        if (v482)
        {
          v483 = (unint64_t *)&v482->__shared_owners_;
          do
            v484 = __ldxr(v483);
          while (__stxr(v484 + 1, v483));
          do
            v485 = __ldaxr(v483);
          while (__stlxr(v485 - 1, v483));
          if (!v485)
          {
            ((void (*)(std::__shared_weak_count *))v482->__on_zero_shared)(v482);
            std::__shared_weak_count::__release_weak(v482);
          }
        }
      }
      AssociationItemStorage = (_QWORD *)md::VKMRenderResourcesStore::getAssociationItemStorage(v481, *v739, 1);
      v487 = AssociationItemStorage;
      v489 = (unint64_t *)AssociationItemStorage[2];
      v488 = AssociationItemStorage[3];
      if ((unint64_t)v489 >= v488)
      {
        v493 = (char *)AssociationItemStorage[1];
        v494 = ((char *)v489 - v493) >> 3;
        v495 = v494 + 1;
        if ((unint64_t)(v494 + 1) >> 61)
          abort();
        v496 = v488 - (_QWORD)v493;
        if (v496 >> 2 > v495)
          v495 = v496 >> 2;
        if ((unint64_t)v496 >= 0x7FFFFFFFFFFFFFF8)
          v497 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v497 = v495;
        if (v497)
        {
          if (v497 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v498 = (char *)operator new(8 * v497);
          v490 = HIDWORD(v414);
        }
        else
        {
          v490 = HIDWORD(v414);
          v498 = 0;
        }
        v499 = (unint64_t *)&v498[8 * v494];
        *v499 = v414;
        v491 = v499 + 1;
        if (v489 != (unint64_t *)v493)
        {
          v500 = (char *)v489 - v493 - 8;
          if (v500 < 0x58)
            goto LABEL_985;
          if ((unint64_t)(v493 - v498) < 0x20)
            goto LABEL_985;
          v501 = (v500 >> 3) + 1;
          v502 = &v498[8 * v494 - 16];
          v503 = v489 - 2;
          v504 = v501 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v505 = *(_OWORD *)v503;
            *((_OWORD *)v502 - 1) = *((_OWORD *)v503 - 1);
            *(_OWORD *)v502 = v505;
            v502 -= 32;
            v503 -= 4;
            v504 -= 4;
          }
          while (v504);
          v499 -= v501 & 0x3FFFFFFFFFFFFFFCLL;
          v489 -= v501 & 0x3FFFFFFFFFFFFFFCLL;
          if (v501 != (v501 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_985:
            do
            {
              v506 = *--v489;
              *--v499 = v506;
            }
            while (v489 != (unint64_t *)v493);
          }
          v489 = (unint64_t *)v487[1];
        }
        v487[1] = v499;
        v487[2] = v491;
        v487[3] = &v498[8 * v497];
        v492 = a2;
        if (v489)
          operator delete(v489);
      }
      else
      {
        v490 = HIDWORD(v414);
        *v489 = v414;
        v491 = v489 + 1;
        v492 = a2;
      }
      v487[2] = v491;
      v507 = *v492;
      v749 = &off_1E427D740;
      *(_QWORD *)&v750 = v414 << 32;
      DWORD2(v750) = v490;
      v751 = &v749;
      *(_QWORD *)v752 = &off_1E427D740;
      v753 = v752;
      *(_QWORD *)&v752[8] = v414 << 32;
      *(_DWORD *)&v752[16] = v490;
      v754 = 0;
      ecs2::Runtime::queueCommand(v507, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      v508 = v751;
      if (v751 == &v749)
      {
        v508 = &v749;
        v509 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_617;
        v509 = 5;
      }
      (*v508)[v509]();
LABEL_617:
      v510 = *v492;
      v511 = (char *)operator new(0x38uLL);
      *((_QWORD *)v511 + 1) = 0;
      *((_QWORD *)v511 + 2) = 0;
      *(_QWORD *)v511 = &off_1E427E9D0;
      v511[24] = 0;
      *(_WORD *)(v511 + 25) = 257;
      *(_DWORD *)(v511 + 27) = 0;
      v511[31] = 2;
      *((_QWORD *)v511 + 4) = 0;
      v511[40] = 0;
      *(_QWORD *)(v511 + 44) = v414;
      v753 = v511;
      v751 = 0;
      v754 = 0;
      ecs2::Runtime::queueCommand(v510, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      v512 = v751;
      if (v751 == &v749)
      {
        v512 = &v749;
        v513 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_624;
        v513 = 5;
      }
      (*v512)[v513]();
LABEL_624:
      v514 = *a2;
      v749 = &off_1E427E8B0;
      *(_QWORD *)&v750 = v414 << 32;
      DWORD2(v750) = v490;
      v751 = &v749;
      *(_QWORD *)v752 = &off_1E427E8B0;
      v753 = v752;
      *(_QWORD *)&v752[8] = v414 << 32;
      *(_DWORD *)&v752[16] = v490;
      v754 = 0;
      ecs2::Runtime::queueCommand(v514, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      v515 = v751;
      if (v751 == &v749)
      {
        v515 = &v749;
        v516 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_631;
        v516 = 5;
      }
      (*v515)[v516]();
LABEL_631:
      v517 = *a2;
      v749 = &off_1E427E598;
      *(_QWORD *)&v750 = 0;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E427E598;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v517, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      v518 = v751;
      if (v751 == &v749)
      {
        v518 = &v749;
        v519 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_638;
        v519 = 5;
      }
      (*v518)[v519]();
LABEL_638:
      v520 = *a2;
      v749 = &off_1E427F9D8;
      *(_QWORD *)&v750 = v414 << 32;
      DWORD2(v750) = v490;
      v751 = &v749;
      *(_QWORD *)v752 = &off_1E427F9D8;
      v753 = v752;
      *(_QWORD *)&v752[8] = v414 << 32;
      *(_DWORD *)&v752[16] = v490;
      v754 = 0;
      ecs2::Runtime::queueCommand(v520, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      v521 = v751;
      if (v751 == &v749)
      {
        v521 = &v749;
        v522 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_645;
        v522 = 5;
      }
      (*v521)[v522]();
LABEL_645:
      v523 = *a2;
      v746 = *(_OWORD *)v739;
      v524 = (char *)operator new(0x20uLL);
      *(_QWORD *)v524 = &off_1E427E8F8;
      *(_OWORD *)(v524 + 8) = v746;
      *((_QWORD *)v524 + 3) = v414;
      v753 = v524;
      v751 = 0;
      v754 = 0;
      ecs2::Runtime::queueCommand(v523, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(char *, _BYTE *))off_1E42FB340[v754])(&v748, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v525 = 4;
        v17 = a2;
      }
      else
      {
        v17 = a2;
        if (!v751)
          goto LABEL_652;
        v525 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v525))();
LABEL_652:
      if (!v730)
        goto LABEL_660;
      v526 = *v17;
      v527 = *v730;
      v749 = &off_1E427DFB0;
      *(_QWORD *)&v750 = v527;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E427DFB0;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v526, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v528 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_660;
        v528 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v528))();
LABEL_660:
      if (v731)
      {
        v529 = *v17;
        v530 = *v731;
        v749 = &off_1E4281DD8;
        *(_QWORD *)&v750 = v530;
        *((_QWORD *)&v750 + 1) = v414;
        v751 = &v749;
        v753 = v752;
        *(_QWORD *)v752 = &off_1E4281DD8;
        *(_OWORD *)&v752[8] = v750;
        v754 = 0;
        ecs2::Runtime::queueCommand(v529, (uint64_t)v752);
        if (v754 != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
        v754 = -1;
        result = (uint64_t)v751;
        if (v751 == &v749)
        {
          result = (uint64_t)&v749;
          v531 = 4;
          goto LABEL_667;
        }
        if (v751)
        {
          v531 = 5;
LABEL_667:
          result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v531))();
        }
      }
      if (v733 != v732 && v733)
      {
        v532 = *v17;
        v749 = &off_1E427DB30;
        *(_QWORD *)&v750 = v414 << 32;
        DWORD2(v750) = v490;
        v751 = &v749;
        *(_QWORD *)v752 = &off_1E427DB30;
        v753 = v752;
        *(_QWORD *)&v752[8] = v414 << 32;
        *(_DWORD *)&v752[16] = v490;
        v754 = 0;
        ecs2::Runtime::queueCommand(v532, (uint64_t)v752);
        if (v754 != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
        v754 = -1;
        result = (uint64_t)v751;
        if (v751 == &v749)
        {
          result = (uint64_t)&v749;
          v533 = 4;
        }
        else
        {
          if (!v751)
            goto LABEL_677;
          v533 = 5;
        }
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v533))();
      }
LABEL_677:
      if (!v734)
        goto LABEL_685;
      v534 = *v17;
      *(_QWORD *)&v746 = *(_QWORD *)v734;
      BYTE8(v746) = *(_BYTE *)(v734 + 8);
      *(_QWORD *)v752 = v746;
      v752[8] = BYTE8(v746);
      v535 = (char *)operator new(0x20uLL);
      *(_QWORD *)v535 = &off_1E4281B98;
      *(_OWORD *)(v535 + 8) = *(_OWORD *)v752;
      *((_QWORD *)v535 + 3) = v414;
      v753 = v535;
      v751 = 0;
      v754 = 0;
      ecs2::Runtime::queueCommand(v534, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(char *, _BYTE *))off_1E42FB340[v754])(&v748, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v536 = 4;
        v17 = a2;
      }
      else
      {
        v17 = a2;
        if (!v751)
          goto LABEL_685;
        v536 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v536))();
LABEL_685:
      if (!v728)
        goto LABEL_693;
      v537 = *v17;
      v538 = *v728;
      v749 = &off_1E427DB78;
      *(_QWORD *)&v750 = v538;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E427DB78;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v537, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v539 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_693;
        v539 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v539))();
LABEL_693:
      if (!v725)
        goto LABEL_701;
      v540 = *v17;
      v541 = *v725;
      v749 = &off_1E427FA68;
      *(_QWORD *)&v750 = v541;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E427FA68;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v540, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v542 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_701;
        v542 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v542))();
LABEL_701:
      if (!v726)
        goto LABEL_709;
      v543 = *v17;
      v544 = *v726;
      v749 = &off_1E4280998;
      *(_QWORD *)&v750 = v544;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E4280998;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v543, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v545 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_709;
        v545 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v545))();
LABEL_709:
      if (!v727)
        goto LABEL_717;
      v546 = *v17;
      v547 = *v727;
      v749 = &off_1E427ED30;
      *(_QWORD *)&v750 = v547;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E427ED30;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v546, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v548 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_717;
        v548 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v548))();
LABEL_717:
      if (!v723)
        goto LABEL_725;
      v549 = *v17;
      v550 = *v723;
      v749 = &off_1E4281640;
      *(_QWORD *)&v750 = v550;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E4281640;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v549, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v551 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_725;
        v551 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v551))();
LABEL_725:
      if (!v724)
        goto LABEL_733;
      v552 = *v17;
      v553 = *v724;
      v749 = &off_1E427E0D0;
      *(_QWORD *)&v750 = v553;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E427E0D0;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v552, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v554 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_733;
        v554 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v554))();
LABEL_733:
      if (!v722)
        goto LABEL_741;
      v555 = *v17;
      v556 = *v722;
      v749 = &off_1E427F1F8;
      *(_QWORD *)&v750 = v556;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E427F1F8;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v555, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v557 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_741;
        v557 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v557))();
LABEL_741:
      if (!v729)
        goto LABEL_749;
      v558 = *v17;
      v746 = *v729;
      v559 = (char *)operator new(0x20uLL);
      *(_QWORD *)v559 = &off_1E427D500;
      *(_OWORD *)(v559 + 8) = v746;
      *((_QWORD *)v559 + 3) = v414;
      v753 = v559;
      v751 = 0;
      v754 = 0;
      ecs2::Runtime::queueCommand(v558, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(char *, _BYTE *))off_1E42FB340[v754])(&v748, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v560 = 4;
        v17 = a2;
      }
      else
      {
        v17 = a2;
        if (!v751)
          goto LABEL_749;
        v560 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v560))();
LABEL_749:
      if (!v712)
        goto LABEL_757;
      v561 = *v17;
      v562 = *v712;
      v749 = &off_1E427DD70;
      *(_QWORD *)&v750 = v562;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E427DD70;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v561, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v563 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_757;
        v563 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v563))();
LABEL_757:
      if (!v713)
        goto LABEL_765;
      v564 = *v17;
      v565 = *v713;
      v749 = &off_1E427FAB0;
      *(_QWORD *)&v750 = v565;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E427FAB0;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v564, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v566 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_765;
        v566 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v566))();
LABEL_765:
      if (!v714)
        goto LABEL_773;
      v567 = *v17;
      v568 = *v714;
      v749 = &off_1E4281F40;
      *(_QWORD *)&v750 = v568;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E4281F40;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v567, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v569 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_773;
        v569 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v569))();
LABEL_773:
      if (v715)
      {
        v570 = *v17;
        v571 = *v715;
        v749 = &off_1E427E118;
        *(_QWORD *)&v750 = v571;
        *((_QWORD *)&v750 + 1) = v414;
        v751 = &v749;
        v753 = v752;
        *(_QWORD *)v752 = &off_1E427E118;
        *(_OWORD *)&v752[8] = v750;
        v754 = 0;
        ecs2::Runtime::queueCommand(v570, (uint64_t)v752);
        if (v754 != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
        v754 = -1;
        result = (uint64_t)v751;
        if (v751 == &v749)
        {
          result = (uint64_t)&v749;
          v572 = 4;
          goto LABEL_780;
        }
        if (v751)
        {
          v572 = 5;
LABEL_780:
          result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v572))();
        }
      }
      if (v702 != v701 && v702)
      {
        v573 = *v17;
        v749 = &off_1E4281E68;
        *(_QWORD *)&v750 = v414 << 32;
        DWORD2(v750) = v490;
        v751 = &v749;
        *(_QWORD *)v752 = &off_1E4281E68;
        v753 = v752;
        *(_QWORD *)&v752[8] = v414 << 32;
        *(_DWORD *)&v752[16] = v490;
        v754 = 0;
        ecs2::Runtime::queueCommand(v573, (uint64_t)v752);
        if (v754 != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
        v754 = -1;
        result = (uint64_t)v751;
        if (v751 == &v749)
        {
          result = (uint64_t)&v749;
          v574 = 4;
        }
        else
        {
          if (!v751)
            goto LABEL_790;
          v574 = 5;
        }
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v574))();
      }
LABEL_790:
      if (v703)
      {
        v575 = *v17;
        v576 = v742 | *v703;
        v749 = &off_1E427DCE0;
        *(_QWORD *)&v750 = v576;
        DWORD2(v750) = v490;
        v751 = &v749;
        *(_QWORD *)v752 = &off_1E427DCE0;
        v753 = v752;
        *(_QWORD *)&v752[8] = v576;
        *(_DWORD *)&v752[16] = v490;
        v754 = 0;
        ecs2::Runtime::queueCommand(v575, (uint64_t)v752);
        if (v754 != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
        v754 = -1;
        result = (uint64_t)v751;
        if (v751 == &v749)
        {
          result = (uint64_t)&v749;
          v577 = 4;
          goto LABEL_797;
        }
        if (v751)
        {
          v577 = 5;
LABEL_797:
          result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v577))();
        }
      }
      if (v705 != v704 && v705)
      {
        v578 = *v17;
        v749 = &off_1E427D6B0;
        *(_QWORD *)&v750 = v414 << 32;
        DWORD2(v750) = v490;
        v751 = &v749;
        *(_QWORD *)v752 = &off_1E427D6B0;
        v753 = v752;
        *(_QWORD *)&v752[8] = v414 << 32;
        *(_DWORD *)&v752[16] = v490;
        v754 = 0;
        ecs2::Runtime::queueCommand(v578, (uint64_t)v752);
        if (v754 != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
        v754 = -1;
        result = (uint64_t)v751;
        if (v751 == &v749)
        {
          result = (uint64_t)&v749;
          v579 = 4;
          goto LABEL_806;
        }
        if (v751)
        {
          v579 = 5;
LABEL_806:
          result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v579))();
        }
      }
      if (v707 != v706 && v707)
      {
        v580 = *v17;
        v749 = &off_1E427DF68;
        *(_QWORD *)&v750 = v414 << 32;
        DWORD2(v750) = v490;
        v751 = &v749;
        *(_QWORD *)v752 = &off_1E427DF68;
        v753 = v752;
        *(_QWORD *)&v752[8] = v414 << 32;
        *(_DWORD *)&v752[16] = v490;
        v754 = 0;
        ecs2::Runtime::queueCommand(v580, (uint64_t)v752);
        if (v754 != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
        v754 = -1;
        result = (uint64_t)v751;
        if (v751 == &v749)
        {
          result = (uint64_t)&v749;
          v581 = 4;
        }
        else
        {
          if (!v751)
            goto LABEL_816;
          v581 = 5;
        }
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v581))();
      }
LABEL_816:
      if (v708)
      {
        v582 = *v17;
        v583 = *v708;
        v749 = &off_1E427DC08;
        *(_QWORD *)&v750 = v583;
        *((_QWORD *)&v750 + 1) = v414;
        v751 = &v749;
        v753 = v752;
        *(_QWORD *)v752 = &off_1E427DC08;
        *(_OWORD *)&v752[8] = v750;
        v754 = 0;
        ecs2::Runtime::queueCommand(v582, (uint64_t)v752);
        if (v754 != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
        v754 = -1;
        result = (uint64_t)v751;
        if (v751 == &v749)
        {
          result = (uint64_t)&v749;
          v584 = 4;
          goto LABEL_823;
        }
        if (v751)
        {
          v584 = 5;
LABEL_823:
          result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v584))();
        }
      }
      if (v710 != v709 && v710)
      {
        v585 = *v17;
        v749 = &off_1E4281E20;
        *(_QWORD *)&v750 = v414 << 32;
        DWORD2(v750) = v490;
        v751 = &v749;
        *(_QWORD *)v752 = &off_1E4281E20;
        v753 = v752;
        *(_QWORD *)&v752[8] = v414 << 32;
        *(_DWORD *)&v752[16] = v490;
        v754 = 0;
        ecs2::Runtime::queueCommand(v585, (uint64_t)v752);
        if (v754 != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
        v754 = -1;
        result = (uint64_t)v751;
        if (v751 == &v749)
        {
          result = (uint64_t)&v749;
          v586 = 4;
        }
        else
        {
          if (!v751)
            goto LABEL_833;
          v586 = 5;
        }
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v586))();
      }
LABEL_833:
      if (!v711)
        goto LABEL_841;
      v587 = *v17;
      v588 = *v711;
      v749 = &off_1E427D590;
      *(_QWORD *)&v750 = v588;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E427D590;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v587, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v589 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_841;
        v589 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v589))();
LABEL_841:
      if (!v718)
        goto LABEL_849;
      v590 = *v17;
      v591 = *v718;
      v749 = &off_1E427F240;
      *(_QWORD *)&v750 = v591;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E427F240;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v590, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v592 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_849;
        v592 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v592))();
LABEL_849:
      if (!v720)
        goto LABEL_857;
      v593 = *v17;
      v594 = *v720;
      v749 = &off_1E4281B50;
      *(_QWORD *)&v750 = v594;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E4281B50;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v593, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v595 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_857;
        v595 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v595))();
LABEL_857:
      if (!v716)
        goto LABEL_865;
      v596 = *v17;
      v597 = *v716;
      v749 = &off_1E4281B08;
      *(_QWORD *)&v750 = v597;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E4281B08;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v596, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v598 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_865;
        v598 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v598))();
LABEL_865:
      if (!v721)
        goto LABEL_873;
      v599 = *v17;
      v600 = *v721;
      v749 = &off_1E4280710;
      *(_QWORD *)&v750 = v600;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E4280710;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v599, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v601 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_873;
        v601 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v601))();
LABEL_873:
      if (!v717)
        goto LABEL_881;
      v602 = *v17;
      v603 = *v717;
      v749 = &off_1E4280440;
      *(_QWORD *)&v750 = v603;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E4280440;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v602, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v604 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_881;
        v604 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v604))();
LABEL_881:
      if (!v719)
        goto LABEL_889;
      v605 = *v17;
      *(_QWORD *)&v746 = *(_QWORD *)v719;
      BYTE8(v746) = *(_BYTE *)(v719 + 8);
      *(_QWORD *)v752 = v746;
      v752[8] = BYTE8(v746);
      v606 = (char *)operator new(0x20uLL);
      *(_QWORD *)v606 = &off_1E4280200;
      *(_OWORD *)(v606 + 8) = *(_OWORD *)v752;
      *((_QWORD *)v606 + 3) = v414;
      v753 = v606;
      v751 = 0;
      v754 = 0;
      ecs2::Runtime::queueCommand(v605, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(char *, _BYTE *))off_1E42FB340[v754])(&v748, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v607 = 4;
        v17 = a2;
      }
      else
      {
        v17 = a2;
        if (!v751)
          goto LABEL_889;
        v607 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v607))();
LABEL_889:
      if (!v700)
        goto LABEL_897;
      v608 = *v17;
      v609 = *v700;
      v749 = &off_1E4281C70;
      *(_QWORD *)&v750 = v609;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E4281C70;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v608, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v610 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_897;
        v610 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v610))();
LABEL_897:
      if (!v699)
        goto LABEL_905;
      v611 = *v17;
      v746 = *(_OWORD *)v699;
      *(_QWORD *)&v747 = *(_QWORD *)(v699 + 16);
      v612 = (char *)operator new(0x28uLL);
      *(_QWORD *)v612 = &off_1E427E040;
      *(_OWORD *)(v612 + 8) = v746;
      *((_QWORD *)v612 + 3) = v747;
      *((_QWORD *)v612 + 4) = v414;
      v753 = v612;
      v751 = 0;
      v754 = 0;
      ecs2::Runtime::queueCommand(v611, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(char *, _BYTE *))off_1E42FB340[v754])(&v748, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v613 = 4;
        v17 = a2;
      }
      else
      {
        v17 = a2;
        if (!v751)
          goto LABEL_905;
        v613 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v613))();
LABEL_905:
      if (!v695)
        goto LABEL_913;
      v614 = *v17;
      v615 = *v695;
      v749 = &off_1E427F2D0;
      *(_QWORD *)&v750 = v615;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E427F2D0;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v614, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v616 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_913;
        v616 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v616))();
LABEL_913:
      if (!v696)
        goto LABEL_921;
      v617 = *v17;
      v618 = *v696;
      v749 = &off_1E427F288;
      *(_QWORD *)&v750 = v618;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E427F288;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v617, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v619 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_921;
        v619 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v619))();
LABEL_921:
      if (!v697)
        goto LABEL_929;
      v620 = *v17;
      v621 = *v697;
      v749 = &off_1E4281520;
      *(_QWORD *)&v750 = v621;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E4281520;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v620, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v622 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_929;
        v622 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v622))();
LABEL_929:
      if (!v698)
        goto LABEL_937;
      v623 = *v17;
      v746 = *v698;
      v747 = v698[1];
      v624 = (char *)operator new(0x30uLL);
      *(_QWORD *)v624 = &off_1E4281958;
      v625 = v747;
      *(_OWORD *)(v624 + 8) = v746;
      *(_OWORD *)(v624 + 24) = v625;
      *((_QWORD *)v624 + 5) = v414;
      v753 = v624;
      v751 = 0;
      v754 = 0;
      ecs2::Runtime::queueCommand(v623, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(char *, _BYTE *))off_1E42FB340[v754])(&v748, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v626 = 4;
        v17 = a2;
      }
      else
      {
        v17 = a2;
        if (!v751)
          goto LABEL_937;
        v626 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v626))();
LABEL_937:
      if (!v691)
        goto LABEL_945;
      v627 = *v17;
      v628 = *v691;
      v749 = &off_1E427EDC0;
      *(_QWORD *)&v750 = v628;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E427EDC0;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v627, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v629 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_945;
        v629 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v629))();
LABEL_945:
      if (!v692)
        goto LABEL_953;
      v630 = *v17;
      v631 = *v692;
      v749 = &off_1E4280488;
      *(_QWORD *)&v750 = v631;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E4280488;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v630, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v632 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_953;
        v632 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v632))();
LABEL_953:
      if (!v693)
        goto LABEL_961;
      v633 = *v17;
      v634 = *v693;
      v749 = &off_1E4280248;
      *(_QWORD *)&v750 = v634;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E4280248;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v633, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v635 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_961;
        v635 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v635))();
LABEL_961:
      if (!v694)
        goto LABEL_969;
      v636 = *v17;
      v637 = *v694;
      v749 = &off_1E42803F8;
      *(_QWORD *)&v750 = v637;
      *((_QWORD *)&v750 + 1) = v414;
      v751 = &v749;
      v753 = v752;
      *(_QWORD *)v752 = &off_1E42803F8;
      *(_OWORD *)&v752[8] = v750;
      v754 = 0;
      ecs2::Runtime::queueCommand(v636, (uint64_t)v752);
      if (v754 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v754])(&v746, v752);
      v754 = -1;
      result = (uint64_t)v751;
      if (v751 == &v749)
      {
        result = (uint64_t)&v749;
        v638 = 4;
      }
      else
      {
        if (!v751)
          goto LABEL_969;
        v638 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v638))();
LABEL_969:
      v7 = v745;
      v639 = *(_QWORD **)(v744[0] + 32);
      v15 = v640;
      while (1)
      {
        v745 = ++v7;
        if (v7 == v639)
          break;
        result = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(v744);
        if ((_DWORD)result)
          goto LABEL_20;
      }
      v7 = v639;
LABEL_20:
      v11 = (_QWORD *)v688;
      v14 = (_QWORD *)v689;
      v13 = (_QWORD *)v686;
      v12 = (_QWORD *)v687;
    }
    while (v641 != v7);
  }
  *v15 = 0xFFFFFFFF00000000;
  return result;
}

void sub_19F700C40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 - 136);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t gdc::Registry::storage<md::ls::HasMaterialRaster>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x9D7520A01DC69D83;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x9D7520A01DC69D83;
      if (*(_QWORD *)&v3 <= 0x9D7520A01DC69D83)
        v5 = 0x9D7520A01DC69D83 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x9D7520A01DC69D83;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x9D7520A01DC69D83)
            {
              if (v7[2] == 0x9D7520A01DC69D83)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x9D7520A01DC69D83)
          {
            if (v7[2] == 0x9D7520A01DC69D83)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::HasMaterialRaster]";
  *(_QWORD *)(v11 + 24) = 25;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271FE8;
  *(_QWORD *)(v11 + 8) = 0x9D7520A01DC69D83;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x9D7520A01DC69D83, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x9D7520A01DC69D83;
  v15[1] = "md::ls::HasMaterialRaster]";
  v15[2] = 25;
  gdc::Registry::_registerStorageDataSignals(a1, 0x9D7520A01DC69D83, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F700E9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::ZIndex>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xE115FCB3272B65A3;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xE115FCB3272B65A3;
      if (*(_QWORD *)&v3 <= 0xE115FCB3272B65A3)
        v5 = 0xE115FCB3272B65A3 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xE115FCB3272B65A3;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xE115FCB3272B65A3)
            {
              if (v7[2] == 0xE115FCB3272B65A3)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xE115FCB3272B65A3)
          {
            if (v7[2] == 0xE115FCB3272B65A3)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::ZIndex]";
  *(_QWORD *)(v11 + 24) = 14;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42743B8;
  *(_QWORD *)(v11 + 8) = 0xE115FCB3272B65A3;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xE115FCB3272B65A3, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xE115FCB3272B65A3;
  v15[1] = "md::ls::ZIndex]";
  v15[2] = 14;
  gdc::Registry::_registerStorageDataSignals(a1, 0xE115FCB3272B65A3, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F7010C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::DefaultZIndex>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x58D7FF1BC7A42F8;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x58D7FF1BC7A42F8;
      if (*(_QWORD *)&v3 <= 0x58D7FF1BC7A42F8uLL)
        v5 = 0x58D7FF1BC7A42F8uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x58D7FF1BC7A42F8;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x58D7FF1BC7A42F8)
            {
              if (v7[2] == 0x58D7FF1BC7A42F8)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x58D7FF1BC7A42F8)
          {
            if (v7[2] == 0x58D7FF1BC7A42F8)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::DefaultZIndex]";
  *(_QWORD *)(v11 + 24) = 21;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271478;
  *(_QWORD *)(v11 + 8) = 0x58D7FF1BC7A42F8;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x58D7FF1BC7A42F8uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x58D7FF1BC7A42F8;
  v15[1] = "md::ls::DefaultZIndex]";
  v15[2] = 21;
  gdc::Registry::_registerStorageDataSignals(a1, 0x58D7FF1BC7A42F8, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F7012EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::DefaultZIndex>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::DefaultZIndex>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::DefaultZIndex>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::DefaultZIndex>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::ZIndex>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ZIndex>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ZIndex>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ZIndex>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::HasMaterialRaster>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::HasMaterialRaster>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::HasMaterialRaster>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::HasMaterialRaster>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPrePassRenderItems>(md::ita::CreateDepthPrePassRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateDepthPrePassRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPrePassRenderItems>(md::ita::CreateDepthPrePassRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPrePassRenderItems>(md::ita::CreateDepthPrePassRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateDepthPrePassRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPrePassRenderItems>(md::ita::CreateDepthPrePassRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286C98;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPrePassRenderItems>(md::ita::CreateDepthPrePassRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateDepthPrePassRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPrePassRenderItems>(md::ita::CreateDepthPrePassRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286C98;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPrePassRenderItems>(md::ita::CreateDepthPrePassRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateDepthPrePassRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPrePassRenderItems>(md::ita::CreateDepthPrePassRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  unint64_t v68;
  char *v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  __int128 v78;
  unint64_t v79;
  char *v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  __int128 v89;
  unint64_t v90;
  char *v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  __int128 v100;
  unint64_t v101;
  char *v102;
  char *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  __int128 v111;
  unint64_t v112;
  char *v113;
  char *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  __int128 v122;
  unint64_t v123;
  char *v124;
  char *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  __int128 v133;
  unint64_t v134;
  char *v135;
  char *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  __int128 v144;
  unint64_t v145;
  char *v146;
  char *v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  __int128 v155;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x198uLL);
  a1[2] = (char *)(v2 + 51);
  *v2 = 0x523816724122CCE2;
  v2[1] = "md::ls::AssociationHandle]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB4390;
  v2[4] = "md::ls::HasMeshHandle]";
  v2[5] = 21;
  v2[6] = 0x6C7EE74910D42096;
  v2[7] = "md::ls::PositionScaleInfoConstantDataHandle]";
  v2[8] = 43;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 51)
  {
    *(_QWORD *)v3 = 0xCFE242268B958ADALL;
    v2[10] = "md::ls::ViewConstantDataHandle]";
    v2[11] = 30;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_254;
  if (0x5555555555555556 * (((char *)(v2 + 51) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 51) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 51) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_255;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0xCFE242268B958ADALL;
  *((_QWORD *)v10 + 1) = "md::ls::ViewConstantDataHandle]";
  *((_QWORD *)v10 + 2) = 30;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0x74DC502726E97929;
    *((_QWORD *)v4 + 1) = "md::ls::TransformConstantDataHandle]";
    *((_QWORD *)v4 + 2) = 35;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_254;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_255;
    v20 = (char *)operator new(24 * v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0x74DC502726E97929;
  *((_QWORD *)v21 + 1) = "md::ls::TransformConstantDataHandle]";
  *((_QWORD *)v21 + 2) = 35;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
  v24 = (unint64_t)a1[2];
  if ((unint64_t)v14 < v24)
  {
    *(_QWORD *)v14 = 0x71CBA64B1A9CA230;
    *((_QWORD *)v14 + 1) = "md::ls::IndexRange]";
    *((_QWORD *)v14 + 2) = 18;
    v25 = v14 + 24;
    goto LABEL_55;
  }
  v26 = *a1;
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3);
  v28 = v27 + 1;
  if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_254;
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x555555555555555)
    v30 = 0xAAAAAAAAAAAAAAALL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_255;
    v31 = (char *)operator new(24 * v30);
  }
  else
  {
    v31 = 0;
  }
  v32 = &v31[24 * v27];
  v33 = &v31[24 * v30];
  *(_QWORD *)v32 = 0x71CBA64B1A9CA230;
  *((_QWORD *)v32 + 1) = "md::ls::IndexRange]";
  *((_QWORD *)v32 + 2) = 18;
  v25 = v32 + 24;
  if (v14 == v26)
  {
    *a1 = v32;
    a1[1] = v25;
    a1[2] = v33;
LABEL_54:
    operator delete(v14);
    goto LABEL_55;
  }
  do
  {
    v34 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v32 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v32 - 24) = v34;
    v32 -= 24;
    v14 -= 24;
  }
  while (v14 != v26);
  v14 = *a1;
  *a1 = v32;
  a1[1] = v25;
  a1[2] = v33;
  if (v14)
    goto LABEL_54;
LABEL_55:
  a1[1] = v25;
  v35 = (unint64_t)a1[2];
  if ((unint64_t)v25 < v35)
  {
    *(_QWORD *)v25 = 0x3218EFD67197A145;
    *((_QWORD *)v25 + 1) = "md::ls::NormalsHandle]";
    *((_QWORD *)v25 + 2) = 21;
    v36 = v25 + 24;
    goto LABEL_73;
  }
  v37 = *a1;
  v38 = 0xAAAAAAAAAAAAAAABLL * ((v25 - *a1) >> 3);
  v39 = v38 + 1;
  if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_254;
  v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v37) >> 3);
  if (2 * v40 > v39)
    v39 = 2 * v40;
  if (v40 >= 0x555555555555555)
    v41 = 0xAAAAAAAAAAAAAAALL;
  else
    v41 = v39;
  if (v41)
  {
    if (v41 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_255;
    v42 = (char *)operator new(24 * v41);
  }
  else
  {
    v42 = 0;
  }
  v43 = &v42[24 * v38];
  v44 = &v42[24 * v41];
  *(_QWORD *)v43 = 0x3218EFD67197A145;
  *((_QWORD *)v43 + 1) = "md::ls::NormalsHandle]";
  *((_QWORD *)v43 + 2) = 21;
  v36 = v43 + 24;
  if (v25 == v37)
  {
    *a1 = v43;
    a1[1] = v36;
    a1[2] = v44;
LABEL_72:
    operator delete(v25);
    goto LABEL_73;
  }
  do
  {
    v45 = *(_OWORD *)(v25 - 24);
    *((_QWORD *)v43 - 1) = *((_QWORD *)v25 - 1);
    *(_OWORD *)(v43 - 24) = v45;
    v43 -= 24;
    v25 -= 24;
  }
  while (v25 != v37);
  v25 = *a1;
  *a1 = v43;
  a1[1] = v36;
  a1[2] = v44;
  if (v25)
    goto LABEL_72;
LABEL_73:
  a1[1] = v36;
  v46 = (unint64_t)a1[2];
  if ((unint64_t)v36 < v46)
  {
    *(_QWORD *)v36 = 0xAF179EFD8A4C83D4;
    *((_QWORD *)v36 + 1) = "md::ls::InstanceTransformHandle]";
    *((_QWORD *)v36 + 2) = 31;
    v47 = v36 + 24;
    goto LABEL_91;
  }
  v48 = *a1;
  v49 = 0xAAAAAAAAAAAAAAABLL * ((v36 - *a1) >> 3);
  v50 = v49 + 1;
  if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_254;
  v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - (_QWORD)v48) >> 3);
  if (2 * v51 > v50)
    v50 = 2 * v51;
  if (v51 >= 0x555555555555555)
    v52 = 0xAAAAAAAAAAAAAAALL;
  else
    v52 = v50;
  if (v52)
  {
    if (v52 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_255;
    v53 = (char *)operator new(24 * v52);
  }
  else
  {
    v53 = 0;
  }
  v54 = &v53[24 * v49];
  v55 = &v53[24 * v52];
  *(_QWORD *)v54 = 0xAF179EFD8A4C83D4;
  *((_QWORD *)v54 + 1) = "md::ls::InstanceTransformHandle]";
  *((_QWORD *)v54 + 2) = 31;
  v47 = v54 + 24;
  if (v36 == v48)
  {
    *a1 = v54;
    a1[1] = v47;
    a1[2] = v55;
LABEL_90:
    operator delete(v36);
    goto LABEL_91;
  }
  do
  {
    v56 = *(_OWORD *)(v36 - 24);
    *((_QWORD *)v54 - 1) = *((_QWORD *)v36 - 1);
    *(_OWORD *)(v54 - 24) = v56;
    v54 -= 24;
    v36 -= 24;
  }
  while (v36 != v48);
  v36 = *a1;
  *a1 = v54;
  a1[1] = v47;
  a1[2] = v55;
  if (v36)
    goto LABEL_90;
LABEL_91:
  a1[1] = v47;
  v57 = (unint64_t)a1[2];
  if ((unint64_t)v47 < v57)
  {
    *(_QWORD *)v47 = 0xCBB77B1CBD05D7C5;
    *((_QWORD *)v47 + 1) = "md::ls::UVsHandle]";
    *((_QWORD *)v47 + 2) = 17;
    v58 = v47 + 24;
    goto LABEL_109;
  }
  v59 = *a1;
  v60 = 0xAAAAAAAAAAAAAAABLL * ((v47 - *a1) >> 3);
  v61 = v60 + 1;
  if (v60 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_254;
  v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - (_QWORD)v59) >> 3);
  if (2 * v62 > v61)
    v61 = 2 * v62;
  if (v62 >= 0x555555555555555)
    v63 = 0xAAAAAAAAAAAAAAALL;
  else
    v63 = v61;
  if (v63)
  {
    if (v63 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_255;
    v64 = (char *)operator new(24 * v63);
  }
  else
  {
    v64 = 0;
  }
  v65 = &v64[24 * v60];
  v66 = &v64[24 * v63];
  *(_QWORD *)v65 = 0xCBB77B1CBD05D7C5;
  *((_QWORD *)v65 + 1) = "md::ls::UVsHandle]";
  *((_QWORD *)v65 + 2) = 17;
  v58 = v65 + 24;
  if (v47 == v59)
  {
    *a1 = v65;
    a1[1] = v58;
    a1[2] = v66;
LABEL_108:
    operator delete(v47);
    goto LABEL_109;
  }
  do
  {
    v67 = *(_OWORD *)(v47 - 24);
    *((_QWORD *)v65 - 1) = *((_QWORD *)v47 - 1);
    *(_OWORD *)(v65 - 24) = v67;
    v65 -= 24;
    v47 -= 24;
  }
  while (v47 != v59);
  v47 = *a1;
  *a1 = v65;
  a1[1] = v58;
  a1[2] = v66;
  if (v47)
    goto LABEL_108;
LABEL_109:
  a1[1] = v58;
  v68 = (unint64_t)a1[2];
  if ((unint64_t)v58 < v68)
  {
    *(_QWORD *)v58 = 0x499CE17DBD9A1615;
    *((_QWORD *)v58 + 1) = "md::ls::NeedsZBias]";
    *((_QWORD *)v58 + 2) = 18;
    v69 = v58 + 24;
    goto LABEL_127;
  }
  v70 = *a1;
  v71 = 0xAAAAAAAAAAAAAAABLL * ((v58 - *a1) >> 3);
  v72 = v71 + 1;
  if (v71 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_254;
  v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - (_QWORD)v70) >> 3);
  if (2 * v73 > v72)
    v72 = 2 * v73;
  if (v73 >= 0x555555555555555)
    v74 = 0xAAAAAAAAAAAAAAALL;
  else
    v74 = v72;
  if (v74)
  {
    if (v74 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_255;
    v75 = (char *)operator new(24 * v74);
  }
  else
  {
    v75 = 0;
  }
  v76 = &v75[24 * v71];
  v77 = &v75[24 * v74];
  *(_QWORD *)v76 = 0x499CE17DBD9A1615;
  *((_QWORD *)v76 + 1) = "md::ls::NeedsZBias]";
  *((_QWORD *)v76 + 2) = 18;
  v69 = v76 + 24;
  if (v58 == v70)
  {
    *a1 = v76;
    a1[1] = v69;
    a1[2] = v77;
LABEL_126:
    operator delete(v58);
    goto LABEL_127;
  }
  do
  {
    v78 = *(_OWORD *)(v58 - 24);
    *((_QWORD *)v76 - 1) = *((_QWORD *)v58 - 1);
    *(_OWORD *)(v76 - 24) = v78;
    v76 -= 24;
    v58 -= 24;
  }
  while (v58 != v70);
  v58 = *a1;
  *a1 = v76;
  a1[1] = v69;
  a1[2] = v77;
  if (v58)
    goto LABEL_126;
LABEL_127:
  a1[1] = v69;
  v79 = (unint64_t)a1[2];
  if ((unint64_t)v69 < v79)
  {
    *(_QWORD *)v69 = 0xD443D3DCBB78491ALL;
    *((_QWORD *)v69 + 1) = "md::ls::ElevationHandle]";
    *((_QWORD *)v69 + 2) = 23;
    v80 = v69 + 24;
    goto LABEL_145;
  }
  v81 = *a1;
  v82 = 0xAAAAAAAAAAAAAAABLL * ((v69 - *a1) >> 3);
  v83 = v82 + 1;
  if (v82 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_254;
  v84 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - (_QWORD)v81) >> 3);
  if (2 * v84 > v83)
    v83 = 2 * v84;
  if (v84 >= 0x555555555555555)
    v85 = 0xAAAAAAAAAAAAAAALL;
  else
    v85 = v83;
  if (v85)
  {
    if (v85 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_255;
    v86 = (char *)operator new(24 * v85);
  }
  else
  {
    v86 = 0;
  }
  v87 = &v86[24 * v82];
  v88 = &v86[24 * v85];
  *(_QWORD *)v87 = 0xD443D3DCBB78491ALL;
  *((_QWORD *)v87 + 1) = "md::ls::ElevationHandle]";
  *((_QWORD *)v87 + 2) = 23;
  v80 = v87 + 24;
  if (v69 == v81)
  {
    *a1 = v87;
    a1[1] = v80;
    a1[2] = v88;
LABEL_144:
    operator delete(v69);
    goto LABEL_145;
  }
  do
  {
    v89 = *(_OWORD *)(v69 - 24);
    *((_QWORD *)v87 - 1) = *((_QWORD *)v69 - 1);
    *(_OWORD *)(v87 - 24) = v89;
    v87 -= 24;
    v69 -= 24;
  }
  while (v69 != v81);
  v69 = *a1;
  *a1 = v87;
  a1[1] = v80;
  a1[2] = v88;
  if (v69)
    goto LABEL_144;
LABEL_145:
  a1[1] = v80;
  v90 = (unint64_t)a1[2];
  if ((unint64_t)v80 < v90)
  {
    *(_QWORD *)v80 = 0x70E01531993BB945;
    *((_QWORD *)v80 + 1) = "md::ls::PrepassShadowConstantDataHandle]";
    *((_QWORD *)v80 + 2) = 39;
    v91 = v80 + 24;
    goto LABEL_163;
  }
  v92 = *a1;
  v93 = 0xAAAAAAAAAAAAAAABLL * ((v80 - *a1) >> 3);
  v94 = v93 + 1;
  if (v93 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_254;
  v95 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v90 - (_QWORD)v92) >> 3);
  if (2 * v95 > v94)
    v94 = 2 * v95;
  if (v95 >= 0x555555555555555)
    v96 = 0xAAAAAAAAAAAAAAALL;
  else
    v96 = v94;
  if (v96)
  {
    if (v96 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_255;
    v97 = (char *)operator new(24 * v96);
  }
  else
  {
    v97 = 0;
  }
  v98 = &v97[24 * v93];
  v99 = &v97[24 * v96];
  *(_QWORD *)v98 = 0x70E01531993BB945;
  *((_QWORD *)v98 + 1) = "md::ls::PrepassShadowConstantDataHandle]";
  *((_QWORD *)v98 + 2) = 39;
  v91 = v98 + 24;
  if (v80 == v92)
  {
    *a1 = v98;
    a1[1] = v91;
    a1[2] = v99;
LABEL_162:
    operator delete(v80);
    goto LABEL_163;
  }
  do
  {
    v100 = *(_OWORD *)(v80 - 24);
    *((_QWORD *)v98 - 1) = *((_QWORD *)v80 - 1);
    *(_OWORD *)(v98 - 24) = v100;
    v98 -= 24;
    v80 -= 24;
  }
  while (v80 != v92);
  v80 = *a1;
  *a1 = v98;
  a1[1] = v91;
  a1[2] = v99;
  if (v80)
    goto LABEL_162;
LABEL_163:
  a1[1] = v91;
  v101 = (unint64_t)a1[2];
  if ((unint64_t)v91 < v101)
  {
    *(_QWORD *)v91 = 0x1EBB3E0519E8FF9DLL;
    *((_QWORD *)v91 + 1) = "md::ls::PrepassConstantDataHandle]";
    *((_QWORD *)v91 + 2) = 33;
    v102 = v91 + 24;
    goto LABEL_181;
  }
  v103 = *a1;
  v104 = 0xAAAAAAAAAAAAAAABLL * ((v91 - *a1) >> 3);
  v105 = v104 + 1;
  if (v104 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_254;
  v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (_QWORD)v103) >> 3);
  if (2 * v106 > v105)
    v105 = 2 * v106;
  if (v106 >= 0x555555555555555)
    v107 = 0xAAAAAAAAAAAAAAALL;
  else
    v107 = v105;
  if (v107)
  {
    if (v107 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_255;
    v108 = (char *)operator new(24 * v107);
  }
  else
  {
    v108 = 0;
  }
  v109 = &v108[24 * v104];
  v110 = &v108[24 * v107];
  *(_QWORD *)v109 = 0x1EBB3E0519E8FF9DLL;
  *((_QWORD *)v109 + 1) = "md::ls::PrepassConstantDataHandle]";
  *((_QWORD *)v109 + 2) = 33;
  v102 = v109 + 24;
  if (v91 == v103)
  {
    *a1 = v109;
    a1[1] = v102;
    a1[2] = v110;
LABEL_180:
    operator delete(v91);
    goto LABEL_181;
  }
  do
  {
    v111 = *(_OWORD *)(v91 - 24);
    *((_QWORD *)v109 - 1) = *((_QWORD *)v91 - 1);
    *(_OWORD *)(v109 - 24) = v111;
    v109 -= 24;
    v91 -= 24;
  }
  while (v91 != v103);
  v91 = *a1;
  *a1 = v109;
  a1[1] = v102;
  a1[2] = v110;
  if (v91)
    goto LABEL_180;
LABEL_181:
  a1[1] = v102;
  v112 = (unint64_t)a1[2];
  if ((unint64_t)v102 < v112)
  {
    *(_QWORD *)v102 = 0x98A9F01DBB8BCCCELL;
    *((_QWORD *)v102 + 1) = "md::ls::PreserveHeight]";
    *((_QWORD *)v102 + 2) = 22;
    v113 = v102 + 24;
    goto LABEL_199;
  }
  v114 = *a1;
  v115 = 0xAAAAAAAAAAAAAAABLL * ((v102 - *a1) >> 3);
  v116 = v115 + 1;
  if (v115 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_254;
  v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v112 - (_QWORD)v114) >> 3);
  if (2 * v117 > v116)
    v116 = 2 * v117;
  if (v117 >= 0x555555555555555)
    v118 = 0xAAAAAAAAAAAAAAALL;
  else
    v118 = v116;
  if (v118)
  {
    if (v118 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_255;
    v119 = (char *)operator new(24 * v118);
  }
  else
  {
    v119 = 0;
  }
  v120 = &v119[24 * v115];
  v121 = &v119[24 * v118];
  *(_QWORD *)v120 = 0x98A9F01DBB8BCCCELL;
  *((_QWORD *)v120 + 1) = "md::ls::PreserveHeight]";
  *((_QWORD *)v120 + 2) = 22;
  v113 = v120 + 24;
  if (v102 == v114)
  {
    *a1 = v120;
    a1[1] = v113;
    a1[2] = v121;
LABEL_198:
    operator delete(v102);
    goto LABEL_199;
  }
  do
  {
    v122 = *(_OWORD *)(v102 - 24);
    *((_QWORD *)v120 - 1) = *((_QWORD *)v102 - 1);
    *(_OWORD *)(v120 - 24) = v122;
    v120 -= 24;
    v102 -= 24;
  }
  while (v102 != v114);
  v102 = *a1;
  *a1 = v120;
  a1[1] = v113;
  a1[2] = v121;
  if (v102)
    goto LABEL_198;
LABEL_199:
  a1[1] = v113;
  v123 = (unint64_t)a1[2];
  if ((unint64_t)v113 < v123)
  {
    *(_QWORD *)v113 = 0x9292F9031FE6DB5;
    *((_QWORD *)v113 + 1) = "md::ls::ClippingConstantDataHandle]";
    *((_QWORD *)v113 + 2) = 34;
    v124 = v113 + 24;
    goto LABEL_217;
  }
  v125 = *a1;
  v126 = 0xAAAAAAAAAAAAAAABLL * ((v113 - *a1) >> 3);
  v127 = v126 + 1;
  if (v126 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_254;
  v128 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v123 - (_QWORD)v125) >> 3);
  if (2 * v128 > v127)
    v127 = 2 * v128;
  if (v128 >= 0x555555555555555)
    v129 = 0xAAAAAAAAAAAAAAALL;
  else
    v129 = v127;
  if (v129)
  {
    if (v129 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_255;
    v130 = (char *)operator new(24 * v129);
  }
  else
  {
    v130 = 0;
  }
  v131 = &v130[24 * v126];
  v132 = &v130[24 * v129];
  *(_QWORD *)v131 = 0x9292F9031FE6DB5;
  *((_QWORD *)v131 + 1) = "md::ls::ClippingConstantDataHandle]";
  *((_QWORD *)v131 + 2) = 34;
  v124 = v131 + 24;
  if (v113 == v125)
  {
    *a1 = v131;
    a1[1] = v124;
    a1[2] = v132;
LABEL_216:
    operator delete(v113);
    goto LABEL_217;
  }
  do
  {
    v133 = *(_OWORD *)(v113 - 24);
    *((_QWORD *)v131 - 1) = *((_QWORD *)v113 - 1);
    *(_OWORD *)(v131 - 24) = v133;
    v131 -= 24;
    v113 -= 24;
  }
  while (v113 != v125);
  v113 = *a1;
  *a1 = v131;
  a1[1] = v124;
  a1[2] = v132;
  if (v113)
    goto LABEL_216;
LABEL_217:
  a1[1] = v124;
  v134 = (unint64_t)a1[2];
  if ((unint64_t)v124 < v134)
  {
    *(_QWORD *)v124 = 0x237F9D3BCC905318;
    *((_QWORD *)v124 + 1) = "md::ls::IsMercator]";
    *((_QWORD *)v124 + 2) = 18;
    v135 = v124 + 24;
    goto LABEL_235;
  }
  v136 = *a1;
  v137 = 0xAAAAAAAAAAAAAAABLL * ((v124 - *a1) >> 3);
  v138 = v137 + 1;
  if (v137 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_254;
  v139 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v134 - (_QWORD)v136) >> 3);
  if (2 * v139 > v138)
    v138 = 2 * v139;
  if (v139 >= 0x555555555555555)
    v140 = 0xAAAAAAAAAAAAAAALL;
  else
    v140 = v138;
  if (v140)
  {
    if (v140 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_255;
    v141 = (char *)operator new(24 * v140);
  }
  else
  {
    v141 = 0;
  }
  v142 = &v141[24 * v137];
  v143 = &v141[24 * v140];
  *(_QWORD *)v142 = 0x237F9D3BCC905318;
  *((_QWORD *)v142 + 1) = "md::ls::IsMercator]";
  *((_QWORD *)v142 + 2) = 18;
  v135 = v142 + 24;
  if (v124 == v136)
  {
    *a1 = v142;
    a1[1] = v135;
    a1[2] = v143;
LABEL_234:
    operator delete(v124);
    goto LABEL_235;
  }
  do
  {
    v144 = *(_OWORD *)(v124 - 24);
    *((_QWORD *)v142 - 1) = *((_QWORD *)v124 - 1);
    *(_OWORD *)(v142 - 24) = v144;
    v142 -= 24;
    v124 -= 24;
  }
  while (v124 != v136);
  v124 = *a1;
  *a1 = v142;
  a1[1] = v135;
  a1[2] = v143;
  if (v124)
    goto LABEL_234;
LABEL_235:
  a1[1] = v135;
  v145 = (unint64_t)a1[2];
  if ((unint64_t)v135 < v145)
  {
    *(_QWORD *)v135 = 0xE53EF176130D7769;
    *((_QWORD *)v135 + 1) = "md::ls::InstanceCount]";
    *((_QWORD *)v135 + 2) = 21;
    v146 = v135 + 24;
    goto LABEL_253;
  }
  v147 = *a1;
  v148 = 0xAAAAAAAAAAAAAAABLL * ((v135 - *a1) >> 3);
  v149 = v148 + 1;
  if (v148 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_254:
    abort();
  v150 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v145 - (_QWORD)v147) >> 3);
  if (2 * v150 > v149)
    v149 = 2 * v150;
  if (v150 >= 0x555555555555555)
    v151 = 0xAAAAAAAAAAAAAAALL;
  else
    v151 = v149;
  if (v151)
  {
    if (v151 <= 0xAAAAAAAAAAAAAAALL)
    {
      v152 = (char *)operator new(24 * v151);
      goto LABEL_247;
    }
LABEL_255:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v152 = 0;
LABEL_247:
  v153 = &v152[24 * v148];
  v154 = &v152[24 * v151];
  *(_QWORD *)v153 = 0xE53EF176130D7769;
  *((_QWORD *)v153 + 1) = "md::ls::InstanceCount]";
  *((_QWORD *)v153 + 2) = 21;
  v146 = v153 + 24;
  if (v135 == v147)
  {
    *a1 = v153;
    a1[1] = v146;
    a1[2] = v154;
LABEL_252:
    operator delete(v135);
    goto LABEL_253;
  }
  do
  {
    v155 = *(_OWORD *)(v135 - 24);
    *((_QWORD *)v153 - 1) = *((_QWORD *)v135 - 1);
    *(_OWORD *)(v153 - 24) = v155;
    v153 -= 24;
    v135 -= 24;
  }
  while (v135 != v147);
  v135 = *a1;
  *a1 = v153;
  a1[1] = v146;
  a1[2] = v154;
  if (v135)
    goto LABEL_252;
LABEL_253:
  a1[1] = v146;
}

void sub_19F702868(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPrePassRenderItems>(md::ita::CreateDepthPrePassRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateDepthPrePassRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPrePassRenderItems>(md::ita::CreateDepthPrePassRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPrePassRenderItems>(md::ita::CreateDepthPrePassRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateDepthPrePassRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPrePassRenderItems>(md::ita::CreateDepthPrePassRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286CE0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPrePassRenderItems>(md::ita::CreateDepthPrePassRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateDepthPrePassRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPrePassRenderItems>(md::ita::CreateDepthPrePassRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286CE0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPrePassRenderItems>(md::ita::CreateDepthPrePassRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateDepthPrePassRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPrePassRenderItems>(md::ita::CreateDepthPrePassRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x60uLL);
  a1[2] = (char *)(v2 + 12);
  *v2 = 0x2DFCB5932E0A2DE3;
  v2[1] = "md::ls::SliceAssignmentT<md::SliceType::CulledDepthPrePass>]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB43B0;
  v2[4] = "md::ls::RenderableMeshVertexFormat]";
  v2[5] = 34;
  v2[6] = 0x751B872B282C3971;
  v2[7] = "md::ls::TileType]";
  v2[8] = 16;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 12)
  {
    *(_QWORD *)v3 = 0xB7D4B4C2109DE954;
    v2[10] = "md::ls::PendingProcessingDepthPrePass]";
    v2[11] = 37;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 12) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0xB7D4B4C2109DE954;
  *((_QWORD *)v10 + 1) = "md::ls::PendingProcessingDepthPrePass]";
  *((_QWORD *)v10 + 2) = 37;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
}

void sub_19F702ABC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateDepthPrePassRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateDepthPrePassRenderItems>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateDepthPrePassRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateDepthPrePassRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277EF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateDepthPrePassRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateDepthPrePassRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277EF0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateDepthPrePassRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateDepthPrePassRenderItems>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _BOOL4 isValid;
  uint64_t result;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  std::__shared_weak_count *v190;
  _QWORD *v191;
  unint64_t *p_shared_owners;
  unint64_t v193;
  unint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t (***v198)();
  uint64_t v199;
  unint64_t v200;
  unint64_t RenderItem;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  uint64_t (***v206)();
  uint64_t v207;
  _QWORD *v208;
  uint64_t (***v209)();
  uint64_t v210;
  _QWORD *v211;
  uint64_t (***v212)();
  uint64_t v213;
  _QWORD *v214;
  uint64_t (***v215)();
  uint64_t v216;
  _QWORD *v217;
  _QWORD *v218;
  uint64_t (***v219)();
  uint64_t v220;
  _QWORD *v221;
  _BYTE *v222;
  uint64_t (***v223)();
  uint64_t v224;
  _QWORD *v225;
  uint64_t (***v226)();
  uint64_t v227;
  _QWORD *v228;
  uint64_t (***v229)();
  uint64_t v230;
  _QWORD *v231;
  uint64_t (***v232)();
  uint64_t v233;
  _QWORD *v234;
  uint64_t (***v235)();
  uint64_t v236;
  uint64_t (***v237)();
  uint64_t v238;
  _QWORD *v239;
  uint64_t (***v240)();
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  uint64_t (**v244)();
  uint64_t (***v245)();
  uint64_t v246;
  _QWORD *v247;
  char *v248;
  uint64_t (***v249)();
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  _QWORD *v254;
  _QWORD *v255;
  uint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  unint64_t v260;
  _QWORD *AssociationItemStorage;
  _QWORD *v262;
  unint64_t v263;
  unint64_t *v264;
  _QWORD *v265;
  char *v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  char *v271;
  unint64_t *v272;
  unint64_t v273;
  uint64_t v274;
  char *v275;
  unint64_t *v276;
  uint64_t v277;
  __int128 v278;
  unint64_t v279;
  _QWORD *v280;
  uint64_t (***v281)();
  uint64_t v282;
  _QWORD *v283;
  uint64_t (***v284)();
  uint64_t v285;
  _QWORD *v286;
  uint64_t (***v287)();
  uint64_t v288;
  _QWORD *v289;
  uint64_t (***v290)();
  uint64_t v291;
  _QWORD *v292;
  char *v293;
  uint64_t (***v294)();
  uint64_t v295;
  _QWORD *v296;
  uint64_t (***v297)();
  uint64_t v298;
  _QWORD *v299;
  char *v300;
  uint64_t (***v301)();
  uint64_t v302;
  _QWORD *v303;
  uint64_t v304;
  uint64_t (***v305)();
  uint64_t v306;
  _QWORD *v307;
  uint64_t v308;
  uint64_t (***v309)();
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  uint64_t (***v313)();
  uint64_t v314;
  _QWORD *v315;
  uint64_t v316;
  uint64_t (***v317)();
  uint64_t v318;
  _QWORD *v319;
  uint64_t v320;
  uint64_t (***v321)();
  uint64_t v322;
  _QWORD *v323;
  char *v324;
  uint64_t (***v325)();
  uint64_t v326;
  _QWORD *v327;
  uint64_t v328;
  uint64_t (***v329)();
  uint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  uint64_t (***v333)();
  uint64_t v334;
  _QWORD *v335;
  uint64_t v336;
  uint64_t (***v337)();
  uint64_t v338;
  _QWORD *v339;
  uint64_t v340;
  uint64_t (***v341)();
  uint64_t v342;
  _QWORD *v343;
  uint64_t v344;
  uint64_t v345;
  _QWORD *v346;
  uint64_t v347;
  _QWORD *v348;
  uint64_t v349;
  uint64_t v350;
  _QWORD *v351;
  _QWORD *v352;
  _QWORD *v353;
  _QWORD *v354;
  uint64_t v355;
  _QWORD *v356;
  _QWORD *v357;
  _QWORD *v358;
  _QWORD *v359;
  _QWORD *v360;
  _QWORD *v361;
  _QWORD *v362;
  _QWORD *v363;
  _QWORD *v364;
  _QWORD *v365;
  _QWORD *v366;
  _QWORD *v367;
  _QWORD *HasMesh;
  _QWORD *v369;
  _QWORD *v370;
  _QWORD *v371;
  unsigned __int8 *v372;
  uint64_t *v373;
  uint64_t *v374;
  uint64_t *v375;
  uint64_t *v376;
  unint64_t v377;
  unint64_t v378;
  uint64_t *v379;
  uint64_t *v380;
  uint64_t *v381;
  uint64_t *v382;
  uint64_t *v383;
  uint64_t *v384;
  uint64_t *v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  _BYTE *v390;
  unint64_t v391;
  unint64_t *v392;
  _QWORD v393[8];
  _QWORD *v394;
  __int128 v395;
  char v396;
  uint64_t (**v397)();
  __int128 v398;
  uint64_t (***v399)();
  _BYTE v400[24];
  _BYTE *v401;
  int v402;
  uint64_t v403;

  v2 = a1;
  v403 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)5>>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::RenderableMeshVertexFormat>(v3);
  v6 = gdc::Registry::storage<md::ls::TileType>(v3);
  v7 = gdc::Registry::storage<md::ls::PendingProcessingDepthPrePass>(v3);
  v8 = (_QWORD *)gdc::Registry::storage<md::ls::PrepassShadowConstantDataHandle>(v3);
  v9 = (_QWORD *)gdc::Registry::storage<md::ls::PrepassConstantDataHandle>(v3);
  v369 = (_QWORD *)gdc::Registry::storage<md::ls::AssociationHandle>(v3);
  HasMesh = (_QWORD *)gdc::Registry::storage<md::ls::HasMeshHandle>(v3);
  v367 = (_QWORD *)gdc::Registry::storage<md::ls::PositionScaleInfoConstantDataHandle>(v3);
  v366 = (_QWORD *)gdc::Registry::storage<md::ls::ViewConstantDataHandle>(v3);
  v365 = (_QWORD *)gdc::Registry::storage<md::ls::TransformConstantDataHandle>(v3);
  v364 = (_QWORD *)gdc::Registry::storage<md::ls::IndexRange>(v3);
  v363 = (_QWORD *)gdc::Registry::storage<md::ls::NormalsHandle>(v3);
  v362 = (_QWORD *)gdc::Registry::storage<md::ls::InstanceTransformHandle>(v3);
  v361 = (_QWORD *)gdc::Registry::storage<md::ls::UVsHandle>(v3);
  v360 = (_QWORD *)gdc::Registry::storage<md::ls::NeedsZBias>(v3);
  v359 = (_QWORD *)gdc::Registry::storage<md::ls::ElevationHandle>(v3);
  v10 = (_QWORD *)gdc::Registry::storage<md::ls::PreserveHeight>(v3);
  v358 = (_QWORD *)gdc::Registry::storage<md::ls::ClippingConstantDataHandle>(v3);
  v357 = (_QWORD *)gdc::Registry::storage<md::ls::IsMercator>(v3);
  v356 = (_QWORD *)gdc::Registry::storage<md::ls::InstanceCount>(v3);
  v11 = (_QWORD *)(v4 + 32);
  if (v5[8] - v5[7] < *(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56))
    v11 = v5 + 4;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < v11[4] - v11[3])
    v11 = (_QWORD *)(v6 + 32);
  if (*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56) < v11[4] - v11[3])
    v11 = (_QWORD *)(v7 + 32);
  if (v8[8] - v8[7] < v11[4] - v11[3])
    v11 = v8 + 4;
  if (v9[8] - v9[7] < v11[4] - v11[3])
    v11 = v9 + 4;
  v393[0] = v11;
  v393[1] = v4;
  v393[2] = v5;
  v393[3] = v6;
  v370 = (_QWORD *)v6;
  v393[4] = v7;
  v393[5] = v8;
  v13 = (_QWORD *)v11[3];
  v12 = (_QWORD *)v11[4];
  v393[6] = v9;
  v394 = v13;
  v371 = v12;
  if (v12 != v13
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(v393))
  {
    v14 = v13 + 1;
    do
    {
      v13 = v14;
      v394 = v14;
      if (v14 == v371)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(v393);
      v14 = v13 + 1;
    }
    while (!isValid);
  }
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v17 = (_QWORD *)result;
  if (v371 != v13)
  {
    v354 = v5;
    v355 = v2;
    v352 = (_QWORD *)result;
    v353 = v10;
    do
    {
      *v17 = *v13;
      v18 = *v13;
      v19 = HIDWORD(*v13);
      v20 = *v13 >> 39;
      v21 = v5[4];
      if (v20 < (v5[5] - v21) >> 3
        && (v22 = *(_QWORD *)(v21 + 8 * v20)) != 0
        && (v23 = *(unsigned __int16 *)(v22 + 2 * (HIDWORD(v18) & 0x7F)),
            v25 = v5[7],
            v24 = v5[8],
            v23 < (v24 - v25) >> 3)
        && ((v26 = v25 + 8 * v23, v26 != v24) ? (v27 = *(_DWORD *)(v26 + 4) == (_DWORD)v19) : (v27 = 0), v27))
      {
        v28 = (_BYTE *)(v5[10] + v23);
      }
      else
      {
        v28 = (_BYTE *)v5[11];
      }
      v390 = v28;
      v29 = v370[4];
      if (v20 < (v370[5] - v29) >> 3
        && (v30 = *(_QWORD *)(v29 + 8 * v20)) != 0
        && (v31 = *(unsigned __int16 *)(v30 + 2 * (HIDWORD(v18) & 0x7F)),
            v33 = v370[7],
            v32 = v370[8],
            v31 < (v32 - v33) >> 3)
        && ((v34 = v33 + 8 * v31, v34 != v32) ? (v35 = *(_DWORD *)(v34 + 4) == (_DWORD)v19) : (v35 = 0), v35))
      {
        v36 = (unsigned __int8 *)(v370[10] + v31);
      }
      else
      {
        v36 = (unsigned __int8 *)v370[11];
      }
      v372 = v36;
      v37 = v369[4];
      if (v20 < (v369[5] - v37) >> 3
        && (v38 = *(_QWORD *)(v37 + 8 * v20)) != 0
        && (v39 = *(unsigned __int16 *)(v38 + 2 * (HIDWORD(v18) & 0x7F)),
            v41 = v369[7],
            v40 = v369[8],
            v39 < (v40 - v41) >> 3)
        && ((v42 = v41 + 8 * v39, v42 != v40) ? (v43 = *(_DWORD *)(v42 + 4) == (_DWORD)v19) : (v43 = 0), v43))
      {
        v44 = v369[11];
        v45 = v369[10] + 16 * v39;
      }
      else
      {
        v44 = v369[11];
        v45 = v44;
      }
      if (v45 == v44)
        v45 = 0;
      v392 = (unint64_t *)v45;
      v46 = HasMesh[4];
      if (v20 < (HasMesh[5] - v46) >> 3
        && (v47 = *(_QWORD *)(v46 + 8 * v20)) != 0
        && (v48 = *(unsigned __int16 *)(v47 + 2 * (HIDWORD(v18) & 0x7F)),
            v50 = HasMesh[7],
            v49 = HasMesh[8],
            v48 < (v49 - v50) >> 3)
        && ((v51 = v50 + 8 * v48, v51 != v49) ? (v52 = *(_DWORD *)(v51 + 4) == (_DWORD)v19) : (v52 = 0), v52))
      {
        v53 = HasMesh[11];
        v54 = HasMesh[10] + 8 * v48;
      }
      else
      {
        v53 = HasMesh[11];
        v54 = v53;
      }
      if (v54 == v53)
        v55 = 0;
      else
        v55 = (uint64_t *)v54;
      v56 = v367[4];
      v385 = v55;
      if (v20 < (v367[5] - v56) >> 3
        && (v57 = *(_QWORD *)(v56 + 8 * v20)) != 0
        && (v58 = *(unsigned __int16 *)(v57 + 2 * (HIDWORD(v18) & 0x7F)),
            v60 = v367[7],
            v59 = v367[8],
            v58 < (v59 - v60) >> 3)
        && ((v61 = v60 + 8 * v58, v61 != v59) ? (v62 = *(_DWORD *)(v61 + 4) == (_DWORD)v19) : (v62 = 0), v62))
      {
        v63 = v17;
        v64 = v367[11];
        v65 = v367[10] + 16 * v58;
      }
      else
      {
        v63 = v17;
        v64 = v367[11];
        v65 = v64;
      }
      if (v65 == v64)
        v66 = 0;
      else
        v66 = v65;
      v67 = v366[4];
      if (v20 < (v366[5] - v67) >> 3
        && (v68 = *(_QWORD *)(v67 + 8 * v20)) != 0
        && (v69 = *(unsigned __int16 *)(v68 + 2 * (HIDWORD(v18) & 0x7F)),
            v71 = v366[7],
            v70 = v366[8],
            v69 < (v70 - v71) >> 3)
        && ((v72 = v71 + 8 * v69, v72 != v70) ? (v73 = *(_DWORD *)(v72 + 4) == (_DWORD)v19) : (v73 = 0), v73))
      {
        v74 = v366[11];
        v75 = v366[10] + 8 * v69;
      }
      else
      {
        v74 = v366[11];
        v75 = v74;
      }
      if (v75 == v74)
        v76 = 0;
      else
        v76 = (uint64_t *)v75;
      v77 = v365[4];
      v383 = v76;
      if (v20 < (v365[5] - v77) >> 3
        && (v78 = *(_QWORD *)(v77 + 8 * v20)) != 0
        && (v79 = *(unsigned __int16 *)(v78 + 2 * (HIDWORD(v18) & 0x7F)),
            v81 = v365[7],
            v80 = v365[8],
            v79 < (v80 - v81) >> 3)
        && ((v82 = v81 + 8 * v79, v82 != v80) ? (v83 = *(_DWORD *)(v82 + 4) == (_DWORD)v19) : (v83 = 0), v83))
      {
        v84 = v365[11];
        v85 = v365[10] + 8 * v79;
      }
      else
      {
        v84 = v365[11];
        v85 = v84;
      }
      if (v85 == v84)
        v86 = 0;
      else
        v86 = (uint64_t *)v85;
      v87 = v364[4];
      v384 = v86;
      v388 = v66;
      if (v20 < (v364[5] - v87) >> 3
        && (v88 = *(_QWORD *)(v87 + 8 * v20)) != 0
        && (v89 = *(unsigned __int16 *)(v88 + 2 * (HIDWORD(v18) & 0x7F)),
            v91 = v364[7],
            v90 = v364[8],
            v89 < (v90 - v91) >> 3)
        && (v92 = v91 + 8 * v89, v92 != v90)
        && *(_DWORD *)(v92 + 4) == (_DWORD)v19)
      {
        v93 = v364[11];
        v94 = v364[10] + 16 * v89;
      }
      else
      {
        v93 = v364[11];
        v94 = v93;
      }
      if (v94 == v93)
        v95 = 0;
      else
        v95 = (__int128 *)v94;
      v96 = v363[4];
      if (v20 < (v363[5] - v96) >> 3
        && (v97 = *(_QWORD *)(v96 + 8 * v20)) != 0
        && (v98 = *(unsigned __int16 *)(v97 + 2 * (HIDWORD(v18) & 0x7F)),
            v100 = v363[7],
            v99 = v363[8],
            v98 < (v99 - v100) >> 3)
        && (v101 = v100 + 8 * v98, v101 != v99)
        && *(_DWORD *)(v101 + 4) == (_DWORD)v19)
      {
        v102 = v363[11];
        v103 = v363[10] + 8 * v98;
      }
      else
      {
        v102 = v363[11];
        v103 = v102;
      }
      if (v103 == v102)
        v104 = 0;
      else
        v104 = (uint64_t *)v103;
      v105 = v362[4];
      v382 = v104;
      if (v20 < (v362[5] - v105) >> 3
        && (v106 = *(_QWORD *)(v105 + 8 * v20)) != 0
        && (v107 = *(unsigned __int16 *)(v106 + 2 * (HIDWORD(v18) & 0x7F)),
            v109 = v362[7],
            v108 = v362[8],
            v107 < (v108 - v109) >> 3)
        && (v110 = v109 + 8 * v107, v110 != v108)
        && *(_DWORD *)(v110 + 4) == (_DWORD)v19)
      {
        v111 = v362[11];
        v112 = v362[10] + 8 * v107;
      }
      else
      {
        v111 = v362[11];
        v112 = v111;
      }
      if (v112 == v111)
        v113 = 0;
      else
        v113 = (uint64_t *)v112;
      v114 = v361[4];
      v375 = v113;
      if (v20 < (v361[5] - v114) >> 3
        && (v115 = *(_QWORD *)(v114 + 8 * v20)) != 0
        && (v116 = *(unsigned __int16 *)(v115 + 2 * (HIDWORD(v18) & 0x7F)),
            v118 = v361[7],
            v117 = v361[8],
            v116 < (v117 - v118) >> 3)
        && (v119 = v118 + 8 * v116, v119 != v117)
        && *(_DWORD *)(v119 + 4) == (_DWORD)v19)
      {
        v120 = v361[11];
        v121 = v361[10] + 8 * v116;
      }
      else
      {
        v120 = v361[11];
        v121 = v120;
      }
      if (v121 == v120)
        v122 = 0;
      else
        v122 = (uint64_t *)v121;
      v123 = v360[4];
      if (v20 < (v360[5] - v123) >> 3
        && (v124 = *(_QWORD *)(v123 + 8 * v20)) != 0
        && (v125 = *(unsigned __int16 *)(v124 + 2 * (HIDWORD(v18) & 0x7F)),
            v127 = v360[7],
            v126 = v360[8],
            v125 < (v126 - v127) >> 3)
        && (v128 = v127 + 8 * v125, v128 != v126)
        && *(_DWORD *)(v128 + 4) == (_DWORD)v19)
      {
        v386 = v360[11];
        v129 = v360[10] + v125;
      }
      else
      {
        v129 = v360[11];
        v386 = v129;
      }
      v387 = v129;
      v130 = v359[4];
      if (v20 < (v359[5] - v130) >> 3
        && (v131 = *(_QWORD *)(v130 + 8 * v20)) != 0
        && (v132 = *(unsigned __int16 *)(v131 + 2 * (HIDWORD(v18) & 0x7F)),
            v134 = v359[7],
            v133 = v359[8],
            v132 < (v133 - v134) >> 3)
        && (v135 = v134 + 8 * v132, v135 != v133)
        && *(_DWORD *)(v135 + 4) == (_DWORD)v19)
      {
        v136 = v359[11];
        v137 = v359[10] + 8 * v132;
      }
      else
      {
        v136 = v359[11];
        v137 = v136;
      }
      if (v137 == v136)
        v138 = 0;
      else
        v138 = (uint64_t *)v137;
      v139 = v8[4];
      if (v20 < (v8[5] - v139) >> 3
        && (v140 = *(_QWORD *)(v139 + 8 * v20)) != 0
        && (v141 = *(unsigned __int16 *)(v140 + 2 * (HIDWORD(v18) & 0x7F)),
            v143 = v8[7],
            v142 = v8[8],
            v141 < (v142 - v143) >> 3)
        && (v144 = v143 + 8 * v141, v144 != v142)
        && *(_DWORD *)(v144 + 4) == (_DWORD)v19)
      {
        v145 = v8[10] + 8 * v141;
      }
      else
      {
        v145 = v8[11];
      }
      v146 = v9[4];
      if (v20 < (v9[5] - v146) >> 3
        && (v147 = *(_QWORD *)(v146 + 8 * v20)) != 0
        && (v148 = *(unsigned __int16 *)(v147 + 2 * (HIDWORD(v18) & 0x7F)),
            v150 = v9[7],
            v149 = v9[8],
            v148 < (v149 - v150) >> 3)
        && (v151 = v150 + 8 * v148, v151 != v149)
        && *(_DWORD *)(v151 + 4) == (_DWORD)v19)
      {
        v152 = v9[10] + 8 * v148;
      }
      else
      {
        v152 = v9[11];
      }
      v153 = v10[4];
      if (v20 < (v10[5] - v153) >> 3
        && (v154 = *(_QWORD *)(v153 + 8 * v20)) != 0
        && (v155 = *(unsigned __int16 *)(v154 + 2 * (HIDWORD(v18) & 0x7F)),
            v157 = v10[7],
            v156 = v10[8],
            v155 < (v156 - v157) >> 3)
        && (v158 = v157 + 8 * v155, v158 != v156)
        && *(_DWORD *)(v158 + 4) == (_DWORD)v19)
      {
        v159 = v10[11];
        v160 = v10[10] + v155;
      }
      else
      {
        v159 = v10[11];
        v160 = v159;
      }
      v161 = v358[4];
      if (v20 < (v358[5] - v161) >> 3
        && (v162 = *(_QWORD *)(v161 + 8 * v20)) != 0
        && (v163 = *(unsigned __int16 *)(v162 + 2 * (HIDWORD(v18) & 0x7F)),
            v165 = v358[7],
            v164 = v358[8],
            v163 < (v164 - v165) >> 3)
        && (v166 = v165 + 8 * v163, v166 != v164)
        && *(_DWORD *)(v166 + 4) == (_DWORD)v19)
      {
        v167 = v358[11];
        v168 = v358[10] + 8 * v163;
      }
      else
      {
        v167 = v358[11];
        v168 = v167;
      }
      if (v168 == v167)
        v169 = 0;
      else
        v169 = (uint64_t *)v168;
      v170 = v357[4];
      if (v20 < (v357[5] - v170) >> 3
        && (v171 = *(_QWORD *)(v170 + 8 * v20)) != 0
        && (v172 = *(unsigned __int16 *)(v171 + 2 * (HIDWORD(v18) & 0x7F)),
            v174 = v357[7],
            v173 = v357[8],
            v172 < (v173 - v174) >> 3)
        && (v175 = v174 + 8 * v172, v175 != v173)
        && *(_DWORD *)(v175 + 4) == (_DWORD)v19)
      {
        v176 = v357[11];
        v177 = v357[10] + v172;
      }
      else
      {
        v176 = v357[11];
        v177 = v176;
      }
      v178 = v356[4];
      if (v20 < (v356[5] - v178) >> 3
        && (v179 = *(_QWORD *)(v178 + 8 * v20)) != 0
        && (v180 = *(unsigned __int16 *)(v179 + 2 * (HIDWORD(v18) & 0x7F)),
            v182 = v356[7],
            v181 = v356[8],
            v180 < (v181 - v182) >> 3)
        && (v183 = v182 + 8 * v180, v183 != v181)
        && *(_DWORD *)(v183 + 4) == (_DWORD)v19)
      {
        v184 = v356[11];
        v185 = v356[10] + 8 * v180;
      }
      else
      {
        v184 = v356[11];
        v185 = v184;
      }
      if (v185 == v184)
        v186 = 0;
      else
        v186 = (uint64_t *)v185;
      v187 = **(_QWORD **)(v2 + 8);
      v188 = *(_QWORD **)v187;
      v189 = *(_QWORD **)(v187 + 8);
      v379 = v169;
      v380 = (uint64_t *)v145;
      v377 = v159;
      v378 = v160;
      v376 = v122;
      v373 = (uint64_t *)v152;
      v374 = v138;
      v381 = v186;
      v389 = v177;
      if (v188 != v189)
      {
        while (*v188 != 0x41D4E9297E100630)
        {
          v188 += 5;
          if (v188 == v189)
            goto LABEL_206;
        }
      }
      if (v188 == v189)
      {
LABEL_206:
        v191 = 0;
      }
      else
      {
        v191 = (_QWORD *)v188[3];
        v190 = (std::__shared_weak_count *)v188[4];
        if (v190)
        {
          p_shared_owners = (unint64_t *)&v190->__shared_owners_;
          do
            v193 = __ldxr(p_shared_owners);
          while (__stxr(v193 + 1, p_shared_owners));
          do
            v194 = __ldaxr(p_shared_owners);
          while (__stlxr(v194 - 1, p_shared_owners));
          if (!v194)
          {
            ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
            std::__shared_weak_count::__release_weak(v190);
          }
        }
      }
      v195 = *(_QWORD **)(v2 + 8);
      v196 = HIDWORD(*v63);
      v197 = *v63 << 32;
      v397 = &off_1E42816D0;
      *(_QWORD *)&v398 = v197;
      DWORD2(v398) = v196;
      v399 = &v397;
      *(_QWORD *)v400 = &off_1E42816D0;
      v401 = v400;
      *(_QWORD *)&v400[8] = v197;
      *(_DWORD *)&v400[16] = v196;
      v402 = 0;
      ecs2::Runtime::queueCommand(v195, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      v198 = v399;
      if (v399 == &v397)
      {
        v198 = &v397;
        v199 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_214;
        v199 = 5;
      }
      (*v198)[v199]();
LABEL_214:
      v200 = gdc::Registry::create(*(gdc::Registry **)(*(_QWORD *)(v2 + 8) + 8));
      RenderItem = md::VKMRenderResourcesStore::createRenderItem((uint64_t)v191, v392);
      v203 = v202;
      v204 = *(_QWORD **)(v2 + 8);
      v205 = operator new(0x28uLL);
      *v205 = &off_1E427DAA0;
      v205[1] = RenderItem;
      v205[2] = v203;
      v205[3] = 7412;
      v205[4] = v200;
      v401 = v205;
      v399 = 0;
      v402 = 0;
      ecs2::Runtime::queueCommand(v204, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      v206 = v399;
      if (v399 == &v397)
      {
        v206 = &v397;
        v207 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_221;
        v207 = 5;
      }
      (*v206)[v207]();
LABEL_221:
      v208 = *(_QWORD **)(v2 + 8);
      v397 = &off_1E427E550;
      *(_QWORD *)&v398 = 0;
      *((_QWORD *)&v398 + 1) = v200;
      v399 = &v397;
      v401 = v400;
      *(_QWORD *)v400 = &off_1E427E550;
      *(_OWORD *)&v400[8] = v398;
      v402 = 0;
      ecs2::Runtime::queueCommand(v208, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      v209 = v399;
      if (v399 == &v397)
      {
        v209 = &v397;
        v210 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_228;
        v210 = 5;
      }
      (*v209)[v210]();
LABEL_228:
      v211 = *(_QWORD **)(v2 + 8);
      v397 = &off_1E427EF28;
      *(_QWORD *)&v398 = 2;
      *((_QWORD *)&v398 + 1) = v200;
      v399 = &v397;
      v401 = v400;
      *(_QWORD *)v400 = &off_1E427EF28;
      *(_OWORD *)&v400[8] = v398;
      v402 = 0;
      ecs2::Runtime::queueCommand(v211, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      v212 = v399;
      if (v399 == &v397)
      {
        v212 = &v397;
        v213 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_235;
        v213 = 5;
      }
      (*v212)[v213]();
LABEL_235:
      v214 = *(_QWORD **)(v2 + 8);
      v397 = &off_1E427E358;
      *(_QWORD *)&v398 = v200 << 32;
      DWORD2(v398) = HIDWORD(v200);
      v399 = &v397;
      *(_QWORD *)v400 = &off_1E427E358;
      v401 = v400;
      *(_QWORD *)&v400[8] = v200 << 32;
      *(_DWORD *)&v400[16] = HIDWORD(v200);
      v402 = 0;
      ecs2::Runtime::queueCommand(v214, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      v215 = v399;
      if (v399 == &v397)
      {
        v215 = &v397;
        v216 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_242;
        v216 = 5;
      }
      (*v215)[v216]();
LABEL_242:
      v391 = v200 << 32;
      v217 = *(_QWORD **)(v2 + 8);
      v218 = operator new(0x28uLL);
      *v218 = &off_1E427E508;
      v218[1] = 0x1B35410F914DF9B5;
      v218[2] = "md::ls::DepthPrePassItem]";
      v218[3] = 24;
      v218[4] = v200;
      v401 = v218;
      v399 = 0;
      v402 = 0;
      ecs2::Runtime::queueCommand(v217, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      v219 = v399;
      if (v399 == &v397)
      {
        v219 = &v397;
        v220 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_249;
        v220 = 5;
      }
      (*v219)[v220]();
LABEL_249:
      v221 = *(_QWORD **)(v2 + 8);
      v222 = operator new(0x28uLL);
      *(_QWORD *)v222 = &off_1E427EFB8;
      v222[8] = 0;
      *((_OWORD *)v222 + 1) = xmmword_19FFB3410;
      *((_QWORD *)v222 + 4) = v200;
      v401 = v222;
      v399 = 0;
      v402 = 0;
      ecs2::Runtime::queueCommand(v221, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      v223 = v399;
      if (v399 == &v397)
      {
        v223 = &v397;
        v224 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_256;
        v224 = 5;
      }
      (*v223)[v224]();
LABEL_256:
      v225 = *(_QWORD **)(v2 + 8);
      v397 = &off_1E427F798;
      *(_QWORD *)&v398 = v200 << 32;
      DWORD2(v398) = HIDWORD(v200);
      v399 = &v397;
      *(_QWORD *)v400 = &off_1E427F798;
      v401 = v400;
      *(_QWORD *)&v400[8] = v200 << 32;
      *(_DWORD *)&v400[16] = HIDWORD(v200);
      v402 = 0;
      ecs2::Runtime::queueCommand(v225, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      v226 = v399;
      if (v399 == &v397)
      {
        v226 = &v397;
        v227 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_263;
        v227 = 5;
      }
      (*v226)[v227]();
LABEL_263:
      v228 = *(_QWORD **)(v2 + 8);
      v397 = &off_1E427EF70;
      *(_QWORD *)&v398 = 5;
      *((_QWORD *)&v398 + 1) = v200;
      v399 = &v397;
      v401 = v400;
      *(_QWORD *)v400 = &off_1E427EF70;
      *(_OWORD *)&v400[8] = v398;
      v402 = 0;
      ecs2::Runtime::queueCommand(v228, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      v229 = v399;
      if (v399 == &v397)
      {
        v229 = &v397;
        v230 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_270;
        v230 = 5;
      }
      (*v229)[v230]();
LABEL_270:
      if (*v390 == 1)
      {
        v231 = *(_QWORD **)(v2 + 8);
        v397 = &off_1E427D548;
        *(_QWORD *)&v398 = v200 << 32;
        DWORD2(v398) = HIDWORD(v200);
        v399 = &v397;
        *(_QWORD *)v400 = &off_1E427D548;
        v401 = v400;
        *(_QWORD *)&v400[8] = v200 << 32;
        *(_DWORD *)&v400[16] = HIDWORD(v200);
        v402 = 0;
        ecs2::Runtime::queueCommand(v231, (uint64_t)v400);
        if (v402 != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
        v402 = -1;
        v232 = v399;
        if (v399 == &v397)
        {
          v232 = &v397;
          v233 = 4;
          goto LABEL_277;
        }
        if (v399)
        {
          v233 = 5;
LABEL_277:
          (*v232)[v233]();
        }
      }
      v234 = *(_QWORD **)(v2 + 8);
      if (v389 == v176 || !v389)
      {
        v397 = &off_1E427F9D8;
        *(_QWORD *)&v398 = v391 | 7;
        DWORD2(v398) = HIDWORD(v200);
        v399 = &v397;
        *(_QWORD *)v400 = &off_1E427F9D8;
        v401 = v400;
        *(_QWORD *)&v400[8] = v391 | 7;
        *(_DWORD *)&v400[16] = HIDWORD(v200);
        v402 = 0;
        ecs2::Runtime::queueCommand(v234, (uint64_t)v400);
        if (v402 != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
        v402 = -1;
        v237 = v399;
        if (v399 == &v397)
        {
          v237 = &v397;
          v238 = 4;
LABEL_291:
          (*v237)[v238]();
        }
        else if (v399)
        {
          v238 = 5;
          goto LABEL_291;
        }
        v239 = *(_QWORD **)(v2 + 8);
        v397 = &off_1E427DC98;
        *(_QWORD *)&v398 = v200 << 32;
        DWORD2(v398) = HIDWORD(v200);
        v399 = &v397;
        *(_QWORD *)v400 = &off_1E427DC98;
        v401 = v400;
        *(_QWORD *)&v400[8] = v200 << 32;
        *(_DWORD *)&v400[16] = HIDWORD(v200);
        v402 = 0;
        ecs2::Runtime::queueCommand(v239, (uint64_t)v400);
        if (v402 != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
        v402 = -1;
        v240 = v399;
        if (v399 == &v397)
        {
          v240 = &v397;
          v241 = 4;
LABEL_298:
          (*v240)[v241]();
        }
        else if (v399)
        {
          v241 = 5;
          goto LABEL_298;
        }
        v242 = *(_QWORD **)(v2 + 8);
        v243 = v391 | *v372;
        v244 = &off_1E4281D48;
        goto LABEL_303;
      }
      v397 = &off_1E427D5D8;
      *(_QWORD *)&v398 = v200 << 32;
      DWORD2(v398) = HIDWORD(v200);
      v399 = &v397;
      *(_QWORD *)v400 = &off_1E427D5D8;
      v401 = v400;
      *(_QWORD *)&v400[8] = v200 << 32;
      *(_DWORD *)&v400[16] = HIDWORD(v200);
      v402 = 0;
      ecs2::Runtime::queueCommand(v234, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      v235 = v399;
      if (v399 == &v397)
      {
        v235 = &v397;
        v236 = 4;
        goto LABEL_301;
      }
      if (v399)
      {
        v236 = 5;
LABEL_301:
        (*v235)[v236]();
      }
      v242 = *(_QWORD **)(v2 + 8);
      v243 = v391 | 6;
      v244 = &off_1E427F9D8;
LABEL_303:
      v397 = v244;
      *(_QWORD *)&v398 = v243;
      DWORD2(v398) = HIDWORD(v200);
      v399 = &v397;
      *(_QWORD *)v400 = v244;
      v401 = v400;
      *(_QWORD *)&v400[8] = v243;
      *(_DWORD *)&v400[16] = HIDWORD(v200);
      v402 = 0;
      ecs2::Runtime::queueCommand(v242, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      v245 = v399;
      if (v399 == &v397)
      {
        v245 = &v397;
        v246 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_310;
        v246 = 5;
      }
      (*v245)[v246]();
LABEL_310:
      v247 = *(_QWORD **)(v2 + 8);
      v248 = (char *)operator new(0x38uLL);
      *((_QWORD *)v248 + 1) = 0;
      *((_QWORD *)v248 + 2) = 0;
      *(_QWORD *)v248 = &off_1E427E9D0;
      v248[24] = 0;
      *(_WORD *)(v248 + 25) = 257;
      *(_DWORD *)(v248 + 27) = 0;
      v248[31] = 2;
      *((_QWORD *)v248 + 4) = 0;
      v248[40] = 0;
      *(_QWORD *)(v248 + 44) = v200;
      v401 = v248;
      v399 = 0;
      v402 = 0;
      ecs2::Runtime::queueCommand(v247, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      v249 = v399;
      if (v399 == &v397)
      {
        v249 = &v397;
        v250 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_317;
        v250 = 5;
      }
      (*v249)[v250]();
LABEL_317:
      v251 = v191[6];
      if (!v251)
      {
        v252 = md::DaVinciRenderStateCache::renderState((unsigned __int8 **)(v191[1312] + 2424), 3, 1, 1, 0, 0, 0, 3);
        v191[2] = v252;
        v397 = (uint64_t (**)())v252;
        v251 = geo::packed_array<md::RenderStateStorage,geo::handle<md::RenderStateItem>>::push_back(v191 + 91, &v397);
        *(int64x2_t *)v400 = vdupq_n_s64(1uLL);
        v400[16] = 1;
        std::__hash_table<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::hash<geo::handle<md::RenderStateItem>>,std::equal_to<geo::handle<md::RenderStateItem>>,true>,std::__unordered_map_equal<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::equal_to<geo::handle<md::RenderStateItem>>,std::hash<geo::handle<md::RenderStateItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::RenderStateItem>,geo::handle<md::RenderStateItem> const&,md::Counter>((uint64_t)(v191 + 86), v251, v251, (uint64_t)v400);
        v191[6] = v251;
      }
      v253 = **(_QWORD **)(v2 + 8);
      v254 = *(_QWORD **)v253;
      v255 = *(_QWORD **)(v253 + 8);
      if (v254 != v255)
      {
        while (*v254 != 0x41D4E9297E100630)
        {
          v254 += 5;
          if (v254 == v255)
            goto LABEL_330;
        }
      }
      if (v254 == v255)
      {
LABEL_330:
        v256 = 0;
      }
      else
      {
        v256 = v254[3];
        v257 = (std::__shared_weak_count *)v254[4];
        if (v257)
        {
          v258 = (unint64_t *)&v257->__shared_owners_;
          do
            v259 = __ldxr(v258);
          while (__stxr(v259 + 1, v258));
          do
            v260 = __ldaxr(v258);
          while (__stlxr(v260 - 1, v258));
          if (!v260)
          {
            ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
            std::__shared_weak_count::__release_weak(v257);
          }
        }
      }
      AssociationItemStorage = (_QWORD *)md::VKMRenderResourcesStore::getAssociationItemStorage(v256, *v392, 1);
      v262 = AssociationItemStorage;
      v264 = (unint64_t *)AssociationItemStorage[2];
      v263 = AssociationItemStorage[3];
      if ((unint64_t)v264 >= v263)
      {
        v266 = (char *)AssociationItemStorage[1];
        v267 = ((char *)v264 - v266) >> 3;
        v268 = v267 + 1;
        if ((unint64_t)(v267 + 1) >> 61)
          abort();
        v269 = v263 - (_QWORD)v266;
        if (v269 >> 2 > v268)
          v268 = v269 >> 2;
        if ((unint64_t)v269 >= 0x7FFFFFFFFFFFFFF8)
          v270 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v270 = v268;
        if (v270)
        {
          if (v270 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v271 = (char *)operator new(8 * v270);
        }
        else
        {
          v271 = 0;
        }
        v272 = (unint64_t *)&v271[8 * v267];
        *v272 = v200;
        v265 = v272 + 1;
        if (v264 != (unint64_t *)v266)
        {
          v273 = (char *)v264 - v266 - 8;
          if (v273 < 0x58)
            goto LABEL_526;
          if ((unint64_t)(v266 - v271) < 0x20)
            goto LABEL_526;
          v274 = (v273 >> 3) + 1;
          v275 = &v271[8 * v267 - 16];
          v276 = v264 - 2;
          v277 = v274 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v278 = *(_OWORD *)v276;
            *((_OWORD *)v275 - 1) = *((_OWORD *)v276 - 1);
            *(_OWORD *)v275 = v278;
            v275 -= 32;
            v276 -= 4;
            v277 -= 4;
          }
          while (v277);
          v272 -= v274 & 0x3FFFFFFFFFFFFFFCLL;
          v264 -= v274 & 0x3FFFFFFFFFFFFFFCLL;
          if (v274 != (v274 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_526:
            do
            {
              v279 = *--v264;
              *--v272 = v279;
            }
            while (v264 != (unint64_t *)v266);
          }
          v264 = (unint64_t *)v262[1];
        }
        v262[1] = v272;
        v262[2] = v265;
        v262[3] = &v271[8 * v270];
        if (v264)
          operator delete(v264);
      }
      else
      {
        *v264 = v200;
        v265 = v264 + 1;
      }
      v262[2] = v265;
      v2 = v355;
      v280 = *(_QWORD **)(v355 + 8);
      v397 = &off_1E4281E68;
      *(_QWORD *)&v398 = v200 << 32;
      DWORD2(v398) = HIDWORD(v200);
      v399 = &v397;
      *(_QWORD *)v400 = &off_1E4281E68;
      v401 = v400;
      *(_QWORD *)&v400[8] = v200 << 32;
      *(_DWORD *)&v400[16] = HIDWORD(v200);
      v402 = 0;
      ecs2::Runtime::queueCommand(v280, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      v281 = v399;
      if (v399 == &v397)
      {
        v281 = &v397;
        v282 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_362;
        v282 = 5;
      }
      (*v281)[v282]();
LABEL_362:
      v283 = *(_QWORD **)(v355 + 8);
      v397 = &off_1E427D938;
      *(_QWORD *)&v398 = v251;
      *((_QWORD *)&v398 + 1) = v200;
      v399 = &v397;
      v401 = v400;
      *(_QWORD *)v400 = &off_1E427D938;
      *(_OWORD *)&v400[8] = v398;
      v402 = 0;
      ecs2::Runtime::queueCommand(v283, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      v284 = v399;
      if (v399 == &v397)
      {
        v284 = &v397;
        v285 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_369;
        v285 = 5;
      }
      (*v284)[v285]();
LABEL_369:
      v286 = *(_QWORD **)(v355 + 8);
      v397 = &off_1E4281760;
      *(_QWORD *)&v398 = v200 << 32;
      DWORD2(v398) = HIDWORD(v200);
      v399 = &v397;
      *(_QWORD *)v400 = &off_1E4281760;
      v401 = v400;
      *(_QWORD *)&v400[8] = v200 << 32;
      *(_DWORD *)&v400[16] = HIDWORD(v200);
      v402 = 0;
      ecs2::Runtime::queueCommand(v286, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      v287 = v399;
      if (v399 == &v397)
      {
        v287 = &v397;
        v288 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_376;
        v288 = 5;
      }
      (*v287)[v288]();
LABEL_376:
      v289 = *(_QWORD **)(v355 + 8);
      v397 = &off_1E427E598;
      *(_QWORD *)&v398 = 1;
      *((_QWORD *)&v398 + 1) = v200;
      v399 = &v397;
      v401 = v400;
      *(_QWORD *)v400 = &off_1E427E598;
      *(_OWORD *)&v400[8] = v398;
      v402 = 0;
      ecs2::Runtime::queueCommand(v289, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      v290 = v399;
      if (v399 == &v397)
      {
        v290 = &v397;
        v291 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_383;
        v291 = 5;
      }
      (*v290)[v291]();
LABEL_383:
      v292 = *(_QWORD **)(v355 + 8);
      v395 = *(_OWORD *)v392;
      v293 = (char *)operator new(0x20uLL);
      *(_QWORD *)v293 = &off_1E427E8F8;
      *(_OWORD *)(v293 + 8) = v395;
      *((_QWORD *)v293 + 3) = v200;
      v401 = v293;
      v399 = 0;
      v402 = 0;
      ecs2::Runtime::queueCommand(v292, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(char *, _BYTE *))off_1E42FB340[v402])(&v396, v400);
      v402 = -1;
      v294 = v399;
      if (v399 == &v397)
      {
        v294 = &v397;
        v295 = 4;
        goto LABEL_389;
      }
      if (v399)
      {
        v295 = 5;
LABEL_389:
        (*v294)[v295]();
      }
      if (v387 != v386 && v387)
      {
        v296 = *(_QWORD **)(v355 + 8);
        v397 = &off_1E427D6B0;
        *(_QWORD *)&v398 = v200 << 32;
        DWORD2(v398) = HIDWORD(v200);
        v399 = &v397;
        *(_QWORD *)v400 = &off_1E427D6B0;
        v401 = v400;
        *(_QWORD *)&v400[8] = v200 << 32;
        *(_DWORD *)&v400[16] = HIDWORD(v200);
        v402 = 0;
        ecs2::Runtime::queueCommand(v296, (uint64_t)v400);
        if (v402 != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
        v402 = -1;
        v297 = v399;
        if (v399 == &v397)
        {
          v297 = &v397;
          v298 = 4;
        }
        else
        {
          if (!v399)
            goto LABEL_399;
          v298 = 5;
        }
        (*v297)[v298]();
      }
LABEL_399:
      if (!v388)
        goto LABEL_407;
      v299 = *(_QWORD **)(v355 + 8);
      *(_QWORD *)&v395 = *(_QWORD *)v388;
      BYTE8(v395) = *(_BYTE *)(v388 + 8);
      *(_QWORD *)v400 = v395;
      v400[8] = BYTE8(v395);
      v300 = (char *)operator new(0x20uLL);
      *(_QWORD *)v300 = &off_1E4281B98;
      *(_OWORD *)(v300 + 8) = *(_OWORD *)v400;
      *((_QWORD *)v300 + 3) = v200;
      v401 = v300;
      v399 = 0;
      v402 = 0;
      ecs2::Runtime::queueCommand(v299, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(char *, _BYTE *))off_1E42FB340[v402])(&v396, v400);
      v402 = -1;
      v301 = v399;
      if (v399 == &v397)
      {
        v301 = &v397;
        v302 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_407;
        v302 = 5;
      }
      (*v301)[v302]();
LABEL_407:
      if (!v385)
        goto LABEL_415;
      v303 = *(_QWORD **)(v355 + 8);
      v304 = *v385;
      v397 = &off_1E427DB78;
      *(_QWORD *)&v398 = v304;
      *((_QWORD *)&v398 + 1) = v200;
      v399 = &v397;
      v401 = v400;
      *(_QWORD *)v400 = &off_1E427DB78;
      *(_OWORD *)&v400[8] = v398;
      v402 = 0;
      ecs2::Runtime::queueCommand(v303, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      v305 = v399;
      if (v399 == &v397)
      {
        v305 = &v397;
        v306 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_415;
        v306 = 5;
      }
      (*v305)[v306]();
LABEL_415:
      if (!v383)
        goto LABEL_423;
      v307 = *(_QWORD **)(v355 + 8);
      v308 = *v383;
      v397 = &off_1E427FA68;
      *(_QWORD *)&v398 = v308;
      *((_QWORD *)&v398 + 1) = v200;
      v399 = &v397;
      v401 = v400;
      *(_QWORD *)v400 = &off_1E427FA68;
      *(_OWORD *)&v400[8] = v398;
      v402 = 0;
      ecs2::Runtime::queueCommand(v307, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      v309 = v399;
      if (v399 == &v397)
      {
        v309 = &v397;
        v310 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_423;
        v310 = 5;
      }
      (*v309)[v310]();
LABEL_423:
      if (!v384)
        goto LABEL_431;
      v311 = *(_QWORD **)(v355 + 8);
      v312 = *v384;
      v397 = &off_1E4280998;
      *(_QWORD *)&v398 = v312;
      *((_QWORD *)&v398 + 1) = v200;
      v399 = &v397;
      v401 = v400;
      *(_QWORD *)v400 = &off_1E4280998;
      *(_OWORD *)&v400[8] = v398;
      v402 = 0;
      ecs2::Runtime::queueCommand(v311, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      v313 = v399;
      if (v399 == &v397)
      {
        v313 = &v397;
        v314 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_431;
        v314 = 5;
      }
      (*v313)[v314]();
LABEL_431:
      if (!v382)
        goto LABEL_439;
      v315 = *(_QWORD **)(v355 + 8);
      v316 = *v382;
      v397 = &off_1E427DD70;
      *(_QWORD *)&v398 = v316;
      *((_QWORD *)&v398 + 1) = v200;
      v399 = &v397;
      v401 = v400;
      *(_QWORD *)v400 = &off_1E427DD70;
      *(_OWORD *)&v400[8] = v398;
      v402 = 0;
      ecs2::Runtime::queueCommand(v315, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      v317 = v399;
      if (v399 == &v397)
      {
        v317 = &v397;
        v318 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_439;
        v318 = 5;
      }
      (*v317)[v318]();
LABEL_439:
      if (!v381)
        goto LABEL_447;
      v319 = *(_QWORD **)(v355 + 8);
      v320 = *v381;
      v397 = &off_1E427DC08;
      *(_QWORD *)&v398 = v320;
      *((_QWORD *)&v398 + 1) = v200;
      v399 = &v397;
      v401 = v400;
      *(_QWORD *)v400 = &off_1E427DC08;
      *(_OWORD *)&v400[8] = v398;
      v402 = 0;
      ecs2::Runtime::queueCommand(v319, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      v321 = v399;
      if (v399 == &v397)
      {
        v321 = &v397;
        v322 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_447;
        v322 = 5;
      }
      (*v321)[v322]();
LABEL_447:
      if (!v95)
        goto LABEL_455;
      v323 = *(_QWORD **)(v355 + 8);
      v395 = *v95;
      v324 = (char *)operator new(0x20uLL);
      *(_QWORD *)v324 = &off_1E427D500;
      *(_OWORD *)(v324 + 8) = v395;
      *((_QWORD *)v324 + 3) = v200;
      v401 = v324;
      v399 = 0;
      v402 = 0;
      ecs2::Runtime::queueCommand(v323, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(char *, _BYTE *))off_1E42FB340[v402])(&v396, v400);
      v402 = -1;
      v325 = v399;
      if (v399 == &v397)
      {
        v325 = &v397;
        v326 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_455;
        v326 = 5;
      }
      (*v325)[v326]();
LABEL_455:
      v10 = v353;
      if (!v375)
        goto LABEL_463;
      v327 = *(_QWORD **)(v355 + 8);
      v328 = *v375;
      v397 = &off_1E427FAB0;
      *(_QWORD *)&v398 = v328;
      *((_QWORD *)&v398 + 1) = v200;
      v399 = &v397;
      v401 = v400;
      *(_QWORD *)v400 = &off_1E427FAB0;
      *(_OWORD *)&v400[8] = v398;
      v402 = 0;
      ecs2::Runtime::queueCommand(v327, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      v329 = v399;
      if (v399 == &v397)
      {
        v329 = &v397;
        v330 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_463;
        v330 = 5;
      }
      (*v329)[v330]();
LABEL_463:
      v17 = v352;
      if (!v376)
        goto LABEL_471;
      v331 = *(_QWORD **)(v355 + 8);
      v332 = *v376;
      v397 = &off_1E4281F40;
      *(_QWORD *)&v398 = v332;
      *((_QWORD *)&v398 + 1) = v200;
      v399 = &v397;
      v401 = v400;
      *(_QWORD *)v400 = &off_1E4281F40;
      *(_OWORD *)&v400[8] = v398;
      v402 = 0;
      ecs2::Runtime::queueCommand(v331, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      v333 = v399;
      if (v399 == &v397)
      {
        v333 = &v397;
        v334 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_471;
        v334 = 5;
      }
      (*v333)[v334]();
LABEL_471:
      if (!v374)
        goto LABEL_479;
      v335 = *(_QWORD **)(v355 + 8);
      v336 = *v374;
      v397 = &off_1E427E118;
      *(_QWORD *)&v398 = v336;
      *((_QWORD *)&v398 + 1) = v200;
      v399 = &v397;
      v401 = v400;
      *(_QWORD *)v400 = &off_1E427E118;
      *(_OWORD *)&v400[8] = v398;
      v402 = 0;
      ecs2::Runtime::queueCommand(v335, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      v337 = v399;
      if (v399 == &v397)
      {
        v337 = &v397;
        v338 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_479;
        v338 = 5;
      }
      (*v337)[v338]();
LABEL_479:
      v339 = *(_QWORD **)(v355 + 8);
      v340 = *v373;
      v397 = &off_1E42803F8;
      *(_QWORD *)&v398 = v340;
      *((_QWORD *)&v398 + 1) = v200;
      v399 = &v397;
      v401 = v400;
      *(_QWORD *)v400 = &off_1E42803F8;
      *(_OWORD *)&v400[8] = v398;
      v402 = 0;
      ecs2::Runtime::queueCommand(v339, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      v341 = v399;
      if (v399 == &v397)
      {
        v341 = &v397;
        v342 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_486;
        v342 = 5;
      }
      (*v341)[v342]();
LABEL_486:
      v343 = *(_QWORD **)(v355 + 8);
      v344 = *v380;
      v397 = &off_1E4281910;
      *(_QWORD *)&v398 = v344;
      *((_QWORD *)&v398 + 1) = v200;
      v399 = &v397;
      v401 = v400;
      *(_QWORD *)v400 = &off_1E4281910;
      *(_OWORD *)&v400[8] = v398;
      v402 = 0;
      ecs2::Runtime::queueCommand(v343, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      result = (uint64_t)v399;
      if (v399 == &v397)
      {
        result = (uint64_t)&v397;
        v345 = 4;
        goto LABEL_492;
      }
      if (v399)
      {
        v345 = 5;
LABEL_492:
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v345))();
      }
      if (v378 != v377 && v378)
      {
        v346 = *(_QWORD **)(v355 + 8);
        v397 = &off_1E427DF68;
        *(_QWORD *)&v398 = v200 << 32;
        DWORD2(v398) = HIDWORD(v200);
        v399 = &v397;
        *(_QWORD *)v400 = &off_1E427DF68;
        v401 = v400;
        *(_QWORD *)&v400[8] = v200 << 32;
        *(_DWORD *)&v400[16] = HIDWORD(v200);
        v402 = 0;
        ecs2::Runtime::queueCommand(v346, (uint64_t)v400);
        if (v402 != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
        v402 = -1;
        result = (uint64_t)v399;
        if (v399 == &v397)
        {
          result = (uint64_t)&v397;
          v347 = 4;
        }
        else
        {
          if (!v399)
            goto LABEL_502;
          v347 = 5;
        }
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v347))();
      }
LABEL_502:
      if (!v379)
        goto LABEL_510;
      v348 = *(_QWORD **)(v355 + 8);
      v349 = *v379;
      v397 = &off_1E4280440;
      *(_QWORD *)&v398 = v349;
      *((_QWORD *)&v398 + 1) = v200;
      v399 = &v397;
      v401 = v400;
      *(_QWORD *)v400 = &off_1E4280440;
      *(_OWORD *)&v400[8] = v398;
      v402 = 0;
      ecs2::Runtime::queueCommand(v348, (uint64_t)v400);
      if (v402 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v402])(&v395, v400);
      v402 = -1;
      result = (uint64_t)v399;
      if (v399 == &v397)
      {
        result = (uint64_t)&v397;
        v350 = 4;
      }
      else
      {
        if (!v399)
          goto LABEL_510;
        v350 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v350))();
LABEL_510:
      v13 = v394;
      v351 = *(_QWORD **)(v393[0] + 32);
      while (1)
      {
        v394 = ++v13;
        if (v13 == v351)
          break;
        result = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(v393);
        if ((_DWORD)result)
          goto LABEL_19;
      }
      v13 = v351;
LABEL_19:
      v5 = v354;
    }
    while (v371 != v13);
  }
  *v17 = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)5>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x2DFCB5932E0A2DE3;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x2DFCB5932E0A2DE3;
      if (*(_QWORD *)&v3 <= 0x2DFCB5932E0A2DE3uLL)
        v5 = 0x2DFCB5932E0A2DE3uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x2DFCB5932E0A2DE3;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x2DFCB5932E0A2DE3)
            {
              if (v7[2] == 0x2DFCB5932E0A2DE3)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x2DFCB5932E0A2DE3)
          {
            if (v7[2] == 0x2DFCB5932E0A2DE3)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::SliceAssignmentT<md::SliceType::CulledDepthPrePass>]";
  *(_QWORD *)(v11 + 24) = 59;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271E68;
  *(_QWORD *)(v11 + 8) = 0x2DFCB5932E0A2DE3;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x2DFCB5932E0A2DE3uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x2DFCB5932E0A2DE3;
  v15[1] = "md::ls::SliceAssignmentT<md::SliceType::CulledDepthPrePass>]";
  v15[2] = 59;
  gdc::Registry::_registerStorageDataSignals(a1, 0x2DFCB5932E0A2DE3, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F7050BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)5>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)5>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)5>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)5>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateShadowPassRenderItems>(md::ita::CreateShadowPassRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateShadowPassRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateShadowPassRenderItems>(md::ita::CreateShadowPassRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateShadowPassRenderItems>(md::ita::CreateShadowPassRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateShadowPassRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateShadowPassRenderItems>(md::ita::CreateShadowPassRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286038;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateShadowPassRenderItems>(md::ita::CreateShadowPassRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateShadowPassRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateShadowPassRenderItems>(md::ita::CreateShadowPassRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286038;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateShadowPassRenderItems>(md::ita::CreateShadowPassRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateShadowPassRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateShadowPassRenderItems>(md::ita::CreateShadowPassRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  unint64_t v68;
  char *v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  __int128 v78;
  unint64_t v79;
  char *v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  __int128 v89;
  unint64_t v90;
  char *v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  __int128 v100;
  unint64_t v101;
  char *v102;
  char *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  __int128 v111;
  unint64_t v112;
  char *v113;
  char *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  __int128 v122;
  unint64_t v123;
  char *v124;
  char *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  __int128 v133;
  unint64_t v134;
  char *v135;
  char *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  __int128 v144;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x180uLL);
  a1[2] = (char *)(v2 + 48);
  *v2 = 0x523816724122CCE2;
  v2[1] = "md::ls::AssociationHandle]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB4390;
  v2[4] = "md::ls::HasMeshHandle]";
  v2[5] = 21;
  v2[6] = 0x6C7EE74910D42096;
  v2[7] = "md::ls::PositionScaleInfoConstantDataHandle]";
  v2[8] = 43;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 48)
  {
    *(_QWORD *)v3 = 0xCFE242268B958ADALL;
    v2[10] = "md::ls::ViewConstantDataHandle]";
    v2[11] = 30;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_236;
  if (0x5555555555555556 * (((char *)(v2 + 48) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 48) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 48) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0xCFE242268B958ADALL;
  *((_QWORD *)v10 + 1) = "md::ls::ViewConstantDataHandle]";
  *((_QWORD *)v10 + 2) = 30;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0x74DC502726E97929;
    *((_QWORD *)v4 + 1) = "md::ls::TransformConstantDataHandle]";
    *((_QWORD *)v4 + 2) = 35;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_236;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    v20 = (char *)operator new(24 * v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0x74DC502726E97929;
  *((_QWORD *)v21 + 1) = "md::ls::TransformConstantDataHandle]";
  *((_QWORD *)v21 + 2) = 35;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
  v24 = (unint64_t)a1[2];
  if ((unint64_t)v14 < v24)
  {
    *(_QWORD *)v14 = 0x71CBA64B1A9CA230;
    *((_QWORD *)v14 + 1) = "md::ls::IndexRange]";
    *((_QWORD *)v14 + 2) = 18;
    v25 = v14 + 24;
    goto LABEL_55;
  }
  v26 = *a1;
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3);
  v28 = v27 + 1;
  if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_236;
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x555555555555555)
    v30 = 0xAAAAAAAAAAAAAAALL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    v31 = (char *)operator new(24 * v30);
  }
  else
  {
    v31 = 0;
  }
  v32 = &v31[24 * v27];
  v33 = &v31[24 * v30];
  *(_QWORD *)v32 = 0x71CBA64B1A9CA230;
  *((_QWORD *)v32 + 1) = "md::ls::IndexRange]";
  *((_QWORD *)v32 + 2) = 18;
  v25 = v32 + 24;
  if (v14 == v26)
  {
    *a1 = v32;
    a1[1] = v25;
    a1[2] = v33;
LABEL_54:
    operator delete(v14);
    goto LABEL_55;
  }
  do
  {
    v34 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v32 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v32 - 24) = v34;
    v32 -= 24;
    v14 -= 24;
  }
  while (v14 != v26);
  v14 = *a1;
  *a1 = v32;
  a1[1] = v25;
  a1[2] = v33;
  if (v14)
    goto LABEL_54;
LABEL_55:
  a1[1] = v25;
  v35 = (unint64_t)a1[2];
  if ((unint64_t)v25 < v35)
  {
    *(_QWORD *)v25 = 0x3218EFD67197A145;
    *((_QWORD *)v25 + 1) = "md::ls::NormalsHandle]";
    *((_QWORD *)v25 + 2) = 21;
    v36 = v25 + 24;
    goto LABEL_73;
  }
  v37 = *a1;
  v38 = 0xAAAAAAAAAAAAAAABLL * ((v25 - *a1) >> 3);
  v39 = v38 + 1;
  if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_236;
  v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v37) >> 3);
  if (2 * v40 > v39)
    v39 = 2 * v40;
  if (v40 >= 0x555555555555555)
    v41 = 0xAAAAAAAAAAAAAAALL;
  else
    v41 = v39;
  if (v41)
  {
    if (v41 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    v42 = (char *)operator new(24 * v41);
  }
  else
  {
    v42 = 0;
  }
  v43 = &v42[24 * v38];
  v44 = &v42[24 * v41];
  *(_QWORD *)v43 = 0x3218EFD67197A145;
  *((_QWORD *)v43 + 1) = "md::ls::NormalsHandle]";
  *((_QWORD *)v43 + 2) = 21;
  v36 = v43 + 24;
  if (v25 == v37)
  {
    *a1 = v43;
    a1[1] = v36;
    a1[2] = v44;
LABEL_72:
    operator delete(v25);
    goto LABEL_73;
  }
  do
  {
    v45 = *(_OWORD *)(v25 - 24);
    *((_QWORD *)v43 - 1) = *((_QWORD *)v25 - 1);
    *(_OWORD *)(v43 - 24) = v45;
    v43 -= 24;
    v25 -= 24;
  }
  while (v25 != v37);
  v25 = *a1;
  *a1 = v43;
  a1[1] = v36;
  a1[2] = v44;
  if (v25)
    goto LABEL_72;
LABEL_73:
  a1[1] = v36;
  v46 = (unint64_t)a1[2];
  if ((unint64_t)v36 < v46)
  {
    *(_QWORD *)v36 = 0xAF179EFD8A4C83D4;
    *((_QWORD *)v36 + 1) = "md::ls::InstanceTransformHandle]";
    *((_QWORD *)v36 + 2) = 31;
    v47 = v36 + 24;
    goto LABEL_91;
  }
  v48 = *a1;
  v49 = 0xAAAAAAAAAAAAAAABLL * ((v36 - *a1) >> 3);
  v50 = v49 + 1;
  if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_236;
  v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - (_QWORD)v48) >> 3);
  if (2 * v51 > v50)
    v50 = 2 * v51;
  if (v51 >= 0x555555555555555)
    v52 = 0xAAAAAAAAAAAAAAALL;
  else
    v52 = v50;
  if (v52)
  {
    if (v52 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    v53 = (char *)operator new(24 * v52);
  }
  else
  {
    v53 = 0;
  }
  v54 = &v53[24 * v49];
  v55 = &v53[24 * v52];
  *(_QWORD *)v54 = 0xAF179EFD8A4C83D4;
  *((_QWORD *)v54 + 1) = "md::ls::InstanceTransformHandle]";
  *((_QWORD *)v54 + 2) = 31;
  v47 = v54 + 24;
  if (v36 == v48)
  {
    *a1 = v54;
    a1[1] = v47;
    a1[2] = v55;
LABEL_90:
    operator delete(v36);
    goto LABEL_91;
  }
  do
  {
    v56 = *(_OWORD *)(v36 - 24);
    *((_QWORD *)v54 - 1) = *((_QWORD *)v36 - 1);
    *(_OWORD *)(v54 - 24) = v56;
    v54 -= 24;
    v36 -= 24;
  }
  while (v36 != v48);
  v36 = *a1;
  *a1 = v54;
  a1[1] = v47;
  a1[2] = v55;
  if (v36)
    goto LABEL_90;
LABEL_91:
  a1[1] = v47;
  v57 = (unint64_t)a1[2];
  if ((unint64_t)v47 < v57)
  {
    *(_QWORD *)v47 = 0xCBB77B1CBD05D7C5;
    *((_QWORD *)v47 + 1) = "md::ls::UVsHandle]";
    *((_QWORD *)v47 + 2) = 17;
    v58 = v47 + 24;
    goto LABEL_109;
  }
  v59 = *a1;
  v60 = 0xAAAAAAAAAAAAAAABLL * ((v47 - *a1) >> 3);
  v61 = v60 + 1;
  if (v60 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_236;
  v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - (_QWORD)v59) >> 3);
  if (2 * v62 > v61)
    v61 = 2 * v62;
  if (v62 >= 0x555555555555555)
    v63 = 0xAAAAAAAAAAAAAAALL;
  else
    v63 = v61;
  if (v63)
  {
    if (v63 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    v64 = (char *)operator new(24 * v63);
  }
  else
  {
    v64 = 0;
  }
  v65 = &v64[24 * v60];
  v66 = &v64[24 * v63];
  *(_QWORD *)v65 = 0xCBB77B1CBD05D7C5;
  *((_QWORD *)v65 + 1) = "md::ls::UVsHandle]";
  *((_QWORD *)v65 + 2) = 17;
  v58 = v65 + 24;
  if (v47 == v59)
  {
    *a1 = v65;
    a1[1] = v58;
    a1[2] = v66;
LABEL_108:
    operator delete(v47);
    goto LABEL_109;
  }
  do
  {
    v67 = *(_OWORD *)(v47 - 24);
    *((_QWORD *)v65 - 1) = *((_QWORD *)v47 - 1);
    *(_OWORD *)(v65 - 24) = v67;
    v65 -= 24;
    v47 -= 24;
  }
  while (v47 != v59);
  v47 = *a1;
  *a1 = v65;
  a1[1] = v58;
  a1[2] = v66;
  if (v47)
    goto LABEL_108;
LABEL_109:
  a1[1] = v58;
  v68 = (unint64_t)a1[2];
  if ((unint64_t)v58 < v68)
  {
    *(_QWORD *)v58 = 0x499CE17DBD9A1615;
    *((_QWORD *)v58 + 1) = "md::ls::NeedsZBias]";
    *((_QWORD *)v58 + 2) = 18;
    v69 = v58 + 24;
    goto LABEL_127;
  }
  v70 = *a1;
  v71 = 0xAAAAAAAAAAAAAAABLL * ((v58 - *a1) >> 3);
  v72 = v71 + 1;
  if (v71 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_236;
  v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - (_QWORD)v70) >> 3);
  if (2 * v73 > v72)
    v72 = 2 * v73;
  if (v73 >= 0x555555555555555)
    v74 = 0xAAAAAAAAAAAAAAALL;
  else
    v74 = v72;
  if (v74)
  {
    if (v74 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    v75 = (char *)operator new(24 * v74);
  }
  else
  {
    v75 = 0;
  }
  v76 = &v75[24 * v71];
  v77 = &v75[24 * v74];
  *(_QWORD *)v76 = 0x499CE17DBD9A1615;
  *((_QWORD *)v76 + 1) = "md::ls::NeedsZBias]";
  *((_QWORD *)v76 + 2) = 18;
  v69 = v76 + 24;
  if (v58 == v70)
  {
    *a1 = v76;
    a1[1] = v69;
    a1[2] = v77;
LABEL_126:
    operator delete(v58);
    goto LABEL_127;
  }
  do
  {
    v78 = *(_OWORD *)(v58 - 24);
    *((_QWORD *)v76 - 1) = *((_QWORD *)v58 - 1);
    *(_OWORD *)(v76 - 24) = v78;
    v76 -= 24;
    v58 -= 24;
  }
  while (v58 != v70);
  v58 = *a1;
  *a1 = v76;
  a1[1] = v69;
  a1[2] = v77;
  if (v58)
    goto LABEL_126;
LABEL_127:
  a1[1] = v69;
  v79 = (unint64_t)a1[2];
  if ((unint64_t)v69 < v79)
  {
    *(_QWORD *)v69 = 0xE53EF176130D7769;
    *((_QWORD *)v69 + 1) = "md::ls::InstanceCount]";
    *((_QWORD *)v69 + 2) = 21;
    v80 = v69 + 24;
    goto LABEL_145;
  }
  v81 = *a1;
  v82 = 0xAAAAAAAAAAAAAAABLL * ((v69 - *a1) >> 3);
  v83 = v82 + 1;
  if (v82 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_236;
  v84 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - (_QWORD)v81) >> 3);
  if (2 * v84 > v83)
    v83 = 2 * v84;
  if (v84 >= 0x555555555555555)
    v85 = 0xAAAAAAAAAAAAAAALL;
  else
    v85 = v83;
  if (v85)
  {
    if (v85 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    v86 = (char *)operator new(24 * v85);
  }
  else
  {
    v86 = 0;
  }
  v87 = &v86[24 * v82];
  v88 = &v86[24 * v85];
  *(_QWORD *)v87 = 0xE53EF176130D7769;
  *((_QWORD *)v87 + 1) = "md::ls::InstanceCount]";
  *((_QWORD *)v87 + 2) = 21;
  v80 = v87 + 24;
  if (v69 == v81)
  {
    *a1 = v87;
    a1[1] = v80;
    a1[2] = v88;
LABEL_144:
    operator delete(v69);
    goto LABEL_145;
  }
  do
  {
    v89 = *(_OWORD *)(v69 - 24);
    *((_QWORD *)v87 - 1) = *((_QWORD *)v69 - 1);
    *(_OWORD *)(v87 - 24) = v89;
    v87 -= 24;
    v69 -= 24;
  }
  while (v69 != v81);
  v69 = *a1;
  *a1 = v87;
  a1[1] = v80;
  a1[2] = v88;
  if (v69)
    goto LABEL_144;
LABEL_145:
  a1[1] = v80;
  v90 = (unint64_t)a1[2];
  if ((unint64_t)v80 < v90)
  {
    *(_QWORD *)v80 = 0xD443D3DCBB78491ALL;
    *((_QWORD *)v80 + 1) = "md::ls::ElevationHandle]";
    *((_QWORD *)v80 + 2) = 23;
    v91 = v80 + 24;
    goto LABEL_163;
  }
  v92 = *a1;
  v93 = 0xAAAAAAAAAAAAAAABLL * ((v80 - *a1) >> 3);
  v94 = v93 + 1;
  if (v93 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_236;
  v95 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v90 - (_QWORD)v92) >> 3);
  if (2 * v95 > v94)
    v94 = 2 * v95;
  if (v95 >= 0x555555555555555)
    v96 = 0xAAAAAAAAAAAAAAALL;
  else
    v96 = v94;
  if (v96)
  {
    if (v96 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    v97 = (char *)operator new(24 * v96);
  }
  else
  {
    v97 = 0;
  }
  v98 = &v97[24 * v93];
  v99 = &v97[24 * v96];
  *(_QWORD *)v98 = 0xD443D3DCBB78491ALL;
  *((_QWORD *)v98 + 1) = "md::ls::ElevationHandle]";
  *((_QWORD *)v98 + 2) = 23;
  v91 = v98 + 24;
  if (v80 == v92)
  {
    *a1 = v98;
    a1[1] = v91;
    a1[2] = v99;
LABEL_162:
    operator delete(v80);
    goto LABEL_163;
  }
  do
  {
    v100 = *(_OWORD *)(v80 - 24);
    *((_QWORD *)v98 - 1) = *((_QWORD *)v80 - 1);
    *(_OWORD *)(v98 - 24) = v100;
    v98 -= 24;
    v80 -= 24;
  }
  while (v80 != v92);
  v80 = *a1;
  *a1 = v98;
  a1[1] = v91;
  a1[2] = v99;
  if (v80)
    goto LABEL_162;
LABEL_163:
  a1[1] = v91;
  v101 = (unint64_t)a1[2];
  if ((unint64_t)v91 < v101)
  {
    *(_QWORD *)v91 = 0xEAA0B82FC49F7277;
    *((_QWORD *)v91 + 1) = "md::ls::ShadowConstantDataHandle]";
    *((_QWORD *)v91 + 2) = 32;
    v102 = v91 + 24;
    goto LABEL_181;
  }
  v103 = *a1;
  v104 = 0xAAAAAAAAAAAAAAABLL * ((v91 - *a1) >> 3);
  v105 = v104 + 1;
  if (v104 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_236;
  v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (_QWORD)v103) >> 3);
  if (2 * v106 > v105)
    v105 = 2 * v106;
  if (v106 >= 0x555555555555555)
    v107 = 0xAAAAAAAAAAAAAAALL;
  else
    v107 = v105;
  if (v107)
  {
    if (v107 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    v108 = (char *)operator new(24 * v107);
  }
  else
  {
    v108 = 0;
  }
  v109 = &v108[24 * v104];
  v110 = &v108[24 * v107];
  *(_QWORD *)v109 = 0xEAA0B82FC49F7277;
  *((_QWORD *)v109 + 1) = "md::ls::ShadowConstantDataHandle]";
  *((_QWORD *)v109 + 2) = 32;
  v102 = v109 + 24;
  if (v91 == v103)
  {
    *a1 = v109;
    a1[1] = v102;
    a1[2] = v110;
LABEL_180:
    operator delete(v91);
    goto LABEL_181;
  }
  do
  {
    v111 = *(_OWORD *)(v91 - 24);
    *((_QWORD *)v109 - 1) = *((_QWORD *)v91 - 1);
    *(_OWORD *)(v109 - 24) = v111;
    v109 -= 24;
    v91 -= 24;
  }
  while (v91 != v103);
  v91 = *a1;
  *a1 = v109;
  a1[1] = v102;
  a1[2] = v110;
  if (v91)
    goto LABEL_180;
LABEL_181:
  a1[1] = v102;
  v112 = (unint64_t)a1[2];
  if ((unint64_t)v102 < v112)
  {
    *(_QWORD *)v102 = 0x237F9D3BCC905318;
    *((_QWORD *)v102 + 1) = "md::ls::IsMercator]";
    *((_QWORD *)v102 + 2) = 18;
    v113 = v102 + 24;
    goto LABEL_199;
  }
  v114 = *a1;
  v115 = 0xAAAAAAAAAAAAAAABLL * ((v102 - *a1) >> 3);
  v116 = v115 + 1;
  if (v115 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_236;
  v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v112 - (_QWORD)v114) >> 3);
  if (2 * v117 > v116)
    v116 = 2 * v117;
  if (v117 >= 0x555555555555555)
    v118 = 0xAAAAAAAAAAAAAAALL;
  else
    v118 = v116;
  if (v118)
  {
    if (v118 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    v119 = (char *)operator new(24 * v118);
  }
  else
  {
    v119 = 0;
  }
  v120 = &v119[24 * v115];
  v121 = &v119[24 * v118];
  *(_QWORD *)v120 = 0x237F9D3BCC905318;
  *((_QWORD *)v120 + 1) = "md::ls::IsMercator]";
  *((_QWORD *)v120 + 2) = 18;
  v113 = v120 + 24;
  if (v102 == v114)
  {
    *a1 = v120;
    a1[1] = v113;
    a1[2] = v121;
LABEL_198:
    operator delete(v102);
    goto LABEL_199;
  }
  do
  {
    v122 = *(_OWORD *)(v102 - 24);
    *((_QWORD *)v120 - 1) = *((_QWORD *)v102 - 1);
    *(_OWORD *)(v120 - 24) = v122;
    v120 -= 24;
    v102 -= 24;
  }
  while (v102 != v114);
  v102 = *a1;
  *a1 = v120;
  a1[1] = v113;
  a1[2] = v121;
  if (v102)
    goto LABEL_198;
LABEL_199:
  a1[1] = v113;
  v123 = (unint64_t)a1[2];
  if ((unint64_t)v113 < v123)
  {
    *(_QWORD *)v113 = 0x98A9F01DBB8BCCCELL;
    *((_QWORD *)v113 + 1) = "md::ls::PreserveHeight]";
    *((_QWORD *)v113 + 2) = 22;
    v124 = v113 + 24;
    goto LABEL_217;
  }
  v125 = *a1;
  v126 = 0xAAAAAAAAAAAAAAABLL * ((v113 - *a1) >> 3);
  v127 = v126 + 1;
  if (v126 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_236;
  v128 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v123 - (_QWORD)v125) >> 3);
  if (2 * v128 > v127)
    v127 = 2 * v128;
  if (v128 >= 0x555555555555555)
    v129 = 0xAAAAAAAAAAAAAAALL;
  else
    v129 = v127;
  if (v129)
  {
    if (v129 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    v130 = (char *)operator new(24 * v129);
  }
  else
  {
    v130 = 0;
  }
  v131 = &v130[24 * v126];
  v132 = &v130[24 * v129];
  *(_QWORD *)v131 = 0x98A9F01DBB8BCCCELL;
  *((_QWORD *)v131 + 1) = "md::ls::PreserveHeight]";
  *((_QWORD *)v131 + 2) = 22;
  v124 = v131 + 24;
  if (v113 == v125)
  {
    *a1 = v131;
    a1[1] = v124;
    a1[2] = v132;
LABEL_216:
    operator delete(v113);
    goto LABEL_217;
  }
  do
  {
    v133 = *(_OWORD *)(v113 - 24);
    *((_QWORD *)v131 - 1) = *((_QWORD *)v113 - 1);
    *(_OWORD *)(v131 - 24) = v133;
    v131 -= 24;
    v113 -= 24;
  }
  while (v113 != v125);
  v113 = *a1;
  *a1 = v131;
  a1[1] = v124;
  a1[2] = v132;
  if (v113)
    goto LABEL_216;
LABEL_217:
  a1[1] = v124;
  v134 = (unint64_t)a1[2];
  if ((unint64_t)v124 < v134)
  {
    *(_QWORD *)v124 = 0x7931433C9A6EB2C6;
    *((_QWORD *)v124 + 1) = "md::ls::SharedUniqueID]";
    *((_QWORD *)v124 + 2) = 22;
    v135 = v124 + 24;
    goto LABEL_235;
  }
  v136 = *a1;
  v137 = 0xAAAAAAAAAAAAAAABLL * ((v124 - *a1) >> 3);
  v138 = v137 + 1;
  if (v137 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_236:
    abort();
  v139 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v134 - (_QWORD)v136) >> 3);
  if (2 * v139 > v138)
    v138 = 2 * v139;
  if (v139 >= 0x555555555555555)
    v140 = 0xAAAAAAAAAAAAAAALL;
  else
    v140 = v138;
  if (v140)
  {
    if (v140 <= 0xAAAAAAAAAAAAAAALL)
    {
      v141 = (char *)operator new(24 * v140);
      goto LABEL_229;
    }
LABEL_237:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v141 = 0;
LABEL_229:
  v142 = &v141[24 * v137];
  v143 = &v141[24 * v140];
  *(_QWORD *)v142 = 0x7931433C9A6EB2C6;
  *((_QWORD *)v142 + 1) = "md::ls::SharedUniqueID]";
  *((_QWORD *)v142 + 2) = 22;
  v135 = v142 + 24;
  if (v124 == v136)
  {
    *a1 = v142;
    a1[1] = v135;
    a1[2] = v143;
LABEL_234:
    operator delete(v124);
    goto LABEL_235;
  }
  do
  {
    v144 = *(_OWORD *)(v124 - 24);
    *((_QWORD *)v142 - 1) = *((_QWORD *)v124 - 1);
    *(_OWORD *)(v142 - 24) = v144;
    v142 -= 24;
    v124 -= 24;
  }
  while (v124 != v136);
  v124 = *a1;
  *a1 = v142;
  a1[1] = v135;
  a1[2] = v143;
  if (v124)
    goto LABEL_234;
LABEL_235:
  a1[1] = v135;
}

void sub_19F706234(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateShadowPassRenderItems>(md::ita::CreateShadowPassRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateShadowPassRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateShadowPassRenderItems>(md::ita::CreateShadowPassRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateShadowPassRenderItems>(md::ita::CreateShadowPassRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateShadowPassRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateShadowPassRenderItems>(md::ita::CreateShadowPassRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286080;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateShadowPassRenderItems>(md::ita::CreateShadowPassRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateShadowPassRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateShadowPassRenderItems>(md::ita::CreateShadowPassRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286080;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateShadowPassRenderItems>(md::ita::CreateShadowPassRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateShadowPassRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateShadowPassRenderItems>(md::ita::CreateShadowPassRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x90uLL);
  a1[2] = (char *)(v2 + 18);
  *v2 = 0x8DCCA4FD35258189;
  v2[1] = "md::ls::MeshRenderableID]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB43C0;
  v2[4] = "md::ls::SliceAssignmentT<md::SliceType::CulledShadow>]";
  v2[5] = 53;
  v2[6] = 0xE8C803AC798645E1;
  v2[7] = "md::ls::RenderableMeshVertexFormat]";
  v2[8] = 34;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 18)
  {
    *(_QWORD *)v3 = 0x751B872B282C3971;
    v2[10] = "md::ls::TileType]";
    v2[11] = 16;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_56;
  if (0x5555555555555556 * (((char *)(v2 + 18) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 18) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 18) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_57;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x751B872B282C3971;
  *((_QWORD *)v10 + 1) = "md::ls::TileType]";
  *((_QWORD *)v10 + 2) = 16;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0xECC498AF223943D5;
    *((_QWORD *)v4 + 1) = "md::ls::MeshLayerTypeV]";
    *((_QWORD *)v4 + 2) = 22;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_56;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_57;
    v20 = (char *)operator new(24 * v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0xECC498AF223943D5;
  *((_QWORD *)v21 + 1) = "md::ls::MeshLayerTypeV]";
  *((_QWORD *)v21 + 2) = 22;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
  v24 = (unint64_t)a1[2];
  if ((unint64_t)v14 < v24)
  {
    *(_QWORD *)v14 = 0xEC85A518158AB507;
    *((_QWORD *)v14 + 1) = "md::ls::PendingProcessingShadow]";
    *((_QWORD *)v14 + 2) = 31;
    v25 = v14 + 24;
    goto LABEL_55;
  }
  v26 = *a1;
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3);
  v28 = v27 + 1;
  if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_56:
    abort();
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x555555555555555)
    v30 = 0xAAAAAAAAAAAAAAALL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 <= 0xAAAAAAAAAAAAAAALL)
    {
      v31 = (char *)operator new(24 * v30);
      goto LABEL_49;
    }
LABEL_57:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v31 = 0;
LABEL_49:
  v32 = &v31[24 * v27];
  v33 = &v31[24 * v30];
  *(_QWORD *)v32 = 0xEC85A518158AB507;
  *((_QWORD *)v32 + 1) = "md::ls::PendingProcessingShadow]";
  *((_QWORD *)v32 + 2) = 31;
  v25 = v32 + 24;
  if (v14 == v26)
  {
    *a1 = v32;
    a1[1] = v25;
    a1[2] = v33;
LABEL_54:
    operator delete(v14);
    goto LABEL_55;
  }
  do
  {
    v34 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v32 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v32 - 24) = v34;
    v32 -= 24;
    v14 -= 24;
  }
  while (v14 != v26);
  v14 = *a1;
  *a1 = v32;
  a1[1] = v25;
  a1[2] = v33;
  if (v14)
    goto LABEL_54;
LABEL_55:
  a1[1] = v25;
}

void sub_19F7066D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateShadowPassRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateShadowPassRenderItems>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateShadowPassRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateShadowPassRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42778C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateShadowPassRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateShadowPassRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42778C0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateShadowPassRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateShadowPassRenderItems>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL4 isValid;
  uint64_t result;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  std::__shared_weak_count *v190;
  _QWORD *v191;
  unint64_t *p_shared_owners;
  unint64_t v193;
  unint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t (***v198)();
  uint64_t v199;
  unint64_t v200;
  unint64_t RenderItem;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  uint64_t (***v206)();
  uint64_t v207;
  _QWORD *v208;
  uint64_t (***v209)();
  uint64_t v210;
  int v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t (***v214)();
  uint64_t v215;
  _QWORD *v216;
  uint64_t (***v217)();
  uint64_t v218;
  _QWORD *v219;
  _QWORD *v220;
  uint64_t (***v221)();
  uint64_t v222;
  _QWORD *v223;
  _BYTE *v224;
  uint64_t (***v225)();
  uint64_t v226;
  _QWORD *v227;
  uint64_t (***v228)();
  uint64_t v229;
  _QWORD *v230;
  uint64_t (***v231)();
  uint64_t v232;
  _QWORD *v233;
  uint64_t (***v234)();
  uint64_t v235;
  _QWORD *v236;
  uint64_t (***v237)();
  uint64_t v238;
  uint64_t (***v239)();
  uint64_t v240;
  _QWORD *v241;
  uint64_t (***v242)();
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t (**v246)();
  uint64_t (***v247)();
  uint64_t v248;
  _QWORD *v249;
  char *v250;
  uint64_t (***v251)();
  int v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  uint64_t (***v258)();
  uint64_t v259;
  _QWORD *v260;
  uint64_t (***v261)();
  uint64_t v262;
  _QWORD *v263;
  uint64_t (***v264)();
  uint64_t v265;
  _QWORD *v266;
  uint64_t (***v267)();
  uint64_t v268;
  _QWORD *v269;
  uint64_t (***v270)();
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  _QWORD *v274;
  uint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  unint64_t v279;
  _QWORD *AssociationItemStorage;
  _QWORD *v281;
  unint64_t v282;
  unint64_t *v283;
  _QWORD *v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  char *v291;
  unint64_t *v292;
  unint64_t v293;
  uint64_t v294;
  char *v295;
  unint64_t *v296;
  uint64_t v297;
  __int128 v298;
  unint64_t v299;
  _QWORD *v300;
  char *v301;
  uint64_t (***v302)();
  uint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  uint64_t (***v306)();
  uint64_t v307;
  _QWORD *v308;
  uint64_t (***v309)();
  uint64_t v310;
  _QWORD *v311;
  char *v312;
  uint64_t (***v313)();
  uint64_t v314;
  _QWORD *v315;
  uint64_t v316;
  uint64_t (***v317)();
  uint64_t v318;
  _QWORD *v319;
  uint64_t v320;
  uint64_t (***v321)();
  uint64_t v322;
  _QWORD *v323;
  uint64_t v324;
  uint64_t (***v325)();
  uint64_t v326;
  _QWORD *v327;
  uint64_t v328;
  uint64_t (***v329)();
  uint64_t v330;
  _QWORD *v331;
  char *v332;
  uint64_t (***v333)();
  uint64_t v334;
  _QWORD *v335;
  uint64_t v336;
  uint64_t (***v337)();
  uint64_t v338;
  _QWORD *v339;
  uint64_t v340;
  uint64_t (***v341)();
  uint64_t v342;
  _QWORD *v343;
  uint64_t v344;
  uint64_t (***v345)();
  uint64_t v346;
  _QWORD *v347;
  uint64_t v348;
  uint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  _QWORD *v352;
  char *v353;
  uint64_t v354;
  _QWORD *v355;
  _QWORD *v356;
  _QWORD *v357;
  _QWORD *v358;
  _QWORD *v359;
  _QWORD *v360;
  _QWORD *v361;
  _QWORD *v362;
  _QWORD *v363;
  _QWORD *v364;
  _QWORD *v365;
  _QWORD *v366;
  _QWORD *v367;
  _QWORD *v368;
  _QWORD *v369;
  _QWORD *v370;
  _QWORD *HasMesh;
  _QWORD *v372;
  _QWORD *v373;
  _QWORD *v374;
  _QWORD *v375;
  unsigned __int8 *v376;
  unint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t *v380;
  uint64_t *v381;
  uint64_t *v382;
  uint64_t *v383;
  uint64_t *v384;
  uint64_t *v385;
  uint64_t *v386;
  uint64_t *v387;
  __int128 *v388;
  uint64_t *v389;
  unint64_t v390;
  uint64_t v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t v395;
  _BYTE *v396;
  unint64_t *v397;
  unsigned __int8 *v399;
  unint64_t v400;
  _QWORD v401[9];
  _QWORD *v402;
  __int128 v403;
  uint64_t v404;
  char v405;
  uint64_t (**v406)();
  __int128 v407;
  uint64_t (***v408)();
  _BYTE v409[24];
  _BYTE *v410;
  int v411;
  uint64_t v412;

  v412 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  v4 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)4>>(v2);
  v5 = gdc::Registry::storage<md::ls::RenderableMeshVertexFormat>(v2);
  v6 = gdc::Registry::storage<md::ls::TileType>(v2);
  v7 = gdc::Registry::storage<md::ls::MeshLayerTypeV>(v2);
  v8 = gdc::Registry::storage<md::ls::PendingProcessingShadow>(v2);
  v9 = (_QWORD *)gdc::Registry::storage<md::ls::ShadowConstantDataHandle>(v2);
  v372 = (_QWORD *)gdc::Registry::storage<md::ls::AssociationHandle>(v2);
  HasMesh = (_QWORD *)gdc::Registry::storage<md::ls::HasMeshHandle>(v2);
  v370 = (_QWORD *)gdc::Registry::storage<md::ls::PositionScaleInfoConstantDataHandle>(v2);
  v369 = (_QWORD *)gdc::Registry::storage<md::ls::ViewConstantDataHandle>(v2);
  v368 = (_QWORD *)gdc::Registry::storage<md::ls::TransformConstantDataHandle>(v2);
  v367 = (_QWORD *)gdc::Registry::storage<md::ls::IndexRange>(v2);
  v366 = (_QWORD *)gdc::Registry::storage<md::ls::NormalsHandle>(v2);
  v365 = (_QWORD *)gdc::Registry::storage<md::ls::InstanceTransformHandle>(v2);
  v364 = (_QWORD *)gdc::Registry::storage<md::ls::UVsHandle>(v2);
  v363 = (_QWORD *)gdc::Registry::storage<md::ls::NeedsZBias>(v2);
  v362 = (_QWORD *)gdc::Registry::storage<md::ls::InstanceCount>(v2);
  v361 = (_QWORD *)gdc::Registry::storage<md::ls::ElevationHandle>(v2);
  v360 = (_QWORD *)gdc::Registry::storage<md::ls::IsMercator>(v2);
  v359 = (_QWORD *)gdc::Registry::storage<md::ls::PreserveHeight>(v2);
  v358 = (_QWORD *)gdc::Registry::storage<md::ls::SharedUniqueID>(v2);
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) >= *(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56))
    v10 = (_QWORD *)(v3 + 32);
  else
    v10 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v10[4] - v10[3])
    v10 = (_QWORD *)(v5 + 32);
  v394 = *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56);
  if (v394 < v10[4] - v10[3])
    v10 = (_QWORD *)(v6 + 32);
  v392 = *(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56);
  if (v392 < v10[4] - v10[3])
    v10 = (_QWORD *)(v7 + 32);
  if (*(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56) < v10[4] - v10[3])
    v10 = (_QWORD *)(v8 + 32);
  if (v9[8] - v9[7] < v10[4] - v10[3])
    v10 = v9 + 4;
  v401[0] = v10;
  v401[1] = v3;
  v401[2] = v4;
  v401[3] = v5;
  v374 = (_QWORD *)v6;
  v375 = (_QWORD *)v5;
  v401[4] = v6;
  v401[5] = v7;
  v373 = (_QWORD *)v7;
  v401[6] = v8;
  v401[7] = v9;
  v12 = (_QWORD *)v10[3];
  v11 = (_QWORD *)v10[4];
  v402 = v12;
  if (v11 != v12
    && !gdc::RegistryQueryView<gdc::All<md::ls::SliceAssignmentT<(md::SliceType)7> const,md::ls::RenderableMeshVertexFormat const,md::ls::TileType const,md::ls::RequiresDepthPeel const,md::ls::MeshLayerTypeV const,md::ls::IntendedSceneLayer const,md::ls::PendingProcessing const>,gdc::Any<md::ls::AssociationHandle,md::ls::PrepassConstantDataHandle,md::ls::ShadowConstantDataHandle,md::ls::PreserveHeight,md::ls::HasMeshHandle,md::ls::PositionScaleInfoConstantDataHandle,md::ls::ViewConstantDataHandle,md::ls::TransformConstantDataHandle,md::ls::IndexRange,md::ls::NormalsHandle,md::ls::InstanceTransformHandle,md::ls::UVsHandle,md::ls::NeedsZBias,md::ls::ClippingConstantDataHandle,md::ls::IsMercator,md::ls::ElevationHandle>,gdc::None<>>::Iterator::isValid(v401))
  {
    v13 = v12 + 1;
    do
    {
      v12 = v13;
      v402 = v13;
      if (v13 == v11)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::SliceAssignmentT<(md::SliceType)7> const,md::ls::RenderableMeshVertexFormat const,md::ls::TileType const,md::ls::RequiresDepthPeel const,md::ls::MeshLayerTypeV const,md::ls::IntendedSceneLayer const,md::ls::PendingProcessing const>,gdc::Any<md::ls::AssociationHandle,md::ls::PrepassConstantDataHandle,md::ls::ShadowConstantDataHandle,md::ls::PreserveHeight,md::ls::HasMeshHandle,md::ls::PositionScaleInfoConstantDataHandle,md::ls::ViewConstantDataHandle,md::ls::TransformConstantDataHandle,md::ls::IndexRange,md::ls::NormalsHandle,md::ls::InstanceTransformHandle,md::ls::UVsHandle,md::ls::NeedsZBias,md::ls::ClippingConstantDataHandle,md::ls::IsMercator,md::ls::ElevationHandle>,gdc::None<>>::Iterator::isValid(v401);
      v13 = v12 + 1;
    }
    while (!isValid);
  }
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v17 = (_QWORD *)result;
  v357 = v18;
  v19 = a1;
  if (v18 != v12)
  {
    v356 = (_QWORD *)result;
    do
    {
      *v17 = *v12;
      v20 = *v12;
      v21 = HIDWORD(*v12);
      v22 = *v12 >> 39;
      v23 = v16[4];
      if (v22 < (v16[5] - v23) >> 3
        && (v24 = *(_QWORD *)(v23 + 8 * v22)) != 0
        && (v25 = *(unsigned __int16 *)(v24 + 2 * (HIDWORD(v20) & 0x7F)),
            v27 = v16[7],
            v26 = v16[8],
            v25 < (v26 - v27) >> 3)
        && ((v28 = v27 + 8 * v25, v28 != v26) ? (v29 = *(_DWORD *)(v28 + 4) == (_DWORD)v21) : (v29 = 0), v29))
      {
        v30 = (_BYTE *)(v16[10] + v25);
      }
      else
      {
        v30 = (_BYTE *)v16[11];
      }
      v396 = v30;
      v31 = v374[4];
      if (v22 < (v374[5] - v31) >> 3
        && (v32 = *(_QWORD *)(v31 + 8 * v22)) != 0
        && (v33 = *(unsigned __int16 *)(v32 + 2 * (HIDWORD(v20) & 0x7F)),
            v35 = v374[7],
            v34 = v374[8],
            v33 < (v34 - v35) >> 3)
        && ((v36 = v35 + 8 * v33, v36 != v34) ? (v37 = *(_DWORD *)(v36 + 4) == (_DWORD)v21) : (v37 = 0), v37))
      {
        v38 = (unsigned __int8 *)(v374[10] + v33);
      }
      else
      {
        v38 = (unsigned __int8 *)v374[11];
      }
      v376 = v38;
      v39 = v373[4];
      if (v22 < (v373[5] - v39) >> 3
        && (v40 = *(_QWORD *)(v39 + 8 * v22)) != 0
        && (v41 = *(unsigned __int16 *)(v40 + 2 * (HIDWORD(v20) & 0x7F)),
            v43 = v373[7],
            v42 = v373[8],
            v41 < (v42 - v43) >> 3)
        && ((v44 = v43 + 8 * v41, v44 != v42) ? (v45 = *(_DWORD *)(v44 + 4) == (_DWORD)v21) : (v45 = 0), v45))
      {
        v46 = (unsigned __int8 *)(v373[10] + v41);
      }
      else
      {
        v46 = (unsigned __int8 *)v373[11];
      }
      v399 = v46;
      v47 = v372[4];
      if (v22 < (v372[5] - v47) >> 3
        && (v48 = *(_QWORD *)(v47 + 8 * v22)) != 0
        && (v49 = *(unsigned __int16 *)(v48 + 2 * (HIDWORD(v20) & 0x7F)),
            v51 = v372[7],
            v50 = v372[8],
            v49 < (v50 - v51) >> 3)
        && ((v52 = v51 + 8 * v49, v52 != v50) ? (v53 = *(_DWORD *)(v52 + 4) == (_DWORD)v21) : (v53 = 0), v53))
      {
        v54 = v372[11];
        v55 = v372[10] + 16 * v49;
      }
      else
      {
        v54 = v372[11];
        v55 = v54;
      }
      if (v55 == v54)
        v55 = 0;
      v397 = (unint64_t *)v55;
      v56 = HasMesh[4];
      if (v22 < (HasMesh[5] - v56) >> 3
        && (v57 = *(_QWORD *)(v56 + 8 * v22)) != 0
        && (v58 = *(unsigned __int16 *)(v57 + 2 * (HIDWORD(v20) & 0x7F)),
            v60 = HasMesh[7],
            v59 = HasMesh[8],
            v58 < (v59 - v60) >> 3)
        && ((v61 = v60 + 8 * v58, v61 != v59) ? (v62 = *(_DWORD *)(v61 + 4) == (_DWORD)v21) : (v62 = 0), v62))
      {
        v63 = HasMesh[11];
        v64 = HasMesh[10] + 8 * v58;
      }
      else
      {
        v63 = HasMesh[11];
        v64 = v63;
      }
      if (v64 == v63)
        v65 = 0;
      else
        v65 = (uint64_t *)v64;
      v66 = v370[4];
      if (v22 < (v370[5] - v66) >> 3
        && (v67 = *(_QWORD *)(v66 + 8 * v22)) != 0
        && (v68 = *(unsigned __int16 *)(v67 + 2 * (HIDWORD(v20) & 0x7F)),
            v70 = v370[7],
            v69 = v370[8],
            v68 < (v69 - v70) >> 3)
        && ((v71 = v70 + 8 * v68, v71 != v69) ? (v72 = *(_DWORD *)(v71 + 4) == (_DWORD)v21) : (v72 = 0), v72))
      {
        v73 = v370[11];
        v74 = v370[10] + 16 * v68;
      }
      else
      {
        v73 = v370[11];
        v74 = v73;
      }
      if (v74 == v73)
        v75 = 0;
      else
        v75 = v74;
      v76 = v369[4];
      if (v22 < (v369[5] - v76) >> 3
        && (v77 = *(_QWORD *)(v76 + 8 * v22)) != 0
        && (v78 = *(unsigned __int16 *)(v77 + 2 * (HIDWORD(v20) & 0x7F)),
            v80 = v369[7],
            v79 = v369[8],
            v78 < (v79 - v80) >> 3)
        && ((v81 = v80 + 8 * v78, v81 != v79) ? (v82 = *(_DWORD *)(v81 + 4) == (_DWORD)v21) : (v82 = 0), v82))
      {
        v83 = v369[11];
        v84 = v369[10] + 8 * v78;
      }
      else
      {
        v83 = v369[11];
        v84 = v83;
      }
      if (v84 == v83)
        v85 = 0;
      else
        v85 = (uint64_t *)v84;
      v86 = v368[4];
      if (v22 < (v368[5] - v86) >> 3
        && (v87 = *(_QWORD *)(v86 + 8 * v22)) != 0
        && (v88 = *(unsigned __int16 *)(v87 + 2 * (HIDWORD(v20) & 0x7F)),
            v90 = v368[7],
            v89 = v368[8],
            v88 < (v89 - v90) >> 3)
        && (v91 = v90 + 8 * v88, v91 != v89)
        && *(_DWORD *)(v91 + 4) == (_DWORD)v21)
      {
        v92 = v368[11];
        v93 = v368[10] + 8 * v88;
      }
      else
      {
        v92 = v368[11];
        v93 = v92;
      }
      if (v93 == v92)
        v94 = 0;
      else
        v94 = (uint64_t *)v93;
      v95 = v367[4];
      if (v22 < (v367[5] - v95) >> 3
        && (v96 = *(_QWORD *)(v95 + 8 * v22)) != 0
        && (v97 = *(unsigned __int16 *)(v96 + 2 * (HIDWORD(v20) & 0x7F)),
            v99 = v367[7],
            v98 = v367[8],
            v97 < (v98 - v99) >> 3)
        && (v100 = v99 + 8 * v97, v100 != v98)
        && *(_DWORD *)(v100 + 4) == (_DWORD)v21)
      {
        v101 = v367[11];
        v102 = v367[10] + 16 * v97;
      }
      else
      {
        v101 = v367[11];
        v102 = v101;
      }
      if (v102 == v101)
        v103 = 0;
      else
        v103 = (__int128 *)v102;
      v104 = v366[4];
      if (v22 < (v366[5] - v104) >> 3
        && (v105 = *(_QWORD *)(v104 + 8 * v22)) != 0
        && (v106 = *(unsigned __int16 *)(v105 + 2 * (HIDWORD(v20) & 0x7F)),
            v108 = v366[7],
            v107 = v366[8],
            v106 < (v107 - v108) >> 3)
        && (v109 = v108 + 8 * v106, v109 != v107)
        && *(_DWORD *)(v109 + 4) == (_DWORD)v21)
      {
        v110 = v366[11];
        v111 = v366[10] + 8 * v106;
      }
      else
      {
        v110 = v366[11];
        v111 = v110;
      }
      if (v111 == v110)
        v112 = 0;
      else
        v112 = (uint64_t *)v111;
      v113 = v365[4];
      if (v22 < (v365[5] - v113) >> 3
        && (v114 = *(_QWORD *)(v113 + 8 * v22)) != 0
        && (v115 = *(unsigned __int16 *)(v114 + 2 * (HIDWORD(v20) & 0x7F)),
            v117 = v365[7],
            v116 = v365[8],
            v115 < (v116 - v117) >> 3)
        && (v118 = v117 + 8 * v115, v118 != v116)
        && *(_DWORD *)(v118 + 4) == (_DWORD)v21)
      {
        v119 = v365[11];
        v120 = v365[10] + 8 * v115;
      }
      else
      {
        v119 = v365[11];
        v120 = v119;
      }
      if (v120 == v119)
        v121 = 0;
      else
        v121 = (uint64_t *)v120;
      v122 = v364[4];
      if (v22 < (v364[5] - v122) >> 3
        && (v123 = *(_QWORD *)(v122 + 8 * v22)) != 0
        && (v124 = *(unsigned __int16 *)(v123 + 2 * (HIDWORD(v20) & 0x7F)),
            v126 = v364[7],
            v125 = v364[8],
            v124 < (v125 - v126) >> 3)
        && (v127 = v126 + 8 * v124, v127 != v125)
        && *(_DWORD *)(v127 + 4) == (_DWORD)v21)
      {
        v128 = v364[11];
        v129 = v364[10] + 8 * v124;
      }
      else
      {
        v128 = v364[11];
        v129 = v128;
      }
      if (v129 == v128)
        v130 = 0;
      else
        v130 = (uint64_t *)v129;
      v131 = v363[4];
      if (v22 < (v363[5] - v131) >> 3
        && (v132 = *(_QWORD *)(v131 + 8 * v22)) != 0
        && (v133 = *(unsigned __int16 *)(v132 + 2 * (HIDWORD(v20) & 0x7F)),
            v135 = v363[7],
            v134 = v363[8],
            v133 < (v134 - v135) >> 3)
        && (v136 = v135 + 8 * v133, v136 != v134)
        && *(_DWORD *)(v136 + 4) == (_DWORD)v21)
      {
        v137 = v363[11];
        v138 = v363[10] + v133;
      }
      else
      {
        v137 = v363[11];
        v138 = v137;
      }
      v139 = v362[4];
      if (v22 < (v362[5] - v139) >> 3
        && (v140 = *(_QWORD *)(v139 + 8 * v22)) != 0
        && (v141 = *(unsigned __int16 *)(v140 + 2 * (HIDWORD(v20) & 0x7F)),
            v143 = v362[7],
            v142 = v362[8],
            v141 < (v142 - v143) >> 3)
        && (v144 = v143 + 8 * v141, v144 != v142)
        && *(_DWORD *)(v144 + 4) == (_DWORD)v21)
      {
        v145 = v362[11];
        v146 = v362[10] + 8 * v141;
      }
      else
      {
        v145 = v362[11];
        v146 = v145;
      }
      if (v146 == v145)
        v146 = 0;
      v389 = (uint64_t *)v146;
      v147 = v361[4];
      if (v22 < (v361[5] - v147) >> 3
        && (v148 = *(_QWORD *)(v147 + 8 * v22)) != 0
        && (v149 = *(unsigned __int16 *)(v148 + 2 * (HIDWORD(v20) & 0x7F)),
            v151 = v361[7],
            v150 = v361[8],
            v149 < (v150 - v151) >> 3)
        && (v152 = v151 + 8 * v149, v152 != v150)
        && *(_DWORD *)(v152 + 4) == (_DWORD)v21)
      {
        v153 = v361[11];
        v154 = v361[10] + 8 * v149;
      }
      else
      {
        v153 = v361[11];
        v154 = v153;
      }
      if (v154 == v153)
        v155 = 0;
      else
        v155 = (uint64_t *)v154;
      v156 = v9[4];
      if (v22 < (v9[5] - v156) >> 3
        && (v157 = *(_QWORD *)(v156 + 8 * v22)) != 0
        && (v158 = *(unsigned __int16 *)(v157 + 2 * (HIDWORD(v20) & 0x7F)),
            v160 = v9[7],
            v159 = v9[8],
            v158 < (v159 - v160) >> 3)
        && (v161 = v160 + 8 * v158, v161 != v159)
        && *(_DWORD *)(v161 + 4) == (_DWORD)v21)
      {
        v162 = v9[10] + 8 * v158;
      }
      else
      {
        v162 = v9[11];
      }
      v163 = v360[4];
      if (v22 < (v360[5] - v163) >> 3
        && (v164 = *(_QWORD *)(v163 + 8 * v22)) != 0
        && (v165 = *(unsigned __int16 *)(v164 + 2 * (HIDWORD(v20) & 0x7F)),
            v167 = v360[7],
            v166 = v360[8],
            v165 < (v166 - v167) >> 3)
        && (v168 = v167 + 8 * v165, v168 != v166)
        && *(_DWORD *)(v168 + 4) == (_DWORD)v21)
      {
        v169 = v360[11];
        v395 = v360[10] + v165;
      }
      else
      {
        v169 = v360[11];
        v395 = v169;
      }
      v170 = v359[4];
      if (v22 < (v359[5] - v170) >> 3
        && (v171 = *(_QWORD *)(v170 + 8 * v22)) != 0
        && (v172 = *(unsigned __int16 *)(v171 + 2 * (HIDWORD(v20) & 0x7F)),
            v174 = v359[7],
            v173 = v359[8],
            v172 < (v173 - v174) >> 3)
        && (v175 = v174 + 8 * v172, v175 != v173)
        && *(_DWORD *)(v175 + 4) == (_DWORD)v21)
      {
        v176 = v359[11];
        v177 = v359[10] + v172;
      }
      else
      {
        v176 = v359[11];
        v177 = v176;
      }
      v178 = v358[4];
      if (v22 < (v358[5] - v178) >> 3
        && (v179 = *(_QWORD *)(v178 + 8 * v22)) != 0
        && (v180 = *(unsigned __int16 *)(v179 + 2 * (HIDWORD(v20) & 0x7F)),
            v182 = v358[7],
            v181 = v358[8],
            v180 < (v181 - v182) >> 3)
        && (v183 = v182 + 8 * v180, v183 != v181)
        && *(_DWORD *)(v183 + 4) == (_DWORD)v21)
      {
        v184 = v358[11];
        v185 = v358[10] + 24 * v180;
      }
      else
      {
        v184 = v358[11];
        v185 = v184;
      }
      if (v185 == v184)
        v186 = 0;
      else
        v186 = v185;
      v187 = **(_QWORD **)(v19 + 8);
      v188 = *(_QWORD **)v187;
      v189 = *(_QWORD **)(v187 + 8);
      v387 = v65;
      v388 = v103;
      v382 = v121;
      v383 = v130;
      v385 = v85;
      v386 = v94;
      v380 = v155;
      v381 = (uint64_t *)v162;
      v378 = v177;
      v379 = v186;
      v384 = v112;
      v377 = v176;
      v390 = v138;
      v391 = v75;
      v393 = v169;
      if (v188 != v189)
      {
        while (*v188 != 0x41D4E9297E100630)
        {
          v188 += 5;
          if (v188 == v189)
            goto LABEL_208;
        }
      }
      if (v188 == v189)
      {
LABEL_208:
        v191 = 0;
      }
      else
      {
        v191 = (_QWORD *)v188[3];
        v190 = (std::__shared_weak_count *)v188[4];
        if (v190)
        {
          p_shared_owners = (unint64_t *)&v190->__shared_owners_;
          do
            v193 = __ldxr(p_shared_owners);
          while (__stxr(v193 + 1, p_shared_owners));
          do
            v194 = __ldaxr(p_shared_owners);
          while (__stlxr(v194 - 1, p_shared_owners));
          if (!v194)
          {
            ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
            std::__shared_weak_count::__release_weak(v190);
          }
        }
      }
      v195 = *(_QWORD **)(v19 + 8);
      v196 = HIDWORD(*v17);
      v197 = *v17 << 32;
      v406 = &off_1E4280170;
      *(_QWORD *)&v407 = v197;
      DWORD2(v407) = v196;
      v408 = &v406;
      *(_QWORD *)v409 = &off_1E4280170;
      v410 = v409;
      *(_QWORD *)&v409[8] = v197;
      *(_DWORD *)&v409[16] = v196;
      v411 = 0;
      ecs2::Runtime::queueCommand(v195, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
      v411 = -1;
      v198 = v408;
      if (v408 == &v406)
      {
        v198 = &v406;
        v199 = 4;
      }
      else
      {
        if (!v408)
          goto LABEL_216;
        v199 = 5;
      }
      (*v198)[v199]();
LABEL_216:
      v200 = gdc::Registry::create(*(gdc::Registry **)(*(_QWORD *)(v19 + 8) + 8));
      RenderItem = md::VKMRenderResourcesStore::createRenderItem((uint64_t)v191, v397);
      v203 = v202;
      v204 = *(_QWORD **)(v19 + 8);
      v205 = operator new(0x28uLL);
      *v205 = &off_1E427DAA0;
      v205[1] = RenderItem;
      v205[2] = v203;
      v205[3] = 5445;
      v205[4] = v200;
      v410 = v205;
      v408 = 0;
      v411 = 0;
      ecs2::Runtime::queueCommand(v204, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
      v411 = -1;
      v206 = v408;
      if (v408 == &v406)
      {
        v206 = &v406;
        v207 = 4;
      }
      else
      {
        if (!v408)
          goto LABEL_223;
        v207 = 5;
      }
      (*v206)[v207]();
LABEL_223:
      v208 = *(_QWORD **)(a1 + 8);
      v406 = &off_1E427E550;
      *(_QWORD *)&v407 = 0;
      *((_QWORD *)&v407 + 1) = v200;
      v408 = &v406;
      v410 = v409;
      *(_QWORD *)v409 = &off_1E427E550;
      *(_OWORD *)&v409[8] = v407;
      v411 = 0;
      ecs2::Runtime::queueCommand(v208, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
      v411 = -1;
      v209 = v408;
      if (v408 == &v406)
      {
        v209 = &v406;
        v210 = 4;
      }
      else
      {
        if (!v408)
          goto LABEL_230;
        v210 = 5;
      }
      (*v209)[v210]();
LABEL_230:
      v211 = *v399;
      if (v211 == 3)
        v212 = 2;
      else
        v212 = v211 == 2;
      v213 = *(_QWORD **)(a1 + 8);
      v406 = &off_1E427EF28;
      *(_QWORD *)&v407 = 1;
      *((_QWORD *)&v407 + 1) = v200;
      v408 = &v406;
      v410 = v409;
      *(_QWORD *)v409 = &off_1E427EF28;
      *(_OWORD *)&v409[8] = v407;
      v411 = 0;
      ecs2::Runtime::queueCommand(v213, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
      v411 = -1;
      v214 = v408;
      if (v408 == &v406)
      {
        v214 = &v406;
        v215 = 4;
      }
      else
      {
        if (!v408)
          goto LABEL_240;
        v215 = 5;
      }
      (*v214)[v215]();
LABEL_240:
      v216 = *(_QWORD **)(a1 + 8);
      v406 = &off_1E427DFF8;
      *(_QWORD *)&v407 = v200 << 32;
      v400 = v200 << 32;
      DWORD2(v407) = HIDWORD(v200);
      v408 = &v406;
      *(_QWORD *)v409 = &off_1E427DFF8;
      v410 = v409;
      *(_QWORD *)&v409[8] = v200 << 32;
      *(_DWORD *)&v409[16] = HIDWORD(v200);
      v411 = 0;
      ecs2::Runtime::queueCommand(v216, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
      v411 = -1;
      v217 = v408;
      if (v408 == &v406)
      {
        v217 = &v406;
        v218 = 4;
      }
      else
      {
        if (!v408)
          goto LABEL_247;
        v218 = 5;
      }
      (*v217)[v218]();
LABEL_247:
      v219 = *(_QWORD **)(a1 + 8);
      v220 = operator new(0x28uLL);
      *v220 = &off_1E427E508;
      v220[1] = 0x9E1F385137C59FBLL;
      v220[2] = "md::ls::ShadowPassItem]";
      v220[3] = 22;
      v220[4] = v200;
      v410 = v220;
      v408 = 0;
      v411 = 0;
      ecs2::Runtime::queueCommand(v219, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
      v411 = -1;
      v221 = v408;
      if (v408 == &v406)
      {
        v221 = &v406;
        v222 = 4;
      }
      else
      {
        if (!v408)
          goto LABEL_254;
        v222 = 5;
      }
      (*v221)[v222]();
LABEL_254:
      v223 = *(_QWORD **)(a1 + 8);
      v224 = operator new(0x28uLL);
      *(_QWORD *)v224 = &off_1E427EFB8;
      v224[8] = 0;
      *((_QWORD *)v224 + 2) = 0;
      *((_QWORD *)v224 + 3) = v212;
      *((_QWORD *)v224 + 4) = v200;
      v410 = v224;
      v408 = 0;
      v411 = 0;
      ecs2::Runtime::queueCommand(v223, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
      v411 = -1;
      v225 = v408;
      if (v408 == &v406)
      {
        v225 = &v406;
        v226 = 4;
      }
      else
      {
        if (!v408)
          goto LABEL_261;
        v226 = 5;
      }
      (*v225)[v226]();
LABEL_261:
      v227 = *(_QWORD **)(a1 + 8);
      v406 = &off_1E427F798;
      *(_QWORD *)&v407 = v200 << 32;
      DWORD2(v407) = HIDWORD(v200);
      v408 = &v406;
      *(_QWORD *)v409 = &off_1E427F798;
      v410 = v409;
      *(_QWORD *)&v409[8] = v200 << 32;
      *(_DWORD *)&v409[16] = HIDWORD(v200);
      v411 = 0;
      ecs2::Runtime::queueCommand(v227, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
      v411 = -1;
      v228 = v408;
      if (v408 == &v406)
      {
        v228 = &v406;
        v229 = 4;
      }
      else
      {
        if (!v408)
          goto LABEL_268;
        v229 = 5;
      }
      (*v228)[v229]();
LABEL_268:
      v230 = *(_QWORD **)(a1 + 8);
      v406 = &off_1E427EF70;
      *(_QWORD *)&v407 = 4;
      *((_QWORD *)&v407 + 1) = v200;
      v408 = &v406;
      v410 = v409;
      *(_QWORD *)v409 = &off_1E427EF70;
      *(_OWORD *)&v409[8] = v407;
      v411 = 0;
      ecs2::Runtime::queueCommand(v230, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
      v411 = -1;
      v231 = v408;
      if (v408 == &v406)
      {
        v231 = &v406;
        v232 = 4;
      }
      else
      {
        if (!v408)
          goto LABEL_275;
        v232 = 5;
      }
      (*v231)[v232]();
LABEL_275:
      if (*v396 == 1)
      {
        v233 = *(_QWORD **)(a1 + 8);
        v406 = &off_1E427D548;
        *(_QWORD *)&v407 = v200 << 32;
        DWORD2(v407) = HIDWORD(v200);
        v408 = &v406;
        *(_QWORD *)v409 = &off_1E427D548;
        v410 = v409;
        *(_QWORD *)&v409[8] = v200 << 32;
        *(_DWORD *)&v409[16] = HIDWORD(v200);
        v411 = 0;
        ecs2::Runtime::queueCommand(v233, (uint64_t)v409);
        if (v411 != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
        v411 = -1;
        v234 = v408;
        if (v408 == &v406)
        {
          v234 = &v406;
          v235 = 4;
          goto LABEL_282;
        }
        if (v408)
        {
          v235 = 5;
LABEL_282:
          (*v234)[v235]();
        }
      }
      v236 = *(_QWORD **)(a1 + 8);
      if (v395 == v393 || !v395)
      {
        v406 = &off_1E427F9D8;
        *(_QWORD *)&v407 = v400 | 3;
        DWORD2(v407) = HIDWORD(v200);
        v408 = &v406;
        *(_QWORD *)v409 = &off_1E427F9D8;
        v410 = v409;
        *(_QWORD *)&v409[8] = v400 | 3;
        *(_DWORD *)&v409[16] = HIDWORD(v200);
        v411 = 0;
        ecs2::Runtime::queueCommand(v236, (uint64_t)v409);
        if (v411 != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
        v411 = -1;
        v239 = v408;
        if (v408 == &v406)
        {
          v239 = &v406;
          v240 = 4;
LABEL_296:
          (*v239)[v240]();
        }
        else if (v408)
        {
          v240 = 5;
          goto LABEL_296;
        }
        v241 = *(_QWORD **)(a1 + 8);
        v406 = &off_1E427DC98;
        *(_QWORD *)&v407 = v200 << 32;
        DWORD2(v407) = HIDWORD(v200);
        v408 = &v406;
        *(_QWORD *)v409 = &off_1E427DC98;
        v410 = v409;
        *(_QWORD *)&v409[8] = v200 << 32;
        *(_DWORD *)&v409[16] = HIDWORD(v200);
        v411 = 0;
        ecs2::Runtime::queueCommand(v241, (uint64_t)v409);
        if (v411 != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
        v411 = -1;
        v242 = v408;
        if (v408 == &v406)
        {
          v242 = &v406;
          v243 = 4;
LABEL_303:
          (*v242)[v243]();
        }
        else if (v408)
        {
          v243 = 5;
          goto LABEL_303;
        }
        v244 = *(_QWORD **)(a1 + 8);
        v245 = v400 | *v376;
        v246 = &off_1E4281D48;
        goto LABEL_308;
      }
      v406 = &off_1E427D5D8;
      *(_QWORD *)&v407 = v200 << 32;
      DWORD2(v407) = HIDWORD(v200);
      v408 = &v406;
      *(_QWORD *)v409 = &off_1E427D5D8;
      v410 = v409;
      *(_QWORD *)&v409[8] = v200 << 32;
      *(_DWORD *)&v409[16] = HIDWORD(v200);
      v411 = 0;
      ecs2::Runtime::queueCommand(v236, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
      v411 = -1;
      v237 = v408;
      if (v408 == &v406)
      {
        v237 = &v406;
        v238 = 4;
        goto LABEL_306;
      }
      if (v408)
      {
        v238 = 5;
LABEL_306:
        (*v237)[v238]();
      }
      v244 = *(_QWORD **)(a1 + 8);
      v245 = v400 | 3;
      v246 = &off_1E427F9D8;
LABEL_308:
      v406 = v246;
      *(_QWORD *)&v407 = v245;
      DWORD2(v407) = HIDWORD(v200);
      v408 = &v406;
      *(_QWORD *)v409 = v246;
      v410 = v409;
      *(_QWORD *)&v409[8] = v245;
      *(_DWORD *)&v409[16] = HIDWORD(v200);
      v411 = 0;
      ecs2::Runtime::queueCommand(v244, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
      v411 = -1;
      v247 = v408;
      if (v408 == &v406)
      {
        v247 = &v406;
        v248 = 4;
      }
      else
      {
        if (!v408)
          goto LABEL_315;
        v248 = 5;
      }
      (*v247)[v248]();
LABEL_315:
      v249 = *(_QWORD **)(a1 + 8);
      v250 = (char *)operator new(0x38uLL);
      *((_QWORD *)v250 + 1) = 0;
      *((_QWORD *)v250 + 2) = 0;
      *(_QWORD *)v250 = &off_1E427E9D0;
      v250[24] = 0;
      *(_WORD *)(v250 + 25) = 257;
      *(_DWORD *)(v250 + 27) = 0;
      v250[31] = 2;
      *((_QWORD *)v250 + 4) = 0;
      v250[40] = 0;
      *(_QWORD *)(v250 + 44) = v200;
      v410 = v250;
      v408 = 0;
      v411 = 0;
      ecs2::Runtime::queueCommand(v249, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
      v411 = -1;
      v251 = v408;
      v252 = HIDWORD(v200);
      if (v408 == &v406)
      {
        v251 = &v406;
        v254 = 4;
        v253 = a1;
      }
      else
      {
        v253 = a1;
        if (!v408)
          goto LABEL_322;
        v254 = 5;
      }
      (*v251)[v254]();
LABEL_322:
      v255 = v191[7];
      if (!v255)
      {
        v256 = md::DaVinciRenderStateCache::renderState((unsigned __int8 **)(v191[1312] + 2424), 3, 1, 1, 1, 0, 0, 3);
        v191[3] = v256;
        v406 = (uint64_t (**)())v256;
        v255 = geo::packed_array<md::RenderStateStorage,geo::handle<md::RenderStateItem>>::push_back(v191 + 91, &v406);
        *(int64x2_t *)v409 = vdupq_n_s64(1uLL);
        v409[16] = 1;
        std::__hash_table<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::hash<geo::handle<md::RenderStateItem>>,std::equal_to<geo::handle<md::RenderStateItem>>,true>,std::__unordered_map_equal<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::equal_to<geo::handle<md::RenderStateItem>>,std::hash<geo::handle<md::RenderStateItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::RenderStateItem>,geo::handle<md::RenderStateItem> const&,md::Counter>((uint64_t)(v191 + 86), v255, v255, (uint64_t)v409);
        v191[7] = v255;
        v252 = HIDWORD(v200);
        v253 = a1;
      }
      v257 = *(_QWORD **)(v253 + 8);
      v406 = &off_1E42804D0;
      *(_QWORD *)&v407 = v200 << 32;
      DWORD2(v407) = v252;
      v408 = &v406;
      *(_QWORD *)v409 = &off_1E42804D0;
      v410 = v409;
      *(_QWORD *)&v409[8] = v200 << 32;
      *(_DWORD *)&v409[16] = v252;
      v411 = 0;
      ecs2::Runtime::queueCommand(v257, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
      v411 = -1;
      v258 = v408;
      if (v408 == &v406)
      {
        v258 = &v406;
        v259 = 4;
      }
      else
      {
        if (!v408)
          goto LABEL_331;
        v259 = 5;
      }
      (*v258)[v259]();
LABEL_331:
      v260 = *(_QWORD **)(v253 + 8);
      v406 = &off_1E4281E68;
      *(_QWORD *)&v407 = v200 << 32;
      DWORD2(v407) = v252;
      v408 = &v406;
      *(_QWORD *)v409 = &off_1E4281E68;
      v410 = v409;
      *(_QWORD *)&v409[8] = v200 << 32;
      *(_DWORD *)&v409[16] = v252;
      v411 = 0;
      ecs2::Runtime::queueCommand(v260, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
      v411 = -1;
      v261 = v408;
      if (v408 == &v406)
      {
        v261 = &v406;
        v262 = 4;
      }
      else
      {
        if (!v408)
          goto LABEL_338;
        v262 = 5;
      }
      (*v261)[v262]();
LABEL_338:
      v263 = *(_QWORD **)(v253 + 8);
      v406 = &off_1E427D740;
      *(_QWORD *)&v407 = v200 << 32;
      DWORD2(v407) = v252;
      v408 = &v406;
      *(_QWORD *)v409 = &off_1E427D740;
      v410 = v409;
      *(_QWORD *)&v409[8] = v200 << 32;
      *(_DWORD *)&v409[16] = v252;
      v411 = 0;
      ecs2::Runtime::queueCommand(v263, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
      v411 = -1;
      v264 = v408;
      if (v408 == &v406)
      {
        v264 = &v406;
        v265 = 4;
      }
      else
      {
        if (!v408)
          goto LABEL_345;
        v265 = 5;
      }
      (*v264)[v265]();
LABEL_345:
      v266 = *(_QWORD **)(v253 + 8);
      v406 = &off_1E427D938;
      *(_QWORD *)&v407 = v255;
      *((_QWORD *)&v407 + 1) = v200;
      v408 = &v406;
      v410 = v409;
      *(_QWORD *)v409 = &off_1E427D938;
      *(_OWORD *)&v409[8] = v407;
      v411 = 0;
      ecs2::Runtime::queueCommand(v266, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
      v411 = -1;
      v267 = v408;
      if (v408 == &v406)
      {
        v267 = &v406;
        v268 = 4;
      }
      else
      {
        if (!v408)
          goto LABEL_352;
        v268 = 5;
      }
      (*v267)[v268]();
LABEL_352:
      v269 = *(_QWORD **)(v253 + 8);
      v406 = &off_1E427E598;
      *(_QWORD *)&v407 = 1;
      *((_QWORD *)&v407 + 1) = v200;
      v408 = &v406;
      v410 = v409;
      *(_QWORD *)v409 = &off_1E427E598;
      *(_OWORD *)&v409[8] = v407;
      v411 = 0;
      ecs2::Runtime::queueCommand(v269, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
      v411 = -1;
      v270 = v408;
      if (v408 == &v406)
      {
        v270 = &v406;
        v271 = 4;
      }
      else
      {
        if (!v408)
          goto LABEL_359;
        v271 = 5;
      }
      (*v270)[v271]();
LABEL_359:
      v272 = **(_QWORD **)(v253 + 8);
      v273 = *(_QWORD **)v272;
      v274 = *(_QWORD **)(v272 + 8);
      if (v273 != v274)
      {
        while (*v273 != 0x41D4E9297E100630)
        {
          v273 += 5;
          if (v273 == v274)
            goto LABEL_370;
        }
      }
      if (v273 == v274)
      {
LABEL_370:
        v275 = 0;
      }
      else
      {
        v275 = v273[3];
        v276 = (std::__shared_weak_count *)v273[4];
        if (v276)
        {
          v277 = (unint64_t *)&v276->__shared_owners_;
          do
            v278 = __ldxr(v277);
          while (__stxr(v278 + 1, v277));
          do
            v279 = __ldaxr(v277);
          while (__stlxr(v279 - 1, v277));
          if (!v279)
          {
            ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
            std::__shared_weak_count::__release_weak(v276);
          }
        }
      }
      AssociationItemStorage = (_QWORD *)md::VKMRenderResourcesStore::getAssociationItemStorage(v275, *v397, 1);
      v281 = AssociationItemStorage;
      v283 = (unint64_t *)AssociationItemStorage[2];
      v282 = AssociationItemStorage[3];
      if ((unint64_t)v283 >= v282)
      {
        v286 = (char *)AssociationItemStorage[1];
        v287 = ((char *)v283 - v286) >> 3;
        v288 = v287 + 1;
        if ((unint64_t)(v287 + 1) >> 61)
          abort();
        v289 = v282 - (_QWORD)v286;
        if (v289 >> 2 > v288)
          v288 = v289 >> 2;
        if ((unint64_t)v289 >= 0x7FFFFFFFFFFFFFF8)
          v290 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v290 = v288;
        if (v290)
        {
          if (v290 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v291 = (char *)operator new(8 * v290);
        }
        else
        {
          v291 = 0;
        }
        v292 = (unint64_t *)&v291[8 * v287];
        *v292 = v200;
        v284 = v292 + 1;
        if (v283 != (unint64_t *)v286)
        {
          v293 = (char *)v283 - v286 - 8;
          if (v293 < 0x58)
            goto LABEL_529;
          if ((unint64_t)(v286 - v291) < 0x20)
            goto LABEL_529;
          v294 = (v293 >> 3) + 1;
          v295 = &v291[8 * v287 - 16];
          v296 = v283 - 2;
          v297 = v294 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v298 = *(_OWORD *)v296;
            *((_OWORD *)v295 - 1) = *((_OWORD *)v296 - 1);
            *(_OWORD *)v295 = v298;
            v295 -= 32;
            v296 -= 4;
            v297 -= 4;
          }
          while (v297);
          v292 -= v294 & 0x3FFFFFFFFFFFFFFCLL;
          v283 -= v294 & 0x3FFFFFFFFFFFFFFCLL;
          if (v294 != (v294 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_529:
            do
            {
              v299 = *--v283;
              *--v292 = v299;
            }
            while (v283 != (unint64_t *)v286);
          }
          v283 = (unint64_t *)v281[1];
        }
        v281[1] = v292;
        v281[2] = v284;
        v281[3] = &v291[8 * v290];
        v285 = a1;
        if (v283)
          operator delete(v283);
      }
      else
      {
        *v283 = v200;
        v284 = v283 + 1;
        v285 = a1;
      }
      v281[2] = v284;
      v300 = *(_QWORD **)(v285 + 8);
      v403 = *(_OWORD *)v397;
      v301 = (char *)operator new(0x20uLL);
      *(_QWORD *)v301 = &off_1E427E8F8;
      *(_OWORD *)(v301 + 8) = v403;
      *((_QWORD *)v301 + 3) = v200;
      v410 = v301;
      v408 = 0;
      v411 = 0;
      ecs2::Runtime::queueCommand(v300, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(char *, _BYTE *))off_1E42FB340[v411])(&v405, v409);
      v411 = -1;
      v302 = v408;
      if (v408 == &v406)
      {
        v302 = &v406;
        v303 = 4;
        v19 = a1;
      }
      else
      {
        v19 = a1;
        if (!v408)
          goto LABEL_400;
        v303 = 5;
      }
      (*v302)[v303]();
LABEL_400:
      if (v389)
      {
        v304 = *(_QWORD **)(v19 + 8);
        v305 = *v389;
        v406 = &off_1E427DC08;
        *(_QWORD *)&v407 = v305;
        *((_QWORD *)&v407 + 1) = v200;
        v408 = &v406;
        v410 = v409;
        *(_QWORD *)v409 = &off_1E427DC08;
        *(_OWORD *)&v409[8] = v407;
        v411 = 0;
        ecs2::Runtime::queueCommand(v304, (uint64_t)v409);
        if (v411 != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
        v411 = -1;
        v306 = v408;
        if (v408 == &v406)
        {
          v306 = &v406;
          v307 = 4;
          goto LABEL_407;
        }
        if (v408)
        {
          v307 = 5;
LABEL_407:
          (*v306)[v307]();
        }
      }
      if (v390 != v137 && v390)
      {
        v308 = *(_QWORD **)(v19 + 8);
        v406 = &off_1E427D6B0;
        *(_QWORD *)&v407 = v200 << 32;
        DWORD2(v407) = HIDWORD(v200);
        v408 = &v406;
        *(_QWORD *)v409 = &off_1E427D6B0;
        v410 = v409;
        *(_QWORD *)&v409[8] = v200 << 32;
        *(_DWORD *)&v409[16] = HIDWORD(v200);
        v411 = 0;
        ecs2::Runtime::queueCommand(v308, (uint64_t)v409);
        if (v411 != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
        v411 = -1;
        v309 = v408;
        if (v408 == &v406)
        {
          v309 = &v406;
          v310 = 4;
        }
        else
        {
          if (!v408)
            goto LABEL_417;
          v310 = 5;
        }
        (*v309)[v310]();
      }
LABEL_417:
      if (!v391)
        goto LABEL_425;
      v311 = *(_QWORD **)(v19 + 8);
      *(_QWORD *)&v403 = *(_QWORD *)v391;
      BYTE8(v403) = *(_BYTE *)(v391 + 8);
      *(_QWORD *)v409 = v403;
      v409[8] = BYTE8(v403);
      v312 = (char *)operator new(0x20uLL);
      *(_QWORD *)v312 = &off_1E4281B98;
      *(_OWORD *)(v312 + 8) = *(_OWORD *)v409;
      *((_QWORD *)v312 + 3) = v200;
      v410 = v312;
      v408 = 0;
      v411 = 0;
      ecs2::Runtime::queueCommand(v311, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(char *, _BYTE *))off_1E42FB340[v411])(&v405, v409);
      v411 = -1;
      v313 = v408;
      if (v408 == &v406)
      {
        v313 = &v406;
        v314 = 4;
        v19 = a1;
      }
      else
      {
        v19 = a1;
        if (!v408)
          goto LABEL_425;
        v314 = 5;
      }
      (*v313)[v314]();
LABEL_425:
      if (!v387)
        goto LABEL_433;
      v315 = *(_QWORD **)(v19 + 8);
      v316 = *v387;
      v406 = &off_1E427DB78;
      *(_QWORD *)&v407 = v316;
      *((_QWORD *)&v407 + 1) = v200;
      v408 = &v406;
      v410 = v409;
      *(_QWORD *)v409 = &off_1E427DB78;
      *(_OWORD *)&v409[8] = v407;
      v411 = 0;
      ecs2::Runtime::queueCommand(v315, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
      v411 = -1;
      v317 = v408;
      if (v408 == &v406)
      {
        v317 = &v406;
        v318 = 4;
      }
      else
      {
        if (!v408)
          goto LABEL_433;
        v318 = 5;
      }
      (*v317)[v318]();
LABEL_433:
      if (!v385)
        goto LABEL_441;
      v319 = *(_QWORD **)(v19 + 8);
      v320 = *v385;
      v406 = &off_1E427FA68;
      *(_QWORD *)&v407 = v320;
      *((_QWORD *)&v407 + 1) = v200;
      v408 = &v406;
      v410 = v409;
      *(_QWORD *)v409 = &off_1E427FA68;
      *(_OWORD *)&v409[8] = v407;
      v411 = 0;
      ecs2::Runtime::queueCommand(v319, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
      v411 = -1;
      v321 = v408;
      if (v408 == &v406)
      {
        v321 = &v406;
        v322 = 4;
      }
      else
      {
        if (!v408)
          goto LABEL_441;
        v322 = 5;
      }
      (*v321)[v322]();
LABEL_441:
      if (!v386)
        goto LABEL_449;
      v323 = *(_QWORD **)(v19 + 8);
      v324 = *v386;
      v406 = &off_1E4280998;
      *(_QWORD *)&v407 = v324;
      *((_QWORD *)&v407 + 1) = v200;
      v408 = &v406;
      v410 = v409;
      *(_QWORD *)v409 = &off_1E4280998;
      *(_OWORD *)&v409[8] = v407;
      v411 = 0;
      ecs2::Runtime::queueCommand(v323, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
      v411 = -1;
      v325 = v408;
      if (v408 == &v406)
      {
        v325 = &v406;
        v326 = 4;
      }
      else
      {
        if (!v408)
          goto LABEL_449;
        v326 = 5;
      }
      (*v325)[v326]();
LABEL_449:
      if (!v384)
        goto LABEL_457;
      v327 = *(_QWORD **)(v19 + 8);
      v328 = *v384;
      v406 = &off_1E427DD70;
      *(_QWORD *)&v407 = v328;
      *((_QWORD *)&v407 + 1) = v200;
      v408 = &v406;
      v410 = v409;
      *(_QWORD *)v409 = &off_1E427DD70;
      *(_OWORD *)&v409[8] = v407;
      v411 = 0;
      ecs2::Runtime::queueCommand(v327, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
      v411 = -1;
      v329 = v408;
      if (v408 == &v406)
      {
        v329 = &v406;
        v330 = 4;
      }
      else
      {
        if (!v408)
          goto LABEL_457;
        v330 = 5;
      }
      (*v329)[v330]();
LABEL_457:
      if (!v388)
        goto LABEL_465;
      v331 = *(_QWORD **)(v19 + 8);
      v403 = *v388;
      v332 = (char *)operator new(0x20uLL);
      *(_QWORD *)v332 = &off_1E427D500;
      *(_OWORD *)(v332 + 8) = v403;
      *((_QWORD *)v332 + 3) = v200;
      v410 = v332;
      v408 = 0;
      v411 = 0;
      ecs2::Runtime::queueCommand(v331, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(char *, _BYTE *))off_1E42FB340[v411])(&v405, v409);
      v411 = -1;
      v333 = v408;
      if (v408 == &v406)
      {
        v333 = &v406;
        v334 = 4;
        v19 = a1;
      }
      else
      {
        v19 = a1;
        if (!v408)
          goto LABEL_465;
        v334 = 5;
      }
      (*v333)[v334]();
LABEL_465:
      if (!v382)
        goto LABEL_473;
      v335 = *(_QWORD **)(v19 + 8);
      v336 = *v382;
      v406 = &off_1E427FAB0;
      *(_QWORD *)&v407 = v336;
      *((_QWORD *)&v407 + 1) = v200;
      v408 = &v406;
      v410 = v409;
      *(_QWORD *)v409 = &off_1E427FAB0;
      *(_OWORD *)&v409[8] = v407;
      v411 = 0;
      ecs2::Runtime::queueCommand(v335, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
      v411 = -1;
      v337 = v408;
      if (v408 == &v406)
      {
        v337 = &v406;
        v338 = 4;
      }
      else
      {
        if (!v408)
          goto LABEL_473;
        v338 = 5;
      }
      (*v337)[v338]();
LABEL_473:
      if (!v383)
        goto LABEL_481;
      v339 = *(_QWORD **)(v19 + 8);
      v340 = *v383;
      v406 = &off_1E4281F40;
      *(_QWORD *)&v407 = v340;
      *((_QWORD *)&v407 + 1) = v200;
      v408 = &v406;
      v410 = v409;
      *(_QWORD *)v409 = &off_1E4281F40;
      *(_OWORD *)&v409[8] = v407;
      v411 = 0;
      ecs2::Runtime::queueCommand(v339, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
      v411 = -1;
      v341 = v408;
      if (v408 == &v406)
      {
        v341 = &v406;
        v342 = 4;
      }
      else
      {
        if (!v408)
          goto LABEL_481;
        v342 = 5;
      }
      (*v341)[v342]();
LABEL_481:
      if (!v380)
        goto LABEL_489;
      v343 = *(_QWORD **)(v19 + 8);
      v344 = *v380;
      v406 = &off_1E427E118;
      *(_QWORD *)&v407 = v344;
      *((_QWORD *)&v407 + 1) = v200;
      v408 = &v406;
      v410 = v409;
      *(_QWORD *)v409 = &off_1E427E118;
      *(_OWORD *)&v409[8] = v407;
      v411 = 0;
      ecs2::Runtime::queueCommand(v343, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
      v411 = -1;
      v345 = v408;
      if (v408 == &v406)
      {
        v345 = &v406;
        v346 = 4;
      }
      else
      {
        if (!v408)
          goto LABEL_489;
        v346 = 5;
      }
      (*v345)[v346]();
LABEL_489:
      v347 = *(_QWORD **)(v19 + 8);
      v348 = *v381;
      v406 = &off_1E4280248;
      *(_QWORD *)&v407 = v348;
      *((_QWORD *)&v407 + 1) = v200;
      v408 = &v406;
      v410 = v409;
      *(_QWORD *)v409 = &off_1E4280248;
      *(_OWORD *)&v409[8] = v407;
      v411 = 0;
      ecs2::Runtime::queueCommand(v347, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
      v411 = -1;
      result = (uint64_t)v408;
      if (v408 == &v406)
      {
        result = (uint64_t)&v406;
        v349 = 4;
        goto LABEL_495;
      }
      if (v408)
      {
        v349 = 5;
LABEL_495:
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v349))();
      }
      if (v378 != v377 && v378)
      {
        v350 = *(_QWORD **)(v19 + 8);
        v406 = &off_1E427DF68;
        *(_QWORD *)&v407 = v200 << 32;
        DWORD2(v407) = HIDWORD(v200);
        v408 = &v406;
        *(_QWORD *)v409 = &off_1E427DF68;
        v410 = v409;
        *(_QWORD *)&v409[8] = v200 << 32;
        *(_DWORD *)&v409[16] = HIDWORD(v200);
        v411 = 0;
        ecs2::Runtime::queueCommand(v350, (uint64_t)v409);
        if (v411 != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[v411])(&v403, v409);
        v411 = -1;
        result = (uint64_t)v408;
        if (v408 == &v406)
        {
          result = (uint64_t)&v406;
          v351 = 4;
        }
        else
        {
          if (!v408)
            goto LABEL_505;
          v351 = 5;
        }
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v351))();
      }
LABEL_505:
      if (!v379)
        goto LABEL_513;
      v352 = *(_QWORD **)(v19 + 8);
      v403 = *(_OWORD *)v379;
      v404 = *(_QWORD *)(v379 + 16);
      v353 = (char *)operator new(0x28uLL);
      *(_QWORD *)v353 = &off_1E427E040;
      *(_OWORD *)(v353 + 8) = v403;
      *((_QWORD *)v353 + 3) = v404;
      *((_QWORD *)v353 + 4) = v200;
      v410 = v353;
      v408 = 0;
      v411 = 0;
      ecs2::Runtime::queueCommand(v352, (uint64_t)v409);
      if (v411 != -1)
        ((void (*)(char *, _BYTE *))off_1E42FB340[v411])(&v405, v409);
      v411 = -1;
      result = (uint64_t)v408;
      if (v408 == &v406)
      {
        result = (uint64_t)&v406;
        v354 = 4;
        v19 = a1;
      }
      else
      {
        v19 = a1;
        if (!v408)
          goto LABEL_513;
        v354 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v354))();
LABEL_513:
      v12 = v402;
      v355 = *(_QWORD **)(v401[0] + 32);
      while (1)
      {
        v402 = ++v12;
        if (v12 == v355)
          break;
        result = gdc::RegistryQueryView<gdc::All<md::ls::SliceAssignmentT<(md::SliceType)7> const,md::ls::RenderableMeshVertexFormat const,md::ls::TileType const,md::ls::RequiresDepthPeel const,md::ls::MeshLayerTypeV const,md::ls::IntendedSceneLayer const,md::ls::PendingProcessing const>,gdc::Any<md::ls::AssociationHandle,md::ls::PrepassConstantDataHandle,md::ls::ShadowConstantDataHandle,md::ls::PreserveHeight,md::ls::HasMeshHandle,md::ls::PositionScaleInfoConstantDataHandle,md::ls::ViewConstantDataHandle,md::ls::TransformConstantDataHandle,md::ls::IndexRange,md::ls::NormalsHandle,md::ls::InstanceTransformHandle,md::ls::UVsHandle,md::ls::NeedsZBias,md::ls::ClippingConstantDataHandle,md::ls::IsMercator,md::ls::ElevationHandle>,gdc::None<>>::Iterator::isValid(v401);
        if ((_DWORD)result)
          goto LABEL_22;
      }
      v12 = v355;
LABEL_22:
      v17 = v356;
      v16 = v375;
    }
    while (v357 != v12);
  }
  *v17 = 0xFFFFFFFF00000000;
  *(_QWORD *)(v19 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::MeshRenderableID>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x8DCCA4FD35258189;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x8DCCA4FD35258189;
      if (*(_QWORD *)&v3 <= 0x8DCCA4FD35258189)
        v5 = 0x8DCCA4FD35258189 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x8DCCA4FD35258189;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x8DCCA4FD35258189)
            {
              if (v7[2] == 0x8DCCA4FD35258189)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x8DCCA4FD35258189)
          {
            if (v7[2] == 0x8DCCA4FD35258189)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::MeshRenderableID]";
  *(_QWORD *)(v11 + 24) = 24;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271B98;
  *(_QWORD *)(v11 + 8) = 0x8DCCA4FD35258189;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x8DCCA4FD35258189, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x8DCCA4FD35258189;
  v15[1] = "md::ls::MeshRenderableID]";
  v15[2] = 24;
  gdc::Registry::_registerStorageDataSignals(a1, 0x8DCCA4FD35258189, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F708D98(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)4>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xBDB1DC42A0C30FD6;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xBDB1DC42A0C30FD6;
      if (*(_QWORD *)&v3 <= 0xBDB1DC42A0C30FD6)
        v5 = 0xBDB1DC42A0C30FD6 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xBDB1DC42A0C30FD6;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xBDB1DC42A0C30FD6)
            {
              if (v7[2] == 0xBDB1DC42A0C30FD6)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xBDB1DC42A0C30FD6)
          {
            if (v7[2] == 0xBDB1DC42A0C30FD6)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::SliceAssignmentT<md::SliceType::CulledShadow>]";
  *(_QWORD *)(v11 + 24) = 53;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271E38;
  *(_QWORD *)(v11 + 8) = 0xBDB1DC42A0C30FD6;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xBDB1DC42A0C30FD6, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xBDB1DC42A0C30FD6;
  v15[1] = "md::ls::SliceAssignmentT<md::SliceType::CulledShadow>]";
  v15[2] = 53;
  gdc::Registry::_registerStorageDataSignals(a1, 0xBDB1DC42A0C30FD6, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F708FC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)4>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)4>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)4>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)4>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::MeshRenderableID>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MeshRenderableID>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(v15 - 8);
  a1[11] = v15 - 8;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MeshRenderableID>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MeshRenderableID>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateMainRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateMainRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284148;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateMainRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284148;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateMainRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;
  char **v3;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x4F8uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 1272;
  v3 = (char **)a1;
  _ZZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13HasMeshHandleENS4_35PositionScaleInfoConstantDataHandleENS4_22ViewConstantDataHandleENS4_27TransformConstantDataHandleENS4_18StyleDataKeyHandleENS4_26StyleEmissiveDataKeyHandleENS4_29StyleCameraConstantDataHandleENS4_15ColorDataHandleENS4_10IndexRangeENS4_38StyleGroundOcclusionConstantDataHandleENS4_26SharedMaterialZIndexHandleENS4_17AssociationHandleENS4_13NormalsHandleENS4_23InstanceTransformHandleENS4_9UVsHandleENS4_31StyleRouteLineMaskDataKeyHandleENS4_15ElevationHandleENS4_20TextureHandleForTypeIN7DaVinci14DiffuseTextureEEENS4_35LandCoverSettingsConstantDataHandleENS4_24ShadowConstantDataHandleENS4_25PrepassConstantDataHandleENS4_35ColorCorrectionFactorConstantHandleENS4_26ClippingConstantDataHandleENS4_24PlanarConstantDataHandleENSM_INSN_10TexTextureEEENSM_INSN_15EmissiveTextureEEENSM_INSN_14OverlayTextureEEENS4_29BlendRasterConstantDataHandleENS4_31RasterOverlayConstantDataHandleENS4_40FlyoverCommonTransformConstantDataHandleENS4_30FlyoverCommonS2TransformHandleENS4_28FlyoverCommonTexcoordsHandleENS4_27FlyoverCommonMaterialHandleENS4_29FlyoverClipConstantDataHandleENSM_IN7Flyover14DiffuseTextureEEENSM_INS19_12NightTextureEEENS4_26HasStyleAttributeRasterSetENS4_16NeedsClimateTintENS4_17CustomRenderStateENS4_19ColorRampDataHandleENS4_14SharedUniqueIDENS4_8IsOpaqueENS4_13IsTransparentENS4_10NeedsZBiasENS4_14PreserveHeightENS4_13InstanceCountENS4_7IsDecalENS4_10IsMaterialENS4_10IsMercatorENS4_15FlyoverInstanceENS4_12CustomZIndexENS4_14RenderableHashENS4_21PredefinedRenderStateEEEEZNS_18typelist_as_vectorIS1V_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS1Y_EEEEvEUlTyvE_EEvOT0_ENKUlTpTnmNS1_16integer_sequenceImJXspT_EEEEE_clIJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13ELm14ELm15ELm16ELm17ELm18ELm19ELm20ELm21ELm22ELm23ELm24ELm25ELm26ELm27ELm28ELm29ELm30ELm31ELm32ELm33ELm34ELm35ELm36ELm37ELm38ELm39ELm40ELm41ELm42ELm43ELm44ELm45ELm46ELm47ELm48ELm49ELm50ELm51ELm52EEEEDaS26_(&v3);
}

void sub_19F709354(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13HasMeshHandleENS4_35PositionScaleInfoConstantDataHandleENS4_22ViewConstantDataHandleENS4_27TransformConstantDataHandleENS4_18StyleDataKeyHandleENS4_26StyleEmissiveDataKeyHandleENS4_29StyleCameraConstantDataHandleENS4_15ColorDataHandleENS4_10IndexRangeENS4_38StyleGroundOcclusionConstantDataHandleENS4_26SharedMaterialZIndexHandleENS4_17AssociationHandleENS4_13NormalsHandleENS4_23InstanceTransformHandleENS4_9UVsHandleENS4_31StyleRouteLineMaskDataKeyHandleENS4_15ElevationHandleENS4_20TextureHandleForTypeIN7DaVinci14DiffuseTextureEEENS4_35LandCoverSettingsConstantDataHandleENS4_24ShadowConstantDataHandleENS4_25PrepassConstantDataHandleENS4_35ColorCorrectionFactorConstantHandleENS4_26ClippingConstantDataHandleENS4_24PlanarConstantDataHandleENSM_INSN_10TexTextureEEENSM_INSN_15EmissiveTextureEEENSM_INSN_14OverlayTextureEEENS4_29BlendRasterConstantDataHandleENS4_31RasterOverlayConstantDataHandleENS4_40FlyoverCommonTransformConstantDataHandleENS4_30FlyoverCommonS2TransformHandleENS4_28FlyoverCommonTexcoordsHandleENS4_27FlyoverCommonMaterialHandleENS4_29FlyoverClipConstantDataHandleENSM_IN7Flyover14DiffuseTextureEEENSM_INS19_12NightTextureEEENS4_26HasStyleAttributeRasterSetENS4_16NeedsClimateTintENS4_17CustomRenderStateENS4_19ColorRampDataHandleENS4_14SharedUniqueIDENS4_8IsOpaqueENS4_13IsTransparentENS4_10NeedsZBiasENS4_14PreserveHeightENS4_13InstanceCountENS4_7IsDecalENS4_10IsMaterialENS4_10IsMercatorENS4_15FlyoverInstanceENS4_12CustomZIndexENS4_14RenderableHashENS4_21PredefinedRenderStateEEEEZNS_18typelist_as_vectorIS1V_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS1Y_EEEEvEUlTyvE_EEvOT0_ENKUlTpTnmNS1_16integer_sequenceImJXspT_EEEEE_clIJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13ELm14ELm15ELm16ELm17ELm18ELm19ELm20ELm21ELm22ELm23ELm24ELm25ELm26ELm27ELm28ELm29ELm30ELm31ELm32ELm33ELm34ELm35ELm36ELm37ELm38ELm39ELm40ELm41ELm42ELm43ELm44ELm45ELm46ELm47ELm48ELm49ELm50ELm51ELm52EEEEDaS26_(char ***a1)
{
  char **v2;
  unint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  char **v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char **v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  char **v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  char **v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  __int128 v61;
  char **v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  __int128 v73;
  char **v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  __int128 v85;
  char **v86;
  unint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  __int128 v97;
  char **v98;
  unint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  __int128 v109;
  char **v110;
  unint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  __int128 v121;
  char **v122;
  unint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  __int128 v133;
  char **v134;
  unint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  char *v144;
  __int128 v145;
  char **v146;
  unint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  char *v155;
  char *v156;
  __int128 v157;
  char **v158;
  unint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  __int128 v169;
  char **v170;
  unint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  char *v179;
  char *v180;
  __int128 v181;
  char **v182;
  unint64_t v183;
  char *v184;
  char *v185;
  char *v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  char *v191;
  char *v192;
  __int128 v193;
  char **v194;
  unint64_t v195;
  char *v196;
  char *v197;
  char *v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  char *v203;
  char *v204;
  __int128 v205;
  char **v206;
  unint64_t v207;
  char *v208;
  char *v209;
  char *v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  char *v215;
  char *v216;
  __int128 v217;
  char **v218;
  unint64_t v219;
  char *v220;
  char *v221;
  char *v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  char *v227;
  char *v228;
  __int128 v229;
  char **v230;
  unint64_t v231;
  char *v232;
  char *v233;
  char *v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  char *v239;
  char *v240;
  __int128 v241;
  char **v242;
  unint64_t v243;
  char *v244;
  char *v245;
  char *v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  char *v251;
  char *v252;
  __int128 v253;
  char **v254;
  unint64_t v255;
  char *v256;
  char *v257;
  char *v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  char *v263;
  char *v264;
  __int128 v265;
  char **v266;
  unint64_t v267;
  char *v268;
  char *v269;
  char *v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  char *v275;
  char *v276;
  __int128 v277;
  char **v278;
  unint64_t v279;
  char *v280;
  char *v281;
  char *v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  char *v287;
  char *v288;
  __int128 v289;
  char **v290;
  unint64_t v291;
  char *v292;
  char *v293;
  char *v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t v298;
  char *v299;
  char *v300;
  __int128 v301;
  char **v302;
  unint64_t v303;
  char *v304;
  char *v305;
  char *v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  char *v311;
  char *v312;
  __int128 v313;
  char **v314;
  unint64_t v315;
  char *v316;
  char *v317;
  char *v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  char *v323;
  char *v324;
  __int128 v325;
  char **v326;
  unint64_t v327;
  char *v328;
  char *v329;
  char *v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  char *v335;
  char *v336;
  __int128 v337;
  char **v338;
  unint64_t v339;
  char *v340;
  char *v341;
  char *v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  char *v347;
  char *v348;
  __int128 v349;
  char **v350;
  unint64_t v351;
  char *v352;
  char *v353;
  char *v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  char *v359;
  char *v360;
  __int128 v361;
  char **v362;
  unint64_t v363;
  char *v364;
  char *v365;
  char *v366;
  unint64_t v367;
  unint64_t v368;
  unint64_t v369;
  unint64_t v370;
  char *v371;
  char *v372;
  __int128 v373;
  char **v374;
  unint64_t v375;
  char *v376;
  char *v377;
  char *v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unint64_t v382;
  char *v383;
  char *v384;
  __int128 v385;
  char **v386;
  unint64_t v387;
  char *v388;
  char *v389;
  char *v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  char *v395;
  char *v396;
  __int128 v397;
  char **v398;
  unint64_t v399;
  char *v400;
  char *v401;
  char *v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t v406;
  char *v407;
  char *v408;
  __int128 v409;
  char **v410;
  unint64_t v411;
  char *v412;
  char *v413;
  char *v414;
  unint64_t v415;
  unint64_t v416;
  unint64_t v417;
  unint64_t v418;
  char *v419;
  char *v420;
  __int128 v421;
  char **v422;
  unint64_t v423;
  char *v424;
  char *v425;
  char *v426;
  unint64_t v427;
  unint64_t v428;
  unint64_t v429;
  unint64_t v430;
  char *v431;
  char *v432;
  __int128 v433;
  char **v434;
  unint64_t v435;
  char *v436;
  char *v437;
  char *v438;
  unint64_t v439;
  unint64_t v440;
  unint64_t v441;
  unint64_t v442;
  char *v443;
  char *v444;
  __int128 v445;
  char **v446;
  unint64_t v447;
  char *v448;
  char *v449;
  char *v450;
  unint64_t v451;
  unint64_t v452;
  unint64_t v453;
  unint64_t v454;
  char *v455;
  char *v456;
  __int128 v457;
  char **v458;
  unint64_t v459;
  char *v460;
  char *v461;
  char *v462;
  unint64_t v463;
  unint64_t v464;
  unint64_t v465;
  unint64_t v466;
  char *v467;
  char *v468;
  __int128 v469;
  char **v470;
  unint64_t v471;
  char *v472;
  char *v473;
  char *v474;
  unint64_t v475;
  unint64_t v476;
  unint64_t v477;
  unint64_t v478;
  char *v479;
  char *v480;
  __int128 v481;
  char **v482;
  unint64_t v483;
  char *v484;
  char *v485;
  char *v486;
  unint64_t v487;
  unint64_t v488;
  unint64_t v489;
  unint64_t v490;
  char *v491;
  char *v492;
  __int128 v493;
  char **v494;
  unint64_t v495;
  char *v496;
  char *v497;
  char *v498;
  unint64_t v499;
  unint64_t v500;
  unint64_t v501;
  unint64_t v502;
  char *v503;
  char *v504;
  __int128 v505;
  char **v506;
  unint64_t v507;
  char *v508;
  char *v509;
  char *v510;
  unint64_t v511;
  unint64_t v512;
  unint64_t v513;
  unint64_t v514;
  char *v515;
  char *v516;
  __int128 v517;
  char **v518;
  unint64_t v519;
  char *v520;
  char *v521;
  char *v522;
  unint64_t v523;
  unint64_t v524;
  unint64_t v525;
  unint64_t v526;
  char *v527;
  char *v528;
  __int128 v529;
  char **v530;
  unint64_t v531;
  char *v532;
  char *v533;
  char *v534;
  unint64_t v535;
  unint64_t v536;
  unint64_t v537;
  unint64_t v538;
  char *v539;
  char *v540;
  __int128 v541;
  char **v542;
  unint64_t v543;
  char *v544;
  char *v545;
  char *v546;
  unint64_t v547;
  unint64_t v548;
  unint64_t v549;
  unint64_t v550;
  char *v551;
  char *v552;
  __int128 v553;
  char **v554;
  unint64_t v555;
  char *v556;
  char *v557;
  char *v558;
  unint64_t v559;
  unint64_t v560;
  unint64_t v561;
  unint64_t v562;
  char *v563;
  char *v564;
  __int128 v565;
  char **v566;
  unint64_t v567;
  char *v568;
  char *v569;
  char *v570;
  unint64_t v571;
  unint64_t v572;
  unint64_t v573;
  unint64_t v574;
  char *v575;
  char *v576;
  __int128 v577;
  char **v578;
  unint64_t v579;
  char *v580;
  char *v581;
  char *v582;
  unint64_t v583;
  unint64_t v584;
  unint64_t v585;
  unint64_t v586;
  char *v587;
  char *v588;
  __int128 v589;
  char **v590;
  unint64_t v591;
  char *v592;
  char *v593;
  char *v594;
  unint64_t v595;
  unint64_t v596;
  unint64_t v597;
  unint64_t v598;
  char *v599;
  char *v600;
  __int128 v601;
  char **v602;
  unint64_t v603;
  char *v604;
  char *v605;
  char *v606;
  unint64_t v607;
  unint64_t v608;
  unint64_t v609;
  unint64_t v610;
  char *v611;
  char *v612;
  __int128 v613;
  char **v614;
  unint64_t v615;
  char *v616;
  char *v617;
  char *v618;
  unint64_t v619;
  unint64_t v620;
  unint64_t v621;
  unint64_t v622;
  char *v623;
  char *v624;
  __int128 v625;
  char **v626;
  unint64_t v627;
  char *v628;
  char *v629;
  char *v630;
  unint64_t v631;
  unint64_t v632;
  unint64_t v633;
  unint64_t v634;
  char *v635;
  char *v636;
  __int128 v637;

  v2 = *a1;
  v4 = (*a1)[1];
  v3 = (unint64_t)(*a1)[2];
  if ((unint64_t)v4 >= v3)
  {
    v6 = *v2;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *v2) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - (_QWORD)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[24 * v7];
    *(_QWORD *)v12 = 0xCD844FF303308290;
    *((_QWORD *)v12 + 1) = "md::ls::HasMeshHandle]";
    *((_QWORD *)v12 + 2) = 21;
    v5 = v12 + 24;
    if (v4 != v6)
    {
      do
      {
        v13 = *(_OWORD *)(v4 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v4 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v4 -= 24;
      }
      while (v4 != v6);
      v4 = *v2;
    }
    *v2 = v12;
    v2[1] = v5;
    v2[2] = &v11[24 * v10];
    if (v4)
      operator delete(v4);
  }
  else
  {
    *(_QWORD *)v4 = 0xCD844FF303308290;
    *((_QWORD *)v4 + 1) = "md::ls::HasMeshHandle]";
    *((_QWORD *)v4 + 2) = 21;
    v5 = v4 + 24;
  }
  v2[1] = v5;
  v14 = *a1;
  v16 = (*a1)[1];
  v15 = (unint64_t)(*a1)[2];
  if ((unint64_t)v16 >= v15)
  {
    v18 = *v14;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v16 - *v14) >> 3);
    v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v18) >> 3);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0x555555555555555)
      v22 = 0xAAAAAAAAAAAAAAALL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v23 = (char *)operator new(24 * v22);
    }
    else
    {
      v23 = 0;
    }
    v24 = &v23[24 * v19];
    *(_QWORD *)v24 = 0x6C7EE74910D42096;
    *((_QWORD *)v24 + 1) = "md::ls::PositionScaleInfoConstantDataHandle]";
    *((_QWORD *)v24 + 2) = 43;
    v17 = v24 + 24;
    if (v16 != v18)
    {
      do
      {
        v25 = *(_OWORD *)(v16 - 24);
        *((_QWORD *)v24 - 1) = *((_QWORD *)v16 - 1);
        *(_OWORD *)(v24 - 24) = v25;
        v24 -= 24;
        v16 -= 24;
      }
      while (v16 != v18);
      v16 = *v14;
    }
    *v14 = v24;
    v14[1] = v17;
    v14[2] = &v23[24 * v22];
    if (v16)
      operator delete(v16);
  }
  else
  {
    *(_QWORD *)v16 = 0x6C7EE74910D42096;
    *((_QWORD *)v16 + 1) = "md::ls::PositionScaleInfoConstantDataHandle]";
    *((_QWORD *)v16 + 2) = 43;
    v17 = v16 + 24;
  }
  v14[1] = v17;
  v26 = *a1;
  v28 = (*a1)[1];
  v27 = (unint64_t)(*a1)[2];
  if ((unint64_t)v28 >= v27)
  {
    v30 = *v26;
    v31 = 0xAAAAAAAAAAAAAAABLL * ((v28 - *v26) >> 3);
    v32 = v31 + 1;
    if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - (_QWORD)v30) >> 3);
    if (2 * v33 > v32)
      v32 = 2 * v33;
    if (v33 >= 0x555555555555555)
      v34 = 0xAAAAAAAAAAAAAAALL;
    else
      v34 = v32;
    if (v34)
    {
      if (v34 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v35 = (char *)operator new(24 * v34);
    }
    else
    {
      v35 = 0;
    }
    v36 = &v35[24 * v31];
    *(_QWORD *)v36 = 0xCFE242268B958ADALL;
    *((_QWORD *)v36 + 1) = "md::ls::ViewConstantDataHandle]";
    *((_QWORD *)v36 + 2) = 30;
    v29 = v36 + 24;
    if (v28 != v30)
    {
      do
      {
        v37 = *(_OWORD *)(v28 - 24);
        *((_QWORD *)v36 - 1) = *((_QWORD *)v28 - 1);
        *(_OWORD *)(v36 - 24) = v37;
        v36 -= 24;
        v28 -= 24;
      }
      while (v28 != v30);
      v28 = *v26;
    }
    *v26 = v36;
    v26[1] = v29;
    v26[2] = &v35[24 * v34];
    if (v28)
      operator delete(v28);
  }
  else
  {
    *(_QWORD *)v28 = 0xCFE242268B958ADALL;
    *((_QWORD *)v28 + 1) = "md::ls::ViewConstantDataHandle]";
    *((_QWORD *)v28 + 2) = 30;
    v29 = v28 + 24;
  }
  v26[1] = v29;
  v38 = *a1;
  v40 = (*a1)[1];
  v39 = (unint64_t)(*a1)[2];
  if ((unint64_t)v40 >= v39)
  {
    v42 = *v38;
    v43 = 0xAAAAAAAAAAAAAAABLL * ((v40 - *v38) >> 3);
    v44 = v43 + 1;
    if (v43 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - (_QWORD)v42) >> 3);
    if (2 * v45 > v44)
      v44 = 2 * v45;
    if (v45 >= 0x555555555555555)
      v46 = 0xAAAAAAAAAAAAAAALL;
    else
      v46 = v44;
    if (v46)
    {
      if (v46 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v47 = (char *)operator new(24 * v46);
    }
    else
    {
      v47 = 0;
    }
    v48 = &v47[24 * v43];
    *(_QWORD *)v48 = 0x74DC502726E97929;
    *((_QWORD *)v48 + 1) = "md::ls::TransformConstantDataHandle]";
    *((_QWORD *)v48 + 2) = 35;
    v41 = v48 + 24;
    if (v40 != v42)
    {
      do
      {
        v49 = *(_OWORD *)(v40 - 24);
        *((_QWORD *)v48 - 1) = *((_QWORD *)v40 - 1);
        *(_OWORD *)(v48 - 24) = v49;
        v48 -= 24;
        v40 -= 24;
      }
      while (v40 != v42);
      v40 = *v38;
    }
    *v38 = v48;
    v38[1] = v41;
    v38[2] = &v47[24 * v46];
    if (v40)
      operator delete(v40);
  }
  else
  {
    *(_QWORD *)v40 = 0x74DC502726E97929;
    *((_QWORD *)v40 + 1) = "md::ls::TransformConstantDataHandle]";
    *((_QWORD *)v40 + 2) = 35;
    v41 = v40 + 24;
  }
  v38[1] = v41;
  v50 = *a1;
  v52 = (*a1)[1];
  v51 = (unint64_t)(*a1)[2];
  if ((unint64_t)v52 >= v51)
  {
    v54 = *v50;
    v55 = 0xAAAAAAAAAAAAAAABLL * ((v52 - *v50) >> 3);
    v56 = v55 + 1;
    if (v55 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - (_QWORD)v54) >> 3);
    if (2 * v57 > v56)
      v56 = 2 * v57;
    if (v57 >= 0x555555555555555)
      v58 = 0xAAAAAAAAAAAAAAALL;
    else
      v58 = v56;
    if (v58)
    {
      if (v58 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v59 = (char *)operator new(24 * v58);
    }
    else
    {
      v59 = 0;
    }
    v60 = &v59[24 * v55];
    *(_QWORD *)v60 = 0x1BB343378E1EE5BLL;
    *((_QWORD *)v60 + 1) = "md::ls::StyleDataKeyHandle]";
    *((_QWORD *)v60 + 2) = 26;
    v53 = v60 + 24;
    if (v52 != v54)
    {
      do
      {
        v61 = *(_OWORD *)(v52 - 24);
        *((_QWORD *)v60 - 1) = *((_QWORD *)v52 - 1);
        *(_OWORD *)(v60 - 24) = v61;
        v60 -= 24;
        v52 -= 24;
      }
      while (v52 != v54);
      v52 = *v50;
    }
    *v50 = v60;
    v50[1] = v53;
    v50[2] = &v59[24 * v58];
    if (v52)
      operator delete(v52);
  }
  else
  {
    *(_QWORD *)v52 = 0x1BB343378E1EE5BLL;
    *((_QWORD *)v52 + 1) = "md::ls::StyleDataKeyHandle]";
    *((_QWORD *)v52 + 2) = 26;
    v53 = v52 + 24;
  }
  v50[1] = v53;
  v62 = *a1;
  v64 = (*a1)[1];
  v63 = (unint64_t)(*a1)[2];
  if ((unint64_t)v64 >= v63)
  {
    v66 = *v62;
    v67 = 0xAAAAAAAAAAAAAAABLL * ((v64 - *v62) >> 3);
    v68 = v67 + 1;
    if (v67 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - (_QWORD)v66) >> 3);
    if (2 * v69 > v68)
      v68 = 2 * v69;
    if (v69 >= 0x555555555555555)
      v70 = 0xAAAAAAAAAAAAAAALL;
    else
      v70 = v68;
    if (v70)
    {
      if (v70 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v71 = (char *)operator new(24 * v70);
    }
    else
    {
      v71 = 0;
    }
    v72 = &v71[24 * v67];
    *(_QWORD *)v72 = 0xA50DD2A5BD75DBD6;
    *((_QWORD *)v72 + 1) = "md::ls::StyleEmissiveDataKeyHandle]";
    *((_QWORD *)v72 + 2) = 34;
    v65 = v72 + 24;
    if (v64 != v66)
    {
      do
      {
        v73 = *(_OWORD *)(v64 - 24);
        *((_QWORD *)v72 - 1) = *((_QWORD *)v64 - 1);
        *(_OWORD *)(v72 - 24) = v73;
        v72 -= 24;
        v64 -= 24;
      }
      while (v64 != v66);
      v64 = *v62;
    }
    *v62 = v72;
    v62[1] = v65;
    v62[2] = &v71[24 * v70];
    if (v64)
      operator delete(v64);
  }
  else
  {
    *(_QWORD *)v64 = 0xA50DD2A5BD75DBD6;
    *((_QWORD *)v64 + 1) = "md::ls::StyleEmissiveDataKeyHandle]";
    *((_QWORD *)v64 + 2) = 34;
    v65 = v64 + 24;
  }
  v62[1] = v65;
  v74 = *a1;
  v76 = (*a1)[1];
  v75 = (unint64_t)(*a1)[2];
  if ((unint64_t)v76 >= v75)
  {
    v78 = *v74;
    v79 = 0xAAAAAAAAAAAAAAABLL * ((v76 - *v74) >> 3);
    v80 = v79 + 1;
    if (v79 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75 - (_QWORD)v78) >> 3);
    if (2 * v81 > v80)
      v80 = 2 * v81;
    if (v81 >= 0x555555555555555)
      v82 = 0xAAAAAAAAAAAAAAALL;
    else
      v82 = v80;
    if (v82)
    {
      if (v82 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v83 = (char *)operator new(24 * v82);
    }
    else
    {
      v83 = 0;
    }
    v84 = &v83[24 * v79];
    *(_QWORD *)v84 = 0x96F87A2692FE4013;
    *((_QWORD *)v84 + 1) = "md::ls::StyleCameraConstantDataHandle]";
    *((_QWORD *)v84 + 2) = 37;
    v77 = v84 + 24;
    if (v76 != v78)
    {
      do
      {
        v85 = *(_OWORD *)(v76 - 24);
        *((_QWORD *)v84 - 1) = *((_QWORD *)v76 - 1);
        *(_OWORD *)(v84 - 24) = v85;
        v84 -= 24;
        v76 -= 24;
      }
      while (v76 != v78);
      v76 = *v74;
    }
    *v74 = v84;
    v74[1] = v77;
    v74[2] = &v83[24 * v82];
    if (v76)
      operator delete(v76);
  }
  else
  {
    *(_QWORD *)v76 = 0x96F87A2692FE4013;
    *((_QWORD *)v76 + 1) = "md::ls::StyleCameraConstantDataHandle]";
    *((_QWORD *)v76 + 2) = 37;
    v77 = v76 + 24;
  }
  v74[1] = v77;
  v86 = *a1;
  v88 = (*a1)[1];
  v87 = (unint64_t)(*a1)[2];
  if ((unint64_t)v88 >= v87)
  {
    v90 = *v86;
    v91 = 0xAAAAAAAAAAAAAAABLL * ((v88 - *v86) >> 3);
    v92 = v91 + 1;
    if (v91 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v87 - (_QWORD)v90) >> 3);
    if (2 * v93 > v92)
      v92 = 2 * v93;
    if (v93 >= 0x555555555555555)
      v94 = 0xAAAAAAAAAAAAAAALL;
    else
      v94 = v92;
    if (v94)
    {
      if (v94 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v95 = (char *)operator new(24 * v94);
    }
    else
    {
      v95 = 0;
    }
    v96 = &v95[24 * v91];
    *(_QWORD *)v96 = 0xA3F884E4E2541296;
    *((_QWORD *)v96 + 1) = "md::ls::ColorDataHandle]";
    *((_QWORD *)v96 + 2) = 23;
    v89 = v96 + 24;
    if (v88 != v90)
    {
      do
      {
        v97 = *(_OWORD *)(v88 - 24);
        *((_QWORD *)v96 - 1) = *((_QWORD *)v88 - 1);
        *(_OWORD *)(v96 - 24) = v97;
        v96 -= 24;
        v88 -= 24;
      }
      while (v88 != v90);
      v88 = *v86;
    }
    *v86 = v96;
    v86[1] = v89;
    v86[2] = &v95[24 * v94];
    if (v88)
      operator delete(v88);
  }
  else
  {
    *(_QWORD *)v88 = 0xA3F884E4E2541296;
    *((_QWORD *)v88 + 1) = "md::ls::ColorDataHandle]";
    *((_QWORD *)v88 + 2) = 23;
    v89 = v88 + 24;
  }
  v86[1] = v89;
  v98 = *a1;
  v100 = (*a1)[1];
  v99 = (unint64_t)(*a1)[2];
  if ((unint64_t)v100 >= v99)
  {
    v102 = *v98;
    v103 = 0xAAAAAAAAAAAAAAABLL * ((v100 - *v98) >> 3);
    v104 = v103 + 1;
    if (v103 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v105 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v99 - (_QWORD)v102) >> 3);
    if (2 * v105 > v104)
      v104 = 2 * v105;
    if (v105 >= 0x555555555555555)
      v106 = 0xAAAAAAAAAAAAAAALL;
    else
      v106 = v104;
    if (v106)
    {
      if (v106 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v107 = (char *)operator new(24 * v106);
    }
    else
    {
      v107 = 0;
    }
    v108 = &v107[24 * v103];
    *(_QWORD *)v108 = 0x71CBA64B1A9CA230;
    *((_QWORD *)v108 + 1) = "md::ls::IndexRange]";
    *((_QWORD *)v108 + 2) = 18;
    v101 = v108 + 24;
    if (v100 != v102)
    {
      do
      {
        v109 = *(_OWORD *)(v100 - 24);
        *((_QWORD *)v108 - 1) = *((_QWORD *)v100 - 1);
        *(_OWORD *)(v108 - 24) = v109;
        v108 -= 24;
        v100 -= 24;
      }
      while (v100 != v102);
      v100 = *v98;
    }
    *v98 = v108;
    v98[1] = v101;
    v98[2] = &v107[24 * v106];
    if (v100)
      operator delete(v100);
  }
  else
  {
    *(_QWORD *)v100 = 0x71CBA64B1A9CA230;
    *((_QWORD *)v100 + 1) = "md::ls::IndexRange]";
    *((_QWORD *)v100 + 2) = 18;
    v101 = v100 + 24;
  }
  v98[1] = v101;
  v110 = *a1;
  v112 = (*a1)[1];
  v111 = (unint64_t)(*a1)[2];
  if ((unint64_t)v112 >= v111)
  {
    v114 = *v110;
    v115 = 0xAAAAAAAAAAAAAAABLL * ((v112 - *v110) >> 3);
    v116 = v115 + 1;
    if (v115 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v111 - (_QWORD)v114) >> 3);
    if (2 * v117 > v116)
      v116 = 2 * v117;
    if (v117 >= 0x555555555555555)
      v118 = 0xAAAAAAAAAAAAAAALL;
    else
      v118 = v116;
    if (v118)
    {
      if (v118 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v119 = (char *)operator new(24 * v118);
    }
    else
    {
      v119 = 0;
    }
    v120 = &v119[24 * v115];
    *(_QWORD *)v120 = 0xD5AD9B8C3FE62EE8;
    *((_QWORD *)v120 + 1) = "md::ls::StyleGroundOcclusionConstantDataHandle]";
    *((_QWORD *)v120 + 2) = 46;
    v113 = v120 + 24;
    if (v112 != v114)
    {
      do
      {
        v121 = *(_OWORD *)(v112 - 24);
        *((_QWORD *)v120 - 1) = *((_QWORD *)v112 - 1);
        *(_OWORD *)(v120 - 24) = v121;
        v120 -= 24;
        v112 -= 24;
      }
      while (v112 != v114);
      v112 = *v110;
    }
    *v110 = v120;
    v110[1] = v113;
    v110[2] = &v119[24 * v118];
    if (v112)
      operator delete(v112);
  }
  else
  {
    *(_QWORD *)v112 = 0xD5AD9B8C3FE62EE8;
    *((_QWORD *)v112 + 1) = "md::ls::StyleGroundOcclusionConstantDataHandle]";
    *((_QWORD *)v112 + 2) = 46;
    v113 = v112 + 24;
  }
  v110[1] = v113;
  v122 = *a1;
  v124 = (*a1)[1];
  v123 = (unint64_t)(*a1)[2];
  if ((unint64_t)v124 >= v123)
  {
    v126 = *v122;
    v127 = 0xAAAAAAAAAAAAAAABLL * ((v124 - *v122) >> 3);
    v128 = v127 + 1;
    if (v127 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v129 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v123 - (_QWORD)v126) >> 3);
    if (2 * v129 > v128)
      v128 = 2 * v129;
    if (v129 >= 0x555555555555555)
      v130 = 0xAAAAAAAAAAAAAAALL;
    else
      v130 = v128;
    if (v130)
    {
      if (v130 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v131 = (char *)operator new(24 * v130);
    }
    else
    {
      v131 = 0;
    }
    v132 = &v131[24 * v127];
    *(_QWORD *)v132 = 0x9705908F280836EDLL;
    *((_QWORD *)v132 + 1) = "md::ls::SharedMaterialZIndexHandle]";
    *((_QWORD *)v132 + 2) = 34;
    v125 = v132 + 24;
    if (v124 != v126)
    {
      do
      {
        v133 = *(_OWORD *)(v124 - 24);
        *((_QWORD *)v132 - 1) = *((_QWORD *)v124 - 1);
        *(_OWORD *)(v132 - 24) = v133;
        v132 -= 24;
        v124 -= 24;
      }
      while (v124 != v126);
      v124 = *v122;
    }
    *v122 = v132;
    v122[1] = v125;
    v122[2] = &v131[24 * v130];
    if (v124)
      operator delete(v124);
  }
  else
  {
    *(_QWORD *)v124 = 0x9705908F280836EDLL;
    *((_QWORD *)v124 + 1) = "md::ls::SharedMaterialZIndexHandle]";
    *((_QWORD *)v124 + 2) = 34;
    v125 = v124 + 24;
  }
  v122[1] = v125;
  v134 = *a1;
  v136 = (*a1)[1];
  v135 = (unint64_t)(*a1)[2];
  if ((unint64_t)v136 >= v135)
  {
    v138 = *v134;
    v139 = 0xAAAAAAAAAAAAAAABLL * ((v136 - *v134) >> 3);
    v140 = v139 + 1;
    if (v139 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v141 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v135 - (_QWORD)v138) >> 3);
    if (2 * v141 > v140)
      v140 = 2 * v141;
    if (v141 >= 0x555555555555555)
      v142 = 0xAAAAAAAAAAAAAAALL;
    else
      v142 = v140;
    if (v142)
    {
      if (v142 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v143 = (char *)operator new(24 * v142);
    }
    else
    {
      v143 = 0;
    }
    v144 = &v143[24 * v139];
    *(_QWORD *)v144 = 0x523816724122CCE2;
    *((_QWORD *)v144 + 1) = "md::ls::AssociationHandle]";
    *((_QWORD *)v144 + 2) = 25;
    v137 = v144 + 24;
    if (v136 != v138)
    {
      do
      {
        v145 = *(_OWORD *)(v136 - 24);
        *((_QWORD *)v144 - 1) = *((_QWORD *)v136 - 1);
        *(_OWORD *)(v144 - 24) = v145;
        v144 -= 24;
        v136 -= 24;
      }
      while (v136 != v138);
      v136 = *v134;
    }
    *v134 = v144;
    v134[1] = v137;
    v134[2] = &v143[24 * v142];
    if (v136)
      operator delete(v136);
  }
  else
  {
    *(_QWORD *)v136 = 0x523816724122CCE2;
    *((_QWORD *)v136 + 1) = "md::ls::AssociationHandle]";
    *((_QWORD *)v136 + 2) = 25;
    v137 = v136 + 24;
  }
  v134[1] = v137;
  v146 = *a1;
  v148 = (*a1)[1];
  v147 = (unint64_t)(*a1)[2];
  if ((unint64_t)v148 >= v147)
  {
    v150 = *v146;
    v151 = 0xAAAAAAAAAAAAAAABLL * ((v148 - *v146) >> 3);
    v152 = v151 + 1;
    if (v151 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v153 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v147 - (_QWORD)v150) >> 3);
    if (2 * v153 > v152)
      v152 = 2 * v153;
    if (v153 >= 0x555555555555555)
      v154 = 0xAAAAAAAAAAAAAAALL;
    else
      v154 = v152;
    if (v154)
    {
      if (v154 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v155 = (char *)operator new(24 * v154);
    }
    else
    {
      v155 = 0;
    }
    v156 = &v155[24 * v151];
    *(_QWORD *)v156 = 0x3218EFD67197A145;
    *((_QWORD *)v156 + 1) = "md::ls::NormalsHandle]";
    *((_QWORD *)v156 + 2) = 21;
    v149 = v156 + 24;
    if (v148 != v150)
    {
      do
      {
        v157 = *(_OWORD *)(v148 - 24);
        *((_QWORD *)v156 - 1) = *((_QWORD *)v148 - 1);
        *(_OWORD *)(v156 - 24) = v157;
        v156 -= 24;
        v148 -= 24;
      }
      while (v148 != v150);
      v148 = *v146;
    }
    *v146 = v156;
    v146[1] = v149;
    v146[2] = &v155[24 * v154];
    if (v148)
      operator delete(v148);
  }
  else
  {
    *(_QWORD *)v148 = 0x3218EFD67197A145;
    *((_QWORD *)v148 + 1) = "md::ls::NormalsHandle]";
    *((_QWORD *)v148 + 2) = 21;
    v149 = v148 + 24;
  }
  v146[1] = v149;
  v158 = *a1;
  v160 = (*a1)[1];
  v159 = (unint64_t)(*a1)[2];
  if ((unint64_t)v160 >= v159)
  {
    v162 = *v158;
    v163 = 0xAAAAAAAAAAAAAAABLL * ((v160 - *v158) >> 3);
    v164 = v163 + 1;
    if (v163 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v165 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v159 - (_QWORD)v162) >> 3);
    if (2 * v165 > v164)
      v164 = 2 * v165;
    if (v165 >= 0x555555555555555)
      v166 = 0xAAAAAAAAAAAAAAALL;
    else
      v166 = v164;
    if (v166)
    {
      if (v166 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v167 = (char *)operator new(24 * v166);
    }
    else
    {
      v167 = 0;
    }
    v168 = &v167[24 * v163];
    *(_QWORD *)v168 = 0xAF179EFD8A4C83D4;
    *((_QWORD *)v168 + 1) = "md::ls::InstanceTransformHandle]";
    *((_QWORD *)v168 + 2) = 31;
    v161 = v168 + 24;
    if (v160 != v162)
    {
      do
      {
        v169 = *(_OWORD *)(v160 - 24);
        *((_QWORD *)v168 - 1) = *((_QWORD *)v160 - 1);
        *(_OWORD *)(v168 - 24) = v169;
        v168 -= 24;
        v160 -= 24;
      }
      while (v160 != v162);
      v160 = *v158;
    }
    *v158 = v168;
    v158[1] = v161;
    v158[2] = &v167[24 * v166];
    if (v160)
      operator delete(v160);
  }
  else
  {
    *(_QWORD *)v160 = 0xAF179EFD8A4C83D4;
    *((_QWORD *)v160 + 1) = "md::ls::InstanceTransformHandle]";
    *((_QWORD *)v160 + 2) = 31;
    v161 = v160 + 24;
  }
  v158[1] = v161;
  v170 = *a1;
  v172 = (*a1)[1];
  v171 = (unint64_t)(*a1)[2];
  if ((unint64_t)v172 >= v171)
  {
    v174 = *v170;
    v175 = 0xAAAAAAAAAAAAAAABLL * ((v172 - *v170) >> 3);
    v176 = v175 + 1;
    if (v175 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v177 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v171 - (_QWORD)v174) >> 3);
    if (2 * v177 > v176)
      v176 = 2 * v177;
    if (v177 >= 0x555555555555555)
      v178 = 0xAAAAAAAAAAAAAAALL;
    else
      v178 = v176;
    if (v178)
    {
      if (v178 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v179 = (char *)operator new(24 * v178);
    }
    else
    {
      v179 = 0;
    }
    v180 = &v179[24 * v175];
    *(_QWORD *)v180 = 0xCBB77B1CBD05D7C5;
    *((_QWORD *)v180 + 1) = "md::ls::UVsHandle]";
    *((_QWORD *)v180 + 2) = 17;
    v173 = v180 + 24;
    if (v172 != v174)
    {
      do
      {
        v181 = *(_OWORD *)(v172 - 24);
        *((_QWORD *)v180 - 1) = *((_QWORD *)v172 - 1);
        *(_OWORD *)(v180 - 24) = v181;
        v180 -= 24;
        v172 -= 24;
      }
      while (v172 != v174);
      v172 = *v170;
    }
    *v170 = v180;
    v170[1] = v173;
    v170[2] = &v179[24 * v178];
    if (v172)
      operator delete(v172);
  }
  else
  {
    *(_QWORD *)v172 = 0xCBB77B1CBD05D7C5;
    *((_QWORD *)v172 + 1) = "md::ls::UVsHandle]";
    *((_QWORD *)v172 + 2) = 17;
    v173 = v172 + 24;
  }
  v170[1] = v173;
  v182 = *a1;
  v184 = (*a1)[1];
  v183 = (unint64_t)(*a1)[2];
  if ((unint64_t)v184 >= v183)
  {
    v186 = *v182;
    v187 = 0xAAAAAAAAAAAAAAABLL * ((v184 - *v182) >> 3);
    v188 = v187 + 1;
    if (v187 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v189 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v183 - (_QWORD)v186) >> 3);
    if (2 * v189 > v188)
      v188 = 2 * v189;
    if (v189 >= 0x555555555555555)
      v190 = 0xAAAAAAAAAAAAAAALL;
    else
      v190 = v188;
    if (v190)
    {
      if (v190 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v191 = (char *)operator new(24 * v190);
    }
    else
    {
      v191 = 0;
    }
    v192 = &v191[24 * v187];
    *(_QWORD *)v192 = 0x8E45E81B6E5A8E0ELL;
    *((_QWORD *)v192 + 1) = "md::ls::StyleRouteLineMaskDataKeyHandle]";
    *((_QWORD *)v192 + 2) = 39;
    v185 = v192 + 24;
    if (v184 != v186)
    {
      do
      {
        v193 = *(_OWORD *)(v184 - 24);
        *((_QWORD *)v192 - 1) = *((_QWORD *)v184 - 1);
        *(_OWORD *)(v192 - 24) = v193;
        v192 -= 24;
        v184 -= 24;
      }
      while (v184 != v186);
      v184 = *v182;
    }
    *v182 = v192;
    v182[1] = v185;
    v182[2] = &v191[24 * v190];
    if (v184)
      operator delete(v184);
  }
  else
  {
    *(_QWORD *)v184 = 0x8E45E81B6E5A8E0ELL;
    *((_QWORD *)v184 + 1) = "md::ls::StyleRouteLineMaskDataKeyHandle]";
    *((_QWORD *)v184 + 2) = 39;
    v185 = v184 + 24;
  }
  v182[1] = v185;
  v194 = *a1;
  v196 = (*a1)[1];
  v195 = (unint64_t)(*a1)[2];
  if ((unint64_t)v196 >= v195)
  {
    v198 = *v194;
    v199 = 0xAAAAAAAAAAAAAAABLL * ((v196 - *v194) >> 3);
    v200 = v199 + 1;
    if (v199 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v201 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v195 - (_QWORD)v198) >> 3);
    if (2 * v201 > v200)
      v200 = 2 * v201;
    if (v201 >= 0x555555555555555)
      v202 = 0xAAAAAAAAAAAAAAALL;
    else
      v202 = v200;
    if (v202)
    {
      if (v202 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v203 = (char *)operator new(24 * v202);
    }
    else
    {
      v203 = 0;
    }
    v204 = &v203[24 * v199];
    *(_QWORD *)v204 = 0xD443D3DCBB78491ALL;
    *((_QWORD *)v204 + 1) = "md::ls::ElevationHandle]";
    *((_QWORD *)v204 + 2) = 23;
    v197 = v204 + 24;
    if (v196 != v198)
    {
      do
      {
        v205 = *(_OWORD *)(v196 - 24);
        *((_QWORD *)v204 - 1) = *((_QWORD *)v196 - 1);
        *(_OWORD *)(v204 - 24) = v205;
        v204 -= 24;
        v196 -= 24;
      }
      while (v196 != v198);
      v196 = *v194;
    }
    *v194 = v204;
    v194[1] = v197;
    v194[2] = &v203[24 * v202];
    if (v196)
      operator delete(v196);
  }
  else
  {
    *(_QWORD *)v196 = 0xD443D3DCBB78491ALL;
    *((_QWORD *)v196 + 1) = "md::ls::ElevationHandle]";
    *((_QWORD *)v196 + 2) = 23;
    v197 = v196 + 24;
  }
  v194[1] = v197;
  v206 = *a1;
  v208 = (*a1)[1];
  v207 = (unint64_t)(*a1)[2];
  if ((unint64_t)v208 >= v207)
  {
    v210 = *v206;
    v211 = 0xAAAAAAAAAAAAAAABLL * ((v208 - *v206) >> 3);
    v212 = v211 + 1;
    if (v211 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v213 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v207 - (_QWORD)v210) >> 3);
    if (2 * v213 > v212)
      v212 = 2 * v213;
    if (v213 >= 0x555555555555555)
      v214 = 0xAAAAAAAAAAAAAAALL;
    else
      v214 = v212;
    if (v214)
    {
      if (v214 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v215 = (char *)operator new(24 * v214);
    }
    else
    {
      v215 = 0;
    }
    v216 = &v215[24 * v211];
    *(_QWORD *)v216 = 0xDD9825BCFA7911B2;
    *((_QWORD *)v216 + 1) = "md::ls::TextureHandleForType<DaVinci::DiffuseTexture>]";
    *((_QWORD *)v216 + 2) = 53;
    v209 = v216 + 24;
    if (v208 != v210)
    {
      do
      {
        v217 = *(_OWORD *)(v208 - 24);
        *((_QWORD *)v216 - 1) = *((_QWORD *)v208 - 1);
        *(_OWORD *)(v216 - 24) = v217;
        v216 -= 24;
        v208 -= 24;
      }
      while (v208 != v210);
      v208 = *v206;
    }
    *v206 = v216;
    v206[1] = v209;
    v206[2] = &v215[24 * v214];
    if (v208)
      operator delete(v208);
  }
  else
  {
    *(_QWORD *)v208 = 0xDD9825BCFA7911B2;
    *((_QWORD *)v208 + 1) = "md::ls::TextureHandleForType<DaVinci::DiffuseTexture>]";
    *((_QWORD *)v208 + 2) = 53;
    v209 = v208 + 24;
  }
  v206[1] = v209;
  v218 = *a1;
  v220 = (*a1)[1];
  v219 = (unint64_t)(*a1)[2];
  if ((unint64_t)v220 >= v219)
  {
    v222 = *v218;
    v223 = 0xAAAAAAAAAAAAAAABLL * ((v220 - *v218) >> 3);
    v224 = v223 + 1;
    if (v223 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v225 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v219 - (_QWORD)v222) >> 3);
    if (2 * v225 > v224)
      v224 = 2 * v225;
    if (v225 >= 0x555555555555555)
      v226 = 0xAAAAAAAAAAAAAAALL;
    else
      v226 = v224;
    if (v226)
    {
      if (v226 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v227 = (char *)operator new(24 * v226);
    }
    else
    {
      v227 = 0;
    }
    v228 = &v227[24 * v223];
    *(_QWORD *)v228 = 0xDC98991DB7473274;
    *((_QWORD *)v228 + 1) = "md::ls::LandCoverSettingsConstantDataHandle]";
    *((_QWORD *)v228 + 2) = 43;
    v221 = v228 + 24;
    if (v220 != v222)
    {
      do
      {
        v229 = *(_OWORD *)(v220 - 24);
        *((_QWORD *)v228 - 1) = *((_QWORD *)v220 - 1);
        *(_OWORD *)(v228 - 24) = v229;
        v228 -= 24;
        v220 -= 24;
      }
      while (v220 != v222);
      v220 = *v218;
    }
    *v218 = v228;
    v218[1] = v221;
    v218[2] = &v227[24 * v226];
    if (v220)
      operator delete(v220);
  }
  else
  {
    *(_QWORD *)v220 = 0xDC98991DB7473274;
    *((_QWORD *)v220 + 1) = "md::ls::LandCoverSettingsConstantDataHandle]";
    *((_QWORD *)v220 + 2) = 43;
    v221 = v220 + 24;
  }
  v218[1] = v221;
  v230 = *a1;
  v232 = (*a1)[1];
  v231 = (unint64_t)(*a1)[2];
  if ((unint64_t)v232 >= v231)
  {
    v234 = *v230;
    v235 = 0xAAAAAAAAAAAAAAABLL * ((v232 - *v230) >> 3);
    v236 = v235 + 1;
    if (v235 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v237 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v231 - (_QWORD)v234) >> 3);
    if (2 * v237 > v236)
      v236 = 2 * v237;
    if (v237 >= 0x555555555555555)
      v238 = 0xAAAAAAAAAAAAAAALL;
    else
      v238 = v236;
    if (v238)
    {
      if (v238 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v239 = (char *)operator new(24 * v238);
    }
    else
    {
      v239 = 0;
    }
    v240 = &v239[24 * v235];
    *(_QWORD *)v240 = 0xEAA0B82FC49F7277;
    *((_QWORD *)v240 + 1) = "md::ls::ShadowConstantDataHandle]";
    *((_QWORD *)v240 + 2) = 32;
    v233 = v240 + 24;
    if (v232 != v234)
    {
      do
      {
        v241 = *(_OWORD *)(v232 - 24);
        *((_QWORD *)v240 - 1) = *((_QWORD *)v232 - 1);
        *(_OWORD *)(v240 - 24) = v241;
        v240 -= 24;
        v232 -= 24;
      }
      while (v232 != v234);
      v232 = *v230;
    }
    *v230 = v240;
    v230[1] = v233;
    v230[2] = &v239[24 * v238];
    if (v232)
      operator delete(v232);
  }
  else
  {
    *(_QWORD *)v232 = 0xEAA0B82FC49F7277;
    *((_QWORD *)v232 + 1) = "md::ls::ShadowConstantDataHandle]";
    *((_QWORD *)v232 + 2) = 32;
    v233 = v232 + 24;
  }
  v230[1] = v233;
  v242 = *a1;
  v244 = (*a1)[1];
  v243 = (unint64_t)(*a1)[2];
  if ((unint64_t)v244 >= v243)
  {
    v246 = *v242;
    v247 = 0xAAAAAAAAAAAAAAABLL * ((v244 - *v242) >> 3);
    v248 = v247 + 1;
    if (v247 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v249 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v243 - (_QWORD)v246) >> 3);
    if (2 * v249 > v248)
      v248 = 2 * v249;
    if (v249 >= 0x555555555555555)
      v250 = 0xAAAAAAAAAAAAAAALL;
    else
      v250 = v248;
    if (v250)
    {
      if (v250 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v251 = (char *)operator new(24 * v250);
    }
    else
    {
      v251 = 0;
    }
    v252 = &v251[24 * v247];
    *(_QWORD *)v252 = 0x1EBB3E0519E8FF9DLL;
    *((_QWORD *)v252 + 1) = "md::ls::PrepassConstantDataHandle]";
    *((_QWORD *)v252 + 2) = 33;
    v245 = v252 + 24;
    if (v244 != v246)
    {
      do
      {
        v253 = *(_OWORD *)(v244 - 24);
        *((_QWORD *)v252 - 1) = *((_QWORD *)v244 - 1);
        *(_OWORD *)(v252 - 24) = v253;
        v252 -= 24;
        v244 -= 24;
      }
      while (v244 != v246);
      v244 = *v242;
    }
    *v242 = v252;
    v242[1] = v245;
    v242[2] = &v251[24 * v250];
    if (v244)
      operator delete(v244);
  }
  else
  {
    *(_QWORD *)v244 = 0x1EBB3E0519E8FF9DLL;
    *((_QWORD *)v244 + 1) = "md::ls::PrepassConstantDataHandle]";
    *((_QWORD *)v244 + 2) = 33;
    v245 = v244 + 24;
  }
  v242[1] = v245;
  v254 = *a1;
  v256 = (*a1)[1];
  v255 = (unint64_t)(*a1)[2];
  if ((unint64_t)v256 >= v255)
  {
    v258 = *v254;
    v259 = 0xAAAAAAAAAAAAAAABLL * ((v256 - *v254) >> 3);
    v260 = v259 + 1;
    if (v259 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v261 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v255 - (_QWORD)v258) >> 3);
    if (2 * v261 > v260)
      v260 = 2 * v261;
    if (v261 >= 0x555555555555555)
      v262 = 0xAAAAAAAAAAAAAAALL;
    else
      v262 = v260;
    if (v262)
    {
      if (v262 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v263 = (char *)operator new(24 * v262);
    }
    else
    {
      v263 = 0;
    }
    v264 = &v263[24 * v259];
    *(_QWORD *)v264 = 0x65937AC5D2157F71;
    *((_QWORD *)v264 + 1) = "md::ls::ColorCorrectionFactorConstantHandle]";
    *((_QWORD *)v264 + 2) = 43;
    v257 = v264 + 24;
    if (v256 != v258)
    {
      do
      {
        v265 = *(_OWORD *)(v256 - 24);
        *((_QWORD *)v264 - 1) = *((_QWORD *)v256 - 1);
        *(_OWORD *)(v264 - 24) = v265;
        v264 -= 24;
        v256 -= 24;
      }
      while (v256 != v258);
      v256 = *v254;
    }
    *v254 = v264;
    v254[1] = v257;
    v254[2] = &v263[24 * v262];
    if (v256)
      operator delete(v256);
  }
  else
  {
    *(_QWORD *)v256 = 0x65937AC5D2157F71;
    *((_QWORD *)v256 + 1) = "md::ls::ColorCorrectionFactorConstantHandle]";
    *((_QWORD *)v256 + 2) = 43;
    v257 = v256 + 24;
  }
  v254[1] = v257;
  v266 = *a1;
  v268 = (*a1)[1];
  v267 = (unint64_t)(*a1)[2];
  if ((unint64_t)v268 >= v267)
  {
    v270 = *v266;
    v271 = 0xAAAAAAAAAAAAAAABLL * ((v268 - *v266) >> 3);
    v272 = v271 + 1;
    if (v271 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v273 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v267 - (_QWORD)v270) >> 3);
    if (2 * v273 > v272)
      v272 = 2 * v273;
    if (v273 >= 0x555555555555555)
      v274 = 0xAAAAAAAAAAAAAAALL;
    else
      v274 = v272;
    if (v274)
    {
      if (v274 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v275 = (char *)operator new(24 * v274);
    }
    else
    {
      v275 = 0;
    }
    v276 = &v275[24 * v271];
    *(_QWORD *)v276 = 0x9292F9031FE6DB5;
    *((_QWORD *)v276 + 1) = "md::ls::ClippingConstantDataHandle]";
    *((_QWORD *)v276 + 2) = 34;
    v269 = v276 + 24;
    if (v268 != v270)
    {
      do
      {
        v277 = *(_OWORD *)(v268 - 24);
        *((_QWORD *)v276 - 1) = *((_QWORD *)v268 - 1);
        *(_OWORD *)(v276 - 24) = v277;
        v276 -= 24;
        v268 -= 24;
      }
      while (v268 != v270);
      v268 = *v266;
    }
    *v266 = v276;
    v266[1] = v269;
    v266[2] = &v275[24 * v274];
    if (v268)
      operator delete(v268);
  }
  else
  {
    *(_QWORD *)v268 = 0x9292F9031FE6DB5;
    *((_QWORD *)v268 + 1) = "md::ls::ClippingConstantDataHandle]";
    *((_QWORD *)v268 + 2) = 34;
    v269 = v268 + 24;
  }
  v266[1] = v269;
  v278 = *a1;
  v280 = (*a1)[1];
  v279 = (unint64_t)(*a1)[2];
  if ((unint64_t)v280 >= v279)
  {
    v282 = *v278;
    v283 = 0xAAAAAAAAAAAAAAABLL * ((v280 - *v278) >> 3);
    v284 = v283 + 1;
    if (v283 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v285 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v279 - (_QWORD)v282) >> 3);
    if (2 * v285 > v284)
      v284 = 2 * v285;
    if (v285 >= 0x555555555555555)
      v286 = 0xAAAAAAAAAAAAAAALL;
    else
      v286 = v284;
    if (v286)
    {
      if (v286 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v287 = (char *)operator new(24 * v286);
    }
    else
    {
      v287 = 0;
    }
    v288 = &v287[24 * v283];
    *(_QWORD *)v288 = 0x32FFF5E924C6D657;
    *((_QWORD *)v288 + 1) = "md::ls::PlanarConstantDataHandle]";
    *((_QWORD *)v288 + 2) = 32;
    v281 = v288 + 24;
    if (v280 != v282)
    {
      do
      {
        v289 = *(_OWORD *)(v280 - 24);
        *((_QWORD *)v288 - 1) = *((_QWORD *)v280 - 1);
        *(_OWORD *)(v288 - 24) = v289;
        v288 -= 24;
        v280 -= 24;
      }
      while (v280 != v282);
      v280 = *v278;
    }
    *v278 = v288;
    v278[1] = v281;
    v278[2] = &v287[24 * v286];
    if (v280)
      operator delete(v280);
  }
  else
  {
    *(_QWORD *)v280 = 0x32FFF5E924C6D657;
    *((_QWORD *)v280 + 1) = "md::ls::PlanarConstantDataHandle]";
    *((_QWORD *)v280 + 2) = 32;
    v281 = v280 + 24;
  }
  v278[1] = v281;
  v290 = *a1;
  v292 = (*a1)[1];
  v291 = (unint64_t)(*a1)[2];
  if ((unint64_t)v292 >= v291)
  {
    v294 = *v290;
    v295 = 0xAAAAAAAAAAAAAAABLL * ((v292 - *v290) >> 3);
    v296 = v295 + 1;
    if (v295 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v297 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v291 - (_QWORD)v294) >> 3);
    if (2 * v297 > v296)
      v296 = 2 * v297;
    if (v297 >= 0x555555555555555)
      v298 = 0xAAAAAAAAAAAAAAALL;
    else
      v298 = v296;
    if (v298)
    {
      if (v298 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v299 = (char *)operator new(24 * v298);
    }
    else
    {
      v299 = 0;
    }
    v300 = &v299[24 * v295];
    *(_QWORD *)v300 = 0x1D932F2BF291491;
    *((_QWORD *)v300 + 1) = "md::ls::TextureHandleForType<DaVinci::TexTexture>]";
    *((_QWORD *)v300 + 2) = 49;
    v293 = v300 + 24;
    if (v292 != v294)
    {
      do
      {
        v301 = *(_OWORD *)(v292 - 24);
        *((_QWORD *)v300 - 1) = *((_QWORD *)v292 - 1);
        *(_OWORD *)(v300 - 24) = v301;
        v300 -= 24;
        v292 -= 24;
      }
      while (v292 != v294);
      v292 = *v290;
    }
    *v290 = v300;
    v290[1] = v293;
    v290[2] = &v299[24 * v298];
    if (v292)
      operator delete(v292);
  }
  else
  {
    *(_QWORD *)v292 = 0x1D932F2BF291491;
    *((_QWORD *)v292 + 1) = "md::ls::TextureHandleForType<DaVinci::TexTexture>]";
    *((_QWORD *)v292 + 2) = 49;
    v293 = v292 + 24;
  }
  v290[1] = v293;
  v302 = *a1;
  v304 = (*a1)[1];
  v303 = (unint64_t)(*a1)[2];
  if ((unint64_t)v304 >= v303)
  {
    v306 = *v302;
    v307 = 0xAAAAAAAAAAAAAAABLL * ((v304 - *v302) >> 3);
    v308 = v307 + 1;
    if (v307 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v309 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v303 - (_QWORD)v306) >> 3);
    if (2 * v309 > v308)
      v308 = 2 * v309;
    if (v309 >= 0x555555555555555)
      v310 = 0xAAAAAAAAAAAAAAALL;
    else
      v310 = v308;
    if (v310)
    {
      if (v310 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v311 = (char *)operator new(24 * v310);
    }
    else
    {
      v311 = 0;
    }
    v312 = &v311[24 * v307];
    *(_QWORD *)v312 = 0xCE03281732FA0019;
    *((_QWORD *)v312 + 1) = "md::ls::TextureHandleForType<DaVinci::EmissiveTexture>]";
    *((_QWORD *)v312 + 2) = 54;
    v305 = v312 + 24;
    if (v304 != v306)
    {
      do
      {
        v313 = *(_OWORD *)(v304 - 24);
        *((_QWORD *)v312 - 1) = *((_QWORD *)v304 - 1);
        *(_OWORD *)(v312 - 24) = v313;
        v312 -= 24;
        v304 -= 24;
      }
      while (v304 != v306);
      v304 = *v302;
    }
    *v302 = v312;
    v302[1] = v305;
    v302[2] = &v311[24 * v310];
    if (v304)
      operator delete(v304);
  }
  else
  {
    *(_QWORD *)v304 = 0xCE03281732FA0019;
    *((_QWORD *)v304 + 1) = "md::ls::TextureHandleForType<DaVinci::EmissiveTexture>]";
    *((_QWORD *)v304 + 2) = 54;
    v305 = v304 + 24;
  }
  v302[1] = v305;
  v314 = *a1;
  v316 = (*a1)[1];
  v315 = (unint64_t)(*a1)[2];
  if ((unint64_t)v316 >= v315)
  {
    v318 = *v314;
    v319 = 0xAAAAAAAAAAAAAAABLL * ((v316 - *v314) >> 3);
    v320 = v319 + 1;
    if (v319 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v321 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v315 - (_QWORD)v318) >> 3);
    if (2 * v321 > v320)
      v320 = 2 * v321;
    if (v321 >= 0x555555555555555)
      v322 = 0xAAAAAAAAAAAAAAALL;
    else
      v322 = v320;
    if (v322)
    {
      if (v322 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v323 = (char *)operator new(24 * v322);
    }
    else
    {
      v323 = 0;
    }
    v324 = &v323[24 * v319];
    *(_QWORD *)v324 = 0xD2D99CA7D5B116C8;
    *((_QWORD *)v324 + 1) = "md::ls::TextureHandleForType<DaVinci::OverlayTexture>]";
    *((_QWORD *)v324 + 2) = 53;
    v317 = v324 + 24;
    if (v316 != v318)
    {
      do
      {
        v325 = *(_OWORD *)(v316 - 24);
        *((_QWORD *)v324 - 1) = *((_QWORD *)v316 - 1);
        *(_OWORD *)(v324 - 24) = v325;
        v324 -= 24;
        v316 -= 24;
      }
      while (v316 != v318);
      v316 = *v314;
    }
    *v314 = v324;
    v314[1] = v317;
    v314[2] = &v323[24 * v322];
    if (v316)
      operator delete(v316);
  }
  else
  {
    *(_QWORD *)v316 = 0xD2D99CA7D5B116C8;
    *((_QWORD *)v316 + 1) = "md::ls::TextureHandleForType<DaVinci::OverlayTexture>]";
    *((_QWORD *)v316 + 2) = 53;
    v317 = v316 + 24;
  }
  v314[1] = v317;
  v326 = *a1;
  v328 = (*a1)[1];
  v327 = (unint64_t)(*a1)[2];
  if ((unint64_t)v328 >= v327)
  {
    v330 = *v326;
    v331 = 0xAAAAAAAAAAAAAAABLL * ((v328 - *v326) >> 3);
    v332 = v331 + 1;
    if (v331 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v333 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v327 - (_QWORD)v330) >> 3);
    if (2 * v333 > v332)
      v332 = 2 * v333;
    if (v333 >= 0x555555555555555)
      v334 = 0xAAAAAAAAAAAAAAALL;
    else
      v334 = v332;
    if (v334)
    {
      if (v334 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v335 = (char *)operator new(24 * v334);
    }
    else
    {
      v335 = 0;
    }
    v336 = &v335[24 * v331];
    *(_QWORD *)v336 = 0xDF0018B9242ADFDBLL;
    *((_QWORD *)v336 + 1) = "md::ls::BlendRasterConstantDataHandle]";
    *((_QWORD *)v336 + 2) = 37;
    v329 = v336 + 24;
    if (v328 != v330)
    {
      do
      {
        v337 = *(_OWORD *)(v328 - 24);
        *((_QWORD *)v336 - 1) = *((_QWORD *)v328 - 1);
        *(_OWORD *)(v336 - 24) = v337;
        v336 -= 24;
        v328 -= 24;
      }
      while (v328 != v330);
      v328 = *v326;
    }
    *v326 = v336;
    v326[1] = v329;
    v326[2] = &v335[24 * v334];
    if (v328)
      operator delete(v328);
  }
  else
  {
    *(_QWORD *)v328 = 0xDF0018B9242ADFDBLL;
    *((_QWORD *)v328 + 1) = "md::ls::BlendRasterConstantDataHandle]";
    *((_QWORD *)v328 + 2) = 37;
    v329 = v328 + 24;
  }
  v326[1] = v329;
  v338 = *a1;
  v340 = (*a1)[1];
  v339 = (unint64_t)(*a1)[2];
  if ((unint64_t)v340 >= v339)
  {
    v342 = *v338;
    v343 = 0xAAAAAAAAAAAAAAABLL * ((v340 - *v338) >> 3);
    v344 = v343 + 1;
    if (v343 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v345 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v339 - (_QWORD)v342) >> 3);
    if (2 * v345 > v344)
      v344 = 2 * v345;
    if (v345 >= 0x555555555555555)
      v346 = 0xAAAAAAAAAAAAAAALL;
    else
      v346 = v344;
    if (v346)
    {
      if (v346 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v347 = (char *)operator new(24 * v346);
    }
    else
    {
      v347 = 0;
    }
    v348 = &v347[24 * v343];
    *(_QWORD *)v348 = 0xDC66BF6D06F6D0BALL;
    *((_QWORD *)v348 + 1) = "md::ls::RasterOverlayConstantDataHandle]";
    *((_QWORD *)v348 + 2) = 39;
    v341 = v348 + 24;
    if (v340 != v342)
    {
      do
      {
        v349 = *(_OWORD *)(v340 - 24);
        *((_QWORD *)v348 - 1) = *((_QWORD *)v340 - 1);
        *(_OWORD *)(v348 - 24) = v349;
        v348 -= 24;
        v340 -= 24;
      }
      while (v340 != v342);
      v340 = *v338;
    }
    *v338 = v348;
    v338[1] = v341;
    v338[2] = &v347[24 * v346];
    if (v340)
      operator delete(v340);
  }
  else
  {
    *(_QWORD *)v340 = 0xDC66BF6D06F6D0BALL;
    *((_QWORD *)v340 + 1) = "md::ls::RasterOverlayConstantDataHandle]";
    *((_QWORD *)v340 + 2) = 39;
    v341 = v340 + 24;
  }
  v338[1] = v341;
  v350 = *a1;
  v352 = (*a1)[1];
  v351 = (unint64_t)(*a1)[2];
  if ((unint64_t)v352 >= v351)
  {
    v354 = *v350;
    v355 = 0xAAAAAAAAAAAAAAABLL * ((v352 - *v350) >> 3);
    v356 = v355 + 1;
    if (v355 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v357 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v351 - (_QWORD)v354) >> 3);
    if (2 * v357 > v356)
      v356 = 2 * v357;
    if (v357 >= 0x555555555555555)
      v358 = 0xAAAAAAAAAAAAAAALL;
    else
      v358 = v356;
    if (v358)
    {
      if (v358 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v359 = (char *)operator new(24 * v358);
    }
    else
    {
      v359 = 0;
    }
    v360 = &v359[24 * v355];
    *(_QWORD *)v360 = 0x7D9191A7B57B7B35;
    *((_QWORD *)v360 + 1) = "md::ls::FlyoverCommonTransformConstantDataHandle]";
    *((_QWORD *)v360 + 2) = 48;
    v353 = v360 + 24;
    if (v352 != v354)
    {
      do
      {
        v361 = *(_OWORD *)(v352 - 24);
        *((_QWORD *)v360 - 1) = *((_QWORD *)v352 - 1);
        *(_OWORD *)(v360 - 24) = v361;
        v360 -= 24;
        v352 -= 24;
      }
      while (v352 != v354);
      v352 = *v350;
    }
    *v350 = v360;
    v350[1] = v353;
    v350[2] = &v359[24 * v358];
    if (v352)
      operator delete(v352);
  }
  else
  {
    *(_QWORD *)v352 = 0x7D9191A7B57B7B35;
    *((_QWORD *)v352 + 1) = "md::ls::FlyoverCommonTransformConstantDataHandle]";
    *((_QWORD *)v352 + 2) = 48;
    v353 = v352 + 24;
  }
  v350[1] = v353;
  v362 = *a1;
  v364 = (*a1)[1];
  v363 = (unint64_t)(*a1)[2];
  if ((unint64_t)v364 >= v363)
  {
    v366 = *v362;
    v367 = 0xAAAAAAAAAAAAAAABLL * ((v364 - *v362) >> 3);
    v368 = v367 + 1;
    if (v367 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v369 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v363 - (_QWORD)v366) >> 3);
    if (2 * v369 > v368)
      v368 = 2 * v369;
    if (v369 >= 0x555555555555555)
      v370 = 0xAAAAAAAAAAAAAAALL;
    else
      v370 = v368;
    if (v370)
    {
      if (v370 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v371 = (char *)operator new(24 * v370);
    }
    else
    {
      v371 = 0;
    }
    v372 = &v371[24 * v367];
    *(_QWORD *)v372 = 0x81BF69EEE736436;
    *((_QWORD *)v372 + 1) = "md::ls::FlyoverCommonS2TransformHandle]";
    *((_QWORD *)v372 + 2) = 38;
    v365 = v372 + 24;
    if (v364 != v366)
    {
      do
      {
        v373 = *(_OWORD *)(v364 - 24);
        *((_QWORD *)v372 - 1) = *((_QWORD *)v364 - 1);
        *(_OWORD *)(v372 - 24) = v373;
        v372 -= 24;
        v364 -= 24;
      }
      while (v364 != v366);
      v364 = *v362;
    }
    *v362 = v372;
    v362[1] = v365;
    v362[2] = &v371[24 * v370];
    if (v364)
      operator delete(v364);
  }
  else
  {
    *(_QWORD *)v364 = 0x81BF69EEE736436;
    *((_QWORD *)v364 + 1) = "md::ls::FlyoverCommonS2TransformHandle]";
    *((_QWORD *)v364 + 2) = 38;
    v365 = v364 + 24;
  }
  v362[1] = v365;
  v374 = *a1;
  v376 = (*a1)[1];
  v375 = (unint64_t)(*a1)[2];
  if ((unint64_t)v376 >= v375)
  {
    v378 = *v374;
    v379 = 0xAAAAAAAAAAAAAAABLL * ((v376 - *v374) >> 3);
    v380 = v379 + 1;
    if (v379 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v381 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v375 - (_QWORD)v378) >> 3);
    if (2 * v381 > v380)
      v380 = 2 * v381;
    if (v381 >= 0x555555555555555)
      v382 = 0xAAAAAAAAAAAAAAALL;
    else
      v382 = v380;
    if (v382)
    {
      if (v382 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v383 = (char *)operator new(24 * v382);
    }
    else
    {
      v383 = 0;
    }
    v384 = &v383[24 * v379];
    *(_QWORD *)v384 = 0x5B12559DCF20DC9ALL;
    *((_QWORD *)v384 + 1) = "md::ls::FlyoverCommonTexcoordsHandle]";
    *((_QWORD *)v384 + 2) = 36;
    v377 = v384 + 24;
    if (v376 != v378)
    {
      do
      {
        v385 = *(_OWORD *)(v376 - 24);
        *((_QWORD *)v384 - 1) = *((_QWORD *)v376 - 1);
        *(_OWORD *)(v384 - 24) = v385;
        v384 -= 24;
        v376 -= 24;
      }
      while (v376 != v378);
      v376 = *v374;
    }
    *v374 = v384;
    v374[1] = v377;
    v374[2] = &v383[24 * v382];
    if (v376)
      operator delete(v376);
  }
  else
  {
    *(_QWORD *)v376 = 0x5B12559DCF20DC9ALL;
    *((_QWORD *)v376 + 1) = "md::ls::FlyoverCommonTexcoordsHandle]";
    *((_QWORD *)v376 + 2) = 36;
    v377 = v376 + 24;
  }
  v374[1] = v377;
  v386 = *a1;
  v388 = (*a1)[1];
  v387 = (unint64_t)(*a1)[2];
  if ((unint64_t)v388 >= v387)
  {
    v390 = *v386;
    v391 = 0xAAAAAAAAAAAAAAABLL * ((v388 - *v386) >> 3);
    v392 = v391 + 1;
    if (v391 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v393 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v387 - (_QWORD)v390) >> 3);
    if (2 * v393 > v392)
      v392 = 2 * v393;
    if (v393 >= 0x555555555555555)
      v394 = 0xAAAAAAAAAAAAAAALL;
    else
      v394 = v392;
    if (v394)
    {
      if (v394 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v395 = (char *)operator new(24 * v394);
    }
    else
    {
      v395 = 0;
    }
    v396 = &v395[24 * v391];
    *(_QWORD *)v396 = 0xB70B6DE024A5B9DALL;
    *((_QWORD *)v396 + 1) = "md::ls::FlyoverCommonMaterialHandle]";
    *((_QWORD *)v396 + 2) = 35;
    v389 = v396 + 24;
    if (v388 != v390)
    {
      do
      {
        v397 = *(_OWORD *)(v388 - 24);
        *((_QWORD *)v396 - 1) = *((_QWORD *)v388 - 1);
        *(_OWORD *)(v396 - 24) = v397;
        v396 -= 24;
        v388 -= 24;
      }
      while (v388 != v390);
      v388 = *v386;
    }
    *v386 = v396;
    v386[1] = v389;
    v386[2] = &v395[24 * v394];
    if (v388)
      operator delete(v388);
  }
  else
  {
    *(_QWORD *)v388 = 0xB70B6DE024A5B9DALL;
    *((_QWORD *)v388 + 1) = "md::ls::FlyoverCommonMaterialHandle]";
    *((_QWORD *)v388 + 2) = 35;
    v389 = v388 + 24;
  }
  v386[1] = v389;
  v398 = *a1;
  v400 = (*a1)[1];
  v399 = (unint64_t)(*a1)[2];
  if ((unint64_t)v400 >= v399)
  {
    v402 = *v398;
    v403 = 0xAAAAAAAAAAAAAAABLL * ((v400 - *v398) >> 3);
    v404 = v403 + 1;
    if (v403 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v405 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v399 - (_QWORD)v402) >> 3);
    if (2 * v405 > v404)
      v404 = 2 * v405;
    if (v405 >= 0x555555555555555)
      v406 = 0xAAAAAAAAAAAAAAALL;
    else
      v406 = v404;
    if (v406)
    {
      if (v406 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v407 = (char *)operator new(24 * v406);
    }
    else
    {
      v407 = 0;
    }
    v408 = &v407[24 * v403];
    *(_QWORD *)v408 = 0x5E4DB6CB13CB5848;
    *((_QWORD *)v408 + 1) = "md::ls::FlyoverClipConstantDataHandle]";
    *((_QWORD *)v408 + 2) = 37;
    v401 = v408 + 24;
    if (v400 != v402)
    {
      do
      {
        v409 = *(_OWORD *)(v400 - 24);
        *((_QWORD *)v408 - 1) = *((_QWORD *)v400 - 1);
        *(_OWORD *)(v408 - 24) = v409;
        v408 -= 24;
        v400 -= 24;
      }
      while (v400 != v402);
      v400 = *v398;
    }
    *v398 = v408;
    v398[1] = v401;
    v398[2] = &v407[24 * v406];
    if (v400)
      operator delete(v400);
  }
  else
  {
    *(_QWORD *)v400 = 0x5E4DB6CB13CB5848;
    *((_QWORD *)v400 + 1) = "md::ls::FlyoverClipConstantDataHandle]";
    *((_QWORD *)v400 + 2) = 37;
    v401 = v400 + 24;
  }
  v398[1] = v401;
  v410 = *a1;
  v412 = (*a1)[1];
  v411 = (unint64_t)(*a1)[2];
  if ((unint64_t)v412 >= v411)
  {
    v414 = *v410;
    v415 = 0xAAAAAAAAAAAAAAABLL * ((v412 - *v410) >> 3);
    v416 = v415 + 1;
    if (v415 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v417 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v411 - (_QWORD)v414) >> 3);
    if (2 * v417 > v416)
      v416 = 2 * v417;
    if (v417 >= 0x555555555555555)
      v418 = 0xAAAAAAAAAAAAAAALL;
    else
      v418 = v416;
    if (v418)
    {
      if (v418 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v419 = (char *)operator new(24 * v418);
    }
    else
    {
      v419 = 0;
    }
    v420 = &v419[24 * v415];
    *(_QWORD *)v420 = 0xBAA35DF429A7267FLL;
    *((_QWORD *)v420 + 1) = "md::ls::TextureHandleForType<Flyover::DiffuseTexture>]";
    *((_QWORD *)v420 + 2) = 53;
    v413 = v420 + 24;
    if (v412 != v414)
    {
      do
      {
        v421 = *(_OWORD *)(v412 - 24);
        *((_QWORD *)v420 - 1) = *((_QWORD *)v412 - 1);
        *(_OWORD *)(v420 - 24) = v421;
        v420 -= 24;
        v412 -= 24;
      }
      while (v412 != v414);
      v412 = *v410;
    }
    *v410 = v420;
    v410[1] = v413;
    v410[2] = &v419[24 * v418];
    if (v412)
      operator delete(v412);
  }
  else
  {
    *(_QWORD *)v412 = 0xBAA35DF429A7267FLL;
    *((_QWORD *)v412 + 1) = "md::ls::TextureHandleForType<Flyover::DiffuseTexture>]";
    *((_QWORD *)v412 + 2) = 53;
    v413 = v412 + 24;
  }
  v410[1] = v413;
  v422 = *a1;
  v424 = (*a1)[1];
  v423 = (unint64_t)(*a1)[2];
  if ((unint64_t)v424 >= v423)
  {
    v426 = *v422;
    v427 = 0xAAAAAAAAAAAAAAABLL * ((v424 - *v422) >> 3);
    v428 = v427 + 1;
    if (v427 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v429 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v423 - (_QWORD)v426) >> 3);
    if (2 * v429 > v428)
      v428 = 2 * v429;
    if (v429 >= 0x555555555555555)
      v430 = 0xAAAAAAAAAAAAAAALL;
    else
      v430 = v428;
    if (v430)
    {
      if (v430 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v431 = (char *)operator new(24 * v430);
    }
    else
    {
      v431 = 0;
    }
    v432 = &v431[24 * v427];
    *(_QWORD *)v432 = 0xD49B968135FE1A73;
    *((_QWORD *)v432 + 1) = "md::ls::TextureHandleForType<Flyover::NightTexture>]";
    *((_QWORD *)v432 + 2) = 51;
    v425 = v432 + 24;
    if (v424 != v426)
    {
      do
      {
        v433 = *(_OWORD *)(v424 - 24);
        *((_QWORD *)v432 - 1) = *((_QWORD *)v424 - 1);
        *(_OWORD *)(v432 - 24) = v433;
        v432 -= 24;
        v424 -= 24;
      }
      while (v424 != v426);
      v424 = *v422;
    }
    *v422 = v432;
    v422[1] = v425;
    v422[2] = &v431[24 * v430];
    if (v424)
      operator delete(v424);
  }
  else
  {
    *(_QWORD *)v424 = 0xD49B968135FE1A73;
    *((_QWORD *)v424 + 1) = "md::ls::TextureHandleForType<Flyover::NightTexture>]";
    *((_QWORD *)v424 + 2) = 51;
    v425 = v424 + 24;
  }
  v422[1] = v425;
  v434 = *a1;
  v436 = (*a1)[1];
  v435 = (unint64_t)(*a1)[2];
  if ((unint64_t)v436 >= v435)
  {
    v438 = *v434;
    v439 = 0xAAAAAAAAAAAAAAABLL * ((v436 - *v434) >> 3);
    v440 = v439 + 1;
    if (v439 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v441 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v435 - (_QWORD)v438) >> 3);
    if (2 * v441 > v440)
      v440 = 2 * v441;
    if (v441 >= 0x555555555555555)
      v442 = 0xAAAAAAAAAAAAAAALL;
    else
      v442 = v440;
    if (v442)
    {
      if (v442 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v443 = (char *)operator new(24 * v442);
    }
    else
    {
      v443 = 0;
    }
    v444 = &v443[24 * v439];
    *(_QWORD *)v444 = 0x985FB09D9DF9959FLL;
    *((_QWORD *)v444 + 1) = "md::ls::HasStyleAttributeRasterSet]";
    *((_QWORD *)v444 + 2) = 34;
    v437 = v444 + 24;
    if (v436 != v438)
    {
      do
      {
        v445 = *(_OWORD *)(v436 - 24);
        *((_QWORD *)v444 - 1) = *((_QWORD *)v436 - 1);
        *(_OWORD *)(v444 - 24) = v445;
        v444 -= 24;
        v436 -= 24;
      }
      while (v436 != v438);
      v436 = *v434;
    }
    *v434 = v444;
    v434[1] = v437;
    v434[2] = &v443[24 * v442];
    if (v436)
      operator delete(v436);
  }
  else
  {
    *(_QWORD *)v436 = 0x985FB09D9DF9959FLL;
    *((_QWORD *)v436 + 1) = "md::ls::HasStyleAttributeRasterSet]";
    *((_QWORD *)v436 + 2) = 34;
    v437 = v436 + 24;
  }
  v434[1] = v437;
  v446 = *a1;
  v448 = (*a1)[1];
  v447 = (unint64_t)(*a1)[2];
  if ((unint64_t)v448 >= v447)
  {
    v450 = *v446;
    v451 = 0xAAAAAAAAAAAAAAABLL * ((v448 - *v446) >> 3);
    v452 = v451 + 1;
    if (v451 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v453 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v447 - (_QWORD)v450) >> 3);
    if (2 * v453 > v452)
      v452 = 2 * v453;
    if (v453 >= 0x555555555555555)
      v454 = 0xAAAAAAAAAAAAAAALL;
    else
      v454 = v452;
    if (v454)
    {
      if (v454 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v455 = (char *)operator new(24 * v454);
    }
    else
    {
      v455 = 0;
    }
    v456 = &v455[24 * v451];
    *(_QWORD *)v456 = 0x11BB47B172EB0B40;
    *((_QWORD *)v456 + 1) = "md::ls::NeedsClimateTint]";
    *((_QWORD *)v456 + 2) = 24;
    v449 = v456 + 24;
    if (v448 != v450)
    {
      do
      {
        v457 = *(_OWORD *)(v448 - 24);
        *((_QWORD *)v456 - 1) = *((_QWORD *)v448 - 1);
        *(_OWORD *)(v456 - 24) = v457;
        v456 -= 24;
        v448 -= 24;
      }
      while (v448 != v450);
      v448 = *v446;
    }
    *v446 = v456;
    v446[1] = v449;
    v446[2] = &v455[24 * v454];
    if (v448)
      operator delete(v448);
  }
  else
  {
    *(_QWORD *)v448 = 0x11BB47B172EB0B40;
    *((_QWORD *)v448 + 1) = "md::ls::NeedsClimateTint]";
    *((_QWORD *)v448 + 2) = 24;
    v449 = v448 + 24;
  }
  v446[1] = v449;
  v458 = *a1;
  v460 = (*a1)[1];
  v459 = (unint64_t)(*a1)[2];
  if ((unint64_t)v460 >= v459)
  {
    v462 = *v458;
    v463 = 0xAAAAAAAAAAAAAAABLL * ((v460 - *v458) >> 3);
    v464 = v463 + 1;
    if (v463 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v465 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v459 - (_QWORD)v462) >> 3);
    if (2 * v465 > v464)
      v464 = 2 * v465;
    if (v465 >= 0x555555555555555)
      v466 = 0xAAAAAAAAAAAAAAALL;
    else
      v466 = v464;
    if (v466)
    {
      if (v466 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v467 = (char *)operator new(24 * v466);
    }
    else
    {
      v467 = 0;
    }
    v468 = &v467[24 * v463];
    *(_QWORD *)v468 = 0xA0C97F52893883B7;
    *((_QWORD *)v468 + 1) = "md::ls::CustomRenderState]";
    *((_QWORD *)v468 + 2) = 25;
    v461 = v468 + 24;
    if (v460 != v462)
    {
      do
      {
        v469 = *(_OWORD *)(v460 - 24);
        *((_QWORD *)v468 - 1) = *((_QWORD *)v460 - 1);
        *(_OWORD *)(v468 - 24) = v469;
        v468 -= 24;
        v460 -= 24;
      }
      while (v460 != v462);
      v460 = *v458;
    }
    *v458 = v468;
    v458[1] = v461;
    v458[2] = &v467[24 * v466];
    if (v460)
      operator delete(v460);
  }
  else
  {
    *(_QWORD *)v460 = 0xA0C97F52893883B7;
    *((_QWORD *)v460 + 1) = "md::ls::CustomRenderState]";
    *((_QWORD *)v460 + 2) = 25;
    v461 = v460 + 24;
  }
  v458[1] = v461;
  v470 = *a1;
  v472 = (*a1)[1];
  v471 = (unint64_t)(*a1)[2];
  if ((unint64_t)v472 >= v471)
  {
    v474 = *v470;
    v475 = 0xAAAAAAAAAAAAAAABLL * ((v472 - *v470) >> 3);
    v476 = v475 + 1;
    if (v475 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v477 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v471 - (_QWORD)v474) >> 3);
    if (2 * v477 > v476)
      v476 = 2 * v477;
    if (v477 >= 0x555555555555555)
      v478 = 0xAAAAAAAAAAAAAAALL;
    else
      v478 = v476;
    if (v478)
    {
      if (v478 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v479 = (char *)operator new(24 * v478);
    }
    else
    {
      v479 = 0;
    }
    v480 = &v479[24 * v475];
    *(_QWORD *)v480 = 0xE103B5C60804137ELL;
    *((_QWORD *)v480 + 1) = "md::ls::ColorRampDataHandle]";
    *((_QWORD *)v480 + 2) = 27;
    v473 = v480 + 24;
    if (v472 != v474)
    {
      do
      {
        v481 = *(_OWORD *)(v472 - 24);
        *((_QWORD *)v480 - 1) = *((_QWORD *)v472 - 1);
        *(_OWORD *)(v480 - 24) = v481;
        v480 -= 24;
        v472 -= 24;
      }
      while (v472 != v474);
      v472 = *v470;
    }
    *v470 = v480;
    v470[1] = v473;
    v470[2] = &v479[24 * v478];
    if (v472)
      operator delete(v472);
  }
  else
  {
    *(_QWORD *)v472 = 0xE103B5C60804137ELL;
    *((_QWORD *)v472 + 1) = "md::ls::ColorRampDataHandle]";
    *((_QWORD *)v472 + 2) = 27;
    v473 = v472 + 24;
  }
  v470[1] = v473;
  v482 = *a1;
  v484 = (*a1)[1];
  v483 = (unint64_t)(*a1)[2];
  if ((unint64_t)v484 >= v483)
  {
    v486 = *v482;
    v487 = 0xAAAAAAAAAAAAAAABLL * ((v484 - *v482) >> 3);
    v488 = v487 + 1;
    if (v487 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v489 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v483 - (_QWORD)v486) >> 3);
    if (2 * v489 > v488)
      v488 = 2 * v489;
    if (v489 >= 0x555555555555555)
      v490 = 0xAAAAAAAAAAAAAAALL;
    else
      v490 = v488;
    if (v490)
    {
      if (v490 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v491 = (char *)operator new(24 * v490);
    }
    else
    {
      v491 = 0;
    }
    v492 = &v491[24 * v487];
    *(_QWORD *)v492 = 0x7931433C9A6EB2C6;
    *((_QWORD *)v492 + 1) = "md::ls::SharedUniqueID]";
    *((_QWORD *)v492 + 2) = 22;
    v485 = v492 + 24;
    if (v484 != v486)
    {
      do
      {
        v493 = *(_OWORD *)(v484 - 24);
        *((_QWORD *)v492 - 1) = *((_QWORD *)v484 - 1);
        *(_OWORD *)(v492 - 24) = v493;
        v492 -= 24;
        v484 -= 24;
      }
      while (v484 != v486);
      v484 = *v482;
    }
    *v482 = v492;
    v482[1] = v485;
    v482[2] = &v491[24 * v490];
    if (v484)
      operator delete(v484);
  }
  else
  {
    *(_QWORD *)v484 = 0x7931433C9A6EB2C6;
    *((_QWORD *)v484 + 1) = "md::ls::SharedUniqueID]";
    *((_QWORD *)v484 + 2) = 22;
    v485 = v484 + 24;
  }
  v482[1] = v485;
  v494 = *a1;
  v496 = (*a1)[1];
  v495 = (unint64_t)(*a1)[2];
  if ((unint64_t)v496 >= v495)
  {
    v498 = *v494;
    v499 = 0xAAAAAAAAAAAAAAABLL * ((v496 - *v494) >> 3);
    v500 = v499 + 1;
    if (v499 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v501 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v495 - (_QWORD)v498) >> 3);
    if (2 * v501 > v500)
      v500 = 2 * v501;
    if (v501 >= 0x555555555555555)
      v502 = 0xAAAAAAAAAAAAAAALL;
    else
      v502 = v500;
    if (v502)
    {
      if (v502 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v503 = (char *)operator new(24 * v502);
    }
    else
    {
      v503 = 0;
    }
    v504 = &v503[24 * v499];
    *(_QWORD *)v504 = 0x7087983DEF28DBFELL;
    *((_QWORD *)v504 + 1) = "md::ls::IsOpaque]";
    *((_QWORD *)v504 + 2) = 16;
    v497 = v504 + 24;
    if (v496 != v498)
    {
      do
      {
        v505 = *(_OWORD *)(v496 - 24);
        *((_QWORD *)v504 - 1) = *((_QWORD *)v496 - 1);
        *(_OWORD *)(v504 - 24) = v505;
        v504 -= 24;
        v496 -= 24;
      }
      while (v496 != v498);
      v496 = *v494;
    }
    *v494 = v504;
    v494[1] = v497;
    v494[2] = &v503[24 * v502];
    if (v496)
      operator delete(v496);
  }
  else
  {
    *(_QWORD *)v496 = 0x7087983DEF28DBFELL;
    *((_QWORD *)v496 + 1) = "md::ls::IsOpaque]";
    *((_QWORD *)v496 + 2) = 16;
    v497 = v496 + 24;
  }
  v494[1] = v497;
  v506 = *a1;
  v508 = (*a1)[1];
  v507 = (unint64_t)(*a1)[2];
  if ((unint64_t)v508 >= v507)
  {
    v510 = *v506;
    v511 = 0xAAAAAAAAAAAAAAABLL * ((v508 - *v506) >> 3);
    v512 = v511 + 1;
    if (v511 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v513 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v507 - (_QWORD)v510) >> 3);
    if (2 * v513 > v512)
      v512 = 2 * v513;
    if (v513 >= 0x555555555555555)
      v514 = 0xAAAAAAAAAAAAAAALL;
    else
      v514 = v512;
    if (v514)
    {
      if (v514 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v515 = (char *)operator new(24 * v514);
    }
    else
    {
      v515 = 0;
    }
    v516 = &v515[24 * v511];
    *(_QWORD *)v516 = 0x73F0259EC1934FB1;
    *((_QWORD *)v516 + 1) = "md::ls::IsTransparent]";
    *((_QWORD *)v516 + 2) = 21;
    v509 = v516 + 24;
    if (v508 != v510)
    {
      do
      {
        v517 = *(_OWORD *)(v508 - 24);
        *((_QWORD *)v516 - 1) = *((_QWORD *)v508 - 1);
        *(_OWORD *)(v516 - 24) = v517;
        v516 -= 24;
        v508 -= 24;
      }
      while (v508 != v510);
      v508 = *v506;
    }
    *v506 = v516;
    v506[1] = v509;
    v506[2] = &v515[24 * v514];
    if (v508)
      operator delete(v508);
  }
  else
  {
    *(_QWORD *)v508 = 0x73F0259EC1934FB1;
    *((_QWORD *)v508 + 1) = "md::ls::IsTransparent]";
    *((_QWORD *)v508 + 2) = 21;
    v509 = v508 + 24;
  }
  v506[1] = v509;
  v518 = *a1;
  v520 = (*a1)[1];
  v519 = (unint64_t)(*a1)[2];
  if ((unint64_t)v520 >= v519)
  {
    v522 = *v518;
    v523 = 0xAAAAAAAAAAAAAAABLL * ((v520 - *v518) >> 3);
    v524 = v523 + 1;
    if (v523 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v525 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v519 - (_QWORD)v522) >> 3);
    if (2 * v525 > v524)
      v524 = 2 * v525;
    if (v525 >= 0x555555555555555)
      v526 = 0xAAAAAAAAAAAAAAALL;
    else
      v526 = v524;
    if (v526)
    {
      if (v526 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v527 = (char *)operator new(24 * v526);
    }
    else
    {
      v527 = 0;
    }
    v528 = &v527[24 * v523];
    *(_QWORD *)v528 = 0x499CE17DBD9A1615;
    *((_QWORD *)v528 + 1) = "md::ls::NeedsZBias]";
    *((_QWORD *)v528 + 2) = 18;
    v521 = v528 + 24;
    if (v520 != v522)
    {
      do
      {
        v529 = *(_OWORD *)(v520 - 24);
        *((_QWORD *)v528 - 1) = *((_QWORD *)v520 - 1);
        *(_OWORD *)(v528 - 24) = v529;
        v528 -= 24;
        v520 -= 24;
      }
      while (v520 != v522);
      v520 = *v518;
    }
    *v518 = v528;
    v518[1] = v521;
    v518[2] = &v527[24 * v526];
    if (v520)
      operator delete(v520);
  }
  else
  {
    *(_QWORD *)v520 = 0x499CE17DBD9A1615;
    *((_QWORD *)v520 + 1) = "md::ls::NeedsZBias]";
    *((_QWORD *)v520 + 2) = 18;
    v521 = v520 + 24;
  }
  v518[1] = v521;
  v530 = *a1;
  v532 = (*a1)[1];
  v531 = (unint64_t)(*a1)[2];
  if ((unint64_t)v532 >= v531)
  {
    v534 = *v530;
    v535 = 0xAAAAAAAAAAAAAAABLL * ((v532 - *v530) >> 3);
    v536 = v535 + 1;
    if (v535 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v537 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v531 - (_QWORD)v534) >> 3);
    if (2 * v537 > v536)
      v536 = 2 * v537;
    if (v537 >= 0x555555555555555)
      v538 = 0xAAAAAAAAAAAAAAALL;
    else
      v538 = v536;
    if (v538)
    {
      if (v538 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v539 = (char *)operator new(24 * v538);
    }
    else
    {
      v539 = 0;
    }
    v540 = &v539[24 * v535];
    *(_QWORD *)v540 = 0x98A9F01DBB8BCCCELL;
    *((_QWORD *)v540 + 1) = "md::ls::PreserveHeight]";
    *((_QWORD *)v540 + 2) = 22;
    v533 = v540 + 24;
    if (v532 != v534)
    {
      do
      {
        v541 = *(_OWORD *)(v532 - 24);
        *((_QWORD *)v540 - 1) = *((_QWORD *)v532 - 1);
        *(_OWORD *)(v540 - 24) = v541;
        v540 -= 24;
        v532 -= 24;
      }
      while (v532 != v534);
      v532 = *v530;
    }
    *v530 = v540;
    v530[1] = v533;
    v530[2] = &v539[24 * v538];
    if (v532)
      operator delete(v532);
  }
  else
  {
    *(_QWORD *)v532 = 0x98A9F01DBB8BCCCELL;
    *((_QWORD *)v532 + 1) = "md::ls::PreserveHeight]";
    *((_QWORD *)v532 + 2) = 22;
    v533 = v532 + 24;
  }
  v530[1] = v533;
  v542 = *a1;
  v544 = (*a1)[1];
  v543 = (unint64_t)(*a1)[2];
  if ((unint64_t)v544 >= v543)
  {
    v546 = *v542;
    v547 = 0xAAAAAAAAAAAAAAABLL * ((v544 - *v542) >> 3);
    v548 = v547 + 1;
    if (v547 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v549 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v543 - (_QWORD)v546) >> 3);
    if (2 * v549 > v548)
      v548 = 2 * v549;
    if (v549 >= 0x555555555555555)
      v550 = 0xAAAAAAAAAAAAAAALL;
    else
      v550 = v548;
    if (v550)
    {
      if (v550 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v551 = (char *)operator new(24 * v550);
    }
    else
    {
      v551 = 0;
    }
    v552 = &v551[24 * v547];
    *(_QWORD *)v552 = 0xE53EF176130D7769;
    *((_QWORD *)v552 + 1) = "md::ls::InstanceCount]";
    *((_QWORD *)v552 + 2) = 21;
    v545 = v552 + 24;
    if (v544 != v546)
    {
      do
      {
        v553 = *(_OWORD *)(v544 - 24);
        *((_QWORD *)v552 - 1) = *((_QWORD *)v544 - 1);
        *(_OWORD *)(v552 - 24) = v553;
        v552 -= 24;
        v544 -= 24;
      }
      while (v544 != v546);
      v544 = *v542;
    }
    *v542 = v552;
    v542[1] = v545;
    v542[2] = &v551[24 * v550];
    if (v544)
      operator delete(v544);
  }
  else
  {
    *(_QWORD *)v544 = 0xE53EF176130D7769;
    *((_QWORD *)v544 + 1) = "md::ls::InstanceCount]";
    *((_QWORD *)v544 + 2) = 21;
    v545 = v544 + 24;
  }
  v542[1] = v545;
  v554 = *a1;
  v556 = (*a1)[1];
  v555 = (unint64_t)(*a1)[2];
  if ((unint64_t)v556 >= v555)
  {
    v558 = *v554;
    v559 = 0xAAAAAAAAAAAAAAABLL * ((v556 - *v554) >> 3);
    v560 = v559 + 1;
    if (v559 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v561 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v555 - (_QWORD)v558) >> 3);
    if (2 * v561 > v560)
      v560 = 2 * v561;
    if (v561 >= 0x555555555555555)
      v562 = 0xAAAAAAAAAAAAAAALL;
    else
      v562 = v560;
    if (v562)
    {
      if (v562 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v563 = (char *)operator new(24 * v562);
    }
    else
    {
      v563 = 0;
    }
    v564 = &v563[24 * v559];
    *(_QWORD *)v564 = 0x76B9BA390004E44ELL;
    *((_QWORD *)v564 + 1) = "md::ls::IsDecal]";
    *((_QWORD *)v564 + 2) = 15;
    v557 = v564 + 24;
    if (v556 != v558)
    {
      do
      {
        v565 = *(_OWORD *)(v556 - 24);
        *((_QWORD *)v564 - 1) = *((_QWORD *)v556 - 1);
        *(_OWORD *)(v564 - 24) = v565;
        v564 -= 24;
        v556 -= 24;
      }
      while (v556 != v558);
      v556 = *v554;
    }
    *v554 = v564;
    v554[1] = v557;
    v554[2] = &v563[24 * v562];
    if (v556)
      operator delete(v556);
  }
  else
  {
    *(_QWORD *)v556 = 0x76B9BA390004E44ELL;
    *((_QWORD *)v556 + 1) = "md::ls::IsDecal]";
    *((_QWORD *)v556 + 2) = 15;
    v557 = v556 + 24;
  }
  v554[1] = v557;
  v566 = *a1;
  v568 = (*a1)[1];
  v567 = (unint64_t)(*a1)[2];
  if ((unint64_t)v568 >= v567)
  {
    v570 = *v566;
    v571 = 0xAAAAAAAAAAAAAAABLL * ((v568 - *v566) >> 3);
    v572 = v571 + 1;
    if (v571 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v573 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v567 - (_QWORD)v570) >> 3);
    if (2 * v573 > v572)
      v572 = 2 * v573;
    if (v573 >= 0x555555555555555)
      v574 = 0xAAAAAAAAAAAAAAALL;
    else
      v574 = v572;
    if (v574)
    {
      if (v574 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v575 = (char *)operator new(24 * v574);
    }
    else
    {
      v575 = 0;
    }
    v576 = &v575[24 * v571];
    *(_QWORD *)v576 = 0x3E8485C60908F920;
    *((_QWORD *)v576 + 1) = "md::ls::IsMaterial]";
    *((_QWORD *)v576 + 2) = 18;
    v569 = v576 + 24;
    if (v568 != v570)
    {
      do
      {
        v577 = *(_OWORD *)(v568 - 24);
        *((_QWORD *)v576 - 1) = *((_QWORD *)v568 - 1);
        *(_OWORD *)(v576 - 24) = v577;
        v576 -= 24;
        v568 -= 24;
      }
      while (v568 != v570);
      v568 = *v566;
    }
    *v566 = v576;
    v566[1] = v569;
    v566[2] = &v575[24 * v574];
    if (v568)
      operator delete(v568);
  }
  else
  {
    *(_QWORD *)v568 = 0x3E8485C60908F920;
    *((_QWORD *)v568 + 1) = "md::ls::IsMaterial]";
    *((_QWORD *)v568 + 2) = 18;
    v569 = v568 + 24;
  }
  v566[1] = v569;
  v578 = *a1;
  v580 = (*a1)[1];
  v579 = (unint64_t)(*a1)[2];
  if ((unint64_t)v580 >= v579)
  {
    v582 = *v578;
    v583 = 0xAAAAAAAAAAAAAAABLL * ((v580 - *v578) >> 3);
    v584 = v583 + 1;
    if (v583 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v585 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v579 - (_QWORD)v582) >> 3);
    if (2 * v585 > v584)
      v584 = 2 * v585;
    if (v585 >= 0x555555555555555)
      v586 = 0xAAAAAAAAAAAAAAALL;
    else
      v586 = v584;
    if (v586)
    {
      if (v586 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v587 = (char *)operator new(24 * v586);
    }
    else
    {
      v587 = 0;
    }
    v588 = &v587[24 * v583];
    *(_QWORD *)v588 = 0x237F9D3BCC905318;
    *((_QWORD *)v588 + 1) = "md::ls::IsMercator]";
    *((_QWORD *)v588 + 2) = 18;
    v581 = v588 + 24;
    if (v580 != v582)
    {
      do
      {
        v589 = *(_OWORD *)(v580 - 24);
        *((_QWORD *)v588 - 1) = *((_QWORD *)v580 - 1);
        *(_OWORD *)(v588 - 24) = v589;
        v588 -= 24;
        v580 -= 24;
      }
      while (v580 != v582);
      v580 = *v578;
    }
    *v578 = v588;
    v578[1] = v581;
    v578[2] = &v587[24 * v586];
    if (v580)
      operator delete(v580);
  }
  else
  {
    *(_QWORD *)v580 = 0x237F9D3BCC905318;
    *((_QWORD *)v580 + 1) = "md::ls::IsMercator]";
    *((_QWORD *)v580 + 2) = 18;
    v581 = v580 + 24;
  }
  v578[1] = v581;
  v590 = *a1;
  v592 = (*a1)[1];
  v591 = (unint64_t)(*a1)[2];
  if ((unint64_t)v592 >= v591)
  {
    v594 = *v590;
    v595 = 0xAAAAAAAAAAAAAAABLL * ((v592 - *v590) >> 3);
    v596 = v595 + 1;
    if (v595 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v597 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v591 - (_QWORD)v594) >> 3);
    if (2 * v597 > v596)
      v596 = 2 * v597;
    if (v597 >= 0x555555555555555)
      v598 = 0xAAAAAAAAAAAAAAALL;
    else
      v598 = v596;
    if (v598)
    {
      if (v598 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v599 = (char *)operator new(24 * v598);
    }
    else
    {
      v599 = 0;
    }
    v600 = &v599[24 * v595];
    *(_QWORD *)v600 = 0x69465F3BE0BF85FBLL;
    *((_QWORD *)v600 + 1) = "md::ls::FlyoverInstance]";
    *((_QWORD *)v600 + 2) = 23;
    v593 = v600 + 24;
    if (v592 != v594)
    {
      do
      {
        v601 = *(_OWORD *)(v592 - 24);
        *((_QWORD *)v600 - 1) = *((_QWORD *)v592 - 1);
        *(_OWORD *)(v600 - 24) = v601;
        v600 -= 24;
        v592 -= 24;
      }
      while (v592 != v594);
      v592 = *v590;
    }
    *v590 = v600;
    v590[1] = v593;
    v590[2] = &v599[24 * v598];
    if (v592)
      operator delete(v592);
  }
  else
  {
    *(_QWORD *)v592 = 0x69465F3BE0BF85FBLL;
    *((_QWORD *)v592 + 1) = "md::ls::FlyoverInstance]";
    *((_QWORD *)v592 + 2) = 23;
    v593 = v592 + 24;
  }
  v590[1] = v593;
  v602 = *a1;
  v604 = (*a1)[1];
  v603 = (unint64_t)(*a1)[2];
  if ((unint64_t)v604 >= v603)
  {
    v606 = *v602;
    v607 = 0xAAAAAAAAAAAAAAABLL * ((v604 - *v602) >> 3);
    v608 = v607 + 1;
    if (v607 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v609 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v603 - (_QWORD)v606) >> 3);
    if (2 * v609 > v608)
      v608 = 2 * v609;
    if (v609 >= 0x555555555555555)
      v610 = 0xAAAAAAAAAAAAAAALL;
    else
      v610 = v608;
    if (v610)
    {
      if (v610 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v611 = (char *)operator new(24 * v610);
    }
    else
    {
      v611 = 0;
    }
    v612 = &v611[24 * v607];
    *(_QWORD *)v612 = 0x3EAAB620EAA88EC8;
    *((_QWORD *)v612 + 1) = "md::ls::CustomZIndex]";
    *((_QWORD *)v612 + 2) = 20;
    v605 = v612 + 24;
    if (v604 != v606)
    {
      do
      {
        v613 = *(_OWORD *)(v604 - 24);
        *((_QWORD *)v612 - 1) = *((_QWORD *)v604 - 1);
        *(_OWORD *)(v612 - 24) = v613;
        v612 -= 24;
        v604 -= 24;
      }
      while (v604 != v606);
      v604 = *v602;
    }
    *v602 = v612;
    v602[1] = v605;
    v602[2] = &v611[24 * v610];
    if (v604)
      operator delete(v604);
  }
  else
  {
    *(_QWORD *)v604 = 0x3EAAB620EAA88EC8;
    *((_QWORD *)v604 + 1) = "md::ls::CustomZIndex]";
    *((_QWORD *)v604 + 2) = 20;
    v605 = v604 + 24;
  }
  v602[1] = v605;
  v614 = *a1;
  v616 = (*a1)[1];
  v615 = (unint64_t)(*a1)[2];
  if ((unint64_t)v616 >= v615)
  {
    v618 = *v614;
    v619 = 0xAAAAAAAAAAAAAAABLL * ((v616 - *v614) >> 3);
    v620 = v619 + 1;
    if (v619 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_903;
    v621 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v615 - (_QWORD)v618) >> 3);
    if (2 * v621 > v620)
      v620 = 2 * v621;
    if (v621 >= 0x555555555555555)
      v622 = 0xAAAAAAAAAAAAAAALL;
    else
      v622 = v620;
    if (v622)
    {
      if (v622 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_904;
      v623 = (char *)operator new(24 * v622);
    }
    else
    {
      v623 = 0;
    }
    v624 = &v623[24 * v619];
    *(_QWORD *)v624 = 0x763953A644184BA9;
    *((_QWORD *)v624 + 1) = "md::ls::RenderableHash]";
    *((_QWORD *)v624 + 2) = 22;
    v617 = v624 + 24;
    if (v616 != v618)
    {
      do
      {
        v625 = *(_OWORD *)(v616 - 24);
        *((_QWORD *)v624 - 1) = *((_QWORD *)v616 - 1);
        *(_OWORD *)(v624 - 24) = v625;
        v624 -= 24;
        v616 -= 24;
      }
      while (v616 != v618);
      v616 = *v614;
    }
    *v614 = v624;
    v614[1] = v617;
    v614[2] = &v623[24 * v622];
    if (v616)
      operator delete(v616);
  }
  else
  {
    *(_QWORD *)v616 = 0x763953A644184BA9;
    *((_QWORD *)v616 + 1) = "md::ls::RenderableHash]";
    *((_QWORD *)v616 + 2) = 22;
    v617 = v616 + 24;
  }
  v614[1] = v617;
  v626 = *a1;
  v628 = (*a1)[1];
  v627 = (unint64_t)v626[2];
  if ((unint64_t)v628 < v627)
  {
    *(_QWORD *)v628 = 0xCB8AA7FBA6BCD25CLL;
    *((_QWORD *)v628 + 1) = "md::ls::PredefinedRenderState]";
    *((_QWORD *)v628 + 2) = 29;
    v629 = v628 + 24;
    goto LABEL_902;
  }
  v630 = *v626;
  v631 = 0xAAAAAAAAAAAAAAABLL * ((v628 - *v626) >> 3);
  v632 = v631 + 1;
  if (v631 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_903:
    abort();
  v633 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v627 - (_QWORD)v630) >> 3);
  if (2 * v633 > v632)
    v632 = 2 * v633;
  if (v633 >= 0x555555555555555)
    v634 = 0xAAAAAAAAAAAAAAALL;
  else
    v634 = v632;
  if (!v634)
  {
    v635 = 0;
    goto LABEL_897;
  }
  if (v634 > 0xAAAAAAAAAAAAAAALL)
LABEL_904:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v635 = (char *)operator new(24 * v634);
LABEL_897:
  v636 = &v635[24 * v631];
  *(_QWORD *)v636 = 0xCB8AA7FBA6BCD25CLL;
  *((_QWORD *)v636 + 1) = "md::ls::PredefinedRenderState]";
  *((_QWORD *)v636 + 2) = 29;
  v629 = v636 + 24;
  if (v628 != v630)
  {
    do
    {
      v637 = *(_OWORD *)(v628 - 24);
      *((_QWORD *)v636 - 1) = *((_QWORD *)v628 - 1);
      *(_OWORD *)(v636 - 24) = v637;
      v636 -= 24;
      v628 -= 24;
    }
    while (v628 != v630);
    v628 = *v626;
  }
  *v626 = v636;
  v626[1] = v629;
  v626[2] = &v635[24 * v634];
  if (v628)
    operator delete(v628);
LABEL_902:
  v626[1] = v629;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateMainRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateMainRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284190;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateMainRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284190;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateMainRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0xC0uLL);
  a1[2] = (char *)(v2 + 24);
  *v2 = 0x8DCCA4FD35258189;
  v2[1] = "md::ls::MeshRenderableID]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB43D0;
  v2[4] = "md::ls::SliceAssignmentT<md::SliceType::Main>]";
  v2[5] = 45;
  v2[6] = 0xE8C803AC798645E1;
  v2[7] = "md::ls::RenderableMeshVertexFormat]";
  v2[8] = 34;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 24)
  {
    *(_QWORD *)v3 = 0x751B872B282C3971;
    v2[10] = "md::ls::TileType]";
    v2[11] = 16;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_92;
  if (0x5555555555555556 * (((char *)(v2 + 24) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 24) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 24) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_93;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x751B872B282C3971;
  *((_QWORD *)v10 + 1) = "md::ls::TileType]";
  *((_QWORD *)v10 + 2) = 16;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0x75DBD6381F1903FFLL;
    *((_QWORD *)v4 + 1) = "md::ls::PendingProcessing]";
    *((_QWORD *)v4 + 2) = 25;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_92;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_93;
    v20 = (char *)operator new(24 * v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0x75DBD6381F1903FFLL;
  *((_QWORD *)v21 + 1) = "md::ls::PendingProcessing]";
  *((_QWORD *)v21 + 2) = 25;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
  v24 = (unint64_t)a1[2];
  if ((unint64_t)v14 < v24)
  {
    *(_QWORD *)v14 = 0xECC498AF223943D5;
    *((_QWORD *)v14 + 1) = "md::ls::MeshLayerTypeV]";
    *((_QWORD *)v14 + 2) = 22;
    v25 = v14 + 24;
    goto LABEL_55;
  }
  v26 = *a1;
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3);
  v28 = v27 + 1;
  if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_92;
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x555555555555555)
    v30 = 0xAAAAAAAAAAAAAAALL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_93;
    v31 = (char *)operator new(24 * v30);
  }
  else
  {
    v31 = 0;
  }
  v32 = &v31[24 * v27];
  v33 = &v31[24 * v30];
  *(_QWORD *)v32 = 0xECC498AF223943D5;
  *((_QWORD *)v32 + 1) = "md::ls::MeshLayerTypeV]";
  *((_QWORD *)v32 + 2) = 22;
  v25 = v32 + 24;
  if (v14 == v26)
  {
    *a1 = v32;
    a1[1] = v25;
    a1[2] = v33;
LABEL_54:
    operator delete(v14);
    goto LABEL_55;
  }
  do
  {
    v34 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v32 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v32 - 24) = v34;
    v32 -= 24;
    v14 -= 24;
  }
  while (v14 != v26);
  v14 = *a1;
  *a1 = v32;
  a1[1] = v25;
  a1[2] = v33;
  if (v14)
    goto LABEL_54;
LABEL_55:
  a1[1] = v25;
  v35 = (unint64_t)a1[2];
  if ((unint64_t)v25 < v35)
  {
    *(_QWORD *)v25 = 0xEC2A00DC914732D7;
    *((_QWORD *)v25 + 1) = "md::ls::IntendedSceneLayer]";
    *((_QWORD *)v25 + 2) = 26;
    v36 = v25 + 24;
    goto LABEL_73;
  }
  v37 = *a1;
  v38 = 0xAAAAAAAAAAAAAAABLL * ((v25 - *a1) >> 3);
  v39 = v38 + 1;
  if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_92;
  v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v37) >> 3);
  if (2 * v40 > v39)
    v39 = 2 * v40;
  if (v40 >= 0x555555555555555)
    v41 = 0xAAAAAAAAAAAAAAALL;
  else
    v41 = v39;
  if (v41)
  {
    if (v41 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_93;
    v42 = (char *)operator new(24 * v41);
  }
  else
  {
    v42 = 0;
  }
  v43 = &v42[24 * v38];
  v44 = &v42[24 * v41];
  *(_QWORD *)v43 = 0xEC2A00DC914732D7;
  *((_QWORD *)v43 + 1) = "md::ls::IntendedSceneLayer]";
  *((_QWORD *)v43 + 2) = 26;
  v36 = v43 + 24;
  if (v25 == v37)
  {
    *a1 = v43;
    a1[1] = v36;
    a1[2] = v44;
LABEL_72:
    operator delete(v25);
    goto LABEL_73;
  }
  do
  {
    v45 = *(_OWORD *)(v25 - 24);
    *((_QWORD *)v43 - 1) = *((_QWORD *)v25 - 1);
    *(_OWORD *)(v43 - 24) = v45;
    v43 -= 24;
    v25 -= 24;
  }
  while (v25 != v37);
  v25 = *a1;
  *a1 = v43;
  a1[1] = v36;
  a1[2] = v44;
  if (v25)
    goto LABEL_72;
LABEL_73:
  a1[1] = v36;
  v46 = (unint64_t)a1[2];
  if ((unint64_t)v36 < v46)
  {
    *(_QWORD *)v36 = 0x9D7520A01DC69D83;
    *((_QWORD *)v36 + 1) = "md::ls::HasMaterialRaster]";
    *((_QWORD *)v36 + 2) = 25;
    v47 = v36 + 24;
    goto LABEL_91;
  }
  v48 = *a1;
  v49 = 0xAAAAAAAAAAAAAAABLL * ((v36 - *a1) >> 3);
  v50 = v49 + 1;
  if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_92:
    abort();
  v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - (_QWORD)v48) >> 3);
  if (2 * v51 > v50)
    v50 = 2 * v51;
  if (v51 >= 0x555555555555555)
    v52 = 0xAAAAAAAAAAAAAAALL;
  else
    v52 = v50;
  if (v52)
  {
    if (v52 <= 0xAAAAAAAAAAAAAAALL)
    {
      v53 = (char *)operator new(24 * v52);
      goto LABEL_85;
    }
LABEL_93:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v53 = 0;
LABEL_85:
  v54 = &v53[24 * v49];
  v55 = &v53[24 * v52];
  *(_QWORD *)v54 = 0x9D7520A01DC69D83;
  *((_QWORD *)v54 + 1) = "md::ls::HasMaterialRaster]";
  *((_QWORD *)v54 + 2) = 25;
  v47 = v54 + 24;
  if (v36 == v48)
  {
    *a1 = v54;
    a1[1] = v47;
    a1[2] = v55;
LABEL_90:
    operator delete(v36);
    goto LABEL_91;
  }
  do
  {
    v56 = *(_OWORD *)(v36 - 24);
    *((_QWORD *)v54 - 1) = *((_QWORD *)v36 - 1);
    *(_OWORD *)(v54 - 24) = v56;
    v54 -= 24;
    v36 -= 24;
  }
  while (v36 != v48);
  v36 = *a1;
  *a1 = v54;
  a1[1] = v47;
  a1[2] = v55;
  if (v36)
    goto LABEL_90;
LABEL_91:
  a1[1] = v47;
}

void sub_19F70D554(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateMainRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateMainRenderItems>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateMainRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateMainRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276948;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateMainRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateMainRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276948;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateMainRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateMainRenderItems>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL4 isValid;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t result;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _OWORD *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t *v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  _OWORD *v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t *v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t *v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t *v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t *v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t *v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t *v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t *v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t *v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  unsigned int *v457;
  uint64_t v458;
  uint64_t v459;
  unint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  unint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  unint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t *v486;
  uint64_t v487;
  uint64_t v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  unint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t *v502;
  uint64_t *v503;
  uint64_t v504;
  char *v505;
  _BYTE *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t *v509;
  uint64_t v510;
  uint64_t v511;
  unint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  unint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t *v534;
  uint64_t *v535;
  uint64_t *v536;
  unsigned __int8 *v537;
  uint64_t *v538;
  uint64_t *v539;
  uint64_t v540;
  uint64_t v541;
  unint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t *v546;
  uint64_t *v547;
  uint64_t v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  unsigned __int8 *v554;
  unsigned __int8 *v555;
  unsigned __int8 *v556;
  _QWORD *v557;
  _QWORD *v558;
  _QWORD *v559;
  _QWORD *v560;
  _QWORD *v561;
  _QWORD *v562;
  _QWORD *v563;
  _QWORD *v564;
  _QWORD *v565;
  _QWORD *v566;
  _QWORD *v567;
  _QWORD *v568;
  _QWORD *HasStyleAttributeRaster;
  _QWORD *v570;
  _QWORD *v571;
  _QWORD *v572;
  _QWORD *v573;
  _QWORD *v574;
  _QWORD *v575;
  _QWORD *v576;
  _QWORD *v577;
  _QWORD *v578;
  _QWORD *v579;
  _QWORD *v580;
  _QWORD *v581;
  _QWORD *v582;
  _QWORD *v583;
  _QWORD *v584;
  _QWORD *v585;
  _QWORD *v586;
  _QWORD *v587;
  _QWORD *v588;
  _QWORD *v589;
  _QWORD *v590;
  _QWORD *v591;
  _QWORD *v592;
  _QWORD *v593;
  _QWORD *v594;
  _QWORD *v595;
  _QWORD *v596;
  _QWORD *v597;
  _QWORD *v598;
  _QWORD *v599;
  _QWORD *v600;
  _QWORD *v601;
  _QWORD *v602;
  _QWORD *v603;
  _QWORD *v604;
  _QWORD *HasMesh;
  _QWORD *HasMaterial;
  _QWORD *v607;
  _QWORD *v608;
  _QWORD *v609;
  _QWORD *v610;
  _QWORD *v611;
  uint64_t **v612;
  char *v613;
  uint64_t *v614;
  uint64_t *v615;
  uint64_t *v616;
  uint64_t *v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t *v620;
  uint64_t *v621;
  uint64_t *v622;
  uint64_t *v623;
  uint64_t *v624;
  uint64_t *v625;
  uint64_t *v626;
  _OWORD *v627;
  uint64_t *v628;
  uint64_t v629;
  uint64_t *v630;
  uint64_t *v631;
  uint64_t *v632;
  uint64_t *v633;
  uint64_t *v634;
  uint64_t *v635;
  uint64_t *v636;
  uint64_t *v637;
  uint64_t *v638;
  unint64_t *v639;
  uint64_t *v640;
  uint64_t *v641;
  _OWORD *v642;
  uint64_t *v643;
  uint64_t *v644;
  uint64_t *v645;
  uint64_t *v646;
  _QWORD *v647;
  _QWORD *v648;
  _QWORD *v649;
  _QWORD *v650;
  _QWORD *v651;
  _QWORD *v652;
  _QWORD v653[9];
  _QWORD *v654;

  *(_QWORD *)(a1 + 8) = a2;
  v612 = (uint64_t **)(a1 + 8);
  v2 = *(_QWORD *)(a2 + 8);
  v3 = gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  v4 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)7>>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::RenderableMeshVertexFormat>(v2);
  v6 = gdc::Registry::storage<md::ls::TileType>(v2);
  v7 = gdc::Registry::storage<md::ls::PendingProcessing>(v2);
  v8 = gdc::Registry::storage<md::ls::MeshLayerTypeV>(v2);
  v9 = gdc::Registry::storage<md::ls::IntendedSceneLayer>(v2);
  HasMaterial = (_QWORD *)gdc::Registry::storage<md::ls::HasMaterialRaster>(v2);
  HasMesh = (_QWORD *)gdc::Registry::storage<md::ls::HasMeshHandle>(v2);
  v604 = (_QWORD *)gdc::Registry::storage<md::ls::PositionScaleInfoConstantDataHandle>(v2);
  v603 = (_QWORD *)gdc::Registry::storage<md::ls::ViewConstantDataHandle>(v2);
  v602 = (_QWORD *)gdc::Registry::storage<md::ls::TransformConstantDataHandle>(v2);
  v601 = (_QWORD *)gdc::Registry::storage<md::ls::StyleDataKeyHandle>(v2);
  v600 = (_QWORD *)gdc::Registry::storage<md::ls::StyleEmissiveDataKeyHandle>(v2);
  v599 = (_QWORD *)gdc::Registry::storage<md::ls::StyleCameraConstantDataHandle>(v2);
  v598 = (_QWORD *)gdc::Registry::storage<md::ls::ColorDataHandle>(v2);
  v597 = (_QWORD *)gdc::Registry::storage<md::ls::IndexRange>(v2);
  v596 = (_QWORD *)gdc::Registry::storage<md::ls::StyleGroundOcclusionConstantDataHandle>(v2);
  v595 = (_QWORD *)gdc::Registry::storage<md::ls::SharedMaterialZIndexHandle>(v2);
  v594 = (_QWORD *)gdc::Registry::storage<md::ls::AssociationHandle>(v2);
  v593 = (_QWORD *)gdc::Registry::storage<md::ls::NormalsHandle>(v2);
  v592 = (_QWORD *)gdc::Registry::storage<md::ls::InstanceTransformHandle>(v2);
  v591 = (_QWORD *)gdc::Registry::storage<md::ls::UVsHandle>(v2);
  v590 = (_QWORD *)gdc::Registry::storage<md::ls::StyleRouteLineMaskDataKeyHandle>(v2);
  v589 = (_QWORD *)gdc::Registry::storage<md::ls::ElevationHandle>(v2);
  v588 = (_QWORD *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>(v2);
  v587 = (_QWORD *)gdc::Registry::storage<md::ls::LandCoverSettingsConstantDataHandle>(v2);
  v586 = (_QWORD *)gdc::Registry::storage<md::ls::ShadowConstantDataHandle>(v2);
  v585 = (_QWORD *)gdc::Registry::storage<md::ls::PrepassConstantDataHandle>(v2);
  v584 = (_QWORD *)gdc::Registry::storage<md::ls::ColorCorrectionFactorConstantHandle>(v2);
  v583 = (_QWORD *)gdc::Registry::storage<md::ls::ClippingConstantDataHandle>(v2);
  v582 = (_QWORD *)gdc::Registry::storage<md::ls::PlanarConstantDataHandle>(v2);
  v581 = (_QWORD *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::TexTexture>>(v2);
  v580 = (_QWORD *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>(v2);
  v579 = (_QWORD *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>(v2);
  v578 = (_QWORD *)gdc::Registry::storage<md::ls::BlendRasterConstantDataHandle>(v2);
  v577 = (_QWORD *)gdc::Registry::storage<md::ls::RasterOverlayConstantDataHandle>(v2);
  v576 = (_QWORD *)gdc::Registry::storage<md::ls::FlyoverCommonTransformConstantDataHandle>(v2);
  v575 = (_QWORD *)gdc::Registry::storage<md::ls::FlyoverCommonS2TransformHandle>(v2);
  v574 = (_QWORD *)gdc::Registry::storage<md::ls::FlyoverCommonTexcoordsHandle>(v2);
  v573 = (_QWORD *)gdc::Registry::storage<md::ls::FlyoverCommonMaterialHandle>(v2);
  v572 = (_QWORD *)gdc::Registry::storage<md::ls::FlyoverClipConstantDataHandle>(v2);
  v571 = (_QWORD *)gdc::Registry::storage<md::ls::TextureHandleForType<Flyover::DiffuseTexture>>(v2);
  v570 = (_QWORD *)gdc::Registry::storage<md::ls::TextureHandleForType<Flyover::NightTexture>>(v2);
  HasStyleAttributeRaster = (_QWORD *)gdc::Registry::storage<md::ls::HasStyleAttributeRasterSet>(v2);
  v568 = (_QWORD *)gdc::Registry::storage<md::ls::NeedsClimateTint>(v2);
  v567 = (_QWORD *)gdc::Registry::storage<md::ls::CustomRenderState>(v2);
  v566 = (_QWORD *)gdc::Registry::storage<md::ls::ColorRampDataHandle>(v2);
  v565 = (_QWORD *)gdc::Registry::storage<md::ls::SharedUniqueID>(v2);
  v564 = (_QWORD *)gdc::Registry::storage<md::ls::IsOpaque>(v2);
  v563 = (_QWORD *)gdc::Registry::storage<md::ls::IsTransparent>(v2);
  v562 = (_QWORD *)gdc::Registry::storage<md::ls::NeedsZBias>(v2);
  v561 = (_QWORD *)gdc::Registry::storage<md::ls::PreserveHeight>(v2);
  v560 = (_QWORD *)gdc::Registry::storage<md::ls::InstanceCount>(v2);
  v559 = (_QWORD *)gdc::Registry::storage<md::ls::IsDecal>(v2);
  v652 = (_QWORD *)gdc::Registry::storage<md::ls::IsMaterial>(v2);
  v651 = (_QWORD *)gdc::Registry::storage<md::ls::IsMercator>(v2);
  v650 = (_QWORD *)gdc::Registry::storage<md::ls::FlyoverInstance>(v2);
  v649 = (_QWORD *)gdc::Registry::storage<md::ls::CustomZIndex>(v2);
  v648 = (_QWORD *)gdc::Registry::storage<md::ls::RenderableHash>(v2);
  v647 = (_QWORD *)gdc::Registry::storage<md::ls::PredefinedRenderState>(v2);
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) >= *(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56))
    v10 = (_QWORD *)(v3 + 32);
  else
    v10 = (_QWORD *)(v4 + 32);
  if (v5[8] - v5[7] < v10[4] - v10[3])
    v10 = v5 + 4;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < v10[4] - v10[3])
    v10 = (_QWORD *)(v6 + 32);
  if (*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56) < v10[4] - v10[3])
    v10 = (_QWORD *)(v7 + 32);
  if (*(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56) < v10[4] - v10[3])
    v10 = (_QWORD *)(v8 + 32);
  if (*(_QWORD *)(v9 + 64) - *(_QWORD *)(v9 + 56) < v10[4] - v10[3])
    v10 = (_QWORD *)(v9 + 32);
  v653[0] = v10;
  v653[1] = v3;
  v653[2] = v4;
  v653[3] = v5;
  v611 = (_QWORD *)v6;
  v653[4] = v6;
  v653[5] = v7;
  v610 = (_QWORD *)v8;
  v653[6] = v8;
  v653[7] = v9;
  v609 = (_QWORD *)v9;
  v11 = (_QWORD *)v10[3];
  v12 = (_QWORD *)v10[4];
  v654 = v11;
  if (v12 != v11
    && !gdc::RegistryQueryView<gdc::All<md::ls::SliceAssignmentT<(md::SliceType)7> const,md::ls::RenderableMeshVertexFormat const,md::ls::TileType const,md::ls::RequiresDepthPeel const,md::ls::MeshLayerTypeV const,md::ls::IntendedSceneLayer const,md::ls::PendingProcessing const>,gdc::Any<md::ls::AssociationHandle,md::ls::PrepassConstantDataHandle,md::ls::ShadowConstantDataHandle,md::ls::PreserveHeight,md::ls::HasMeshHandle,md::ls::PositionScaleInfoConstantDataHandle,md::ls::ViewConstantDataHandle,md::ls::TransformConstantDataHandle,md::ls::IndexRange,md::ls::NormalsHandle,md::ls::InstanceTransformHandle,md::ls::UVsHandle,md::ls::NeedsZBias,md::ls::ClippingConstantDataHandle,md::ls::IsMercator,md::ls::ElevationHandle>,gdc::None<>>::Iterator::isValid(v653))
  {
    v13 = v11 + 1;
    do
    {
      v11 = v13;
      v654 = v13;
      if (v13 == v12)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::SliceAssignmentT<(md::SliceType)7> const,md::ls::RenderableMeshVertexFormat const,md::ls::TileType const,md::ls::RequiresDepthPeel const,md::ls::MeshLayerTypeV const,md::ls::IntendedSceneLayer const,md::ls::PendingProcessing const>,gdc::Any<md::ls::AssociationHandle,md::ls::PrepassConstantDataHandle,md::ls::ShadowConstantDataHandle,md::ls::PreserveHeight,md::ls::HasMeshHandle,md::ls::PositionScaleInfoConstantDataHandle,md::ls::ViewConstantDataHandle,md::ls::TransformConstantDataHandle,md::ls::IndexRange,md::ls::NormalsHandle,md::ls::InstanceTransformHandle,md::ls::UVsHandle,md::ls::NeedsZBias,md::ls::ClippingConstantDataHandle,md::ls::IsMercator,md::ls::ElevationHandle>,gdc::None<>>::Iterator::isValid(v653);
      v13 = v11 + 1;
    }
    while (!isValid);
  }
  v15 = (_QWORD *)v6;
  v16 = v610;
  v17 = v609;
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v608 = (_QWORD *)result;
  v607 = v19;
  if (v19 != v11)
  {
    v558 = v5;
    do
    {
      *v608 = *v11;
      v20 = *v11;
      v21 = HIDWORD(*v11);
      v22 = *v11 >> 39;
      v23 = v5[4];
      if (v22 < (v5[5] - v23) >> 3
        && (v24 = *(_QWORD *)(v23 + 8 * v22)) != 0
        && (v25 = *(unsigned __int16 *)(v24 + 2 * (HIDWORD(v20) & 0x7F)),
            v27 = v5[7],
            v26 = v5[8],
            v25 < (v26 - v27) >> 3)
        && ((v28 = v27 + 8 * v25, v28 != v26) ? (v29 = *(_DWORD *)(v28 + 4) == (_DWORD)v21) : (v29 = 0), v29))
      {
        v30 = v5[11];
        v31 = v5[10] + v25;
      }
      else
      {
        v30 = v5[11];
        v31 = v30;
      }
      if (v31 == v30)
        v32 = 0;
      else
        v32 = (_BYTE *)v31;
      v33 = v15[4];
      if (v22 < (v15[5] - v33) >> 3
        && (v34 = *(_QWORD *)(v33 + 8 * v22)) != 0
        && (v35 = *(unsigned __int16 *)(v34 + 2 * (HIDWORD(v20) & 0x7F)),
            v37 = v15[7],
            v36 = v15[8],
            v35 < (v36 - v37) >> 3)
        && ((v38 = v37 + 8 * v35, v38 != v36) ? (v39 = *(_DWORD *)(v38 + 4) == (_DWORD)v21) : (v39 = 0), v39))
      {
        v40 = v15[11];
        v41 = v15[10] + v35;
      }
      else
      {
        v40 = v15[11];
        v41 = v40;
      }
      if (v41 == v40)
        v42 = 0;
      else
        v42 = (unsigned __int8 *)v41;
      v43 = v16[4];
      if (v22 < (v16[5] - v43) >> 3
        && (v44 = *(_QWORD *)(v43 + 8 * v22)) != 0
        && (v45 = *(unsigned __int16 *)(v44 + 2 * (HIDWORD(v20) & 0x7F)),
            v47 = v16[7],
            v46 = v16[8],
            v45 < (v46 - v47) >> 3)
        && ((v48 = v47 + 8 * v45, v48 != v46) ? (v49 = *(_DWORD *)(v48 + 4) == (_DWORD)v21) : (v49 = 0), v49))
      {
        v50 = (char *)(v16[10] + v45);
      }
      else
      {
        v50 = (char *)v16[11];
      }
      v613 = v50;
      v51 = v17[4];
      if (v22 < (v17[5] - v51) >> 3
        && (v52 = *(_QWORD *)(v51 + 8 * v22)) != 0
        && (v53 = *(unsigned __int16 *)(v52 + 2 * (HIDWORD(v20) & 0x7F)),
            v55 = v17[7],
            v54 = v17[8],
            v53 < (v54 - v55) >> 3)
        && ((v56 = v55 + 8 * v53, v56 != v54) ? (v57 = *(_DWORD *)(v56 + 4) == (_DWORD)v21) : (v57 = 0), v57))
      {
        v58 = v17[11];
        v59 = v17[10] + v53;
      }
      else
      {
        v58 = v17[11];
        v59 = v58;
      }
      if (v59 == v58)
        v60 = 0;
      else
        v60 = (char *)v59;
      v61 = HasMesh[4];
      if (v22 < (HasMesh[5] - v61) >> 3
        && (v62 = *(_QWORD *)(v61 + 8 * v22)) != 0
        && (v63 = *(unsigned __int16 *)(v62 + 2 * (HIDWORD(v20) & 0x7F)),
            v65 = HasMesh[7],
            v64 = HasMesh[8],
            v63 < (v64 - v65) >> 3)
        && ((v66 = v65 + 8 * v63, v66 != v64) ? (v67 = *(_DWORD *)(v66 + 4) == (_DWORD)v21) : (v67 = 0), v67))
      {
        v68 = HasMesh[11];
        v69 = HasMesh[10] + 8 * v63;
      }
      else
      {
        v68 = HasMesh[11];
        v69 = v68;
      }
      if (v69 == v68)
        v70 = 0;
      else
        v70 = (uint64_t *)v69;
      v71 = v604[4];
      if (v22 < (v604[5] - v71) >> 3
        && (v72 = *(_QWORD *)(v71 + 8 * v22)) != 0
        && (v73 = *(unsigned __int16 *)(v72 + 2 * (HIDWORD(v20) & 0x7F)),
            v75 = v604[7],
            v74 = v604[8],
            v73 < (v74 - v75) >> 3)
        && ((v76 = v75 + 8 * v73, v76 != v74) ? (v77 = *(_DWORD *)(v76 + 4) == (_DWORD)v21) : (v77 = 0), v77))
      {
        v78 = v604[11];
        v79 = v604[10] + 16 * v73;
      }
      else
      {
        v78 = v604[11];
        v79 = v78;
      }
      if (v79 == v78)
        v80 = 0;
      else
        v80 = v79;
      v81 = v603[4];
      if (v22 < (v603[5] - v81) >> 3
        && (v82 = *(_QWORD *)(v81 + 8 * v22)) != 0
        && (v83 = *(unsigned __int16 *)(v82 + 2 * (HIDWORD(v20) & 0x7F)),
            v85 = v603[7],
            v84 = v603[8],
            v83 < (v84 - v85) >> 3)
        && ((v86 = v85 + 8 * v83, v86 != v84) ? (v87 = *(_DWORD *)(v86 + 4) == (_DWORD)v21) : (v87 = 0), v87))
      {
        v88 = v603[11];
        v89 = v603[10] + 8 * v83;
      }
      else
      {
        v88 = v603[11];
        v89 = v88;
      }
      if (v89 == v88)
        v90 = 0;
      else
        v90 = (uint64_t *)v89;
      v91 = v602[4];
      if (v22 < (v602[5] - v91) >> 3
        && (v92 = *(_QWORD *)(v91 + 8 * v22)) != 0
        && (v93 = *(unsigned __int16 *)(v92 + 2 * (HIDWORD(v20) & 0x7F)),
            v95 = v602[7],
            v94 = v602[8],
            v93 < (v94 - v95) >> 3)
        && (v96 = v95 + 8 * v93, v96 != v94)
        && *(_DWORD *)(v96 + 4) == (_DWORD)v21)
      {
        v97 = v602[11];
        v98 = v602[10] + 8 * v93;
      }
      else
      {
        v97 = v602[11];
        v98 = v97;
      }
      if (v98 == v97)
        v98 = 0;
      v615 = (uint64_t *)v98;
      v99 = v601[4];
      if (v22 < (v601[5] - v99) >> 3
        && (v100 = *(_QWORD *)(v99 + 8 * v22)) != 0
        && (v101 = *(unsigned __int16 *)(v100 + 2 * (HIDWORD(v20) & 0x7F)),
            v103 = v601[7],
            v102 = v601[8],
            v101 < (v102 - v103) >> 3)
        && (v104 = v103 + 8 * v101, v104 != v102)
        && *(_DWORD *)(v104 + 4) == (_DWORD)v21)
      {
        v105 = v601[11];
        v106 = v601[10] + 8 * v101;
      }
      else
      {
        v105 = v601[11];
        v106 = v105;
      }
      if (v106 == v105)
        v106 = 0;
      v614 = (uint64_t *)v106;
      v107 = v600[4];
      if (v22 < (v600[5] - v107) >> 3
        && (v108 = *(_QWORD *)(v107 + 8 * v22)) != 0
        && (v109 = *(unsigned __int16 *)(v108 + 2 * (HIDWORD(v20) & 0x7F)),
            v111 = v600[7],
            v110 = v600[8],
            v109 < (v110 - v111) >> 3)
        && (v112 = v111 + 8 * v109, v112 != v110)
        && *(_DWORD *)(v112 + 4) == (_DWORD)v21)
      {
        v113 = v600[11];
        v114 = v600[10] + 8 * v109;
      }
      else
      {
        v113 = v600[11];
        v114 = v113;
      }
      if (v114 == v113)
        v115 = 0;
      else
        v115 = (uint64_t *)v114;
      v116 = v599[4];
      if (v22 < (v599[5] - v116) >> 3
        && (v117 = *(_QWORD *)(v116 + 8 * v22)) != 0
        && (v118 = *(unsigned __int16 *)(v117 + 2 * (HIDWORD(v20) & 0x7F)),
            v120 = v599[7],
            v119 = v599[8],
            v118 < (v119 - v120) >> 3)
        && (v121 = v120 + 8 * v118, v121 != v119)
        && *(_DWORD *)(v121 + 4) == (_DWORD)v21)
      {
        v122 = v599[11];
        v123 = v599[10] + 8 * v118;
      }
      else
      {
        v122 = v599[11];
        v123 = v122;
      }
      if (v123 == v122)
        v124 = 0;
      else
        v124 = (uint64_t *)v123;
      v125 = v598[4];
      if (v22 < (v598[5] - v125) >> 3
        && (v126 = *(_QWORD *)(v125 + 8 * v22)) != 0
        && (v127 = *(unsigned __int16 *)(v126 + 2 * (HIDWORD(v20) & 0x7F)),
            v129 = v598[7],
            v128 = v598[8],
            v127 < (v128 - v129) >> 3)
        && (v130 = v129 + 8 * v127, v130 != v128)
        && *(_DWORD *)(v130 + 4) == (_DWORD)v21)
      {
        v131 = v598[11];
        v132 = v598[10] + 8 * v127;
      }
      else
      {
        v131 = v598[11];
        v132 = v131;
      }
      if (v132 == v131)
        v133 = 0;
      else
        v133 = (uint64_t *)v132;
      v134 = v597[4];
      v645 = v133;
      v646 = v124;
      if (v22 < (v597[5] - v134) >> 3
        && (v135 = *(_QWORD *)(v134 + 8 * v22)) != 0
        && (v136 = *(unsigned __int16 *)(v135 + 2 * (HIDWORD(v20) & 0x7F)),
            v138 = v597[7],
            v137 = v597[8],
            v136 < (v137 - v138) >> 3)
        && (v139 = v138 + 8 * v136, v139 != v137)
        && *(_DWORD *)(v139 + 4) == (_DWORD)v21)
      {
        v140 = v597[11];
        v141 = v597[10] + 16 * v136;
      }
      else
      {
        v140 = v597[11];
        v141 = v140;
      }
      if (v141 == v140)
        v142 = 0;
      else
        v142 = (_OWORD *)v141;
      v143 = v596[4];
      if (v22 < (v596[5] - v143) >> 3
        && (v144 = *(_QWORD *)(v143 + 8 * v22)) != 0
        && (v145 = *(unsigned __int16 *)(v144 + 2 * (HIDWORD(v20) & 0x7F)),
            v147 = v596[7],
            v146 = v596[8],
            v145 < (v146 - v147) >> 3)
        && (v148 = v147 + 8 * v145, v148 != v146)
        && *(_DWORD *)(v148 + 4) == (_DWORD)v21)
      {
        v149 = v596[11];
        v150 = v596[10] + 8 * v145;
      }
      else
      {
        v149 = v596[11];
        v150 = v149;
      }
      if (v150 == v149)
        v151 = 0;
      else
        v151 = (uint64_t *)v150;
      v152 = v595[4];
      if (v22 < (v595[5] - v152) >> 3
        && (v153 = *(_QWORD *)(v152 + 8 * v22)) != 0
        && (v154 = *(unsigned __int16 *)(v153 + 2 * (HIDWORD(v20) & 0x7F)),
            v156 = v595[7],
            v155 = v595[8],
            v154 < (v155 - v156) >> 3)
        && (v157 = v156 + 8 * v154, v157 != v155)
        && *(_DWORD *)(v157 + 4) == (_DWORD)v21)
      {
        v158 = v595[11];
        v159 = v595[10] + 8 * v154;
      }
      else
      {
        v158 = v595[11];
        v159 = v158;
      }
      if (v159 == v158)
        v160 = 0;
      else
        v160 = (uint64_t *)v159;
      v161 = v594[4];
      v643 = v160;
      v644 = v151;
      if (v22 < (v594[5] - v161) >> 3
        && (v162 = *(_QWORD *)(v161 + 8 * v22)) != 0
        && (v163 = *(unsigned __int16 *)(v162 + 2 * (HIDWORD(v20) & 0x7F)),
            v165 = v594[7],
            v164 = v594[8],
            v163 < (v164 - v165) >> 3)
        && (v166 = v165 + 8 * v163, v166 != v164)
        && *(_DWORD *)(v166 + 4) == (_DWORD)v21)
      {
        v167 = v594[11];
        v168 = v594[10] + 16 * v163;
      }
      else
      {
        v167 = v594[11];
        v168 = v167;
      }
      if (v168 == v167)
        v169 = 0;
      else
        v169 = (unint64_t *)v168;
      v170 = v593[4];
      if (v22 < (v593[5] - v170) >> 3
        && (v171 = *(_QWORD *)(v170 + 8 * v22)) != 0
        && (v172 = *(unsigned __int16 *)(v171 + 2 * (HIDWORD(v20) & 0x7F)),
            v174 = v593[7],
            v173 = v593[8],
            v172 < (v173 - v174) >> 3)
        && (v175 = v174 + 8 * v172, v175 != v173)
        && *(_DWORD *)(v175 + 4) == (_DWORD)v21)
      {
        v176 = v593[11];
        v177 = v593[10] + 8 * v172;
      }
      else
      {
        v176 = v593[11];
        v177 = v176;
      }
      if (v177 == v176)
        v178 = 0;
      else
        v178 = (uint64_t *)v177;
      v179 = v592[4];
      if (v22 < (v592[5] - v179) >> 3
        && (v180 = *(_QWORD *)(v179 + 8 * v22)) != 0
        && (v181 = *(unsigned __int16 *)(v180 + 2 * (HIDWORD(v20) & 0x7F)),
            v183 = v592[7],
            v182 = v592[8],
            v181 < (v182 - v183) >> 3)
        && (v184 = v183 + 8 * v181, v184 != v182)
        && *(_DWORD *)(v184 + 4) == (_DWORD)v21)
      {
        v185 = v592[11];
        v186 = v592[10] + 8 * v181;
      }
      else
      {
        v185 = v592[11];
        v186 = v185;
      }
      if (v186 == v185)
        v187 = 0;
      else
        v187 = (uint64_t *)v186;
      v188 = v591[4];
      v641 = v178;
      v640 = v187;
      if (v22 < (v591[5] - v188) >> 3
        && (v189 = *(_QWORD *)(v188 + 8 * v22)) != 0
        && (v190 = *(unsigned __int16 *)(v189 + 2 * (HIDWORD(v20) & 0x7F)),
            v192 = v591[7],
            v191 = v591[8],
            v190 < (v191 - v192) >> 3)
        && (v193 = v192 + 8 * v190, v193 != v191)
        && *(_DWORD *)(v193 + 4) == (_DWORD)v21)
      {
        v194 = v591[11];
        v195 = v591[10] + 8 * v190;
      }
      else
      {
        v194 = v591[11];
        v195 = v194;
      }
      if (v195 == v194)
        v196 = 0;
      else
        v196 = (uint64_t *)v195;
      v197 = v590[4];
      if (v22 < (v590[5] - v197) >> 3
        && (v198 = *(_QWORD *)(v197 + 8 * v22)) != 0
        && (v199 = *(unsigned __int16 *)(v198 + 2 * (HIDWORD(v20) & 0x7F)),
            v201 = v590[7],
            v200 = v590[8],
            v199 < (v200 - v201) >> 3)
        && (v202 = v201 + 8 * v199, v202 != v200)
        && *(_DWORD *)(v202 + 4) == (_DWORD)v21)
      {
        v203 = v590[11];
        v204 = v590[10] + 8 * v199;
      }
      else
      {
        v203 = v590[11];
        v204 = v203;
      }
      if (v204 == v203)
        v205 = 0;
      else
        v205 = (uint64_t *)v204;
      v206 = v589[4];
      if (v22 < (v589[5] - v206) >> 3
        && (v207 = *(_QWORD *)(v206 + 8 * v22)) != 0
        && (v208 = *(unsigned __int16 *)(v207 + 2 * (HIDWORD(v20) & 0x7F)),
            v210 = v589[7],
            v209 = v589[8],
            v208 < (v209 - v210) >> 3)
        && (v211 = v210 + 8 * v208, v211 != v209)
        && *(_DWORD *)(v211 + 4) == (_DWORD)v21)
      {
        v212 = v589[11];
        v213 = v589[10] + 8 * v208;
      }
      else
      {
        v212 = v589[11];
        v213 = v212;
      }
      if (v213 == v212)
        v214 = 0;
      else
        v214 = (uint64_t *)v213;
      v215 = v588[4];
      v638 = v205;
      v637 = v214;
      if (v22 < (v588[5] - v215) >> 3
        && (v216 = *(_QWORD *)(v215 + 8 * v22)) != 0
        && (v217 = *(unsigned __int16 *)(v216 + 2 * (HIDWORD(v20) & 0x7F)),
            v219 = v588[7],
            v218 = v588[8],
            v217 < (v218 - v219) >> 3)
        && (v220 = v219 + 8 * v217, v220 != v218)
        && *(_DWORD *)(v220 + 4) == (_DWORD)v21)
      {
        v221 = v588[11];
        v222 = v588[10] + 8 * v217;
      }
      else
      {
        v221 = v588[11];
        v222 = v221;
      }
      if (v222 == v221)
        v223 = 0;
      else
        v223 = (uint64_t *)v222;
      v224 = v587[4];
      if (v22 < (v587[5] - v224) >> 3
        && (v225 = *(_QWORD *)(v224 + 8 * v22)) != 0
        && (v226 = *(unsigned __int16 *)(v225 + 2 * (HIDWORD(v20) & 0x7F)),
            v228 = v587[7],
            v227 = v587[8],
            v226 < (v227 - v228) >> 3)
        && (v229 = v228 + 8 * v226, v229 != v227)
        && *(_DWORD *)(v229 + 4) == (_DWORD)v21)
      {
        v230 = v587[11];
        v231 = v587[10] + 8 * v226;
      }
      else
      {
        v230 = v587[11];
        v231 = v230;
      }
      if (v231 == v230)
        v232 = 0;
      else
        v232 = (uint64_t *)v231;
      v233 = v586[4];
      if (v22 < (v586[5] - v233) >> 3
        && (v234 = *(_QWORD *)(v233 + 8 * v22)) != 0
        && (v235 = *(unsigned __int16 *)(v234 + 2 * (HIDWORD(v20) & 0x7F)),
            v237 = v586[7],
            v236 = v586[8],
            v235 < (v236 - v237) >> 3)
        && (v238 = v237 + 8 * v235, v238 != v236)
        && *(_DWORD *)(v238 + 4) == (_DWORD)v21)
      {
        v239 = v586[11];
        v240 = v586[10] + 8 * v235;
      }
      else
      {
        v239 = v586[11];
        v240 = v239;
      }
      if (v240 == v239)
        v241 = 0;
      else
        v241 = (uint64_t *)v240;
      v242 = v585[4];
      v636 = v232;
      v635 = v241;
      if (v22 < (v585[5] - v242) >> 3
        && (v243 = *(_QWORD *)(v242 + 8 * v22)) != 0
        && (v244 = *(unsigned __int16 *)(v243 + 2 * (HIDWORD(v20) & 0x7F)),
            v246 = v585[7],
            v245 = v585[8],
            v244 < (v245 - v246) >> 3)
        && (v247 = v246 + 8 * v244, v247 != v245)
        && *(_DWORD *)(v247 + 4) == (_DWORD)v21)
      {
        v248 = v585[11];
        v249 = v585[10] + 8 * v244;
      }
      else
      {
        v248 = v585[11];
        v249 = v248;
      }
      if (v249 == v248)
        v250 = 0;
      else
        v250 = (uint64_t *)v249;
      v251 = v584[4];
      if (v22 < (v584[5] - v251) >> 3
        && (v252 = *(_QWORD *)(v251 + 8 * v22)) != 0
        && (v253 = *(unsigned __int16 *)(v252 + 2 * (HIDWORD(v20) & 0x7F)),
            v255 = v584[7],
            v254 = v584[8],
            v253 < (v254 - v255) >> 3)
        && (v256 = v255 + 8 * v253, v256 != v254)
        && *(_DWORD *)(v256 + 4) == (_DWORD)v21)
      {
        v257 = v584[11];
        v258 = v584[10] + 8 * v253;
      }
      else
      {
        v257 = v584[11];
        v258 = v257;
      }
      if (v258 == v257)
        v259 = 0;
      else
        v259 = (uint64_t *)v258;
      v260 = v583[4];
      if (v22 < (v583[5] - v260) >> 3
        && (v261 = *(_QWORD *)(v260 + 8 * v22)) != 0
        && (v262 = *(unsigned __int16 *)(v261 + 2 * (HIDWORD(v20) & 0x7F)),
            v264 = v583[7],
            v263 = v583[8],
            v262 < (v263 - v264) >> 3)
        && (v265 = v264 + 8 * v262, v265 != v263)
        && *(_DWORD *)(v265 + 4) == (_DWORD)v21)
      {
        v266 = v583[11];
        v267 = v583[10] + 8 * v262;
      }
      else
      {
        v266 = v583[11];
        v267 = v266;
      }
      if (v267 == v266)
        v268 = 0;
      else
        v268 = (uint64_t *)v267;
      v269 = v582[4];
      v633 = v259;
      v632 = v268;
      if (v22 < (v582[5] - v269) >> 3
        && (v270 = *(_QWORD *)(v269 + 8 * v22)) != 0
        && (v271 = *(unsigned __int16 *)(v270 + 2 * (HIDWORD(v20) & 0x7F)),
            v273 = v582[7],
            v272 = v582[8],
            v271 < (v272 - v273) >> 3)
        && (v274 = v273 + 8 * v271, v274 != v272)
        && *(_DWORD *)(v274 + 4) == (_DWORD)v21)
      {
        v275 = v582[11];
        v276 = v582[10] + 16 * v271;
      }
      else
      {
        v275 = v582[11];
        v276 = v275;
      }
      if (v276 == v275)
        v277 = 0;
      else
        v277 = v276;
      v278 = v581[4];
      if (v22 < (v581[5] - v278) >> 3
        && (v279 = *(_QWORD *)(v278 + 8 * v22)) != 0
        && (v280 = *(unsigned __int16 *)(v279 + 2 * (HIDWORD(v20) & 0x7F)),
            v282 = v581[7],
            v281 = v581[8],
            v280 < (v281 - v282) >> 3)
        && (v283 = v282 + 8 * v280, v283 != v281)
        && *(_DWORD *)(v283 + 4) == (_DWORD)v21)
      {
        v284 = v581[11];
        v285 = v581[10] + 8 * v280;
      }
      else
      {
        v284 = v581[11];
        v285 = v284;
      }
      if (v285 == v284)
        v286 = 0;
      else
        v286 = (uint64_t *)v285;
      v287 = v580[4];
      if (v22 < (v580[5] - v287) >> 3
        && (v288 = *(_QWORD *)(v287 + 8 * v22)) != 0
        && (v289 = *(unsigned __int16 *)(v288 + 2 * (HIDWORD(v20) & 0x7F)),
            v291 = v580[7],
            v290 = v580[8],
            v289 < (v290 - v291) >> 3)
        && (v292 = v291 + 8 * v289, v292 != v290)
        && *(_DWORD *)(v292 + 4) == (_DWORD)v21)
      {
        v293 = v580[11];
        v294 = v580[10] + 8 * v289;
      }
      else
      {
        v293 = v580[11];
        v294 = v293;
      }
      if (v294 == v293)
        v295 = 0;
      else
        v295 = (uint64_t *)v294;
      v296 = v579[4];
      v631 = v286;
      v630 = v295;
      if (v22 < (v579[5] - v296) >> 3
        && (v297 = *(_QWORD *)(v296 + 8 * v22)) != 0
        && (v298 = *(unsigned __int16 *)(v297 + 2 * (HIDWORD(v20) & 0x7F)),
            v300 = v579[7],
            v299 = v579[8],
            v298 < (v299 - v300) >> 3)
        && (v301 = v300 + 8 * v298, v301 != v299)
        && *(_DWORD *)(v301 + 4) == (_DWORD)v21)
      {
        v302 = v579[11];
        v303 = v579[10] + 8 * v298;
      }
      else
      {
        v302 = v579[11];
        v303 = v302;
      }
      if (v303 == v302)
        v304 = 0;
      else
        v304 = (uint64_t *)v303;
      v305 = v578[4];
      if (v22 < (v578[5] - v305) >> 3
        && (v306 = *(_QWORD *)(v305 + 8 * v22)) != 0
        && (v307 = *(unsigned __int16 *)(v306 + 2 * (HIDWORD(v20) & 0x7F)),
            v309 = v578[7],
            v308 = v578[8],
            v307 < (v308 - v309) >> 3)
        && (v310 = v309 + 8 * v307, v310 != v308)
        && *(_DWORD *)(v310 + 4) == (_DWORD)v21)
      {
        v311 = v578[11];
        v312 = v578[10] + 8 * v307;
      }
      else
      {
        v311 = v578[11];
        v312 = v311;
      }
      if (v312 == v311)
        v313 = 0;
      else
        v313 = (uint64_t *)v312;
      v314 = v577[4];
      if (v22 < (v577[5] - v314) >> 3
        && (v315 = *(_QWORD *)(v314 + 8 * v22)) != 0
        && (v316 = *(unsigned __int16 *)(v315 + 2 * (HIDWORD(v20) & 0x7F)),
            v318 = v577[7],
            v317 = v577[8],
            v316 < (v317 - v318) >> 3)
        && (v319 = v318 + 8 * v316, v319 != v317)
        && *(_DWORD *)(v319 + 4) == (_DWORD)v21)
      {
        v320 = v577[11];
        v321 = v577[10] + 32 * v316;
      }
      else
      {
        v320 = v577[11];
        v321 = v320;
      }
      if (v321 == v320)
        v322 = 0;
      else
        v322 = (_OWORD *)v321;
      v323 = v576[4];
      v628 = v313;
      v627 = v322;
      if (v22 < (v576[5] - v323) >> 3
        && (v324 = *(_QWORD *)(v323 + 8 * v22)) != 0
        && (v325 = *(unsigned __int16 *)(v324 + 2 * (HIDWORD(v20) & 0x7F)),
            v327 = v576[7],
            v326 = v576[8],
            v325 < (v326 - v327) >> 3)
        && (v328 = v327 + 8 * v325, v328 != v326)
        && *(_DWORD *)(v328 + 4) == (_DWORD)v21)
      {
        v329 = v576[11];
        v330 = v576[10] + 8 * v325;
      }
      else
      {
        v329 = v576[11];
        v330 = v329;
      }
      if (v330 == v329)
        v331 = 0;
      else
        v331 = (uint64_t *)v330;
      v332 = v575[4];
      if (v22 < (v575[5] - v332) >> 3
        && (v333 = *(_QWORD *)(v332 + 8 * v22)) != 0
        && (v334 = *(unsigned __int16 *)(v333 + 2 * (HIDWORD(v20) & 0x7F)),
            v336 = v575[7],
            v335 = v575[8],
            v334 < (v335 - v336) >> 3)
        && (v337 = v336 + 8 * v334, v337 != v335)
        && *(_DWORD *)(v337 + 4) == (_DWORD)v21)
      {
        v338 = v575[11];
        v339 = v575[10] + 8 * v334;
      }
      else
      {
        v338 = v575[11];
        v339 = v338;
      }
      if (v339 == v338)
        v340 = 0;
      else
        v340 = (uint64_t *)v339;
      v341 = v574[4];
      if (v22 < (v574[5] - v341) >> 3
        && (v342 = *(_QWORD *)(v341 + 8 * v22)) != 0
        && (v343 = *(unsigned __int16 *)(v342 + 2 * (HIDWORD(v20) & 0x7F)),
            v345 = v574[7],
            v344 = v574[8],
            v343 < (v344 - v345) >> 3)
        && (v346 = v345 + 8 * v343, v346 != v344)
        && *(_DWORD *)(v346 + 4) == (_DWORD)v21)
      {
        v347 = v574[11];
        v348 = v574[10] + 8 * v343;
      }
      else
      {
        v347 = v574[11];
        v348 = v347;
      }
      if (v348 == v347)
        v349 = 0;
      else
        v349 = (uint64_t *)v348;
      v350 = v573[4];
      v626 = v340;
      v625 = v349;
      if (v22 < (v573[5] - v350) >> 3
        && (v351 = *(_QWORD *)(v350 + 8 * v22)) != 0
        && (v352 = *(unsigned __int16 *)(v351 + 2 * (HIDWORD(v20) & 0x7F)),
            v354 = v573[7],
            v353 = v573[8],
            v352 < (v353 - v354) >> 3)
        && (v355 = v354 + 8 * v352, v355 != v353)
        && *(_DWORD *)(v355 + 4) == (_DWORD)v21)
      {
        v356 = v573[11];
        v357 = v573[10] + 8 * v352;
      }
      else
      {
        v356 = v573[11];
        v357 = v356;
      }
      if (v357 == v356)
        v358 = 0;
      else
        v358 = (uint64_t *)v357;
      v359 = v572[4];
      if (v22 < (v572[5] - v359) >> 3
        && (v360 = *(_QWORD *)(v359 + 8 * v22)) != 0
        && (v361 = *(unsigned __int16 *)(v360 + 2 * (HIDWORD(v20) & 0x7F)),
            v363 = v572[7],
            v362 = v572[8],
            v361 < (v362 - v363) >> 3)
        && (v364 = v363 + 8 * v361, v364 != v362)
        && *(_DWORD *)(v364 + 4) == (_DWORD)v21)
      {
        v365 = v572[11];
        v366 = v572[10] + 8 * v361;
      }
      else
      {
        v365 = v572[11];
        v366 = v365;
      }
      if (v366 == v365)
        v367 = 0;
      else
        v367 = (uint64_t *)v366;
      v368 = v571[4];
      v623 = v367;
      if (v22 < (v571[5] - v368) >> 3
        && (v369 = *(_QWORD *)(v368 + 8 * v22)) != 0
        && (v370 = *(unsigned __int16 *)(v369 + 2 * (HIDWORD(v20) & 0x7F)),
            v372 = v571[7],
            v371 = v571[8],
            v370 < (v371 - v372) >> 3)
        && (v373 = v372 + 8 * v370, v373 != v371)
        && *(_DWORD *)(v373 + 4) == (_DWORD)v21)
      {
        v374 = v571[11];
        v375 = v571[10] + 8 * v370;
      }
      else
      {
        v374 = v571[11];
        v375 = v374;
      }
      if (v375 == v374)
        v376 = 0;
      else
        v376 = (uint64_t *)v375;
      v377 = v570[4];
      if (v22 < (v570[5] - v377) >> 3
        && (v378 = *(_QWORD *)(v377 + 8 * v22)) != 0
        && (v379 = *(unsigned __int16 *)(v378 + 2 * (HIDWORD(v20) & 0x7F)),
            v381 = v570[7],
            v380 = v570[8],
            v379 < (v380 - v381) >> 3)
        && (v382 = v381 + 8 * v379, v382 != v380)
        && *(_DWORD *)(v382 + 4) == (_DWORD)v21)
      {
        v383 = v570[11];
        v384 = v570[10] + 8 * v379;
      }
      else
      {
        v383 = v570[11];
        v384 = v383;
      }
      if (v384 == v383)
        v385 = 0;
      else
        v385 = (uint64_t *)v384;
      v386 = HasStyleAttributeRaster[4];
      if (v22 < (HasStyleAttributeRaster[5] - v386) >> 3
        && (v387 = *(_QWORD *)(v386 + 8 * v22)) != 0
        && (v388 = *(unsigned __int16 *)(v387 + 2 * (HIDWORD(v20) & 0x7F)),
            v390 = HasStyleAttributeRaster[7],
            v389 = HasStyleAttributeRaster[8],
            v388 < (v389 - v390) >> 3)
        && (v391 = v390 + 8 * v388, v391 != v389)
        && *(_DWORD *)(v391 + 4) == (_DWORD)v21)
      {
        v392 = HasStyleAttributeRaster[11];
        v393 = HasStyleAttributeRaster[10] + 8 * v388;
      }
      else
      {
        v392 = HasStyleAttributeRaster[11];
        v393 = v392;
      }
      if (v393 == v392)
        v394 = 0;
      else
        v394 = (uint64_t *)v393;
      v395 = HasMaterial[4];
      if (v22 < (HasMaterial[5] - v395) >> 3
        && (v396 = *(_QWORD *)(v395 + 8 * v22)) != 0
        && (v397 = *(unsigned __int16 *)(v396 + 2 * (HIDWORD(v20) & 0x7F)),
            v399 = HasMaterial[7],
            v398 = HasMaterial[8],
            v397 < (v398 - v399) >> 3)
        && (v400 = v399 + 8 * v397, v400 != v398)
        && *(_DWORD *)(v400 + 4) == (_DWORD)v21)
      {
        v401 = HasMaterial[11];
        v402 = HasMaterial[10] + 8 * v397;
      }
      else
      {
        v401 = HasMaterial[11];
        v402 = v401;
      }
      if (v402 == v401)
        v403 = 0;
      else
        v403 = (uint64_t *)v402;
      v404 = v568[4];
      v642 = v142;
      v639 = v169;
      v621 = v403;
      if (v22 < (v568[5] - v404) >> 3
        && (v405 = *(_QWORD *)(v404 + 8 * v22)) != 0
        && (v406 = *(unsigned __int16 *)(v405 + 2 * (HIDWORD(v20) & 0x7F)),
            v408 = v568[7],
            v407 = v568[8],
            v406 < (v407 - v408) >> 3)
        && (v409 = v408 + 8 * v406, v409 != v407)
        && *(_DWORD *)(v409 + 4) == (_DWORD)v21)
      {
        v410 = v568[11];
        v411 = v568[10] + 8 * v406;
      }
      else
      {
        v410 = v568[11];
        v411 = v410;
      }
      if (v411 == v410)
        v412 = 0;
      else
        v412 = (uint64_t *)v411;
      v413 = v567[4];
      v634 = v196;
      if (v22 < (v567[5] - v413) >> 3
        && (v414 = *(_QWORD *)(v413 + 8 * v22)) != 0
        && (v415 = *(unsigned __int16 *)(v414 + 2 * (HIDWORD(v20) & 0x7F)),
            v417 = v567[7],
            v416 = v567[8],
            v415 < (v416 - v417) >> 3)
        && (v418 = v417 + 8 * v415, v418 != v416)
        && *(_DWORD *)(v418 + 4) == (_DWORD)v21)
      {
        v419 = v567[11];
        v420 = v567[10] + 24 * v415;
      }
      else
      {
        v419 = v567[11];
        v420 = v419;
      }
      if (v420 == v419)
        v421 = 0;
      else
        v421 = v420;
      v422 = v566[4];
      v629 = v277;
      v619 = v421;
      if (v22 < (v566[5] - v422) >> 3
        && (v423 = *(_QWORD *)(v422 + 8 * v22)) != 0
        && (v424 = *(unsigned __int16 *)(v423 + 2 * (HIDWORD(v20) & 0x7F)),
            v426 = v566[7],
            v425 = v566[8],
            v424 < (v425 - v426) >> 3)
        && (v427 = v426 + 8 * v424, v427 != v425)
        && *(_DWORD *)(v427 + 4) == (_DWORD)v21)
      {
        v428 = v566[11];
        v429 = v566[10] + 8 * v424;
      }
      else
      {
        v428 = v566[11];
        v429 = v428;
      }
      if (v429 == v428)
        v430 = 0;
      else
        v430 = (uint64_t *)v429;
      v431 = v565[4];
      v624 = v304;
      if (v22 < (v565[5] - v431) >> 3
        && (v432 = *(_QWORD *)(v431 + 8 * v22)) != 0
        && (v433 = *(unsigned __int16 *)(v432 + 2 * (HIDWORD(v20) & 0x7F)),
            v435 = v565[7],
            v434 = v565[8],
            v433 < (v434 - v435) >> 3)
        && (v436 = v435 + 8 * v433, v436 != v434)
        && *(_DWORD *)(v436 + 4) == (_DWORD)v21)
      {
        v437 = v565[11];
        v438 = v565[10] + 24 * v433;
      }
      else
      {
        v437 = v565[11];
        v438 = v437;
      }
      if (v438 == v437)
        v439 = 0;
      else
        v439 = v438;
      v440 = v564[4];
      v622 = v223;
      v618 = v439;
      if (v22 < (v564[5] - v440) >> 3
        && (v441 = *(_QWORD *)(v440 + 8 * v22)) != 0
        && (v442 = *(unsigned __int16 *)(v441 + 2 * (HIDWORD(v20) & 0x7F)),
            v444 = v564[7],
            v443 = v564[8],
            v442 < (v443 - v444) >> 3)
        && (v445 = v444 + 8 * v442, v445 != v443)
        && *(_DWORD *)(v445 + 4) == (_DWORD)v21)
      {
        v446 = v564[11];
        v447 = v564[10] + v442;
      }
      else
      {
        v446 = v564[11];
        v447 = v446;
      }
      if (v447 == v446)
        v448 = 0;
      else
        v448 = v447;
      v449 = v563[4];
      v620 = v331;
      if (v22 < (v563[5] - v449) >> 3
        && (v450 = *(_QWORD *)(v449 + 8 * v22)) != 0
        && (v451 = *(unsigned __int16 *)(v450 + 2 * (HIDWORD(v20) & 0x7F)),
            v453 = v563[7],
            v452 = v563[8],
            v451 < (v452 - v453) >> 3)
        && (v454 = v453 + 8 * v451, v454 != v452)
        && *(_DWORD *)(v454 + 4) == (_DWORD)v21)
      {
        v455 = v563[11];
        v456 = v563[10] + 4 * v451;
      }
      else
      {
        v455 = v563[11];
        v456 = v455;
      }
      if (v456 == v455)
        v457 = 0;
      else
        v457 = (unsigned int *)v456;
      v458 = v562[4];
      v617 = v250;
      v616 = v412;
      if (v22 < (v562[5] - v458) >> 3
        && (v459 = *(_QWORD *)(v458 + 8 * v22)) != 0
        && (v460 = *(unsigned __int16 *)(v459 + 2 * (HIDWORD(v20) & 0x7F)),
            v462 = v562[7],
            v461 = v562[8],
            v460 < (v461 - v462) >> 3)
        && (v463 = v462 + 8 * v460, v463 != v461)
        && *(_DWORD *)(v463 + 4) == (_DWORD)v21)
      {
        v464 = v562[11];
        v465 = v562[10] + v460;
      }
      else
      {
        v464 = v562[11];
        v465 = v464;
      }
      if (v465 == v464)
        v466 = 0;
      else
        v466 = v465;
      v467 = v561[4];
      if (v22 < (v561[5] - v467) >> 3
        && (v468 = *(_QWORD *)(v467 + 8 * v22)) != 0
        && (v469 = *(unsigned __int16 *)(v468 + 2 * (HIDWORD(v20) & 0x7F)),
            v471 = v561[7],
            v470 = v561[8],
            v469 < (v470 - v471) >> 3)
        && (v472 = v471 + 8 * v469, v472 != v470)
        && *(_DWORD *)(v472 + 4) == (_DWORD)v21)
      {
        v473 = v448;
        v474 = v358;
        v475 = v561[11];
        v476 = v561[10] + v469;
      }
      else
      {
        v473 = v448;
        v474 = v358;
        v475 = v561[11];
        v476 = v475;
      }
      if (v476 == v475)
        v477 = 0;
      else
        v477 = v476;
      v478 = v560[4];
      if (v22 < (v560[5] - v478) >> 3
        && (v479 = *(_QWORD *)(v478 + 8 * v22)) != 0
        && (v480 = *(unsigned __int16 *)(v479 + 2 * (HIDWORD(v20) & 0x7F)),
            v482 = v560[7],
            v481 = v560[8],
            v480 < (v481 - v482) >> 3)
        && (v483 = v482 + 8 * v480, v483 != v481)
        && *(_DWORD *)(v483 + 4) == (_DWORD)v21)
      {
        v484 = v560[11];
        v485 = v560[10] + 8 * v480;
      }
      else
      {
        v484 = v560[11];
        v485 = v484;
      }
      if (v485 == v484)
        v486 = 0;
      else
        v486 = (uint64_t *)v485;
      v487 = v559[4];
      if (v22 < (v559[5] - v487) >> 3
        && (v488 = *(_QWORD *)(v487 + 8 * v22)) != 0
        && (v489 = *(unsigned __int16 *)(v488 + 2 * (HIDWORD(v20) & 0x7F)),
            v491 = v559[7],
            v490 = v559[8],
            v489 < (v490 - v491) >> 3)
        && (v492 = v491 + 8 * v489, v492 != v490)
        && *(_DWORD *)(v492 + 4) == (_DWORD)v21)
      {
        v493 = v559[11];
        v494 = v559[10] + v489;
      }
      else
      {
        v493 = v559[11];
        v494 = v493;
      }
      if (v494 == v493)
        v495 = 0;
      else
        v495 = v494;
      v496 = v652[4];
      if (v22 < (v652[5] - v496) >> 3
        && (v497 = *(_QWORD *)(v496 + 8 * v22)) != 0
        && (v498 = *(unsigned __int16 *)(v497 + 2 * (HIDWORD(v20) & 0x7F)),
            v500 = v652[7],
            v499 = v652[8],
            v498 < (v499 - v500) >> 3)
        && (v501 = v500 + 8 * v498, v501 != v499)
        && *(_DWORD *)(v501 + 4) == (_DWORD)v21)
      {
        v502 = v376;
        v503 = v115;
        v504 = v80;
        v505 = v60;
        v506 = v32;
        v507 = v652[11];
        v508 = v652[10] + 8 * v498;
      }
      else
      {
        v502 = v376;
        v503 = v115;
        v504 = v80;
        v505 = v60;
        v506 = v32;
        v507 = v652[11];
        v508 = v507;
      }
      if (v508 == v507)
        v509 = 0;
      else
        v509 = (uint64_t *)v508;
      v510 = v651[4];
      if (v22 < (v651[5] - v510) >> 3
        && (v511 = *(_QWORD *)(v510 + 8 * v22)) != 0
        && (v512 = *(unsigned __int16 *)(v511 + 2 * (HIDWORD(v20) & 0x7F)),
            v513 = v651[7],
            v514 = v651[8],
            v512 < (v514 - v513) >> 3)
        && (v515 = v513 + 8 * v512, v515 != v514)
        && *(_DWORD *)(v515 + 4) == (_DWORD)v21)
      {
        v516 = v651[11];
        v517 = v651[10] + v512;
      }
      else
      {
        v516 = v651[11];
        v517 = v516;
      }
      if (v517 == v516)
        v518 = 0;
      else
        v518 = v517;
      v519 = v650[4];
      if (v22 < (v650[5] - v519) >> 3
        && (v520 = *(_QWORD *)(v519 + 8 * v22)) != 0
        && (v521 = *(unsigned __int16 *)(v520 + 2 * (HIDWORD(v20) & 0x7F)),
            v522 = v650[7],
            v523 = v650[8],
            v521 < (v523 - v522) >> 3)
        && (v524 = v522 + 8 * v521, v524 != v523)
        && *(_DWORD *)(v524 + 4) == (_DWORD)v21)
      {
        v525 = v650[11];
        v526 = v650[10] + v521;
      }
      else
      {
        v525 = v650[11];
        v526 = v525;
      }
      if (v526 == v525)
        v527 = 0;
      else
        v527 = v526;
      v528 = v649[4];
      if (v22 < (v649[5] - v528) >> 3
        && (v529 = *(_QWORD *)(v528 + 8 * v22)) != 0
        && (v530 = *(unsigned __int16 *)(v529 + 2 * (HIDWORD(v20) & 0x7F)),
            v531 = v649[7],
            v532 = v649[8],
            v530 < (v532 - v531) >> 3)
        && (v533 = v531 + 8 * v530, v533 != v532)
        && *(_DWORD *)(v533 + 4) == (_DWORD)v21)
      {
        v534 = v385;
        v535 = v90;
        v536 = v70;
        v537 = v42;
        v538 = (uint64_t *)v649[11];
        v539 = (uint64_t *)(v649[10] + 8 * v530);
      }
      else
      {
        v534 = v385;
        v535 = v90;
        v536 = v70;
        v537 = v42;
        v538 = (uint64_t *)v649[11];
        v539 = v538;
      }
      if (v539 == v538)
        v539 = 0;
      v540 = v648[4];
      if (v22 < (v648[5] - v540) >> 3
        && (v541 = *(_QWORD *)(v540 + 8 * v22)) != 0
        && (v542 = *(unsigned __int16 *)(v541 + 2 * (HIDWORD(v20) & 0x7F)),
            v543 = v648[7],
            v544 = v648[8],
            v542 < (v544 - v543) >> 3)
        && (v545 = v543 + 8 * v542, v545 != v544)
        && *(_DWORD *)(v545 + 4) == (_DWORD)v21)
      {
        v546 = (uint64_t *)v648[11];
        v547 = (uint64_t *)(v648[10] + 8 * v542);
      }
      else
      {
        v546 = (uint64_t *)v648[11];
        v547 = v546;
      }
      if (v547 == v546)
        v547 = 0;
      v548 = v647[4];
      if (v22 < (v647[5] - v548) >> 3
        && (v549 = *(_QWORD *)(v548 + 8 * v22)) != 0
        && (v550 = *(unsigned __int16 *)(v549 + 2 * (HIDWORD(v20) & 0x7F)),
            v551 = v647[7],
            v552 = v647[8],
            v550 < (v552 - v551) >> 3)
        && (v553 = v551 + 8 * v550, v553 != v552)
        && *(_DWORD *)(v553 + 4) == (_DWORD)v21)
      {
        v554 = (unsigned __int8 *)v647[11];
        v555 = (unsigned __int8 *)(v647[10] + v550);
      }
      else
      {
        v554 = (unsigned __int8 *)v647[11];
        v555 = v554;
      }
      if (v555 == v554)
        v556 = 0;
      else
        v556 = v555;
      result = md::ita::CreateMainRenderItems::operator()(v612, v506, v537, *v613, v505, v536, v504, v535, v615, v614, v503, v646, v645, v642, v644, v643, v639, v641, v640,
                 v634,
                 v638,
                 v637,
                 v622,
                 v636,
                 v635,
                 v617,
                 v633,
                 v632,
                 v629,
                 v631,
                 v630,
                 v624,
                 v628,
                 v627,
                 v620,
                 v626,
                 v625,
                 v474,
                 v623,
                 v502,
                 v534,
                 v394,
                 v621,
                 v616,
                 v619,
                 v430,
                 v618,
                 v473,
                 v457,
                 v466,
                 v477,
                 v486,
                 v495,
                 v509,
                 v518,
                 v527,
                 v539,
                 v547,
                 v556);
      v11 = v654;
      v557 = *(_QWORD **)(v653[0] + 32);
      v5 = v558;
      v15 = v611;
      v16 = v610;
      v17 = v609;
      while (1)
      {
        v654 = ++v11;
        if (v11 == v557)
          break;
        result = gdc::RegistryQueryView<gdc::All<md::ls::SliceAssignmentT<(md::SliceType)7> const,md::ls::RenderableMeshVertexFormat const,md::ls::TileType const,md::ls::RequiresDepthPeel const,md::ls::MeshLayerTypeV const,md::ls::IntendedSceneLayer const,md::ls::PendingProcessing const>,gdc::Any<md::ls::AssociationHandle,md::ls::PrepassConstantDataHandle,md::ls::ShadowConstantDataHandle,md::ls::PreserveHeight,md::ls::HasMeshHandle,md::ls::PositionScaleInfoConstantDataHandle,md::ls::ViewConstantDataHandle,md::ls::TransformConstantDataHandle,md::ls::IndexRange,md::ls::NormalsHandle,md::ls::InstanceTransformHandle,md::ls::UVsHandle,md::ls::NeedsZBias,md::ls::ClippingConstantDataHandle,md::ls::IsMercator,md::ls::ElevationHandle>,gdc::None<>>::Iterator::isValid(v653);
        if ((_DWORD)result)
          goto LABEL_22;
      }
      v11 = v557;
LABEL_22:
      ;
    }
    while (v607 != v11);
  }
  *v608 = 0xFFFFFFFF00000000;
  *v612 = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareColorCorrectionFactorsConstantHandle>(md::ita::PrepareColorCorrectionFactorsConstantHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareColorCorrectionFactorsConstantHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareColorCorrectionFactorsConstantHandle>(md::ita::PrepareColorCorrectionFactorsConstantHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareColorCorrectionFactorsConstantHandle>(md::ita::PrepareColorCorrectionFactorsConstantHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareColorCorrectionFactorsConstantHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareColorCorrectionFactorsConstantHandle>(md::ita::PrepareColorCorrectionFactorsConstantHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289128;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareColorCorrectionFactorsConstantHandle>(md::ita::PrepareColorCorrectionFactorsConstantHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareColorCorrectionFactorsConstantHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareColorCorrectionFactorsConstantHandle>(md::ita::PrepareColorCorrectionFactorsConstantHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289128;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareColorCorrectionFactorsConstantHandle>(md::ita::PrepareColorCorrectionFactorsConstantHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareColorCorrectionFactorsConstantHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareColorCorrectionFactorsConstantHandle>(md::ita::PrepareColorCorrectionFactorsConstantHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareColorCorrectionFactorsConstantHandle>(md::ita::PrepareColorCorrectionFactorsConstantHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareColorCorrectionFactorsConstantHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareColorCorrectionFactorsConstantHandle>(md::ita::PrepareColorCorrectionFactorsConstantHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareColorCorrectionFactorsConstantHandle>(md::ita::PrepareColorCorrectionFactorsConstantHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareColorCorrectionFactorsConstantHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareColorCorrectionFactorsConstantHandle>(md::ita::PrepareColorCorrectionFactorsConstantHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289170;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareColorCorrectionFactorsConstantHandle>(md::ita::PrepareColorCorrectionFactorsConstantHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareColorCorrectionFactorsConstantHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareColorCorrectionFactorsConstantHandle>(md::ita::PrepareColorCorrectionFactorsConstantHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289170;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareColorCorrectionFactorsConstantHandle>(md::ita::PrepareColorCorrectionFactorsConstantHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareColorCorrectionFactorsConstantHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareColorCorrectionFactorsConstantHandle>(md::ita::PrepareColorCorrectionFactorsConstantHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x60uLL);
  a1[2] = (char *)(v2 + 12);
  *v2 = 0x8DCCA4FD35258189;
  v2[1] = "md::ls::MeshRenderableID]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB43E0;
  v2[4] = "md::ls::InView]";
  v2[5] = 14;
  v2[6] = 0xB6C12FBB402E8E70;
  v2[7] = "md::ls::RenderableMaterialData]";
  v2[8] = 30;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 12)
  {
    *(_QWORD *)v3 = 0x3B99BF65D7C678C8;
    v2[10] = "md::ls::MaterialBrightnessAndSaturation]";
    v2[11] = 39;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 12) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x3B99BF65D7C678C8;
  *((_QWORD *)v10 + 1) = "md::ls::MaterialBrightnessAndSaturation]";
  *((_QWORD *)v10 + 2) = 39;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
}

void sub_19F70F79C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareColorCorrectionFactorsConstantHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareColorCorrectionFactorsConstantHandle>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareColorCorrectionFactorsConstantHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareColorCorrectionFactorsConstantHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279138;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareColorCorrectionFactorsConstantHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareColorCorrectionFactorsConstantHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4279138;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

unint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareColorCorrectionFactorsConstantHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareColorCorrectionFactorsConstantHandle>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL4 isValid;
  unint64_t result;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t v38;
  void **v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  int64_t v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  __int128 v76;
  _QWORD *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  size_t prime;
  size_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _BYTE *v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  uint8x8_t v99;
  _QWORD *v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  float v105;
  float v106;
  _BOOL8 v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint8x8_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  unint64_t v115;
  __int32 v116;
  __int32 v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint8x8_t v126;
  void **v127;
  int8x16_t *v128;
  unint64_t v129;
  uint64_t v130;
  float v131;
  float v132;
  _BOOL8 v133;
  unint64_t v134;
  unint64_t v135;
  size_t v136;
  void *v137;
  void *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  size_t v142;
  size_t v143;
  size_t v144;
  _QWORD *v145;
  size_t v146;
  uint64_t v147;
  unint64_t v148;
  uint8x8_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  size_t v153;
  void *v154;
  _QWORD *v155;
  int8x16_t **v156;
  unint64_t v157;
  unint64_t v158;
  uint8x8_t v159;
  void **v160;
  _QWORD *v161;
  unint64_t v162;
  uint64_t v163;
  float v164;
  float v165;
  _BOOL8 v166;
  unint64_t v167;
  unint64_t v168;
  size_t v169;
  void *v170;
  void *v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  size_t v175;
  size_t v176;
  size_t v177;
  _QWORD *v178;
  size_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint8x8_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  size_t v187;
  uint64_t v188;
  void *v189;
  uint64_t v190;
  _QWORD *v191;
  unint64_t v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  _QWORD *v196;
  _QWORD *v197;
  unint64_t v198;
  uint8x8_t v199;
  _QWORD **v200;
  _QWORD *v201;
  unint64_t v202;
  uint64_t v203;
  float v204;
  _QWORD *v205;
  float v206;
  _BOOL8 v207;
  unint64_t v208;
  unint64_t v209;
  size_t v210;
  void *v211;
  void *v212;
  uint64_t v213;
  _QWORD *v214;
  size_t v215;
  size_t v216;
  size_t v217;
  _QWORD *v218;
  size_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint8x8_t v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  size_t v227;
  uint64_t v228;
  void *v229;
  uint64_t v230;
  _QWORD *v231;
  unint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  unint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v245;
  uint64_t v246;
  uint64_t v248;
  uint64_t v249;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  _QWORD *v256;
  _QWORD *v257;
  uint64_t v258;
  _QWORD *v259;
  int8x16_t *v260;
  uint64_t v261;
  _QWORD *v262;
  _QWORD *v263;
  _QWORD *v264;
  _QWORD *v265;
  _QWORD *v266;
  int8x16_t v267;
  char v268;
  uint64_t (**v269)();
  __int128 v270;
  uint64_t (***v271)();
  uint64_t (**v272)();
  __int128 v273;
  uint64_t (***v274)();
  int v275;
  uint64_t v276;

  v2 = a1;
  v276 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  v5 = gdc::Registry::storage<md::ls::InView>(v3);
  v6 = gdc::Registry::storage<md::ls::RenderableMaterialData>(v3);
  v7 = gdc::Registry::storage<md::ls::MaterialBrightnessAndSaturation>(v3);
  v8 = v7 + 32;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) >= *(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56))
    v9 = v4;
  else
    v9 = v5;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < *(_QWORD *)(v9 + 64) - *(_QWORD *)(v9 + 56))
    v9 = v6;
  if (*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56) >= *(_QWORD *)(v9 + 64) - *(_QWORD *)(v9 + 56))
    v8 = v9 + 32;
  v10 = *(_QWORD **)(v8 + 24);
  v261 = v8;
  v262 = (_QWORD *)v4;
  v11 = (_QWORD *)v7;
  v263 = (_QWORD *)v5;
  v264 = (_QWORD *)v6;
  v265 = (_QWORD *)v7;
  v266 = v10;
  v12 = *(_QWORD **)(v8 + 32);
  if (v12 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v261))
  {
    v13 = v10 + 1;
    do
    {
      v10 = v13;
      v266 = v13;
      if (v13 == v12)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v261);
      v13 = v10 + 1;
    }
    while (!isValid);
  }
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v16 = (_QWORD *)result;
  if (v12 == v10)
    goto LABEL_486;
  v257 = v11;
  v258 = v2;
  v256 = v12;
  v259 = (_QWORD *)result;
  do
  {
    *v16 = *v10;
    v18 = *v10;
    v19 = *v10 >> 39;
    v20 = v11[4];
    if (v19 < (v11[5] - v20) >> 3
      && (v21 = *(_QWORD *)(v20 + 8 * v19)) != 0
      && (v22 = *(unsigned __int16 *)(v21 + 2 * (HIDWORD(v18) & 0x7F)),
          v24 = v11[7],
          v23 = v11[8],
          v22 < (v23 - v24) >> 3)
      && ((v25 = HIDWORD(v18), v26 = v24 + 8 * v22, v26 != v23)
        ? (v27 = *(_DWORD *)(v26 + 4) == (_DWORD)v25)
        : (v27 = 0),
          v27))
    {
      v28 = v11[11];
      v29 = v11[10] + 16 * v22;
    }
    else
    {
      v28 = v11[11];
      v29 = v28;
    }
    if (v29 == v28)
      v30 = 0;
    else
      v30 = (int8x16_t *)v29;
    v31 = **(_QWORD **)(v2 + 8);
    v32 = *(_QWORD **)v31;
    v33 = *(_QWORD **)(v31 + 8);
    if (v32 != v33)
    {
      while (*v32 != 0x41D4E9297E100630)
      {
        v32 += 5;
        if (v32 == v33)
          goto LABEL_40;
      }
    }
    if (v32 == v33)
    {
LABEL_40:
      v34 = 0;
    }
    else
    {
      v34 = v32[3];
      v35 = (std::__shared_weak_count *)v32[4];
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldxr(p_shared_owners);
        while (__stxr(v37 + 1, p_shared_owners));
        do
          v38 = __ldaxr(p_shared_owners);
        while (__stlxr(v38 - 1, p_shared_owners));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
    }
    v260 = v30;
    v267 = vextq_s8(*v30, *v30, 8uLL);
    v39 = (void **)(v34 + 8144);
    v40 = std::__hash_table<std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,std::__unordered_map_hasher<md::ColorCorrectionKey,std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,md::ColorCorrectionKeyHasher,std::equal_to<md::ColorCorrectionKey>,true>,std::__unordered_map_equal<md::ColorCorrectionKey,std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,std::equal_to<md::ColorCorrectionKey>,md::ColorCorrectionKeyHasher,true>,std::allocator<std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>>>::find<md::ColorCorrectionKey>((_QWORD *)(v34 + 8144), (float *)v267.i32);
    if (v40)
    {
      v41 = v40[4];
      if (v41)
      {
        v42 = *(_QWORD **)(v2 + 8);
        v16 = v259;
        v43 = *v259;
        v269 = &off_1E4281B08;
        *(_QWORD *)&v270 = v41;
        *((_QWORD *)&v270 + 1) = v43;
        v271 = &v269;
        v274 = &v272;
        v272 = &off_1E4281B08;
        v273 = v270;
        v275 = 0;
        ecs2::Runtime::queueCommand(v42, (uint64_t)&v272);
        if (v275 != -1)
          ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v275])(&v268, &v272);
        v275 = -1;
        result = (unint64_t)v271;
        if (v271 == &v269)
          goto LABEL_46;
        goto LABEL_448;
      }
    }
    v45 = *(_QWORD *)(v34 + 8016);
    if (*(_QWORD *)(v34 + 8008) == v45)
    {
      v48 = (-1431655765 * ((*(_QWORD *)(v34 + 8064) - *(_QWORD *)(v34 + 8056)) >> 3)) | 0x100000000;
      v49 = *(uint64_t **)(v34 + 8040);
      v50 = *(_QWORD *)(v34 + 8048);
      if ((unint64_t)v49 >= v50)
      {
        v52 = *(char **)(v34 + 8032);
        v53 = ((char *)v49 - v52) >> 3;
        v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 61)
          goto LABEL_488;
        v55 = v50 - (_QWORD)v52;
        if (v55 >> 2 > v54)
          v54 = v55 >> 2;
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
          v56 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v56 = v54;
        if (v56)
        {
          if (v56 >> 61)
            goto LABEL_487;
          v57 = (char *)operator new(8 * v56);
        }
        else
        {
          v57 = 0;
        }
        v58 = (uint64_t *)&v57[8 * v53];
        *v58 = v48;
        v51 = v58 + 1;
        if (v49 != (uint64_t *)v52)
        {
          v59 = (char *)v49 - v52 - 8;
          if (v59 < 0x58)
            goto LABEL_491;
          if ((unint64_t)(v52 - v57) < 0x20)
            goto LABEL_491;
          v60 = (v59 >> 3) + 1;
          v61 = &v57[(char *)v49 - v52 - 16];
          v62 = v49 - 2;
          v63 = v60 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v64 = *(_OWORD *)v62;
            *((_OWORD *)v61 - 1) = *((_OWORD *)v62 - 1);
            *(_OWORD *)v61 = v64;
            v61 -= 32;
            v62 -= 4;
            v63 -= 4;
          }
          while (v63);
          v58 -= v60 & 0x3FFFFFFFFFFFFFFCLL;
          v49 -= v60 & 0x3FFFFFFFFFFFFFFCLL;
          if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_491:
            do
            {
              v65 = *--v49;
              *--v58 = v65;
            }
            while (v49 != (uint64_t *)v52);
          }
          v49 = *(uint64_t **)(v34 + 8032);
        }
        *(_QWORD *)(v34 + 8032) = v58;
        *(_QWORD *)(v34 + 8040) = v51;
        *(_QWORD *)(v34 + 8048) = &v57[8 * v56];
        if (v49)
          operator delete(v49);
      }
      else
      {
        *v49 = v48;
        v51 = v49 + 1;
      }
      *(_QWORD *)(v34 + 8040) = v51;
      v47 = *(v51 - 1);
    }
    else
    {
      v46 = *(_QWORD *)(v45 - 8);
      *(_QWORD *)(v34 + 8016) = v45 - 8;
      *(_DWORD *)(*(_QWORD *)(v34 + 8032) + 8 * v46) = -1431655765
                                                     * ((*(_QWORD *)(v34 + 8064) - *(_QWORD *)(v34 + 8056)) >> 3);
      *(_DWORD *)(*(_QWORD *)(v34 + 8032) + 8 * v46 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(v34 + 8032)
                                                                                               + 8 * v46
                                                                                               + 4) << 32)
                                                          + 0x100000000) >> 32;
      v47 = v46 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v34 + 8032) + 8 * v46 + 4) << 32);
    }
    v66 = *(_QWORD *)(v34 + 8064);
    v67 = *(_QWORD *)(v34 + 8072);
    if (v66 >= v67)
    {
      v69 = *(_QWORD **)(v34 + 8056);
      v70 = 0xAAAAAAAAAAAAAAABLL * ((v66 - (uint64_t)v69) >> 3) + 1;
      if (v70 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_488;
      v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67 - (_QWORD)v69) >> 3);
      if (2 * v71 > v70)
        v70 = 2 * v71;
      if (v71 >= 0x555555555555555)
        v72 = 0xAAAAAAAAAAAAAAALL;
      else
        v72 = v70;
      if (v72 > 0xAAAAAAAAAAAAAAALL)
LABEL_487:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v73 = (char *)operator new(24 * v72);
      v74 = &v73[8 * ((v66 - (uint64_t)v69) >> 3)];
      v75 = &v73[24 * v72];
      *(_QWORD *)v74 = 0;
      *((_QWORD *)v74 + 1) = 0;
      *((_QWORD *)v74 + 2) = 0;
      v68 = v74 + 24;
      if ((_QWORD *)v66 == v69)
      {
        *(_QWORD *)(v34 + 8056) = v74;
        *(_QWORD *)(v34 + 8064) = v68;
        *(_QWORD *)(v34 + 8072) = v75;
      }
      else
      {
        do
        {
          v76 = *(_OWORD *)(v66 - 24);
          v66 -= 24;
          *(_OWORD *)(v74 - 24) = v76;
          v74 -= 24;
          *((_QWORD *)v74 + 2) = *(_QWORD *)(v66 + 16);
          *(_QWORD *)(v66 + 8) = 0;
          *(_QWORD *)(v66 + 16) = 0;
        }
        while ((_QWORD *)v66 != v69);
        v66 = *(_QWORD *)(v34 + 8056);
        v77 = *(_QWORD **)(v34 + 8064);
        *(_QWORD *)(v34 + 8056) = v74;
        *(_QWORD *)(v34 + 8064) = v68;
        *(_QWORD *)(v34 + 8072) = v75;
        while (v77 != (_QWORD *)v66)
        {
          v78 = (std::__shared_weak_count *)*(v77 - 1);
          if (v78)
          {
            v79 = (unint64_t *)&v78->__shared_owners_;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          v77 -= 3;
        }
      }
      if (v66)
        operator delete((void *)v66);
    }
    else
    {
      *(_QWORD *)v66 = 0;
      *(_QWORD *)(v66 + 8) = 0;
      v68 = (_QWORD *)(v66 + 24);
      *(_QWORD *)(v66 + 16) = 0;
    }
    *(_QWORD *)(v34 + 8064) = v68;
    prime = *(_QWORD *)(v34 + 8088);
    v82 = *(_QWORD *)(v34 + 8096);
    if (prime >= v82)
    {
      v66 = *(_QWORD *)(v34 + 8080);
      v84 = (uint64_t)(prime - v66) >> 3;
      v85 = v84 + 1;
      if ((unint64_t)(v84 + 1) >> 61)
LABEL_488:
        abort();
      v86 = v82 - v66;
      if (v86 >> 2 > v85)
        v85 = v86 >> 2;
      if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8)
        v87 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v87 = v85;
      if (v87)
      {
        if (v87 >> 61)
          goto LABEL_487;
        v88 = operator new(8 * v87);
      }
      else
      {
        v88 = 0;
      }
      v89 = &v88[8 * v84];
      *v89 = v47;
      v83 = v89 + 1;
      if (prime != v66)
      {
        v90 = prime - v66 - 8;
        if (v90 < 0x58)
          goto LABEL_492;
        if ((unint64_t)(v66 - (_QWORD)v88) < 0x20)
          goto LABEL_492;
        v91 = (v90 >> 3) + 1;
        v92 = &v88[prime - v66 - 16];
        v93 = (__int128 *)(prime - 16);
        v94 = v91 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v95 = *v93;
          *(v92 - 1) = *(v93 - 1);
          *v92 = v95;
          v92 -= 2;
          v93 -= 2;
          v94 -= 4;
        }
        while (v94);
        v89 -= v91 & 0x3FFFFFFFFFFFFFFCLL;
        prime -= 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
        if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_492:
          do
          {
            v96 = *(_QWORD *)(prime - 8);
            prime -= 8;
            *--v89 = v96;
          }
          while (prime != v66);
        }
      }
      *(_QWORD *)(v34 + 8080) = v89;
      *(_QWORD *)(v34 + 8088) = v83;
      *(_QWORD *)(v34 + 8096) = &v88[8 * v87];
      if (v66)
        operator delete((void *)v66);
    }
    else
    {
      *(_QWORD *)prime = v47;
      prime += 8;
      v83 = (_QWORD *)prime;
    }
    v97 = (uint64_t *)(v34 + 7928);
    *(_QWORD *)(v34 + 8088) = v83;
    v98 = *(_QWORD *)(v34 + 7936);
    if (v98)
    {
      v99 = (uint8x8_t)vcnt_s8((int8x8_t)v98);
      v99.i16[0] = vaddlv_u8(v99);
      if (v99.u32[0] > 1uLL)
      {
        v66 = v47;
        if (v47 >= v98)
          v66 = v47 % v98;
      }
      else
      {
        v66 = (v98 - 1) & v47;
      }
      v100 = *(_QWORD **)(*v97 + 8 * v66);
      if (v100)
      {
        v101 = (_QWORD *)*v100;
        if (v101)
        {
          if (v99.u32[0] < 2uLL)
          {
            while (1)
            {
              v103 = v101[1];
              if (v103 == v47)
              {
                if (v101[2] == v47)
                  goto LABEL_174;
              }
              else if ((v103 & (v98 - 1)) != v66)
              {
                goto LABEL_136;
              }
              v101 = (_QWORD *)*v101;
              if (!v101)
                goto LABEL_136;
            }
          }
          do
          {
            v102 = v101[1];
            if (v102 == v47)
            {
              if (v101[2] == v47)
                goto LABEL_174;
            }
            else
            {
              if (v102 >= v98)
                v102 %= v98;
              if (v102 != v66)
                break;
            }
            v101 = (_QWORD *)*v101;
          }
          while (v101);
        }
      }
    }
LABEL_136:
    prime = v98 == 0;
    v104 = (char *)operator new(0x30uLL);
    *(_QWORD *)v104 = 0;
    *((_QWORD *)v104 + 1) = v47;
    *((_QWORD *)v104 + 2) = v47;
    *(_OWORD *)(v104 + 24) = xmmword_19FFB3350;
    v104[40] = 0;
    v105 = (float)(unint64_t)(*(_QWORD *)(v34 + 7952) + 1);
    v106 = *(float *)(v34 + 7960);
    if ((((float)(v106 * (float)v98) >= v105) & ~(_DWORD)prime) == 0)
    {
      v107 = v98 < 3 || (v98 & (v98 - 1)) != 0;
      v108 = v107 | (2 * v98);
      v109 = vcvtps_u32_f32(v105 / v106);
      if (v108 <= v109)
        prime = v109;
      else
        prime = v108;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v98 = *(_QWORD *)(v34 + 7936);
      }
      if (prime > v98)
        goto LABEL_148;
      if (prime < v98)
      {
        v110 = vcvtps_u32_f32((float)*(unint64_t *)(v34 + 7952) / *(float *)(v34 + 7960));
        if (v98 < 3 || (v111 = (uint8x8_t)vcnt_s8((int8x8_t)v98), v111.i16[0] = vaddlv_u8(v111), v111.u32[0] > 1uLL))
        {
          v110 = std::__next_prime(v110);
        }
        else
        {
          v112 = 1 << -(char)__clz(v110 - 1);
          if (v110 >= 2)
            v110 = v112;
        }
        if (prime <= v110)
          prime = v110;
        if (prime < v98)
LABEL_148:
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v34 + 7928, prime);
      }
      v98 = *(_QWORD *)(v34 + 7936);
      if ((v98 & (v98 - 1)) != 0)
      {
        if (v47 >= v98)
          v66 = v47 % v98;
        else
          v66 = v47;
      }
      else
      {
        v66 = (v98 - 1) & v47;
      }
    }
    v113 = *v97;
    v114 = *(_QWORD **)(*v97 + 8 * v66);
    if (v114)
    {
      *(_QWORD *)v104 = *v114;
LABEL_172:
      *v114 = v104;
      goto LABEL_173;
    }
    *(_QWORD *)v104 = *(_QWORD *)(v34 + 7944);
    *(_QWORD *)(v34 + 7944) = v104;
    *(_QWORD *)(v113 + 8 * v66) = v34 + 7944;
    if (*(_QWORD *)v104)
    {
      v115 = *(_QWORD *)(*(_QWORD *)v104 + 8);
      if ((v98 & (v98 - 1)) != 0)
      {
        if (v115 >= v98)
          v115 %= v98;
      }
      else
      {
        v115 &= v98 - 1;
      }
      v114 = (_QWORD *)(*v97 + 8 * v115);
      goto LABEL_172;
    }
LABEL_173:
    ++*(_QWORD *)(v34 + 7952);
LABEL_174:
    v116 = v267.i32[0];
    v117 = v267.i32[1];
    v118 = v267.i64[1];
    v119 = *(_QWORD *)(v34 + 8152);
    v120 = v267.u32[0] - 0x61C8864680B583EBLL;
    if ((v267.i32[0] & 0x7FFFFFFF) == 0)
      v120 = 0x9E3779B97F4A7C15;
    v121 = v267.u32[1] - 0x61C8864680B583EBLL;
    if ((v267.i32[1] & 0x7FFFFFFF) == 0)
      v121 = 0x9E3779B97F4A7C15;
    v122 = ((v120 >> 2) + (v120 << 6) + v121) ^ v120;
    v123 = v267.u32[2] - 0x61C8864680B583EBLL;
    if (*(float *)&v267.i32[2] == 0.0)
      v123 = 0x9E3779B97F4A7C15;
    v124 = v267.u32[3] - 0x61C8864680B583EBLL;
    if (*(float *)&v267.i32[3] == 0.0)
      v124 = 0x9E3779B97F4A7C15;
    v125 = ((v122 << 6) - 0x61C8864680B583EBLL + (v122 >> 2) + (((v123 >> 2) + (v123 << 6) + v124) ^ v123)) ^ v122;
    if (v119)
    {
      v126 = (uint8x8_t)vcnt_s8((int8x8_t)v119);
      v126.i16[0] = vaddlv_u8(v126);
      if (v126.u32[0] > 1uLL)
      {
        prime = ((v122 << 6) - 0x61C8864680B583EBLL + (v122 >> 2) + (((v123 >> 2) + (v123 << 6) + v124) ^ v123)) ^ v122;
        if (v125 >= v119)
          prime = v125 % v119;
      }
      else
      {
        prime = v125 & (v119 - 1);
      }
      v127 = (void **)*((_QWORD *)*v39 + prime);
      if (v127)
      {
        v128 = (int8x16_t *)*v127;
        if (*v127)
        {
          if (v126.u32[0] < 2uLL)
          {
            while (1)
            {
              v130 = v128->i64[1];
              if (v130 == v125)
              {
                if (*(_OWORD *)&v128[1] == *(_OWORD *)&v267)
                  goto LABEL_269;
              }
              else if ((v130 & (v119 - 1)) != prime)
              {
                goto LABEL_203;
              }
              v128 = (int8x16_t *)v128->i64[0];
              if (!v128)
                goto LABEL_203;
            }
          }
          do
          {
            v129 = v128->u64[1];
            if (v129 == v125)
            {
              if (*(_OWORD *)&v128[1] == *(_OWORD *)&v267)
                goto LABEL_269;
            }
            else
            {
              if (v129 >= v119)
                v129 %= v119;
              if (v129 != prime)
                break;
            }
            v128 = (int8x16_t *)v128->i64[0];
          }
          while (v128);
        }
      }
    }
LABEL_203:
    v128 = (int8x16_t *)operator new(0x28uLL);
    v128->i64[0] = 0;
    v128->i64[1] = v125;
    v128[1] = v267;
    v128[2].i64[0] = 0;
    v131 = (float)(unint64_t)(*(_QWORD *)(v34 + 8168) + 1);
    v132 = *(float *)(v34 + 8176);
    if ((((float)(v132 * (float)v119) >= v131) & ~(v119 == 0)) == 0)
    {
      v133 = (v119 & (v119 - 1)) != 0;
      if (v119 < 3)
        v133 = 1;
      v134 = v133 | (2 * v119);
      v135 = vcvtps_u32_f32(v131 / v132);
      if (v134 <= v135)
        v136 = v135;
      else
        v136 = v134;
      if (v136 == 1)
      {
        v136 = 2;
      }
      else if ((v136 & (v136 - 1)) != 0)
      {
        v136 = std::__next_prime(v136);
        v119 = *(_QWORD *)(v34 + 8152);
      }
      if (v136 <= v119)
      {
        if (v136 >= v119)
          goto LABEL_254;
        v148 = vcvtps_u32_f32((float)*(unint64_t *)(v34 + 8168) / *(float *)(v34 + 8176));
        if (v119 < 3 || (v149 = (uint8x8_t)vcnt_s8((int8x8_t)v119), v149.i16[0] = vaddlv_u8(v149), v149.u32[0] > 1uLL))
        {
          v148 = std::__next_prime(v148);
        }
        else
        {
          v150 = 1 << -(char)__clz(v148 - 1);
          if (v148 >= 2)
            v148 = v150;
        }
        if (v136 <= v148)
          v136 = v148;
        if (v136 >= v119)
          goto LABEL_254;
        if (!v136)
        {
          v154 = *v39;
          *v39 = 0;
          if (v154)
            operator delete(v154);
          *(_QWORD *)(v34 + 8152) = 0;
          goto LABEL_254;
        }
      }
      if (v136 >> 61)
        goto LABEL_487;
      v137 = operator new(8 * v136);
      v138 = *v39;
      *v39 = v137;
      if (v138)
        operator delete(v138);
      v139 = 0;
      *(_QWORD *)(v34 + 8152) = v136;
      do
        *((_QWORD *)*v39 + v139++) = 0;
      while (v136 != v139);
      v140 = *(_QWORD **)(v34 + 8160);
      if (!v140)
        goto LABEL_254;
      v141 = v34 + 8160;
      v142 = v140[1];
      v143 = v136 - 1;
      if ((v136 & (v136 - 1)) == 0)
      {
        v144 = v142 & v143;
        *((_QWORD *)*v39 + v144) = v141;
        while (1)
        {
          v145 = (_QWORD *)*v140;
          if (!*v140)
            break;
          v146 = v145[1] & v143;
          if (v146 == v144)
          {
            v140 = (_QWORD *)*v140;
          }
          else if (*((_QWORD *)*v39 + v146))
          {
            *v140 = *v145;
            v147 = 8 * v146;
            *v145 = **(_QWORD **)((char *)*v39 + v147);
            **(_QWORD **)((char *)*v39 + v147) = v145;
          }
          else
          {
            *((_QWORD *)*v39 + v146) = v140;
            v140 = v145;
            v144 = v146;
          }
        }
LABEL_254:
        v119 = *(_QWORD *)(v34 + 8152);
        if ((v119 & (v119 - 1)) != 0)
        {
          if (v125 >= v119)
            prime = v125 % v119;
          else
            prime = v125;
        }
        else
        {
          prime = (v119 - 1) & v125;
        }
        goto LABEL_259;
      }
      if (v142 >= v136)
        v142 %= v136;
      *((_QWORD *)*v39 + v142) = v141;
      v151 = (_QWORD *)*v140;
      if (!*v140)
        goto LABEL_254;
      while (1)
      {
        v153 = v151[1];
        if (v153 >= v136)
          v153 %= v136;
        if (v153 != v142)
        {
          if (!*((_QWORD *)*v39 + v153))
          {
            *((_QWORD *)*v39 + v153) = v140;
            goto LABEL_240;
          }
          *v140 = *v151;
          v152 = 8 * v153;
          *v151 = **(_QWORD **)((char *)*v39 + v152);
          **(_QWORD **)((char *)*v39 + v152) = v151;
          v151 = v140;
        }
        v153 = v142;
LABEL_240:
        v140 = v151;
        v151 = (_QWORD *)*v151;
        v142 = v153;
        if (!v151)
          goto LABEL_254;
      }
    }
LABEL_259:
    v155 = *v39;
    v156 = (int8x16_t **)*((_QWORD *)*v39 + prime);
    if (v156)
    {
      v128->i64[0] = (uint64_t)*v156;
LABEL_267:
      *v156 = v128;
      goto LABEL_268;
    }
    v128->i64[0] = *(_QWORD *)(v34 + 8160);
    *(_QWORD *)(v34 + 8160) = v128;
    v155[prime] = v34 + 8160;
    if (v128->i64[0])
    {
      v157 = *(_QWORD *)(v128->i64[0] + 8);
      if ((v119 & (v119 - 1)) != 0)
      {
        if (v157 >= v119)
          v157 %= v119;
      }
      else
      {
        v157 &= v119 - 1;
      }
      v156 = (int8x16_t **)((char *)*v39 + 8 * v157);
      goto LABEL_267;
    }
LABEL_268:
    ++*(_QWORD *)(v34 + 8168);
LABEL_269:
    v128[2].i64[0] = v47;
    v158 = *(_QWORD *)(v34 + 0x2000);
    if (v158)
    {
      v159 = (uint8x8_t)vcnt_s8((int8x8_t)v158);
      v159.i16[0] = vaddlv_u8(v159);
      if (v159.u32[0] > 1uLL)
      {
        v125 = v47;
        if (v47 >= v158)
          v125 = v47 % v158;
      }
      else
      {
        v125 = (v158 - 1) & v47;
      }
      v160 = *(void ***)(*(_QWORD *)(v34 + 8184) + 8 * v125);
      if (v160)
      {
        v161 = *v160;
        if (*v160)
        {
          if (v159.u32[0] < 2uLL)
          {
            while (1)
            {
              v163 = v161[1];
              if (v163 == v47)
              {
                if (v161[2] == v47)
                  goto LABEL_355;
              }
              else if ((v163 & (v158 - 1)) != v125)
              {
                goto LABEL_289;
              }
              v161 = (_QWORD *)*v161;
              if (!v161)
                goto LABEL_289;
            }
          }
          do
          {
            v162 = v161[1];
            if (v162 == v47)
            {
              if (v161[2] == v47)
                goto LABEL_355;
            }
            else
            {
              if (v162 >= v158)
                v162 %= v158;
              if (v162 != v125)
                break;
            }
            v161 = (_QWORD *)*v161;
          }
          while (v161);
        }
      }
    }
LABEL_289:
    v161 = operator new(0x28uLL);
    *v161 = 0;
    v161[1] = v47;
    v161[3] = 0;
    v161[4] = 0;
    v161[2] = v47;
    v164 = (float)(unint64_t)(*(_QWORD *)(v34 + 8208) + 1);
    v165 = *(float *)(v34 + 8216);
    if ((((float)(v165 * (float)v158) >= v164) & ~(v158 == 0)) == 0)
    {
      v166 = (v158 & (v158 - 1)) != 0;
      if (v158 < 3)
        v166 = 1;
      v167 = v166 | (2 * v158);
      v168 = vcvtps_u32_f32(v164 / v165);
      if (v167 <= v168)
        v169 = v168;
      else
        v169 = v167;
      if (v169 == 1)
      {
        v169 = 2;
      }
      else if ((v169 & (v169 - 1)) != 0)
      {
        v169 = std::__next_prime(v169);
        v158 = *(_QWORD *)(v34 + 0x2000);
      }
      if (v169 <= v158)
      {
        if (v169 >= v158)
          goto LABEL_340;
        v182 = vcvtps_u32_f32((float)*(unint64_t *)(v34 + 8208) / *(float *)(v34 + 8216));
        if (v158 < 3 || (v183 = (uint8x8_t)vcnt_s8((int8x8_t)v158), v183.i16[0] = vaddlv_u8(v183), v183.u32[0] > 1uLL))
        {
          v182 = std::__next_prime(v182);
        }
        else
        {
          v184 = 1 << -(char)__clz(v182 - 1);
          if (v182 >= 2)
            v182 = v184;
        }
        if (v169 <= v182)
          v169 = v182;
        if (v169 >= v158)
          goto LABEL_340;
        if (!v169)
        {
          v189 = *(void **)(v34 + 8184);
          *(_QWORD *)(v34 + 8184) = 0;
          if (v189)
            operator delete(v189);
          *(_QWORD *)(v34 + 0x2000) = 0;
          goto LABEL_340;
        }
      }
      if (v169 >> 61)
        goto LABEL_487;
      v170 = operator new(8 * v169);
      v171 = *(void **)(v34 + 8184);
      *(_QWORD *)(v34 + 8184) = v170;
      if (v171)
        operator delete(v171);
      v172 = 0;
      *(_QWORD *)(v34 + 0x2000) = v169;
      do
        *(_QWORD *)(*(_QWORD *)(v34 + 8184) + 8 * v172++) = 0;
      while (v169 != v172);
      v173 = *(_QWORD **)(v34 + 8200);
      if (!v173)
        goto LABEL_340;
      v174 = v34 + 8200;
      v175 = v173[1];
      v176 = v169 - 1;
      if ((v169 & (v169 - 1)) == 0)
      {
        v177 = v175 & v176;
        *(_QWORD *)(*(_QWORD *)(v34 + 8184) + 8 * v177) = v174;
        while (1)
        {
          v178 = (_QWORD *)*v173;
          if (!*v173)
            break;
          v179 = v178[1] & v176;
          if (v179 == v177)
          {
            v173 = (_QWORD *)*v173;
          }
          else
          {
            v180 = *(_QWORD *)(v34 + 8184);
            if (*(_QWORD *)(v180 + 8 * v179))
            {
              *v173 = *v178;
              v181 = 8 * v179;
              *v178 = **(_QWORD **)(*(_QWORD *)(v34 + 8184) + v181);
              **(_QWORD **)(*(_QWORD *)(v34 + 8184) + v181) = v178;
            }
            else
            {
              *(_QWORD *)(v180 + 8 * v179) = v173;
              v173 = v178;
              v177 = v179;
            }
          }
        }
LABEL_340:
        v158 = *(_QWORD *)(v34 + 0x2000);
        if ((v158 & (v158 - 1)) != 0)
        {
          if (v47 >= v158)
            v125 = v47 % v158;
          else
            v125 = v47;
        }
        else
        {
          v125 = (v158 - 1) & v47;
        }
        goto LABEL_345;
      }
      if (v175 >= v169)
        v175 %= v169;
      *(_QWORD *)(*(_QWORD *)(v34 + 8184) + 8 * v175) = v174;
      v185 = (_QWORD *)*v173;
      if (!*v173)
        goto LABEL_340;
      while (1)
      {
        v187 = v185[1];
        if (v187 >= v169)
          v187 %= v169;
        if (v187 != v175)
        {
          v188 = *(_QWORD *)(v34 + 8184);
          if (!*(_QWORD *)(v188 + 8 * v187))
          {
            *(_QWORD *)(v188 + 8 * v187) = v173;
            goto LABEL_326;
          }
          *v173 = *v185;
          v186 = 8 * v187;
          *v185 = **(_QWORD **)(*(_QWORD *)(v34 + 8184) + v186);
          **(_QWORD **)(*(_QWORD *)(v34 + 8184) + v186) = v185;
          v185 = v173;
        }
        v187 = v175;
LABEL_326:
        v173 = v185;
        v185 = (_QWORD *)*v185;
        v175 = v187;
        if (!v185)
          goto LABEL_340;
      }
    }
LABEL_345:
    v190 = *(_QWORD *)(v34 + 8184);
    v191 = *(_QWORD **)(v190 + 8 * v125);
    if (v191)
    {
      *v161 = *v191;
LABEL_353:
      *v191 = v161;
      goto LABEL_354;
    }
    *v161 = *(_QWORD *)(v34 + 8200);
    *(_QWORD *)(v34 + 8200) = v161;
    *(_QWORD *)(v190 + 8 * v125) = v34 + 8200;
    if (*v161)
    {
      v192 = *(_QWORD *)(*v161 + 8);
      if ((v158 & (v158 - 1)) != 0)
      {
        if (v192 >= v158)
          v192 %= v158;
      }
      else
      {
        v192 &= v158 - 1;
      }
      v191 = (_QWORD *)(*(_QWORD *)(v34 + 8184) + 8 * v192);
      goto LABEL_353;
    }
LABEL_354:
    ++*(_QWORD *)(v34 + 8208);
LABEL_355:
    *((_DWORD *)v161 + 6) = v116;
    *((_DWORD *)v161 + 7) = v117;
    v161[4] = v118;
    v193 = *(_QWORD *)(v34 + 8032);
    v272 = (uint64_t (**)())v47;
    v194 = *(_DWORD *)(v193 + 8 * v47);
    v195 = *(_QWORD *)(v34 + 8056);
    v196 = (_QWORD *)operator new();
    v197 = (_QWORD *)ggl::BufferData::BufferData((uint64_t)v196, qword_1EE571C08, 2, 0, 6, 1);
    v197[25] = ggl::DaVinci::ColorCorrectionFactor::reflection(void)::reflection;
    *v197 = &off_1E42B9D50;
    v198 = *(_QWORD *)(v34 + 8112);
    if (v198)
    {
      v199 = (uint8x8_t)vcnt_s8((int8x8_t)v198);
      v199.i16[0] = vaddlv_u8(v199);
      if (v199.u32[0] > 1uLL)
      {
        prime = v47;
        if (v47 >= v198)
          prime = v47 % v198;
      }
      else
      {
        prime = (v198 - 1) & v47;
      }
      v200 = *(_QWORD ***)(*(_QWORD *)(v34 + 8104) + 8 * prime);
      if (v200)
      {
        v201 = *v200;
        if (*v200)
        {
          if (v199.u32[0] < 2uLL)
          {
            while (1)
            {
              v203 = v201[1];
              if (v203 == v47)
              {
                if (v201[2] == v47)
                  goto LABEL_441;
              }
              else if ((v203 & (v198 - 1)) != prime)
              {
                goto LABEL_375;
              }
              v201 = (_QWORD *)*v201;
              if (!v201)
                goto LABEL_375;
            }
          }
          do
          {
            v202 = v201[1];
            if (v202 == v47)
            {
              if (v201[2] == v47)
                goto LABEL_441;
            }
            else
            {
              if (v202 >= v198)
                v202 %= v198;
              if (v202 != prime)
                break;
            }
            v201 = (_QWORD *)*v201;
          }
          while (v201);
        }
      }
    }
LABEL_375:
    v201 = operator new(0x20uLL);
    *v201 = 0;
    v201[1] = v47;
    v201[2] = v47;
    v201[3] = 0;
    v204 = (float)(unint64_t)(*(_QWORD *)(v34 + 8128) + 1);
    v205 = (_QWORD *)(v34 + 8120);
    v206 = *(float *)(v34 + 8136);
    if ((((float)(v206 * (float)v198) >= v204) & ~(v198 == 0)) == 0)
    {
      v207 = (v198 & (v198 - 1)) != 0;
      if (v198 < 3)
        v207 = 1;
      v208 = v207 | (2 * v198);
      v209 = vcvtps_u32_f32(v204 / v206);
      if (v208 <= v209)
        v210 = v209;
      else
        v210 = v208;
      if (v210 == 1)
      {
        v210 = 2;
      }
      else if ((v210 & (v210 - 1)) != 0)
      {
        v210 = std::__next_prime(v210);
        v198 = *(_QWORD *)(v34 + 8112);
      }
      if (v210 <= v198)
      {
        if (v210 >= v198)
          goto LABEL_426;
        v222 = vcvtps_u32_f32((float)*(unint64_t *)(v34 + 8128) / *(float *)(v34 + 8136));
        if (v198 < 3 || (v223 = (uint8x8_t)vcnt_s8((int8x8_t)v198), v223.i16[0] = vaddlv_u8(v223), v223.u32[0] > 1uLL))
        {
          v222 = std::__next_prime(v222);
        }
        else
        {
          v224 = 1 << -(char)__clz(v222 - 1);
          if (v222 >= 2)
            v222 = v224;
        }
        if (v210 <= v222)
          v210 = v222;
        if (v210 >= v198)
          goto LABEL_426;
        if (!v210)
        {
          v229 = *(void **)(v34 + 8104);
          *(_QWORD *)(v34 + 8104) = 0;
          if (v229)
            operator delete(v229);
          *(_QWORD *)(v34 + 8112) = 0;
          goto LABEL_426;
        }
      }
      if (v210 >> 61)
        goto LABEL_487;
      v211 = operator new(8 * v210);
      v212 = *(void **)(v34 + 8104);
      *(_QWORD *)(v34 + 8104) = v211;
      if (v212)
        operator delete(v212);
      v213 = 0;
      *(_QWORD *)(v34 + 8112) = v210;
      do
        *(_QWORD *)(*(_QWORD *)(v34 + 8104) + 8 * v213++) = 0;
      while (v210 != v213);
      v214 = (_QWORD *)*v205;
      if (!*v205)
        goto LABEL_426;
      v215 = v214[1];
      v216 = v210 - 1;
      if ((v210 & (v210 - 1)) == 0)
      {
        v217 = v215 & v216;
        *(_QWORD *)(*(_QWORD *)(v34 + 8104) + 8 * v217) = v205;
        while (1)
        {
          v218 = (_QWORD *)*v214;
          if (!*v214)
            break;
          v219 = v218[1] & v216;
          if (v219 == v217)
          {
            v214 = (_QWORD *)*v214;
          }
          else
          {
            v220 = *(_QWORD *)(v34 + 8104);
            if (*(_QWORD *)(v220 + 8 * v219))
            {
              *v214 = *v218;
              v221 = 8 * v219;
              *v218 = **(_QWORD **)(*(_QWORD *)(v34 + 8104) + v221);
              **(_QWORD **)(*(_QWORD *)(v34 + 8104) + v221) = v218;
            }
            else
            {
              *(_QWORD *)(v220 + 8 * v219) = v214;
              v214 = v218;
              v217 = v219;
            }
          }
        }
LABEL_426:
        v198 = *(_QWORD *)(v34 + 8112);
        if ((v198 & (v198 - 1)) != 0)
        {
          if (v47 >= v198)
            prime = v47 % v198;
          else
            prime = v47;
        }
        else
        {
          prime = (v198 - 1) & v47;
        }
        goto LABEL_431;
      }
      if (v215 >= v210)
        v215 %= v210;
      *(_QWORD *)(*(_QWORD *)(v34 + 8104) + 8 * v215) = v205;
      v225 = (_QWORD *)*v214;
      if (!*v214)
        goto LABEL_426;
      while (1)
      {
        v227 = v225[1];
        if (v227 >= v210)
          v227 %= v210;
        if (v227 != v215)
        {
          v228 = *(_QWORD *)(v34 + 8104);
          if (!*(_QWORD *)(v228 + 8 * v227))
          {
            *(_QWORD *)(v228 + 8 * v227) = v214;
            goto LABEL_412;
          }
          *v214 = *v225;
          v226 = 8 * v227;
          *v225 = **(_QWORD **)(*(_QWORD *)(v34 + 8104) + v226);
          **(_QWORD **)(*(_QWORD *)(v34 + 8104) + v226) = v225;
          v225 = v214;
        }
        v227 = v215;
LABEL_412:
        v214 = v225;
        v225 = (_QWORD *)*v225;
        v215 = v227;
        if (!v225)
          goto LABEL_426;
      }
    }
LABEL_431:
    v230 = *(_QWORD *)(v34 + 8104);
    v231 = *(_QWORD **)(v230 + 8 * prime);
    if (v231)
    {
      *v201 = *v231;
LABEL_439:
      *v231 = v201;
      goto LABEL_440;
    }
    *v201 = *v205;
    *v205 = v201;
    *(_QWORD *)(v230 + 8 * prime) = v205;
    if (*v201)
    {
      v232 = *(_QWORD *)(*v201 + 8);
      if ((v198 & (v198 - 1)) != 0)
      {
        if (v232 >= v198)
          v232 %= v198;
      }
      else
      {
        v232 &= v198 - 1;
      }
      v231 = (_QWORD *)(*(_QWORD *)(v34 + 8104) + 8 * v232);
      goto LABEL_439;
    }
LABEL_440:
    ++*(_QWORD *)(v34 + 8128);
LABEL_441:
    v233 = v201[3];
    v201[3] = v196;
    if (v233)
      (*(void (**)(uint64_t))(*(_QWORD *)v233 + 8))(v233);
    v234 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>> const&>,std::tuple<>>(v34 + 7928, (unint64_t)v272, &v272);
    ++v234[3];
    *(_QWORD *)(v195 + 24 * v194) = v196;
    v235 = v196[1];
    *(int8x16_t *)v196[9] = *v260;
    if (v196[8] > v235)
      v235 = v196[8];
    v196[7] = 0;
    v196[8] = v235;
    v2 = v258;
    v236 = *(_QWORD **)(v258 + 8);
    v16 = v259;
    v237 = *v259;
    v269 = &off_1E4281B08;
    *(_QWORD *)&v270 = v47;
    *((_QWORD *)&v270 + 1) = v237;
    v271 = &v269;
    v274 = &v272;
    v272 = &off_1E4281B08;
    v273 = v270;
    v275 = 0;
    ecs2::Runtime::queueCommand(v236, (uint64_t)&v272);
    if (v275 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v275])(&v268, &v272);
    v275 = -1;
    result = (unint64_t)v271;
    v12 = v256;
    v11 = v257;
    if (v271 == &v269)
    {
LABEL_46:
      result = (unint64_t)&v269;
      v44 = 4;
      goto LABEL_450;
    }
LABEL_448:
    if (!result)
      goto LABEL_451;
    v44 = 5;
LABEL_450:
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v44))();
LABEL_451:
    v10 = *(_QWORD **)(v261 + 32);
    v17 = v266 + 1;
    v266 = v17;
    if (v17 != v10)
    {
      v238 = v262[4];
      while (1)
      {
        v239 = *((unsigned int *)v17 + 1);
        v240 = v239 >> 7;
        if (v239 >> 7 < (v262[5] - v238) >> 3)
        {
          result = *(_QWORD *)(v238 + 8 * v240);
          if (result)
          {
            v241 = v239 & 0x7F;
            result = *(unsigned __int16 *)(result + 2 * v241);
            v243 = v262[7];
            v242 = v262[8];
            if (result < (v242 - v243) >> 3)
            {
              result = v243 + 8 * result;
              if (result != v242 && *(_DWORD *)(result + 4) == (_DWORD)v239)
              {
                result = v263[4];
                if (v240 < (uint64_t)(v263[5] - result) >> 3)
                {
                  result = *(_QWORD *)(result + 8 * v240);
                  if (result)
                  {
                    result = *(unsigned __int16 *)(result + 2 * v241);
                    v246 = v263[7];
                    v245 = v263[8];
                    if (result < (v245 - v246) >> 3)
                    {
                      result = v246 + 8 * result;
                      if (result != v245 && *(_DWORD *)(result + 4) == (_DWORD)v239)
                      {
                        result = v264[4];
                        if (v240 < (uint64_t)(v264[5] - result) >> 3)
                        {
                          result = *(_QWORD *)(result + 8 * v240);
                          if (result)
                          {
                            result = *(unsigned __int16 *)(result + 2 * v241);
                            v249 = v264[7];
                            v248 = v264[8];
                            if (result < (v248 - v249) >> 3)
                            {
                              result = v249 + 8 * result;
                              if (result != v248 && *(_DWORD *)(result + 4) == (_DWORD)v239)
                              {
                                result = v265[4];
                                if (v240 < (uint64_t)(v265[5] - result) >> 3)
                                {
                                  v251 = *(_QWORD *)(result + 8 * v240);
                                  if (v251)
                                  {
                                    v252 = *(unsigned __int16 *)(v251 + 2 * v241);
                                    result = v265[7];
                                    v253 = v265[8];
                                    if (v252 < (uint64_t)(v253 - result) >> 3)
                                    {
                                      v254 = result + 8 * v252;
                                      result = *(unsigned int *)(v254 + 4);
                                      if ((_DWORD)result == (_DWORD)v239 && v254 != v253)
                                        break;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v17 == v10)
        {
          v17 = v10;
          goto LABEL_16;
        }
      }
      v10 = v17;
LABEL_16:
      v266 = v17;
    }
  }
  while (v12 != v10);
LABEL_486:
  *v16 = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
  return result;
}

void sub_19F711224(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[3];
  v1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RenderableMaterialData>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xB6C12FBB402E8E70;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xB6C12FBB402E8E70;
      if (*(_QWORD *)&v3 <= 0xB6C12FBB402E8E70)
        v5 = 0xB6C12FBB402E8E70 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xB6C12FBB402E8E70;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xB6C12FBB402E8E70)
            {
              if (v7[2] == 0xB6C12FBB402E8E70)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xB6C12FBB402E8E70)
          {
            if (v7[2] == 0xB6C12FBB402E8E70)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RenderableMaterialData]";
  *(_QWORD *)(v11 + 24) = 30;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272A38;
  *(_QWORD *)(v11 + 8) = 0xB6C12FBB402E8E70;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xB6C12FBB402E8E70, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xB6C12FBB402E8E70;
  v15[1] = "md::ls::RenderableMaterialData]";
  v15[2] = 30;
  gdc::Registry::_registerStorageDataSignals(a1, 0xB6C12FBB402E8E70, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F711470(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::MaterialBrightnessAndSaturation>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x3B99BF65D7C678C8;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x3B99BF65D7C678C8;
      if (*(_QWORD *)&v3 <= 0x3B99BF65D7C678C8uLL)
        v5 = 0x3B99BF65D7C678C8uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x3B99BF65D7C678C8;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x3B99BF65D7C678C8)
            {
              if (v7[2] == 0x3B99BF65D7C678C8)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x3B99BF65D7C678C8)
          {
            if (v7[2] == 0x3B99BF65D7C678C8)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::MaterialBrightnessAndSaturation]";
  *(_QWORD *)(v11 + 24) = 39;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273ED8;
  *(_QWORD *)(v11 + 8) = 0x3B99BF65D7C678C8;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x3B99BF65D7C678C8uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x3B99BF65D7C678C8;
  v15[1] = "md::ls::MaterialBrightnessAndSaturation]";
  v15[2] = 39;
  gdc::Registry::_registerStorageDataSignals(a1, 0x3B99BF65D7C678C8, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F711698(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::MaterialBrightnessAndSaturation>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MaterialBrightnessAndSaturation>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_DWORD *)(a1[10] + 16 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = (_DWORD *)a1[11];
  v16 = *(v15 - 4);
  v15 -= 4;
  *v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MaterialBrightnessAndSaturation>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MaterialBrightnessAndSaturation>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::RenderableMaterialData>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderableMaterialData>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_OWORD *)(a1[10] + 32 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_OWORD *)(v15 - 16);
  *v14 = *(_OWORD *)(v15 - 32);
  v14[1] = v16;
  a1[11] -= 32;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RenderableMaterialData>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderableMaterialData>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfNeedsDepthPeel>(md::ita::CheckIfNeedsDepthPeel &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfNeedsDepthPeel &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfNeedsDepthPeel>(md::ita::CheckIfNeedsDepthPeel &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfNeedsDepthPeel>(md::ita::CheckIfNeedsDepthPeel &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfNeedsDepthPeel &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfNeedsDepthPeel>(md::ita::CheckIfNeedsDepthPeel &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284028;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfNeedsDepthPeel>(md::ita::CheckIfNeedsDepthPeel &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfNeedsDepthPeel &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfNeedsDepthPeel>(md::ita::CheckIfNeedsDepthPeel &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284028;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfNeedsDepthPeel>(md::ita::CheckIfNeedsDepthPeel &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfNeedsDepthPeel &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfNeedsDepthPeel>(md::ita::CheckIfNeedsDepthPeel &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfNeedsDepthPeel>(md::ita::CheckIfNeedsDepthPeel &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfNeedsDepthPeel &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfNeedsDepthPeel>(md::ita::CheckIfNeedsDepthPeel &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfNeedsDepthPeel>(md::ita::CheckIfNeedsDepthPeel &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfNeedsDepthPeel &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfNeedsDepthPeel>(md::ita::CheckIfNeedsDepthPeel &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284070;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfNeedsDepthPeel>(md::ita::CheckIfNeedsDepthPeel &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfNeedsDepthPeel &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfNeedsDepthPeel>(md::ita::CheckIfNeedsDepthPeel &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284070;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfNeedsDepthPeel>(md::ita::CheckIfNeedsDepthPeel &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfNeedsDepthPeel &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfNeedsDepthPeel>(md::ita::CheckIfNeedsDepthPeel &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x60uLL);
  a1[2] = (char *)(v2 + 12);
  *v2 = 0x8DCCA4FD35258189;
  v2[1] = "md::ls::MeshRenderableID]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB43E0;
  v2[4] = "md::ls::InView]";
  v2[5] = 14;
  v2[6] = 0xEC2A00DC914732D7;
  v2[7] = "md::ls::IntendedSceneLayer]";
  v2[8] = 26;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 12)
  {
    *(_QWORD *)v3 = 0x910D7E292AD5622FLL;
    v2[10] = "md::ls::CheckIfRequiresDepthPeel]";
    v2[11] = 32;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 12) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 12) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x910D7E292AD5622FLL;
  *((_QWORD *)v10 + 1) = "md::ls::CheckIfRequiresDepthPeel]";
  *((_QWORD *)v10 + 2) = 32;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
}

void sub_19F711C4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfNeedsDepthPeel>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfNeedsDepthPeel>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfNeedsDepthPeel>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfNeedsDepthPeel>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42768B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfNeedsDepthPeel>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfNeedsDepthPeel>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42768B8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfNeedsDepthPeel>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfNeedsDepthPeel>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t ****v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (***v8)(_QWORD);
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  int8x8_t v14;
  uint8x8_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t result;
  _QWORD v36[3];
  _QWORD *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t ****)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275088;
  v4[1] = a2;
  v5 = ***v3;
  if (v5 != (**v3)[1] && *v5 != 0x22D45F5AAD4BF408)
  {
    v6 = v5 + 5;
    do
    {
      v7 = *v6;
      v6 += 5;
    }
    while (v7 != 0x22D45F5AAD4BF408);
    v5 = v6 - 5;
  }
  v8 = (uint64_t (***)(_QWORD))v5[3];
  v9 = (std::__shared_weak_count *)v5[4];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = *(uint64_t **)((**v8)(v8) + 8);
  v14 = (int8x8_t)v13[1];
  v15 = (uint8x8_t)vcnt_s8(v14);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    v16 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v14 <= 0x8BD499FBD96FBB9ELL)
      v16 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v14;
  }
  else
  {
    v16 = (*(_QWORD *)&v14 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v17 = *v13;
  v18 = *(_QWORD **)(v17 + 8 * v16);
  if (!v18)
    goto LABEL_34;
  v19 = (_QWORD *)*v18;
  if (!v19)
    goto LABEL_34;
  if (v15.u32[0] < 2uLL)
  {
    while (1)
    {
      v21 = v19[1];
      if (v21 == 0x8BD499FBD96FBB9ELL)
      {
        if (v19[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_32;
      }
      else if ((v21 & (*(_QWORD *)&v14 - 1)) != v16)
      {
        goto LABEL_34;
      }
      v19 = (_QWORD *)*v19;
      if (!v19)
        goto LABEL_34;
    }
  }
  while (1)
  {
    v20 = v19[1];
    if (v20 == 0x8BD499FBD96FBB9ELL)
      break;
    if (v20 >= *(_QWORD *)&v14)
      v20 %= *(_QWORD *)&v14;
    if (v20 != v16)
      goto LABEL_34;
LABEL_21:
    v19 = (_QWORD *)*v19;
    if (!v19)
      goto LABEL_34;
  }
  if (v19[2] != 0x8BD499FBD96FBB9ELL)
    goto LABEL_21;
LABEL_32:
  v22 = v19[5];
  if (*(_QWORD *)(v22 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v23 = *(_QWORD *)(v22 + 32);
    goto LABEL_35;
  }
LABEL_34:
  v23 = 0;
LABEL_35:
  if (v15.u32[0] > 1uLL)
  {
    v24 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v14 <= 0xE42D19AFCA302E68)
      v24 = 0xE42D19AFCA302E68 % *(_QWORD *)&v14;
  }
  else
  {
    v24 = (*(_QWORD *)&v14 - 1) & 0xE42D19AFCA302E68;
  }
  v25 = *(_QWORD **)(v17 + 8 * v24);
  if (!v25)
    goto LABEL_57;
  v26 = (_QWORD *)*v25;
  if (!v26)
    goto LABEL_57;
  if (v15.u32[0] < 2uLL)
  {
    while (1)
    {
      v28 = v26[1];
      if (v28 == 0xE42D19AFCA302E68)
      {
        if (v26[2] == 0xE42D19AFCA302E68)
          goto LABEL_55;
      }
      else if ((v28 & (*(_QWORD *)&v14 - 1)) != v24)
      {
        goto LABEL_57;
      }
      v26 = (_QWORD *)*v26;
      if (!v26)
        goto LABEL_57;
    }
  }
  while (2)
  {
    v27 = v26[1];
    if (v27 != 0xE42D19AFCA302E68)
    {
      if (v27 >= *(_QWORD *)&v14)
        v27 %= *(_QWORD *)&v14;
      if (v27 != v24)
        goto LABEL_57;
      goto LABEL_44;
    }
    if (v26[2] != 0xE42D19AFCA302E68)
    {
LABEL_44:
      v26 = (_QWORD *)*v26;
      if (!v26)
        goto LABEL_57;
      continue;
    }
    break;
  }
LABEL_55:
  v29 = v26[5];
  if (*(_QWORD *)(v29 + 8) == 0xE42D19AFCA302E68)
  {
    v30 = *(_QWORD *)(v29 + 32);
    goto LABEL_58;
  }
LABEL_57:
  v30 = 0;
LABEL_58:
  if (v15.u32[0] >= 2uLL)
  {
    v32 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v14 <= 0x1AF456233693CD46uLL)
      v32 = 0x1AF456233693CD46uLL % *(_QWORD *)&v14;
    v31 = *(_QWORD **)(v17 + 8 * v32);
    do
    {
      do
        v31 = (_QWORD *)*v31;
      while (v31[1] != 0x1AF456233693CD46);
    }
    while (v31[2] != 0x1AF456233693CD46);
  }
  else
  {
    v31 = *(_QWORD **)(v17 + 8 * ((*(_QWORD *)&v14 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v31 = (_QWORD *)*v31;
      while (v31[1] != 0x1AF456233693CD46);
    }
    while (v31[2] != 0x1AF456233693CD46);
  }
  if ((*(_BYTE *)(v23 + 1) != 0) != fabs(*(double *)(*(_QWORD *)(v31[5] + 32) + 40)) > 0.0001
    || *(_DWORD *)(v30 + 88) == 5)
  {
    v36[0] = &off_1E427B778;
    v36[1] = v3;
    v37 = v36;
    (*(void (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v36);
    v33 = v37;
    if (v37 == v36)
    {
      v34 = 4;
      v33 = v36;
LABEL_74:
      (*(void (**)(void))(*v33 + 8 * v34))();
    }
    else if (v37)
    {
      v34 = 5;
      goto LABEL_74;
    }
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F712120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t result;
  unint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v95[6];
  unint64_t *v96;
  uint64_t v97[4];

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::InView>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::IntendedSceneLayer>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::CheckIfRequiresDepthPeel>(v2);
  v97[0] = (uint64_t)v3;
  v97[1] = (uint64_t)v4;
  v97[2] = (uint64_t)v5;
  v97[3] = (uint64_t)v6;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v95, v97);
  v7 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7])
    v7 = v4 + 4;
  if (v5[8] - v5[7] < v7[4] - v7[3])
    v7 = v5 + 4;
  if (v6[8] - v6[7] < v7[4] - v7[3])
    v7 = v6 + 4;
  v8 = (unint64_t *)v7[4];
  v9 = v96;
  if (v8 == v96)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v10 = (_QWORD *)result;
LABEL_97:
    *v10 = 0xFFFFFFFF00000000;
  }
  else
  {
    v10 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v11 = v95[0];
    v12 = (_QWORD *)v95[1];
    v13 = (_QWORD *)v95[2];
    v92 = (_QWORD *)v95[4];
    v93 = (_QWORD *)v95[3];
    while (1)
    {
      *v10 = *v9;
      v15 = *v9;
      v16 = HIDWORD(*v9);
      v17 = *v9 >> 39;
      v18 = v3[4];
      if (v17 >= (v3[5] - v18) >> 3)
        goto LABEL_19;
      v19 = *(_QWORD *)(v18 + 8 * v17);
      if (!v19)
        goto LABEL_19;
      v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F));
      v22 = v3[7];
      v21 = v3[8];
      if (v20 >= (v21 - v22) >> 3)
        goto LABEL_19;
      v23 = v22 + 8 * v20;
      if (v23 != v21 && *(_DWORD *)(v23 + 4) == (_DWORD)v16)
      {
        v25 = v3[11];
        v26 = v3[10] + 8 * v20;
      }
      else
      {
LABEL_19:
        v25 = v3[11];
        v26 = v25;
      }
      v27 = v26 == v25 ? 0 : v26;
      if ((v28 = v4[4], v17 < (v4[5] - v28) >> 3)
        && (v29 = *(_QWORD *)(v28 + 8 * v17)) != 0
        && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            v32 = v4[7],
            v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == (_DWORD)v16) : (v34 = 0), v34))
      {
        v35 = v4[11];
        v36 = v4[10] + 4 * v30;
      }
      else
      {
        v35 = v4[11];
        v36 = v35;
      }
      v37 = v36 == v35 ? 0 : v36;
      if ((v38 = v5[4], v17 < (v5[5] - v38) >> 3)
        && (v39 = *(_QWORD *)(v38 + 8 * v17)) != 0
        && (v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            v42 = v5[7],
            v41 = v5[8],
            v40 < (v41 - v42) >> 3)
        && ((v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == (_DWORD)v16) : (v44 = 0), v44))
      {
        v45 = v5[11];
        v46 = v5[10] + v40;
      }
      else
      {
        v45 = v5[11];
        v46 = v45;
      }
      v47 = v46 == v45 ? 0 : v46;
      if ((v48 = v6[4], v17 < (v6[5] - v48) >> 3)
        && (v49 = *(_QWORD *)(v48 + 8 * v17)) != 0
        && (v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            v52 = v6[7],
            v51 = v6[8],
            v50 < (v51 - v52) >> 3)
        && ((v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == (_DWORD)v16) : (v54 = 0), v54))
      {
        v55 = v6[11];
        v56 = v6[10] + v50;
      }
      else
      {
        v55 = v6[11];
        v56 = v55;
      }
      v57 = *(_QWORD *)(a2 + 24);
      if (!v57)
        break;
      if (v56 == v55)
        v58 = 0;
      else
        v58 = v56;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)v57 + 48))(v57, v27, v37, v47, v58);
      v60 = *(unint64_t **)(v11 + 32);
      v14 = v9 + 1;
      v96 = v9 + 1;
      if (v9 + 1 != v60)
      {
        v61 = v12[4];
        while (1)
        {
          v62 = *((unsigned int *)v14 + 1);
          v63 = v62 >> 7;
          if (v62 >> 7 < (v12[5] - v61) >> 3)
          {
            v64 = *(_QWORD *)(v61 + 8 * v63);
            if (v64)
            {
              v65 = v62 & 0x7F;
              v66 = *(unsigned __int16 *)(v64 + 2 * v65);
              v68 = v12[7];
              v67 = v12[8];
              result = v67 - v68;
              if (v66 < (v67 - v68) >> 3)
              {
                v69 = v68 + 8 * v66;
                if (v69 != v67 && *(_DWORD *)(v69 + 4) == (_DWORD)v62)
                {
                  v71 = v13[4];
                  if (v63 < (v13[5] - v71) >> 3)
                  {
                    v72 = *(_QWORD *)(v71 + 8 * v63);
                    if (v72)
                    {
                      v73 = *(unsigned __int16 *)(v72 + 2 * v65);
                      v75 = v13[7];
                      v74 = v13[8];
                      result = v74 - v75;
                      if (v73 < (v74 - v75) >> 3)
                      {
                        v76 = v75 + 8 * v73;
                        if (v76 != v74 && *(_DWORD *)(v76 + 4) == (_DWORD)v62)
                        {
                          v78 = v93[4];
                          if (v63 < (v93[5] - v78) >> 3)
                          {
                            v79 = *(_QWORD *)(v78 + 8 * v63);
                            if (v79)
                            {
                              v80 = *(unsigned __int16 *)(v79 + 2 * v65);
                              v82 = v93[7];
                              v81 = v93[8];
                              result = v81 - v82;
                              if (v80 < (v81 - v82) >> 3)
                              {
                                v83 = v82 + 8 * v80;
                                if (v83 != v81 && *(_DWORD *)(v83 + 4) == (_DWORD)v62)
                                {
                                  v85 = v92[4];
                                  if (v63 < (v92[5] - v85) >> 3)
                                  {
                                    v86 = *(_QWORD *)(v85 + 8 * v63);
                                    if (v86)
                                    {
                                      v87 = *(unsigned __int16 *)(v86 + 2 * v65);
                                      v89 = v92[7];
                                      v88 = v92[8];
                                      if (v87 < (v88 - v89) >> 3)
                                      {
                                        v90 = v89 + 8 * v87;
                                        if (*(_DWORD *)(v90 + 4) == (_DWORD)v62 && v90 != v88)
                                          break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v60)
          {
            v14 = v60;
            goto LABEL_10;
          }
        }
        v60 = v14;
LABEL_10:
        v96 = v14;
      }
      v9 = v60;
      if (v8 == v60)
        goto LABEL_97;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&>>::empty();
  }
  return result;
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[4];
  uint64_t v9[7];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  v3 = gdc::Registry::storage<md::ls::InView>(v1);
  v4 = gdc::Registry::storage<md::ls::IntendedSceneLayer>(v1);
  v5 = gdc::Registry::storage<md::ls::CheckIfRequiresDepthPeel>(v1);
  v8[0] = v2;
  v8[1] = v3;
  v8[2] = v4;
  v8[3] = v5;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v9, v8);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v6 = v2;
  else
    v6 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v6 = v4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v6 = v5;
  return *(_QWORD *)(v6 + 64) == v9[6];
}

uint64_t gdc::Registry::storage<md::ls::CheckIfRequiresDepthPeel>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x910D7E292AD5622FLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x910D7E292AD5622FLL;
      if (*(_QWORD *)&v3 <= 0x910D7E292AD5622FLL)
        v5 = 0x910D7E292AD5622FLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x910D7E292AD5622FLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x910D7E292AD5622FLL)
            {
              if (v7[2] == 0x910D7E292AD5622FLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x910D7E292AD5622FLL)
          {
            if (v7[2] == 0x910D7E292AD5622FLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::CheckIfRequiresDepthPeel]";
  *(_QWORD *)(v11 + 24) = 32;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272EB8;
  *(_QWORD *)(v11 + 8) = 0x910D7E292AD5622FLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x910D7E292AD5622FLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x910D7E292AD5622FLL;
  v15[1] = "md::ls::CheckIfRequiresDepthPeel]";
  v15[2] = 32;
  gdc::Registry::_registerStorageDataSignals(a1, 0x910D7E292AD5622FLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F7128A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::CheckIfRequiresDepthPeel>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::CheckIfRequiresDepthPeel>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::CheckIfRequiresDepthPeel>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::CheckIfRequiresDepthPeel>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareGradientParametersConstantDataHandle>(md::ita::PrepareGradientParametersConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareGradientParametersConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareGradientParametersConstantDataHandle>(md::ita::PrepareGradientParametersConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareGradientParametersConstantDataHandle>(md::ita::PrepareGradientParametersConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareGradientParametersConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareGradientParametersConstantDataHandle>(md::ita::PrepareGradientParametersConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4289368;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareGradientParametersConstantDataHandle>(md::ita::PrepareGradientParametersConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareGradientParametersConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareGradientParametersConstantDataHandle>(md::ita::PrepareGradientParametersConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4289368;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareGradientParametersConstantDataHandle>(md::ita::PrepareGradientParametersConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareGradientParametersConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareGradientParametersConstantDataHandle>(md::ita::PrepareGradientParametersConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls19ColorRampDataHandleEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F712AB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareGradientParametersConstantDataHandle>(md::ita::PrepareGradientParametersConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareGradientParametersConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareGradientParametersConstantDataHandle>(md::ita::PrepareGradientParametersConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareGradientParametersConstantDataHandle>(md::ita::PrepareGradientParametersConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareGradientParametersConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareGradientParametersConstantDataHandle>(md::ita::PrepareGradientParametersConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42893B0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareGradientParametersConstantDataHandle>(md::ita::PrepareGradientParametersConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareGradientParametersConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareGradientParametersConstantDataHandle>(md::ita::PrepareGradientParametersConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42893B0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareGradientParametersConstantDataHandle>(md::ita::PrepareGradientParametersConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareGradientParametersConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareGradientParametersConstantDataHandle>(md::ita::PrepareGradientParametersConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0x8DCCA4FD35258189;
  v2[1] = "md::ls::MeshRenderableID]";
  *(_QWORD *)&result = 24;
  *((_OWORD *)v2 + 1) = xmmword_19FFB43E0;
  v2[4] = "md::ls::InView]";
  v2[5] = 14;
  v2[6] = 0x741786E98487217CLL;
  v2[7] = "md::ls::RampMaterialData]";
  v2[8] = 24;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareGradientParametersConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareGradientParametersConstantDataHandle>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareGradientParametersConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareGradientParametersConstantDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279258;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareGradientParametersConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareGradientParametersConstantDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4279258;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareGradientParametersConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareGradientParametersConstantDataHandle>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t (***v40)(_QWORD);
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  md::LayoutContext *v45;
  uint64_t *v46;
  int8x8_t v47;
  uint8x8_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t result;
  uint64_t v70;
  uint64_t *v71;
  char v72;
  float v73;
  _OWORD v74[2];
  int v75;
  __int128 v76;
  __int128 v77;
  int v78;
  __int128 v79;
  __int128 v80;
  int v81;
  __int128 v82;
  __int128 v83;
  int v84;
  __int128 v85;
  __int128 v86;
  int v87;
  __int128 v88;
  __int128 v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE v94[24];
  _BYTE *v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275058;
  v4[1] = a2;
  v5 = **v3;
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (v6 != v7)
  {
    while (*v6 != 0xC94DD89A7B09BE9CLL)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    v8 = 0;
  }
  else
  {
    v8 = v6[3];
    v9 = (std::__shared_weak_count *)v6[4];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v93 = 0;
  v13 = **v3;
  v14 = *(_QWORD **)v13;
  v15 = *(_QWORD **)(v13 + 8);
  if (v14 != v15)
  {
    while (*v14 != 0x41D4E9297E100630)
    {
      v14 += 5;
      if (v14 == v15)
        goto LABEL_24;
    }
  }
  if (v14 == v15)
  {
LABEL_24:
    v17 = 0;
  }
  else
  {
    v17 = v14[3];
    v16 = (std::__shared_weak_count *)v14[4];
    if (v16)
    {
      v18 = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  v92 = 0;
  v93 = v17;
  v21 = **v3;
  v22 = *(_QWORD **)v21;
  v23 = *(_QWORD **)(v21 + 8);
  if (v22 != v23)
  {
    while (*v22 != 0x4EDAD23DFB014132)
    {
      v22 += 5;
      if (v22 == v23)
        goto LABEL_36;
    }
  }
  if (v22 == v23)
  {
LABEL_36:
    v25 = 0;
  }
  else
  {
    v25 = v22[3];
    v24 = (std::__shared_weak_count *)v22[4];
    if (v24)
    {
      v26 = (unint64_t *)&v24->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
      do
        v28 = __ldaxr(v26);
      while (__stlxr(v28 - 1, v26));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  v91 = 0;
  v92 = v25;
  v29 = **v3;
  v30 = *(_QWORD **)v29;
  v31 = *(_QWORD **)(v29 + 8);
  if (v30 != v31)
  {
    while (*v30 != 0x348A0B0E758C07C2)
    {
      v30 += 5;
      if (v30 == v31)
        goto LABEL_48;
    }
  }
  if (v30 == v31)
  {
LABEL_48:
    v33 = 0;
  }
  else
  {
    v33 = v30[3];
    v32 = (std::__shared_weak_count *)v30[4];
    if (v32)
    {
      v34 = (unint64_t *)&v32->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      do
        v36 = __ldaxr(v34);
      while (__stlxr(v36 - 1, v34));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  v91 = v33;
  memset(v74, 0, sizeof(v74));
  v75 = 1065353216;
  v76 = 0u;
  v77 = 0u;
  v78 = 1065353216;
  v79 = 0u;
  v80 = 0u;
  v83 = 0u;
  v82 = 0u;
  v81 = 1065353216;
  v84 = 1065353216;
  v85 = 0u;
  v86 = 0u;
  v89 = 0u;
  v88 = 0u;
  v87 = 1065353216;
  v90 = 1065353216;
  v37 = *(uint64_t **)**v3;
  if (v37 != *(uint64_t **)(**v3 + 8) && *v37 != 0x22D45F5AAD4BF408)
  {
    v38 = v37 + 5;
    do
    {
      v39 = *v38;
      v38 += 5;
    }
    while (v39 != 0x22D45F5AAD4BF408);
    v37 = v38 - 5;
  }
  v40 = (uint64_t (***)(_QWORD))v37[3];
  v41 = (std::__shared_weak_count *)v37[4];
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    do
      v44 = __ldaxr(v42);
    while (__stlxr(v44 - 1, v42));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v45 = (md::LayoutContext *)(**v40)(v40);
  v46 = (uint64_t *)*((_QWORD *)v45 + 1);
  v47 = (int8x8_t)v46[1];
  v48 = (uint8x8_t)vcnt_s8(v47);
  v48.i16[0] = vaddlv_u8(v48);
  if (v48.u32[0] >= 2uLL)
  {
    v51 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v47 <= 0x1AF456233693CD46uLL)
      v51 = 0x1AF456233693CD46uLL % *(_QWORD *)&v47;
    v50 = **(_QWORD ***)(*v46 + 8 * v51);
    v49 = *(_QWORD *)&v47 - 1;
    while (v50[1] != 0x1AF456233693CD46 || v50[2] != 0x1AF456233693CD46)
      v50 = (_QWORD *)*v50;
  }
  else
  {
    v49 = *(_QWORD *)&v47 - 1;
    v50 = *(_QWORD **)(*v46 + 8 * ((*(_QWORD *)&v47 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v50 = (_QWORD *)*v50;
      while (v50[1] != 0x1AF456233693CD46);
    }
    while (v50[2] != 0x1AF456233693CD46);
  }
  v73 = fmaxf(*(float *)(*(_QWORD *)(v50[5] + 32) + 3080) + *(float *)(*(_QWORD *)(v50[5] + 32) + 3076), 1.0);
  if (v48.u32[0] > 1uLL)
  {
    v52 = 0xD2404CDD1F9A6950;
    if (*(_QWORD *)&v47 <= 0xD2404CDD1F9A6950)
      v52 = 0xD2404CDD1F9A6950 % *(_QWORD *)&v47;
  }
  else
  {
    v52 = v49 & 0xD2404CDD1F9A6950;
  }
  v53 = *v46;
  v54 = *(_QWORD **)(v53 + 8 * v52);
  if (!v54)
    goto LABEL_108;
  v55 = (_QWORD *)*v54;
  if (!v55)
    goto LABEL_108;
  if (v48.u32[0] < 2uLL)
  {
    while (1)
    {
      v56 = v55[1];
      if (v56 == 0xD2404CDD1F9A6950)
      {
        if (v55[2] == 0xD2404CDD1F9A6950)
          goto LABEL_91;
      }
      else if ((v56 & v49) != v52)
      {
        goto LABEL_108;
      }
      v55 = (_QWORD *)*v55;
      if (!v55)
        goto LABEL_108;
    }
  }
  while (1)
  {
    v57 = v55[1];
    if (v57 == 0xD2404CDD1F9A6950)
      break;
    if (v57 >= *(_QWORD *)&v47)
      v57 %= *(_QWORD *)&v47;
    if (v57 != v52)
      goto LABEL_108;
LABEL_85:
    v55 = (_QWORD *)*v55;
    if (!v55)
      goto LABEL_108;
  }
  if (v55[2] != 0xD2404CDD1F9A6950)
    goto LABEL_85;
LABEL_91:
  v58 = v55[5];
  if (*(_QWORD *)(v58 + 8) == 0xD2404CDD1F9A6950)
  {
    v59 = *(_QWORD *)(v58 + 32);
    if (v59)
    {
      if (v48.u32[0] >= 2uLL)
      {
        v61 = 0xE42D19AFCA302E68;
        if (*(_QWORD *)&v47 <= 0xE42D19AFCA302E68)
          v61 = 0xE42D19AFCA302E68 % *(_QWORD *)&v47;
        v60 = *(_QWORD **)(v53 + 8 * v61);
        do
        {
          do
            v60 = (_QWORD *)*v60;
          while (v60[1] != 0xE42D19AFCA302E68);
        }
        while (v60[2] != 0xE42D19AFCA302E68);
      }
      else
      {
        v60 = *(_QWORD **)(v53 + 8 * (v49 & 0xE42D19AFCA302E68));
        do
        {
          do
            v60 = (_QWORD *)*v60;
          while (v60[1] != 0xE42D19AFCA302E68);
        }
        while (v60[2] != 0xE42D19AFCA302E68);
      }
      v62 = *(_QWORD *)(v60[5] + 32);
      v72 = 0;
      LOBYTE(v62) = atomic_load((unsigned __int8 *)(*(_QWORD *)(v62 + 32) + 254));
      v72 = v62 & 1;
      v71 = &v93;
      v63 = md::LayoutContext::frameState(v45);
      v70 = *(_QWORD *)(v64 + 624);
      v65 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v8 + 32))(v8, v63);
      v66 = operator new(0x58uLL);
      *v66 = &off_1E427C978;
      v66[1] = &v93;
      v66[2] = v3;
      v66[3] = &v92;
      v66[4] = v65 + 2576;
      v66[5] = v59;
      v66[6] = &v73;
      v66[7] = &v71;
      v66[8] = &v91;
      v66[9] = &v70;
      v66[10] = &v72;
      v95 = v66;
      (*(void (**)(_QWORD *, _BYTE *))(*v4 + 16))(v4, v94);
      v67 = v95;
      if (v95 == v94)
      {
        v68 = 4;
        v67 = v94;
LABEL_107:
        (*(void (**)(void))(*v67 + 8 * v68))();
      }
      else if (v95)
      {
        v68 = 5;
        goto LABEL_107;
      }
    }
  }
LABEL_108:
  md::DaVinciGroundRenderLayer::MaterialConstants::~MaterialConstants((md::DaVinciGroundRenderLayer::MaterialConstants *)v74);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F713348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a5);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  md::DaVinciGroundRenderLayer::MaterialConstants::~MaterialConstants((md::DaVinciGroundRenderLayer::MaterialConstants *)va);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  unint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v95[6];
  unint64_t *v96;
  uint64_t v97[4];

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::InView>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::RampMaterialData>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::ColorRampDataHandle>(v2);
  v97[0] = (uint64_t)v3;
  v97[1] = (uint64_t)v4;
  v97[2] = (uint64_t)v5;
  v97[3] = (uint64_t)v6;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v95, v97);
  v7 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7])
    v7 = v4 + 4;
  if (v5[8] - v5[7] < v7[4] - v7[3])
    v7 = v5 + 4;
  if (v6[8] - v6[7] < v7[4] - v7[3])
    v7 = v6 + 4;
  v8 = (unint64_t *)v7[4];
  v9 = v96;
  if (v8 == v96)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v10 = (_QWORD *)result;
LABEL_97:
    *v10 = 0xFFFFFFFF00000000;
  }
  else
  {
    v10 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v11 = v95[0];
    v12 = (_QWORD *)v95[1];
    v13 = (_QWORD *)v95[2];
    v92 = (_QWORD *)v95[4];
    v93 = (_QWORD *)v95[3];
    while (1)
    {
      *v10 = *v9;
      v15 = *v9;
      v16 = HIDWORD(*v9);
      v17 = *v9 >> 39;
      v18 = v3[4];
      if (v17 >= (v3[5] - v18) >> 3)
        goto LABEL_19;
      v19 = *(_QWORD *)(v18 + 8 * v17);
      if (!v19)
        goto LABEL_19;
      v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F));
      v22 = v3[7];
      v21 = v3[8];
      if (v20 >= (v21 - v22) >> 3)
        goto LABEL_19;
      v23 = v22 + 8 * v20;
      if (v23 != v21 && *(_DWORD *)(v23 + 4) == (_DWORD)v16)
      {
        v25 = v3[11];
        v26 = v3[10] + 8 * v20;
      }
      else
      {
LABEL_19:
        v25 = v3[11];
        v26 = v25;
      }
      v27 = v26 == v25 ? 0 : v26;
      if ((v28 = v4[4], v17 < (v4[5] - v28) >> 3)
        && (v29 = *(_QWORD *)(v28 + 8 * v17)) != 0
        && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            v32 = v4[7],
            v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == (_DWORD)v16) : (v34 = 0), v34))
      {
        v35 = v4[11];
        v36 = v4[10] + 4 * v30;
      }
      else
      {
        v35 = v4[11];
        v36 = v35;
      }
      v37 = v36 == v35 ? 0 : v36;
      if ((v38 = v5[4], v17 < (v5[5] - v38) >> 3)
        && (v39 = *(_QWORD *)(v38 + 8 * v17)) != 0
        && (v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            v42 = v5[7],
            v41 = v5[8],
            v40 < (v41 - v42) >> 3)
        && ((v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == (_DWORD)v16) : (v44 = 0), v44))
      {
        v45 = v5[11];
        v46 = v5[10] + 32 * v40;
      }
      else
      {
        v45 = v5[11];
        v46 = v45;
      }
      v47 = v46 == v45 ? 0 : v46;
      if ((v48 = v6[4], v17 < (v6[5] - v48) >> 3)
        && (v49 = *(_QWORD *)(v48 + 8 * v17)) != 0
        && (v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            v52 = v6[7],
            v51 = v6[8],
            v50 < (v51 - v52) >> 3)
        && ((v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == (_DWORD)v16) : (v54 = 0), v54))
      {
        v55 = v6[11];
        v56 = v6[10] + 8 * v50;
      }
      else
      {
        v55 = v6[11];
        v56 = v55;
      }
      v57 = *(_QWORD *)(a2 + 24);
      if (!v57)
        break;
      if (v56 == v55)
        v58 = 0;
      else
        v58 = v56;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57 + 48))(v57, v27, v37, v47, v58);
      v60 = *(unint64_t **)(v11 + 32);
      v14 = v9 + 1;
      v96 = v9 + 1;
      if (v9 + 1 != v60)
      {
        v61 = v12[4];
        while (1)
        {
          v62 = *((unsigned int *)v14 + 1);
          v63 = v62 >> 7;
          if (v62 >> 7 < (v12[5] - v61) >> 3)
          {
            v64 = *(_QWORD *)(v61 + 8 * v63);
            if (v64)
            {
              v65 = v62 & 0x7F;
              v66 = *(unsigned __int16 *)(v64 + 2 * v65);
              v68 = v12[7];
              v67 = v12[8];
              result = v67 - v68;
              if (v66 < (v67 - v68) >> 3)
              {
                v69 = v68 + 8 * v66;
                if (v69 != v67 && *(_DWORD *)(v69 + 4) == (_DWORD)v62)
                {
                  v71 = v13[4];
                  if (v63 < (v13[5] - v71) >> 3)
                  {
                    v72 = *(_QWORD *)(v71 + 8 * v63);
                    if (v72)
                    {
                      v73 = *(unsigned __int16 *)(v72 + 2 * v65);
                      v75 = v13[7];
                      v74 = v13[8];
                      result = v74 - v75;
                      if (v73 < (v74 - v75) >> 3)
                      {
                        v76 = v75 + 8 * v73;
                        if (v76 != v74 && *(_DWORD *)(v76 + 4) == (_DWORD)v62)
                        {
                          v78 = v93[4];
                          if (v63 < (v93[5] - v78) >> 3)
                          {
                            v79 = *(_QWORD *)(v78 + 8 * v63);
                            if (v79)
                            {
                              v80 = *(unsigned __int16 *)(v79 + 2 * v65);
                              v82 = v93[7];
                              v81 = v93[8];
                              result = v81 - v82;
                              if (v80 < (v81 - v82) >> 3)
                              {
                                v83 = v82 + 8 * v80;
                                if (v83 != v81 && *(_DWORD *)(v83 + 4) == (_DWORD)v62)
                                {
                                  v85 = v92[4];
                                  if (v63 < (v92[5] - v85) >> 3)
                                  {
                                    v86 = *(_QWORD *)(v85 + 8 * v63);
                                    if (v86)
                                    {
                                      v87 = *(unsigned __int16 *)(v86 + 2 * v65);
                                      v89 = v92[7];
                                      v88 = v92[8];
                                      if (v87 < (v88 - v89) >> 3)
                                      {
                                        v90 = v89 + 8 * v87;
                                        if (*(_DWORD *)(v90 + 4) == (_DWORD)v62 && v90 != v88)
                                          break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v60)
          {
            v14 = v60;
            goto LABEL_10;
          }
        }
        v60 = v14;
LABEL_10:
        v96 = v14;
      }
      v9 = v60;
      if (v8 == v60)
        goto LABEL_97;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &>>::empty();
  }
  return result;
}

