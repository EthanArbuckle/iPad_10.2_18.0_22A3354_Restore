void ggl::starsShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::starsShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<18ul>("StarsShaderVertex");
      *(_DWORD *)algn_1ECE3C8D4 = 0;
      qword_1ECE3C8D8 = (uint64_t)"StarsShader";
      unk_1ECE3C8E0 = ggl::starsShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3C8E8 = 1;
      unk_1ECE3C8F0 = &ggl::starsShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3C8F8 = 1;
      unk_1ECE3C900 = &ggl::starsShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3C908 = 0;
      unk_1ECE3C910 = &ggl::starsShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3C918 = 0;
      unk_1ECE3C920 = &ggl::starsShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3C930 = 0;
      unk_1ECE3C938 = 0;
      qword_1ECE3C928 = 0;
    }
  }
}

void ggl::FlyoverRoadFillTexturedShader::typedReflection(ggl::FlyoverRoadFillTexturedShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::FlyoverRoadFillTexturedShader::typedReflection(void)::ref = (uint64_t)"FlyoverRoadFillTexturedShader";
      ggl::flyoverRoadFillTexturedShaderVertexFunctionDescriptor(v2);
      qword_1ECE3B760 = (uint64_t)&ggl::flyoverRoadFillTexturedShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<36ul>("FlyoverRoadFillTexturedShaderVertex");
      dword_1ECE3B768 = (int)v3;
      ggl::flyoverRoadFillTexturedShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3B770 = (uint64_t)&ggl::flyoverRoadFillTexturedShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B778 = ggl::crc32::compute<38ul>("FlyoverRoadFillTexturedShaderFragment");
      qword_1ECE3B780 = (uint64_t)ggl::flyoverRoadFillTexturedShaderShaderConstants(void)::ref;
      unk_1ECE3B788 = 4;
      qword_1ECE3B790 = (uint64_t)ggl::flyoverRoadFillTexturedShaderShaderTextures(void)::ref;
      unk_1ECE3B798 = 1;
      qword_1ECE3B7A0 = (uint64_t)&ggl::flyoverRoadFillTexturedShaderShaderSamplers(void)::ref;
      unk_1ECE3B7A8 = 1;
    }
  }
}

void ggl::flyoverRoadFillTexturedShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverRoadFillTexturedShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("FlyoverRoadFillTexturedShaderFragment");
      *(_DWORD *)algn_1ECE42924 = 1;
      qword_1ECE42928 = (uint64_t)"FlyoverRoadFillTexturedShader";
      unk_1ECE42930 = 0;
      qword_1ECE42938 = 0;
      unk_1ECE42940 = &ggl::flyoverRoadFillTexturedShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE42948 = 2;
      unk_1ECE42950 = &ggl::flyoverRoadFillTexturedShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE42958 = 0;
      unk_1ECE42960 = &ggl::flyoverRoadFillTexturedShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE42968 = 1;
      unk_1ECE42970 = &ggl::flyoverRoadFillTexturedShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE42980 = 0;
      unk_1ECE42988 = 0;
      qword_1ECE42978 = 1;
    }
  }
}

void ggl::flyoverRoadFillTexturedShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverRoadFillTexturedShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("FlyoverRoadFillTexturedShaderVertex");
      *(_DWORD *)algn_1ECE4200C = 0;
      qword_1ECE42010 = (uint64_t)"FlyoverRoadFillTexturedShader";
      unk_1ECE42018 = ggl::flyoverRoadFillTexturedShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE42020 = 1;
      unk_1ECE42028 = &ggl::flyoverRoadFillTexturedShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE42030 = 4;
      unk_1ECE42038 = &ggl::flyoverRoadFillTexturedShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE42040 = 0;
      unk_1ECE42048 = &ggl::flyoverRoadFillTexturedShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE42050 = 0;
      unk_1ECE42058 = &ggl::flyoverRoadFillTexturedShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE42068 = 0;
      unk_1ECE42070 = 0;
      qword_1ECE42060 = 0;
    }
  }
}

void ggl::EndOfWorldShader::typedReflection(ggl::EndOfWorldShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::EndOfWorldShader::typedReflection(void)::ref = (uint64_t)"EndOfWorldShader";
      ggl::endOfWorldShaderVertexFunctionDescriptor(v2);
      qword_1ECE39568 = (uint64_t)&ggl::endOfWorldShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<23ul>("EndOfWorldShaderVertex");
      dword_1ECE39570 = (int)v3;
      ggl::endOfWorldShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39578 = (uint64_t)&ggl::endOfWorldShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39580 = ggl::crc32::compute<25ul>("EndOfWorldShaderFragment");
      qword_1ECE39588 = (uint64_t)ggl::endOfWorldShaderShaderConstants(void)::ref;
      unk_1ECE39590 = 2;
      qword_1ECE39598 = (uint64_t)ggl::endOfWorldShaderShaderTextures(void)::ref;
      unk_1ECE395A0 = 1;
      qword_1ECE395A8 = (uint64_t)&ggl::endOfWorldShaderShaderSamplers(void)::ref;
      unk_1ECE395B0 = 1;
    }
  }
}

void ggl::endOfWorldShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::endOfWorldShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("EndOfWorldShaderFragment");
      *(_DWORD *)algn_1ECE3DD6C = 1;
      qword_1ECE3DD70 = (uint64_t)"EndOfWorldShader";
      unk_1ECE3DD78 = 0;
      qword_1ECE3DD80 = 0;
      unk_1ECE3DD88 = &ggl::endOfWorldShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3DD90 = 1;
      unk_1ECE3DD98 = &ggl::endOfWorldShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3DDA0 = 0;
      unk_1ECE3DDA8 = &ggl::endOfWorldShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3DDB0 = 1;
      unk_1ECE3DDB8 = &ggl::endOfWorldShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3DDC8 = 0;
      unk_1ECE3DDD0 = 0;
      qword_1ECE3DDC0 = 1;
    }
  }
}

void ggl::endOfWorldShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::endOfWorldShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<23ul>("EndOfWorldShaderVertex");
      *(_DWORD *)algn_1ECE3D5D4 = 0;
      qword_1ECE3D5D8 = (uint64_t)"EndOfWorldShader";
      unk_1ECE3D5E0 = ggl::endOfWorldShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3D5E8 = 1;
      unk_1ECE3D5F0 = &ggl::endOfWorldShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3D5F8 = 2;
      unk_1ECE3D600 = &ggl::endOfWorldShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3D608 = 0;
      unk_1ECE3D610 = &ggl::endOfWorldShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3D618 = 0;
      unk_1ECE3D620 = &ggl::endOfWorldShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3D630 = 0;
      unk_1ECE3D638 = 0;
      qword_1ECE3D628 = 0;
    }
  }
}

void ggl::BuildingFacadeDepthShader::typedReflection(ggl::BuildingFacadeDepthShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::BuildingFacadeDepthShader::typedReflection(void)::ref = (uint64_t)"BuildingFacadeDepthShader";
      ggl::buildingFacadeDepthShaderVertexFunctionDescriptor(v2);
      qword_1ECE3AF70 = (uint64_t)&ggl::buildingFacadeDepthShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<32ul>("BuildingFacadeDepthShaderVertex");
      dword_1ECE3AF78 = (int)v3;
      ggl::buildingFacadeDepthShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3AF80 = (uint64_t)&ggl::buildingFacadeDepthShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3AF88 = ggl::crc32::compute<34ul>("BuildingFacadeDepthShaderFragment");
      qword_1ECE3AF90 = (uint64_t)ggl::buildingFacadeDepthShaderShaderConstants(void)::ref;
      unk_1ECE3AF98 = 2;
      qword_1ECE3AFA0 = (uint64_t)&ggl::buildingFacadeDepthShaderShaderTextures(void)::ref;
      unk_1ECE3AFA8 = 0;
      qword_1ECE3AFB0 = (uint64_t)&ggl::buildingFacadeDepthShaderShaderSamplers(void)::ref;
      unk_1ECE3AFB8 = 0;
    }
  }
}

void ggl::SDFGlyphSuperSampleShader::typedReflection(ggl::SDFGlyphSuperSampleShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::SDFGlyphSuperSampleShader::typedReflection(void)::ref = (uint64_t)"SDFGlyphSuperSampleShader";
      ggl::sDFGlyphSuperSampleShaderVertexFunctionDescriptor(v2);
      qword_1ECE3B190 = (uint64_t)&ggl::sDFGlyphSuperSampleShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<32ul>("SDFGlyphSuperSampleShaderVertex");
      dword_1ECE3B198 = (int)v3;
      ggl::sDFGlyphSuperSampleShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3B1A0 = (uint64_t)&ggl::sDFGlyphSuperSampleShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B1A8 = ggl::crc32::compute<34ul>("SDFGlyphSuperSampleShaderFragment");
      qword_1ECE3B1B0 = (uint64_t)ggl::sDFGlyphSuperSampleShaderShaderConstants(void)::ref;
      unk_1ECE3B1B8 = 6;
      qword_1ECE3B1C0 = (uint64_t)ggl::sDFGlyphSuperSampleShaderShaderTextures(void)::ref;
      unk_1ECE3B1C8 = 3;
      qword_1ECE3B1D0 = (uint64_t)ggl::sDFGlyphSuperSampleShaderShaderSamplers(void)::ref;
      unk_1ECE3B1D8 = 3;
    }
  }
}

void ggl::GlyphWithNormalHaloShader::typedReflection(ggl::GlyphWithNormalHaloShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::GlyphWithNormalHaloShader::typedReflection(void)::ref = (uint64_t)"GlyphWithNormalHaloShader";
      ggl::glyphWithNormalHaloShaderVertexFunctionDescriptor(v2);
      qword_1ECE3B080 = (uint64_t)&ggl::glyphWithNormalHaloShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<32ul>("GlyphWithNormalHaloShaderVertex");
      dword_1ECE3B088 = (int)v3;
      ggl::glyphWithNormalHaloShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3B090 = (uint64_t)&ggl::glyphWithNormalHaloShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B098 = ggl::crc32::compute<34ul>("GlyphWithNormalHaloShaderFragment");
      qword_1ECE3B0A0 = (uint64_t)ggl::glyphWithNormalHaloShaderShaderConstants(void)::ref;
      unk_1ECE3B0A8 = 4;
      qword_1ECE3B0B0 = (uint64_t)ggl::glyphWithNormalHaloShaderShaderTextures(void)::ref;
      unk_1ECE3B0B8 = 2;
      qword_1ECE3B0C0 = (uint64_t)ggl::glyphWithNormalHaloShaderShaderSamplers(void)::ref;
      unk_1ECE3B0C8 = 2;
    }
  }
}

void ggl::PolygonSolidFillShader::typedReflection(ggl::PolygonSolidFillShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::PolygonSolidFillShader::typedReflection(void)::ref = (uint64_t)"PolygonSolidFillShader";
      ggl::polygonSolidFillShaderVertexFunctionDescriptor(v2);
      qword_1ECE3A790 = (uint64_t)&ggl::polygonSolidFillShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<29ul>("PolygonSolidFillShaderVertex");
      dword_1ECE3A798 = (int)v3;
      ggl::polygonSolidFillShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3A7A0 = (uint64_t)&ggl::polygonSolidFillShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3A7A8 = ggl::crc32::compute<31ul>("PolygonSolidFillShaderFragment");
      qword_1ECE3A7B0 = (uint64_t)ggl::polygonSolidFillShaderShaderConstants(void)::ref;
      unk_1ECE3A7B8 = 3;
      qword_1ECE3A7C0 = (uint64_t)&ggl::polygonSolidFillShaderShaderTextures(void)::ref;
      unk_1ECE3A7C8 = 0;
      qword_1ECE3A7D0 = (uint64_t)&ggl::polygonSolidFillShaderShaderSamplers(void)::ref;
      unk_1ECE3A7D8 = 0;
    }
  }
}

void ggl::PolygonFillShader::typedReflection(ggl::PolygonFillShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::PolygonFillShader::typedReflection(void)::ref = (uint64_t)"PolygonFillShader";
      ggl::polygonFillShaderVertexFunctionDescriptor(v2);
      qword_1ECE39818 = (uint64_t)&ggl::polygonFillShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<24ul>("PolygonFillShaderVertex");
      dword_1ECE39820 = (int)v3;
      ggl::polygonFillShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39828 = (uint64_t)&ggl::polygonFillShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39830 = ggl::crc32::compute<26ul>("PolygonFillShaderFragment");
      qword_1ECE39838 = (uint64_t)ggl::polygonFillShaderShaderConstants(void)::ref;
      unk_1ECE39840 = 3;
      qword_1ECE39848 = (uint64_t)ggl::polygonFillShaderShaderTextures(void)::ref;
      unk_1ECE39850 = 1;
      qword_1ECE39858 = (uint64_t)&ggl::polygonFillShaderShaderSamplers(void)::ref;
      unk_1ECE39860 = 1;
    }
  }
}

void ggl::polygonSolidFillShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::polygonSolidFillShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("PolygonSolidFillShaderFragment");
      *(_DWORD *)algn_1ECE40824 = 1;
      qword_1ECE40828 = (uint64_t)"PolygonSolidFillShader";
      unk_1ECE40830 = 0;
      qword_1ECE40838 = 0;
      unk_1ECE40840 = &ggl::polygonSolidFillShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE40848 = 1;
      unk_1ECE40850 = &ggl::polygonSolidFillShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE40858 = 0;
      unk_1ECE40860 = &ggl::polygonSolidFillShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE40868 = 0;
      unk_1ECE40870 = &ggl::polygonSolidFillShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE40880 = 0;
      unk_1ECE40888 = 0;
      qword_1ECE40878 = 0;
    }
  }
}

void ggl::polygonSolidFillShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::polygonSolidFillShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("PolygonSolidFillShaderVertex");
      *(_DWORD *)algn_1ECE3F9EC = 0;
      qword_1ECE3F9F0 = (uint64_t)"PolygonSolidFillShader";
      unk_1ECE3F9F8 = ggl::polygonSolidFillShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3FA00 = 1;
      unk_1ECE3FA08 = &ggl::polygonSolidFillShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3FA10 = 3;
      unk_1ECE3FA18 = &ggl::polygonSolidFillShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3FA20 = 0;
      unk_1ECE3FA28 = &ggl::polygonSolidFillShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3FA30 = 0;
      unk_1ECE3FA38 = &ggl::polygonSolidFillShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3FA48 = 0;
      unk_1ECE3FA50 = 0;
      qword_1ECE3FA40 = 0;
    }
  }
}

void ggl::polygonFillShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::polygonFillShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("PolygonFillShaderFragment");
      *(_DWORD *)algn_1ECE3E50C = 1;
      qword_1ECE3E510 = (uint64_t)"PolygonFillShader";
      unk_1ECE3E518 = 0;
      qword_1ECE3E520 = 0;
      unk_1ECE3E528 = &ggl::polygonFillShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3E530 = 1;
      unk_1ECE3E538 = &ggl::polygonFillShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3E540 = 0;
      unk_1ECE3E548 = &ggl::polygonFillShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3E550 = 1;
      unk_1ECE3E558 = &ggl::polygonFillShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3E568 = 0;
      unk_1ECE3E570 = 0;
      qword_1ECE3E560 = 1;
    }
  }
}

void ggl::polygonFillShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::polygonFillShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("PolygonFillShaderVertex");
      *(_DWORD *)algn_1ECE3D9D4 = 0;
      qword_1ECE3D9D8 = (uint64_t)"PolygonFillShader";
      unk_1ECE3D9E0 = ggl::polygonFillShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3D9E8 = 1;
      unk_1ECE3D9F0 = &ggl::polygonFillShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3D9F8 = 3;
      unk_1ECE3DA00 = &ggl::polygonFillShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3DA08 = 0;
      unk_1ECE3DA10 = &ggl::polygonFillShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3DA18 = 0;
      unk_1ECE3DA20 = &ggl::polygonFillShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3DA30 = 0;
      unk_1ECE3DA38 = 0;
      qword_1ECE3DA28 = 0;
    }
  }
}

void ggl::StandardPostchainFGBlurShader::typedReflection(ggl::StandardPostchainFGBlurShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::StandardPostchainFGBlurShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainFGBlurShader";
      ggl::standardPostchainFGBlurShaderVertexFunctionDescriptor(v2);
      qword_1ECE346E8 = (uint64_t)&ggl::standardPostchainFGBlurShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<36ul>("StandardPostchainFGBlurShaderVertex");
      dword_1ECE346F0 = (int)v3;
      ggl::standardPostchainFGBlurShaderFragmentFunctionDescriptor(v3);
      qword_1ECE346F8 = (uint64_t)&ggl::standardPostchainFGBlurShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE34700 = ggl::crc32::compute<38ul>("StandardPostchainFGBlurShaderFragment");
      qword_1ECE34708 = (uint64_t)ggl::standardPostchainFGBlurShaderShaderConstants(void)::ref;
      unk_1ECE34710 = 1;
      qword_1ECE34718 = (uint64_t)ggl::standardPostchainFGBlurShaderShaderTextures(void)::ref;
      unk_1ECE34720 = 2;
      qword_1ECE34728 = (uint64_t)ggl::standardPostchainFGBlurShaderShaderSamplers(void)::ref;
      unk_1ECE34730 = 2;
    }
  }
}

void ggl::StandardPostchainBGBlurShader::typedReflection(ggl::StandardPostchainBGBlurShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::StandardPostchainBGBlurShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainBGBlurShader";
      ggl::standardPostchainBGBlurShaderVertexFunctionDescriptor(v2);
      qword_1ECE34688 = (uint64_t)&ggl::standardPostchainBGBlurShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<36ul>("StandardPostchainBGBlurShaderVertex");
      dword_1ECE34690 = (int)v3;
      ggl::standardPostchainBGBlurShaderFragmentFunctionDescriptor(v3);
      qword_1ECE34698 = (uint64_t)&ggl::standardPostchainBGBlurShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE346A0 = ggl::crc32::compute<38ul>("StandardPostchainBGBlurShaderFragment");
      qword_1ECE346A8 = (uint64_t)ggl::standardPostchainBGBlurShaderShaderConstants(void)::ref;
      unk_1ECE346B0 = 1;
      qword_1ECE346B8 = (uint64_t)ggl::standardPostchainBGBlurShaderShaderTextures(void)::ref;
      unk_1ECE346C0 = 1;
      qword_1ECE346C8 = (uint64_t)ggl::standardPostchainBGBlurShaderShaderSamplers(void)::ref;
      unk_1ECE346D0 = 1;
    }
  }
}

void ggl::PolygonOverlayAntialiasShader::typedReflection(ggl::PolygonOverlayAntialiasShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::PolygonOverlayAntialiasShader::typedReflection(void)::ref = (uint64_t)"PolygonOverlayAntialiasShader";
      ggl::polygonOverlayAntialiasShaderVertexFunctionDescriptor(v2);
      qword_1ECE3B8D8 = (uint64_t)&ggl::polygonOverlayAntialiasShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<36ul>("PolygonOverlayAntialiasShaderVertex");
      dword_1ECE3B8E0 = (int)v3;
      ggl::polygonOverlayAntialiasShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3B8E8 = (uint64_t)&ggl::polygonOverlayAntialiasShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B8F0 = ggl::crc32::compute<38ul>("PolygonOverlayAntialiasShaderFragment");
      qword_1ECE3B8F8 = (uint64_t)ggl::polygonOverlayAntialiasShaderShaderConstants(void)::ref;
      unk_1ECE3B900 = 4;
      qword_1ECE3B908 = (uint64_t)ggl::polygonOverlayAntialiasShaderShaderTextures(void)::ref;
      unk_1ECE3B910 = 1;
      qword_1ECE3B918 = (uint64_t)&ggl::polygonOverlayAntialiasShaderShaderSamplers(void)::ref;
      unk_1ECE3B920 = 1;
    }
  }
}

void ggl::PolygonAnimatableStrokeShader::typedReflection(ggl::PolygonAnimatableStrokeShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::PolygonAnimatableStrokeShader::typedReflection(void)::ref = (uint64_t)"PolygonAnimatableStrokeShader";
      ggl::polygonAnimatableStrokeShaderVertexFunctionDescriptor(v2);
      qword_1ECE3B880 = (uint64_t)&ggl::polygonAnimatableStrokeShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<36ul>("PolygonAnimatableStrokeShaderVertex");
      dword_1ECE3B888 = (int)v3;
      ggl::polygonAnimatableStrokeShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3B890 = (uint64_t)&ggl::polygonAnimatableStrokeShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B898 = ggl::crc32::compute<38ul>("PolygonAnimatableStrokeShaderFragment");
      qword_1ECE3B8A0 = (uint64_t)ggl::polygonAnimatableStrokeShaderShaderConstants(void)::ref;
      unk_1ECE3B8A8 = 5;
      qword_1ECE3B8B0 = (uint64_t)ggl::polygonAnimatableStrokeShaderShaderTextures(void)::ref;
      unk_1ECE3B8B8 = 3;
      qword_1ECE3B8C0 = (uint64_t)ggl::polygonAnimatableStrokeShaderShaderSamplers(void)::ref;
      unk_1ECE3B8C8 = 3;
    }
  }
}

void ggl::polygonAnimatableStrokeShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::polygonAnimatableStrokeShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("PolygonAnimatableStrokeShaderFragment");
      *(_DWORD *)algn_1ECE42B64 = 1;
      qword_1ECE42B68 = (uint64_t)"PolygonAnimatableStrokeShader";
      unk_1ECE42B70 = 0;
      qword_1ECE42B78 = 0;
      unk_1ECE42B80 = &ggl::polygonAnimatableStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE42B88 = 3;
      unk_1ECE42B90 = &ggl::polygonAnimatableStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE42B98 = 0;
      unk_1ECE42BA0 = &ggl::polygonAnimatableStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE42BA8 = 3;
      unk_1ECE42BB0 = &ggl::polygonAnimatableStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE42BC0 = 0;
      unk_1ECE42BC8 = 0;
      qword_1ECE42BB8 = 3;
    }
  }
}

void ggl::polygonAnimatableStrokeShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::polygonAnimatableStrokeShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("PolygonAnimatableStrokeShaderVertex");
      *(_DWORD *)algn_1ECE422BC = 0;
      qword_1ECE422C0 = (uint64_t)"PolygonAnimatableStrokeShader";
      unk_1ECE422C8 = ggl::polygonAnimatableStrokeShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE422D0 = 1;
      unk_1ECE422D8 = &ggl::polygonAnimatableStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE422E0 = 3;
      unk_1ECE422E8 = &ggl::polygonAnimatableStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE422F0 = 0;
      unk_1ECE422F8 = &ggl::polygonAnimatableStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE42300 = 0;
      unk_1ECE42308 = &ggl::polygonAnimatableStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE42318 = 0;
      unk_1ECE42320 = 0;
      qword_1ECE42310 = 0;
    }
  }
}

void ggl::HorizontalVenue3DStrokeShader::typedReflection(ggl::HorizontalVenue3DStrokeShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::HorizontalVenue3DStrokeShader::typedReflection(void)::ref = (uint64_t)"HorizontalVenue3DStrokeShader";
      ggl::horizontalVenue3DStrokeShaderVertexFunctionDescriptor(v2);
      qword_1ECE3B820 = (uint64_t)&ggl::horizontalVenue3DStrokeShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<36ul>("HorizontalVenue3DStrokeShaderVertex");
      dword_1ECE3B828 = (int)v3;
      ggl::horizontalVenue3DStrokeShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3B830 = (uint64_t)&ggl::horizontalVenue3DStrokeShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B838 = ggl::crc32::compute<38ul>("HorizontalVenue3DStrokeShaderFragment");
      qword_1ECE3B840 = (uint64_t)ggl::horizontalVenue3DStrokeShaderShaderConstants(void)::ref;
      unk_1ECE3B848 = 2;
      qword_1ECE3B850 = (uint64_t)ggl::horizontalVenue3DStrokeShaderShaderTextures(void)::ref;
      unk_1ECE3B858 = 1;
      qword_1ECE3B860 = (uint64_t)ggl::horizontalVenue3DStrokeShaderShaderSamplers(void)::ref;
      unk_1ECE3B868 = 1;
    }
  }
}

void ggl::Glyph3dLowPrecisionHaloShader::typedReflection(ggl::Glyph3dLowPrecisionHaloShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::Glyph3dLowPrecisionHaloShader::typedReflection(void)::ref = (uint64_t)"Glyph3dLowPrecisionHaloShader";
      ggl::glyph3dLowPrecisionHaloShaderVertexFunctionDescriptor(v2);
      qword_1ECE3B7C0 = (uint64_t)&ggl::glyph3dLowPrecisionHaloShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<36ul>("Glyph3dLowPrecisionHaloShaderVertex");
      dword_1ECE3B7C8 = (int)v3;
      ggl::glyph3dLowPrecisionHaloShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3B7D0 = (uint64_t)&ggl::glyph3dLowPrecisionHaloShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B7D8 = ggl::crc32::compute<38ul>("Glyph3dLowPrecisionHaloShaderFragment");
      qword_1ECE3B7E0 = (uint64_t)ggl::glyph3dLowPrecisionHaloShaderShaderConstants(void)::ref;
      unk_1ECE3B7E8 = 6;
      qword_1ECE3B7F0 = (uint64_t)ggl::glyph3dLowPrecisionHaloShaderShaderTextures(void)::ref;
      unk_1ECE3B7F8 = 3;
      qword_1ECE3B800 = (uint64_t)ggl::glyph3dLowPrecisionHaloShaderShaderSamplers(void)::ref;
      unk_1ECE3B808 = 3;
    }
  }
}

void ggl::BuildingPointyRoofDepthShader::typedReflection(ggl::BuildingPointyRoofDepthShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::BuildingPointyRoofDepthShader::typedReflection(void)::ref = (uint64_t)"BuildingPointyRoofDepthShader";
      ggl::buildingPointyRoofDepthShaderVertexFunctionDescriptor(v2);
      qword_1ECE3B708 = (uint64_t)&ggl::buildingPointyRoofDepthShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<36ul>("BuildingPointyRoofDepthShaderVertex");
      dword_1ECE3B710 = (int)v3;
      ggl::buildingPointyRoofDepthShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3B718 = (uint64_t)&ggl::buildingPointyRoofDepthShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B720 = ggl::crc32::compute<38ul>("BuildingPointyRoofDepthShaderFragment");
      qword_1ECE3B728 = (uint64_t)ggl::buildingPointyRoofDepthShaderShaderConstants(void)::ref;
      unk_1ECE3B730 = 2;
      qword_1ECE3B738 = (uint64_t)&ggl::buildingPointyRoofDepthShaderShaderTextures(void)::ref;
      unk_1ECE3B740 = 0;
      qword_1ECE3B748 = (uint64_t)&ggl::buildingPointyRoofDepthShaderShaderSamplers(void)::ref;
      unk_1ECE3B750 = 0;
    }
  }
}

void ggl::buildingPointyRoofDepthShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::buildingPointyRoofDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("BuildingPointyRoofDepthShaderFragment");
      *(_DWORD *)algn_1ECE427BC = 1;
      qword_1ECE427C0 = (uint64_t)"BuildingPointyRoofDepthShader";
      unk_1ECE427C8 = 0;
      qword_1ECE427D0 = 0;
      unk_1ECE427D8 = &ggl::buildingPointyRoofDepthShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE427E0 = 0;
      unk_1ECE427E8 = &ggl::buildingPointyRoofDepthShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE427F0 = 0;
      unk_1ECE427F8 = &ggl::buildingPointyRoofDepthShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE42800 = 0;
      unk_1ECE42808 = &ggl::buildingPointyRoofDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE42818 = 0;
      unk_1ECE42820 = 0;
      qword_1ECE42810 = 0;
    }
  }
}

void ggl::buildingPointyRoofDepthShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::buildingPointyRoofDepthShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("BuildingPointyRoofDepthShaderVertex");
      *(_DWORD *)algn_1ECE41F94 = 0;
      qword_1ECE41F98 = (uint64_t)"BuildingPointyRoofDepthShader";
      unk_1ECE41FA0 = ggl::buildingPointyRoofDepthShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE41FA8 = 1;
      unk_1ECE41FB0 = &ggl::buildingPointyRoofDepthShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41FB8 = 2;
      unk_1ECE41FC0 = &ggl::buildingPointyRoofDepthShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41FC8 = 0;
      unk_1ECE41FD0 = &ggl::buildingPointyRoofDepthShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41FD8 = 0;
      unk_1ECE41FE0 = &ggl::buildingPointyRoofDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41FF0 = 0;
      unk_1ECE41FF8 = 0;
      qword_1ECE41FE8 = 0;
    }
  }
}

void ggl::VenueOpenToBelowShadowShader::typedReflection(ggl::VenueOpenToBelowShadowShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::VenueOpenToBelowShadowShader::typedReflection(void)::ref = (uint64_t)"VenueOpenToBelowShadowShader";
      ggl::venueOpenToBelowShadowShaderVertexFunctionDescriptor(v2);
      qword_1ECE3B6B0 = (uint64_t)&ggl::venueOpenToBelowShadowShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<35ul>("VenueOpenToBelowShadowShaderVertex");
      dword_1ECE3B6B8 = (int)v3;
      ggl::venueOpenToBelowShadowShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3B6C0 = (uint64_t)&ggl::venueOpenToBelowShadowShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B6C8 = ggl::crc32::compute<37ul>("VenueOpenToBelowShadowShaderFragment");
      qword_1ECE3B6D0 = (uint64_t)ggl::venueOpenToBelowShadowShaderShaderConstants(void)::ref;
      unk_1ECE3B6D8 = 2;
      qword_1ECE3B6E0 = (uint64_t)&ggl::venueOpenToBelowShadowShaderShaderTextures(void)::ref;
      unk_1ECE3B6E8 = 0;
      qword_1ECE3B6F0 = (uint64_t)&ggl::venueOpenToBelowShadowShaderShaderSamplers(void)::ref;
      unk_1ECE3B6F8 = 0;
    }
  }
}

void ggl::venueOpenToBelowShadowShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::venueOpenToBelowShadowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<37ul>("VenueOpenToBelowShadowShaderFragment");
      *(_DWORD *)algn_1ECE42744 = 1;
      qword_1ECE42748 = (uint64_t)"VenueOpenToBelowShadowShader";
      unk_1ECE42750 = 0;
      qword_1ECE42758 = 0;
      unk_1ECE42760 = &ggl::venueOpenToBelowShadowShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE42768 = 1;
      unk_1ECE42770 = &ggl::venueOpenToBelowShadowShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE42778 = 0;
      unk_1ECE42780 = &ggl::venueOpenToBelowShadowShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE42788 = 0;
      unk_1ECE42790 = &ggl::venueOpenToBelowShadowShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE427A0 = 0;
      unk_1ECE427A8 = 0;
      qword_1ECE42798 = 0;
    }
  }
}

void ggl::venueOpenToBelowShadowShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::venueOpenToBelowShadowShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<35ul>("VenueOpenToBelowShadowShaderVertex");
      *(_DWORD *)algn_1ECE41F1C = 0;
      qword_1ECE41F20 = (uint64_t)"VenueOpenToBelowShadowShader";
      unk_1ECE41F28 = ggl::venueOpenToBelowShadowShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE41F30 = 1;
      unk_1ECE41F38 = &ggl::venueOpenToBelowShadowShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41F40 = 2;
      unk_1ECE41F48 = &ggl::venueOpenToBelowShadowShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41F50 = 0;
      unk_1ECE41F58 = &ggl::venueOpenToBelowShadowShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41F60 = 0;
      unk_1ECE41F68 = &ggl::venueOpenToBelowShadowShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41F78 = 0;
      unk_1ECE41F80 = 0;
      qword_1ECE41F70 = 0;
    }
  }
}

void ggl::TexturedAnimatedRibbonShader::typedReflection(ggl::TexturedAnimatedRibbonShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::TexturedAnimatedRibbonShader::typedReflection(void)::ref = (uint64_t)"TexturedAnimatedRibbonShader";
      ggl::texturedAnimatedRibbonShaderVertexFunctionDescriptor(v2);
      qword_1ECE32AB8 = (uint64_t)&ggl::texturedAnimatedRibbonShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<35ul>("TexturedAnimatedRibbonShaderVertex");
      dword_1ECE32AC0 = (int)v3;
      ggl::texturedAnimatedRibbonShaderFragmentFunctionDescriptor(v3);
      qword_1ECE32AC8 = (uint64_t)&ggl::texturedAnimatedRibbonShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE32AD0 = ggl::crc32::compute<37ul>("TexturedAnimatedRibbonShaderFragment");
      qword_1ECE32AD8 = (uint64_t)ggl::texturedAnimatedRibbonShaderShaderConstants(void)::ref;
      unk_1ECE32AE0 = 3;
      qword_1ECE32AE8 = (uint64_t)ggl::texturedAnimatedRibbonShaderShaderTextures(void)::ref;
      unk_1ECE32AF0 = 2;
      qword_1ECE32AF8 = (uint64_t)ggl::texturedAnimatedRibbonShaderShaderSamplers(void)::ref;
      unk_1ECE32B00 = 2;
    }
  }
}

void ggl::FoggedSpecularLandmarkShader::typedReflection(ggl::FoggedSpecularLandmarkShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::FoggedSpecularLandmarkShader::typedReflection(void)::ref = (uint64_t)"FoggedSpecularLandmarkShader";
      ggl::foggedSpecularLandmarkShaderVertexFunctionDescriptor(v2);
      qword_1ECE3B650 = (uint64_t)&ggl::foggedSpecularLandmarkShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<35ul>("FoggedSpecularLandmarkShaderVertex");
      dword_1ECE3B658 = (int)v3;
      ggl::foggedSpecularLandmarkShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3B660 = (uint64_t)&ggl::foggedSpecularLandmarkShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B668 = ggl::crc32::compute<37ul>("FoggedSpecularLandmarkShaderFragment");
      qword_1ECE3B670 = (uint64_t)ggl::foggedSpecularLandmarkShaderShaderConstants(void)::ref;
      unk_1ECE3B678 = 7;
      qword_1ECE3B680 = (uint64_t)ggl::foggedSpecularLandmarkShaderShaderTextures(void)::ref;
      unk_1ECE3B688 = 1;
      qword_1ECE3B690 = (uint64_t)&ggl::foggedSpecularLandmarkShaderShaderSamplers(void)::ref;
      unk_1ECE3B698 = 1;
    }
  }
}

void ggl::foggedSpecularLandmarkShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::foggedSpecularLandmarkShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<37ul>("FoggedSpecularLandmarkShaderFragment");
      *(_DWORD *)algn_1ECE42664 = 1;
      qword_1ECE42668 = (uint64_t)"FoggedSpecularLandmarkShader";
      unk_1ECE42670 = 0;
      qword_1ECE42678 = 0;
      unk_1ECE42680 = &ggl::foggedSpecularLandmarkShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE42688 = 4;
      unk_1ECE42690 = &ggl::foggedSpecularLandmarkShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE42698 = 0;
      unk_1ECE426A0 = &ggl::foggedSpecularLandmarkShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE426A8 = 1;
      unk_1ECE426B0 = &ggl::foggedSpecularLandmarkShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE426C0 = 0;
      unk_1ECE426C8 = 0;
      qword_1ECE426B8 = 1;
    }
  }
}

void ggl::foggedSpecularLandmarkShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::foggedSpecularLandmarkShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<35ul>("FoggedSpecularLandmarkShaderVertex");
      *(_DWORD *)algn_1ECE41DCC = 0;
      qword_1ECE41DD0 = (uint64_t)"FoggedSpecularLandmarkShader";
      unk_1ECE41DD8 = ggl::foggedSpecularLandmarkShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE41DE0 = 1;
      unk_1ECE41DE8 = &ggl::foggedSpecularLandmarkShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41DF0 = 6;
      unk_1ECE41DF8 = &ggl::foggedSpecularLandmarkShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41E00 = 0;
      unk_1ECE41E08 = &ggl::foggedSpecularLandmarkShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41E10 = 0;
      unk_1ECE41E18 = &ggl::foggedSpecularLandmarkShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41E28 = 0;
      unk_1ECE41E30 = 0;
      qword_1ECE41E20 = 0;
    }
  }
}

void ggl::FoggedSpecularBuildingShader::typedReflection(ggl::FoggedSpecularBuildingShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::FoggedSpecularBuildingShader::typedReflection(void)::ref = (uint64_t)"FoggedSpecularBuildingShader";
      ggl::foggedSpecularBuildingShaderVertexFunctionDescriptor(v2);
      qword_1ECE3B5F8 = (uint64_t)&ggl::foggedSpecularBuildingShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<35ul>("FoggedSpecularBuildingShaderVertex");
      dword_1ECE3B600 = (int)v3;
      ggl::foggedSpecularBuildingShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3B608 = (uint64_t)&ggl::foggedSpecularBuildingShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B610 = ggl::crc32::compute<37ul>("FoggedSpecularBuildingShaderFragment");
      qword_1ECE3B618 = (uint64_t)ggl::foggedSpecularBuildingShaderShaderConstants(void)::ref;
      unk_1ECE3B620 = 7;
      qword_1ECE3B628 = (uint64_t)ggl::foggedSpecularBuildingShaderShaderTextures(void)::ref;
      unk_1ECE3B630 = 1;
      qword_1ECE3B638 = (uint64_t)&ggl::foggedSpecularBuildingShaderShaderSamplers(void)::ref;
      unk_1ECE3B640 = 1;
    }
  }
}

void ggl::foggedSpecularBuildingShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::foggedSpecularBuildingShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<37ul>("FoggedSpecularBuildingShaderFragment");
      *(_DWORD *)algn_1ECE425EC = 1;
      qword_1ECE425F0 = (uint64_t)"FoggedSpecularBuildingShader";
      unk_1ECE425F8 = 0;
      qword_1ECE42600 = 0;
      unk_1ECE42608 = &ggl::foggedSpecularBuildingShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE42610 = 4;
      unk_1ECE42618 = &ggl::foggedSpecularBuildingShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE42620 = 0;
      unk_1ECE42628 = &ggl::foggedSpecularBuildingShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE42630 = 1;
      unk_1ECE42638 = &ggl::foggedSpecularBuildingShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE42648 = 0;
      unk_1ECE42650 = 0;
      qword_1ECE42640 = 1;
    }
  }
}

void ggl::foggedSpecularBuildingShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::foggedSpecularBuildingShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<35ul>("FoggedSpecularBuildingShaderVertex");
      *(_DWORD *)algn_1ECE41D54 = 0;
      qword_1ECE41D58 = (uint64_t)"FoggedSpecularBuildingShader";
      unk_1ECE41D60 = ggl::foggedSpecularBuildingShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE41D68 = 1;
      unk_1ECE41D70 = &ggl::foggedSpecularBuildingShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41D78 = 6;
      unk_1ECE41D80 = &ggl::foggedSpecularBuildingShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41D88 = 0;
      unk_1ECE41D90 = &ggl::foggedSpecularBuildingShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41D98 = 0;
      unk_1ECE41DA0 = &ggl::foggedSpecularBuildingShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41DB0 = 0;
      unk_1ECE41DB8 = 0;
      qword_1ECE41DA8 = 0;
    }
  }
}

void ggl::DaVinciGroundShadowMapShader::typedReflection(ggl::DaVinciGroundShadowMapShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::DaVinciGroundShadowMapShader::typedReflection(void)::ref = (uint64_t)"DaVinciGroundShadowMapShader";
      ggl::daVinciGroundShadowMapShaderVertexFunctionDescriptor(v2);
      qword_1ECE443F0 = (uint64_t)&ggl::daVinciGroundShadowMapShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<35ul>("DaVinciGroundShadowMapShaderVertex");
      dword_1ECE443F8 = (int)v3;
      ggl::daVinciGroundShadowMapShaderFragmentFunctionDescriptor(v3);
      qword_1ECE44400 = (uint64_t)&ggl::daVinciGroundShadowMapShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE44408 = ggl::crc32::compute<37ul>("DaVinciGroundShadowMapShaderFragment");
      qword_1ECE44410 = (uint64_t)ggl::daVinciGroundShadowMapShaderShaderConstants(void)::ref;
      unk_1ECE44418 = 6;
      qword_1ECE44420 = (uint64_t)&ggl::daVinciGroundShadowMapShaderShaderTextures(void)::ref;
      unk_1ECE44428 = 0;
      qword_1ECE44430 = (uint64_t)&ggl::daVinciGroundShadowMapShaderShaderSamplers(void)::ref;
      unk_1ECE44438 = 0;
    }
  }
}

void ggl::VerticalVenue3DStrokeShader::typedReflection(ggl::VerticalVenue3DStrokeShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::VerticalVenue3DStrokeShader::typedReflection(void)::ref = (uint64_t)"VerticalVenue3DStrokeShader";
      ggl::verticalVenue3DStrokeShaderVertexFunctionDescriptor(v2);
      qword_1ECE3B5A0 = (uint64_t)&ggl::verticalVenue3DStrokeShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<34ul>("VerticalVenue3DStrokeShaderVertex");
      dword_1ECE3B5A8 = (int)v3;
      ggl::verticalVenue3DStrokeShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3B5B0 = (uint64_t)&ggl::verticalVenue3DStrokeShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B5B8 = ggl::crc32::compute<36ul>("VerticalVenue3DStrokeShaderFragment");
      qword_1ECE3B5C0 = (uint64_t)ggl::verticalVenue3DStrokeShaderShaderConstants(void)::ref;
      unk_1ECE3B5C8 = 2;
      qword_1ECE3B5D0 = (uint64_t)ggl::verticalVenue3DStrokeShaderShaderTextures(void)::ref;
      unk_1ECE3B5D8 = 1;
      qword_1ECE3B5E0 = (uint64_t)&ggl::verticalVenue3DStrokeShaderShaderSamplers(void)::ref;
      unk_1ECE3B5E8 = 1;
    }
  }
}

void ggl::verticalVenue3DStrokeShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::verticalVenue3DStrokeShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("VerticalVenue3DStrokeShaderFragment");
      *(_DWORD *)algn_1ECE42484 = 1;
      qword_1ECE42488 = (uint64_t)"VerticalVenue3DStrokeShader";
      unk_1ECE42490 = 0;
      qword_1ECE42498 = 0;
      unk_1ECE424A0 = &ggl::verticalVenue3DStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE424A8 = 0;
      unk_1ECE424B0 = &ggl::verticalVenue3DStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE424B8 = 0;
      unk_1ECE424C0 = &ggl::verticalVenue3DStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE424C8 = 1;
      unk_1ECE424D0 = &ggl::verticalVenue3DStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE424E0 = 0;
      unk_1ECE424E8 = 0;
      qword_1ECE424D8 = 1;
    }
  }
}

void ggl::verticalVenue3DStrokeShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::verticalVenue3DStrokeShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("VerticalVenue3DStrokeShaderVertex");
      *(_DWORD *)algn_1ECE41CDC = 0;
      qword_1ECE41CE0 = (uint64_t)"VerticalVenue3DStrokeShader";
      unk_1ECE41CE8 = ggl::verticalVenue3DStrokeShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE41CF0 = 1;
      unk_1ECE41CF8 = &ggl::verticalVenue3DStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41D00 = 2;
      unk_1ECE41D08 = &ggl::verticalVenue3DStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41D10 = 0;
      unk_1ECE41D18 = &ggl::verticalVenue3DStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41D20 = 0;
      unk_1ECE41D28 = &ggl::verticalVenue3DStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41D38 = 0;
      unk_1ECE41D40 = 0;
      qword_1ECE41D30 = 0;
    }
  }
}

void ggl::StandardPostchainSSAOShader::typedReflection(ggl::StandardPostchainSSAOShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::StandardPostchainSSAOShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainSSAOShader";
      ggl::standardPostchainSSAOShaderVertexFunctionDescriptor(v2);
      qword_1ECE34568 = (uint64_t)&ggl::standardPostchainSSAOShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<34ul>("StandardPostchainSSAOShaderVertex");
      dword_1ECE34570 = (int)v3;
      ggl::standardPostchainSSAOShaderFragmentFunctionDescriptor(v3);
      qword_1ECE34578 = (uint64_t)&ggl::standardPostchainSSAOShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE34580 = ggl::crc32::compute<36ul>("StandardPostchainSSAOShaderFragment");
      qword_1ECE34588 = (uint64_t)ggl::standardPostchainSSAOShaderShaderConstants(void)::ref;
      unk_1ECE34590 = 1;
      qword_1ECE34598 = (uint64_t)ggl::standardPostchainSSAOShaderShaderTextures(void)::ref;
      unk_1ECE345A0 = 2;
      qword_1ECE345A8 = (uint64_t)ggl::standardPostchainSSAOShaderShaderSamplers(void)::ref;
      unk_1ECE345B0 = 2;
    }
  }
}

void ggl::standardPostchainSSAOShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::standardPostchainSSAOShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("StandardPostchainSSAOShaderFragment");
      *(_DWORD *)algn_1ECE351EC = 1;
      qword_1ECE35200 = 0;
      unk_1ECE35208 = &ggl::standardPostchainSSAOShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE351F0 = (uint64_t)"StandardPostchainSSAOShader";
      unk_1ECE351F8 = 0;
      qword_1ECE35210 = 1;
      unk_1ECE35218 = &ggl::standardPostchainSSAOShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE35220 = 0;
      unk_1ECE35228 = &ggl::standardPostchainSSAOShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE35230 = 2;
      unk_1ECE35238 = &ggl::standardPostchainSSAOShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE35248 = 0;
      unk_1ECE35250 = 0;
      qword_1ECE35240 = 2;
    }
  }
}

void ggl::standardPostchainSSAOShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::standardPostchainSSAOShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("StandardPostchainSSAOShaderVertex");
      *(_DWORD *)algn_1ECE34FB4 = 0;
      qword_1ECE34FB8 = (uint64_t)"StandardPostchainSSAOShader";
      unk_1ECE34FC0 = ggl::standardPostchainSSAOShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE34FC8 = 1;
      unk_1ECE34FD0 = &ggl::standardPostchainSSAOShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE34FD8 = 0;
      unk_1ECE34FE0 = &ggl::standardPostchainSSAOShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE34FE8 = 0;
      unk_1ECE34FF0 = &ggl::standardPostchainSSAOShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE34FF8 = 0;
      unk_1ECE35000 = &ggl::standardPostchainSSAOShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE35010 = 0;
      unk_1ECE35018 = 0;
      qword_1ECE35008 = 0;
    }
  }
}

void ggl::PolygonShadowedStrokeShader::typedReflection(ggl::PolygonShadowedStrokeShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::PolygonShadowedStrokeShader::typedReflection(void)::ref = (uint64_t)"PolygonShadowedStrokeShader";
      ggl::polygonShadowedStrokeShaderVertexFunctionDescriptor(v2);
      qword_1ECE3B540 = (uint64_t)&ggl::polygonShadowedStrokeShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<34ul>("PolygonShadowedStrokeShaderVertex");
      dword_1ECE3B548 = (int)v3;
      ggl::polygonShadowedStrokeShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3B550 = (uint64_t)&ggl::polygonShadowedStrokeShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B558 = ggl::crc32::compute<36ul>("PolygonShadowedStrokeShaderFragment");
      qword_1ECE3B560 = (uint64_t)ggl::polygonShadowedStrokeShaderShaderConstants(void)::ref;
      unk_1ECE3B568 = 3;
      qword_1ECE3B570 = (uint64_t)&ggl::polygonShadowedStrokeShaderShaderTextures(void)::ref;
      unk_1ECE3B578 = 0;
      qword_1ECE3B580 = (uint64_t)&ggl::polygonShadowedStrokeShaderShaderSamplers(void)::ref;
      unk_1ECE3B588 = 0;
    }
  }
}

void ggl::polygonShadowedStrokeShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::polygonShadowedStrokeShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("PolygonShadowedStrokeShaderFragment");
      *(_DWORD *)algn_1ECE423A4 = 1;
      qword_1ECE423A8 = (uint64_t)"PolygonShadowedStrokeShader";
      unk_1ECE423B0 = 0;
      qword_1ECE423B8 = 0;
      unk_1ECE423C0 = &ggl::polygonShadowedStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE423C8 = 1;
      unk_1ECE423D0 = &ggl::polygonShadowedStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE423D8 = 0;
      unk_1ECE423E0 = &ggl::polygonShadowedStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE423E8 = 0;
      unk_1ECE423F0 = &ggl::polygonShadowedStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE42400 = 0;
      unk_1ECE42408 = 0;
      qword_1ECE423F8 = 0;
    }
  }
}

void ggl::polygonShadowedStrokeShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::polygonShadowedStrokeShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("PolygonShadowedStrokeShaderVertex");
      *(_DWORD *)algn_1ECE419BC = 0;
      qword_1ECE419C0 = (uint64_t)"PolygonShadowedStrokeShader";
      unk_1ECE419C8 = ggl::polygonShadowedStrokeShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE419D0 = 1;
      unk_1ECE419D8 = &ggl::polygonShadowedStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE419E0 = 3;
      unk_1ECE419E8 = &ggl::polygonShadowedStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE419F0 = 0;
      unk_1ECE419F8 = &ggl::polygonShadowedStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41A00 = 0;
      unk_1ECE41A08 = &ggl::polygonShadowedStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41A18 = 0;
      unk_1ECE41A20 = 0;
      qword_1ECE41A10 = 0;
    }
  }
}

void ggl::PolygonAnimatableFillShader::typedReflection(ggl::PolygonAnimatableFillShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::PolygonAnimatableFillShader::typedReflection(void)::ref = (uint64_t)"PolygonAnimatableFillShader";
      ggl::polygonAnimatableFillShaderVertexFunctionDescriptor(v2);
      qword_1ECE3B4E8 = (uint64_t)&ggl::polygonAnimatableFillShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<34ul>("PolygonAnimatableFillShaderVertex");
      dword_1ECE3B4F0 = (int)v3;
      ggl::polygonAnimatableFillShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3B4F8 = (uint64_t)&ggl::polygonAnimatableFillShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B500 = ggl::crc32::compute<36ul>("PolygonAnimatableFillShaderFragment");
      qword_1ECE3B508 = (uint64_t)ggl::polygonAnimatableFillShaderShaderConstants(void)::ref;
      unk_1ECE3B510 = 4;
      qword_1ECE3B518 = (uint64_t)ggl::polygonAnimatableFillShaderShaderTextures(void)::ref;
      unk_1ECE3B520 = 2;
      qword_1ECE3B528 = (uint64_t)ggl::polygonAnimatableFillShaderShaderSamplers(void)::ref;
      unk_1ECE3B530 = 2;
    }
  }
}

void ggl::polygonAnimatableFillShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::polygonAnimatableFillShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("PolygonAnimatableFillShaderFragment");
      *(_DWORD *)algn_1ECE4224C = 1;
      qword_1ECE42250 = (uint64_t)"PolygonAnimatableFillShader";
      unk_1ECE42258 = 0;
      qword_1ECE42260 = 0;
      unk_1ECE42268 = &ggl::polygonAnimatableFillShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE42270 = 2;
      unk_1ECE42278 = &ggl::polygonAnimatableFillShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE42280 = 0;
      unk_1ECE42288 = &ggl::polygonAnimatableFillShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE42290 = 2;
      unk_1ECE42298 = &ggl::polygonAnimatableFillShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE422A8 = 0;
      unk_1ECE422B0 = 0;
      qword_1ECE422A0 = 2;
    }
  }
}

void ggl::polygonAnimatableFillShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::polygonAnimatableFillShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("PolygonAnimatableFillShaderVertex");
      *(_DWORD *)algn_1ECE41944 = 0;
      qword_1ECE41948 = (uint64_t)"PolygonAnimatableFillShader";
      unk_1ECE41950 = ggl::polygonAnimatableFillShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE41958 = 1;
      unk_1ECE41960 = &ggl::polygonAnimatableFillShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41968 = 3;
      unk_1ECE41970 = &ggl::polygonAnimatableFillShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41978 = 0;
      unk_1ECE41980 = &ggl::polygonAnimatableFillShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41988 = 0;
      unk_1ECE41990 = &ggl::polygonAnimatableFillShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE419A0 = 0;
      unk_1ECE419A8 = 0;
      qword_1ECE41998 = 0;
    }
  }
}

void ggl::MaskingOverlayMaskingShader::typedReflection(ggl::MaskingOverlayMaskingShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::MaskingOverlayMaskingShader::typedReflection(void)::ref = (uint64_t)"MaskingOverlayMaskingShader";
      ggl::maskingOverlayMaskingShaderVertexFunctionDescriptor(v2);
      qword_1ECE30328 = (uint64_t)&ggl::maskingOverlayMaskingShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<34ul>("MaskingOverlayMaskingShaderVertex");
      dword_1ECE30330 = (int)v3;
      ggl::maskingOverlayMaskingShaderFragmentFunctionDescriptor(v3);
      qword_1ECE30338 = (uint64_t)&ggl::maskingOverlayMaskingShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE30340 = ggl::crc32::compute<36ul>("MaskingOverlayMaskingShaderFragment");
      qword_1ECE30348 = (uint64_t)ggl::maskingOverlayMaskingShaderShaderConstants(void)::ref;
      unk_1ECE30350 = 3;
      qword_1ECE30358 = (uint64_t)&ggl::maskingOverlayMaskingShaderShaderTextures(void)::ref;
      unk_1ECE30360 = 0;
      qword_1ECE30368 = (uint64_t)&ggl::maskingOverlayMaskingShaderShaderSamplers(void)::ref;
      unk_1ECE30370 = 0;
    }
  }
}

void ggl::maskingOverlayMaskingShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::maskingOverlayMaskingShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("MaskingOverlayMaskingShaderFragment");
      *(_DWORD *)algn_1ECE30B9C = 1;
      qword_1ECE30BA0 = (uint64_t)"MaskingOverlayMaskingShader";
      unk_1ECE30BA8 = 0;
      qword_1ECE30BB0 = 0;
      unk_1ECE30BB8 = &ggl::maskingOverlayMaskingShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE30BC0 = 1;
      unk_1ECE30BC8 = &ggl::maskingOverlayMaskingShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE30BD0 = 0;
      unk_1ECE30BD8 = &ggl::maskingOverlayMaskingShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE30BE0 = 0;
      unk_1ECE30BE8 = &ggl::maskingOverlayMaskingShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE30BF8 = 0;
      unk_1ECE30C00 = 0;
      qword_1ECE30BF0 = 0;
    }
  }
}

void ggl::maskingOverlayMaskingShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::maskingOverlayMaskingShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("MaskingOverlayMaskingShaderVertex");
      *(_DWORD *)algn_1ECE30B24 = 0;
      qword_1ECE30B28 = (uint64_t)"MaskingOverlayMaskingShader";
      unk_1ECE30B30 = ggl::maskingOverlayMaskingShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE30B38 = 1;
      unk_1ECE30B40 = &ggl::maskingOverlayMaskingShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE30B48 = 2;
      unk_1ECE30B50 = &ggl::maskingOverlayMaskingShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE30B58 = 0;
      unk_1ECE30B60 = &ggl::maskingOverlayMaskingShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE30B68 = 0;
      unk_1ECE30B70 = &ggl::maskingOverlayMaskingShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE30B80 = 0;
      unk_1ECE30B88 = 0;
      qword_1ECE30B78 = 0;
    }
  }
}

void ggl::FoggedDiffuseBuildingShader::typedReflection(ggl::FoggedDiffuseBuildingShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::FoggedDiffuseBuildingShader::typedReflection(void)::ref = (uint64_t)"FoggedDiffuseBuildingShader";
      ggl::foggedDiffuseBuildingShaderVertexFunctionDescriptor(v2);
      qword_1ECE3B430 = (uint64_t)&ggl::foggedDiffuseBuildingShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<34ul>("FoggedDiffuseBuildingShaderVertex");
      dword_1ECE3B438 = (int)v3;
      ggl::foggedDiffuseBuildingShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3B440 = (uint64_t)&ggl::foggedDiffuseBuildingShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B448 = ggl::crc32::compute<36ul>("FoggedDiffuseBuildingShaderFragment");
      qword_1ECE3B450 = (uint64_t)ggl::foggedDiffuseBuildingShaderShaderConstants(void)::ref;
      unk_1ECE3B458 = 7;
      qword_1ECE3B460 = (uint64_t)ggl::foggedDiffuseBuildingShaderShaderTextures(void)::ref;
      unk_1ECE3B468 = 1;
      qword_1ECE3B470 = (uint64_t)&ggl::foggedDiffuseBuildingShaderShaderSamplers(void)::ref;
      unk_1ECE3B478 = 1;
    }
  }
}

void ggl::SpecularBuildingTopShader::typedReflection(ggl::SpecularBuildingTopShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::SpecularBuildingTopShader::typedReflection(void)::ref = (uint64_t)"SpecularBuildingTopShader";
      ggl::specularBuildingTopShaderVertexFunctionDescriptor(v2);
      qword_1ECE3B1F0 = (uint64_t)&ggl::specularBuildingTopShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<32ul>("SpecularBuildingTopShaderVertex");
      dword_1ECE3B1F8 = (int)v3;
      ggl::specularBuildingTopShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3B200 = (uint64_t)&ggl::specularBuildingTopShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B208 = ggl::crc32::compute<34ul>("SpecularBuildingTopShaderFragment");
      qword_1ECE3B210 = (uint64_t)ggl::specularBuildingTopShaderShaderConstants(void)::ref;
      unk_1ECE3B218 = 7;
      qword_1ECE3B220 = (uint64_t)&ggl::specularBuildingTopShaderShaderTextures(void)::ref;
      unk_1ECE3B228 = 0;
      qword_1ECE3B230 = (uint64_t)&ggl::specularBuildingTopShaderShaderSamplers(void)::ref;
      unk_1ECE3B238 = 0;
    }
  }
}

void ggl::SinglePassRouteLineShader::typedReflection(ggl::SinglePassRouteLineShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::SinglePassRouteLineShader::typedReflection(void)::ref = (uint64_t)"SinglePassRouteLineShader";
      ggl::singlePassRouteLineShaderVertexFunctionDescriptor(v2);
      qword_1ECE32A58 = (uint64_t)&ggl::singlePassRouteLineShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<32ul>("SinglePassRouteLineShaderVertex");
      dword_1ECE32A60 = (int)v3;
      ggl::singlePassRouteLineShaderFragmentFunctionDescriptor(v3);
      qword_1ECE32A68 = (uint64_t)&ggl::singlePassRouteLineShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE32A70 = ggl::crc32::compute<34ul>("SinglePassRouteLineShaderFragment");
      qword_1ECE32A78 = (uint64_t)ggl::singlePassRouteLineShaderShaderConstants(void)::ref;
      unk_1ECE32A80 = 5;
      qword_1ECE32A88 = (uint64_t)ggl::singlePassRouteLineShaderShaderTextures(void)::ref;
      unk_1ECE32A90 = 1;
      qword_1ECE32A98 = (uint64_t)&ggl::singlePassRouteLineShaderShaderSamplers(void)::ref;
      unk_1ECE32AA0 = 1;
    }
  }
}

void md::Logic<md::SceneQueryLogic,md::SceneQueryContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>>::_allocateContext(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  void *v15;
  _QWORD **v16;
  _QWORD *v17;
  uint64_t v18;
  void *__p;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  __int16 v24;
  __int128 v25;

  v4 = (_QWORD *)operator new();
  (*(void (**)(_QWORD ***__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v16, a1);
  v5 = operator new();
  v6 = v17;
  *(_QWORD *)v5 = v16;
  *(_QWORD *)(v5 + 8) = v6;
  v7 = v5 + 8;
  v8 = v18;
  *(_QWORD *)(v5 + 16) = v18;
  if (v8)
  {
    v6[2] = v7;
    v16 = &v17;
    v17 = 0;
    v18 = 0;
  }
  else
  {
    *(_QWORD *)v5 = v7;
  }
  v9 = __p;
  v10 = v20;
  v11 = v21;
  v12 = v22;
  *(_QWORD *)(v5 + 40) = v21;
  __p = 0;
  v20 = 0;
  *(_QWORD *)(v5 + 24) = v9;
  *(_QWORD *)(v5 + 32) = v10;
  *(_QWORD *)(v5 + 48) = v12;
  *(_DWORD *)(v5 + 56) = v23;
  if (v12)
  {
    v13 = v11[1];
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v13 >= v10)
        v13 %= v10;
    }
    else
    {
      v13 &= v10 - 1;
    }
    v11 = 0;
    v9[v13] = v5 + 40;
    v21 = 0;
    v22 = 0;
  }
  *(_WORD *)(v5 + 64) = v24;
  *(_OWORD *)(v5 + 72) = v25;
  v25 = 0uLL;
  v4[2] = "md::SceneQueryContext]";
  v4[3] = 21;
  v4[4] = v5;
  *v4 = &off_1E42B0EB0;
  v4[1] = 0xDFC317497CF9A4BFLL;
  *a2 = v4;
  if (v11)
  {
    do
    {
      v14 = (_QWORD *)*v11;
      operator delete(v11);
      v11 = v14;
    }
    while (v14);
  }
  v15 = __p;
  __p = 0;
  if (v15)
    operator delete(v15);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v17);
}

void sub_19F376D70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  md::SceneQueryContext::~SceneQueryContext((md::SceneQueryContext *)va);
  MEMORY[0x1A1AF4E00](v2, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::SceneQueryLogic,md::SceneQueryContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_WORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  return result;
}

void ggl::ClearShader::typedReflection(ggl::ClearShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::ClearShader::typedReflection(void)::ref = (uint64_t)"ClearShader";
      ggl::clearShaderVertexFunctionDescriptor(v2);
      qword_1ECE38CB0 = (uint64_t)&ggl::clearShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<18ul>("ClearShaderVertex");
      dword_1ECE38CB8 = (int)v3;
      ggl::clearShaderFragmentFunctionDescriptor(v3);
      qword_1ECE38CC0 = (uint64_t)&ggl::clearShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE38CC8 = ggl::crc32::compute<20ul>("ClearShaderFragment");
      qword_1ECE38CD0 = (uint64_t)ggl::clearShaderShaderConstants(void)::ref;
      unk_1ECE38CD8 = 1;
      qword_1ECE38CE0 = (uint64_t)&ggl::clearShaderShaderTextures(void)::ref;
      unk_1ECE38CE8 = 0;
      qword_1ECE38CF0 = (uint64_t)&ggl::clearShaderShaderSamplers(void)::ref;
      unk_1ECE38CF8 = 0;
    }
  }
}

void ggl::clearShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::clearShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<20ul>("ClearShaderFragment");
      *(_DWORD *)algn_1ECE44FF4 = 1;
      qword_1ECE44FF8 = (uint64_t)"ClearShader";
      unk_1ECE45000 = 0;
      qword_1ECE45008 = 0;
      unk_1ECE45010 = &ggl::clearShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE45018 = 1;
      unk_1ECE45020 = &ggl::clearShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE45028 = 0;
      unk_1ECE45030 = &ggl::clearShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE45038 = 0;
      unk_1ECE45040 = &ggl::clearShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE45050 = 0;
      unk_1ECE45058 = 0;
      qword_1ECE45048 = 0;
    }
  }
}

void ggl::clearShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::clearShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<18ul>("ClearShaderVertex");
      *(_DWORD *)algn_1ECE6574C = 0;
      qword_1ECE65750 = (uint64_t)"ClearShader";
      unk_1ECE65758 = ggl::clearShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE65760 = 1;
      unk_1ECE65768 = &ggl::clearShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE65770 = 1;
      unk_1ECE65778 = &ggl::clearShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE65780 = 0;
      unk_1ECE65788 = &ggl::clearShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE65790 = 0;
      unk_1ECE65798 = &ggl::clearShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE657A8 = 0;
      unk_1ECE657B0 = 0;
      qword_1ECE657A0 = 0;
    }
  }
}

void ggl::TextureRectShader::typedReflection(ggl::TextureRectShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::TextureRectShader::typedReflection(void)::ref = (uint64_t)"TextureRectShader";
      ggl::textureRectShaderVertexFunctionDescriptor(v2);
      qword_1ECE39930 = (uint64_t)&ggl::textureRectShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<24ul>("TextureRectShaderVertex");
      dword_1ECE39938 = (int)v3;
      ggl::textureRectShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39940 = (uint64_t)&ggl::textureRectShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39948 = ggl::crc32::compute<26ul>("TextureRectShaderFragment");
      qword_1ECE39950 = (uint64_t)ggl::textureRectShaderShaderConstants(void)::ref;
      unk_1ECE39958 = 1;
      qword_1ECE39960 = (uint64_t)ggl::textureRectShaderShaderTextures(void)::ref;
      unk_1ECE39968 = 1;
      qword_1ECE39970 = (uint64_t)&ggl::textureRectShaderShaderSamplers(void)::ref;
      unk_1ECE39978 = 1;
    }
  }
}

void ggl::textureRectShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::textureRectShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("TextureRectShaderFragment");
      *(_DWORD *)algn_1ECE3E664 = 1;
      qword_1ECE3E668 = (uint64_t)"TextureRectShader";
      unk_1ECE3E670 = 0;
      qword_1ECE3E678 = 0;
      unk_1ECE3E680 = &ggl::textureRectShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3E688 = 0;
      unk_1ECE3E690 = &ggl::textureRectShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3E698 = 0;
      unk_1ECE3E6A0 = &ggl::textureRectShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3E6A8 = 1;
      unk_1ECE3E6B0 = &ggl::textureRectShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3E6C0 = 0;
      unk_1ECE3E6C8 = 0;
      qword_1ECE3E6B8 = 1;
    }
  }
}

void ggl::textureRectShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::textureRectShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("TextureRectShaderVertex");
      *(_DWORD *)algn_1ECE3DB9C = 0;
      qword_1ECE3DBA0 = (uint64_t)"TextureRectShader";
      unk_1ECE3DBA8 = ggl::textureRectShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3DBB0 = 1;
      unk_1ECE3DBB8 = &ggl::textureRectShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3DBC0 = 1;
      unk_1ECE3DBC8 = &ggl::textureRectShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3DBD0 = 0;
      unk_1ECE3DBD8 = &ggl::textureRectShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3DBE0 = 0;
      unk_1ECE3DBE8 = &ggl::textureRectShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3DBF8 = 0;
      unk_1ECE3DC00 = 0;
      qword_1ECE3DBF0 = 0;
    }
  }
}

void ggl::ShadedColorShader::typedReflection(ggl::ShadedColorShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::ShadedColorShader::typedReflection(void)::ref = (uint64_t)"ShadedColorShader";
      ggl::shadedColorShaderVertexFunctionDescriptor(v2);
      qword_1ECE39870 = (uint64_t)&ggl::shadedColorShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<24ul>("ShadedColorShaderVertex");
      dword_1ECE39878 = (int)v3;
      ggl::shadedColorShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39880 = (uint64_t)&ggl::shadedColorShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39888 = ggl::crc32::compute<26ul>("ShadedColorShaderFragment");
      qword_1ECE39890 = (uint64_t)ggl::shadedColorShaderShaderConstants(void)::ref;
      unk_1ECE39898 = 2;
      qword_1ECE398A0 = (uint64_t)&ggl::shadedColorShaderShaderTextures(void)::ref;
      unk_1ECE398A8 = 0;
      qword_1ECE398B0 = (uint64_t)&ggl::shadedColorShaderShaderSamplers(void)::ref;
      unk_1ECE398B8 = 0;
    }
  }
}

void ggl::shadedColorShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::shadedColorShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("ShadedColorShaderFragment");
      *(_DWORD *)algn_1ECE45234 = 1;
      qword_1ECE45238 = (uint64_t)"ShadedColorShader";
      unk_1ECE45240 = 0;
      qword_1ECE45248 = 0;
      unk_1ECE45250 = &ggl::shadedColorShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE45258 = 1;
      unk_1ECE45260 = &ggl::shadedColorShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE45268 = 0;
      unk_1ECE45270 = &ggl::shadedColorShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE45278 = 0;
      unk_1ECE45280 = &ggl::shadedColorShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE45290 = 0;
      unk_1ECE45298 = 0;
      qword_1ECE45288 = 0;
    }
  }
}

void ggl::shadedColorShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::shadedColorShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("ShadedColorShaderVertex");
      *(_DWORD *)algn_1ECE450DC = 0;
      qword_1ECE450E0 = (uint64_t)"ShadedColorShader";
      unk_1ECE450E8 = ggl::shadedColorShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE450F0 = 1;
      unk_1ECE450F8 = &ggl::shadedColorShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE45100 = 2;
      unk_1ECE45108 = &ggl::shadedColorShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE45110 = 0;
      unk_1ECE45118 = &ggl::shadedColorShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE45120 = 0;
      unk_1ECE45128 = &ggl::shadedColorShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE45138 = 0;
      unk_1ECE45140 = 0;
      qword_1ECE45130 = 0;
    }
  }
}

void ggl::ColoredTextShader::typedReflection(ggl::ColoredTextShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::ColoredTextShader::typedReflection(void)::ref = (uint64_t)"ColoredTextShader";
      ggl::coloredTextShaderVertexFunctionDescriptor(v2);
      qword_1ECE39718 = (uint64_t)&ggl::coloredTextShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<24ul>("ColoredTextShaderVertex");
      dword_1ECE39720 = (int)v3;
      ggl::coloredTextShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39728 = (uint64_t)&ggl::coloredTextShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39730 = ggl::crc32::compute<26ul>("ColoredTextShaderFragment");
      qword_1ECE39738 = (uint64_t)ggl::coloredTextShaderShaderConstants(void)::ref;
      unk_1ECE39740 = 1;
      qword_1ECE39748 = (uint64_t)ggl::coloredTextShaderShaderTextures(void)::ref;
      unk_1ECE39750 = 1;
      qword_1ECE39758 = (uint64_t)&ggl::coloredTextShaderShaderSamplers(void)::ref;
      unk_1ECE39760 = 1;
    }
  }
}

void ggl::coloredTextShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::coloredTextShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("ColoredTextShaderFragment");
      *(_DWORD *)algn_1ECE451BC = 1;
      qword_1ECE451C0 = (uint64_t)"ColoredTextShader";
      unk_1ECE451C8 = 0;
      qword_1ECE451D0 = 0;
      unk_1ECE451D8 = &ggl::coloredTextShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE451E0 = 0;
      unk_1ECE451E8 = &ggl::coloredTextShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE451F0 = 0;
      unk_1ECE451F8 = &ggl::coloredTextShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE45200 = 1;
      unk_1ECE45208 = &ggl::coloredTextShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE45218 = 0;
      unk_1ECE45220 = 0;
      qword_1ECE45210 = 1;
    }
  }
}

void ggl::coloredTextShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::coloredTextShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("ColoredTextShaderVertex");
      *(_DWORD *)algn_1ECE3D804 = 0;
      qword_1ECE3D808 = (uint64_t)"ColoredTextShader";
      unk_1ECE3D810 = ggl::coloredTextShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3D818 = 1;
      unk_1ECE3D820 = &ggl::coloredTextShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3D828 = 1;
      unk_1ECE3D830 = &ggl::coloredTextShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3D838 = 0;
      unk_1ECE3D840 = &ggl::coloredTextShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3D848 = 0;
      unk_1ECE3D850 = &ggl::coloredTextShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3D860 = 0;
      unk_1ECE3D868 = 0;
      qword_1ECE3D858 = 0;
    }
  }
}

void ggl::ARCameraImageShader::typedReflection(ggl::ARCameraImageShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::ARCameraImageShader::typedReflection(void)::ref = (uint64_t)"ARCameraImageShader";
      ggl::aRCameraImageShaderVertexFunctionDescriptor(v2);
      qword_1ECE44160 = (uint64_t)&ggl::aRCameraImageShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<26ul>("ARCameraImageShaderVertex");
      dword_1ECE44168 = (int)v3;
      ggl::aRCameraImageShaderFragmentFunctionDescriptor(v3);
      qword_1ECE44170 = (uint64_t)&ggl::aRCameraImageShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE44178 = ggl::crc32::compute<28ul>("ARCameraImageShaderFragment");
      qword_1ECE44180 = (uint64_t)ggl::aRCameraImageShaderShaderConstants(void)::ref;
      unk_1ECE44188 = 1;
      qword_1ECE44190 = (uint64_t)ggl::aRCameraImageShaderShaderTextures(void)::ref;
      unk_1ECE44198 = 1;
      qword_1ECE441A0 = (uint64_t)&ggl::aRCameraImageShaderShaderSamplers(void)::ref;
      unk_1ECE441A8 = 1;
    }
  }
}

void ggl::aRCameraImageShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::aRCameraImageShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("ARCameraImageShaderFragment");
      *(_DWORD *)algn_1ECE44904 = 1;
      qword_1ECE44908 = (uint64_t)"ARCameraImageShader";
      unk_1ECE44910 = 0;
      qword_1ECE44918 = 0;
      unk_1ECE44920 = &ggl::aRCameraImageShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE44928 = 0;
      unk_1ECE44930 = &ggl::aRCameraImageShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE44938 = 0;
      unk_1ECE44940 = &ggl::aRCameraImageShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE44948 = 1;
      unk_1ECE44950 = &ggl::aRCameraImageShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE44960 = 0;
      unk_1ECE44968 = 0;
      qword_1ECE44958 = 1;
    }
  }
}

void ggl::aRCameraImageShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::aRCameraImageShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("ARCameraImageShaderVertex");
      *(_DWORD *)algn_1ECE4464C = 0;
      qword_1ECE44650 = (uint64_t)"ARCameraImageShader";
      unk_1ECE44658 = ggl::aRCameraImageShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE44660 = 1;
      unk_1ECE44668 = &ggl::aRCameraImageShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE44670 = 1;
      unk_1ECE44678 = &ggl::aRCameraImageShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE44680 = 0;
      unk_1ECE44688 = &ggl::aRCameraImageShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE44690 = 0;
      unk_1ECE44698 = &ggl::aRCameraImageShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE446A8 = 0;
      unk_1ECE446B0 = 0;
      qword_1ECE446A0 = 0;
    }
  }
}

void ggl::PointExtendedShader::typedReflection(ggl::PointExtendedShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::PointExtendedShader::typedReflection(void)::ref = (uint64_t)"PointExtendedShader";
      ggl::pointExtendedShaderVertexFunctionDescriptor(v2);
      qword_1ECE39F50 = (uint64_t)&ggl::pointExtendedShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<26ul>("PointExtendedShaderVertex");
      dword_1ECE39F58 = (int)v3;
      ggl::pointExtendedShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39F60 = (uint64_t)&ggl::pointExtendedShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39F68 = ggl::crc32::compute<28ul>("PointExtendedShaderFragment");
      qword_1ECE39F70 = (uint64_t)ggl::pointExtendedShaderShaderConstants(void)::ref;
      unk_1ECE39F78 = 2;
      qword_1ECE39F80 = (uint64_t)&ggl::pointExtendedShaderShaderTextures(void)::ref;
      unk_1ECE39F88 = 0;
      qword_1ECE39F90 = (uint64_t)&ggl::pointExtendedShaderShaderSamplers(void)::ref;
      unk_1ECE39F98 = 0;
    }
  }
}

void ggl::pointExtendedShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::pointExtendedShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("PointExtendedShaderFragment");
      *(_DWORD *)algn_1ECE3F404 = 1;
      qword_1ECE3F408 = (uint64_t)"PointExtendedShader";
      unk_1ECE3F410 = 0;
      qword_1ECE3F418 = 0;
      unk_1ECE3F420 = &ggl::pointExtendedShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3F428 = 1;
      unk_1ECE3F430 = &ggl::pointExtendedShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3F438 = 0;
      unk_1ECE3F440 = &ggl::pointExtendedShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3F448 = 0;
      unk_1ECE3F450 = &ggl::pointExtendedShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3F460 = 0;
      unk_1ECE3F468 = 0;
      qword_1ECE3F458 = 0;
    }
  }
}

void ggl::pointExtendedShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::pointExtendedShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("PointExtendedShaderVertex");
      *(_DWORD *)algn_1ECE3E49C = 0;
      qword_1ECE3E4A0 = (uint64_t)"PointExtendedShader";
      unk_1ECE3E4A8 = ggl::pointExtendedShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3E4B0 = 1;
      unk_1ECE3E4B8 = &ggl::pointExtendedShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3E4C0 = 2;
      unk_1ECE3E4C8 = &ggl::pointExtendedShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3E4D0 = 0;
      unk_1ECE3E4D8 = &ggl::pointExtendedShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3E4E0 = 0;
      unk_1ECE3E4E8 = &ggl::pointExtendedShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3E4F8 = 0;
      unk_1ECE3E500 = 0;
      qword_1ECE3E4F0 = 0;
    }
  }
}

void ggl::DebugExtendedShader::typedReflection(ggl::DebugExtendedShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::DebugExtendedShader::typedReflection(void)::ref = (uint64_t)"DebugExtendedShader";
      ggl::debugExtendedShaderVertexFunctionDescriptor(v2);
      qword_1ECE39D28 = (uint64_t)&ggl::debugExtendedShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<26ul>("DebugExtendedShaderVertex");
      dword_1ECE39D30 = (int)v3;
      ggl::debugExtendedShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39D38 = (uint64_t)&ggl::debugExtendedShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39D40 = ggl::crc32::compute<28ul>("DebugExtendedShaderFragment");
      qword_1ECE39D48 = (uint64_t)ggl::debugExtendedShaderShaderConstants(void)::ref;
      unk_1ECE39D50 = 3;
      qword_1ECE39D58 = (uint64_t)&ggl::debugExtendedShaderShaderTextures(void)::ref;
      unk_1ECE39D60 = 0;
      qword_1ECE39D68 = (uint64_t)&ggl::debugExtendedShaderShaderSamplers(void)::ref;
      unk_1ECE39D70 = 0;
    }
  }
}

void ggl::debugExtendedShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::debugExtendedShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("DebugExtendedShaderFragment");
      *(_DWORD *)algn_1ECE3EF0C = 1;
      qword_1ECE3EF10 = (uint64_t)"DebugExtendedShader";
      unk_1ECE3EF18 = 0;
      qword_1ECE3EF20 = 0;
      unk_1ECE3EF28 = &ggl::debugExtendedShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3EF30 = 1;
      unk_1ECE3EF38 = &ggl::debugExtendedShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3EF40 = 0;
      unk_1ECE3EF48 = &ggl::debugExtendedShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3EF50 = 0;
      unk_1ECE3EF58 = &ggl::debugExtendedShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3EF68 = 0;
      unk_1ECE3EF70 = 0;
      qword_1ECE3EF60 = 0;
    }
  }
}

void ggl::debugExtendedShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::debugExtendedShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("DebugExtendedShaderVertex");
      *(_DWORD *)algn_1ECE3E174 = 0;
      qword_1ECE3E178 = (uint64_t)"DebugExtendedShader";
      unk_1ECE3E180 = ggl::debugExtendedShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3E188 = 1;
      unk_1ECE3E190 = &ggl::debugExtendedShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3E198 = 3;
      unk_1ECE3E1A0 = &ggl::debugExtendedShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3E1A8 = 0;
      unk_1ECE3E1B0 = &ggl::debugExtendedShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3E1B8 = 0;
      unk_1ECE3E1C0 = &ggl::debugExtendedShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3E1D0 = 0;
      unk_1ECE3E1D8 = 0;
      qword_1ECE3E1C8 = 0;
    }
  }
}

void ggl::ARDepthMeshShader::typedReflection(ggl::ARDepthMeshShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::ARDepthMeshShader::typedReflection(void)::ref = (uint64_t)"ARDepthMeshShader";
      ggl::aRDepthMeshShaderVertexFunctionDescriptor(v2);
      qword_1ECE327E0 = (uint64_t)&ggl::aRDepthMeshShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<24ul>("ARDepthMeshShaderVertex");
      dword_1ECE327E8 = (int)v3;
      ggl::aRDepthMeshShaderFragmentFunctionDescriptor(v3);
      qword_1ECE327F0 = (uint64_t)&ggl::aRDepthMeshShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE327F8 = ggl::crc32::compute<26ul>("ARDepthMeshShaderFragment");
      qword_1ECE32800 = (uint64_t)ggl::aRDepthMeshShaderShaderConstants(void)::ref;
      unk_1ECE32808 = 3;
      qword_1ECE32810 = (uint64_t)&ggl::aRDepthMeshShaderShaderTextures(void)::ref;
      unk_1ECE32818 = 0;
      qword_1ECE32820 = (uint64_t)&ggl::aRDepthMeshShaderShaderSamplers(void)::ref;
      unk_1ECE32828 = 0;
    }
  }
}

void ggl::aRDepthMeshShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::aRDepthMeshShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("ARDepthMeshShaderFragment");
      *(_DWORD *)algn_1ECE32DD4 = 1;
      qword_1ECE32DD8 = (uint64_t)"ARDepthMeshShader";
      unk_1ECE32DE0 = 0;
      qword_1ECE32DE8 = 0;
      unk_1ECE32DF0 = &ggl::aRDepthMeshShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE32DF8 = 0;
      unk_1ECE32E00 = &ggl::aRDepthMeshShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE32E08 = 0;
      unk_1ECE32E10 = &ggl::aRDepthMeshShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE32E18 = 0;
      unk_1ECE32E20 = &ggl::aRDepthMeshShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE32E30 = 0;
      unk_1ECE32E38 = 0;
      qword_1ECE32E28 = 0;
    }
  }
}

void ggl::aRDepthMeshShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::aRDepthMeshShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("ARDepthMeshShaderVertex");
      *(_DWORD *)algn_1ECE37194 = 0;
      qword_1ECE37198 = (uint64_t)"ARDepthMeshShader";
      unk_1ECE371A0 = ggl::aRDepthMeshShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE371A8 = 2;
      unk_1ECE371B0 = &ggl::aRDepthMeshShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE371B8 = 3;
      unk_1ECE371C0 = &ggl::aRDepthMeshShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE371C8 = 1;
      unk_1ECE371D0 = &ggl::aRDepthMeshShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE371D8 = 0;
      unk_1ECE371E0 = &ggl::aRDepthMeshShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE371F0 = 0;
      unk_1ECE371F8 = 0;
      qword_1ECE371E8 = 0;
    }
  }
}

void ggl::PolylineOverlayAlphaShader::typedReflection(ggl::PolylineOverlayAlphaShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::PolylineOverlayAlphaShader::typedReflection(void)::ref = (uint64_t)"PolylineOverlayAlphaShader";
      ggl::polylineOverlayAlphaShaderVertexFunctionDescriptor(v2);
      qword_1ECE3B378 = (uint64_t)&ggl::polylineOverlayAlphaShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<33ul>("PolylineOverlayAlphaShaderVertex");
      dword_1ECE3B380 = (int)v3;
      ggl::polylineOverlayAlphaShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3B388 = (uint64_t)&ggl::polylineOverlayAlphaShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B390 = ggl::crc32::compute<35ul>("PolylineOverlayAlphaShaderFragment");
      qword_1ECE3B398 = (uint64_t)ggl::polylineOverlayAlphaShaderShaderConstants(void)::ref;
      unk_1ECE3B3A0 = 3;
      qword_1ECE3B3A8 = (uint64_t)ggl::polylineOverlayAlphaShaderShaderTextures(void)::ref;
      unk_1ECE3B3B0 = 1;
      qword_1ECE3B3B8 = (uint64_t)ggl::polylineOverlayAlphaShaderShaderSamplers(void)::ref;
      unk_1ECE3B3C0 = 1;
    }
  }
}

void ggl::polylineOverlayAlphaShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::polylineOverlayAlphaShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<35ul>("PolylineOverlayAlphaShaderFragment");
      *(_DWORD *)algn_1ECE41E3C = 1;
      qword_1ECE41E40 = (uint64_t)"PolylineOverlayAlphaShader";
      unk_1ECE41E48 = 0;
      qword_1ECE41E50 = 0;
      unk_1ECE41E58 = &ggl::polylineOverlayAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41E60 = 1;
      unk_1ECE41E68 = &ggl::polylineOverlayAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41E70 = 0;
      unk_1ECE41E78 = &ggl::polylineOverlayAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41E80 = 1;
      unk_1ECE41E88 = &ggl::polylineOverlayAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41E98 = 0;
      unk_1ECE41EA0 = 0;
      qword_1ECE41E90 = 1;
    }
  }
}

void ggl::polylineOverlayAlphaShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::polylineOverlayAlphaShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("PolylineOverlayAlphaShaderVertex");
      *(_DWORD *)algn_1ECE414C4 = 0;
      qword_1ECE414C8 = (uint64_t)"PolylineOverlayAlphaShader";
      unk_1ECE414D0 = ggl::polylineOverlayAlphaShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE414D8 = 1;
      unk_1ECE414E0 = &ggl::polylineOverlayAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE414E8 = 3;
      unk_1ECE414F0 = &ggl::polylineOverlayAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE414F8 = 0;
      unk_1ECE41500 = &ggl::polylineOverlayAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41508 = 0;
      unk_1ECE41510 = &ggl::polylineOverlayAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41520 = 0;
      unk_1ECE41528 = 0;
      qword_1ECE41518 = 0;
    }
  }
}

void ggl::PolylineOverlayFillShader::typedReflection(ggl::PolylineOverlayFillShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::PolylineOverlayFillShader::typedReflection(void)::ref = (uint64_t)"PolylineOverlayFillShader";
      ggl::polylineOverlayFillShaderVertexFunctionDescriptor(v2);
      qword_1ECE3B0D8 = (uint64_t)&ggl::polylineOverlayFillShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<32ul>("PolylineOverlayFillShaderVertex");
      dword_1ECE3B0E0 = (int)v3;
      ggl::polylineOverlayFillShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3B0E8 = (uint64_t)&ggl::polylineOverlayFillShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B0F0 = ggl::crc32::compute<34ul>("PolylineOverlayFillShaderFragment");
      qword_1ECE3B0F8 = (uint64_t)ggl::polylineOverlayFillShaderShaderConstants(void)::ref;
      unk_1ECE3B100 = 3;
      qword_1ECE3B108 = (uint64_t)ggl::polylineOverlayFillShaderShaderTextures(void)::ref;
      unk_1ECE3B110 = 1;
      qword_1ECE3B118 = (uint64_t)ggl::polylineOverlayFillShaderShaderSamplers(void)::ref;
      unk_1ECE3B120 = 1;
    }
  }
}

void ggl::polylineOverlayFillShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::polylineOverlayFillShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("PolylineOverlayFillShaderFragment");
      *(_DWORD *)algn_1ECE41A2C = 1;
      qword_1ECE41A30 = (uint64_t)"PolylineOverlayFillShader";
      unk_1ECE41A38 = 0;
      qword_1ECE41A40 = 0;
      unk_1ECE41A48 = &ggl::polylineOverlayFillShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41A50 = 1;
      unk_1ECE41A58 = &ggl::polylineOverlayFillShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41A60 = 0;
      unk_1ECE41A68 = &ggl::polylineOverlayFillShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41A70 = 1;
      unk_1ECE41A78 = &ggl::polylineOverlayFillShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41A88 = 0;
      unk_1ECE41A90 = 0;
      qword_1ECE41A80 = 1;
    }
  }
}

void ggl::polylineOverlayFillShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::polylineOverlayFillShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("PolylineOverlayFillShaderVertex");
      *(_DWORD *)algn_1ECE40E64 = 0;
      qword_1ECE40E68 = (uint64_t)"PolylineOverlayFillShader";
      unk_1ECE40E70 = ggl::polylineOverlayFillShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE40E78 = 1;
      unk_1ECE40E80 = &ggl::polylineOverlayFillShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE40E88 = 3;
      unk_1ECE40E90 = &ggl::polylineOverlayFillShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE40E98 = 0;
      unk_1ECE40EA0 = &ggl::polylineOverlayFillShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE40EA8 = 0;
      unk_1ECE40EB0 = &ggl::polylineOverlayFillShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE40EC0 = 0;
      unk_1ECE40EC8 = 0;
      qword_1ECE40EB8 = 0;
    }
  }
}

void ggl::RouteLineArrowShader::typedReflection(ggl::RouteLineArrowShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::RouteLineArrowShader::typedReflection(void)::ref = (uint64_t)"RouteLineArrowShader";
      ggl::routeLineArrowShaderVertexFunctionDescriptor(v2);
      qword_1ECE3A280 = (uint64_t)&ggl::routeLineArrowShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<27ul>("RouteLineArrowShaderVertex");
      dword_1ECE3A288 = (int)v3;
      ggl::routeLineArrowShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3A290 = (uint64_t)&ggl::routeLineArrowShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3A298 = ggl::crc32::compute<29ul>("RouteLineArrowShaderFragment");
      qword_1ECE3A2A0 = (uint64_t)ggl::routeLineArrowShaderShaderConstants(void)::ref;
      unk_1ECE3A2A8 = 3;
      qword_1ECE3A2B0 = (uint64_t)ggl::routeLineArrowShaderShaderTextures(void)::ref;
      unk_1ECE3A2B8 = 1;
      qword_1ECE3A2C0 = (uint64_t)&ggl::routeLineArrowShaderShaderSamplers(void)::ref;
      unk_1ECE3A2C8 = 1;
    }
  }
}

void ggl::routeLineArrowShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::routeLineArrowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("RouteLineArrowShaderFragment");
      *(_DWORD *)algn_1ECE3FA64 = 1;
      qword_1ECE3FA68 = (uint64_t)"RouteLineArrowShader";
      unk_1ECE3FA70 = 0;
      qword_1ECE3FA78 = 0;
      unk_1ECE3FA80 = &ggl::routeLineArrowShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3FA88 = 1;
      unk_1ECE3FA90 = &ggl::routeLineArrowShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3FA98 = 0;
      unk_1ECE3FAA0 = &ggl::routeLineArrowShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3FAA8 = 1;
      unk_1ECE3FAB0 = &ggl::routeLineArrowShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3FAC0 = 0;
      unk_1ECE3FAC8 = 0;
      qword_1ECE3FAB8 = 1;
    }
  }
}

void ggl::routeLineArrowShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::routeLineArrowShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("RouteLineArrowShaderVertex");
      *(_DWORD *)algn_1ECE3EBCC = 0;
      qword_1ECE3EBD0 = (uint64_t)"RouteLineArrowShader";
      unk_1ECE3EBD8 = ggl::routeLineArrowShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3EBE0 = 1;
      unk_1ECE3EBE8 = &ggl::routeLineArrowShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3EBF0 = 3;
      unk_1ECE3EBF8 = &ggl::routeLineArrowShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3EC00 = 0;
      unk_1ECE3EC08 = &ggl::routeLineArrowShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3EC10 = 0;
      unk_1ECE3EC18 = &ggl::routeLineArrowShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3EC28 = 0;
      unk_1ECE3EC30 = 0;
      qword_1ECE3EC20 = 0;
    }
  }
}

void ggl::DaVinciTrafficShader::typedReflection(ggl::DaVinciTrafficShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::DaVinciTrafficShader::typedReflection(void)::ref = (uint64_t)"DaVinciTrafficShader";
      ggl::daVinciTrafficShaderVertexFunctionDescriptor(v2);
      qword_1ECE32898 = (uint64_t)&ggl::daVinciTrafficShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<27ul>("DaVinciTrafficShaderVertex");
      dword_1ECE328A0 = (int)v3;
      ggl::daVinciTrafficShaderFragmentFunctionDescriptor(v3);
      qword_1ECE328A8 = (uint64_t)&ggl::daVinciTrafficShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE328B0 = ggl::crc32::compute<29ul>("DaVinciTrafficShaderFragment");
      qword_1ECE328B8 = (uint64_t)ggl::daVinciTrafficShaderShaderConstants(void)::ref;
      unk_1ECE328C0 = 4;
      qword_1ECE328C8 = (uint64_t)ggl::daVinciTrafficShaderShaderTextures(void)::ref;
      unk_1ECE328D0 = 2;
      qword_1ECE328D8 = (uint64_t)ggl::daVinciTrafficShaderShaderSamplers(void)::ref;
      unk_1ECE328E0 = 2;
    }
  }
}

void ggl::daVinciTrafficShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::daVinciTrafficShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("DaVinciTrafficShaderFragment");
      *(_DWORD *)algn_1ECE32FAC = 1;
      qword_1ECE32FB0 = (uint64_t)"DaVinciTrafficShader";
      unk_1ECE32FB8 = 0;
      qword_1ECE32FC0 = 0;
      unk_1ECE32FC8 = &ggl::daVinciTrafficShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE32FD0 = 2;
      unk_1ECE32FD8 = &ggl::daVinciTrafficShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE32FE0 = 0;
      unk_1ECE32FE8 = &ggl::daVinciTrafficShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE32FF0 = 2;
      unk_1ECE32FF8 = &ggl::daVinciTrafficShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE33008 = 0;
      unk_1ECE33010 = 0;
      qword_1ECE33000 = 2;
    }
  }
}

void ggl::daVinciTrafficShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::daVinciTrafficShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("DaVinciTrafficShaderVertex");
      *(_DWORD *)algn_1ECE32EC4 = 0;
      qword_1ECE32EC8 = (uint64_t)"DaVinciTrafficShader";
      unk_1ECE32ED0 = ggl::daVinciTrafficShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE32ED8 = 1;
      unk_1ECE32EE0 = &ggl::daVinciTrafficShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE32EE8 = 4;
      unk_1ECE32EF0 = &ggl::daVinciTrafficShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE32EF8 = 0;
      unk_1ECE32F00 = &ggl::daVinciTrafficShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE32F08 = 0;
      unk_1ECE32F10 = &ggl::daVinciTrafficShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE32F20 = 0;
      unk_1ECE32F28 = 0;
      qword_1ECE32F18 = 0;
    }
  }
}

void ggl::ARGroundShadowShader::typedReflection(ggl::ARGroundShadowShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::ARGroundShadowShader::typedReflection(void)::ref = (uint64_t)"ARGroundShadowShader";
      ggl::aRGroundShadowShaderVertexFunctionDescriptor(v2);
      qword_1ECE32840 = (uint64_t)&ggl::aRGroundShadowShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<27ul>("ARGroundShadowShaderVertex");
      dword_1ECE32848 = (int)v3;
      ggl::aRGroundShadowShaderFragmentFunctionDescriptor(v3);
      qword_1ECE32850 = (uint64_t)&ggl::aRGroundShadowShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE32858 = ggl::crc32::compute<29ul>("ARGroundShadowShaderFragment");
      qword_1ECE32860 = (uint64_t)ggl::aRGroundShadowShaderShaderConstants(void)::ref;
      unk_1ECE32868 = 4;
      qword_1ECE32870 = (uint64_t)&ggl::aRGroundShadowShaderShaderTextures(void)::ref;
      unk_1ECE32878 = 0;
      qword_1ECE32880 = (uint64_t)&ggl::aRGroundShadowShaderShaderSamplers(void)::ref;
      unk_1ECE32888 = 0;
    }
  }
}

void ggl::aRGroundShadowShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::aRGroundShadowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("ARGroundShadowShaderFragment");
      *(_DWORD *)algn_1ECE32F3C = 1;
      qword_1ECE32F40 = (uint64_t)"ARGroundShadowShader";
      unk_1ECE32F48 = 0;
      qword_1ECE32F50 = 0;
      unk_1ECE32F58 = &ggl::aRGroundShadowShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE32F60 = 1;
      unk_1ECE32F68 = &ggl::aRGroundShadowShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE32F70 = 0;
      unk_1ECE32F78 = &ggl::aRGroundShadowShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE32F80 = 0;
      unk_1ECE32F88 = &ggl::aRGroundShadowShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE32F98 = 0;
      unk_1ECE32FA0 = 0;
      qword_1ECE32F90 = 0;
    }
  }
}

void ggl::aRGroundShadowShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::aRGroundShadowShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("ARGroundShadowShaderVertex");
      *(_DWORD *)algn_1ECE32E4C = 0;
      qword_1ECE32E50 = (uint64_t)"ARGroundShadowShader";
      unk_1ECE32E58 = ggl::aRGroundShadowShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE32E60 = 2;
      unk_1ECE32E68 = &ggl::aRGroundShadowShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE32E70 = 3;
      unk_1ECE32E78 = &ggl::aRGroundShadowShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE32E80 = 1;
      unk_1ECE32E88 = &ggl::aRGroundShadowShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE32E90 = 0;
      unk_1ECE32E98 = &ggl::aRGroundShadowShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE32EA8 = 0;
      unk_1ECE32EB0 = 0;
      qword_1ECE32EA0 = 0;
    }
  }
}

void ggl::FoggedDiffuseLandmarkShader::typedReflection(ggl::FoggedDiffuseLandmarkShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::FoggedDiffuseLandmarkShader::typedReflection(void)::ref = (uint64_t)"FoggedDiffuseLandmarkShader";
      ggl::foggedDiffuseLandmarkShaderVertexFunctionDescriptor(v2);
      qword_1ECE3B490 = (uint64_t)&ggl::foggedDiffuseLandmarkShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<34ul>("FoggedDiffuseLandmarkShaderVertex");
      dword_1ECE3B498 = (int)v3;
      ggl::foggedDiffuseLandmarkShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3B4A0 = (uint64_t)&ggl::foggedDiffuseLandmarkShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B4A8 = ggl::crc32::compute<36ul>("FoggedDiffuseLandmarkShaderFragment");
      qword_1ECE3B4B0 = (uint64_t)ggl::foggedDiffuseLandmarkShaderShaderConstants(void)::ref;
      unk_1ECE3B4B8 = 7;
      qword_1ECE3B4C0 = (uint64_t)ggl::foggedDiffuseLandmarkShaderShaderTextures(void)::ref;
      unk_1ECE3B4C8 = 1;
      qword_1ECE3B4D0 = (uint64_t)&ggl::foggedDiffuseLandmarkShaderShaderSamplers(void)::ref;
      unk_1ECE3B4D8 = 1;
    }
  }
}

void ggl::foggedDiffuseLandmarkShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::foggedDiffuseLandmarkShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("FoggedDiffuseLandmarkShaderFragment");
      *(_DWORD *)algn_1ECE420F4 = 1;
      qword_1ECE420F8 = (uint64_t)"FoggedDiffuseLandmarkShader";
      unk_1ECE42100 = 0;
      qword_1ECE42108 = 0;
      unk_1ECE42110 = &ggl::foggedDiffuseLandmarkShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE42118 = 3;
      unk_1ECE42120 = &ggl::foggedDiffuseLandmarkShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE42128 = 0;
      unk_1ECE42130 = &ggl::foggedDiffuseLandmarkShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE42138 = 1;
      unk_1ECE42140 = &ggl::foggedDiffuseLandmarkShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE42150 = 0;
      unk_1ECE42158 = 0;
      qword_1ECE42148 = 1;
    }
  }
}

void ggl::foggedDiffuseLandmarkShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::foggedDiffuseLandmarkShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("FoggedDiffuseLandmarkShaderVertex");
      *(_DWORD *)algn_1ECE417EC = 0;
      qword_1ECE417F0 = (uint64_t)"FoggedDiffuseLandmarkShader";
      unk_1ECE417F8 = ggl::foggedDiffuseLandmarkShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE41800 = 1;
      unk_1ECE41808 = &ggl::foggedDiffuseLandmarkShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41810 = 6;
      unk_1ECE41818 = &ggl::foggedDiffuseLandmarkShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41820 = 0;
      unk_1ECE41828 = &ggl::foggedDiffuseLandmarkShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41830 = 0;
      unk_1ECE41838 = &ggl::foggedDiffuseLandmarkShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41848 = 0;
      unk_1ECE41850 = 0;
      qword_1ECE41840 = 0;
    }
  }
}

void ggl::ElevatedStrokeColorShader::typedReflection(ggl::ElevatedStrokeColorShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::ElevatedStrokeColorShader::typedReflection(void)::ref = (uint64_t)"ElevatedStrokeColorShader";
      ggl::elevatedStrokeColorShaderVertexFunctionDescriptor(v2);
      qword_1ECE32A00 = (uint64_t)&ggl::elevatedStrokeColorShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<32ul>("ElevatedStrokeColorShaderVertex");
      dword_1ECE32A08 = (int)v3;
      ggl::elevatedStrokeColorShaderFragmentFunctionDescriptor(v3);
      qword_1ECE32A10 = (uint64_t)&ggl::elevatedStrokeColorShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE32A18 = ggl::crc32::compute<34ul>("ElevatedStrokeColorShaderFragment");
      qword_1ECE32A20 = (uint64_t)ggl::elevatedStrokeColorShaderShaderConstants(void)::ref;
      unk_1ECE32A28 = 5;
      qword_1ECE32A30 = (uint64_t)ggl::elevatedStrokeColorShaderShaderTextures(void)::ref;
      unk_1ECE32A38 = 1;
      qword_1ECE32A40 = (uint64_t)ggl::elevatedStrokeColorShaderShaderSamplers(void)::ref;
      unk_1ECE32A48 = 1;
    }
  }
}

void ggl::elevatedStrokeColorShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::elevatedStrokeColorShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("ElevatedStrokeColorShaderFragment");
      *(_DWORD *)algn_1ECE332C4 = 1;
      qword_1ECE332C8 = (uint64_t)"ElevatedStrokeColorShader";
      unk_1ECE332D0 = 0;
      qword_1ECE332D8 = 0;
      unk_1ECE332E0 = &ggl::elevatedStrokeColorShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE332E8 = 3;
      unk_1ECE332F0 = &ggl::elevatedStrokeColorShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE332F8 = 0;
      unk_1ECE33300 = &ggl::elevatedStrokeColorShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE33308 = 1;
      unk_1ECE33310 = &ggl::elevatedStrokeColorShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE33320 = 0;
      unk_1ECE33328 = 0;
      qword_1ECE33318 = 1;
    }
  }
}

void ggl::elevatedStrokeColorShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::elevatedStrokeColorShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("ElevatedStrokeColorShaderVertex");
      *(_DWORD *)algn_1ECE330FC = 0;
      qword_1ECE33100 = (uint64_t)"ElevatedStrokeColorShader";
      unk_1ECE33108 = ggl::elevatedStrokeColorShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE33110 = 1;
      unk_1ECE33118 = &ggl::elevatedStrokeColorShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE33120 = 4;
      unk_1ECE33128 = &ggl::elevatedStrokeColorShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE33130 = 0;
      unk_1ECE33138 = &ggl::elevatedStrokeColorShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE33140 = 0;
      unk_1ECE33148 = &ggl::elevatedStrokeColorShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE33158 = 0;
      unk_1ECE33160 = 0;
      qword_1ECE33150 = 0;
    }
  }
}

void ggl::DiffuseLandmarkShader::typedReflection(ggl::DiffuseLandmarkShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::DiffuseLandmarkShader::typedReflection(void)::ref = (uint64_t)"DiffuseLandmarkShader";
      ggl::diffuseLandmarkShaderVertexFunctionDescriptor(v2);
      qword_1ECE3A3F8 = (uint64_t)&ggl::diffuseLandmarkShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<28ul>("DiffuseLandmarkShaderVertex");
      dword_1ECE3A400 = (int)v3;
      ggl::diffuseLandmarkShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3A408 = (uint64_t)&ggl::diffuseLandmarkShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3A410 = ggl::crc32::compute<30ul>("DiffuseLandmarkShaderFragment");
      qword_1ECE3A418 = (uint64_t)ggl::diffuseLandmarkShaderShaderConstants(void)::ref;
      unk_1ECE3A420 = 7;
      qword_1ECE3A428 = (uint64_t)ggl::diffuseLandmarkShaderShaderTextures(void)::ref;
      unk_1ECE3A430 = 1;
      qword_1ECE3A438 = (uint64_t)&ggl::diffuseLandmarkShaderShaderSamplers(void)::ref;
      unk_1ECE3A440 = 1;
    }
  }
}

void ggl::diffuseLandmarkShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::diffuseLandmarkShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("DiffuseLandmarkShaderFragment");
      *(_DWORD *)algn_1ECE3FF0C = 1;
      qword_1ECE3FF10 = (uint64_t)"DiffuseLandmarkShader";
      unk_1ECE3FF18 = 0;
      qword_1ECE3FF20 = 0;
      unk_1ECE3FF28 = &ggl::diffuseLandmarkShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3FF30 = 3;
      unk_1ECE3FF38 = &ggl::diffuseLandmarkShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3FF40 = 0;
      unk_1ECE3FF48 = &ggl::diffuseLandmarkShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3FF50 = 1;
      unk_1ECE3FF58 = &ggl::diffuseLandmarkShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3FF68 = 0;
      unk_1ECE3FF70 = 0;
      qword_1ECE3FF60 = 1;
    }
  }
}

void ggl::diffuseLandmarkShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::diffuseLandmarkShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("DiffuseLandmarkShaderVertex");
      *(_DWORD *)algn_1ECE3EFF4 = 0;
      qword_1ECE3EFF8 = (uint64_t)"DiffuseLandmarkShader";
      unk_1ECE3F000 = ggl::diffuseLandmarkShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3F008 = 1;
      unk_1ECE3F010 = &ggl::diffuseLandmarkShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3F018 = 6;
      unk_1ECE3F020 = &ggl::diffuseLandmarkShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3F028 = 0;
      unk_1ECE3F030 = &ggl::diffuseLandmarkShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3F038 = 0;
      unk_1ECE3F040 = &ggl::diffuseLandmarkShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3F050 = 0;
      unk_1ECE3F058 = 0;
      qword_1ECE3F048 = 0;
    }
  }
}

void ggl::DaVinciRibbonShader::typedReflection(ggl::DaVinciRibbonShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::DaVinciRibbonShader::typedReflection(void)::ref = (uint64_t)"DaVinciRibbonShader";
      ggl::daVinciRibbonShaderVertexFunctionDescriptor(v2);
      qword_1ECE44220 = (uint64_t)&ggl::daVinciRibbonShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<26ul>("DaVinciRibbonShaderVertex");
      dword_1ECE44228 = (int)v3;
      ggl::daVinciRibbonShaderFragmentFunctionDescriptor(v3);
      qword_1ECE44230 = (uint64_t)&ggl::daVinciRibbonShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE44238 = ggl::crc32::compute<28ul>("DaVinciRibbonShaderFragment");
      qword_1ECE44240 = (uint64_t)ggl::daVinciRibbonShaderShaderConstants(void)::ref;
      unk_1ECE44248 = 11;
      qword_1ECE44250 = (uint64_t)ggl::daVinciRibbonShaderShaderTextures(void)::ref;
      unk_1ECE44258 = 4;
      qword_1ECE44260 = (uint64_t)ggl::daVinciRibbonShaderShaderSamplers(void)::ref;
      unk_1ECE44268 = 4;
    }
  }
}

void ggl::daVinciRibbonShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::daVinciRibbonShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("DaVinciRibbonShaderFragment");
      *(_DWORD *)algn_1ECE449F4 = 1;
      qword_1ECE449F8 = (uint64_t)"DaVinciRibbonShader";
      unk_1ECE44A00 = 0;
      qword_1ECE44A08 = 0;
      unk_1ECE44A10 = &ggl::daVinciRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE44A18 = 4;
      unk_1ECE44A20 = &ggl::daVinciRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE44A28 = 0;
      unk_1ECE44A30 = &ggl::daVinciRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE44A38 = 3;
      unk_1ECE44A40 = &ggl::daVinciRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE44A50 = 0;
      unk_1ECE44A58 = 0;
      qword_1ECE44A48 = 3;
    }
  }
}

void ggl::daVinciRibbonShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::daVinciRibbonShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("DaVinciRibbonShaderVertex");
      *(_DWORD *)algn_1ECE4473C = 0;
      qword_1ECE44740 = (uint64_t)"DaVinciRibbonShader";
      unk_1ECE44748 = ggl::daVinciRibbonShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE44750 = 1;
      unk_1ECE44758 = &ggl::daVinciRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE44760 = 8;
      unk_1ECE44768 = &ggl::daVinciRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE44770 = 0;
      unk_1ECE44778 = &ggl::daVinciRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE44780 = 1;
      unk_1ECE44788 = &ggl::daVinciRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE44798 = 0;
      unk_1ECE447A0 = 0;
      qword_1ECE44790 = 1;
    }
  }
}

void ggl::DaVinciDecalShader::typedReflection(ggl::DaVinciDecalShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::DaVinciDecalShader::typedReflection(void)::ref = (uint64_t)"DaVinciDecalShader";
      ggl::daVinciDecalShaderVertexFunctionDescriptor(v2);
      qword_1ECE44108 = (uint64_t)&ggl::daVinciDecalShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<25ul>("DaVinciDecalShaderVertex");
      dword_1ECE44110 = (int)v3;
      ggl::daVinciDecalShaderFragmentFunctionDescriptor(v3);
      qword_1ECE44118 = (uint64_t)&ggl::daVinciDecalShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE44120 = ggl::crc32::compute<27ul>("DaVinciDecalShaderFragment");
      qword_1ECE44128 = (uint64_t)ggl::daVinciDecalShaderShaderConstants(void)::ref;
      unk_1ECE44130 = 9;
      qword_1ECE44138 = (uint64_t)ggl::daVinciDecalShaderShaderTextures(void)::ref;
      unk_1ECE44140 = 4;
      qword_1ECE44148 = (uint64_t)ggl::daVinciDecalShaderShaderSamplers(void)::ref;
      unk_1ECE44150 = 4;
    }
  }
}

void ggl::daVinciDecalShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::daVinciDecalShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("DaVinciDecalShaderFragment");
      *(_DWORD *)algn_1ECE44824 = 1;
      qword_1ECE44828 = (uint64_t)"DaVinciDecalShader";
      unk_1ECE44830 = 0;
      qword_1ECE44838 = 0;
      unk_1ECE44840 = &ggl::daVinciDecalShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE44848 = 5;
      unk_1ECE44850 = &ggl::daVinciDecalShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE44858 = 0;
      unk_1ECE44860 = &ggl::daVinciDecalShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE44868 = 4;
      unk_1ECE44870 = &ggl::daVinciDecalShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE44880 = 0;
      unk_1ECE44888 = 0;
      qword_1ECE44878 = 4;
    }
  }
}

void ggl::daVinciDecalShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::daVinciDecalShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("DaVinciDecalShaderVertex");
      *(_DWORD *)algn_1ECE44564 = 0;
      qword_1ECE44568 = (uint64_t)"DaVinciDecalShader";
      unk_1ECE44570 = ggl::daVinciDecalShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE44578 = 2;
      unk_1ECE44580 = &ggl::daVinciDecalShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE44588 = 4;
      unk_1ECE44590 = &ggl::daVinciDecalShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE44598 = 1;
      unk_1ECE445A0 = &ggl::daVinciDecalShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE445A8 = 0;
      unk_1ECE445B0 = &ggl::daVinciDecalShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE445C0 = 0;
      unk_1ECE445C8 = 0;
      qword_1ECE445B8 = 0;
    }
  }
}

void ggl::ARMeshShader::typedReflection(ggl::ARMeshShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::ARMeshShader::typedReflection(void)::ref = (uint64_t)"ARMeshShader";
      ggl::aRMeshShaderVertexFunctionDescriptor(v2);
      qword_1ECE32780 = (uint64_t)&ggl::aRMeshShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<19ul>("ARMeshShaderVertex");
      dword_1ECE32788 = (int)v3;
      ggl::aRMeshShaderFragmentFunctionDescriptor(v3);
      qword_1ECE32790 = (uint64_t)&ggl::aRMeshShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE32798 = ggl::crc32::compute<21ul>("ARMeshShaderFragment");
      qword_1ECE327A0 = (uint64_t)ggl::aRMeshShaderShaderConstants(void)::ref;
      unk_1ECE327A8 = 7;
      qword_1ECE327B0 = (uint64_t)ggl::aRMeshShaderShaderTextures(void)::ref;
      unk_1ECE327B8 = 2;
      qword_1ECE327C0 = (uint64_t)ggl::aRMeshShaderShaderSamplers(void)::ref;
      unk_1ECE327C8 = 2;
    }
  }
}

void ggl::aRMeshShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::aRMeshShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("ARMeshShaderFragment");
      *(_DWORD *)algn_1ECE32D5C = 1;
      qword_1ECE32D60 = (uint64_t)"ARMeshShader";
      unk_1ECE32D68 = 0;
      qword_1ECE32D70 = 0;
      unk_1ECE32D78 = &ggl::aRMeshShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE32D80 = 4;
      unk_1ECE32D88 = &ggl::aRMeshShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE32D90 = 0;
      unk_1ECE32D98 = &ggl::aRMeshShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE32DA0 = 2;
      unk_1ECE32DA8 = &ggl::aRMeshShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE32DB8 = 0;
      unk_1ECE32DC0 = 0;
      qword_1ECE32DB0 = 2;
    }
  }
}

void ggl::aRMeshShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::aRMeshShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("ARMeshShaderVertex");
      *(_DWORD *)algn_1ECE36ADC = 0;
      qword_1ECE36AE0 = (uint64_t)"ARMeshShader";
      unk_1ECE36AE8 = ggl::aRMeshShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE36AF0 = 2;
      unk_1ECE36AF8 = &ggl::aRMeshShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE36B00 = 3;
      unk_1ECE36B08 = &ggl::aRMeshShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE36B10 = 1;
      unk_1ECE36B18 = &ggl::aRMeshShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE36B20 = 0;
      unk_1ECE36B28 = &ggl::aRMeshShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE36B38 = 0;
      unk_1ECE36B40 = 0;
      qword_1ECE36B30 = 0;
    }
  }
}

void ggl::VSPassthroughShader::typedReflection(ggl::VSPassthroughShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::VSPassthroughShader::typedReflection(void)::ref = (uint64_t)"VSPassthroughShader";
      ggl::vSPassthroughShaderVertexFunctionDescriptor(v2);
      qword_1ECE3A118 = (uint64_t)&ggl::vSPassthroughShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<26ul>("VSPassthroughShaderVertex");
      dword_1ECE3A120 = (int)v3;
      ggl::vSPassthroughShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3A128 = (uint64_t)&ggl::vSPassthroughShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3A130 = ggl::crc32::compute<28ul>("VSPassthroughShaderFragment");
      qword_1ECE3A138 = (uint64_t)&ggl::vSPassthroughShaderShaderConstants(void)::ref;
      unk_1ECE3A140 = 0;
      qword_1ECE3A148 = (uint64_t)ggl::vSPassthroughShaderShaderTextures(void)::ref;
      unk_1ECE3A150 = 2;
      qword_1ECE3A158 = (uint64_t)ggl::vSPassthroughShaderShaderSamplers(void)::ref;
      unk_1ECE3A160 = 2;
    }
  }
}

void ggl::vSPassthroughShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::vSPassthroughShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("VSPassthroughShaderFragment");
      *(_DWORD *)algn_1ECE3F64C = 1;
      qword_1ECE3F650 = (uint64_t)"VSPassthroughShader";
      unk_1ECE3F658 = 0;
      qword_1ECE3F660 = 0;
      unk_1ECE3F668 = &ggl::vSPassthroughShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3F670 = 0;
      unk_1ECE3F678 = &ggl::vSPassthroughShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3F680 = 0;
      unk_1ECE3F688 = &ggl::vSPassthroughShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3F690 = 2;
      unk_1ECE3F698 = &ggl::vSPassthroughShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3F6A8 = 0;
      unk_1ECE3F6B0 = 0;
      qword_1ECE3F6A0 = 2;
    }
  }
}

void ggl::vSPassthroughShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::vSPassthroughShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("VSPassthroughShaderVertex");
      *(_DWORD *)algn_1ECE3E7B4 = 0;
      qword_1ECE3E7B8 = (uint64_t)"VSPassthroughShader";
      unk_1ECE3E7C0 = ggl::vSPassthroughShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3E7C8 = 1;
      unk_1ECE3E7D0 = &ggl::vSPassthroughShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3E7D8 = 0;
      unk_1ECE3E7E0 = &ggl::vSPassthroughShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3E7E8 = 0;
      unk_1ECE3E7F0 = &ggl::vSPassthroughShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3E7F8 = 0;
      unk_1ECE3E800 = &ggl::vSPassthroughShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3E810 = 0;
      unk_1ECE3E818 = 0;
      qword_1ECE3E808 = 0;
    }
  }
}

void ggl::ViewStretchAlphaShader::typedReflection(ggl::ViewStretchAlphaShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::ViewStretchAlphaShader::typedReflection(void)::ref = (uint64_t)"ViewStretchAlphaShader";
      ggl::viewStretchAlphaShaderVertexFunctionDescriptor(v2);
      qword_1ECE3A9C0 = (uint64_t)&ggl::viewStretchAlphaShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<29ul>("ViewStretchAlphaShaderVertex");
      dword_1ECE3A9C8 = (int)v3;
      ggl::viewStretchAlphaShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3A9D0 = (uint64_t)&ggl::viewStretchAlphaShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3A9D8 = ggl::crc32::compute<31ul>("ViewStretchAlphaShaderFragment");
      qword_1ECE3A9E0 = (uint64_t)ggl::viewStretchAlphaShaderShaderConstants(void)::ref;
      unk_1ECE3A9E8 = 2;
      qword_1ECE3A9F0 = (uint64_t)ggl::viewStretchAlphaShaderShaderTextures(void)::ref;
      unk_1ECE3A9F8 = 1;
      qword_1ECE3AA00 = (uint64_t)&ggl::viewStretchAlphaShaderShaderSamplers(void)::ref;
      unk_1ECE3AA08 = 1;
    }
  }
}

void ggl::viewStretchAlphaShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::viewStretchAlphaShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("ViewStretchAlphaShaderFragment");
      *(_DWORD *)algn_1ECE40BB4 = 1;
      qword_1ECE40BB8 = (uint64_t)"ViewStretchAlphaShader";
      unk_1ECE40BC0 = 0;
      qword_1ECE40BC8 = 0;
      unk_1ECE40BD0 = &ggl::viewStretchAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE40BD8 = 1;
      unk_1ECE40BE0 = &ggl::viewStretchAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE40BE8 = 0;
      unk_1ECE40BF0 = &ggl::viewStretchAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE40BF8 = 1;
      unk_1ECE40C00 = &ggl::viewStretchAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE40C10 = 0;
      unk_1ECE40C18 = 0;
      qword_1ECE40C08 = 1;
    }
  }
}

void ggl::viewStretchAlphaShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::viewStretchAlphaShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("ViewStretchAlphaShaderVertex");
      *(_DWORD *)algn_1ECE3FE1C = 0;
      qword_1ECE3FE20 = (uint64_t)"ViewStretchAlphaShader";
      unk_1ECE3FE28 = ggl::viewStretchAlphaShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3FE30 = 1;
      unk_1ECE3FE38 = &ggl::viewStretchAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3FE40 = 1;
      unk_1ECE3FE48 = &ggl::viewStretchAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3FE50 = 0;
      unk_1ECE3FE58 = &ggl::viewStretchAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3FE60 = 0;
      unk_1ECE3FE68 = &ggl::viewStretchAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3FE78 = 0;
      unk_1ECE3FE80 = 0;
      qword_1ECE3FE70 = 0;
    }
  }
}

void ggl::VSCompositingShader::typedReflection(ggl::VSCompositingShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::VSCompositingShader::typedReflection(void)::ref = (uint64_t)"VSCompositingShader";
      ggl::vSCompositingShaderVertexFunctionDescriptor(v2);
      qword_1ECE3A0B8 = (uint64_t)&ggl::vSCompositingShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<26ul>("VSCompositingShaderVertex");
      dword_1ECE3A0C0 = (int)v3;
      ggl::vSCompositingShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3A0C8 = (uint64_t)&ggl::vSCompositingShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3A0D0 = ggl::crc32::compute<28ul>("VSCompositingShaderFragment");
      qword_1ECE3A0D8 = (uint64_t)ggl::vSCompositingShaderShaderConstants(void)::ref;
      unk_1ECE3A0E0 = 1;
      qword_1ECE3A0E8 = (uint64_t)ggl::vSCompositingShaderShaderTextures(void)::ref;
      unk_1ECE3A0F0 = 7;
      qword_1ECE3A0F8 = (uint64_t)ggl::vSCompositingShaderShaderSamplers(void)::ref;
      unk_1ECE3A100 = 7;
    }
  }
}

void ggl::vSCompositingShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::vSCompositingShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("VSCompositingShaderFragment");
      *(_DWORD *)algn_1ECE3F5DC = 1;
      qword_1ECE3F5F0 = 0;
      unk_1ECE3F5F8 = &ggl::vSCompositingShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3F5E0 = (uint64_t)"VSCompositingShader";
      unk_1ECE3F5E8 = 0;
      qword_1ECE3F600 = 1;
      unk_1ECE3F608 = &ggl::vSCompositingShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3F610 = 0;
      unk_1ECE3F618 = &ggl::vSCompositingShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3F620 = 7;
      unk_1ECE3F628 = &ggl::vSCompositingShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3F638 = 0;
      unk_1ECE3F640 = 0;
      qword_1ECE3F630 = 7;
    }
  }
}

void ggl::vSCompositingShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::vSCompositingShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("VSCompositingShaderVertex");
      *(_DWORD *)algn_1ECE3E744 = 0;
      qword_1ECE3E748 = (uint64_t)"VSCompositingShader";
      unk_1ECE3E750 = ggl::vSCompositingShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3E758 = 1;
      unk_1ECE3E760 = &ggl::vSCompositingShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3E768 = 0;
      unk_1ECE3E770 = &ggl::vSCompositingShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3E778 = 0;
      unk_1ECE3E780 = &ggl::vSCompositingShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3E788 = 0;
      unk_1ECE3E790 = &ggl::vSCompositingShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3E7A0 = 0;
      unk_1ECE3E7A8 = 0;
      qword_1ECE3E798 = 0;
    }
  }
}

void ggl::ShrinkBlur4XShader::typedReflection(ggl::ShrinkBlur4XShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::ShrinkBlur4XShader::typedReflection(void)::ref = (uint64_t)"ShrinkBlur4XShader";
      ggl::shrinkBlur4XShaderVertexFunctionDescriptor(v2);
      qword_1ECE39C18 = (uint64_t)&ggl::shrinkBlur4XShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<25ul>("ShrinkBlur4XShaderVertex");
      dword_1ECE39C20 = (int)v3;
      ggl::shrinkBlur4XShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39C28 = (uint64_t)&ggl::shrinkBlur4XShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39C30 = ggl::crc32::compute<27ul>("ShrinkBlur4XShaderFragment");
      qword_1ECE39C38 = (uint64_t)&ggl::shrinkBlur4XShaderShaderConstants(void)::ref;
      unk_1ECE39C40 = 0;
      qword_1ECE39C48 = (uint64_t)ggl::shrinkBlur4XShaderShaderTextures(void)::ref;
      unk_1ECE39C50 = 1;
      qword_1ECE39C58 = (uint64_t)&ggl::shrinkBlur4XShaderShaderSamplers(void)::ref;
      unk_1ECE39C60 = 1;
    }
  }
}

void ggl::shrinkBlur4XShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::shrinkBlur4XShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("ShrinkBlur4XShaderFragment");
      *(_DWORD *)algn_1ECE3ECBC = 1;
      qword_1ECE3ECC0 = (uint64_t)"ShrinkBlur4XShader";
      unk_1ECE3ECC8 = 0;
      qword_1ECE3ECD0 = 0;
      unk_1ECE3ECD8 = &ggl::shrinkBlur4XShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3ECE0 = 0;
      unk_1ECE3ECE8 = &ggl::shrinkBlur4XShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3ECF0 = 0;
      unk_1ECE3ECF8 = &ggl::shrinkBlur4XShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3ED00 = 1;
      unk_1ECE3ED08 = &ggl::shrinkBlur4XShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3ED18 = 0;
      unk_1ECE3ED20 = 0;
      qword_1ECE3ED10 = 1;
    }
  }
}

void ggl::shrinkBlur4XShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::shrinkBlur4XShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("ShrinkBlur4XShaderVertex");
      *(_DWORD *)algn_1ECE3E014 = 0;
      qword_1ECE3E018 = (uint64_t)"ShrinkBlur4XShader";
      unk_1ECE3E020 = ggl::shrinkBlur4XShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3E028 = 1;
      unk_1ECE3E030 = &ggl::shrinkBlur4XShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3E038 = 0;
      unk_1ECE3E040 = &ggl::shrinkBlur4XShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3E048 = 0;
      unk_1ECE3E050 = &ggl::shrinkBlur4XShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3E058 = 0;
      unk_1ECE3E060 = &ggl::shrinkBlur4XShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3E070 = 0;
      unk_1ECE3E078 = 0;
      qword_1ECE3E068 = 0;
    }
  }
}

void ggl::VSSpriteShader::typedReflection(ggl::VSSpriteShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::VSSpriteShader::typedReflection(void)::ref = (uint64_t)"VSSpriteShader";
      ggl::vSSpriteShaderVertexFunctionDescriptor(v2);
      qword_1ECE39340 = (uint64_t)&ggl::vSSpriteShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<21ul>("VSSpriteShaderVertex");
      dword_1ECE39348 = (int)v3;
      ggl::vSSpriteShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39350 = (uint64_t)&ggl::vSSpriteShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39358 = ggl::crc32::compute<23ul>("VSSpriteShaderFragment");
      qword_1ECE39360 = (uint64_t)ggl::vSSpriteShaderShaderConstants(void)::ref;
      unk_1ECE39368 = 1;
      qword_1ECE39370 = (uint64_t)ggl::vSSpriteShaderShaderTextures(void)::ref;
      unk_1ECE39378 = 2;
      qword_1ECE39380 = (uint64_t)ggl::vSSpriteShaderShaderSamplers(void)::ref;
      unk_1ECE39388 = 2;
    }
  }
}

void ggl::vSSpriteShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::vSSpriteShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<23ul>("VSSpriteShaderFragment");
      *(_DWORD *)algn_1ECE3D794 = 1;
      qword_1ECE3D798 = (uint64_t)"VSSpriteShader";
      unk_1ECE3D7A0 = 0;
      qword_1ECE3D7A8 = 0;
      unk_1ECE3D7B0 = &ggl::vSSpriteShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3D7B8 = 0;
      unk_1ECE3D7C0 = &ggl::vSSpriteShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3D7C8 = 0;
      unk_1ECE3D7D0 = &ggl::vSSpriteShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3D7D8 = 2;
      unk_1ECE3D7E0 = &ggl::vSSpriteShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3D7F0 = 0;
      unk_1ECE3D7F8 = 0;
      qword_1ECE3D7E8 = 2;
    }
  }
}

void ggl::vSSpriteShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::vSSpriteShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("VSSpriteShaderVertex");
      *(_DWORD *)algn_1ECE3D23C = 0;
      qword_1ECE3D240 = (uint64_t)"VSSpriteShader";
      unk_1ECE3D248 = ggl::vSSpriteShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3D250 = 1;
      unk_1ECE3D258 = &ggl::vSSpriteShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3D260 = 1;
      unk_1ECE3D268 = &ggl::vSSpriteShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3D270 = 0;
      unk_1ECE3D278 = &ggl::vSSpriteShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3D280 = 0;
      unk_1ECE3D288 = &ggl::vSSpriteShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3D298 = 0;
      unk_1ECE3D2A0 = 0;
      qword_1ECE3D290 = 0;
    }
  }
}

void ggl::BlurYShader::typedReflection(ggl::BlurYShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::BlurYShader::typedReflection(void)::ref = (uint64_t)"BlurYShader";
      ggl::blurYShaderVertexFunctionDescriptor(v2);
      qword_1ECE38C58 = (uint64_t)&ggl::blurYShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<18ul>("BlurYShaderVertex");
      dword_1ECE38C60 = (int)v3;
      ggl::blurYShaderFragmentFunctionDescriptor(v3);
      qword_1ECE38C68 = (uint64_t)&ggl::blurYShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE38C70 = ggl::crc32::compute<20ul>("BlurYShaderFragment");
      qword_1ECE38C78 = (uint64_t)&ggl::blurYShaderShaderConstants(void)::ref;
      unk_1ECE38C80 = 0;
      qword_1ECE38C88 = (uint64_t)ggl::blurYShaderShaderTextures(void)::ref;
      unk_1ECE38C90 = 1;
      qword_1ECE38C98 = (uint64_t)ggl::blurYShaderShaderSamplers(void)::ref;
      unk_1ECE38CA0 = 1;
    }
  }
}

void ggl::blurYShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::blurYShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<20ul>("BlurYShaderFragment");
      *(_DWORD *)algn_1ECE3CD5C = 1;
      qword_1ECE3CD60 = (uint64_t)"BlurYShader";
      unk_1ECE3CD68 = 0;
      qword_1ECE3CD70 = 0;
      unk_1ECE3CD78 = &ggl::blurYShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3CD80 = 0;
      unk_1ECE3CD88 = &ggl::blurYShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3CD90 = 0;
      unk_1ECE3CD98 = &ggl::blurYShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3CDA0 = 1;
      unk_1ECE3CDA8 = &ggl::blurYShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3CDB8 = 0;
      unk_1ECE3CDC0 = 0;
      qword_1ECE3CDB0 = 1;
    }
  }
}

void ggl::blurYShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::blurYShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<18ul>("BlurYShaderVertex");
      *(_DWORD *)algn_1ECE3C694 = 0;
      qword_1ECE3C698 = (uint64_t)"BlurYShader";
      unk_1ECE3C6A0 = ggl::blurYShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3C6A8 = 1;
      unk_1ECE3C6B0 = &ggl::blurYShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3C6B8 = 0;
      unk_1ECE3C6C0 = &ggl::blurYShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3C6C8 = 0;
      unk_1ECE3C6D0 = &ggl::blurYShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3C6D8 = 0;
      unk_1ECE3C6E0 = &ggl::blurYShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3C6F0 = 0;
      unk_1ECE3C6F8 = 0;
      qword_1ECE3C6E8 = 0;
    }
  }
}

void ggl::BlurXShader::typedReflection(ggl::BlurXShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::BlurXShader::typedReflection(void)::ref = (uint64_t)"BlurXShader";
      ggl::blurXShaderVertexFunctionDescriptor(v2);
      qword_1ECE38BF8 = (uint64_t)&ggl::blurXShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<18ul>("BlurXShaderVertex");
      dword_1ECE38C00 = (int)v3;
      ggl::blurXShaderFragmentFunctionDescriptor(v3);
      qword_1ECE38C08 = (uint64_t)&ggl::blurXShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE38C10 = ggl::crc32::compute<20ul>("BlurXShaderFragment");
      qword_1ECE38C18 = (uint64_t)&ggl::blurXShaderShaderConstants(void)::ref;
      unk_1ECE38C20 = 0;
      qword_1ECE38C28 = (uint64_t)ggl::blurXShaderShaderTextures(void)::ref;
      unk_1ECE38C30 = 1;
      qword_1ECE38C38 = (uint64_t)ggl::blurXShaderShaderSamplers(void)::ref;
      unk_1ECE38C40 = 1;
    }
  }
}

void ggl::blurXShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::blurXShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<20ul>("BlurXShaderFragment");
      *(_DWORD *)algn_1ECE3CCEC = 1;
      qword_1ECE3CCF0 = (uint64_t)"BlurXShader";
      unk_1ECE3CCF8 = 0;
      qword_1ECE3CD00 = 0;
      unk_1ECE3CD08 = &ggl::blurXShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3CD10 = 0;
      unk_1ECE3CD18 = &ggl::blurXShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3CD20 = 0;
      unk_1ECE3CD28 = &ggl::blurXShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3CD30 = 1;
      unk_1ECE3CD38 = &ggl::blurXShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3CD48 = 0;
      unk_1ECE3CD50 = 0;
      qword_1ECE3CD40 = 1;
    }
  }
}

void ggl::blurXShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::blurXShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<18ul>("BlurXShaderVertex");
      *(_DWORD *)algn_1ECE3C624 = 0;
      qword_1ECE3C628 = (uint64_t)"BlurXShader";
      unk_1ECE3C630 = ggl::blurXShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3C638 = 1;
      unk_1ECE3C640 = &ggl::blurXShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3C648 = 0;
      unk_1ECE3C650 = &ggl::blurXShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3C658 = 0;
      unk_1ECE3C660 = &ggl::blurXShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3C668 = 0;
      unk_1ECE3C670 = &ggl::blurXShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3C680 = 0;
      unk_1ECE3C688 = 0;
      qword_1ECE3C678 = 0;
    }
  }
}

void ggl::ViewShader::typedReflection(ggl::ViewShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::ViewShader::typedReflection(void)::ref = (uint64_t)"ViewShader";
      ggl::viewShaderVertexFunctionDescriptor(v2);
      qword_1ECE38BA0 = (uint64_t)&ggl::viewShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<17ul>("ViewShaderVertex");
      dword_1ECE38BA8 = (int)v3;
      ggl::viewShaderFragmentFunctionDescriptor(v3);
      qword_1ECE38BB0 = (uint64_t)&ggl::viewShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE38BB8 = ggl::crc32::compute<19ul>("ViewShaderFragment");
      qword_1ECE38BC0 = (uint64_t)ggl::viewShaderShaderConstants(void)::ref;
      unk_1ECE38BC8 = 2;
      qword_1ECE38BD0 = (uint64_t)ggl::viewShaderShaderTextures(void)::ref;
      unk_1ECE38BD8 = 1;
      qword_1ECE38BE0 = (uint64_t)ggl::viewShaderShaderSamplers(void)::ref;
      unk_1ECE38BE8 = 1;
    }
  }
}

void ggl::viewShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::viewShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("ViewShaderFragment");
      *(_DWORD *)algn_1ECE3CC74 = 1;
      qword_1ECE3CC78 = (uint64_t)"ViewShader";
      unk_1ECE3CC80 = 0;
      qword_1ECE3CC88 = 0;
      unk_1ECE3CC90 = &ggl::viewShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3CC98 = 1;
      unk_1ECE3CCA0 = &ggl::viewShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3CCA8 = 0;
      unk_1ECE3CCB0 = &ggl::viewShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3CCB8 = 1;
      unk_1ECE3CCC0 = &ggl::viewShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3CCD0 = 0;
      unk_1ECE3CCD8 = 0;
      qword_1ECE3CCC8 = 1;
    }
  }
}

void ggl::viewShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::viewShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<17ul>("ViewShaderVertex");
      *(_DWORD *)algn_1ECE3C5AC = 0;
      qword_1ECE3C5B0 = (uint64_t)"ViewShader";
      unk_1ECE3C5B8 = ggl::viewShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3C5C0 = 1;
      unk_1ECE3C5C8 = &ggl::viewShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3C5D0 = 1;
      unk_1ECE3C5D8 = &ggl::viewShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3C5E0 = 0;
      unk_1ECE3C5E8 = &ggl::viewShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3C5F0 = 0;
      unk_1ECE3C5F8 = &ggl::viewShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3C608 = 0;
      unk_1ECE3C610 = 0;
      qword_1ECE3C600 = 0;
    }
  }
}

id VKRasterTileOverlayTileLoader()
{
  if (VKRasterTileOverlayTileLoader::onceToken != -1)
    dispatch_once(&VKRasterTileOverlayTileLoader::onceToken, &__block_literal_global_38318);
  return (id)VKRasterTileOverlayTileLoader::_loader;
}

void ggl::standardPostchainFGBlurShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::standardPostchainFGBlurShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("StandardPostchainFGBlurShaderFragment");
      *(_DWORD *)algn_1ECE3549C = 1;
      qword_1ECE354B0 = 0;
      unk_1ECE354B8 = &ggl::standardPostchainFGBlurShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE354A0 = (uint64_t)"StandardPostchainFGBlurShader";
      unk_1ECE354A8 = 0;
      qword_1ECE354C0 = 1;
      unk_1ECE354C8 = &ggl::standardPostchainFGBlurShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE354D0 = 0;
      unk_1ECE354D8 = &ggl::standardPostchainFGBlurShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE354E0 = 2;
      unk_1ECE354E8 = &ggl::standardPostchainFGBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE354F8 = 0;
      unk_1ECE35500 = 0;
      qword_1ECE354F0 = 2;
    }
  }
}

void ggl::standardPostchainBGBlurShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::standardPostchainBGBlurShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("StandardPostchainBGBlurShaderFragment");
      *(_DWORD *)algn_1ECE3542C = 1;
      qword_1ECE35430 = (uint64_t)"StandardPostchainBGBlurShader";
      unk_1ECE35438 = 0;
      qword_1ECE35440 = 0;
      unk_1ECE35448 = &ggl::standardPostchainBGBlurShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE35450 = 1;
      unk_1ECE35458 = &ggl::standardPostchainBGBlurShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE35460 = 0;
      unk_1ECE35468 = &ggl::standardPostchainBGBlurShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE35470 = 1;
      unk_1ECE35478 = &ggl::standardPostchainBGBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE35488 = 0;
      unk_1ECE35490 = 0;
      qword_1ECE35480 = 1;
    }
  }
}

void ggl::polygonOverlayAntialiasShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::polygonOverlayAntialiasShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("PolygonOverlayAntialiasShaderFragment");
      *(_DWORD *)algn_1ECE42BDC = 1;
      qword_1ECE42BE0 = (uint64_t)"PolygonOverlayAntialiasShader";
      unk_1ECE42BE8 = 0;
      qword_1ECE42BF0 = 0;
      unk_1ECE42BF8 = &ggl::polygonOverlayAntialiasShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE42C00 = 2;
      unk_1ECE42C08 = &ggl::polygonOverlayAntialiasShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE42C10 = 0;
      unk_1ECE42C18 = &ggl::polygonOverlayAntialiasShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE42C20 = 1;
      unk_1ECE42C28 = &ggl::polygonOverlayAntialiasShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE42C38 = 0;
      unk_1ECE42C40 = 0;
      qword_1ECE42C30 = 1;
    }
  }
}

void ggl::horizontalVenue3DStrokeShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::horizontalVenue3DStrokeShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("HorizontalVenue3DStrokeShaderFragment");
      *(_DWORD *)algn_1ECE42AF4 = 1;
      qword_1ECE42AF8 = (uint64_t)"HorizontalVenue3DStrokeShader";
      unk_1ECE42B00 = 0;
      qword_1ECE42B08 = 0;
      unk_1ECE42B10 = &ggl::horizontalVenue3DStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE42B18 = 0;
      unk_1ECE42B20 = &ggl::horizontalVenue3DStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE42B28 = 0;
      unk_1ECE42B30 = &ggl::horizontalVenue3DStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE42B38 = 1;
      unk_1ECE42B40 = &ggl::horizontalVenue3DStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE42B50 = 0;
      unk_1ECE42B58 = 0;
      qword_1ECE42B48 = 1;
    }
  }
}

void ggl::glyph3dLowPrecisionHaloShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::glyph3dLowPrecisionHaloShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("Glyph3dLowPrecisionHaloShaderFragment");
      *(_DWORD *)algn_1ECE42A84 = 1;
      qword_1ECE42A88 = (uint64_t)"Glyph3dLowPrecisionHaloShader";
      unk_1ECE42A90 = 0;
      qword_1ECE42A98 = 0;
      unk_1ECE42AA0 = &ggl::glyph3dLowPrecisionHaloShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE42AA8 = 2;
      unk_1ECE42AB0 = &ggl::glyph3dLowPrecisionHaloShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE42AB8 = 0;
      unk_1ECE42AC0 = &ggl::glyph3dLowPrecisionHaloShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE42AC8 = 1;
      unk_1ECE42AD0 = &ggl::glyph3dLowPrecisionHaloShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE42AE0 = 0;
      unk_1ECE42AE8 = 0;
      qword_1ECE42AD8 = 1;
    }
  }
}

void ggl::texturedAnimatedRibbonShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::texturedAnimatedRibbonShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<37ul>("TexturedAnimatedRibbonShaderFragment");
      *(_DWORD *)algn_1ECE3342C = 1;
      qword_1ECE33440 = 0;
      unk_1ECE33448 = &ggl::texturedAnimatedRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE33430 = (uint64_t)"TexturedAnimatedRibbonShader";
      unk_1ECE33438 = 0;
      qword_1ECE33450 = 1;
      unk_1ECE33458 = &ggl::texturedAnimatedRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE33460 = 0;
      unk_1ECE33468 = &ggl::texturedAnimatedRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE33470 = 2;
      unk_1ECE33478 = &ggl::texturedAnimatedRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE33488 = 0;
      unk_1ECE33490 = 0;
      qword_1ECE33480 = 2;
    }
  }
}

void ggl::daVinciGroundShadowMapShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::daVinciGroundShadowMapShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<37ul>("DaVinciGroundShadowMapShaderFragment");
      *(_DWORD *)algn_1ECE44CB4 = 1;
      qword_1ECE44CB8 = (uint64_t)"DaVinciGroundShadowMapShader";
      unk_1ECE44CC0 = 0;
      qword_1ECE44CC8 = 0;
      unk_1ECE44CD0 = &ggl::daVinciGroundShadowMapShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE44CD8 = 2;
      unk_1ECE44CE0 = &ggl::daVinciGroundShadowMapShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE44CE8 = 0;
      unk_1ECE44CF0 = &ggl::daVinciGroundShadowMapShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE44CF8 = 0;
      unk_1ECE44D00 = &ggl::daVinciGroundShadowMapShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE44D10 = 0;
      unk_1ECE44D18 = 0;
      qword_1ECE44D08 = 0;
    }
  }
}

void ggl::standardPostchainFGBlurShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::standardPostchainFGBlurShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("StandardPostchainFGBlurShaderVertex");
      *(_DWORD *)algn_1ECE35174 = 0;
      qword_1ECE35178 = (uint64_t)"StandardPostchainFGBlurShader";
      unk_1ECE35180 = ggl::standardPostchainFGBlurShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE35188 = 1;
      unk_1ECE35190 = &ggl::standardPostchainFGBlurShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE35198 = 0;
      unk_1ECE351A0 = &ggl::standardPostchainFGBlurShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE351A8 = 0;
      unk_1ECE351B0 = &ggl::standardPostchainFGBlurShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE351B8 = 0;
      unk_1ECE351C0 = &ggl::standardPostchainFGBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE351D0 = 0;
      unk_1ECE351D8 = 0;
      qword_1ECE351C8 = 0;
    }
  }
}

void ggl::standardPostchainBGBlurShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::standardPostchainBGBlurShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("StandardPostchainBGBlurShaderVertex");
      *(_DWORD *)algn_1ECE35104 = 0;
      qword_1ECE35108 = (uint64_t)"StandardPostchainBGBlurShader";
      unk_1ECE35110 = ggl::standardPostchainBGBlurShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE35118 = 1;
      unk_1ECE35120 = &ggl::standardPostchainBGBlurShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE35128 = 0;
      unk_1ECE35130 = &ggl::standardPostchainBGBlurShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE35138 = 0;
      unk_1ECE35140 = &ggl::standardPostchainBGBlurShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE35148 = 0;
      unk_1ECE35150 = &ggl::standardPostchainBGBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE35160 = 0;
      unk_1ECE35168 = 0;
      qword_1ECE35158 = 0;
    }
  }
}

void ggl::polygonOverlayAntialiasShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::polygonOverlayAntialiasShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("PolygonOverlayAntialiasShaderVertex");
      *(_DWORD *)algn_1ECE42334 = 0;
      qword_1ECE42338 = (uint64_t)"PolygonOverlayAntialiasShader";
      unk_1ECE42340 = ggl::polygonOverlayAntialiasShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE42348 = 1;
      unk_1ECE42350 = &ggl::polygonOverlayAntialiasShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE42358 = 3;
      unk_1ECE42360 = &ggl::polygonOverlayAntialiasShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE42368 = 0;
      unk_1ECE42370 = &ggl::polygonOverlayAntialiasShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE42378 = 0;
      unk_1ECE42380 = &ggl::polygonOverlayAntialiasShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE42390 = 0;
      unk_1ECE42398 = 0;
      qword_1ECE42388 = 0;
    }
  }
}

void ggl::horizontalVenue3DStrokeShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::horizontalVenue3DStrokeShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("HorizontalVenue3DStrokeShaderVertex");
      *(_DWORD *)algn_1ECE421DC = 0;
      qword_1ECE421E0 = (uint64_t)"HorizontalVenue3DStrokeShader";
      unk_1ECE421E8 = ggl::horizontalVenue3DStrokeShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE421F0 = 1;
      unk_1ECE421F8 = &ggl::horizontalVenue3DStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE42200 = 2;
      unk_1ECE42208 = &ggl::horizontalVenue3DStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE42210 = 0;
      unk_1ECE42218 = &ggl::horizontalVenue3DStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE42220 = 0;
      unk_1ECE42228 = &ggl::horizontalVenue3DStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE42238 = 0;
      unk_1ECE42240 = 0;
      qword_1ECE42230 = 0;
    }
  }
}

void ggl::glyph3dLowPrecisionHaloShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::glyph3dLowPrecisionHaloShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("Glyph3dLowPrecisionHaloShaderVertex");
      *(_DWORD *)algn_1ECE4216C = 0;
      qword_1ECE42170 = (uint64_t)"Glyph3dLowPrecisionHaloShader";
      unk_1ECE42178 = ggl::glyph3dLowPrecisionHaloShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE42180 = 1;
      unk_1ECE42188 = &ggl::glyph3dLowPrecisionHaloShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE42190 = 4;
      unk_1ECE42198 = &ggl::glyph3dLowPrecisionHaloShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE421A0 = 0;
      unk_1ECE421A8 = &ggl::glyph3dLowPrecisionHaloShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE421B0 = 2;
      unk_1ECE421B8 = &ggl::glyph3dLowPrecisionHaloShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE421C8 = 0;
      unk_1ECE421D0 = 0;
      qword_1ECE421C0 = 2;
    }
  }
}

void ggl::foggedDiffuseBuildingShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::foggedDiffuseBuildingShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("FoggedDiffuseBuildingShaderFragment");
      *(_DWORD *)algn_1ECE42084 = 1;
      qword_1ECE42088 = (uint64_t)"FoggedDiffuseBuildingShader";
      unk_1ECE42090 = 0;
      qword_1ECE42098 = 0;
      unk_1ECE420A0 = &ggl::foggedDiffuseBuildingShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE420A8 = 3;
      unk_1ECE420B0 = &ggl::foggedDiffuseBuildingShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE420B8 = 0;
      unk_1ECE420C0 = &ggl::foggedDiffuseBuildingShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE420C8 = 1;
      unk_1ECE420D0 = &ggl::foggedDiffuseBuildingShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE420E0 = 0;
      unk_1ECE420E8 = 0;
      qword_1ECE420D8 = 1;
    }
  }
}

void ggl::texturedAnimatedRibbonShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::texturedAnimatedRibbonShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<35ul>("TexturedAnimatedRibbonShaderVertex");
      *(_DWORD *)algn_1ECE333B4 = 0;
      qword_1ECE333B8 = (uint64_t)"TexturedAnimatedRibbonShader";
      unk_1ECE333C0 = ggl::texturedAnimatedRibbonShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE333C8 = 1;
      unk_1ECE333D0 = &ggl::texturedAnimatedRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE333D8 = 3;
      unk_1ECE333E0 = &ggl::texturedAnimatedRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE333E8 = 0;
      unk_1ECE333F0 = &ggl::texturedAnimatedRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE333F8 = 0;
      unk_1ECE33400 = &ggl::texturedAnimatedRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE33410 = 0;
      unk_1ECE33418 = 0;
      qword_1ECE33408 = 0;
    }
  }
}

void ggl::daVinciGroundShadowMapShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::daVinciGroundShadowMapShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<35ul>("DaVinciGroundShadowMapShaderVertex");
      *(_DWORD *)algn_1ECE44C3C = 0;
      qword_1ECE44C40 = (uint64_t)"DaVinciGroundShadowMapShader";
      unk_1ECE44C48 = ggl::daVinciGroundShadowMapShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE44C50 = 3;
      unk_1ECE44C58 = &ggl::daVinciGroundShadowMapShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE44C60 = 6;
      unk_1ECE44C68 = &ggl::daVinciGroundShadowMapShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE44C70 = 2;
      unk_1ECE44C78 = &ggl::daVinciGroundShadowMapShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE44C80 = 0;
      unk_1ECE44C88 = &ggl::daVinciGroundShadowMapShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE44C98 = 0;
      unk_1ECE44CA0 = 0;
      qword_1ECE44C90 = 0;
    }
  }
}

void ggl::specularBuildingTopShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::specularBuildingTopShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("SpecularBuildingTopShaderFragment");
      *(_DWORD *)algn_1ECE41B84 = 1;
      qword_1ECE41B88 = (uint64_t)"SpecularBuildingTopShader";
      unk_1ECE41B90 = 0;
      qword_1ECE41B98 = 0;
      unk_1ECE41BA0 = &ggl::specularBuildingTopShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41BA8 = 4;
      unk_1ECE41BB0 = &ggl::specularBuildingTopShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41BB8 = 0;
      unk_1ECE41BC0 = &ggl::specularBuildingTopShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41BC8 = 0;
      unk_1ECE41BD0 = &ggl::specularBuildingTopShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41BE0 = 0;
      unk_1ECE41BE8 = 0;
      qword_1ECE41BD8 = 0;
    }
  }
}

void ggl::singlePassRouteLineShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::singlePassRouteLineShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("SinglePassRouteLineShaderFragment");
      *(_DWORD *)algn_1ECE3333C = 1;
      qword_1ECE33340 = (uint64_t)"SinglePassRouteLineShader";
      unk_1ECE33348 = 0;
      qword_1ECE33350 = 0;
      unk_1ECE33358 = &ggl::singlePassRouteLineShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE33360 = 2;
      unk_1ECE33368 = &ggl::singlePassRouteLineShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE33370 = 0;
      unk_1ECE33378 = &ggl::singlePassRouteLineShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE33380 = 1;
      unk_1ECE33388 = &ggl::singlePassRouteLineShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE33398 = 0;
      unk_1ECE333A0 = 0;
      qword_1ECE33390 = 1;
    }
  }
}

void ggl::sDFGlyphSuperSampleShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::sDFGlyphSuperSampleShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("SDFGlyphSuperSampleShaderFragment");
      *(_DWORD *)algn_1ECE41B14 = 1;
      qword_1ECE41B18 = (uint64_t)"SDFGlyphSuperSampleShader";
      unk_1ECE41B20 = 0;
      qword_1ECE41B28 = 0;
      unk_1ECE41B30 = &ggl::sDFGlyphSuperSampleShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41B38 = 2;
      unk_1ECE41B40 = &ggl::sDFGlyphSuperSampleShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41B48 = 0;
      unk_1ECE41B50 = &ggl::sDFGlyphSuperSampleShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41B58 = 1;
      unk_1ECE41B60 = &ggl::sDFGlyphSuperSampleShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41B70 = 0;
      unk_1ECE41B78 = 0;
      qword_1ECE41B68 = 1;
    }
  }
}

void ggl::glyphWithNormalHaloShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::glyphWithNormalHaloShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("GlyphWithNormalHaloShaderFragment");
      *(_DWORD *)algn_1ECE418D4 = 1;
      qword_1ECE418D8 = (uint64_t)"GlyphWithNormalHaloShader";
      unk_1ECE418E0 = 0;
      qword_1ECE418E8 = 0;
      unk_1ECE418F0 = &ggl::glyphWithNormalHaloShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE418F8 = 2;
      unk_1ECE41900 = &ggl::glyphWithNormalHaloShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41908 = 0;
      unk_1ECE41910 = &ggl::glyphWithNormalHaloShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41918 = 1;
      unk_1ECE41920 = &ggl::glyphWithNormalHaloShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41930 = 0;
      unk_1ECE41938 = 0;
      qword_1ECE41928 = 1;
    }
  }
}

void ggl::foggedDiffuseBuildingShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::foggedDiffuseBuildingShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("FoggedDiffuseBuildingShaderVertex");
      *(_DWORD *)algn_1ECE4177C = 0;
      qword_1ECE41780 = (uint64_t)"FoggedDiffuseBuildingShader";
      unk_1ECE41788 = ggl::foggedDiffuseBuildingShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE41790 = 1;
      unk_1ECE41798 = &ggl::foggedDiffuseBuildingShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE417A0 = 6;
      unk_1ECE417A8 = &ggl::foggedDiffuseBuildingShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE417B0 = 0;
      unk_1ECE417B8 = &ggl::foggedDiffuseBuildingShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE417C0 = 0;
      unk_1ECE417C8 = &ggl::foggedDiffuseBuildingShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE417D8 = 0;
      unk_1ECE417E0 = 0;
      qword_1ECE417D0 = 0;
    }
  }
}

void ggl::buildingFacadeDepthShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::buildingFacadeDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("BuildingFacadeDepthShaderFragment");
      *(_DWORD *)algn_1ECE41694 = 1;
      qword_1ECE41698 = (uint64_t)"BuildingFacadeDepthShader";
      unk_1ECE416A0 = 0;
      qword_1ECE416A8 = 0;
      unk_1ECE416B0 = &ggl::buildingFacadeDepthShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE416B8 = 0;
      unk_1ECE416C0 = &ggl::buildingFacadeDepthShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE416C8 = 0;
      unk_1ECE416D0 = &ggl::buildingFacadeDepthShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE416D8 = 0;
      unk_1ECE416E0 = &ggl::buildingFacadeDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE416F0 = 0;
      unk_1ECE416F8 = 0;
      qword_1ECE416E8 = 0;
    }
  }
}

void ggl::screenTexturedQuadShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::screenTexturedQuadShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("ScreenTexturedQuadShaderFragment");
      *(_DWORD *)algn_1ECE30AB4 = 1;
      qword_1ECE30AB8 = (uint64_t)"ScreenTexturedQuadShader";
      unk_1ECE30AC0 = 0;
      qword_1ECE30AC8 = 0;
      unk_1ECE30AD0 = &ggl::screenTexturedQuadShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE30AD8 = 0;
      unk_1ECE30AE0 = &ggl::screenTexturedQuadShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE30AE8 = 0;
      unk_1ECE30AF0 = &ggl::screenTexturedQuadShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE30AF8 = 1;
      unk_1ECE30B00 = &ggl::screenTexturedQuadShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE30B10 = 0;
      unk_1ECE30B18 = 0;
      qword_1ECE30B08 = 1;
    }
  }
}

void ggl::polygonSolidFillS2ShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::polygonSolidFillS2ShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("PolygonSolidFillS2ShaderFragment");
      *(_DWORD *)algn_1ECE33254 = 1;
      qword_1ECE33258 = (uint64_t)"PolygonSolidFillS2Shader";
      unk_1ECE33260 = 0;
      qword_1ECE33268 = 0;
      unk_1ECE33270 = &ggl::polygonSolidFillS2ShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE33278 = 1;
      unk_1ECE33280 = &ggl::polygonSolidFillS2ShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE33288 = 0;
      unk_1ECE33290 = &ggl::polygonSolidFillS2ShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE33298 = 0;
      unk_1ECE332A0 = &ggl::polygonSolidFillS2ShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE332B0 = 0;
      unk_1ECE332B8 = 0;
      qword_1ECE332A8 = 0;
    }
  }
}

void ggl::polygonOverlayFillShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::polygonOverlayFillShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("PolygonOverlayFillShaderFragment");
      *(_DWORD *)algn_1ECE4144C = 1;
      qword_1ECE41450 = (uint64_t)"PolygonOverlayFillShader";
      unk_1ECE41458 = 0;
      qword_1ECE41460 = 0;
      unk_1ECE41468 = &ggl::polygonOverlayFillShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41470 = 2;
      unk_1ECE41478 = &ggl::polygonOverlayFillShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41480 = 0;
      unk_1ECE41488 = &ggl::polygonOverlayFillShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41490 = 0;
      unk_1ECE41498 = &ggl::polygonOverlayFillShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE414A8 = 0;
      unk_1ECE414B0 = 0;
      qword_1ECE414A0 = 0;
    }
  }
}

void ggl::diffuseBuildingTopShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::diffuseBuildingTopShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("DiffuseBuildingTopShaderFragment");
      *(_DWORD *)algn_1ECE412EC = 1;
      qword_1ECE412F0 = (uint64_t)"DiffuseBuildingTopShader";
      unk_1ECE412F8 = 0;
      qword_1ECE41300 = 0;
      unk_1ECE41308 = &ggl::diffuseBuildingTopShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41310 = 3;
      unk_1ECE41318 = &ggl::diffuseBuildingTopShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41320 = 0;
      unk_1ECE41328 = &ggl::diffuseBuildingTopShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41330 = 0;
      unk_1ECE41338 = &ggl::diffuseBuildingTopShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41348 = 0;
      unk_1ECE41350 = 0;
      qword_1ECE41340 = 0;
    }
  }
}

void ggl::transitLineRibbonShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::transitLineRibbonShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("TransitLineRibbonShaderFragment");
      *(_DWORD *)algn_1ECE411FC = 1;
      qword_1ECE41200 = (uint64_t)"TransitLineRibbonShader";
      unk_1ECE41208 = 0;
      qword_1ECE41210 = 0;
      unk_1ECE41218 = &ggl::transitLineRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41220 = 1;
      unk_1ECE41228 = &ggl::transitLineRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41230 = 0;
      unk_1ECE41238 = &ggl::transitLineRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41240 = 1;
      unk_1ECE41248 = &ggl::transitLineRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41258 = 0;
      unk_1ECE41260 = 0;
      qword_1ECE41250 = 1;
    }
  }
}

void ggl::specularBuildingTopShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::specularBuildingTopShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("SpecularBuildingTopShaderVertex");
      *(_DWORD *)algn_1ECE4102C = 0;
      qword_1ECE41030 = (uint64_t)"SpecularBuildingTopShader";
      unk_1ECE41038 = ggl::specularBuildingTopShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE41040 = 1;
      unk_1ECE41048 = &ggl::specularBuildingTopShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41050 = 6;
      unk_1ECE41058 = &ggl::specularBuildingTopShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41060 = 0;
      unk_1ECE41068 = &ggl::specularBuildingTopShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41070 = 0;
      unk_1ECE41078 = &ggl::specularBuildingTopShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41088 = 0;
      unk_1ECE41090 = 0;
      qword_1ECE41080 = 0;
    }
  }
}

void ggl::singlePassRouteLineShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::singlePassRouteLineShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("SinglePassRouteLineShaderVertex");
      *(_DWORD *)algn_1ECE33174 = 0;
      qword_1ECE33178 = (uint64_t)"SinglePassRouteLineShader";
      unk_1ECE33180 = ggl::singlePassRouteLineShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE33188 = 1;
      unk_1ECE33190 = &ggl::singlePassRouteLineShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE33198 = 4;
      unk_1ECE331A0 = &ggl::singlePassRouteLineShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE331A8 = 0;
      unk_1ECE331B0 = &ggl::singlePassRouteLineShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE331B8 = 0;
      unk_1ECE331C0 = &ggl::singlePassRouteLineShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE331D0 = 0;
      unk_1ECE331D8 = 0;
      qword_1ECE331C8 = 0;
    }
  }
}

void ggl::sDFGlyphSuperSampleShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::sDFGlyphSuperSampleShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("SDFGlyphSuperSampleShaderVertex");
      *(_DWORD *)algn_1ECE40FBC = 0;
      qword_1ECE40FC0 = (uint64_t)"SDFGlyphSuperSampleShader";
      unk_1ECE40FC8 = ggl::sDFGlyphSuperSampleShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE40FD0 = 1;
      unk_1ECE40FD8 = &ggl::sDFGlyphSuperSampleShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE40FE0 = 4;
      unk_1ECE40FE8 = &ggl::sDFGlyphSuperSampleShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE40FF0 = 0;
      unk_1ECE40FF8 = &ggl::sDFGlyphSuperSampleShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41000 = 2;
      unk_1ECE41008 = &ggl::sDFGlyphSuperSampleShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41018 = 0;
      unk_1ECE41020 = 0;
      qword_1ECE41010 = 2;
    }
  }
}

void ggl::polygonStrokeMaskShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::polygonStrokeMaskShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("PolygonStrokeMaskShaderFragment");
      *(_DWORD *)algn_1ECE309C4 = 1;
      qword_1ECE309C8 = (uint64_t)"PolygonStrokeMaskShader";
      unk_1ECE309D0 = 0;
      qword_1ECE309D8 = 0;
      unk_1ECE309E0 = &ggl::polygonStrokeMaskShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE309E8 = 0;
      unk_1ECE309F0 = &ggl::polygonStrokeMaskShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE309F8 = 0;
      unk_1ECE30A00 = &ggl::polygonStrokeMaskShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE30A08 = 1;
      unk_1ECE30A10 = &ggl::polygonStrokeMaskShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE30A20 = 0;
      unk_1ECE30A28 = 0;
      qword_1ECE30A18 = 1;
    }
  }
}

void ggl::packedLinearDepthShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::packedLinearDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("PackedLinearDepthShaderFragment");
      *(_DWORD *)algn_1ECE30954 = 1;
      qword_1ECE30958 = (uint64_t)"PackedLinearDepthShader";
      unk_1ECE30960 = 0;
      qword_1ECE30968 = 0;
      unk_1ECE30970 = &ggl::packedLinearDepthShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE30978 = 2;
      unk_1ECE30980 = &ggl::packedLinearDepthShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE30988 = 0;
      unk_1ECE30990 = &ggl::packedLinearDepthShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE30998 = 0;
      unk_1ECE309A0 = &ggl::packedLinearDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE309B0 = 0;
      unk_1ECE309B8 = 0;
      qword_1ECE309A8 = 0;
    }
  }
}

void ggl::glyphWithNormalHaloShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::glyphWithNormalHaloShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("GlyphWithNormalHaloShaderVertex");
      *(_DWORD *)algn_1ECE40D7C = 0;
      qword_1ECE40D80 = (uint64_t)"GlyphWithNormalHaloShader";
      unk_1ECE40D88 = ggl::glyphWithNormalHaloShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE40D90 = 1;
      unk_1ECE40D98 = &ggl::glyphWithNormalHaloShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE40DA0 = 2;
      unk_1ECE40DA8 = &ggl::glyphWithNormalHaloShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE40DB0 = 0;
      unk_1ECE40DB8 = &ggl::glyphWithNormalHaloShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE40DC0 = 1;
      unk_1ECE40DC8 = &ggl::glyphWithNormalHaloShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE40DD8 = 0;
      unk_1ECE40DE0 = 0;
      qword_1ECE40DD0 = 1;
    }
  }
}

void ggl::elevatedFillColorShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::elevatedFillColorShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("ElevatedFillColorShaderFragment");
      *(_DWORD *)algn_1ECE34F3C = 1;
      qword_1ECE34F40 = (uint64_t)"ElevatedFillColorShader";
      unk_1ECE34F48 = 0;
      qword_1ECE34F50 = 0;
      unk_1ECE34F58 = &ggl::elevatedFillColorShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE34F60 = 2;
      unk_1ECE34F68 = &ggl::elevatedFillColorShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE34F70 = 0;
      unk_1ECE34F78 = &ggl::elevatedFillColorShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE34F80 = 0;
      unk_1ECE34F88 = &ggl::elevatedFillColorShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE34F98 = 0;
      unk_1ECE34FA0 = 0;
      qword_1ECE34F90 = 0;
    }
  }
}

void ggl::circleMultiStrokeShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::circleMultiStrokeShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("CircleMultiStrokeShaderFragment");
      *(_DWORD *)algn_1ECE308E4 = 1;
      qword_1ECE308E8 = (uint64_t)"CircleMultiStrokeShader";
      unk_1ECE308F0 = 0;
      qword_1ECE308F8 = 0;
      unk_1ECE30900 = &ggl::circleMultiStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE30908 = 1;
      unk_1ECE30910 = &ggl::circleMultiStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE30918 = 0;
      unk_1ECE30920 = &ggl::circleMultiStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE30928 = 0;
      unk_1ECE30930 = &ggl::circleMultiStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE30940 = 0;
      unk_1ECE30948 = 0;
      qword_1ECE30938 = 0;
    }
  }
}

void ggl::buildingFacadeDepthShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::buildingFacadeDepthShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("BuildingFacadeDepthShaderVertex");
      *(_DWORD *)algn_1ECE4539C = 0;
      qword_1ECE453A0 = (uint64_t)"BuildingFacadeDepthShader";
      unk_1ECE453A8 = ggl::buildingFacadeDepthShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE453B0 = 1;
      unk_1ECE453B8 = &ggl::buildingFacadeDepthShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE453C0 = 2;
      unk_1ECE453C8 = &ggl::buildingFacadeDepthShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE453D0 = 0;
      unk_1ECE453D8 = &ggl::buildingFacadeDepthShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE453E0 = 0;
      unk_1ECE453E8 = &ggl::buildingFacadeDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE453F8 = 0;
      unk_1ECE45400 = 0;
      qword_1ECE453F0 = 0;
    }
  }
}

void ggl::ElevatedFillColorShader::typedReflection(ggl::ElevatedFillColorShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::ElevatedFillColorShader::typedReflection(void)::ref = (uint64_t)"ElevatedFillColorShader";
      ggl::elevatedFillColorShaderVertexFunctionDescriptor(v2);
      qword_1ECE34508 = (uint64_t)&ggl::elevatedFillColorShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<30ul>("ElevatedFillColorShaderVertex");
      dword_1ECE34510 = (int)v3;
      ggl::elevatedFillColorShaderFragmentFunctionDescriptor(v3);
      qword_1ECE34518 = (uint64_t)&ggl::elevatedFillColorShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE34520 = ggl::crc32::compute<32ul>("ElevatedFillColorShaderFragment");
      qword_1ECE34528 = (uint64_t)ggl::elevatedFillColorShaderShaderConstants(void)::ref;
      unk_1ECE34530 = 4;
      qword_1ECE34538 = (uint64_t)&ggl::elevatedFillColorShaderShaderTextures(void)::ref;
      unk_1ECE34540 = 0;
      qword_1ECE34548 = (uint64_t)&ggl::elevatedFillColorShaderShaderSamplers(void)::ref;
      unk_1ECE34550 = 0;
    }
  }
}

void ggl::elevatedFillColorShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::elevatedFillColorShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("ElevatedFillColorShaderVertex");
      *(_DWORD *)algn_1ECE34EC4 = 0;
      qword_1ECE34EC8 = (uint64_t)"ElevatedFillColorShader";
      unk_1ECE34ED0 = ggl::elevatedFillColorShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE34ED8 = 1;
      unk_1ECE34EE0 = &ggl::elevatedFillColorShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE34EE8 = 4;
      unk_1ECE34EF0 = &ggl::elevatedFillColorShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE34EF8 = 0;
      unk_1ECE34F00 = &ggl::elevatedFillColorShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE34F08 = 0;
      unk_1ECE34F10 = &ggl::elevatedFillColorShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE34F20 = 0;
      unk_1ECE34F28 = 0;
      qword_1ECE34F18 = 0;
    }
  }
}

void ggl::PackedLinearDepthShader::typedReflection(ggl::PackedLinearDepthShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::PackedLinearDepthShader::typedReflection(void)::ref = (uint64_t)"PackedLinearDepthShader";
      ggl::packedLinearDepthShaderVertexFunctionDescriptor(v2);
      qword_1ECE301C0 = (uint64_t)&ggl::packedLinearDepthShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<30ul>("PackedLinearDepthShaderVertex");
      dword_1ECE301C8 = (int)v3;
      ggl::packedLinearDepthShaderFragmentFunctionDescriptor(v3);
      qword_1ECE301D0 = (uint64_t)&ggl::packedLinearDepthShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE301D8 = ggl::crc32::compute<32ul>("PackedLinearDepthShaderFragment");
      qword_1ECE301E0 = (uint64_t)ggl::packedLinearDepthShaderShaderConstants(void)::ref;
      unk_1ECE301E8 = 5;
      qword_1ECE301F0 = (uint64_t)&ggl::packedLinearDepthShaderShaderTextures(void)::ref;
      unk_1ECE301F8 = 0;
      qword_1ECE30200 = (uint64_t)&ggl::packedLinearDepthShaderShaderSamplers(void)::ref;
      unk_1ECE30208 = 0;
    }
  }
}

void ggl::packedLinearDepthShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::packedLinearDepthShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("PackedLinearDepthShaderVertex");
      *(_DWORD *)algn_1ECE3070C = 0;
      qword_1ECE30710 = (uint64_t)"PackedLinearDepthShader";
      unk_1ECE30718 = ggl::packedLinearDepthShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE30720 = 3;
      unk_1ECE30728 = &ggl::packedLinearDepthShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE30730 = 5;
      unk_1ECE30738 = &ggl::packedLinearDepthShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE30740 = 2;
      unk_1ECE30748 = &ggl::packedLinearDepthShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE30750 = 0;
      unk_1ECE30758 = &ggl::packedLinearDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE30768 = 0;
      unk_1ECE30770 = 0;
      qword_1ECE30760 = 0;
    }
  }
}

void ___ZN3gss10StyleSheetINS_15ScenePropertyIDEE9loadQueueEb_block_invoke_2()
{
  NSObject *v0;
  dispatch_queue_t v1;
  void *v2;
  NSObject *v3;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v3, QOS_CLASS_USER_INTERACTIVE, -3);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = dispatch_queue_create("com.apple.mapdisplay.stylesheetLoadQueue", v0);
  v2 = (void *)gss::StyleSheet<gss::ScenePropertyID>::loadQueue(BOOL)::stylesheetLoadQueue;
  gss::StyleSheet<gss::ScenePropertyID>::loadQueue(BOOL)::stylesheetLoadQueue = (uint64_t)v1;

}

void ___ZN3gss10StyleSheetINS_10PropertyIDEE9loadQueueEb_block_invoke_2()
{
  NSObject *v0;
  dispatch_queue_t v1;
  void *v2;
  NSObject *v3;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v3, QOS_CLASS_USER_INTERACTIVE, -3);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = dispatch_queue_create("com.apple.mapdisplay.stylesheetLoadQueue", v0);
  v2 = (void *)gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue;
  gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue = (uint64_t)v1;

}

void ggl::TextureWithReverseAlphaShader::typedReflection(ggl::TextureWithReverseAlphaShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::TextureWithReverseAlphaShader::typedReflection(void)::ref = (uint64_t)"TextureWithReverseAlphaShader";
      ggl::textureWithReverseAlphaShaderVertexFunctionDescriptor(v2);
      qword_1ECE3B938 = (uint64_t)&ggl::textureWithReverseAlphaShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<36ul>("TextureWithReverseAlphaShaderVertex");
      dword_1ECE3B940 = (int)v3;
      ggl::textureWithReverseAlphaShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3B948 = (uint64_t)&ggl::textureWithReverseAlphaShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B950 = ggl::crc32::compute<38ul>("TextureWithReverseAlphaShaderFragment");
      qword_1ECE3B958 = (uint64_t)ggl::textureWithReverseAlphaShaderShaderConstants(void)::ref;
      unk_1ECE3B960 = 3;
      qword_1ECE3B968 = (uint64_t)ggl::textureWithReverseAlphaShaderShaderTextures(void)::ref;
      unk_1ECE3B970 = 1;
      qword_1ECE3B978 = (uint64_t)&ggl::textureWithReverseAlphaShaderShaderSamplers(void)::ref;
      unk_1ECE3B980 = 1;
    }
  }
}

void ggl::textureWithReverseAlphaShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::textureWithReverseAlphaShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("TextureWithReverseAlphaShaderFragment");
      *(_DWORD *)algn_1ECE42C4C = 1;
      qword_1ECE42C50 = (uint64_t)"TextureWithReverseAlphaShader";
      unk_1ECE42C58 = 0;
      qword_1ECE42C60 = 0;
      unk_1ECE42C68 = &ggl::textureWithReverseAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE42C70 = 1;
      unk_1ECE42C78 = &ggl::textureWithReverseAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE42C80 = 0;
      unk_1ECE42C88 = &ggl::textureWithReverseAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE42C90 = 1;
      unk_1ECE42C98 = &ggl::textureWithReverseAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE42CA8 = 0;
      unk_1ECE42CB0 = 0;
      qword_1ECE42CA0 = 1;
    }
  }
}

void ggl::textureWithReverseAlphaShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::textureWithReverseAlphaShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("TextureWithReverseAlphaShaderVertex");
      *(_DWORD *)algn_1ECE42414 = 0;
      qword_1ECE42418 = (uint64_t)"TextureWithReverseAlphaShader";
      unk_1ECE42420 = ggl::textureWithReverseAlphaShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE42428 = 1;
      unk_1ECE42430 = &ggl::textureWithReverseAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE42438 = 2;
      unk_1ECE42440 = &ggl::textureWithReverseAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE42448 = 0;
      unk_1ECE42450 = &ggl::textureWithReverseAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE42458 = 0;
      unk_1ECE42460 = &ggl::textureWithReverseAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE42470 = 0;
      unk_1ECE42478 = 0;
      qword_1ECE42468 = 0;
    }
  }
}

void ggl::TexturedShader::typedReflection(ggl::TexturedShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::TexturedShader::typedReflection(void)::ref = (uint64_t)"TexturedShader";
      ggl::texturedShaderVertexFunctionDescriptor(v2);
      qword_1ECE392E0 = (uint64_t)&ggl::texturedShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<21ul>("TexturedShaderVertex");
      dword_1ECE392E8 = (int)v3;
      ggl::texturedShaderFragmentFunctionDescriptor(v3);
      qword_1ECE392F0 = (uint64_t)&ggl::texturedShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE392F8 = ggl::crc32::compute<23ul>("TexturedShaderFragment");
      qword_1ECE39300 = (uint64_t)ggl::texturedShaderShaderConstants(void)::ref;
      unk_1ECE39308 = 3;
      qword_1ECE39310 = (uint64_t)ggl::texturedShaderShaderTextures(void)::ref;
      unk_1ECE39318 = 1;
      qword_1ECE39320 = (uint64_t)ggl::texturedShaderShaderSamplers(void)::ref;
      unk_1ECE39328 = 1;
    }
  }
}

void ggl::texturedShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::texturedShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<23ul>("TexturedShaderFragment");
      *(_DWORD *)algn_1ECE3D724 = 1;
      qword_1ECE3D728 = (uint64_t)"TexturedShader";
      unk_1ECE3D730 = 0;
      qword_1ECE3D738 = 0;
      unk_1ECE3D740 = &ggl::texturedShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3D748 = 0;
      unk_1ECE3D750 = &ggl::texturedShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3D758 = 0;
      unk_1ECE3D760 = &ggl::texturedShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3D768 = 1;
      unk_1ECE3D770 = &ggl::texturedShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3D780 = 0;
      unk_1ECE3D788 = 0;
      qword_1ECE3D778 = 1;
    }
  }
}

void ggl::texturedShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::texturedShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("TexturedShaderVertex");
      *(_DWORD *)algn_1ECE3D1CC = 0;
      qword_1ECE3D1D0 = (uint64_t)"TexturedShader";
      unk_1ECE3D1D8 = ggl::texturedShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3D1E0 = 1;
      unk_1ECE3D1E8 = &ggl::texturedShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3D1F0 = 3;
      unk_1ECE3D1F8 = &ggl::texturedShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3D200 = 0;
      unk_1ECE3D208 = &ggl::texturedShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3D210 = 0;
      unk_1ECE3D218 = &ggl::texturedShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3D228 = 0;
      unk_1ECE3D230 = 0;
      qword_1ECE3D220 = 0;
    }
  }
}

void ggl::ClutShader::typedReflection(ggl::ClutShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::ClutShader::typedReflection(void)::ref = (uint64_t)"ClutShader";
      ggl::clutShaderVertexFunctionDescriptor(v2);
      qword_1ECE389E0 = (uint64_t)&ggl::clutShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<17ul>("ClutShaderVertex");
      dword_1ECE389E8 = (int)v3;
      ggl::clutShaderFragmentFunctionDescriptor(v3);
      qword_1ECE389F0 = (uint64_t)&ggl::clutShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE389F8 = ggl::crc32::compute<19ul>("ClutShaderFragment");
      qword_1ECE38A00 = (uint64_t)ggl::clutShaderShaderConstants(void)::ref;
      unk_1ECE38A08 = 3;
      qword_1ECE38A10 = (uint64_t)ggl::clutShaderShaderTextures(void)::ref;
      unk_1ECE38A18 = 2;
      qword_1ECE38A20 = (uint64_t)ggl::clutShaderShaderSamplers(void)::ref;
      unk_1ECE38A28 = 2;
    }
  }
}

void ggl::clutShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::clutShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("ClutShaderFragment");
      *(_DWORD *)algn_1ECE3CA24 = 1;
      qword_1ECE3CA38 = 0;
      unk_1ECE3CA40 = &ggl::clutShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3CA28 = (uint64_t)"ClutShader";
      unk_1ECE3CA30 = 0;
      qword_1ECE3CA48 = 1;
      unk_1ECE3CA50 = &ggl::clutShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3CA58 = 0;
      unk_1ECE3CA60 = &ggl::clutShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3CA68 = 2;
      unk_1ECE3CA70 = &ggl::clutShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3CA80 = 0;
      unk_1ECE3CA88 = 0;
      qword_1ECE3CA78 = 2;
    }
  }
}

void ggl::clutShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::clutShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<17ul>("ClutShaderVertex");
      *(_DWORD *)algn_1ECE3C35C = 0;
      qword_1ECE3C360 = (uint64_t)"ClutShader";
      unk_1ECE3C368 = ggl::clutShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3C370 = 1;
      unk_1ECE3C378 = &ggl::clutShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3C380 = 3;
      unk_1ECE3C388 = &ggl::clutShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3C390 = 0;
      unk_1ECE3C398 = &ggl::clutShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3C3A0 = 0;
      unk_1ECE3C3A8 = &ggl::clutShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3C3B8 = 0;
      unk_1ECE3C3C0 = 0;
      qword_1ECE3C3B0 = 0;
    }
  }
}

void sub_19F37CAC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CFDictionaryRef ___ZN4karo5media9PngLoader13loadFromChunkERKNS0_11ImageFormatEPKhmRNS0_5ImageE_block_invoke()
{
  CFDictionaryRef result;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = *(void **)MEMORY[0x1E0C9DAC0];
  values = (void *)*MEMORY[0x1E0C9AE50];
  result = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  karo::media::PngLoader::loadFromChunk(karo::media::ImageFormat const&,unsigned char const*,unsigned long,karo::media::Image &)::options = (uint64_t)result;
  return result;
}

void md::LabelNavTrafficSupport::setRouteUserOffset(md::LabelNavTrafficSupport *this, const PolylineCoordinate *a2)
{
  unsigned int v4;
  char *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  void *v9;
  uint64_t v10;
  float v11;
  float offset;
  void *v13;
  id v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  _OWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  __int128 v39;
  _QWORD *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  void *v62;

  *((PolylineCoordinate *)this + 17) = *a2;
  v4 = *((_DWORD *)this + 36);
  if (a2->index <= v4 && (a2->index != v4 || a2->offset <= *((float *)this + 37)))
    return;
  v5 = (char *)*((_QWORD *)this + 13);
  if (*((char **)this + 14) == v5)
    goto LABEL_89;
  v6 = 0;
  while (1)
  {
    v8 = &v5[16 * v6];
    (*(void (**)(_QWORD))(**(_QWORD **)v8 + 200))(*(_QWORD *)v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "routeOffset");
    if (a2->index < v10)
      break;
    if (a2->index == (_DWORD)v10)
    {
      v11 = *((float *)&v10 + 1);
      offset = a2->offset;

      if (offset <= v11)
        goto LABEL_68;
    }
    else
    {

    }
    (*(void (**)(_QWORD))(**(_QWORD **)v8 + 200))(*(_QWORD *)v8);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setRouteRelevance:", 2);
    v14 = v13;
    v62 = v14;
    v15 = (_QWORD *)*((_QWORD *)this + 9);
    v16 = (_QWORD *)*((_QWORD *)this + 10);
    if (v15 != v16)
    {
      while (*v15 != *(_QWORD *)v8)
      {
        v15 += 2;
        if (v15 == v16)
        {
          v15 = (_QWORD *)*((_QWORD *)this + 10);
          break;
        }
      }
    }
    if (v15 != v16)
    {
      v17 = v15 + 2;
      if (v15 + 2 != v16)
      {
        do
        {
          v18 = *(_OWORD *)v17;
          *v17 = 0;
          v17[1] = 0;
          v19 = (std::__shared_weak_count *)v15[1];
          *(_OWORD *)v15 = v18;
          if (v19)
          {
            p_shared_owners = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldaxr(p_shared_owners);
            while (__stlxr(v21 - 1, p_shared_owners));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          v17 += 2;
          v15 += 2;
        }
        while (v17 != v16);
        v16 = (_QWORD *)*((_QWORD *)this + 10);
      }
      while (v16 != v15)
      {
        v22 = (std::__shared_weak_count *)*(v16 - 1);
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v16 -= 2;
      }
      *((_QWORD *)this + 10) = v15;
    }
    v25 = (std::__shared_weak_count *)operator new(0x1A0uLL);
    std::__shared_ptr_emplace<md::TrafficIncidentLabelFeature>::__shared_ptr_emplace[abi:nn180100]<VKTrafficIncidentFeature * {__strong}&,std::shared_ptr<md::RouteAnnotationDedupingGroup> &,std::allocator<md::TrafficIncidentLabelFeature>,0>(v25, &v62, *((_QWORD *)this + 2), *((std::__shared_weak_count **)this + 3));
    *(_QWORD *)&v61 = v25 + 1;
    *((_QWORD *)&v61 + 1) = v25;
    v26 = (_QWORD *)*((_QWORD *)this + 10);
    v27 = *((_QWORD *)this + 11);
    if ((unint64_t)v26 >= v27)
    {
      v28 = *((_QWORD *)this + 9);
      v29 = ((uint64_t)v26 - v28) >> 4;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 60)
        abort();
      v31 = v27 - v28;
      if (v31 >> 3 > v30)
        v30 = v31 >> 3;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
        v32 = 0xFFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      if (v32)
      {
        v33 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 12) + 16))(*((_QWORD *)this + 12), 16 * v32, 8);
        v34 = (_OWORD *)(v33 + 16 * v29);
        v35 = v33 + 16 * v32;
        if (v33)
        {
          *v34 = v61;
          v61 = 0uLL;
        }
      }
      else
      {
        v35 = 0;
        v34 = (_OWORD *)(16 * v29);
      }
      v36 = v34 + 1;
      v37 = (_QWORD *)*((_QWORD *)this + 9);
      v38 = (_QWORD *)*((_QWORD *)this + 10);
      if (v38 == v37)
      {
        *((_QWORD *)this + 9) = v34;
        *((_QWORD *)this + 10) = v36;
        v41 = *((_QWORD *)this + 11);
        *((_QWORD *)this + 11) = v35;
      }
      else
      {
        do
        {
          v39 = *((_OWORD *)v38 - 1);
          v38 -= 2;
          *--v34 = v39;
          *v38 = 0;
          v38[1] = 0;
        }
        while (v38 != v37);
        v38 = (_QWORD *)*((_QWORD *)this + 9);
        v40 = (_QWORD *)*((_QWORD *)this + 10);
        *((_QWORD *)this + 9) = v34;
        *((_QWORD *)this + 10) = v36;
        v41 = *((_QWORD *)this + 11);
        *((_QWORD *)this + 11) = v35;
        while (v40 != v38)
        {
          v42 = (std::__shared_weak_count *)*(v40 - 1);
          if (v42)
          {
            v43 = (unint64_t *)&v42->__shared_owners_;
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          v40 -= 2;
        }
      }
      if (v38)
        (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 12) + 40))(*((_QWORD *)this + 12), v38, v41 - (_QWORD)v38);
      v25 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
      *((_QWORD *)this + 10) = v36;
      if (!v25)
        goto LABEL_4;
    }
    else
    {
      if (v26)
      {
        *v26 = v25 + 1;
        v26[1] = v25;
        v61 = 0uLL;
        v25 = 0;
      }
      *((_QWORD *)this + 10) = v26 + 2;
      if (!v25)
        goto LABEL_4;
    }
    v45 = (unint64_t *)&v25->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
LABEL_4:

    ++v6;
    v5 = (char *)*((_QWORD *)this + 13);
    v7 = (char *)*((_QWORD *)this + 14);
    if (v6 >= (v7 - v5) >> 4)
      goto LABEL_69;
  }

LABEL_68:
  v5 = (char *)*((_QWORD *)this + 13);
  v7 = (char *)*((_QWORD *)this + 14);
  v47 = v7;
  if (!v6)
    goto LABEL_87;
LABEL_69:
  v48 = &v5[16 * v6];
  if (v48 != v7)
  {
    do
    {
      v49 = *(_OWORD *)v48;
      *(_QWORD *)v48 = 0;
      *((_QWORD *)v48 + 1) = 0;
      v50 = (std::__shared_weak_count *)*((_QWORD *)v5 + 1);
      *(_OWORD *)v5 = v49;
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v48 += 16;
      v5 += 16;
    }
    while (v48 != v7);
    v7 = (char *)*((_QWORD *)this + 14);
  }
  v47 = v5;
  while (v7 != v5)
  {
    v53 = (std::__shared_weak_count *)*((_QWORD *)v7 - 1);
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v7 -= 16;
  }
  *((_QWORD *)this + 14) = v5;
  v5 = (char *)*((_QWORD *)this + 13);
LABEL_87:
  if (v5 != v47)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)v5 + 200))(*(_QWORD *)v5);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    *((_QWORD *)this + 18) = objc_msgSend(v56, "routeOffset");

    goto LABEL_90;
  }
LABEL_89:
  *((_QWORD *)this + 18) = 0xFFFFFFFFLL;
LABEL_90:
  v57 = *((_QWORD *)this + 1);
  *(_BYTE *)(v57 + 3041) = 1;
  v58 = atomic_load((unsigned __int8 *)(v57 + 3058));
  if ((v58 & 1) != 0)
  {
    v59 = *(_QWORD *)(v57 + 136);
    if (v59)
    {
      v60 = *(_QWORD *)(v59 + 56);
      if (v60)
      {
        *(_QWORD *)&v61 = v57;
        LOBYTE(v62) = 9;
        (*(void (**)(uint64_t, __int128 *, void **))(*(_QWORD *)v60 + 48))(v60, &v61, &v62);
      }
    }
  }
}

void sub_19F37D0E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::RoadLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  std::__sp_mut *sp_mut;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int32x2_t *v10;
  __int32 v11;
  int v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  _QWORD *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  unint64_t *v18;
  unint64_t v19;
  std::string::size_type *v20;
  std::string::size_type *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  std::string::size_type *v27;
  std::string::size_type *v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *size;
  unint64_t *v34;
  unint64_t v35;
  id v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  _QWORD *v39;
  gss::Allocator *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  _BYTE *v58;
  char *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  char *v73;
  char *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  std::string::size_type v91;
  std::string::size_type v92;
  std::string::size_type v93;
  std::string::size_type *v94;
  std::string::size_type *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  NSObject *v102;
  std::string *v103;
  NSObject *v104;
  std::string *v105;
  unint64_t *v106;
  _QWORD *v107;
  uint64_t v108;
  std::string::size_type v109;
  std::string::size_type v110;
  unint64_t *v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  __int128 v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unsigned __int8 v127;
  gss::Allocator *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  void *v136;
  int v137;
  int v138;
  std::__sp_mut *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  int32x4_t v143;
  double v144;
  long double v145;
  long double v146;
  long double v147;
  long double v148;
  long double v149;
  long double v150;
  long double v151;
  double v152;
  long double v153;
  double v154;
  gss::Allocator *v155;
  double v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  _QWORD *v161;
  _QWORD *v162;
  unint64_t *v163;
  unint64_t v164;
  void *v165;
  int8x8_t **v166;
  int8x8_t **v167;
  unsigned int v168;
  std::__shared_weak_count *v169;
  zilch::TrafficSkeletonTile *v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  zilch::TrafficSkeletonTile *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  _QWORD *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  void *v192;
  void *v193;
  void *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  void *v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t prime;
  unint64_t v221;
  unint64_t v222;
  uint8x8_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint8x8_t v232;
  uint64_t **v233;
  uint64_t *v234;
  unint64_t v236;
  uint64_t v238;
  _QWORD *v239;
  float v240;
  _BOOL8 v241;
  unint64_t v242;
  unint64_t v243;
  size_t v244;
  unint64_t v245;
  uint8x8_t v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  unint64_t v250;
  int v251;
  uint64_t v252;
  uint64_t v255;
  const void *v256;
  _QWORD *v257;
  uint64_t v258;
  uint64_t v259[2];
  uint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  _QWORD v264[2];
  unsigned __int8 v265;
  int32x4_t __b;
  unint64_t v267;
  std::string::size_type v268;
  uint64_t v269;
  std::__shared_weak_count *v270;
  void *__p;
  char *v272;
  char *v273;
  uint64_t v274;
  std::__shared_weak_count *v275;
  void *v276[3];
  __int128 v277;
  __int128 v278;
  float v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  std::__shared_weak_count *v289;
  std::string::size_type v290;
  void *v291;
  std::string::size_type *v292;
  std::string::size_type *v293;
  __int16 v294;
  int32x2_t v295;
  int v296[2];
  std::__shared_weak_count *v297;
  uint64_t v298;
  std::__shared_weak_count *v299;
  zilch::TrafficSkeletonTile *v300;
  uint64_t v301;
  uint64_t (*v302)(_QWORD *, uint64_t);
  void *v303;
  uint64_t *v304;
  uint64_t *v305;
  uint64_t *v306;
  uint64_t *v307;
  uint64_t *v308;
  uint64_t *v309;
  uint64_t v310[2];
  _BYTE v311[32];
  uint64_t v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t (*v315)(uint64_t, _QWORD *);
  void (*v316)(uint64_t);
  __int128 v317;
  __int128 v318;
  uint64_t v319;
  int v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t v323;
  uint64_t (*v324)(uint64_t, _QWORD *);
  void (*v325)(uint64_t);
  __int128 v326;
  __int128 v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t v332;
  uint64_t (*v333)(uint64_t, _QWORD *);
  void (*v334)(uint64_t);
  __int128 v335;
  __int128 v336;
  uint64_t v337;
  int v338;
  __int128 v339;
  __int128 v340;
  int v341;
  uint64_t v342;
  uint64_t *v343;
  uint64_t v344;
  uint64_t (*v345)(uint64_t, _QWORD *);
  void (*v346)(uint64_t);
  __int128 v347;
  __int128 v348;
  uint64_t v349;
  int v350;
  std::string v351;
  __n128 (*v352)(uint64_t, uint64_t);
  void (*v353)(uint64_t);
  const char *v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  char v361;
  int v362;
  uint64_t v363;
  int v364;
  uint64_t v365;
  unint64_t v366;
  int v367;
  __int128 v368;
  __int128 v369;
  uint64_t v370;
  unint64_t v371;
  double v372;
  double v373;
  double v374;
  char v375;
  char v376;
  uint64_t v377;
  std::__shared_weak_count *v378;
  uint64_t v379;
  uint64_t *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t *v384;
  uint64_t v385;
  uint64_t v386;
  _QWORD v387[3];
  _QWORD *v388;
  __int128 buf;
  void (*v390)(uint64_t, std::__shared_weak_count **, unint64_t *, int, int, int, uint64_t, int, float, float, uint64_t, uint64_t, uint64_t, unsigned int, char, uint64_t, char);
  void *v391;
  std::string *v392;
  uint64_t *v393;
  uint64_t *v394;
  uint64_t *v395;
  uint64_t *v396;
  _QWORD *v397;
  _QWORD *v398;
  char *v399;
  uint64_t v400;
  uint64_t v401;
  std::__shared_weak_count *v402;
  int32x4_t *p_b;
  int v404;
  uint64_t v405;

  v5 = a1;
  v405 = *MEMORY[0x1E0C80C00];
  v256 = (const void *)(a1 + 760);
  sp_mut = std::__get_sp_mut((const void *)(a1 + 760));
  std::__sp_mut::lock(sp_mut);
  v7 = *(std::__shared_weak_count **)(v5 + 768);
  *(_QWORD *)v296 = *(_QWORD *)(v5 + 760);
  v297 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  std::__sp_mut::unlock(sp_mut);
  v10 = *(int32x2_t **)(a2 + 16);
  v11 = v10[1].i32[0];
  LOBYTE(v294) = v10[1].i32[1];
  HIBYTE(v294) = v11;
  v295 = vrev64_s32(*v10);
  v12 = *(unsigned __int16 *)(v5 + 32);
  v291 = 0;
  v292 = 0;
  v293 = 0;
  v14 = (unsigned __int16 *)*a3;
  v13 = (unsigned __int16 *)a3[1];
  v255 = v5;
  if ((unsigned __int16 *)*a3 != v13)
  {
    while (*(unsigned __int16 *)(v5 + 584) != *v14)
    {
      v14 += 24;
      if (v14 == v13)
        goto LABEL_43;
    }
  }
  if (v14 != v13)
  {
    std::vector<std::shared_ptr<md::GEOVectorTileResource>>::reserve((uint64_t)&v291, *((_QWORD *)v14 + 4));
    v15 = (_QWORD *)*((_QWORD *)v14 + 3);
    if (v15)
    {
      while (1)
      {
        v16 = v15[14];
        v17 = v15[15];
        v351.__r_.__value_.__r.__words[0] = v16;
        v351.__r_.__value_.__l.__size_ = v17;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v20 = v292;
        if (v292 >= v293)
          break;
        *v292 = v16;
        v20[1] = v17;
        v292 = v20 + 2;
LABEL_12:
        v15 = (_QWORD *)*v15;
        if (!v15)
          goto LABEL_43;
      }
      v21 = (std::string::size_type *)v291;
      v22 = ((char *)v292 - (_BYTE *)v291) >> 4;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 60)
        abort();
      if (((char *)v293 - (_BYTE *)v291) >> 3 > v23)
        v23 = ((char *)v293 - (_BYTE *)v291) >> 3;
      if ((unint64_t)((char *)v293 - (_BYTE *)v291) >= 0x7FFFFFFFFFFFFFF0)
        v24 = 0xFFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24 >> 60)
LABEL_424:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v25 = (char *)operator new(16 * v24);
      v26 = &v25[16 * v22];
      *(_OWORD *)v26 = *(_OWORD *)&v351.__r_.__value_.__l.__data_;
      v27 = (std::string::size_type *)(v26 + 16);
      *(_OWORD *)&v351.__r_.__value_.__l.__data_ = 0uLL;
      if (v20 == v21)
      {
        v291 = v26;
        v293 = (std::string::size_type *)&v25[16 * v24];
        if (!v20)
          goto LABEL_36;
      }
      else
      {
        v28 = v20;
        do
        {
          v29 = *((_OWORD *)v28 - 1);
          v28 -= 2;
          *((_OWORD *)v26 - 1) = v29;
          v26 -= 16;
          *v28 = 0;
          v28[1] = 0;
        }
        while (v28 != v21);
        v291 = v26;
        v292 = v27;
        v293 = (std::string::size_type *)&v25[16 * v24];
        do
        {
          v30 = (std::__shared_weak_count *)*(v20 - 1);
          if (v30)
          {
            v31 = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          v20 -= 2;
        }
        while (v20 != v21);
        v20 = v21;
        if (!v21)
          goto LABEL_36;
      }
      operator delete(v20);
LABEL_36:
      size = (std::__shared_weak_count *)v351.__r_.__value_.__l.__size_;
      v292 = v27;
      v5 = v255;
      if (v351.__r_.__value_.__l.__size_)
      {
        v34 = (unint64_t *)(v351.__r_.__value_.__l.__size_ + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      goto LABEL_12;
    }
  }
LABEL_43:
  v36 = *(id *)(v5 + 784);
  (*(void (**)(std::string::size_type *__return_ptr))(*(_QWORD *)objc_msgSend(v36, "gglDevice") + 24))(&v290);

  v37 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v37->__shared_owners_ = 0;
  v37->__shared_weak_owners_ = 0;
  v37->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
  v38 = ggl::BufferData::BufferData((uint64_t)&v37[1], qword_1EE54ADE0, 2, 1, 6, 1);
  v37[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v37[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97B0;
  v288 = v38;
  v289 = v37;
  v39 = operator new(0xE8uLL);
  v39[1] = 0;
  v39[2] = 0;
  *v39 = &off_1E42E22E8;
  v40 = (gss::Allocator *)ggl::BufferData::BufferData((uint64_t)(v39 + 3), qword_1EE54AFA0, 2, 1, 6, 1);
  v39[28] = ggl::Tile::Transform::reflection(void)::reflection;
  v39[3] = &off_1E42B97F0;
  v286 = (uint64_t)v40;
  v287 = (uint64_t)v39;
  v284 = 0;
  v285 = 0;
  v280 = 0;
  v281 = 0;
  v282 = 0;
  v283 = gss::Allocator::instance(v40);
  v277 = 0u;
  v278 = 0u;
  v279 = 1.0;
  memset(v276, 0, sizeof(v276));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], v276);
  v274 = 0;
  v275 = 0;
  __p = 0;
  v272 = 0;
  v273 = 0;
  if (v12 != 2)
    goto LABEL_77;
  v41 = (std::__shared_weak_count *)*((_QWORD *)v291 + 1);
  v269 = *(_QWORD *)v291;
  v270 = v41;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v44 = *a3;
  v45 = a3[1];
  if (*a3 != v45)
  {
    while (*(_WORD *)v44 != 17)
    {
      v44 += 48;
      if (v44 == v45)
        goto LABEL_61;
    }
  }
  if (v44 == v45 || *(_QWORD *)(v44 + 32) != 1)
  {
LABEL_61:
    v48 = 0;
    v47 = 0;
  }
  else
  {
    v46 = *(_QWORD *)(v44 + 24);
    v47 = *(_QWORD *)(v46 + 112);
    v48 = *(_QWORD *)(v46 + 120);
    if (v48)
    {
      v49 = (unint64_t *)(v48 + 8);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
      v51 = (unint64_t *)(v48 + 8);
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
      do
        v53 = __ldaxr(v51);
      while (__stlxr(v53 - 1, v51));
      if (!v53)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v48 + 16))(v48);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v48);
      }
    }
  }
  v274 = v47;
  v275 = (std::__shared_weak_count *)v48;
  v55 = *a3;
  v54 = a3[1];
  if (*a3 != v54)
  {
    do
    {
      if (*(_WORD *)v55 == 16)
        goto LABEL_66;
      v55 += 48;
    }
    while (v55 != v54);
    v56 = v274 != 0;
    v55 = a3[1];
    goto LABEL_71;
  }
LABEL_66:
  v56 = v274 != 0;
  if (v55 != v54 && v274)
  {
    v57 = *(_QWORD *)(v55 + 32);
    v58 = __p;
    if (v57 > (v273 - (_BYTE *)__p) >> 4)
    {
      if (v57 >> 60)
        abort();
      v59 = (char *)operator new(16 * v57);
      __p = &v59[v272 - (_BYTE *)__p];
      v272 = &v59[v272 - v58];
      v273 = &v59[16 * v57];
    }
    v107 = *(_QWORD **)(v55 + 24);
    v108 = v255;
    if (v107)
    {
      while (1)
      {
        v109 = v107[14];
        v110 = v107[15];
        v351.__r_.__value_.__r.__words[0] = v109;
        v351.__r_.__value_.__l.__size_ = v110;
        if (v110)
        {
          v111 = (unint64_t *)(v110 + 8);
          do
            v112 = __ldxr(v111);
          while (__stxr(v112 + 1, v111));
        }
        v113 = v272;
        if (v272 >= v273)
          break;
        *(_QWORD *)v272 = v109;
        *((_QWORD *)v113 + 1) = v110;
        v272 = v113 + 16;
LABEL_181:
        v107 = (_QWORD *)*v107;
        if (!v107)
          goto LABEL_212;
      }
      v114 = (char *)__p;
      v115 = (v272 - (_BYTE *)__p) >> 4;
      v116 = v115 + 1;
      if ((unint64_t)(v115 + 1) >> 60)
        abort();
      if ((v273 - (_BYTE *)__p) >> 3 > v116)
        v116 = (v273 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v273 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF0)
        v48 = 0xFFFFFFFFFFFFFFFLL;
      else
        v48 = v116;
      if (v48 >> 60)
        goto LABEL_424;
      v117 = (char *)operator new(16 * v48);
      v118 = &v117[16 * v115];
      *(_OWORD *)v118 = *(_OWORD *)&v351.__r_.__value_.__l.__data_;
      v119 = v118 + 16;
      *(_OWORD *)&v351.__r_.__value_.__l.__data_ = 0uLL;
      if (v113 == v114)
      {
        __p = v118;
        v273 = &v117[16 * v48];
        if (!v113)
          goto LABEL_205;
      }
      else
      {
        v120 = v113;
        do
        {
          v121 = *((_OWORD *)v120 - 1);
          v120 -= 16;
          *((_OWORD *)v118 - 1) = v121;
          v118 -= 16;
          *(_QWORD *)v120 = 0;
          *((_QWORD *)v120 + 1) = 0;
        }
        while (v120 != v114);
        __p = v118;
        v272 = v119;
        v273 = &v117[16 * v48];
        do
        {
          v48 = *((_QWORD *)v113 - 1);
          if (v48)
          {
            v122 = (unint64_t *)(v48 + 8);
            do
              v123 = __ldaxr(v122);
            while (__stlxr(v123 - 1, v122));
            if (!v123)
            {
              (*(void (**)(unint64_t))(*(_QWORD *)v48 + 16))(v48);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v48);
            }
          }
          v113 -= 16;
        }
        while (v113 != v114);
        v113 = v114;
        if (!v114)
          goto LABEL_205;
      }
      operator delete(v113);
LABEL_205:
      v124 = (std::__shared_weak_count *)v351.__r_.__value_.__l.__size_;
      v272 = v119;
      v108 = v255;
      if (v351.__r_.__value_.__l.__size_)
      {
        v125 = (unint64_t *)(v351.__r_.__value_.__l.__size_ + 8);
        do
          v126 = __ldaxr(v125);
        while (__stlxr(v126 - 1, v125));
        if (!v126)
        {
          ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
          std::__shared_weak_count::__release_weak(v124);
        }
      }
      goto LABEL_181;
    }
LABEL_212:
    md::trafficStyleAttributes((uint64_t *)&v351, *(geo::codec::VectorTile **)(v269 + 144));
    std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(&v280, (uint64_t)v351.__r_.__value_.__l.__data_, (_QWORD *)v351.__r_.__value_.__l.__size_, (uint64_t)(v351.__r_.__value_.__l.__size_ - v351.__r_.__value_.__r.__words[0]) >> 3);
    if (v351.__r_.__value_.__r.__words[0])
    {
      v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
      (*(void (**)(__n128 (*)(uint64_t, uint64_t), std::string::size_type, std::string::size_type))(*(_QWORD *)v352 + 40))(v352, v351.__r_.__value_.__r.__words[0], v351.__r_.__value_.__r.__words[2] - v351.__r_.__value_.__r.__words[0]);
    }
    v127 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v296 + 16) + 2786));
    if ((v127 & 1) == 0)
      goto LABEL_334;
    *(std::string::size_type *)((char *)v351.__r_.__value_.__r.__words + 7) = 0;
    v351.__r_.__value_.__r.__words[0] = 0;
    v351.__r_.__value_.__s.__data_[15] = 1;
    gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(&v267, *(uint64_t *)v296, (gss::FeatureAttributeSet *)&v280, (gss::QueryOverrides *)&v351);
    if (!v351.__r_.__value_.__s.__data_[14] && v351.__r_.__value_.__r.__words[0])
    {
      v129 = gss::Allocator::instance(v128);
      (*(void (**)(uint64_t, std::string::size_type, _QWORD))(*(_QWORD *)v129 + 40))(v129, v351.__r_.__value_.__r.__words[0], WORD2(v351.__r_.__value_.__r.__words[1]));
    }
    v48 = v267;
    if (!v267)
    {
LABEL_329:
      v211 = (std::__shared_weak_count *)v268;
      if (v268)
      {
        v212 = (unint64_t *)(v268 + 8);
        do
          v213 = __ldaxr(v212);
        while (__stlxr(v213 - 1, v212));
        if (!v213)
        {
          ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
          std::__shared_weak_count::__release_weak(v211);
        }
      }
LABEL_334:
      v214 = v274;
      if (*((_QWORD *)&v278 + 1))
      {
        v215 = (_QWORD *)v278;
        if ((_QWORD)v278)
        {
          do
          {
            v216 = (_QWORD *)*v215;
            operator delete(v215);
            v215 = v216;
          }
          while (v216);
        }
        *(_QWORD *)&v278 = 0;
        v217 = *((_QWORD *)&v277 + 1);
        if (*((_QWORD *)&v277 + 1))
        {
          v218 = 0;
          do
            *(_QWORD *)(v277 + 8 * v218++) = 0;
          while (v217 != v218);
        }
        *((_QWORD *)&v278 + 1) = 0;
      }
      v219 = zilch::TrafficSkeletonTile::size(*(zilch::TrafficSkeletonTile **)(v214 + 144));
      prime = vcvtps_u32_f32((float)(v219 >> 1) / v279);
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v221 = *((_QWORD *)&v277 + 1);
      if (prime > *((_QWORD *)&v277 + 1))
        goto LABEL_346;
      if (prime < *((_QWORD *)&v277 + 1))
      {
        v222 = vcvtps_u32_f32((float)*((unint64_t *)&v278 + 1) / v279);
        if (*((_QWORD *)&v277 + 1) < 3uLL
          || (v223 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v277 + 8)),
              v223.i16[0] = vaddlv_u8(v223),
              v223.u32[0] > 1uLL))
        {
          v222 = std::__next_prime(v222);
        }
        else
        {
          v224 = 1 << -(char)__clz(v222 - 1);
          if (v222 >= 2)
            v222 = v224;
        }
        if (prime <= v222)
          prime = v222;
        if (prime < v221)
LABEL_346:
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)&v277, prime);
      }
      v225 = 0;
      v5 = v255;
      while (1)
      {
        if (v225 >= zilch::TrafficSkeletonTile::size(*(zilch::TrafficSkeletonTile **)(v214 + 144)))
          goto LABEL_72;
        v226 = *(_QWORD *)zilch::TrafficSkeletonTile::operator[]();
        v227 = v226;
        v258 = v226;
        v228 = HIDWORD(v226);
        v229 = ((unint64_t)v226 << 6)
             + ((unint64_t)v226 >> 2)
             - 0x61C8864680B583EBLL
             + HIDWORD(v226);
        v230 = v229 ^ v226;
        v231 = *((_QWORD *)&v277 + 1);
        if (*((_QWORD *)&v277 + 1))
        {
          v232 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v277 + 8));
          v232.i16[0] = vaddlv_u8(v232);
          if (v232.u32[0] > 1uLL)
          {
            v48 = v229 ^ v227;
            if (v230 >= *((_QWORD *)&v277 + 1))
              v48 = v230 % *((_QWORD *)&v277 + 1);
          }
          else
          {
            v48 = v230 & (*((_QWORD *)&v277 + 1) - 1);
          }
          v233 = *(uint64_t ***)(v277 + 8 * v48);
          if (v233)
          {
            v234 = *v233;
            if (v234)
            {
              if (v232.u32[0] < 2uLL)
              {
                while (1)
                {
                  v238 = v234[1];
                  if (v238 == v230)
                  {
                    if (*((_DWORD *)v234 + 4) == (_DWORD)v227 && *((_DWORD *)v234 + 5) == v228)
                      goto LABEL_361;
                  }
                  else if ((v238 & (*((_QWORD *)&v277 + 1) - 1)) != v48)
                  {
                    goto LABEL_389;
                  }
                  v234 = (uint64_t *)*v234;
                  if (!v234)
                    goto LABEL_389;
                }
              }
              do
              {
                v236 = v234[1];
                if (v236 == v230)
                {
                  if (*((_DWORD *)v234 + 4) == (_DWORD)v227 && *((_DWORD *)v234 + 5) == v228)
                    goto LABEL_361;
                }
                else
                {
                  if (v236 >= *((_QWORD *)&v277 + 1))
                    v236 %= *((_QWORD *)&v277 + 1);
                  if (v236 != v48)
                    break;
                }
                v234 = (uint64_t *)*v234;
              }
              while (v234);
            }
          }
        }
LABEL_389:
        v239 = operator new(0x18uLL);
        *v239 = 0;
        v239[1] = v230;
        v239[2] = v258;
        v240 = (float)(unint64_t)(*((_QWORD *)&v278 + 1) + 1);
        if (!v231 || (float)(v279 * (float)v231) < v240)
        {
          v241 = (v231 & (v231 - 1)) != 0;
          if (v231 < 3)
            v241 = 1;
          v242 = v241 | (2 * v231);
          v243 = vcvtps_u32_f32(v240 / v279);
          if (v242 <= v243)
            v244 = v243;
          else
            v244 = v242;
          if (v244 == 1)
          {
            v244 = 2;
          }
          else if ((v244 & (v244 - 1)) != 0)
          {
            v244 = std::__next_prime(v244);
            v231 = *((_QWORD *)&v277 + 1);
          }
          if (v244 > v231)
            goto LABEL_401;
          if (v244 < v231)
          {
            v245 = vcvtps_u32_f32((float)*((unint64_t *)&v278 + 1) / v279);
            if (v231 < 3
              || (v246 = (uint8x8_t)vcnt_s8((int8x8_t)v231), v246.i16[0] = vaddlv_u8(v246), v246.u32[0] > 1uLL))
            {
              v245 = std::__next_prime(v245);
            }
            else
            {
              v247 = 1 << -(char)__clz(v245 - 1);
              if (v245 >= 2)
                v245 = v247;
            }
            if (v244 <= v245)
              v244 = v245;
            if (v244 < v231)
LABEL_401:
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)&v277, v244);
          }
          v231 = *((_QWORD *)&v277 + 1);
          if ((*((_QWORD *)&v277 + 1) & (*((_QWORD *)&v277 + 1) - 1)) != 0)
          {
            if (v230 >= *((_QWORD *)&v277 + 1))
              v48 = v230 % *((_QWORD *)&v277 + 1);
            else
              v48 = v230;
          }
          else
          {
            v48 = (*((_QWORD *)&v277 + 1) - 1) & v230;
          }
        }
        v248 = v277;
        v249 = *(_QWORD **)(v277 + 8 * v48);
        if (v249)
        {
          *v239 = *v249;
        }
        else
        {
          *v239 = v278;
          *(_QWORD *)&v278 = v239;
          *(_QWORD *)(v248 + 8 * v48) = &v278;
          if (!*v239)
            goto LABEL_360;
          v250 = *(_QWORD *)(*v239 + 8);
          if ((v231 & (v231 - 1)) != 0)
          {
            if (v250 >= v231)
              v250 %= v231;
          }
          else
          {
            v250 &= v231 - 1;
          }
          v249 = (_QWORD *)(v277 + 8 * v250);
        }
        *v249 = v239;
LABEL_360:
        ++*((_QWORD *)&v278 + 1);
LABEL_361:
        ++v225;
      }
    }
    memset_pattern16(&__b, &unk_19FFB6380, 0x10uLL);
    v130 = (std::__shared_weak_count *)v268;
    v351.__r_.__value_.__r.__words[0] = v48;
    v351.__r_.__value_.__l.__size_ = v268;
    if (v268)
    {
      v131 = (unint64_t *)(v268 + 8);
      do
        v132 = __ldxr(v131);
      while (__stxr(v132 + 1, v131));
      v263 = v130;
      do
        v133 = __ldxr(v131);
      while (__stxr(v133 + 1, v131));
    }
    else
    {
      v263 = 0;
    }
    v264[0] = 0;
    v264[1] = 0;
    v262 = v48;
    v265 = 0;
    v265 = (*(uint64_t (**)(unint64_t, _QWORD *))(*(_QWORD *)v48 + 48))(v48, v264);
    if (v130)
    {
      v134 = (unint64_t *)&v130->__shared_owners_;
      do
        v135 = __ldaxr(v134);
      while (__stlxr(v135 - 1, v134));
      if (!v135)
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
    }
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v136 = (void *)objc_claimAutoreleasedReturnValue();
    v137 = objc_msgSend(v136, "loadGreenTraffic");

    v138 = v265;
    if (v265)
    {
      v48 = 3;
      md::TrafficMeshStyle::overrideSetup(__b.i32, (uint64_t)&v262, v137, 3);
    }
    else
    {
      memset_pattern16(&__b, &unk_19FFB6390, 0x10uLL);
      v48 = 4;
    }
    v383 = 0;
    v384 = &v383;
    v385 = 0x2020000000;
    v386 = 0;
    v379 = 0;
    v380 = &v379;
    v381 = 0x2020000000;
    v382 = 0;
    v139 = std::__get_sp_mut(v256);
    std::__sp_mut::lock(v139);
    v140 = *(std::__shared_weak_count **)(v108 + 768);
    v377 = *(_QWORD *)(v108 + 760);
    v378 = v140;
    if (v140)
    {
      v141 = (unint64_t *)&v140->__shared_owners_;
      do
        v142 = __ldxr(v141);
      while (__stxr(v142 + 1, v141));
    }
    std::__sp_mut::unlock(v139);
    v143.i64[0] = 0x500000005;
    v143.i64[1] = 0x500000005;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(__b, v143)))) & 1) == 0)
    {
LABEL_319:
      v206 = v285;
      v285 = v384[3];
      if (v206)
        (*(void (**)(uint64_t))(*(_QWORD *)v206 + 8))(v206);
      v207 = v284;
      v284 = v380[3];
      if (v207)
        (*(void (**)(uint64_t))(*(_QWORD *)v207 + 8))(v207);
      v208 = v378;
      if (v378)
      {
        v209 = (unint64_t *)&v378->__shared_owners_;
        do
          v210 = __ldaxr(v209);
        while (__stlxr(v210 - 1, v209));
        if (!v210)
        {
          ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
          std::__shared_weak_count::__release_weak(v208);
        }
      }
      _Block_object_dispose(&v379, 8);
      _Block_object_dispose(&v383, 8);
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v262);
      goto LABEL_329;
    }
    v351.__r_.__value_.__r.__words[0] = 0;
    v351.__r_.__value_.__l.__size_ = (std::string::size_type)&v351;
    v351.__r_.__value_.__r.__words[2] = 0x11812000000;
    v352 = __Block_byref_object_copy__12;
    v353 = __Block_byref_object_dispose__13;
    v354 = "";
    v355 = 0u;
    v356 = 0u;
    v357 = 0u;
    v358 = 0u;
    v359 = 0u;
    v360 = 0u;
    v361 = 3;
    v363 = 0;
    v362 = 0;
    v364 = -1054867456;
    v365 = 0;
    v366 = 0xFFFFFFF6FFFFFFFFLL;
    v367 = -1054867456;
    v368 = 0u;
    v369 = 0u;
    v370 = 0;
    v371 = 0xFFFFFFFF00000000;
    v375 = 0;
    v376 = v138 ^ 1;
    v144 = 1.0 / (double)(1 << SHIBYTE(v294));
    v145 = exp(v144 * 6.28318531 * ((double)((1 << SHIBYTE(v294)) + ~v295.i32[0]) + 0.5) + -3.14159265);
    v146 = atan(v145) * 114.591559 + -90.0;
    v147 = cos(v146 * 0.034906585) * -559.82 + 111132.92;
    v148 = v147 + cos(v146 * 0.0698131701) * 1.175;
    v149 = v148 + cos(v146 * 0.104719755) * -0.0023;
    v150 = v146 * 0.00872664626;
    v151 = tan(v146 * 0.00872664626 + 0.78103484);
    v152 = log(v151);
    v153 = tan(v150 + 0.789761487);
    v154 = fabs((log(v153) - v152) * 0.159154943) / (v149 * v144);
    v155 = (gss::Allocator *)__powidf2();
    v372 = v154;
    v373 = v154;
    v374 = v156 * 0.0000000249532021;
    v342 = 0;
    v343 = &v342;
    v344 = 0x5812000000;
    v345 = __Block_byref_object_copy__14_2032;
    v346 = __Block_byref_object_dispose__15_2033;
    v347 = 0u;
    v348 = 0u;
    v349 = 0;
    v350 = 1065353216;
    v339 = 0u;
    v340 = 0u;
    v341 = 1065353216;
    v330 = 0;
    v331 = &v330;
    v332 = 0x5812000000;
    v333 = __Block_byref_object_copy__16;
    v334 = __Block_byref_object_dispose__17;
    v335 = 0u;
    v336 = 0u;
    v337 = 0;
    v338 = 1065353216;
    v321 = 0;
    v322 = &v321;
    v323 = 0x5812000000;
    v324 = __Block_byref_object_copy__18;
    v325 = __Block_byref_object_dispose__19;
    v326 = 0u;
    v327 = 0u;
    v328 = 0;
    v329 = 1065353216;
    v312 = 0;
    v313 = &v312;
    v314 = 0x5812000000;
    v315 = __Block_byref_object_copy__20;
    v316 = __Block_byref_object_dispose__21;
    v317 = 0u;
    v318 = 0u;
    v319 = 0;
    v320 = 1065353216;
    v157 = gss::Allocator::instance(v155);
    v158 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v157 + 16))(v157, 8, 4);
    v159 = v158;
    if (v158)
      *v158 = 0xA00000005;
    v252 = v157;
    v160 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v157 + 16))(v157, 16, 4);
    v161 = v160;
    if (v160)
      v160[1] = 65543;
    *v160 = *v159;
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v157 + 40))(v157, v159, 8);
    *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
    *((_QWORD *)&buf + 1) = 3321888768;
    v390 = ___ZNK2md19RoadLayerDataSource17createTrafficMeshENS_16TrafficMeshStyle5StyleERNSt3__110unique_ptrINS_19DaVinciTrafficLayerENS3_14default_deleteIS5_EEEERNS4_INS_17CasedTrafficLayerENS6_ISA_EEEERKN3geo8QuadTileERKNS3_10shared_ptrINS_21GEOVectorTileResourceEEERKNSI_INS_27TrafficSkeletonTileResourceEEERKNS3_6vectorINSI_INS_26TrafficDynamicTileResourceEEENS3_9allocatorIST_EEEERKS1_PN3ggl6LoaderERKNSI_INS11_17ConstantDataTypedINS11_4Tile4ViewEEEEERKNSI_INS14_INS15_9TransformEEEEEb_block_invoke;
    v391 = &unk_1E428A6E8;
    v404 = v48;
    v397 = 0;
    v398 = 0;
    v399 = 0;
    v400 = v157;
    v257 = v161;
    v162 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v157 + 16))(v157, 16, 4);
    v397 = v162;
    v398 = v162;
    v399 = (char *)(v162 + 2);
    if (v162)
      *v162 = *v161;
    v162[1] = v161[1];
    v398 = v162 + 2;
    v401 = v377;
    v402 = v378;
    if (v378)
    {
      v163 = (unint64_t *)&v378->__shared_owners_;
      do
        v164 = __ldxr(v163);
      while (__stxr(v164 + 1, v163));
    }
    v251 = v138;
    v392 = &v351;
    v393 = &v342;
    v394 = &v312;
    v395 = &v321;
    p_b = &__b;
    v396 = &v330;
    v165 = (void *)MEMORY[0x1A1AF5730](&buf);
    v166 = (int8x8_t **)__p;
    v167 = (int8x8_t **)v272;
    if (__p != v272)
    {
      v168 = 4 * (*(_BYTE *)(v108 + 802) == 0);
      do
      {
        v170 = *(zilch::TrafficSkeletonTile **)(v274 + 144);
        v169 = *(std::__shared_weak_count **)(v274 + 152);
        if (v169)
        {
          v171 = (unint64_t *)&v169->__shared_owners_;
          do
            v172 = __ldxr(v171);
          while (__stxr(v172 + 1, v171));
          do
            v173 = __ldaxr(v171);
          while (__stlxr(v173 - 1, v171));
          if (!v173)
          {
            ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
            std::__shared_weak_count::__release_weak(v169);
          }
        }
        if (zilch::TrafficSkeletonTile::size(v170))
          v174 = zilch::TrafficSkeletonTile::operator[]();
        else
          v174 = 0;
        v175 = v269;
        v48 = v274;
        v176 = *(zilch::TrafficSkeletonTile **)(v274 + 144);
        v177 = *(std::__shared_weak_count **)(v274 + 152);
        v300 = v176;
        v301 = (uint64_t)v177;
        if (v177)
        {
          v178 = (unint64_t *)&v177->__shared_owners_;
          do
            v179 = __ldxr(v178);
          while (__stxr(v179 + 1, v178));
        }
        v180 = zilch::TrafficSkeletonTile::size(v176);
        md::buildTrafficMesh(v175, (uint64_t)&__b, v48, v174, 0, v180, *v166, v165, &v377, v137, v168);
        if (v177)
        {
          v181 = (unint64_t *)&v177->__shared_owners_;
          do
            v182 = __ldaxr(v181);
          while (__stlxr(v182 - 1, v181));
          if (!v182)
          {
            ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
            std::__shared_weak_count::__release_weak(v177);
          }
        }
        v166 += 2;
      }
      while (v166 != v167);
    }
    if (v251)
    {
      v183 = v257;
      md::TrafficAccum::flushToRibbonCollection(v351.__r_.__value_.__l.__size_ + 48, (uint64_t)&__b, v313 + 6, v322 + 6, v331 + 6);
    }
    else
    {
      v311[0] = 0;
      v311[24] = 0;
      v310[1] = 0;
      v310[0] = 0;
      LOWORD(v300) = 255;
      LODWORD(v301) = 0;
      HIDWORD(v300) = 0;
      md::TrafficAccum::flushToRibbonCollection((unint64_t *)(v351.__r_.__value_.__l.__size_ + 48), v343 + 6, (uint64_t)v311, v310, (unsigned __int8 *)&v300);
      v183 = v257;
    }
    v300 = (zilch::TrafficSkeletonTile *)MEMORY[0x1E0C809B0];
    v301 = 3221225472;
    v302 = ___ZNK2md19RoadLayerDataSource17createTrafficMeshENS_16TrafficMeshStyle5StyleERNSt3__110unique_ptrINS_19DaVinciTrafficLayerENS3_14default_deleteIS5_EEEERNS4_INS_17CasedTrafficLayerENS6_ISA_EEEERKN3geo8QuadTileERKNS3_10shared_ptrINS_21GEOVectorTileResourceEEERKNSI_INS_27TrafficSkeletonTileResourceEEERKNS3_6vectorINSI_INS_26TrafficDynamicTileResourceEEENS3_9allocatorIST_EEEERKS1_PN3ggl6LoaderERKNSI_INS11_17ConstantDataTypedINS11_4Tile4ViewEEEEERKNSI_INS14_INS15_9TransformEEEEEb_block_invoke_24;
    v303 = &unk_1E42EB910;
    v304 = &v383;
    v305 = &v342;
    v308 = &v288;
    v309 = &v286;
    v306 = &v379;
    v307 = &v330;
    v388 = 0;
    v387[0] = &off_1E42C7118;
    v387[1] = MEMORY[0x1A1AF5730](&v300);
    v388 = v387;
    v299 = 0;
    v298 = 0;
    (*(void (**)(std::string::size_type, _QWORD *, uint64_t *))(*(_QWORD *)v290 + 16))(v290, v387, &v298);
    v184 = v299;
    if (v299)
    {
      v185 = (unint64_t *)&v299->__shared_owners_;
      do
        v186 = __ldaxr(v185);
      while (__stlxr(v186 - 1, v185));
      if (!v186)
      {
        ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
        std::__shared_weak_count::__release_weak(v184);
      }
    }
    v187 = v388;
    if (v388 == v387)
    {
      v188 = 4;
      v187 = v387;
    }
    else
    {
      if (!v388)
        goto LABEL_280;
      v188 = 5;
    }
    (*(void (**)(void))(*v187 + 8 * v188))();
LABEL_280:

    v189 = v402;
    if (v402)
    {
      v190 = (unint64_t *)&v402->__shared_owners_;
      do
        v191 = __ldaxr(v190);
      while (__stlxr(v191 - 1, v190));
      if (!v191)
      {
        ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
        std::__shared_weak_count::__release_weak(v189);
      }
    }
    if (v397)
    {
      v398 = v397;
      (*(void (**)(uint64_t, _QWORD *, int64_t))(*(_QWORD *)v400 + 40))(v400, v397, v399 - (char *)v397);
    }
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v252 + 40))(v252, v183, 16);
    _Block_object_dispose(&v312, 8);
    std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*((_QWORD **)&v318 + 1));
    v192 = (void *)*((_QWORD *)&v317 + 1);
    *((_QWORD *)&v317 + 1) = 0;
    if (v192)
      operator delete(v192);
    _Block_object_dispose(&v321, 8);
    std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*((_QWORD **)&v327 + 1));
    v193 = (void *)*((_QWORD *)&v326 + 1);
    *((_QWORD *)&v326 + 1) = 0;
    if (v193)
      operator delete(v193);
    _Block_object_dispose(&v330, 8);
    std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*((_QWORD **)&v336 + 1));
    v194 = (void *)*((_QWORD *)&v335 + 1);
    *((_QWORD *)&v335 + 1) = 0;
    if (v194)
      operator delete(v194);
    v195 = (_QWORD *)v340;
    if ((_QWORD)v340)
    {
      do
      {
        v196 = (_QWORD *)*v195;
        std::pair<md::DaVinciTrafficBatchKey const,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>::~pair((uint64_t)(v195 + 2));
        operator delete(v195);
        v195 = v196;
      }
      while (v196);
    }
    if ((_QWORD)v339)
      operator delete((void *)v339);
    _Block_object_dispose(&v342, 8);
    v197 = (_QWORD *)*((_QWORD *)&v348 + 1);
    if (*((_QWORD *)&v348 + 1))
    {
      do
      {
        v198 = (_QWORD *)*v197;
        std::pair<md::DaVinciTrafficBatchKey const,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>::~pair((uint64_t)(v197 + 2));
        operator delete(v197);
        v197 = v198;
      }
      while (v198);
    }
    v199 = (void *)*((_QWORD *)&v347 + 1);
    *((_QWORD *)&v347 + 1) = 0;
    if (v199)
      operator delete(v199);
    _Block_object_dispose(&v351, 8);
    v200 = (std::__shared_weak_count *)*((_QWORD *)&v369 + 1);
    if (*((_QWORD *)&v369 + 1))
    {
      v201 = (unint64_t *)(*((_QWORD *)&v369 + 1) + 8);
      do
        v202 = __ldaxr(v201);
      while (__stlxr(v202 - 1, v201));
      if (!v202)
      {
        ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
        std::__shared_weak_count::__release_weak(v200);
      }
    }
    v203 = (std::__shared_weak_count *)*((_QWORD *)&v368 + 1);
    if (*((_QWORD *)&v368 + 1))
    {
      v204 = (unint64_t *)(*((_QWORD *)&v368 + 1) + 8);
      do
        v205 = __ldaxr(v204);
      while (__stlxr(v205 - 1, v204));
      if (!v205)
      {
        ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
        std::__shared_weak_count::__release_weak(v203);
      }
    }
    if (*((_QWORD *)&v359 + 1))
    {
      *(_QWORD *)&v360 = *((_QWORD *)&v359 + 1);
      operator delete(*((void **)&v359 + 1));
    }
    if ((_QWORD)v358)
    {
      *((_QWORD *)&v358 + 1) = v358;
      operator delete((void *)v358);
    }
    if (*((_QWORD *)&v356 + 1))
    {
      *(_QWORD *)&v357 = *((_QWORD *)&v356 + 1);
      operator delete(*((void **)&v356 + 1));
    }
    if ((_QWORD)v355)
    {
      *((_QWORD *)&v355 + 1) = v355;
      operator delete((void *)v355);
    }
    goto LABEL_319;
  }
LABEL_71:
  if (!*(_BYTE *)(v5 + 801) && *(_BYTE *)(v5 + 800))
  {
    if (!v56)
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v102 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
      {
        gdc::LayerDataRequestKey::keysInt32Str(&v351, (unsigned __int16 *)a2);
        v103 = (v351.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? &v351
             : (std::string *)v351.__r_.__value_.__r.__words[0];
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v103;
        _os_log_impl(&dword_19F029000, v102, OS_LOG_TYPE_ERROR, "Failed to find traffic skeleton resources for key: %s", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v351.__r_.__value_.__l.__data_);
      }

      v54 = a3[1];
    }
    if (v55 == v54)
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v104 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
      {
        gdc::LayerDataRequestKey::keysInt32Str(&v351, (unsigned __int16 *)a2);
        v105 = (v351.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? &v351
             : (std::string *)v351.__r_.__value_.__r.__words[0];
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v105;
        _os_log_impl(&dword_19F029000, v104, OS_LOG_TYPE_ERROR, "Failed to find dynamic traffic resources for key: %s", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v351.__r_.__value_.__l.__data_);
      }

    }
    *a4 = 0;
    a4[1] = 0;
    v70 = v270;
    if (v270)
    {
      v106 = (unint64_t *)&v270->__shared_owners_;
      do
        v72 = __ldaxr(v106);
      while (__stlxr(v72 - 1, v106));
LABEL_91:
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
      goto LABEL_93;
    }
    goto LABEL_93;
  }
LABEL_72:
  v60 = v270;
  if (v270)
  {
    v61 = (unint64_t *)&v270->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
LABEL_77:
  v260 = v288;
  v261 = v289;
  if (v289)
  {
    v63 = (unint64_t *)&v289->__shared_owners_;
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  v65 = (std::__shared_weak_count *)v287;
  v259[0] = v286;
  v259[1] = v287;
  if (v287)
  {
    v66 = (unint64_t *)(v287 + 8);
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
  }
  md::RoadLayerDataSource::buildRoadTileData(&v351, (_QWORD *)v5, a2, &v290, &v294, (uint64_t **)&v291, &v277, &v285, &v284, (uint64_t)&v280, &v260, v259, &v274, (__int128 **)&__p, (uint64_t)v276);
  *(_OWORD *)a4 = *(_OWORD *)&v351.__r_.__value_.__l.__data_;
  *(_OWORD *)&v351.__r_.__value_.__l.__data_ = 0uLL;
  if (v65)
  {
    v68 = (unint64_t *)&v65->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v70 = v261;
  if (v261)
  {
    v71 = (unint64_t *)&v261->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    goto LABEL_91;
  }
LABEL_93:
  v73 = (char *)__p;
  if (__p)
  {
    v74 = v272;
    if (v272 != __p)
    {
      do
      {
        v75 = (std::__shared_weak_count *)*((_QWORD *)v74 - 1);
        if (v75)
        {
          v76 = (unint64_t *)&v75->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        v74 -= 16;
      }
      while (v74 != v73);
      v73 = (char *)__p;
    }
    operator delete(v73);
  }
  v78 = v275;
  if (v275)
  {
    v79 = (unint64_t *)&v275->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  if (v276[0])
    operator delete(v276[0]);
  v81 = (_QWORD *)v278;
  if ((_QWORD)v278)
  {
    do
    {
      v82 = (_QWORD *)*v81;
      operator delete(v81);
      v81 = v82;
    }
    while (v82);
  }
  v83 = (void *)v277;
  *(_QWORD *)&v277 = 0;
  if (v83)
    operator delete(v83);
  if (v280)
  {
    v281 = v280;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v283 + 40))(v283, v280, v282 - v280);
  }
  if (v284)
    (*(void (**)(uint64_t))(*(_QWORD *)v284 + 8))(v284);
  if (v285)
    (*(void (**)(uint64_t))(*(_QWORD *)v285 + 8))(v285);
  v84 = (std::__shared_weak_count *)v287;
  if (v287)
  {
    v85 = (unint64_t *)(v287 + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v289;
  if (v289)
  {
    v88 = (unint64_t *)&v289->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  if (v290)
  {
    v90 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v290 + 24))(v290);
    v91 = v290;
    v290 = 0;
    v351.__r_.__value_.__r.__words[0] = v91;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v90 + 48))(v90, &v351);
    v92 = v351.__r_.__value_.__r.__words[0];
    v351.__r_.__value_.__r.__words[0] = 0;
    if (v92)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v92 + 8))(v92);
    v93 = v290;
    v290 = 0;
    if (v93)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v93 + 8))(v93);
  }
  v94 = (std::string::size_type *)v291;
  if (v291)
  {
    v95 = v292;
    if (v292 != v291)
    {
      do
      {
        v96 = (std::__shared_weak_count *)*(v95 - 1);
        if (v96)
        {
          v97 = (unint64_t *)&v96->__shared_owners_;
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
        v95 -= 2;
      }
      while (v95 != v94);
      v94 = (std::string::size_type *)v291;
    }
    operator delete(v94);
  }
  v99 = v297;
  if (v297)
  {
    v100 = (unint64_t *)&v297->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
}

void sub_19F37EEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,char a63)
{
  char a65;
  __int16 a67;
  char a72;
  void *v72;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x268]);

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x618]);
  v74 = STACK[0x5F8];
  if (STACK[0x5F8])
  {
    STACK[0x600] = v74;
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)STACK[0x610] + 40))(STACK[0x610], v74, STACK[0x608] - v74);
  }
  if (a23)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a19 + 40))(a19, a23, a17 - a23);
  _Block_object_dispose(&STACK[0x298], 8);
  std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>::~unordered_map[abi:nn180100]((uint64_t)&STACK[0x2C8]);
  _Block_object_dispose(&STACK[0x2F0], 8);
  std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>::~unordered_map[abi:nn180100]((uint64_t)&STACK[0x320]);
  _Block_object_dispose(&STACK[0x348], 8);
  std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>::~unordered_map[abi:nn180100]((uint64_t)&STACK[0x378]);
  std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>::~unordered_map[abi:nn180100]((uint64_t)&STACK[0x3A0]);
  _Block_object_dispose(&STACK[0x3C8], 8);
  std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>::~unordered_map[abi:nn180100]((uint64_t)&STACK[0x3F8]);
  _Block_object_dispose(&STACK[0x420], 8);
  md::TrafficAccum::~TrafficAccum((md::TrafficAccum *)&STACK[0x450]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x540]);
  _Block_object_dispose(&STACK[0x550], 8);
  _Block_object_dispose(&STACK[0x570], 8);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a30);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)&a41);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  if (__p)
    operator delete(__p);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a49);
  if (a55)
  {
    a56 = a55;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a58 + 40))(a58, a55, a57 - a55);
    v75 = a59;
    if (!a59)
    {
LABEL_9:
      v76 = a60;
      if (!a60)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  else
  {
    v75 = a59;
    if (!a59)
      goto LABEL_9;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = a60;
  if (!a60)
  {
LABEL_11:
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a61);
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
    ggl::Loader::~Loader((ggl::Loader *)&a65);
    md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)&a67);
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a72);
    _Unwind_Resume(a1);
  }
LABEL_10:
  (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
  goto LABEL_11;
}

void md::RoadLayerDataSource::buildRoadTileData(_QWORD *a1, _QWORD *a2, uint64_t a3, _QWORD *a4, __int16 *a5, uint64_t **a6, _QWORD *a7, uint64_t *a8, uint64_t *a9, uint64_t a10, _QWORD *a11, uint64_t *a12, uint64_t *a13, __int128 **a14, uint64_t a15)
{
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  std::__sp_mut *sp_mut;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  std::__sp_mut *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  std::__sp_mut *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  std::__sp_mut *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t i;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  _DWORD *v64;
  unint64_t v65;
  int *v66;
  int v67;
  unint64_t v68;
  int v69;
  int v70;
  std::__sp_mut *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  gss::Allocator *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  size_t v82;
  uint8x8_t v83;
  size_t v84;
  _QWORD *v85;
  _QWORD *v86;
  size_t v87;
  uint64_t v88;
  _DWORD *v89;
  unint64_t *v90;
  unint64_t v91;
  char *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  BOOL v99;
  uint64_t v100;
  unint64_t v101;
  _DWORD *v102;
  _DWORD *v103;
  _DWORD *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  _DWORD *v108;
  _DWORD *v109;
  uint64_t v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  geo::codec *v116;
  uint64_t v117;
  _DWORD *v118;
  _DWORD *v119;
  uint64_t v120;
  uint64_t v121;
  std::__sp_mut *v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  gss::Allocator *v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  BOOL v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  _DWORD *v135;
  unint64_t v136;
  _BOOL4 v137;
  int *v138;
  int v139;
  int v140;
  std::__sp_mut *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  gss::Allocator *v146;
  uint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  _DWORD *v152;
  _BOOL4 v153;
  unint64_t v154;
  int *v155;
  int v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  int v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  float *v164;
  float v165;
  BOOL v166;
  unsigned int v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t v171;
  unint64_t v172;
  unsigned __int16 *v173;
  unsigned __int16 *v174;
  unint64_t v175;
  uint64_t v176;
  unsigned int v177;
  unint64_t v178;
  unsigned __int16 *v179;
  unsigned __int16 *v180;
  unsigned int v181;
  uint64_t v182;
  int v183;
  int v184;
  int v185;
  int IsConstantFor;
  float v187;
  uint64_t v188;
  float *v189;
  float v190;
  BOOL v191;
  unsigned int v192;
  _BOOL4 v193;
  int v194;
  uint64_t v196;
  float *v197;
  float v198;
  _BOOL4 v199;
  unsigned int v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  unint64_t v205;
  unsigned __int16 *v206;
  unsigned __int16 *v207;
  unint64_t v208;
  uint64_t v209;
  unsigned int v210;
  unint64_t v211;
  unsigned __int16 *v212;
  unsigned __int16 *v213;
  unsigned int v214;
  unsigned int v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  uint64_t *v221;
  uint64_t v222;
  unint64_t v223;
  unsigned __int16 *v224;
  unsigned __int16 *v225;
  unint64_t v226;
  uint64_t v227;
  unsigned int v228;
  unint64_t v229;
  unsigned __int16 *v230;
  unsigned __int16 *v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  unint64_t v237;
  unsigned __int16 *v238;
  unsigned __int16 *v239;
  unint64_t v240;
  uint64_t v241;
  unsigned int v242;
  unint64_t v243;
  unsigned __int16 *v244;
  unsigned __int16 *v245;
  unsigned int v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  uint64_t *v254;
  uint64_t v255;
  unint64_t v256;
  unsigned __int16 *v257;
  unsigned __int16 *v258;
  unint64_t v259;
  uint64_t v260;
  unsigned int v261;
  unint64_t v262;
  unsigned __int16 *v263;
  unsigned __int16 *v264;
  unsigned int v265;
  uint64_t v266;
  float v267;
  _BOOL4 v268;
  char hasValueForKeyAtEnd;
  float v271;
  _BOOL4 v272;
  unsigned int v273;
  uint64_t v274;
  uint64_t v275;
  int *v276;
  int v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  unint64_t *v284;
  unint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t *v290;
  int8x8_t v291;
  unint64_t v292;
  uint8x8_t v293;
  unint64_t v294;
  BOOL v295;
  uint64_t *v296;
  uint64_t v297;
  unint64_t v299;
  uint64_t v301;
  float32x2_t *v302;
  unint64_t v303;
  geo::codec *v304;
  uint64_t (**v305)();
  BOOL v306;
  int *v307;
  int v308;
  uint64_t (**v309)();
  uint64_t (**v310)();
  int *v311;
  int v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  _DWORD *v316;
  char *v317;
  int *v318;
  int v319;
  float32x2_t v320;
  int8x8_t *v321;
  NSObject *v322;
  uint64_t v323;
  void *v324;
  std::ios_base *v325;
  size_t v326;
  unint64_t *p_dst;
  float v328;
  int8x8_t v329;
  unint64_t v330;
  uint8x8_t v331;
  unint64_t v332;
  unint64_t v333;
  const void **v334;
  const void *v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t *v338;
  int v339;
  int v340;
  uint64_t **v341;
  uint64_t *v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  float v347;
  float v348;
  float v349;
  float32x2_t *v350;
  float32x2_t v351;
  float v352;
  int8x8_t v353;
  uint8x8_t v354;
  unint64_t v355;
  uint64_t **v356;
  uint64_t *v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  float v362;
  float v363;
  float v364;
  uint64_t v365;
  unint64_t v366;
  uint64_t *v367;
  unint64_t v368;
  unint64_t v369;
  uint64_t *v370;
  unint64_t v371;
  int v372;
  char v373;
  float32x2_t *v374;
  char v375;
  float32x2_t v376;
  int v377;
  char v378;
  float v379;
  int8x8_t v380;
  unint64_t v381;
  uint8x8_t v382;
  uint64_t v383;
  uint64_t **v384;
  uint64_t *v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  float v390;
  float v391;
  float v392;
  _QWORD *v393;
  int8x8_t v394;
  unint64_t v395;
  uint8x8_t v396;
  unint64_t v397;
  uint64_t **v398;
  uint64_t *v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  float v404;
  float v405;
  float v406;
  float v407;
  uint64_t *v408;
  uint64_t v409;
  unint64_t v410;
  unint64_t v411;
  uint64_t *v412;
  uint64_t v413;
  unint64_t v414;
  unint64_t *v415;
  unint64_t v416;
  std::__shared_weak_count *v417;
  unint64_t *v418;
  unint64_t v419;
  std::__shared_weak_count *v420;
  unint64_t *v421;
  unint64_t v422;
  std::__shared_weak_count *v423;
  unint64_t *v424;
  unint64_t v425;
  uint64_t (***v426)();
  uint64_t v427;
  std::__shared_weak_count *v428;
  unint64_t *v429;
  unint64_t v430;
  std::__shared_weak_count *v431;
  unint64_t *v432;
  unint64_t v433;
  uint64_t v434;
  unint64_t *v435;
  unint64_t *v436;
  unint64_t v437;
  uint64_t v438;
  uint64_t v439;
  unint64_t v440;
  unint64_t *v441;
  char *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  _QWORD *prime;
  uint64_t v448;
  uint64_t v449;
  _QWORD *v450;
  size_t v451;
  uint64_t v452;
  _QWORD *j;
  unint64_t v454;
  unint64_t v455;
  unint64_t v456;
  unint64_t v457;
  unint64_t v458;
  unint64_t v459;
  uint8x8_t v460;
  _QWORD *v461;
  _QWORD *v462;
  unint64_t v463;
  uint64_t v464;
  _QWORD *v465;
  uint64_t v466;
  unint64_t *v467;
  unint64_t v468;
  _BYTE *v469;
  _BYTE *v470;
  int64_t v471;
  char *v472;
  size_t v473;
  float v474;
  float v475;
  _BOOL8 v476;
  unint64_t v477;
  unint64_t v478;
  size_t v479;
  int8x8_t v480;
  uint8x8_t v481;
  uint64_t v482;
  _QWORD *v483;
  unint64_t v484;
  uint64_t v485;
  uint64_t v486;
  unint64_t *v487;
  unint64_t v488;
  int8x8_t v489;
  BOOL v490;
  uint64_t v491;
  unint64_t *v492;
  unint64_t v493;
  uint64_t v494;
  unint64_t *v495;
  unint64_t v496;
  __int128 *v497;
  __int128 *v498;
  unint64_t *v499;
  unint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  _QWORD *v505;
  uint64_t v506;
  void *v507;
  void *v508;
  void *v509;
  void *v510;
  _QWORD *v511;
  void *v512;
  std::__shared_weak_count *v513;
  unint64_t *v514;
  unint64_t v515;
  uint8x8_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t *v525;
  int v526;
  std::__shared_weak_count *v527;
  void *v528;
  uint64_t v529;
  uint64_t v530;
  _QWORD *v531;
  _QWORD *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  void *v536;
  void *v537;
  uint64_t v538;
  uint64_t v539;
  void *v541;
  BOOL v542;
  uint64_t v543;
  unint64_t v544;
  NSObject *v545;
  uint64_t *v546;
  uint64_t v547;
  char v548;
  uint64_t v549;
  unint64_t v550;
  int8x8_t *v551;
  uint64_t v552;
  unsigned int v553;
  char v554;
  unint64_t v555;
  uint64_t v556;
  uint64_t v557;
  char v558;
  unint64_t v559;
  float32x2_t *v560;
  geo::codec *v561;
  geo::codec *v562;
  uint64_t v563;
  std::__shared_weak_count *v564;
  int v565;
  geo::codec *v566;
  _QWORD *v567;
  int v568;
  _QWORD *v569;
  uint64_t v570;
  std::__shared_weak_count *v571;
  _QWORD v572[13];
  std::__shared_weak_count *v573;
  uint64_t v574;
  std::__shared_weak_count *v575;
  unint64_t v576;
  unint64_t *v577;
  uint64_t v578;
  uint64_t (*v579)(uint64_t, uint64_t);
  uint64_t (*v580)(uint64_t);
  uint64_t v581;
  uint64_t v582;
  unint64_t __dst;
  unint64_t *v584;
  int64_t v585;
  uint64_t (*v586)(uint64_t, uint64_t);
  uint64_t (*v587)(uint64_t);
  uint64_t v588;
  uint64_t v589;
  uint64_t v590[2];
  uint64_t v591[2];
  uint64_t v592[2];
  uint64_t v593[2];
  __int16 v594[2];
  uint64_t v595;
  uint64_t v596[2];
  uint64_t v597[2];
  uint64_t v598[2];
  uint64_t v599[2];
  uint64_t v600;
  size_t __n;
  uint64_t v602;
  _QWORD *v603;
  uint64_t v604;
  uint64_t v605;
  int v606;
  uint64_t v607;
  uint64_t *v608;
  uint64_t v609;
  uint64_t (*v610)(uint64_t, _QWORD *);
  void (*v611)(uint64_t);
  __int128 v612;
  __int128 v613;
  uint64_t v614;
  int v615;
  uint64_t v616;
  uint64_t *v617;
  uint64_t v618;
  uint64_t (*v619)(uint64_t, _QWORD *);
  void (*v620)(uint64_t);
  __int128 v621;
  __int128 v622;
  uint64_t v623;
  int v624;
  uint64_t v625;
  uint64_t *v626;
  uint64_t v627;
  uint64_t (*v628)(uint64_t, _QWORD *);
  void (*v629)(uint64_t);
  __int128 v630;
  __int128 v631;
  uint64_t v632;
  int v633;
  uint64_t v634;
  uint64_t *v635;
  uint64_t v636;
  uint64_t (*v637)(uint64_t, _QWORD *);
  void (*v638)(uint64_t);
  __int128 v639;
  __int128 v640;
  uint64_t v641;
  int v642;
  __int128 v643;
  void *__p;
  std::__shared_weak_count *v645;
  uint64_t (*v646)(uint64_t);
  uint64_t v647;
  uint64_t v648;
  unint64_t v649;
  uint64_t v650;
  unint64_t v651;
  __int128 v652;
  __int128 v653;
  int v654;
  uint64_t v655[19];
  uint64_t (**v656)();
  uint64_t v657;
  uint64_t (***v658)();
  _BYTE buf[24];
  uint64_t (*v660)(uint64_t, uint64_t);
  uint64_t (*v661)(uint64_t);
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;

  v664 = *MEMORY[0x1E0C80C00];
  v634 = 0;
  v635 = &v634;
  v636 = 0x5812000000;
  v637 = __Block_byref_object_copy__2020;
  v638 = __Block_byref_object_dispose__2021;
  v639 = 0u;
  v640 = 0u;
  v641 = 0;
  v642 = 1065353216;
  v625 = 0;
  v626 = &v625;
  v627 = 0x5812000000;
  v628 = __Block_byref_object_copy__2020;
  v629 = __Block_byref_object_dispose__2021;
  v630 = 0u;
  v631 = 0u;
  v632 = 0;
  v633 = 1065353216;
  v616 = 0;
  v617 = &v616;
  v618 = 0x5812000000;
  v619 = __Block_byref_object_copy__5_2022;
  v620 = __Block_byref_object_dispose__6_2023;
  v621 = 0u;
  v622 = 0u;
  v623 = 0;
  v624 = 1065353216;
  v607 = 0;
  v608 = &v607;
  v609 = 0x5812000000;
  v610 = __Block_byref_object_copy__5_2022;
  v611 = __Block_byref_object_dispose__6_2023;
  v612 = 0u;
  v613 = 0u;
  v614 = 0;
  v615 = 1065353216;
  __n = 0;
  v600 = 0;
  {
    v518 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v518, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v602 = mdm::Allocator::instance(void)::alloc;
  v603 = 0;
  {
    v519 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v519, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v604 = mdm::Allocator::instance(void)::alloc;
  v605 = 0;
  v606 = 1065353216;
  v19 = *a6;
  v525 = a6[1];
  if (*a6 != v525)
  {
    v538 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
    v539 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
    v537 = *(void **)(MEMORY[0x1E0DE4F50] + 32);
    v536 = *(void **)(MEMORY[0x1E0DE4F50] + 40);
    v541 = a2 + 95;
    v535 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 48);
    v534 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 8);
    v530 = *MEMORY[0x1E0DE4F50];
    v533 = MEMORY[0x1E0DE4FB8] + 16;
    v528 = *(void **)(MEMORY[0x1E0DE4F50] + 72);
    v529 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v531 = a2;
    v532 = a7;
    while (1)
    {
      v20 = *((unsigned __int16 *)a2 + 16);
      v546 = v19;
      v552 = *v19;
      if (v20 == 65)
      {
        v21 = v635;
        v22 = v617;
        v23 = *(_QWORD *)(*v19 + 144);
        sp_mut = std::__get_sp_mut(v541);
        std::__sp_mut::lock(sp_mut);
        v25 = (std::__shared_weak_count *)a2[96];
        v599[0] = a2[95];
        v599[1] = (uint64_t)v25;
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldxr(p_shared_owners);
          while (__stxr(v27 + 1, p_shared_owners));
        }
        std::__sp_mut::unlock(sp_mut);
        if (v25)
        {
          v28 = (unint64_t *)&v25->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v30 = v635;
        v31 = v617;
        v32 = *(_QWORD *)(v552 + 144);
        v33 = std::__get_sp_mut(v541);
        std::__sp_mut::lock(v33);
        v34 = (std::__shared_weak_count *)a2[96];
        v598[0] = a2[95];
        v598[1] = (uint64_t)v34;
        if (v34)
        {
          v35 = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        std::__sp_mut::unlock(v33);
        if (v34)
        {
          v37 = (unint64_t *)&v34->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        v39 = v635;
        v40 = v617;
        v41 = *(_QWORD *)(v552 + 144);
        v42 = std::__get_sp_mut(v541);
        std::__sp_mut::lock(v42);
        v43 = (std::__shared_weak_count *)a2[96];
        v597[0] = a2[95];
        v597[1] = (uint64_t)v43;
        if (v43)
        {
          v44 = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
        std::__sp_mut::unlock(v42);
        if (v43)
        {
          v46 = (unint64_t *)&v43->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v48 = v635;
        v49 = v617;
        v50 = *(_QWORD *)(v552 + 144);
        v51 = std::__get_sp_mut(v541);
        std::__sp_mut::lock(v51);
        v52 = (std::__shared_weak_count *)a2[96];
        v596[0] = a2[95];
        v596[1] = (uint64_t)v52;
        if (v52)
        {
          v53 = (unint64_t *)&v52->__shared_owners_;
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
        }
        std::__sp_mut::unlock(v51);
        if (v52)
        {
          v55 = (unint64_t *)&v52->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        v542 = 0;
        v526 = 0;
        v19 = v546;
      }
      else
      {
        v526 = v20 == 67;
        v542 = v20 == 68;
        if ((v20 - 67) <= 1)
        {
          for (i = 0; geo::codec::VectorTile::poisCount(*(geo::codec::VectorTile **)(v552 + 144)) > i; ++i)
          {
            v58 = geo::codec::VectorTile::pois(*(geo::codec::VectorTile **)(v552 + 144));
            v59 = v58 + 224 * i;
            v62 = *(_QWORD *)(v59 + 24);
            v61 = (uint64_t *)(v59 + 24);
            v60 = v62;
            if (!v62)
              goto LABEL_42;
            v63 = *(unsigned __int8 *)(v60 + 33);
            if (!*(_BYTE *)(v60 + 33))
              goto LABEL_42;
            v64 = *(_DWORD **)v60;
            if (*v64 == 6)
            {
              v65 = 0;
LABEL_52:
              if (v64[2 * v65 + 1] != 446
                || ((*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 160))(a2, *v546) & 1) != 0)
              {
                goto LABEL_42;
              }
              v68 = v58 + 224 * i;
              v70 = *(_DWORD *)(v68 + 88);
              v69 = *(_DWORD *)(v68 + 92);
              *(_QWORD *)&buf[7] = 0;
              *(_QWORD *)buf = 0;
              buf[15] = 1;
              if (v20 == 68)
                *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](buf, 0x10002u) = 1;
              v71 = std::__get_sp_mut(v541);
              std::__sp_mut::lock(v71);
              v72 = a2[95];
              v73 = (std::__shared_weak_count *)a2[96];
              v576 = v72;
              v577 = (unint64_t *)v73;
              if (v73)
              {
                v74 = (unint64_t *)&v73->__shared_owners_;
                do
                  v75 = __ldxr(v74);
                while (__stxr(v75 + 1, v74));
              }
              std::__sp_mut::unlock(v71);
              md::createFeatureAttributeSet((gss::Allocator *)&v643, v61);
              gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(&__dst, v72, (gss::FeatureAttributeSet *)&v643, (gss::QueryOverrides *)buf);
              if ((_QWORD)v643)
              {
                *((_QWORD *)&v643 + 1) = v643;
                v76 = (gss::Allocator *)((uint64_t (*)(std::__shared_weak_count *, _QWORD, char *))v645->__vftable[1].~__shared_weak_count)(v645, v643, (char *)__p - v643);
              }
              if (v73)
              {
                v77 = (unint64_t *)&v73->__shared_owners_;
                do
                  v78 = __ldaxr(v77);
                while (__stlxr(v78 - 1, v77));
                if (!v78)
                {
                  ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                  std::__shared_weak_count::__release_weak(v73);
                }
              }
              v79 = __dst;
              if (__n)
              {
                v80 = 0x9DDFEA08EB382D69 * (((8 * __dst) + 8) ^ HIDWORD(__dst));
                v81 = 0x9DDFEA08EB382D69 * (HIDWORD(__dst) ^ (v80 >> 47) ^ v80);
                v82 = 0x9DDFEA08EB382D69 * (v81 ^ (v81 >> 47));
                v83 = (uint8x8_t)vcnt_s8((int8x8_t)__n);
                v83.i16[0] = vaddlv_u8(v83);
                if (v83.u32[0] > 1uLL)
                {
                  v84 = v82;
                  if (v82 >= __n)
                    v84 = v82 % __n;
                }
                else
                {
                  v84 = v82 & (__n - 1);
                }
                v85 = *(_QWORD **)(v600 + 8 * v84);
                if (v85)
                {
                  v86 = (_QWORD *)*v85;
                  if (*v85)
                  {
                    if (v83.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v88 = v86[1];
                        if (v88 == v82)
                        {
                          if (v86[2] == __dst)
                            goto LABEL_106;
                        }
                        else if ((v88 & (__n - 1)) != v84)
                        {
                          goto LABEL_86;
                        }
                        v86 = (_QWORD *)*v86;
                        if (!v86)
                          goto LABEL_86;
                      }
                    }
                    do
                    {
                      v87 = v86[1];
                      if (v87 == v82)
                      {
                        if (v86[2] == __dst)
                        {
LABEL_106:
                          v102 = (_DWORD *)v86[5];
                          v101 = v86[6];
                          if ((unint64_t)v102 >= v101)
                          {
                            v104 = (_DWORD *)v86[4];
                            v105 = 0xAAAAAAAAAAAAAAABLL * (v102 - v104) + 1;
                            if (v105 > 0x1555555555555555)
                              abort();
                            v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (_QWORD)v104) >> 2);
                            if (2 * v106 > v105)
                              v105 = 2 * v106;
                            if (v106 >= 0xAAAAAAAAAAAAAAALL)
                              v107 = 0x1555555555555555;
                            else
                              v107 = v105;
                            if (v107)
                            {
                              if (v107 > 0x1555555555555555)
                                std::__throw_bad_array_new_length[abi:nn180100]();
                              v76 = (gss::Allocator *)operator new(12 * v107);
                            }
                            else
                            {
                              v76 = 0;
                            }
                            v108 = (_DWORD *)((char *)v76 + 4 * (v102 - v104));
                            *v108 = v70;
                            v108[1] = v69;
                            v108[2] = 0;
                            v109 = v108;
                            if (v102 != v104)
                            {
                              do
                              {
                                v110 = *(_QWORD *)(v102 - 3);
                                v102 -= 3;
                                v111 = v102[2];
                                *(_QWORD *)(v109 - 3) = v110;
                                v109 -= 3;
                                v109[2] = v111;
                              }
                              while (v102 != v104);
                              v102 = (_DWORD *)v86[4];
                            }
                            v103 = v108 + 3;
                            v86[4] = v109;
                            v86[5] = v108 + 3;
                            v86[6] = (char *)v76 + 12 * v107;
                            if (v102)
                              operator delete(v102);
                          }
                          else
                          {
                            *v102 = v70;
                            v102[1] = v69;
                            v103 = v102 + 3;
                            v102[2] = 0;
                          }
                          v86[5] = v103;
                          v96 = (std::__shared_weak_count *)v584;
                          if (!v584)
                          {
LABEL_101:
                            if (buf[14])
                              v99 = 1;
                            else
                              v99 = *(_QWORD *)buf == 0;
                            if (!v99)
                            {
                              v100 = gss::Allocator::instance(v76);
                              (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v100 + 40))(v100, *(_QWORD *)buf, *(unsigned __int16 *)&buf[12]);
                            }
                            goto LABEL_42;
                          }
LABEL_97:
                          v97 = (unint64_t *)&v96->__shared_owners_;
                          do
                            v98 = __ldaxr(v97);
                          while (__stlxr(v98 - 1, v97));
                          if (!v98)
                          {
                            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                            std::__shared_weak_count::__release_weak(v96);
                          }
                          goto LABEL_101;
                        }
                      }
                      else
                      {
                        if (v87 >= __n)
                          v87 %= __n;
                        if (v87 != v84)
                          break;
                      }
                      v86 = (_QWORD *)*v86;
                    }
                    while (v86);
                  }
                }
              }
LABEL_86:
              v89 = operator new(0xCuLL);
              *v89 = v70;
              v89[1] = v69;
              v89[2] = 0;
              *(_QWORD *)&v643 = v79;
              *((_QWORD *)&v643 + 1) = v584;
              if (v584)
              {
                v90 = v584 + 1;
                do
                  v91 = __ldxr(v90);
                while (__stxr(v91 + 1, v90));
              }
              __p = 0;
              v645 = 0;
              v646 = 0;
              v92 = (char *)operator new(0xCuLL);
              v646 = (uint64_t (*)(uint64_t))(v92 + 12);
              *(_QWORD *)v92 = *(_QWORD *)v89;
              *((_DWORD *)v92 + 2) = v89[2];
              __p = v92;
              v645 = (std::__shared_weak_count *)(v92 + 12);
              std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::pair<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const,std::vector<gm::Matrix<float,3,1>>>>((unint64_t)&v600, v79, (uint64_t)&v643);
              if (__p)
              {
                v645 = (std::__shared_weak_count *)__p;
                operator delete(__p);
              }
              v93 = (std::__shared_weak_count *)*((_QWORD *)&v643 + 1);
              if (*((_QWORD *)&v643 + 1))
              {
                v94 = (unint64_t *)(*((_QWORD *)&v643 + 1) + 8);
                do
                  v95 = __ldaxr(v94);
                while (__stlxr(v95 - 1, v94));
                if (!v95)
                {
                  ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                  std::__shared_weak_count::__release_weak(v93);
                }
              }
              operator delete(v89);
              v96 = (std::__shared_weak_count *)v584;
              if (!v584)
                goto LABEL_101;
              goto LABEL_97;
            }
            v65 = 0;
            v66 = v64 + 2;
            do
            {
              if (v63 - 1 == v65)
                goto LABEL_42;
              v67 = *v66;
              v66 += 2;
              ++v65;
            }
            while (v67 != 6);
            if (v65 < v63)
              goto LABEL_52;
LABEL_42:
            v19 = v546;
          }
        }
      }
      v547 = geo::codec::VectorTile::lines(*(geo::codec::VectorTile **)(v552 + 144));
      v112 = geo::codec::VectorTile::linesCount(*(geo::codec::VectorTile **)(v552 + 144));
      v113 = v112;
      if (v112)
        break;
LABEL_5:
      v19 += 2;
      if (v19 == v525)
        goto LABEL_680;
    }
    v114 = 0;
    v559 = v112;
    while (1)
    {
      v561 = (geo::codec *)(v547 + 168 * v114);
      if (((*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 160))(a2, *v19) & 1) == 0)
      {
        v656 = 0;
        v116 = geo::codec::multiSectionFeatureCharacteristicPoints((std::__shared_weak_count **)v561, (GeoCodecsRoadFeature *)&v656, v115);
        v566 = v116;
        v563 = v114;
        if (v542)
        {
          *(_QWORD *)&buf[7] = 0;
          *(_QWORD *)buf = 0;
          buf[15] = 1;
          v117 = gss::Allocator::instance(v116);
          v118 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v117 + 16))(v117, 26, 1);
          v119 = v118;
          if (*(_QWORD *)buf)
          {
            if (*(_WORD *)&buf[10])
            {
              v118 = memmove(v118, *(const void **)buf, 4 * *(unsigned __int16 *)&buf[10]);
              if (*(_WORD *)&buf[10])
                v118 = memmove((char *)v119 + 18, (const void *)(*(_QWORD *)buf + *(unsigned __int16 *)&buf[8]), 2 * *(unsigned __int16 *)&buf[10]);
            }
            v120 = gss::Allocator::instance((gss::Allocator *)v118);
            (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v120 + 40))(v120, *(_QWORD *)buf, *(unsigned __int16 *)&buf[12]);
          }
          *(_WORD *)&buf[12] = 4;
          *(_QWORD *)buf = v119;
          *(_WORD *)&buf[8] = 18;
          v121 = *(unsigned __int16 *)&buf[10];
          v119[*(unsigned __int16 *)&buf[10]] = 65538;
          *((_WORD *)v119 + v121 + 9) = 0;
          ++*(_WORD *)&buf[10];
          buf[15] = 0;
          *(_WORD *)((char *)v119 + 2 * *(unsigned __int16 *)&buf[10] + *(unsigned __int16 *)&buf[8] - 2) = 1;
          v122 = std::__get_sp_mut(v541);
          std::__sp_mut::lock(v122);
          v123 = a2[95];
          v124 = (std::__shared_weak_count *)a2[96];
          v576 = v123;
          v577 = (unint64_t *)v124;
          if (v124)
          {
            v125 = (unint64_t *)&v124->__shared_owners_;
            do
              v126 = __ldxr(v125);
            while (__stxr(v126 + 1, v125));
          }
          std::__sp_mut::unlock(v122);
          md::createFeatureAttributeSet((gss::Allocator *)&v643, (uint64_t *)v561 + 3);
          gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(&__dst, v123, (gss::FeatureAttributeSet *)&v643, (gss::QueryOverrides *)buf);
          v113 = v559;
          v114 = v563;
          v128 = __dst;
          v564 = (std::__shared_weak_count *)v584;
          v584 = 0;
          __dst = 0;
          if ((_QWORD)v643)
          {
            *((_QWORD *)&v643 + 1) = v643;
            v127 = (gss::Allocator *)((uint64_t (*)(std::__shared_weak_count *, _QWORD, char *))v645->__vftable[1].~__shared_weak_count)(v645, v643, (char *)__p - v643);
          }
          if (v124)
          {
            v129 = (unint64_t *)&v124->__shared_owners_;
            do
              v130 = __ldaxr(v129);
            while (__stlxr(v130 - 1, v129));
            if (!v130)
            {
              ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
              std::__shared_weak_count::__release_weak(v124);
            }
          }
          if (buf[14])
            v131 = 1;
          else
            v131 = *(_QWORD *)buf == 0;
          if (!v131)
          {
            v132 = gss::Allocator::instance(v127);
            (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v132 + 40))(v132, *(_QWORD *)buf, *(unsigned __int16 *)&buf[12]);
          }
          goto LABEL_177;
        }
        v133 = *((_QWORD *)v561 + 3);
        if (v133)
        {
          v134 = *(unsigned __int8 *)(v133 + 33);
          if (*(_BYTE *)(v133 + 33))
          {
            v135 = *(_DWORD **)v133;
            if (*v135 == 185)
            {
              v136 = 0;
              v137 = 1;
            }
            else
            {
              v136 = 0;
              v138 = v135 + 2;
              do
              {
                if (v134 - 1 == v136)
                  goto LABEL_163;
                v139 = *v138;
                v138 += 2;
                ++v136;
              }
              while (v139 != 185);
              v137 = v136 < v134;
            }
            v140 = (v135[2 * v136 + 1] & 0xFFFFFFFD) == 0 && v137;
            if (v526 != v140)
              goto LABEL_127;
LABEL_164:
            v141 = std::__get_sp_mut(v541);
            std::__sp_mut::lock(v141);
            v142 = a2[95];
            v143 = (std::__shared_weak_count *)a2[96];
            v576 = v142;
            v577 = (unint64_t *)v143;
            if (v143)
            {
              v144 = (unint64_t *)&v143->__shared_owners_;
              do
                v145 = __ldxr(v144);
              while (__stxr(v145 + 1, v144));
            }
            std::__sp_mut::unlock(v141);
            md::createFeatureAttributeSet((gss::Allocator *)&v643, (uint64_t *)v561 + 3);
            *(_QWORD *)&buf[7] = 0;
            *(_QWORD *)buf = 0;
            buf[15] = 1;
            gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(&__dst, v142, (gss::FeatureAttributeSet *)&v643, (gss::QueryOverrides *)buf);
            v113 = v559;
            v114 = v563;
            if (!buf[14] && *(_QWORD *)buf)
            {
              v147 = gss::Allocator::instance(v146);
              (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v147 + 40))(v147, *(_QWORD *)buf, *(unsigned __int16 *)&buf[12]);
            }
            v128 = __dst;
            v564 = (std::__shared_weak_count *)v584;
            __dst = 0;
            v584 = 0;
            if ((_QWORD)v643)
            {
              *((_QWORD *)&v643 + 1) = v643;
              ((void (*)(std::__shared_weak_count *, _QWORD, char *))v645->__vftable[1].~__shared_weak_count)(v645, v643, (char *)__p - v643);
            }
            if (v143)
            {
              v148 = (unint64_t *)&v143->__shared_owners_;
              do
                v149 = __ldaxr(v148);
              while (__stlxr(v149 - 1, v148));
              if (!v149)
              {
                ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                std::__shared_weak_count::__release_weak(v143);
              }
            }
LABEL_177:
            v150 = *((_QWORD *)v561 + 3);
            v151 = *(unsigned __int8 *)(v150 + 33);
            if (*(_BYTE *)(v150 + 33))
            {
              v152 = *(_DWORD **)v150;
              if (**(_DWORD **)v150 == 2)
              {
                v153 = 1;
              }
              else
              {
                v154 = 0;
                v155 = v152 + 2;
                while (v151 - 1 != v154)
                {
                  v156 = *v155;
                  v155 += 2;
                  ++v154;
                  if (v156 == 2)
                    goto LABEL_186;
                }
                v154 = v151;
LABEL_186:
                v153 = v154 < v151;
              }
              v568 = v153;
            }
            else
            {
              v568 = 0;
            }
            *(_QWORD *)buf = v128;
            *(_QWORD *)&buf[8] = v564;
            if (v564)
            {
              v157 = (unint64_t *)&v564->__shared_owners_;
              do
                v158 = __ldxr(v157);
              while (__stxr(v158 + 1, v157));
              *((_QWORD *)&v643 + 1) = v564;
              do
                v159 = __ldxr(v157);
              while (__stxr(v159 + 1, v157));
            }
            else
            {
              *((_QWORD *)&v643 + 1) = 0;
            }
            *(_QWORD *)&v643 = v128;
            __p = 0;
            v645 = 0;
            LOBYTE(v646) = 0;
            if (v128)
              v160 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v128 + 48))(v128);
            else
              v160 = 0;
            LOBYTE(v646) = v160;
            if (v564)
            {
              v161 = (unint64_t *)&v564->__shared_owners_;
              do
                v162 = __ldaxr(v161);
              while (__stlxr(v162 - 1, v161));
              if (!v162)
              {
                ((void (*)(std::__shared_weak_count *))v564->__on_zero_shared)(v564);
                std::__shared_weak_count::__release_weak(v564);
              }
              v160 = v646;
            }
            if (!v160)
            {
              v553 = 0;
              v185 = 9;
              goto LABEL_413;
            }
            LODWORD(v576) = 0;
            v163 = *(_QWORD *)(v643 + 24);
            v164 = *(float **)v163;
            if (*(_QWORD *)v163
              && (v165 = *v164, LODWORD(v164) = *v164 == 1.0, *(_BYTE *)(v163 + 10))
              && (v165 != 0.0 ? (v166 = v165 == 1.0) : (v166 = 1), !v166)
              || (v167 = *(unsigned __int8 *)(v163 + v164 + 11), v165 = 0.0, v167 == 2))
            {
              *(_DWORD *)buf = 0;
              LODWORD(__dst) = 0;
              if (gss::CartoStyle<gss::PropertyID>::valueIsConstantForKey<float>(*(_QWORD *)(v163 + 16), 0x5Eu, (int *)buf))
              {
                if (*(_WORD *)(v163 + 56))
                {
                  v168 = *(uint64_t **)(v163 + 48);
                  v169 = &v168[*(unsigned __int16 *)(v163 + 56)];
                  while (1)
                  {
                    v170 = *(uint64_t **)(*v168 + 72);
                    if (!v170)
                      goto LABEL_216;
                    v171 = *v170;
                    v172 = *(unsigned __int16 *)(*v170 + 10);
                    if (!(_DWORD)v172)
                      goto LABEL_216;
                    v173 = *(unsigned __int16 **)v171;
                    if (!*(_BYTE *)(v171 + 15))
                      break;
                    v174 = *(unsigned __int16 **)v171;
                    v175 = v172;
                    if (v172 >= 0x1E)
                    {
                      do
                      {
                        v178 = v175 >> 1;
                        v179 = &v174[v175 >> 1];
                        v181 = *v179;
                        v180 = v179 + 1;
                        v175 += ~(v175 >> 1);
                        if (v181 < 0x5E)
                          v174 = v180;
                        else
                          v175 = v178;
                      }
                      while (v175);
                      if (v174 == &v173[v172] || *v174 != 94)
                        goto LABEL_216;
LABEL_237:
                      if ((unsigned __int16)(((_DWORD)v174 - (_DWORD)v173) >> 1) == (_DWORD)v172)
                        goto LABEL_216;
                      goto LABEL_242;
                    }
                    v176 = 0;
                    while (1)
                    {
                      v177 = v173[v176];
                      if (v177 >= 0x5E)
                        break;
                      if (v172 == ++v176)
                        goto LABEL_216;
                    }
                    v183 = (unsigned __int16)v176;
                    if (v177 != 94)
                      v183 = v172;
                    if (v183 == (_DWORD)v172)
                      goto LABEL_216;
LABEL_242:
                    if (!gss::CartoStyle<gss::PropertyID>::valueIsConstantForKey<float>(*v168, 0x5Eu, (int *)buf))
                      goto LABEL_243;
LABEL_216:
                    if (++v168 == v169)
                      goto LABEL_246;
                  }
                  v182 = 2 * v172;
                  v174 = *(unsigned __int16 **)v171;
                  while (*v174 != 94)
                  {
                    ++v174;
                    v182 -= 2;
                    if (!v182)
                    {
                      LODWORD(v174) = (_DWORD)v173 + 2 * v172;
                      goto LABEL_237;
                    }
                  }
                  goto LABEL_237;
                }
LABEL_246:
                v184 = 1;
              }
              else
              {
LABEL_243:
                v184 = 0;
              }
              IsConstantFor = v184 & gss::RenderStyle<gss::PropertyID>::styleValueIsConstantForKey<float>(v163, 0x5Eu, (int *)&__dst, 1u);
              v187 = 0.0;
              if (IsConstantFor == 1)
              {
                v187 = *(float *)buf + (float)((float)(*(float *)&__dst - *(float *)buf) * v165);
                *(float *)&v576 = v187;
              }
            }
            else
            {
              IsConstantFor = gss::RenderStyle<gss::PropertyID>::styleValueIsConstantForKey<float>(*(_QWORD *)(v643 + 24), 0x5Eu, (int *)&v576, v167);
              v187 = *(float *)&v576;
            }
            v113 = v559;
            v114 = v563;
            if (IsConstantFor && v187 < 1.0)
            {
              if ((v188 = *(_QWORD *)(v643 + 24), (v189 = *(float **)v188) != 0)
                && (v190 = *v189, LODWORD(v189) = *v189 == 1.0, *(_BYTE *)(v188 + 10))
                && (v190 != 0.0 ? (v191 = v190 == 1.0) : (v191 = 1), !v191)
                || (v192 = *(unsigned __int8 *)(v188 + v189 + 11), v190 = 0.0, v192 == 2))
              {
                *(_DWORD *)buf = 0;
                LODWORD(__dst) = 0;
                v193 = gss::RenderStyle<gss::PropertyID>::styleValueIsConstantForKey<float>(v188, 0x61u, (int *)buf, 0);
                v194 = v193 & gss::RenderStyle<gss::PropertyID>::styleValueIsConstantForKey<float>(v188, 0x61u, (int *)&__dst, 1u);
                if (v194 == 1)
                {
                  v187 = *(float *)buf + (float)((float)(*(float *)&__dst - *(float *)buf) * v190);
                  *(float *)&v576 = v187;
                }
              }
              else
              {
                v194 = gss::RenderStyle<gss::PropertyID>::styleValueIsConstantForKey<float>(*(_QWORD *)(v643 + 24), 0x61u, (int *)&v576, v192);
                v187 = *(float *)&v576;
              }
              v113 = v559;
              v114 = v563;
              if (v194 && v187 < 1.0)
              {
                v215 = 0;
                v185 = 9;
                goto LABEL_411;
              }
            }
            v196 = *(_QWORD *)(v643 + 24);
            v197 = *(float **)v196;
            if (*(_QWORD *)v196)
            {
              v198 = *v197;
              v199 = *v197 == 1.0;
              if (*(_BYTE *)(v196 + 10))
              {
                if (v198 != 0.0 && v198 != 1.0)
                {
LABEL_276:
                  v202 = *(_QWORD *)(v196 + 16);
                  if (!v202)
                    goto LABEL_330;
                  v203 = *(uint64_t **)(v202 + 72);
                  if (!v203)
                    goto LABEL_303;
                  v204 = *v203;
                  v205 = *(unsigned __int16 *)(*v203 + 10);
                  if (!(_DWORD)v205)
                    goto LABEL_303;
                  v206 = *(unsigned __int16 **)v204;
                  if (*(_BYTE *)(v204 + 15))
                  {
                    v207 = *(unsigned __int16 **)v204;
                    v208 = v205;
                    if (v205 < 0x1E)
                    {
                      v209 = 0;
                      while (1)
                      {
                        v210 = v206[v209];
                        if (v210 >= 0x12C)
                          break;
                        if (v205 == ++v209)
                          goto LABEL_303;
                      }
                      v217 = (unsigned __int16)v209;
                      if (v210 != 300)
                        v217 = v205;
                      if (v217 == (_DWORD)v205)
                        goto LABEL_303;
LABEL_397:
                      v185 = 0;
                      v215 = 1;
LABEL_411:
                      v553 = v215;
                      if ((_BYTE)v646)
                        (*(void (**)(_QWORD))(*(_QWORD *)v643 + 56))(v643);
LABEL_413:
                      v278 = v645;
                      if (!v645)
                        goto LABEL_417;
                      v279 = (unint64_t *)&v645->__shared_owners_;
                      do
                        v280 = __ldaxr(v279);
                      while (__stlxr(v280 - 1, v279));
                      if (!v280)
                      {
                        ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
                        std::__shared_weak_count::__release_weak(v278);
                        v281 = (std::__shared_weak_count *)*((_QWORD *)&v643 + 1);
                        if (*((_QWORD *)&v643 + 1))
                        {
LABEL_418:
                          v282 = (unint64_t *)&v281->__shared_owners_;
                          do
                            v283 = __ldaxr(v282);
                          while (__stlxr(v283 - 1, v282));
                          if (!v283)
                          {
                            ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
                            std::__shared_weak_count::__release_weak(v281);
                          }
                        }
                      }
                      else
                      {
LABEL_417:
                        v281 = (std::__shared_weak_count *)*((_QWORD *)&v643 + 1);
                        if (*((_QWORD *)&v643 + 1))
                          goto LABEL_418;
                      }
                      v19 = v546;
                      if (v185)
                      {
LABEL_424:
                        if (v564)
                        {
                          v284 = (unint64_t *)&v564->__shared_owners_;
                          do
                            v285 = __ldaxr(v284);
                          while (__stlxr(v285 - 1, v284));
                          if (!v285)
                          {
                            ((void (*)(std::__shared_weak_count *))v564->__on_zero_shared)(v564);
                            std::__shared_weak_count::__release_weak(v564);
                          }
                        }
                        goto LABEL_127;
                      }
                      v286 = *(std::__shared_weak_count **)(v552 + 152);
                      v551 = *(int8x8_t **)(v552 + 144);
                      if (v286)
                      {
                        v287 = (unint64_t *)&v286->__shared_owners_;
                        do
                          v288 = __ldxr(v287);
                        while (__stxr(v288 + 1, v287));
                      }
                      v527 = v286;
                      v557 = *((unsigned int *)v561 + 25);
                      if (!(_DWORD)v557)
                      {
LABEL_675:
                        v19 = v546;
                        if (v527)
                        {
                          v415 = (unint64_t *)&v527->__shared_owners_;
                          do
                            v416 = __ldaxr(v415);
                          while (__stlxr(v416 - 1, v415));
                          if (!v416)
                          {
                            ((void (*)(std::__shared_weak_count *))v527->__on_zero_shared)(v527);
                            std::__shared_weak_count::__release_weak(v527);
                          }
                        }
                        goto LABEL_424;
                      }
                      v289 = 0;
                      v555 = ((unint64_t)v114 << 6)
                           - 0x61C8864680B583EBLL
                           + ((unint64_t)v114 >> 2);
                      v556 = v114;
                      v290 = (unint64_t *)&v564->__shared_owners_;
                      v549 = v128;
                      while (2)
                      {
                        if (a7[3])
                        {
                          v291 = (int8x8_t)a7[1];
                          if (v291)
                          {
                            v292 = (v555 + v289) ^ v556;
                            v293 = (uint8x8_t)vcnt_s8(v291);
                            v293.i16[0] = vaddlv_u8(v293);
                            if (v293.u32[0] > 1uLL)
                            {
                              v294 = (v555 + v289) ^ v556;
                              if (v292 >= *(_QWORD *)&v291)
                                v294 = v292 % *(_QWORD *)&v291;
                            }
                            else
                            {
                              v294 = (*(_QWORD *)&v291 - 1) & v292;
                            }
                            v296 = *(uint64_t **)(*a7 + 8 * v294);
                            if (v296)
                            {
                              v296 = (uint64_t *)*v296;
                              if (v296)
                              {
                                if (v293.u32[0] < 2uLL)
                                {
                                  v297 = *(_QWORD *)&v291 - 1;
                                  while (1)
                                  {
                                    v301 = v296[1];
                                    if (v292 == v301)
                                    {
                                      if (*((_DWORD *)v296 + 4) == (_DWORD)v114
                                        && *((_DWORD *)v296 + 5) == (_DWORD)v289)
                                      {
                                        goto LABEL_464;
                                      }
                                    }
                                    else if ((v301 & v297) != v294)
                                    {
                                      goto LABEL_463;
                                    }
                                    v296 = (uint64_t *)*v296;
                                    if (!v296)
                                      goto LABEL_464;
                                  }
                                }
                                do
                                {
                                  v299 = v296[1];
                                  if (v292 == v299)
                                  {
                                    if (*((_DWORD *)v296 + 4) == (_DWORD)v114 && *((_DWORD *)v296 + 5) == (_DWORD)v289)
                                      break;
                                  }
                                  else
                                  {
                                    if (v299 >= *(_QWORD *)&v291)
                                      v299 %= *(_QWORD *)&v291;
                                    if (v299 != v294)
                                      goto LABEL_463;
                                  }
                                  v296 = (uint64_t *)*v296;
                                }
                                while (v296);
                              }
                            }
                          }
                          else
                          {
LABEL_463:
                            v296 = 0;
                          }
LABEL_464:
                          v295 = v296 != 0;
                        }
                        else
                        {
                          v295 = 0;
                        }
                        v576 = 0;
                        v302 = (float32x2_t *)geo::codec::multiSectionFeaturePoints(v561, v289, &v576);
                        v303 = v576;
                        if (v576 < 2)
                          goto LABEL_434;
                        v560 = v302;
                        v558 = v295;
                        if (v656)
                        {
                          v304 = v566;
                          if (v289 == *((_DWORD *)v566 + 2))
                          {
                            v305 = 0;
                            v306 = 0;
                          }
                          else
                          {
                            v305 = 0;
                            v307 = (int *)((char *)v566 + 108);
                            while ((uint64_t (**)())((char *)v656 - 1) != v305)
                            {
                              v308 = *v307;
                              v307 += 25;
                              v305 = (uint64_t (**)())((char *)v305 + 1);
                              if (v289 == v308)
                                goto LABEL_475;
                            }
                            v305 = v656;
LABEL_475:
                            v306 = v305 >= v656;
                          }
                        }
                        else
                        {
                          v305 = 0;
                          v306 = 1;
                          v304 = v566;
                        }
                        v309 = (uint64_t (**)())((char *)v305 + 1);
                        v310 = (uint64_t (**)())((char *)v305 + 1);
                        if ((uint64_t (**)())((char *)v305 + 1) < v656)
                        {
                          v311 = (int *)((char *)v566 + 100 * (_QWORD)v305 + 108);
                          v310 = (uint64_t (**)())((char *)v305 + 1);
                          while (1)
                          {
                            v312 = *v311;
                            v311 += 25;
                            if (v289 != v312)
                              break;
                            v310 = (uint64_t (**)())((char *)v310 + 1);
                            if (v656 == v310)
                            {
                              v310 = v656;
                              break;
                            }
                          }
                        }
                        v565 = v568 << 31 >> 31;
                        if (((v568 | v306) & 1) != 0)
                        {
LABEL_484:
                          if (v309 >= v310)
                            goto LABEL_601;
                        }
                        else
                        {
                          if (*((_BYTE *)v304 + 100 * (_QWORD)v305 + 29))
                          {
                            v565 = *((_DWORD *)v304 + 25 * (_QWORD)v305 + 5);
                            goto LABEL_484;
                          }
                          v565 = 0;
                          if (v309 >= v310)
                          {
LABEL_601:
                            LOBYTE(v643) = 0;
                            v375 = 1;
                            v372 = v576;
                            v378 = 1;
                            v377 = v563;
                            v374 = v302;
                            v373 = v558;
                            goto LABEL_602;
                          }
                        }
                        v313 = 0;
                        v314 = (v555 + v289) ^ v556;
                        v543 = (v314 << 6) - 0x61C8864680B583EBLL + (v314 >> 2);
                        v544 = v314;
                        v550 = v543 ^ v314;
                        v548 = 1;
                        v554 = 1;
LABEL_489:
                        v316 = (_DWORD *)((char *)v566 + 100 * (_QWORD)v309);
                        if (v289 != v316[2])
                        {
                          v315 = v313;
                          goto LABEL_597;
                        }
                        if ((v568 & 1) == 0 && *((_BYTE *)v566 + 100 * (_QWORD)v309 + 29))
                        {
                          v317 = (char *)v566 + 100 * (_QWORD)v309;
                          v319 = *((_DWORD *)v317 + 5);
                          v318 = (int *)(v317 + 20);
                          if (v319 == v565)
                          {
                            v315 = v313;
                            goto LABEL_488;
                          }
                          v315 = v316[3];
                          if (v576 - 1 < v315)
                          {
                            v315 = v313;
LABEL_597:
                            v372 = v576;
                            v303 = v576 - v315;
                            v128 = v549;
                            v373 = v558;
                            if (v576 <= v315)
                              goto LABEL_434;
                            v374 = &v560[v315];
                            LOBYTE(v643) = 0;
                            if (v315)
                            {
                              v375 = 0;
                              v376 = vsub_f32(*v374, v374[-1]);
                              *(float32x2_t *)((char *)&v643 + 4) = vmul_n_f32(v376, 1.0 / sqrtf(vaddv_f32(vmul_f32(v376, v376))));
                              LOBYTE(v643) = 1;
                              v377 = v563;
                              v378 = v548;
                              goto LABEL_631;
                            }
                            v377 = v563;
                            v378 = v548;
                            v375 = v554;
LABEL_602:
                            v379 = 0.0;
                            if (!v551[445].i32[0])
                              goto LABEL_628;
                            v380 = v551[463];
                            if (!*(_QWORD *)&v380)
                              goto LABEL_628;
                            v381 = ((((v555 + v289) ^ v556) << 6) - 0x61C8864680B583EBLL + (((v555 + v289) ^ v556) >> 2)) ^ (v555 + v289) ^ v556;
                            v382 = (uint8x8_t)vcnt_s8(v380);
                            v382.i16[0] = vaddlv_u8(v382);
                            if (v382.u32[0] > 1uLL)
                            {
                              v383 = ((((v555 + v289) ^ v556) << 6)
                                    - 0x61C8864680B583EBLL
                                    + (((v555 + v289) ^ v556) >> 2)) ^ (v555 + v289) ^ v556;
                              if (v381 >= *(_QWORD *)&v380)
                                v383 = v381 % *(_QWORD *)&v380;
                            }
                            else
                            {
                              v383 = (*(_QWORD *)&v380 - 1) & v381;
                            }
                            v384 = *(uint64_t ***)(*(_QWORD *)&v551[462] + 8 * v383);
                            if (!v384 || (v385 = *v384) == 0)
                            {
LABEL_628:
                              v390 = 0.0;
                              goto LABEL_629;
                            }
                            if (v382.u32[0] < 2uLL)
                            {
                              v386 = *(_QWORD *)&v380 - 1;
                              while (1)
                              {
                                v388 = v385[1];
                                if (v388 == v381)
                                {
                                  if (*((_DWORD *)v385 + 4) == v377
                                    && *((_DWORD *)v385 + 5) == (_DWORD)v289
                                    && *((_DWORD *)v385 + 6) == (_DWORD)v289)
                                  {
                                    goto LABEL_627;
                                  }
                                }
                                else if ((v388 & v386) != v383)
                                {
                                  goto LABEL_628;
                                }
                                v385 = (uint64_t *)*v385;
                                if (!v385)
                                  goto LABEL_628;
                              }
                            }
                            while (2)
                            {
                              v387 = v385[1];
                              if (v387 != v381)
                              {
                                if (v387 >= *(_QWORD *)&v380)
                                  v387 %= *(_QWORD *)&v380;
                                if (v387 != v383)
                                  goto LABEL_628;
LABEL_613:
                                v385 = (uint64_t *)*v385;
                                if (!v385)
                                  goto LABEL_628;
                                continue;
                              }
                              break;
                            }
                            if (*((_DWORD *)v385 + 4) != v377
                              || *((_DWORD *)v385 + 5) != (_DWORD)v289
                              || *((_DWORD *)v385 + 6) != (_DWORD)v289)
                            {
                              goto LABEL_613;
                            }
LABEL_627:
                            v389 = 4 * *((unsigned int *)v385 + 7);
                            v379 = -(float)*(int *)(*(_QWORD *)&v551[455] + v389);
                            v390 = -(float)*(int *)(*(_QWORD *)&v551[458] + v389);
LABEL_629:
                            v391 = sqrtf((float)(v379 * v379) + (float)(v390 * v390));
                            if (v391 >= 0.0000001)
                            {
                              v375 = 0;
                              v392 = 1.0 / v391;
                              *((float *)&v643 + 1) = v392 * v379;
                              *((float *)&v643 + 2) = v392 * v390;
                              LOBYTE(v643) = 1;
                            }
LABEL_631:
                            buf[0] = 0;
                            v393 = *(_QWORD **)(v552 + 144);
                            v394 = (int8x8_t)v393[463];
                            if (v394)
                            {
                              v395 = ((((v555 + v289) ^ v556) << 6)
                                    - 0x61C8864680B583EBLL
                                    + (((v555 + v289) ^ v556) >> 2)
                                    + (v372 - 1)) ^ (v555 + v289) ^ v556;
                              v396 = (uint8x8_t)vcnt_s8(v394);
                              v396.i16[0] = vaddlv_u8(v396);
                              if (v396.u32[0] > 1uLL)
                              {
                                v397 = v395;
                                if (v395 >= *(_QWORD *)&v394)
                                  v397 = v395 % *(_QWORD *)&v394;
                              }
                              else
                              {
                                v397 = (*(_QWORD *)&v394 - 1) & v395;
                              }
                              v398 = *(uint64_t ***)(v393[462] + 8 * v397);
                              if (v398)
                              {
                                v399 = *v398;
                                if (v399)
                                {
                                  if (v396.u32[0] < 2uLL)
                                  {
                                    v400 = *(_QWORD *)&v394 - 1;
                                    while (1)
                                    {
                                      v402 = v399[1];
                                      if (v402 == v395)
                                      {
                                        if (*((_DWORD *)v399 + 4) == v377
                                          && *((_DWORD *)v399 + 5) == (_DWORD)v289
                                          && *((_DWORD *)v399 + 6) == (_DWORD)v289)
                                        {
                                          goto LABEL_655;
                                        }
                                      }
                                      else if ((v402 & v400) != v397)
                                      {
                                        goto LABEL_657;
                                      }
                                      v399 = (uint64_t *)*v399;
                                      if (!v399)
                                        goto LABEL_657;
                                    }
                                  }
                                  do
                                  {
                                    v401 = v399[1];
                                    if (v401 == v395)
                                    {
                                      if (*((_DWORD *)v399 + 4) == v377
                                        && *((_DWORD *)v399 + 5) == (_DWORD)v289
                                        && *((_DWORD *)v399 + 6) == (_DWORD)v289)
                                      {
LABEL_655:
                                        v403 = 4 * *((unsigned int *)v399 + 7);
                                        v404 = (float)*(int *)(v393[455] + v403);
                                        v405 = (float)*(int *)(v393[458] + v403);
                                        v406 = sqrtf((float)(v404 * v404) + (float)(v405 * v405));
                                        if (v406 >= 0.0000001)
                                        {
                                          v378 = 0;
                                          v407 = 1.0 / v406;
                                          *(float *)&buf[4] = v407 * v404;
                                          *(float *)&buf[8] = v407 * v405;
                                          buf[0] = 1;
                                        }
                                        break;
                                      }
                                    }
                                    else
                                    {
                                      if (v401 >= *(_QWORD *)&v394)
                                        v401 %= *(_QWORD *)&v394;
                                      if (v401 != v397)
                                        break;
                                    }
                                    v399 = (uint64_t *)*v399;
                                  }
                                  while (v399);
                                }
                              }
                            }
LABEL_657:
                            if (v553)
                            {
                              v408 = &v616;
                              if (v568)
                                v408 = &v607;
                              v409 = v408[1];
                              v591[0] = v128;
                              v591[1] = (uint64_t)v564;
                              if (v564)
                              {
                                do
                                  v410 = __ldxr(v290);
                                while (__stxr(v410 + 1, v290));
                              }
                              if (v564)
                              {
                                do
                                  v411 = __ldaxr(v290);
                                while (__stlxr(v411 - 1, v290));
LABEL_671:
                                if (!v411)
                                {
                                  ((void (*)(std::__shared_weak_count *))v564->__on_zero_shared)(v564);
                                  std::__shared_weak_count::__release_weak(v564);
                                }
                              }
                            }
                            else
                            {
                              v412 = &v634;
                              if (v568)
                                v412 = &v625;
                              v413 = v412[1];
                              v590[0] = v128;
                              v590[1] = (uint64_t)v564;
                              if (v564)
                              {
                                do
                                  v414 = __ldxr(v290);
                                while (__stxr(v414 + 1, v290));
                              }
                              if (v564)
                              {
                                do
                                  v411 = __ldaxr(v290);
                                while (__stlxr(v411 - 1, v290));
                                goto LABEL_671;
                              }
                            }
LABEL_434:
                            ++v289;
                            v113 = v559;
                            v114 = v563;
                            if (v289 == v557)
                              goto LABEL_675;
                            continue;
                          }
                          if (v315 > v313)
                          {
                            LOBYTE(v643) = 0;
                            if (v315 + 1 < v576)
                            {
                              v548 = 0;
                              v320 = vsub_f32(v560[v315 + 1], v560[v315]);
                              *(float32x2_t *)((char *)&v643 + 4) = vmul_n_f32(v320, 1.0 / sqrtf(vaddv_f32(vmul_f32(v320, v320))));
                              LOBYTE(v643) = 1;
                              v321 = v551;
                              goto LABEL_551;
                            }
                            v321 = v551;
                            if (v576 - 1 == v315)
                            {
                              v328 = 0.0;
                              if (!v551[445].i32[0])
                                goto LABEL_548;
                              v329 = v551[463];
                              if (!*(_QWORD *)&v329)
                                goto LABEL_548;
                              v330 = (v543 + v315) ^ v544;
                              v331 = (uint8x8_t)vcnt_s8(v329);
                              v331.i16[0] = vaddlv_u8(v331);
                              if (v331.u32[0] > 1uLL)
                              {
                                v332 = (v543 + v315) ^ v544;
                                if (v330 >= *(_QWORD *)&v329)
                                  v332 = v330 % *(_QWORD *)&v329;
                              }
                              else
                              {
                                v332 = (*(_QWORD *)&v329 - 1) & v330;
                              }
                              v341 = *(uint64_t ***)(*(_QWORD *)&v551[462] + 8 * v332);
                              if (!v341 || (v342 = *v341) == 0)
                              {
LABEL_548:
                                v347 = 0.0;
                                goto LABEL_549;
                              }
                              if (v331.u32[0] < 2uLL)
                              {
                                v343 = *(_QWORD *)&v329 - 1;
                                while (1)
                                {
                                  v345 = v342[1];
                                  if (v345 == v330)
                                  {
                                    if (*((_DWORD *)v342 + 4) == (_DWORD)v563
                                      && *((_DWORD *)v342 + 5) == (_DWORD)v289
                                      && *((_DWORD *)v342 + 6) == (_DWORD)v289)
                                    {
                                      goto LABEL_547;
                                    }
                                  }
                                  else if ((v345 & v343) != v332)
                                  {
                                    goto LABEL_548;
                                  }
                                  v342 = (uint64_t *)*v342;
                                  if (!v342)
                                    goto LABEL_548;
                                }
                              }
                              while (1)
                              {
                                v344 = v342[1];
                                if (v344 == v330)
                                {
                                  if (*((_DWORD *)v342 + 4) == (_DWORD)v563
                                    && *((_DWORD *)v342 + 5) == (_DWORD)v289
                                    && *((_DWORD *)v342 + 6) == (_DWORD)v289)
                                  {
LABEL_547:
                                    v346 = 4 * *((unsigned int *)v342 + 7);
                                    v328 = (float)*(int *)(*(_QWORD *)&v551[455] + v346);
                                    v347 = (float)*(int *)(*(_QWORD *)&v551[458] + v346);
LABEL_549:
                                    v348 = sqrtf((float)(v328 * v328) + (float)(v347 * v347));
                                    if (v348 >= 0.0000001)
                                    {
                                      v548 = 0;
                                      v349 = 1.0 / v348;
                                      *((float *)&v643 + 1) = v349 * v328;
                                      *((float *)&v643 + 2) = v349 * v347;
                                      LOBYTE(v643) = 1;
                                    }
                                    break;
                                  }
                                }
                                else
                                {
                                  if (v344 >= *(_QWORD *)&v329)
                                    v344 %= *(_QWORD *)&v329;
                                  if (v344 != v332)
                                    goto LABEL_548;
                                }
                                v342 = (uint64_t *)*v342;
                                if (!v342)
                                  goto LABEL_548;
                              }
                            }
LABEL_551:
                            buf[0] = 0;
                            if (v313)
                            {
                              v554 = 0;
                              v350 = v560;
                              v351 = vsub_f32(v560[v313], v560[v313 - 1]);
                              *(float32x2_t *)&buf[4] = vmul_n_f32(v351, 1.0 / sqrtf(vaddv_f32(vmul_f32(v351, v351))));
                              goto LABEL_582;
                            }
                            v352 = 0.0;
                            if (v321[445].i32[0])
                            {
                              v353 = v321[463];
                              if (v353)
                              {
                                v354 = (uint8x8_t)vcnt_s8(v353);
                                v354.i16[0] = vaddlv_u8(v354);
                                if (v354.u32[0] > 1uLL)
                                {
                                  v355 = v550;
                                  if (v550 >= *(_QWORD *)&v353)
                                    v355 = v550 % *(_QWORD *)&v353;
                                }
                                else
                                {
                                  v355 = (*(_QWORD *)&v353 - 1) & v550;
                                }
                                v356 = *(uint64_t ***)(*(_QWORD *)&v321[462] + 8 * v355);
                                if (v356)
                                {
                                  v357 = *v356;
                                  if (v357)
                                  {
                                    if (v354.u32[0] < 2uLL)
                                    {
                                      v358 = *(_QWORD *)&v353 - 1;
                                      while (1)
                                      {
                                        v360 = v357[1];
                                        if (v360 == v550)
                                        {
                                          if (*((_DWORD *)v357 + 4) == (_DWORD)v563
                                            && *((_DWORD *)v357 + 5) == (_DWORD)v289
                                            && *((_DWORD *)v357 + 6) == (_DWORD)v289)
                                          {
                                            goto LABEL_578;
                                          }
                                        }
                                        else if ((v360 & v358) != v355)
                                        {
                                          goto LABEL_579;
                                        }
                                        v357 = (uint64_t *)*v357;
                                        if (!v357)
                                          goto LABEL_579;
                                      }
                                    }
                                    do
                                    {
                                      v359 = v357[1];
                                      if (v359 == v550)
                                      {
                                        if (*((_DWORD *)v357 + 4) == (_DWORD)v563
                                          && *((_DWORD *)v357 + 5) == (_DWORD)v289
                                          && *((_DWORD *)v357 + 6) == (_DWORD)v289)
                                        {
LABEL_578:
                                          v361 = 4 * *((unsigned int *)v357 + 7);
                                          v352 = -(float)*(int *)(*(_QWORD *)&v321[455] + v361);
                                          v362 = -(float)*(int *)(*(_QWORD *)&v321[458] + v361);
                                          goto LABEL_580;
                                        }
                                      }
                                      else
                                      {
                                        if (v359 >= *(_QWORD *)&v353)
                                          v359 %= *(_QWORD *)&v353;
                                        if (v359 != v355)
                                          break;
                                      }
                                      v357 = (uint64_t *)*v357;
                                    }
                                    while (v357);
                                  }
                                }
                              }
                            }
LABEL_579:
                            v362 = 0.0;
LABEL_580:
                            v363 = sqrtf((float)(v352 * v352) + (float)(v362 * v362));
                            v350 = v560;
                            if (v363 >= 0.0000001)
                            {
                              v554 = 0;
                              v364 = 1.0 / v363;
                              *(float *)&buf[4] = v364 * v352;
                              *(float *)&buf[8] = v364 * v362;
LABEL_582:
                              buf[0] = 1;
                            }
                            v365 = v315 - v313 + 1;
                            v366 = (unint64_t)&v350[v313];
                            if (v553)
                            {
                              v367 = v617;
                              v593[0] = v549;
                              v593[1] = (uint64_t)v564;
                              if (v564)
                              {
                                do
                                  v368 = __ldxr(v290);
                                while (__stxr(v368 + 1, v290));
                              }
                              if (v564)
                              {
                                do
                                  v369 = __ldaxr(v290);
                                while (__stlxr(v369 - 1, v290));
LABEL_593:
                                if (!v369)
                                {
                                  ((void (*)(std::__shared_weak_count *))v564->__on_zero_shared)(v564);
                                  std::__shared_weak_count::__release_weak(v564);
                                }
                              }
                            }
                            else
                            {
                              v370 = v635;
                              v592[0] = v549;
                              v592[1] = (uint64_t)v564;
                              if (v564)
                              {
                                do
                                  v371 = __ldxr(v290);
                                while (__stxr(v371 + 1, v290));
                              }
                              if (v564)
                              {
                                do
                                  v369 = __ldaxr(v290);
                                while (__stlxr(v369 - 1, v290));
                                goto LABEL_593;
                              }
                            }
                            v554 = 0;
                            v565 = *v318;
LABEL_488:
                            v309 = (uint64_t (**)())((char *)v309 + 1);
                            v313 = v315;
                            if (v309 == v310)
                              goto LABEL_597;
                            goto LABEL_489;
                          }
                          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                          v322 = (id)GEOGetVectorKitVKDefaultLog_log;
                          if (os_log_type_enabled(v322, OS_LOG_TYPE_ERROR))
                          {
                            v545 = v322;
                            v594[0] = *a5;
                            v595 = *(_QWORD *)(a5 + 2);
                            v323 = MEMORY[0x1E0DE4FD0] + 104;
                            v655[0] = MEMORY[0x1E0DE4FD0] + 104;
                            v324 = (void *)(MEMORY[0x1E0DE4FD0] + 64);
                            __p = (void *)(MEMORY[0x1E0DE4FD0] + 64);
                            *(_QWORD *)&v643 = v539;
                            *(_QWORD *)((char *)&v643 + *(_QWORD *)(v539 - 24)) = v538;
                            *((_QWORD *)&v643 + 1) = 0;
                            v325 = (std::ios_base *)((char *)&v643 + *(_QWORD *)(v643 - 24));
                            std::ios_base::init(v325, &v645);
                            v325[1].__vftable = 0;
                            v325[1].__fmtflags_ = -1;
                            __p = v537;
                            *(void **)((char *)&__p + *((_QWORD *)v537 - 3)) = v536;
                            *(_QWORD *)&v643 = v534;
                            *(_QWORD *)((char *)&v643 + *(_QWORD *)(v534 - 24)) = v535;
                            v655[0] = v323;
                            *(_QWORD *)&v643 = MEMORY[0x1E0DE4FD0] + 24;
                            __p = v324;
                            std::streambuf::basic_streambuf();
                            v645 = (std::__shared_weak_count *)v533;
                            v652 = 0u;
                            v653 = 0u;
                            v654 = 24;
                            md::outputDebugString(v594, &__p);
                            if ((v654 & 0x10) != 0)
                            {
                              v333 = *((_QWORD *)&v653 + 1);
                              v334 = (const void **)&v650;
                              if (*((_QWORD *)&v653 + 1) < v651)
                              {
                                *((_QWORD *)&v653 + 1) = v651;
                                v333 = v651;
                                v334 = (const void **)&v650;
                              }
                            }
                            else
                            {
                              if ((v654 & 8) == 0)
                              {
                                v326 = 0;
                                HIBYTE(v585) = 0;
                                p_dst = &__dst;
                                goto LABEL_520;
                              }
                              v333 = v649;
                              v334 = (const void **)&v647;
                            }
                            v335 = *v334;
                            v326 = v333 - (_QWORD)*v334;
                            if (v326 >= 0x7FFFFFFFFFFFFFF8)
                              abort();
                            if (v326 >= 0x17)
                            {
                              v336 = (v326 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v326 | 7) != 0x17)
                                v336 = v326 | 7;
                              v337 = v336 + 1;
                              p_dst = (unint64_t *)operator new(v336 + 1);
                              v585 = v337 | 0x8000000000000000;
                              __dst = (unint64_t)p_dst;
                              v584 = (unint64_t *)v326;
                            }
                            else
                            {
                              HIBYTE(v585) = v333 - *(_BYTE *)v334;
                              p_dst = &__dst;
                              if (!v326)
                              {
LABEL_520:
                                a7 = v532;
                                *((_BYTE *)p_dst + v326) = 0;
                                *(_QWORD *)&v643 = v530;
                                *(_QWORD *)((char *)&v643 + *(_QWORD *)(v530 - 24)) = v529;
                                __p = v528;
                                v645 = (std::__shared_weak_count *)(MEMORY[0x1E0DE4FB8] + 16);
                                v322 = v545;
                                if (SBYTE7(v653) < 0)
                                  operator delete((void *)v652);
                                std::streambuf::~streambuf();
                                std::iostream::~basic_iostream();
                                MEMORY[0x1A1AF4D64](v655);
                                v338 = &__dst;
                                if (v585 < 0)
                                  v338 = (unint64_t *)__dst;
                                v339 = v316[1];
                                v340 = v316[2];
                                *(_DWORD *)buf = 136315650;
                                *(_QWORD *)&buf[4] = v338;
                                *(_WORD *)&buf[12] = 1024;
                                *(_DWORD *)&buf[14] = v339;
                                *(_WORD *)&buf[18] = 1024;
                                *(_DWORD *)&buf[20] = v340;
                                _os_log_impl(&dword_19F029000, v545, OS_LOG_TYPE_ERROR, "buildRoadTileData: Received point characteristic out of order in tile %s, featureIndex %d, sectionIndex %d", buf, 0x18u);
                                a2 = v531;
                                if (SHIBYTE(v585) < 0)
                                  operator delete((void *)__dst);
                                goto LABEL_486;
                              }
                            }
                            memmove(p_dst, v335, v326);
                            goto LABEL_520;
                          }
LABEL_486:

                        }
                        break;
                      }
                      v315 = v313;
                      goto LABEL_488;
                    }
                    do
                    {
                      v211 = v208 >> 1;
                      v212 = &v207[v208 >> 1];
                      v214 = *v212;
                      v213 = v212 + 1;
                      v208 += ~(v208 >> 1);
                      if (v214 < 0x12C)
                        v207 = v213;
                      else
                        v208 = v211;
                    }
                    while (v208);
                    if (v207 == &v206[v205] || *v207 != 300)
                    {
LABEL_303:
                      if (*(_WORD *)(v196 + 56))
                      {
                        v218 = *(_QWORD *)(v196 + 48);
                        v219 = v218 + 8 * *(unsigned __int16 *)(v196 + 56);
                        do
                        {
                          v221 = *(uint64_t **)(*(_QWORD *)v218 + 72);
                          if (v221)
                          {
                            v222 = *v221;
                            v223 = *(unsigned __int16 *)(*v221 + 10);
                            if (!(_DWORD)v223)
                            {
                              v220 = 0;
                              goto LABEL_306;
                            }
                            v224 = *(unsigned __int16 **)v222;
                            if (!*(_BYTE *)(v222 + 15))
                            {
                              v233 = 2 * v223;
                              v225 = *(unsigned __int16 **)v222;
                              while (*v225 != 300)
                              {
                                ++v225;
                                v233 -= 2;
                                if (!v233)
                                {
                                  LODWORD(v225) = (_DWORD)v224 + 2 * v223;
                                  break;
                                }
                              }
LABEL_327:
                              v220 = (unsigned __int16)(((_DWORD)v225 - (_DWORD)v224) >> 1);
LABEL_306:
                              if (v220 != (_DWORD)v223)
                                goto LABEL_397;
                              goto LABEL_307;
                            }
                            v225 = *(unsigned __int16 **)v222;
                            v226 = v223;
                            if (v223 < 0x1E)
                            {
                              v227 = 0;
                              while (1)
                              {
                                v228 = v224[v227];
                                if (v228 >= 0x12C)
                                  break;
                                if (v223 == ++v227)
                                  goto LABEL_307;
                              }
                              v220 = (unsigned __int16)v227;
                              if (v228 != 300)
                                v220 = v223;
                              goto LABEL_306;
                            }
                            do
                            {
                              v229 = v226 >> 1;
                              v230 = &v225[v226 >> 1];
                              v232 = *v230;
                              v231 = v230 + 1;
                              v226 += ~(v226 >> 1);
                              if (v232 < 0x12C)
                                v225 = v231;
                              else
                                v226 = v229;
                            }
                            while (v226);
                            if (v225 != &v224[v223] && *v225 == 300)
                              goto LABEL_327;
                          }
LABEL_307:
                          v218 += 8;
                        }
                        while (v218 != v219);
                      }
LABEL_330:
                      v201 = 1;
LABEL_331:
                      v234 = *(_QWORD *)(v196 + 16 * v201 + 16);
                      if (!v234)
                        goto LABEL_384;
                      v235 = *(uint64_t **)(v234 + 72);
                      if (!v235)
                        goto LABEL_357;
                      v236 = *v235;
                      v237 = *(unsigned __int16 *)(*v235 + 10);
                      if (!(_DWORD)v237)
                        goto LABEL_357;
                      v238 = *(unsigned __int16 **)v236;
                      if (*(_BYTE *)(v236 + 15))
                      {
                        v239 = *(unsigned __int16 **)v236;
                        v240 = v237;
                        if (v237 < 0x1E)
                        {
                          v241 = 0;
                          while (1)
                          {
                            v242 = v238[v241];
                            if (v242 >= 0x12C)
                              break;
                            if (v237 == ++v241)
                              goto LABEL_357;
                          }
                          v248 = (unsigned __int16)v241;
                          if (v242 != 300)
                            v248 = v237;
                          if (v248 != (_DWORD)v237)
                            goto LABEL_397;
LABEL_357:
                          v249 = v196 + 16 * v201;
                          v250 = *(unsigned __int16 *)(v249 + 56);
                          if (*(_WORD *)(v249 + 56))
                          {
                            v251 = *(_QWORD *)(v249 + 48);
                            v252 = v251 + 8 * v250;
                            do
                            {
                              v254 = *(uint64_t **)(*(_QWORD *)v251 + 72);
                              if (v254)
                              {
                                v255 = *v254;
                                v256 = *(unsigned __int16 *)(*v254 + 10);
                                if (!(_DWORD)v256)
                                {
                                  v253 = 0;
                                  goto LABEL_360;
                                }
                                v257 = *(unsigned __int16 **)v255;
                                if (!*(_BYTE *)(v255 + 15))
                                {
                                  v266 = 2 * v256;
                                  v258 = *(unsigned __int16 **)v255;
                                  while (*v258 != 300)
                                  {
                                    ++v258;
                                    v266 -= 2;
                                    if (!v266)
                                    {
                                      LODWORD(v258) = (_DWORD)v257 + 2 * v256;
                                      break;
                                    }
                                  }
LABEL_381:
                                  v253 = (unsigned __int16)(((_DWORD)v258 - (_DWORD)v257) >> 1);
LABEL_360:
                                  if (v253 != (_DWORD)v256)
                                    goto LABEL_397;
                                  goto LABEL_361;
                                }
                                v258 = *(unsigned __int16 **)v255;
                                v259 = v256;
                                if (v256 < 0x1E)
                                {
                                  v260 = 0;
                                  while (1)
                                  {
                                    v261 = v257[v260];
                                    if (v261 >= 0x12C)
                                      break;
                                    if (v256 == ++v260)
                                      goto LABEL_361;
                                  }
                                  v253 = (unsigned __int16)v260;
                                  if (v261 != 300)
                                    v253 = v256;
                                  goto LABEL_360;
                                }
                                do
                                {
                                  v262 = v259 >> 1;
                                  v263 = &v258[v259 >> 1];
                                  v265 = *v263;
                                  v264 = v263 + 1;
                                  v259 += ~(v259 >> 1);
                                  if (v265 < 0x12C)
                                    v258 = v264;
                                  else
                                    v259 = v262;
                                }
                                while (v259);
                                if (v258 != &v257[v256] && *v258 == 300)
                                  goto LABEL_381;
                              }
LABEL_361:
                              v251 += 8;
                            }
                            while (v251 != v252);
                          }
LABEL_384:
                          if (v197)
                          {
                            v267 = *v197;
                            v268 = *v197 == 1.0;
                            if (*(_BYTE *)(v196 + 10))
                            {
                              if (v267 != 0.0 && v267 != 1.0)
                                goto LABEL_394;
                            }
                          }
                          else
                          {
                            v268 = 0;
                          }
                          v215 = *(unsigned __int8 *)(v196 + v268 + 11);
                          if (v215 == 2)
                          {
LABEL_394:
                            hasValueForKeyAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(v643 + 24), 0x12Du, 0);
                            v215 = 1;
                            if ((hasValueForKeyAtEnd & 1) != 0)
                            {
                              v185 = 0;
                              goto LABEL_411;
                            }
                          }
                          if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v196, 0x12Du, v215) & 1) != 0)
                            goto LABEL_397;
                          if (!v197)
                          {
                            v272 = 0;
                            goto LABEL_404;
                          }
                          v271 = *v197;
                          v272 = *v197 == 1.0;
                          if (!*(_BYTE *)(v196 + 10) || v271 == 0.0 || v271 == 1.0)
                          {
LABEL_404:
                            v273 = *(unsigned __int8 *)(v196 + v272 + 11);
                            v271 = 0.0;
                            if (v273 == 2)
                              goto LABEL_405;
                            LOBYTE(v277) = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v196, 0x96u, v273, 0);
                          }
                          else
                          {
LABEL_405:
                            buf[0] = 1;
                            LOBYTE(__dst) = 1;
                            v274 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v196, 0x96u, 0, buf);
                            v275 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v196, 0x96u, 1u, &__dst);
                            if (v271 >= 1.0)
                              v276 = (int *)v275;
                            else
                              v276 = (int *)v274;
                            v277 = *v276;
                          }
                          v113 = v559;
                          v114 = v563;
                          v185 = 0;
                          v215 = v277 == 1;
                          goto LABEL_411;
                        }
                        do
                        {
                          v243 = v240 >> 1;
                          v244 = &v239[v240 >> 1];
                          v246 = *v244;
                          v245 = v244 + 1;
                          v240 += ~(v240 >> 1);
                          if (v246 < 0x12C)
                            v239 = v245;
                          else
                            v240 = v243;
                        }
                        while (v240);
                        if (v239 == &v238[v237] || *v239 != 300)
                          goto LABEL_357;
                      }
                      else
                      {
                        v247 = 2 * v237;
                        v239 = *(unsigned __int16 **)v236;
                        while (*v239 != 300)
                        {
                          ++v239;
                          v247 -= 2;
                          if (!v247)
                          {
                            LODWORD(v239) = (_DWORD)v238 + 2 * v237;
                            break;
                          }
                        }
                      }
                      if ((unsigned __int16)(((_DWORD)v239 - (_DWORD)v238) >> 1) != (_DWORD)v237)
                        goto LABEL_397;
                      goto LABEL_357;
                    }
                  }
                  else
                  {
                    v216 = 2 * v205;
                    v207 = *(unsigned __int16 **)v204;
                    while (*v207 != 300)
                    {
                      ++v207;
                      v216 -= 2;
                      if (!v216)
                      {
                        LODWORD(v207) = (_DWORD)v206 + 2 * v205;
                        break;
                      }
                    }
                  }
                  if ((unsigned __int16)(((_DWORD)v207 - (_DWORD)v206) >> 1) != (_DWORD)v205)
                    goto LABEL_397;
                  goto LABEL_303;
                }
              }
            }
            else
            {
              v199 = 0;
            }
            v201 = *(unsigned __int8 *)(v196 + v199 + 11);
            if (v201 == 2)
              goto LABEL_276;
            goto LABEL_331;
          }
        }
LABEL_163:
        if ((v526 & 1) == 0)
          goto LABEL_164;
      }
LABEL_127:
      if (++v114 == v113)
        goto LABEL_5;
    }
  }
LABEL_680:
  *(_QWORD *)&v643 = 0;
  *((_QWORD *)&v643 + 1) = &v643;
  __p = (void *)0x3812000000;
  v645 = (std::__shared_weak_count *)__Block_byref_object_copy__7_2024;
  v646 = __Block_byref_object_dispose__8_2025;
  v648 = 0;
  v647 = 0;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3812000000;
  v660 = __Block_byref_object_copy__9_2026;
  v661 = __Block_byref_object_dispose__10_2027;
  v662 = 0;
  v663 = 0;
  __dst = 0;
  v584 = &__dst;
  v585 = 0x3812000000;
  v586 = __Block_byref_object_copy__7_2024;
  v587 = __Block_byref_object_dispose__8_2025;
  v589 = 0;
  v588 = 0;
  v576 = 0;
  v577 = &v576;
  v578 = 0x3812000000;
  v579 = __Block_byref_object_copy__9_2026;
  v580 = __Block_byref_object_dispose__10_2027;
  v582 = 0;
  v581 = 0;
  if (v617[9] + v635[9] + v626[9] + v608[9])
  {
    v572[0] = MEMORY[0x1E0C809B0];
    v572[1] = 3321888768;
    v572[2] = ___ZNK2md19RoadLayerDataSource17buildRoadTileDataERKN3gdc19LayerDataRequestKeyEPN3ggl6LoaderERKN3geo8QuadTileERKNSt3__16vectorINSC_10shared_ptrINS_21GEOVectorTileResourceEEENSC_9allocatorISG_EEEERKNSC_13unordered_setINS_21RoadFeatureAndSectionENSC_4hashISN_EENSC_8equal_toISN_EENSH_ISN_EEEEONSC_10unique_ptrINS_19DaVinciTrafficLayerENSC_14default_deleteISX_EEEEONSW_INS_17CasedTrafficLayerENSY_IS12_EEEERKN3gss19FeatureAttributeSetENSE_INS5_17ConstantDataTypedINS5_4Tile4ViewEEEEENSE_INS1A_INS1B_9TransformEEEEERKNSE_INS_27TrafficSkeletonTileResourceEEERKNSD_INSE_INS_26TrafficDynamicTileResourceEEENSH_IS1N_EEEEONSD_INS1_8Resource12LoadMetadataENSH_IS1T_EEEE_block_invoke;
    v572[3] = &unk_1E42E91C8;
    v572[4] = &v634;
    v572[5] = &v643;
    v417 = (std::__shared_weak_count *)a11[1];
    v572[12] = *a11;
    v573 = v417;
    if (v417)
    {
      v418 = (unint64_t *)&v417->__shared_owners_;
      do
        v419 = __ldxr(v418);
      while (__stxr(v419 + 1, v418));
    }
    v420 = (std::__shared_weak_count *)a12[1];
    v574 = *a12;
    v575 = v420;
    if (v420)
    {
      v421 = (unint64_t *)&v420->__shared_owners_;
      do
        v422 = __ldxr(v421);
      while (__stxr(v422 + 1, v421));
    }
    v572[6] = &v616;
    v572[7] = buf;
    v572[8] = &v625;
    v572[9] = &__dst;
    v572[10] = &v607;
    v572[11] = &v576;
    v658 = 0;
    v656 = &off_1E42C7118;
    v657 = MEMORY[0x1A1AF5730](v572);
    v658 = &v656;
    v570 = 0;
    v571 = 0;
    (*(void (**)(_QWORD, uint64_t (***)(), uint64_t *))(*(_QWORD *)*a4 + 16))(*a4, &v656, &v570);
    v423 = v571;
    if (v571)
    {
      v424 = (unint64_t *)&v571->__shared_owners_;
      do
        v425 = __ldaxr(v424);
      while (__stlxr(v425 - 1, v424));
      if (!v425)
      {
        ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
        std::__shared_weak_count::__release_weak(v423);
      }
    }
    v426 = v658;
    if (v658 == &v656)
    {
      v427 = 4;
      v426 = &v656;
    }
    else
    {
      if (!v658)
        goto LABEL_697;
      v427 = 5;
    }
    (*v426)[v427]();
LABEL_697:
    v428 = v575;
    if (v575)
    {
      v429 = (unint64_t *)&v575->__shared_owners_;
      do
        v430 = __ldaxr(v429);
      while (__stlxr(v430 - 1, v429));
      if (!v430)
      {
        ((void (*)(std::__shared_weak_count *))v428->__on_zero_shared)(v428);
        std::__shared_weak_count::__release_weak(v428);
      }
    }
    v431 = v573;
    if (v573)
    {
      v432 = (unint64_t *)&v573->__shared_owners_;
      do
        v433 = __ldaxr(v432);
      while (__stlxr(v433 - 1, v432));
      if (!v433)
      {
        ((void (*)(std::__shared_weak_count *))v431->__on_zero_shared)(v431);
        std::__shared_weak_count::__release_weak(v431);
      }
    }
  }
  if (*a6 == a6[1])
  {
    v562 = 0;
    v656 = 0;
    v657 = 0;
  }
  else
  {
    v434 = **a6;
    v435 = *(unint64_t **)(v434 + 152);
    v656 = *(uint64_t (***)())(v434 + 144);
    v657 = (uint64_t)v435;
    if (v435)
    {
      v436 = v435 + 1;
      do
        v437 = __ldxr(v436);
      while (__stxr(v437 + 1, v436));
      v562 = (geo::codec *)v435;
    }
    else
    {
      v562 = 0;
    }
  }
  v438 = *((_QWORD *)&v643 + 1);
  v439 = *(_QWORD *)&buf[8];
  v440 = (unint64_t)v584;
  v441 = v577;
  v442 = (char *)operator new(0x3B8uLL);
  *((_QWORD *)v442 + 1) = 0;
  *((_QWORD *)v442 + 2) = 0;
  *(_QWORD *)v442 = &off_1E42DAEC0;
  v443 = *(_QWORD *)(v438 + 48);
  *(_QWORD *)(v438 + 48) = 0;
  v444 = *(_QWORD *)(v439 + 48);
  *(_QWORD *)(v439 + 48) = 0;
  v445 = *(_QWORD *)(v440 + 48);
  *(_QWORD *)(v440 + 48) = 0;
  v446 = v441[6];
  v441[6] = 0;
  prime = (_QWORD *)md::MapTileData::MapTileData((uint64_t)(v442 + 24), a3, a15, (uint64_t)&v656, 1);
  *((_QWORD *)v442 + 3) = &off_1E428D520;
  *((_QWORD *)v442 + 82) = &unk_1E428D560;
  *((_QWORD *)v442 + 93) = v443;
  *((_QWORD *)v442 + 94) = v444;
  *((_QWORD *)v442 + 95) = v445;
  *((_QWORD *)v442 + 96) = v446;
  v448 = *a8;
  *a8 = 0;
  *((_QWORD *)v442 + 97) = v448;
  v449 = *a9;
  *a9 = 0;
  *((_QWORD *)v442 + 98) = v449;
  v450 = v442 + 792;
  *(_OWORD *)(v442 + 792) = 0u;
  v451 = __n;
  *((_QWORD *)v442 + 101) = v602;
  v567 = v442 + 816;
  v569 = v442 + 792;
  v452 = v604;
  *((_QWORD *)v442 + 102) = 0;
  *((_QWORD *)v442 + 103) = v452;
  *((_QWORD *)v442 + 104) = 0;
  *((_DWORD *)v442 + 210) = v606;
  if (v451 == 1)
  {
    v451 = 2;
LABEL_716:
    prime = (_QWORD *)std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>((uint64_t)(v442 + 792), v451);
    goto LABEL_717;
  }
  if ((v451 & (v451 - 1)) != 0)
  {
    prime = (_QWORD *)std::__next_prime(v451);
    v451 = (size_t)prime;
    v489 = *(int8x8_t *)(v442 + 800);
    v490 = (unint64_t)prime >= *(_QWORD *)&v489;
    if ((unint64_t)prime > *(_QWORD *)&v489)
      goto LABEL_716;
  }
  else
  {
    v489 = 0;
    v490 = 1;
    if (v451)
      goto LABEL_716;
  }
  if (!v490)
  {
    prime = (_QWORD *)vcvtps_u32_f32((float)*((unint64_t *)v442 + 104) / *((float *)v442 + 210));
    if (*(_QWORD *)&v489 < 3uLL || (v516 = (uint8x8_t)vcnt_s8(v489), v516.i16[0] = vaddlv_u8(v516), v516.u32[0] > 1uLL))
    {
      prime = (_QWORD *)std::__next_prime((size_t)prime);
    }
    else
    {
      v517 = 1 << -(char)__clz((unint64_t)prime - 1);
      if ((unint64_t)prime >= 2)
        prime = (_QWORD *)v517;
    }
    if (v451 <= (unint64_t)prime)
      v451 = (size_t)prime;
    if (v451 < *(_QWORD *)&v489)
      goto LABEL_716;
  }
LABEL_717:
  for (j = v603; j; j = (_QWORD *)*j)
  {
    v454 = j[2];
    v455 = 0x9DDFEA08EB382D69 * (((8 * v454) + 8) ^ HIDWORD(v454));
    v456 = 0x9DDFEA08EB382D69 * (HIDWORD(v454) ^ (v455 >> 47) ^ v455);
    v457 = v456 ^ (v456 >> 47);
    v458 = 0x9DDFEA08EB382D69 * v457;
    v459 = *((_QWORD *)v442 + 100);
    if (v459)
    {
      v460 = (uint8x8_t)vcnt_s8((int8x8_t)v459);
      v460.i16[0] = vaddlv_u8(v460);
      if (v460.u32[0] > 1uLL)
      {
        v440 = 0x9DDFEA08EB382D69 * v457;
        if (v458 >= v459)
          v440 = v458 % v459;
      }
      else
      {
        v440 = v458 & (v459 - 1);
      }
      v461 = *(_QWORD **)(*v450 + 8 * v440);
      if (v461)
      {
        v462 = (_QWORD *)*v461;
        if (v462)
        {
          if (v460.u32[0] < 2uLL)
          {
            while (1)
            {
              v464 = v462[1];
              if (v464 == v458)
              {
                if (v462[2] == v454)
                  goto LABEL_782;
              }
              else if ((v464 & (v459 - 1)) != v440)
              {
                goto LABEL_738;
              }
              v462 = (_QWORD *)*v462;
              if (!v462)
                goto LABEL_738;
            }
          }
          do
          {
            v463 = v462[1];
            if (v463 == v458)
            {
              if (v462[2] == v454)
                goto LABEL_782;
            }
            else
            {
              if (v463 >= v459)
                v463 %= v459;
              if (v463 != v440)
                break;
            }
            v462 = (_QWORD *)*v462;
          }
          while (v462);
        }
      }
    }
LABEL_738:
    prime = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v442 + 103) + 16))(*((_QWORD *)v442 + 103), 56, 8);
    v465 = prime;
    *prime = 0;
    prime[1] = v458;
    prime[2] = j[2];
    v466 = j[3];
    prime[3] = v466;
    if (v466)
    {
      v467 = (unint64_t *)(v466 + 8);
      do
        v468 = __ldxr(v467);
      while (__stxr(v468 + 1, v467));
    }
    prime[4] = 0;
    prime[5] = 0;
    prime[6] = 0;
    v470 = (_BYTE *)j[4];
    v469 = (_BYTE *)j[5];
    v471 = v469 - v470;
    if (v469 != v470)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v471 >> 2) > 0x1555555555555555)
        abort();
      v472 = (char *)operator new(v471);
      v465[4] = v472;
      v465[5] = v472;
      v465[6] = &v472[4 * (v471 >> 2)];
      v473 = 12 * ((v471 - 12) / 0xCuLL) + 12;
      prime = memcpy(v472, v470, v473);
      v465[5] = &v472[v473];
    }
    v474 = (float)(unint64_t)(*((_QWORD *)v442 + 104) + 1);
    v475 = *((float *)v442 + 210);
    v450 = v442 + 792;
    if (!v459 || (float)(v475 * (float)v459) < v474)
    {
      v476 = (v459 & (v459 - 1)) != 0;
      if (v459 < 3)
        v476 = 1;
      v477 = v476 | (2 * v459);
      v478 = vcvtps_u32_f32(v474 / v475);
      if (v477 <= v478)
        v479 = v478;
      else
        v479 = v477;
      if (v479 == 1)
      {
        v479 = 2;
      }
      else if ((v479 & (v479 - 1)) != 0)
      {
        prime = (_QWORD *)std::__next_prime(v479);
        v479 = (size_t)prime;
      }
      v480 = *(int8x8_t *)(v442 + 800);
      if (v479 > *(_QWORD *)&v480)
        goto LABEL_756;
      if (v479 < *(_QWORD *)&v480)
      {
        prime = (_QWORD *)vcvtps_u32_f32((float)*((unint64_t *)v442 + 104) / *((float *)v442 + 210));
        if (*(_QWORD *)&v480 < 3uLL
          || (v481 = (uint8x8_t)vcnt_s8(v480), v481.i16[0] = vaddlv_u8(v481), v481.u32[0] > 1uLL))
        {
          prime = (_QWORD *)std::__next_prime((size_t)prime);
        }
        else
        {
          v482 = 1 << -(char)__clz((unint64_t)prime - 1);
          if ((unint64_t)prime >= 2)
            prime = (_QWORD *)v482;
        }
        if (v479 <= (unint64_t)prime)
          v479 = (size_t)prime;
        if (v479 < *(_QWORD *)&v480)
LABEL_756:
          prime = (_QWORD *)std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>((uint64_t)v569, v479);
      }
      v459 = *((_QWORD *)v442 + 100);
      if ((v459 & (v459 - 1)) != 0)
      {
        if (v458 >= v459)
          v440 = v458 % v459;
        else
          v440 = v458;
      }
      else
      {
        v440 = (v459 - 1) & v458;
      }
    }
    v483 = *(_QWORD **)(*v569 + 8 * v440);
    if (v483)
    {
      *v465 = *v483;
    }
    else
    {
      *v465 = *v567;
      *v567 = v465;
      *(_QWORD *)(*v569 + 8 * v440) = v567;
      if (!*v465)
        goto LABEL_781;
      v484 = *(_QWORD *)(*v465 + 8);
      if ((v459 & (v459 - 1)) != 0)
      {
        if (v484 >= v459)
          v484 %= v459;
      }
      else
      {
        v484 &= v459 - 1;
      }
      v483 = (_QWORD *)(*v569 + 8 * v484);
    }
    *v483 = v465;
LABEL_781:
    ++*((_QWORD *)v442 + 104);
LABEL_782:
    ;
  }
  *((_QWORD *)v442 + 108) = 0;
  *((_OWORD *)v442 + 53) = 0u;
  *((_QWORD *)v442 + 109) = gss::Allocator::instance((gss::Allocator *)prime);
  if (v442 + 848 != (char *)a10)
    std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>((uint64_t *)v442 + 106, *(_QWORD *)a10, *(_QWORD **)(a10 + 8), (uint64_t)(*(_QWORD *)(a10 + 8) - *(_QWORD *)a10) >> 3);
  v485 = *a13;
  if (*a13)
  {
    *((_QWORD *)v442 + 110) = *(_QWORD *)(v485 + 144);
    v486 = *(_QWORD *)(v485 + 152);
    *((_QWORD *)v442 + 111) = v486;
    if (v486)
    {
      v487 = (unint64_t *)(v486 + 8);
      do
        v488 = __ldxr(v487);
      while (__stxr(v488 + 1, v487));
    }
  }
  else
  {
    *((_QWORD *)v442 + 110) = 0;
    *((_QWORD *)v442 + 111) = 0;
  }
  *((_QWORD *)v442 + 114) = 0;
  *((_OWORD *)v442 + 56) = 0u;
  v491 = a11[1];
  *((_QWORD *)v442 + 115) = *a11;
  *((_QWORD *)v442 + 116) = v491;
  if (v491)
  {
    v492 = (unint64_t *)(v491 + 8);
    do
      v493 = __ldxr(v492);
    while (__stxr(v493 + 1, v492));
  }
  v494 = a12[1];
  *((_QWORD *)v442 + 117) = *a12;
  *((_QWORD *)v442 + 118) = v494;
  if (v494)
  {
    v495 = (unint64_t *)(v494 + 8);
    do
      v496 = __ldxr(v495);
    while (__stxr(v496 + 1, v495));
  }
  v498 = *a14;
  v497 = a14[1];
  if (*a14 != v497)
  {
    do
      md::DynamicTrafficTileList::addDynamicTile((uint64_t)(v442 + 896), v498++);
    while (v498 != v497);
  }
  *a1 = v442 + 24;
  a1[1] = v442;
  if (v562)
  {
    v499 = (unint64_t *)((char *)v562 + 8);
    do
      v500 = __ldaxr(v499);
    while (__stlxr(v500 - 1, v499));
    if (!v500)
    {
      (*(void (**)(geo::codec *))(*(_QWORD *)v562 + 16))(v562);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v562);
    }
  }
  _Block_object_dispose(&v576, 8);
  v501 = v582;
  v582 = 0;
  if (v501)
    (*(void (**)(uint64_t))(*(_QWORD *)v501 + 8))(v501);
  _Block_object_dispose(&__dst, 8);
  v502 = v589;
  v589 = 0;
  if (v502)
    (*(void (**)(uint64_t))(*(_QWORD *)v502 + 8))(v502);
  _Block_object_dispose(buf, 8);
  v503 = v663;
  v663 = 0;
  if (v503)
    (*(void (**)(uint64_t))(*(_QWORD *)v503 + 8))(v503);
  _Block_object_dispose(&v643, 8);
  v504 = v648;
  v648 = 0;
  if (v504)
    (*(void (**)(uint64_t))(*(_QWORD *)v504 + 8))(v504);
  v505 = v603;
  while (v505)
  {
    v511 = v505;
    v505 = (_QWORD *)*v505;
    v512 = (void *)v511[4];
    if (v512)
    {
      v511[5] = v512;
      operator delete(v512);
    }
    v513 = (std::__shared_weak_count *)v511[3];
    if (v513)
    {
      v514 = (unint64_t *)&v513->__shared_owners_;
      do
        v515 = __ldaxr(v514);
      while (__stlxr(v515 - 1, v514));
      if (!v515)
      {
        ((void (*)(std::__shared_weak_count *))v513->__on_zero_shared)(v513);
        std::__shared_weak_count::__release_weak(v513);
      }
    }
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v604 + 40))(v604, v511, 56);
  }
  v506 = v600;
  v600 = 0;
  if (v506)
    (*(void (**)(uint64_t, uint64_t, size_t))(*(_QWORD *)v602 + 40))(v602, v506, 8 * __n);
  _Block_object_dispose(&v607, 8);
  std::__hash_table<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<md::PatternedBatchKey>,std::equal_to<md::PatternedBatchKey>,true>,std::__unordered_map_equal<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<md::PatternedBatchKey>,std::hash<md::PatternedBatchKey>,true>,std::allocator<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*((_QWORD **)&v613 + 1));
  v507 = (void *)*((_QWORD *)&v612 + 1);
  *((_QWORD *)&v612 + 1) = 0;
  if (v507)
    operator delete(v507);
  _Block_object_dispose(&v616, 8);
  std::__hash_table<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<md::PatternedBatchKey>,std::equal_to<md::PatternedBatchKey>,true>,std::__unordered_map_equal<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<md::PatternedBatchKey>,std::hash<md::PatternedBatchKey>,true>,std::allocator<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*((_QWORD **)&v622 + 1));
  v508 = (void *)*((_QWORD *)&v621 + 1);
  *((_QWORD *)&v621 + 1) = 0;
  if (v508)
    operator delete(v508);
  _Block_object_dispose(&v625, 8);
  std::__hash_table<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<md::PatternedBatchKey>,std::equal_to<md::PatternedBatchKey>,true>,std::__unordered_map_equal<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<md::PatternedBatchKey>,std::hash<md::PatternedBatchKey>,true>,std::allocator<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*((_QWORD **)&v631 + 1));
  v509 = (void *)*((_QWORD *)&v630 + 1);
  *((_QWORD *)&v630 + 1) = 0;
  if (v509)
    operator delete(v509);
  _Block_object_dispose(&v634, 8);
  std::__hash_table<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<md::PatternedBatchKey>,std::equal_to<md::PatternedBatchKey>,true>,std::__unordered_map_equal<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<md::PatternedBatchKey>,std::hash<md::PatternedBatchKey>,true>,std::allocator<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*((_QWORD **)&v640 + 1));
  v510 = (void *)*((_QWORD *)&v639 + 1);
  *((_QWORD *)&v639 + 1) = 0;
  if (v510)
    operator delete(v510);
}

void sub_19F383120(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZN2md19StyleSheetExtension12initWithNameIN3gss10PropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke_4(uint64_t a1, void *a2)
{
  int v3;
  const __CFString *v4;
  __CFString *v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  v14 = a2;
  v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 == 2)
  {
    v4 = CFSTR("-iosmac");
LABEL_5:
    objc_msgSend(&stru_1E4315B30, "stringByAppendingString:", v4);
    v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (!v5)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (v3 == 1)
  {
    v4 = CFSTR("-car");
    goto LABEL_5;
  }
  v5 = &stru_1E4315B30;
LABEL_8:
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
LABEL_9:
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
    {
      v6 = *(uint64_t **)(a1 + 64);
      if (*((char *)v6 + 23) < 0)
        v6 = (uint64_t *)*v6;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v6, 4);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "stringByAppendingPathExtension:", v14);
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v10 = *(void **)(v9 + 40);
      *(_QWORD *)(v9 + 40) = v8;

      objc_msgSend(*(id *)(a1 + 32), "dataForResourceWithName:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v13 = *(void **)(v12 + 40);
      *(_QWORD *)(v12 + 40) = v11;

    }
  }

}

void sub_19F383288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void ___ZN2md19StyleSheetExtension12initWithNameIN3gss10PropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  void (**v11)(_QWORD, _QWORD);
  __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id (*v18)(uint64_t, void *);
  void *v19;
  id v20;
  int v21;
  _QWORD v22[4];
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;

  v5 = a2;
  v6 = a3;
  v7 = MEMORY[0x1E0C809B0];
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = ___ZN2md19StyleSheetExtension12initWithNameIN3gss10PropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke_2;
  v22[3] = &unk_1E42F3BB0;
  v8 = *(_QWORD *)(a1 + 56);
  v25 = *(_QWORD *)(a1 + 40);
  v26 = v8;
  v9 = v6;
  v23 = v9;
  v24 = *(id *)(a1 + 32);
  v16 = v7;
  v17 = 3221225472;
  v18 = ___ZN2md19StyleSheetExtension12initWithNameIN3gss10PropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke_3;
  v19 = &unk_1E42F3BD8;
  v10 = (id)MEMORY[0x1A1AF5730](v22);
  v20 = v10;
  v21 = *(_DWORD *)(a1 + 64);
  v11 = (void (**)(_QWORD, _QWORD))MEMORY[0x1A1AF5730](&v16);
  v12 = &stru_1E4315B30;
  if (objc_msgSend(v5, "length", v16, v17, v18, v19))
  {
    objc_msgSend(&stru_1E4315B30, "stringByAppendingString:", v5);
    v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  ((void (**)(_QWORD, __CFString *))v11)[2](v11, v12);
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v15 = *(void **)(v14 + 40);
  *(_QWORD *)(v14 + 40) = v13;

}

void sub_19F383408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

id ___ZN2md19StyleSheetExtension12initWithNameIN3gss10PropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  float v5;
  float v6;

  v3 = a2;
  (*(void (**)(float))(*(_QWORD *)(a1 + 32) + 16))(*(float *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    v5 = *(float *)(a1 + 40);
    if (v5 >= 2.6)
    {
      (*(void (**)(float))(*(_QWORD *)(a1 + 32) + 16))(2.6);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      if (v4)
        goto LABEL_9;
      v5 = *(float *)(a1 + 40);
    }
    v6 = ceilf(v5);
    if (v6 <= 0.0)
    {
LABEL_8:
      v4 = 0;
    }
    else
    {
      while (1)
      {
        (*(void (**)(float))(*(_QWORD *)(a1 + 32) + 16))(v6);
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        if (v4)
          break;
        v6 = v6 + -1.0;
        if (v6 <= 0.0)
          goto LABEL_8;
      }
    }
  }
LABEL_9:

  return v4;
}

void sub_19F383520(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id ___ZN2md19StyleSheetExtension12initWithNameIN3gss10PropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke_2(uint64_t a1, void *a2, float a3)
{
  id v5;
  unint64_t v6;
  float v7;
  void *v8;
  double v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;

  v5 = a2;
  v6 = vcvtms_u32_f32(a3);
  v7 = (float)((float)(a3 - floorf(a3)) * 10.0) + 0.5;
  if ((int)v7)
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("@%lu.%ux"), v6, (int)v7);
  else
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("@%lux"), v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = a3;
  v10 = *(uint64_t **)(a1 + 56);
  v11 = *((char *)v10 + 23);
  if (a3 <= 1.9)
  {
    if (v11 < 0)
      v10 = (uint64_t *)*v10;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s%@.%@"), v9, v10, v5, *(_QWORD *)(a1 + 32));
    v12 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (v11 < 0)
      v10 = (uint64_t *)*v10;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s%@%@.%@"), v9, v10, v5, v8, *(_QWORD *)(a1 + 32));
    v12 = objc_claimAutoreleasedReturnValue();
  }
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v12;

  objc_msgSend(*(id *)(a1 + 40), "dataForResourceWithName:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

void sub_19F38367C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *gss::StyleSheet<gss::PropertyID>::construct(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, char a5, char a6, uint64_t *a7, uint64_t *a8, float a9, char a10, _QWORD *a11)
{
  std::__shared_weak_count *v12;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  char v27;
  __int128 v28;
  void *v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  std::ios_base *v52;
  uint64_t v53;
  _QWORD *result;
  char *v55;
  _BYTE *v56;
  NSObject *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[25];
  _QWORD v63[3];
  _QWORD *v64;
  _BYTE v65[24];
  _BYTE *v66;
  uint64_t block;
  _QWORD v68[3];
  _BYTE v69[24];
  _BYTE *v70;
  __int128 __p;
  __int128 v72;
  int v73;
  _QWORD v74[21];

  v74[19] = *MEMORY[0x1E0C80C00];
  v12 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v12 || (v21 = *(_QWORD *)a1, (v22 = std::__shared_weak_count::lock(v12)) == 0))
    std::__throw_bad_weak_ptr[abi:nn180100]();
  v23 = *(std::__shared_weak_count **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v21;
  *(_QWORD *)(a1 + 24) = v22;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_BYTE *)(a1 + 80) = a6;
  v26 = (void **)(a1 + 32);
  if ((void **)(a1 + 32) != a4)
  {
    v27 = *((_BYTE *)a4 + 23);
    if (*(char *)(a1 + 55) < 0)
    {
      if (v27 >= 0)
        v29 = a4;
      else
        v29 = *a4;
      if (v27 >= 0)
        v30 = *((unsigned __int8 *)a4 + 23);
      else
        v30 = (size_t)a4[1];
      std::string::__assign_no_alias<false>(v26, v29, v30);
    }
    else if ((*((_BYTE *)a4 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v26, *a4, (size_t)a4[1]);
    }
    else
    {
      v28 = *(_OWORD *)a4;
      *(_QWORD *)(a1 + 48) = a4[2];
      *(_OWORD *)v26 = v28;
    }
  }
  *(float *)(a1 + 56) = a9;
  *(_BYTE *)(a1 + 60) = a5;
  v32 = *a7;
  v31 = a7[1];
  if (v31)
  {
    v33 = (unint64_t *)(v31 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = *(std::__shared_weak_count **)(a1 + 96);
  *(_QWORD *)(a1 + 88) = v32;
  *(_QWORD *)(a1 + 96) = v31;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = *a8;
  v39 = a8[1];
  if (v39)
  {
    v40 = (unint64_t *)(v39 + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v42 = *(std::__shared_weak_count **)(a1 + 112);
  *(_QWORD *)(a1 + 104) = v38;
  *(_QWORD *)(a1 + 112) = v39;
  if (!v42)
    goto LABEL_35;
  v43 = (unint64_t *)&v42->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    if (!a2)
      goto LABEL_41;
  }
  else
  {
LABEL_35:
    if (!a2)
    {
LABEL_41:
      v47 = MEMORY[0x1E0DE4FE0];
      v48 = MEMORY[0x1E0DE4FE0] + 64;
      v49 = (uint64_t *)MEMORY[0x1E0DE4F60];
      v50 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v51 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v74[0] = MEMORY[0x1E0DE4FE0] + 64;
      block = v50;
      *(_QWORD *)((char *)&v68[-1] + *(_QWORD *)(v50 - 24)) = v51;
      v52 = (std::ios_base *)((char *)&v68[-1] + *(_QWORD *)(block - 24));
      std::ios_base::init(v52, v68);
      v52[1].__vftable = 0;
      v52[1].__fmtflags_ = -1;
      block = v47 + 24;
      v74[0] = v48;
      std::streambuf::basic_streambuf();
      v53 = MEMORY[0x1E0DE4FB8];
      v68[0] = MEMORY[0x1E0DE4FB8] + 16;
      __p = 0u;
      v72 = 0u;
      v73 = 16;
      gss::StyleSheet<gss::PropertyID>::didFinishDecodingGlobalProperties(a1, 0);
      gss::StyleSheet<gss::PropertyID>::didFinishDecodingEverything(a1, 0, (uint64_t)a11, (uint64_t)&block);
      block = *v49;
      *(_QWORD *)((char *)&v68[-1] + *(_QWORD *)(block - 24)) = v49[3];
      v68[0] = v53 + 16;
      if (SBYTE7(v72) < 0)
        operator delete((void *)__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1A1AF4D64](v74);
    }
  }
  if (!a3)
    goto LABEL_41;
  *(_QWORD *)v62 = a1;
  *(_QWORD *)&v62[8] = a2;
  *(_QWORD *)&v62[16] = a3;
  v62[24] = a10;
  v45 = v63;
  v46 = (_QWORD *)a11[3];
  if (v46)
  {
    if (v46 == a11)
    {
      v64 = v63;
      (*(void (**)(_QWORD *, _QWORD *))(*a11 + 24))(a11, v63);
    }
    else
    {
      v64 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v46 + 16))(v46);
    }
  }
  else
  {
    v64 = 0;
  }
  v66 = 0;
  v55 = (char *)operator new(0x48uLL);
  v56 = v55;
  *(_QWORD *)v55 = &off_1E42D81F8;
  *(_OWORD *)(v55 + 8) = *(_OWORD *)v62;
  *(_OWORD *)(v55 + 17) = *(_OWORD *)&v62[9];
  if (v64)
  {
    if (v64 == v63)
    {
      *((_QWORD *)v55 + 8) = v55 + 40;
      (*(void (**)(_QWORD *))(v63[0] + 24))(v63);
    }
    else
    {
      *((_QWORD *)v55 + 8) = v64;
      v64 = 0;
    }
  }
  else
  {
    *((_QWORD *)v55 + 8) = 0;
  }
  v66 = v56;
  if (gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::onceToken != -1)
    dispatch_once(&gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::onceToken, &__block_literal_global_106);
  v57 = (id)gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue;
  block = MEMORY[0x1E0C809B0];
  v68[0] = 3321888768;
  v68[1] = ___ZN3gss10StyleSheetINS_10PropertyIDEE13dispatch_loadEbNSt3__18functionIFvvEEE_block_invoke;
  v68[2] = &__block_descriptor_64_ea8_32c27_ZTSNSt3__18functionIFvvEEE_e5_v8__0l;
  v70 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v56 + 16))(v56);
  dispatch_async(v57, &block);

  v58 = v70;
  if (v70 == v69)
  {
    v59 = 4;
    v58 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_58;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_58:
  result = v66;
  if (v66 == v65)
  {
    v60 = 4;
    result = v65;
    goto LABEL_62;
  }
  if (v66)
  {
    v60 = 5;
LABEL_62:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v60))();
  }
  if (v64 == v63)
  {
    v61 = 4;
  }
  else
  {
    if (!v64)
      return result;
    v61 = 5;
    v45 = v64;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v45 + 8 * v61))(v45);
}

void sub_19F383B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  _QWORD *v21;
  void *v22;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v24 = a21;
  if (a21 == &a18)
  {
    v25 = 4;
    v24 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  if (a17 == v21)
  {
    v26 = 4;
  }
  else
  {
    if (!a17)
      _Unwind_Resume(a1);
    v26 = 5;
    v21 = a17;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v26))(v21);
  _Unwind_Resume(a1);
}

void sub_19F383C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::ScreenLabelFeatureSupport::setScreenLabelFeatures(uint64_t a1, void *a2)
{
  unint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void **v9;
  void *v10;
  void **v11;
  void **v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  void **v19;
  char *v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  void **v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  void *v29;
  void **v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  id *v34;
  void **v35;
  void **v36;
  uint64_t v37;
  void **v38;
  void *v39;
  void **v40;
  void *v41;
  void **v42;
  void *v43;
  void *v44;
  void **v45;
  void *v46;
  uint64_t v47;
  id *v48;
  id *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  id *v60;
  void **v61;
  char *v62;
  void *v63;
  void *v64;
  void **v65;
  void *v66;
  void *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  id obj;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  void *__p;
  void **v77;
  unint64_t v78;
  _BYTE v79[128];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  __p = 0;
  v77 = 0;
  v78 = 0;
  v68 = a2;
  v3 = objc_msgSend(v68, "count");
  v4 = v3;
  if (v3)
  {
    if (v3 >> 61)
      goto LABEL_103;
    v5 = (char *)operator new(8 * v3);
    __p = &v5[(unint64_t)v77 & 0xFFFFFFFFFFFFFFF8];
    v77 = (void **)__p;
    v78 = (unint64_t)&v5[8 * v4];
  }
  v69 = a1;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  obj = v68;
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v72, v79, 16);
  if (!v6)
    goto LABEL_40;
  v7 = *(_QWORD *)v73;
  v70 = *(_QWORD *)v73;
  do
  {
    for (i = 0; i != v6; ++i)
    {
      if (*(_QWORD *)v73 != v7)
        objc_enumerationMutation(obj);
      v10 = *(void **)(*((_QWORD *)&v72 + 1) + 8 * i);
      v11 = v77;
      if ((unint64_t)v77 < v78)
      {
        *v11 = v10;
        v9 = v11 + 1;
        goto LABEL_8;
      }
      v12 = (void **)__p;
      v13 = (char *)v77 - (_BYTE *)__p;
      v14 = ((char *)v77 - (_BYTE *)__p) >> 3;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 61)
        abort();
      v16 = v78 - (_QWORD)__p;
      if ((uint64_t)(v78 - (_QWORD)__p) >> 2 > v15)
        v15 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v18 = (char *)operator new(8 * v17);
      }
      else
      {
        v18 = 0;
      }
      v19 = (void **)&v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v10;
      v9 = v19 + 1;
      v21 = (char *)v11 - (char *)v12;
      if (v11 == v12)
      {
        __p = &v18[8 * v14];
        v77 = v19 + 1;
        v78 = (unint64_t)v20;
        v7 = v70;
        goto LABEL_35;
      }
      v22 = v21 - 8;
      if ((unint64_t)(v21 - 8) <= 0x77
        || &v11[-(v22 >> 3) - 1] < v19 && &v18[v13 - (v22 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v11)
      {
        goto LABEL_106;
      }
      v23 = (v22 >> 3) + 1;
      v24 = &v18[8 * v14 - 16];
      v25 = v11 - 4;
      v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v28 = *(_OWORD *)v25;
        v27 = *((_OWORD *)v25 + 1);
        *(_OWORD *)v25 = 0uLL;
        *((_OWORD *)v25 + 1) = 0uLL;
        v25 -= 4;
        *((_OWORD *)v24 - 1) = v28;
        *(_OWORD *)v24 = v27;
        v24 -= 32;
        v26 -= 4;
      }
      while (v26);
      v19 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
      v11 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_106:
        do
        {
          v29 = *--v11;
          *v11 = 0;
          *--v19 = v29;
        }
        while (v11 != v12);
      }
      v11 = (void **)__p;
      v30 = v77;
      __p = v19;
      v77 = v9;
      v78 = (unint64_t)v20;
      if (v30 != v11)
      {
        v7 = v70;
        do
        {
          v31 = *--v30;

        }
        while (v30 != v11);
LABEL_35:
        if (!v11)
          goto LABEL_8;
LABEL_36:
        operator delete(v11);
        goto LABEL_8;
      }
      v7 = v70;
      if (v11)
        goto LABEL_36;
LABEL_8:
      v77 = v9;
    }
    v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v72, v79, 16);
  }
  while (v6);
LABEL_40:

  v32 = 126 - 2 * __clz(((char *)v77 - (_BYTE *)__p) >> 3);
  if (v77 == __p)
    v33 = 0;
  else
    v33 = v32;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,VKScreenLabelFeature * {__strong}*,false>((void **)__p, v77, v33, 1);
  v34 = (id *)__p;
  v35 = v77;
  v36 = (void **)__p;
  v37 = v69;
  if (__p == v77)
  {
LABEL_53:
    v35 = v36;
  }
  else
  {
    v38 = (void **)((char *)__p + 8);
    do
    {
      if (v38 == v77)
      {
        v36 = v77;
        goto LABEL_53;
      }
      v40 = v38 - 1;
      v39 = *(v38 - 1);
      v41 = *v38++;
    }
    while (v39 != v41);
    v42 = v40 + 2;
    if (v40 + 2 != v77)
    {
      do
      {
        v43 = *v42;
        if (*v40 != *v42)
        {
          *v42 = 0;
          v44 = v40[1];
          *++v40 = v43;

        }
        ++v42;
      }
      while (v42 != v35);
      v34 = (id *)__p;
      v35 = v77;
      v37 = v69;
    }
    v45 = v40 + 1;
    if (v45 != v35)
    {
      while (v35 != v45)
      {
        v46 = *--v35;

      }
      v77 = v45;
      v34 = (id *)__p;
      v35 = v45;
      v37 = v69;
    }
  }
  v48 = *(id **)(v37 + 40);
  v49 = *(id **)(v37 + 48);
  v47 = v37 + 40;
  v50 = (char *)v35 - (char *)v34;
  v51 = (char *)v49 - (char *)v48;
  if ((char *)v35 - (char *)v34 != (char *)v49 - (char *)v48
    || memcmp(v34, *(const void **)(v37 + 40), (char *)v35 - (char *)v34))
  {
    if ((void **)v47 != &__p)
    {
      v52 = v50 >> 3;
      v53 = *(_QWORD *)(v37 + 56);
      if (v50 >> 3 > (unint64_t)((v53 - (uint64_t)v48) >> 3))
      {
        if (v48)
        {
          if (v49 != v48)
          {
            do
            {
              v54 = *--v49;

            }
            while (v49 != v48);
            v49 = *(id **)v47;
            v37 = v69;
          }
          *(_QWORD *)(v37 + 48) = v48;
          operator delete(v49);
          v53 = 0;
          *(_QWORD *)v47 = 0;
          *(_QWORD *)(v47 + 8) = 0;
          *(_QWORD *)(v47 + 16) = 0;
        }
        if ((v50 & 0x8000000000000000) == 0)
        {
          v55 = v53 >> 2;
          if (v53 >> 2 <= v52)
            v55 = v50 >> 3;
          v56 = (unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v55;
          if (!(v56 >> 61))
          {
            v48 = (id *)operator new(8 * v56);
            *(_QWORD *)(v37 + 40) = v48;
            *(_QWORD *)(v37 + 48) = v48;
            for (*(_QWORD *)(v37 + 56) = &v48[v56]; v34 != v35; ++v48)
            {
              v57 = *v34++;
              *v48 = v57;
            }
            goto LABEL_93;
          }
        }
LABEL_103:
        abort();
      }
      v58 = v51 >> 3;
      if (v51 >> 3 >= v52)
      {
        if (v34 != v35)
        {
          do
            objc_storeStrong(v48++, *v34++);
          while (v34 != v35);
          v37 = v69;
          v49 = *(id **)(v69 + 48);
        }
        if (v49 != v48)
        {
          do
          {
            v64 = *--v49;

          }
          while (v49 != v48);
          v37 = v69;
        }
      }
      else
      {
        if (v49 != v48)
        {
          v59 = 8 * v58;
          v60 = v34;
          do
          {
            objc_storeStrong(v48++, *v60++);
            v59 -= 8;
          }
          while (v59);
          v37 = v69;
          v48 = *(id **)(v69 + 48);
          v49 = v48;
        }
        v61 = &v34[v58];
        v62 = (char *)v48;
        if (v61 != v35)
        {
          v62 = (char *)v49;
          do
          {
            v63 = *v61++;
            *(_QWORD *)v62 = v63;
            v62 += 8;
          }
          while (v61 != v35);
        }
        v48 = (id *)((char *)v49 + v62 - (char *)v48);
      }
LABEL_93:
      *(_QWORD *)(v37 + 48) = v48;
      v34 = (id *)__p;
    }
    *(_BYTE *)(v37 + 88) = 1;
  }
  if (v34)
  {
    v65 = v77;
    v66 = v34;
    if (v77 != v34)
    {
      do
      {
        v67 = *--v65;

      }
      while (v65 != v34);
      v66 = __p;
    }
    v77 = v34;
    operator delete(v66);
  }

}

void sub_19F384340(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  std::vector<VKTransitLineMarker * {__strong}>::~vector[abi:nn180100]((void **)va);

  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,VKScreenLabelFeature * {__strong}*,false>(void **a1, void **a2, uint64_t a3, char a4)
{
  void **v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  uint64_t v13;
  void **v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void **v20;
  void **v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  BOOL v36;
  BOOL v37;
  void *v38;
  void **v39;
  void **v40;
  unint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  unint64_t v47;
  void **v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void **v56;
  BOOL v58;
  uint64_t v59;
  void **v60;
  void **v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  _QWORD *v66;
  void *v67;
  int64_t v68;
  int64_t v69;
  void *v70;
  int64_t v71;
  uint64_t v72;
  void **v73;
  void *v74;
  void **v75;
  void *v76;
  void *v77;
  void **v78;
  void *v79;
  uint64_t v80;
  void *v81;
  uint64_t v83;
  void *v84;
  void **v85;
  void *v86;
  void **v87;
  void *v88;
  void **v89;
  void *v90;
  void *v91;
  void *v92;
  uint64_t v93;
  unint64_t v94;
  void **v95;
  void *v96;
  void *v97;
  void **v98;
  void *v99;
  void *v100;
  void *v101;
  void **v102;
  void **v103;
  void *v104;
  void *v105;
  void **v106;

_QWORD *md::HikingRenderLayer::layout(md::HikingRenderLayer *this, const md::LayoutContext *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int8x8_t v17;
  uint8x8_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v42;
  char *v43;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  char *v49;
  char *v50;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned __int8 *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v70;
  char *v71;
  char *v73;
  char *v74;
  _QWORD *v76;
  int8x8_t v77;
  uint8x8_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  void *v88;
  int v89;
  uint64_t v90;
  BOOL v91;
  float v92;
  _QWORD *v93;
  int8x8_t v94;
  uint8x8_t v95;
  unint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  __n128 v116;
  uint64_t (***v117)();
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  __n128 v123;
  uint64_t (***v124)();
  uint64_t v125;
  BOOL v126;
  const QuadTile *v127;
  char v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  unint64_t *p_shared_owners;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  uint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  md::TrailJunctionsResource *v143;
  uint64_t v144;
  uint64_t v145;
  BOOL v146;
  uint64_t (***v147)();
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  _QWORD *result;
  uint64_t v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  _BYTE v168[56];
  __int16 v169;
  int v170;
  int v171;
  uint64_t v172;
  int v173;
  int v174;
  __int16 v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t (**v179)();
  uint64_t v180;
  std::__shared_weak_count *v181;
  uint64_t (***v182)();
  char v183;
  char v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  __int16 v189;
  char v190;
  int v191;
  char v192;
  _QWORD v193[3];
  _QWORD *v194;
  _QWORD v195[3];
  _QWORD *v196;
  _QWORD v197[3];
  _QWORD *v198;
  uint64_t (**v199)();
  uint64_t *v200;
  uint64_t *v201;
  uint64_t (***v202)();
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v195[0] = &off_1E42CE4B0;
  v195[1] = a2;
  v196 = v195;
  v193[0] = &off_1E42CE4F8;
  v193[1] = a2;
  v194 = v193;
  v198 = v197;
  v197[0] = &off_1E42CE4F8;
  v197[1] = a2;
  std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v195);
  v4 = v194;
  if (v194 == v193)
  {
    v5 = 4;
    v4 = v193;
  }
  else
  {
    if (!v194)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v196;
  if (v196 == v195)
  {
    v7 = 4;
    v6 = v195;
    goto LABEL_10;
  }
  if (v196)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = (_QWORD *)*((_QWORD *)a2 + 1);
  v9 = v8[1];
  if ((v9 & (v9 - 1)) != 0)
  {
    v11 = 0xC97B9E962ADF4AD4;
    if (v9 <= 0xC97B9E962ADF4AD4)
      v11 = 0xC97B9E962ADF4AD4 % v9;
    v10 = *(_QWORD **)(*v8 + 8 * v11);
    do
    {
      do
        v10 = (_QWORD *)*v10;
      while (v10[1] != 0xC97B9E962ADF4AD4);
    }
    while (v10[2] != 0xC97B9E962ADF4AD4);
  }
  else
  {
    v10 = *(_QWORD **)(*v8 + 8 * ((v9 - 1) & 0xC97B9E962ADF4AD4));
    do
    {
      do
        v10 = (_QWORD *)*v10;
      while (v10[1] != 0xC97B9E962ADF4AD4);
    }
    while (v10[2] != 0xC97B9E962ADF4AD4);
  }
  v12 = *(uint64_t **)(v10[5] + 32);
  v13 = *v12;
  v14 = v12[1];
  if (v13 != v14)
  {
    while (*(_BYTE *)v13 != 34)
    {
      v13 += 16;
      if (v13 == v14)
        goto LABEL_27;
    }
  }
  if (v13 == v14)
LABEL_27:
    v167 = 0;
  else
    v167 = *(_QWORD *)(v13 + 8);
  v15 = *((_QWORD *)this + 44);
  *(_QWORD *)(v15 + 112) = 0;
  *(_QWORD *)(v15 + 120) = 0;
  v16 = (_QWORD *)*((_QWORD *)a2 + 1);
  v17 = (int8x8_t)v16[1];
  if (!*(_QWORD *)&v17)
    goto LABEL_51;
  v18 = (uint8x8_t)vcnt_s8(v17);
  v18.i16[0] = vaddlv_u8(v18);
  if (v18.u32[0] > 1uLL)
  {
    v19 = 0x92F3DC114CADB853;
    if (*(_QWORD *)&v17 <= 0x92F3DC114CADB853)
      v19 = 0x92F3DC114CADB853 % *(_QWORD *)&v17;
  }
  else
  {
    v19 = (*(_QWORD *)&v17 - 1) & 0x92F3DC114CADB853;
  }
  v20 = *(_QWORD **)(*v16 + 8 * v19);
  if (!v20)
    goto LABEL_51;
  v21 = (_QWORD *)*v20;
  if (!v21)
    goto LABEL_51;
  if (v18.u32[0] < 2uLL)
  {
    v22 = *(_QWORD *)&v17 - 1;
    while (1)
    {
      v24 = v21[1];
      if (v24 == 0x92F3DC114CADB853)
      {
        if (v21[2] == 0x92F3DC114CADB853)
          goto LABEL_49;
      }
      else if ((v24 & v22) != v19)
      {
        goto LABEL_51;
      }
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_51;
    }
  }
  while (1)
  {
    v23 = v21[1];
    if (v23 == 0x92F3DC114CADB853)
      break;
    if (v23 >= *(_QWORD *)&v17)
      v23 %= *(_QWORD *)&v17;
    if (v23 != v19)
      goto LABEL_51;
LABEL_38:
    v21 = (_QWORD *)*v21;
    if (!v21)
      goto LABEL_51;
  }
  if (v21[2] != 0x92F3DC114CADB853)
    goto LABEL_38;
LABEL_49:
  v25 = v21[5];
  if (*(_QWORD *)(v25 + 8) == 0x92F3DC114CADB853)
  {
    v26 = *(_QWORD *)(v25 + 32);
    goto LABEL_52;
  }
LABEL_51:
  v26 = 0;
LABEL_52:
  v178 = 0;
  v27 = (unsigned __int8 *)*((_QWORD *)this + 61);
  v28 = *v27;
  v29 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8);
  v30 = v29[3];
  v31 = v29[4];
  v32 = v31 - v30;
  if (v31 == v30)
  {
LABEL_59:
    v38 = 0;
  }
  else
  {
    v33 = 0;
    v34 = v32 >> 3;
    while (1)
    {
      v35 = *(unsigned __int8 **)(v30 + 8 * v33);
      if (*v35 == v28)
      {
        v36 = *((_QWORD *)v35 + 1);
        v37 = v29[15];
        if (v36 < (v29[16] - v37) >> 3)
          break;
      }
      if (++v33 >= v34)
        goto LABEL_59;
    }
    v38 = *(_QWORD *)(v37 + 8 * v36);
    if (v38)
      v38 = *(_QWORD *)(*(_QWORD *)(v38 + 24) + 8 * v27[1]);
  }
  v178 = v38;
  v39 = (char *)*((_QWORD *)this + 46);
  v40 = (char *)*((_QWORD *)this + 47);
  if (v39 != v40)
  {
    while (v28 != *v39 || v27[1] != v39[1])
    {
      v39 += 8;
      if (v39 == v40)
        goto LABEL_68;
    }
  }
  if (v39 == v40)
  {
LABEL_68:
    LOWORD(v179) = *(_WORD *)v27;
    HIDWORD(v179) = 0;
    v39 = geo::linear_map<md::CommandBufferLocation,int,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,int>>,std::vector<std::pair<md::CommandBufferLocation,int>>>::insert((uint64_t)this + 368, (unsigned __int8 *)&v179);
    v27 = (unsigned __int8 *)*((_QWORD *)this + 61);
  }
  v166 = *((_DWORD *)v39 + 1);
  v42 = (char *)*((_QWORD *)this + 49);
  v43 = (char *)*((_QWORD *)this + 50);
  if (v42 != v43)
  {
    while (*v27 != *v42 || v27[1] != v42[1])
    {
      v42 += 8;
      if (v42 == v43)
        goto LABEL_77;
    }
  }
  if (v42 == v43)
  {
LABEL_77:
    LOWORD(v179) = *(_WORD *)v27;
    HIDWORD(v179) = 0;
    v42 = geo::linear_map<md::CommandBufferLocation,int,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,int>>,std::vector<std::pair<md::CommandBufferLocation,int>>>::insert((uint64_t)this + 392, (unsigned __int8 *)&v179);
  }
  v45 = *((_DWORD *)v42 + 1);
  v46 = v178;
  v47 = *(_QWORD *)(v178 + 72);
  if (*(_QWORD *)(v178 + 80) != v47)
    *(_QWORD *)(v178 + 80) = v47;
  v48 = (unsigned __int8 *)*((_QWORD *)this + 61);
  v49 = (char *)*((_QWORD *)this + 52);
  v50 = (char *)*((_QWORD *)this + 53);
  if (v49 != v50)
  {
    while (*v48 != *v49 || v48[1] != v49[1])
    {
      v49 += 16;
      if (v49 == v50)
        goto LABEL_88;
    }
  }
  v52 = v46;
  if (v49 == v50)
  {
LABEL_88:
    LOWORD(v179) = *(_WORD *)v48;
    v180 = 0;
    v49 = geo::linear_map<md::CommandBufferLocation,ggl::ClearItem *,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,ggl::ClearItem *>>,std::vector<std::pair<md::CommandBufferLocation,ggl::ClearItem *>>>::insert((uint64_t)this + 416, (unsigned __int8 *)&v179);
    v52 = v178;
  }
  *(_QWORD *)(v46 + 32) = *((_QWORD *)v49 + 1);
  LOBYTE(v179) = 0;
  md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::layoutStencilTiles((uint64_t)this, a2, v52, v166, &v179);
  v177 = 0;
  v53 = *((_QWORD *)this + 61);
  if ((unint64_t)(*((_QWORD *)this + 62) - v53) < 3)
  {
    v164 = 0;
    LOBYTE(v165) = 0;
  }
  else
  {
    v54 = *(unsigned __int8 *)(v53 + 2);
    v55 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8);
    v56 = v55[3];
    v57 = v55[4];
    v58 = v57 - v56;
    if (v57 == v56)
      goto LABEL_98;
    v59 = 0;
    v60 = v58 >> 3;
    while (1)
    {
      v61 = *(unsigned __int8 **)(v56 + 8 * v59);
      if (*v61 == v54)
      {
        v62 = *((_QWORD *)v61 + 1);
        v63 = v55[15];
        if (v62 < (v55[16] - v63) >> 3)
          break;
      }
      if (++v59 >= v60)
        goto LABEL_98;
    }
    v64 = *(_QWORD *)(v63 + 8 * v62);
    if (!v64)
LABEL_98:
      v65 = 0;
    else
      v65 = *(_QWORD **)(*(_QWORD *)(v64 + 24) + 8 * *(unsigned __int8 *)(v53 + 3));
    v177 = v65;
    v66 = v65[9];
    if (v65[10] != v66)
      v65[10] = v66;
    v67 = (char *)*((_QWORD *)this + 52);
    v68 = (char *)*((_QWORD *)this + 53);
    if (v67 != v68)
    {
      while (v54 != *v67 || *(unsigned __int8 *)(v53 + 3) != v67[1])
      {
        v67 += 16;
        if (v67 == v68)
          goto LABEL_109;
      }
    }
    if (v67 == v68)
    {
LABEL_109:
      LOWORD(v179) = *(_WORD *)(v53 + 2);
      v180 = 0;
      v67 = geo::linear_map<md::CommandBufferLocation,ggl::ClearItem *,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,ggl::ClearItem *>>,std::vector<std::pair<md::CommandBufferLocation,ggl::ClearItem *>>>::insert((uint64_t)this + 416, (unsigned __int8 *)&v179);
      v53 = *((_QWORD *)this + 61);
    }
    v65[4] = *((_QWORD *)v67 + 1);
    v70 = (char *)*((_QWORD *)this + 46);
    v71 = (char *)*((_QWORD *)this + 47);
    if (v70 != v71)
    {
      while (*(unsigned __int8 *)(v53 + 2) != *v70
           || *(unsigned __int8 *)(v53 + 3) != v70[1])
      {
        v70 += 8;
        if (v70 == v71)
          goto LABEL_118;
      }
    }
    if (v70 == v71)
    {
LABEL_118:
      LOWORD(v179) = *(_WORD *)(v53 + 2);
      HIDWORD(v179) = 0;
      v70 = geo::linear_map<md::CommandBufferLocation,int,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,int>>,std::vector<std::pair<md::CommandBufferLocation,int>>>::insert((uint64_t)this + 368, (unsigned __int8 *)&v179);
      v53 = *((_QWORD *)this + 61);
    }
    v164 = *((_DWORD *)v70 + 1);
    v73 = (char *)*((_QWORD *)this + 49);
    v74 = (char *)*((_QWORD *)this + 50);
    if (v73 != v74)
    {
      while (*(unsigned __int8 *)(v53 + 2) != *v73
           || *(unsigned __int8 *)(v53 + 3) != v73[1])
      {
        v73 += 8;
        if (v73 == v74)
          goto LABEL_127;
      }
    }
    if (v73 == v74)
    {
LABEL_127:
      LOWORD(v179) = *(_WORD *)(v53 + 2);
      HIDWORD(v179) = 0;
      v73 = geo::linear_map<md::CommandBufferLocation,int,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,int>>,std::vector<std::pair<md::CommandBufferLocation,int>>>::insert((uint64_t)this + 392, (unsigned __int8 *)&v179);
    }
    v165 = *((_DWORD *)v73 + 1);
  }
  v76 = (_QWORD *)*((_QWORD *)a2 + 1);
  v77 = (int8x8_t)v76[1];
  if (!*(_QWORD *)&v77)
    goto LABEL_153;
  v78 = (uint8x8_t)vcnt_s8(v77);
  v78.i16[0] = vaddlv_u8(v78);
  if (v78.u32[0] > 1uLL)
  {
    v79 = 0x401D4CCE847AB1D1;
    if (*(_QWORD *)&v77 <= 0x401D4CCE847AB1D1uLL)
      v79 = 0x401D4CCE847AB1D1uLL % *(_QWORD *)&v77;
  }
  else
  {
    v79 = (*(_QWORD *)&v77 - 1) & 0x401D4CCE847AB1D1;
  }
  v80 = *(_QWORD **)(*v76 + 8 * v79);
  if (!v80)
    goto LABEL_153;
  v81 = (_QWORD *)*v80;
  if (!v81)
    goto LABEL_153;
  if (v78.u32[0] < 2uLL)
  {
    v82 = *(_QWORD *)&v77 - 1;
    while (1)
    {
      v84 = v81[1];
      if (v84 == 0x401D4CCE847AB1D1)
      {
        if (v81[2] == 0x401D4CCE847AB1D1)
          goto LABEL_150;
      }
      else if ((v84 & v82) != v79)
      {
        goto LABEL_153;
      }
      v81 = (_QWORD *)*v81;
      if (!v81)
        goto LABEL_153;
    }
  }
  while (2)
  {
    v83 = v81[1];
    if (v83 != 0x401D4CCE847AB1D1)
    {
      if (v83 >= *(_QWORD *)&v77)
        v83 %= *(_QWORD *)&v77;
      if (v83 != v79)
        goto LABEL_153;
      goto LABEL_139;
    }
    if (v81[2] != 0x401D4CCE847AB1D1)
    {
LABEL_139:
      v81 = (_QWORD *)*v81;
      if (!v81)
        goto LABEL_153;
      continue;
    }
    break;
  }
LABEL_150:
  v85 = v81[5];
  if (*(_QWORD *)(v85 + 8) == 0x401D4CCE847AB1D1)
  {
    v86 = *(_QWORD *)(v85 + 32);
    if (v86)
    {
      v87 = *(_BYTE *)(v86 + 4) != 0;
      goto LABEL_154;
    }
  }
LABEL_153:
  v87 = 0;
LABEL_154:
  md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)v168, a2);
  v173 = 0x10000;
  v174 = 1065353216;
  v175 = 0;
  v176 = 0;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v88, "ribbonCrispness");
  v170 = v89;

  v90 = *((_QWORD *)this + 55);
  v171 = *(_DWORD *)(*(_QWORD *)(v90 + 120) + 8);
  v176 = v90;
  if (*((_DWORD *)this + 91))
    v91 = 0;
  else
    v91 = v87;
  HIBYTE(v175) = v91;
  v92 = 1.0;
  if (*((_BYTE *)this + 34) == 17)
    v92 = *(float *)(v26 + 4);
  v174 = LODWORD(v92);
  LOBYTE(v175) = 1;
  v93 = (_QWORD *)*((_QWORD *)a2 + 1);
  v94 = (int8x8_t)v93[1];
  if (v94)
  {
    v95 = (uint8x8_t)vcnt_s8(v94);
    v95.i16[0] = vaddlv_u8(v95);
    if (v95.u32[0] > 1uLL)
    {
      v96 = 0xA60DDA5A69582425;
      if (*(_QWORD *)&v94 <= 0xA60DDA5A69582425)
        v96 = 0xA60DDA5A69582425 % *(_QWORD *)&v94;
    }
    else
    {
      v96 = (*(_QWORD *)&v94 - 1) & 0xA60DDA5A69582425;
    }
    v97 = *(_QWORD **)(*v93 + 8 * v96);
    if (v97)
    {
      v98 = (_QWORD *)*v97;
      if (v98)
      {
        if (v95.u32[0] < 2uLL)
        {
          v99 = *(_QWORD *)&v94 - 1;
          while (1)
          {
            v101 = v98[1];
            if (v101 == 0xA60DDA5A69582425)
            {
              if (v98[2] == 0xA60DDA5A69582425)
                goto LABEL_180;
            }
            else if ((v101 & v99) != v96)
            {
              goto LABEL_183;
            }
            v98 = (_QWORD *)*v98;
            if (!v98)
              goto LABEL_183;
          }
        }
        do
        {
          v100 = v98[1];
          if (v100 == 0xA60DDA5A69582425)
          {
            if (v98[2] == 0xA60DDA5A69582425)
            {
LABEL_180:
              v102 = v98[5];
              if (*(_QWORD *)(v102 + 8) == 0xA60DDA5A69582425 && *(_QWORD *)(v102 + 32))
                v172 = 0;
              break;
            }
          }
          else
          {
            if (v100 >= *(_QWORD *)&v94)
              v100 %= *(_QWORD *)&v94;
            if (v100 != v96)
              break;
          }
          v98 = (_QWORD *)*v98;
        }
        while (v98);
      }
    }
  }
LABEL_183:
  v103 = (uint64_t *)*((_QWORD *)this + 60);
  v104 = *v103;
  v105 = v103[1];
  if (*v103 != v105)
  {
    do
    {
      md::RoadStyle::layout(*(unint64_t **)(v104 + 32), (uint64_t)v168);
      v104 += 48;
    }
    while (v104 != v105);
  }
  v107 = (uint64_t *)*((_QWORD *)this + 34);
  v106 = (uint64_t *)*((_QWORD *)this + 35);
  if (v107 != v106)
  {
    v108 = 0;
    while (1)
    {
      v109 = *v107;
      v110 = *(_QWORD *)(*v107 + 384);
      HIBYTE(v173) = 0;
      LOBYTE(v169) = *((_BYTE *)this + 360);
      v111 = v45;
      if ((_BYTE)v169)
        v111 = v166 + *(_BYTE *)(v110 + 169);
      HIBYTE(v169) = v111;
      md::RoadTileData::updateWithContext(v110, a2, *(char *)(v109 + 48), (uint64_t *)(v109 + 232));
      v112 = *(_QWORD *)(v110 + 720);
      if (v112)
      {
        v113 = *(_QWORD *)(v112 + 200);
        v114 = *((_QWORD *)this + 55);
        if (v113)
          v115 = v113 == v114;
        else
          v115 = 0;
        if (!v115)
          md::RoadLayer::setSharedResources(*(_QWORD **)(v110 + 720), v114);
        md::RoadLayer::layout(v112, (uint64_t)v168);
        v179 = &off_1E42D43C0;
        v180 = v178;
        v182 = &v179;
        md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(*(_QWORD **)(v112 + 8), *(_QWORD **)(v112 + 16), &v179, v116);
        v117 = v182;
        if (v182 == &v179)
        {
          v117 = &v179;
          v118 = 4;
        }
        else
        {
          if (!v182)
            goto LABEL_202;
          v118 = 5;
        }
        (*v117)[v118]();
      }
LABEL_202:
      v119 = *(_QWORD *)(v110 + 728);
      if (!v119)
        goto LABEL_213;
      md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)&v179, a2);
      v189 = 0;
      v190 = 0;
      LOWORD(v187) = v169;
      v192 = v175;
      v191 = v174;
      v120 = *(_QWORD *)(v119 + 192);
      v121 = *((_QWORD *)this + 59);
      if (v120)
        v122 = v120 == v121;
      else
        v122 = 0;
      if (!v122)
        *(_QWORD *)(v119 + 192) = v121;
      md::PatternedLayer::layout(v119, (uint64_t)&v179);
      v199 = &off_1E42D4408;
      v200 = (uint64_t *)v178;
      v202 = &v199;
      md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(*(_QWORD **)(v119 + 8), *(_QWORD **)(v119 + 16), &v199, v123);
      v124 = v202;
      if (v202 == &v199)
      {
        v124 = &v199;
        v125 = 4;
      }
      else
      {
        if (!v202)
          goto LABEL_213;
        v125 = 5;
      }
      (*v124)[v125]();
LABEL_213:
      if (*(_QWORD *)(v109 + 400))
        v126 = v167 == 0;
      else
        v126 = 1;
      if (!v126)
      {
        md::JunctionLayoutContext::JunctionLayoutContext((md::JunctionLayoutContext *)&v179, a2);
        v183 = v169;
        v128 = v165;
        if ((_BYTE)v169)
          v128 = v164 + *(_BYTE *)(v110 + 169);
        v184 = v128;
        v130 = *(_QWORD *)(v109 + 232);
        v129 = *(std::__shared_weak_count **)(v109 + 240);
        if (v129)
        {
          p_shared_owners = (unint64_t *)&v129->__shared_owners_;
          do
            v132 = __ldxr(p_shared_owners);
          while (__stxr(v132 + 1, p_shared_owners));
        }
        v133 = v188;
        v187 = v130;
        v188 = v129;
        if (!v133)
          goto LABEL_226;
        v134 = (unint64_t *)&v133->__shared_owners_;
        do
          v135 = __ldaxr(v134);
        while (__stlxr(v135 - 1, v134));
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
          v137 = *(_QWORD *)(v109 + 216);
          v136 = *(std::__shared_weak_count **)(v109 + 224);
          if (v136)
            goto LABEL_227;
        }
        else
        {
LABEL_226:
          v137 = *(_QWORD *)(v109 + 216);
          v136 = *(std::__shared_weak_count **)(v109 + 224);
          if (v136)
          {
LABEL_227:
            v138 = (unint64_t *)&v136->__shared_owners_;
            do
              v139 = __ldxr(v138);
            while (__stxr(v139 + 1, v138));
          }
        }
        v140 = v186;
        v185 = v137;
        v186 = v136;
        if (v140)
        {
          v141 = (unint64_t *)&v140->__shared_owners_;
          do
            v142 = __ldaxr(v141);
          while (__stlxr(v142 - 1, v141));
          if (!v142)
          {
            ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
            std::__shared_weak_count::__release_weak(v140);
          }
        }
        v143 = *(md::TrailJunctionsResource **)(v109 + 400);
        v144 = *((_QWORD *)v143 + 14);
        v145 = *((_QWORD *)this + 64);
        if (v144)
          v146 = v144 == v145;
        else
          v146 = 0;
        if (!v146)
          *((_QWORD *)v143 + 14) = v145;
        md::TrailJunctionsResource::updateWithContext(v143, (const md::JunctionLayoutContext *)&v179, v127);
        v199 = &off_1E42CE540;
        v200 = &v178;
        v201 = (uint64_t *)&v177;
        v202 = &v199;
        md::TrailJunctionsResource::collectRenderItems((uint64_t)v143, (uint64_t)&v199);
        v147 = v202;
        if (v202 == &v199)
        {
          v147 = &v199;
          v148 = 4;
LABEL_243:
          (*v147)[v148]();
        }
        else if (v202)
        {
          v148 = 5;
          goto LABEL_243;
        }
        v149 = v188;
        if (!v188)
          goto LABEL_248;
        v150 = (unint64_t *)&v188->__shared_owners_;
        do
          v151 = __ldaxr(v150);
        while (__stlxr(v151 - 1, v150));
        if (!v151)
        {
          ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
          std::__shared_weak_count::__release_weak(v149);
          v152 = v186;
          if (v186)
          {
LABEL_249:
            v153 = (unint64_t *)&v152->__shared_owners_;
            do
              v154 = __ldaxr(v153);
            while (__stlxr(v154 - 1, v153));
            if (!v154)
            {
              ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
              std::__shared_weak_count::__release_weak(v152);
            }
          }
        }
        else
        {
LABEL_248:
          v152 = v186;
          if (v186)
            goto LABEL_249;
        }
        v155 = v181;
        if (v181)
        {
          v156 = (unint64_t *)&v181->__shared_owners_;
          do
            v157 = __ldaxr(v156);
          while (__stlxr(v157 - 1, v156));
          if (!v157)
          {
            ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
            std::__shared_weak_count::__release_weak(v155);
          }
        }
        v108 = 1;
      }
      if (++v107 == v106)
        goto LABEL_262;
    }
  }
  v108 = 0;
LABEL_262:
  v158 = *(_QWORD *)(v178 + 72);
  v159 = *(uint64_t **)(v178 + 80);
  v160 = 126 - 2 * __clz((uint64_t)((uint64_t)v159 - v158) >> 3);
  if (v159 == (uint64_t *)v158)
    v161 = 0;
  else
    v161 = v160;
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v158, v159, v161, 1);
  if ((v108 & 1) != 0 && v177)
  {
    LOBYTE(v179) = 0;
    md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::layoutStencilTiles((uint64_t)this, a2, (uint64_t)v177, v164, &v179);
    ggl::CommandBuffer::stableSortRenderItems((__n128 *)v177[9], (char *)v177[10]);
  }
  if (!v198)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v198 + 48))(v198);
  result = v198;
  if (v198 == v197)
  {
    v163 = 4;
    result = v197;
  }
  else
  {
    if (!v198)
      return result;
    v163 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v163))();
}

void sub_19F385978(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v1 - 160));
  _Unwind_Resume(a1);
}

void sub_19F385D10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::Renderer::Renderer(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4, uint64_t a5)
{
  id v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  __int128 v19;
  md::FrameGraphResourceRegistry *v20;

  v9 = a3;
  *(_QWORD *)a1 = off_1E42AF600;
  v10 = a4[1];
  *(_QWORD *)(a1 + 8) = *a4;
  *(_QWORD *)(a1 + 16) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = a2;
  *(_QWORD *)(a1 + 96) = a5;
  v13 = v9;
  *(_QWORD *)(a1 + 104) = v13;
  v14 = operator new();
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_DWORD *)(v14 + 32) = 1065353216;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  v15 = (char *)operator new(0x58uLL);
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = 0;
  *(_QWORD *)v15 = &off_1E42DED18;
  *((_QWORD *)v15 + 5) = 0;
  *((_QWORD *)v15 + 6) = 0;
  *((_QWORD *)v15 + 4) = 0;
  *((_DWORD *)v15 + 14) = 0;
  *(_QWORD *)&v16 = 0x100000001;
  *((_QWORD *)&v16 + 1) = 0x100000001;
  *(_OWORD *)(v15 + 60) = v16;
  *(_QWORD *)(v15 + 76) = 0x100000001;
  *((_DWORD *)v15 + 21) = 0;
  *(_QWORD *)(v14 + 88) = v15;
  *((_QWORD *)v15 + 3) = &off_1E42B63B0;
  *(_QWORD *)(v14 + 80) = v15 + 24;
  v17 = (char *)operator new(0x58uLL);
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = &off_1E42DED18;
  *((_QWORD *)v17 + 5) = 0;
  *((_QWORD *)v17 + 6) = 0;
  *((_QWORD *)v17 + 4) = 0;
  *((_DWORD *)v17 + 14) = 0;
  *(_OWORD *)(v17 + 60) = xmmword_19FFB3C50;
  *(_QWORD *)(v17 + 76) = 0x100000000;
  *((_DWORD *)v17 + 21) = 0;
  *(_QWORD *)(v14 + 104) = v17;
  *((_QWORD *)v17 + 3) = &off_1E42B63B0;
  *(_QWORD *)(v14 + 96) = v17 + 24;
  v18 = (char *)operator new(0x58uLL);
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = &off_1E42DED18;
  *((_QWORD *)v18 + 5) = 0;
  *((_QWORD *)v18 + 6) = 0;
  *((_QWORD *)v18 + 4) = 0;
  *((_DWORD *)v18 + 14) = 0;
  *(_QWORD *)&v19 = 0x100000001;
  *((_QWORD *)&v19 + 1) = 0x100000001;
  *(_OWORD *)(v18 + 60) = v19;
  *(_QWORD *)(v18 + 76) = 0x100000001;
  *((_DWORD *)v18 + 21) = 1;
  *(_QWORD *)(v14 + 120) = v18;
  *((_QWORD *)v18 + 3) = &off_1E42B63B0;
  *(_QWORD *)(v14 + 112) = v18 + 24;
  v20 = *(md::FrameGraphResourceRegistry **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v14;
  if (v20)
  {
    md::FrameGraphResourceRegistry::~FrameGraphResourceRegistry(v20);
    MEMORY[0x1A1AF4E00]();
  }

  return a1;
}

void sub_19F385F08(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  md::FrameGraphResourceRegistry **v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  void *v8;
  uint64_t v9;

  v8 = *(void **)(v1 + 64);
  if (v8)
  {
    *(_QWORD *)(v1 + 72) = v8;
    operator delete(v8);
  }
  std::vector<std::unique_ptr<md::RenderLayer>>::~vector[abi:nn180100](v5);
  std::unique_ptr<md::FrameGraphResourceRegistry>::~unique_ptr[abi:nn180100](v3);
  v9 = *v6;
  *v6 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v4);

  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_27,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_27>,void ()(void)>::operator()(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;

  v1 = (id *)(*(_QWORD *)(a1 + 8) + 848);
  WeakRetained = objc_loadWeakRetained(v1);

  if (WeakRetained)
  {
    v3 = objc_loadWeakRetained(v1);
    objc_msgSend(v3, "didStartLoadingData");

  }
}

void sub_19F386040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::AnimationManager::forceInstantAnimations(md::AnimationManager *this, int a2)
{
  NSObject *v3;
  const char *v4;
  int v5;
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (*((unsigned __int8 *)this + 233) != a2)
  {
    *((_BYTE *)this + 233) = a2;
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v3 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      if (*((_BYTE *)this + 233))
        v4 = "YES";
      else
        v4 = "NO";
      v5 = 136315138;
      v6 = v4;
      _os_log_impl(&dword_19F029000, v3, OS_LOG_TYPE_INFO, "AnimationManager shouldForceInstanceAnimations:%s", (uint8_t *)&v5, 0xCu);
    }

  }
}

void sub_19F386400(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ggl::ImageCopyShader::typedReflection(ggl::ImageCopyShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::ImageCopyShader::typedReflection(void)::ref = (uint64_t)"ImageCopyShader";
      ggl::imageCopyShaderVertexFunctionDescriptor(v2);
      qword_1ECE393F0 = (uint64_t)&ggl::imageCopyShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<22ul>("ImageCopyShaderVertex");
      dword_1ECE393F8 = (int)v3;
      ggl::imageCopyShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39400 = (uint64_t)&ggl::imageCopyShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39408 = ggl::crc32::compute<24ul>("ImageCopyShaderFragment");
      qword_1ECE39410 = (uint64_t)&ggl::imageCopyShaderShaderConstants(void)::ref;
      unk_1ECE39418 = 0;
      qword_1ECE39420 = (uint64_t)ggl::imageCopyShaderShaderTextures(void)::ref;
      unk_1ECE39428 = 1;
      qword_1ECE39430 = (uint64_t)&ggl::imageCopyShaderShaderSamplers(void)::ref;
      unk_1ECE39438 = 1;
    }
  }
}

void ggl::FlyoverPostchainFGBlurShader::typedReflection(ggl::FlyoverPostchainFGBlurShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::FlyoverPostchainFGBlurShader::typedReflection(void)::ref = (uint64_t)"FlyoverPostchainFGBlurShader";
      ggl::flyoverPostchainFGBlurShaderVertexFunctionDescriptor(v2);
      qword_1ECE34628 = (uint64_t)&ggl::flyoverPostchainFGBlurShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<35ul>("FlyoverPostchainFGBlurShaderVertex");
      dword_1ECE34630 = (int)v3;
      ggl::flyoverPostchainFGBlurShaderFragmentFunctionDescriptor(v3);
      qword_1ECE34638 = (uint64_t)&ggl::flyoverPostchainFGBlurShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE34640 = ggl::crc32::compute<37ul>("FlyoverPostchainFGBlurShaderFragment");
      qword_1ECE34648 = (uint64_t)ggl::flyoverPostchainFGBlurShaderShaderConstants(void)::ref;
      unk_1ECE34650 = 1;
      qword_1ECE34658 = (uint64_t)ggl::flyoverPostchainFGBlurShaderShaderTextures(void)::ref;
      unk_1ECE34660 = 2;
      qword_1ECE34668 = (uint64_t)ggl::flyoverPostchainFGBlurShaderShaderSamplers(void)::ref;
      unk_1ECE34670 = 2;
    }
  }
}

void ggl::FlyoverPostchainBGBlurShader::typedReflection(ggl::FlyoverPostchainBGBlurShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::FlyoverPostchainBGBlurShader::typedReflection(void)::ref = (uint64_t)"FlyoverPostchainBGBlurShader";
      ggl::flyoverPostchainBGBlurShaderVertexFunctionDescriptor(v2);
      qword_1ECE345C8 = (uint64_t)&ggl::flyoverPostchainBGBlurShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<35ul>("FlyoverPostchainBGBlurShaderVertex");
      dword_1ECE345D0 = (int)v3;
      ggl::flyoverPostchainBGBlurShaderFragmentFunctionDescriptor(v3);
      qword_1ECE345D8 = (uint64_t)&ggl::flyoverPostchainBGBlurShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE345E0 = ggl::crc32::compute<37ul>("FlyoverPostchainBGBlurShaderFragment");
      qword_1ECE345E8 = (uint64_t)ggl::flyoverPostchainBGBlurShaderShaderConstants(void)::ref;
      unk_1ECE345F0 = 1;
      qword_1ECE345F8 = (uint64_t)ggl::flyoverPostchainBGBlurShaderShaderTextures(void)::ref;
      unk_1ECE34600 = 1;
      qword_1ECE34608 = (uint64_t)ggl::flyoverPostchainBGBlurShaderShaderSamplers(void)::ref;
      unk_1ECE34610 = 1;
    }
  }
}

void ggl::StenciledAlphaClearShader::typedReflection(ggl::StenciledAlphaClearShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::StenciledAlphaClearShader::typedReflection(void)::ref = (uint64_t)"StenciledAlphaClearShader";
      ggl::stenciledAlphaClearShaderVertexFunctionDescriptor(v2);
      qword_1ECE3B250 = (uint64_t)&ggl::stenciledAlphaClearShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<32ul>("StenciledAlphaClearShaderVertex");
      dword_1ECE3B258 = (int)v3;
      ggl::stenciledAlphaClearShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3B260 = (uint64_t)&ggl::stenciledAlphaClearShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B268 = ggl::crc32::compute<34ul>("StenciledAlphaClearShaderFragment");
      qword_1ECE3B270 = (uint64_t)&ggl::stenciledAlphaClearShaderShaderConstants(void)::ref;
      unk_1ECE3B278 = 0;
      qword_1ECE3B280 = (uint64_t)&ggl::stenciledAlphaClearShaderShaderTextures(void)::ref;
      unk_1ECE3B288 = 0;
      qword_1ECE3B290 = (uint64_t)&ggl::stenciledAlphaClearShaderShaderSamplers(void)::ref;
      unk_1ECE3B298 = 0;
    }
  }
}

void ggl::FlyoverBorderRibbonShader::typedReflection(ggl::FlyoverBorderRibbonShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::FlyoverBorderRibbonShader::typedReflection(void)::ref = (uint64_t)"FlyoverBorderRibbonShader";
      ggl::flyoverBorderRibbonShaderVertexFunctionDescriptor(v2);
      qword_1ECE3AFC8 = (uint64_t)&ggl::flyoverBorderRibbonShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<32ul>("FlyoverBorderRibbonShaderVertex");
      dword_1ECE3AFD0 = (int)v3;
      ggl::flyoverBorderRibbonShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3AFD8 = (uint64_t)&ggl::flyoverBorderRibbonShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3AFE0 = ggl::crc32::compute<34ul>("FlyoverBorderRibbonShaderFragment");
      qword_1ECE3AFE8 = (uint64_t)ggl::flyoverBorderRibbonShaderShaderConstants(void)::ref;
      unk_1ECE3AFF0 = 5;
      qword_1ECE3AFF8 = (uint64_t)ggl::flyoverBorderRibbonShaderShaderTextures(void)::ref;
      unk_1ECE3B000 = 2;
      qword_1ECE3B008 = (uint64_t)ggl::flyoverBorderRibbonShaderShaderSamplers(void)::ref;
      unk_1ECE3B010 = 2;
    }
  }
}

void ggl::FlyoverMorphBorderShader::typedReflection(ggl::FlyoverMorphBorderShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::FlyoverMorphBorderShader::typedReflection(void)::ref = (uint64_t)"FlyoverMorphBorderShader";
      ggl::flyoverMorphBorderShaderVertexFunctionDescriptor(v2);
      qword_1ECE3ADB0 = (uint64_t)&ggl::flyoverMorphBorderShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<31ul>("FlyoverMorphBorderShaderVertex");
      dword_1ECE3ADB8 = (int)v3;
      ggl::flyoverMorphBorderShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3ADC0 = (uint64_t)&ggl::flyoverMorphBorderShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3ADC8 = ggl::crc32::compute<33ul>("FlyoverMorphBorderShaderFragment");
      qword_1ECE3ADD0 = (uint64_t)ggl::flyoverMorphBorderShaderShaderConstants(void)::ref;
      unk_1ECE3ADD8 = 6;
      qword_1ECE3ADE0 = (uint64_t)ggl::flyoverMorphBorderShaderShaderTextures(void)::ref;
      unk_1ECE3ADE8 = 5;
      qword_1ECE3ADF0 = (uint64_t)ggl::flyoverMorphBorderShaderShaderSamplers(void)::ref;
      unk_1ECE3ADF8 = 5;
    }
  }
}

void ggl::FlyoverMorphNightShader::typedReflection(ggl::FlyoverMorphNightShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::FlyoverMorphNightShader::typedReflection(void)::ref = (uint64_t)"FlyoverMorphNightShader";
      ggl::flyoverMorphNightShaderVertexFunctionDescriptor(v2);
      qword_1ECE3AAE0 = (uint64_t)&ggl::flyoverMorphNightShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<30ul>("FlyoverMorphNightShaderVertex");
      dword_1ECE3AAE8 = (int)v3;
      ggl::flyoverMorphNightShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3AAF0 = (uint64_t)&ggl::flyoverMorphNightShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3AAF8 = ggl::crc32::compute<32ul>("FlyoverMorphNightShaderFragment");
      qword_1ECE3AB00 = (uint64_t)ggl::flyoverMorphNightShaderShaderConstants(void)::ref;
      unk_1ECE3AB08 = 6;
      qword_1ECE3AB10 = (uint64_t)ggl::flyoverMorphNightShaderShaderTextures(void)::ref;
      unk_1ECE3AB18 = 5;
      qword_1ECE3AB20 = (uint64_t)ggl::flyoverMorphNightShaderShaderSamplers(void)::ref;
      unk_1ECE3AB28 = 5;
    }
  }
}

void ggl::TileBaseSurfaceShader::typedReflection(ggl::TileBaseSurfaceShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::TileBaseSurfaceShader::typedReflection(void)::ref = (uint64_t)"TileBaseSurfaceShader";
      ggl::tileBaseSurfaceShaderVertexFunctionDescriptor(v2);
      qword_1ECE3A5C8 = (uint64_t)&ggl::tileBaseSurfaceShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<28ul>("TileBaseSurfaceShaderVertex");
      dword_1ECE3A5D0 = (int)v3;
      ggl::tileBaseSurfaceShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3A5D8 = (uint64_t)&ggl::tileBaseSurfaceShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3A5E0 = ggl::crc32::compute<30ul>("TileBaseSurfaceShaderFragment");
      qword_1ECE3A5E8 = (uint64_t)ggl::tileBaseSurfaceShaderShaderConstants(void)::ref;
      unk_1ECE3A5F0 = 2;
      qword_1ECE3A5F8 = (uint64_t)&ggl::tileBaseSurfaceShaderShaderTextures(void)::ref;
      unk_1ECE3A600 = 0;
      qword_1ECE3A608 = (uint64_t)&ggl::tileBaseSurfaceShaderShaderSamplers(void)::ref;
      unk_1ECE3A610 = 0;
    }
  }
}

void ggl::FlyoverNightDimShader::typedReflection(ggl::FlyoverNightDimShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::FlyoverNightDimShader::typedReflection(void)::ref = (uint64_t)"FlyoverNightDimShader";
      ggl::flyoverNightDimShaderVertexFunctionDescriptor(v2);
      qword_1ECE3A4B0 = (uint64_t)&ggl::flyoverNightDimShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<28ul>("FlyoverNightDimShaderVertex");
      dword_1ECE3A4B8 = (int)v3;
      ggl::flyoverNightDimShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3A4C0 = (uint64_t)&ggl::flyoverNightDimShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3A4C8 = ggl::crc32::compute<30ul>("FlyoverNightDimShaderFragment");
      qword_1ECE3A4D0 = (uint64_t)ggl::flyoverNightDimShaderShaderConstants(void)::ref;
      unk_1ECE3A4D8 = 1;
      qword_1ECE3A4E0 = (uint64_t)&ggl::flyoverNightDimShaderShaderTextures(void)::ref;
      unk_1ECE3A4E8 = 0;
      qword_1ECE3A4F0 = (uint64_t)&ggl::flyoverNightDimShaderShaderSamplers(void)::ref;
      unk_1ECE3A4F8 = 0;
    }
  }
}

void ggl::FlyoverManeuverShader::typedReflection(ggl::FlyoverManeuverShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::FlyoverManeuverShader::typedReflection(void)::ref = (uint64_t)"FlyoverManeuverShader";
      ggl::flyoverManeuverShaderVertexFunctionDescriptor(v2);
      qword_1ECE3A450 = (uint64_t)&ggl::flyoverManeuverShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<28ul>("FlyoverManeuverShaderVertex");
      dword_1ECE3A458 = (int)v3;
      ggl::flyoverManeuverShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3A460 = (uint64_t)&ggl::flyoverManeuverShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3A468 = ggl::crc32::compute<30ul>("FlyoverManeuverShaderFragment");
      qword_1ECE3A470 = (uint64_t)ggl::flyoverManeuverShaderShaderConstants(void)::ref;
      unk_1ECE3A478 = 3;
      qword_1ECE3A480 = (uint64_t)ggl::flyoverManeuverShaderShaderTextures(void)::ref;
      unk_1ECE3A488 = 1;
      qword_1ECE3A490 = (uint64_t)&ggl::flyoverManeuverShaderShaderSamplers(void)::ref;
      unk_1ECE3A498 = 1;
    }
  }
}

void ggl::FlyoverTrafficShader::typedReflection(ggl::FlyoverTrafficShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::FlyoverTrafficShader::typedReflection(void)::ref = (uint64_t)"FlyoverTrafficShader";
      ggl::flyoverTrafficShaderVertexFunctionDescriptor(v2);
      qword_1ECE3A228 = (uint64_t)&ggl::flyoverTrafficShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<27ul>("FlyoverTrafficShaderVertex");
      dword_1ECE3A230 = (int)v3;
      ggl::flyoverTrafficShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3A238 = (uint64_t)&ggl::flyoverTrafficShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3A240 = ggl::crc32::compute<29ul>("FlyoverTrafficShaderFragment");
      qword_1ECE3A248 = (uint64_t)ggl::flyoverTrafficShaderShaderConstants(void)::ref;
      unk_1ECE3A250 = 5;
      qword_1ECE3A258 = (uint64_t)&ggl::flyoverTrafficShaderShaderTextures(void)::ref;
      unk_1ECE3A260 = 0;
      qword_1ECE3A268 = (uint64_t)&ggl::flyoverTrafficShaderShaderSamplers(void)::ref;
      unk_1ECE3A270 = 0;
    }
  }
}

void ggl::FlyoverOverlayShader::typedReflection(ggl::FlyoverOverlayShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::FlyoverOverlayShader::typedReflection(void)::ref = (uint64_t)"FlyoverOverlayShader";
      ggl::flyoverOverlayShaderVertexFunctionDescriptor(v2);
      qword_1ECE3A1D0 = (uint64_t)&ggl::flyoverOverlayShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<27ul>("FlyoverOverlayShaderVertex");
      dword_1ECE3A1D8 = (int)v3;
      ggl::flyoverOverlayShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3A1E0 = (uint64_t)&ggl::flyoverOverlayShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3A1E8 = ggl::crc32::compute<29ul>("FlyoverOverlayShaderFragment");
      qword_1ECE3A1F0 = (uint64_t)ggl::flyoverOverlayShaderShaderConstants(void)::ref;
      unk_1ECE3A1F8 = 5;
      qword_1ECE3A200 = (uint64_t)ggl::flyoverOverlayShaderShaderTextures(void)::ref;
      unk_1ECE3A208 = 1;
      qword_1ECE3A210 = (uint64_t)&ggl::flyoverOverlayShaderShaderSamplers(void)::ref;
      unk_1ECE3A218 = 1;
    }
  }
}

void ggl::FlyoverMaskedShader::typedReflection(ggl::FlyoverMaskedShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::FlyoverMaskedShader::typedReflection(void)::ref = (uint64_t)"FlyoverMaskedShader";
      ggl::flyoverMaskedShaderVertexFunctionDescriptor(v2);
      qword_1ECE39DE8 = (uint64_t)&ggl::flyoverMaskedShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<26ul>("FlyoverMaskedShaderVertex");
      dword_1ECE39DF0 = (int)v3;
      ggl::flyoverMaskedShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39DF8 = (uint64_t)&ggl::flyoverMaskedShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39E00 = ggl::crc32::compute<28ul>("FlyoverMaskedShaderFragment");
      qword_1ECE39E08 = (uint64_t)ggl::flyoverMaskedShaderShaderConstants(void)::ref;
      unk_1ECE39E10 = 5;
      qword_1ECE39E18 = (uint64_t)ggl::flyoverMaskedShaderShaderTextures(void)::ref;
      unk_1ECE39E20 = 3;
      qword_1ECE39E28 = (uint64_t)ggl::flyoverMaskedShaderShaderSamplers(void)::ref;
      unk_1ECE39E30 = 3;
    }
  }
}

void ggl::FlyoverBorderShader::typedReflection(ggl::FlyoverBorderShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::FlyoverBorderShader::typedReflection(void)::ref = (uint64_t)"FlyoverBorderShader";
      ggl::flyoverBorderShaderVertexFunctionDescriptor(v2);
      qword_1ECE39D88 = (uint64_t)&ggl::flyoverBorderShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<26ul>("FlyoverBorderShaderVertex");
      dword_1ECE39D90 = (int)v3;
      ggl::flyoverBorderShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39D98 = (uint64_t)&ggl::flyoverBorderShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39DA0 = ggl::crc32::compute<28ul>("FlyoverBorderShaderFragment");
      qword_1ECE39DA8 = (uint64_t)ggl::flyoverBorderShaderShaderConstants(void)::ref;
      unk_1ECE39DB0 = 5;
      qword_1ECE39DB8 = (uint64_t)ggl::flyoverBorderShaderShaderTextures(void)::ref;
      unk_1ECE39DC0 = 4;
      qword_1ECE39DC8 = (uint64_t)ggl::flyoverBorderShaderShaderSamplers(void)::ref;
      unk_1ECE39DD0 = 4;
    }
  }
}

void ggl::FlyoverRouteShader::typedReflection(ggl::FlyoverRouteShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::FlyoverRouteShader::typedReflection(void)::ref = (uint64_t)"FlyoverRouteShader";
      ggl::flyoverRouteShaderVertexFunctionDescriptor(v2);
      qword_1ECE39B00 = (uint64_t)&ggl::flyoverRouteShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<25ul>("FlyoverRouteShaderVertex");
      dword_1ECE39B08 = (int)v3;
      ggl::flyoverRouteShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39B10 = (uint64_t)&ggl::flyoverRouteShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39B18 = ggl::crc32::compute<27ul>("FlyoverRouteShaderFragment");
      qword_1ECE39B20 = (uint64_t)ggl::flyoverRouteShaderShaderConstants(void)::ref;
      unk_1ECE39B28 = 3;
      qword_1ECE39B30 = (uint64_t)ggl::flyoverRouteShaderShaderTextures(void)::ref;
      unk_1ECE39B38 = 1;
      qword_1ECE39B40 = (uint64_t)&ggl::flyoverRouteShaderShaderSamplers(void)::ref;
      unk_1ECE39B48 = 1;
    }
  }
}

void ggl::FlyoverNightShader::typedReflection(ggl::FlyoverNightShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::FlyoverNightShader::typedReflection(void)::ref = (uint64_t)"FlyoverNightShader";
      ggl::flyoverNightShaderVertexFunctionDescriptor(v2);
      qword_1ECE39AA0 = (uint64_t)&ggl::flyoverNightShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<25ul>("FlyoverNightShaderVertex");
      dword_1ECE39AA8 = (int)v3;
      ggl::flyoverNightShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39AB0 = (uint64_t)&ggl::flyoverNightShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39AB8 = ggl::crc32::compute<27ul>("FlyoverNightShaderFragment");
      qword_1ECE39AC0 = (uint64_t)ggl::flyoverNightShaderShaderConstants(void)::ref;
      unk_1ECE39AC8 = 5;
      qword_1ECE39AD0 = (uint64_t)ggl::flyoverNightShaderShaderTextures(void)::ref;
      unk_1ECE39AD8 = 3;
      qword_1ECE39AE0 = (uint64_t)ggl::flyoverNightShaderShaderSamplers(void)::ref;
      unk_1ECE39AE8 = 3;
    }
  }
}

void ggl::FlyoverMorphShader::typedReflection(ggl::FlyoverMorphShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::FlyoverMorphShader::typedReflection(void)::ref = (uint64_t)"FlyoverMorphShader";
      ggl::flyoverMorphShaderVertexFunctionDescriptor(v2);
      qword_1ECE39A40 = (uint64_t)&ggl::flyoverMorphShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<25ul>("FlyoverMorphShaderVertex");
      dword_1ECE39A48 = (int)v3;
      ggl::flyoverMorphShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39A50 = (uint64_t)&ggl::flyoverMorphShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39A58 = ggl::crc32::compute<27ul>("FlyoverMorphShaderFragment");
      qword_1ECE39A60 = (uint64_t)ggl::flyoverMorphShaderShaderConstants(void)::ref;
      unk_1ECE39A68 = 6;
      qword_1ECE39A70 = (uint64_t)ggl::flyoverMorphShaderShaderTextures(void)::ref;
      unk_1ECE39A78 = 3;
      qword_1ECE39A80 = (uint64_t)ggl::flyoverMorphShaderShaderSamplers(void)::ref;
      unk_1ECE39A88 = 3;
    }
  }
}

void ggl::EarthCoronaShader::typedReflection(ggl::EarthCoronaShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::EarthCoronaShader::typedReflection(void)::ref = (uint64_t)"EarthCoronaShader";
      ggl::earthCoronaShaderVertexFunctionDescriptor(v2);
      qword_1ECE39770 = (uint64_t)&ggl::earthCoronaShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<24ul>("EarthCoronaShaderVertex");
      dword_1ECE39778 = (int)v3;
      ggl::earthCoronaShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39780 = (uint64_t)&ggl::earthCoronaShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39788 = ggl::crc32::compute<26ul>("EarthCoronaShaderFragment");
      qword_1ECE39790 = (uint64_t)ggl::earthCoronaShaderShaderConstants(void)::ref;
      unk_1ECE39798 = 1;
      qword_1ECE397A0 = (uint64_t)ggl::earthCoronaShaderShaderTextures(void)::ref;
      unk_1ECE397A8 = 1;
      qword_1ECE397B0 = (uint64_t)&ggl::earthCoronaShaderShaderSamplers(void)::ref;
      unk_1ECE397B8 = 1;
    }
  }
}

void ggl::SolidLineShader::typedReflection(ggl::SolidLineShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::SolidLineShader::typedReflection(void)::ref = (uint64_t)"SolidLineShader";
      ggl::solidLineShaderVertexFunctionDescriptor(v2);
      qword_1ECE394B0 = (uint64_t)&ggl::solidLineShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<22ul>("SolidLineShaderVertex");
      dword_1ECE394B8 = (int)v3;
      ggl::solidLineShaderFragmentFunctionDescriptor(v3);
      qword_1ECE394C0 = (uint64_t)&ggl::solidLineShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE394C8 = ggl::crc32::compute<24ul>("SolidLineShaderFragment");
      qword_1ECE394D0 = (uint64_t)ggl::solidLineShaderShaderConstants(void)::ref;
      unk_1ECE394D8 = 2;
      qword_1ECE394E0 = (uint64_t)&ggl::solidLineShaderShaderTextures(void)::ref;
      unk_1ECE394E8 = 0;
      qword_1ECE394F0 = (uint64_t)&ggl::solidLineShaderShaderSamplers(void)::ref;
      unk_1ECE394F8 = 0;
    }
  }
}

void ggl::FlyoverShader::typedReflection(ggl::FlyoverShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::FlyoverShader::typedReflection(void)::ref = (uint64_t)"FlyoverShader";
      ggl::flyoverShaderVertexFunctionDescriptor(v2);
      qword_1ECE39160 = (uint64_t)&ggl::flyoverShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<20ul>("FlyoverShaderVertex");
      dword_1ECE39168 = (int)v3;
      ggl::flyoverShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39170 = (uint64_t)&ggl::flyoverShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39178 = ggl::crc32::compute<22ul>("FlyoverShaderFragment");
      qword_1ECE39180 = (uint64_t)ggl::flyoverShaderShaderConstants(void)::ref;
      unk_1ECE39188 = 5;
      qword_1ECE39190 = (uint64_t)ggl::flyoverShaderShaderTextures(void)::ref;
      unk_1ECE39198 = 2;
      qword_1ECE391A0 = (uint64_t)ggl::flyoverShaderShaderSamplers(void)::ref;
      unk_1ECE391A8 = 2;
    }
  }
}

void ggl::StarsShader::typedReflection(ggl::StarsShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::StarsShader::typedReflection(void)::ref = (uint64_t)"StarsShader";
      ggl::starsShaderVertexFunctionDescriptor(v2);
      qword_1ECE38E28 = (uint64_t)&ggl::starsShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<18ul>("StarsShaderVertex");
      dword_1ECE38E30 = (int)v3;
      ggl::starsShaderFragmentFunctionDescriptor(v3);
      qword_1ECE38E38 = (uint64_t)&ggl::starsShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE38E40 = ggl::crc32::compute<20ul>("StarsShaderFragment");
      qword_1ECE38E48 = (uint64_t)ggl::starsShaderShaderConstants(void)::ref;
      unk_1ECE38E50 = 1;
      qword_1ECE38E58 = (uint64_t)&ggl::starsShaderShaderTextures(void)::ref;
      unk_1ECE38E60 = 0;
      qword_1ECE38E68 = (uint64_t)&ggl::starsShaderShaderSamplers(void)::ref;
      unk_1ECE38E70 = 0;
    }
  }
}

void ggl::RouteLineAlphaResetShader::typedReflection(ggl::RouteLineAlphaResetShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::RouteLineAlphaResetShader::typedReflection(void)::ref = (uint64_t)"RouteLineAlphaResetShader";
      ggl::routeLineAlphaResetShaderVertexFunctionDescriptor(v2);
      qword_1ECE3B130 = (uint64_t)&ggl::routeLineAlphaResetShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<32ul>("RouteLineAlphaResetShaderVertex");
      dword_1ECE3B138 = (int)v3;
      ggl::routeLineAlphaResetShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3B140 = (uint64_t)&ggl::routeLineAlphaResetShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B148 = ggl::crc32::compute<34ul>("RouteLineAlphaResetShaderFragment");
      qword_1ECE3B150 = (uint64_t)ggl::routeLineAlphaResetShaderShaderConstants(void)::ref;
      unk_1ECE3B158 = 4;
      qword_1ECE3B160 = (uint64_t)&ggl::routeLineAlphaResetShaderShaderTextures(void)::ref;
      unk_1ECE3B168 = 0;
      qword_1ECE3B170 = (uint64_t)&ggl::routeLineAlphaResetShaderShaderSamplers(void)::ref;
      unk_1ECE3B178 = 0;
    }
  }
}

void ggl::routeLineAlphaResetShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::routeLineAlphaResetShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("RouteLineAlphaResetShaderFragment");
      *(_DWORD *)algn_1ECE41AA4 = 1;
      qword_1ECE41AA8 = (uint64_t)"RouteLineAlphaResetShader";
      unk_1ECE41AB0 = 0;
      qword_1ECE41AB8 = 0;
      unk_1ECE41AC0 = &ggl::routeLineAlphaResetShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41AC8 = 1;
      unk_1ECE41AD0 = &ggl::routeLineAlphaResetShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41AD8 = 0;
      unk_1ECE41AE0 = &ggl::routeLineAlphaResetShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41AE8 = 0;
      unk_1ECE41AF0 = &ggl::routeLineAlphaResetShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41B00 = 0;
      unk_1ECE41B08 = 0;
      qword_1ECE41AF8 = 0;
    }
  }
}

void ggl::routeLineAlphaResetShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::routeLineAlphaResetShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("RouteLineAlphaResetShaderVertex");
      *(_DWORD *)algn_1ECE40F4C = 0;
      qword_1ECE40F50 = (uint64_t)"RouteLineAlphaResetShader";
      unk_1ECE40F58 = ggl::routeLineAlphaResetShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE40F60 = 1;
      unk_1ECE40F68 = &ggl::routeLineAlphaResetShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE40F70 = 3;
      unk_1ECE40F78 = &ggl::routeLineAlphaResetShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE40F80 = 0;
      unk_1ECE40F88 = &ggl::routeLineAlphaResetShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE40F90 = 0;
      unk_1ECE40F98 = &ggl::routeLineAlphaResetShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE40FA8 = 0;
      unk_1ECE40FB0 = 0;
      qword_1ECE40FA0 = 0;
    }
  }
}

void ggl::OptimizedTrafficShader::typedReflection(ggl::OptimizedTrafficShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::OptimizedTrafficShader::typedReflection(void)::ref = (uint64_t)"OptimizedTrafficShader";
      ggl::optimizedTrafficShaderVertexFunctionDescriptor(v2);
      qword_1ECE3A738 = (uint64_t)&ggl::optimizedTrafficShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<29ul>("OptimizedTrafficShaderVertex");
      dword_1ECE3A740 = (int)v3;
      ggl::optimizedTrafficShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3A748 = (uint64_t)&ggl::optimizedTrafficShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3A750 = ggl::crc32::compute<31ul>("OptimizedTrafficShaderFragment");
      qword_1ECE3A758 = (uint64_t)ggl::optimizedTrafficShaderShaderConstants(void)::ref;
      unk_1ECE3A760 = 3;
      qword_1ECE3A768 = (uint64_t)&ggl::optimizedTrafficShaderShaderTextures(void)::ref;
      unk_1ECE3A770 = 0;
      qword_1ECE3A778 = (uint64_t)&ggl::optimizedTrafficShaderShaderSamplers(void)::ref;
      unk_1ECE3A780 = 0;
    }
  }
}

void ggl::optimizedTrafficShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::optimizedTrafficShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("OptimizedTrafficShaderFragment");
      *(_DWORD *)algn_1ECE406CC = 1;
      qword_1ECE406D0 = (uint64_t)"OptimizedTrafficShader";
      unk_1ECE406D8 = 0;
      qword_1ECE406E0 = 0;
      unk_1ECE406E8 = &ggl::optimizedTrafficShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE406F0 = 1;
      unk_1ECE406F8 = &ggl::optimizedTrafficShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE40700 = 0;
      unk_1ECE40708 = &ggl::optimizedTrafficShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE40710 = 0;
      unk_1ECE40718 = &ggl::optimizedTrafficShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE40728 = 0;
      unk_1ECE40730 = 0;
      qword_1ECE40720 = 0;
    }
  }
}

void ggl::optimizedTrafficShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::optimizedTrafficShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("OptimizedTrafficShaderVertex");
      *(_DWORD *)algn_1ECE3F974 = 0;
      qword_1ECE3F978 = (uint64_t)"OptimizedTrafficShader";
      unk_1ECE3F980 = ggl::optimizedTrafficShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3F988 = 1;
      unk_1ECE3F990 = &ggl::optimizedTrafficShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3F998 = 3;
      unk_1ECE3F9A0 = &ggl::optimizedTrafficShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3F9A8 = 0;
      unk_1ECE3F9B0 = &ggl::optimizedTrafficShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3F9B8 = 0;
      unk_1ECE3F9C0 = &ggl::optimizedTrafficShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3F9D0 = 0;
      unk_1ECE3F9D8 = 0;
      qword_1ECE3F9C8 = 0;
    }
  }
}

void ggl::SolidMaskedTrafficShader::typedReflection(ggl::SolidMaskedTrafficShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::SolidMaskedTrafficShader::typedReflection(void)::ref = (uint64_t)"SolidMaskedTrafficShader";
      ggl::solidMaskedTrafficShaderVertexFunctionDescriptor(v2);
      qword_1ECE3AEC0 = (uint64_t)&ggl::solidMaskedTrafficShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<31ul>("SolidMaskedTrafficShaderVertex");
      dword_1ECE3AEC8 = (int)v3;
      ggl::solidMaskedTrafficShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3AED0 = (uint64_t)&ggl::solidMaskedTrafficShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3AED8 = ggl::crc32::compute<33ul>("SolidMaskedTrafficShaderFragment");
      qword_1ECE3AEE0 = (uint64_t)ggl::solidMaskedTrafficShaderShaderConstants(void)::ref;
      unk_1ECE3AEE8 = 3;
      qword_1ECE3AEF0 = (uint64_t)ggl::solidMaskedTrafficShaderShaderTextures(void)::ref;
      unk_1ECE3AEF8 = 1;
      qword_1ECE3AF00 = (uint64_t)&ggl::solidMaskedTrafficShaderShaderSamplers(void)::ref;
      unk_1ECE3AF08 = 1;
    }
  }
}

void ggl::solidMaskedTrafficShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::solidMaskedTrafficShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("SolidMaskedTrafficShaderFragment");
      *(_DWORD *)algn_1ECE41534 = 1;
      qword_1ECE41538 = (uint64_t)"SolidMaskedTrafficShader";
      unk_1ECE41540 = 0;
      qword_1ECE41548 = 0;
      unk_1ECE41550 = &ggl::solidMaskedTrafficShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41558 = 1;
      unk_1ECE41560 = &ggl::solidMaskedTrafficShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41568 = 0;
      unk_1ECE41570 = &ggl::solidMaskedTrafficShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41578 = 1;
      unk_1ECE41580 = &ggl::solidMaskedTrafficShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41590 = 0;
      unk_1ECE41598 = 0;
      qword_1ECE41588 = 1;
    }
  }
}

void ggl::solidMaskedTrafficShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::solidMaskedTrafficShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("SolidMaskedTrafficShaderVertex");
      *(_DWORD *)algn_1ECE4090C = 0;
      qword_1ECE40910 = (uint64_t)"SolidMaskedTrafficShader";
      unk_1ECE40918 = ggl::solidMaskedTrafficShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE40920 = 1;
      unk_1ECE40928 = &ggl::solidMaskedTrafficShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE40930 = 3;
      unk_1ECE40938 = &ggl::solidMaskedTrafficShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE40940 = 0;
      unk_1ECE40948 = &ggl::solidMaskedTrafficShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE40950 = 0;
      unk_1ECE40958 = &ggl::solidMaskedTrafficShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE40968 = 0;
      unk_1ECE40970 = 0;
      qword_1ECE40960 = 0;
    }
  }
}

void ggl::SolidTrafficShader::typedReflection(ggl::SolidTrafficShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::SolidTrafficShader::typedReflection(void)::ref = (uint64_t)"SolidTrafficShader";
      ggl::solidTrafficShaderVertexFunctionDescriptor(v2);
      qword_1ECE39C70 = (uint64_t)&ggl::solidTrafficShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<25ul>("SolidTrafficShaderVertex");
      dword_1ECE39C78 = (int)v3;
      ggl::solidTrafficShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39C80 = (uint64_t)&ggl::solidTrafficShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39C88 = ggl::crc32::compute<27ul>("SolidTrafficShaderFragment");
      qword_1ECE39C90 = (uint64_t)ggl::solidTrafficShaderShaderConstants(void)::ref;
      unk_1ECE39C98 = 3;
      qword_1ECE39CA0 = (uint64_t)ggl::solidTrafficShaderShaderTextures(void)::ref;
      unk_1ECE39CA8 = 1;
      qword_1ECE39CB0 = (uint64_t)ggl::solidTrafficShaderShaderSamplers(void)::ref;
      unk_1ECE39CB8 = 1;
    }
  }
}

void ggl::solidTrafficShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::solidTrafficShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("SolidTrafficShaderFragment");
      *(_DWORD *)algn_1ECE3ED34 = 1;
      qword_1ECE3ED38 = (uint64_t)"SolidTrafficShader";
      unk_1ECE3ED40 = 0;
      qword_1ECE3ED48 = 0;
      unk_1ECE3ED50 = &ggl::solidTrafficShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3ED58 = 1;
      unk_1ECE3ED60 = &ggl::solidTrafficShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3ED68 = 0;
      unk_1ECE3ED70 = &ggl::solidTrafficShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3ED78 = 1;
      unk_1ECE3ED80 = &ggl::solidTrafficShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3ED90 = 0;
      unk_1ECE3ED98 = 0;
      qword_1ECE3ED88 = 1;
    }
  }
}

void ggl::solidTrafficShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::solidTrafficShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("SolidTrafficShaderVertex");
      *(_DWORD *)algn_1ECE3E08C = 0;
      qword_1ECE3E090 = (uint64_t)"SolidTrafficShader";
      unk_1ECE3E098 = ggl::solidTrafficShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3E0A0 = 1;
      unk_1ECE3E0A8 = &ggl::solidTrafficShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3E0B0 = 3;
      unk_1ECE3E0B8 = &ggl::solidTrafficShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3E0C0 = 0;
      unk_1ECE3E0C8 = &ggl::solidTrafficShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3E0D0 = 0;
      unk_1ECE3E0D8 = &ggl::solidTrafficShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3E0E8 = 0;
      unk_1ECE3E0F0 = 0;
      qword_1ECE3E0E0 = 0;
    }
  }
}

void ggl::TrafficGlowShader::typedReflection(ggl::TrafficGlowShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::TrafficGlowShader::typedReflection(void)::ref = (uint64_t)"TrafficGlowShader";
      ggl::trafficGlowShaderVertexFunctionDescriptor(v2);
      qword_1ECE39990 = (uint64_t)&ggl::trafficGlowShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<24ul>("TrafficGlowShaderVertex");
      dword_1ECE39998 = (int)v3;
      ggl::trafficGlowShaderFragmentFunctionDescriptor(v3);
      qword_1ECE399A0 = (uint64_t)&ggl::trafficGlowShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE399A8 = ggl::crc32::compute<26ul>("TrafficGlowShaderFragment");
      qword_1ECE399B0 = (uint64_t)ggl::trafficGlowShaderShaderConstants(void)::ref;
      unk_1ECE399B8 = 3;
      qword_1ECE399C0 = (uint64_t)&ggl::trafficGlowShaderShaderTextures(void)::ref;
      unk_1ECE399C8 = 0;
      qword_1ECE399D0 = (uint64_t)&ggl::trafficGlowShaderShaderSamplers(void)::ref;
      unk_1ECE399D8 = 0;
    }
  }
}

void ggl::trafficGlowShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::trafficGlowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("TrafficGlowShaderFragment");
      *(_DWORD *)algn_1ECE3E6D4 = 1;
      qword_1ECE3E6D8 = (uint64_t)"TrafficGlowShader";
      unk_1ECE3E6E0 = 0;
      qword_1ECE3E6E8 = 0;
      unk_1ECE3E6F0 = &ggl::trafficGlowShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3E6F8 = 1;
      unk_1ECE3E700 = &ggl::trafficGlowShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3E708 = 0;
      unk_1ECE3E710 = &ggl::trafficGlowShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3E718 = 0;
      unk_1ECE3E720 = &ggl::trafficGlowShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3E730 = 0;
      unk_1ECE3E738 = 0;
      qword_1ECE3E728 = 0;
    }
  }
}

void ggl::trafficGlowShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::trafficGlowShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("TrafficGlowShaderVertex");
      *(_DWORD *)algn_1ECE3DC0C = 0;
      qword_1ECE3DC10 = (uint64_t)"TrafficGlowShader";
      unk_1ECE3DC18 = ggl::trafficGlowShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3DC20 = 1;
      unk_1ECE3DC28 = &ggl::trafficGlowShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3DC30 = 3;
      unk_1ECE3DC38 = &ggl::trafficGlowShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3DC40 = 0;
      unk_1ECE3DC48 = &ggl::trafficGlowShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3DC50 = 0;
      unk_1ECE3DC58 = &ggl::trafficGlowShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3DC68 = 0;
      unk_1ECE3DC70 = 0;
      qword_1ECE3DC60 = 0;
    }
  }
}

uint64_t gdc::ComponentStorageWrapper<md::components::PendingMaterial>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(v15 - 8);
  a1[11] = v15 - 8;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return (uint64_t)geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v19, v20);
}

_QWORD *geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  uint64_t v14;

  v4 = a1[4];
  if ((_QWORD *)(v4 - 8) != a2)
  {
    *a2 = *(_QWORD *)(v4 - 8);
    v5 = a1[3];
    v6 = *(unsigned int *)(a1[4] - 4);
    v7 = v6 >> 7;
    v8 = *a1;
    v9 = (a1[1] - *a1) >> 3;
    v10 = v6 >> 7 >= v9;
    v11 = (v6 >> 7) - v9;
    if (v10)
    {
      std::vector<std::unique_ptr<std::array<unsigned short,128ul>>>::__append(a1, v11 + 1);
      v8 = *a1;
    }
    v12 = (unint64_t)a2 - v5;
    if (!*(_QWORD *)(v8 + 8 * v7))
    {
      v13 = (_OWORD *)operator new();
      *v13 = 0u;
      v13[1] = 0u;
      v13[2] = 0u;
      v13[3] = 0u;
      v13[4] = 0u;
      v13[5] = 0u;
      v13[6] = 0u;
      v13[7] = 0u;
      v13[8] = 0u;
      v13[9] = 0u;
      v13[10] = 0u;
      v13[11] = 0u;
      v13[12] = 0u;
      v13[13] = 0u;
      v13[14] = 0u;
      v13[15] = 0u;
      v14 = *(_QWORD *)(v8 + 8 * v7);
      *(_QWORD *)(v8 + 8 * v7) = v13;
      if (v14)
        MEMORY[0x1A1AF4E00](v14, 0x1000C40104B78CFLL);
    }
    *(_WORD *)(*(_QWORD *)(*a1 + 8 * v7) + 2 * (v6 & 0x7F)) = v12 >> 3;
    v4 = a1[4];
  }
  a1[4] = v4 - 8;
  return a2;
}

void sub_19F38829C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F38840C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19F3885B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19F388754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void ggl::PatternedRibbonShader::typedReflection(ggl::PatternedRibbonShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::PatternedRibbonShader::typedReflection(void)::ref = (uint64_t)"PatternedRibbonShader";
      ggl::patternedRibbonShaderVertexFunctionDescriptor(v2);
      qword_1ECE3A510 = (uint64_t)&ggl::patternedRibbonShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<28ul>("PatternedRibbonShaderVertex");
      dword_1ECE3A518 = (int)v3;
      ggl::patternedRibbonShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3A520 = (uint64_t)&ggl::patternedRibbonShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3A528 = ggl::crc32::compute<30ul>("PatternedRibbonShaderFragment");
      qword_1ECE3A530 = (uint64_t)ggl::patternedRibbonShaderShaderConstants(void)::ref;
      unk_1ECE3A538 = 4;
      qword_1ECE3A540 = (uint64_t)ggl::patternedRibbonShaderShaderTextures(void)::ref;
      unk_1ECE3A548 = 1;
      qword_1ECE3A550 = (uint64_t)ggl::patternedRibbonShaderShaderSamplers(void)::ref;
      unk_1ECE3A558 = 1;
    }
  }
}

void ggl::patternedRibbonShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::patternedRibbonShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("PatternedRibbonShaderFragment");
      *(_DWORD *)algn_1ECE40164 = 1;
      qword_1ECE40168 = (uint64_t)"PatternedRibbonShader";
      unk_1ECE40170 = 0;
      qword_1ECE40178 = 0;
      unk_1ECE40180 = &ggl::patternedRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE40188 = 2;
      unk_1ECE40190 = &ggl::patternedRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE40198 = 0;
      unk_1ECE401A0 = &ggl::patternedRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE401A8 = 1;
      unk_1ECE401B0 = &ggl::patternedRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE401C0 = 0;
      unk_1ECE401C8 = 0;
      qword_1ECE401B8 = 1;
    }
  }
}

void ggl::patternedRibbonShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::patternedRibbonShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("PatternedRibbonShaderVertex");
      *(_DWORD *)algn_1ECE3F38C = 0;
      qword_1ECE3F390 = (uint64_t)"PatternedRibbonShader";
      unk_1ECE3F398 = ggl::patternedRibbonShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3F3A0 = 1;
      unk_1ECE3F3A8 = &ggl::patternedRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3F3B0 = 4;
      unk_1ECE3F3B8 = &ggl::patternedRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3F3C0 = 0;
      unk_1ECE3F3C8 = &ggl::patternedRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3F3D0 = 0;
      unk_1ECE3F3D8 = &ggl::patternedRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3F3E8 = 0;
      unk_1ECE3F3F0 = 0;
      qword_1ECE3F3E0 = 0;
    }
  }
}

void sub_19F388AA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::components::Material>::emplace(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v26 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(a1 + 32), (uint64_t)&v26);
  if ((v6 & 1) != 0)
  {
    v15 = *(_QWORD **)(a1 + 88);
    if ((unint64_t)v15 >= *(_QWORD *)(a1 + 96))
    {
      v19 = std::vector<md::components::Material>::__emplace_back_slow_path<md::components::Material&>((char **)(a1 + 80), a3);
    }
    else
    {
      *v15 = *a3;
      v15[1] = a3[1];
      v16 = a3[2];
      v15[2] = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = (char *)(v15 + 3);
    }
    *(_QWORD *)(a1 + 88) = v19;
    v12 = *(_QWORD *)(a1 + 248);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 80) + 24 * (((uint64_t)v5 - *(_QWORD *)(a1 + 56)) >> 3);
    *(_QWORD *)v7 = *a3;
    v8 = *(_OWORD *)(a3 + 1);
    a3[1] = 0;
    a3[2] = 0;
    v9 = *(std::__shared_weak_count **)(v7 + 16);
    *(_OWORD *)(v7 + 8) = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = *(_QWORD *)(a1 + 248);
    if (v7 != *(_QWORD *)(a1 + 88))
    {
      v13 = *(_QWORD **)(a1 + 128);
      if (v13)
      {
        while (1)
        {
          v28 = &v26;
          v29 = 1;
          v27 = v12;
          v14 = v13[6];
          if (!v14)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v14 + 48))(v14, &v27, &v28);
          v13 = (_QWORD *)*v13;
          if (!v13)
            return;
        }
LABEL_23:
        std::__throw_bad_function_call[abi:nn180100]();
        gdc::FallbackCollector::addFallbackNode(v22, v23, v24, v25);
        return;
      }
      return;
    }
  }
  v20 = *(_QWORD **)(a1 + 176);
  if (v20)
  {
    while (1)
    {
      v28 = &v26;
      v29 = 1;
      v27 = v12;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v27, &v28);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_23;
  }
}

uint64_t gdc::FallbackCollector::addFallbackNode(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  BOOL v4;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int64x2_t v19;
  unsigned __int128 v20;
  unsigned __int128 v21;
  int8x16_t v22;
  int8x16_t v23;
  int64x2_t v24;
  char *v25;
  char *v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t **v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t **v43;
  unsigned int v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;

  if (*(_BYTE *)result)
    v4 = *a4 == 0;
  else
    v4 = 1;
  if (v4)
    return result;
  v7 = result;
  v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 <= 0x1E
    && ((v9 = 1 << v8, v10 = *(_DWORD *)(a2 + 8), v11 = vcvtmd_s64_f64((double)v10 / (double)(1 << v8)), v11 >= 0)
      ? (v12 = v11)
      : (v12 = -v11),
        v12 <= 0x7F))
  {
    v13 = v8 & 0xFFFF00FF | (v11 << 8);
    v16 = ((*(_DWORD *)(a2 + 4) % v9 + v9) % v9);
    v17.i64[0] = ((v10 % v9 + v9) % v9) | ((unint64_t)((v10 % v9 + v9) % v9) << 16);
    v17.i64[1] = v16 | (v16 << 16);
    v18.i64[0] = 0xFFFF0000FFFFLL;
    v18.i64[1] = 0xFFFF0000FFFFLL;
    v19 = (int64x2_t)vandq_s8(v17, v18);
    v20 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64(v19, 8uLL), (int8x16_t)v19) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
    v21 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v20, 4uLL), (int8x16_t)v20) & __PAIR128__(0xFF0FFF0FFF0FFF0FLL, 0xFF0FFF0FFF0FFF0FLL);
    v18.i64[0] = 0x3333333333333333;
    v18.i64[1] = 0x3333333333333333;
    v22 = vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v21, 2uLL), (int8x16_t)v21), v18);
    v23 = (int8x16_t)vshlq_u64((uint64x2_t)v22, (uint64x2_t)xmmword_19FFB2DB0);
    v22.i64[1] *= 2;
    v24 = (int64x2_t)vandq_s8(vorrq_s8(v23, v22), (int8x16_t)xmmword_19FFB2DC0);
    v14 = vorrq_s8((int8x16_t)v24, (int8x16_t)vdupq_laneq_s64(v24, 1)).u64[0];
    v15 = *(char **)(result + 96);
    if (!v15)
    {
LABEL_13:
      v25 = (char *)malloc_type_malloc(*(_QWORD *)(result + 88), 0x160B39uLL);
      v26 = v25;
      v28 = (uint64_t **)(v7 + 64);
      v27 = *(uint64_t **)(v7 + 64);
      if (v27)
      {
        while (1)
        {
          while (1)
          {
            v29 = (uint64_t **)v27;
            v30 = v27[4];
            if ((unint64_t)v25 >= v30)
              break;
            v27 = *v29;
            v28 = v29;
            if (!*v29)
              goto LABEL_20;
          }
          if (v30 >= (unint64_t)v25)
            break;
          v27 = v29[1];
          if (!v27)
          {
            v28 = v29 + 1;
            goto LABEL_20;
          }
        }
      }
      else
      {
        v29 = (uint64_t **)(v7 + 64);
LABEL_20:
        v31 = (uint64_t *)operator new(0x28uLL);
        v31[4] = (uint64_t)v26;
        *v31 = 0;
        v31[1] = 0;
        v31[2] = (uint64_t)v29;
        *v28 = v31;
        v32 = **(_QWORD **)(v7 + 56);
        if (v32)
        {
          *(_QWORD *)(v7 + 56) = v32;
          v33 = *v28;
        }
        else
        {
          v33 = v31;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 64), v33);
        ++*(_QWORD *)(v7 + 72);
      }
      v15 = *(char **)(v7 + 96);
      v34 = 104 * *(_QWORD *)(v7 + 80) - 104;
      if ((v34 & 0x8000000000000000) == 0)
      {
        v35 = &v26[v34];
        v36 = &v26[v34];
        do
        {
          *(_QWORD *)v36 = v15;
          v36 -= 104;
          v15 = v35;
          v35 = v36;
        }
        while (v36 >= v26);
        v15 = v36 + 104;
      }
    }
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = *(char **)(result + 96);
    if (!v15)
      goto LABEL_13;
  }
  *(_QWORD *)(v7 + 96) = *(_QWORD *)v15;
  result = gdc::LayerDataKey::LayerDataKey((uint64_t)v15, a3);
  v37 = a4[1];
  *((_QWORD *)v15 + 11) = *a4;
  *((_QWORD *)v15 + 12) = v37;
  if (v37)
  {
    v38 = (unint64_t *)(v37 + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v41 = v7 + 32;
  v40 = *(uint64_t **)(v7 + 32);
  if (v40)
  {
    v42 = v13 >> 8;
    while (1)
    {
      while (1)
      {
        v41 = (uint64_t)v40;
        v44 = *((unsigned __int8 *)v40 + 40);
        if (v44 > v13)
          break;
        LODWORD(v45) = *(unsigned __int8 *)(v41 + 41);
        if (v44 >= v13)
        {
          if ((_DWORD)v45 != (_DWORD)v42)
          {
LABEL_47:
            if ((char)v45 <= SBYTE1(v13))
              goto LABEL_48;
            goto LABEL_33;
          }
          v45 = v13 >> 8;
          if (v14 < *(_QWORD *)(v41 + 32))
            goto LABEL_33;
        }
        else
        {
          if ((_DWORD)v45 != (_DWORD)v42)
            goto LABEL_47;
          v45 = v13 >> 8;
          if (v14 >> (2 * (v13 - v44)) < *(_QWORD *)(v41 + 32))
            goto LABEL_33;
        }
LABEL_48:
        if (v44 >= v13)
        {
          if (v44 <= v13)
          {
            if ((_DWORD)v45 != (_DWORD)v42)
            {
LABEL_59:
              if ((char)v45 >= SBYTE1(v13))
                return result;
              goto LABEL_62;
            }
            v47 = *(_QWORD *)(v41 + 32);
          }
          else
          {
            v46 = *(unsigned __int8 *)(v41 + 41);
            if ((_DWORD)v42 != v46)
            {
              if (SBYTE1(v13) <= (char)v46)
                return result;
              goto LABEL_62;
            }
            v47 = *(_QWORD *)(v41 + 32) >> (2 * (v44 - v13));
          }
          if (v47 >= v14)
            return result;
        }
        else
        {
          if ((_DWORD)v45 != (_DWORD)v42)
            goto LABEL_59;
          if (*(_QWORD *)(v41 + 32) > v14 >> (2 * (v13 - v44)))
            return result;
        }
LABEL_62:
        v43 = (uint64_t **)(v41 + 8);
        v40 = *(uint64_t **)(v41 + 8);
        if (!v40)
          goto LABEL_65;
      }
      LODWORD(v45) = *(unsigned __int8 *)(v41 + 41);
      if ((_DWORD)v42 != (_DWORD)v45)
      {
        if (SBYTE1(v13) < (char)v45)
          goto LABEL_33;
        goto LABEL_48;
      }
      v45 = v13 >> 8;
      if (v14 > *(_QWORD *)(v41 + 32) >> (2 * (v44 - v13)))
        goto LABEL_48;
LABEL_33:
      v40 = *(uint64_t **)v41;
      v43 = (uint64_t **)v41;
      if (!*(_QWORD *)v41)
        goto LABEL_65;
    }
  }
  v43 = (uint64_t **)(v7 + 32);
LABEL_65:
  v48 = (uint64_t *)operator new(0x38uLL);
  v48[4] = v14;
  v48[5] = v13;
  v48[6] = (uint64_t)v15;
  *v48 = 0;
  v48[1] = 0;
  v48[2] = v41;
  *v43 = v48;
  v49 = **(_QWORD **)(v7 + 24);
  if (v49)
  {
    *(_QWORD *)(v7 + 24) = v49;
    v50 = *v43;
  }
  else
  {
    v50 = v48;
  }
  result = (uint64_t)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 32), v50);
  ++*(_QWORD *)(v7 + 40);
  return result;
}

#error "19F38938C: too big function (funcsize=0)"

void sub_19F3AC7F4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, md::LayoutContext **a19, md::LayoutContext **a20,uint64_t *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t *a27,uint64_t *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t *a37,uint64_t *a38,void *a39,uint64_t a40)
{
  void **v40;
  void **v41;
  void **v43;
  void *v44;
  void *v45;
  unint64_t v46;
  void **v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  id *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;

  STACK[0x270] = a1;
  v43 = (void **)*v40;
  if (*v40)
  {
    do
    {
      v47 = (void **)*v43;
      v48 = *((unsigned int *)v43 + 8);
      if ((_DWORD)v48 != -1)
        ((void (*)(unint64_t *, void **))off_1E42EF740[v48])(&STACK[0x9D0], v43 + 3);
      operator delete(v43);
      v43 = v47;
    }
    while (v47);
  }
  v44 = *v41;
  *v41 = 0;
  if (v44)
    operator delete(v44);
  v45 = (void *)STACK[0x380];

  MEMORY[0x1A1AF4E00](v41, 0x10A0C408EF24B1CLL);
  v46 = STACK[0x370];
  *(_QWORD *)v46 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v46 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v46 + 80));

  MEMORY[0x1A1AF4E00](v46, 0x10F1C4090BBBB8ELL);
  v49 = (void *)STACK[0x4C0];
  if (STACK[0x4C0])
  {
    STACK[0x4C8] = (unint64_t)v49;
    operator delete(v49);
  }

  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)&STACK[0x9B0]);
  md::Monitorable<md::ConfigValue<GEOConfigKeyInteger,int>>::~Monitorable(a22);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(a23);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(a24);
  std::unique_ptr<md::HomeQueueScheduler>::~unique_ptr[abi:nn180100](a38);
  v50 = *(_QWORD *)(STACK[0x3A0] + 4528);
  *(_QWORD *)(STACK[0x3A0] + 4528) = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x358]);
  v51 = *(_QWORD *)(STACK[0x3A0] + 4504);
  *(_QWORD *)(STACK[0x3A0] + 4504) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(a25);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(a26);
  v52 = STACK[0x3A0] + 1360;
  v53 = *(_QWORD *)(STACK[0x3A0] + 4336);
  *(_QWORD *)(STACK[0x3A0] + 4336) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = *(std::__shared_weak_count **)(STACK[0x3A0] + 1384);
  if (v54)
    std::__shared_weak_count::__release_weak(v54);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v52);

  v55 = STACK[0x3A0];
  v56 = STACK[0x3A0] + 1144;
  v57 = (uint64_t *)(STACK[0x3A0] + 1184);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a12);
  std::unique_ptr<md::DaVinciTransitionManager>::~unique_ptr[abi:nn180100](a37);
  v58 = *(_QWORD *)(v55 + 1192);
  *(_QWORD *)(v55 + 1192) = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = *v57;
  *v57 = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v56);
  v60 = *(_QWORD *)(STACK[0x3A0] + 1136);
  *(_QWORD *)(STACK[0x3A0] + 1136) = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = *(_QWORD *)(STACK[0x3A0] + 1128);
  *(_QWORD *)(STACK[0x3A0] + 1128) = 0;
  if (v61)
    std::default_delete<md::MapEngineSettings>::operator()[abi:nn180100](v61);
  v62 = *(_QWORD *)STACK[0x390];
  *(_QWORD *)STACK[0x390] = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  v63 = STACK[0x3A0];
  *(_QWORD *)(v63 + 1096) = &off_1E42B50F0;

  v64 = STACK[0x3A0];
  v65 = (id *)(STACK[0x3A0] + 848);
  std::unique_ptr<md::LayoutContext>::~unique_ptr[abi:nn180100](a19);
  std::unique_ptr<md::LayoutContext>::~unique_ptr[abi:nn180100](a20);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a29);
  std::unique_ptr<md::ARContext>::~unique_ptr[abi:nn180100](a27);
  ggl::Loader::~Loader((ggl::Loader *)(v64 + 1048));
  std::unique_ptr<gdc::Context>::~unique_ptr[abi:nn180100](a28);
  std::unique_ptr<md::MapDataAccess>::~unique_ptr[abi:nn180100](a32);
  std::unique_ptr<md::World>::~unique_ptr[abi:nn180100]((md::World **)STACK[0x340]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a30);
  v66 = *(_QWORD *)(v64 + 864);
  *(_QWORD *)(v64 + 864) = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  v67 = *a21;
  *a21 = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  objc_destroyWeak(v65);

  ecs2::Flow::~Flow((ecs2::Flow *)STACK[0x208]);
  gdc::Registry::~Registry((gdc::Registry *)STACK[0x260]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a40);
  v68 = *(_QWORD *)STACK[0x238];
  *(_QWORD *)STACK[0x238] = 0;
  if (v68)
    MEMORY[0x1A1AF4E00](v68, 0x20C4093837F09);
  v69 = *(_QWORD *)(STACK[0x3A0] + 104);
  *(_QWORD *)(STACK[0x3A0] + 104) = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v70 = *a14;
  *a14 = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a13);
  v71 = STACK[0x3A0];
  *(_QWORD *)(v71 + 40) = &off_1E42B5230;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x268]);
  _Unwind_Resume((_Unwind_Exception *)STACK[0x270]);
}

char *geo::linear_map<gdc::TypeInfo,std::shared_ptr<void>,std::equal_to<gdc::TypeInfo>,std::allocator<std::pair<gdc::TypeInfo,std::shared_ptr<void>>>,std::vector<std::pair<gdc::TypeInfo,std::shared_ptr<void>>>>::operator[](uint64_t a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(char **)a1;
  v3 = *(char **)(a1 + 8);
  v5 = *(char **)a1;
  if (*(char **)a1 != v3)
  {
    v5 = *(char **)a1;
    while (*a2 != *(_QWORD *)v5)
    {
      v5 += 40;
      if (v5 == v3)
        goto LABEL_7;
    }
  }
  if (v5 == v3)
  {
LABEL_7:
    v10 = *(_OWORD *)a2;
    v6 = a2[2];
    v12 = 0;
    v13 = 0;
    v11 = v6;
    if (v4 != v3)
    {
      while ((_QWORD)v10 != *(_QWORD *)v4)
      {
        v4 += 40;
        if (v4 == v3)
          goto LABEL_12;
      }
    }
    if (v4 == v3)
    {
LABEL_12:
      if ((unint64_t)v3 >= *(_QWORD *)(a1 + 16))
      {
        v8 = std::vector<std::pair<gdc::TypeInfo,std::shared_ptr<void>>>::__push_back_slow_path<std::pair<gdc::TypeInfo,std::shared_ptr<void>> const&>((char **)a1, (uint64_t)&v10);
        *(_QWORD *)(a1 + 8) = v8;
        v4 = v8 - 40;
      }
      else
      {
        v7 = a2[2];
        *(_OWORD *)v3 = *(_OWORD *)a2;
        *((_QWORD *)v3 + 3) = 0;
        *((_QWORD *)v3 + 4) = 0;
        *((_QWORD *)v3 + 2) = v7;
        *(_QWORD *)(a1 + 8) = v3 + 40;
        v4 = v3;
      }
    }
    v5 = v4;
  }
  return v5 + 24;
}

void sub_19F3B2860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry::~CacheEntry((uint64_t)&a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::World::setPreferredUnits(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  gdc::LayerDataStore *v9;
  uint64_t v10;
  uint64_t v11;
  gdc::LayerDataSource *v12;
  uint64_t v13;
  uint64_t v14;
  gdc::LayerDataStore *v15;
  uint64_t v16;
  uint64_t v17;
  gdc::LayerDataSource *v18;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 56);
  *(_BYTE *)(a1 + 392) = a2;
  v4 = *(_QWORD *)(v3 + 32);
  v5 = *(_QWORD *)(v3 + 40);
  if (v4 != v5)
  {
    while (*(_WORD *)v4 != 44)
    {
      v4 += 16;
      if (v4 == v5)
        return;
    }
  }
  if (v4 != v5)
  {
    v6 = *(_QWORD *)(v4 + 8);
    if (v6)
    {
      if (*(unsigned __int8 *)(v6 + 618) != a2)
      {
        *(_BYTE *)(v6 + 618) = a2;
        v7 = *(_QWORD *)(a1 + 80);
        v8 = *(_QWORD *)(a1 + 88);
        if (v7 != v8)
        {
          while (*(_WORD *)v7 != 65)
          {
            v7 += 16;
            if (v7 == v8)
              goto LABEL_15;
          }
        }
        if (v7 != v8)
        {
          v9 = *(gdc::LayerDataStore **)(v7 + 8);
          if (v9)
            gdc::LayerDataStore::clearAllData(v9);
        }
LABEL_15:
        v10 = *(_QWORD *)(a1 + 32);
        v11 = *(_QWORD *)(a1 + 40);
        if (v10 != v11)
        {
          while (*(_WORD *)v10 != 65)
          {
            v10 += 16;
            if (v10 == v11)
              goto LABEL_22;
          }
        }
        if (v10 != v11)
        {
          v12 = *(gdc::LayerDataSource **)(v10 + 8);
          if (v12)
            gdc::LayerDataSource::cancelAllLayerDataRequests(v12);
        }
LABEL_22:
        v13 = *(_QWORD *)(a1 + 80);
        v14 = *(_QWORD *)(a1 + 88);
        if (v13 != v14)
        {
          while (*(_WORD *)v13 != 66)
          {
            v13 += 16;
            if (v13 == v14)
              goto LABEL_29;
          }
        }
        if (v13 != v14)
        {
          v15 = *(gdc::LayerDataStore **)(v13 + 8);
          if (v15)
            gdc::LayerDataStore::clearAllData(v15);
        }
LABEL_29:
        v16 = *(_QWORD *)(a1 + 32);
        v17 = *(_QWORD *)(a1 + 40);
        if (v16 != v17)
        {
          while (*(_WORD *)v16 != 66)
          {
            v16 += 16;
            if (v16 == v17)
              return;
          }
        }
        if (v16 != v17)
        {
          v18 = *(gdc::LayerDataSource **)(v16 + 8);
          if (v18)
            gdc::LayerDataSource::cancelAllLayerDataRequests(v18);
        }
      }
    }
  }
}

void md::RouteAnnotationSupport::setTrafficFeatures(md::RouteAnnotationSupport *this, NSArray *a2)
{
  uint64_t i;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t j;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t k;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  id *v19;
  id *v20;
  unint64_t v21;
  uint64_t v22;
  id *v23;
  id *v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  int8x8_t v28;
  uint8x8_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  id *v36;
  id v37;
  id *v38;
  _QWORD *v39;
  id *v40;
  _QWORD *v41;
  id *v42;
  uint64_t v43;
  unint64_t v44;
  id *v45;
  id *v46;
  id *v47;
  unint64_t v48;
  void *v49;
  int8x8_t v50;
  unint64_t v51;
  uint8x8_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  uint8x8_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  float v68;
  float v69;
  _BOOL8 v70;
  unint64_t v71;
  unint64_t v72;
  size_t v73;
  int8x8_t v74;
  unint64_t v75;
  uint8x8_t v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t m;
  uint64_t v84;
  uint64_t n;
  std::__shared_weak_count *v86;
  unint64_t *p_shared_owners;
  unint64_t v88;
  unsigned __int8 v89;
  float *v90;
  unsigned __int8 v91;
  id *v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  uint8x8_t v97;
  std::__shared_weak_count *v98;
  id v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  id v104;
  id *v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unsigned __int8 v110;
  unsigned __int8 v111;
  unsigned __int8 v112;
  uint64_t *v113;
  uint64_t v114;
  _QWORD *shared_owners;
  id v116;
  uint64_t v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count_vtbl *shared_weak_owners;
  void (__cdecl **v120)(std::__shared_weak_count *__hidden);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  std::__shared_weak_count_vtbl *v127;
  uint64_t v128;
  id v129;
  id *v130;
  _QWORD *v131;
  unint64_t v132;
  uint64_t v133;
  float v134;
  _BOOL8 v135;
  unint64_t v136;
  unint64_t v137;
  int8x8_t prime;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  _QWORD **v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *ii;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint8x8_t v150;
  uint64_t v151;
  _QWORD *v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  std::__shared_weak_count_vtbl *v159;
  void *v160;
  id v161;
  double v162;
  double v163;
  float v164;
  int v165;
  int v166;
  unint64_t *v167;
  unint64_t v168;
  _QWORD *v169;
  _OWORD *v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  unint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  _OWORD *v190;
  __int128 *v191;
  uint64_t v192;
  __int128 v193;
  _QWORD *v194;
  uint64_t v195;
  unint64_t v196;
  _QWORD *v197;
  unint64_t v198;
  unint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  char *v208;
  char *v209;
  char *v210;
  char *v211;
  unint64_t v212;
  uint64_t v213;
  char *v214;
  char *v215;
  uint64_t v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  char *v220;
  void *v221;
  uint64_t v222;
  _OWORD *v223;
  __int128 *v224;
  uint64_t v225;
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  geo::read_write_lock *v233;
  const char *v234;
  malloc_zone_t *zone;
  uint64_t v236;
  geo::read_write_lock *v237;
  const char *v238;
  malloc_zone_t *v239;
  uint64_t v240;
  geo::read_write_lock *v241;
  const char *v242;
  malloc_zone_t *v243;
  _QWORD *v244;
  id v245;
  uint64_t v246;
  unint64_t v247;
  id v248;
  unsigned int v249;
  id v250;
  id *v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  double v257;
  double v258;
  std::__shared_weak_count *v259;
  std::__shared_weak_count *v260;
  uint64_t v261;
  unint64_t *v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t *v265;
  unint64_t v266;
  unsigned __int8 v267;
  unsigned __int8 v268;
  unsigned __int8 v269;
  id *v270;
  id *jj;
  id v272;
  void *v273;
  _QWORD *v274;
  id v275;
  uint64_t v276;
  float v277;
  int v278;
  int v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  uint64_t v283;
  std::__shared_weak_count_vtbl *v284;
  uint64_t v285;
  void (__cdecl *v286)(std::__shared_weak_count *__hidden);
  void (__cdecl *v287)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count_vtbl *v288;
  std::__shared_weak_count_vtbl *v289;
  void (__cdecl **v290)(std::__shared_weak_count *__hidden);
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  void (__cdecl **v296)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count_vtbl *v297;
  _QWORD *v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  _QWORD *v302;
  void (__cdecl *v303)(std::__shared_weak_count *__hidden);
  uint64_t v304;
  std::__shared_weak_count_vtbl *v305;
  void *v306;
  void (__cdecl *v307)(std::__shared_weak_count *__hidden);
  unsigned int v308;
  unsigned int v309;
  uint64_t v310;
  void (__cdecl **v311)(std::__shared_weak_count *__hidden);
  __int128 *v312;
  uint64_t v313;
  __int128 v314;
  __int128 v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count **v318;
  _OWORD *v319;
  unint64_t *v320;
  unint64_t v321;
  uint64_t v322;
  _QWORD *v323;
  unint64_t v324;
  _QWORD *v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  _QWORD *v337;
  uint64_t v338;
  _OWORD *v339;
  __int128 *v340;
  uint64_t v341;
  __int128 v342;
  uint64_t v343;
  uint64_t v344;
  id *v345;
  id *kk;
  uint64_t v347;
  uint64_t v348;
  geo::read_write_lock *v349;
  const char *v350;
  malloc_zone_t *v351;
  uint64_t v352;
  geo::read_write_lock *v353;
  const char *v354;
  malloc_zone_t *v355;
  uint64_t v356;
  geo::read_write_lock *v357;
  const char *v358;
  malloc_zone_t *v359;
  uint64_t v360;
  unsigned __int8 v361;
  uint64_t v362;
  uint64_t v363;
  _QWORD *v364;
  _QWORD *v365;
  _QWORD *v366;
  uint64_t v367;
  uint64_t v368;
  void *v369;
  void *v370;
  uint64_t v371;
  uint64_t v372;
  __int128 v373;
  __int128 v374;
  NSArray *v375;
  char *v376;
  uint64_t *v377;
  void *v378;
  _QWORD *v379;
  uint64_t v380;
  std::__shared_weak_count *v381;
  std::__shared_weak_count *v382;
  id *v383;
  uint64_t *v384;
  id *v385;
  id *v386;
  _QWORD *v387;
  std::__shared_weak_count *v388;
  std::__shared_weak_count *v389;
  id v390;
  _QWORD *v391;
  unint64_t v392;
  uint64_t v393;
  _QWORD *v394;
  uint64_t v395;
  unint64_t v396;
  float v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  id *v402;
  uint64_t *v403;
  uint64_t v404;
  id v405;
  _BYTE v406[128];
  uint64_t v407;

  v407 = *MEMORY[0x1E0C80C00];
  v375 = a2;
  if (-[NSArray isEqualToArray:](v375, "isEqualToArray:", *((_QWORD *)this + 2)))
    goto LABEL_524;
  v4 = *((_QWORD *)this + 10);
  for (i = *((_QWORD *)this + 11); i != v4; i -= 8)
  {
    v5 = *(void **)(i - 8);

  }
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 11) = v4;
  for (j = *((_QWORD *)this + 7); j != v6; j -= 8)
  {
    v8 = *(void **)(j - 8);

  }
  *((_QWORD *)this + 7) = v6;
  v9 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithArray:copyItems:", v375, 0);
  v10 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v9;

  v398 = 0u;
  v399 = 0u;
  v400 = 0u;
  v401 = 0u;
  v11 = *((id *)this + 2);
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v398, v406, 16);
  if (v12)
  {
    v13 = *(_QWORD *)v399;
    do
    {
      for (k = 0; k != v12; ++k)
      {
        if (*(_QWORD *)v399 != v13)
          objc_enumerationMutation(v11);
        v16 = *(_QWORD **)(*((_QWORD *)&v398 + 1) + 8 * k);
        v391 = v16;
        if (objc_msgSend(v16, "isIncident"))
        {
          v17 = (_QWORD *)*((_QWORD *)this + 11);
          if ((unint64_t)v17 >= *((_QWORD *)this + 12))
          {
            *((_QWORD *)this + 11) = std::vector<VKTrafficFeature * {__strong},geo::StdAllocator<VKTrafficFeature * {__strong},mdm::Allocator>>::__emplace_back_slow_path<VKTrafficFeature * const {__strong}&>((uint64_t)this + 80, (id *)&v391);
          }
          else
          {
            if (v17)
              *v17 = v16;
            *((_QWORD *)this + 11) = v17 + 1;
          }
        }
        else
        {
          v18 = (_QWORD *)*((_QWORD *)this + 7);
          if ((unint64_t)v18 >= *((_QWORD *)this + 8))
          {
            v15 = std::vector<VKTrafficFeature * {__strong},geo::StdAllocator<VKTrafficFeature * {__strong},mdm::Allocator>>::__emplace_back_slow_path<VKTrafficFeature * const {__strong}&>((uint64_t)this + 48, (id *)&v391);
          }
          else
          {
            if (v18)
              *v18 = v16;
            v15 = v18 + 1;
          }
          *((_QWORD *)this + 7) = v15;
        }
      }
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v398, v406, 16);
    }
    while (v12);
  }

  v19 = (id *)*((_QWORD *)this + 6);
  v20 = (id *)*((_QWORD *)this + 7);
  v21 = 126 - 2 * __clz(v20 - v19);
  if (v20 == v19)
    v22 = 0;
  else
    v22 = v21;
  std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*,false>(v19, v20, v22, 1);
  v24 = (id *)*((_QWORD *)this + 6);
  v23 = (id *)*((_QWORD *)this + 7);
  v387 = (_QWORD *)((char *)this + 176);
  v25 = *((_QWORD *)this + 27);
  if (v25 != v23 - v24)
    goto LABEL_153;
  if (v24 == v23)
    goto LABEL_524;
  do
  {
    v26 = *v24;
    objc_msgSend(v26, "uniqueIdentifier");
    v12 = objc_claimAutoreleasedReturnValue();
    v27 = objc_msgSend((id)v12, "hash");

    v28 = *(int8x8_t *)((char *)this + 184);
    if (!*(_QWORD *)&v28)
      goto LABEL_152;
    v29 = (uint8x8_t)vcnt_s8(v28);
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL)
    {
      v30 = v27;
      if (v27 >= *(_QWORD *)&v28)
        v30 = v27 % *(_QWORD *)&v28;
    }
    else
    {
      v30 = (*(_QWORD *)&v28 - 1) & v27;
    }
    v31 = *(_QWORD **)(*v387 + 8 * v30);
    if (!v31 || (v32 = (_QWORD *)*v31) == 0)
    {
LABEL_152:

      v25 = *((_QWORD *)this + 27);
LABEL_153:
      if (v25)
      {
        v80 = (uint64_t *)*((_QWORD *)this + 25);
        if (v80)
        {
          do
          {
            v81 = (uint64_t *)*v80;

            (*(void (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)this + 26) + 40))(*((_QWORD *)this + 26), v80, 32);
            v80 = v81;
          }
          while (v81);
        }
        *((_QWORD *)this + 25) = 0;
        v82 = *((_QWORD *)this + 23);
        if (v82)
        {
          for (m = 0; m != v82; ++m)
            *(_QWORD *)(*v387 + 8 * m) = 0;
        }
        *((_QWORD *)this + 27) = 0;
      }
      *((_QWORD *)this + 19) = *((_QWORD *)this + 18);
      v84 = *((_QWORD *)this + 14);
      v376 = (char *)this + 112;
      v377 = (uint64_t *)((char *)this + 144);
      for (n = *((_QWORD *)this + 15); n != v84; n -= 16)
      {
        v86 = *(std::__shared_weak_count **)(n - 8);
        if (v86)
        {
          p_shared_owners = (unint64_t *)&v86->__shared_owners_;
          do
            v88 = __ldaxr(p_shared_owners);
          while (__stlxr(v88 - 1, p_shared_owners));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
      }
      *((_QWORD *)this + 15) = v84;
      v391 = 0;
      v392 = 0;
      v90 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
      {
        v371 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v371, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v393 = mdm::Allocator::instance(void)::alloc;
      v394 = 0;
      {
        v372 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v372, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v395 = mdm::Allocator::instance(void)::alloc;
      v396 = 0;
      v397 = 1.0;
      v92 = (id *)*((_QWORD *)this + 6);
      v386 = (id *)*((_QWORD *)this + 7);
      if (v92 != v386)
      {
        v373 = xmmword_19FFB2E80;
        while (1)
        {
          v390 = *v92;
          if (objc_msgSend(v390, "isGrouped"))
          {
            v93 = objc_msgSend(v390, "groupIdentifier");
            v94 = v93;
            v95 = v93;
            v96 = v392;
            if (v392)
            {
              v97 = (uint8x8_t)vcnt_s8((int8x8_t)v392);
              v97.i16[0] = vaddlv_u8(v97);
              if (v97.u32[0] > 1uLL)
              {
                v12 = v93;
                if (v392 <= v93)
                  v12 = v93 % v392;
              }
              else
              {
                v12 = (v392 - 1) & v93;
              }
              v130 = (id *)v391[v12];
              if (v130)
              {
                v131 = *v130;
                if (*v130)
                {
                  if (v97.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v133 = v131[1];
                      if (v133 == v93)
                      {
                        if (*((_DWORD *)v131 + 4) == v93)
                          goto LABEL_334;
                      }
                      else if ((v133 & (v392 - 1)) != v12)
                      {
                        goto LABEL_220;
                      }
                      v131 = (_QWORD *)*v131;
                      if (!v131)
                        goto LABEL_220;
                    }
                  }
                  do
                  {
                    v132 = v131[1];
                    if (v132 == v93)
                    {
                      if (*((_DWORD *)v131 + 4) == v93)
                        goto LABEL_334;
                    }
                    else
                    {
                      if (v132 >= v392)
                        v132 %= v392;
                      if (v132 != v12)
                        break;
                    }
                    v131 = (_QWORD *)*v131;
                  }
                  while (v131);
                }
              }
            }
LABEL_220:
            v131 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v395 + 16))(v395, 48, 8);
            v402 = (id *)v131;
            v403 = &v395;
            *v131 = 0;
            v131[1] = v95;
            *((_DWORD *)v131 + 4) = v94;
            v131[4] = 0;
            v131[5] = 0;
            v131[3] = 0;
            LOBYTE(v404) = 1;
            v134 = (float)(v396 + 1);
            if (!v96 || (float)(v397 * (float)v96) < v134)
            {
              v135 = (v96 & (v96 - 1)) != 0;
              if (v96 < 3)
                v135 = 1;
              v136 = v135 | (2 * v96);
              v137 = vcvtps_u32_f32(v134 / v397);
              if (v136 <= v137)
                prime = (int8x8_t)v137;
              else
                prime = (int8x8_t)v136;
              if (*(_QWORD *)&prime == 1)
              {
                prime = (int8x8_t)2;
              }
              else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
              {
                prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
              }
              v96 = v392;
              if (*(_QWORD *)&prime > v392)
              {
LABEL_232:
                v139 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v393 + 16))(v393, 8 * *(_QWORD *)&prime, 8);
                v140 = v391;
                v391 = v139;
                if (v140)
                  (*(void (**)(uint64_t, _QWORD *, unint64_t))(*(_QWORD *)v393 + 40))(v393, v140, 8 * v392);
                v141 = 0;
                v392 = (unint64_t)prime;
                do
                  v391[v141++] = 0;
                while (*(_QWORD *)&prime != v141);
                v142 = (_QWORD **)v394;
                if (!v394)
                  goto LABEL_310;
                v143 = v394[1];
                v144 = *(_QWORD *)&prime - 1;
                if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) == 0)
                {
                  v145 = v143 & v144;
                  v391[v145] = &v394;
                  for (ii = *v142; *v142; ii = *v142)
                  {
                    v147 = ii[1] & v144;
                    if (v147 == v145)
                    {
                      v142 = (_QWORD **)ii;
                    }
                    else if (v391[v147])
                    {
                      *v142 = (_QWORD *)*ii;
                      v148 = v147;
                      *ii = *(_QWORD *)v391[v148];
                      *(_QWORD *)v391[v148] = ii;
                    }
                    else
                    {
                      v391[v147] = v142;
                      v142 = (_QWORD **)ii;
                      v145 = v147;
                    }
                  }
                  goto LABEL_310;
                }
                if (v143 >= *(_QWORD *)&prime)
                  v143 %= *(_QWORD *)&prime;
                v391[v143] = &v394;
                v194 = *v142;
                if (!*v142)
                {
LABEL_310:
                  v96 = (unint64_t)prime;
                  goto LABEL_311;
                }
                while (2)
                {
                  v196 = v194[1];
                  if (v196 >= *(_QWORD *)&prime)
                    v196 %= *(_QWORD *)&prime;
                  if (v196 != v143)
                  {
                    if (!v391[v196])
                    {
                      v391[v196] = v142;
LABEL_315:
                      v142 = (_QWORD **)v194;
                      v194 = (_QWORD *)*v194;
                      v143 = v196;
                      if (!v194)
                        goto LABEL_310;
                      continue;
                    }
                    *v142 = (_QWORD *)*v194;
                    v195 = v196;
                    *v194 = *(_QWORD *)v391[v195];
                    *(_QWORD *)v391[v195] = v194;
                    v194 = v142;
                  }
                  break;
                }
                v196 = v143;
                goto LABEL_315;
              }
              if (*(_QWORD *)&prime < v392)
              {
                v149 = vcvtps_u32_f32((float)v396 / v397);
                if (v392 < 3
                  || (v150 = (uint8x8_t)vcnt_s8((int8x8_t)v392), v150.i16[0] = vaddlv_u8(v150), v150.u32[0] > 1uLL))
                {
                  v149 = std::__next_prime(v149);
                }
                else
                {
                  v151 = 1 << -(char)__clz(v149 - 1);
                  if (v149 >= 2)
                    v149 = v151;
                }
                if (*(_QWORD *)&prime <= v149)
                  prime = (int8x8_t)v149;
                if (*(_QWORD *)&prime >= v96)
                {
                  v96 = v392;
                }
                else
                {
                  if (prime)
                    goto LABEL_232;
                  v231 = v391;
                  v391 = 0;
                  if (v231)
                    (*(void (**)(uint64_t, _QWORD *, unint64_t))(*(_QWORD *)v393 + 40))(v393, v231, 8 * v392);
                  v96 = 0;
                  v392 = 0;
                }
              }
LABEL_311:
              if ((v96 & (v96 - 1)) != 0)
              {
                if (v96 <= v95)
                  v12 = v95 % v96;
                else
                  v12 = v95;
              }
              else
              {
                v12 = (v96 - 1) & v95;
              }
            }
            v197 = (_QWORD *)v391[v12];
            if (v197)
            {
              *v131 = *v197;
              goto LABEL_332;
            }
            *v131 = v394;
            v394 = v131;
            v391[v12] = &v394;
            if (*v131)
            {
              v198 = *(_QWORD *)(*v131 + 8);
              if ((v96 & (v96 - 1)) != 0)
              {
                if (v198 >= v96)
                  v198 %= v96;
              }
              else
              {
                v198 &= v96 - 1;
              }
              v197 = &v391[v198];
LABEL_332:
              *v197 = v131;
            }
            ++v396;
LABEL_334:
            v200 = (_QWORD *)v131[4];
            v199 = v131[5];
            if ((unint64_t)v200 >= v199)
            {
              v202 = v131[3];
              v203 = (char *)v200 - v202;
              v204 = ((uint64_t)v200 - v202) >> 3;
              if ((unint64_t)(v204 + 1) >> 61)
                abort();
              v205 = v199 - v202;
              v206 = v205 >> 2;
              if (v205 >> 2 <= (unint64_t)(v204 + 1))
                v206 = v204 + 1;
              if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFF8)
                v207 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v207 = v206;
              if (v207)
              {
                if (v207 >> 61)
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v208 = (char *)operator new(8 * v207);
              }
              else
              {
                v208 = 0;
              }
              v209 = &v208[8 * v204];
              v12 = (uint64_t)&v208[8 * v207];
              *(_QWORD *)v209 = v390;
              v201 = v209 + 8;
              v210 = (char *)v131[3];
              v211 = (char *)v131[4];
              if (v211 == v210)
              {
                v131[3] = v209;
                v131[4] = v201;
                v131[5] = v12;
              }
              else
              {
                v212 = v211 - v210 - 8;
                if (v212 <= 0x77
                  || &v211[-(v212 & 0xFFFFFFFFFFFFFFF8) - 8] < v209
                  && &v203[(_QWORD)v208 - (v212 & 0xFFFFFFFFFFFFFFF8) - 8] < v211)
                {
                  goto LABEL_543;
                }
                v213 = (v212 >> 3) + 1;
                v214 = &v208[8 * v204 - 16];
                v215 = v211 - 32;
                v216 = v213 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v218 = *(_OWORD *)v215;
                  v217 = *((_OWORD *)v215 + 1);
                  *(_OWORD *)v215 = 0uLL;
                  *((_OWORD *)v215 + 1) = 0uLL;
                  v215 -= 32;
                  *((_OWORD *)v214 - 1) = v218;
                  *(_OWORD *)v214 = v217;
                  v214 -= 32;
                  v216 -= 4;
                }
                while (v216);
                v209 -= 8 * (v213 & 0x3FFFFFFFFFFFFFFCLL);
                v211 -= 8 * (v213 & 0x3FFFFFFFFFFFFFFCLL);
                if (v213 != (v213 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_543:
                  do
                  {
                    v219 = *((_QWORD *)v211 - 1);
                    v211 -= 8;
                    *(_QWORD *)v211 = 0;
                    *((_QWORD *)v209 - 1) = v219;
                    v209 -= 8;
                  }
                  while (v211 != v210);
                }
                v211 = (char *)v131[3];
                v220 = (char *)v131[4];
                v131[3] = v209;
                v131[4] = v201;
                v131[5] = v12;
                while (v220 != v211)
                {
                  v221 = (void *)*((_QWORD *)v220 - 1);
                  v220 -= 8;

                }
              }
              if (v211)
                operator delete(v211);
            }
            else
            {
              *v200 = v390;
              v201 = v200 + 1;
            }
            v131[4] = v201;
            goto LABEL_371;
          }
          v98 = (std::__shared_weak_count *)operator new(0x1A8uLL);
          v98->__shared_owners_ = 0;
          v98->__shared_weak_owners_ = 0;
          v98->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD6C8;
          v99 = v390;
          v100 = *((_QWORD *)this + 4);
          v101 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
          if (v101)
          {
            v102 = (unint64_t *)&v101->__shared_owners_;
            do
              v103 = __ldxr(v102);
            while (__stxr(v103 + 1, v102));
          }
          v12 = *(_QWORD *)this;
          v104 = v99;
          v405 = v104;
          objc_msgSend(v104, "mercatorPoint");
          v402 = v105;
          v403 = v106;
          v404 = v107;
          md::PointLabelFeatureBase::PointLabelFeatureBase((uint64_t)&v98[1], (uint64_t)&v402);
          v98[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42A4208;
          v98[11].__shared_owners_ = v100;
          v98[11].__shared_weak_owners_ = (uint64_t)v101;
          if (v101)
          {
            v108 = (unint64_t *)&v101->__shared_owners_;
            do
              v109 = __ldxr(v108);
            while (__stxr(v109 + 1, v108));
          }
          v98[12].__vftable = 0;
          v98[12].__shared_owners_ = 0;
          v98[12].__shared_weak_owners_ = 0;
          {
            v232 = operator new();
            *(_QWORD *)(v232 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v232 + 24) = "VectorKitLabels";
            *(_OWORD *)(v232 + 32) = v373;
            *(_QWORD *)v232 = &off_1E42B5668;
            *(_QWORD *)(v232 + 8) = "VectorKitLabels";
            *(_OWORD *)(v232 + 72) = 0u;
            *(_OWORD *)(v232 + 88) = 0u;
            *(_OWORD *)(v232 + 104) = 0u;
            *(_OWORD *)(v232 + 120) = 0u;
            *(_OWORD *)(v232 + 136) = 0u;
            *(_OWORD *)(v232 + 152) = 0u;
            *(_OWORD *)(v232 + 168) = 0u;
            *(_OWORD *)(v232 + 184) = 0u;
            *(_OWORD *)(v232 + 200) = 0u;
            *(_OWORD *)(v232 + 216) = 0u;
            *(_OWORD *)(v232 + 232) = 0u;
            *(_QWORD *)(v232 + 248) = 0;
            *(_OWORD *)(v232 + 56) = 0u;
            v233 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v232 + 56), 0);
            if ((_DWORD)v233)
              geo::read_write_lock::logFailure(v233, (uint64_t)"initialization", v234);
            zone = malloc_create_zone(0, 0);
            *(_QWORD *)(v232 + 48) = zone;
            malloc_set_zone_name(zone, "VectorKitLabels");
            *(_QWORD *)(v232 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            v90 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
            mdm::Allocator::instance(void)::alloc = v232;
          }
          v98[13].__vftable = (std::__shared_weak_count_vtbl *)*((_QWORD *)v90 + 299);
          v98[13].__shared_owners_ = 0;
          v98[13].__shared_weak_owners_ = 0;
          v98[14].__vftable = 0;
          {
            v236 = operator new();
            *(_QWORD *)(v236 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v236 + 24) = "VectorKitLabels";
            *(_OWORD *)(v236 + 32) = v373;
            *(_QWORD *)v236 = &off_1E42B5668;
            *(_QWORD *)(v236 + 8) = "VectorKitLabels";
            *(_OWORD *)(v236 + 72) = 0u;
            *(_OWORD *)(v236 + 88) = 0u;
            *(_OWORD *)(v236 + 104) = 0u;
            *(_OWORD *)(v236 + 120) = 0u;
            *(_OWORD *)(v236 + 136) = 0u;
            *(_OWORD *)(v236 + 152) = 0u;
            *(_OWORD *)(v236 + 168) = 0u;
            *(_OWORD *)(v236 + 184) = 0u;
            *(_OWORD *)(v236 + 200) = 0u;
            *(_OWORD *)(v236 + 216) = 0u;
            *(_OWORD *)(v236 + 232) = 0u;
            *(_QWORD *)(v236 + 248) = 0;
            *(_OWORD *)(v236 + 56) = 0u;
            v237 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v236 + 56), 0);
            if ((_DWORD)v237)
              geo::read_write_lock::logFailure(v237, (uint64_t)"initialization", v238);
            v239 = malloc_create_zone(0, 0);
            *(_QWORD *)(v236 + 48) = v239;
            malloc_set_zone_name(v239, "VectorKitLabels");
            *(_QWORD *)(v236 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            v90 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
            mdm::Allocator::instance(void)::alloc = v236;
          }
          v98[14].__shared_owners_ = *((_QWORD *)v90 + 299);
          v98[14].__shared_weak_owners_ = 0;
          v98[15].__vftable = 0;
          v98[15].__shared_owners_ = 0;
          {
            v240 = operator new();
            *(_QWORD *)(v240 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v240 + 24) = "VectorKitLabels";
            *(_OWORD *)(v240 + 32) = v373;
            *(_QWORD *)v240 = &off_1E42B5668;
            *(_QWORD *)(v240 + 8) = "VectorKitLabels";
            *(_OWORD *)(v240 + 72) = 0u;
            *(_OWORD *)(v240 + 88) = 0u;
            *(_OWORD *)(v240 + 104) = 0u;
            *(_OWORD *)(v240 + 120) = 0u;
            *(_OWORD *)(v240 + 136) = 0u;
            *(_OWORD *)(v240 + 152) = 0u;
            *(_OWORD *)(v240 + 168) = 0u;
            *(_OWORD *)(v240 + 184) = 0u;
            *(_OWORD *)(v240 + 200) = 0u;
            *(_OWORD *)(v240 + 216) = 0u;
            *(_OWORD *)(v240 + 232) = 0u;
            *(_QWORD *)(v240 + 248) = 0;
            *(_OWORD *)(v240 + 56) = 0u;
            v241 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v240 + 56), 0);
            if ((_DWORD)v241)
              geo::read_write_lock::logFailure(v241, (uint64_t)"initialization", v242);
            v243 = malloc_create_zone(0, 0);
            *(_QWORD *)(v240 + 48) = v243;
            malloc_set_zone_name(v243, "VectorKitLabels");
            *(_QWORD *)(v240 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            v90 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
            mdm::Allocator::instance(void)::alloc = v240;
          }
          v113 = &v98[13].__shared_owners_;
          v98[15].__shared_weak_owners_ = *((_QWORD *)v90 + 299);
          v98[16].__vftable = (std::__shared_weak_count_vtbl *)objc_msgSend(v104, "routeOffset", v373);
          objc_msgSend(v104, "routeOffsetInMeters");
          v98[16].__shared_owners_ = v114;
          LOBYTE(v98[16].__shared_weak_owners_) = 0;
          BYTE4(v98[16].__shared_weak_owners_) = 0;
          BYTE4(v98[17].__shared_owners_) = objc_msgSend(v104, "collisionPriority");
          shared_owners = (_QWORD *)v98[12].__shared_owners_;
          if ((unint64_t)shared_owners >= v98[12].__shared_weak_owners_)
          {
            v117 = std::vector<geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKTrafficFeature * {__strong}&,geo::memory_management_mode const&>((uint64_t *)&v98[12], &v405);
          }
          else
          {
            if (shared_owners)
            {
              v116 = v104;
              *shared_owners = &off_1E42B4CB0;
              shared_owners[1] = v116;
            }
            v117 = (uint64_t)(shared_owners + 3);
          }
          v98[12].__shared_owners_ = v117;
          shared_weak_owners = (std::__shared_weak_count_vtbl *)v98[13].__shared_weak_owners_;
          v118 = v98[14].__vftable;
          if (shared_weak_owners < v118)
          {
            if (shared_weak_owners)
              shared_weak_owners->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v405;
            v120 = &shared_weak_owners->~__shared_weak_count_0;
            goto LABEL_266;
          }
          v121 = ((uint64_t)shared_weak_owners - *v113) >> 3;
          if ((unint64_t)(v121 + 1) >> 61)
            abort();
          v122 = (uint64_t)v118 - *v113;
          v123 = v122 >> 2;
          if (v122 >> 2 <= (unint64_t)(v121 + 1))
            v123 = v121 + 1;
          v124 = (unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v123;
          v380 = v12;
          if (v124)
          {
            v125 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v98[14].__shared_owners_ + 16))(v98[14].__shared_owners_, 8 * v124, 8);
            v126 = (_QWORD *)(v125 + 8 * v121);
            v127 = (std::__shared_weak_count_vtbl *)(v125 + 8 * v124);
            if (v125)
            {
              v128 = v125 + 8 * v124;
              v129 = v405;
              v127 = (std::__shared_weak_count_vtbl *)v128;
              *v126 = v129;
            }
          }
          else
          {
            v127 = 0;
            v126 = (_QWORD *)(8 * v121);
          }
          v120 = (void (__cdecl **)(std::__shared_weak_count *__hidden))(v126 + 1);
          v152 = (_QWORD *)v98[13].__shared_owners_;
          v153 = v98[13].__shared_weak_owners_;
          if ((_QWORD *)v153 != v152)
            break;
          v98[13].__shared_owners_ = (uint64_t)v126;
          v98[13].__shared_weak_owners_ = (uint64_t)v120;
          v159 = v98[14].__vftable;
          v98[14].__vftable = v127;
LABEL_263:
          if (v153)
            (*(void (**)(uint64_t, unint64_t, char *))(*(_QWORD *)v98[14].__shared_owners_ + 40))(v98[14].__shared_owners_, v153, (char *)v159 - v153);
          v12 = v380;
LABEL_266:
          v98[13].__shared_weak_owners_ = (uint64_t)v120;
          v161 = v405;
          objc_msgSend(v405, "facingAzimuth");
          if (v162 != -1.0)
          {
            objc_msgSend(v161, "facingAzimuth");
            if (!BYTE4(v98[16].__shared_weak_owners_))
              BYTE4(v98[16].__shared_weak_owners_) = 1;
            v164 = v163;
            *(float *)&v98[16].__shared_weak_owners_ = v164;
            *(float *)&v98[17].__vftable = md::LabelFeature::vectorFromAzimuth((md::LabelFeature *)&v98[9], v164, (const md::LabelPoint *)(*(_BYTE *)(*(_QWORD *)(v12 + 232) + 17) == 0));
            HIDWORD(v98[17].__vftable) = v165;
            LODWORD(v98[17].__shared_owners_) = v166;
          }

          if (v101)
          {
            v167 = (unint64_t *)&v101->__shared_owners_;
            do
              v168 = __ldaxr(v167);
            while (__stlxr(v168 - 1, v167));
            if (!v168)
            {
              ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
              std::__shared_weak_count::__release_weak(v101);
            }
          }
          v388 = v98 + 1;
          v389 = v98;
          v169 = (_QWORD *)*((_QWORD *)this + 15);
          if ((unint64_t)v169 >= *((_QWORD *)this + 16))
          {
            v170 = std::vector<std::shared_ptr<md::RouteAnnotationLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteAnnotationLabelFeature>,mdm::Allocator>>::__emplace_back_slow_path<std::shared_ptr<md::RouteAnnotationLabelFeature>>((uint64_t)v376, (uint64_t)&v388);
            v98 = v389;
            *((_QWORD *)this + 15) = v170;
            if (!v98)
              goto LABEL_285;
LABEL_281:
            v171 = (unint64_t *)&v98->__shared_owners_;
            do
              v172 = __ldaxr(v171);
            while (__stlxr(v172 - 1, v171));
            if (!v172)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
            goto LABEL_285;
          }
          if (v169)
          {
            *v169 = v98 + 1;
            v169[1] = v98;
            v388 = 0;
            v389 = 0;
            v98 = 0;
          }
          *((_QWORD *)this + 15) = v169 + 2;
          if (v98)
            goto LABEL_281;
LABEL_285:
          v173 = *(_QWORD *)(*((_QWORD *)this + 15) - 16);
          v174 = (_QWORD *)*((_QWORD *)this + 19);
          v175 = *((_QWORD *)this + 20);
          if ((unint64_t)v174 >= v175)
          {
            v177 = ((uint64_t)v174 - *v377) >> 3;
            v178 = v177 + 1;
            if ((unint64_t)(v177 + 1) >> 61)
              abort();
            v179 = v175 - *v377;
            if (v179 >> 2 > v178)
              v178 = v179 >> 2;
            if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFF8)
              v180 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v180 = v178;
            if (v180)
            {
              v181 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 21) + 16))(*((_QWORD *)this + 21), 8 * v180, 8);
              v182 = (_QWORD *)(v181 + 8 * v177);
              v183 = v181 + 8 * v180;
              if (v181)
                *v182 = v173;
            }
            else
            {
              v183 = 0;
              v182 = (_QWORD *)(8 * v177);
            }
            v185 = *((_QWORD *)this + 18);
            v184 = *((_QWORD *)this + 19);
            v186 = v184 - v185;
            if (v184 != v185)
            {
              v187 = v186 - 8;
              if ((unint64_t)(v186 - 8) < 0x38)
              {
                v188 = v182;
              }
              else
              {
                v188 = v182;
                if ((unint64_t)(v184 - (_QWORD)v182) >= 0x20)
                {
                  v189 = (v187 >> 3) + 1;
                  v190 = v182 - 2;
                  v191 = (__int128 *)(v184 - 16);
                  v192 = v189 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v193 = *v191;
                    *(v190 - 1) = *(v191 - 1);
                    *v190 = v193;
                    v190 -= 2;
                    v191 -= 2;
                    v192 -= 4;
                  }
                  while (v192);
                  v188 = &v182[-(v189 & 0x3FFFFFFFFFFFFFFCLL)];
                  v184 -= 8 * (v189 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v189 == (v189 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_367:
                    v184 = *v377;
LABEL_368:
                    v176 = v182 + 1;
                    *((_QWORD *)this + 18) = v188;
                    *((_QWORD *)this + 19) = v182 + 1;
                    v229 = *((_QWORD *)this + 20);
                    *((_QWORD *)this + 20) = v183;
                    if (v184)
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 21) + 40))(*((_QWORD *)this + 21), v184, v229 - v184);
                    goto LABEL_370;
                  }
                }
              }
              do
              {
                v228 = *(_QWORD *)(v184 - 8);
                v184 -= 8;
                *--v188 = v228;
              }
              while (v184 != v185);
              goto LABEL_367;
            }
            v188 = v182;
            goto LABEL_368;
          }
          if (v174)
            *v174 = v173;
          v176 = v174 + 1;
LABEL_370:
          *((_QWORD *)this + 19) = v176;
          v230 = *(_QWORD *)(*((_QWORD *)this + 15) - 16);
          v402 = &v390;
          std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__emplace_unique_key_args<VKTrafficFeature * {__strong},std::piecewise_construct_t const&,std::tuple<VKTrafficFeature * const {__strong}&>,std::tuple<>>((uint64_t)v387, &v390, &v402)[3] = v230;
LABEL_371:

          ++v92;
          v90 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
          if (v92 == v386)
            goto LABEL_394;
        }
        v154 = v153 - (_QWORD)v152 - 8;
        if (v154 > 0x57
          && ((v155 = ((unint64_t)v152 - v153 + 7) & 0xFFFFFFFFFFFFFFF8, v153 + v155 >= (unint64_t)v126)
           || (unint64_t)v126 + v155 >= v153))
        {
          v222 = (v154 >> 3) + 1;
          v156 = (_QWORD *)(v153 - 8 * (v222 & 0x3FFFFFFFFFFFFFFCLL));
          v223 = v126 - 2;
          v224 = (__int128 *)(v153 - 32);
          v225 = v222 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v227 = *v224;
            v226 = v224[1];
            *v224 = 0uLL;
            v224[1] = 0uLL;
            v224 -= 2;
            *(v223 - 1) = v227;
            *v223 = v226;
            v223 -= 2;
            v225 -= 4;
          }
          while (v225);
          v126 -= v222 & 0x3FFFFFFFFFFFFFFCLL;
          if (v222 == (v222 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_259;
        }
        else
        {
          v156 = (_QWORD *)v98[13].__shared_weak_owners_;
        }
        do
        {
          v157 = *--v156;
          *v156 = 0;
          *--v126 = v157;
        }
        while (v156 != v152);
LABEL_259:
        v153 = v98[13].__shared_owners_;
        v158 = v98[13].__shared_weak_owners_;
        v98[13].__shared_owners_ = (uint64_t)v126;
        v98[13].__shared_weak_owners_ = (uint64_t)v120;
        v159 = v98[14].__vftable;
        v98[14].__vftable = v127;
        while (v158 != v153)
        {
          v160 = *(void **)(v158 - 8);
          v158 -= 8;

        }
        goto LABEL_263;
      }
LABEL_394:
      v244 = v394;
      if (!v394)
      {
LABEL_517:
        md::LabelFeatureStyler::restyleFeatures(*(_DWORD **)(*(_QWORD *)this + 296), (uint64_t)v377);
        v360 = *(_QWORD *)this;
        *(_BYTE *)(v360 + 3041) = 1;
        v361 = atomic_load((unsigned __int8 *)(v360 + 3058));
        if ((v361 & 1) != 0)
        {
          v362 = *(_QWORD *)(v360 + 136);
          if (v362)
          {
            v363 = *(_QWORD *)(v362 + 56);
            if (v363)
            {
              v402 = (id *)v360;
              LOBYTE(v388) = 9;
              (*(void (**)(uint64_t, id **, std::__shared_weak_count **))(*(_QWORD *)v363 + 48))(v363, &v402, &v388);
            }
          }
        }
        v364 = v394;
        if (v394)
        {
          do
          {
            v366 = (_QWORD *)*v364;
            v367 = v364[3];
            if (v367)
            {
              v368 = v364[4];
              v369 = (void *)v364[3];
              if (v368 != v367)
              {
                do
                {
                  v370 = *(void **)(v368 - 8);
                  v368 -= 8;

                }
                while (v368 != v367);
                v369 = (void *)v364[3];
              }
              v364[4] = v367;
              operator delete(v369);
            }
            (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v395 + 40))(v395, v364, 48);
            v364 = v366;
          }
          while (v366);
        }
        v365 = v391;
        v391 = 0;
        if (v365)
          (*(void (**)(uint64_t, _QWORD *, unint64_t))(*(_QWORD *)v393 + 40))(v393, v365, 8 * v392);
        goto LABEL_524;
      }
      v374 = xmmword_19FFB2E80;
      while (1)
      {
        v245 = *(id *)v244[3];
        v246 = v244[3];
        if ((unint64_t)(v244[4] - v246) >= 9)
        {
          v247 = 1;
          do
          {
            v248 = *(id *)(v246 + 8 * v247);
            v249 = objc_msgSend(v248, "collisionPriority");
            if (v249 > objc_msgSend(v245, "collisionPriority"))
            {
              v250 = v248;

              v245 = v250;
            }

            ++v247;
            v246 = v244[3];
          }
          while (v247 < (v244[4] - v246) >> 3);
        }
        objc_msgSend(v245, "mercatorPoint", v374);
        v402 = v251;
        v403 = v252;
        v404 = v253;
        v254 = objc_msgSend(v245, "routeOffset");
        objc_msgSend(v245, "routeOffsetInMeters");
        v256 = v255;
        objc_msgSend(v245, "facingAzimuth");
        v258 = v257;
        v259 = (std::__shared_weak_count *)operator new(0x1A8uLL);
        v260 = v259;
        v259->__shared_owners_ = 0;
        v259->__shared_weak_owners_ = 0;
        v259->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD6C8;
        v261 = *((_QWORD *)this + 4);
        v382 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
        if (v382)
        {
          v262 = (unint64_t *)&v382->__shared_owners_;
          do
            v263 = __ldxr(v262);
          while (__stxr(v263 + 1, v262));
        }
        v264 = *(_QWORD *)this;
        v381 = v259 + 1;
        md::PointLabelFeatureBase::PointLabelFeatureBase((uint64_t)&v259[1], (uint64_t)&v402);
        v260[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42A4208;
        v260[11].__shared_owners_ = v261;
        v260[11].__shared_weak_owners_ = (uint64_t)v382;
        if (v382)
        {
          v265 = (unint64_t *)&v382->__shared_owners_;
          do
            v266 = __ldxr(v265);
          while (__stxr(v266 + 1, v265));
        }
        v260[12].__vftable = 0;
        v260[12].__shared_owners_ = 0;
        v260[12].__shared_weak_owners_ = 0;
        v378 = v245;
        {
          v348 = operator new();
          *(_QWORD *)(v348 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v348 + 24) = "VectorKitLabels";
          *(_OWORD *)(v348 + 32) = v374;
          *(_QWORD *)v348 = &off_1E42B5668;
          *(_QWORD *)(v348 + 8) = "VectorKitLabels";
          *(_OWORD *)(v348 + 72) = 0u;
          *(_OWORD *)(v348 + 88) = 0u;
          *(_OWORD *)(v348 + 104) = 0u;
          *(_OWORD *)(v348 + 120) = 0u;
          *(_OWORD *)(v348 + 136) = 0u;
          *(_OWORD *)(v348 + 152) = 0u;
          *(_OWORD *)(v348 + 168) = 0u;
          *(_OWORD *)(v348 + 184) = 0u;
          *(_OWORD *)(v348 + 200) = 0u;
          *(_OWORD *)(v348 + 216) = 0u;
          *(_OWORD *)(v348 + 232) = 0u;
          *(_QWORD *)(v348 + 248) = 0;
          *(_OWORD *)(v348 + 56) = 0u;
          v349 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v348 + 56), 0);
          if ((_DWORD)v349)
            geo::read_write_lock::logFailure(v349, (uint64_t)"initialization", v350);
          v351 = malloc_create_zone(0, 0);
          *(_QWORD *)(v348 + 48) = v351;
          malloc_set_zone_name(v351, "VectorKitLabels");
          *(_QWORD *)(v348 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v348;
        }
        v260[13].__vftable = (std::__shared_weak_count_vtbl *)mdm::Allocator::instance(void)::alloc;
        v260[13].__shared_owners_ = 0;
        v260[13].__shared_weak_owners_ = 0;
        v260[14].__vftable = 0;
        {
          v352 = operator new();
          *(_QWORD *)(v352 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v352 + 24) = "VectorKitLabels";
          *(_OWORD *)(v352 + 32) = v374;
          *(_QWORD *)v352 = &off_1E42B5668;
          *(_QWORD *)(v352 + 8) = "VectorKitLabels";
          *(_OWORD *)(v352 + 72) = 0u;
          *(_OWORD *)(v352 + 88) = 0u;
          *(_OWORD *)(v352 + 104) = 0u;
          *(_OWORD *)(v352 + 120) = 0u;
          *(_OWORD *)(v352 + 136) = 0u;
          *(_OWORD *)(v352 + 152) = 0u;
          *(_OWORD *)(v352 + 168) = 0u;
          *(_OWORD *)(v352 + 184) = 0u;
          *(_OWORD *)(v352 + 200) = 0u;
          *(_OWORD *)(v352 + 216) = 0u;
          *(_OWORD *)(v352 + 232) = 0u;
          *(_QWORD *)(v352 + 248) = 0;
          *(_OWORD *)(v352 + 56) = 0u;
          v353 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v352 + 56), 0);
          if ((_DWORD)v353)
            geo::read_write_lock::logFailure(v353, (uint64_t)"initialization", v354);
          v355 = malloc_create_zone(0, 0);
          *(_QWORD *)(v352 + 48) = v355;
          malloc_set_zone_name(v355, "VectorKitLabels");
          *(_QWORD *)(v352 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v352;
        }
        v260[14].__shared_owners_ = mdm::Allocator::instance(void)::alloc;
        v260[14].__shared_weak_owners_ = 0;
        v260[15].__vftable = 0;
        v260[15].__shared_owners_ = 0;
        {
          v356 = operator new();
          *(_QWORD *)(v356 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v356 + 24) = "VectorKitLabels";
          *(_OWORD *)(v356 + 32) = v374;
          *(_QWORD *)v356 = &off_1E42B5668;
          *(_QWORD *)(v356 + 8) = "VectorKitLabels";
          *(_OWORD *)(v356 + 72) = 0u;
          *(_OWORD *)(v356 + 88) = 0u;
          *(_OWORD *)(v356 + 104) = 0u;
          *(_OWORD *)(v356 + 120) = 0u;
          *(_OWORD *)(v356 + 136) = 0u;
          *(_OWORD *)(v356 + 152) = 0u;
          *(_OWORD *)(v356 + 168) = 0u;
          *(_OWORD *)(v356 + 184) = 0u;
          *(_OWORD *)(v356 + 200) = 0u;
          *(_OWORD *)(v356 + 216) = 0u;
          *(_OWORD *)(v356 + 232) = 0u;
          *(_QWORD *)(v356 + 248) = 0;
          *(_OWORD *)(v356 + 56) = 0u;
          v357 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v356 + 56), 0);
          if ((_DWORD)v357)
            geo::read_write_lock::logFailure(v357, (uint64_t)"initialization", v358);
          v359 = malloc_create_zone(0, 0);
          *(_QWORD *)(v356 + 48) = v359;
          malloc_set_zone_name(v359, "VectorKitLabels");
          *(_QWORD *)(v356 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v356;
        }
        v384 = &v260[13].__shared_owners_;
        v260[15].__shared_weak_owners_ = mdm::Allocator::instance(void)::alloc;
        v260[16].__vftable = (std::__shared_weak_count_vtbl *)v254;
        v260[16].__shared_owners_ = v256;
        LOBYTE(v260[16].__shared_weak_owners_) = 0;
        BYTE4(v260[16].__shared_weak_owners_) = 0;
        BYTE4(v260[17].__shared_owners_) = 0;
        v270 = (id *)v244[3];
        for (jj = (id *)v244[4]; v270 != jj; ++v270)
        {
          v272 = *v270;
          v273 = v272;
          v405 = v272;
          v274 = (_QWORD *)v260[12].__shared_owners_;
          if ((unint64_t)v274 >= v260[12].__shared_weak_owners_)
          {
            v276 = std::vector<geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKTrafficFeature * {__strong}&,geo::memory_management_mode const&>((uint64_t *)&v260[12], &v405);
          }
          else
          {
            if (v274)
            {
              v275 = v272;
              *v274 = &off_1E42B4CB0;
              v274[1] = v275;
            }
            v276 = (uint64_t)(v274 + 3);
          }
          v260[12].__shared_owners_ = v276;

        }
        if (v258 != -1.0)
        {
          if (!BYTE4(v260[16].__shared_weak_owners_))
            BYTE4(v260[16].__shared_weak_owners_) = 1;
          v277 = v258;
          *(float *)&v260[16].__shared_weak_owners_ = v277;
          *(float *)&v260[17].__vftable = md::LabelFeature::vectorFromAzimuth((md::LabelFeature *)&v260[9], v277, (const md::LabelPoint *)(*(_BYTE *)(*(_QWORD *)(v264 + 232) + 17) == 0));
          HIDWORD(v260[17].__vftable) = v278;
          LODWORD(v260[17].__shared_owners_) = v279;
        }
        v280 = (uint64_t)v260[12].__vftable;
        v281 = v260[12].__shared_owners_;
        v282 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v281 - v280) >> 3));
        if (v281 == v280)
          v283 = 0;
        else
          v283 = v282;
        std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0 &,geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *,false>(v280, v281, v283, 1);
        BYTE4(v260[17].__shared_owners_) = 0;
        v284 = v260[12].__vftable;
        v285 = v260[12].__shared_owners_;
        if (v284 != (std::__shared_weak_count_vtbl *)v285)
        {
          while (1)
          {
            v286 = v284->~__shared_weak_count_0;
            v287 = v286;
            v288 = (std::__shared_weak_count_vtbl *)v260[13].__shared_weak_owners_;
            v289 = v260[14].__vftable;
            if (v288 >= v289)
              break;
            if (v288)
            {
              v288->~__shared_weak_count = v286;
              v287 = 0;
            }
            v290 = &v288->~__shared_weak_count_0;
LABEL_451:
            v260[13].__shared_weak_owners_ = (uint64_t)v290;

            v307 = v284->~__shared_weak_count_0;
            v308 = objc_msgSend(v307, "collisionPriority");
            v309 = BYTE4(v260[17].__shared_owners_);
            if (v309 <= v308)
              LOBYTE(v309) = v308;
            BYTE4(v260[17].__shared_owners_) = v309;

            v284 = (std::__shared_weak_count_vtbl *)((char *)v284 + 24);
            if (v284 == (std::__shared_weak_count_vtbl *)v285)
              goto LABEL_459;
          }
          v291 = ((uint64_t)v288 - *v384) >> 3;
          v292 = v291 + 1;
          if ((unint64_t)(v291 + 1) >> 61)
            abort();
          v293 = (uint64_t)v289 - *v384;
          if (v293 >> 2 > v292)
            v292 = v293 >> 2;
          if ((unint64_t)v293 >= 0x7FFFFFFFFFFFFFF8)
            v294 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v294 = v292;
          if (v294)
          {
            v295 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v260[14].__shared_owners_ + 16))(v260[14].__shared_owners_, 8 * v294, 8);
            v296 = (void (__cdecl **)(std::__shared_weak_count *__hidden))(v295 + 8 * v291);
            v297 = (std::__shared_weak_count_vtbl *)(v295 + 8 * v294);
            if (v295)
            {
              *v296 = v287;
              v287 = 0;
            }
          }
          else
          {
            v297 = 0;
            v296 = (void (__cdecl **)(std::__shared_weak_count *__hidden))(8 * v291);
          }
          v290 = v296 + 1;
          v298 = (_QWORD *)v260[13].__shared_owners_;
          v299 = v260[13].__shared_weak_owners_;
          if ((_QWORD *)v299 == v298)
          {
            v260[13].__shared_owners_ = (uint64_t)v296;
            v260[13].__shared_weak_owners_ = (uint64_t)v290;
            v305 = v260[14].__vftable;
            v260[14].__vftable = v297;
          }
          else
          {
            v300 = v299 - (_QWORD)v298 - 8;
            if (v300 <= 0x57
              || (v301 = ((unint64_t)v298 - v299 + 7) & 0xFFFFFFFFFFFFFFF8, v299 + v301 < (unint64_t)v296)
              && (unint64_t)v296 + v301 < v299)
            {
              v302 = (_QWORD *)v260[13].__shared_weak_owners_;
              goto LABEL_444;
            }
            v310 = (v300 >> 3) + 1;
            v302 = (_QWORD *)(v299 - 8 * (v310 & 0x3FFFFFFFFFFFFFFCLL));
            v311 = v296 - 2;
            v312 = (__int128 *)(v299 - 32);
            v313 = v310 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v315 = *v312;
              v314 = v312[1];
              *v312 = 0uLL;
              v312[1] = 0uLL;
              v312 -= 2;
              *((_OWORD *)v311 - 1) = v315;
              *(_OWORD *)v311 = v314;
              v311 -= 4;
              v313 -= 4;
            }
            while (v313);
            v296 -= v310 & 0x3FFFFFFFFFFFFFFCLL;
            if (v310 != (v310 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_444:
                v303 = (void (__cdecl *)(std::__shared_weak_count *__hidden))*--v302;
                *v302 = 0;
                *--v296 = v303;
              }
              while (v302 != v298);
            }
            v299 = v260[13].__shared_owners_;
            v304 = v260[13].__shared_weak_owners_;
            v260[13].__shared_owners_ = (uint64_t)v296;
            v260[13].__shared_weak_owners_ = (uint64_t)v290;
            v305 = v260[14].__vftable;
            v260[14].__vftable = v297;
            while (v304 != v299)
            {
              v306 = *(void **)(v304 - 8);
              v304 -= 8;

            }
          }
          if (v299)
            (*(void (**)(uint64_t, unint64_t, char *))(*(_QWORD *)v260[14].__shared_owners_ + 40))(v260[14].__shared_owners_, v299, (char *)v305 - v299);
          goto LABEL_451;
        }
LABEL_459:
        if (v382)
        {
          v316 = (unint64_t *)&v382->__shared_owners_;
          do
            v317 = __ldaxr(v316);
          while (__stlxr(v317 - 1, v316));
          if (!v317)
          {
            ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
            std::__shared_weak_count::__release_weak(v382);
          }
        }
        v388 = v381;
        v389 = v260;
        v318 = (std::__shared_weak_count **)*((_QWORD *)this + 15);
        if ((unint64_t)v318 >= *((_QWORD *)this + 16))
          break;
        if (v318)
        {
          *v318 = v381;
          v318[1] = v260;
          v388 = 0;
          v389 = 0;
          v260 = 0;
        }
        *((_QWORD *)this + 15) = v318 + 2;
        if (v260)
          goto LABEL_470;
LABEL_474:
        v322 = *(_QWORD *)(*((_QWORD *)this + 15) - 16);
        v323 = (_QWORD *)*((_QWORD *)this + 19);
        v324 = *((_QWORD *)this + 20);
        if ((unint64_t)v323 >= v324)
        {
          v326 = ((uint64_t)v323 - *v377) >> 3;
          v327 = v326 + 1;
          if ((unint64_t)(v326 + 1) >> 61)
            abort();
          v328 = v324 - *v377;
          if (v328 >> 2 > v327)
            v327 = v328 >> 2;
          if ((unint64_t)v328 >= 0x7FFFFFFFFFFFFFF8)
            v329 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v329 = v327;
          if (v329)
          {
            v330 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 21) + 16))(*((_QWORD *)this + 21), 8 * v329, 8);
            v331 = (_QWORD *)(v330 + 8 * v326);
            v332 = v330 + 8 * v329;
            if (v330)
              *v331 = v322;
          }
          else
          {
            v332 = 0;
            v331 = (_QWORD *)(8 * v326);
          }
          v334 = *((_QWORD *)this + 18);
          v333 = *((_QWORD *)this + 19);
          v335 = v333 - v334;
          if (v333 != v334)
          {
            v336 = v335 - 8;
            if ((unint64_t)(v335 - 8) < 0x38)
            {
              v337 = v331;
            }
            else
            {
              v337 = v331;
              if ((unint64_t)(v333 - (_QWORD)v331) >= 0x20)
              {
                v338 = (v336 >> 3) + 1;
                v339 = v331 - 2;
                v340 = (__int128 *)(v333 - 16);
                v341 = v338 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v342 = *v340;
                  *(v339 - 1) = *(v340 - 1);
                  *v339 = v342;
                  v339 -= 2;
                  v340 -= 2;
                  v341 -= 4;
                }
                while (v341);
                v337 = &v331[-(v338 & 0x3FFFFFFFFFFFFFFCLL)];
                v333 -= 8 * (v338 & 0x3FFFFFFFFFFFFFFCLL);
                if (v338 == (v338 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_498:
                  v333 = *v377;
LABEL_499:
                  v325 = v331 + 1;
                  *((_QWORD *)this + 18) = v337;
                  *((_QWORD *)this + 19) = v331 + 1;
                  v344 = *((_QWORD *)this + 20);
                  *((_QWORD *)this + 20) = v332;
                  if (v333)
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 21) + 40))(*((_QWORD *)this + 21), v333, v344 - v333);
                  goto LABEL_501;
                }
              }
            }
            do
            {
              v343 = *(_QWORD *)(v333 - 8);
              v333 -= 8;
              *--v337 = v343;
            }
            while (v333 != v334);
            goto LABEL_498;
          }
          v337 = v331;
          goto LABEL_499;
        }
        if (v323)
          *v323 = v322;
        v325 = v323 + 1;
LABEL_501:
        *((_QWORD *)this + 19) = v325;
        v345 = (id *)v244[3];
        for (kk = (id *)v244[4]; v345 != kk; ++v345)
        {
          v388 = (std::__shared_weak_count *)*v345;
          v347 = *(_QWORD *)(*((_QWORD *)this + 15) - 16);
          v402 = (id *)&v388;
          std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__emplace_unique_key_args<VKTrafficFeature * {__strong},std::piecewise_construct_t const&,std::tuple<VKTrafficFeature * const {__strong}&>,std::tuple<>>((uint64_t)v387, (id *)&v388, &v402)[3] = v347;

        }
        v244 = (_QWORD *)*v244;
        if (!v244)
          goto LABEL_517;
      }
      v319 = std::vector<std::shared_ptr<md::RouteAnnotationLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteAnnotationLabelFeature>,mdm::Allocator>>::__emplace_back_slow_path<std::shared_ptr<md::RouteAnnotationLabelFeature>>((uint64_t)v376, (uint64_t)&v388);
      v260 = v389;
      *((_QWORD *)this + 15) = v319;
      if (!v260)
        goto LABEL_474;
LABEL_470:
      v320 = (unint64_t *)&v260->__shared_owners_;
      do
        v321 = __ldaxr(v320);
      while (__stlxr(v321 - 1, v320));
      if (!v321)
      {
        ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
        std::__shared_weak_count::__release_weak(v260);
      }
      goto LABEL_474;
    }
    if (v29.u32[0] < 2uLL)
    {
      v33 = *(_QWORD *)&v28 - 1;
      while (1)
      {
        v35 = v32[1];
        if (v27 == v35)
        {
          if ((id)v32[2] == v26)
            goto LABEL_51;
        }
        else if ((v35 & v33) != v30)
        {
          goto LABEL_152;
        }
        v32 = (_QWORD *)*v32;
        if (!v32)
          goto LABEL_152;
      }
    }
    while (1)
    {
      v34 = v32[1];
      if (v27 == v34)
        break;
      if (v34 >= *(_QWORD *)&v28)
        v34 %= *(_QWORD *)&v28;
      if (v34 != v30)
        goto LABEL_152;
LABEL_40:
      v32 = (_QWORD *)*v32;
      if (!v32)
        goto LABEL_152;
    }
    if ((id)v32[2] != v26)
      goto LABEL_40;
LABEL_51:

    ++v24;
  }
  while (v24 != v23);
  v36 = (id *)*((_QWORD *)this + 6);
  v383 = (id *)*((_QWORD *)this + 7);
  if (v36 != v383)
  {
    v379 = (_QWORD *)((char *)this + 200);
    while (1)
    {
      v37 = *v36;
      v38 = (id *)*v36;
      v402 = v38;
      v39 = std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::find<VKTrafficFeature * {__strong}>(v387, (id *)&v402);
      if (v39)
        break;
LABEL_150:

      if (++v36 == v383)
        goto LABEL_524;
    }
    v40 = v38;
    v385 = (id *)(id)v39[2];
    if (v40 != v385)
    {
      v41 = (_QWORD *)v39[3];
      v42 = v40;
      v43 = v41[37];
      if (v41[38] != v43)
      {
        v44 = 0;
        while (*(id **)(v43 + 8 * v44) != v42)
        {
          if (objc_msgSend(v42, "isEqual:"))
          {
            objc_storeStrong((id *)(v41[37] + 8 * v44), v37);
            v12 = v41[33];
            v45 = v42;
            v46 = v45;
            if (v45)
              v47 = v45;
            v48 = v12 + 24 * v44;
            v49 = *(void **)(v48 + 8);
            *(_QWORD *)(v48 + 8) = v46;

            break;
          }
          ++v44;
          v43 = v41[37];
          if (v44 >= (v41[38] - v43) >> 3)
            break;
        }
      }

      v50 = *(int8x8_t *)((char *)this + 184);
      v51 = v39[1];
      v52 = (uint8x8_t)vcnt_s8(v50);
      v52.i16[0] = vaddlv_u8(v52);
      if (v52.u32[0] > 1uLL)
      {
        if (v51 >= *(_QWORD *)&v50)
          v51 %= *(_QWORD *)&v50;
      }
      else
      {
        v51 &= *(_QWORD *)&v50 - 1;
      }
      v53 = *(_QWORD **)(*v387 + 8 * v51);
      do
      {
        v54 = v53;
        v53 = (_QWORD *)*v53;
      }
      while (v53 != v39);
      if (v54 == v379)
        goto LABEL_82;
      v55 = v54[1];
      if (v52.u32[0] > 1uLL)
      {
        if (v55 >= *(_QWORD *)&v50)
          v55 %= *(_QWORD *)&v50;
      }
      else
      {
        v55 &= *(_QWORD *)&v50 - 1;
      }
      if (v55 != v51)
      {
LABEL_82:
        if (!*v39)
          goto LABEL_83;
        v56 = *(_QWORD *)(*v39 + 8);
        if (v52.u32[0] > 1uLL)
        {
          if (v56 >= *(_QWORD *)&v50)
            v56 %= *(_QWORD *)&v50;
        }
        else
        {
          v56 &= *(_QWORD *)&v50 - 1;
        }
        if (v56 != v51)
LABEL_83:
          *(_QWORD *)(*v387 + 8 * v51) = 0;
      }
      v57 = *v39;
      if (*v39)
      {
        v58 = *(_QWORD *)(v57 + 8);
        if (v52.u32[0] > 1uLL)
        {
          if (v58 >= *(_QWORD *)&v50)
            v58 %= *(_QWORD *)&v50;
        }
        else
        {
          v58 &= *(_QWORD *)&v50 - 1;
        }
        if (v58 != v51)
        {
          *(_QWORD *)(*v387 + 8 * v58) = v54;
          v57 = *v39;
        }
      }
      *v54 = v57;
      *v39 = 0;
      --*((_QWORD *)this + 27);

      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 26) + 40))(*((_QWORD *)this + 26), v39, 32);
      objc_msgSend(v42, "uniqueIdentifier");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      v60 = objc_msgSend(v59, "hash");

      v61 = *((_QWORD *)this + 23);
      if (v61)
      {
        v62 = (uint8x8_t)vcnt_s8((int8x8_t)v61);
        v62.i16[0] = vaddlv_u8(v62);
        if (v62.u32[0] > 1uLL)
        {
          v12 = v60;
          if (v60 >= v61)
            v12 = v60 % v61;
        }
        else
        {
          v12 = (v61 - 1) & v60;
        }
        v63 = *(_QWORD **)(*v387 + 8 * v12);
        if (v63)
        {
          v64 = (_QWORD *)*v63;
          if (v64)
          {
            if (v62.u32[0] < 2uLL)
            {
              while (1)
              {
                v66 = v64[1];
                if (v66 == v60)
                {
                  if ((id *)v64[2] == v42)
                    goto LABEL_149;
                }
                else if ((v66 & (v61 - 1)) != v12)
                {
                  goto LABEL_111;
                }
                v64 = (_QWORD *)*v64;
                if (!v64)
                  goto LABEL_111;
              }
            }
            do
            {
              v65 = v64[1];
              if (v65 == v60)
              {
                if ((id *)v64[2] == v42)
                  goto LABEL_149;
              }
              else
              {
                if (v65 >= v61)
                  v65 %= v61;
                if (v65 != v12)
                  break;
              }
              v64 = (_QWORD *)*v64;
            }
            while (v64);
          }
        }
      }
LABEL_111:
      v67 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 26) + 16))(*((_QWORD *)this + 26), 32, 8);
      v391 = v67;
      v392 = (unint64_t)this + 208;
      *v67 = 0;
      v67[1] = v60;
      v67[2] = v42;
      v67[3] = v41;
      LOBYTE(v393) = 1;
      v68 = (float)(unint64_t)(*((_QWORD *)this + 27) + 1);
      v69 = *((float *)this + 56);
      if (!v61 || (float)(v69 * (float)v61) < v68)
      {
        v70 = (v61 & (v61 - 1)) != 0;
        if (v61 < 3)
          v70 = 1;
        v71 = v70 | (2 * v61);
        v72 = vcvtps_u32_f32(v68 / v69);
        if (v71 <= v72)
          v73 = v72;
        else
          v73 = v71;
        if (v73 == 1)
        {
          v73 = 2;
        }
        else if ((v73 & (v73 - 1)) != 0)
        {
          v73 = std::__next_prime(v73);
        }
        v74 = *(int8x8_t *)((char *)this + 184);
        if (v73 > *(_QWORD *)&v74)
          goto LABEL_123;
        if (v73 < *(_QWORD *)&v74)
        {
          v75 = vcvtps_u32_f32((float)*((unint64_t *)this + 27) / *((float *)this + 56));
          if (*(_QWORD *)&v74 < 3uLL || (v76 = (uint8x8_t)vcnt_s8(v74), v76.i16[0] = vaddlv_u8(v76), v76.u32[0] > 1uLL))
          {
            v75 = std::__next_prime(v75);
          }
          else
          {
            v77 = 1 << -(char)__clz(v75 - 1);
            if (v75 >= 2)
              v75 = v77;
          }
          if (v73 <= v75)
            v73 = v75;
          if (v73 < *(_QWORD *)&v74)
LABEL_123:
            std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>((uint64_t)v387, v73);
        }
        v61 = *((_QWORD *)this + 23);
        if ((v61 & (v61 - 1)) != 0)
        {
          if (v60 >= v61)
            v12 = v60 % v61;
          else
            v12 = v60;
        }
        else
        {
          v12 = (v61 - 1) & v60;
        }
      }
      v78 = *(_QWORD **)(*v387 + 8 * v12);
      if (v78)
      {
        *v67 = *v78;
        goto LABEL_147;
      }
      *v67 = *v379;
      *v379 = v67;
      *(_QWORD *)(*v387 + 8 * v12) = v379;
      if (*v67)
      {
        v79 = *(_QWORD *)(*v67 + 8);
        if ((v61 & (v61 - 1)) != 0)
        {
          if (v79 >= v61)
            v79 %= v61;
        }
        else
        {
          v79 &= v61 - 1;
        }
        v78 = (_QWORD *)(*v387 + 8 * v79);
LABEL_147:
        *v78 = v67;
      }
      ++*((_QWORD *)this + 27);
    }
LABEL_149:

    goto LABEL_150;
  }
LABEL_524:

}

void sub_19F3B4EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, md::LabelFeature *a16, uint64_t a17, md::LabelFeature *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  void *v42;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](&a24);

  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*,false>(id *a1, id *a2, uint64_t a3, char a4)
{
  void **v6;
  id *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void **v22;
  void *v23;
  id *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void **v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  void **v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  void **v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  id v55;
  id v56;
  id v57;
  BOOL v58;
  BOOL v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  id *v68;
  uint64_t v69;
  uint64_t v70;
  id *j;
  id v73;
  uint64_t v74;
  uint64_t v75;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  id *v85;
  uint64_t v86;
  uint64_t v87;
  id *v89;
  id v90;
  id v91;
  id v92;
  void *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  void **v97;
  BOOL v98;
  char v99;
  uint64_t v100;
  id *v101;
  void **v102;
  void *v103;
  void **v104;
  id v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  id v110;
  id v111;
  uint64_t v112;
  void *v113;
  void *v114;
  void **v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  int64_t v120;
  id v121;
  int64_t v122;
  uint64_t v123;
  id *v124;
  uint64_t v125;
  id v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  id *v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  id *v136;
  id v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  id v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  BOOL v150;
  uint64_t v151;
  id *v152;
  id *v153;
  id v154;
  BOOL v155;
  uint64_t v156;
  id v157;
  int64_t v158;
  id *v159;
  id v160;
  void *v161;
  void **v162;
  uint64_t v163;
  uint64_t v164;
  id v165;
  id v166;
  uint64_t v167;
  uint64_t v168;
  BOOL v169;
  void **v170;
  void *v171;
  id v172;
  void *v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  void **v177;
  void *v178;
  id v179;
  uint64_t v180;
  uint64_t v181;
  BOOL v182;
  id v183;
  void *v184;
  id v185;
  void *v186;
  void *v187;
  unint64_t v188;
  void **v189;
  void *v190;
  id v191;
  uint64_t v192;
  uint64_t v193;
  BOOL v194;
  id v196;
  void *v197;
  id v198;
  void *v199;
  void **v200;
  id v201;
  id v202;
  uint64_t v203;
  uint64_t v204;
  id v206;
  void *v207;
  id *i;
  id v209;
  void *v210;
  id v211;
  uint64_t v212;
  uint64_t v213;
  id v215;
  void **v216;
  void **v217;
  void **v218;
  int64_t v219;
  id v221;
  id *v222;
  id *v223;
  id *v224;
  id *v225;
  uint64_t v226;
  int64_t v227;
  uint64_t v228;

void sub_19F3B6340(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

gdc::LayerDataStore **md::World::World(gdc::LayerDataStore **a1, void *a2, void *a3, void *a4, gdc::LayerDataStore **a5, unint64_t a6, const RenderTargetFormat *a7, _QWORD *a8, float a9, char a10, uint64_t a11)
{
  gdc::LayerDataStore *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (**v28)();
  uint8_t *v29;
  uint64_t v30;
  gdc::ResourceManager *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t (***v38)();
  uint64_t v39;
  uint64_t v40;
  gdc::LayerDataRequestTracker *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  gdc::LayerDataStore *v45;
  gdc::LayerDataStore *v46;
  NSObject *v47;
  NSObject *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  gdc::LayerDataStore *v63;
  unint64_t *v64;
  unint64_t v65;
  gdc::LayerDataStore *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  gdc::LayerDataStore *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  gdc::LayerDataStore *v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  gdc::LayerDataStore *v103;
  unint64_t v104;
  gdc::LayerDataStore *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  id v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  gdc::LayerDataStore *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  gdc::LayerDataStore *v126;
  unint64_t *v127;
  unint64_t *v128;
  unint64_t v129;
  gdc::LayerDataStore *v130;
  unint64_t v131;
  gdc::LayerDataStore *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t *v141;
  unint64_t v142;
  gdc::LayerDataStore *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  gdc::LayerDataStore *v147;
  unint64_t *v148;
  unint64_t *v149;
  unint64_t v150;
  gdc::LayerDataStore *v151;
  unint64_t v152;
  gdc::LayerDataStore *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  gdc::LayerDataStore *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  gdc::LayerDataStore *v193;
  uint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  gdc::LayerDataStore *v197;
  unint64_t v198;
  gdc::LayerDataStore *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  id v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  uint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  gdc::LayerDataStore *v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  gdc::LayerDataStore *v228;
  uint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  id v232;
  unint64_t v233;
  id v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  uint64_t *v246;
  unint64_t v247;
  uint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  unint64_t *v258;
  unint64_t v259;
  gdc::LayerDataStore *v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  id v264;
  uint64_t v265;
  unint64_t *v266;
  unint64_t v267;
  id v268;
  unint64_t v269;
  id v270;
  unint64_t *v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  uint64_t *v279;
  unint64_t v280;
  gdc::LayerDataStore *v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  id v285;
  uint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  id v289;
  unint64_t v290;
  id v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  uint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  unint64_t *v305;
  unint64_t v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  unint64_t *v315;
  unint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  gdc::LayerDataStore *v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  id v326;
  unint64_t *v327;
  unint64_t *v328;
  unint64_t *v329;
  unint64_t v330;
  unint64_t *v331;
  unint64_t v332;
  uint64_t *v333;
  unint64_t v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  unint64_t *v338;
  unint64_t v339;
  gdc::LayerDataStore *v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  id v344;
  uint64_t v345;
  unint64_t *v346;
  unint64_t v347;
  id v348;
  unint64_t v349;
  id v350;
  unint64_t *v351;
  unint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  id v355;
  unint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t *v360;
  unint64_t v361;
  gdc::LayerDataStore *v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  id v366;
  unint64_t *v367;
  unint64_t *v368;
  unint64_t v369;
  id v370;
  unint64_t v371;
  id v372;
  unint64_t *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  uint64_t *v381;
  unint64_t v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  unint64_t *v386;
  id v387;
  geo::TaskQueue *v388;
  id v389;
  id v390;
  void *v391;
  void *v392;
  std::__shared_weak_count *v393;
  unint64_t *v394;
  geo::TaskQueue *v395;
  std::__shared_weak_count_vtbl *v396;
  std::__shared_weak_count_vtbl *v397;
  std::__shared_weak_count_vtbl *v398;
  std::__shared_weak_count_vtbl *v399;
  unint64_t v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  std::__shared_weak_count_vtbl *v403;
  unint64_t v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  std::__shared_weak_count_vtbl *v407;
  unint64_t v408;
  uint64_t *v409;
  unint64_t v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  unint64_t *v414;
  unint64_t v415;
  std::__shared_weak_count *v416;
  unint64_t *v417;
  unint64_t v418;
  unint64_t *v419;
  unint64_t v420;
  gdc::LayerDataStore *v421;
  std::__shared_weak_count *v422;
  unint64_t *v423;
  unint64_t v424;
  id v425;
  uint64_t v426;
  unint64_t *v427;
  unint64_t v428;
  id v429;
  unint64_t v430;
  id v431;
  id v432;
  unint64_t *v433;
  unint64_t v434;
  std::__shared_weak_count *v435;
  unint64_t *v436;
  unint64_t v437;
  std::__shared_weak_count *v438;
  unint64_t *v439;
  unint64_t v440;
  uint64_t *v441;
  unint64_t v442;
  gdc::LayerDataStore *v443;
  std::__shared_weak_count *v444;
  unint64_t *v445;
  unint64_t v446;
  id v447;
  uint64_t v448;
  unint64_t *v449;
  unint64_t v450;
  id v451;
  unint64_t v452;
  id v453;
  id v454;
  unint64_t *v455;
  unint64_t v456;
  std::__shared_weak_count *v457;
  unint64_t *v458;
  unint64_t v459;
  std::__shared_weak_count *v460;
  unint64_t *v461;
  unint64_t v462;
  uint64_t *v463;
  unint64_t v464;
  gdc::LayerDataStore *v465;
  std::__shared_weak_count *v466;
  unint64_t *v467;
  unint64_t v468;
  id v469;
  unint64_t *v470;
  unint64_t *v471;
  unint64_t v472;
  id v473;
  unint64_t v474;
  id v475;
  unint64_t *v476;
  unint64_t v477;
  std::__shared_weak_count *v478;
  unint64_t *v479;
  unint64_t v480;
  std::__shared_weak_count *v481;
  unint64_t *v482;
  unint64_t v483;
  uint64_t *v484;
  unint64_t v485;
  std::__shared_weak_count *v486;
  gdc::LayerDataStore *v487;
  unint64_t *v488;
  unint64_t v489;
  id v490;
  unint64_t *v491;
  unint64_t *v492;
  unint64_t v493;
  id v494;
  unint64_t v495;
  id v496;
  unint64_t *v497;
  unint64_t v498;
  std::__shared_weak_count *v499;
  unint64_t *v500;
  unint64_t v501;
  std::__shared_weak_count *v502;
  unint64_t *v503;
  unint64_t v504;
  uint64_t *v505;
  unint64_t v506;
  std::__shared_weak_count *v507;
  unint64_t *v508;
  unint64_t v509;
  unint64_t *v510;
  unint64_t v511;
  std::__shared_weak_count *v512;
  unint64_t *v513;
  unint64_t v514;
  unint64_t *v515;
  unint64_t v516;
  gdc::LayerDataStore *v517;
  std::__shared_weak_count *v518;
  unint64_t *v519;
  unint64_t v520;
  id v521;
  unint64_t *v522;
  unint64_t *v523;
  unint64_t v524;
  id v525;
  unint64_t v526;
  id v527;
  unint64_t *v528;
  unint64_t v529;
  std::__shared_weak_count *v530;
  unint64_t *v531;
  unint64_t v532;
  uint64_t *v533;
  unint64_t v534;
  std::__shared_weak_count *v535;
  unint64_t *v536;
  unint64_t v537;
  unint64_t *v538;
  unint64_t v539;
  gdc::LayerDataStore *v540;
  std::__shared_weak_count *v541;
  unint64_t *v542;
  unint64_t v543;
  id v544;
  unint64_t *v545;
  unint64_t *v546;
  unint64_t v547;
  id v548;
  unint64_t v549;
  id v550;
  unint64_t *v551;
  unint64_t v552;
  std::__shared_weak_count *v553;
  unint64_t *v554;
  unint64_t v555;
  std::__shared_weak_count *v556;
  unint64_t *v557;
  unint64_t v558;
  uint64_t *v559;
  unint64_t v560;
  std::__shared_weak_count *v561;
  unint64_t *v562;
  unint64_t v563;
  unint64_t *v564;
  unint64_t v565;
  gdc::LayerDataStore *v566;
  std::__shared_weak_count *v567;
  unint64_t *v568;
  unint64_t v569;
  id v570;
  uint64_t v571;
  unint64_t *v572;
  unint64_t v573;
  id v574;
  unint64_t v575;
  id v576;
  unint64_t *v577;
  unint64_t v578;
  std::__shared_weak_count *v579;
  unint64_t *v580;
  id v581;
  unint64_t v582;
  std::__shared_weak_count *v583;
  unint64_t *v584;
  unint64_t v585;
  uint64_t *v586;
  unint64_t v587;
  std::__shared_weak_count *v588;
  gdc::LayerDataStore *v589;
  unint64_t *v590;
  unint64_t v591;
  id v592;
  uint64_t v593;
  unint64_t *v594;
  unint64_t v595;
  id v596;
  unint64_t v597;
  id v598;
  unint64_t *v599;
  unint64_t v600;
  std::__shared_weak_count *v601;
  unint64_t *v602;
  id v603;
  unint64_t v604;
  std::__shared_weak_count *v605;
  unint64_t *v606;
  unint64_t v607;
  uint64_t *v608;
  unint64_t v609;
  std::__shared_weak_count *v610;
  unint64_t *v611;
  unint64_t v612;
  unint64_t *v613;
  unint64_t v614;
  std::__shared_weak_count *v615;
  unint64_t *v616;
  unint64_t v617;
  unint64_t *v618;
  unint64_t v619;
  std::__shared_weak_count *v620;
  unint64_t *v621;
  unint64_t v622;
  unint64_t *v623;
  unint64_t v624;
  gdc::LayerDataStore *v625;
  uint64_t v626;
  gdc::ResourceStatusContainer *v627;
  std::__shared_weak_count_vtbl *v628;
  uint64_t v629;
  gdc::LayerDataStore *v630;
  uint64_t v631;
  gdc::ResourceStatusContainer *v632;
  std::__shared_weak_count_vtbl *v633;
  uint64_t v634;
  gdc::LayerDataStore *v635;
  uint64_t v636;
  gdc::ResourceStatusContainer *v637;
  std::__shared_weak_count_vtbl *v638;
  uint64_t v639;
  gdc::LayerDataStore *v640;
  md::SingleGEOResourceLayerDataSource *v641;
  uint64_t v642;
  gdc::LayerDataStore *v643;
  md::SingleGEOResourceLayerDataSource *v644;
  uint64_t v645;
  gdc::LayerDataStore *v646;
  uint64_t v647;
  gdc::ResourceStatusContainer *v648;
  std::__shared_weak_count_vtbl *v649;
  uint64_t v650;
  gdc::LayerDataStore *v651;
  uint64_t v652;
  gdc::ResourceStatusContainer *v653;
  std::__shared_weak_count_vtbl *v654;
  uint64_t v655;
  gdc::LayerDataStore *v656;
  uint64_t v657;
  gdc::ResourceStatusContainer *v658;
  std::__shared_weak_count_vtbl *v659;
  uint64_t v660;
  gdc::LayerDataStore *v661;
  uint64_t v662;
  gdc::ResourceStatusContainer *v663;
  std::__shared_weak_count_vtbl *v664;
  uint64_t v665;
  __int16 v666;
  gdc::LayerDataStore *v667;
  uint64_t v668;
  gdc::ResourceStatusContainer *v669;
  id v670;
  uint64_t v671;
  __int16 v672;
  gdc::LayerDataStore *v673;
  uint64_t v674;
  gdc::ResourceStatusContainer *v675;
  id v676;
  uint64_t v677;
  __int16 v678;
  gdc::LayerDataStore *v679;
  uint64_t v680;
  gdc::ResourceStatusContainer *v681;
  id v682;
  uint64_t v683;
  __int16 v684;
  gdc::LayerDataStore *v685;
  uint64_t v686;
  gdc::ResourceStatusContainer *v687;
  id v688;
  uint64_t v689;
  __int16 v690;
  gdc::LayerDataStore *v691;
  uint64_t v692;
  gdc::ResourceStatusContainer *v693;
  id v694;
  uint64_t v695;
  __int16 v696;
  gdc::LayerDataStore *v697;
  uint64_t v698;
  gdc::ResourceStatusContainer *v699;
  id v700;
  uint64_t v701;
  __int16 v702;
  gdc::LayerDataStore *v703;
  uint64_t v704;
  gdc::ResourceStatusContainer *v705;
  id v706;
  uint64_t v707;
  __int16 v708;
  gdc::LayerDataStore *v709;
  uint64_t v710;
  gdc::ResourceStatusContainer *v711;
  id v712;
  uint64_t v713;
  __int16 v714;
  gdc::LayerDataStore *v715;
  uint64_t v716;
  gdc::ResourceStatusContainer *v717;
  id v718;
  id v719;
  uint64_t v720;
  __int16 v721;
  gdc::LayerDataStore *v722;
  uint64_t v723;
  gdc::ResourceStatusContainer *v724;
  id v725;
  uint64_t v726;
  gdc::LayerDataStore *v727;
  uint64_t v728;
  gdc::ResourceStatusContainer *v729;
  id v730;
  id v731;
  const ggl::StandardLibrary *v732;
  _QWORD *v733;
  std::__shared_weak_count *v734;
  unint64_t *v735;
  unint64_t v736;
  uint64_t v737;
  gdc::LayerDataStore *v738;
  uint64_t v739;
  gdc::ResourceStatusContainer *v740;
  id v741;
  id v742;
  const ggl::StandardLibrary *v743;
  _QWORD *v744;
  std::__shared_weak_count *v745;
  unint64_t *v746;
  unint64_t v747;
  uint64_t v748;
  gdc::LayerDataStore *v749;
  uint64_t v750;
  gdc::ResourceStatusContainer *v751;
  id v752;
  uint64_t v753;
  gdc::LayerDataStore *v754;
  uint64_t v755;
  gdc::ResourceStatusContainer *v756;
  id v757;
  uint64_t v758;
  gdc::LayerDataStore *v759;
  uint64_t v760;
  gdc::ResourceStatusContainer *v761;
  id v762;
  uint64_t v763;
  gdc::LayerDataStore *v764;
  uint64_t v765;
  gdc::ResourceStatusContainer *v766;
  id v767;
  uint64_t v768;
  gdc::LayerDataStore *v769;
  uint64_t v770;
  gdc::ResourceStatusContainer *v771;
  id v772;
  uint64_t v773;
  gdc::LayerDataStore *v774;
  uint64_t v775;
  uint64_t v776;
  gdc::LayerDataStore *v777;
  uint64_t v778;
  uint8_t *v779;
  uint64_t v780;
  unint64_t v781;
  uint64_t *v782;
  uint64_t **v783;
  uint64_t **v784;
  unint64_t v785;
  uint64_t *v786;
  uint64_t v787;
  uint64_t v788;
  gdc::LayerDataStore *v789;
  gdc::LayerDataStore *v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint8_t *v794;
  void *v795;
  uint64_t *v796;
  uint64_t v797;
  uint64_t v798;
  gdc::LayerDataStore *v799;
  gdc::LayerDataStore *v800;
  uint64_t v801;
  gdc::LayerDataStore *v802;
  gdc::LayerDataStore *v803;
  uint64_t v804;
  gdc::LayerDataStore *v805;
  gdc::LayerDataStore *v806;
  uint64_t v807;
  gdc::LayerDataStore *v808;
  gdc::LayerDataStore *v809;
  uint64_t v810;
  gdc::LayerDataStore *v811;
  gdc::LayerDataStore *v812;
  uint64_t v813;
  gdc::LayerDataStore *v814;
  uint64_t v815;
  gdc::ResourceStatusContainer *v816;
  id v817;
  uint64_t v818;
  gdc::LayerDataStore *v819;
  uint64_t v820;
  gdc::ResourceStatusContainer *v821;
  uint64_t v822;
  gdc::LayerDataStore *v823;
  gdc::LayerDataStore *v824;
  std::__shared_weak_count *v825;
  unint64_t *v826;
  unint64_t v827;
  unint64_t *v828;
  unint64_t v829;
  _QWORD *v830;
  unint64_t *v831;
  unint64_t v832;
  id v833;
  uint64_t v834;
  gdc::LayerDataStore *v835;
  gdc::LayerDataStore *v836;
  gdc::LayerDataStore *v837;
  gdc::LayerDataStore *v838;
  gdc::LayerDataStore *v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint8_t *v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  id v848;
  uint64_t v849;
  uint8_t *v850;
  uint64_t v851;
  uint64_t v852;
  gdc::LayerDataStore *v853;
  uint64_t v854;
  uint64_t v855;
  id v856;
  uint64_t v857;
  uint8_t *v858;
  uint64_t v859;
  uint64_t v860;
  gdc::LayerDataStore *v861;
  uint64_t v862;
  uint64_t v863;
  id v864;
  uint64_t v865;
  uint8_t *v866;
  uint64_t v867;
  uint64_t v868;
  md::SingleGEOResourceLayerDataSource *v869;
  uint64_t v870;
  __int16 v871;
  md::SingleGEOResourceLayerDataSource *v872;
  uint64_t v873;
  __int16 v874;
  md::SingleGEOResourceLayerDataSource *v875;
  uint64_t v876;
  __int16 v877;
  gdc::LayerDataStore *v878;
  uint64_t v879;
  gdc::ResourceStatusContainer *v880;
  id v881;
  uint64_t v882;
  gdc::LayerDataStore *v883;
  uint64_t v884;
  gdc::ResourceStatusContainer *v885;
  id v886;
  uint64_t v887;
  gdc::LayerDataStore *v888;
  uint64_t v889;
  gdc::ResourceStatusContainer *v890;
  id v891;
  _WORD *v892;
  std::__shared_weak_count *v893;
  unint64_t *v894;
  int8x16_t v895;
  uint64_t v896;
  std::__shared_weak_count_vtbl *v897;
  char *v898;
  __int16 v899;
  __int16 v900;
  __int16 v901;
  __int16 v902;
  __int16 v903;
  __int16 v904;
  __int16 v905;
  __int16 v906;
  __int16 v907;
  __int16 v908;
  __int16 v909;
  __int16 v910;
  __int16 v911;
  __int16 v912;
  __int16 v913;
  __int16 v914;
  uint64_t v915;
  unsigned __int8 v916;
  uint64_t v917;
  unsigned __int8 v918;
  uint64_t v919;
  uint64_t v920;
  unint64_t v921;
  uint64_t v922;
  unint64_t v923;
  unint64_t v924;
  uint64_t v925;
  std::__shared_weak_count *v926;
  unint64_t *v927;
  unint64_t v928;
  unsigned __int8 v929;
  uint64_t v930;
  uint64_t v931;
  __int128 v932;
  unsigned __int8 v933;
  _QWORD *v934;
  std::__shared_weak_count *v935;
  unint64_t *v936;
  unint64_t v937;
  unint64_t v938;
  unint64_t v939;
  std::__shared_weak_count *v940;
  unint64_t *v941;
  unint64_t v942;
  unint64_t v943;
  uint64_t v944;
  uint64_t v945;
  unint64_t v946;
  uint64_t v947;
  unint64_t v948;
  std::__shared_weak_count *v949;
  unint64_t *v950;
  unint64_t v951;
  uint64_t v952;
  unint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  float v957;
  unint64_t shared_weak_owners;
  unint64_t v959;
  std::__shared_weak_count *v960;
  unint64_t *v961;
  uint64_t v962;
  _QWORD *v963;
  unint64_t v964;
  unint64_t v965;
  unint64_t v966;
  unint64_t v967;
  unint64_t v968;
  uint64_t v969;
  gdc::LayerDataStore *v970;
  uint64_t v971;
  gdc::ResourceStatusContainer *v972;
  id v973;
  uint64_t v974;
  gdc::LayerDataStore *v975;
  uint64_t v976;
  uint64_t v977;
  id v978;
  uint64_t v979;
  uint8_t *v980;
  uint64_t v981;
  uint64_t v982;
  _QWORD *v983;
  uint64_t v984;
  uint64_t v985;
  gdc::LayerDataStore *v986;
  uint64_t v987;
  uint64_t v988;
  id v989;
  uint64_t v990;
  uint8_t *v991;
  uint64_t v992;
  uint64_t v993;
  gdc::LayerDataStore *v994;
  unint64_t *v995;
  unint64_t v996;
  gdc::LayerDataStore *v997;
  md::SingleGEOResourceLayerDataSource *v998;
  gdc::LayerDataStore *v999;
  unint64_t *v1000;
  unint64_t v1001;
  uint64_t v1002;
  gdc::LayerDataStore *v1003;
  uint64_t v1004;
  gdc::ResourceStatusContainer *v1005;
  id v1006;
  uint64_t v1007;
  gdc::LayerDataStore *v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint8_t *v1012;
  uint64_t v1013;
  uint64_t v1014;
  gdc::LayerDataStore *v1015;
  md::SingleGEOResourceLayerDataSource *v1016;
  uint64_t v1017;
  uint64_t v1018;
  int v1019;
  gdc::LayerDataStore *v1020;
  uint64_t v1021;
  gdc::ResourceStatusContainer *v1022;
  id v1023;
  __int16 v1024;
  uint64_t v1025;
  __int16 v1026;
  int v1027;
  char v1028;
  int v1029;
  gdc::LayerDataStore *v1030;
  gdc::LayerDataStore *v1031;
  gdc::LayerDataStore *v1032;
  uint64_t v1033;
  gdc::ResourceStatusContainer *v1034;
  id v1035;
  uint64_t v1036;
  __int16 v1037;
  gdc::LayerDataStore *v1038;
  uint64_t v1039;
  uint64_t v1040;
  id v1041;
  uint64_t v1042;
  uint8_t *v1043;
  uint64_t v1044;
  uint64_t v1045;
  gdc::LayerDataStore *v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint8_t *v1050;
  geo::TaskQueue *v1051;
  uint64_t v1052;
  uint64_t v1053;
  gdc::LayerDataStore *v1054;
  md::SingleGEOResourceLayerDataSource *v1055;
  uint64_t v1056;
  gdc::LayerDataStore *v1057;
  gdc::LayerDataStore *v1058;
  gdc::ResourceStatusContainer *v1059;
  _QWORD *v1060;
  uint64_t v1061;
  gdc::LayerDataStore *v1062;
  uint64_t v1063;
  std::__shared_weak_count *v1064;
  unint64_t *v1065;
  unint64_t v1066;
  uint64_t v1067;
  gdc::LayerDataStore *v1068;
  uint64_t v1069;
  gdc::ResourceStatusContainer *v1070;
  uint64_t v1071;
  uint64_t v1072;
  gdc::LayerDataStore *v1073;
  std::__shared_weak_count *v1074;
  unint64_t *v1075;
  unint64_t v1076;
  unint64_t *v1077;
  unint64_t v1078;
  _QWORD *v1079;
  unint64_t *v1080;
  unint64_t v1081;
  _QWORD *v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  std::__shared_weak_count *v1086;
  unint64_t *v1087;
  unint64_t v1088;
  uint64_t v1089;
  gdc::LayerDataStore *v1090;
  gdc::LayerDataStore *v1091;
  uint64_t v1092;
  gdc::LayerDataStore *v1093;
  gdc::LayerDataStore *v1094;
  gdc::ResourceStatusContainer *v1095;
  _QWORD *v1096;
  uint64_t v1097;
  gdc::LayerDataStore *v1098;
  uint64_t v1099;
  std::__shared_weak_count *v1100;
  unint64_t *v1101;
  unint64_t v1102;
  uint64_t v1103;
  gdc::LayerDataStore *v1104;
  uint64_t v1105;
  gdc::ResourceStatusContainer *v1106;
  id v1107;
  uint64_t v1108;
  gdc::LayerDataStore *v1109;
  uint64_t v1110;
  gdc::ResourceStatusContainer *v1111;
  id v1112;
  uint64_t v1113;
  gdc::LayerDataStore *v1114;
  uint64_t v1115;
  gdc::ResourceStatusContainer *v1116;
  id v1117;
  uint64_t v1118;
  gdc::LayerDataStore *v1119;
  gdc::LayerDataStore *v1120;
  gdc::ResourceStatusContainer *v1121;
  _QWORD *v1122;
  uint64_t v1123;
  gdc::LayerDataStore *v1124;
  uint64_t v1125;
  std::__shared_weak_count *v1126;
  unint64_t *v1127;
  unint64_t v1128;
  uint64_t v1129;
  gdc::LayerDataStore *v1130;
  uint64_t v1131;
  gdc::ResourceStatusContainer *v1132;
  id v1133;
  uint64_t v1134;
  gdc::LayerDataStore *v1135;
  uint64_t v1136;
  gdc::ResourceStatusContainer *v1137;
  id v1138;
  uint64_t v1139;
  gdc::LayerDataStore *v1140;
  uint64_t v1141;
  gdc::ResourceStatusContainer *v1142;
  id v1143;
  uint64_t v1144;
  gdc::LayerDataStore *v1145;
  gdc::LayerDataStore *v1146;
  gdc::ResourceStatusContainer *v1147;
  _QWORD *v1148;
  uint64_t v1149;
  gdc::LayerDataStore *v1150;
  uint64_t v1151;
  std::__shared_weak_count *v1152;
  unint64_t *v1153;
  unint64_t v1154;
  uint64_t v1155;
  gdc::LayerDataStore *v1156;
  uint64_t v1157;
  gdc::ResourceStatusContainer *v1158;
  id v1159;
  uint64_t v1160;
  _WORD *v1161;
  _WORD *v1162;
  gdc::LayerDataStore *v1163;
  gdc::LayerDataStore *v1164;
  uint64_t v1165;
  gdc::LayerDataStore *v1166;
  md::SingleGEOResourceLayerDataSource *v1167;
  uint64_t v1168;
  gdc::LayerDataStore *v1169;
  gdc::LayerDataStore *i;
  gdc::LayerDataStore *v1171;
  gdc::LayerDataStore *j;
  gdc::LayerDataStore *v1173;
  gdc::LayerDataStore *v1174;
  gdc::LayerDataStore *v1175;
  gdc::LayerDataStore *v1176;
  uint64_t v1177;
  gdc::LayerDataStore *v1178;
  gdc::LayerDataStore *v1179;
  uint64_t v1180;
  gdc::LayerDataStore *v1181;
  std::__shared_weak_count *v1182;
  unint64_t *v1183;
  unint64_t v1184;
  _QWORD *v1185;
  id v1186;
  uint64_t v1187;
  void *v1188;
  _QWORD *v1189;
  uint64_t v1190;
  NSObject *v1191;
  uint64_t v1192;
  uint8_t *v1193;
  uint64_t v1194;
  gdc::LayerDataStore *v1195;
  uint8_t *v1196;
  void *v1197;
  uint64_t v1198;
  _QWORD *v1199;
  uint64_t v1200;
  _QWORD *v1201;
  uint64_t v1202;
  unsigned __int8 v1204;
  uint64_t v1205;
  geo::read_write_lock *v1206;
  const char *v1207;
  malloc_zone_t *zone;
  uint64_t v1209;
  geo::read_write_lock *v1210;
  const char *v1211;
  malloc_zone_t *v1212;
  uint64_t v1213;
  geo::read_write_lock *v1214;
  const char *v1215;
  malloc_zone_t *v1216;
  int v1217;
  uint64_t v1218;
  geo::read_write_lock *v1219;
  const char *v1220;
  malloc_zone_t *v1221;
  id v1222;
  void *v1223;
  std::__shared_weak_count_vtbl *v1224;
  uint64_t *v1225;
  id v1226;
  id v1227;
  void *v1229;
  id v1230;
  gdc::LayerDataStore *v1231;
  gdc::LayerDataStore *v1232;
  uint64_t *v1233;
  id v1234;
  geo::TaskQueue *v1235;
  geo::TaskQueue *v1236;
  geo::TaskQueue *v1238;
  gdc::LayerDataStore **v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  gdc::LayerDataStore *v1243;
  gdc::LayerDataStore *v1244;
  uint64_t v1245[2];
  uint64_t v1246[2];
  uint64_t v1247[3];
  std::__shared_weak_count *v1248;
  gdc::LayerDataStore *v1249;
  std::__shared_weak_count *v1250;
  uint64_t v1251[3];
  std::__shared_weak_count *v1252;
  uint64_t v1253[3];
  std::__shared_weak_count *v1254;
  uint64_t v1255[2];
  uint64_t v1256[3];
  std::__shared_weak_count *v1257;
  gdc::LayerDataStore *v1258;
  std::__shared_weak_count *v1259;
  gdc::LayerDataStore *v1260;
  std::__shared_weak_count *v1261;
  gdc::LayerDataStore *v1262;
  std::__shared_weak_count *v1263;
  uint64_t v1264[2];
  uint64_t v1265[3];
  std::__shared_weak_count *v1266;
  gdc::LayerDataStore *v1267;
  std::__shared_weak_count *v1268;
  gdc::LayerDataStore *v1269;
  std::__shared_weak_count *v1270;
  uint64_t v1271[3];
  std::__shared_weak_count *v1272;
  uint64_t v1273[2];
  uint64_t v1274[2];
  uint64_t v1275[2];
  uint64_t v1276[3];
  std::__shared_weak_count *v1277;
  gdc::LayerDataStore *v1278;
  std::__shared_weak_count *v1279;
  uint64_t v1280[2];
  uint64_t v1281[2];
  gdc::LayerDataStore *v1282;
  std::__shared_weak_count *v1283;
  gdc::LayerDataStore *v1284;
  std::__shared_weak_count *v1285;
  uint64_t v1286[2];
  uint64_t v1287[3];
  std::__shared_weak_count *v1288;
  uint64_t v1289[2];
  uint64_t v1290[2];
  uint64_t v1291[2];
  uint64_t v1292[2];
  uint64_t v1293[3];
  std::__shared_weak_count *v1294;
  gdc::LayerDataStore *v1295;
  std::__shared_weak_count *v1296;
  uint64_t v1297[3];
  std::__shared_weak_count *v1298;
  uint64_t v1299[2];
  uint64_t v1300[2];
  uint64_t v1301[2];
  uint64_t v1302[2];
  uint64_t v1303[2];
  gdc::LayerDataStore *v1304;
  std::__shared_weak_count *v1305;
  gdc::LayerDataStore *v1306;
  std::__shared_weak_count *v1307;
  gdc::LayerDataStore *v1308;
  std::__shared_weak_count *v1309;
  _QWORD v1310[3];
  _QWORD *v1311;
  _QWORD v1312[3];
  _QWORD *v1313;
  _QWORD v1314[3];
  _QWORD *v1315;
  _QWORD v1316[3];
  _QWORD *v1317;
  _QWORD v1318[3];
  _QWORD *v1319;
  _QWORD v1320[3];
  _QWORD *v1321;
  _QWORD v1322[3];
  _QWORD *v1323;
  _QWORD v1324[3];
  _QWORD *v1325;
  _QWORD v1326[3];
  _QWORD *v1327;
  _QWORD v1328[3];
  _QWORD *v1329;
  uint64_t (**v1330)();
  std::__shared_weak_count *v1331;
  gdc::LayerDataStore **v1332;
  _QWORD v1333[3];
  _QWORD *v1334;
  uint8_t buf[24];
  uint8_t *v1336;
  uint64_t v1337;

  v1337 = *MEMORY[0x1E0C80C00];
  v1230 = a2;
  v1226 = a3;
  v1227 = a4;
  *a1 = *a5;
  v17 = a5[1];
  v1239 = a1;
  a1[1] = v17;
  if (v17)
  {
    v18 = (unint64_t *)((char *)v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a1[2] = 0;
  v20 = operator new();
  v21 = (_QWORD *)a8[3];
  if (!v21)
    goto LABEL_7;
  if (v21 != a8)
  {
    v21 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v21 + 16))(v21);
LABEL_7:
    v1329 = v21;
    goto LABEL_9;
  }
  v1329 = v1328;
  (*(void (**)(_QWORD *, _QWORD *))(*a8 + 24))(a8, v1328);
  v21 = v1329;
LABEL_9:
  v22 = *((_QWORD *)*a5 + 3);
  *(_QWORD *)v20 = &off_1E42B0958;
  v23 = v20 + 72;
  *(_OWORD *)(v20 + 8) = 0u;
  *(_OWORD *)(v20 + 24) = 0u;
  *(_OWORD *)(v20 + 40) = 0u;
  *(_OWORD *)(v20 + 56) = 0u;
  if (v21)
  {
    if (v21 == v1328)
    {
      *(_QWORD *)(v20 + 96) = v23;
      (*(void (**)(_QWORD *, uint64_t))(v1328[0] + 24))(v1328, v20 + 72);
    }
    else
    {
      *(_QWORD *)(v20 + 96) = (*(uint64_t (**)(_QWORD *))(*v21 + 16))(v21);
    }
  }
  else
  {
    *(_QWORD *)(v20 + 96) = 0;
  }
  *(_OWORD *)(v20 + 120) = 0u;
  *(_OWORD *)(v20 + 104) = 0u;
  *(_DWORD *)(v20 + 136) = 1065353216;
  v24 = operator new();
  v25 = *(_QWORD *)(v20 + 96);
  if (v25)
  {
    if (v25 == v23)
    {
      v1334 = v1333;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v23 + 24))(v20 + 72, v1333);
    }
    else
    {
      v1334 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
    }
  }
  else
  {
    v1334 = 0;
  }
  *(_QWORD *)v24 = &off_1E42B0890;
  *(_OWORD *)(v24 + 8) = 0u;
  *(_OWORD *)(v24 + 24) = 0u;
  *(_OWORD *)(v24 + 40) = 0u;
  *(_OWORD *)(v24 + 56) = 0u;
  *(_OWORD *)(v24 + 72) = 0u;
  *(_OWORD *)(v24 + 88) = 0u;
  *(_OWORD *)(v24 + 104) = 0u;
  *(_DWORD *)(v24 + 120) = 1065353216;
  *(_OWORD *)(v24 + 128) = 0u;
  *(_OWORD *)(v24 + 144) = 0u;
  *(_DWORD *)(v24 + 160) = 1065353216;
  *(_OWORD *)(v24 + 168) = 0u;
  *(_OWORD *)(v24 + 184) = 0u;
  *(_OWORD *)(v24 + 208) = 0u;
  *(_DWORD *)(v24 + 200) = 1065353216;
  *(_OWORD *)(v24 + 224) = 0u;
  *(_DWORD *)(v24 + 240) = 1065353216;
  *(_QWORD *)(v24 + 248) = 0;
  *(_QWORD *)(v24 + 256) = 0;
  *(_QWORD *)(v24 + 264) = 0;
  *(_QWORD *)(v24 + 272) = v22;
  *(_QWORD *)(v24 + 280) = 0;
  *(_QWORD *)(v24 + 288) = 0;
  *(_QWORD *)(v24 + 296) = 0;
  v26 = operator new();
  *(_QWORD *)v26 = off_1E42B4698;
  *(_OWORD *)(v26 + 8) = 0u;
  *(_OWORD *)(v26 + 24) = 0u;
  *(_QWORD *)(v26 + 56) = 0;
  *(_QWORD *)(v26 + 40) = 0;
  *(_QWORD *)(v26 + 48) = v26 + 56;
  *(_DWORD *)(v26 + 40) = 1065353216;
  *(_QWORD *)(v26 + 64) = 0;
  *(_QWORD *)(v24 + 304) = v26;
  v27 = (uint64_t)v1334;
  if (!v1334)
    goto LABEL_22;
  if (v1334 != v1333)
  {
    v27 = (*(uint64_t (**)(_QWORD *))(*v1334 + 16))(v1334);
LABEL_22:
    *(_QWORD *)(v24 + 336) = v27;
    goto LABEL_24;
  }
  *(_QWORD *)(v24 + 336) = v24 + 312;
  (*(void (**)(_QWORD *))(v1333[0] + 24))(v1333);
LABEL_24:
  *(_QWORD *)(v24 + 368) = 0;
  *(_QWORD *)(v24 + 400) = 0;
  *(_QWORD *)(v24 + 432) = 0;
  v28 = &off_1E42D5AD0;
  *(_QWORD *)buf = &off_1E42D5AD0;
  v1336 = buf;
  std::__function::__func<gdc::ResourceManager::ResourceManager(geo::TaskQueue *,std::function<void ()(void)>)::$_0,std::allocator<gdc::ResourceManager::ResourceManager(geo::TaskQueue *,std::function<void ()(void)>)::$_0>,std::string ()(unsigned short)>::__clone((uint64_t)buf, (_QWORD *)(v24 + 344));
  v1336 = *(uint8_t **)(v24 + 368);
  v29 = v1336;
  *(_QWORD *)(v24 + 368) = v24 + 344;
  if (v29 == buf)
  {
    v30 = 4;
    v29 = buf;
  }
  else
  {
    if (!v29)
      goto LABEL_29;
    v28 = *(uint64_t (***)())v29;
    v30 = 5;
  }
  ((void (*)(uint8_t *))v28[v30])(v29);
LABEL_29:
  v31 = *(gdc::ResourceManager **)(v20 + 56);
  *(_QWORD *)(v20 + 56) = v24;
  if (v31)
  {
    gdc::ResourceManager::~ResourceManager(v31);
    MEMORY[0x1A1AF4E00]();
  }
  v32 = v1334;
  if (v1334 == v1333)
  {
    v33 = 4;
    v32 = v1333;
  }
  else
  {
    if (!v1334)
      goto LABEL_36;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_36:
  v34 = *(_QWORD *)(v20 + 56);
  v1330 = &off_1E42D5B60;
  v1331 = (std::__shared_weak_count *)v20;
  v1332 = (gdc::LayerDataStore **)&v1330;
  v35 = (_QWORD *)(v34 + 376);
  v1336 = buf;
  std::__function::__func<gdc::LayerDataManager::LayerDataManager(std::function<void ()(void)>,geo::TaskQueue *)::$_0,std::allocator<gdc::LayerDataManager::LayerDataManager(std::function<void ()(void)>,geo::TaskQueue *)::$_0>,void ()(void)>::__clone((uint64_t)&v1330, buf);
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](buf, v35);
  v36 = v1336;
  if (v1336 == buf)
  {
    v37 = 4;
    v36 = buf;
  }
  else
  {
    if (!v1336)
      goto LABEL_41;
    v37 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
LABEL_41:
  v38 = (uint64_t (***)())v1332;
  if (v1332 == (gdc::LayerDataStore **)&v1330)
  {
    v39 = 4;
    v38 = &v1330;
  }
  else
  {
    if (!v1332)
      goto LABEL_46;
    v39 = 5;
  }
  (*v38)[v39]();
LABEL_46:
  v40 = operator new();
  *(_QWORD *)v40 = v40;
  *(_QWORD *)(v40 + 8) = v40;
  *(_OWORD *)(v40 + 16) = 0u;
  *(_OWORD *)(v40 + 32) = 0u;
  *(_QWORD *)(v40 + 48) = 0;
  *(_DWORD *)(v40 + 56) = 1065353216;
  *(_QWORD *)(v40 + 72) = 0;
  *(_QWORD *)(v40 + 80) = 0;
  *(_QWORD *)(v40 + 64) = 0;
  v41 = *(gdc::LayerDataRequestTracker **)(v20 + 64);
  *(_QWORD *)(v20 + 64) = v40;
  if (v41)
  {
    gdc::LayerDataRequestTracker::~LayerDataRequestTracker(v41);
    MEMORY[0x1A1AF4E00]();
  }
  v1239[3] = (gdc::LayerDataStore *)v20;
  v42 = v1329;
  if (v1329 == v1328)
  {
    v43 = 4;
    v42 = v1328;
  }
  else
  {
    if (!v1329)
      goto LABEL_53;
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_53:
  *((_OWORD *)v1239 + 2) = 0u;
  *((_OWORD *)v1239 + 5) = 0u;
  *((_OWORD *)v1239 + 3) = 0u;
  *((_OWORD *)v1239 + 4) = 0u;
  *((_DWORD *)v1239 + 30) = 1769504;
  v1239[12] = 0;
  v1239[13] = (gdc::LayerDataStore *)(v1239 + 15);
  *((_OWORD *)v1239 + 8) = 0u;
  v1239[14] = (gdc::LayerDataStore *)2;
  *((_OWORD *)v1239 + 9) = 0u;
  *(_OWORD *)(v1239 + 21) = 0u;
  *((_DWORD *)v1239 + 40) = 1065353216;
  *(_OWORD *)(v1239 + 27) = 0u;
  *(_OWORD *)(v1239 + 23) = 0u;
  *(_OWORD *)(v1239 + 25) = 0u;
  *(_OWORD *)(v1239 + 29) = 0u;
  *((_DWORD *)v1239 + 62) = 1065353216;
  v1239[32] = 0;
  v1225 = (uint64_t *)(v1239 + 32);
  v44 = operator new();
  *(_QWORD *)(v44 + 32) = 0;
  *(_QWORD *)(v44 + 40) = v1239;
  *(_QWORD *)(v44 + 48) = 850045863;
  *(_OWORD *)(v44 + 56) = 0u;
  *(_OWORD *)(v44 + 72) = 0u;
  *(_OWORD *)(v44 + 88) = 0u;
  *(_OWORD *)(v44 + 104) = 0u;
  *(_OWORD *)(v44 + 120) = 0u;
  *(_OWORD *)(v44 + 136) = 0u;
  *(_OWORD *)(v44 + 152) = 0u;
  *(_OWORD *)(v44 + 168) = 0u;
  *(_OWORD *)(v44 + 184) = 0u;
  *(_OWORD *)(v44 + 200) = 0u;
  *(_OWORD *)(v44 + 216) = 0u;
  *(_QWORD *)(v44 + 232) = 850045863;
  *(_OWORD *)(v44 + 240) = 0u;
  *(_OWORD *)(v44 + 256) = 0u;
  *(_OWORD *)(v44 + 272) = 0u;
  *(_OWORD *)(v44 + 288) = 0u;
  *(_OWORD *)(v44 + 304) = 0u;
  *(_QWORD *)(v44 + 320) = 0;
  *(_DWORD *)(v44 + 328) = 1065353216;
  *(_QWORD *)(v44 + 336) = 0;
  *(_WORD *)(v44 + 344) = 0;
  *(_DWORD *)(v44 + 348) = 0;
  *(_QWORD *)(v44 + 352) = a11;
  *(_OWORD *)v44 = 0u;
  *(_OWORD *)(v44 + 16) = 0u;
  v1239[34] = (gdc::LayerDataStore *)v44;
  v45 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)v45 = &off_1E42E6E60;
  *((_QWORD *)v45 + 1) = 0;
  *((_QWORD *)v45 + 2) = 0;
  *((_QWORD *)v45 + 3) = v44;
  v1239[35] = v45;
  v46 = (gdc::LayerDataStore *)v1226;
  v1239[36] = (gdc::LayerDataStore *)&off_1E42B5090;
  v1239[37] = v46;
  *(_OWORD *)(v1239 + 39) = 0u;
  *(_OWORD *)(v1239 + 41) = 0u;
  *(_OWORD *)(v1239 + 43) = 0u;
  *(_OWORD *)(v1239 + 45) = 0u;
  *((_WORD *)v1239 + 188) = 0;
  v1239[48] = (gdc::LayerDataStore *)0x3FF0000000000000;
  *((_BYTE *)v1239 + 392) = 0;
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v47 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v1239;
    _os_log_impl(&dword_19F029000, v47, OS_LOG_TYPE_INFO, "Create World:%p", buf, 0xCu);
  }

  v1326[0] = &off_1E42D41C8;
  v1327 = v1326;
  v1324[0] = &off_1E42D4210;
  v1325 = v1324;
  v1334 = v1333;
  v1333[0] = &off_1E42D4210;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v48 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v48))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v48, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "InitWorld", (const char *)&unk_1A0189141, buf, 2u);
  }

  v49 = v1325;
  if (v1325 == v1324)
  {
    v50 = 4;
    v49 = v1324;
  }
  else
  {
    if (!v1325)
      goto LABEL_66;
    v50 = 5;
  }
  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_66:
  v51 = v1327;
  if (v1327 == v1326)
  {
    v52 = 4;
    v51 = v1326;
  }
  else
  {
    if (!v1327)
      goto LABEL_71;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_71:
  v1233 = (uint64_t *)(v1239 + 34);
  v53 = operator new();
  *(_OWORD *)v53 = 0u;
  *(_OWORD *)(v53 + 16) = 0u;
  *(_OWORD *)(v53 + 32) = 0u;
  *(_QWORD *)(v53 + 24) = v53 + 32;
  *(_QWORD *)(v53 + 56) = 0;
  *(_QWORD *)(v53 + 48) = v53 + 56;
  *(_QWORD *)(v53 + 80) = 0;
  *(_QWORD *)(v53 + 64) = 0;
  *(_QWORD *)(v53 + 72) = v53 + 80;
  *(_QWORD *)(v53 + 88) = 0;
  *(_QWORD *)(v53 + 96) = 850045863;
  *(_OWORD *)(v53 + 104) = 0u;
  *(_OWORD *)(v53 + 120) = 0u;
  *(_OWORD *)(v53 + 136) = 0u;
  *(_QWORD *)(v53 + 152) = 0;
  v54 = (uint64_t)v1239[2];
  v1239[2] = (gdc::LayerDataStore *)v53;
  if (v54)
    std::default_delete<md::RouteOverlayContainer>::operator()[abi:nn180100](v54);
  v1240 = *((_QWORD *)v1239[3] + 7);
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &off_1E42DC388;
  v55[3] = 0;
  v56 = operator new();
  *(_QWORD *)(v56 + 8) = 0;
  *(_QWORD *)(v56 + 32) = 0;
  *(_QWORD *)v56 = v56 + 8;
  *(_QWORD *)(v56 + 16) = 0;
  *(_QWORD *)(v56 + 24) = v56 + 32;
  *(_QWORD *)(v56 + 48) = 850045863;
  *(_QWORD *)(v56 + 40) = 0;
  *(_OWORD *)(v56 + 56) = 0u;
  *(_OWORD *)(v56 + 72) = 0u;
  *(_OWORD *)(v56 + 88) = 0u;
  *(_QWORD *)(v56 + 104) = 0;
  md::FlyoverRegionManager::Internal::updateTriggers((uint64_t ***)v56);
  v57 = v55[3];
  v55[3] = v56;
  if (v57)
  {
    std::mutex::~mutex((std::mutex *)(v57 + 48));
    std::__tree<std::__value_type<unsigned char,md::FlyoverRegionManager::Internal::TileRegionAreaCache>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,md::FlyoverRegionManager::Internal::TileRegionAreaCache>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,md::FlyoverRegionManager::Internal::TileRegionAreaCache>>>::destroy(*(_QWORD **)(v57 + 8));
    MEMORY[0x1A1AF4E00](v57, 0x1020C40010793B7);
  }
  v58 = (std::__shared_weak_count *)v1239[43];
  v1239[42] = (gdc::LayerDataStore *)(v55 + 3);
  v1239[43] = (gdc::LayerDataStore *)v55;
  if (v58)
  {
    p_shared_owners = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(p_shared_owners);
    while (__stlxr(v60 - 1, p_shared_owners));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = operator new();
  v62 = v61;
  v63 = v1239[43];
  *(_QWORD *)v61 = v1239[42];
  *(_QWORD *)(v61 + 8) = v63;
  if (v63)
  {
    v64 = (unint64_t *)((char *)v63 + 8);
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  *(_QWORD *)(v61 + 16) = 512;
  *(_OWORD *)(v61 + 24) = 0u;
  *(_OWORD *)(v61 + 40) = 0u;
  *(_DWORD *)(v61 + 56) = 1065353216;
  *(_QWORD *)(v61 + 64) = v61 + 64;
  *(_QWORD *)(v61 + 72) = v61 + 64;
  *(_OWORD *)(v61 + 80) = 0u;
  *(_OWORD *)(v61 + 96) = 0u;
  *(_QWORD *)(v61 + 112) = 0;
  *(_DWORD *)(v61 + 120) = 1065353216;
  v66 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)v66 = &off_1E42E6D10;
  *((_QWORD *)v66 + 1) = 0;
  *((_QWORD *)v66 + 2) = 0;
  *((_QWORD *)v66 + 3) = v62;
  v67 = (std::__shared_weak_count *)v1239[45];
  v1239[44] = (gdc::LayerDataStore *)v62;
  v1239[45] = v66;
  if (v67)
  {
    v68 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)a5[1];
  v1303[0] = (uint64_t)*a5;
  v1303[1] = (uint64_t)v70;
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  gdc::ResourceManager::addResourceFetcher<md::GEOVectorTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v46, 1, 1, v1303, a9);
  if (v70)
  {
    v73 = (unint64_t *)&v70->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v75 = (std::__shared_weak_count *)a5[1];
  v1302[0] = (uint64_t)*a5;
  v1302[1] = (uint64_t)v75;
  if (v75)
  {
    v76 = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
  }
  gdc::ResourceManager::addResourceFetcher<md::GEOVectorTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v46, 20, 9, v1302, a9);
  if (v75)
  {
    v78 = (unint64_t *)&v75->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v80 = (std::__shared_weak_count *)a5[1];
  v1301[0] = (uint64_t)*a5;
  v1301[1] = (uint64_t)v80;
  if (v80)
  {
    v81 = (unint64_t *)&v80->__shared_owners_;
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 1, v81));
  }
  gdc::ResourceManager::addResourceFetcher<md::GEOVectorTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v46, 13, 8, v1301, a9);
  if (v80)
  {
    v83 = (unint64_t *)&v80->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v85 = (std::__shared_weak_count *)a5[1];
  v1300[0] = (uint64_t)*a5;
  v1300[1] = (uint64_t)v85;
  if (v85)
  {
    v86 = (unint64_t *)&v85->__shared_owners_;
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
  }
  gdc::ResourceManager::addResourceFetcher<md::GEOVectorTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v46, 30, 15, v1300, a9);
  if (v85)
  {
    v88 = (unint64_t *)&v85->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v90 = (std::__shared_weak_count *)a5[1];
  v1299[0] = (uint64_t)*a5;
  v1299[1] = (uint64_t)v90;
  if (v90)
  {
    v91 = (unint64_t *)&v90->__shared_owners_;
    do
      v92 = __ldxr(v91);
    while (__stxr(v92 + 1, v91));
  }
  gdc::ResourceManager::addResourceFetcher<md::GEOVectorTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v46, 37, 10, v1299, a9);
  if (v90)
  {
    v93 = (unint64_t *)&v90->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v95 = *a5;
  v96 = (std::__shared_weak_count *)a5[1];
  v1297[2] = (uint64_t)*a5;
  v1298 = v96;
  if (v96)
  {
    v97 = (unint64_t *)&v96->__shared_owners_;
    do
      v98 = __ldxr(v97);
    while (__stxr(v98 + 1, v97));
  }
  v99 = v46;
  v100 = operator new();
  v1306 = v95;
  v1307 = v96;
  if (v96)
  {
    v101 = (unint64_t *)&v96->__shared_owners_;
    do
      v102 = __ldxr(v101);
    while (__stxr(v102 + 1, v101));
    v103 = v99;
    LOWORD(v1308) = 11;
    v1330 = (uint64_t (**)())v95;
    v1331 = v96;
    do
      v104 = __ldxr(v101);
    while (__stxr(v104 + 1, v101));
  }
  else
  {
    v105 = v99;
    LOWORD(v1308) = 11;
    v1330 = (uint64_t (**)())v95;
    v1331 = 0;
  }
  *(_QWORD *)buf = &off_1E42B4B10;
  *(_QWORD *)&buf[8] = 0;
  md::TiledGEOResourceFetcher::TiledGEOResourceFetcher(v100, v99, 37, (unsigned __int16 *)&v1308, 1, &v1330, (uint64_t)buf, a9);
  *(_QWORD *)buf = &off_1E42B4B10;
  if (v96)
  {
    v106 = (unint64_t *)&v96->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  *(_QWORD *)v100 = &off_1E42AA3B8;
  v108 = (std::__shared_weak_count *)operator new(0x38uLL);
  v108->__shared_owners_ = 0;
  v109 = (unint64_t *)&v108->__shared_owners_;
  v108->__shared_weak_owners_ = 0;
  v108->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD7E0;
  v108[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42A5A38;
  v110 = objc_alloc_init(MEMORY[0x1E0D276B0]);
  v108[1].__shared_owners_ = (uint64_t)&off_1E42B4EB0;
  v108[1].__shared_weak_owners_ = (uint64_t)v110;
  v1308 = (gdc::LayerDataStore *)&v108[1];
  v1309 = v108;
  gdc::ResourceFetcher::setDecoder((_QWORD *)v100, 11, (uint64_t *)&v1308);
  do
    v111 = __ldaxr(v109);
  while (__stlxr(v111 - 1, v109));
  if (!v111)
  {
    ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
    std::__shared_weak_count::__release_weak(v108);
  }
  v112 = v1307;
  *(_BYTE *)(v100 + 616) = 0;

  if (v112)
  {
    v113 = (unint64_t *)&v112->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v100 + 104))(v100);
  atomic_store(a6, (unint64_t *)(v100 + 104));
  *(_QWORD *)buf = v100;
  gdc::ResourceManager::addResourceFetcher(v1240, buf);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);

  if (v1298)
  {
    v115 = &v1298->__shared_owners_;
    do
      v116 = __ldaxr((unint64_t *)v115);
    while (__stlxr(v116 - 1, (unint64_t *)v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v1298->__on_zero_shared)(v1298);
      std::__shared_weak_count::__release_weak(v1298);
    }
  }
  v117 = (std::__shared_weak_count *)a5[1];
  v1297[0] = (uint64_t)*a5;
  v1297[1] = (uint64_t)v117;
  if (v117)
  {
    v118 = (unint64_t *)&v117->__shared_owners_;
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
  }
  gdc::ResourceManager::addResourceFetcher<md::GEOVectorTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v99, 53, 14, v1297, a9);
  if (v117)
  {
    v120 = (unint64_t *)&v117->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v122 = *a5;
  v123 = (std::__shared_weak_count *)a5[1];
  v1295 = *a5;
  v1296 = v123;
  if (v123)
  {
    v124 = (unint64_t *)&v123->__shared_owners_;
    do
      v125 = __ldxr(v124);
    while (__stxr(v125 + 1, v124));
  }
  v126 = v99;
  v127 = (unint64_t *)operator new();
  v1306 = v122;
  v1307 = v123;
  if (v123)
  {
    v128 = (unint64_t *)&v123->__shared_owners_;
    do
      v129 = __ldxr(v128);
    while (__stxr(v129 + 1, v128));
    v130 = v126;
    LOWORD(v1308) = 17;
    v1330 = (uint64_t (**)())v122;
    v1331 = v123;
    do
      v131 = __ldxr(v128);
    while (__stxr(v131 + 1, v128));
  }
  else
  {
    v132 = v126;
    LOWORD(v1308) = 17;
    v1330 = (uint64_t (**)())v122;
    v1331 = 0;
  }
  *(_QWORD *)buf = &off_1E42B4B10;
  *(_QWORD *)&buf[8] = 0;
  md::TiledGEOResourceFetcher::TiledGEOResourceFetcher((uint64_t)v127, v126, 22, (unsigned __int16 *)&v1308, 1, &v1330, (uint64_t)buf, a9);
  *(_QWORD *)buf = &off_1E42B4B10;
  if (v123)
  {
    v133 = (unint64_t *)&v123->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  *v127 = (unint64_t)&off_1E42A7DC0;
  v135 = (std::__shared_weak_count *)operator new(0x20uLL);
  v135->__shared_owners_ = 0;
  v136 = (unint64_t *)&v135->__shared_owners_;
  v135->__shared_weak_owners_ = 0;
  v135->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD498;
  v135[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42A35E0;
  v1308 = (gdc::LayerDataStore *)&v135[1];
  v1309 = v135;
  gdc::ResourceFetcher::setDecoder(v127, 17, (uint64_t *)&v1308);
  do
    v137 = __ldaxr(v136);
  while (__stlxr(v137 - 1, v136));
  if (!v137)
  {
    ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
    std::__shared_weak_count::__release_weak(v135);
  }
  v138 = v1307;

  if (v138)
  {
    v139 = (unint64_t *)&v138->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  (*(void (**)(unint64_t *))(*v127 + 104))(v127);
  atomic_store(a6, v127 + 13);
  *(_QWORD *)buf = v127;
  gdc::ResourceManager::addResourceFetcher(v1240, buf);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);

  if (v1296)
  {
    v141 = &v1296->__shared_owners_;
    do
      v142 = __ldaxr((unint64_t *)v141);
    while (__stlxr(v142 - 1, (unint64_t *)v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v1296->__on_zero_shared)(v1296);
      std::__shared_weak_count::__release_weak(v1296);
    }
  }
  v143 = *a5;
  v144 = (std::__shared_weak_count *)a5[1];
  v1293[2] = (uint64_t)*a5;
  v1294 = v144;
  if (v144)
  {
    v145 = (unint64_t *)&v144->__shared_owners_;
    do
      v146 = __ldxr(v145);
    while (__stxr(v146 + 1, v145));
  }
  v147 = v126;
  v148 = (unint64_t *)operator new();
  v1306 = v143;
  v1307 = v144;
  if (v144)
  {
    v149 = (unint64_t *)&v144->__shared_owners_;
    do
      v150 = __ldxr(v149);
    while (__stxr(v150 + 1, v149));
    v151 = v147;
    LOWORD(v1308) = 16;
    v1330 = (uint64_t (**)())v143;
    v1331 = v144;
    do
      v152 = __ldxr(v149);
    while (__stxr(v152 + 1, v149));
  }
  else
  {
    v153 = v147;
    LOWORD(v1308) = 16;
    v1330 = (uint64_t (**)())v143;
    v1331 = 0;
  }
  *(_QWORD *)buf = &off_1E42B4B10;
  *(_QWORD *)&buf[8] = 0;
  md::TiledGEOResourceFetcher::TiledGEOResourceFetcher((uint64_t)v148, v147, 12, (unsigned __int16 *)&v1308, 1, &v1330, (uint64_t)buf, a9);
  *(_QWORD *)buf = &off_1E42B4B10;
  if (v144)
  {
    v154 = (unint64_t *)&v144->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  *v148 = (unint64_t)&off_1E42A6D38;
  v156 = (std::__shared_weak_count *)operator new(0x20uLL);
  v156->__shared_owners_ = 0;
  v157 = (unint64_t *)&v156->__shared_owners_;
  v156->__shared_weak_owners_ = 0;
  v156->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD2D8;
  v156[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42A2640;
  v1308 = (gdc::LayerDataStore *)&v156[1];
  v1309 = v156;
  gdc::ResourceFetcher::setDecoder(v148, 16, (uint64_t *)&v1308);
  do
    v158 = __ldaxr(v157);
  while (__stlxr(v158 - 1, v157));
  if (!v158)
  {
    ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
    std::__shared_weak_count::__release_weak(v156);
  }
  v159 = v1307;

  if (v159)
  {
    v160 = (unint64_t *)&v159->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  (*(void (**)(unint64_t *))(*v148 + 104))(v148);
  atomic_store(a6, v148 + 13);
  *(_QWORD *)buf = v148;
  gdc::ResourceManager::addResourceFetcher(v1240, buf);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);

  if (v1294)
  {
    v162 = &v1294->__shared_owners_;
    do
      v163 = __ldaxr((unint64_t *)v162);
    while (__stlxr(v163 - 1, (unint64_t *)v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v1294->__on_zero_shared)(v1294);
      std::__shared_weak_count::__release_weak(v1294);
    }
  }
  v164 = (std::__shared_weak_count *)a5[1];
  v1293[0] = (uint64_t)*a5;
  v1293[1] = (uint64_t)v164;
  if (v164)
  {
    v165 = (unint64_t *)&v164->__shared_owners_;
    do
      v166 = __ldxr(v165);
    while (__stxr(v166 + 1, v165));
  }
  gdc::ResourceManager::addResourceFetcher<md::DaVinciGroundTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v147, 58, 27, v1293, a9);
  if (v164)
  {
    v167 = (unint64_t *)&v164->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v169 = (std::__shared_weak_count *)a5[1];
  v1292[0] = (uint64_t)*a5;
  v1292[1] = (uint64_t)v169;
  if (v169)
  {
    v170 = (unint64_t *)&v169->__shared_owners_;
    do
      v171 = __ldxr(v170);
    while (__stxr(v171 + 1, v170));
  }
  gdc::ResourceManager::addResourceFetcher<md::S2TileFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v147, 79, 37, v1292, a9);
  if (v169)
  {
    v172 = (unint64_t *)&v169->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v174 = (std::__shared_weak_count *)a5[1];
  v1291[0] = (uint64_t)*a5;
  v1291[1] = (uint64_t)v174;
  if (v174)
  {
    v175 = (unint64_t *)&v174->__shared_owners_;
    do
      v176 = __ldxr(v175);
    while (__stxr(v176 + 1, v175));
  }
  gdc::ResourceManager::addResourceFetcher<md::GEOVectorTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v147, 73, 38, v1291, a9);
  if (v174)
  {
    v177 = (unint64_t *)&v174->__shared_owners_;
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  v179 = (std::__shared_weak_count *)a5[1];
  v1290[0] = (uint64_t)*a5;
  v1290[1] = (uint64_t)v179;
  if (v179)
  {
    v180 = (unint64_t *)&v179->__shared_owners_;
    do
      v181 = __ldxr(v180);
    while (__stxr(v181 + 1, v180));
  }
  gdc::ResourceManager::addResourceFetcher<md::S2TileFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v147, 67, 39, v1290, a9);
  if (v179)
  {
    v182 = (unint64_t *)&v179->__shared_owners_;
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  v184 = (std::__shared_weak_count *)a5[1];
  v1289[0] = (uint64_t)*a5;
  v1289[1] = (uint64_t)v184;
  if (v184)
  {
    v185 = (unint64_t *)&v184->__shared_owners_;
    do
      v186 = __ldxr(v185);
    while (__stxr(v186 + 1, v185));
  }
  gdc::ResourceManager::addResourceFetcher<md::GEOVectorTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v147, 68, 40, v1289, a9);
  if (v184)
  {
    v187 = (unint64_t *)&v184->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  v189 = *a5;
  v190 = (std::__shared_weak_count *)a5[1];
  v1287[2] = (uint64_t)*a5;
  v1288 = v190;
  if (v190)
  {
    v191 = (unint64_t *)&v190->__shared_owners_;
    do
      v192 = __ldxr(v191);
    while (__stxr(v192 + 1, v191));
  }
  v193 = v147;
  v194 = operator new();
  v1306 = v189;
  v1307 = v190;
  if (v190)
  {
    v195 = (unint64_t *)&v190->__shared_owners_;
    do
      v196 = __ldxr(v195);
    while (__stxr(v196 + 1, v195));
    v197 = v193;
    LOWORD(v1308) = 45;
    v1330 = (uint64_t (**)())v189;
    v1331 = v190;
    do
      v198 = __ldxr(v195);
    while (__stxr(v198 + 1, v195));
  }
  else
  {
    v199 = v193;
    LOWORD(v1308) = 45;
    v1330 = (uint64_t (**)())v189;
    v1331 = 0;
  }
  *(_QWORD *)buf = &off_1E42B4B10;
  *(_QWORD *)&buf[8] = 0;
  md::TiledGEOResourceFetcher::TiledGEOResourceFetcher(v194, v193, 85, (unsigned __int16 *)&v1308, 1, &v1330, (uint64_t)buf, a9);
  *(_QWORD *)buf = &off_1E42B4B10;
  if (v190)
  {
    v200 = (unint64_t *)&v190->__shared_owners_;
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  *(_QWORD *)v194 = &off_1E4290610;
  v202 = (std::__shared_weak_count *)operator new(0x38uLL);
  v202->__shared_owners_ = 0;
  v203 = (unint64_t *)&v202->__shared_owners_;
  v202->__shared_weak_owners_ = 0;
  v202->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD7E0;
  v202[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42A5A38;
  v204 = objc_alloc_init(MEMORY[0x1E0D276B0]);
  v202[1].__shared_owners_ = (uint64_t)&off_1E42B4EB0;
  v202[1].__shared_weak_owners_ = (uint64_t)v204;
  v1308 = (gdc::LayerDataStore *)&v202[1];
  v1309 = v202;
  gdc::ResourceFetcher::setDecoder((_QWORD *)v194, 45, (uint64_t *)&v1308);
  do
    v205 = __ldaxr(v203);
  while (__stlxr(v205 - 1, v203));
  if (!v205)
  {
    ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
    std::__shared_weak_count::__release_weak(v202);
  }
  v206 = v1307;
  *(_BYTE *)(v194 + 616) = 0;
  *(_BYTE *)(v194 + 618) = 1;

  if (v206)
  {
    v207 = (unint64_t *)&v206->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v194 + 104))(v194);
  atomic_store(a6, (unint64_t *)(v194 + 104));
  *(_QWORD *)buf = v194;
  gdc::ResourceManager::addResourceFetcher(v1240, buf);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);

  if (v1288)
  {
    v209 = &v1288->__shared_owners_;
    do
      v210 = __ldaxr((unint64_t *)v209);
    while (__stlxr(v210 - 1, (unint64_t *)v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v1288->__on_zero_shared)(v1288);
      std::__shared_weak_count::__release_weak(v1288);
    }
  }
  v211 = (std::__shared_weak_count *)a5[1];
  v1287[0] = (uint64_t)*a5;
  v1287[1] = (uint64_t)v211;
  if (v211)
  {
    v212 = (unint64_t *)&v211->__shared_owners_;
    do
      v213 = __ldxr(v212);
    while (__stxr(v213 + 1, v212));
  }
  gdc::ResourceManager::addResourceFetcher<md::GEOVectorTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v193, 84, 47, v1287, a9);
  if (v211)
  {
    v214 = (unint64_t *)&v211->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }
  v216 = (std::__shared_weak_count *)a5[1];
  v1286[0] = (uint64_t)*a5;
  v1286[1] = (uint64_t)v216;
  if (v216)
  {
    v217 = (unint64_t *)&v216->__shared_owners_;
    do
      v218 = __ldxr(v217);
    while (__stxr(v218 + 1, v217));
  }
  gdc::ResourceManager::addResourceFetcher<md::GEOFlyoverTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>,VKSharedResources * {__strong}>(v1240, a6, v193, 15, 48, v1286, v1230, a9);
  if (v216)
  {
    v219 = (unint64_t *)&v216->__shared_owners_;
    do
      v220 = __ldaxr(v219);
    while (__stlxr(v220 - 1, v219));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }
  v221 = *a5;
  v222 = (std::__shared_weak_count *)a5[1];
  v1284 = *a5;
  v1285 = v222;
  if (v222)
  {
    v223 = (unint64_t *)&v222->__shared_owners_;
    do
      v224 = __ldxr(v223);
    while (__stxr(v224 + 1, v223));
  }
  v225 = (std::__shared_weak_count *)v1239[43];
  v1282 = v1239[42];
  v1283 = v225;
  if (v225)
  {
    v226 = (unint64_t *)&v225->__shared_owners_;
    do
      v227 = __ldxr(v226);
    while (__stxr(v227 + 1, v226));
  }
  v228 = v193;
  v229 = operator new();
  v1304 = v221;
  v1305 = v222;
  if (v222)
  {
    v230 = (unint64_t *)&v222->__shared_owners_;
    do
      v231 = __ldxr(v230);
    while (__stxr(v231 + 1, v230));
    v232 = v228;
    strcpy((char *)buf, "1");
    v1308 = v221;
    v1309 = v222;
    do
      v233 = __ldxr(v230);
    while (__stxr(v233 + 1, v230));
  }
  else
  {
    v234 = v228;
    strcpy((char *)buf, "1");
    v1308 = v221;
    v1309 = 0;
  }
  v1330 = &off_1E42B4B10;
  v1331 = 0;
  md::TiledGEOResourceFetcher::TiledGEOResourceFetcher(v229, v228, 52, (unsigned __int16 *)buf, 1, &v1308, (uint64_t)&v1330, a9);
  v1330 = &off_1E42B4B10;
  if (v222)
  {
    v235 = (unint64_t *)&v222->__shared_owners_;
    do
      v236 = __ldaxr(v235);
    while (__stlxr(v236 - 1, v235));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
      std::__shared_weak_count::__release_weak(v222);
    }
  }
  *(_QWORD *)v229 = &off_1E42A9528;
  v237 = v1283;
  *(_QWORD *)(v229 + 624) = v1282;
  *(_QWORD *)(v229 + 632) = v237;
  if (v237)
  {
    v238 = (unint64_t *)&v237->__shared_owners_;
    do
      v239 = __ldxr(v238);
    while (__stxr(v239 + 1, v238));
  }
  *(_BYTE *)(v229 + 616) = 0;
  v240 = (std::__shared_weak_count *)operator new(0x40uLL);
  v240->__shared_owners_ = 0;
  v241 = (unint64_t *)&v240->__shared_owners_;
  v240->__shared_weak_owners_ = 0;
  v240->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDC40;
  *(_QWORD *)buf = &off_1E42D3CB8;
  *(_QWORD *)&buf[8] = v229;
  v1336 = buf;
  v240[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42A9500;
  v240[2].__shared_owners_ = (uint64_t)&v240[1].__shared_owners_;
  std::__function::__func<md::GEOFlyoverMetadataResourceFetcher::GEOFlyoverMetadataResourceFetcher(GEOApplicationAuditToken *,GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>,std::shared_ptr<md::FlyoverRegionManager> const&)::$_0,std::allocator<md::GEOFlyoverMetadataResourceFetcher::GEOFlyoverMetadataResourceFetcher(GEOApplicationAuditToken *,GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>,std::shared_ptr<md::FlyoverRegionManager> const&)::$_0>,std::shared_ptr<geo::c3mm::C3mmArea> ()>::__clone((uint64_t)buf, &v240[1].__shared_owners_);
  v1306 = (gdc::LayerDataStore *)&v240[1];
  v1307 = v240;
  gdc::ResourceFetcher::setDecoder((_QWORD *)v229, 49, (uint64_t *)&v1306);
  do
    v242 = __ldaxr(v241);
  while (__stlxr(v242 - 1, v241));
  if (!v242)
  {
    ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
    std::__shared_weak_count::__release_weak(v240);
  }
  v243 = v1305;

  if (v243)
  {
    v244 = (unint64_t *)&v243->__shared_owners_;
    do
      v245 = __ldaxr(v244);
    while (__stlxr(v245 - 1, v244));
    if (!v245)
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v243);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v229 + 104))(v229);
  atomic_store(a6, (unint64_t *)(v229 + 104));
  *(_QWORD *)buf = v229;
  gdc::ResourceManager::addResourceFetcher(v1240, buf);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);

  if (v1283)
  {
    v246 = &v1283->__shared_owners_;
    do
      v247 = __ldaxr((unint64_t *)v246);
    while (__stlxr(v247 - 1, (unint64_t *)v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v1283->__on_zero_shared)(v1283);
      std::__shared_weak_count::__release_weak(v1283);
    }
  }
  if (v1285)
  {
    v248 = &v1285->__shared_owners_;
    do
      v249 = __ldaxr((unint64_t *)v248);
    while (__stlxr(v249 - 1, (unint64_t *)v248));
    if (!v249)
    {
      ((void (*)(std::__shared_weak_count *))v1285->__on_zero_shared)(v1285);
      std::__shared_weak_count::__release_weak(v1285);
    }
  }
  v250 = (std::__shared_weak_count *)a5[1];
  v1281[0] = (uint64_t)*a5;
  v1281[1] = (uint64_t)v250;
  if (v250)
  {
    v251 = (unint64_t *)&v250->__shared_owners_;
    do
      v252 = __ldxr(v251);
    while (__stxr(v252 + 1, v251));
  }
  gdc::ResourceManager::addResourceFetcher<md::GEOFlyoverTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>,VKSharedResources * {__strong}>(v1240, a6, v228, 16, 20, v1281, v1230, a9);
  if (v250)
  {
    v253 = (unint64_t *)&v250->__shared_owners_;
    do
      v254 = __ldaxr(v253);
    while (__stlxr(v254 - 1, v253));
    if (!v254)
    {
      ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
      std::__shared_weak_count::__release_weak(v250);
    }
  }
  v255 = (std::__shared_weak_count *)a5[1];
  v1280[0] = (uint64_t)*a5;
  v1280[1] = (uint64_t)v255;
  if (v255)
  {
    v256 = (unint64_t *)&v255->__shared_owners_;
    do
      v257 = __ldxr(v256);
    while (__stxr(v257 + 1, v256));
  }
  gdc::ResourceManager::addResourceFetcher<md::GEOFlyoverTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>,VKSharedResources * {__strong}>(v1240, a6, v228, 92, 50, v1280, v1230, a9);
  if (v255)
  {
    v258 = (unint64_t *)&v255->__shared_owners_;
    do
      v259 = __ldaxr(v258);
    while (__stlxr(v259 - 1, v258));
    if (!v259)
    {
      ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
      std::__shared_weak_count::__release_weak(v255);
    }
  }
  v260 = *a5;
  v261 = (std::__shared_weak_count *)a5[1];
  v1278 = *a5;
  v1279 = v261;
  if (v261)
  {
    v262 = (unint64_t *)&v261->__shared_owners_;
    do
      v263 = __ldxr(v262);
    while (__stxr(v263 + 1, v262));
  }
  v264 = v228;
  v265 = operator new();
  v1306 = v260;
  v1307 = v261;
  if (v261)
  {
    v266 = (unint64_t *)&v261->__shared_owners_;
    do
      v267 = __ldxr(v266);
    while (__stxr(v267 + 1, v266));
    v268 = v264;
    LOWORD(v1308) = 18;
    v1330 = (uint64_t (**)())v260;
    v1331 = v261;
    do
      v269 = __ldxr(v266);
    while (__stxr(v269 + 1, v266));
  }
  else
  {
    v270 = v264;
    LOWORD(v1308) = 18;
    v1330 = (uint64_t (**)())v260;
    v1331 = 0;
  }
  *(_QWORD *)buf = &off_1E42B4B10;
  *(_QWORD *)&buf[8] = 0;
  md::TiledGEOResourceFetcher::TiledGEOResourceFetcher(v265, v264, 1, (unsigned __int16 *)&v1308, 1, &v1330, (uint64_t)buf, a9);
  *(_QWORD *)buf = &off_1E42B4B10;
  if (v261)
  {
    v271 = (unint64_t *)&v261->__shared_owners_;
    do
      v272 = __ldaxr(v271);
    while (__stlxr(v272 - 1, v271));
    if (!v272)
    {
      ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
      std::__shared_weak_count::__release_weak(v261);
    }
  }
  *(_QWORD *)v265 = &off_1E42A3428;
  v273 = (std::__shared_weak_count *)operator new(0x20uLL);
  v273->__shared_owners_ = 0;
  v274 = (unint64_t *)&v273->__shared_owners_;
  v273->__shared_weak_owners_ = 0;
  v273->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD460;
  v273[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42A3400;
  v1308 = (gdc::LayerDataStore *)&v273[1];
  v1309 = v273;
  gdc::ResourceFetcher::setDecoder((_QWORD *)v265, 18, (uint64_t *)&v1308);
  do
    v275 = __ldaxr(v274);
  while (__stlxr(v275 - 1, v274));
  if (!v275)
  {
    ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
    std::__shared_weak_count::__release_weak(v273);
  }
  v276 = v1307;
  *(_BYTE *)(v265 + 616) = 0;

  if (v276)
  {
    v277 = (unint64_t *)&v276->__shared_owners_;
    do
      v278 = __ldaxr(v277);
    while (__stlxr(v278 - 1, v277));
    if (!v278)
    {
      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
      std::__shared_weak_count::__release_weak(v276);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v265 + 104))(v265);
  atomic_store(a6, (unint64_t *)(v265 + 104));
  *(_QWORD *)buf = v265;
  gdc::ResourceManager::addResourceFetcher(v1240, buf);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);

  if (v1279)
  {
    v279 = &v1279->__shared_owners_;
    do
      v280 = __ldaxr((unint64_t *)v279);
    while (__stlxr(v280 - 1, (unint64_t *)v279));
    if (!v280)
    {
      ((void (*)(std::__shared_weak_count *))v1279->__on_zero_shared)(v1279);
      std::__shared_weak_count::__release_weak(v1279);
    }
  }
  v281 = *a5;
  v282 = (std::__shared_weak_count *)a5[1];
  v1276[2] = (uint64_t)*a5;
  v1277 = v282;
  if (v282)
  {
    v283 = (unint64_t *)&v282->__shared_owners_;
    do
      v284 = __ldxr(v283);
    while (__stxr(v284 + 1, v283));
  }
  v285 = v264;
  v286 = operator new();
  v1306 = v281;
  v1307 = v282;
  if (v282)
  {
    v287 = (unint64_t *)&v282->__shared_owners_;
    do
      v288 = __ldxr(v287);
    while (__stxr(v288 + 1, v287));
    v289 = v285;
    LOWORD(v1308) = 19;
    v1330 = (uint64_t (**)())v281;
    v1331 = v282;
    do
      v290 = __ldxr(v287);
    while (__stxr(v290 + 1, v287));
  }
  else
  {
    v291 = v285;
    LOWORD(v1308) = 19;
    v1330 = (uint64_t (**)())v281;
    v1331 = 0;
  }
  *(_QWORD *)buf = &off_1E42B4B10;
  *(_QWORD *)&buf[8] = 0;
  md::TiledGEOResourceFetcher::TiledGEOResourceFetcher(v286, v285, 1, (unsigned __int16 *)&v1308, 1, &v1330, (uint64_t)buf, a9);
  *(_QWORD *)buf = &off_1E42B4B10;
  if (v282)
  {
    v292 = (unint64_t *)&v282->__shared_owners_;
    do
      v293 = __ldaxr(v292);
    while (__stlxr(v293 - 1, v292));
    if (!v293)
    {
      ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
      std::__shared_weak_count::__release_weak(v282);
    }
  }
  *(_QWORD *)v286 = &off_1E42AA950;
  v294 = (std::__shared_weak_count *)operator new(0x20uLL);
  v294->__shared_owners_ = 0;
  v295 = (unint64_t *)&v294->__shared_owners_;
  v294->__shared_weak_owners_ = 0;
  v294->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD690;
  v294[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42A41E0;
  v1308 = (gdc::LayerDataStore *)&v294[1];
  v1309 = v294;
  gdc::ResourceFetcher::setDecoder((_QWORD *)v286, 19, (uint64_t *)&v1308);
  do
    v296 = __ldaxr(v295);
  while (__stlxr(v296 - 1, v295));
  if (!v296)
  {
    ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
    std::__shared_weak_count::__release_weak(v294);
  }
  v297 = v1307;
  *(_BYTE *)(v286 + 616) = 0;

  if (v297)
  {
    v298 = (unint64_t *)&v297->__shared_owners_;
    do
      v299 = __ldaxr(v298);
    while (__stlxr(v299 - 1, v298));
    if (!v299)
    {
      ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
      std::__shared_weak_count::__release_weak(v297);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v286 + 104))(v286);
  atomic_store(a6, (unint64_t *)(v286 + 104));
  *(_QWORD *)buf = v286;
  gdc::ResourceManager::addResourceFetcher(v1240, buf);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);

  if (v1277)
  {
    v300 = &v1277->__shared_owners_;
    do
      v301 = __ldaxr((unint64_t *)v300);
    while (__stlxr(v301 - 1, (unint64_t *)v300));
    if (!v301)
    {
      ((void (*)(std::__shared_weak_count *))v1277->__on_zero_shared)(v1277);
      std::__shared_weak_count::__release_weak(v1277);
    }
  }
  v302 = (std::__shared_weak_count *)a5[1];
  v1276[0] = (uint64_t)*a5;
  v1276[1] = (uint64_t)v302;
  if (v302)
  {
    v303 = (unint64_t *)&v302->__shared_owners_;
    do
      v304 = __ldxr(v303);
    while (__stxr(v304 + 1, v303));
  }
  gdc::ResourceManager::addResourceFetcher<md::RasterTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v285, 0, 0, v1276, a9);
  if (v302)
  {
    v305 = (unint64_t *)&v302->__shared_owners_;
    do
      v306 = __ldaxr(v305);
    while (__stlxr(v306 - 1, v305));
    if (!v306)
    {
      ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
      std::__shared_weak_count::__release_weak(v302);
    }
  }
  v307 = (std::__shared_weak_count *)a5[1];
  v1275[0] = (uint64_t)*a5;
  v1275[1] = (uint64_t)v307;
  if (v307)
  {
    v308 = (unint64_t *)&v307->__shared_owners_;
    do
      v309 = __ldxr(v308);
    while (__stxr(v309 + 1, v308));
  }
  gdc::ResourceManager::addResourceFetcher<md::RasterTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v285, 5, 2, v1275, a9);
  if (v307)
  {
    v310 = (unint64_t *)&v307->__shared_owners_;
    do
      v311 = __ldaxr(v310);
    while (__stlxr(v311 - 1, v310));
    if (!v311)
    {
      ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
      std::__shared_weak_count::__release_weak(v307);
    }
  }
  v312 = (std::__shared_weak_count *)a5[1];
  v1274[0] = (uint64_t)*a5;
  v1274[1] = (uint64_t)v312;
  if (v312)
  {
    v313 = (unint64_t *)&v312->__shared_owners_;
    do
      v314 = __ldxr(v313);
    while (__stxr(v314 + 1, v313));
  }
  gdc::ResourceManager::addResourceFetcher<md::RasterTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v285, 6, 3, v1274, a9);
  if (v312)
  {
    v315 = (unint64_t *)&v312->__shared_owners_;
    do
      v316 = __ldaxr(v315);
    while (__stlxr(v316 - 1, v315));
    if (!v316)
    {
      ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
      std::__shared_weak_count::__release_weak(v312);
    }
  }
  v317 = (std::__shared_weak_count *)a5[1];
  v1273[0] = (uint64_t)*a5;
  v1273[1] = (uint64_t)v317;
  if (v317)
  {
    v318 = (unint64_t *)&v317->__shared_owners_;
    do
      v319 = __ldxr(v318);
    while (__stxr(v319 + 1, v318));
  }
  gdc::ResourceManager::addResourceFetcher<md::RasterTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v285, 7, 4, v1273, a9);
  if (v317)
  {
    v320 = (unint64_t *)&v317->__shared_owners_;
    do
      v321 = __ldaxr(v320);
    while (__stlxr(v321 - 1, v320));
    if (!v321)
    {
      ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
      std::__shared_weak_count::__release_weak(v317);
    }
  }
  v322 = *a5;
  v323 = (std::__shared_weak_count *)a5[1];
  v1271[2] = (uint64_t)*a5;
  v1272 = v323;
  if (v323)
  {
    v324 = (unint64_t *)&v323->__shared_owners_;
    do
      v325 = __ldxr(v324);
    while (__stxr(v325 + 1, v324));
  }
  v326 = v285;
  v327 = (unint64_t *)operator new();
  v328 = v327;
  *(_QWORD *)buf = v322;
  *(_QWORD *)&buf[8] = v323;
  if (v323)
  {
    v329 = (unint64_t *)&v323->__shared_owners_;
    do
      v330 = __ldxr(v329);
    while (__stxr(v330 + 1, v329));
  }
  md::RasterTileResourceFetcher::RasterTileResourceFetcher(v327, v326, 33, 51, (uint64_t *)buf, 0x100000001, a9);
  if (v323)
  {
    v331 = (unint64_t *)&v323->__shared_owners_;
    do
      v332 = __ldaxr(v331);
    while (__stlxr(v332 - 1, v331));
    if (!v332)
    {
      ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
      std::__shared_weak_count::__release_weak(v323);
    }
  }
  (*(void (**)(unint64_t *))(*v328 + 104))(v328);
  atomic_store(a6, v328 + 13);
  v1330 = (uint64_t (**)())v328;
  gdc::ResourceManager::addResourceFetcher(v1240, &v1330);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);

  if (v1272)
  {
    v333 = &v1272->__shared_owners_;
    do
      v334 = __ldaxr((unint64_t *)v333);
    while (__stlxr(v334 - 1, (unint64_t *)v333));
    if (!v334)
    {
      ((void (*)(std::__shared_weak_count *))v1272->__on_zero_shared)(v1272);
      std::__shared_weak_count::__release_weak(v1272);
    }
  }
  v335 = (std::__shared_weak_count *)a5[1];
  v1271[0] = (uint64_t)*a5;
  v1271[1] = (uint64_t)v335;
  if (v335)
  {
    v336 = (unint64_t *)&v335->__shared_owners_;
    do
      v337 = __ldxr(v336);
    while (__stxr(v337 + 1, v336));
  }
  gdc::ResourceManager::addResourceFetcher<md::GEOVectorTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v326, 11, 6, v1271, a9);
  if (v335)
  {
    v338 = (unint64_t *)&v335->__shared_owners_;
    do
      v339 = __ldaxr(v338);
    while (__stlxr(v339 - 1, v338));
    if (!v339)
    {
      ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
      std::__shared_weak_count::__release_weak(v335);
    }
  }
  v340 = *a5;
  v341 = (std::__shared_weak_count *)a5[1];
  v1269 = *a5;
  v1270 = v341;
  if (v341)
  {
    v342 = (unint64_t *)&v341->__shared_owners_;
    do
      v343 = __ldxr(v342);
    while (__stxr(v343 + 1, v342));
  }
  v344 = v326;
  v345 = operator new();
  v1306 = v340;
  v1307 = v341;
  if (v341)
  {
    v346 = (unint64_t *)&v341->__shared_owners_;
    do
      v347 = __ldxr(v346);
    while (__stxr(v347 + 1, v346));
    v348 = v344;
    LOWORD(v1308) = 12;
    v1330 = (uint64_t (**)())v340;
    v1331 = v341;
    do
      v349 = __ldxr(v346);
    while (__stxr(v349 + 1, v346));
  }
  else
  {
    v350 = v344;
    LOWORD(v1308) = 12;
    v1330 = (uint64_t (**)())v340;
    v1331 = 0;
  }
  *(_QWORD *)buf = &off_1E42B4B10;
  *(_QWORD *)&buf[8] = 0;
  md::TiledGEOResourceFetcher::TiledGEOResourceFetcher(v345, v344, 69, (unsigned __int16 *)&v1308, 1, &v1330, (uint64_t)buf, a9);
  *(_QWORD *)buf = &off_1E42B4B10;
  if (v341)
  {
    v351 = (unint64_t *)&v341->__shared_owners_;
    do
      v352 = __ldaxr(v351);
    while (__stlxr(v352 - 1, v351));
    if (!v352)
    {
      ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
      std::__shared_weak_count::__release_weak(v341);
    }
  }
  *(_QWORD *)v345 = &off_1E42AA308;
  v353 = (std::__shared_weak_count *)operator new(0x38uLL);
  v353->__shared_owners_ = 0;
  v354 = (unint64_t *)&v353->__shared_owners_;
  v353->__shared_weak_owners_ = 0;
  v353->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD7E0;
  v353[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42A5A38;
  v355 = objc_alloc_init(MEMORY[0x1E0D276B0]);
  v353[1].__shared_owners_ = (uint64_t)&off_1E42B4EB0;
  v353[1].__shared_weak_owners_ = (uint64_t)v355;
  v1308 = (gdc::LayerDataStore *)&v353[1];
  v1309 = v353;
  gdc::ResourceFetcher::setDecoder((_QWORD *)v345, 12, (uint64_t *)&v1308);
  do
    v356 = __ldaxr(v354);
  while (__stlxr(v356 - 1, v354));
  if (!v356)
  {
    ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
    std::__shared_weak_count::__release_weak(v353);
  }
  v357 = v1307;
  *(_BYTE *)(v345 + 616) = 0;

  if (v357)
  {
    v358 = (unint64_t *)&v357->__shared_owners_;
    do
      v359 = __ldaxr(v358);
    while (__stlxr(v359 - 1, v358));
    if (!v359)
    {
      ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
      std::__shared_weak_count::__release_weak(v357);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v345 + 104))(v345);
  atomic_store(a6, (unint64_t *)(v345 + 104));
  *(_QWORD *)buf = v345;
  gdc::ResourceManager::addResourceFetcher(v1240, buf);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);

  if (v1270)
  {
    v360 = &v1270->__shared_owners_;
    do
      v361 = __ldaxr((unint64_t *)v360);
    while (__stlxr(v361 - 1, (unint64_t *)v360));
    if (!v361)
    {
      ((void (*)(std::__shared_weak_count *))v1270->__on_zero_shared)(v1270);
      std::__shared_weak_count::__release_weak(v1270);
    }
  }
  v362 = *a5;
  v363 = (std::__shared_weak_count *)a5[1];
  v1267 = *a5;
  v1268 = v363;
  if (v363)
  {
    v364 = (unint64_t *)&v363->__shared_owners_;
    do
      v365 = __ldxr(v364);
    while (__stxr(v365 + 1, v364));
  }
  v366 = v344;
  v367 = (unint64_t *)operator new();
  v1306 = v362;
  v1307 = v363;
  if (v363)
  {
    v368 = (unint64_t *)&v363->__shared_owners_;
    do
      v369 = __ldxr(v368);
    while (__stxr(v369 + 1, v368));
    v370 = v366;
    LOWORD(v1308) = 22;
    v1330 = (uint64_t (**)())v362;
    v1331 = v363;
    do
      v371 = __ldxr(v368);
    while (__stxr(v371 + 1, v368));
  }
  else
  {
    v372 = v366;
    LOWORD(v1308) = 22;
    v1330 = (uint64_t (**)())v362;
    v1331 = 0;
  }
  *(_QWORD *)buf = &off_1E42B4B10;
  *(_QWORD *)&buf[8] = 0;
  md::TiledGEOResourceFetcher::TiledGEOResourceFetcher((uint64_t)v367, v366, 57, (unsigned __int16 *)&v1308, 1, &v1330, (uint64_t)buf, a9);
  *(_QWORD *)buf = &off_1E42B4B10;
  if (v363)
  {
    v373 = (unint64_t *)&v363->__shared_owners_;
    do
      v374 = __ldaxr(v373);
    while (__stlxr(v374 - 1, v373));
    if (!v374)
    {
      ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
      std::__shared_weak_count::__release_weak(v363);
    }
  }
  *v367 = (unint64_t)&off_1E42ABCB8;
  v375 = (std::__shared_weak_count *)operator new(0x20uLL);
  v375->__shared_owners_ = 0;
  v376 = (unint64_t *)&v375->__shared_owners_;
  v375->__shared_weak_owners_ = 0;
  v375->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDDC8;
  v375[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42ABC90;
  v1308 = (gdc::LayerDataStore *)&v375[1];
  v1309 = v375;
  gdc::ResourceFetcher::setDecoder(v367, 22, (uint64_t *)&v1308);
  do
    v377 = __ldaxr(v376);
  while (__stlxr(v377 - 1, v376));
  if (!v377)
  {
    ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
    std::__shared_weak_count::__release_weak(v375);
  }
  v378 = v1307;

  if (v378)
  {
    v379 = (unint64_t *)&v378->__shared_owners_;
    do
      v380 = __ldaxr(v379);
    while (__stlxr(v380 - 1, v379));
    if (!v380)
    {
      ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
      std::__shared_weak_count::__release_weak(v378);
    }
  }
  (*(void (**)(unint64_t *))(*v367 + 104))(v367);
  atomic_store(a6, v367 + 13);
  *(_QWORD *)buf = v367;
  gdc::ResourceManager::addResourceFetcher(v1240, buf);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);

  if (v1268)
  {
    v381 = &v1268->__shared_owners_;
    do
      v382 = __ldaxr((unint64_t *)v381);
    while (__stlxr(v382 - 1, (unint64_t *)v381));
    if (!v382)
    {
      ((void (*)(std::__shared_weak_count *))v1268->__on_zero_shared)(v1268);
      std::__shared_weak_count::__release_weak(v1268);
    }
  }
  v383 = (std::__shared_weak_count *)a5[1];
  v1265[2] = (uint64_t)*a5;
  v1266 = v383;
  if (v383)
  {
    v384 = (unint64_t *)&v383->__shared_owners_;
    do
      v385 = __ldxr(v384);
    while (__stxr(v385 + 1, v384));
  }
  v1234 = v366;
  v1235 = (geo::TaskQueue *)v1230;
  v386 = (unint64_t *)operator new();
  v387 = v1234;
  v388 = v1235;
  strcpy((char *)&buf[4], "\"");
  *(_DWORD *)buf = 2162711;
  gdc::ResourceFetcher::ResourceFetcher((uint64_t)v386, (unsigned __int16 *)buf, 3, 1.0);
  *v386 = (unint64_t)&off_1E42ABB58;
  v386[55] = (unint64_t)&off_1E42B5490;
  v386[56] = 0;
  v389 = v387;
  v386[58] = (unint64_t)&off_1E42B5090;
  v386[59] = (unint64_t)v389;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("MuninMeshResourceFetcher<%p>"), v386);
  v390 = (id)objc_claimAutoreleasedReturnValue();
  v391 = (void *)v386[56];
  v386[56] = (unint64_t)v390;

  objc_msgSend(MEMORY[0x1E0D275D0], "modernLoader");
  v392 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v392, "openForClient:", v386[56]);

  v393 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v393->__shared_owners_ = 0;
  v394 = (unint64_t *)&v393->__shared_owners_;
  v393->__shared_weak_owners_ = 0;
  v393->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBBE0;
  v395 = v388;
  v393[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E4293FE0;
  v396 = v395;
  v397 = v396;
  v393[1].__shared_owners_ = (uint64_t)&off_1E429DEB8;
  v393[1].__shared_weak_owners_ = (uint64_t)&off_1E42B4D50;
  if (v396)
    v398 = v396;
  else
    v398 = 0;
  v393[2].__vftable = v398;
  v399 = v398;
  v393[2].__shared_weak_owners_ = (uint64_t)&off_1E4299000;
  v393[3].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B4D50;
  v393[3].__shared_owners_ = (uint64_t)v397;
  v393[4].std::__shared_count = 0u;
  *(_OWORD *)&v393[4].__shared_weak_owners_ = 0u;
  LODWORD(v393[5].__shared_owners_) = 1065353216;
  v393[5].__shared_weak_owners_ = 850045863;
  v393[6].std::__shared_count = 0u;
  *(_OWORD *)&v393[6].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v393[7].__shared_owners_ = 0u;
  v393[8].__vftable = 0;

  *(_QWORD *)buf = v393 + 1;
  *(_QWORD *)&buf[8] = v393;
  gdc::ResourceFetcher::setDecoder(v386, 23, (uint64_t *)buf);
  do
    v400 = __ldaxr(v394);
  while (__stlxr(v400 - 1, v394));
  if (!v400)
  {
    ((void (*)(std::__shared_weak_count *))v393->__on_zero_shared)(v393);
    std::__shared_weak_count::__release_weak(v393);
  }
  v401 = (std::__shared_weak_count *)operator new(0x40uLL);
  v401->__shared_owners_ = 0;
  v402 = (unint64_t *)&v401->__shared_owners_;
  v401->__shared_weak_owners_ = 0;
  v401->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDFC0;
  v401[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42AFCF0;
  v403 = v397;
  v401[1].__shared_owners_ = (uint64_t)&off_1E429DEB8;
  v401[1].__shared_weak_owners_ = (uint64_t)&off_1E42B4D50;
  v401[2].__vftable = v403;
  *(_QWORD *)buf = v401 + 1;
  *(_QWORD *)&buf[8] = v401;
  gdc::ResourceFetcher::setDecoder(v386, 33, (uint64_t *)buf);
  do
    v404 = __ldaxr(v402);
  while (__stlxr(v404 - 1, v402));
  if (!v404)
  {
    ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
    std::__shared_weak_count::__release_weak(v401);
  }
  v405 = (std::__shared_weak_count *)operator new(0x38uLL);
  v405->__shared_owners_ = 0;
  v406 = (unint64_t *)&v405->__shared_owners_;
  v405->__shared_weak_owners_ = 0;
  v405->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCBA0;
  v407 = v403;
  v405[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E429DEB8;
  v405[1].__shared_owners_ = (uint64_t)&off_1E42B4D50;
  v405[1].__shared_weak_owners_ = (uint64_t)v407;
  *(_QWORD *)buf = v405 + 1;
  *(_QWORD *)&buf[8] = v405;
  gdc::ResourceFetcher::setDecoder(v386, 34, (uint64_t *)buf);
  do
    v408 = __ldaxr(v406);
  while (__stlxr(v408 - 1, v406));
  if (!v408)
  {
    ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
    std::__shared_weak_count::__release_weak(v405);
  }

  (*(void (**)(unint64_t *))(*v386 + 104))(v386);
  atomic_store(a6, v386 + 13);
  *(_QWORD *)buf = v386;
  gdc::ResourceManager::addResourceFetcher(v1240, buf);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);

  if (v1266)
  {
    v409 = &v1266->__shared_owners_;
    do
      v410 = __ldaxr((unint64_t *)v409);
    while (__stlxr(v410 - 1, (unint64_t *)v409));
    if (!v410)
    {
      ((void (*)(std::__shared_weak_count *))v1266->__on_zero_shared)(v1266);
      std::__shared_weak_count::__release_weak(v1266);
    }
  }
  v411 = (std::__shared_weak_count *)a5[1];
  v1265[0] = (uint64_t)*a5;
  v1265[1] = (uint64_t)v411;
  if (v411)
  {
    v412 = (unint64_t *)&v411->__shared_owners_;
    do
      v413 = __ldxr(v412);
    while (__stxr(v413 + 1, v412));
  }
  gdc::ResourceManager::addResourceFetcher<md::GEOVectorTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v389, 56, 24, v1265, a9);
  if (v411)
  {
    v414 = (unint64_t *)&v411->__shared_owners_;
    do
      v415 = __ldaxr(v414);
    while (__stlxr(v415 - 1, v414));
    if (!v415)
    {
      ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
      std::__shared_weak_count::__release_weak(v411);
    }
  }
  v416 = (std::__shared_weak_count *)a5[1];
  v1264[0] = (uint64_t)*a5;
  v1264[1] = (uint64_t)v416;
  if (v416)
  {
    v417 = (unint64_t *)&v416->__shared_owners_;
    do
      v418 = __ldxr(v417);
    while (__stxr(v418 + 1, v417));
  }
  gdc::ResourceManager::addResourceFetcher<md::GEOVectorTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v389, 64, 26, v1264, a9);
  if (v416)
  {
    v419 = (unint64_t *)&v416->__shared_owners_;
    do
      v420 = __ldaxr(v419);
    while (__stlxr(v420 - 1, v419));
    if (!v420)
    {
      ((void (*)(std::__shared_weak_count *))v416->__on_zero_shared)(v416);
      std::__shared_weak_count::__release_weak(v416);
    }
  }
  v421 = *a5;
  v422 = (std::__shared_weak_count *)a5[1];
  v1262 = *a5;
  v1263 = v422;
  if (v422)
  {
    v423 = (unint64_t *)&v422->__shared_owners_;
    do
      v424 = __ldxr(v423);
    while (__stxr(v424 + 1, v423));
  }
  v425 = v389;
  v426 = operator new();
  v1306 = v421;
  v1307 = v422;
  if (v422)
  {
    v427 = (unint64_t *)&v422->__shared_owners_;
    do
      v428 = __ldxr(v427);
    while (__stxr(v428 + 1, v427));
    v429 = v425;
    LOWORD(v1308) = 35;
    v1330 = (uint64_t (**)())v421;
    v1331 = v422;
    do
      v430 = __ldxr(v427);
    while (__stxr(v430 + 1, v427));
  }
  else
  {
    v431 = v425;
    LOWORD(v1308) = 35;
    v1330 = (uint64_t (**)())v421;
    v1331 = 0;
  }
  if (VKRasterTileOverlayTileLoader::onceToken != -1)
    dispatch_once(&VKRasterTileOverlayTileLoader::onceToken, &__block_literal_global_38318);
  v432 = (id)VKRasterTileOverlayTileLoader::_loader;
  *(_QWORD *)buf = &off_1E42B4B10;
  *(_QWORD *)&buf[8] = v432;
  md::TiledGEOResourceFetcher::TiledGEOResourceFetcher(v426, v425, 0, (unsigned __int16 *)&v1308, 1, &v1330, (uint64_t)buf, a9);
  *(_QWORD *)buf = &off_1E42B4B10;

  if (v422)
  {
    v433 = (unint64_t *)&v422->__shared_owners_;
    do
      v434 = __ldaxr(v433);
    while (__stlxr(v434 - 1, v433));
    if (!v434)
    {
      ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
      std::__shared_weak_count::__release_weak(v422);
    }
  }
  *(_QWORD *)v426 = &off_1E42A9070;
  v435 = (std::__shared_weak_count *)operator new(0x20uLL);
  v435->__shared_owners_ = 0;
  v436 = (unint64_t *)&v435->__shared_owners_;
  v435->__shared_weak_owners_ = 0;
  v435->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDBD0;
  v435[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42A9048;
  v1308 = (gdc::LayerDataStore *)&v435[1];
  v1309 = v435;
  gdc::ResourceFetcher::setDecoder((_QWORD *)v426, 35, (uint64_t *)&v1308);
  do
    v437 = __ldaxr(v436);
  while (__stlxr(v437 - 1, v436));
  if (!v437)
  {
    ((void (*)(std::__shared_weak_count *))v435->__on_zero_shared)(v435);
    std::__shared_weak_count::__release_weak(v435);
  }
  v438 = v1307;
  *(_WORD *)(v426 + 616) = 0;

  if (v438)
  {
    v439 = (unint64_t *)&v438->__shared_owners_;
    do
      v440 = __ldaxr(v439);
    while (__stlxr(v440 - 1, v439));
    if (!v440)
    {
      ((void (*)(std::__shared_weak_count *))v438->__on_zero_shared)(v438);
      std::__shared_weak_count::__release_weak(v438);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v426 + 104))(v426);
  atomic_store(a6, (unint64_t *)(v426 + 104));
  *(_QWORD *)buf = v426;
  gdc::ResourceManager::addResourceFetcher(v1240, buf);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);

  if (v1263)
  {
    v441 = &v1263->__shared_owners_;
    do
      v442 = __ldaxr((unint64_t *)v441);
    while (__stlxr(v442 - 1, (unint64_t *)v441));
    if (!v442)
    {
      ((void (*)(std::__shared_weak_count *))v1263->__on_zero_shared)(v1263);
      std::__shared_weak_count::__release_weak(v1263);
    }
  }
  v443 = *a5;
  v444 = (std::__shared_weak_count *)a5[1];
  v1260 = *a5;
  v1261 = v444;
  if (v444)
  {
    v445 = (unint64_t *)&v444->__shared_owners_;
    do
      v446 = __ldxr(v445);
    while (__stxr(v446 + 1, v445));
  }
  v447 = v425;
  v448 = operator new();
  v1306 = v443;
  v1307 = v444;
  if (v444)
  {
    v449 = (unint64_t *)&v444->__shared_owners_;
    do
      v450 = __ldxr(v449);
    while (__stxr(v450 + 1, v449));
    v451 = v447;
    LOWORD(v1308) = 41;
    v1330 = (uint64_t (**)())v443;
    v1331 = v444;
    do
      v452 = __ldxr(v449);
    while (__stxr(v452 + 1, v449));
  }
  else
  {
    v453 = v447;
    LOWORD(v1308) = 41;
    v1330 = (uint64_t (**)())v443;
    v1331 = 0;
  }
  if (VKRasterTileOverlayTileLoader::onceToken != -1)
    dispatch_once(&VKRasterTileOverlayTileLoader::onceToken, &__block_literal_global_38318);
  v454 = (id)VKRasterTileOverlayTileLoader::_loader;
  *(_QWORD *)buf = &off_1E42B4B10;
  *(_QWORD *)&buf[8] = v454;
  md::TiledGEOResourceFetcher::TiledGEOResourceFetcher(v448, v447, 0, (unsigned __int16 *)&v1308, 1, &v1330, (uint64_t)buf, a9);
  *(_QWORD *)buf = &off_1E42B4B10;

  if (v444)
  {
    v455 = (unint64_t *)&v444->__shared_owners_;
    do
      v456 = __ldaxr(v455);
    while (__stlxr(v456 - 1, v455));
    if (!v456)
    {
      ((void (*)(std::__shared_weak_count *))v444->__on_zero_shared)(v444);
      std::__shared_weak_count::__release_weak(v444);
    }
  }
  *(_QWORD *)v448 = &off_1E42A8DD8;
  v457 = (std::__shared_weak_count *)operator new(0x20uLL);
  v457->__shared_owners_ = 0;
  v458 = (unint64_t *)&v457->__shared_owners_;
  v457->__shared_weak_owners_ = 0;
  v457->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDB98;
  v457[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42A8DB0;
  v1308 = (gdc::LayerDataStore *)&v457[1];
  v1309 = v457;
  gdc::ResourceFetcher::setDecoder((_QWORD *)v448, 41, (uint64_t *)&v1308);
  do
    v459 = __ldaxr(v458);
  while (__stlxr(v459 - 1, v458));
  if (!v459)
  {
    ((void (*)(std::__shared_weak_count *))v457->__on_zero_shared)(v457);
    std::__shared_weak_count::__release_weak(v457);
  }
  v460 = v1307;
  *(_WORD *)(v448 + 616) = 0;

  if (v460)
  {
    v461 = (unint64_t *)&v460->__shared_owners_;
    do
      v462 = __ldaxr(v461);
    while (__stlxr(v462 - 1, v461));
    if (!v462)
    {
      ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
      std::__shared_weak_count::__release_weak(v460);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v448 + 104))(v448);
  atomic_store(a6, (unint64_t *)(v448 + 104));
  *(_QWORD *)buf = v448;
  gdc::ResourceManager::addResourceFetcher(v1240, buf);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);

  if (v1261)
  {
    v463 = &v1261->__shared_owners_;
    do
      v464 = __ldaxr((unint64_t *)v463);
    while (__stlxr(v464 - 1, (unint64_t *)v463));
    if (!v464)
    {
      ((void (*)(std::__shared_weak_count *))v1261->__on_zero_shared)(v1261);
      std::__shared_weak_count::__release_weak(v1261);
    }
  }
  v465 = *a5;
  v466 = (std::__shared_weak_count *)a5[1];
  v1258 = *a5;
  v1259 = v466;
  if (v466)
  {
    v467 = (unint64_t *)&v466->__shared_owners_;
    do
      v468 = __ldxr(v467);
    while (__stxr(v468 + 1, v467));
  }
  v469 = v447;
  v470 = (unint64_t *)operator new();
  v1308 = v465;
  v1309 = v466;
  if (v466)
  {
    v471 = (unint64_t *)&v466->__shared_owners_;
    do
      v472 = __ldxr(v471);
    while (__stxr(v472 + 1, v471));
    v473 = v469;
    LOWORD(v1330) = 28;
    *(_QWORD *)buf = v465;
    *(_QWORD *)&buf[8] = v466;
    do
      v474 = __ldxr(v471);
    while (__stxr(v474 + 1, v471));
  }
  else
  {
    v475 = v469;
    LOWORD(v1330) = 28;
    *(_OWORD *)buf = (unint64_t)v465;
  }
  md::IdentifiedGEOResourceFetcher::IdentifiedGEOResourceFetcher((uint64_t)v470, v469, 59, (unsigned __int16 *)&v1330, 1, buf, a9);
  if (v466)
  {
    v476 = (unint64_t *)&v466->__shared_owners_;
    do
      v477 = __ldaxr(v476);
    while (__stlxr(v477 - 1, v476));
    if (!v477)
    {
      ((void (*)(std::__shared_weak_count *))v466->__on_zero_shared)(v466);
      std::__shared_weak_count::__release_weak(v466);
    }
  }
  *v470 = (unint64_t)&off_1E42A3BE0;
  v478 = (std::__shared_weak_count *)operator new(0x20uLL);
  v478->__shared_owners_ = 0;
  v479 = (unint64_t *)&v478->__shared_owners_;
  v478->__shared_weak_owners_ = 0;
  v478->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD578;
  v478[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42A3BB8;
  v1330 = (uint64_t (**)())&v478[1];
  v1331 = v478;
  gdc::ResourceFetcher::setDecoder(v470, 28, (uint64_t *)&v1330);
  do
    v480 = __ldaxr(v479);
  while (__stlxr(v480 - 1, v479));
  if (!v480)
  {
    ((void (*)(std::__shared_weak_count *))v478->__on_zero_shared)(v478);
    std::__shared_weak_count::__release_weak(v478);
  }
  v481 = v1309;

  if (v481)
  {
    v482 = (unint64_t *)&v481->__shared_owners_;
    do
      v483 = __ldaxr(v482);
    while (__stlxr(v483 - 1, v482));
    if (!v483)
    {
      ((void (*)(std::__shared_weak_count *))v481->__on_zero_shared)(v481);
      std::__shared_weak_count::__release_weak(v481);
    }
  }
  (*(void (**)(unint64_t *))(*v470 + 104))(v470);
  atomic_store(a6, v470 + 13);
  *(_QWORD *)buf = v470;
  gdc::ResourceManager::addResourceFetcher(v1240, buf);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);

  if (v1259)
  {
    v484 = &v1259->__shared_owners_;
    do
      v485 = __ldaxr((unint64_t *)v484);
    while (__stlxr(v485 - 1, (unint64_t *)v484));
    if (!v485)
    {
      ((void (*)(std::__shared_weak_count *))v1259->__on_zero_shared)(v1259);
      std::__shared_weak_count::__release_weak(v1259);
    }
  }
  v487 = *a5;
  v486 = (std::__shared_weak_count *)a5[1];
  v1256[2] = (uint64_t)*a5;
  v1257 = v486;
  if (v486)
  {
    v488 = (unint64_t *)&v486->__shared_owners_;
    do
      v489 = __ldxr(v488);
    while (__stxr(v489 + 1, v488));
  }
  v490 = v469;
  v491 = (unint64_t *)operator new();
  v1308 = v487;
  v1309 = v486;
  if (v486)
  {
    v492 = (unint64_t *)&v486->__shared_owners_;
    do
      v493 = __ldxr(v492);
    while (__stxr(v493 + 1, v492));
    v494 = v490;
    LOWORD(v1330) = 36;
    *(_QWORD *)buf = v487;
    *(_QWORD *)&buf[8] = v486;
    do
      v495 = __ldxr(v492);
    while (__stxr(v495 + 1, v492));
  }
  else
  {
    v496 = v490;
    LOWORD(v1330) = 36;
    *(_OWORD *)buf = (unint64_t)v487;
  }
  md::IdentifiedGEOResourceFetcher::IdentifiedGEOResourceFetcher((uint64_t)v491, v490, 60, (unsigned __int16 *)&v1330, 1, buf, a9);
  if (v486)
  {
    v497 = (unint64_t *)&v486->__shared_owners_;
    do
      v498 = __ldaxr(v497);
    while (__stlxr(v498 - 1, v497));
    if (!v498)
    {
      ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
      std::__shared_weak_count::__release_weak(v486);
    }
  }
  *v491 = (unint64_t)&off_1E42A7AB0;
  v499 = (std::__shared_weak_count *)operator new(0x20uLL);
  v499->__shared_owners_ = 0;
  v500 = (unint64_t *)&v499->__shared_owners_;
  v499->__shared_weak_owners_ = 0;
  v499->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDA10;
  v499[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42A7A88;
  v1330 = (uint64_t (**)())&v499[1];
  v1331 = v499;
  gdc::ResourceFetcher::setDecoder(v491, 36, (uint64_t *)&v1330);
  do
    v501 = __ldaxr(v500);
  while (__stlxr(v501 - 1, v500));
  if (!v501)
  {
    ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
    std::__shared_weak_count::__release_weak(v499);
  }
  v502 = v1309;

  if (v502)
  {
    v503 = (unint64_t *)&v502->__shared_owners_;
    do
      v504 = __ldaxr(v503);
    while (__stlxr(v504 - 1, v503));
    if (!v504)
    {
      ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
      std::__shared_weak_count::__release_weak(v502);
    }
  }
  (*(void (**)(unint64_t *))(*v491 + 104))(v491);
  atomic_store(a6, v491 + 13);
  *(_QWORD *)buf = v491;
  gdc::ResourceManager::addResourceFetcher(v1240, buf);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);

  if (v1257)
  {
    v505 = &v1257->__shared_owners_;
    do
      v506 = __ldaxr((unint64_t *)v505);
    while (__stlxr(v506 - 1, (unint64_t *)v505));
    if (!v506)
    {
      ((void (*)(std::__shared_weak_count *))v1257->__on_zero_shared)(v1257);
      std::__shared_weak_count::__release_weak(v1257);
    }
  }
  v507 = (std::__shared_weak_count *)a5[1];
  v1256[0] = (uint64_t)*a5;
  v1256[1] = (uint64_t)v507;
  if (v507)
  {
    v508 = (unint64_t *)&v507->__shared_owners_;
    do
      v509 = __ldxr(v508);
    while (__stxr(v509 + 1, v508));
  }
  gdc::ResourceManager::addResourceFetcher<md::GEOVectorTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v490, 61, 29, v1256, a9);
  if (v507)
  {
    v510 = (unint64_t *)&v507->__shared_owners_;
    do
      v511 = __ldaxr(v510);
    while (__stlxr(v511 - 1, v510));
    if (!v511)
    {
      ((void (*)(std::__shared_weak_count *))v507->__on_zero_shared)(v507);
      std::__shared_weak_count::__release_weak(v507);
    }
  }
  v512 = (std::__shared_weak_count *)a5[1];
  v1255[0] = (uint64_t)*a5;
  v1255[1] = (uint64_t)v512;
  if (v512)
  {
    v513 = (unint64_t *)&v512->__shared_owners_;
    do
      v514 = __ldxr(v513);
    while (__stxr(v514 + 1, v513));
  }
  gdc::ResourceManager::addResourceFetcher<md::DaVinciGroundTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v490, 66, 30, v1255, a9);
  if (v512)
  {
    v515 = (unint64_t *)&v512->__shared_owners_;
    do
      v516 = __ldaxr(v515);
    while (__stlxr(v516 - 1, v515));
    if (!v516)
    {
      ((void (*)(std::__shared_weak_count *))v512->__on_zero_shared)(v512);
      std::__shared_weak_count::__release_weak(v512);
    }
  }
  v517 = *a5;
  v518 = (std::__shared_weak_count *)a5[1];
  v1253[2] = (uint64_t)*a5;
  v1254 = v518;
  if (v518)
  {
    v519 = (unint64_t *)&v518->__shared_owners_;
    do
      v520 = __ldxr(v519);
    while (__stxr(v520 + 1, v519));
  }
  v521 = v490;
  v522 = (unint64_t *)operator new();
  v1330 = (uint64_t (**)())v517;
  v1331 = v518;
  if (v518)
  {
    v523 = (unint64_t *)&v518->__shared_owners_;
    do
      v524 = __ldxr(v523);
    while (__stxr(v524 + 1, v523));
    v525 = v521;
    *(_QWORD *)buf = v517;
    *(_QWORD *)&buf[8] = v518;
    do
      v526 = __ldxr(v523);
    while (__stxr(v526 + 1, v523));
  }
  else
  {
    v527 = v521;
    *(_OWORD *)buf = (unint64_t)v517;
  }
  md::GEOVectorTileResourceFetcher::GEOVectorTileResourceFetcher(v522, v521, 66, 31, (uint64_t *)buf, a9);
  if (v518)
  {
    v528 = (unint64_t *)&v518->__shared_owners_;
    do
      v529 = __ldaxr(v528);
    while (__stlxr(v529 - 1, v528));
    if (!v529)
    {
      ((void (*)(std::__shared_weak_count *))v518->__on_zero_shared)(v518);
      std::__shared_weak_count::__release_weak(v518);
    }
  }
  *v522 = (unint64_t)&off_1E426FB10;

  v530 = v1331;
  if (v1331)
  {
    v531 = (unint64_t *)&v1331->__shared_owners_;
    do
      v532 = __ldaxr(v531);
    while (__stlxr(v532 - 1, v531));
    if (!v532)
    {
      ((void (*)(std::__shared_weak_count *))v530->__on_zero_shared)(v530);
      std::__shared_weak_count::__release_weak(v530);
    }
  }
  (*(void (**)(unint64_t *))(*v522 + 104))(v522);
  atomic_store(a6, v522 + 13);
  *(_QWORD *)buf = v522;
  gdc::ResourceManager::addResourceFetcher(v1240, buf);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);

  if (v1254)
  {
    v533 = &v1254->__shared_owners_;
    do
      v534 = __ldaxr((unint64_t *)v533);
    while (__stlxr(v534 - 1, (unint64_t *)v533));
    if (!v534)
    {
      ((void (*)(std::__shared_weak_count *))v1254->__on_zero_shared)(v1254);
      std::__shared_weak_count::__release_weak(v1254);
    }
  }
  v535 = (std::__shared_weak_count *)a5[1];
  v1253[0] = (uint64_t)*a5;
  v1253[1] = (uint64_t)v535;
  if (v535)
  {
    v536 = (unint64_t *)&v535->__shared_owners_;
    do
      v537 = __ldxr(v536);
    while (__stxr(v537 + 1, v536));
  }
  gdc::ResourceManager::addResourceFetcher<md::DaVinciGroundTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v521, 67, 32, v1253, a9);
  if (v535)
  {
    v538 = (unint64_t *)&v535->__shared_owners_;
    do
      v539 = __ldaxr(v538);
    while (__stlxr(v539 - 1, v538));
    if (!v539)
    {
      ((void (*)(std::__shared_weak_count *))v535->__on_zero_shared)(v535);
      std::__shared_weak_count::__release_weak(v535);
    }
  }
  v540 = *a5;
  v541 = (std::__shared_weak_count *)a5[1];
  v1251[2] = (uint64_t)*a5;
  v1252 = v541;
  if (v541)
  {
    v542 = (unint64_t *)&v541->__shared_owners_;
    do
      v543 = __ldxr(v542);
    while (__stxr(v543 + 1, v542));
  }
  v544 = v521;
  v545 = (unint64_t *)operator new();
  v1308 = v540;
  v1309 = v541;
  if (v541)
  {
    v546 = (unint64_t *)&v541->__shared_owners_;
    do
      v547 = __ldxr(v546);
    while (__stxr(v547 + 1, v546));
    v548 = v544;
    LOWORD(v1330) = 42;
    *(_QWORD *)buf = v540;
    *(_QWORD *)&buf[8] = v541;
    do
      v549 = __ldxr(v546);
    while (__stxr(v549 + 1, v546));
  }
  else
  {
    v550 = v544;
    LOWORD(v1330) = 42;
    *(_OWORD *)buf = (unint64_t)v540;
  }
  md::IdentifiedGEOResourceFetcher::IdentifiedGEOResourceFetcher((uint64_t)v545, v544, 82, (unsigned __int16 *)&v1330, 1, buf, a9);
  if (v541)
  {
    v551 = (unint64_t *)&v541->__shared_owners_;
    do
      v552 = __ldaxr(v551);
    while (__stlxr(v552 - 1, v551));
    if (!v552)
    {
      ((void (*)(std::__shared_weak_count *))v541->__on_zero_shared)(v541);
      std::__shared_weak_count::__release_weak(v541);
    }
  }
  *v545 = (unint64_t)&off_1E42AC188;
  v553 = (std::__shared_weak_count *)operator new(0x20uLL);
  v553->__shared_owners_ = 0;
  v554 = (unint64_t *)&v553->__shared_owners_;
  v553->__shared_weak_owners_ = 0;
  v553->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDE00;
  v553[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42AC160;
  v1330 = (uint64_t (**)())&v553[1];
  v1331 = v553;
  gdc::ResourceFetcher::setDecoder(v545, 42, (uint64_t *)&v1330);
  do
    v555 = __ldaxr(v554);
  while (__stlxr(v555 - 1, v554));
  if (!v555)
  {
    ((void (*)(std::__shared_weak_count *))v553->__on_zero_shared)(v553);
    std::__shared_weak_count::__release_weak(v553);
  }
  v556 = v1309;

  if (v556)
  {
    v557 = (unint64_t *)&v556->__shared_owners_;
    do
      v558 = __ldaxr(v557);
    while (__stlxr(v558 - 1, v557));
    if (!v558)
    {
      ((void (*)(std::__shared_weak_count *))v556->__on_zero_shared)(v556);
      std::__shared_weak_count::__release_weak(v556);
    }
  }
  (*(void (**)(unint64_t *))(*v545 + 104))(v545);
  atomic_store(a6, v545 + 13);
  *(_QWORD *)buf = v545;
  gdc::ResourceManager::addResourceFetcher(v1240, buf);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);

  if (v1252)
  {
    v559 = &v1252->__shared_owners_;
    do
      v560 = __ldaxr((unint64_t *)v559);
    while (__stlxr(v560 - 1, (unint64_t *)v559));
    if (!v560)
    {
      ((void (*)(std::__shared_weak_count *))v1252->__on_zero_shared)(v1252);
      std::__shared_weak_count::__release_weak(v1252);
    }
  }
  v561 = (std::__shared_weak_count *)a5[1];
  v1251[0] = (uint64_t)*a5;
  v1251[1] = (uint64_t)v561;
  if (v561)
  {
    v562 = (unint64_t *)&v561->__shared_owners_;
    do
      v563 = __ldxr(v562);
    while (__stxr(v563 + 1, v562));
  }
  gdc::ResourceManager::addResourceFetcher<md::GEOVectorTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v544, 83, 43, v1251, a9);
  if (v561)
  {
    v564 = (unint64_t *)&v561->__shared_owners_;
    do
      v565 = __ldaxr(v564);
    while (__stlxr(v565 - 1, v564));
    if (!v565)
    {
      ((void (*)(std::__shared_weak_count *))v561->__on_zero_shared)(v561);
      std::__shared_weak_count::__release_weak(v561);
    }
  }
  v566 = *a5;
  v567 = (std::__shared_weak_count *)a5[1];
  v1249 = *a5;
  v1250 = v567;
  if (v567)
  {
    v568 = (unint64_t *)&v567->__shared_owners_;
    do
      v569 = __ldxr(v568);
    while (__stxr(v569 + 1, v568));
  }
  v570 = v544;
  v571 = operator new();
  v1306 = v566;
  v1307 = v567;
  if (v567)
  {
    v572 = (unint64_t *)&v567->__shared_owners_;
    do
      v573 = __ldxr(v572);
    while (__stxr(v573 + 1, v572));
    v574 = v570;
    LOWORD(v1308) = 44;
    v1330 = (uint64_t (**)())v566;
    v1331 = v567;
    do
      v575 = __ldxr(v572);
    while (__stxr(v575 + 1, v572));
  }
  else
  {
    v576 = v570;
    LOWORD(v1308) = 44;
    v1330 = (uint64_t (**)())v566;
    v1331 = 0;
  }
  *(_QWORD *)buf = &off_1E42B4B10;
  *(_QWORD *)&buf[8] = 0;
  md::TiledGEOResourceFetcher::TiledGEOResourceFetcher(v571, v570, 90, (unsigned __int16 *)&v1308, 1, &v1330, (uint64_t)buf, a9);
  *(_QWORD *)buf = &off_1E42B4B10;
  if (v567)
  {
    v577 = (unint64_t *)&v567->__shared_owners_;
    do
      v578 = __ldaxr(v577);
    while (__stlxr(v578 - 1, v577));
    if (!v578)
    {
      ((void (*)(std::__shared_weak_count *))v567->__on_zero_shared)(v567);
      std::__shared_weak_count::__release_weak(v567);
    }
  }
  *(_QWORD *)v571 = &off_1E42A8900;
  *(_BYTE *)(v571 + 618) = 0;
  v579 = (std::__shared_weak_count *)operator new(0x38uLL);
  v579->__shared_owners_ = 0;
  v580 = (unint64_t *)&v579->__shared_owners_;
  v579->__shared_weak_owners_ = 0;
  v579->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD7E0;
  v579[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42A5A38;
  v581 = objc_alloc_init(MEMORY[0x1E0D276B0]);
  v579[1].__shared_owners_ = (uint64_t)&off_1E42B4EB0;
  v579[1].__shared_weak_owners_ = (uint64_t)v581;
  v1308 = (gdc::LayerDataStore *)&v579[1];
  v1309 = v579;
  gdc::ResourceFetcher::setDecoder((_QWORD *)v571, 44, (uint64_t *)&v1308);
  do
    v582 = __ldaxr(v580);
  while (__stlxr(v582 - 1, v580));
  if (!v582)
  {
    ((void (*)(std::__shared_weak_count *))v579->__on_zero_shared)(v579);
    std::__shared_weak_count::__release_weak(v579);
  }
  v583 = v1307;
  *(_BYTE *)(v571 + 616) = 0;

  if (v583)
  {
    v584 = (unint64_t *)&v583->__shared_owners_;
    do
      v585 = __ldaxr(v584);
    while (__stlxr(v585 - 1, v584));
    if (!v585)
    {
      ((void (*)(std::__shared_weak_count *))v583->__on_zero_shared)(v583);
      std::__shared_weak_count::__release_weak(v583);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v571 + 104))(v571);
  atomic_store(a6, (unint64_t *)(v571 + 104));
  *(_QWORD *)buf = v571;
  gdc::ResourceManager::addResourceFetcher(v1240, buf);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);

  if (v1250)
  {
    v586 = &v1250->__shared_owners_;
    do
      v587 = __ldaxr((unint64_t *)v586);
    while (__stlxr(v587 - 1, (unint64_t *)v586));
    if (!v587)
    {
      ((void (*)(std::__shared_weak_count *))v1250->__on_zero_shared)(v1250);
      std::__shared_weak_count::__release_weak(v1250);
    }
  }
  v589 = *a5;
  v588 = (std::__shared_weak_count *)a5[1];
  v1247[2] = (uint64_t)*a5;
  v1248 = v588;
  if (v588)
  {
    v590 = (unint64_t *)&v588->__shared_owners_;
    do
      v591 = __ldxr(v590);
    while (__stxr(v591 + 1, v590));
  }
  v592 = v570;
  v1223 = v592;
  v593 = operator new();
  v1306 = v589;
  v1307 = v588;
  if (v588)
  {
    v594 = (unint64_t *)&v588->__shared_owners_;
    do
      v595 = __ldxr(v594);
    while (__stxr(v595 + 1, v594));
    v596 = v592;
    LOWORD(v1308) = 13;
    v1330 = (uint64_t (**)())v589;
    v1331 = v588;
    do
      v597 = __ldxr(v594);
    while (__stxr(v597 + 1, v594));
  }
  else
  {
    v598 = v592;
    LOWORD(v1308) = 13;
    v1330 = (uint64_t (**)())v589;
    v1331 = 0;
  }
  *(_QWORD *)buf = &off_1E42B4B10;
  *(_QWORD *)&buf[8] = 0;
  md::TiledGEOResourceFetcher::TiledGEOResourceFetcher(v593, v592, 87, (unsigned __int16 *)&v1308, 1, &v1330, (uint64_t)buf, a9);
  *(_QWORD *)buf = &off_1E42B4B10;
  if (v588)
  {
    v599 = (unint64_t *)&v588->__shared_owners_;
    do
      v600 = __ldaxr(v599);
    while (__stlxr(v600 - 1, v599));
    if (!v600)
    {
      ((void (*)(std::__shared_weak_count *))v588->__on_zero_shared)(v588);
      std::__shared_weak_count::__release_weak(v588);
    }
  }
  *(_QWORD *)v593 = &off_1E42A8C88;
  v601 = (std::__shared_weak_count *)operator new(0x38uLL);
  v601->__shared_owners_ = 0;
  v602 = (unint64_t *)&v601->__shared_owners_;
  v601->__shared_weak_owners_ = 0;
  v601->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD7E0;
  v601[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42A5A38;
  v603 = objc_alloc_init(MEMORY[0x1E0D276B0]);
  v601[1].__shared_owners_ = (uint64_t)&off_1E42B4EB0;
  v601[1].__shared_weak_owners_ = (uint64_t)v603;
  v1308 = (gdc::LayerDataStore *)&v601[1];
  v1309 = v601;
  gdc::ResourceFetcher::setDecoder((_QWORD *)v593, 13, (uint64_t *)&v1308);
  do
    v604 = __ldaxr(v602);
  while (__stlxr(v604 - 1, v602));
  if (!v604)
  {
    ((void (*)(std::__shared_weak_count *))v601->__on_zero_shared)(v601);
    std::__shared_weak_count::__release_weak(v601);
  }
  v605 = v1307;
  *(_BYTE *)(v593 + 616) = 0;

  if (v605)
  {
    v606 = (unint64_t *)&v605->__shared_owners_;
    do
      v607 = __ldaxr(v606);
    while (__stlxr(v607 - 1, v606));
    if (!v607)
    {
      ((void (*)(std::__shared_weak_count *))v605->__on_zero_shared)(v605);
      std::__shared_weak_count::__release_weak(v605);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v593 + 104))(v593);
  atomic_store(a6, (unint64_t *)(v593 + 104));
  *(_QWORD *)buf = v593;
  gdc::ResourceManager::addResourceFetcher(v1240, buf);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);

  if (v1248)
  {
    v608 = &v1248->__shared_owners_;
    do
      v609 = __ldaxr((unint64_t *)v608);
    while (__stlxr(v609 - 1, (unint64_t *)v608));
    if (!v609)
    {
      ((void (*)(std::__shared_weak_count *))v1248->__on_zero_shared)(v1248);
      std::__shared_weak_count::__release_weak(v1248);
    }
  }
  v610 = (std::__shared_weak_count *)a5[1];
  v1247[0] = (uint64_t)*a5;
  v1247[1] = (uint64_t)v610;
  if (v610)
  {
    v611 = (unint64_t *)&v610->__shared_owners_;
    do
      v612 = __ldxr(v611);
    while (__stxr(v612 + 1, v611));
  }
  gdc::ResourceManager::addResourceFetcher<md::GEOVectorTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v592, 88, 46, v1247, a9);
  if (v610)
  {
    v613 = (unint64_t *)&v610->__shared_owners_;
    do
      v614 = __ldaxr(v613);
    while (__stlxr(v614 - 1, v613));
    if (!v614)
    {
      ((void (*)(std::__shared_weak_count *))v610->__on_zero_shared)(v610);
      std::__shared_weak_count::__release_weak(v610);
    }
  }
  v615 = (std::__shared_weak_count *)a5[1];
  v1246[0] = (uint64_t)*a5;
  v1246[1] = (uint64_t)v615;
  if (v615)
  {
    v616 = (unint64_t *)&v615->__shared_owners_;
    do
      v617 = __ldxr(v616);
    while (__stxr(v617 + 1, v616));
  }
  gdc::ResourceManager::addResourceFetcher<md::S2RasterTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v592, 91, 52, v1246, a9);
  if (v615)
  {
    v618 = (unint64_t *)&v615->__shared_owners_;
    do
      v619 = __ldaxr(v618);
    while (__stlxr(v619 - 1, v618));
    if (!v619)
    {
      ((void (*)(std::__shared_weak_count *))v615->__on_zero_shared)(v615);
      std::__shared_weak_count::__release_weak(v615);
    }
  }
  v620 = (std::__shared_weak_count *)a5[1];
  v1245[0] = (uint64_t)*a5;
  v1245[1] = (uint64_t)v620;
  if (v620)
  {
    v621 = (unint64_t *)&v620->__shared_owners_;
    do
      v622 = __ldxr(v621);
    while (__stxr(v622 + 1, v621));
  }
  gdc::ResourceManager::addResourceFetcher<md::S2RasterTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(v1240, a6, v592, 95, 53, v1245, a9);
  if (v620)
  {
    v623 = (unint64_t *)&v620->__shared_owners_;
    do
      v624 = __ldaxr(v623);
    while (__stlxr(v624 - 1, v623));
    if (!v624)
    {
      ((void (*)(std::__shared_weak_count *))v620->__on_zero_shared)(v620);
      std::__shared_weak_count::__release_weak(v620);
    }
  }
  v1236 = (geo::TaskQueue *)*((_QWORD *)*a5 + 3);
  v1238 = (geo::TaskQueue *)*((_QWORD *)*v1239 + 14);
  v625 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v625);
  v626 = operator new();
  v627 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v628 = v407;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v626, 1, 1, v625, v627, v1236, 1, 0);
  *(_QWORD *)v626 = &off_1E429D898;
  *(_BYTE *)(v626 + 752) = 0;
  *(_QWORD *)(v626 + 760) = &off_1E42B4D50;
  *(_QWORD *)(v626 + 768) = v628;
  *(_OWORD *)(v626 + 784) = 0u;
  *(float *)(v626 + 800) = a9;
  v629 = operator new();
  *(_DWORD *)(v629 + 16) = -1073741827;
  *(_BYTE *)(v629 + 20) = 0;
  *(_QWORD *)v629 = &off_1E42A7D58;
  *(_QWORD *)(v629 + 8) = 0;
  *(_DWORD *)(v629 + 22) = 65537;
  *(_BYTE *)(v629 + 28) = 0;
  *(_DWORD *)(v629 + 40) = 25;
  *(_BYTE *)(v629 + 36) = 1;
  *(_BYTE *)(v629 + 44) = 0;
  *(_BYTE *)(v629 + 46) = 0;
  v1330 = (uint64_t (**)())v626;
  v1308 = (gdc::LayerDataStore *)v629;
  md::World::addMapLayerDataSource(v1239, 1, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v630 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v630);
  v631 = operator new();
  v632 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v633 = v628;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v631, 41, 12, v630, v632, v1236, 1, 0);
  *(_BYTE *)(v631 + 752) = 0;
  *(_QWORD *)(v631 + 760) = &off_1E42B4D50;
  *(_QWORD *)(v631 + 768) = v633;
  *(_OWORD *)(v631 + 784) = 0u;
  *(float *)(v631 + 800) = a9;
  *(_QWORD *)v631 = &off_1E42A7C00;
  *(_OWORD *)(v631 + 808) = 0u;
  *(_OWORD *)(v631 + 824) = 0u;
  *(_DWORD *)(v631 + 840) = 1065353216;
  v634 = operator new();
  *(_DWORD *)(v634 + 16) = 2147483646;
  *(_BYTE *)(v634 + 20) = 0;
  *(_QWORD *)v634 = &off_1E42A7D58;
  *(_QWORD *)(v634 + 8) = 0;
  *(_DWORD *)(v634 + 22) = 786473;
  *(_BYTE *)(v634 + 28) = 0;
  *(_DWORD *)(v634 + 40) = 25;
  *(_BYTE *)(v634 + 36) = 1;
  *(_BYTE *)(v634 + 44) = 0;
  *(_BYTE *)(v634 + 46) = 0;
  v1330 = (uint64_t (**)())v631;
  v1308 = (gdc::LayerDataStore *)v634;
  md::World::addMapLayerDataSource(v1239, 41, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v635 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v635);
  v636 = operator new();
  v637 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v638 = v633;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v636, 42, 12, v635, v637, v1236, 1, 0);
  *(_OWORD *)(v636 + 760) = 0u;
  *(_BYTE *)(v636 + 752) = 0;
  *(_QWORD *)(v636 + 776) = &off_1E42B4D50;
  *(_QWORD *)(v636 + 784) = v638;
  *(_WORD *)(v636 + 800) = 256;
  *(_BYTE *)(v636 + 802) = 0;
  *(_QWORD *)v636 = &off_1E42A4550;
  *(_OWORD *)(v636 + 808) = 0u;
  *(_OWORD *)(v636 + 824) = 0u;
  *(_DWORD *)(v636 + 840) = 1065353216;
  *(_DWORD *)(v636 + 848) = 0;
  v639 = operator new();
  *(_DWORD *)(v639 + 16) = 2147483646;
  *(_BYTE *)(v639 + 20) = 0;
  *(_QWORD *)v639 = &off_1E42A7D58;
  *(_QWORD *)(v639 + 8) = 0;
  *(_DWORD *)(v639 + 22) = 786474;
  *(_BYTE *)(v639 + 28) = 0;
  *(_DWORD *)(v639 + 40) = 25;
  *(_BYTE *)(v639 + 36) = 1;
  *(_BYTE *)(v639 + 44) = 0;
  *(_BYTE *)(v639 + 46) = 0;
  v1330 = (uint64_t (**)())v636;
  v1308 = (gdc::LayerDataStore *)v639;
  md::World::addMapLayerDataSource(v1239, 42, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v640 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v640);
  v641 = (md::SingleGEOResourceLayerDataSource *)operator new();
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource(v641, 28, 1, v640, *(gdc::ResourceStatusContainer **)(v1240 + 304), v1236, 1, 0);
  *(_QWORD *)v641 = &off_1E42A1B50;
  v642 = operator new();
  *(_DWORD *)(v642 + 16) = 2147483646;
  *(_BYTE *)(v642 + 20) = 0;
  *(_QWORD *)v642 = &off_1E42A7D58;
  *(_QWORD *)(v642 + 8) = 0;
  *(_DWORD *)(v642 + 22) = 65564;
  *(_BYTE *)(v642 + 28) = 0;
  *(_DWORD *)(v642 + 40) = 25;
  *(_BYTE *)(v642 + 36) = 1;
  *(_BYTE *)(v642 + 44) = 0;
  *(_BYTE *)(v642 + 46) = 0;
  v1330 = (uint64_t (**)())v641;
  v1308 = (gdc::LayerDataStore *)v642;
  md::World::addMapLayerDataSource(v1239, 28, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v643 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v643);
  v644 = (md::SingleGEOResourceLayerDataSource *)operator new();
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource(v644, 29, 32, v643, *(gdc::ResourceStatusContainer **)(v1240 + 304), v1236, 1, 0);
  *(_QWORD *)v644 = &off_1E42A1B50;
  v645 = operator new();
  *(_DWORD *)(v645 + 16) = 2147483646;
  *(_BYTE *)(v645 + 20) = 0;
  *(_QWORD *)v645 = &off_1E42A7D58;
  *(_QWORD *)(v645 + 8) = 0;
  *(_DWORD *)(v645 + 22) = 2097181;
  *(_BYTE *)(v645 + 28) = 0;
  *(_DWORD *)(v645 + 40) = 25;
  *(_BYTE *)(v645 + 36) = 1;
  *(_BYTE *)(v645 + 44) = 0;
  *(_BYTE *)(v645 + 46) = 0;
  v1330 = (uint64_t (**)())v644;
  v1308 = (gdc::LayerDataStore *)v645;
  md::World::addMapLayerDataSource(v1239, 29, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v646 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v646);
  v647 = operator new();
  v648 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v649 = v638;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v647, 2, 9, v646, v648, v1236, 1, 0);
  *(_OWORD *)(v647 + 760) = 0u;
  *(_BYTE *)(v647 + 752) = 1;
  *(_QWORD *)v647 = &off_1E4297950;
  *(_QWORD *)(v647 + 776) = &off_1E42B4D50;
  *(_QWORD *)(v647 + 784) = v649;
  *(_WORD *)(v647 + 800) = 256;
  *(_BYTE *)(v647 + 802) = 0;
  v650 = operator new();
  *(_DWORD *)(v650 + 16) = -1073741827;
  *(_BYTE *)(v650 + 20) = 0;
  *(_QWORD *)v650 = &off_1E42A7D58;
  *(_QWORD *)(v650 + 8) = 0;
  *(_DWORD *)(v650 + 22) = 589826;
  *(_BYTE *)(v650 + 28) = 0;
  *(_DWORD *)(v650 + 40) = 25;
  *(_BYTE *)(v650 + 36) = 1;
  *(_BYTE *)(v650 + 44) = 0;
  *(_BYTE *)(v650 + 46) = 0;
  v1330 = (uint64_t (**)())v647;
  v1308 = (gdc::LayerDataStore *)v650;
  md::World::addMapLayerDataSource(v1239, 2, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v651 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v651);
  v652 = operator new();
  v653 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v654 = v649;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v652, 3, 9, v651, v653, v1236, 1, 0);
  *(_OWORD *)(v652 + 760) = 0u;
  *(_BYTE *)(v652 + 752) = 1;
  *(_QWORD *)v652 = &off_1E42A5BB8;
  *(_QWORD *)(v652 + 776) = v654;
  *(_WORD *)(v652 + 784) = 0;
  v655 = operator new();
  *(_DWORD *)(v655 + 16) = 2147483646;
  *(_BYTE *)(v655 + 20) = 0;
  *(_QWORD *)v655 = &off_1E42A7D58;
  *(_QWORD *)(v655 + 8) = 0;
  *(_DWORD *)(v655 + 22) = 589827;
  *(_DWORD *)(v655 + 32) = 7;
  *(_BYTE *)(v655 + 28) = 1;
  *(_DWORD *)(v655 + 40) = 25;
  *(_BYTE *)(v655 + 36) = 1;
  *(_BYTE *)(v655 + 44) = 0;
  *(_BYTE *)(v655 + 46) = 0;
  v1330 = (uint64_t (**)())v652;
  v1308 = (gdc::LayerDataStore *)v655;
  md::World::addMapLayerDataSource(v1239, 3, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v656 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v656);
  v657 = operator new();
  v658 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v659 = v654;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v657, 4, 1, v656, v658, v1236, 1, 0);
  *(_OWORD *)(v657 + 760) = 0u;
  *(_BYTE *)(v657 + 752) = 0;
  *(_QWORD *)v657 = &off_1E4297950;
  *(_QWORD *)(v657 + 776) = &off_1E42B4D50;
  *(_QWORD *)(v657 + 784) = v659;
  *(_WORD *)(v657 + 800) = 256;
  *(_BYTE *)(v657 + 802) = 0;
  v660 = operator new();
  *(_DWORD *)(v660 + 16) = -1073741827;
  *(_BYTE *)(v660 + 20) = 0;
  *(_QWORD *)v660 = &off_1E42A7D58;
  *(_QWORD *)(v660 + 8) = 0;
  *(_DWORD *)(v660 + 22) = 65540;
  *(_BYTE *)(v660 + 28) = 0;
  *(_DWORD *)(v660 + 40) = 25;
  *(_BYTE *)(v660 + 36) = 1;
  *(_BYTE *)(v660 + 44) = 0;
  *(_BYTE *)(v660 + 46) = 0;
  v1330 = (uint64_t (**)())v657;
  v1308 = (gdc::LayerDataStore *)v660;
  md::World::addMapLayerDataSource(v1239, 4, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v661 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v661);
  v662 = operator new();
  v663 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v664 = v659;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v662, 18, 9, v661, v663, v1238, 1, 0);
  *(_QWORD *)v662 = &off_1E42990B0;
  *(_QWORD *)(v662 + 752) = &off_1E42B4D50;
  *(_QWORD *)(v662 + 760) = v664;
  *(_QWORD *)(v662 + 800) = 0;
  *(_QWORD *)(v662 + 816) = 0;
  *(_QWORD *)(v662 + 808) = 0;
  v665 = operator new();
  v666 = *(_WORD *)(v662 + 584);
  *(_DWORD *)(v665 + 16) = 2147483646;
  *(_BYTE *)(v665 + 20) = 0;
  *(_QWORD *)v665 = &off_1E42A7D58;
  *(_QWORD *)(v665 + 8) = 0;
  *(_WORD *)(v665 + 22) = 18;
  *(_WORD *)(v665 + 24) = v666;
  *(_BYTE *)(v665 + 28) = 0;
  *(_DWORD *)(v665 + 40) = 25;
  *(_BYTE *)(v665 + 36) = 1;
  *(_BYTE *)(v665 + 44) = 0;
  *(_BYTE *)(v665 + 46) = 0;
  v1330 = (uint64_t (**)())v662;
  v1308 = (gdc::LayerDataStore *)v665;
  md::World::addMapLayerDataSource(v1239, 18, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v667 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v667);
  v668 = operator new();
  v669 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v670 = v664;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v668, 19, 1, v667, v669, v1238, 1, 0);
  *(_QWORD *)v668 = &off_1E42990B0;
  *(_QWORD *)(v668 + 752) = &off_1E42B4D50;
  *(_QWORD *)(v668 + 760) = v670;
  *(_QWORD *)(v668 + 800) = 0;
  *(_QWORD *)(v668 + 816) = 0;
  *(_QWORD *)(v668 + 808) = 0;
  v671 = operator new();
  v672 = *(_WORD *)(v668 + 584);
  *(_DWORD *)(v671 + 16) = 2147483646;
  *(_BYTE *)(v671 + 20) = 0;
  *(_QWORD *)v671 = &off_1E42A7D58;
  *(_QWORD *)(v671 + 8) = 0;
  *(_WORD *)(v671 + 22) = 19;
  *(_WORD *)(v671 + 24) = v672;
  *(_BYTE *)(v671 + 28) = 0;
  *(_DWORD *)(v671 + 40) = 25;
  *(_BYTE *)(v671 + 36) = 1;
  *(_BYTE *)(v671 + 44) = 0;
  *(_BYTE *)(v671 + 46) = 0;
  v1330 = (uint64_t (**)())v668;
  v1308 = (gdc::LayerDataStore *)v671;
  md::World::addMapLayerDataSource(v1239, 19, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v673 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v673);
  v674 = operator new();
  v675 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v676 = v670;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v674, 20, 8, v673, v675, v1238, 1, 0);
  *(_QWORD *)v674 = &off_1E42990B0;
  *(_QWORD *)(v674 + 752) = &off_1E42B4D50;
  *(_QWORD *)(v674 + 760) = v676;
  *(_QWORD *)(v674 + 800) = 0;
  *(_QWORD *)(v674 + 816) = 0;
  *(_QWORD *)(v674 + 808) = 0;
  v677 = operator new();
  v678 = *(_WORD *)(v674 + 584);
  *(_DWORD *)(v677 + 16) = -1073741828;
  *(_BYTE *)(v677 + 20) = 0;
  *(_QWORD *)v677 = &off_1E42A7D58;
  *(_QWORD *)(v677 + 8) = 0;
  *(_WORD *)(v677 + 22) = 20;
  *(_WORD *)(v677 + 24) = v678;
  *(_BYTE *)(v677 + 28) = 0;
  *(_DWORD *)(v677 + 40) = 25;
  *(_BYTE *)(v677 + 36) = 1;
  *(_BYTE *)(v677 + 44) = 0;
  *(_BYTE *)(v677 + 46) = 0;
  v1330 = (uint64_t (**)())v674;
  v1308 = (gdc::LayerDataStore *)v677;
  md::World::addMapLayerDataSource(v1239, 20, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v679 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v679);
  v680 = operator new();
  v681 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v682 = v676;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v680, 13, 14, v679, v681, v1238, 1, 0);
  *(_QWORD *)v680 = &off_1E42990B0;
  *(_QWORD *)(v680 + 752) = &off_1E42B4D50;
  *(_QWORD *)(v680 + 760) = v682;
  *(_QWORD *)(v680 + 800) = 0;
  *(_QWORD *)(v680 + 816) = 0;
  *(_QWORD *)(v680 + 808) = 0;
  v683 = operator new();
  v684 = *(_WORD *)(v680 + 584);
  *(_DWORD *)(v683 + 16) = 2147483646;
  *(_BYTE *)(v683 + 20) = 0;
  *(_QWORD *)v683 = &off_1E42A7D58;
  *(_QWORD *)(v683 + 8) = 0;
  *(_WORD *)(v683 + 22) = 13;
  *(_WORD *)(v683 + 24) = v684;
  *(_BYTE *)(v683 + 28) = 0;
  *(_DWORD *)(v683 + 40) = 25;
  *(_BYTE *)(v683 + 36) = 1;
  *(_BYTE *)(v683 + 44) = 0;
  *(_BYTE *)(v683 + 46) = 0;
  v1330 = (uint64_t (**)())v680;
  v1308 = (gdc::LayerDataStore *)v683;
  md::World::addMapLayerDataSource(v1239, 13, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v685 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v685);
  v686 = operator new();
  v687 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v688 = v682;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v686, 25, 10, v685, v687, v1238, 1, 0);
  *(_QWORD *)v686 = &off_1E42990B0;
  *(_QWORD *)(v686 + 752) = &off_1E42B4D50;
  *(_QWORD *)(v686 + 760) = v688;
  *(_QWORD *)(v686 + 800) = 0;
  *(_QWORD *)(v686 + 816) = 0;
  *(_QWORD *)(v686 + 808) = 0;
  v689 = operator new();
  v690 = *(_WORD *)(v686 + 584);
  *(_DWORD *)(v689 + 16) = 2147483646;
  *(_BYTE *)(v689 + 20) = 0;
  *(_QWORD *)v689 = &off_1E42A7D58;
  *(_QWORD *)(v689 + 8) = 0;
  *(_WORD *)(v689 + 22) = 25;
  *(_WORD *)(v689 + 24) = v690;
  *(_BYTE *)(v689 + 28) = 0;
  *(_DWORD *)(v689 + 40) = 25;
  *(_BYTE *)(v689 + 36) = 1;
  *(_BYTE *)(v689 + 44) = 0;
  *(_BYTE *)(v689 + 46) = 0;
  v1330 = (uint64_t (**)())v686;
  v1308 = (gdc::LayerDataStore *)v689;
  md::World::addMapLayerDataSource(v1239, 25, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v691 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v691);
  v692 = operator new();
  v693 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v694 = v688;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v692, 26, 15, v691, v693, v1238, 1, 0);
  *(_QWORD *)v692 = &off_1E42990B0;
  *(_QWORD *)(v692 + 752) = &off_1E42B4D50;
  *(_QWORD *)(v692 + 760) = v694;
  *(_QWORD *)(v692 + 800) = 0;
  *(_QWORD *)(v692 + 816) = 0;
  *(_QWORD *)(v692 + 808) = 0;
  v695 = operator new();
  v696 = *(_WORD *)(v692 + 584);
  *(_DWORD *)(v695 + 16) = 2147483646;
  *(_BYTE *)(v695 + 20) = 0;
  *(_QWORD *)v695 = &off_1E42A7D58;
  *(_QWORD *)(v695 + 8) = 0;
  *(_WORD *)(v695 + 22) = 26;
  *(_WORD *)(v695 + 24) = v696;
  *(_BYTE *)(v695 + 28) = 0;
  *(_DWORD *)(v695 + 40) = 25;
  *(_BYTE *)(v695 + 36) = 1;
  *(_BYTE *)(v695 + 44) = 0;
  *(_BYTE *)(v695 + 46) = 0;
  v1330 = (uint64_t (**)())v692;
  v1308 = (gdc::LayerDataStore *)v695;
  md::World::addMapLayerDataSource(v1239, 26, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v697 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v697);
  v698 = operator new();
  v699 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v700 = v694;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v698, 66, 44, v697, v699, v1238, 1, 0);
  *(_QWORD *)v698 = &off_1E42990B0;
  *(_QWORD *)(v698 + 752) = &off_1E42B4D50;
  *(_QWORD *)(v698 + 760) = v700;
  *(_QWORD *)(v698 + 800) = 0;
  *(_QWORD *)(v698 + 816) = 0;
  *(_QWORD *)(v698 + 808) = 0;
  v701 = operator new();
  v702 = *(_WORD *)(v698 + 584);
  *(_DWORD *)(v701 + 16) = 2147483646;
  *(_BYTE *)(v701 + 20) = 0;
  *(_QWORD *)v701 = &off_1E42A7D58;
  *(_QWORD *)(v701 + 8) = 0;
  *(_WORD *)(v701 + 22) = 66;
  *(_WORD *)(v701 + 24) = v702;
  *(_BYTE *)(v701 + 28) = 0;
  *(_DWORD *)(v701 + 40) = 25;
  *(_BYTE *)(v701 + 36) = 1;
  *(_BYTE *)(v701 + 44) = 0;
  *(_BYTE *)(v701 + 46) = 0;
  v1330 = (uint64_t (**)())v698;
  v1308 = (gdc::LayerDataStore *)v701;
  md::World::addMapLayerDataSource(v1239, 66, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v703 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v703);
  v704 = operator new();
  v705 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v706 = v700;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v704, 73, 13, v703, v705, v1238, 1, 0);
  *(_QWORD *)(v704 + 752) = &off_1E42B4D50;
  *(_QWORD *)(v704 + 760) = v706;
  *(_QWORD *)(v704 + 800) = 0;
  *(_QWORD *)(v704 + 816) = 0;
  *(_QWORD *)(v704 + 808) = 0;
  *(_QWORD *)v704 = &off_1E42A5E00;
  *(_QWORD *)(v704 + 824) = 850045863;
  *(_OWORD *)(v704 + 832) = 0u;
  *(_OWORD *)(v704 + 848) = 0u;
  *(_OWORD *)(v704 + 864) = 0u;
  *(_OWORD *)(v704 + 880) = 0u;
  *(_QWORD *)(v704 + 896) = 0;
  v707 = operator new();
  v708 = *(_WORD *)(v704 + 584);
  *(_DWORD *)(v707 + 16) = 2147483646;
  *(_BYTE *)(v707 + 20) = 0;
  *(_QWORD *)v707 = &off_1E42A7D58;
  *(_QWORD *)(v707 + 8) = 0;
  *(_WORD *)(v707 + 22) = 73;
  *(_WORD *)(v707 + 24) = v708;
  *(_BYTE *)(v707 + 28) = 0;
  *(_DWORD *)(v707 + 40) = 25;
  *(_BYTE *)(v707 + 36) = 1;
  *(_BYTE *)(v707 + 44) = 0;
  *(_BYTE *)(v707 + 46) = 0;
  v1330 = (uint64_t (**)())v704;
  v1308 = (gdc::LayerDataStore *)v707;
  md::World::addMapLayerDataSource(v1239, 73, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v709 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v709);
  v710 = operator new();
  v711 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v712 = v706;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v710, 80, 13, v709, v711, v1238, 1, 0);
  *(_QWORD *)(v710 + 752) = &off_1E42B4D50;
  *(_QWORD *)(v710 + 760) = v712;
  *(_QWORD *)(v710 + 800) = 0;
  *(_QWORD *)(v710 + 816) = 0;
  *(_QWORD *)(v710 + 808) = 0;
  *(_QWORD *)v710 = &off_1E42A5E00;
  *(_QWORD *)(v710 + 824) = 850045863;
  *(_OWORD *)(v710 + 832) = 0u;
  *(_OWORD *)(v710 + 848) = 0u;
  *(_OWORD *)(v710 + 864) = 0u;
  *(_OWORD *)(v710 + 880) = 0u;
  *(_QWORD *)(v710 + 896) = 0;
  v713 = operator new();
  v714 = *(_WORD *)(v710 + 584);
  *(_DWORD *)(v713 + 16) = 2147483646;
  *(_BYTE *)(v713 + 20) = 0;
  *(_QWORD *)v713 = &off_1E42A7D58;
  *(_QWORD *)(v713 + 8) = 0;
  *(_WORD *)(v713 + 22) = 80;
  *(_WORD *)(v713 + 24) = v714;
  *(_BYTE *)(v713 + 28) = 0;
  *(_DWORD *)(v713 + 40) = 25;
  *(_BYTE *)(v713 + 36) = 1;
  *(_BYTE *)(v713 + 44) = 0;
  *(_BYTE *)(v713 + 46) = 0;
  v1330 = (uint64_t (**)())v710;
  v1308 = (gdc::LayerDataStore *)v713;
  md::World::addMapLayerDataSource(v1239, 80, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v715 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v715);
  v716 = operator new();
  v717 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v718 = v712;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v716, 27, 18, v715, v717, v1238, 1, 0);
  *(_QWORD *)v716 = &off_1E42A8BE0;
  *(_QWORD *)(v716 + 752) = 0;
  *(_BYTE *)(v716 + 760) = 0;
  v719 = v718;
  *(_QWORD *)(v716 + 768) = &off_1E42B4D50;
  *(_QWORD *)(v716 + 776) = v719;
  if (*(_BYTE *)(v716 + 760))
  {
    *(_QWORD *)(v716 + 752) = *(_QWORD *)(v716 + 752) & 0xFFFFFFFFFFFFFFF9 | 4;
    *(_BYTE *)(v716 + 760) = 0;
    gdc::LayerDataStore::clearAllData(*(gdc::LayerDataStore **)(v716 + 16));
  }

  v720 = operator new();
  v721 = *(_WORD *)(v716 + 584);
  *(_DWORD *)(v720 + 16) = 2147483646;
  *(_BYTE *)(v720 + 20) = 0;
  *(_QWORD *)v720 = &off_1E42A7D58;
  *(_QWORD *)(v720 + 8) = 0;
  *(_WORD *)(v720 + 22) = 27;
  *(_WORD *)(v720 + 24) = v721;
  *(_BYTE *)(v720 + 28) = 0;
  *(_DWORD *)(v720 + 40) = 25;
  *(_BYTE *)(v720 + 36) = 1;
  *(_BYTE *)(v720 + 44) = 0;
  *(_BYTE *)(v720 + 46) = 0;
  v1330 = (uint64_t (**)())v716;
  v1308 = (gdc::LayerDataStore *)v720;
  md::World::addMapLayerDataSource(v1239, 27, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v722 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v722);
  v723 = operator new();
  v724 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v725 = v719;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v723, 6, 15, v722, v724, v1236, 0, 1);
  *(_QWORD *)v723 = &off_1E429A638;
  *(_QWORD *)(v723 + 752) = &off_1E42B4D50;
  *(_QWORD *)(v723 + 760) = v725;
  *(_OWORD *)(v723 + 776) = 0u;
  *(float *)(v723 + 792) = a9;
  *(_QWORD *)(v723 + 800) = 0;
  v726 = operator new();
  *(_DWORD *)(v726 + 16) = 2147483645;
  *(_BYTE *)(v726 + 20) = 0;
  *(_QWORD *)v726 = &off_1E42A7D58;
  *(_QWORD *)(v726 + 8) = 0;
  *(_DWORD *)(v726 + 22) = 983046;
  *(_DWORD *)(v726 + 32) = 10;
  *(_BYTE *)(v726 + 28) = 1;
  *(_DWORD *)(v726 + 40) = 25;
  *(_BYTE *)(v726 + 36) = 1;
  *(_BYTE *)(v726 + 44) = 0;
  *(_BYTE *)(v726 + 46) = 0;
  v1330 = (uint64_t (**)())v723;
  v1308 = (gdc::LayerDataStore *)v726;
  md::World::addMapLayerDataSource(v1239, 6, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v727 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v727);
  v728 = operator new();
  v729 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v730 = v725;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v728, 16, 10, v727, v729, v1236, 1, 0);
  *(_QWORD *)v728 = &off_1E429DF90;
  v731 = v730;
  *(_QWORD *)(v728 + 752) = &off_1E42B4D50;
  *(_QWORD *)(v728 + 760) = v731;
  *(_OWORD *)(v728 + 776) = 0u;
  *(_OWORD *)(v728 + 792) = 0u;
  *(_QWORD *)(v728 + 832) = 0;
  *(_QWORD *)(v728 + 848) = 0;
  *(_QWORD *)(v728 + 840) = 0;
  *(float *)(v728 + 856) = a9;
  v732 = (const ggl::StandardLibrary *)objc_msgSend(v731, "shaderLibrary");
  v733 = operator new(0x48uLL);
  v733[1] = 0;
  v733[2] = 0;
  *v733 = &off_1E42DD4D0;
  *(_QWORD *)(v728 + 776) = md::TransitLineSharedResources::TransitLineSharedResources((md::TransitLineSharedResources *)(v733 + 3), v732, a7);
  v734 = *(std::__shared_weak_count **)(v728 + 784);
  *(_QWORD *)(v728 + 784) = v733;
  if (v734)
  {
    v735 = (unint64_t *)&v734->__shared_owners_;
    do
      v736 = __ldaxr(v735);
    while (__stlxr(v736 - 1, v735));
    if (!v736)
    {
      ((void (*)(std::__shared_weak_count *))v734->__on_zero_shared)(v734);
      std::__shared_weak_count::__release_weak(v734);
    }
  }

  v737 = operator new();
  *(_DWORD *)(v737 + 16) = -1073741828;
  *(_BYTE *)(v737 + 20) = 0;
  *(_QWORD *)v737 = &off_1E42A7D58;
  *(_QWORD *)(v737 + 8) = 0;
  *(_DWORD *)(v737 + 22) = 655376;
  *(_BYTE *)(v737 + 28) = 0;
  *(_DWORD *)(v737 + 40) = 25;
  *(_BYTE *)(v737 + 36) = 1;
  *(_BYTE *)(v737 + 44) = 0;
  *(_BYTE *)(v737 + 46) = 0;
  v1330 = (uint64_t (**)())v728;
  v1308 = (gdc::LayerDataStore *)v737;
  md::World::addMapLayerDataSource(v1239, 16, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v738 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v738);
  v739 = operator new();
  v740 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v741 = v731;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v739, 17, 11, v738, v740, v1236, 1, 0);
  *(_QWORD *)v739 = &off_1E42A7CB0;
  v742 = v741;
  *(_QWORD *)(v739 + 752) = &off_1E42B4D50;
  *(_QWORD *)(v739 + 760) = v742;
  *(_OWORD *)(v739 + 776) = 0u;
  *(_OWORD *)(v739 + 792) = 0u;
  *(float *)(v739 + 808) = a9;
  *(_QWORD *)(v739 + 816) = &off_1E42B4E70;
  *(_QWORD *)(v739 + 824) = 0;
  *(_DWORD *)(v739 + 840) = -1;
  v743 = (const ggl::StandardLibrary *)objc_msgSend(v742, "shaderLibrary");
  v744 = operator new(0x48uLL);
  v744[2] = 0;
  *v744 = &off_1E42DD4D0;
  v744[1] = 0;
  *(_QWORD *)(v739 + 776) = md::TransitLineSharedResources::TransitLineSharedResources((md::TransitLineSharedResources *)(v744 + 3), v743, a7);
  v745 = *(std::__shared_weak_count **)(v739 + 784);
  *(_QWORD *)(v739 + 784) = v744;
  if (v745)
  {
    v746 = (unint64_t *)&v745->__shared_owners_;
    do
      v747 = __ldaxr(v746);
    while (__stlxr(v747 - 1, v746));
    if (!v747)
    {
      ((void (*)(std::__shared_weak_count *))v745->__on_zero_shared)(v745);
      std::__shared_weak_count::__release_weak(v745);
    }
  }

  v748 = operator new();
  *(_DWORD *)(v748 + 16) = 2147483646;
  *(_BYTE *)(v748 + 20) = 0;
  *(_QWORD *)v748 = &off_1E42A7D58;
  *(_QWORD *)(v748 + 8) = 0;
  *(_DWORD *)(v748 + 22) = 720913;
  *(_BYTE *)(v748 + 28) = 0;
  *(_DWORD *)(v748 + 40) = 25;
  *(_BYTE *)(v748 + 36) = 1;
  *(_BYTE *)(v748 + 44) = 0;
  *(_BYTE *)(v748 + 46) = 0;
  v1330 = (uint64_t (**)())v739;
  v1308 = (gdc::LayerDataStore *)v748;
  md::World::addMapLayerDataSource(v1239, 17, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v749 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v749);
  v750 = operator new();
  v751 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v752 = v742;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v750, 7, 2, v749, v751, v1236, 1, 0);
  *(_QWORD *)v750 = &off_1E429B978;
  *(_QWORD *)(v750 + 752) = &off_1E42B4D50;
  *(_QWORD *)(v750 + 760) = v752;
  *(_DWORD *)(v750 + 776) = 0;
  *(_QWORD *)(v750 + 784) = 150;
  *(_OWORD *)(v750 + 792) = 0u;
  *(_OWORD *)(v750 + 808) = 0u;
  *(_DWORD *)(v750 + 824) = 1065353216;
  *(_QWORD *)(v750 + 832) = v750 + 832;
  *(_QWORD *)(v750 + 840) = v750 + 832;
  *(_QWORD *)(v750 + 848) = 0;
  v753 = operator new();
  *(_DWORD *)(v753 + 16) = 2147483646;
  *(_BYTE *)(v753 + 20) = 0;
  *(_DWORD *)(v753 + 22) = 131079;
  *(_BYTE *)(v753 + 28) = 0;
  *(_DWORD *)(v753 + 40) = 25;
  *(_BYTE *)(v753 + 36) = 1;
  *(_BYTE *)(v753 + 44) = 0;
  *(_BYTE *)(v753 + 46) = 0;
  *(_QWORD *)v753 = &off_1E42A4178;
  *(_QWORD *)(v753 + 8) = 0;
  *(_QWORD *)(v753 + 48) = v750;
  v1330 = (uint64_t (**)())v750;
  v1308 = (gdc::LayerDataStore *)v753;
  md::World::addMapLayerDataSource(v1239, 7, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v754 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v754);
  v755 = operator new();
  v756 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v757 = v752;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v755, 8, 0, v754, v756, v1236, 1, 0);
  *(_QWORD *)v755 = &off_1E429B978;
  *(_QWORD *)(v755 + 752) = &off_1E42B4D50;
  *(_QWORD *)(v755 + 760) = v757;
  *(_DWORD *)(v755 + 776) = 0;
  *(_QWORD *)(v755 + 784) = 150;
  *(_OWORD *)(v755 + 792) = 0u;
  *(_OWORD *)(v755 + 808) = 0u;
  *(_DWORD *)(v755 + 824) = 1065353216;
  *(_QWORD *)(v755 + 832) = v755 + 832;
  *(_QWORD *)(v755 + 840) = v755 + 832;
  *(_QWORD *)(v755 + 848) = 0;
  v758 = operator new();
  *(_DWORD *)(v758 + 16) = 2147483646;
  *(_BYTE *)(v758 + 20) = 0;
  *(_DWORD *)(v758 + 22) = 8;
  *(_BYTE *)(v758 + 28) = 0;
  *(_DWORD *)(v758 + 40) = 25;
  *(_BYTE *)(v758 + 36) = 1;
  *(_BYTE *)(v758 + 44) = 0;
  *(_BYTE *)(v758 + 46) = 0;
  *(_QWORD *)v758 = &off_1E42A4178;
  *(_QWORD *)(v758 + 8) = 0;
  *(_QWORD *)(v758 + 48) = v755;
  v1330 = (uint64_t (**)())v755;
  v1308 = (gdc::LayerDataStore *)v758;
  md::World::addMapLayerDataSource(v1239, 8, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v759 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v759);
  v760 = operator new();
  v761 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v762 = v757;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v760, 10, 4, v759, v761, v1236, 1, 0);
  *(_QWORD *)v760 = &off_1E429B978;
  *(_QWORD *)(v760 + 752) = &off_1E42B4D50;
  *(_QWORD *)(v760 + 760) = v762;
  *(_DWORD *)(v760 + 776) = 0;
  *(_QWORD *)(v760 + 784) = 150;
  *(_OWORD *)(v760 + 792) = 0u;
  *(_OWORD *)(v760 + 808) = 0u;
  *(_DWORD *)(v760 + 824) = 1065353216;
  *(_QWORD *)(v760 + 832) = v760 + 832;
  *(_QWORD *)(v760 + 840) = v760 + 832;
  *(_QWORD *)(v760 + 848) = 0;
  v763 = operator new();
  *(_DWORD *)(v763 + 16) = 2147483646;
  *(_BYTE *)(v763 + 20) = 0;
  *(_DWORD *)(v763 + 22) = 262154;
  *(_BYTE *)(v763 + 28) = 0;
  *(_DWORD *)(v763 + 40) = 25;
  *(_BYTE *)(v763 + 36) = 1;
  *(_BYTE *)(v763 + 44) = 0;
  *(_BYTE *)(v763 + 46) = 0;
  *(_QWORD *)v763 = &off_1E42A4178;
  *(_QWORD *)(v763 + 8) = 0;
  *(_QWORD *)(v763 + 48) = v760;
  v1330 = (uint64_t (**)())v760;
  v1308 = (gdc::LayerDataStore *)v763;
  md::World::addMapLayerDataSource(v1239, 10, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v764 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v764);
  v765 = operator new();
  v766 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v767 = v762;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v765, 9, 3, v764, v766, v1236, 1, 0);
  *(_QWORD *)v765 = &off_1E429B978;
  *(_QWORD *)(v765 + 752) = &off_1E42B4D50;
  *(_QWORD *)(v765 + 760) = v767;
  *(_DWORD *)(v765 + 776) = 0;
  *(_QWORD *)(v765 + 784) = 150;
  *(_OWORD *)(v765 + 792) = 0u;
  *(_OWORD *)(v765 + 808) = 0u;
  *(_DWORD *)(v765 + 824) = 1065353216;
  *(_QWORD *)(v765 + 832) = v765 + 832;
  *(_QWORD *)(v765 + 840) = v765 + 832;
  *(_QWORD *)(v765 + 848) = 0;
  v768 = operator new();
  *(_DWORD *)(v768 + 16) = 2147483646;
  *(_BYTE *)(v768 + 20) = 0;
  *(_DWORD *)(v768 + 22) = 196617;
  *(_BYTE *)(v768 + 28) = 0;
  *(_DWORD *)(v768 + 40) = 25;
  *(_BYTE *)(v768 + 36) = 1;
  *(_BYTE *)(v768 + 44) = 0;
  *(_BYTE *)(v768 + 46) = 0;
  *(_QWORD *)v768 = &off_1E42A4178;
  *(_QWORD *)(v768 + 8) = 0;
  *(_QWORD *)(v768 + 48) = v765;
  v1330 = (uint64_t (**)())v765;
  v1308 = (gdc::LayerDataStore *)v768;
  md::World::addMapLayerDataSource(v1239, 9, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v769 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v769);
  v770 = operator new();
  v771 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v772 = v767;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v770, 14, 6, v769, v771, v1236, 0, 1);
  *(_QWORD *)v770 = &off_1E429E200;
  *(_OWORD *)(v770 + 752) = 0u;
  *(float *)(v770 + 768) = a9;
  *(_QWORD *)(v770 + 776) = &off_1E42B4D50;
  *(_QWORD *)(v770 + 784) = v772;
  *(_BYTE *)(v770 + 800) = 1;
  v773 = operator new();
  *(_DWORD *)(v773 + 16) = 2147483645;
  *(_BYTE *)(v773 + 20) = 0;
  *(_QWORD *)v773 = &off_1E42A7D58;
  *(_QWORD *)(v773 + 8) = 0;
  *(_DWORD *)(v773 + 22) = 393230;
  *(_DWORD *)(v773 + 32) = 13;
  *(_BYTE *)(v773 + 28) = 1;
  *(_DWORD *)(v773 + 40) = 25;
  *(_BYTE *)(v773 + 36) = 1;
  *(_BYTE *)(v773 + 44) = 0;
  *(_BYTE *)(v773 + 46) = 0;
  v1330 = (uint64_t (**)())v770;
  v1308 = (gdc::LayerDataStore *)v773;
  md::World::addMapLayerDataSource(v1239, 14, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v774 = (gdc::LayerDataStore *)operator new();
  v1330 = (uint64_t (**)())gdc::LayerDataStore::LayerDataStore(v774);
  v775 = operator new();
  v776 = *(_QWORD *)(v1240 + 304);
  v777 = v1239[2];
  v778 = operator new();
  *(_QWORD *)v778 = &off_1E42B46F8;
  *(_QWORD *)(v778 + 8) = 0xBFF0000000000000;
  *(_QWORD *)(v778 + 16) = 850045863;
  *(_OWORD *)(v778 + 24) = 0u;
  *(_OWORD *)(v778 + 40) = 0u;
  *(_OWORD *)(v778 + 56) = 0u;
  *(_OWORD *)(v778 + 72) = 0u;
  *(_OWORD *)(v778 + 81) = 0u;
  *(_QWORD *)(v778 + 80) = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, MEMORY[0x1E0C80D38]);
  *(_QWORD *)v775 = off_1E42B0758;
  *(_QWORD *)(v775 + 8) = v1236;
  *(_QWORD *)(v775 + 16) = v774;
  *(_QWORD *)(v775 + 24) = 0;
  *(_WORD *)(v775 + 32) = 15;
  *(_OWORD *)(v775 + 40) = 0u;
  *(_OWORD *)(v775 + 56) = 0u;
  *(_DWORD *)(v775 + 72) = 1065353216;
  *(_OWORD *)(v775 + 80) = 0u;
  *(_OWORD *)(v775 + 96) = 0u;
  *(_DWORD *)(v775 + 112) = 1065353216;
  *(_OWORD *)(v775 + 120) = 0u;
  *(_OWORD *)(v775 + 136) = 0u;
  *(_DWORD *)(v775 + 152) = 1065353216;
  *(_OWORD *)(v775 + 160) = 0u;
  *(_OWORD *)(v775 + 176) = 0u;
  *(_DWORD *)(v775 + 192) = 1065353216;
  *(_OWORD *)(v775 + 200) = 0u;
  *(_OWORD *)(v775 + 216) = 0u;
  *(_OWORD *)(v775 + 232) = 0u;
  *(_OWORD *)(v775 + 248) = 0u;
  *(_QWORD *)(v775 + 264) = 0;
  *(_QWORD *)(v775 + 272) = v776;
  *(_QWORD *)(v775 + 288) = 0;
  *(_BYTE *)(v775 + 296) = 0;
  *(_QWORD *)(v775 + 304) = 850045863;
  *(_OWORD *)(v775 + 312) = 0u;
  *(_OWORD *)(v775 + 328) = 0u;
  *(_OWORD *)(v775 + 344) = 0u;
  *(_QWORD *)(v775 + 360) = 0;
  *(_QWORD *)(v775 + 368) = v778;
  *(_QWORD *)(v775 + 376) = 850045863;
  *(_OWORD *)(v775 + 384) = 0u;
  *(_OWORD *)(v775 + 400) = 0u;
  *(_OWORD *)(v775 + 416) = 0u;
  *(_QWORD *)(v775 + 432) = 0;
  *(_QWORD *)(v775 + 464) = 0;
  *(_QWORD *)(v775 + 480) = 850045863;
  *(_OWORD *)(v775 + 488) = 0u;
  *(_OWORD *)(v775 + 504) = 0u;
  *(_OWORD *)(v775 + 520) = 0u;
  *(_OWORD *)(v775 + 536) = 0u;
  *(_OWORD *)(v775 + 552) = 0u;
  *(_OWORD *)(v775 + 568) = 0u;
  *(_QWORD *)buf = &off_1E42D5848;
  *(_QWORD *)&buf[8] = v775;
  v1336 = buf;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v778 + 16))(v778, buf);
  v779 = v1336;
  if (v1336 == buf)
  {
    v780 = 4;
    v779 = buf;
  }
  else
  {
    if (!v1336)
      goto LABEL_1074;
    v780 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v779 + 8 * v780))();
LABEL_1074:
  v781 = v775 + 584;
  *(_QWORD *)v775 = &off_1E42A0F98;
  *(_QWORD *)(v775 + 584) = &unk_1E42A1048;
  *(_QWORD *)(v775 + 592) = v777;
  *(_BYTE *)(v775 + 600) = 0;
  *(_BYTE *)(v775 + 608) = 0;
  *(_QWORD *)(v775 + 648) = 0;
  *(_QWORD *)(v775 + 640) = 0;
  *(_QWORD *)(v775 + 632) = v775 + 640;
  *(_WORD *)(v775 + 656) = 15;
  *(_QWORD *)(v775 + 680) = 0;
  *(_QWORD *)(v775 + 672) = 0;
  *(_QWORD *)(v775 + 664) = v775 + 672;
  *(_OWORD *)(v775 + 688) = xmmword_19FFB3820;
  *(_OWORD *)(v775 + 704) = 0u;
  *(_OWORD *)(v775 + 720) = 0u;
  *(_OWORD *)(v775 + 736) = 0u;
  *(_QWORD *)(v775 + 752) = 0;
  v783 = (uint64_t **)((char *)v777 + 80);
  v782 = (uint64_t *)*((_QWORD *)v777 + 10);
  if (v782)
  {
    while (1)
    {
      while (1)
      {
        v784 = (uint64_t **)v782;
        v785 = v782[4];
        if (v785 <= v781)
          break;
        v782 = *v784;
        v783 = v784;
        if (!*v784)
          goto LABEL_1081;
      }
      if (v785 >= v781)
        break;
      v782 = v784[1];
      if (!v782)
      {
        v783 = v784 + 1;
        goto LABEL_1081;
      }
    }
  }
  else
  {
    v784 = (uint64_t **)((char *)v777 + 80);
LABEL_1081:
    v786 = (uint64_t *)operator new(0x28uLL);
    v786[4] = v781;
    *v786 = 0;
    v786[1] = 0;
    v786[2] = (uint64_t)v784;
    *v783 = v786;
    v787 = **((_QWORD **)v777 + 9);
    if (v787)
    {
      *((_QWORD *)v777 + 9) = v787;
      v786 = *v783;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v777 + 10), v786);
    ++*((_QWORD *)v777 + 11);
  }
  v788 = operator new();
  v789 = v1239[2];
  *(_DWORD *)(v788 + 16) = 2147483646;
  *(_WORD *)(v788 + 20) = 0;
  *(_QWORD *)v788 = &off_1E429DA80;
  *(_QWORD *)(v788 + 8) = 0;
  *(_QWORD *)(v788 + 24) = v789;
  *(_QWORD *)buf = v775;
  v1308 = (gdc::LayerDataStore *)v788;
  md::World::addMapLayerDataSource(v1239, 15, (uint64_t *)buf, (uint64_t *)&v1308, (gdc::LayerDataStore **)&v1330);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
  if (v1330)
  {
    gdc::LayerDataStore::~LayerDataStore((gdc::LayerDataStore *)v1330);
    MEMORY[0x1A1AF4E00]();
  }
  v790 = (gdc::LayerDataStore *)operator new();
  v1330 = (uint64_t (**)())gdc::LayerDataStore::LayerDataStore(v790);
  v791 = operator new();
  v792 = *(_QWORD *)(v1240 + 304);
  v793 = operator new();
  *(_QWORD *)v793 = &off_1E42B46F8;
  *(_QWORD *)(v793 + 8) = 0xBFF0000000000000;
  *(_QWORD *)(v793 + 16) = 850045863;
  *(_OWORD *)(v793 + 24) = 0u;
  *(_OWORD *)(v793 + 40) = 0u;
  *(_OWORD *)(v793 + 56) = 0u;
  *(_OWORD *)(v793 + 72) = 0u;
  *(_OWORD *)(v793 + 81) = 0u;
  *(_QWORD *)(v793 + 80) = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, MEMORY[0x1E0C80D38]);
  *(_QWORD *)v791 = off_1E42B0758;
  *(_QWORD *)(v791 + 8) = v1236;
  *(_QWORD *)(v791 + 16) = v790;
  *(_QWORD *)(v791 + 24) = 0;
  *(_WORD *)(v791 + 32) = 62;
  *(_OWORD *)(v791 + 40) = 0u;
  *(_OWORD *)(v791 + 56) = 0u;
  *(_DWORD *)(v791 + 72) = 1065353216;
  *(_OWORD *)(v791 + 80) = 0u;
  *(_OWORD *)(v791 + 96) = 0u;
  *(_DWORD *)(v791 + 112) = 1065353216;
  *(_OWORD *)(v791 + 120) = 0u;
  *(_OWORD *)(v791 + 136) = 0u;
  *(_DWORD *)(v791 + 152) = 1065353216;
  *(_OWORD *)(v791 + 160) = 0u;
  *(_OWORD *)(v791 + 176) = 0u;
  *(_DWORD *)(v791 + 192) = 1065353216;
  *(_OWORD *)(v791 + 200) = 0u;
  *(_OWORD *)(v791 + 216) = 0u;
  *(_OWORD *)(v791 + 232) = 0u;
  *(_OWORD *)(v791 + 248) = 0u;
  *(_QWORD *)(v791 + 264) = 0;
  *(_QWORD *)(v791 + 272) = v792;
  *(_QWORD *)(v791 + 288) = 0;
  *(_BYTE *)(v791 + 296) = 0;
  *(_QWORD *)(v791 + 304) = 850045863;
  *(_OWORD *)(v791 + 312) = 0u;
  *(_OWORD *)(v791 + 328) = 0u;
  *(_OWORD *)(v791 + 344) = 0u;
  *(_QWORD *)(v791 + 360) = 0;
  *(_QWORD *)(v791 + 368) = v793;
  *(_QWORD *)(v791 + 376) = 850045863;
  *(_OWORD *)(v791 + 384) = 0u;
  *(_OWORD *)(v791 + 400) = 0u;
  *(_OWORD *)(v791 + 416) = 0u;
  *(_QWORD *)(v791 + 432) = 0;
  *(_QWORD *)(v791 + 464) = 0;
  *(_QWORD *)(v791 + 480) = 850045863;
  *(_OWORD *)(v791 + 488) = 0u;
  *(_OWORD *)(v791 + 504) = 0u;
  *(_OWORD *)(v791 + 520) = 0u;
  *(_OWORD *)(v791 + 536) = 0u;
  *(_OWORD *)(v791 + 552) = 0u;
  *(_OWORD *)(v791 + 568) = 0u;
  *(_QWORD *)buf = &off_1E42D5848;
  *(_QWORD *)&buf[8] = v791;
  v1336 = buf;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v793 + 16))(v793, buf);
  v794 = v1336;
  if (v1336 == buf)
  {
    v797 = 4;
    v794 = buf;
    v795 = v1227;
    v796 = (uint64_t *)(v1239 + 34);
  }
  else
  {
    v795 = v1227;
    v796 = (uint64_t *)(v1239 + 34);
    if (!v1336)
      goto LABEL_1095;
    v797 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v794 + 8 * v797))();
LABEL_1095:
  *(_QWORD *)v791 = &off_1E42A8A18;
  *(_OWORD *)(v791 + 584) = 0u;
  *(_WORD *)(v791 + 600) = 1;
  *(_BYTE *)(v791 + 608) = 0;
  *(_QWORD *)(v791 + 648) = 0;
  *(_QWORD *)(v791 + 640) = 0;
  *(_QWORD *)(v791 + 632) = v791 + 640;
  *(_WORD *)(v791 + 656) = 62;
  *(_QWORD *)(v791 + 680) = 0;
  *(_QWORD *)(v791 + 672) = 0;
  *(_QWORD *)(v791 + 664) = v791 + 672;
  *(_OWORD *)(v791 + 688) = xmmword_19FFB3820;
  *(_OWORD *)(v791 + 704) = 0u;
  *(_OWORD *)(v791 + 720) = 0u;
  *(_OWORD *)(v791 + 736) = 0u;
  *(_QWORD *)(v791 + 752) = 0;
  v798 = operator new();
  *(_DWORD *)(v798 + 16) = 2147483646;
  *(_BYTE *)(v798 + 20) = 0;
  *(_QWORD *)v798 = &off_1E42A6CA8;
  *(_QWORD *)(v798 + 8) = 0;
  *(_QWORD *)buf = v791;
  v1308 = (gdc::LayerDataStore *)v798;
  md::World::addMapLayerDataSource(v1239, 62, (uint64_t *)buf, (uint64_t *)&v1308, (gdc::LayerDataStore **)&v1330);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
  if (v1330)
  {
    gdc::LayerDataStore::~LayerDataStore((gdc::LayerDataStore *)v1330);
    MEMORY[0x1A1AF4E00]();
  }
  v799 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v799);
  v800 = (gdc::LayerDataStore *)operator new();
  md::OverlayLayerDataSource::OverlayLayerDataSource((uint64_t)v800, v795, 11, (uint64_t)v799, v772, *v796, a5, *(_QWORD *)(v1240 + 304), a9, a10);
  *(_QWORD *)*v796 = v800;
  v801 = operator new();
  *(_DWORD *)(v801 + 16) = 2147483646;
  *(_BYTE *)(v801 + 20) = 0;
  *(_QWORD *)v801 = &off_1E4299FB8;
  *(_QWORD *)(v801 + 8) = 0;
  *(_WORD *)(v801 + 22) = 11;
  *(float *)(v801 + 24) = a9;
  v1330 = (uint64_t (**)())v800;
  v1308 = (gdc::LayerDataStore *)v801;
  md::World::addMapLayerDataSource(v1239, 11, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v802 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v802);
  v803 = (gdc::LayerDataStore *)operator new();
  md::OverlayLayerDataSource::OverlayLayerDataSource((uint64_t)v803, v795, 12, (uint64_t)v802, v772, *v1233, a5, *(_QWORD *)(v1240 + 304), a9, a10);
  *(_QWORD *)(*v1233 + 16) = v803;
  v804 = operator new();
  *(_DWORD *)(v804 + 16) = 2147483646;
  *(_BYTE *)(v804 + 20) = 0;
  *(_QWORD *)v804 = &off_1E4299FB8;
  *(_QWORD *)(v804 + 8) = 0;
  *(_WORD *)(v804 + 22) = 12;
  *(float *)(v804 + 24) = a9;
  v1330 = (uint64_t (**)())v803;
  v1308 = (gdc::LayerDataStore *)v804;
  md::World::addMapLayerDataSource(v1239, 12, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v805 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v805);
  v806 = (gdc::LayerDataStore *)operator new();
  md::OverlayLayerDataSource::OverlayLayerDataSource((uint64_t)v806, v795, 71, (uint64_t)v805, v772, *v1233, a5, *(_QWORD *)(v1240 + 304), a9, a10);
  *(_QWORD *)(*v1233 + 8) = v806;
  v807 = operator new();
  *(_DWORD *)(v807 + 16) = 2147483646;
  *(_BYTE *)(v807 + 20) = 0;
  *(_QWORD *)v807 = &off_1E4299FB8;
  *(_QWORD *)(v807 + 8) = 0;
  *(_WORD *)(v807 + 22) = 71;
  *(float *)(v807 + 24) = a9;
  v1330 = (uint64_t (**)())v806;
  v1308 = (gdc::LayerDataStore *)v807;
  md::World::addMapLayerDataSource(v1239, 71, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v808 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v808);
  v809 = (gdc::LayerDataStore *)operator new();
  md::OverlayLayerDataSource::OverlayLayerDataSource((uint64_t)v809, v795, 72, (uint64_t)v808, v772, *v1233, a5, *(_QWORD *)(v1240 + 304), a9, a10);
  *(_QWORD *)(*v1233 + 24) = v809;
  v810 = operator new();
  *(_DWORD *)(v810 + 16) = 2147483646;
  *(_BYTE *)(v810 + 20) = 0;
  *(_QWORD *)v810 = &off_1E4299FB8;
  *(_QWORD *)(v810 + 8) = 0;
  *(_WORD *)(v810 + 22) = 72;
  *(float *)(v810 + 24) = a9;
  v1330 = (uint64_t (**)())v809;
  v1308 = (gdc::LayerDataStore *)v810;
  md::World::addMapLayerDataSource(v1239, 72, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v811 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v811);
  v812 = (gdc::LayerDataStore *)operator new();
  md::OverlayLayerDataSource::OverlayLayerDataSource((uint64_t)v812, v795, 81, (uint64_t)v811, v772, *v1233, a5, *(_QWORD *)(v1240 + 304), a9, a10);
  *(_QWORD *)(*v1233 + 32) = v812;
  v813 = operator new();
  *(_DWORD *)(v813 + 16) = 2147483646;
  *(_BYTE *)(v813 + 20) = 0;
  *(_QWORD *)v813 = &off_1E4299FB8;
  *(_QWORD *)(v813 + 8) = 0;
  *(_WORD *)(v813 + 22) = 81;
  *(float *)(v813 + 24) = a9;
  v1330 = (uint64_t (**)())v812;
  v1308 = (gdc::LayerDataStore *)v813;
  md::World::addMapLayerDataSource(v1239, 81, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v814 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v814);
  v815 = operator new();
  v816 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v1330 = 0;
  v817 = v772;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v815, 52, 30, v814, v816, v1236, 1, 0);
  *(_OWORD *)(v815 + 760) = 0u;
  *(_BYTE *)(v815 + 752) = 0;
  *(_QWORD *)v815 = &off_1E42A6A68;
  *(_QWORD *)(v815 + 776) = v817;
  *(_WORD *)(v815 + 784) = 0;
  *(_BYTE *)(v815 + 786) = 0;
  *(_WORD *)(v815 + 788) = 30;
  *(_QWORD *)(v815 + 792) = 0;
  v818 = operator new();
  *(_DWORD *)(v818 + 16) = 2147483646;
  *(_BYTE *)(v818 + 20) = 0;
  *(_QWORD *)v818 = &off_1E42A7D58;
  *(_QWORD *)(v818 + 8) = 0;
  *(_DWORD *)(v818 + 22) = 1966132;
  *(_DWORD *)(v818 + 32) = 7;
  *(_BYTE *)(v818 + 28) = 1;
  *(_DWORD *)(v818 + 40) = 25;
  *(_BYTE *)(v818 + 36) = 1;
  *(_BYTE *)(v818 + 44) = 0;
  *(_BYTE *)(v818 + 46) = 0;
  v1330 = (uint64_t (**)())v815;
  v1308 = (gdc::LayerDataStore *)v818;
  md::World::addMapLayerDataSource(v1239, 52, (uint64_t *)&v1330, (uint64_t *)&v1308, (gdc::LayerDataStore **)buf);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (v1330)
    (*((void (**)(uint64_t (**)()))*v1330 + 1))(v1330);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v819 = (gdc::LayerDataStore *)operator new();
  v1330 = (uint64_t (**)())gdc::LayerDataStore::LayerDataStore(v819);
  v820 = operator new();
  v821 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v822 = operator new();
  v823 = (gdc::LayerDataStore *)v822;
  v824 = v1239[44];
  v825 = (std::__shared_weak_count *)v1239[45];
  *(_QWORD *)buf = v824;
  *(_QWORD *)&buf[8] = v825;
  if (v825)
  {
    v826 = (unint64_t *)&v825->__shared_owners_;
    do
      v827 = __ldxr(v826);
    while (__stxr(v827 + 1, v826));
    *(_BYTE *)v822 = 0;
    *(_QWORD *)(v822 + 8) = v824;
    *(_QWORD *)(v822 + 16) = v825;
    v828 = (unint64_t *)&v825->__shared_owners_;
    do
      v829 = __ldxr(v828);
    while (__stxr(v829 + 1, v828));
  }
  else
  {
    *(_BYTE *)v822 = 0;
    *(_QWORD *)(v822 + 8) = v824;
    *(_QWORD *)(v822 + 16) = 0;
  }
  v830 = (_QWORD *)operator new();
  *v830 = &off_1E42A3158;
  v830[1] = v1240;
  *((_QWORD *)v823 + 3) = v830;
  v1308 = v823;
  if (v825)
  {
    v831 = (unint64_t *)&v825->__shared_owners_;
    do
      v832 = __ldaxr(v831);
    while (__stlxr(v832 - 1, v831));
    if (!v832)
    {
      ((void (*)(std::__shared_weak_count *))v825->__on_zero_shared)(v825);
      std::__shared_weak_count::__release_weak(v825);
    }
  }
  v833 = v817;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v820, 53, 31, v819, v821, v1236, 1, 0);
  *(_OWORD *)(v820 + 760) = 0u;
  *(_BYTE *)(v820 + 752) = 0;
  *(_QWORD *)v820 = &off_1E42A6A68;
  *(_QWORD *)(v820 + 776) = v833;
  *(_WORD *)(v820 + 784) = 0;
  *(_BYTE *)(v820 + 786) = 0;
  *(_WORD *)(v820 + 788) = 31;
  *(_QWORD *)(v820 + 792) = v1308;
  v834 = operator new();
  *(_DWORD *)(v834 + 16) = 2147483646;
  *(_BYTE *)(v834 + 20) = 0;
  *(_QWORD *)v834 = &off_1E42A7D58;
  *(_QWORD *)(v834 + 8) = 0;
  *(_DWORD *)(v834 + 22) = 2031669;
  *(_DWORD *)(v834 + 32) = 7;
  *(_BYTE *)(v834 + 28) = 1;
  *(_DWORD *)(v834 + 40) = 25;
  *(_BYTE *)(v834 + 36) = 1;
  *(_BYTE *)(v834 + 44) = 0;
  *(_BYTE *)(v834 + 46) = 0;
  *(_QWORD *)buf = v820;
  v1308 = (gdc::LayerDataStore *)v834;
  md::World::addMapLayerDataSource(v1239, 53, (uint64_t *)buf, (uint64_t *)&v1308, (gdc::LayerDataStore **)&v1330);
  if (v1308)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1308 + 8))(v1308);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
  if (v1330)
  {
    gdc::LayerDataStore::~LayerDataStore((gdc::LayerDataStore *)v1330);
    MEMORY[0x1A1AF4E00]();
  }
  v835 = (gdc::LayerDataStore *)operator new();
  v1330 = (uint64_t (**)())gdc::LayerDataStore::LayerDataStore(v835);
  v836 = (gdc::LayerDataStore *)operator new();
  v1308 = gdc::LayerDataStore::LayerDataStore(v836);
  v837 = (gdc::LayerDataStore *)operator new();
  v1306 = gdc::LayerDataStore::LayerDataStore(v837);
  v838 = (gdc::LayerDataStore *)operator new();
  v1231 = gdc::LayerDataStore::LayerDataStore(v838);
  v1304 = v1231;
  v839 = (gdc::LayerDataStore *)operator new();
  v1244 = gdc::LayerDataStore::LayerDataStore(v839);
  v840 = operator new();
  v841 = *(_QWORD *)(v1240 + 304);
  v842 = operator new();
  *(_QWORD *)v842 = &off_1E42B46F8;
  *(_QWORD *)(v842 + 8) = 0xBFF0000000000000;
  *(_QWORD *)(v842 + 16) = 850045863;
  *(_OWORD *)(v842 + 24) = 0u;
  *(_OWORD *)(v842 + 40) = 0u;
  *(_OWORD *)(v842 + 56) = 0u;
  *(_OWORD *)(v842 + 72) = 0u;
  *(_OWORD *)(v842 + 81) = 0u;
  *(_QWORD *)(v842 + 80) = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, MEMORY[0x1E0C80D38]);
  *(_QWORD *)v840 = off_1E42B0758;
  *(_QWORD *)(v840 + 8) = v1236;
  *(_QWORD *)(v840 + 16) = v835;
  *(_QWORD *)(v840 + 24) = 0;
  *(_WORD *)(v840 + 32) = 35;
  *(_OWORD *)(v840 + 40) = 0u;
  *(_OWORD *)(v840 + 56) = 0u;
  *(_DWORD *)(v840 + 72) = 1065353216;
  *(_OWORD *)(v840 + 80) = 0u;
  *(_OWORD *)(v840 + 96) = 0u;
  *(_DWORD *)(v840 + 112) = 1065353216;
  *(_OWORD *)(v840 + 120) = 0u;
  *(_OWORD *)(v840 + 136) = 0u;
  *(_DWORD *)(v840 + 152) = 1065353216;
  *(_OWORD *)(v840 + 160) = 0u;
  *(_OWORD *)(v840 + 176) = 0u;
  *(_DWORD *)(v840 + 192) = 1065353216;
  *(_OWORD *)(v840 + 200) = 0u;
  *(_OWORD *)(v840 + 216) = 0u;
  *(_OWORD *)(v840 + 232) = 0u;
  *(_OWORD *)(v840 + 248) = 0u;
  *(_QWORD *)(v840 + 264) = 0;
  *(_QWORD *)(v840 + 272) = v841;
  *(_QWORD *)(v840 + 288) = 0;
  *(_BYTE *)(v840 + 296) = 0;
  *(_QWORD *)(v840 + 304) = 850045863;
  *(_OWORD *)(v840 + 312) = 0u;
  *(_OWORD *)(v840 + 328) = 0u;
  *(_OWORD *)(v840 + 344) = 0u;
  *(_QWORD *)(v840 + 360) = 0;
  *(_QWORD *)(v840 + 368) = v842;
  *(_QWORD *)(v840 + 376) = 850045863;
  *(_OWORD *)(v840 + 384) = 0u;
  *(_OWORD *)(v840 + 400) = 0u;
  *(_OWORD *)(v840 + 416) = 0u;
  *(_QWORD *)(v840 + 432) = 0;
  *(_QWORD *)(v840 + 464) = 0;
  *(_QWORD *)(v840 + 480) = 850045863;
  *(_OWORD *)(v840 + 488) = 0u;
  *(_OWORD *)(v840 + 504) = 0u;
  *(_OWORD *)(v840 + 520) = 0u;
  *(_OWORD *)(v840 + 536) = 0u;
  *(_OWORD *)(v840 + 552) = 0u;
  *(_OWORD *)(v840 + 568) = 0u;
  *(_QWORD *)buf = &off_1E42D5848;
  *(_QWORD *)&buf[8] = v840;
  v1336 = buf;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v842 + 16))(v842, buf);
  v843 = v1336;
  if (v1336 == buf)
  {
    v844 = 4;
    v843 = buf;
  }
  else
  {
    if (!v1336)
      goto LABEL_1160;
    v844 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v843 + 8 * v844))();
LABEL_1160:
  *(_QWORD *)v840 = &off_1E42ABDD8;
  v845 = operator new();
  *(_DWORD *)(v845 + 16) = -1073741827;
  *(_BYTE *)(v845 + 20) = 0;
  *(_QWORD *)v845 = &off_1E42A7D58;
  *(_QWORD *)(v845 + 8) = 0;
  *(_DWORD *)(v845 + 22) = 1441827;
  *(_BYTE *)(v845 + 28) = 0;
  *(_DWORD *)(v845 + 40) = 25;
  *(_BYTE *)(v845 + 36) = 1;
  *(_BYTE *)(v845 + 44) = 0;
  *(_BYTE *)(v845 + 46) = 0;
  *(_QWORD *)buf = v840;
  v1243 = (gdc::LayerDataStore *)v845;
  md::World::addMapLayerDataSource(v1239, 35, (uint64_t *)buf, (uint64_t *)&v1243, (gdc::LayerDataStore **)&v1330);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
  v846 = operator new();
  v847 = *(_QWORD *)(v1240 + 304);
  v848 = v833;
  v849 = operator new();
  *(_QWORD *)v849 = &off_1E42B46F8;
  *(_QWORD *)(v849 + 8) = 0xBFF0000000000000;
  *(_QWORD *)(v849 + 16) = 850045863;
  *(_OWORD *)(v849 + 24) = 0u;
  *(_OWORD *)(v849 + 40) = 0u;
  *(_OWORD *)(v849 + 56) = 0u;
  *(_OWORD *)(v849 + 72) = 0u;
  *(_OWORD *)(v849 + 81) = 0u;
  *(_QWORD *)(v849 + 80) = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, MEMORY[0x1E0C80D38]);
  *(_QWORD *)v846 = off_1E42B0758;
  *(_QWORD *)(v846 + 8) = v1236;
  *(_QWORD *)(v846 + 16) = v836;
  *(_QWORD *)(v846 + 24) = 0;
  *(_WORD *)(v846 + 32) = 36;
  *(_OWORD *)(v846 + 40) = 0u;
  *(_OWORD *)(v846 + 56) = 0u;
  *(_DWORD *)(v846 + 72) = 1065353216;
  *(_OWORD *)(v846 + 80) = 0u;
  *(_OWORD *)(v846 + 96) = 0u;
  *(_DWORD *)(v846 + 112) = 1065353216;
  *(_OWORD *)(v846 + 120) = 0u;
  *(_OWORD *)(v846 + 136) = 0u;
  *(_DWORD *)(v846 + 152) = 1065353216;
  *(_OWORD *)(v846 + 160) = 0u;
  *(_OWORD *)(v846 + 176) = 0u;
  *(_DWORD *)(v846 + 192) = 1065353216;
  *(_OWORD *)(v846 + 200) = 0u;
  *(_OWORD *)(v846 + 216) = 0u;
  *(_OWORD *)(v846 + 232) = 0u;
  *(_OWORD *)(v846 + 248) = 0u;
  *(_QWORD *)(v846 + 264) = 0;
  *(_QWORD *)(v846 + 272) = v847;
  *(_QWORD *)(v846 + 288) = 0;
  *(_BYTE *)(v846 + 296) = 0;
  *(_QWORD *)(v846 + 304) = 850045863;
  *(_OWORD *)(v846 + 312) = 0u;
  *(_OWORD *)(v846 + 328) = 0u;
  *(_OWORD *)(v846 + 344) = 0u;
  *(_QWORD *)(v846 + 360) = 0;
  *(_QWORD *)(v846 + 368) = v849;
  *(_QWORD *)(v846 + 376) = 850045863;
  *(_OWORD *)(v846 + 384) = 0u;
  *(_OWORD *)(v846 + 400) = 0u;
  *(_OWORD *)(v846 + 416) = 0u;
  *(_QWORD *)(v846 + 432) = 0;
  *(_QWORD *)(v846 + 464) = 0;
  *(_QWORD *)(v846 + 480) = 850045863;
  *(_OWORD *)(v846 + 488) = 0u;
  *(_OWORD *)(v846 + 504) = 0u;
  *(_OWORD *)(v846 + 520) = 0u;
  *(_OWORD *)(v846 + 536) = 0u;
  *(_OWORD *)(v846 + 552) = 0u;
  *(_OWORD *)(v846 + 568) = 0u;
  *(_QWORD *)buf = &off_1E42D5848;
  *(_QWORD *)&buf[8] = v846;
  v1336 = buf;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v849 + 16))(v849, buf);
  v850 = v1336;
  if (v1336 == buf)
  {
    v851 = 4;
    v850 = buf;
  }
  else
  {
    if (!v1336)
      goto LABEL_1169;
    v851 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v850 + 8 * v851))();
LABEL_1169:
  *(_QWORD *)v846 = &off_1E42ABE78;
  *(_OWORD *)(v846 + 584) = 0u;
  *(_QWORD *)(v846 + 600) = &off_1E42B4D50;
  *(_QWORD *)(v846 + 608) = v848;
  v852 = operator new();
  *(_DWORD *)(v852 + 16) = 2147483646;
  *(_BYTE *)(v852 + 20) = 0;
  *(_QWORD *)v852 = &off_1E42ABC30;
  *(_QWORD *)(v852 + 8) = 0;
  *(_QWORD *)buf = v846;
  v1243 = (gdc::LayerDataStore *)v852;
  md::World::addMapLayerDataSource(v1239, 36, (uint64_t *)buf, (uint64_t *)&v1243, &v1308);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
  v853 = (gdc::LayerDataStore *)operator new();
  v1243 = gdc::LayerDataStore::LayerDataStore(v853);
  v854 = operator new();
  v855 = *(_QWORD *)(v1240 + 304);
  v856 = v848;
  v857 = operator new();
  *(_QWORD *)v857 = &off_1E42B46F8;
  *(_QWORD *)(v857 + 8) = 0xBFF0000000000000;
  *(_QWORD *)(v857 + 16) = 850045863;
  *(_OWORD *)(v857 + 24) = 0u;
  *(_OWORD *)(v857 + 40) = 0u;
  *(_OWORD *)(v857 + 56) = 0u;
  *(_OWORD *)(v857 + 72) = 0u;
  *(_OWORD *)(v857 + 81) = 0u;
  *(_QWORD *)(v857 + 80) = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, MEMORY[0x1E0C80D38]);
  *(_QWORD *)v854 = off_1E42B0758;
  *(_QWORD *)(v854 + 8) = v1236;
  *(_QWORD *)(v854 + 16) = v853;
  *(_QWORD *)(v854 + 24) = 0;
  *(_WORD *)(v854 + 32) = 37;
  *(_OWORD *)(v854 + 40) = 0u;
  *(_OWORD *)(v854 + 56) = 0u;
  *(_DWORD *)(v854 + 72) = 1065353216;
  *(_OWORD *)(v854 + 80) = 0u;
  *(_OWORD *)(v854 + 96) = 0u;
  *(_DWORD *)(v854 + 112) = 1065353216;
  *(_OWORD *)(v854 + 120) = 0u;
  *(_OWORD *)(v854 + 136) = 0u;
  *(_DWORD *)(v854 + 152) = 1065353216;
  *(_OWORD *)(v854 + 160) = 0u;
  *(_OWORD *)(v854 + 176) = 0u;
  *(_DWORD *)(v854 + 192) = 1065353216;
  *(_OWORD *)(v854 + 200) = 0u;
  *(_OWORD *)(v854 + 216) = 0u;
  *(_OWORD *)(v854 + 232) = 0u;
  *(_OWORD *)(v854 + 248) = 0u;
  *(_QWORD *)(v854 + 264) = 0;
  *(_QWORD *)(v854 + 272) = v855;
  *(_QWORD *)(v854 + 288) = 0;
  *(_BYTE *)(v854 + 296) = 0;
  *(_QWORD *)(v854 + 304) = 850045863;
  *(_OWORD *)(v854 + 312) = 0u;
  *(_OWORD *)(v854 + 328) = 0u;
  *(_OWORD *)(v854 + 344) = 0u;
  *(_QWORD *)(v854 + 360) = 0;
  *(_QWORD *)(v854 + 368) = v857;
  *(_QWORD *)(v854 + 376) = 850045863;
  *(_OWORD *)(v854 + 384) = 0u;
  *(_OWORD *)(v854 + 400) = 0u;
  *(_OWORD *)(v854 + 416) = 0u;
  *(_QWORD *)(v854 + 432) = 0;
  *(_QWORD *)(v854 + 464) = 0;
  *(_QWORD *)(v854 + 480) = 850045863;
  *(_OWORD *)(v854 + 488) = 0u;
  *(_OWORD *)(v854 + 504) = 0u;
  *(_OWORD *)(v854 + 520) = 0u;
  *(_OWORD *)(v854 + 536) = 0u;
  *(_OWORD *)(v854 + 552) = 0u;
  *(_OWORD *)(v854 + 568) = 0u;
  *(_QWORD *)buf = &off_1E42D5848;
  *(_QWORD *)&buf[8] = v854;
  v1336 = buf;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v857 + 16))(v857, buf);
  v858 = v1336;
  if (v1336 == buf)
  {
    v859 = 4;
    v858 = buf;
  }
  else
  {
    if (!v1336)
      goto LABEL_1178;
    v859 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v858 + 8 * v859))();
LABEL_1178:
  *(_QWORD *)v854 = &off_1E42ABF18;
  *(_QWORD *)(v854 + 584) = 0;
  *(_QWORD *)(v854 + 592) = &off_1E42B4D50;
  *(_QWORD *)(v854 + 600) = v856;
  *(_QWORD *)(v854 + 640) = 0;
  *(_QWORD *)(v854 + 656) = 0;
  *(_QWORD *)(v854 + 648) = 0;
  v860 = operator new();
  *(_DWORD *)(v860 + 16) = 2147483646;
  *(_BYTE *)(v860 + 20) = 0;
  *(_QWORD *)v860 = &off_1E42A7D58;
  *(_QWORD *)(v860 + 8) = 0;
  *(_DWORD *)(v860 + 22) = 1572901;
  *(_BYTE *)(v860 + 28) = 0;
  *(_DWORD *)(v860 + 40) = 25;
  *(_BYTE *)(v860 + 36) = 1;
  *(_BYTE *)(v860 + 44) = 0;
  *(_BYTE *)(v860 + 46) = 0;
  *(_QWORD *)buf = v854;
  v1242 = v860;
  md::World::addMapLayerDataSource(v1239, 37, (uint64_t *)buf, &v1242, &v1243);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
  if (v1243)
  {
    gdc::LayerDataStore::~LayerDataStore(v1243);
    MEMORY[0x1A1AF4E00]();
  }
  v861 = (gdc::LayerDataStore *)operator new();
  v1243 = gdc::LayerDataStore::LayerDataStore(v861);
  v862 = operator new();
  v863 = *(_QWORD *)(v1240 + 304);
  v864 = v856;
  v865 = operator new();
  *(_QWORD *)v865 = &off_1E42B46F8;
  *(_QWORD *)(v865 + 8) = 0xBFF0000000000000;
  *(_QWORD *)(v865 + 16) = 850045863;
  *(_OWORD *)(v865 + 24) = 0u;
  *(_OWORD *)(v865 + 40) = 0u;
  *(_OWORD *)(v865 + 56) = 0u;
  *(_OWORD *)(v865 + 72) = 0u;
  *(_OWORD *)(v865 + 81) = 0u;
  *(_QWORD *)(v865 + 80) = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, MEMORY[0x1E0C80D38]);
  *(_QWORD *)v862 = off_1E42B0758;
  *(_QWORD *)(v862 + 8) = v1236;
  *(_QWORD *)(v862 + 16) = v861;
  *(_QWORD *)(v862 + 24) = 0;
  *(_WORD *)(v862 + 32) = 38;
  *(_OWORD *)(v862 + 40) = 0u;
  *(_OWORD *)(v862 + 56) = 0u;
  *(_DWORD *)(v862 + 72) = 1065353216;
  *(_OWORD *)(v862 + 80) = 0u;
  *(_OWORD *)(v862 + 96) = 0u;
  *(_DWORD *)(v862 + 112) = 1065353216;
  *(_OWORD *)(v862 + 120) = 0u;
  *(_OWORD *)(v862 + 136) = 0u;
  *(_DWORD *)(v862 + 152) = 1065353216;
  *(_OWORD *)(v862 + 160) = 0u;
  *(_OWORD *)(v862 + 176) = 0u;
  *(_DWORD *)(v862 + 192) = 1065353216;
  *(_OWORD *)(v862 + 200) = 0u;
  *(_OWORD *)(v862 + 216) = 0u;
  *(_OWORD *)(v862 + 232) = 0u;
  *(_OWORD *)(v862 + 248) = 0u;
  *(_QWORD *)(v862 + 264) = 0;
  *(_QWORD *)(v862 + 272) = v863;
  *(_QWORD *)(v862 + 288) = 0;
  *(_BYTE *)(v862 + 296) = 0;
  *(_QWORD *)(v862 + 304) = 850045863;
  *(_OWORD *)(v862 + 312) = 0u;
  *(_OWORD *)(v862 + 328) = 0u;
  *(_OWORD *)(v862 + 344) = 0u;
  *(_QWORD *)(v862 + 360) = 0;
  *(_QWORD *)(v862 + 368) = v865;
  *(_QWORD *)(v862 + 376) = 850045863;
  *(_OWORD *)(v862 + 384) = 0u;
  *(_OWORD *)(v862 + 400) = 0u;
  *(_OWORD *)(v862 + 416) = 0u;
  *(_QWORD *)(v862 + 432) = 0;
  *(_QWORD *)(v862 + 464) = 0;
  *(_QWORD *)(v862 + 480) = 850045863;
  *(_OWORD *)(v862 + 488) = 0u;
  *(_OWORD *)(v862 + 504) = 0u;
  *(_OWORD *)(v862 + 520) = 0u;
  *(_OWORD *)(v862 + 536) = 0u;
  *(_OWORD *)(v862 + 552) = 0u;
  *(_OWORD *)(v862 + 568) = 0u;
  *(_QWORD *)buf = &off_1E42D5848;
  *(_QWORD *)&buf[8] = v862;
  v1336 = buf;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v865 + 16))(v865, buf);
  v866 = v1336;
  if (v1336 == buf)
  {
    v867 = 4;
    v866 = buf;
  }
  else
  {
    if (!v1336)
      goto LABEL_1189;
    v867 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v866 + 8 * v867))();
LABEL_1189:
  *(_QWORD *)v862 = &off_1E42AC018;
  *(_QWORD *)(v862 + 584) = 0;
  *(_QWORD *)(v862 + 592) = &off_1E42B4D50;
  *(_QWORD *)(v862 + 600) = v864;
  *(_QWORD *)(v862 + 640) = 0;
  *(_QWORD *)(v862 + 656) = 0;
  *(_QWORD *)(v862 + 648) = 0;
  v868 = operator new();
  *(_DWORD *)(v868 + 16) = 2147483646;
  *(_BYTE *)(v868 + 20) = 0;
  *(_QWORD *)v868 = &off_1E42ABFB8;
  *(_QWORD *)(v868 + 8) = 0;
  *(_QWORD *)buf = v862;
  v1242 = v868;
  md::World::addMapLayerDataSource(v1239, 38, (uint64_t *)buf, &v1242, &v1243);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
  if (v1243)
  {
    gdc::LayerDataStore::~LayerDataStore(v1243);
    MEMORY[0x1A1AF4E00]();
  }
  v869 = (md::SingleGEOResourceLayerDataSource *)operator new();
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource(v869, 39, 14, v837, *(gdc::ResourceStatusContainer **)(v1240 + 304), v1236, 0, 1);
  *(_QWORD *)v869 = &off_1E42AC0B8;
  v870 = operator new();
  v871 = *((_WORD *)v869 + 292);
  *(_DWORD *)(v870 + 16) = 2147483646;
  *(_BYTE *)(v870 + 20) = 0;
  *(_QWORD *)v870 = &off_1E42A7D58;
  *(_QWORD *)(v870 + 8) = 0;
  *(_WORD *)(v870 + 22) = 39;
  *(_WORD *)(v870 + 24) = v871;
  *(_BYTE *)(v870 + 28) = 0;
  *(_DWORD *)(v870 + 40) = 25;
  *(_BYTE *)(v870 + 36) = 1;
  *(_BYTE *)(v870 + 44) = 0;
  *(_BYTE *)(v870 + 46) = 0;
  *(_QWORD *)buf = v869;
  v1243 = (gdc::LayerDataStore *)v870;
  md::World::addMapLayerDataSource(v1239, 39, (uint64_t *)buf, (uint64_t *)&v1243, &v1306);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
  v872 = (md::SingleGEOResourceLayerDataSource *)operator new();
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource(v872, 40, 9, v1231, *(gdc::ResourceStatusContainer **)(v1240 + 304), v1236, 0, 1);
  *(_QWORD *)v872 = &off_1E42A8F58;
  v873 = operator new();
  v874 = *((_WORD *)v872 + 292);
  *(_DWORD *)(v873 + 16) = 2147483646;
  *(_BYTE *)(v873 + 20) = 0;
  *(_QWORD *)v873 = &off_1E42A7D58;
  *(_QWORD *)(v873 + 8) = 0;
  *(_WORD *)(v873 + 22) = 40;
  *(_WORD *)(v873 + 24) = v874;
  *(_BYTE *)(v873 + 28) = 0;
  *(_DWORD *)(v873 + 40) = 25;
  *(_BYTE *)(v873 + 36) = 1;
  *(_BYTE *)(v873 + 44) = 0;
  *(_BYTE *)(v873 + 46) = 0;
  *(_QWORD *)buf = v872;
  v1243 = (gdc::LayerDataStore *)v873;
  md::World::addMapLayerDataSource(v1239, 40, (uint64_t *)buf, (uint64_t *)&v1243, &v1304);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
  v875 = (md::SingleGEOResourceLayerDataSource *)operator new();
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource(v875, 63, 30, v839, *(gdc::ResourceStatusContainer **)(v1240 + 304), v1236, 0, 1);
  *(_QWORD *)v875 = &off_1E42AB8E8;
  v876 = operator new();
  v877 = *((_WORD *)v875 + 292);
  *(_DWORD *)(v876 + 16) = 2147483646;
  *(_BYTE *)(v876 + 20) = 0;
  *(_QWORD *)v876 = &off_1E42A7D58;
  *(_QWORD *)(v876 + 8) = 0;
  *(_WORD *)(v876 + 22) = 63;
  *(_WORD *)(v876 + 24) = v877;
  *(_BYTE *)(v876 + 28) = 0;
  *(_DWORD *)(v876 + 40) = 25;
  *(_BYTE *)(v876 + 36) = 1;
  *(_BYTE *)(v876 + 44) = 0;
  *(_BYTE *)(v876 + 46) = 0;
  *(_QWORD *)buf = v875;
  v1243 = (gdc::LayerDataStore *)v876;
  md::World::addMapLayerDataSource(v1239, 63, (uint64_t *)buf, (uint64_t *)&v1243, &v1244);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
  v878 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v878);
  v879 = operator new();
  v880 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v881 = v864;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v879, 33, 27, v878, v880, v1236, 0, 0);
  *(_QWORD *)v879 = &off_1E42A5878;
  *(_QWORD *)(v879 + 752) = &off_1E42B4D50;
  *(_QWORD *)(v879 + 760) = v881;
  *(_OWORD *)(v879 + 776) = 0u;
  *(_OWORD *)(v879 + 792) = 0u;
  v882 = operator new();
  *(_DWORD *)(v882 + 16) = -1073741827;
  *(_BYTE *)(v882 + 20) = 0;
  *(_QWORD *)v882 = &off_1E42A7D58;
  *(_QWORD *)(v882 + 8) = 0;
  *(_DWORD *)(v882 + 22) = 1769505;
  *(_BYTE *)(v882 + 28) = 0;
  *(_DWORD *)(v882 + 40) = 25;
  *(_BYTE *)(v882 + 36) = 1;
  *(_BYTE *)(v882 + 44) = 0;
  *(_BYTE *)(v882 + 46) = 0;
  v1242 = v882;
  v1243 = (gdc::LayerDataStore *)v879;
  md::World::addMapLayerDataSource(v1239, 33, (uint64_t *)&v1243, &v1242, (gdc::LayerDataStore **)buf);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v883 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v883);
  v884 = operator new();
  v885 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v886 = v881;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v884, 34, 37, v883, v885, v1236, 0, 0);
  *(_QWORD *)v884 = &off_1E42A5878;
  *(_QWORD *)(v884 + 752) = &off_1E42B4D50;
  *(_QWORD *)(v884 + 760) = v886;
  *(_OWORD *)(v884 + 776) = 0u;
  *(_OWORD *)(v884 + 792) = 0u;
  v887 = operator new();
  *(_DWORD *)(v887 + 16) = 2147483646;
  *(_BYTE *)(v887 + 20) = 0;
  *(_QWORD *)v887 = &off_1E429F4B8;
  *(_QWORD *)(v887 + 8) = 0;
  *(_DWORD *)(v887 + 22) = 2424866;
  *(_BYTE *)(v887 + 28) = 0;
  *(_DWORD *)(v887 + 40) = 25;
  *(_BYTE *)(v887 + 36) = 1;
  v1242 = v887;
  v1243 = (gdc::LayerDataStore *)v884;
  md::World::addMapLayerDataSource(v1239, 34, (uint64_t *)&v1243, &v1242, (gdc::LayerDataStore **)buf);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v888 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v888);
  v889 = operator new();
  v890 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v1222 = v886;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v889, 79, 52, v888, v890, v1236, 1, 0);
  *(_QWORD *)v889 = &off_1E426F908;
  *(_OWORD *)(v889 + 752) = 0u;
  v891 = v1222;
  *(_QWORD *)(v889 + 768) = &off_1E42B4D50;
  *(_QWORD *)(v889 + 776) = v891;
  *(_QWORD *)(v889 + 792) = 0;
  *(_QWORD *)(v889 + 808) = 0;
  *(_QWORD *)(v889 + 800) = 0;
  v892 = operator new(2uLL);
  *(_QWORD *)(v889 + 792) = v892;
  *v892++ = 53;
  *(_QWORD *)(v889 + 808) = v892;
  *(_QWORD *)(v889 + 800) = v892;
  *(_OWORD *)(v889 + 816) = 0u;
  v893 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v893->__shared_owners_ = 0;
  v894 = (unint64_t *)&v893->__shared_owners_;
  v893->__shared_weak_owners_ = 0;
  v893->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  ggl::BufferData::BufferData((uint64_t)&v893[1], 2, 1, 0, 6, 726);
  v896 = 0;
  LODWORD(v893[10].__vftable) = 0;
  v893[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
  v893[1].__shared_owners_ = 2;
  v893[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
  v893[9].__shared_weak_owners_ = (uint64_t)"index data";
  v897 = v893[4].__vftable;
  v898 = (char *)&v897[1].__on_zero_shared + 2;
  do
  {
    *((_WORD *)v898 - 29) = 12 * v896;
    v899 = (12 * v896) | 1;
    *((_WORD *)v898 - 28) = v899;
    v900 = 12 * v896 + 12;
    *((_WORD *)v898 - 27) = v900;
    *((_WORD *)v898 - 26) = v900;
    *((_WORD *)v898 - 25) = v899;
    v901 = 12 * v896 + 13;
    *((_WORD *)v898 - 24) = v901;
    *((_WORD *)v898 - 23) = v899;
    v902 = (12 * v896) | 2;
    *((_WORD *)v898 - 22) = v902;
    *((_WORD *)v898 - 21) = v901;
    *((_WORD *)v898 - 20) = v901;
    *((_WORD *)v898 - 19) = v902;
    *((_WORD *)v898 - 18) = 12 * v896 + 14;
    *((_WORD *)v898 - 17) = v902;
    v903 = (12 * v896) | 3;
    *((_WORD *)v898 - 16) = v903;
    *((_WORD *)v898 - 15) = 12 * v896 + 14;
    *((_WORD *)v898 - 14) = 12 * v896 + 14;
    *((_WORD *)v898 - 13) = v903;
    v904 = 12 * v896 + 15;
    *((_WORD *)v898 - 12) = v904;
    *((_WORD *)v898 - 11) = v903;
    v905 = 12 * v896 + 4;
    *((_WORD *)v898 - 10) = v905;
    *((_WORD *)v898 - 9) = v904;
    *((_WORD *)v898 - 8) = v904;
    *((_WORD *)v898 - 7) = v905;
    v906 = 12 * v896 + 16;
    *((_WORD *)v898 - 6) = v906;
    *((_WORD *)v898 - 5) = v905;
    v907 = 12 * v896 + 5;
    *((_WORD *)v898 - 4) = v907;
    *((_WORD *)v898 - 3) = v906;
    *((_WORD *)v898 - 2) = v906;
    *((_WORD *)v898 - 1) = v907;
    v908 = 12 * v896 + 17;
    *(_WORD *)v898 = v908;
    *((_WORD *)v898 + 1) = v907;
    v909 = 12 * v896 + 6;
    *((_WORD *)v898 + 2) = v909;
    *((_WORD *)v898 + 3) = v908;
    *((_WORD *)v898 + 4) = v908;
    *((_WORD *)v898 + 5) = v909;
    v910 = 12 * v896 + 18;
    *((_WORD *)v898 + 6) = v910;
    *((_WORD *)v898 + 7) = v909;
    v911 = 12 * v896 + 7;
    *((_WORD *)v898 + 8) = v911;
    *((_WORD *)v898 + 9) = v910;
    *((_WORD *)v898 + 10) = v910;
    *((_WORD *)v898 + 11) = v911;
    v912 = 12 * v896 + 19;
    *((_WORD *)v898 + 12) = v912;
    *((_WORD *)v898 + 13) = v911;
    v913 = 12 * v896 + 8;
    *((_WORD *)v898 + 14) = v913;
    *((_WORD *)v898 + 15) = v912;
    *((_WORD *)v898 + 16) = v912;
    *((_WORD *)v898 + 17) = v913;
    v914 = 12 * v896 + 20;
    *((_WORD *)v898 + 18) = v914;
    *((_WORD *)v898 + 19) = v913;
    *((_WORD *)v898 + 20) = 12 * v896 + 9;
    *((_WORD *)v898 + 21) = v914;
    *((_WORD *)v898 + 22) = v914;
    *((_WORD *)v898 + 23) = 12 * v896 + 9;
    *((_WORD *)v898 + 24) = 12 * v896 + 21;
    *((_WORD *)v898 + 25) = 12 * v896 + 9;
    *((_WORD *)v898 + 27) = 12 * v896 + 21;
    *((_WORD *)v898 + 28) = 12 * v896 + 21;
    *(int16x4_t *)v895.i8 = vadd_s16(vdup_n_s16(12 * (int)v896++), (int16x4_t)0x17000B0016000ALL);
    *((_WORD *)v898 + 26) = v895.i16[0];
    *(int8x16_t *)(v898 + 58) = vqtbl1q_s8(v895, (int8x16_t)xmmword_19FFB3830);
    v898 += 132;
  }
  while (v896 != 11);
  v915 = operator new();
  v1224 = v897;
  v1229 = v891;
  if ((v916 & 1) == 0
  {
    if ((v1204 & 1) == 0
    {
      ggl::MeshTyped<ggl::FlyoverCommon::PolarVertex>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverCommon::polarVertexReflection;
    }
    ggl::MeshTyped<ggl::FlyoverCommon::PolarVertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverCommon::PolarVertex>::attributesReflection(void)::r;
    unk_1EE578638 = 1;
  }
  *(_QWORD *)(v915 + 32) = 0;
  *(_QWORD *)(v915 + 40) = 0;
  *(_DWORD *)(v915 + 48) = 0;
  *(_QWORD *)v915 = &off_1E42BBC08;
  *(_QWORD *)(v915 + 8) = "QuadGrid";
  *(_QWORD *)(v915 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(v915 + 24) = 0;
  *(_QWORD *)(v915 + 56) = &ggl::MeshTyped<ggl::FlyoverCommon::PolarVertex>::typedReflection(void)::r;
  *(_QWORD *)(v915 + 64) = 0;
  v917 = v915 + 64;
  *(_QWORD *)(v915 + 72) = 0;
  *(_QWORD *)(v915 + 80) = 0;
  v1232 = (gdc::LayerDataStore *)(v915 + 64);
  {
    v1205 = operator new();
    *(_QWORD *)(v1205 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v1205 + 24) = "GeoGL";
    *(_OWORD *)(v1205 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v1205 = &off_1E42B5668;
    *(_QWORD *)(v1205 + 8) = "GeoGL";
    *(_OWORD *)(v1205 + 72) = 0u;
    *(_OWORD *)(v1205 + 88) = 0u;
    *(_OWORD *)(v1205 + 104) = 0u;
    *(_OWORD *)(v1205 + 120) = 0u;
    *(_OWORD *)(v1205 + 136) = 0u;
    *(_OWORD *)(v1205 + 152) = 0u;
    *(_OWORD *)(v1205 + 168) = 0u;
    *(_OWORD *)(v1205 + 184) = 0u;
    *(_OWORD *)(v1205 + 200) = 0u;
    *(_OWORD *)(v1205 + 216) = 0u;
    *(_OWORD *)(v1205 + 232) = 0u;
    *(_QWORD *)(v1205 + 248) = 0;
    *(_OWORD *)(v1205 + 56) = 0u;
    v1206 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1205 + 56), 0);
    if ((_DWORD)v1206)
      geo::read_write_lock::logFailure(v1206, (uint64_t)"initialization", v1207);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v1205 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v1205 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v1205;
    v917 = v915 + 64;
  }
  v919 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v915 + 120) = 0;
  *(_QWORD *)(v915 + 96) = 0;
  *(_QWORD *)(v915 + 104) = 0;
  *(_QWORD *)(v915 + 88) = v919;
  {
    v1209 = operator new();
    *(_QWORD *)(v1209 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v1209 + 24) = "GeoGL";
    *(_OWORD *)(v1209 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v1209 = &off_1E42B5668;
    *(_QWORD *)(v1209 + 8) = "GeoGL";
    *(_OWORD *)(v1209 + 72) = 0u;
    *(_OWORD *)(v1209 + 88) = 0u;
    *(_OWORD *)(v1209 + 104) = 0u;
    *(_OWORD *)(v1209 + 120) = 0u;
    *(_OWORD *)(v1209 + 136) = 0u;
    *(_OWORD *)(v1209 + 152) = 0u;
    *(_OWORD *)(v1209 + 168) = 0u;
    *(_OWORD *)(v1209 + 184) = 0u;
    *(_OWORD *)(v1209 + 200) = 0u;
    *(_OWORD *)(v1209 + 216) = 0u;
    *(_OWORD *)(v1209 + 232) = 0u;
    *(_QWORD *)(v1209 + 248) = 0;
    *(_OWORD *)(v1209 + 56) = 0u;
    v1210 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1209 + 56), 0);
    if ((_DWORD)v1210)
      geo::read_write_lock::logFailure(v1210, (uint64_t)"initialization", v1211);
    v1212 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1209 + 48) = v1212;
    malloc_set_zone_name(v1212, "GeoGL");
    *(_QWORD *)(v1209 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v1209;
    v917 = v915 + 64;
  }
  *(_QWORD *)(v915 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v915 + 136) = 0;
  *(_QWORD *)(v915 + 112) = v915 + 120;
  *(_QWORD *)v915 = &off_1E4274978;
  *(_QWORD *)(v915 + 16) = &unk_1E4274998;
  v920 = *(_QWORD *)(v915 + 64);
  v921 = *(_QWORD *)(*(_QWORD *)(v915 + 56) + 8);
  v922 = *(_QWORD *)(v915 + 72);
  v923 = (v922 - v920) >> 4;
  v924 = v921 - v923;
  if (v921 <= v923)
  {
    if (v921 < v923)
    {
      v925 = v920 + 16 * v921;
      while (v922 != v925)
      {
        v926 = *(std::__shared_weak_count **)(v922 - 8);
        if (v926)
        {
          v927 = (unint64_t *)&v926->__shared_owners_;
          do
            v928 = __ldaxr(v927);
          while (__stlxr(v928 - 1, v927));
          if (!v928)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v926->__on_zero_shared)(v926, v924);
            std::__shared_weak_count::__release_weak(v926);
          }
        }
        v922 -= 16;
      }
      *(_QWORD *)(v915 + 72) = v925;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append(v917, v924);
  }
  *(_QWORD *)v915 = &off_1E42746C8;
  *(_QWORD *)(v915 + 16) = &unk_1E42746E8;
  {
    v1213 = operator new();
    *(_QWORD *)(v1213 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v1213 + 24) = "GeoGL";
    *(_OWORD *)(v1213 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v1213 = &off_1E42B5668;
    *(_QWORD *)(v1213 + 8) = "GeoGL";
    *(_OWORD *)(v1213 + 72) = 0u;
    *(_OWORD *)(v1213 + 88) = 0u;
    *(_OWORD *)(v1213 + 104) = 0u;
    *(_OWORD *)(v1213 + 120) = 0u;
    *(_OWORD *)(v1213 + 136) = 0u;
    *(_OWORD *)(v1213 + 152) = 0u;
    *(_OWORD *)(v1213 + 168) = 0u;
    *(_OWORD *)(v1213 + 184) = 0u;
    *(_OWORD *)(v1213 + 200) = 0u;
    *(_OWORD *)(v1213 + 216) = 0u;
    *(_OWORD *)(v1213 + 232) = 0u;
    *(_QWORD *)(v1213 + 248) = 0;
    *(_OWORD *)(v1213 + 56) = 0u;
    v1214 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1213 + 56), 0);
    if ((_DWORD)v1214)
      geo::read_write_lock::logFailure(v1214, (uint64_t)"initialization", v1215);
    v1216 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1213 + 48) = v1216;
    malloc_set_zone_name(v1216, "GeoGL");
    *(_QWORD *)(v1213 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v1213;
  }
  v930 = ggl::Allocator::instance(void)::alloc;
  v931 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(_QWORD *)v931 = &off_1E428A1B0;
  *(_QWORD *)(v931 + 8) = 0;
  *(_QWORD *)(v931 + 16) = 0;
  *(_QWORD *)(v931 + 24) = v930;
  *(_QWORD *)(v931 + 32) = &off_1E42B5748;
  *(_QWORD *)(v931 + 40) = 8;
  *(_DWORD *)(v931 + 48) = 6;
  v932 = 0uLL;
  *(_OWORD *)(v931 + 56) = 0u;
  *(_OWORD *)(v931 + 72) = 0u;
  *(_OWORD *)(v931 + 88) = 0u;
  *(_OWORD *)(v931 + 104) = 0u;
  *(_QWORD *)(v931 + 120) = 0;
  if ((v933 & 1) == 0)
  {
    v932 = 0uLL;
    if (v1217)
    {
      v1218 = operator new();
      *(_QWORD *)(v1218 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v1218 + 24) = "GeoGL";
      *(_OWORD *)(v1218 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v1218 = &off_1E42B5668;
      *(_QWORD *)(v1218 + 8) = "GeoGL";
      *(_OWORD *)(v1218 + 72) = 0u;
      *(_OWORD *)(v1218 + 88) = 0u;
      *(_OWORD *)(v1218 + 104) = 0u;
      *(_OWORD *)(v1218 + 120) = 0u;
      *(_OWORD *)(v1218 + 136) = 0u;
      *(_OWORD *)(v1218 + 152) = 0u;
      *(_OWORD *)(v1218 + 168) = 0u;
      *(_OWORD *)(v1218 + 184) = 0u;
      *(_OWORD *)(v1218 + 200) = 0u;
      *(_OWORD *)(v1218 + 216) = 0u;
      *(_OWORD *)(v1218 + 232) = 0u;
      *(_QWORD *)(v1218 + 248) = 0;
      *(_OWORD *)(v1218 + 56) = 0u;
      v1219 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1218 + 56), 0);
      if ((_DWORD)v1219)
        geo::read_write_lock::logFailure(v1219, (uint64_t)"initialization", v1220);
      v1221 = malloc_create_zone(0, 0);
      *(_QWORD *)(v1218 + 48) = v1221;
      malloc_set_zone_name(v1221, "GeoGL");
      *(_QWORD *)(v1218 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v1218;
      v932 = 0uLL;
    }
  }
  *(_QWORD *)(v931 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v931 + 136) = 0;
  *(_OWORD *)(v931 + 200) = v932;
  *(_OWORD *)(v931 + 184) = v932;
  *(_OWORD *)(v931 + 168) = v932;
  *(_QWORD *)(v931 + 216) = 0;
  *(_QWORD *)(v931 + 224) = -1;
  *(_OWORD *)(v931 + 152) = xmmword_19FFB2DD0;
  *(_DWORD *)(v931 + 144) = 0;
  *(_QWORD *)(v931 + 32) = &off_1E4274708;
  *(_QWORD *)(v931 + 240) = "QuadGrid";
  *(_QWORD *)(v931 + 248) = &ggl::FlyoverCommon::polarVertexReflection;
  *(_QWORD *)(v931 + 232) = &unk_1E4274728;
  v934 = *(_QWORD **)v1232;
  v935 = *(std::__shared_weak_count **)(*(_QWORD *)v1232 + 8);
  *v934 = v931 + 32;
  v934[1] = v931;
  if (v935)
  {
    v936 = (unint64_t *)&v935->__shared_owners_;
    do
      v937 = __ldaxr(v936);
    while (__stlxr(v937 - 1, v936));
    if (!v937)
    {
      ((void (*)(std::__shared_weak_count *))v935->__on_zero_shared)(v935);
      std::__shared_weak_count::__release_weak(v935);
    }
  }
  do
    v938 = __ldxr(v894);
  while (__stxr(v938 + 1, v894));
  do
    v939 = __ldxr(v894);
  while (__stxr(v939 + 1, v894));
  v940 = *(std::__shared_weak_count **)(v915 + 104);
  *(_QWORD *)(v915 + 96) = v893 + 1;
  *(_QWORD *)(v915 + 104) = v893;
  if (v940)
  {
    v941 = (unint64_t *)&v940->__shared_owners_;
    do
      v942 = __ldaxr(v941);
    while (__stlxr(v942 - 1, v941));
    if (!v942)
    {
      ((void (*)(std::__shared_weak_count *))v940->__on_zero_shared)(v940);
      std::__shared_weak_count::__release_weak(v940);
    }
  }
  do
    v943 = __ldaxr(v894);
  while (__stlxr(v943 - 1, v894));
  if (!v943)
  {
    ((void (*)(std::__shared_weak_count *))v893->__on_zero_shared)(v893);
    std::__shared_weak_count::__release_weak(v893);
  }
  v944 = **(_QWORD **)v1232;
  v945 = *(_QWORD *)(v944 + 8);
  v946 = 144 * v945;
  v947 = *(_QWORD *)(v944 + 72);
  v948 = *(_QWORD *)(v944 + 80) - v947;
  if (144 * v945 != v948)
  {
    if (144 * v945 <= v948)
    {
      if (v946 < v948)
        *(_QWORD *)(v944 + 80) = v947 + v946;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v944 + 72, 144 * v945 - v948);
    }
    v949 = *(std::__shared_weak_count **)(v944 + 32);
    *(_QWORD *)(v944 + 24) = 0;
    *(_QWORD *)(v944 + 32) = 0;
    if (v949)
    {
      v950 = (unint64_t *)&v949->__shared_owners_;
      do
        v951 = __ldaxr(v950);
      while (__stlxr(v951 - 1, v950));
      if (!v951)
      {
        ((void (*)(std::__shared_weak_count *))v949->__on_zero_shared)(v949);
        std::__shared_weak_count::__release_weak(v949);
      }
    }
    *(_QWORD *)(v944 + 120) = 0;
    *(_DWORD *)(v944 + 112) = 0;
    v952 = *(_QWORD *)(v944 + 80) - *(_QWORD *)(v944 + 72);
    *(_QWORD *)(v944 + 40) = 0;
    *(_QWORD *)(v944 + 48) = v952;
    *(_QWORD *)(v944 + 56) = 0;
    *(_QWORD *)(v944 + 64) = v952;
    v944 = **(_QWORD **)v1232;
    v945 = *(_QWORD *)(v944 + 8);
  }
  v953 = 4 * v945;
  if (v953)
    v954 = *(_QWORD *)(v944 + 72);
  else
    v954 = 0;
  v955 = 0;
  v956 = v954 + 48;
  do
  {
    v957 = (float)v955 * 0.090909;
    *(_DWORD *)(v956 - 48) = 0;
    *(float *)(v956 - 44) = v957;
    *(_DWORD *)(v956 - 40) = 1035611788;
    *(float *)(v956 - 36) = v957;
    *(_DWORD *)(v956 - 32) = 1044000396;
    *(float *)(v956 - 28) = v957;
    *(_DWORD *)(v956 - 24) = 1049338601;
    *(float *)(v956 - 20) = v957;
    *(_DWORD *)(v956 - 16) = 1052389004;
    *(float *)(v956 - 12) = v957;
    *(_DWORD *)(v956 - 8) = 1055439407;
    *(float *)(v956 - 4) = v957;
    *(_DWORD *)v956 = 1057727209;
    *(float *)(v956 + 4) = v957;
    *(_DWORD *)(v956 + 8) = 1059252410;
    *(float *)(v956 + 12) = v957;
    *(_DWORD *)(v956 + 16) = 1060777612;
    *(float *)(v956 + 20) = v957;
    *(_DWORD *)(v956 + 24) = 1062302814;
    *(float *)(v956 + 28) = v957;
    *(_DWORD *)(v956 + 32) = 1063828015;
    *(float *)(v956 + 36) = v957;
    *(_DWORD *)(v956 + 40) = 1065353216;
    *(float *)(v956 + 44) = v957;
    ++v955;
    v956 += 96;
  }
  while (v955 != 12);
  if (v954 && v953)
  {
    if (*(_QWORD *)(v944 + 64) > v953)
      v953 = *(_QWORD *)(v944 + 64);
    *(_QWORD *)(v944 + 56) = 0;
    *(_QWORD *)(v944 + 64) = v953;
  }
  if (v1224)
  {
    shared_weak_owners = v893[3].__shared_weak_owners_;
    if (shared_weak_owners <= 0x5AC)
      shared_weak_owners = 1452;
    v893[3].__shared_owners_ = 0;
    v893[3].__shared_weak_owners_ = shared_weak_owners;
  }
  do
    v959 = __ldaxr(v894);
  while (__stlxr(v959 - 1, v894));
  if (!v959)
  {
    ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t, uint64_t, uint64_t))v893->__on_zero_shared)(v893, 1060777612, 1062302814, 1063828015, 1065353216);
    std::__shared_weak_count::__release_weak(v893);
  }
  v960 = (std::__shared_weak_count *)operator new();
  v960->__shared_owners_ = 0;
  v961 = (unint64_t *)&v960->__shared_owners_;
  v960->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A648;
  v960->__shared_weak_owners_ = 0;
  v960[1].__vftable = (std::__shared_weak_count_vtbl *)v915;
  v962 = operator new();
  v963 = *(_QWORD **)(v915 + 96);
  v964 = v963[6] - v963[5];
  v965 = v963[1];
  *(_QWORD *)v962 = v915;
  *(_QWORD *)(v962 + 8) = v960;
  v966 = v964 / v965;
  do
    v967 = __ldxr(v961);
  while (__stxr(v967 + 1, v961));
  *(_QWORD *)(v962 + 16) = 0;
  *(_QWORD *)(v962 + 24) = v966;
  *(_BYTE *)(v962 + 32) = 3;
  *(_QWORD *)(v962 + 52) = 0x3F8000003F800000;
  *(_OWORD *)(v962 + 36) = xmmword_1A001A160;
  *(_WORD *)(v962 + 60) = 0;
  *(_QWORD *)(v962 + 64) = 0;
  *(_QWORD *)(v962 + 72) = 0;
  std::shared_ptr<md::Mesh>::reset[abi:nn180100]<md::Mesh,void>((_QWORD *)(v889 + 816), v962);
  do
    v968 = __ldaxr(v961);
  while (__stlxr(v968 - 1, v961));
  if (!v968)
  {
    ((void (*)(std::__shared_weak_count *))v960->__on_zero_shared)(v960);
    std::__shared_weak_count::__release_weak(v960);
  }

  v969 = operator new();
  *(_DWORD *)(v969 + 16) = 2147483646;
  *(_BYTE *)(v969 + 20) = 0;
  *(_QWORD *)v969 = &off_1E429F4B8;
  *(_QWORD *)(v969 + 8) = 0;
  *(_DWORD *)(v969 + 22) = 3407951;
  *(_BYTE *)(v969 + 28) = 0;
  *(_DWORD *)(v969 + 40) = 25;
  *(_BYTE *)(v969 + 36) = 1;
  v1242 = v969;
  v1243 = (gdc::LayerDataStore *)v889;
  md::World::addMapLayerDataSource(v1239, 79, (uint64_t *)&v1243, &v1242, (gdc::LayerDataStore **)buf);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v970 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v970);
  v971 = operator new();
  v972 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v973 = v1229;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v971, 54, 38, v970, v972, v1236, 0, 0);
  *(_QWORD *)v971 = &off_1E42A5878;
  *(_QWORD *)(v971 + 752) = &off_1E42B4D50;
  *(_QWORD *)(v971 + 760) = v973;
  *(_OWORD *)(v971 + 776) = 0u;
  *(_OWORD *)(v971 + 792) = 0u;
  v974 = operator new();
  *(_DWORD *)(v974 + 16) = 2147483645;
  *(_BYTE *)(v974 + 20) = 0;
  *(_QWORD *)v974 = &off_1E42A7D58;
  *(_QWORD *)(v974 + 8) = 0;
  *(_DWORD *)(v974 + 22) = 2490422;
  *(_BYTE *)(v974 + 28) = 0;
  *(_DWORD *)(v974 + 40) = 25;
  *(_BYTE *)(v974 + 36) = 1;
  *(_BYTE *)(v974 + 46) = 1;
  *(_WORD *)(v974 + 44) = 4367;
  v1242 = v974;
  v1243 = (gdc::LayerDataStore *)v971;
  md::World::addMapLayerDataSource(v1239, 54, (uint64_t *)&v1243, &v1242, (gdc::LayerDataStore **)buf);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v975 = (gdc::LayerDataStore *)operator new();
  v1243 = gdc::LayerDataStore::LayerDataStore(v975);
  v976 = operator new();
  v977 = *(_QWORD *)(v1240 + 304);
  v978 = v973;
  v979 = operator new();
  *(_QWORD *)v979 = &off_1E42B46F8;
  *(_QWORD *)(v979 + 8) = 0xBFF0000000000000;
  *(_QWORD *)(v979 + 16) = 850045863;
  *(_OWORD *)(v979 + 24) = 0u;
  *(_OWORD *)(v979 + 40) = 0u;
  *(_OWORD *)(v979 + 56) = 0u;
  *(_OWORD *)(v979 + 72) = 0u;
  *(_OWORD *)(v979 + 81) = 0u;
  *(_QWORD *)(v979 + 80) = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, MEMORY[0x1E0C80D38]);
  *(_QWORD *)v976 = off_1E42B0758;
  *(_QWORD *)(v976 + 8) = v1236;
  *(_QWORD *)(v976 + 16) = v975;
  *(_QWORD *)(v976 + 24) = 0;
  *(_WORD *)(v976 + 32) = 75;
  *(_OWORD *)(v976 + 40) = 0u;
  *(_OWORD *)(v976 + 56) = 0u;
  *(_DWORD *)(v976 + 72) = 1065353216;
  *(_OWORD *)(v976 + 80) = 0u;
  *(_OWORD *)(v976 + 96) = 0u;
  *(_DWORD *)(v976 + 112) = 1065353216;
  *(_OWORD *)(v976 + 120) = 0u;
  *(_OWORD *)(v976 + 136) = 0u;
  *(_DWORD *)(v976 + 152) = 1065353216;
  *(_OWORD *)(v976 + 160) = 0u;
  *(_OWORD *)(v976 + 176) = 0u;
  *(_DWORD *)(v976 + 192) = 1065353216;
  *(_OWORD *)(v976 + 200) = 0u;
  *(_OWORD *)(v976 + 216) = 0u;
  *(_OWORD *)(v976 + 232) = 0u;
  *(_OWORD *)(v976 + 248) = 0u;
  *(_QWORD *)(v976 + 264) = 0;
  *(_QWORD *)(v976 + 272) = v977;
  *(_QWORD *)(v976 + 288) = 0;
  *(_BYTE *)(v976 + 296) = 0;
  *(_QWORD *)(v976 + 304) = 850045863;
  *(_OWORD *)(v976 + 312) = 0u;
  *(_OWORD *)(v976 + 328) = 0u;
  *(_OWORD *)(v976 + 344) = 0u;
  *(_QWORD *)(v976 + 360) = 0;
  *(_QWORD *)(v976 + 368) = v979;
  *(_QWORD *)(v976 + 376) = 850045863;
  *(_OWORD *)(v976 + 384) = 0u;
  *(_OWORD *)(v976 + 400) = 0u;
  *(_OWORD *)(v976 + 416) = 0u;
  *(_QWORD *)(v976 + 432) = 0;
  *(_QWORD *)(v976 + 464) = 0;
  *(_QWORD *)(v976 + 480) = 850045863;
  *(_OWORD *)(v976 + 488) = 0u;
  *(_OWORD *)(v976 + 504) = 0u;
  *(_OWORD *)(v976 + 520) = 0u;
  *(_OWORD *)(v976 + 536) = 0u;
  *(_OWORD *)(v976 + 552) = 0u;
  *(_OWORD *)(v976 + 568) = 0u;
  *(_QWORD *)buf = &off_1E42D5848;
  *(_QWORD *)&buf[8] = v976;
  v1336 = buf;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v979 + 16))(v979, buf);
  v980 = v1336;
  if (v1336 == buf)
  {
    v981 = 4;
    v980 = buf;
  }
  else
  {
    if (!v1336)
      goto LABEL_1304;
    v981 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v980 + 8 * v981))();
LABEL_1304:
  *(_QWORD *)v976 = &off_1E429CC68;
  *(_QWORD *)(v976 + 584) = &off_1E42B4D50;
  *(_QWORD *)(v976 + 592) = v978;
  *(_OWORD *)(v976 + 608) = 0u;
  *(_DWORD *)(v976 + 624) = 0;
  *(_QWORD *)(v976 + 632) = 150;
  *(_OWORD *)(v976 + 640) = 0u;
  *(_OWORD *)(v976 + 656) = 0u;
  *(_DWORD *)(v976 + 672) = 1065353216;
  *(_QWORD *)(v976 + 680) = v976 + 680;
  *(_QWORD *)(v976 + 688) = v976 + 680;
  *(_QWORD *)(v976 + 696) = 0;
  v982 = operator new();
  *(_DWORD *)(v982 + 16) = 2147483646;
  *(_BYTE *)(v982 + 20) = 0;
  *(_DWORD *)(v982 + 22) = 3145803;
  *(_DWORD *)(v982 + 32) = 1;
  *(_BYTE *)(v982 + 28) = 1;
  *(_DWORD *)(v982 + 40) = 25;
  *(_BYTE *)(v982 + 36) = 1;
  *(_BYTE *)(v982 + 44) = 0;
  *(_BYTE *)(v982 + 46) = 0;
  *(_QWORD *)v982 = &off_1E42A0888;
  *(_QWORD *)(v982 + 8) = 0;
  *(_OWORD *)(v982 + 48) = 0u;
  *(_OWORD *)(v982 + 64) = 0u;
  *(_DWORD *)(v982 + 80) = 1065353216;
  *(_OWORD *)(v982 + 88) = 0u;
  *(_OWORD *)(v982 + 104) = 0u;
  *(_QWORD *)(v982 + 120) = v976;
  v983 = (_QWORD *)operator new();
  v984 = *(_QWORD *)(v982 + 8);
  *v983 = &off_1E42A3158;
  v983[1] = v984;
  v985 = *(_QWORD *)(v982 + 112);
  *(_QWORD *)(v982 + 112) = v983;
  if (v985)
    (*(void (**)(uint64_t))(*(_QWORD *)v985 + 8))(v985);
  *(_QWORD *)buf = v976;
  v1242 = v982;
  md::World::addMapLayerDataSource(v1239, 75, (uint64_t *)buf, &v1242, &v1243);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
  if (v1243)
  {
    gdc::LayerDataStore::~LayerDataStore(v1243);
    MEMORY[0x1A1AF4E00]();
  }
  v986 = (gdc::LayerDataStore *)operator new();
  v1243 = gdc::LayerDataStore::LayerDataStore(v986);
  v987 = operator new();
  v988 = *(_QWORD *)(v1240 + 304);
  v989 = v978;
  v990 = operator new();
  *(_QWORD *)v990 = &off_1E42B46F8;
  *(_QWORD *)(v990 + 8) = 0xBFF0000000000000;
  *(_QWORD *)(v990 + 16) = 850045863;
  *(_OWORD *)(v990 + 24) = 0u;
  *(_OWORD *)(v990 + 40) = 0u;
  *(_OWORD *)(v990 + 56) = 0u;
  *(_OWORD *)(v990 + 72) = 0u;
  *(_OWORD *)(v990 + 81) = 0u;
  *(_QWORD *)(v990 + 80) = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, MEMORY[0x1E0C80D38]);
  *(_QWORD *)v987 = off_1E42B0758;
  *(_QWORD *)(v987 + 8) = v1236;
  *(_QWORD *)(v987 + 16) = v986;
  *(_QWORD *)(v987 + 24) = 0;
  *(_WORD *)(v987 + 32) = 76;
  *(_OWORD *)(v987 + 40) = 0u;
  *(_OWORD *)(v987 + 56) = 0u;
  *(_DWORD *)(v987 + 72) = 1065353216;
  *(_OWORD *)(v987 + 80) = 0u;
  *(_OWORD *)(v987 + 96) = 0u;
  *(_DWORD *)(v987 + 112) = 1065353216;
  *(_OWORD *)(v987 + 120) = 0u;
  *(_OWORD *)(v987 + 136) = 0u;
  *(_DWORD *)(v987 + 152) = 1065353216;
  *(_OWORD *)(v987 + 160) = 0u;
  *(_OWORD *)(v987 + 176) = 0u;
  *(_DWORD *)(v987 + 192) = 1065353216;
  *(_OWORD *)(v987 + 200) = 0u;
  *(_OWORD *)(v987 + 216) = 0u;
  *(_OWORD *)(v987 + 232) = 0u;
  *(_OWORD *)(v987 + 248) = 0u;
  *(_QWORD *)(v987 + 264) = 0;
  *(_QWORD *)(v987 + 272) = v988;
  *(_QWORD *)(v987 + 288) = 0;
  *(_BYTE *)(v987 + 296) = 0;
  *(_QWORD *)(v987 + 304) = 850045863;
  *(_OWORD *)(v987 + 312) = 0u;
  *(_OWORD *)(v987 + 328) = 0u;
  *(_OWORD *)(v987 + 344) = 0u;
  *(_QWORD *)(v987 + 360) = 0;
  *(_QWORD *)(v987 + 368) = v990;
  *(_QWORD *)(v987 + 376) = 850045863;
  *(_OWORD *)(v987 + 384) = 0u;
  *(_OWORD *)(v987 + 400) = 0u;
  *(_OWORD *)(v987 + 416) = 0u;
  *(_QWORD *)(v987 + 432) = 0;
  *(_QWORD *)(v987 + 464) = 0;
  *(_QWORD *)(v987 + 480) = 850045863;
  *(_OWORD *)(v987 + 488) = 0u;
  *(_OWORD *)(v987 + 504) = 0u;
  *(_OWORD *)(v987 + 520) = 0u;
  *(_OWORD *)(v987 + 536) = 0u;
  *(_OWORD *)(v987 + 552) = 0u;
  *(_OWORD *)(v987 + 568) = 0u;
  *(_QWORD *)buf = &off_1E42D5848;
  *(_QWORD *)&buf[8] = v987;
  v1336 = buf;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v990 + 16))(v990, buf);
  v991 = v1336;
  if (v1336 == buf)
  {
    v992 = 4;
    v991 = buf;
  }
  else
  {
    if (!v1336)
      goto LABEL_1317;
    v992 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v991 + 8 * v992))();
LABEL_1317:
  *(_QWORD *)v987 = &off_1E42A3190;
  *(_QWORD *)(v987 + 584) = &off_1E42B4D50;
  *(_QWORD *)(v987 + 592) = v989;
  v993 = operator new();
  *(_DWORD *)(v993 + 16) = 2147483646;
  *(_BYTE *)(v993 + 20) = 0;
  *(_QWORD *)v993 = &off_1E42A0790;
  *(_QWORD *)(v993 + 8) = 0;
  v994 = v1239[43];
  *(_QWORD *)(v993 + 24) = v1239[42];
  *(_QWORD *)(v993 + 32) = v994;
  if (v994)
  {
    v995 = (unint64_t *)((char *)v994 + 8);
    do
      v996 = __ldxr(v995);
    while (__stxr(v996 + 1, v995));
  }
  *(_QWORD *)buf = v987;
  v1242 = v993;
  md::World::addMapLayerDataSource(v1239, 76, (uint64_t *)buf, &v1242, &v1243);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
  if (v1243)
  {
    gdc::LayerDataStore::~LayerDataStore(v1243);
    MEMORY[0x1A1AF4E00]();
  }
  v997 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v997);
  v998 = (md::SingleGEOResourceLayerDataSource *)operator new();
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource(v998, 77, 50, v997, *(gdc::ResourceStatusContainer **)(v1240 + 304), v1236, 0, 0);
  *(_QWORD *)v998 = &off_1E42A1E40;
  v999 = v1239[45];
  *((_QWORD *)v998 + 94) = v1239[44];
  *((_QWORD *)v998 + 95) = v999;
  if (v999)
  {
    v1000 = (unint64_t *)((char *)v999 + 8);
    do
      v1001 = __ldxr(v1000);
    while (__stxr(v1001 + 1, v1000));
  }
  *((_QWORD *)v998 + 96) = 0;
  v1002 = operator new();
  *(_DWORD *)(v1002 + 16) = 2147483646;
  *(_BYTE *)(v1002 + 20) = 0;
  *(_DWORD *)(v1002 + 22) = 3276877;
  *(_DWORD *)(v1002 + 32) = 7;
  *(_BYTE *)(v1002 + 28) = 1;
  *(_DWORD *)(v1002 + 40) = 25;
  *(_BYTE *)(v1002 + 36) = 1;
  *(_BYTE *)(v1002 + 44) = 0;
  *(_BYTE *)(v1002 + 46) = 0;
  *(_QWORD *)v1002 = &off_1E429E760;
  *(_QWORD *)(v1002 + 8) = 0;
  *(_QWORD *)(v1002 + 48) = 0;
  v1242 = v1002;
  v1243 = v998;
  md::World::addMapLayerDataSource(v1239, 77, (uint64_t *)&v1243, &v1242, (gdc::LayerDataStore **)buf);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v1003 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v1003);
  v1004 = operator new();
  v1005 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v1006 = v989;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v1004, 60, 38, v1003, v1005, v1236, 0, 0);
  *(_QWORD *)v1004 = &off_1E42A1938;
  *(_QWORD *)(v1004 + 752) = &off_1E42B4D50;
  *(_QWORD *)(v1004 + 760) = v1006;
  *(_OWORD *)(v1004 + 776) = 0u;
  *(_OWORD *)(v1004 + 792) = 0u;
  v1007 = operator new();
  *(_DWORD *)(v1007 + 16) = 2147483645;
  *(_BYTE *)(v1007 + 20) = 0;
  *(_QWORD *)v1007 = &off_1E42A7D58;
  *(_QWORD *)(v1007 + 8) = 0;
  *(_DWORD *)(v1007 + 22) = 2490428;
  *(_BYTE *)(v1007 + 28) = 0;
  *(_DWORD *)(v1007 + 40) = 25;
  *(_BYTE *)(v1007 + 36) = 1;
  *(_BYTE *)(v1007 + 46) = 1;
  *(_WORD *)(v1007 + 44) = 4367;
  v1242 = v1007;
  v1243 = (gdc::LayerDataStore *)v1004;
  md::World::addMapLayerDataSource(v1239, 60, (uint64_t *)&v1243, &v1242, (gdc::LayerDataStore **)buf);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v1008 = (gdc::LayerDataStore *)operator new();
  v1243 = gdc::LayerDataStore::LayerDataStore(v1008);
  v1009 = operator new();
  v1010 = *(_QWORD *)(v1240 + 304);
  v1011 = operator new();
  *(_QWORD *)v1011 = &off_1E42B46F8;
  *(_QWORD *)(v1011 + 8) = 0xBFF0000000000000;
  *(_QWORD *)(v1011 + 16) = 850045863;
  *(_OWORD *)(v1011 + 24) = 0u;
  *(_OWORD *)(v1011 + 40) = 0u;
  *(_OWORD *)(v1011 + 56) = 0u;
  *(_OWORD *)(v1011 + 72) = 0u;
  *(_OWORD *)(v1011 + 81) = 0u;
  *(_QWORD *)(v1011 + 80) = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, MEMORY[0x1E0C80D38]);
  *(_QWORD *)v1009 = off_1E42B0758;
  *(_QWORD *)(v1009 + 8) = v1236;
  *(_QWORD *)(v1009 + 16) = v1008;
  *(_QWORD *)(v1009 + 24) = 0;
  *(_WORD *)(v1009 + 32) = 61;
  *(_OWORD *)(v1009 + 40) = 0u;
  *(_OWORD *)(v1009 + 56) = 0u;
  *(_DWORD *)(v1009 + 72) = 1065353216;
  *(_OWORD *)(v1009 + 80) = 0u;
  *(_OWORD *)(v1009 + 96) = 0u;
  *(_DWORD *)(v1009 + 112) = 1065353216;
  *(_OWORD *)(v1009 + 120) = 0u;
  *(_OWORD *)(v1009 + 136) = 0u;
  *(_DWORD *)(v1009 + 152) = 1065353216;
  *(_OWORD *)(v1009 + 160) = 0u;
  *(_OWORD *)(v1009 + 176) = 0u;
  *(_DWORD *)(v1009 + 192) = 1065353216;
  *(_OWORD *)(v1009 + 200) = 0u;
  *(_OWORD *)(v1009 + 216) = 0u;
  *(_OWORD *)(v1009 + 232) = 0u;
  *(_OWORD *)(v1009 + 248) = 0u;
  *(_QWORD *)(v1009 + 264) = 0;
  *(_QWORD *)(v1009 + 272) = v1010;
  *(_QWORD *)(v1009 + 288) = 0;
  *(_BYTE *)(v1009 + 296) = 0;
  *(_QWORD *)(v1009 + 304) = 850045863;
  *(_OWORD *)(v1009 + 312) = 0u;
  *(_OWORD *)(v1009 + 328) = 0u;
  *(_OWORD *)(v1009 + 344) = 0u;
  *(_QWORD *)(v1009 + 360) = 0;
  *(_QWORD *)(v1009 + 368) = v1011;
  *(_QWORD *)(v1009 + 376) = 850045863;
  *(_OWORD *)(v1009 + 384) = 0u;
  *(_OWORD *)(v1009 + 400) = 0u;
  *(_OWORD *)(v1009 + 416) = 0u;
  *(_QWORD *)(v1009 + 432) = 0;
  *(_QWORD *)(v1009 + 464) = 0;
  *(_QWORD *)(v1009 + 480) = 850045863;
  *(_OWORD *)(v1009 + 488) = 0u;
  *(_OWORD *)(v1009 + 504) = 0u;
  *(_OWORD *)(v1009 + 520) = 0u;
  *(_OWORD *)(v1009 + 536) = 0u;
  *(_OWORD *)(v1009 + 552) = 0u;
  *(_OWORD *)(v1009 + 568) = 0u;
  *(_QWORD *)buf = &off_1E42D5848;
  *(_QWORD *)&buf[8] = v1009;
  v1336 = buf;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v1011 + 16))(v1011, buf);
  v1012 = v1336;
  if (v1336 == buf)
  {
    v1013 = 4;
    v1012 = buf;
  }
  else
  {
    if (!v1336)
      goto LABEL_1346;
    v1013 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v1012 + 8 * v1013))();
LABEL_1346:
  *(_QWORD *)v1009 = &off_1E42AA868;
  v1014 = operator new();
  *(_DWORD *)(v1014 + 16) = 2147483646;
  *(_BYTE *)(v1014 + 20) = 0;
  *(_QWORD *)v1014 = &off_1E42A1C40;
  *(_QWORD *)(v1014 + 8) = 0;
  *(_QWORD *)buf = v1009;
  v1242 = v1014;
  md::World::addMapLayerDataSource(v1239, 61, (uint64_t *)buf, &v1242, &v1243);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
  if (v1243)
  {
    gdc::LayerDataStore::~LayerDataStore(v1243);
    MEMORY[0x1A1AF4E00]();
  }
  v1015 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v1015);
  v1016 = (md::SingleGEOResourceLayerDataSource *)operator new();
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource(v1016, 51, 29, v1015, *(gdc::ResourceStatusContainer **)(v1240 + 304), v1236, 0, 0);
  *(_QWORD *)v1016 = &off_1E42A30B0;
  v1017 = operator new();
  *(_DWORD *)(v1017 + 16) = -1073741827;
  *(_BYTE *)(v1017 + 20) = 0;
  *(_QWORD *)v1017 = &off_1E42A7D58;
  *(_QWORD *)(v1017 + 8) = 0;
  *(_DWORD *)(v1017 + 22) = 1900595;
  *(_BYTE *)(v1017 + 28) = 0;
  *(_DWORD *)(v1017 + 40) = 25;
  *(_BYTE *)(v1017 + 36) = 1;
  *(_BYTE *)(v1017 + 44) = 0;
  *(_BYTE *)(v1017 + 46) = 0;
  v1242 = v1017;
  v1243 = v1016;
  md::World::addMapLayerDataSource(v1239, 51, (uint64_t *)&v1243, &v1242, (gdc::LayerDataStore **)buf);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v1018 = 0;
  *(_QWORD *)buf = 0x45001800160015;
  strcpy((char *)&buf[8], "J");
  do
  {
    v1019 = *(unsigned __int16 *)&buf[v1018];
    v1020 = (gdc::LayerDataStore *)operator new();
    v1243 = gdc::LayerDataStore::LayerDataStore(v1020);
    v1021 = operator new();
    v1022 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
    v1023 = v1006;
    v1024 = mapDataTypeToLabelResourceType(v1019);
    md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v1021, v1019, v1024, v1020, v1022, v1238, 1, 0);
    *(_QWORD *)v1021 = &off_1E42990B0;
    *(_QWORD *)(v1021 + 752) = &off_1E42B4D50;
    *(_QWORD *)(v1021 + 760) = v1023;
    *(_QWORD *)(v1021 + 800) = 0;
    *(_QWORD *)(v1021 + 816) = 0;
    *(_QWORD *)(v1021 + 808) = 0;
    v1025 = operator new();
    v1026 = *(_WORD *)(v1021 + 584);
    v1027 = -1073741827;
    switch(v1019)
    {
      case 1:
      case 2:
      case 4:
      case 5:
      case 33:
      case 44:
      case 45:
      case 46:
      case 50:
      case 57:
      case 59:
      case 65:
      case 67:
        break;
      case 6:
      case 14:
      case 54:
      case 60:
        v1027 = 2147483645;
        break;
      case 16:
      case 20:
      case 24:
      case 48:
      case 68:
      case 69:
      case 74:
        v1027 = -1073741828;
        break;
      default:
        v1027 = 2147483646;
        break;
    }
    v1028 = 1;
    v1029 = 10;
    switch(v1019)
    {
      case 3:
      case 52:
      case 53:
      case 77:
        v1029 = 7;
        goto LABEL_1368;
      case 6:
        goto LABEL_1368;
      case 14:
        v1029 = 13;
        goto LABEL_1368;
      case 45:
      case 75:
        v1029 = 1;
        goto LABEL_1368;
      case 69:
        v1029 = 12;
LABEL_1368:
        v1028 = 0;
        LODWORD(v989) = v1029;
        break;
      default:
        break;
    }
    *(_DWORD *)(v1025 + 16) = v1027;
    *(_BYTE *)(v1025 + 20) = 0;
    *(_QWORD *)v1025 = &off_1E42A7D58;
    *(_QWORD *)(v1025 + 8) = 0;
    *(_WORD *)(v1025 + 22) = v1019;
    *(_WORD *)(v1025 + 24) = v1026;
    *(_BYTE *)(v1025 + 28) = 0;
    if ((v1028 & 1) == 0)
    {
      *(_DWORD *)(v1025 + 32) = (_DWORD)v989;
      *(_BYTE *)(v1025 + 28) = 1;
    }
    *(_DWORD *)(v1025 + 40) = 25;
    *(_BYTE *)(v1025 + 36) = 1;
    *(_BYTE *)(v1025 + 44) = 0;
    *(_BYTE *)(v1025 + 46) = 0;
    v1241 = v1025;
    v1242 = v1021;
    md::World::addMapLayerDataSource(v1239, v1019, &v1242, &v1241, &v1243);
    if (v1241)
      (*(void (**)(uint64_t))(*(_QWORD *)v1241 + 8))(v1241);
    if (v1242)
      (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
    if (v1243)
    {
      gdc::LayerDataStore::~LayerDataStore(v1243);
      MEMORY[0x1A1AF4E00]();
    }
    v1018 += 2;
  }
  while (v1018 != 10);
  strcpy((char *)buf, "J");
  v1031 = v1239[24];
  v1030 = v1239[25];
  if (v1031 != v1030)
  {
    while (*(unsigned __int16 *)v1031 <= 0x49u)
    {
      v1031 = (gdc::LayerDataStore *)((char *)v1031 + 2);
      if (v1031 == v1030)
        goto LABEL_1384;
    }
  }
  if (v1031 == v1030 || (v1030 = v1031, *(_WORD *)v1031 != 74))
LABEL_1384:
    std::vector<md::MapDataType>::insert((void **)v1239 + 24, v1030, (char *)buf);
  v1032 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v1032);
  v1033 = operator new();
  v1034 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v1035 = v1023;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v1033, 23, 39, v1032, v1034, v1238, 1, 0);
  *(_QWORD *)v1033 = &off_1E42990B0;
  *(_QWORD *)(v1033 + 752) = &off_1E42B4D50;
  *(_QWORD *)(v1033 + 760) = v1035;
  *(_QWORD *)(v1033 + 800) = 0;
  *(_QWORD *)(v1033 + 816) = 0;
  *(_QWORD *)(v1033 + 808) = 0;
  v1036 = operator new();
  v1037 = *(_WORD *)(v1033 + 584);
  *(_DWORD *)(v1036 + 16) = 2147483646;
  *(_BYTE *)(v1036 + 20) = 0;
  *(_QWORD *)v1036 = &off_1E429F4B8;
  *(_QWORD *)(v1036 + 8) = 0;
  *(_WORD *)(v1036 + 22) = 23;
  *(_WORD *)(v1036 + 24) = v1037;
  *(_BYTE *)(v1036 + 28) = 0;
  *(_DWORD *)(v1036 + 40) = 25;
  *(_BYTE *)(v1036 + 36) = 1;
  v1242 = v1036;
  v1243 = (gdc::LayerDataStore *)v1033;
  md::World::addMapLayerDataSource(v1239, 23, (uint64_t *)&v1243, &v1242, (gdc::LayerDataStore **)buf);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v1038 = (gdc::LayerDataStore *)operator new();
  v1243 = gdc::LayerDataStore::LayerDataStore(v1038);
  v1039 = operator new();
  v1040 = *(_QWORD *)(v1240 + 304);
  v1041 = v1035;
  v1042 = operator new();
  *(_QWORD *)v1042 = &off_1E42B46F8;
  *(_QWORD *)(v1042 + 8) = 0xBFF0000000000000;
  *(_QWORD *)(v1042 + 16) = 850045863;
  *(_OWORD *)(v1042 + 24) = 0u;
  *(_OWORD *)(v1042 + 40) = 0u;
  *(_OWORD *)(v1042 + 56) = 0u;
  *(_OWORD *)(v1042 + 72) = 0u;
  *(_OWORD *)(v1042 + 81) = 0u;
  *(_QWORD *)(v1042 + 80) = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, MEMORY[0x1E0C80D38]);
  *(_QWORD *)v1039 = off_1E42B0758;
  *(_QWORD *)(v1039 + 8) = v1236;
  *(_QWORD *)(v1039 + 16) = v1038;
  *(_QWORD *)(v1039 + 24) = 0;
  *(_WORD *)(v1039 + 32) = 55;
  *(_OWORD *)(v1039 + 40) = 0u;
  *(_OWORD *)(v1039 + 56) = 0u;
  *(_DWORD *)(v1039 + 72) = 1065353216;
  *(_OWORD *)(v1039 + 80) = 0u;
  *(_OWORD *)(v1039 + 96) = 0u;
  *(_DWORD *)(v1039 + 112) = 1065353216;
  *(_OWORD *)(v1039 + 120) = 0u;
  *(_OWORD *)(v1039 + 136) = 0u;
  *(_DWORD *)(v1039 + 152) = 1065353216;
  *(_OWORD *)(v1039 + 160) = 0u;
  *(_OWORD *)(v1039 + 176) = 0u;
  *(_DWORD *)(v1039 + 192) = 1065353216;
  *(_OWORD *)(v1039 + 200) = 0u;
  *(_OWORD *)(v1039 + 216) = 0u;
  *(_OWORD *)(v1039 + 232) = 0u;
  *(_OWORD *)(v1039 + 248) = 0u;
  *(_QWORD *)(v1039 + 264) = 0;
  *(_QWORD *)(v1039 + 272) = v1040;
  *(_QWORD *)(v1039 + 288) = 0;
  *(_BYTE *)(v1039 + 296) = 0;
  *(_QWORD *)(v1039 + 304) = 850045863;
  *(_OWORD *)(v1039 + 312) = 0u;
  *(_OWORD *)(v1039 + 328) = 0u;
  *(_OWORD *)(v1039 + 344) = 0u;
  *(_QWORD *)(v1039 + 360) = 0;
  *(_QWORD *)(v1039 + 368) = v1042;
  *(_QWORD *)(v1039 + 376) = 850045863;
  *(_OWORD *)(v1039 + 384) = 0u;
  *(_OWORD *)(v1039 + 400) = 0u;
  *(_OWORD *)(v1039 + 416) = 0u;
  *(_QWORD *)(v1039 + 432) = 0;
  *(_QWORD *)(v1039 + 464) = 0;
  *(_QWORD *)(v1039 + 480) = 850045863;
  *(_OWORD *)(v1039 + 488) = 0u;
  *(_OWORD *)(v1039 + 504) = 0u;
  *(_OWORD *)(v1039 + 520) = 0u;
  *(_OWORD *)(v1039 + 536) = 0u;
  *(_OWORD *)(v1039 + 552) = 0u;
  *(_OWORD *)(v1039 + 568) = 0u;
  *(_QWORD *)buf = &off_1E42D5848;
  *(_QWORD *)&buf[8] = v1039;
  v1336 = buf;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v1042 + 16))(v1042, buf);
  v1043 = v1336;
  if (v1336 == buf)
  {
    v1044 = 4;
    v1043 = buf;
  }
  else
  {
    if (!v1336)
      goto LABEL_1396;
    v1044 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v1043 + 8 * v1044))();
LABEL_1396:
  *(_QWORD *)v1039 = &off_1E42A3B18;
  *(_QWORD *)(v1039 + 584) = &off_1E42B4D50;
  *(_QWORD *)(v1039 + 592) = v1041;
  v1045 = operator new();
  *(_DWORD *)(v1045 + 16) = 2147483646;
  *(_BYTE *)(v1045 + 20) = 0;
  *(_QWORD *)v1045 = &off_1E42A1C40;
  *(_QWORD *)(v1045 + 8) = 0;
  *(_QWORD *)buf = v1039;
  v1242 = v1045;
  md::World::addMapLayerDataSource(v1239, 55, (uint64_t *)buf, &v1242, &v1243);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
  if (v1243)
  {
    gdc::LayerDataStore::~LayerDataStore(v1243);
    MEMORY[0x1A1AF4E00]();
  }
  v1046 = (gdc::LayerDataStore *)operator new();
  v1243 = gdc::LayerDataStore::LayerDataStore(v1046);
  v1047 = operator new();
  v1048 = *(_QWORD *)(v1240 + 304);
  v1049 = operator new();
  *(_QWORD *)v1049 = &off_1E42B46F8;
  *(_QWORD *)(v1049 + 8) = 0xBFF0000000000000;
  *(_QWORD *)(v1049 + 16) = 850045863;
  *(_OWORD *)(v1049 + 24) = 0u;
  *(_OWORD *)(v1049 + 40) = 0u;
  *(_OWORD *)(v1049 + 56) = 0u;
  *(_OWORD *)(v1049 + 72) = 0u;
  *(_OWORD *)(v1049 + 81) = 0u;
  *(_QWORD *)(v1049 + 80) = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, MEMORY[0x1E0C80D38]);
  *(_QWORD *)v1047 = off_1E42B0758;
  *(_QWORD *)(v1047 + 8) = v1236;
  *(_QWORD *)(v1047 + 16) = v1046;
  *(_QWORD *)(v1047 + 24) = 0;
  *(_WORD *)(v1047 + 32) = 56;
  *(_OWORD *)(v1047 + 40) = 0u;
  *(_OWORD *)(v1047 + 56) = 0u;
  *(_DWORD *)(v1047 + 72) = 1065353216;
  *(_OWORD *)(v1047 + 80) = 0u;
  *(_OWORD *)(v1047 + 96) = 0u;
  *(_DWORD *)(v1047 + 112) = 1065353216;
  *(_OWORD *)(v1047 + 120) = 0u;
  *(_OWORD *)(v1047 + 136) = 0u;
  *(_DWORD *)(v1047 + 152) = 1065353216;
  *(_OWORD *)(v1047 + 160) = 0u;
  *(_OWORD *)(v1047 + 176) = 0u;
  *(_DWORD *)(v1047 + 192) = 1065353216;
  *(_OWORD *)(v1047 + 200) = 0u;
  *(_OWORD *)(v1047 + 216) = 0u;
  *(_OWORD *)(v1047 + 232) = 0u;
  *(_OWORD *)(v1047 + 248) = 0u;
  *(_QWORD *)(v1047 + 264) = 0;
  *(_QWORD *)(v1047 + 272) = v1048;
  *(_QWORD *)(v1047 + 288) = 0;
  *(_BYTE *)(v1047 + 296) = 0;
  *(_QWORD *)(v1047 + 304) = 850045863;
  *(_OWORD *)(v1047 + 312) = 0u;
  *(_OWORD *)(v1047 + 328) = 0u;
  *(_OWORD *)(v1047 + 344) = 0u;
  *(_QWORD *)(v1047 + 360) = 0;
  *(_QWORD *)(v1047 + 368) = v1049;
  *(_QWORD *)(v1047 + 376) = 850045863;
  *(_OWORD *)(v1047 + 384) = 0u;
  *(_OWORD *)(v1047 + 400) = 0u;
  *(_OWORD *)(v1047 + 416) = 0u;
  *(_QWORD *)(v1047 + 432) = 0;
  *(_QWORD *)(v1047 + 464) = 0;
  *(_QWORD *)(v1047 + 480) = 850045863;
  *(_OWORD *)(v1047 + 488) = 0u;
  *(_OWORD *)(v1047 + 504) = 0u;
  *(_OWORD *)(v1047 + 520) = 0u;
  *(_OWORD *)(v1047 + 536) = 0u;
  *(_OWORD *)(v1047 + 552) = 0u;
  *(_OWORD *)(v1047 + 568) = 0u;
  *(_QWORD *)buf = &off_1E42D5848;
  *(_QWORD *)&buf[8] = v1047;
  v1336 = buf;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v1049 + 16))(v1049, buf);
  v1050 = v1336;
  if (v1336 == buf)
  {
    v1052 = 4;
    v1050 = buf;
    v1051 = v1236;
  }
  else
  {
    v1051 = v1236;
    if (!v1336)
      goto LABEL_1407;
    v1052 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v1050 + 8 * v1052))();
LABEL_1407:
  *(_QWORD *)v1047 = &off_1E42A79E8;
  v1053 = operator new();
  *(_DWORD *)(v1053 + 16) = 2147483646;
  *(_BYTE *)(v1053 + 20) = 0;
  *(_QWORD *)v1053 = &off_1E42A5920;
  *(_QWORD *)(v1053 + 8) = 0;
  *(_QWORD *)buf = v1047;
  v1242 = v1053;
  md::World::addMapLayerDataSource(v1239, 56, (uint64_t *)buf, &v1242, &v1243);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
  if (v1243)
  {
    gdc::LayerDataStore::~LayerDataStore(v1243);
    MEMORY[0x1A1AF4E00]();
  }
  v1054 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v1054);
  v1055 = (md::SingleGEOResourceLayerDataSource *)operator new();
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource(v1055, 43, 27, v1054, *(gdc::ResourceStatusContainer **)(v1240 + 304), v1051, 0, 0);
  *(_QWORD *)v1055 = &off_1E42AB300;
  *((_QWORD *)v1055 + 94) = 0;
  v1056 = operator new();
  *(_DWORD *)(v1056 + 16) = 2147483646;
  *(_BYTE *)(v1056 + 20) = 0;
  *(_QWORD *)v1056 = &off_1E42A7D58;
  *(_QWORD *)(v1056 + 8) = 0;
  *(_DWORD *)(v1056 + 22) = 1769515;
  *(_BYTE *)(v1056 + 28) = 0;
  *(_DWORD *)(v1056 + 40) = 25;
  *(_BYTE *)(v1056 + 36) = 1;
  *(_BYTE *)(v1056 + 44) = 0;
  *(_BYTE *)(v1056 + 46) = 0;
  v1242 = v1056;
  v1243 = v1055;
  md::World::addMapLayerDataSource(v1239, 43, (uint64_t *)&v1243, &v1242, (gdc::LayerDataStore **)buf);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v1057 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v1057);
  v1058 = (gdc::LayerDataStore *)operator new();
  v1059 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v1243 = 0;
  v1322[0] = &off_1E42ECD68;
  v1323 = v1322;
  md::DaVinciCenterLineRoadsLayerDataSource::DaVinciCenterLineRoadsLayerDataSource((uint64_t)v1058, 44, 30, v1057, v1059, v1041, v1051, (uint64_t *)&v1243, (uint64_t)v1322);
  v1060 = v1323;
  if (v1323 == v1322)
  {
    v1061 = 4;
    v1060 = v1322;
  }
  else
  {
    if (!v1323)
      goto LABEL_1424;
    v1061 = 5;
  }
  (*(void (**)(void))(*v1060 + 8 * v1061))();
LABEL_1424:
  v1062 = v1243;
  v1243 = 0;
  if (v1062)
  {
    v1063 = *((_QWORD *)v1062 + 3);
    *((_QWORD *)v1062 + 3) = 0;
    if (v1063)
      (*(void (**)(uint64_t))(*(_QWORD *)v1063 + 8))(v1063);
    v1064 = (std::__shared_weak_count *)*((_QWORD *)v1062 + 2);
    if (v1064)
    {
      v1065 = (unint64_t *)&v1064->__shared_owners_;
      do
        v1066 = __ldaxr(v1065);
      while (__stlxr(v1066 - 1, v1065));
      if (!v1066)
      {
        ((void (*)(std::__shared_weak_count *))v1064->__on_zero_shared)(v1064);
        std::__shared_weak_count::__release_weak(v1064);
      }
    }
    MEMORY[0x1A1AF4E00](v1062, 0x1020C40509EF904);
  }
  v1067 = operator new();
  *(_DWORD *)(v1067 + 16) = -1073741827;
  *(_BYTE *)(v1067 + 20) = 0;
  *(_QWORD *)v1067 = &off_1E42A7D58;
  *(_QWORD *)(v1067 + 8) = 0;
  *(_DWORD *)(v1067 + 22) = 1966124;
  *(_BYTE *)(v1067 + 28) = 0;
  *(_DWORD *)(v1067 + 40) = 25;
  *(_BYTE *)(v1067 + 36) = 1;
  *(_BYTE *)(v1067 + 44) = 0;
  *(_BYTE *)(v1067 + 46) = 0;
  v1242 = v1067;
  v1243 = v1058;
  md::World::addMapLayerDataSource(v1239, 44, (uint64_t *)&v1243, &v1242, (gdc::LayerDataStore **)buf);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v1068 = (gdc::LayerDataStore *)operator new();
  v1243 = gdc::LayerDataStore::LayerDataStore(v1068);
  v1069 = operator new();
  v1070 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v1071 = operator new();
  v1072 = v1071;
  v1073 = v1239[44];
  v1074 = (std::__shared_weak_count *)v1239[45];
  *(_QWORD *)buf = v1073;
  *(_QWORD *)&buf[8] = v1074;
  if (v1074)
  {
    v1075 = (unint64_t *)&v1074->__shared_owners_;
    do
      v1076 = __ldxr(v1075);
    while (__stxr(v1076 + 1, v1075));
    *(_BYTE *)v1071 = 0;
    *(_QWORD *)(v1071 + 8) = v1073;
    *(_QWORD *)(v1071 + 16) = v1074;
    v1077 = (unint64_t *)&v1074->__shared_owners_;
    do
      v1078 = __ldxr(v1077);
    while (__stxr(v1078 + 1, v1077));
  }
  else
  {
    *(_BYTE *)v1071 = 0;
    *(_QWORD *)(v1071 + 8) = v1073;
    *(_QWORD *)(v1071 + 16) = 0;
  }
  v1079 = (_QWORD *)operator new();
  *v1079 = &off_1E42A3158;
  v1079[1] = v1240;
  *(_QWORD *)(v1072 + 24) = v1079;
  v1242 = v1072;
  if (v1074)
  {
    v1080 = (unint64_t *)&v1074->__shared_owners_;
    do
      v1081 = __ldaxr(v1080);
    while (__stlxr(v1081 - 1, v1080));
    if (!v1081)
    {
      ((void (*)(std::__shared_weak_count *))v1074->__on_zero_shared)(v1074);
      std::__shared_weak_count::__release_weak(v1074);
    }
  }
  v1320[0] = &off_1E42ECD68;
  v1321 = v1320;
  md::DaVinciCenterLineRoadsLayerDataSource::DaVinciCenterLineRoadsLayerDataSource(v1069, 45, 31, v1068, v1070, v1041, v1051, &v1242, (uint64_t)v1320);
  v1082 = v1321;
  if (v1321 == v1320)
  {
    v1083 = 4;
    v1082 = v1320;
  }
  else
  {
    if (!v1321)
      goto LABEL_1456;
    v1083 = 5;
  }
  (*(void (**)(void))(*v1082 + 8 * v1083))();
LABEL_1456:
  v1084 = v1242;
  v1242 = 0;
  if (v1084)
  {
    v1085 = *(_QWORD *)(v1084 + 24);
    *(_QWORD *)(v1084 + 24) = 0;
    if (v1085)
      (*(void (**)(uint64_t))(*(_QWORD *)v1085 + 8))(v1085);
    v1086 = *(std::__shared_weak_count **)(v1084 + 16);
    if (v1086)
    {
      v1087 = (unint64_t *)&v1086->__shared_owners_;
      do
        v1088 = __ldaxr(v1087);
      while (__stlxr(v1088 - 1, v1087));
      if (!v1088)
      {
        ((void (*)(std::__shared_weak_count *))v1086->__on_zero_shared)(v1086);
        std::__shared_weak_count::__release_weak(v1086);
      }
    }
    MEMORY[0x1A1AF4E00](v1084, 0x1020C40509EF904);
  }
  v1089 = operator new();
  *(_DWORD *)(v1089 + 16) = -1073741827;
  *(_BYTE *)(v1089 + 20) = 0;
  *(_QWORD *)v1089 = &off_1E42A7D58;
  *(_QWORD *)(v1089 + 8) = 0;
  *(_DWORD *)(v1089 + 22) = 2031661;
  *(_DWORD *)(v1089 + 32) = 1;
  *(_BYTE *)(v1089 + 28) = 1;
  *(_DWORD *)(v1089 + 40) = 25;
  *(_BYTE *)(v1089 + 36) = 1;
  *(_BYTE *)(v1089 + 44) = 0;
  *(_BYTE *)(v1089 + 46) = 0;
  *(_QWORD *)buf = v1069;
  v1242 = v1089;
  md::World::addMapLayerDataSource(v1239, 45, (uint64_t *)buf, &v1242, &v1243);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
  if (v1243)
  {
    gdc::LayerDataStore::~LayerDataStore(v1243);
    MEMORY[0x1A1AF4E00]();
  }
  v1090 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v1090);
  v1091 = (gdc::LayerDataStore *)operator new();
  md::SelectedDaVinciRoadsLayerDataSource::SelectedDaVinciRoadsLayerDataSource((uint64_t)v1091, 49, 12, v1090, *(gdc::ResourceStatusContainer **)(v1240 + 304), v1041, v1051);
  v1092 = operator new();
  *(_DWORD *)(v1092 + 16) = 2147483646;
  *(_BYTE *)(v1092 + 20) = 0;
  *(_QWORD *)v1092 = &off_1E42A7D58;
  *(_QWORD *)(v1092 + 8) = 0;
  *(_DWORD *)(v1092 + 22) = 786481;
  *(_BYTE *)(v1092 + 28) = 0;
  *(_DWORD *)(v1092 + 40) = 25;
  *(_BYTE *)(v1092 + 36) = 1;
  *(_BYTE *)(v1092 + 44) = 0;
  *(_BYTE *)(v1092 + 46) = 0;
  v1242 = v1092;
  v1243 = v1091;
  md::World::addMapLayerDataSource(v1239, 49, (uint64_t *)&v1243, &v1242, (gdc::LayerDataStore **)buf);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v1093 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v1093);
  v1094 = (gdc::LayerDataStore *)operator new();
  v1095 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v1243 = 0;
  v1318[0] = &off_1E42ECD68;
  v1319 = v1318;
  md::DaVinciCenterLineRoadsLayerDataSource::DaVinciCenterLineRoadsLayerDataSource((uint64_t)v1094, 50, 32, v1093, v1095, v1041, v1051, (uint64_t *)&v1243, (uint64_t)v1318);
  v1096 = v1319;
  if (v1319 == v1318)
  {
    v1097 = 4;
    v1096 = v1318;
  }
  else
  {
    if (!v1319)
      goto LABEL_1482;
    v1097 = 5;
  }
  (*(void (**)(void))(*v1096 + 8 * v1097))();
LABEL_1482:
  v1098 = v1243;
  v1243 = 0;
  if (v1098)
  {
    v1099 = *((_QWORD *)v1098 + 3);
    *((_QWORD *)v1098 + 3) = 0;
    if (v1099)
      (*(void (**)(uint64_t))(*(_QWORD *)v1099 + 8))(v1099);
    v1100 = (std::__shared_weak_count *)*((_QWORD *)v1098 + 2);
    if (v1100)
    {
      v1101 = (unint64_t *)&v1100->__shared_owners_;
      do
        v1102 = __ldaxr(v1101);
      while (__stlxr(v1102 - 1, v1101));
      if (!v1102)
      {
        ((void (*)(std::__shared_weak_count *))v1100->__on_zero_shared)(v1100);
        std::__shared_weak_count::__release_weak(v1100);
      }
    }
    MEMORY[0x1A1AF4E00](v1098, 0x1020C40509EF904);
  }
  v1103 = operator new();
  *(_DWORD *)(v1103 + 16) = -1073741827;
  *(_BYTE *)(v1103 + 20) = 0;
  *(_QWORD *)v1103 = &off_1E42A7D58;
  *(_QWORD *)(v1103 + 8) = 0;
  *(_DWORD *)(v1103 + 22) = 2097202;
  *(_BYTE *)(v1103 + 28) = 0;
  *(_DWORD *)(v1103 + 40) = 25;
  *(_BYTE *)(v1103 + 36) = 1;
  *(_BYTE *)(v1103 + 44) = 0;
  *(_BYTE *)(v1103 + 46) = 0;
  v1242 = v1103;
  v1243 = v1094;
  md::World::addMapLayerDataSource(v1239, 50, (uint64_t *)&v1243, &v1242, (gdc::LayerDataStore **)buf);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v1104 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v1104);
  v1105 = operator new();
  v1106 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v1107 = v1041;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v1105, 57, 32, v1104, v1106, v1051, 0, 0);
  *(_QWORD *)v1105 = &off_1E42A6B18;
  *(_QWORD *)(v1105 + 752) = &off_1E42B4D50;
  *(_QWORD *)(v1105 + 760) = v1107;
  *(_OWORD *)(v1105 + 776) = 0u;
  *(_OWORD *)(v1105 + 792) = 0u;
  v1108 = operator new();
  *(_DWORD *)(v1108 + 16) = -1073741827;
  *(_BYTE *)(v1108 + 20) = 0;
  *(_QWORD *)v1108 = &off_1E42A7D58;
  *(_QWORD *)(v1108 + 8) = 0;
  *(_DWORD *)(v1108 + 22) = 2097209;
  *(_BYTE *)(v1108 + 28) = 0;
  *(_DWORD *)(v1108 + 40) = 25;
  *(_BYTE *)(v1108 + 36) = 1;
  *(_BYTE *)(v1108 + 44) = 0;
  *(_BYTE *)(v1108 + 46) = 0;
  v1242 = v1108;
  v1243 = (gdc::LayerDataStore *)v1105;
  md::World::addMapLayerDataSource(v1239, 57, (uint64_t *)&v1243, &v1242, (gdc::LayerDataStore **)buf);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v1109 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v1109);
  v1110 = operator new();
  v1111 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v1112 = v1107;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v1110, 58, 12, v1109, v1111, v1051, 0, 0);
  *(_QWORD *)(v1110 + 752) = &off_1E42B4D50;
  *(_QWORD *)(v1110 + 760) = v1112;
  *(_OWORD *)(v1110 + 776) = 0u;
  *(_OWORD *)(v1110 + 792) = 0u;
  *(_QWORD *)v1110 = &off_1E42AB3A8;
  *(_OWORD *)(v1110 + 808) = 0u;
  *(_OWORD *)(v1110 + 824) = 0u;
  *(_DWORD *)(v1110 + 840) = 1065353216;
  v1113 = operator new();
  *(_DWORD *)(v1113 + 16) = 2147483646;
  *(_BYTE *)(v1113 + 20) = 0;
  *(_QWORD *)v1113 = &off_1E42A7D58;
  *(_QWORD *)(v1113 + 8) = 0;
  *(_DWORD *)(v1113 + 22) = 786490;
  *(_BYTE *)(v1113 + 28) = 0;
  *(_DWORD *)(v1113 + 40) = 25;
  *(_BYTE *)(v1113 + 36) = 1;
  *(_BYTE *)(v1113 + 44) = 0;
  *(_BYTE *)(v1113 + 46) = 0;
  v1242 = v1113;
  v1243 = (gdc::LayerDataStore *)v1110;
  md::World::addMapLayerDataSource(v1239, 58, (uint64_t *)&v1243, &v1242, (gdc::LayerDataStore **)buf);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v1114 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v1114);
  v1115 = operator new();
  v1116 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v1117 = v1112;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v1115, 59, 32, v1114, v1116, v1051, 1, 0);
  *(_QWORD *)v1115 = &off_1E429D898;
  *(_QWORD *)(v1115 + 760) = &off_1E42B4D50;
  *(_QWORD *)(v1115 + 768) = v1117;
  *(_OWORD *)(v1115 + 784) = 0u;
  *(float *)(v1115 + 800) = a9;
  *(_BYTE *)(v1115 + 752) = 2;
  v1118 = operator new();
  *(_DWORD *)(v1118 + 16) = -1073741827;
  *(_BYTE *)(v1118 + 20) = 0;
  *(_QWORD *)v1118 = &off_1E42A7D58;
  *(_QWORD *)(v1118 + 8) = 0;
  *(_DWORD *)(v1118 + 22) = 2097211;
  *(_BYTE *)(v1118 + 28) = 0;
  *(_DWORD *)(v1118 + 40) = 25;
  *(_BYTE *)(v1118 + 36) = 1;
  *(_BYTE *)(v1118 + 44) = 0;
  *(_BYTE *)(v1118 + 46) = 0;
  v1242 = v1118;
  v1243 = (gdc::LayerDataStore *)v1115;
  md::World::addMapLayerDataSource(v1239, 59, (uint64_t *)&v1243, &v1242, (gdc::LayerDataStore **)buf);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v1119 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v1119);
  v1120 = (gdc::LayerDataStore *)operator new();
  v1121 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v1243 = 0;
  v1316[0] = &off_1E42ECD68;
  v1317 = v1316;
  md::DaVinciCenterLineRoadsLayerDataSource::DaVinciCenterLineRoadsLayerDataSource((uint64_t)v1120, 47, 44, v1119, v1121, v1117, v1051, (uint64_t *)&v1243, (uint64_t)v1316);
  v1122 = v1317;
  if (v1317 == v1316)
  {
    v1123 = 4;
    v1122 = v1316;
  }
  else
  {
    if (!v1317)
      goto LABEL_1520;
    v1123 = 5;
  }
  (*(void (**)(void))(*v1122 + 8 * v1123))();
LABEL_1520:
  v1124 = v1243;
  v1243 = 0;
  if (v1124)
  {
    v1125 = *((_QWORD *)v1124 + 3);
    *((_QWORD *)v1124 + 3) = 0;
    if (v1125)
      (*(void (**)(uint64_t))(*(_QWORD *)v1125 + 8))(v1125);
    v1126 = (std::__shared_weak_count *)*((_QWORD *)v1124 + 2);
    if (v1126)
    {
      v1127 = (unint64_t *)&v1126->__shared_owners_;
      do
        v1128 = __ldaxr(v1127);
      while (__stlxr(v1128 - 1, v1127));
      if (!v1128)
      {
        ((void (*)(std::__shared_weak_count *))v1126->__on_zero_shared)(v1126);
        std::__shared_weak_count::__release_weak(v1126);
      }
    }
    MEMORY[0x1A1AF4E00](v1124, 0x1020C40509EF904);
  }
  v1129 = operator new();
  *(_DWORD *)(v1129 + 16) = 2147483646;
  *(_BYTE *)(v1129 + 20) = 0;
  *(_QWORD *)v1129 = &off_1E42A7D58;
  *(_QWORD *)(v1129 + 8) = 0;
  *(_DWORD *)(v1129 + 22) = 2883631;
  *(_BYTE *)(v1129 + 28) = 0;
  *(_DWORD *)(v1129 + 40) = 25;
  *(_BYTE *)(v1129 + 36) = 1;
  *(_BYTE *)(v1129 + 44) = 0;
  *(_BYTE *)(v1129 + 46) = 0;
  v1242 = v1129;
  v1243 = v1120;
  md::World::addMapLayerDataSource(v1239, 47, (uint64_t *)&v1243, &v1242, (gdc::LayerDataStore **)buf);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v1130 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v1130);
  v1131 = operator new();
  v1132 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v1133 = v1117;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v1131, 64, 43, v1130, v1132, v1051, 0, 0);
  *(_QWORD *)v1131 = &off_1E42A08F0;
  *(_QWORD *)(v1131 + 752) = &off_1E42B4D50;
  *(_QWORD *)(v1131 + 760) = v1133;
  *(_OWORD *)(v1131 + 776) = 0u;
  v1134 = operator new();
  *(_DWORD *)(v1134 + 16) = 2147483646;
  *(_BYTE *)(v1134 + 20) = 0;
  *(_QWORD *)v1134 = &off_1E42A7D58;
  *(_QWORD *)(v1134 + 8) = 0;
  *(_DWORD *)(v1134 + 22) = 2818112;
  *(_BYTE *)(v1134 + 28) = 0;
  *(_DWORD *)(v1134 + 40) = 25;
  *(_BYTE *)(v1134 + 36) = 1;
  *(_BYTE *)(v1134 + 44) = 0;
  *(_BYTE *)(v1134 + 46) = 0;
  v1242 = v1134;
  v1243 = (gdc::LayerDataStore *)v1131;
  md::World::addMapLayerDataSource(v1239, 64, (uint64_t *)&v1243, &v1242, (gdc::LayerDataStore **)buf);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v1135 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v1135);
  v1136 = operator new();
  v1137 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v1138 = v1133;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v1136, 65, 44, v1135, v1137, v1051, 1, 0);
  *(_OWORD *)(v1136 + 760) = 0u;
  *(_BYTE *)(v1136 + 752) = 0;
  *(_QWORD *)v1136 = &off_1E4297950;
  *(_QWORD *)(v1136 + 776) = &off_1E42B4D50;
  *(_QWORD *)(v1136 + 784) = v1138;
  *(_WORD *)(v1136 + 800) = 256;
  *(_BYTE *)(v1136 + 802) = 0;
  v1139 = operator new();
  *(_DWORD *)(v1139 + 16) = -1073741827;
  *(_BYTE *)(v1139 + 20) = 0;
  *(_QWORD *)v1139 = &off_1E42A7D58;
  *(_QWORD *)(v1139 + 8) = 0;
  *(_DWORD *)(v1139 + 22) = 2883649;
  *(_BYTE *)(v1139 + 28) = 0;
  *(_DWORD *)(v1139 + 40) = 25;
  *(_BYTE *)(v1139 + 36) = 1;
  *(_BYTE *)(v1139 + 44) = 0;
  *(_BYTE *)(v1139 + 46) = 0;
  v1242 = v1139;
  v1243 = (gdc::LayerDataStore *)v1136;
  md::World::addMapLayerDataSource(v1239, 65, (uint64_t *)&v1243, &v1242, (gdc::LayerDataStore **)buf);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v1140 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v1140);
  v1141 = operator new();
  v1142 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v1143 = v1138;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v1141, 67, 9, v1140, v1142, v1051, 1, 0);
  *(_OWORD *)(v1141 + 760) = 0u;
  *(_QWORD *)v1141 = &off_1E4297950;
  *(_QWORD *)(v1141 + 776) = &off_1E42B4D50;
  *(_QWORD *)(v1141 + 784) = v1143;
  *(_WORD *)(v1141 + 800) = 256;
  *(_BYTE *)(v1141 + 802) = 0;
  *(_BYTE *)(v1141 + 752) = 0;
  v1144 = operator new();
  *(_DWORD *)(v1144 + 16) = -1073741827;
  *(_BYTE *)(v1144 + 20) = 0;
  *(_QWORD *)v1144 = &off_1E42A7D58;
  *(_QWORD *)(v1144 + 8) = 0;
  *(_DWORD *)(v1144 + 22) = 589891;
  *(_BYTE *)(v1144 + 28) = 0;
  *(_DWORD *)(v1144 + 40) = 25;
  *(_BYTE *)(v1144 + 36) = 1;
  *(_BYTE *)(v1144 + 44) = 0;
  *(_BYTE *)(v1144 + 46) = 0;
  v1242 = v1144;
  v1243 = (gdc::LayerDataStore *)v1141;
  md::World::addMapLayerDataSource(v1239, 67, (uint64_t *)&v1243, &v1242, (gdc::LayerDataStore **)buf);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v1145 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v1145);
  v1146 = (gdc::LayerDataStore *)operator new();
  v1147 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v1243 = 0;
  v1314[0] = &off_1E42ECD68;
  v1315 = v1314;
  md::DaVinciCenterLineRoadsLayerDataSource::DaVinciCenterLineRoadsLayerDataSource((uint64_t)v1146, 46, 30, v1145, v1147, v1143, v1051, (uint64_t *)&v1243, (uint64_t)v1314);
  v1148 = v1315;
  if (v1315 == v1314)
  {
    v1149 = 4;
    v1148 = v1314;
  }
  else
  {
    if (!v1315)
      goto LABEL_1558;
    v1149 = 5;
  }
  (*(void (**)(void))(*v1148 + 8 * v1149))();
LABEL_1558:
  v1150 = v1243;
  v1243 = 0;
  if (v1150)
  {
    v1151 = *((_QWORD *)v1150 + 3);
    *((_QWORD *)v1150 + 3) = 0;
    if (v1151)
      (*(void (**)(uint64_t))(*(_QWORD *)v1151 + 8))(v1151);
    v1152 = (std::__shared_weak_count *)*((_QWORD *)v1150 + 2);
    if (v1152)
    {
      v1153 = (unint64_t *)&v1152->__shared_owners_;
      do
        v1154 = __ldaxr(v1153);
      while (__stlxr(v1154 - 1, v1153));
      if (!v1154)
      {
        ((void (*)(std::__shared_weak_count *))v1152->__on_zero_shared)(v1152);
        std::__shared_weak_count::__release_weak(v1152);
      }
    }
    MEMORY[0x1A1AF4E00](v1150, 0x1020C40509EF904);
  }
  v1155 = operator new();
  *(_DWORD *)(v1155 + 16) = -1073741827;
  *(_BYTE *)(v1155 + 20) = 0;
  *(_QWORD *)v1155 = &off_1E42A7D58;
  *(_QWORD *)(v1155 + 8) = 0;
  *(_DWORD *)(v1155 + 22) = 1966126;
  *(_BYTE *)(v1155 + 28) = 0;
  *(_DWORD *)(v1155 + 40) = 25;
  *(_BYTE *)(v1155 + 36) = 1;
  *(_BYTE *)(v1155 + 44) = 0;
  *(_BYTE *)(v1155 + 46) = 0;
  v1242 = v1155;
  v1243 = v1146;
  md::World::addMapLayerDataSource(v1239, 46, (uint64_t *)&v1243, &v1242, (gdc::LayerDataStore **)buf);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v1156 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v1156);
  v1157 = operator new();
  v1158 = *(gdc::ResourceStatusContainer **)(v1240 + 304);
  v1159 = v1143;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v1157, 68, 13, v1156, v1158, v1051, 1, 0);
  *(_OWORD *)(v1157 + 760) = 0u;
  *(_BYTE *)(v1157 + 752) = 0;
  *(_QWORD *)(v1157 + 776) = &off_1E42B4D50;
  *(_QWORD *)(v1157 + 784) = v1159;
  *(_WORD *)(v1157 + 800) = 256;
  *(_BYTE *)(v1157 + 802) = 0;
  *(_QWORD *)v1157 = &off_1E42A4550;
  *(_OWORD *)(v1157 + 808) = 0u;
  *(_OWORD *)(v1157 + 824) = 0u;
  *(_DWORD *)(v1157 + 840) = 1065353216;
  *(_DWORD *)(v1157 + 848) = 65545;
  v1160 = operator new();
  v1161 = operator new(2uLL);
  *v1161 = 9;
  *(_DWORD *)(v1160 + 16) = -1073741828;
  *(_BYTE *)(v1160 + 20) = 0;
  *(_DWORD *)(v1160 + 22) = 852036;
  *(_BYTE *)(v1160 + 28) = 0;
  *(_DWORD *)(v1160 + 40) = 25;
  *(_BYTE *)(v1160 + 36) = 1;
  *(_BYTE *)(v1160 + 44) = 0;
  *(_BYTE *)(v1160 + 46) = 0;
  *(_QWORD *)v1160 = &off_1E42AA468;
  *(_QWORD *)(v1160 + 8) = 0;
  *(_QWORD *)(v1160 + 56) = 0;
  *(_QWORD *)(v1160 + 64) = 0;
  *(_QWORD *)(v1160 + 48) = 0;
  v1162 = operator new(2uLL);
  *(_QWORD *)(v1160 + 48) = v1162;
  *v1162++ = *v1161;
  *(_QWORD *)(v1160 + 56) = v1162;
  *(_QWORD *)(v1160 + 64) = v1162;
  operator delete(v1161);
  v1242 = v1160;
  v1243 = (gdc::LayerDataStore *)v1157;
  md::World::addMapLayerDataSource(v1239, 68, (uint64_t *)&v1243, &v1242, (gdc::LayerDataStore **)buf);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v1163 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v1163);
  v1164 = (gdc::LayerDataStore *)operator new();
  md::SelectedDaVinciRoadsLayerDataSource::SelectedDaVinciRoadsLayerDataSource((uint64_t)v1164, 48, 13, v1163, *(gdc::ResourceStatusContainer **)(v1240 + 304), v1159, v1051);
  v1165 = operator new();
  *(_DWORD *)(v1165 + 16) = -1073741828;
  *(_BYTE *)(v1165 + 20) = 0;
  *(_QWORD *)v1165 = &off_1E42A7D58;
  *(_QWORD *)(v1165 + 8) = 0;
  *(_DWORD *)(v1165 + 22) = 852016;
  *(_BYTE *)(v1165 + 28) = 0;
  *(_DWORD *)(v1165 + 40) = 25;
  *(_BYTE *)(v1165 + 36) = 1;
  *(_BYTE *)(v1165 + 44) = 0;
  *(_BYTE *)(v1165 + 46) = 0;
  v1242 = v1165;
  v1243 = v1164;
  md::World::addMapLayerDataSource(v1239, 48, (uint64_t *)&v1243, &v1242, (gdc::LayerDataStore **)buf);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v1166 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)buf = gdc::LayerDataStore::LayerDataStore(v1166);
  v1167 = (md::SingleGEOResourceLayerDataSource *)operator new();
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource(v1167, 70, 46, v1166, *(gdc::ResourceStatusContainer **)(v1240 + 304), v1051, 0, 0);
  *(_QWORD *)v1167 = &off_1E42A2178;
  v1168 = operator new();
  *(_DWORD *)(v1168 + 16) = 2147483646;
  *(_BYTE *)(v1168 + 20) = 0;
  *(_QWORD *)v1168 = &off_1E42A7D58;
  *(_QWORD *)(v1168 + 8) = 0;
  *(_DWORD *)(v1168 + 22) = 3014726;
  *(_BYTE *)(v1168 + 28) = 0;
  *(_DWORD *)(v1168 + 40) = 25;
  *(_BYTE *)(v1168 + 36) = 1;
  *(_BYTE *)(v1168 + 44) = 0;
  *(_BYTE *)(v1168 + 46) = 0;
  v1242 = v1168;
  v1243 = v1167;
  md::World::addMapLayerDataSource(v1239, 70, (uint64_t *)&v1243, &v1242, (gdc::LayerDataStore **)buf);
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  if (v1243)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1243 + 8))(v1243);
  if (*(_QWORD *)buf)
  {
    gdc::LayerDataStore::~LayerDataStore(*(gdc::LayerDataStore **)buf);
    MEMORY[0x1A1AF4E00]();
  }
  v1169 = v1239[4];
  for (i = v1239[5]; v1169 != i; v1169 = (gdc::LayerDataStore *)((char *)v1169 + 16))
    *(_QWORD *)(*((_QWORD *)v1169 + 1) + 24) = *((_QWORD *)v1239[3] + 7);
  v1171 = v1239[7];
  for (j = v1239[8]; v1171 != j; v1171 = (gdc::LayerDataStore *)((char *)v1171 + 16))
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v1171 + 1) + 16))(*((_QWORD *)v1171 + 1), *((_QWORD *)v1239[3] + 7));
  v1173 = (gdc::LayerDataStore *)operator new();
  v1174 = v1173;
  v1175 = v1239[10];
  v1176 = v1239[11];
  if (v1175 != v1176)
  {
    while (*(_WORD *)v1175 != 51)
    {
      v1175 = (gdc::LayerDataStore *)((char *)v1175 + 16);
      if (v1175 == v1176)
        goto LABEL_1601;
    }
  }
  if (v1175 == v1176)
LABEL_1601:
    v1177 = 0;
  else
    v1177 = *((_QWORD *)v1175 + 1);
  v1178 = v1239[7];
  v1179 = v1239[8];
  if (v1178 != v1179)
  {
    while (*(_WORD *)v1178 != 51)
    {
      v1178 = (gdc::LayerDataStore *)((char *)v1178 + 16);
      if (v1178 == v1179)
        goto LABEL_1608;
    }
  }
  if (v1178 == v1179)
LABEL_1608:
    v1180 = 0;
  else
    v1180 = *((_QWORD *)v1178 + 1);
  *(_QWORD *)v1173 = *((_QWORD *)v1239[3] + 7);
  *((_QWORD *)v1173 + 1) = v1177;
  *((_QWORD *)v1173 + 2) = v1180;
  v1181 = (gdc::LayerDataStore *)operator new();
  *(_QWORD *)v1181 = &off_1E42E7020;
  *((_QWORD *)v1181 + 1) = 0;
  *((_QWORD *)v1181 + 2) = 0;
  *((_QWORD *)v1181 + 3) = v1174;
  v1182 = (std::__shared_weak_count *)v1239[41];
  v1239[40] = v1174;
  v1239[41] = v1181;
  if (v1182)
  {
    v1183 = (unint64_t *)&v1182->__shared_owners_;
    do
      v1184 = __ldaxr(v1183);
    while (__stlxr(v1184 - 1, v1183));
    if (!v1184)
    {
      ((void (*)(std::__shared_weak_count *))v1182->__on_zero_shared)(v1182);
      std::__shared_weak_count::__release_weak(v1182);
    }
  }
  v1185 = (_QWORD *)operator new();
  v1312[0] = &off_1E42D4258;
  v1312[1] = v1240;
  v1313 = v1312;
  v1186 = *(id *)*v1239;
  ReachabilityChangedObserver::ReachabilityChangedObserver(v1185, v1312, v1186);
  v1187 = *v1225;
  *v1225 = (uint64_t)v1185;
  if (v1187)
  {
    objc_msgSend(*(id *)(v1187 + 8), "clearListener");
    v1188 = *(void **)(v1187 + 8);
    if (v1188)
    {
      *(_QWORD *)(v1187 + 8) = 0;

      v1188 = *(void **)(v1187 + 8);
    }
    *(_QWORD *)v1187 = &off_1E42B4FB0;

    MEMORY[0x1A1AF4E00](v1187, 0x80C40B49F1EBBLL);
  }

  v1189 = v1313;
  if (v1313 == v1312)
  {
    v1190 = 4;
    v1189 = v1312;
  }
  else
  {
    if (!v1313)
      goto LABEL_1623;
    v1190 = 5;
  }
  (*(void (**)(void))(*v1189 + 8 * v1190))();
LABEL_1623:
  v1191 = *(id *)*v1239;
  v1192 = operator new();
  *(_QWORD *)buf = &off_1E42D4258;
  *(_QWORD *)&buf[8] = v1240;
  v1336 = buf;
  gdc::Timer::Timer(v1192, v1191, buf);
  v1193 = v1336;
  if (v1336 == buf)
  {
    v1194 = 4;
    v1193 = buf;
  }
  else
  {
    if (!v1336)
      goto LABEL_1628;
    v1194 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v1193 + 8 * v1194))();
LABEL_1628:
  v1195 = v1239[46];
  v1239[46] = (gdc::LayerDataStore *)v1192;
  if (v1195)
    (*(void (**)(gdc::LayerDataStore *))(*(_QWORD *)v1195 + 8))(v1195);

  v1310[0] = &off_1E42D42A0;
  v1310[1] = v1239;
  v1311 = v1310;
  v1336 = buf;
  std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_3,std::allocator<md::RunLoopController *>,void ()(std::unordered_map<std::shared_ptr<md::TaskContext>::ResourceKey,std::shared_ptr<md::TaskContext>::Error,std::shared_ptr<md::TaskContext>::ResourceKeyHash,std::equal_to<std::unordered_map>,md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_3<std::pair<std::unordered_map const,std::shared_ptr<md::TaskContext>::ResourceKey>>> const&)>::__clone((uint64_t)v1310, buf);
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](buf, (_QWORD *)(v1240 + 408));
  v1196 = v1336;
  if (v1336 == buf)
  {
    v1198 = 4;
    v1196 = buf;
    v1197 = v1227;
  }
  else
  {
    v1197 = v1227;
    if (!v1336)
      goto LABEL_1635;
    v1198 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v1196 + 8 * v1198))();
LABEL_1635:
  v1199 = v1311;
  if (v1311 == v1310)
  {
    v1200 = 4;
    v1199 = v1310;
  }
  else
  {
    if (!v1311)
      goto LABEL_1640;
    v1200 = 5;
  }
  (*(void (**)(void))(*v1199 + 8 * v1200))();
LABEL_1640:
  if (v1244)
  {
    gdc::LayerDataStore::~LayerDataStore(v1244);
    MEMORY[0x1A1AF4E00]();
  }
  if (v1304)
  {
    gdc::LayerDataStore::~LayerDataStore(v1304);
    MEMORY[0x1A1AF4E00]();
  }
  if (v1306)
  {
    gdc::LayerDataStore::~LayerDataStore(v1306);
    MEMORY[0x1A1AF4E00]();
  }
  if (v1308)
  {
    gdc::LayerDataStore::~LayerDataStore(v1308);
    MEMORY[0x1A1AF4E00]();
  }
  if (v1330)
  {
    gdc::LayerDataStore::~LayerDataStore((gdc::LayerDataStore *)v1330);
    MEMORY[0x1A1AF4E00]();
  }
  if (!v1334)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v1334 + 48))(v1334);
  v1201 = v1334;
  if (v1334 == v1333)
  {
    v1202 = 4;
    v1201 = v1333;
    goto LABEL_1655;
  }
  if (v1334)
  {
    v1202 = 5;
LABEL_1655:
    (*(void (**)(void))(*v1201 + 8 * v1202))();
  }

  return v1239;
}

void sub_19F3C2FA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)v1 = &off_1E42B4FB0;

  _Unwind_Resume(a1);
}

void sub_19F3C2FCC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t *v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char *v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  char *v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  _QWORD *v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  char *v39;
  char *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;

  std::unique_ptr<gdc::ResourceStatusContainer>::~unique_ptr[abi:nn180100](v3);
  v8 = (char *)v6[4];
  if (v8)
  {
    v11 = (char *)v1[36];
    v12 = v6[4];
    if (v11 != v8)
    {
      do
      {
        v13 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v11 -= 16;
      }
      while (v11 != v8);
      v12 = v6[4];
    }
    v1[36] = v8;
    operator delete(v12);
    v9 = (char *)*v6;
    if (!*v6)
    {
LABEL_3:
      v10 = (_QWORD *)v1[28];
      if (!v10)
        goto LABEL_26;
      goto LABEL_42;
    }
  }
  else
  {
    v9 = (char *)*v6;
    if (!*v6)
      goto LABEL_3;
  }
  v16 = (char *)v1[32];
  v17 = v9;
  if (v16 != v9)
  {
    do
    {
      v18 = (_QWORD *)*((_QWORD *)v16 - 3);
      if (v18)
      {
        do
        {
          v20 = (_QWORD *)*v18;
          v21 = (void *)v18[3];
          if (v21 != (void *)v18[5])
            free(v21);
          operator delete(v18);
          v18 = v20;
        }
        while (v20);
      }
      v19 = (void *)*((_QWORD *)v16 - 5);
      *((_QWORD *)v16 - 5) = 0;
      if (v19)
        operator delete(v19);
      v16 -= 48;
    }
    while (v16 != v9);
    v17 = *v6;
  }
  v1[32] = v9;
  operator delete(v17);
  v10 = (_QWORD *)v1[28];
  if (!v10)
  {
LABEL_26:
    v22 = *v2;
    *v2 = 0;
    if (v22)
      operator delete(v22);
    v23 = (_QWORD *)v1[23];
    if (v23)
    {
      do
      {
        v24 = (_QWORD *)*v23;
        operator delete(v23);
        v23 = v24;
      }
      while (v24);
    }
    v25 = *v7;
    *v7 = 0;
    if (v25)
      operator delete(v25);
    v26 = (_QWORD *)v1[18];
    if (v26)
    {
      do
      {
        v35 = (_QWORD *)*v26;
        v36 = (void *)v26[3];
        if (v36 != (void *)v26[5])
          free(v36);
        operator delete(v26);
        v26 = v35;
      }
      while (v35);
    }
    v27 = *v5;
    *v5 = 0;
    if (v27)
      operator delete(v27);
    v28 = (_QWORD *)v1[13];
    if (v28)
    {
      do
      {
        v37 = (_QWORD *)*v28;
        v38 = (void *)v28[3];
        if (v38 != (void *)v28[5])
          free(v38);
        operator delete(v28);
        v28 = v37;
      }
      while (v37);
    }
    v29 = (void *)v1[11];
    v1[11] = 0;
    if (v29)
    {
      operator delete(v29);
      v30 = (char *)v1[7];
      if (!v30)
      {
LABEL_38:
        v31 = (void *)v1[4];
        if (!v31)
          goto LABEL_39;
        goto LABEL_61;
      }
    }
    else
    {
      v30 = (char *)v1[7];
      if (!v30)
        goto LABEL_38;
    }
    v39 = (char *)v1[8];
    v40 = v30;
    if (v39 != v30)
    {
      do
      {
        v41 = (std::__shared_weak_count *)*((_QWORD *)v39 - 1);
        if (v41)
        {
          v42 = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v39 -= 24;
      }
      while (v39 != v30);
      v40 = (char *)v1[7];
    }
    v1[8] = v30;
    operator delete(v40);
    v31 = (void *)v1[4];
    if (!v31)
    {
LABEL_39:
      v32 = *v4;
      if (!*v4)
LABEL_69:
        _Unwind_Resume(a1);
LABEL_62:
      v44 = (_QWORD *)v1[2];
      v45 = v32;
      if (v44 != v32)
      {
        do
        {
          v47 = *--v44;
          v46 = v47;
          *v44 = 0;
          if (v47)
            (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
        }
        while (v44 != v32);
        v45 = *v4;
      }
      v1[2] = v32;
      operator delete(v45);
      _Unwind_Resume(a1);
    }
LABEL_61:
    v1[5] = v31;
    operator delete(v31);
    v32 = *v4;
    if (!*v4)
      goto LABEL_69;
    goto LABEL_62;
  }
  do
  {
LABEL_42:
    v33 = (_QWORD *)*v10;
    v34 = (void *)v10[3];
    if (v34 != (void *)v10[5])
      free(v34);
    operator delete(v10);
    v10 = v33;
  }
  while (v33);
  goto LABEL_26;
}

void gdc::ResourceManager::addResourceFetcher<md::RasterTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(uint64_t a1, unint64_t a2, void *a3, int a4, int a5, uint64_t *a6, float a7)
{
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  id v21;
  unint64_t *v22;
  uint64_t v23[2];

  v21 = a3;
  v13 = (unint64_t *)operator new();
  v14 = v13;
  v15 = *a6;
  v16 = (std::__shared_weak_count *)a6[1];
  v23[0] = v15;
  v23[1] = (uint64_t)v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  md::RasterTileResourceFetcher::RasterTileResourceFetcher(v13, v21, a4, a5, v23, 0, a7);
  if (v16)
  {
    v19 = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  (*(void (**)(unint64_t *))(*v14 + 104))(v14);
  atomic_store(a2, v14 + 13);
  v22 = v14;
  gdc::ResourceManager::addResourceFetcher(a1, &v22);
  if (v22)
    (*(void (**)(unint64_t *))(*v22 + 8))(v22);

}

void sub_19F3C5EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, char a11)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);

  _Unwind_Resume(a1);
}

void gdc::ResourceManager::addResourceFetcher<md::DaVinciGroundTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(uint64_t a1, unint64_t a2, void *a3, int a4, int a5, uint64_t *a6, float a7)
{
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  id v18;
  unint64_t v19;
  id v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  v25 = a3;
  v13 = operator new();
  v15 = *a6;
  v14 = (std::__shared_weak_count *)a6[1];
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = v25;
    v26 = v15;
    v27 = v14;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  else
  {
    v20 = v25;
    v26 = v15;
    v27 = 0;
  }
  md::GEOVectorTileResourceFetcher::GEOVectorTileResourceFetcher((_QWORD *)v13, v25, a4, a5, &v26, a7);
  if (v14)
  {
    v21 = (unint64_t *)&v14->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(_QWORD *)v13 = &off_1E42A8E88;
  *(_BYTE *)(v13 + 618) = 0;

  if (v14)
  {
    v23 = (unint64_t *)&v14->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 104))(v13);
  atomic_store(a2, (unint64_t *)(v13 + 104));
  v26 = v13;
  gdc::ResourceManager::addResourceFetcher(a1, &v26);
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);

}

void sub_19F3C6110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);

  _Unwind_Resume(a1);
}

void sub_19F3C629C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{

  _Unwind_Resume(a1);
}

void sub_19F3C6310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VKMapCameraController;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19F3C6424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VKScreenCameraController;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19F3C6524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void md::LabelCustomFeatureProvider::queueCommand(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  _OWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  char v37;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 184))
  {
    v4 = a3[3];
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
      return;
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_49:
    abort();
  }
  v7 = *(_QWORD *)(a1 + 168);
  v8 = *(_QWORD *)(a1 + 176);
  v9 = (std::__shared_weak_count *)operator new(0x40uLL);
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD5E8;
  LOBYTE(v9[1].__vftable) = a2;
  v10 = a3[3];
  if (!v10)
    goto LABEL_7;
  if ((_QWORD *)v10 != a3)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
LABEL_7:
    v9[2].__shared_owners_ = v10;
    goto LABEL_9;
  }
  v9[2].__shared_owners_ = (uint64_t)&v9[1].__shared_owners_;
  (*(void (**)(_QWORD *))(*a3 + 24))(a3);
LABEL_9:
  *(_QWORD *)&v36 = v9 + 1;
  *((_QWORD *)&v36 + 1) = v9;
  v11 = *(_QWORD **)(a1 + 176);
  v12 = *(_QWORD *)(a1 + 184);
  if ((unint64_t)v11 >= v12)
  {
    v13 = *(_QWORD *)(a1 + 168);
    v14 = ((uint64_t)v11 - v13) >> 4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 60)
      goto LABEL_49;
    v16 = v12 - v13;
    if (v16 >> 3 > v15)
      v15 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      v18 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), 16 * v17, 8);
      v19 = (_OWORD *)(v18 + 16 * v14);
      v20 = v18 + 16 * v17;
      if (v18)
      {
        *v19 = v36;
        v36 = 0uLL;
      }
    }
    else
    {
      v20 = 0;
      v19 = (_OWORD *)(16 * v14);
    }
    v21 = v19 + 1;
    v22 = *(_QWORD **)(a1 + 168);
    v23 = *(_QWORD **)(a1 + 176);
    if (v23 == v22)
    {
      *(_QWORD *)(a1 + 168) = v19;
      *(_QWORD *)(a1 + 176) = v21;
      v26 = *(_QWORD *)(a1 + 184);
      *(_QWORD *)(a1 + 184) = v20;
    }
    else
    {
      do
      {
        v24 = *((_OWORD *)v23 - 1);
        v23 -= 2;
        *--v19 = v24;
        *v23 = 0;
        v23[1] = 0;
      }
      while (v23 != v22);
      v23 = *(_QWORD **)(a1 + 168);
      v25 = *(_QWORD **)(a1 + 176);
      *(_QWORD *)(a1 + 168) = v19;
      *(_QWORD *)(a1 + 176) = v21;
      v26 = *(_QWORD *)(a1 + 184);
      *(_QWORD *)(a1 + 184) = v20;
      while (v25 != v23)
      {
        v27 = (std::__shared_weak_count *)*(v25 - 1);
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v25 -= 2;
      }
    }
    if (v23)
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 192) + 40))(*(_QWORD *)(a1 + 192), v23, v26 - (_QWORD)v23);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    *(_QWORD *)(a1 + 176) = v21;
    if (!v9)
      goto LABEL_41;
  }
  else
  {
    if (v11)
    {
      *v11 = v9 + 1;
      v11[1] = v9;
      v36 = 0uLL;
      v9 = 0;
    }
    *(_QWORD *)(a1 + 176) = v11 + 2;
    if (!v9)
      goto LABEL_41;
  }
  v30 = (unint64_t *)&v9->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v7 != v8)
      return;
    goto LABEL_42;
  }
LABEL_41:
  if (v7 != v8)
    return;
LABEL_42:
  v32 = *(_QWORD *)(a1 + 8);
  v33 = atomic_load((unsigned __int8 *)(v32 + 3058));
  if ((v33 & 1) != 0)
  {
    v34 = *(_QWORD *)(v32 + 136);
    if (v34)
    {
      v35 = *(_QWORD *)(v34 + 56);
      if (v35)
      {
        *(_QWORD *)&v36 = *(_QWORD *)(a1 + 8);
        v37 = 9;
        (*(void (**)(uint64_t, __int128 *, char *))(*(_QWORD *)v35 + 48))(v35, &v36, &v37);
      }
    }
  }
}

void sub_19F3C6828(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_19F3C6840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::IdentifiedResourceLogic::IdentifiedResourceLogic(std::shared_ptr<md::RegistryManager> const&,NSObject  {objcproto17OS_dispatch_queue}*)::$_0::operator()(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1 + 19;
  if (a1[22])
  {
    v3 = (_QWORD *)a1[21];
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    a1[21] = 0;
    v5 = a1[20];
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    a1[22] = 0;
  }
  GEOConfigGetArray();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v9 = v7;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v16;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v16 != v11)
            objc_enumerationMutation(v9);
          v13 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v12);
          if (v13)
          {
            v14 = objc_msgSend(v13, "unsignedLongLongValue", (_QWORD)v15);
            std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long>((uint64_t)v1, v14, v14);
          }
          ++v12;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v10);
    }

  }
}

void sub_19F3C69CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F3C6E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void gdc::LayerDataCollector::addFallbackData(uint64_t a1, uint64_t a2, __int16 *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t **v9;
  unsigned __int16 v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int v30;
  char *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  char *v51;
  char *v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  __int16 *v56;
  char v57[8];
  uint64_t v58;
  void *v59;
  void *v60;
  char v61;
  int v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  void *v69;
  void *v70;
  unsigned __int8 v71;
  int v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;

  v8 = a1 + 48;
  v9 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)(a1 + 48), (unsigned __int8 *)a2);
  if (v9)
  {
    v66 = (unint64_t)v9[16];
    goto LABEL_66;
  }
  v10 = *(_WORD *)(a2 + 8);
  v11 = geo::linear_map<unsigned short,std::vector<gdc::LayerDataHolder>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>,std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>>::operator[]((unsigned __int16 **)(a1 + 24), v10);
  v66 = 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)v11 + 1) - *(_QWORD *)v11) >> 4);
  v12 = geo::linear_map<unsigned short,std::vector<gdc::LayerDataHolder>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>,std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>>::operator[]((unsigned __int16 **)(a1 + 24), v10);
  v13 = v12;
  if (*a4)
    v14 = 3;
  else
    v14 = 0;
  v16 = *((_QWORD *)v12 + 1);
  v15 = *((_QWORD *)v12 + 2);
  if (v16 < v15)
  {
    v17 = v14;
    v67 = *(_BYTE *)a2;
    gdc::LayerDataKey::LayerDataKey((uint64_t)&v68, a2 + 8);
    v71 = 0;
    if (*(_BYTE *)(a2 + 96))
    {
      v72 = *(_DWORD *)(a2 + 100);
      v71 = 1;
    }
    v73 = *(_QWORD *)(a2 + 104);
    *(_BYTE *)v16 = v67;
    gdc::LayerDataKey::LayerDataKey(v16 + 8, (uint64_t)&v68);
    *(_BYTE *)(v16 + 96) = 0;
    v18 = v71;
    if (v71)
    {
      *(_DWORD *)(v16 + 100) = v72;
      *(_BYTE *)(v16 + 96) = 1;
    }
    *(_QWORD *)(v16 + 104) = v73;
    *(_QWORD *)(v16 + 112) = *a4;
    v19 = a4[1];
    *(_QWORD *)(v16 + 120) = v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      v18 = v71;
    }
    *(_DWORD *)(v16 + 128) = v17;
    *(_BYTE *)(v16 + 132) = 1;
    *(_QWORD *)(v16 + 136) = 0;
    if (v18)
      v71 = 0;
    if (v69 != v70)
      free(v69);
    v22 = (char *)(v16 + 144);
    goto LABEL_65;
  }
  v23 = 0x8E38E38E38E38E39 * ((uint64_t)(v16 - *(_QWORD *)v12) >> 4);
  v24 = v23 + 1;
  if (v23 + 1 > 0x1C71C71C71C71C7)
    abort();
  v25 = 0x8E38E38E38E38E39 * ((uint64_t)(v15 - *(_QWORD *)v12) >> 4);
  if (2 * v25 > v24)
    v24 = 2 * v25;
  if (v25 >= 0xE38E38E38E38E3)
    v26 = 0x1C71C71C71C71C7;
  else
    v26 = v24;
  v56 = a3;
  v54 = v14;
  v53 = v26;
  if (v26)
  {
    if (v26 > 0x1C71C71C71C71C7)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v27 = v8;
    v28 = (char *)operator new(144 * v26);
  }
  else
  {
    v27 = v8;
    v28 = 0;
  }
  v29 = &v28[144 * v23];
  v67 = *(_BYTE *)a2;
  gdc::LayerDataKey::LayerDataKey((uint64_t)&v68, a2 + 8);
  v71 = 0;
  if (*(_BYTE *)(a2 + 96))
  {
    v72 = *(_DWORD *)(a2 + 100);
    v71 = 1;
  }
  v73 = *(_QWORD *)(a2 + 104);
  *v29 = v67;
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v29 + 8), (uint64_t)&v68);
  v29[96] = 0;
  v30 = v71;
  if (v71)
  {
    *((_DWORD *)v29 + 25) = v72;
    v29[96] = 1;
  }
  *((_QWORD *)v29 + 13) = v73;
  v31 = &v28[144 * v23];
  v32 = a4[1];
  *((_QWORD *)v31 + 14) = *a4;
  *((_QWORD *)v31 + 15) = v32;
  v8 = v27;
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    v30 = v71;
  }
  v35 = &v28[144 * v23];
  *((_DWORD *)v35 + 32) = v54;
  v35[132] = 1;
  *((_QWORD *)v35 + 17) = 0;
  if (v30)
    v71 = 0;
  if (v69 != v70)
    free(v69);
  v36 = &v28[144 * v53];
  v22 = v29 + 144;
  v38 = *(char **)v13;
  v37 = (char *)*((_QWORD *)v13 + 1);
  if (v37 == *(char **)v13)
  {
    *(_QWORD *)v13 = v29;
    *((_QWORD *)v13 + 1) = v22;
    *((_QWORD *)v13 + 2) = v36;
    a3 = v56;
    if (!v37)
      goto LABEL_65;
  }
  else
  {
    v52 = v36;
    v55 = v8;
    v39 = 0;
    do
    {
      v40 = &v29[v39];
      v41 = &v37[v39];
      v29[v39 - 144] = v37[v39 - 144];
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v29[v39 - 136], (uint64_t)&v37[v39 - 136]);
      v29[v39 - 48] = 0;
      if (v37[v39 - 48])
      {
        *((_DWORD *)v40 - 11) = *((_DWORD *)v41 - 11);
        *(v40 - 48) = 1;
      }
      *((_QWORD *)v40 - 5) = *((_QWORD *)v41 - 5);
      *((_OWORD *)v40 - 2) = *((_OWORD *)v41 - 2);
      *((_QWORD *)v41 - 4) = 0;
      *((_QWORD *)v41 - 3) = 0;
      *((_OWORD *)v40 - 1) = *((_OWORD *)v41 - 1);
      v39 -= 144;
    }
    while (&v37[v39] != v38);
    v42 = &v29[v39];
    v37 = *(char **)v13;
    v43 = (char *)*((_QWORD *)v13 + 1);
    v22 = v29 + 144;
    *(_QWORD *)v13 = v42;
    *((_QWORD *)v13 + 1) = v29 + 144;
    *((_QWORD *)v13 + 2) = v52;
    if (v43 != v37)
    {
      a3 = v56;
      while (1)
      {
        v44 = (std::__shared_weak_count *)*((_QWORD *)v43 - 3);
        if (v44)
        {
          p_shared_owners = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldaxr(p_shared_owners);
          while (__stlxr(v46 - 1, p_shared_owners));
          if (!v46)
            break;
        }
        if (*(v43 - 48))
          goto LABEL_55;
LABEL_56:
        v47 = (void *)*((_QWORD *)v43 - 16);
        if (v47 != *((void **)v43 - 14))
          free(v47);
        v43 -= 144;
        if (v43 == v37)
          goto LABEL_63;
      }
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
      if (!*(v43 - 48))
        goto LABEL_56;
LABEL_55:
      *(v43 - 48) = 0;
      goto LABEL_56;
    }
    a3 = v56;
LABEL_63:
    v8 = v55;
    if (!v37)
      goto LABEL_65;
  }
  operator delete(v37);
LABEL_65:
  *((_QWORD *)v13 + 1) = v22;
  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,unsigned long>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,unsigned long>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,unsigned long>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,unsigned long>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey const&,unsigned long &>(v8, (unsigned __int8 *)a2, a2, (uint64_t *)&v66);
LABEL_66:
  v57[0] = *(_BYTE *)a2;
  gdc::LayerDataKey::LayerDataKey((uint64_t)&v58, a2 + 8);
  v61 = 0;
  if (*(_BYTE *)(a2 + 96))
  {
    v62 = *(_DWORD *)(a2 + 100);
    v61 = 1;
  }
  v63 = *(_QWORD *)(a2 + 104);
  v64 = *a3;
  v65 = *(_QWORD *)(a3 + 2);
  v48 = *(_QWORD *)(a1 + 8);
  if (v48 >= *(_QWORD *)(a1 + 16))
  {
    v51 = std::vector<gdc::LayerDataIndex>::__emplace_back_slow_path<gdc::LayerKeyPair &,unsigned long &>((void **)a1, v57, (uint64_t *)&v66);
  }
  else
  {
    v67 = v57[0];
    gdc::LayerDataKey::LayerDataKey((uint64_t)&v68, (uint64_t)&v58);
    v71 = 0;
    if (v61)
    {
      v72 = v62;
      v71 = 1;
    }
    v73 = v63;
    v74 = v64;
    v75 = v65;
    v49 = v66;
    *(_BYTE *)v48 = v67;
    gdc::LayerDataKey::LayerDataKey(v48 + 8, (uint64_t)&v68);
    *(_BYTE *)(v48 + 96) = 0;
    v50 = v71;
    if (v71)
    {
      *(_DWORD *)(v48 + 100) = v72;
      *(_BYTE *)(v48 + 96) = 1;
    }
    *(_QWORD *)(v48 + 104) = v73;
    *(_WORD *)(v48 + 112) = v74;
    *(_QWORD *)(v48 + 116) = v75;
    *(_QWORD *)(v48 + 136) = v49;
    if (v50)
      v71 = 0;
    if (v69 != v70)
      free(v69);
    v51 = (char *)(v48 + 144);
  }
  *(_QWORD *)(a1 + 8) = v51;
  if (v61)
    v61 = 0;
  if (v59 != v60)
    free(v59);
}

void sub_19F3C7778(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F3C7998(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::LabelClusterBuilder::createClusters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  float *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  double v26;
  double v27;
  BOOL v28;
  double v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t *v44;
  unint64_t *v45;
  unsigned __int8 v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t *v53;
  char v54;
  uint64_t v55;
  md::LabelPoint *v56;
  unint64_t v57;
  double v59;
  double v60;
  unint64_t *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t *v64;
  unsigned __int8 v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  unint64_t *v72;
  char v73;
  uint64_t v74;
  md::LabelPoint *v75;
  unint64_t *v76;
  unint64_t v77;
  double v79;
  double v80;
  unint64_t *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  int64_t v94;
  double v95;
  double v96;
  int64_t v97;
  double v98;
  int64_t i;
  _BYTE *v100;
  char *v101;
  unsigned __int8 v102;
  _QWORD *v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v116;
  unint64_t *v117;
  unint64_t *v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  char *v122;
  char *v123;
  unint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  unint64_t *v131;
  unint64_t *v132;
  unint64_t *v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  double v139[2];

  v135 = 0;
  v136 = 0;
  v4 = *(_QWORD *)(a2 + 24);
  v137 = 0;
  v138 = v4;
  v5 = *(char **)a2;
  v6 = *(char **)(a2 + 8);
  v7 = (uint64_t)&v6[-*(_QWORD *)a2];
  if (v7)
  {
    if (v7 < 0)
      abort();
    v8 = v7 >> 3;
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    v135 = (unint64_t *)v7;
    v137 = v7 + 8 * v8;
    do
    {
      if (v7)
        *(_QWORD *)v7 = *(_QWORD *)v5;
      v5 += 8;
      v7 += 8;
    }
    while (v5 != v6);
    v136 = (unint64_t *)v7;
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *(char **)a2;
    v11 = *(char **)(a2 + 8);
    v131 = 0;
    v132 = 0;
    v133 = 0;
    v134 = v9;
    v12 = v11 - v10;
    if (v11 == v10)
    {
      v14 = 0;
    }
    else
    {
      if (v12 < 0)
        abort();
      v13 = (uint64_t *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v11 - v10, 8);
      v14 = (unint64_t *)v13;
      v15 = 0;
      v131 = (unint64_t *)v13;
      v133 = (unint64_t *)&v13[v12 >> 3];
      do
      {
        if (&v13[v15])
          v13[v15] = *(_QWORD *)&v10[v15 * 8];
        ++v15;
      }
      while (&v10[v15 * 8] != v11);
      v132 = (unint64_t *)&v13[v15];
      v7 = (uint64_t)v136;
    }
  }
  else
  {
    v14 = 0;
    v131 = 0;
    v132 = 0;
    v133 = 0;
    v134 = v4;
  }
  v16 = 126 - 2 * __clz((v7 - (uint64_t)v135) >> 3);
  if ((unint64_t *)v7 == v135)
    v17 = 0;
  else
    v17 = v16;
  std::__introsort<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **,false>(v135, (unint64_t *)v7, v17, 1);
  v18 = 126 - 2 * __clz(v132 - v14);
  if (v132 == v14)
    v19 = 0;
  else
    v19 = v18;
  std::__introsort<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **,false>(v14, v132, v19, 1);
  v21 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  {
    v113 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v113, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v114 = mdm::Allocator::instance(void)::alloc;
  v22 = (char *)v136 - (char *)v135;
  if ((unint64_t)((char *)v136 - (char *)v135) >= 9)
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = *(double *)(a1 + 8) * 0.001953125;
    v27 = 0.0;
    while (1)
    {
      v126 = 0;
      v127 = 0;
      v130 = 1.79769313e308;
      md::LabelClusterBuilder::findClosestPair(&v135, 0, v22 >> 3, &v130, &v126, (uint64_t **)&v131);
      if (v126)
        v28 = v127 == 0;
      else
        v28 = 1;
      if (v28)
        goto LABEL_127;
      v29 = v130;
      if (v130 > v26)
        goto LABEL_127;
      if (v130 < v27)
      {
        v130 = v27;
        v29 = v27;
      }
      v139[0] = v29;
      v30 = *(_QWORD *)(a3 + 24);
      if (!v30)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
        return;
      }
      v125 = (*(uint64_t (**)(uint64_t, _QWORD **, double *))(*(_QWORD *)v30 + 48))(v30, &v126, v139);
      if ((unint64_t)v24 >= v25)
        break;
      if (v24)
        *(_QWORD *)v24 = v125;
      v31 = v24 + 8;
LABEL_55:
      v42 = v126;
      v43 = v127;
      v45 = v135;
      v44 = v136;
      {
        v87 = operator new();
        *((_QWORD *)v21 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v87, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v47 = v44 - v45;
      v48 = v47 - 1;
      v121 = v25;
      v122 = v31;
      v119 = *((_QWORD *)v21 + 299);
      if (v47 == 1)
      {
        v117 = 0;
        v50 = 0;
      }
      else
      {
        if (v48 >> 61)
          goto LABEL_166;
        v49 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**((_QWORD **)v21 + 299) + 16))(*((_QWORD *)v21 + 299), 8 * v48, 8);
        v50 = (unint64_t *)v49;
        v51 = 0;
        v117 = (unint64_t *)(v49 + 8 * v48);
        do
        {
          if (v49 + v51)
            *(_QWORD *)(v49 + v51) = 0;
          v51 += 8;
        }
        while (8 * v47 - 8 != v51);
      }
      v53 = v135;
      v52 = v136;
      if (v135 == v136)
      {
        v55 = 0;
LABEL_82:
        v50[v55] = v125;
        goto LABEL_83;
      }
      v54 = 0;
      v55 = 0;
      v56 = (md::LabelPoint *)(v125 + 16);
      do
      {
        v57 = *v53;
        if ((_QWORD *)*v53 != v42 && v57 != (_QWORD)v43)
        {
          if ((v54 & 1) == 0)
          {
            v59 = *(double *)md::LabelPoint::mercatorPoint(v56);
            if (v59 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v57 + 16)))
            {
              if (v57 <= v125)
              {
LABEL_78:
                v54 = 0;
                goto LABEL_67;
              }
            }
            else
            {
              v60 = *(double *)md::LabelPoint::mercatorPoint(v56);
              if (v60 >= *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v57 + 16)))
                goto LABEL_78;
            }
            v50[v55++] = v125;
          }
          v54 = 1;
LABEL_67:
          v50[v55++] = v57;
        }
        ++v53;
      }
      while (v53 != v52);
      v21 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
      if ((v54 & 1) == 0)
        goto LABEL_82;
LABEL_83:
      v61 = v135;
      v62 = v137;
      v135 = v50;
      v136 = v117;
      v137 = (uint64_t)v117;
      if (v61)
        (*(void (**)(uint64_t, unint64_t *, uint64_t))(*(_QWORD *)v119 + 40))(v119, v61, v62 - (_QWORD)v61);
      v64 = v131;
      v63 = v132;
      {
        v88 = operator new();
        *((_QWORD *)v21 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v88, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v66 = v63 - v64;
      v67 = *((_QWORD *)v21 + 299);
      v68 = v66 - 1;
      if (v66 == 1)
      {
        v120 = 0;
        v70 = 0;
        goto LABEL_93;
      }
      if (v68 >> 61)
LABEL_166:
        abort();
      v69 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v67 + 16))(*((_QWORD *)v21 + 299), 8 * v68, 8);
      v70 = (uint64_t *)v69;
      v71 = 0;
      v120 = (unint64_t *)(v69 + 8 * v68);
      do
      {
        if (v69 + v71)
          *(_QWORD *)(v69 + v71) = 0;
        v71 += 8;
      }
      while (8 * v66 - 8 != v71);
LABEL_93:
      v72 = v132;
      v118 = v131;
      if (v131 == v132)
      {
        v74 = 0;
LABEL_112:
        v70[v74] = v125;
        goto LABEL_113;
      }
      v116 = v67;
      v73 = 0;
      v74 = 0;
      v75 = (md::LabelPoint *)(v125 + 16);
      v76 = v131;
      while (2)
      {
        v77 = *v76;
        if ((_QWORD *)*v76 == v42 || v77 == (_QWORD)v43)
          goto LABEL_98;
        if ((v73 & 1) != 0)
          goto LABEL_96;
        v79 = *(double *)(md::LabelPoint::mercatorPoint(v75) + 8);
        if (v79 != *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v77 + 16)) + 8))
        {
          v80 = *(double *)(md::LabelPoint::mercatorPoint(v75) + 8);
          if (v80 >= *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v77 + 16)) + 8))
            goto LABEL_108;
LABEL_95:
          v70[v74++] = v125;
LABEL_96:
          v73 = 1;
          goto LABEL_97;
        }
        if (v77 > v125)
          goto LABEL_95;
LABEL_108:
        v73 = 0;
LABEL_97:
        v70[v74++] = v77;
LABEL_98:
        if (++v76 != v72)
          continue;
        break;
      }
      v21 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
      v67 = v116;
      if ((v73 & 1) == 0)
        goto LABEL_112;
LABEL_113:
      v131 = (unint64_t *)v70;
      v132 = v120;
      v81 = v133;
      v133 = v120;
      if (v118)
        (*(void (**)(uint64_t, unint64_t *, int64_t))(*(_QWORD *)v67 + 40))(v67, v118, (char *)v81 - (char *)v118);
      v22 = (char *)v136 - (char *)v135;
      v27 = v29;
      v25 = v121;
      v24 = v122;
      if ((unint64_t)((char *)v136 - (char *)v135) <= 8)
        goto LABEL_127;
    }
    v32 = (v24 - v23) >> 3;
    v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 61)
      abort();
    v34 = v25 - (_QWORD)v23;
    if ((uint64_t)(v25 - (_QWORD)v23) >> 2 > v33)
      v33 = (uint64_t)(v25 - (_QWORD)v23) >> 2;
    if (v34 >= 0x7FFFFFFFFFFFFFF8)
      v35 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    if (v35)
    {
      v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v114 + 16))(v114, 8 * v35, 8);
      v37 = (char *)(v36 + 8 * v32);
      v25 = v36 + 8 * v35;
      if (v36)
        *(_QWORD *)v37 = v125;
    }
    else
    {
      v25 = 0;
      v37 = (char *)(8 * v32);
    }
    v38 = v37;
    if (v24 != v23)
    {
      v39 = v24 - v23 - 8;
      if (v39 < 0x138
        || &v37[-(v39 & 0xFFFFFFFFFFFFFFF8) - 8] > v37 - 8
        || &v24[-(v39 & 0xFFFFFFFFFFFFFFF8) - 8] > v24 - 8
        || (unint64_t)(v24 - v37) < 0x20)
      {
        v40 = v24;
        v38 = v37;
      }
      else
      {
        v82 = (v39 >> 3) + 1;
        v40 = &v24[-8 * (v82 & 0x3FFFFFFFFFFFFFFCLL)];
        v83 = v37 - 16;
        v84 = v24 - 16;
        v85 = v82 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v86 = *(_OWORD *)v84;
          *((_OWORD *)v83 - 1) = *((_OWORD *)v84 - 1);
          *(_OWORD *)v83 = v86;
          v83 -= 32;
          v84 -= 32;
          v85 -= 4;
        }
        while (v85);
        v38 = &v37[-8 * (v82 & 0x3FFFFFFFFFFFFFFCLL)];
        if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_52;
      }
      do
      {
        v41 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        *((_QWORD *)v38 - 1) = v41;
        v38 -= 8;
      }
      while (v40 != v23);
    }
LABEL_52:
    v31 = v37 + 8;
    if (v23)
      (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v114 + 40))(v114, v23, v34);
    v23 = v38;
    goto LABEL_55;
  }
  v25 = 0;
  v24 = 0;
  v23 = 0;
LABEL_127:
  v89 = (int)(float)(*(float *)a1 * 5.0);
  if ((v89 & 0x80000000) == 0)
  {
    v90 = 0;
    v123 = v24;
    v91 = (v24 - v23) >> 3;
    v92 = 1;
    do
    {
      v94 = v90;
      v95 = *(double *)(a1 + 8);
      v96 = exp2(-(float)((float)v89 * 0.2)) * (0.001953125 * v95);
      if (v90 <= v91)
        v90 = v91;
      v97 = v94;
      while (v90 != v97)
      {
        v98 = (*(double (**)(_QWORD))(**(_QWORD **)&v23[8 * v97] + 48))(*(_QWORD *)&v23[8 * v97]);
        ++v97;
        if (v98 > v96)
        {
          v90 = v97 - 1;
          break;
        }
      }
      for (i = v90; i > v94; --i)
      {
        v100 = *(_BYTE **)&v23[8 * i - 8];
        if (!v100[80])
          (*(void (**)(_BYTE *, _QWORD, float))(*(_QWORD *)v100 + 56))(v100, v92 & 1, (float)v89 * 0.2);
      }
      v92 = 0;
    }
    while (v89-- > 0);
    v21 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
    v24 = v123;
  }
  if (v23 != v24)
  {
    v101 = v23;
    while (1)
    {
      if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)v101 + 40))(*(_QWORD *)v101))
        goto LABEL_145;
      v126 = 0;
      v127 = 0;
      v128 = 0;
      {
        v112 = operator new();
        *((_QWORD *)v21 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v112, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v129 = *((_QWORD *)v21 + 299);
      (*(void (**)(_QWORD, _QWORD **, uint64_t, _QWORD))(**(_QWORD **)v101 + 16))(*(_QWORD *)v101, &v126, 2, 0);
      v103 = v126;
      v104 = v127;
      if (v126 == v127)
        goto LABEL_155;
      v105 = (char *)v127 - (char *)v126 - 8;
      v106 = v126;
      if (v105 <= 7)
        goto LABEL_154;
      v107 = (v105 >> 3) + 1;
      v108 = v126 + 1;
      v109 = v107 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v110 = *v108;
        *(_DWORD *)(*(v108 - 1) + 8) = 1132199936;
        *(_DWORD *)(v110 + 8) = 1132199936;
        v108 += 2;
        v109 -= 2;
      }
      while (v109);
      if (v107 != (v107 & 0x3FFFFFFFFFFFFFFELL))
        break;
LABEL_144:
      v127 = v103;
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v129 + 40))(v129, v103, v128 - (_QWORD)v103);
LABEL_145:
      v101 += 8;
      if (v101 == v24)
        goto LABEL_159;
    }
    v106 = &v103[v107 & 0x3FFFFFFFFFFFFFFELL];
    do
    {
LABEL_154:
      v111 = *v106++;
      *(_DWORD *)(v111 + 8) = 1132199936;
    }
    while (v106 != v104);
LABEL_155:
    if (!v103)
      goto LABEL_145;
    goto LABEL_144;
  }
LABEL_159:
  if (v23)
    (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v114 + 40))(v114, v23, v25 - (_QWORD)v23);
  if (v131)
  {
    v132 = v131;
    (*(void (**)(uint64_t, unint64_t *, int64_t))(*(_QWORD *)v134 + 40))(v134, v131, (char *)v133 - (char *)v131);
  }
  if (v135)
  {
    v136 = v135;
    (*(void (**)(uint64_t, unint64_t *, uint64_t))(*(_QWORD *)v138 + 40))(v138, v135, v137 - (_QWORD)v135);
  }
}

void sub_19F3C8488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (!a27)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a30 + 40))(a30, a27, a29 - a27);
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, char a4)
{
  double v6;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *i;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  unint64_t *v22;
  unint64_t v23;
  md::LabelPoint *v24;
  double v25;
  unint64_t v26;
  md::LabelPoint *v27;
  double v28;
  unint64_t *v29;
  unint64_t *k;
  double v31;
  unint64_t v32;
  md::LabelPoint *v33;
  double v34;
  double v35;
  unint64_t v37;
  md::LabelPoint *v38;
  double v39;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t *v44;
  long double v45;
  long double v46;
  long double v47;
  double v48;
  double v49;
  __double2 v50;
  long double v51;
  long double v52;
  long double v53;
  float64x2_t v54;
  double v55;
  int v56;
  long double v57;
  long double v58;
  long double v59;
  double v60;
  double v61;
  __double2 v62;
  long double v63;
  long double v64;
  long double v65;
  long double v66;
  float64x2_t v67;
  long double v68;
  long double v69;
  long double v70;
  double v71;
  double v72;
  __double2 v73;
  long double v74;
  long double v75;
  long double v76;
  float64x2_t v77;
  double v78;
  long double v79;
  long double v80;
  long double v81;
  double v82;
  double v83;
  __double2 v84;
  long double v85;
  long double v86;
  long double v87;
  long double v88;
  float64x2_t v89;
  int v90;
  long double v91;
  long double v92;
  long double v93;
  double v94;
  double v95;
  __double2 v96;
  long double v97;
  long double v98;
  long double v99;
  float64x2_t v100;
  double v101;
  long double v102;
  long double v103;
  long double v104;
  double v105;
  double v106;
  __double2 v107;
  long double v108;
  long double v109;
  long double v110;
  long double v111;
  float64x2_t v112;
  long double v113;
  long double v114;
  long double v115;
  double v116;
  double v117;
  __double2 v118;
  long double v119;
  long double v120;
  long double v121;
  float64x2_t v122;
  double v123;
  long double v124;
  long double v125;
  long double v126;
  double v127;
  double v128;
  __double2 v129;
  long double v130;
  long double v131;
  long double v132;
  long double v133;
  float64x2_t v134;
  BOOL v135;
  double v136;
  unint64_t v137;
  unint64_t v138;
  md::LabelPoint *v139;
  double v140;
  double v141;
  unint64_t v142;
  double v143;
  double v144;
  double v145;
  unint64_t *v146;
  unint64_t v147;
  double v148;
  uint64_t v149;
  unint64_t *j;
  double v151;
  unint64_t v152;
  double v153;
  unint64_t v154;
  unint64_t v155;
  long double v156;
  long double v157;
  long double v158;
  double v159;
  double v160;
  __double2 v161;
  long double v162;
  long double v163;
  long double v164;
  float64x2_t v165;
  double v166;
  int v167;
  long double v168;
  long double v169;
  long double v170;
  double v171;
  __double2 v172;
  long double v173;
  long double v174;
  long double v175;
  float64x2_t v176;
  long double v177;
  long double v178;
  long double v179;
  double v180;
  double v181;
  __double2 v182;
  long double v183;
  long double v184;
  long double v185;
  float64x2_t v186;
  double v187;
  long double v188;
  long double v189;
  long double v190;
  double v191;
  __double2 v192;
  long double v193;
  long double v194;
  long double v195;
  float64x2_t v196;
  unint64_t v197;
  long double v198;
  long double v199;
  long double v200;
  double v201;
  double v202;
  __double2 v203;
  long double v204;
  long double v205;
  long double v206;
  float64x2_t v207;
  double v208;
  int v209;
  long double v210;
  long double v211;
  long double v212;
  double v213;
  __double2 v214;
  long double v215;
  long double v216;
  long double v217;
  float64x2_t v218;
  long double v219;
  long double v220;
  long double v221;
  double v222;
  double v223;
  __double2 v224;
  long double v225;
  long double v226;
  long double v227;
  float64x2_t v228;
  double v229;
  long double v230;
  long double v231;
  long double v232;
  double v233;
  __double2 v234;
  long double v235;
  long double v236;
  long double v237;
  float64x2_t v238;
  unint64_t *v239;
  unint64_t v240;
  unint64_t v241;
  md::LabelPoint *v242;
  double v243;
  unint64_t *v244;
  unint64_t *v245;
  char v247;
  uint64_t v248;
  unint64_t *v249;
  unint64_t *v250;
  unint64_t *v251;
  unint64_t *v252;
  unint64_t v253;
  unint64_t v254;
  double v255;
  double v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  long double v261;
  long double v262;
  long double v263;
  double v264;
  double v265;
  __double2 v266;
  long double v267;
  long double v268;
  long double v269;
  float64x2_t v270;
  double v271;
  int v272;
  long double v273;
  long double v274;
  long double v275;
  double v276;
  double v277;
  __double2 v278;
  long double v279;
  long double v280;
  long double v281;
  float64x2_t v282;
  long double v283;
  long double v284;
  long double v285;
  double v286;
  double v287;
  __double2 v288;
  long double v289;
  long double v290;
  long double v291;
  float64x2_t v292;
  double v293;
  long double v294;
  long double v295;
  long double v296;
  double v297;
  double v298;
  __double2 v299;
  long double v300;
  long double v301;
  long double v302;
  float64x2_t v303;
  int64_t v304;
  int64_t v305;
  unint64_t *v306;
  int64_t v307;
  uint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  unint64_t v311;
  md::LabelPoint *v312;
  double v313;
  unint64_t v314;
  unint64_t v315;
  md::LabelPoint *v316;
  double v317;
  double v318;
  unint64_t v319;
  double v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  unint64_t v324;
  md::LabelPoint *v325;
  double v326;
  unint64_t v327;
  md::LabelPoint *v328;
  double v329;
  double v330;
  double v331;
  unint64_t *v332;
  uint64_t v333;
  uint64_t v335;
  unint64_t *v336;
  unint64_t *v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  long double v342;
  long double v343;
  long double v344;
  double v345;
  double v346;
  __double2 v347;
  long double v348;
  long double v349;
  long double v350;
  float64x2_t v351;
  double v352;
  int v353;
  long double v354;
  long double v355;
  long double v356;
  double v357;
  double v358;
  __double2 v359;
  long double v360;
  long double v361;
  long double v362;
  float64x2_t v363;
  long double v364;
  long double v365;
  long double v366;
  double v367;
  double v368;
  __double2 v369;
  long double v370;
  long double v371;
  long double v372;
  float64x2_t v373;
  double v374;
  long double v375;
  long double v376;
  long double v377;
  double v378;
  double v379;
  __double2 v380;
  long double v381;
  long double v382;
  long double v383;
  float64x2_t v384;
  unint64_t *v385;
  uint64_t v386;
  unint64_t v387;
  unint64_t v388;
  unint64_t *v389;
  unint64_t v390;
  unint64_t v391;
  md::LabelPoint *v392;
  double v393;
  double v394;
  unint64_t v395;
  double v396;
  unint64_t v397;
  unint64_t *v398;
  unint64_t v399;
  md::LabelPoint *v400;
  double v401;
  unint64_t *v402;
  unint64_t *v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t *v406;
  double v407;
  double v408;
  uint64_t v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t *v412;
  unint64_t v413;
  unint64_t v414;
  long double v415;
  long double v416;
  long double v417;
  double v418;
  double v419;
  __double2 v420;
  long double v421;
  long double v422;
  long double v423;
  float64x2_t v424;
  double v425;
  int v426;
  long double v427;
  long double v428;
  long double v429;
  double v430;
  double v431;
  __double2 v432;
  long double v433;
  long double v434;
  long double v435;
  float64x2_t v436;
  long double v437;
  long double v438;
  long double v439;
  double v440;
  double v441;
  __double2 v442;
  long double v443;
  long double v444;
  long double v445;
  float64x2_t v446;
  double v447;
  long double v448;
  long double v449;
  long double v450;
  double v451;
  double v452;
  __double2 v453;
  long double v454;
  long double v455;
  long double v456;
  float64x2_t v457;
  double v458;
  uint64_t v459;
  unint64_t v460;
  unint64_t v461;
  unint64_t v462;
  uint64_t v463;
  int64_t v464;
  unint64_t v465;
  double v468;
  double v469;
  double v470;
  double v471;
  long double v472;
  long double v473;
  long double v474;
  long double v475;
  long double v476;
  long double v477;
  long double v478;
  long double v479;
  long double v480;
  long double v481;
  long double v482;
  long double v483;
  long double v484;
  long double v485;
  long double v486;
  long double v487;
  long double v488;
  long double v489;
  long double v490;
  long double v491;
  long double v492;
  long double v493;
  long double v494;
  long double v495;
  unint64_t *v496;
  long double v497;
  long double v498;
  long double v499;
  long double v500;
  float64x2_t v501;
  float64x2_t v502;
  md::LabelPoint *v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;

  v6 = 0.5;
  __asm { FMOV            V0.2D, #0.5 }
  v501 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
  v506 = _Q0;
LABEL_2:
  v10 = a2;
  v11 = a2 - 1;
  i = a1;
  while (2)
  {
    a1 = i;
    v13 = (char *)v10 - (char *)i;
    v14 = v10 - i;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v240 = *v11;
        v241 = *i;
        v242 = (md::LabelPoint *)(*v11 + 16);
        v243 = *(double *)(md::LabelPoint::mercatorPoint(v242) + 8);
        if (v243 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v241 + 16)) + 8))
        {
          v244 = a2 - 1;
          if (v240 >= v241)
            return;
        }
        else
        {
          v458 = *(double *)(md::LabelPoint::mercatorPoint(v242) + 8);
          v459 = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v241 + 16));
          v244 = a2 - 1;
          if (v458 >= *(double *)(v459 + 8))
            return;
        }
        v460 = *i;
        *i = *v244;
        *v244 = v460;
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(i, i + 1, v11);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(i, i + 1, i + 2, v11);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(i, i + 1, i + 2, i + 3, v11);
        return;
      default:
        if (v13 > 191)
        {
          if (!a3)
          {
            if (i != a2)
            {
              v461 = v13;
              v496 = i;
              v304 = (v14 - 2) >> 1;
              v305 = v304;
              while (1)
              {
                v307 = v305;
                if (v304 < v305)
                  goto LABEL_200;
                v464 = v305;
                v308 = (2 * v305) | 1;
                v309 = &v496[v308];
                if (2 * v305 + 2 < (uint64_t)v14)
                {
                  v310 = *v309;
                  v311 = v309[1];
                  v312 = (md::LabelPoint *)(*v309 + 16);
                  v313 = *(double *)(md::LabelPoint::mercatorPoint(v312) + 8);
                  if (v313 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v311 + 16)) + 8))
                  {
                    if (v310 >= v311)
                      goto LABEL_206;
LABEL_205:
                    ++v309;
                    v308 = 2 * v307 + 2;
                    goto LABEL_206;
                  }
                  v331 = *(double *)(md::LabelPoint::mercatorPoint(v312) + 8);
                  if (v331 < *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v311 + 16)) + 8))
                    goto LABEL_205;
                }
LABEL_206:
                v314 = *v309;
                v315 = v496[v307];
                v316 = (md::LabelPoint *)(*v309 + 16);
                v317 = *(double *)(md::LabelPoint::mercatorPoint(v316) + 8);
                if (v317 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v315 + 16)) + 8))
                {
                  _CF = v314 >= v315;
                  v304 = (v14 - 2) >> 1;
                  if (_CF)
                    goto LABEL_211;
                }
                else
                {
                  v318 = *(double *)(md::LabelPoint::mercatorPoint(v316) + 8);
                  v304 = (v14 - 2) >> 1;
                  if (v318 >= *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v315 + 16)) + 8))
                  {
LABEL_211:
                    v319 = v496[v464];
                    v496[v464] = *v309;
                    if (v304 < v308)
                    {
LABEL_198:
                      v306 = v309;
LABEL_199:
                      *v306 = v319;
                      v307 = v464;
                      goto LABEL_200;
                    }
                    v503 = (md::LabelPoint *)(v319 + 16);
                    v462 = v319;
                    while (2)
                    {
                      v321 = 2 * v308;
                      v308 = (2 * v308) | 1;
                      v306 = &v496[v308];
                      v322 = v321 + 2;
                      if (v321 + 2 < (uint64_t)v14)
                      {
                        v323 = *v306;
                        v324 = v306[1];
                        v325 = (md::LabelPoint *)(*v306 + 16);
                        v326 = *(double *)(md::LabelPoint::mercatorPoint(v325) + 8);
                        if (v326 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v324 + 16)) + 8))
                        {
                          _CF = v323 >= v324;
                          v304 = (v14 - 2) >> 1;
                          v319 = v462;
                          if (!_CF)
                            goto LABEL_218;
                        }
                        else
                        {
                          v330 = *(double *)(md::LabelPoint::mercatorPoint(v325) + 8);
                          v304 = (v14 - 2) >> 1;
                          v319 = v462;
                          if (v330 < *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v324 + 16)) + 8))
                          {
LABEL_218:
                            ++v306;
                            v308 = v322;
                          }
                        }
                      }
                      v327 = *v306;
                      v328 = (md::LabelPoint *)(*v306 + 16);
                      v329 = *(double *)(md::LabelPoint::mercatorPoint(v328) + 8);
                      if (v329 == *(double *)(md::LabelPoint::mercatorPoint(v503) + 8))
                      {
                        if (v327 < v319)
                          goto LABEL_198;
                      }
                      else
                      {
                        v320 = *(double *)(md::LabelPoint::mercatorPoint(v328) + 8);
                        if (v320 < *(double *)(md::LabelPoint::mercatorPoint(v503) + 8))
                          goto LABEL_198;
                      }
                      *v309 = *v306;
                      v309 = v306;
                      if (v304 < v308)
                        goto LABEL_199;
                      continue;
                    }
                  }
                }
LABEL_200:
                v305 = v307 - 1;
                if (!v307)
                {
                  v332 = v496;
                  v333 = v461 >> 3;
                  v504 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
                  while (1)
                  {
                    v335 = 0;
                    v465 = *v332;
                    v336 = v332;
                    do
                    {
                      v337 = v336;
                      v336 += v335 + 1;
                      v338 = 2 * v335;
                      v335 = (2 * v335) | 1;
                      v339 = v338 + 2;
                      if (v338 + 2 < v333)
                      {
                        v340 = *v336;
                        v341 = v336[1];
                        if (!*(_BYTE *)(*v336 + 61) && *(_BYTE *)(v340 + 62))
                        {
                          v342 = *(double *)(v340 + 16);
                          v343 = *(double *)(v340 + 24);
                          v344 = *(double *)(v340 + 32);
                          v345 = sqrt(v342 * v342 + v343 * v343);
                          v346 = atan2(v344, v345 * 0.996647189);
                          v472 = atan2(v343, v342);
                          v347 = __sincos_stret(v346);
                          v348 = atan2(v344 + v347.__sinval * v347.__sinval * 42841.3115 * v347.__sinval, v345 + v347.__cosval * v347.__cosval * -42697.6727 * v347.__cosval);
                          v349 = tan(v348 * 0.5 + 0.785398163);
                          v350 = log(v349);
                          v351.f64[0] = v472;
                          v351.f64[1] = v350;
                          *(float64x2_t *)(v340 + 40) = vmlaq_f64(v506, v504, v351);
                          *(_BYTE *)(v340 + 61) = 1;
                        }
                        v352 = *(double *)(v340 + 48);
                        if (*(_BYTE *)(v341 + 61))
                        {
                          v353 = 1;
                        }
                        else
                        {
                          v353 = *(unsigned __int8 *)(v341 + 62);
                          if (*(_BYTE *)(v341 + 62))
                          {
                            v354 = *(double *)(v341 + 16);
                            v355 = *(double *)(v341 + 24);
                            v356 = *(double *)(v341 + 32);
                            v357 = sqrt(v354 * v354 + v355 * v355);
                            v358 = atan2(v356, v357 * 0.996647189);
                            v473 = atan2(v355, v354);
                            v359 = __sincos_stret(v358);
                            v360 = atan2(v356 + v359.__sinval * v359.__sinval * 42841.3115 * v359.__sinval, v357 + v359.__cosval * v359.__cosval * -42697.6727 * v359.__cosval);
                            v361 = tan(v360 * 0.5 + 0.785398163);
                            v362 = log(v361);
                            v363.f64[0] = v473;
                            v363.f64[1] = v362;
                            *(float64x2_t *)(v341 + 40) = vmlaq_f64(v506, v504, v363);
                            v353 = 1;
                            *(_BYTE *)(v341 + 61) = 1;
                          }
                        }
                        if (v352 == *(double *)(v341 + 48))
                        {
                          if (v340 < v341)
                            goto LABEL_230;
                        }
                        else
                        {
                          if (!*(_BYTE *)(v340 + 61) && *(_BYTE *)(v340 + 62))
                          {
                            v364 = *(double *)(v340 + 16);
                            v365 = *(double *)(v340 + 24);
                            v366 = *(double *)(v340 + 32);
                            v367 = sqrt(v364 * v364 + v365 * v365);
                            v368 = atan2(v366, v367 * 0.996647189);
                            v474 = atan2(v365, v364);
                            v369 = __sincos_stret(v368);
                            v370 = atan2(v366 + v369.__sinval * v369.__sinval * 42841.3115 * v369.__sinval, v367 + v369.__cosval * v369.__cosval * -42697.6727 * v369.__cosval);
                            v371 = tan(v370 * 0.5 + 0.785398163);
                            v372 = log(v371);
                            v373.f64[0] = v474;
                            v373.f64[1] = v372;
                            *(float64x2_t *)(v340 + 40) = vmlaq_f64(v506, v504, v373);
                            *(_BYTE *)(v340 + 61) = 1;
                            v353 = *(unsigned __int8 *)(v341 + 61);
                          }
                          v374 = *(double *)(v340 + 48);
                          if (!v353 && *(_BYTE *)(v341 + 62))
                          {
                            v375 = *(double *)(v341 + 16);
                            v376 = *(double *)(v341 + 24);
                            v377 = *(double *)(v341 + 32);
                            v378 = sqrt(v375 * v375 + v376 * v376);
                            v379 = atan2(v377, v378 * 0.996647189);
                            v475 = atan2(v376, v375);
                            v380 = __sincos_stret(v379);
                            v381 = atan2(v377 + v380.__sinval * v380.__sinval * 42841.3115 * v380.__sinval, v378 + v380.__cosval * v380.__cosval * -42697.6727 * v380.__cosval);
                            v382 = tan(v381 * 0.5 + 0.785398163);
                            v383 = log(v382);
                            v384.f64[0] = v475;
                            v384.f64[1] = v383;
                            *(float64x2_t *)(v341 + 40) = vmlaq_f64(v506, v504, v384);
                            *(_BYTE *)(v341 + 61) = 1;
                          }
                          if (v374 < *(double *)(v341 + 48))
                          {
LABEL_230:
                            ++v336;
                            v335 = v339;
                          }
                        }
                      }
                      *v337 = *v336;
                    }
                    while (v335 <= (uint64_t)((unint64_t)(v333 - 2) >> 1));
                    v385 = a2 - 1;
                    _ZF = v336 == --a2;
                    if (_ZF)
                    {
                      *v336 = v465;
                    }
                    else
                    {
                      *v336 = *v385;
                      *v385 = v465;
                      v386 = (char *)v336 - (char *)v332 + 8;
                      if (v386 >= 9)
                      {
                        v387 = (v386 >> 3) - 2;
                        v388 = v387 >> 1;
                        v389 = &v332[v387 >> 1];
                        v390 = *v389;
                        v391 = *v336;
                        v392 = (md::LabelPoint *)(*v389 + 16);
                        v393 = *(double *)(md::LabelPoint::mercatorPoint(v392) + 8);
                        if (v393 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v391 + 16)) + 8))
                        {
                          _CF = v390 >= v391;
                          v332 = v496;
                          if (!_CF)
                          {
LABEL_257:
                            v395 = *v336;
                            *v336 = *v389;
                            if (v387 >= 2)
                            {
                              while (1)
                              {
                                v397 = v388 - 1;
                                v388 = (v388 - 1) >> 1;
                                v398 = &v496[v388];
                                v399 = *v398;
                                v400 = (md::LabelPoint *)(*v398 + 16);
                                v401 = *(double *)(md::LabelPoint::mercatorPoint(v400) + 8);
                                if (v401 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v395 + 16)) + 8))
                                {
                                  if (v399 >= v395)
                                    break;
                                }
                                else
                                {
                                  v396 = *(double *)(md::LabelPoint::mercatorPoint(v400) + 8);
                                  if (v396 >= *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v395 + 16))
                                                         + 8))
                                    break;
                                }
                                *v389 = *v398;
                                v389 = &v496[v388];
                                if (v397 <= 1)
                                  goto LABEL_264;
                              }
                            }
                            v398 = v389;
LABEL_264:
                            *v398 = v395;
                            v332 = v496;
                          }
                        }
                        else
                        {
                          v394 = *(double *)(md::LabelPoint::mercatorPoint(v392) + 8);
                          v332 = v496;
                          if (v394 < *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v391 + 16)) + 8))
                            goto LABEL_257;
                        }
                      }
                    }
                    if (v333-- <= 2)
                      return;
                  }
                }
              }
            }
            return;
          }
          v15 = &i[v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(&a1[v14 >> 1], a1, v11);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(a1, &a1[v14 >> 1], v11);
            v16 = v14 >> 1;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(a1 + 1, &a1[v16 - 1], a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(a1 + 2, &a1[v16 + 1], a2 - 3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(&a1[v16 - 1], v15, &a1[v16 + 1]);
            v17 = *a1;
            *a1 = a1[v16];
            a1[v16] = v17;
          }
          v18 = a3 - 1;
          if ((a4 & 1) == 0)
          {
            v19 = *(a1 - 1);
            v20 = *a1;
            v21 = *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v19 + 16)) + 8);
            if (v21 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v20 + 16)) + 8))
            {
              if (v19 < v20)
                goto LABEL_12;
            }
            else
            {
              v136 = *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v19 + 16)) + 8);
              if (v136 < *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v20 + 16)) + 8))
                goto LABEL_12;
            }
            v137 = *a1;
            v138 = *v11;
            v139 = (md::LabelPoint *)(*a1 + 16);
            v140 = *(double *)(md::LabelPoint::mercatorPoint(v139) + 8);
            if (v140 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v138 + 16)) + 8))
            {
              if (v137 < v138)
                goto LABEL_88;
            }
            else
            {
              v144 = *(double *)(md::LabelPoint::mercatorPoint(v139) + 8);
              if (v144 < *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v138 + 16)) + 8))
              {
LABEL_88:
                for (i = a1 + 1; ; ++i)
                {
                  v142 = *i;
                  v143 = *(double *)(md::LabelPoint::mercatorPoint(v139) + 8);
                  if (v143 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v142 + 16)) + 8))
                  {
                    if (v137 < v142)
                      goto LABEL_101;
                  }
                  else
                  {
                    v141 = *(double *)(md::LabelPoint::mercatorPoint(v139) + 8);
                    if (v141 < *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v142 + 16)) + 8))
                      goto LABEL_101;
                  }
                }
              }
            }
            for (i = a1 + 1; ; ++i)
            {
              v146 = a2;
              if (i >= a2)
                break;
              v147 = *i;
              v148 = *(double *)(md::LabelPoint::mercatorPoint(v139) + 8);
              if (v148 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v147 + 16)) + 8))
              {
                if (v137 < v147)
                {
LABEL_101:
                  v146 = a2;
                  break;
                }
              }
              else
              {
                v145 = *(double *)(md::LabelPoint::mercatorPoint(v139) + 8);
                if (v145 < *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v147 + 16)) + 8))
                  goto LABEL_101;
              }
            }
            v149 = v18;
            j = v146;
            if (i < v146)
            {
              for (j = v11; ; --j)
              {
                v152 = *j;
                v153 = *(double *)(md::LabelPoint::mercatorPoint(v139) + 8);
                if (v153 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v152 + 16)) + 8))
                {
                  if (v137 >= v152)
                    break;
                }
                else
                {
                  v151 = *(double *)(md::LabelPoint::mercatorPoint(v139) + 8);
                  if (v151 >= *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v152 + 16)) + 8))
                    break;
                }
              }
            }
            if (i < j)
            {
              v154 = *i;
              v155 = *j;
              do
              {
                *i++ = v155;
                *j = v154;
                while (1)
                {
                  v154 = *i;
                  if (!*(_BYTE *)(v137 + 61) && *(_BYTE *)(v137 + 62))
                  {
                    v156 = *(double *)(v137 + 16);
                    v157 = *(double *)(v137 + 24);
                    v158 = *(double *)(v137 + 32);
                    v159 = sqrt(v156 * v156 + v157 * v157);
                    v160 = atan2(v158, v159 * 0.996647189);
                    v484 = atan2(v157, v156);
                    v161 = __sincos_stret(v160);
                    v162 = atan2(v158 + v161.__sinval * v161.__sinval * 42841.3115 * v161.__sinval, v159 + v161.__cosval * v161.__cosval * -42697.6727 * v161.__cosval);
                    v163 = tan(v162 * v6 + 0.785398163);
                    v164 = log(v163);
                    v165.f64[0] = v484;
                    v165.f64[1] = v164;
                    *(float64x2_t *)(v137 + 40) = vmlaq_f64(v506, v501, v165);
                    *(_BYTE *)(v137 + 61) = 1;
                  }
                  v166 = *(double *)(v137 + 48);
                  if (*(_BYTE *)(v154 + 61))
                  {
                    v167 = 1;
                  }
                  else
                  {
                    v167 = *(unsigned __int8 *)(v154 + 62);
                    if (*(_BYTE *)(v154 + 62))
                    {
                      v168 = *(double *)(v154 + 16);
                      v169 = *(double *)(v154 + 24);
                      v170 = *(double *)(v154 + 32);
                      v468 = sqrt(v168 * v168 + v169 * v169);
                      v171 = atan2(v170, v468 * 0.996647189);
                      v485 = atan2(v169, v168);
                      v172 = __sincos_stret(v171);
                      v173 = atan2(v170 + v172.__sinval * v172.__sinval * 42841.3115 * v172.__sinval, v468 + v172.__cosval * v172.__cosval * -42697.6727 * v172.__cosval);
                      v174 = tan(v173 * v6 + 0.785398163);
                      v175 = log(v174);
                      v176.f64[0] = v485;
                      v176.f64[1] = v175;
                      *(float64x2_t *)(v154 + 40) = vmlaq_f64(v506, v501, v176);
                      v167 = 1;
                      *(_BYTE *)(v154 + 61) = 1;
                    }
                  }
                  if (v166 != *(double *)(v154 + 48))
                    break;
                  if (v137 < v154)
                    goto LABEL_131;
LABEL_113:
                  ++i;
                }
                if (!*(_BYTE *)(v137 + 61) && *(_BYTE *)(v137 + 62))
                {
                  v177 = *(double *)(v137 + 16);
                  v178 = *(double *)(v137 + 24);
                  v179 = *(double *)(v137 + 32);
                  v180 = sqrt(v177 * v177 + v178 * v178);
                  v181 = atan2(v179, v180 * 0.996647189);
                  v486 = atan2(v178, v177);
                  v182 = __sincos_stret(v181);
                  v183 = atan2(v179 + v182.__sinval * v182.__sinval * 42841.3115 * v182.__sinval, v180 + v182.__cosval * v182.__cosval * -42697.6727 * v182.__cosval);
                  v184 = tan(v183 * v6 + 0.785398163);
                  v185 = log(v184);
                  v186.f64[0] = v486;
                  v186.f64[1] = v185;
                  *(float64x2_t *)(v137 + 40) = vmlaq_f64(v506, v501, v186);
                  *(_BYTE *)(v137 + 61) = 1;
                  v167 = *(unsigned __int8 *)(v154 + 61);
                }
                v187 = *(double *)(v137 + 48);
                if (!v167 && *(_BYTE *)(v154 + 62))
                {
                  v188 = *(double *)(v154 + 16);
                  v189 = *(double *)(v154 + 24);
                  v190 = *(double *)(v154 + 32);
                  v469 = sqrt(v188 * v188 + v189 * v189);
                  v191 = atan2(v190, v469 * 0.996647189);
                  v487 = atan2(v189, v188);
                  v192 = __sincos_stret(v191);
                  v193 = atan2(v190 + v192.__sinval * v192.__sinval * 42841.3115 * v192.__sinval, v469 + v192.__cosval * v192.__cosval * -42697.6727 * v192.__cosval);
                  v194 = tan(v193 * v6 + 0.785398163);
                  v195 = log(v194);
                  v196.f64[0] = v487;
                  v196.f64[1] = v195;
                  *(float64x2_t *)(v154 + 40) = vmlaq_f64(v506, v501, v196);
                  *(_BYTE *)(v154 + 61) = 1;
                }
                if (v187 >= *(double *)(v154 + 48))
                  goto LABEL_113;
                do
                {
                  while (1)
                  {
LABEL_131:
                    v197 = *--j;
                    v155 = v197;
                    if (!*(_BYTE *)(v137 + 61) && *(_BYTE *)(v137 + 62))
                    {
                      v198 = *(double *)(v137 + 16);
                      v199 = *(double *)(v137 + 24);
                      v200 = *(double *)(v137 + 32);
                      v201 = sqrt(v198 * v198 + v199 * v199);
                      v202 = atan2(v200, v201 * 0.996647189);
                      v488 = atan2(v199, v198);
                      v203 = __sincos_stret(v202);
                      v204 = atan2(v200 + v203.__sinval * v203.__sinval * 42841.3115 * v203.__sinval, v201 + v203.__cosval * v203.__cosval * -42697.6727 * v203.__cosval);
                      v205 = tan(v204 * v6 + 0.785398163);
                      v206 = log(v205);
                      v207.f64[0] = v488;
                      v207.f64[1] = v206;
                      *(float64x2_t *)(v137 + 40) = vmlaq_f64(v506, v501, v207);
                      *(_BYTE *)(v137 + 61) = 1;
                    }
                    v208 = *(double *)(v137 + 48);
                    if (*(_BYTE *)(v155 + 61))
                    {
                      v209 = 1;
                    }
                    else
                    {
                      v209 = *(unsigned __int8 *)(v155 + 62);
                      if (*(_BYTE *)(v155 + 62))
                      {
                        v210 = *(double *)(v155 + 16);
                        v211 = *(double *)(v155 + 24);
                        v212 = *(double *)(v155 + 32);
                        v470 = sqrt(v210 * v210 + v211 * v211);
                        v213 = atan2(v212, v470 * 0.996647189);
                        v489 = atan2(v211, v210);
                        v214 = __sincos_stret(v213);
                        v215 = atan2(v212 + v214.__sinval * v214.__sinval * 42841.3115 * v214.__sinval, v470 + v214.__cosval * v214.__cosval * -42697.6727 * v214.__cosval);
                        v216 = tan(v215 * v6 + 0.785398163);
                        v217 = log(v216);
                        v218.f64[0] = v489;
                        v218.f64[1] = v217;
                        *(float64x2_t *)(v155 + 40) = vmlaq_f64(v506, v501, v218);
                        v209 = 1;
                        *(_BYTE *)(v155 + 61) = 1;
                      }
                    }
                    if (v208 != *(double *)(v155 + 48))
                      break;
                    if (v137 >= v155)
                      goto LABEL_110;
                  }
                  if (!*(_BYTE *)(v137 + 61) && *(_BYTE *)(v137 + 62))
                  {
                    v219 = *(double *)(v137 + 16);
                    v220 = *(double *)(v137 + 24);
                    v221 = *(double *)(v137 + 32);
                    v222 = sqrt(v219 * v219 + v220 * v220);
                    v223 = atan2(v221, v222 * 0.996647189);
                    v490 = atan2(v220, v219);
                    v224 = __sincos_stret(v223);
                    v225 = atan2(v221 + v224.__sinval * v224.__sinval * 42841.3115 * v224.__sinval, v222 + v224.__cosval * v224.__cosval * -42697.6727 * v224.__cosval);
                    v226 = tan(v225 * v6 + 0.785398163);
                    v227 = log(v226);
                    v228.f64[0] = v490;
                    v228.f64[1] = v227;
                    *(float64x2_t *)(v137 + 40) = vmlaq_f64(v506, v501, v228);
                    *(_BYTE *)(v137 + 61) = 1;
                    v209 = *(unsigned __int8 *)(v155 + 61);
                  }
                  v229 = *(double *)(v137 + 48);
                  if (!v209 && *(_BYTE *)(v155 + 62))
                  {
                    v230 = *(double *)(v155 + 16);
                    v231 = *(double *)(v155 + 24);
                    v232 = *(double *)(v155 + 32);
                    v471 = sqrt(v230 * v230 + v231 * v231);
                    v233 = atan2(v232, v471 * 0.996647189);
                    v491 = atan2(v231, v230);
                    v234 = __sincos_stret(v233);
                    v235 = atan2(v232 + v234.__sinval * v234.__sinval * 42841.3115 * v234.__sinval, v471 + v234.__cosval * v234.__cosval * -42697.6727 * v234.__cosval);
                    v236 = tan(v235 * v6 + 0.785398163);
                    v237 = log(v236);
                    v238.f64[0] = v491;
                    v238.f64[1] = v237;
                    *(float64x2_t *)(v155 + 40) = vmlaq_f64(v506, v501, v238);
                    *(_BYTE *)(v155 + 61) = 1;
                  }
                }
                while (v229 < *(double *)(v155 + 48));
LABEL_110:
                ;
              }
              while (i < j);
            }
            v239 = i - 1;
            v10 = a2;
            v11 = a2 - 1;
            if (i - 1 != a1)
              *a1 = *v239;
            a4 = 0;
            *v239 = v137;
            a3 = v149;
            continue;
          }
LABEL_12:
          v22 = a1 + 1;
          v23 = *a1;
          v24 = (md::LabelPoint *)(*a1 + 16);
          v463 = v18;
          while (1)
          {
            v26 = *v22;
            v27 = (md::LabelPoint *)(*v22 + 16);
            v28 = *(double *)(md::LabelPoint::mercatorPoint(v27) + 8);
            if (v28 == *(double *)(md::LabelPoint::mercatorPoint(v24) + 8))
              break;
            v25 = *(double *)(md::LabelPoint::mercatorPoint(v27) + 8);
            if (v25 >= *(double *)(md::LabelPoint::mercatorPoint(v24) + 8))
              goto LABEL_17;
LABEL_14:
            ++v22;
          }
          if (v26 < v23)
            goto LABEL_14;
LABEL_17:
          v29 = v22 - 1;
          k = v11;
          if (v22 - 1 != a1)
          {
            while (1)
            {
              v32 = *k;
              v33 = (md::LabelPoint *)(*k + 16);
              v34 = *(double *)(md::LabelPoint::mercatorPoint(v33) + 8);
              if (v34 == *(double *)(md::LabelPoint::mercatorPoint(v24) + 8))
              {
                if (v32 < v23)
                  goto LABEL_36;
              }
              else
              {
                v31 = *(double *)(md::LabelPoint::mercatorPoint(v33) + 8);
                if (v31 < *(double *)(md::LabelPoint::mercatorPoint(v24) + 8))
                  goto LABEL_36;
              }
              --k;
            }
          }
          k = a2;
          if (v22 < a2)
          {
            for (k = v11; ; --k)
            {
              v37 = *k;
              v38 = (md::LabelPoint *)(*k + 16);
              v39 = *(double *)(md::LabelPoint::mercatorPoint(v38) + 8);
              if (v39 == *(double *)(md::LabelPoint::mercatorPoint(v24) + 8))
              {
                if (v37 < v23 || v22 >= k)
                  break;
              }
              else
              {
                v35 = *(double *)(md::LabelPoint::mercatorPoint(v38) + 8);
                _CF = v35 < *(double *)(md::LabelPoint::mercatorPoint(v24) + 8) || v22 >= k;
                if (_CF)
                  break;
              }
            }
          }
LABEL_36:
          if (v22 < k)
          {
            v41 = *v22;
            v42 = *k;
            v43 = v22;
            v44 = k;
            do
            {
              *v43++ = v42;
              *v44 = v41;
              while (1)
              {
                v41 = *v43;
                if (!*(_BYTE *)(*v43 + 61) && *(_BYTE *)(v41 + 62))
                {
                  v45 = *(double *)(v41 + 16);
                  v46 = *(double *)(v41 + 24);
                  v47 = *(double *)(v41 + 32);
                  v48 = sqrt(v45 * v45 + v46 * v46);
                  v49 = atan2(v47, v48 * 0.996647189);
                  v476 = atan2(v46, v45);
                  v50 = __sincos_stret(v49);
                  v51 = atan2(v47 + v50.__sinval * v50.__sinval * 42841.3115 * v50.__sinval, v48 + v50.__cosval * v50.__cosval * -42697.6727 * v50.__cosval);
                  v52 = tan(v51 * v6 + 0.785398163);
                  v53 = log(v52);
                  v54.f64[0] = v476;
                  v54.f64[1] = v53;
                  *(float64x2_t *)(v41 + 40) = vmlaq_f64(v506, v501, v54);
                  *(_BYTE *)(v41 + 61) = 1;
                }
                v55 = *(double *)(v41 + 48);
                if (*(_BYTE *)(v23 + 61))
                {
                  v56 = 1;
                }
                else
                {
                  v56 = *(unsigned __int8 *)(v23 + 62);
                  if (*(_BYTE *)(v23 + 62))
                  {
                    v57 = *(double *)(v23 + 16);
                    v58 = *(double *)(v23 + 24);
                    v59 = *(double *)(v23 + 32);
                    v60 = sqrt(v57 * v57 + v58 * v58);
                    v61 = atan2(v59, v60 * 0.996647189);
                    v477 = atan2(v58, v57);
                    v62 = __sincos_stret(v61);
                    v63 = v60 + v62.__cosval * v62.__cosval * -42697.6727 * v62.__cosval;
                    v6 = 0.5;
                    v64 = atan2(v59 + v62.__sinval * v62.__sinval * 42841.3115 * v62.__sinval, v63);
                    v65 = tan(v64 * 0.5 + 0.785398163);
                    v66 = log(v65);
                    v67.f64[0] = v477;
                    v67.f64[1] = v66;
                    *(float64x2_t *)(v23 + 40) = vmlaq_f64(v506, v501, v67);
                    v56 = 1;
                    *(_BYTE *)(v23 + 61) = 1;
                  }
                }
                if (v55 != *(double *)(v23 + 48))
                  break;
                if (v41 >= v23)
                  goto LABEL_58;
LABEL_41:
                ++v43;
              }
              if (!*(_BYTE *)(v41 + 61) && *(_BYTE *)(v41 + 62))
              {
                v68 = *(double *)(v41 + 16);
                v69 = *(double *)(v41 + 24);
                v70 = *(double *)(v41 + 32);
                v71 = sqrt(v68 * v68 + v69 * v69);
                v72 = atan2(v70, v71 * 0.996647189);
                v478 = atan2(v69, v68);
                v73 = __sincos_stret(v72);
                v74 = atan2(v70 + v73.__sinval * v73.__sinval * 42841.3115 * v73.__sinval, v71 + v73.__cosval * v73.__cosval * -42697.6727 * v73.__cosval);
                v75 = tan(v74 * v6 + 0.785398163);
                v76 = log(v75);
                v77.f64[0] = v478;
                v77.f64[1] = v76;
                *(float64x2_t *)(v41 + 40) = vmlaq_f64(v506, v501, v77);
                *(_BYTE *)(v41 + 61) = 1;
                v56 = *(unsigned __int8 *)(v23 + 61);
              }
              v78 = *(double *)(v41 + 48);
              if (v56)
              {
                v56 = 1;
              }
              else
              {
                v56 = *(unsigned __int8 *)(v23 + 62);
                if (*(_BYTE *)(v23 + 62))
                {
                  v79 = *(double *)(v23 + 16);
                  v80 = *(double *)(v23 + 24);
                  v81 = *(double *)(v23 + 32);
                  v82 = sqrt(v79 * v79 + v80 * v80);
                  v83 = atan2(v81, v82 * 0.996647189);
                  v479 = atan2(v80, v79);
                  v84 = __sincos_stret(v83);
                  v85 = v82 + v84.__cosval * v84.__cosval * -42697.6727 * v84.__cosval;
                  v6 = 0.5;
                  v86 = atan2(v81 + v84.__sinval * v84.__sinval * 42841.3115 * v84.__sinval, v85);
                  v87 = tan(v86 * 0.5 + 0.785398163);
                  v88 = log(v87);
                  v89.f64[0] = v479;
                  v89.f64[1] = v88;
                  *(float64x2_t *)(v23 + 40) = vmlaq_f64(v506, v501, v89);
                  v56 = 1;
                  *(_BYTE *)(v23 + 61) = 1;
                }
              }
              if (v78 < *(double *)(v23 + 48))
                goto LABEL_41;
LABEL_58:
              v29 = v43 - 1;
              --v44;
              v90 = v56;
LABEL_61:
              v42 = *v44;
              if (!*(_BYTE *)(*v44 + 61) && *(_BYTE *)(v42 + 62))
              {
                v91 = *(double *)(v42 + 16);
                v92 = *(double *)(v42 + 24);
                v93 = *(double *)(v42 + 32);
                v94 = sqrt(v91 * v91 + v92 * v92);
                v95 = atan2(v93, v94 * 0.996647189);
                v480 = atan2(v92, v91);
                v96 = __sincos_stret(v95);
                v97 = atan2(v93 + v96.__sinval * v96.__sinval * 42841.3115 * v96.__sinval, v94 + v96.__cosval * v96.__cosval * -42697.6727 * v96.__cosval);
                v98 = tan(v97 * v6 + 0.785398163);
                v99 = log(v98);
                v100.f64[0] = v480;
                v100.f64[1] = v99;
                *(float64x2_t *)(v42 + 40) = vmlaq_f64(v506, v501, v100);
                *(_BYTE *)(v42 + 61) = 1;
                v56 = *(unsigned __int8 *)(v23 + 61);
                v90 = v56;
              }
              v101 = *(double *)(v42 + 48);
              if (v90)
              {
LABEL_67:
                v90 = 1;
              }
              else
              {
                v90 = *(unsigned __int8 *)(v23 + 62);
                if (*(_BYTE *)(v23 + 62))
                {
                  v102 = *(double *)(v23 + 16);
                  v103 = *(double *)(v23 + 24);
                  v104 = *(double *)(v23 + 32);
                  v105 = sqrt(v102 * v102 + v103 * v103);
                  v106 = atan2(v104, v105 * 0.996647189);
                  v481 = atan2(v103, v102);
                  v107 = __sincos_stret(v106);
                  v108 = v105 + v107.__cosval * v107.__cosval * -42697.6727 * v107.__cosval;
                  v6 = 0.5;
                  v109 = atan2(v104 + v107.__sinval * v107.__sinval * 42841.3115 * v107.__sinval, v108);
                  v110 = tan(v109 * 0.5 + 0.785398163);
                  v111 = log(v110);
                  v112.f64[0] = v481;
                  v112.f64[1] = v111;
                  *(float64x2_t *)(v23 + 40) = vmlaq_f64(v506, v501, v112);
                  v56 = 1;
                  *(_BYTE *)(v23 + 61) = 1;
                  goto LABEL_67;
                }
              }
              if (v101 == *(double *)(v23 + 48))
              {
                if (v42 < v23)
                  continue;
LABEL_60:
                --v44;
                goto LABEL_61;
              }
              if (!*(_BYTE *)(v42 + 61) && *(_BYTE *)(v42 + 62))
              {
                v113 = *(double *)(v42 + 16);
                v114 = *(double *)(v42 + 24);
                v115 = *(double *)(v42 + 32);
                v116 = sqrt(v113 * v113 + v114 * v114);
                v117 = atan2(v115, v116 * 0.996647189);
                v482 = atan2(v114, v113);
                v118 = __sincos_stret(v117);
                v119 = atan2(v115 + v118.__sinval * v118.__sinval * 42841.3115 * v118.__sinval, v116 + v118.__cosval * v118.__cosval * -42697.6727 * v118.__cosval);
                v120 = tan(v119 * v6 + 0.785398163);
                v121 = log(v120);
                v122.f64[0] = v482;
                v122.f64[1] = v121;
                *(float64x2_t *)(v42 + 40) = vmlaq_f64(v506, v501, v122);
                *(_BYTE *)(v42 + 61) = 1;
                v56 = *(unsigned __int8 *)(v23 + 61);
              }
              v123 = *(double *)(v42 + 48);
              if (v56)
              {
                v56 = 1;
              }
              else
              {
                v56 = *(unsigned __int8 *)(v23 + 62);
                if (*(_BYTE *)(v23 + 62))
                {
                  v124 = *(double *)(v23 + 16);
                  v125 = *(double *)(v23 + 24);
                  v126 = *(double *)(v23 + 32);
                  v127 = sqrt(v124 * v124 + v125 * v125);
                  v128 = atan2(v126, v127 * 0.996647189);
                  v483 = atan2(v125, v124);
                  v129 = __sincos_stret(v128);
                  v130 = v127 + v129.__cosval * v129.__cosval * -42697.6727 * v129.__cosval;
                  v6 = 0.5;
                  v131 = atan2(v126 + v129.__sinval * v129.__sinval * 42841.3115 * v129.__sinval, v130);
                  v132 = tan(v131 * 0.5 + 0.785398163);
                  v133 = log(v132);
                  v134.f64[0] = v483;
                  v134.f64[1] = v133;
                  *(float64x2_t *)(v23 + 40) = vmlaq_f64(v506, v501, v134);
                  v56 = 1;
                  *(_BYTE *)(v23 + 61) = 1;
                }
              }
              v90 = v56;
              if (v123 >= *(double *)(v23 + 48))
                goto LABEL_60;
            }
            while (v43 < v44);
          }
          if (v29 != a1)
            *a1 = *v29;
          *v29 = v23;
          _CF = v22 >= k;
          a3 = v463;
          v10 = a2;
          v11 = a2 - 1;
          if (!_CF)
            goto LABEL_84;
          v135 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(a1, v29);
          i = v29 + 1;
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(v29 + 1, a2))
          {
            if (v135)
              continue;
LABEL_84:
            std::__introsort<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **,false>(a1, v29, v463, a4 & 1);
            a4 = 0;
            i = v29 + 1;
            continue;
          }
          a2 = v29;
          if (v135)
            return;
          goto LABEL_2;
        }
        v245 = i + 1;
        _ZF = i == a2 || v245 == a2;
        v247 = _ZF;
        if ((a4 & 1) != 0)
        {
          if ((v247 & 1) != 0)
            return;
          v248 = 0;
          v502 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
          v249 = i;
LABEL_171:
          v251 = a1;
          v252 = v249;
          v249 = v245;
          v254 = *v252;
          v253 = v252[1];
          v255 = *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v253 + 16)) + 8);
          if (v255 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v254 + 16)) + 8))
          {
            _CF = v253 >= v254;
            a1 = v251;
            if (_CF)
              goto LABEL_170;
          }
          else
          {
            v256 = *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v253 + 16)) + 8);
            v257 = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v254 + 16));
            a1 = v251;
            if (v256 >= *(double *)(v257 + 8))
              goto LABEL_170;
          }
          v258 = v252[1];
          v252[1] = *v252;
          v250 = a1;
          if (v252 == a1)
            goto LABEL_169;
          v259 = v248;
          while (1)
          {
            v260 = *(unint64_t *)((char *)a1 + v259 - 8);
            if (!*(_BYTE *)(v258 + 61) && *(_BYTE *)(v258 + 62))
            {
              v261 = *(double *)(v258 + 16);
              v262 = *(double *)(v258 + 24);
              v263 = *(double *)(v258 + 32);
              v264 = sqrt(v261 * v261 + v262 * v262);
              v265 = atan2(v263, v264 * 0.996647189);
              v492 = atan2(v262, v261);
              v266 = __sincos_stret(v265);
              v267 = atan2(v263 + v266.__sinval * v266.__sinval * 42841.3115 * v266.__sinval, v264 + v266.__cosval * v266.__cosval * -42697.6727 * v266.__cosval);
              v268 = tan(v267 * 0.5 + 0.785398163);
              v269 = log(v268);
              v270.f64[0] = v492;
              v270.f64[1] = v269;
              *(float64x2_t *)(v258 + 40) = vmlaq_f64(v506, v502, v270);
              *(_BYTE *)(v258 + 61) = 1;
            }
            v271 = *(double *)(v258 + 48);
            if (*(_BYTE *)(v260 + 61))
            {
              v272 = 1;
            }
            else
            {
              v272 = *(unsigned __int8 *)(v260 + 62);
              if (*(_BYTE *)(v260 + 62))
              {
                v273 = *(double *)(v260 + 16);
                v274 = *(double *)(v260 + 24);
                v275 = *(double *)(v260 + 32);
                v276 = sqrt(v273 * v273 + v274 * v274);
                v277 = atan2(v275, v276 * 0.996647189);
                v493 = atan2(v274, v273);
                v278 = __sincos_stret(v277);
                v279 = atan2(v275 + v278.__sinval * v278.__sinval * 42841.3115 * v278.__sinval, v276 + v278.__cosval * v278.__cosval * -42697.6727 * v278.__cosval);
                v280 = tan(v279 * 0.5 + 0.785398163);
                v281 = log(v280);
                v282.f64[0] = v493;
                v282.f64[1] = v281;
                *(float64x2_t *)(v260 + 40) = vmlaq_f64(v506, v502, v282);
                v272 = 1;
                *(_BYTE *)(v260 + 61) = 1;
              }
            }
            if (v271 == *(double *)(v260 + 48))
            {
              if (v258 >= v260)
              {
                v250 = v252;
LABEL_169:
                *v250 = v258;
LABEL_170:
                v245 = v249 + 1;
                v248 += 8;
                if (v249 + 1 == a2)
                  return;
                goto LABEL_171;
              }
            }
            else
            {
              if (!*(_BYTE *)(v258 + 61) && *(_BYTE *)(v258 + 62))
              {
                v283 = *(double *)(v258 + 16);
                v284 = *(double *)(v258 + 24);
                v285 = *(double *)(v258 + 32);
                v286 = sqrt(v283 * v283 + v284 * v284);
                v287 = atan2(v285, v286 * 0.996647189);
                v494 = atan2(v284, v283);
                v288 = __sincos_stret(v287);
                v289 = atan2(v285 + v288.__sinval * v288.__sinval * 42841.3115 * v288.__sinval, v286 + v288.__cosval * v288.__cosval * -42697.6727 * v288.__cosval);
                v290 = tan(v289 * 0.5 + 0.785398163);
                v291 = log(v290);
                v292.f64[0] = v494;
                v292.f64[1] = v291;
                *(float64x2_t *)(v258 + 40) = vmlaq_f64(v506, v502, v292);
                *(_BYTE *)(v258 + 61) = 1;
                v272 = *(unsigned __int8 *)(v260 + 61);
              }
              v293 = *(double *)(v258 + 48);
              if (!v272 && *(_BYTE *)(v260 + 62))
              {
                v294 = *(double *)(v260 + 16);
                v295 = *(double *)(v260 + 24);
                v296 = *(double *)(v260 + 32);
                v297 = sqrt(v294 * v294 + v295 * v295);
                v298 = atan2(v296, v297 * 0.996647189);
                v495 = atan2(v295, v294);
                v299 = __sincos_stret(v298);
                v300 = atan2(v296 + v299.__sinval * v299.__sinval * 42841.3115 * v299.__sinval, v297 + v299.__cosval * v299.__cosval * -42697.6727 * v299.__cosval);
                v301 = tan(v300 * 0.5 + 0.785398163);
                v302 = log(v301);
                v303.f64[0] = v495;
                v303.f64[1] = v302;
                *(float64x2_t *)(v260 + 40) = vmlaq_f64(v506, v502, v303);
                *(_BYTE *)(v260 + 61) = 1;
              }
              if (v293 >= *(double *)(v260 + 48))
              {
                v250 = (unint64_t *)((char *)a1 + v259);
                goto LABEL_169;
              }
            }
            --v252;
            *(unint64_t *)((char *)a1 + v259) = v260;
            v259 -= 8;
            if (!v259)
            {
              v250 = a1;
              goto LABEL_169;
            }
          }
        }
        if ((v247 & 1) == 0)
        {
          v505 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
          do
          {
            v402 = a1;
            v403 = v245;
            v406 = a1;
            v405 = *a1;
            v404 = v406[1];
            v407 = *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v404 + 16)) + 8);
            if (v407 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v405 + 16)) + 8))
            {
              _CF = v404 >= v405;
              a1 = v403;
              if (!_CF)
                goto LABEL_273;
            }
            else
            {
              v408 = *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v404 + 16)) + 8);
              v409 = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v405 + 16));
              a1 = v403;
              if (v408 < *(double *)(v409 + 8))
              {
LABEL_273:
                v410 = *a1;
                v411 = *v402;
                do
                {
                  while (1)
                  {
                    v412 = v402;
                    v413 = v411;
                    v414 = *--v402;
                    v411 = v414;
                    v402[2] = v413;
                    if (!*(_BYTE *)(v410 + 61) && *(_BYTE *)(v410 + 62))
                    {
                      v415 = *(double *)(v410 + 16);
                      v416 = *(double *)(v410 + 24);
                      v417 = *(double *)(v410 + 32);
                      v418 = sqrt(v415 * v415 + v416 * v416);
                      v419 = atan2(v417, v418 * 0.996647189);
                      v497 = atan2(v416, v415);
                      v420 = __sincos_stret(v419);
                      v421 = atan2(v417 + v420.__sinval * v420.__sinval * 42841.3115 * v420.__sinval, v418 + v420.__cosval * v420.__cosval * -42697.6727 * v420.__cosval);
                      v422 = tan(v421 * 0.5 + 0.785398163);
                      v423 = log(v422);
                      v424.f64[0] = v497;
                      v424.f64[1] = v423;
                      *(float64x2_t *)(v410 + 40) = vmlaq_f64(v506, v505, v424);
                      *(_BYTE *)(v410 + 61) = 1;
                    }
                    v425 = *(double *)(v410 + 48);
                    if (*(_BYTE *)(v411 + 61))
                    {
                      v426 = 1;
                    }
                    else
                    {
                      v426 = *(unsigned __int8 *)(v411 + 62);
                      if (*(_BYTE *)(v411 + 62))
                      {
                        v427 = *(double *)(v411 + 16);
                        v428 = *(double *)(v411 + 24);
                        v429 = *(double *)(v411 + 32);
                        v430 = sqrt(v427 * v427 + v428 * v428);
                        v431 = atan2(v429, v430 * 0.996647189);
                        v498 = atan2(v428, v427);
                        v432 = __sincos_stret(v431);
                        v433 = atan2(v429 + v432.__sinval * v432.__sinval * 42841.3115 * v432.__sinval, v430 + v432.__cosval * v432.__cosval * -42697.6727 * v432.__cosval);
                        v434 = tan(v433 * 0.5 + 0.785398163);
                        v435 = log(v434);
                        v436.f64[0] = v498;
                        v436.f64[1] = v435;
                        *(float64x2_t *)(v411 + 40) = vmlaq_f64(v506, v505, v436);
                        v426 = 1;
                        *(_BYTE *)(v411 + 61) = 1;
                      }
                    }
                    if (v425 != *(double *)(v411 + 48))
                      break;
                    if (v410 >= v411)
                      goto LABEL_267;
                  }
                  if (!*(_BYTE *)(v410 + 61) && *(_BYTE *)(v410 + 62))
                  {
                    v437 = *(double *)(v410 + 16);
                    v438 = *(double *)(v410 + 24);
                    v439 = *(double *)(v410 + 32);
                    v440 = sqrt(v437 * v437 + v438 * v438);
                    v441 = atan2(v439, v440 * 0.996647189);
                    v499 = atan2(v438, v437);
                    v442 = __sincos_stret(v441);
                    v443 = atan2(v439 + v442.__sinval * v442.__sinval * 42841.3115 * v442.__sinval, v440 + v442.__cosval * v442.__cosval * -42697.6727 * v442.__cosval);
                    v444 = tan(v443 * 0.5 + 0.785398163);
                    v445 = log(v444);
                    v446.f64[0] = v499;
                    v446.f64[1] = v445;
                    *(float64x2_t *)(v410 + 40) = vmlaq_f64(v506, v505, v446);
                    *(_BYTE *)(v410 + 61) = 1;
                    v426 = *(unsigned __int8 *)(v411 + 61);
                  }
                  v447 = *(double *)(v410 + 48);
                  if (!v426 && *(_BYTE *)(v411 + 62))
                  {
                    v448 = *(double *)(v411 + 16);
                    v449 = *(double *)(v411 + 24);
                    v450 = *(double *)(v411 + 32);
                    v451 = sqrt(v448 * v448 + v449 * v449);
                    v452 = atan2(v450, v451 * 0.996647189);
                    v500 = atan2(v449, v448);
                    v453 = __sincos_stret(v452);
                    v454 = atan2(v450 + v453.__sinval * v453.__sinval * 42841.3115 * v453.__sinval, v451 + v453.__cosval * v453.__cosval * -42697.6727 * v453.__cosval);
                    v455 = tan(v454 * 0.5 + 0.785398163);
                    v456 = log(v455);
                    v457.f64[0] = v500;
                    v457.f64[1] = v456;
                    *(float64x2_t *)(v411 + 40) = vmlaq_f64(v506, v505, v457);
                    *(_BYTE *)(v411 + 61) = 1;
                  }
                }
                while (v447 < *(double *)(v411 + 48));
LABEL_267:
                *v412 = v410;
              }
            }
            v245 = a1 + 1;
          }
          while (a1 + 1 != a2);
        }
        return;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, char a4)
{
  double v6;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *i;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  unint64_t *v22;
  unint64_t v23;
  md::LabelPoint *v24;
  double v25;
  unint64_t v26;
  md::LabelPoint *v27;
  double v28;
  unint64_t *v29;
  unint64_t *k;
  double v31;
  unint64_t v32;
  md::LabelPoint *v33;
  double v34;
  double v35;
  unint64_t v37;
  md::LabelPoint *v38;
  double v39;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t *v44;
  long double v45;
  long double v46;
  long double v47;
  double v48;
  double v49;
  __double2 v50;
  long double v51;
  long double v52;
  long double v53;
  float64x2_t v54;
  double v55;
  int v56;
  long double v57;
  long double v58;
  long double v59;
  double v60;
  double v61;
  __double2 v62;
  long double v63;
  long double v64;
  long double v65;
  long double v66;
  float64x2_t v67;
  long double v68;
  long double v69;
  long double v70;
  double v71;
  double v72;
  __double2 v73;
  long double v74;
  long double v75;
  long double v76;
  float64x2_t v77;
  double v78;
  long double v79;
  long double v80;
  long double v81;
  double v82;
  double v83;
  __double2 v84;
  long double v85;
  long double v86;
  long double v87;
  long double v88;
  float64x2_t v89;
  int v90;
  long double v91;
  long double v92;
  long double v93;
  double v94;
  double v95;
  __double2 v96;
  long double v97;
  long double v98;
  long double v99;
  float64x2_t v100;
  double v101;
  long double v102;
  long double v103;
  long double v104;
  double v105;
  double v106;
  __double2 v107;
  long double v108;
  long double v109;
  long double v110;
  long double v111;
  float64x2_t v112;
  long double v113;
  long double v114;
  long double v115;
  double v116;
  double v117;
  __double2 v118;
  long double v119;
  long double v120;
  long double v121;
  float64x2_t v122;
  double v123;
  long double v124;
  long double v125;
  long double v126;
  double v127;
  double v128;
  __double2 v129;
  long double v130;
  long double v131;
  long double v132;
  long double v133;
  float64x2_t v134;
  BOOL v135;
  double v136;
  unint64_t v137;
  unint64_t v138;
  md::LabelPoint *v139;
  double v140;
  double v141;
  unint64_t v142;
  double v143;
  double v144;
  double v145;
  unint64_t *v146;
  unint64_t v147;
  double v148;
  uint64_t v149;
  unint64_t *j;
  double v151;
  unint64_t v152;
  double v153;
  unint64_t v154;
  unint64_t v155;
  long double v156;
  long double v157;
  long double v158;
  double v159;
  double v160;
  __double2 v161;
  long double v162;
  long double v163;
  long double v164;
  float64x2_t v165;
  double v166;
  int v167;
  long double v168;
  long double v169;
  long double v170;
  double v171;
  __double2 v172;
  long double v173;
  long double v174;
  long double v175;
  float64x2_t v176;
  long double v177;
  long double v178;
  long double v179;
  double v180;
  double v181;
  __double2 v182;
  long double v183;
  long double v184;
  long double v185;
  float64x2_t v186;
  double v187;
  long double v188;
  long double v189;
  long double v190;
  double v191;
  __double2 v192;
  long double v193;
  long double v194;
  long double v195;
  float64x2_t v196;
  unint64_t v197;
  long double v198;
  long double v199;
  long double v200;
  double v201;
  double v202;
  __double2 v203;
  long double v204;
  long double v205;
  long double v206;
  float64x2_t v207;
  double v208;
  int v209;
  long double v210;
  long double v211;
  long double v212;
  double v213;
  __double2 v214;
  long double v215;
  long double v216;
  long double v217;
  float64x2_t v218;
  long double v219;
  long double v220;
  long double v221;
  double v222;
  double v223;
  __double2 v224;
  long double v225;
  long double v226;
  long double v227;
  float64x2_t v228;
  double v229;
  long double v230;
  long double v231;
  long double v232;
  double v233;
  __double2 v234;
  long double v235;
  long double v236;
  long double v237;
  float64x2_t v238;
  unint64_t *v239;
  unint64_t v240;
  unint64_t v241;
  md::LabelPoint *v242;
  double v243;
  unint64_t *v244;
  unint64_t *v245;
  char v247;
  uint64_t v248;
  unint64_t *v249;
  unint64_t *v250;
  unint64_t *v251;
  unint64_t *v252;
  unint64_t v253;
  unint64_t v254;
  double v255;
  double v256;
  double v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  long double v261;
  long double v262;
  long double v263;
  double v264;
  double v265;
  __double2 v266;
  long double v267;
  long double v268;
  long double v269;
  float64x2_t v270;
  double v271;
  int v272;
  long double v273;
  long double v274;
  long double v275;
  double v276;
  double v277;
  __double2 v278;
  long double v279;
  long double v280;
  long double v281;
  float64x2_t v282;
  long double v283;
  long double v284;
  long double v285;
  double v286;
  double v287;
  __double2 v288;
  long double v289;
  long double v290;
  long double v291;
  float64x2_t v292;
  double v293;
  long double v294;
  long double v295;
  long double v296;
  double v297;
  double v298;
  __double2 v299;
  long double v300;
  long double v301;
  long double v302;
  float64x2_t v303;
  int64_t v304;
  int64_t v305;
  unint64_t *v306;
  int64_t v307;
  uint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  unint64_t v311;
  md::LabelPoint *v312;
  double v313;
  unint64_t v314;
  unint64_t v315;
  md::LabelPoint *v316;
  double v317;
  double v318;
  unint64_t v319;
  double v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  unint64_t v324;
  md::LabelPoint *v325;
  double v326;
  unint64_t v327;
  md::LabelPoint *v328;
  double v329;
  double v330;
  double v331;
  unint64_t *v332;
  uint64_t v333;
  uint64_t v335;
  unint64_t *v336;
  unint64_t *v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  long double v342;
  long double v343;
  long double v344;
  double v345;
  double v346;
  __double2 v347;
  long double v348;
  long double v349;
  long double v350;
  float64x2_t v351;
  double v352;
  int v353;
  long double v354;
  long double v355;
  long double v356;
  double v357;
  double v358;
  __double2 v359;
  long double v360;
  long double v361;
  long double v362;
  float64x2_t v363;
  long double v364;
  long double v365;
  long double v366;
  double v367;
  double v368;
  __double2 v369;
  long double v370;
  long double v371;
  long double v372;
  float64x2_t v373;
  double v374;
  long double v375;
  long double v376;
  long double v377;
  double v378;
  double v379;
  __double2 v380;
  long double v381;
  long double v382;
  long double v383;
  float64x2_t v384;
  unint64_t *v385;
  uint64_t v386;
  unint64_t v387;
  unint64_t v388;
  unint64_t *v389;
  unint64_t v390;
  unint64_t v391;
  md::LabelPoint *v392;
  double v393;
  double v394;
  unint64_t v395;
  double v396;
  unint64_t v397;
  unint64_t *v398;
  unint64_t v399;
  md::LabelPoint *v400;
  double v401;
  unint64_t *v402;
  unint64_t *v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t *v406;
  double v407;
  double v408;
  double v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t *v412;
  unint64_t v413;
  unint64_t v414;
  long double v415;
  long double v416;
  long double v417;
  double v418;
  double v419;
  __double2 v420;
  long double v421;
  long double v422;
  long double v423;
  float64x2_t v424;
  double v425;
  int v426;
  long double v427;
  long double v428;
  long double v429;
  double v430;
  double v431;
  __double2 v432;
  long double v433;
  long double v434;
  long double v435;
  float64x2_t v436;
  long double v437;
  long double v438;
  long double v439;
  double v440;
  double v441;
  __double2 v442;
  long double v443;
  long double v444;
  long double v445;
  float64x2_t v446;
  double v447;
  long double v448;
  long double v449;
  long double v450;
  double v451;
  double v452;
  __double2 v453;
  long double v454;
  long double v455;
  long double v456;
  float64x2_t v457;
  double v458;
  double v459;
  unint64_t v460;
  unint64_t v461;
  unint64_t v462;
  uint64_t v463;
  int64_t v464;
  unint64_t v465;
  double v468;
  double v469;
  double v470;
  double v471;
  long double v472;
  long double v473;
  long double v474;
  long double v475;
  long double v476;
  long double v477;
  long double v478;
  long double v479;
  long double v480;
  long double v481;
  long double v482;
  long double v483;
  long double v484;
  long double v485;
  long double v486;
  long double v487;
  long double v488;
  long double v489;
  long double v490;
  long double v491;
  long double v492;
  long double v493;
  long double v494;
  long double v495;
  unint64_t *v496;
  long double v497;
  long double v498;
  long double v499;
  long double v500;
  float64x2_t v501;
  float64x2_t v502;
  md::LabelPoint *v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;

  v6 = 0.5;
  __asm { FMOV            V0.2D, #0.5 }
  v501 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
  v506 = _Q0;
LABEL_2:
  v10 = a2;
  v11 = a2 - 1;
  i = a1;
  while (2)
  {
    a1 = i;
    v13 = (char *)v10 - (char *)i;
    v14 = v10 - i;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v240 = *v11;
        v241 = *i;
        v242 = (md::LabelPoint *)(*v11 + 16);
        v243 = *(double *)md::LabelPoint::mercatorPoint(v242);
        if (v243 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v241 + 16)))
        {
          v244 = a2 - 1;
          if (v240 >= v241)
            return;
        }
        else
        {
          v458 = *(double *)md::LabelPoint::mercatorPoint(v242);
          v459 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v241 + 16));
          v244 = a2 - 1;
          if (v458 >= v459)
            return;
        }
        v460 = *i;
        *i = *v244;
        *v244 = v460;
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(i, i + 1, v11);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(i, i + 1, i + 2, v11);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(i, i + 1, i + 2, i + 3, v11);
        return;
      default:
        if (v13 > 191)
        {
          if (!a3)
          {
            if (i != a2)
            {
              v461 = v13;
              v496 = i;
              v304 = (v14 - 2) >> 1;
              v305 = v304;
              while (1)
              {
                v307 = v305;
                if (v304 < v305)
                  goto LABEL_200;
                v464 = v305;
                v308 = (2 * v305) | 1;
                v309 = &v496[v308];
                if (2 * v305 + 2 < (uint64_t)v14)
                {
                  v310 = *v309;
                  v311 = v309[1];
                  v312 = (md::LabelPoint *)(*v309 + 16);
                  v313 = *(double *)md::LabelPoint::mercatorPoint(v312);
                  if (v313 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v311 + 16)))
                  {
                    if (v310 >= v311)
                      goto LABEL_206;
LABEL_205:
                    ++v309;
                    v308 = 2 * v307 + 2;
                    goto LABEL_206;
                  }
                  v331 = *(double *)md::LabelPoint::mercatorPoint(v312);
                  if (v331 < *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v311 + 16)))
                    goto LABEL_205;
                }
LABEL_206:
                v314 = *v309;
                v315 = v496[v307];
                v316 = (md::LabelPoint *)(*v309 + 16);
                v317 = *(double *)md::LabelPoint::mercatorPoint(v316);
                if (v317 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v315 + 16)))
                {
                  _CF = v314 >= v315;
                  v304 = (v14 - 2) >> 1;
                  if (_CF)
                    goto LABEL_211;
                }
                else
                {
                  v318 = *(double *)md::LabelPoint::mercatorPoint(v316);
                  v304 = (v14 - 2) >> 1;
                  if (v318 >= *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v315 + 16)))
                  {
LABEL_211:
                    v319 = v496[v464];
                    v496[v464] = *v309;
                    if (v304 < v308)
                    {
LABEL_198:
                      v306 = v309;
LABEL_199:
                      *v306 = v319;
                      v307 = v464;
                      goto LABEL_200;
                    }
                    v503 = (md::LabelPoint *)(v319 + 16);
                    v462 = v319;
                    while (2)
                    {
                      v321 = 2 * v308;
                      v308 = (2 * v308) | 1;
                      v306 = &v496[v308];
                      v322 = v321 + 2;
                      if (v321 + 2 < (uint64_t)v14)
                      {
                        v323 = *v306;
                        v324 = v306[1];
                        v325 = (md::LabelPoint *)(*v306 + 16);
                        v326 = *(double *)md::LabelPoint::mercatorPoint(v325);
                        if (v326 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v324 + 16)))
                        {
                          _CF = v323 >= v324;
                          v304 = (v14 - 2) >> 1;
                          v319 = v462;
                          if (!_CF)
                            goto LABEL_218;
                        }
                        else
                        {
                          v330 = *(double *)md::LabelPoint::mercatorPoint(v325);
                          v304 = (v14 - 2) >> 1;
                          v319 = v462;
                          if (v330 < *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v324 + 16)))
                          {
LABEL_218:
                            ++v306;
                            v308 = v322;
                          }
                        }
                      }
                      v327 = *v306;
                      v328 = (md::LabelPoint *)(*v306 + 16);
                      v329 = *(double *)md::LabelPoint::mercatorPoint(v328);
                      if (v329 == *(double *)md::LabelPoint::mercatorPoint(v503))
                      {
                        if (v327 < v319)
                          goto LABEL_198;
                      }
                      else
                      {
                        v320 = *(double *)md::LabelPoint::mercatorPoint(v328);
                        if (v320 < *(double *)md::LabelPoint::mercatorPoint(v503))
                          goto LABEL_198;
                      }
                      *v309 = *v306;
                      v309 = v306;
                      if (v304 < v308)
                        goto LABEL_199;
                      continue;
                    }
                  }
                }
LABEL_200:
                v305 = v307 - 1;
                if (!v307)
                {
                  v332 = v496;
                  v333 = v461 >> 3;
                  v504 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
                  while (1)
                  {
                    v335 = 0;
                    v465 = *v332;
                    v336 = v332;
                    do
                    {
                      v337 = v336;
                      v336 += v335 + 1;
                      v338 = 2 * v335;
                      v335 = (2 * v335) | 1;
                      v339 = v338 + 2;
                      if (v338 + 2 < v333)
                      {
                        v340 = *v336;
                        v341 = v336[1];
                        if (!*(_BYTE *)(*v336 + 61) && *(_BYTE *)(v340 + 62))
                        {
                          v342 = *(double *)(v340 + 16);
                          v343 = *(double *)(v340 + 24);
                          v344 = *(double *)(v340 + 32);
                          v345 = sqrt(v342 * v342 + v343 * v343);
                          v346 = atan2(v344, v345 * 0.996647189);
                          v472 = atan2(v343, v342);
                          v347 = __sincos_stret(v346);
                          v348 = atan2(v344 + v347.__sinval * v347.__sinval * 42841.3115 * v347.__sinval, v345 + v347.__cosval * v347.__cosval * -42697.6727 * v347.__cosval);
                          v349 = tan(v348 * 0.5 + 0.785398163);
                          v350 = log(v349);
                          v351.f64[0] = v472;
                          v351.f64[1] = v350;
                          *(float64x2_t *)(v340 + 40) = vmlaq_f64(v506, v504, v351);
                          *(_BYTE *)(v340 + 61) = 1;
                        }
                        v352 = *(double *)(v340 + 40);
                        if (*(_BYTE *)(v341 + 61))
                        {
                          v353 = 1;
                        }
                        else
                        {
                          v353 = *(unsigned __int8 *)(v341 + 62);
                          if (*(_BYTE *)(v341 + 62))
                          {
                            v354 = *(double *)(v341 + 16);
                            v355 = *(double *)(v341 + 24);
                            v356 = *(double *)(v341 + 32);
                            v357 = sqrt(v354 * v354 + v355 * v355);
                            v358 = atan2(v356, v357 * 0.996647189);
                            v473 = atan2(v355, v354);
                            v359 = __sincos_stret(v358);
                            v360 = atan2(v356 + v359.__sinval * v359.__sinval * 42841.3115 * v359.__sinval, v357 + v359.__cosval * v359.__cosval * -42697.6727 * v359.__cosval);
                            v361 = tan(v360 * 0.5 + 0.785398163);
                            v362 = log(v361);
                            v363.f64[0] = v473;
                            v363.f64[1] = v362;
                            *(float64x2_t *)(v341 + 40) = vmlaq_f64(v506, v504, v363);
                            v353 = 1;
                            *(_BYTE *)(v341 + 61) = 1;
                          }
                        }
                        if (v352 == *(double *)(v341 + 40))
                        {
                          if (v340 < v341)
                            goto LABEL_230;
                        }
                        else
                        {
                          if (!*(_BYTE *)(v340 + 61) && *(_BYTE *)(v340 + 62))
                          {
                            v364 = *(double *)(v340 + 16);
                            v365 = *(double *)(v340 + 24);
                            v366 = *(double *)(v340 + 32);
                            v367 = sqrt(v364 * v364 + v365 * v365);
                            v368 = atan2(v366, v367 * 0.996647189);
                            v474 = atan2(v365, v364);
                            v369 = __sincos_stret(v368);
                            v370 = atan2(v366 + v369.__sinval * v369.__sinval * 42841.3115 * v369.__sinval, v367 + v369.__cosval * v369.__cosval * -42697.6727 * v369.__cosval);
                            v371 = tan(v370 * 0.5 + 0.785398163);
                            v372 = log(v371);
                            v373.f64[0] = v474;
                            v373.f64[1] = v372;
                            *(float64x2_t *)(v340 + 40) = vmlaq_f64(v506, v504, v373);
                            *(_BYTE *)(v340 + 61) = 1;
                            v353 = *(unsigned __int8 *)(v341 + 61);
                          }
                          v374 = *(double *)(v340 + 40);
                          if (!v353 && *(_BYTE *)(v341 + 62))
                          {
                            v375 = *(double *)(v341 + 16);
                            v376 = *(double *)(v341 + 24);
                            v377 = *(double *)(v341 + 32);
                            v378 = sqrt(v375 * v375 + v376 * v376);
                            v379 = atan2(v377, v378 * 0.996647189);
                            v475 = atan2(v376, v375);
                            v380 = __sincos_stret(v379);
                            v381 = atan2(v377 + v380.__sinval * v380.__sinval * 42841.3115 * v380.__sinval, v378 + v380.__cosval * v380.__cosval * -42697.6727 * v380.__cosval);
                            v382 = tan(v381 * 0.5 + 0.785398163);
                            v383 = log(v382);
                            v384.f64[0] = v475;
                            v384.f64[1] = v383;
                            *(float64x2_t *)(v341 + 40) = vmlaq_f64(v506, v504, v384);
                            *(_BYTE *)(v341 + 61) = 1;
                          }
                          if (v374 < *(double *)(v341 + 40))
                          {
LABEL_230:
                            ++v336;
                            v335 = v339;
                          }
                        }
                      }
                      *v337 = *v336;
                    }
                    while (v335 <= (uint64_t)((unint64_t)(v333 - 2) >> 1));
                    v385 = a2 - 1;
                    _ZF = v336 == --a2;
                    if (_ZF)
                    {
                      *v336 = v465;
                    }
                    else
                    {
                      *v336 = *v385;
                      *v385 = v465;
                      v386 = (char *)v336 - (char *)v332 + 8;
                      if (v386 >= 9)
                      {
                        v387 = (v386 >> 3) - 2;
                        v388 = v387 >> 1;
                        v389 = &v332[v387 >> 1];
                        v390 = *v389;
                        v391 = *v336;
                        v392 = (md::LabelPoint *)(*v389 + 16);
                        v393 = *(double *)md::LabelPoint::mercatorPoint(v392);
                        if (v393 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v391 + 16)))
                        {
                          _CF = v390 >= v391;
                          v332 = v496;
                          if (!_CF)
                          {
LABEL_257:
                            v395 = *v336;
                            *v336 = *v389;
                            if (v387 >= 2)
                            {
                              while (1)
                              {
                                v397 = v388 - 1;
                                v388 = (v388 - 1) >> 1;
                                v398 = &v496[v388];
                                v399 = *v398;
                                v400 = (md::LabelPoint *)(*v398 + 16);
                                v401 = *(double *)md::LabelPoint::mercatorPoint(v400);
                                if (v401 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v395 + 16)))
                                {
                                  if (v399 >= v395)
                                    break;
                                }
                                else
                                {
                                  v396 = *(double *)md::LabelPoint::mercatorPoint(v400);
                                  if (v396 >= *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v395 + 16)))
                                    break;
                                }
                                *v389 = *v398;
                                v389 = &v496[v388];
                                if (v397 <= 1)
                                  goto LABEL_264;
                              }
                            }
                            v398 = v389;
LABEL_264:
                            *v398 = v395;
                            v332 = v496;
                          }
                        }
                        else
                        {
                          v394 = *(double *)md::LabelPoint::mercatorPoint(v392);
                          v332 = v496;
                          if (v394 < *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v391 + 16)))
                            goto LABEL_257;
                        }
                      }
                    }
                    if (v333-- <= 2)
                      return;
                  }
                }
              }
            }
            return;
          }
          v15 = &i[v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(&a1[v14 >> 1], a1, v11);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(a1, &a1[v14 >> 1], v11);
            v16 = v14 >> 1;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(a1 + 1, &a1[v16 - 1], a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(a1 + 2, &a1[v16 + 1], a2 - 3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(&a1[v16 - 1], v15, &a1[v16 + 1]);
            v17 = *a1;
            *a1 = a1[v16];
            a1[v16] = v17;
          }
          v18 = a3 - 1;
          if ((a4 & 1) == 0)
          {
            v19 = *(a1 - 1);
            v20 = *a1;
            v21 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v19 + 16));
            if (v21 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v20 + 16)))
            {
              if (v19 < v20)
                goto LABEL_12;
            }
            else
            {
              v136 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v19 + 16));
              if (v136 < *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v20 + 16)))
                goto LABEL_12;
            }
            v137 = *a1;
            v138 = *v11;
            v139 = (md::LabelPoint *)(*a1 + 16);
            v140 = *(double *)md::LabelPoint::mercatorPoint(v139);
            if (v140 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v138 + 16)))
            {
              if (v137 < v138)
                goto LABEL_88;
            }
            else
            {
              v144 = *(double *)md::LabelPoint::mercatorPoint(v139);
              if (v144 < *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v138 + 16)))
              {
LABEL_88:
                for (i = a1 + 1; ; ++i)
                {
                  v142 = *i;
                  v143 = *(double *)md::LabelPoint::mercatorPoint(v139);
                  if (v143 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v142 + 16)))
                  {
                    if (v137 < v142)
                      goto LABEL_101;
                  }
                  else
                  {
                    v141 = *(double *)md::LabelPoint::mercatorPoint(v139);
                    if (v141 < *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v142 + 16)))
                      goto LABEL_101;
                  }
                }
              }
            }
            for (i = a1 + 1; ; ++i)
            {
              v146 = a2;
              if (i >= a2)
                break;
              v147 = *i;
              v148 = *(double *)md::LabelPoint::mercatorPoint(v139);
              if (v148 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v147 + 16)))
              {
                if (v137 < v147)
                {
LABEL_101:
                  v146 = a2;
                  break;
                }
              }
              else
              {
                v145 = *(double *)md::LabelPoint::mercatorPoint(v139);
                if (v145 < *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v147 + 16)))
                  goto LABEL_101;
              }
            }
            v149 = v18;
            j = v146;
            if (i < v146)
            {
              for (j = v11; ; --j)
              {
                v152 = *j;
                v153 = *(double *)md::LabelPoint::mercatorPoint(v139);
                if (v153 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v152 + 16)))
                {
                  if (v137 >= v152)
                    break;
                }
                else
                {
                  v151 = *(double *)md::LabelPoint::mercatorPoint(v139);
                  if (v151 >= *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v152 + 16)))
                    break;
                }
              }
            }
            if (i < j)
            {
              v154 = *i;
              v155 = *j;
              do
              {
                *i++ = v155;
                *j = v154;
                while (1)
                {
                  v154 = *i;
                  if (!*(_BYTE *)(v137 + 61) && *(_BYTE *)(v137 + 62))
                  {
                    v156 = *(double *)(v137 + 16);
                    v157 = *(double *)(v137 + 24);
                    v158 = *(double *)(v137 + 32);
                    v159 = sqrt(v156 * v156 + v157 * v157);
                    v160 = atan2(v158, v159 * 0.996647189);
                    v484 = atan2(v157, v156);
                    v161 = __sincos_stret(v160);
                    v162 = atan2(v158 + v161.__sinval * v161.__sinval * 42841.3115 * v161.__sinval, v159 + v161.__cosval * v161.__cosval * -42697.6727 * v161.__cosval);
                    v163 = tan(v162 * v6 + 0.785398163);
                    v164 = log(v163);
                    v165.f64[0] = v484;
                    v165.f64[1] = v164;
                    *(float64x2_t *)(v137 + 40) = vmlaq_f64(v506, v501, v165);
                    *(_BYTE *)(v137 + 61) = 1;
                  }
                  v166 = *(double *)(v137 + 40);
                  if (*(_BYTE *)(v154 + 61))
                  {
                    v167 = 1;
                  }
                  else
                  {
                    v167 = *(unsigned __int8 *)(v154 + 62);
                    if (*(_BYTE *)(v154 + 62))
                    {
                      v168 = *(double *)(v154 + 16);
                      v169 = *(double *)(v154 + 24);
                      v170 = *(double *)(v154 + 32);
                      v468 = sqrt(v168 * v168 + v169 * v169);
                      v171 = atan2(v170, v468 * 0.996647189);
                      v485 = atan2(v169, v168);
                      v172 = __sincos_stret(v171);
                      v173 = atan2(v170 + v172.__sinval * v172.__sinval * 42841.3115 * v172.__sinval, v468 + v172.__cosval * v172.__cosval * -42697.6727 * v172.__cosval);
                      v174 = tan(v173 * v6 + 0.785398163);
                      v175 = log(v174);
                      v176.f64[0] = v485;
                      v176.f64[1] = v175;
                      *(float64x2_t *)(v154 + 40) = vmlaq_f64(v506, v501, v176);
                      v167 = 1;
                      *(_BYTE *)(v154 + 61) = 1;
                    }
                  }
                  if (v166 != *(double *)(v154 + 40))
                    break;
                  if (v137 < v154)
                    goto LABEL_131;
LABEL_113:
                  ++i;
                }
                if (!*(_BYTE *)(v137 + 61) && *(_BYTE *)(v137 + 62))
                {
                  v177 = *(double *)(v137 + 16);
                  v178 = *(double *)(v137 + 24);
                  v179 = *(double *)(v137 + 32);
                  v180 = sqrt(v177 * v177 + v178 * v178);
                  v181 = atan2(v179, v180 * 0.996647189);
                  v486 = atan2(v178, v177);
                  v182 = __sincos_stret(v181);
                  v183 = atan2(v179 + v182.__sinval * v182.__sinval * 42841.3115 * v182.__sinval, v180 + v182.__cosval * v182.__cosval * -42697.6727 * v182.__cosval);
                  v184 = tan(v183 * v6 + 0.785398163);
                  v185 = log(v184);
                  v186.f64[0] = v486;
                  v186.f64[1] = v185;
                  *(float64x2_t *)(v137 + 40) = vmlaq_f64(v506, v501, v186);
                  *(_BYTE *)(v137 + 61) = 1;
                  v167 = *(unsigned __int8 *)(v154 + 61);
                }
                v187 = *(double *)(v137 + 40);
                if (!v167 && *(_BYTE *)(v154 + 62))
                {
                  v188 = *(double *)(v154 + 16);
                  v189 = *(double *)(v154 + 24);
                  v190 = *(double *)(v154 + 32);
                  v469 = sqrt(v188 * v188 + v189 * v189);
                  v191 = atan2(v190, v469 * 0.996647189);
                  v487 = atan2(v189, v188);
                  v192 = __sincos_stret(v191);
                  v193 = atan2(v190 + v192.__sinval * v192.__sinval * 42841.3115 * v192.__sinval, v469 + v192.__cosval * v192.__cosval * -42697.6727 * v192.__cosval);
                  v194 = tan(v193 * v6 + 0.785398163);
                  v195 = log(v194);
                  v196.f64[0] = v487;
                  v196.f64[1] = v195;
                  *(float64x2_t *)(v154 + 40) = vmlaq_f64(v506, v501, v196);
                  *(_BYTE *)(v154 + 61) = 1;
                }
                if (v187 >= *(double *)(v154 + 40))
                  goto LABEL_113;
                do
                {
                  while (1)
                  {
LABEL_131:
                    v197 = *--j;
                    v155 = v197;
                    if (!*(_BYTE *)(v137 + 61) && *(_BYTE *)(v137 + 62))
                    {
                      v198 = *(double *)(v137 + 16);
                      v199 = *(double *)(v137 + 24);
                      v200 = *(double *)(v137 + 32);
                      v201 = sqrt(v198 * v198 + v199 * v199);
                      v202 = atan2(v200, v201 * 0.996647189);
                      v488 = atan2(v199, v198);
                      v203 = __sincos_stret(v202);
                      v204 = atan2(v200 + v203.__sinval * v203.__sinval * 42841.3115 * v203.__sinval, v201 + v203.__cosval * v203.__cosval * -42697.6727 * v203.__cosval);
                      v205 = tan(v204 * v6 + 0.785398163);
                      v206 = log(v205);
                      v207.f64[0] = v488;
                      v207.f64[1] = v206;
                      *(float64x2_t *)(v137 + 40) = vmlaq_f64(v506, v501, v207);
                      *(_BYTE *)(v137 + 61) = 1;
                    }
                    v208 = *(double *)(v137 + 40);
                    if (*(_BYTE *)(v155 + 61))
                    {
                      v209 = 1;
                    }
                    else
                    {
                      v209 = *(unsigned __int8 *)(v155 + 62);
                      if (*(_BYTE *)(v155 + 62))
                      {
                        v210 = *(double *)(v155 + 16);
                        v211 = *(double *)(v155 + 24);
                        v212 = *(double *)(v155 + 32);
                        v470 = sqrt(v210 * v210 + v211 * v211);
                        v213 = atan2(v212, v470 * 0.996647189);
                        v489 = atan2(v211, v210);
                        v214 = __sincos_stret(v213);
                        v215 = atan2(v212 + v214.__sinval * v214.__sinval * 42841.3115 * v214.__sinval, v470 + v214.__cosval * v214.__cosval * -42697.6727 * v214.__cosval);
                        v216 = tan(v215 * v6 + 0.785398163);
                        v217 = log(v216);
                        v218.f64[0] = v489;
                        v218.f64[1] = v217;
                        *(float64x2_t *)(v155 + 40) = vmlaq_f64(v506, v501, v218);
                        v209 = 1;
                        *(_BYTE *)(v155 + 61) = 1;
                      }
                    }
                    if (v208 != *(double *)(v155 + 40))
                      break;
                    if (v137 >= v155)
                      goto LABEL_110;
                  }
                  if (!*(_BYTE *)(v137 + 61) && *(_BYTE *)(v137 + 62))
                  {
                    v219 = *(double *)(v137 + 16);
                    v220 = *(double *)(v137 + 24);
                    v221 = *(double *)(v137 + 32);
                    v222 = sqrt(v219 * v219 + v220 * v220);
                    v223 = atan2(v221, v222 * 0.996647189);
                    v490 = atan2(v220, v219);
                    v224 = __sincos_stret(v223);
                    v225 = atan2(v221 + v224.__sinval * v224.__sinval * 42841.3115 * v224.__sinval, v222 + v224.__cosval * v224.__cosval * -42697.6727 * v224.__cosval);
                    v226 = tan(v225 * v6 + 0.785398163);
                    v227 = log(v226);
                    v228.f64[0] = v490;
                    v228.f64[1] = v227;
                    *(float64x2_t *)(v137 + 40) = vmlaq_f64(v506, v501, v228);
                    *(_BYTE *)(v137 + 61) = 1;
                    v209 = *(unsigned __int8 *)(v155 + 61);
                  }
                  v229 = *(double *)(v137 + 40);
                  if (!v209 && *(_BYTE *)(v155 + 62))
                  {
                    v230 = *(double *)(v155 + 16);
                    v231 = *(double *)(v155 + 24);
                    v232 = *(double *)(v155 + 32);
                    v471 = sqrt(v230 * v230 + v231 * v231);
                    v233 = atan2(v232, v471 * 0.996647189);
                    v491 = atan2(v231, v230);
                    v234 = __sincos_stret(v233);
                    v235 = atan2(v232 + v234.__sinval * v234.__sinval * 42841.3115 * v234.__sinval, v471 + v234.__cosval * v234.__cosval * -42697.6727 * v234.__cosval);
                    v236 = tan(v235 * v6 + 0.785398163);
                    v237 = log(v236);
                    v238.f64[0] = v491;
                    v238.f64[1] = v237;
                    *(float64x2_t *)(v155 + 40) = vmlaq_f64(v506, v501, v238);
                    *(_BYTE *)(v155 + 61) = 1;
                  }
                }
                while (v229 < *(double *)(v155 + 40));
LABEL_110:
                ;
              }
              while (i < j);
            }
            v239 = i - 1;
            v10 = a2;
            v11 = a2 - 1;
            if (i - 1 != a1)
              *a1 = *v239;
            a4 = 0;
            *v239 = v137;
            a3 = v149;
            continue;
          }
LABEL_12:
          v22 = a1 + 1;
          v23 = *a1;
          v24 = (md::LabelPoint *)(*a1 + 16);
          v463 = v18;
          while (1)
          {
            v26 = *v22;
            v27 = (md::LabelPoint *)(*v22 + 16);
            v28 = *(double *)md::LabelPoint::mercatorPoint(v27);
            if (v28 == *(double *)md::LabelPoint::mercatorPoint(v24))
              break;
            v25 = *(double *)md::LabelPoint::mercatorPoint(v27);
            if (v25 >= *(double *)md::LabelPoint::mercatorPoint(v24))
              goto LABEL_17;
LABEL_14:
            ++v22;
          }
          if (v26 < v23)
            goto LABEL_14;
LABEL_17:
          v29 = v22 - 1;
          k = v11;
          if (v22 - 1 != a1)
          {
            while (1)
            {
              v32 = *k;
              v33 = (md::LabelPoint *)(*k + 16);
              v34 = *(double *)md::LabelPoint::mercatorPoint(v33);
              if (v34 == *(double *)md::LabelPoint::mercatorPoint(v24))
              {
                if (v32 < v23)
                  goto LABEL_36;
              }
              else
              {
                v31 = *(double *)md::LabelPoint::mercatorPoint(v33);
                if (v31 < *(double *)md::LabelPoint::mercatorPoint(v24))
                  goto LABEL_36;
              }
              --k;
            }
          }
          k = a2;
          if (v22 < a2)
          {
            for (k = v11; ; --k)
            {
              v37 = *k;
              v38 = (md::LabelPoint *)(*k + 16);
              v39 = *(double *)md::LabelPoint::mercatorPoint(v38);
              if (v39 == *(double *)md::LabelPoint::mercatorPoint(v24))
              {
                if (v37 < v23 || v22 >= k)
                  break;
              }
              else
              {
                v35 = *(double *)md::LabelPoint::mercatorPoint(v38);
                _CF = v35 < *(double *)md::LabelPoint::mercatorPoint(v24) || v22 >= k;
                if (_CF)
                  break;
              }
            }
          }
LABEL_36:
          if (v22 < k)
          {
            v41 = *v22;
            v42 = *k;
            v43 = v22;
            v44 = k;
            do
            {
              *v43++ = v42;
              *v44 = v41;
              while (1)
              {
                v41 = *v43;
                if (!*(_BYTE *)(*v43 + 61) && *(_BYTE *)(v41 + 62))
                {
                  v45 = *(double *)(v41 + 16);
                  v46 = *(double *)(v41 + 24);
                  v47 = *(double *)(v41 + 32);
                  v48 = sqrt(v45 * v45 + v46 * v46);
                  v49 = atan2(v47, v48 * 0.996647189);
                  v476 = atan2(v46, v45);
                  v50 = __sincos_stret(v49);
                  v51 = atan2(v47 + v50.__sinval * v50.__sinval * 42841.3115 * v50.__sinval, v48 + v50.__cosval * v50.__cosval * -42697.6727 * v50.__cosval);
                  v52 = tan(v51 * v6 + 0.785398163);
                  v53 = log(v52);
                  v54.f64[0] = v476;
                  v54.f64[1] = v53;
                  *(float64x2_t *)(v41 + 40) = vmlaq_f64(v506, v501, v54);
                  *(_BYTE *)(v41 + 61) = 1;
                }
                v55 = *(double *)(v41 + 40);
                if (*(_BYTE *)(v23 + 61))
                {
                  v56 = 1;
                }
                else
                {
                  v56 = *(unsigned __int8 *)(v23 + 62);
                  if (*(_BYTE *)(v23 + 62))
                  {
                    v57 = *(double *)(v23 + 16);
                    v58 = *(double *)(v23 + 24);
                    v59 = *(double *)(v23 + 32);
                    v60 = sqrt(v57 * v57 + v58 * v58);
                    v61 = atan2(v59, v60 * 0.996647189);
                    v477 = atan2(v58, v57);
                    v62 = __sincos_stret(v61);
                    v63 = v60 + v62.__cosval * v62.__cosval * -42697.6727 * v62.__cosval;
                    v6 = 0.5;
                    v64 = atan2(v59 + v62.__sinval * v62.__sinval * 42841.3115 * v62.__sinval, v63);
                    v65 = tan(v64 * 0.5 + 0.785398163);
                    v66 = log(v65);
                    v67.f64[0] = v477;
                    v67.f64[1] = v66;
                    *(float64x2_t *)(v23 + 40) = vmlaq_f64(v506, v501, v67);
                    v56 = 1;
                    *(_BYTE *)(v23 + 61) = 1;
                  }
                }
                if (v55 != *(double *)(v23 + 40))
                  break;
                if (v41 >= v23)
                  goto LABEL_58;
LABEL_41:
                ++v43;
              }
              if (!*(_BYTE *)(v41 + 61) && *(_BYTE *)(v41 + 62))
              {
                v68 = *(double *)(v41 + 16);
                v69 = *(double *)(v41 + 24);
                v70 = *(double *)(v41 + 32);
                v71 = sqrt(v68 * v68 + v69 * v69);
                v72 = atan2(v70, v71 * 0.996647189);
                v478 = atan2(v69, v68);
                v73 = __sincos_stret(v72);
                v74 = atan2(v70 + v73.__sinval * v73.__sinval * 42841.3115 * v73.__sinval, v71 + v73.__cosval * v73.__cosval * -42697.6727 * v73.__cosval);
                v75 = tan(v74 * v6 + 0.785398163);
                v76 = log(v75);
                v77.f64[0] = v478;
                v77.f64[1] = v76;
                *(float64x2_t *)(v41 + 40) = vmlaq_f64(v506, v501, v77);
                *(_BYTE *)(v41 + 61) = 1;
                v56 = *(unsigned __int8 *)(v23 + 61);
              }
              v78 = *(double *)(v41 + 40);
              if (v56)
              {
                v56 = 1;
              }
              else
              {
                v56 = *(unsigned __int8 *)(v23 + 62);
                if (*(_BYTE *)(v23 + 62))
                {
                  v79 = *(double *)(v23 + 16);
                  v80 = *(double *)(v23 + 24);
                  v81 = *(double *)(v23 + 32);
                  v82 = sqrt(v79 * v79 + v80 * v80);
                  v83 = atan2(v81, v82 * 0.996647189);
                  v479 = atan2(v80, v79);
                  v84 = __sincos_stret(v83);
                  v85 = v82 + v84.__cosval * v84.__cosval * -42697.6727 * v84.__cosval;
                  v6 = 0.5;
                  v86 = atan2(v81 + v84.__sinval * v84.__sinval * 42841.3115 * v84.__sinval, v85);
                  v87 = tan(v86 * 0.5 + 0.785398163);
                  v88 = log(v87);
                  v89.f64[0] = v479;
                  v89.f64[1] = v88;
                  *(float64x2_t *)(v23 + 40) = vmlaq_f64(v506, v501, v89);
                  v56 = 1;
                  *(_BYTE *)(v23 + 61) = 1;
                }
              }
              if (v78 < *(double *)(v23 + 40))
                goto LABEL_41;
LABEL_58:
              v29 = v43 - 1;
              --v44;
              v90 = v56;
LABEL_61:
              v42 = *v44;
              if (!*(_BYTE *)(*v44 + 61) && *(_BYTE *)(v42 + 62))
              {
                v91 = *(double *)(v42 + 16);
                v92 = *(double *)(v42 + 24);
                v93 = *(double *)(v42 + 32);
                v94 = sqrt(v91 * v91 + v92 * v92);
                v95 = atan2(v93, v94 * 0.996647189);
                v480 = atan2(v92, v91);
                v96 = __sincos_stret(v95);
                v97 = atan2(v93 + v96.__sinval * v96.__sinval * 42841.3115 * v96.__sinval, v94 + v96.__cosval * v96.__cosval * -42697.6727 * v96.__cosval);
                v98 = tan(v97 * v6 + 0.785398163);
                v99 = log(v98);
                v100.f64[0] = v480;
                v100.f64[1] = v99;
                *(float64x2_t *)(v42 + 40) = vmlaq_f64(v506, v501, v100);
                *(_BYTE *)(v42 + 61) = 1;
                v56 = *(unsigned __int8 *)(v23 + 61);
                v90 = v56;
              }
              v101 = *(double *)(v42 + 40);
              if (v90)
              {
LABEL_67:
                v90 = 1;
              }
              else
              {
                v90 = *(unsigned __int8 *)(v23 + 62);
                if (*(_BYTE *)(v23 + 62))
                {
                  v102 = *(double *)(v23 + 16);
                  v103 = *(double *)(v23 + 24);
                  v104 = *(double *)(v23 + 32);
                  v105 = sqrt(v102 * v102 + v103 * v103);
                  v106 = atan2(v104, v105 * 0.996647189);
                  v481 = atan2(v103, v102);
                  v107 = __sincos_stret(v106);
                  v108 = v105 + v107.__cosval * v107.__cosval * -42697.6727 * v107.__cosval;
                  v6 = 0.5;
                  v109 = atan2(v104 + v107.__sinval * v107.__sinval * 42841.3115 * v107.__sinval, v108);
                  v110 = tan(v109 * 0.5 + 0.785398163);
                  v111 = log(v110);
                  v112.f64[0] = v481;
                  v112.f64[1] = v111;
                  *(float64x2_t *)(v23 + 40) = vmlaq_f64(v506, v501, v112);
                  v56 = 1;
                  *(_BYTE *)(v23 + 61) = 1;
                  goto LABEL_67;
                }
              }
              if (v101 == *(double *)(v23 + 40))
              {
                if (v42 < v23)
                  continue;
LABEL_60:
                --v44;
                goto LABEL_61;
              }
              if (!*(_BYTE *)(v42 + 61) && *(_BYTE *)(v42 + 62))
              {
                v113 = *(double *)(v42 + 16);
                v114 = *(double *)(v42 + 24);
                v115 = *(double *)(v42 + 32);
                v116 = sqrt(v113 * v113 + v114 * v114);
                v117 = atan2(v115, v116 * 0.996647189);
                v482 = atan2(v114, v113);
                v118 = __sincos_stret(v117);
                v119 = atan2(v115 + v118.__sinval * v118.__sinval * 42841.3115 * v118.__sinval, v116 + v118.__cosval * v118.__cosval * -42697.6727 * v118.__cosval);
                v120 = tan(v119 * v6 + 0.785398163);
                v121 = log(v120);
                v122.f64[0] = v482;
                v122.f64[1] = v121;
                *(float64x2_t *)(v42 + 40) = vmlaq_f64(v506, v501, v122);
                *(_BYTE *)(v42 + 61) = 1;
                v56 = *(unsigned __int8 *)(v23 + 61);
              }
              v123 = *(double *)(v42 + 40);
              if (v56)
              {
                v56 = 1;
              }
              else
              {
                v56 = *(unsigned __int8 *)(v23 + 62);
                if (*(_BYTE *)(v23 + 62))
                {
                  v124 = *(double *)(v23 + 16);
                  v125 = *(double *)(v23 + 24);
                  v126 = *(double *)(v23 + 32);
                  v127 = sqrt(v124 * v124 + v125 * v125);
                  v128 = atan2(v126, v127 * 0.996647189);
                  v483 = atan2(v125, v124);
                  v129 = __sincos_stret(v128);
                  v130 = v127 + v129.__cosval * v129.__cosval * -42697.6727 * v129.__cosval;
                  v6 = 0.5;
                  v131 = atan2(v126 + v129.__sinval * v129.__sinval * 42841.3115 * v129.__sinval, v130);
                  v132 = tan(v131 * 0.5 + 0.785398163);
                  v133 = log(v132);
                  v134.f64[0] = v483;
                  v134.f64[1] = v133;
                  *(float64x2_t *)(v23 + 40) = vmlaq_f64(v506, v501, v134);
                  v56 = 1;
                  *(_BYTE *)(v23 + 61) = 1;
                }
              }
              v90 = v56;
              if (v123 >= *(double *)(v23 + 40))
                goto LABEL_60;
            }
            while (v43 < v44);
          }
          if (v29 != a1)
            *a1 = *v29;
          *v29 = v23;
          _CF = v22 >= k;
          a3 = v463;
          v10 = a2;
          v11 = a2 - 1;
          if (!_CF)
            goto LABEL_84;
          v135 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(a1, v29);
          i = v29 + 1;
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(v29 + 1, a2))
          {
            if (v135)
              continue;
LABEL_84:
            std::__introsort<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **,false>(a1, v29, v463, a4 & 1);
            a4 = 0;
            i = v29 + 1;
            continue;
          }
          a2 = v29;
          if (v135)
            return;
          goto LABEL_2;
        }
        v245 = i + 1;
        _ZF = i == a2 || v245 == a2;
        v247 = _ZF;
        if ((a4 & 1) != 0)
        {
          if ((v247 & 1) != 0)
            return;
          v248 = 0;
          v502 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
          v249 = i;
LABEL_171:
          v251 = a1;
          v252 = v249;
          v249 = v245;
          v254 = *v252;
          v253 = v252[1];
          v255 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v253 + 16));
          if (v255 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v254 + 16)))
          {
            _CF = v253 >= v254;
            a1 = v251;
            if (_CF)
              goto LABEL_170;
          }
          else
          {
            v256 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v253 + 16));
            v257 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v254 + 16));
            a1 = v251;
            if (v256 >= v257)
              goto LABEL_170;
          }
          v258 = v252[1];
          v252[1] = *v252;
          v250 = a1;
          if (v252 == a1)
            goto LABEL_169;
          v259 = v248;
          while (1)
          {
            v260 = *(unint64_t *)((char *)a1 + v259 - 8);
            if (!*(_BYTE *)(v258 + 61) && *(_BYTE *)(v258 + 62))
            {
              v261 = *(double *)(v258 + 16);
              v262 = *(double *)(v258 + 24);
              v263 = *(double *)(v258 + 32);
              v264 = sqrt(v261 * v261 + v262 * v262);
              v265 = atan2(v263, v264 * 0.996647189);
              v492 = atan2(v262, v261);
              v266 = __sincos_stret(v265);
              v267 = atan2(v263 + v266.__sinval * v266.__sinval * 42841.3115 * v266.__sinval, v264 + v266.__cosval * v266.__cosval * -42697.6727 * v266.__cosval);
              v268 = tan(v267 * 0.5 + 0.785398163);
              v269 = log(v268);
              v270.f64[0] = v492;
              v270.f64[1] = v269;
              *(float64x2_t *)(v258 + 40) = vmlaq_f64(v506, v502, v270);
              *(_BYTE *)(v258 + 61) = 1;
            }
            v271 = *(double *)(v258 + 40);
            if (*(_BYTE *)(v260 + 61))
            {
              v272 = 1;
            }
            else
            {
              v272 = *(unsigned __int8 *)(v260 + 62);
              if (*(_BYTE *)(v260 + 62))
              {
                v273 = *(double *)(v260 + 16);
                v274 = *(double *)(v260 + 24);
                v275 = *(double *)(v260 + 32);
                v276 = sqrt(v273 * v273 + v274 * v274);
                v277 = atan2(v275, v276 * 0.996647189);
                v493 = atan2(v274, v273);
                v278 = __sincos_stret(v277);
                v279 = atan2(v275 + v278.__sinval * v278.__sinval * 42841.3115 * v278.__sinval, v276 + v278.__cosval * v278.__cosval * -42697.6727 * v278.__cosval);
                v280 = tan(v279 * 0.5 + 0.785398163);
                v281 = log(v280);
                v282.f64[0] = v493;
                v282.f64[1] = v281;
                *(float64x2_t *)(v260 + 40) = vmlaq_f64(v506, v502, v282);
                v272 = 1;
                *(_BYTE *)(v260 + 61) = 1;
              }
            }
            if (v271 == *(double *)(v260 + 40))
            {
              if (v258 >= v260)
              {
                v250 = v252;
LABEL_169:
                *v250 = v258;
LABEL_170:
                v245 = v249 + 1;
                v248 += 8;
                if (v249 + 1 == a2)
                  return;
                goto LABEL_171;
              }
            }
            else
            {
              if (!*(_BYTE *)(v258 + 61) && *(_BYTE *)(v258 + 62))
              {
                v283 = *(double *)(v258 + 16);
                v284 = *(double *)(v258 + 24);
                v285 = *(double *)(v258 + 32);
                v286 = sqrt(v283 * v283 + v284 * v284);
                v287 = atan2(v285, v286 * 0.996647189);
                v494 = atan2(v284, v283);
                v288 = __sincos_stret(v287);
                v289 = atan2(v285 + v288.__sinval * v288.__sinval * 42841.3115 * v288.__sinval, v286 + v288.__cosval * v288.__cosval * -42697.6727 * v288.__cosval);
                v290 = tan(v289 * 0.5 + 0.785398163);
                v291 = log(v290);
                v292.f64[0] = v494;
                v292.f64[1] = v291;
                *(float64x2_t *)(v258 + 40) = vmlaq_f64(v506, v502, v292);
                *(_BYTE *)(v258 + 61) = 1;
                v272 = *(unsigned __int8 *)(v260 + 61);
              }
              v293 = *(double *)(v258 + 40);
              if (!v272 && *(_BYTE *)(v260 + 62))
              {
                v294 = *(double *)(v260 + 16);
                v295 = *(double *)(v260 + 24);
                v296 = *(double *)(v260 + 32);
                v297 = sqrt(v294 * v294 + v295 * v295);
                v298 = atan2(v296, v297 * 0.996647189);
                v495 = atan2(v295, v294);
                v299 = __sincos_stret(v298);
                v300 = atan2(v296 + v299.__sinval * v299.__sinval * 42841.3115 * v299.__sinval, v297 + v299.__cosval * v299.__cosval * -42697.6727 * v299.__cosval);
                v301 = tan(v300 * 0.5 + 0.785398163);
                v302 = log(v301);
                v303.f64[0] = v495;
                v303.f64[1] = v302;
                *(float64x2_t *)(v260 + 40) = vmlaq_f64(v506, v502, v303);
                *(_BYTE *)(v260 + 61) = 1;
              }
              if (v293 >= *(double *)(v260 + 40))
              {
                v250 = (unint64_t *)((char *)a1 + v259);
                goto LABEL_169;
              }
            }
            --v252;
            *(unint64_t *)((char *)a1 + v259) = v260;
            v259 -= 8;
            if (!v259)
            {
              v250 = a1;
              goto LABEL_169;
            }
          }
        }
        if ((v247 & 1) == 0)
        {
          v505 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
          do
          {
            v402 = a1;
            v403 = v245;
            v406 = a1;
            v405 = *a1;
            v404 = v406[1];
            v407 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v404 + 16));
            if (v407 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v405 + 16)))
            {
              _CF = v404 >= v405;
              a1 = v403;
              if (!_CF)
                goto LABEL_273;
            }
            else
            {
              v408 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v404 + 16));
              v409 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v405 + 16));
              a1 = v403;
              if (v408 < v409)
              {
LABEL_273:
                v410 = *a1;
                v411 = *v402;
                do
                {
                  while (1)
                  {
                    v412 = v402;
                    v413 = v411;
                    v414 = *--v402;
                    v411 = v414;
                    v402[2] = v413;
                    if (!*(_BYTE *)(v410 + 61) && *(_BYTE *)(v410 + 62))
                    {
                      v415 = *(double *)(v410 + 16);
                      v416 = *(double *)(v410 + 24);
                      v417 = *(double *)(v410 + 32);
                      v418 = sqrt(v415 * v415 + v416 * v416);
                      v419 = atan2(v417, v418 * 0.996647189);
                      v497 = atan2(v416, v415);
                      v420 = __sincos_stret(v419);
                      v421 = atan2(v417 + v420.__sinval * v420.__sinval * 42841.3115 * v420.__sinval, v418 + v420.__cosval * v420.__cosval * -42697.6727 * v420.__cosval);
                      v422 = tan(v421 * 0.5 + 0.785398163);
                      v423 = log(v422);
                      v424.f64[0] = v497;
                      v424.f64[1] = v423;
                      *(float64x2_t *)(v410 + 40) = vmlaq_f64(v506, v505, v424);
                      *(_BYTE *)(v410 + 61) = 1;
                    }
                    v425 = *(double *)(v410 + 40);
                    if (*(_BYTE *)(v411 + 61))
                    {
                      v426 = 1;
                    }
                    else
                    {
                      v426 = *(unsigned __int8 *)(v411 + 62);
                      if (*(_BYTE *)(v411 + 62))
                      {
                        v427 = *(double *)(v411 + 16);
                        v428 = *(double *)(v411 + 24);
                        v429 = *(double *)(v411 + 32);
                        v430 = sqrt(v427 * v427 + v428 * v428);
                        v431 = atan2(v429, v430 * 0.996647189);
                        v498 = atan2(v428, v427);
                        v432 = __sincos_stret(v431);
                        v433 = atan2(v429 + v432.__sinval * v432.__sinval * 42841.3115 * v432.__sinval, v430 + v432.__cosval * v432.__cosval * -42697.6727 * v432.__cosval);
                        v434 = tan(v433 * 0.5 + 0.785398163);
                        v435 = log(v434);
                        v436.f64[0] = v498;
                        v436.f64[1] = v435;
                        *(float64x2_t *)(v411 + 40) = vmlaq_f64(v506, v505, v436);
                        v426 = 1;
                        *(_BYTE *)(v411 + 61) = 1;
                      }
                    }
                    if (v425 != *(double *)(v411 + 40))
                      break;
                    if (v410 >= v411)
                      goto LABEL_267;
                  }
                  if (!*(_BYTE *)(v410 + 61) && *(_BYTE *)(v410 + 62))
                  {
                    v437 = *(double *)(v410 + 16);
                    v438 = *(double *)(v410 + 24);
                    v439 = *(double *)(v410 + 32);
                    v440 = sqrt(v437 * v437 + v438 * v438);
                    v441 = atan2(v439, v440 * 0.996647189);
                    v499 = atan2(v438, v437);
                    v442 = __sincos_stret(v441);
                    v443 = atan2(v439 + v442.__sinval * v442.__sinval * 42841.3115 * v442.__sinval, v440 + v442.__cosval * v442.__cosval * -42697.6727 * v442.__cosval);
                    v444 = tan(v443 * 0.5 + 0.785398163);
                    v445 = log(v444);
                    v446.f64[0] = v499;
                    v446.f64[1] = v445;
                    *(float64x2_t *)(v410 + 40) = vmlaq_f64(v506, v505, v446);
                    *(_BYTE *)(v410 + 61) = 1;
                    v426 = *(unsigned __int8 *)(v411 + 61);
                  }
                  v447 = *(double *)(v410 + 40);
                  if (!v426 && *(_BYTE *)(v411 + 62))
                  {
                    v448 = *(double *)(v411 + 16);
                    v449 = *(double *)(v411 + 24);
                    v450 = *(double *)(v411 + 32);
                    v451 = sqrt(v448 * v448 + v449 * v449);
                    v452 = atan2(v450, v451 * 0.996647189);
                    v500 = atan2(v449, v448);
                    v453 = __sincos_stret(v452);
                    v454 = atan2(v450 + v453.__sinval * v453.__sinval * 42841.3115 * v453.__sinval, v451 + v453.__cosval * v453.__cosval * -42697.6727 * v453.__cosval);
                    v455 = tan(v454 * 0.5 + 0.785398163);
                    v456 = log(v455);
                    v457.f64[0] = v500;
                    v457.f64[1] = v456;
                    *(float64x2_t *)(v411 + 40) = vmlaq_f64(v506, v505, v457);
                    *(_BYTE *)(v411 + 61) = 1;
                  }
                }
                while (v447 < *(double *)(v411 + 40));
LABEL_267:
                *v412 = v410;
              }
            }
            v245 = a1 + 1;
          }
          while (a1 + 1 != a2);
        }
        return;
    }
  }
}

void sub_19F3CC5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  void *v11;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a11);

  _Unwind_Resume(a1);
}

void sub_19F3CCA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19F3CDC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);

  _Unwind_Resume(a1);
}

_QWORD *md::TransitRenderLayer::layout(md::TransitRenderLayer *this, const md::LayoutContext *a2)
{
  const md::LayoutContext *v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int8x8_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  _QWORD *v31;
  int8x8_t v32;
  uint8x8_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint8x8_t v43;
  float *v44;
  id v45;
  double v46;
  float v47;
  uint64_t v48;
  _QWORD *v49;
  int8x8_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float *v59;
  uint64_t v60;
  uint64_t *v61;
  _BOOL4 v62;
  uint64_t v63;
  unsigned int v64;
  BOOL v65;
  int v66;
  float v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _DWORD *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  unint64_t v88;
  int v89;
  int v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  float *v94;
  float v95;
  BOOL v96;
  int v97;
  char v98;
  char v99;
  int v100;
  id v101;
  BOOL v102;
  _QWORD *v103;
  unint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  uint64_t v107;
  char v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  uint64_t v117;
  int v118;
  float v119;
  float v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int v130;
  float *v131;
  float v132;
  BOOL v133;
  unsigned int v134;
  float v135;
  float v136;
  uint64_t v137;
  float *v138;
  float v139;
  BOOL v140;
  unsigned int v141;
  float v142;
  float v143;
  float v144;
  uint64_t v145;
  unint64_t v146;
  float32x4_t *v147;
  __int128 v148;
  int32x2_t v149;
  float32x4_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  float32x4_t *v154;
  __int128 v155;
  unint64_t v156;
  _QWORD *v157;
  _QWORD *i;
  int8x8_t *v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  unsigned __int8 v164;
  int8x8_t v165;
  unint64_t v166;
  unint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  _BOOL4 v173;
  uint64_t v174;
  const md::LayoutContext **v175;
  _QWORD *v176;
  unint64_t v177;
  _QWORD *v178;
  BOOL v179;
  unint64_t v180;
  double v181;
  BOOL v182;
  unsigned int v183;
  int v184;
  void *v185;
  int v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  _BYTE *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  ggl::CommandBuffer *v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  _QWORD *result;
  uint64_t v210;
  BOOL v211;
  uint64_t v212;
  uint64_t *v213;
  float *v214;
  uint64_t *v215;
  md::LayoutContext *v216;
  uint64_t v217;
  md::TransitRenderLayer *v218;
  __int128 v219;
  __int128 v220;
  uint64_t v221;
  float32x4_t v222;
  __int128 v223;
  uint64_t v224;
  unint64_t v225;
  __int16 v226;
  float32x4_t *v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  _QWORD v230[2];
  unsigned __int8 v231;
  uint16x4_t v232;
  _QWORD v233[3];
  _QWORD *v234;
  _QWORD v235[3];
  _QWORD *v236;
  _QWORD v237[3];
  _QWORD *v238;
  _QWORD v239[3];
  _QWORD *v240;
  uint64_t v241;

  v2 = a2;
  v241 = *MEMORY[0x1E0C80C00];
  v237[0] = &off_1E42CF788;
  v237[1] = a2;
  v238 = v237;
  v235[0] = &off_1E42CF7D0;
  v235[1] = a2;
  v236 = v235;
  v240 = v239;
  v239[0] = &off_1E42CF7D0;
  v239[1] = a2;
  std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v237);
  v4 = v236;
  if (v236 == v235)
  {
    v5 = 4;
    v4 = v235;
  }
  else
  {
    if (!v236)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v238;
  if (v238 == v237)
  {
    v7 = 4;
    v6 = v237;
    goto LABEL_10;
  }
  if (v238)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = mach_absolute_time();
  md::TransitRenderLayer::updateActiveTileDatas(this);
  v9 = (uint64_t *)*((_QWORD *)v2 + 1);
  v10 = (int8x8_t)v9[1];
  v11 = (uint8x8_t)vcnt_s8(v10);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    v12 = 0xC97B9E962ADF4AD4 % *(_QWORD *)&v10;
    if (*(_QWORD *)&v10 > 0xC97B9E962ADF4AD4)
      v12 = 0xC97B9E962ADF4AD4;
  }
  else
  {
    v12 = (*(_QWORD *)&v10 - 1) & 0xC97B9E962ADF4AD4;
  }
  v13 = *v9;
  v14 = *(_QWORD **)(v13 + 8 * v12);
  if (!v14)
    goto LABEL_38;
  v15 = (_QWORD *)*v14;
  if (!v15)
    goto LABEL_38;
  if (v11.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 0xC97B9E962ADF4AD4)
      {
        if (v15[2] == 0xC97B9E962ADF4AD4)
          goto LABEL_31;
      }
      else if ((v17 & (*(_QWORD *)&v10 - 1)) != v12)
      {
        goto LABEL_38;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_38;
    }
  }
  while (1)
  {
    v16 = v15[1];
    if (v16 == 0xC97B9E962ADF4AD4)
      break;
    if (v16 >= *(_QWORD *)&v10)
      v16 %= *(_QWORD *)&v10;
    if (v16 != v12)
      goto LABEL_38;
LABEL_20:
    v15 = (_QWORD *)*v15;
    if (!v15)
      goto LABEL_38;
  }
  if (v15[2] != 0xC97B9E962ADF4AD4)
    goto LABEL_20;
LABEL_31:
  v18 = v15[5];
  if (*(_QWORD *)(v18 + 8) != 0xC97B9E962ADF4AD4 || (v19 = *(uint64_t **)(v18 + 32)) == 0)
  {
LABEL_38:
    v23 = 0;
    goto LABEL_39;
  }
  v20 = *v19;
  v21 = v19[1];
  v22 = v20;
  if (v20 != v21)
  {
    v22 = v20;
    while (*(_BYTE *)v22 != 21)
    {
      v22 += 16;
      if (v22 == v21)
        goto LABEL_94;
    }
  }
  if (v22 == v21 || !*(_QWORD *)(v22 + 8))
  {
LABEL_94:
    if (v20 != v21)
    {
      while (*(_BYTE *)v20 != 25)
      {
        v20 += 16;
        if (v20 == v21)
          goto LABEL_100;
      }
    }
    if (v20 == v21)
LABEL_100:
      v52 = 0;
    else
      v52 = *(_QWORD *)(v20 + 8);
    v23 = v52 != 0;
  }
  else
  {
    v23 = 1;
  }
LABEL_39:
  if (v11.u32[0] >= 2uLL)
  {
    v25 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v10 <= 0xE42D19AFCA302E68)
      v25 = 0xE42D19AFCA302E68 % *(_QWORD *)&v10;
    v24 = *(_QWORD **)(v13 + 8 * v25);
    do
    {
      do
        v24 = (_QWORD *)*v24;
      while (v24[1] != 0xE42D19AFCA302E68);
    }
    while (v24[2] != 0xE42D19AFCA302E68);
  }
  else
  {
    v24 = *(_QWORD **)(v13 + 8 * ((*(_QWORD *)&v10 - 1) & 0xE42D19AFCA302E68));
    do
    {
      do
        v24 = (_QWORD *)*v24;
      while (v24[1] != 0xE42D19AFCA302E68);
    }
    while (v24[2] != 0xE42D19AFCA302E68);
  }
  v26 = *(_QWORD *)(v24[5] + 32);
  v233[0] = &off_1E42CF818;
  v233[1] = this;
  v27 = v233;
  v234 = v233;
  v28 = *(_BYTE **)(v26 + 48);
  v29 = *(_BYTE **)(v26 + 56);
  if (v28 == v29)
  {
    v30 = 4;
LABEL_57:
    (*(void (**)(void))(*v27 + 8 * v30))();
    goto LABEL_58;
  }
  do
  {
    LOBYTE(v223) = *v28;
    if (!v234)
      goto LABEL_400;
    (*(void (**)(_QWORD *, __int128 *))(*v234 + 48))(v234, &v223);
    ++v28;
  }
  while (v28 != v29);
  v27 = v234;
  if (v234 == v233)
  {
    v30 = 4;
    v27 = v233;
    goto LABEL_57;
  }
  if (v234)
  {
    v30 = 5;
    goto LABEL_57;
  }
LABEL_58:
  v31 = (_QWORD *)*((_QWORD *)v2 + 1);
  v32 = (int8x8_t)v31[1];
  if (v32)
  {
    v33 = (uint8x8_t)vcnt_s8(v32);
    v33.i16[0] = vaddlv_u8(v33);
    if (v33.u32[0] > 1uLL)
    {
      v34 = 0xFD5D5EC7C4E1E43ELL;
      if (*(_QWORD *)&v32 <= 0xFD5D5EC7C4E1E43ELL)
        v34 = 0xFD5D5EC7C4E1E43ELL % *(_QWORD *)&v32;
    }
    else
    {
      v34 = (*(_QWORD *)&v32 - 1) & 0xFD5D5EC7C4E1E43ELL;
    }
    v35 = *(_QWORD **)(*v31 + 8 * v34);
    if (v35)
    {
      v36 = (_QWORD *)*v35;
      if (v36)
      {
        if (v33.u32[0] < 2uLL)
        {
          v37 = *(_QWORD *)&v32 - 1;
          while (1)
          {
            v39 = v36[1];
            if (v39 == 0xFD5D5EC7C4E1E43ELL)
            {
              if (v36[2] == 0xFD5D5EC7C4E1E43ELL)
                goto LABEL_79;
            }
            else if ((v39 & v37) != v34)
            {
              goto LABEL_389;
            }
            v36 = (_QWORD *)*v36;
            if (!v36)
              goto LABEL_389;
          }
        }
        while (1)
        {
          v38 = v36[1];
          if (v38 == 0xFD5D5EC7C4E1E43ELL)
            break;
          if (v38 >= *(_QWORD *)&v32)
            v38 %= *(_QWORD *)&v32;
          if (v38 != v34)
            goto LABEL_389;
LABEL_68:
          v36 = (_QWORD *)*v36;
          if (!v36)
            goto LABEL_389;
        }
        if (v36[2] != 0xFD5D5EC7C4E1E43ELL)
          goto LABEL_68;
LABEL_79:
        v40 = v36[5];
        if (*(_QWORD *)(v40 + 8) == 0xFD5D5EC7C4E1E43ELL)
        {
          v41 = *(_QWORD *)(v40 + 32);
          if (v41)
          {
            v42 = *((_QWORD *)this + 44);
            *(_QWORD *)(v42 + 112) = 0;
            *(_QWORD *)(v42 + 120) = 0;
            v212 = v8;
            md::TransitRenderLayer::updateDebugSettings(this);
            v211 = v23;
            v44 = *(float **)(*((_QWORD *)this + 47) + 96);
            v216 = v2;
            v218 = this;
            if (v44)
            {
              v45 = *(id *)(*((_QWORD *)this + 5) + 104);
              objc_msgSend(v45, "contentScale");
              v47 = v46;
              if (v44[66] != v47)
              {
                v44[66] = v47;
                md::TransitNodeFeaturePool::resetCache((md::TransitNodeFeaturePool *)v44);
              }

              v2 = v216;
            }
            if (*(_BYTE *)(v41 + 224))
            {
              v48 = *((_QWORD *)this + 47);
              if (*(_BYTE *)(v48 + 104))
                md::LabelExternalObjectsModerator::setSelectedTransitNodes(*(_QWORD *)(v48 + 56), v41 + 168);
            }
            v49 = (_QWORD *)*((_QWORD *)v2 + 1);
            v50 = (int8x8_t)v49[1];
            if (!*(_QWORD *)&v50)
              goto LABEL_122;
            v43 = (uint8x8_t)vcnt_s8(v50);
            v43.i16[0] = vaddlv_u8(v43);
            if (v43.u32[0] > 1uLL)
            {
              v51 = 0x1AF456233693CD46;
              if (*(_QWORD *)&v50 <= 0x1AF456233693CD46uLL)
                v51 = 0x1AF456233693CD46uLL % *(_QWORD *)&v50;
            }
            else
            {
              v51 = (*(_QWORD *)&v50 - 1) & 0x1AF456233693CD46;
            }
            v53 = *(_QWORD **)(*v49 + 8 * v51);
            if (!v53)
              goto LABEL_122;
            v54 = (_QWORD *)*v53;
            if (!v54)
              goto LABEL_122;
            if (v43.u32[0] < 2uLL)
            {
              v55 = *(_QWORD *)&v50 - 1;
              while (1)
              {
                v57 = v54[1];
                if (v57 == 0x1AF456233693CD46)
                {
                  if (v54[2] == 0x1AF456233693CD46)
                    goto LABEL_120;
                }
                else if ((v57 & v55) != v51)
                {
                  goto LABEL_122;
                }
                v54 = (_QWORD *)*v54;
                if (!v54)
                  goto LABEL_122;
              }
            }
            while (2)
            {
              v56 = v54[1];
              if (v56 != 0x1AF456233693CD46)
              {
                if (v56 >= *(_QWORD *)&v50)
                  v56 %= *(_QWORD *)&v50;
                if (v56 != v51)
                  goto LABEL_122;
                goto LABEL_109;
              }
              if (v54[2] != 0x1AF456233693CD46)
              {
LABEL_109:
                v54 = (_QWORD *)*v54;
                if (!v54)
                  goto LABEL_122;
                continue;
              }
              break;
            }
LABEL_120:
            v58 = v54[5];
            if (*(_QWORD *)(v58 + 8) == 0x1AF456233693CD46)
            {
              v59 = *(float **)(v58 + 32);
              goto LABEL_123;
            }
LABEL_122:
            v59 = 0;
LABEL_123:
            if (v59[1308] >= 1.0)
            {
              *(float *)v43.i32 = fmaxf(v59[770] + v59[768], 1.0);
            }
            else
            {
              md::LayoutContext::frameState(v2);
              v43.i32[0] = *(_DWORD *)(v60 + 112);
            }
            if (vabds_f32(*(float *)v43.i32, *((float *)this + 103)) > 0.01)
              *((_DWORD *)this + 103) = v43.i32[0];
            v61 = (uint64_t *)*((_QWORD *)this + 34);
            v213 = (uint64_t *)*((_QWORD *)this + 35);
            v214 = v59;
            if (v61 != v213)
            {
              v217 = 0;
              while (1)
              {
                v215 = v61;
                v221 = *v61;
                v63 = *(_QWORD *)(*v61 + 384);
                v64 = vcvtms_s32_f32(fmaxf(v59[770] + v59[768], 1.0));
                if (v64 >= 0x17)
                  v64 = 23;
                v65 = *(_BYTE *)(v63 + 1368) || *(_BYTE *)(v63 + 1369) != 0;
                v66 = *((_DWORD *)v218 + 102);
                v67 = *((float *)v218 + 103);
                *(_BYTE *)(v63 + 1368) = 0;
                if (*(_DWORD *)(v63 + 1360) != v66)
                  break;
LABEL_146:
                v74 = *(_DWORD *)(v63 + 1364) != v64 || v65;
                v75 = *(_QWORD *)(v63 + 888);
                v76 = *(_QWORD *)(v63 + 896);
                while (v75 != v76)
                {
                  v77 = *(_QWORD **)(v75 + 80);
                  v78 = *(_QWORD **)(v75 + 88);
                  while (v77 != v78)
                  {
                    if (*v77)
                      v79 = *v77 + 8;
                    else
                      v79 = 0;
                    v80 = *(float *)(v79 + 16) <= v67 || *(_BYTE *)(*(_QWORD *)v79 + 88) != 0;
                    if (*(unsigned __int8 *)(v79 + 56) != v80)
                    {
                      *(_BYTE *)(v79 + 56) = v80;
                      v74 = 1;
                    }
                    ++v77;
                  }
                  v75 += 248;
                }
                v81 = v63 + 912;
                v82 = *(_QWORD *)(v63 + 920);
                if (v82 != v63 + 912)
                {
                  if ((int)v67 >= 0x17)
                    v83 = 23;
                  else
                    v83 = (int)v67;
                  do
                  {
                    if (*(float *)(v82 + 40) > v67 || *(float *)(v82 + 44) <= v67)
                    {
                      v89 = 0;
                    }
                    else
                    {
                      v84 = *(_QWORD *)(v82 + 24);
                      if (v84)
                      {
                        v85 = *(std::__shared_weak_count **)(v82 + 32);
                        v228 = *(_QWORD *)(v82 + 24);
                        v229 = v85;
                        if (v85)
                        {
                          p_shared_owners = (unint64_t *)&v85->__shared_owners_;
                          do
                            v87 = __ldxr(p_shared_owners);
                          while (__stxr(v87 + 1, p_shared_owners));
                          *((_QWORD *)&v223 + 1) = v85;
                          do
                            v88 = __ldxr(p_shared_owners);
                          while (__stxr(v88 + 1, p_shared_owners));
                        }
                        else
                        {
                          *((_QWORD *)&v223 + 1) = 0;
                        }
                        *(_QWORD *)&v223 = v84;
                        v224 = 0;
                        v225 = 0;
                        LOBYTE(v226) = 0;
                        v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 48))(v84);
                        LOBYTE(v226) = v90;
                        if (v85)
                        {
                          v91 = (unint64_t *)&v85->__shared_owners_;
                          do
                            v92 = __ldaxr(v91);
                          while (__stlxr(v92 - 1, v91));
                          if (!v92)
                          {
                            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                            std::__shared_weak_count::__release_weak(v85);
                          }
                          v90 = v226;
                        }
                        if (v90)
                        {
                          v93 = *(_QWORD *)(v223 + 24);
                          v94 = *(float **)v93;
                          if (*(_QWORD *)v93
                            && (v95 = *v94, LODWORD(v94) = *v94 == 1.0, *(_BYTE *)(v93 + 10))
                            && (v95 != 0.0 ? (v96 = v95 == 1.0) : (v96 = 1), !v96)
                            || (v97 = *(unsigned __int8 *)(v93 + v94 + 11), v95 = 0.0, v97 == 2))
                          {
                            LOBYTE(v228) = 1;
                            v232.i8[0] = 1;
                            v98 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v93, 0x5Bu, v83, 0, &v228);
                            v99 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v93, 0x5Bu, v83, 1, &v232);
                            if (v95 < 1.0)
                              v99 = v98;
                          }
                          else
                          {
                            v99 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v223 + 24), 0x5Bu, v83, v97, 0);
                          }
                          v89 = v99 != 0;
                        }
                        else
                        {
                          v89 = 0;
                        }
                        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v223);
                      }
                      else
                      {
                        v89 = 1;
                      }
                    }
                    if (*(unsigned __int8 *)(v82 + 48) != v89)
                    {
                      *(_BYTE *)(v82 + 48) = v89;
                      v74 = 1;
                    }
                    v82 = *(_QWORD *)(v82 + 8);
                  }
                  while (v82 != v81);
                }
                v100 = *((unsigned __int8 *)v218 + 416);
                if ((v74 & 1) != 0)
                  goto LABEL_209;
                if (*((_BYTE *)v218 + 416))
                {
                  v100 = 1;
LABEL_209:
                  v103 = (_QWORD *)*((_QWORD *)v216 + 1);
                  v104 = v103[1];
                  if ((v104 & (v104 - 1)) != 0)
                  {
                    v106 = 0x1AF456233693CD46;
                    if (v104 <= 0x1AF456233693CD46)
                      v106 = 0x1AF456233693CD46 % v104;
                    v105 = *(_QWORD **)(*v103 + 8 * v106);
                    do
                    {
                      do
                        v105 = (_QWORD *)*v105;
                      while (v105[1] != 0x1AF456233693CD46);
                    }
                    while (v105[2] != 0x1AF456233693CD46);
                  }
                  else
                  {
                    v105 = *(_QWORD **)(*v103 + 8 * ((v104 - 1) & 0x1AF456233693CD46));
                    do
                    {
                      do
                        v105 = (_QWORD *)*v105;
                      while (v105[1] != 0x1AF456233693CD46);
                    }
                    while (v105[2] != 0x1AF456233693CD46);
                  }
                  v107 = *((_QWORD *)v218 + 47);
                  v108 = *(_BYTE *)(v107 + 323);
                  v109 = v100 != 0;
                  *(float *)v43.i32 = fmaxf(*(float *)(*(_QWORD *)(v105[5] + 32) + 3080)+ *(float *)(*(_QWORD *)(v105[5] + 32) + 3072), 1.0);
                  v110 = vcvtms_s32_f32(*(float *)v43.i32);
                  if (v110 >= 0x17)
                    v110 = 23;
                  *(_DWORD *)(v63 + 1364) = v110;
                  md::TransitTileData::updateLineStyles(v63, (uint64_t)v216, v108, v109, (float *)(v107 + 328), v43);
                  v111 = *(_QWORD *)(v63 + 920);
                  if (v111 == v81)
                  {
LABEL_292:
                    v157 = *(_QWORD **)(v63 + 944);
                    for (i = *(_QWORD **)(v63 + 952); v157 != i; v157 += 2)
                      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v157 + 48))(*v157, *(unsigned __int8 *)(v63 + 1370));
                    v159 = *(int8x8_t **)(v63 + 1224);
                    if (v159 && *(_BYTE *)(v63 + 1370))
                    {
                      v160 = *(_QWORD *)(v63 + 944);
                      v161 = *(_QWORD *)(v63 + 952);
                      while (v160 != v161)
                      {
                        v165 = v159[5];
                        if (v165)
                        {
                          v166 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v160 + 8) + 40);
                          v43 = (uint8x8_t)vcnt_s8(v165);
                          v43.i16[0] = vaddlv_u8(v43);
                          if (v43.u32[0] > 1uLL)
                          {
                            v167 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v160 + 8) + 40);
                            if (v166 >= *(_QWORD *)&v165)
                              v167 = v166 % *(_QWORD *)&v165;
                          }
                          else
                          {
                            v167 = (*(_QWORD *)&v165 - 1) & v166;
                          }
                          v168 = *(_QWORD **)(*(_QWORD *)&v159[4] + 8 * v167);
                          if (v168)
                          {
                            v169 = (_QWORD *)*v168;
                            if (v169)
                            {
                              if (v43.u32[0] < 2uLL)
                              {
                                v170 = *(_QWORD *)&v165 - 1;
                                while (1)
                                {
                                  v172 = v169[1];
                                  if (v172 == v166)
                                  {
                                    if (v169[2] == v166)
                                      goto LABEL_297;
                                  }
                                  else if ((v172 & v170) != v167)
                                  {
                                    goto LABEL_300;
                                  }
                                  v169 = (_QWORD *)*v169;
                                  if (!v169)
                                    goto LABEL_300;
                                }
                              }
                              do
                              {
                                v171 = v169[1];
                                if (v171 == v166)
                                {
                                  if (v169[2] == v166)
                                  {
LABEL_297:
                                    v162 = (_QWORD *)v169[3];
                                    v163 = v162[5];
                                    if (v162[4] == v163)
                                      v164 = 5;
                                    else
                                      v164 = *(_BYTE *)(*(_QWORD *)(v163 - 16) + 61);
                                    atomic_store(v164, (unsigned __int8 *)(v162[2] + 25));
                                    atomic_store(v162[4] != v162[5], (unsigned __int8 *)(v162[2] + 24));
                                    break;
                                  }
                                }
                                else
                                {
                                  if (v171 >= *(_QWORD *)&v165)
                                    v171 %= *(_QWORD *)&v165;
                                  if (v171 != v167)
                                    break;
                                }
                                v169 = (_QWORD *)*v169;
                              }
                              while (v169);
                            }
                          }
                        }
LABEL_300:
                        v160 += 16;
                      }
                    }
                    *(_BYTE *)(v63 + 1370) = 0;
                    goto LABEL_325;
                  }
                  while (1)
                  {
                    if (*(_BYTE *)(v111 + 48))
                    {
                      v118 = *(_DWORD *)(v63 + 1364);
                      v119 = *(float *)(v63 + 1340);
                      v120 = *(float *)(v63 + 1344);
                      v121 = *(_QWORD *)(v111 + 24);
                      v122 = *(std::__shared_weak_count **)(v111 + 32);
                      *(_QWORD *)&v223 = v121;
                      *((_QWORD *)&v223 + 1) = v122;
                      if (v122)
                      {
                        v123 = (unint64_t *)&v122->__shared_owners_;
                        do
                          v124 = __ldxr(v123);
                        while (__stxr(v124 + 1, v123));
                        v229 = v122;
                        do
                          v125 = __ldxr(v123);
                        while (__stxr(v125 + 1, v123));
                      }
                      else
                      {
                        v229 = 0;
                      }
                      v228 = v121;
                      v230[0] = 0;
                      v230[1] = 0;
                      v231 = 0;
                      if (v121)
                        LODWORD(v121) = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v121 + 48))(v121, v230);
                      v231 = v121;
                      if (v122)
                      {
                        v126 = (unint64_t *)&v122->__shared_owners_;
                        do
                          v127 = __ldaxr(v126);
                        while (__stlxr(v127 - 1, v126));
                        if (!v127)
                        {
                          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                          std::__shared_weak_count::__release_weak(v122);
                        }
                        LODWORD(v121) = v231;
                      }
                      if ((_DWORD)v121)
                      {
                        v128 = v118;
                        v129 = *(_QWORD *)(v228 + 24);
                        v130 = v128 >= 0x17 ? 23 : v128;
                        if ((v131 = *(float **)v129) != 0
                          && (v132 = *v131, LODWORD(v131) = *v131 == 1.0, *(_BYTE *)(v129 + 10))
                          && (v132 != 0.0 ? (v133 = v132 == 1.0) : (v133 = 1), !v133)
                          || (v134 = *(unsigned __int8 *)(v129 + v131 + 11), v132 = 0.0, v134 == 2))
                        {
                          LOBYTE(v223) = 1;
                          v232.i8[0] = 1;
                          v135 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v129, 0x5Eu, v130, 0, &v223);
                          v136 = v135
                               + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v129, 0x5Eu, v130, 1u, &v232)- v135)* v132);
                        }
                        else
                        {
                          v136 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v228 + 24), 0x5Eu, v130, v134, 0);
                        }
                        if ((v137 = *(_QWORD *)(v228 + 24), (v138 = *(float **)v137) != 0)
                          && (v139 = *v138, LODWORD(v138) = *v138 == 1.0, *(_BYTE *)(v137 + 10))
                          && (v139 != 0.0 ? (v140 = v139 == 1.0) : (v140 = 1), !v140)
                          || (v141 = *(unsigned __int8 *)(v137 + v138 + 11), v139 = 0.0, v141 == 2))
                        {
                          LOBYTE(v223) = 1;
                          v232.i8[0] = 1;
                          v142 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v137, 0x61u, v130, 0, &v223);
                          v143 = v142
                               + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v137, 0x61u, v130, 1u, &v232)- v142)* v139);
                        }
                        else
                        {
                          v143 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v228 + 24), 0x61u, v130, v141, 0);
                        }
                        v144 = v136 * 0.5;
                        if (v144 > 0.0 || v143 > 0.0)
                        {
                          v145 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v111 + 72) + 48) + 64) + 32);
                          v223 = 0uLL;
                          v146 = *(_QWORD *)(v145 + 8);
                          if (v146)
                            v147 = *(float32x4_t **)(v145 + 72);
                          else
                            v147 = 0;
                          *(_QWORD *)&v148 = 0;
                          *((_QWORD *)&v148 + 1) = v145;
                          v219 = v148;
                          v223 = v148;
                          v224 = 0;
                          v225 = v146;
                          v227 = v147;
                          v226 = 1;
                          gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v232, *(_QWORD *)(v228 + 24), 0x5Du, v130, 2u, 0);
                          v149.i32[0] = 931135616;
                          v150 = (float32x4_t)vdupq_lane_s32(v149, 0);
                          v150.f32[3] = v120 * 0.000015259;
                          v222 = v150;
                          *v147 = vmulq_f32(v150, vcvtq_f32_u32(vmovl_u16(v232)));
                          v147[1].f32[2] = (float)(v143 + v144) * v119;
                          v147[1].i64[0] = 0;
                          v147[1].f32[3] = (float)*(unsigned int *)(**(_QWORD **)(*(_QWORD *)(v111 + 56) + 96) + 80);
                          if (v146)
                          {
                            if ((_QWORD)v219 && *(_BYTE *)(*((_QWORD *)&v219 + 1) + 17) != 2)
                              (*(void (**)(void))(*(_QWORD *)v219 + 64))();
                            v151 = *(_QWORD *)(*((_QWORD *)&v219 + 1) + 64);
                            if (v151 <= v146)
                              v151 = v146;
                            *(_QWORD *)(*((_QWORD *)&v219 + 1) + 56) = 0;
                            *(_QWORD *)(*((_QWORD *)&v219 + 1) + 64) = v151;
                          }
                          v152 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v111 + 72) + 176) + 64) + 32);
                          v223 = 0uLL;
                          v153 = *(_QWORD *)(v152 + 8);
                          if (v153)
                            v154 = *(float32x4_t **)(v152 + 72);
                          else
                            v154 = 0;
                          *(_QWORD *)&v155 = 0;
                          *((_QWORD *)&v155 + 1) = v152;
                          v220 = v155;
                          v223 = v155;
                          v224 = 0;
                          v225 = v153;
                          v227 = v154;
                          v226 = 1;
                          gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v232, *(_QWORD *)(v228 + 24), 0x5Cu, v130, 2u, 0);
                          *v154 = vmulq_f32(v222, vcvtq_f32_u32(vmovl_u16(v232)));
                          v154[1].f32[2] = v144 * v119;
                          v154[1].i64[0] = 0;
                          v154[1].f32[3] = (float)*(unsigned int *)(**(_QWORD **)(*(_QWORD *)(v111 + 64) + 96) + 80);
                          if (v153)
                          {
                            if ((_QWORD)v220 && *(_BYTE *)(*((_QWORD *)&v220 + 1) + 17) != 2)
                              (*(void (**)(void))(*(_QWORD *)v220 + 64))();
                            v156 = *(_QWORD *)(*((_QWORD *)&v220 + 1) + 64);
                            if (v156 <= v153)
                              v156 = v153;
                            *(_QWORD *)(*((_QWORD *)&v220 + 1) + 56) = 0;
                            *(_QWORD *)(*((_QWORD *)&v220 + 1) + 64) = v156;
                          }
                          gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v228);
                          v111 = *(_QWORD *)(v111 + 8);
                          if (v111 == v81)
                            goto LABEL_292;
                          continue;
                        }
                      }
                      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v228);
                    }
                    v112 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v111 + 72) + 48) + 64) + 32);
                    v113 = v112[1];
                    v114 = v112[9];
                    *(_QWORD *)v114 = 0;
                    *(_QWORD *)(v114 + 8) = 0;
                    *(_DWORD *)(v114 + 24) = 0;
                    *(_QWORD *)(v114 + 16) = 0;
                    if (v112[8] > v113)
                      v113 = v112[8];
                    v112[7] = 0;
                    v112[8] = v113;
                    v115 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v111 + 72) + 176) + 64) + 32);
                    v116 = v115[1];
                    v117 = v115[9];
                    *(_QWORD *)v117 = 0;
                    *(_QWORD *)(v117 + 8) = 0;
                    *(_DWORD *)(v117 + 24) = 0;
                    *(_QWORD *)(v117 + 16) = 0;
                    if (v115[8] > v116)
                      v116 = v115[8];
                    v115[7] = 0;
                    v115[8] = v116;
                    v111 = *(_QWORD *)(v111 + 8);
                    if (v111 == v81)
                      goto LABEL_292;
                  }
                }
                v101 = *(id *)(v221 + 408);
                v102 = v101 == 0;

                if (!v102)
                {
                  v100 = *((unsigned __int8 *)v218 + 416);
                  goto LABEL_209;
                }
LABEL_325:
                v173 = (v217 & 1) != 0 || *(_QWORD *)(v63 + 1072) != 0;
                LODWORD(v217) = v173;
                v59 = v214;
                v62 = (v217 & 0x100000000) != 0 || *(_QWORD *)(v63 + 1064) || *(_QWORD *)(v63 + 1216) != 0;
                HIDWORD(v217) = v62;
                v61 = v215 + 1;
                if (v215 + 1 == v213)
                  goto LABEL_332;
              }
              v68 = *(_QWORD *)(v63 + 864);
              v69 = *(_QWORD *)(v63 + 872);
              if (v68 != v69)
              {
                v70 = v69 - v68 - 104;
                if (v70 > 0x67)
                {
                  v71 = v70 / 0x68 + 1;
                  v72 = (_DWORD *)(v68 + 164);
                  v73 = v71 & 0x7FFFFFFFFFFFFFELL;
                  do
                  {
                    *(v72 - 26) = -1;
                    *v72 = -1;
                    v72 += 52;
                    v73 -= 2;
                  }
                  while (v73);
                  if (v71 == (v71 & 0x7FFFFFFFFFFFFFELL))
                    goto LABEL_145;
                  v68 += 104 * (v71 & 0x7FFFFFFFFFFFFFELL);
                }
                do
                {
                  *(_DWORD *)(v68 + 60) = -1;
                  v68 += 104;
                }
                while (v68 != v69);
              }
LABEL_145:
              *(_DWORD *)(v63 + 1360) = v66;
              v65 = 1;
              goto LABEL_146;
            }
            v217 = 0;
LABEL_332:
            v174 = (uint64_t)v218;
            *((_BYTE *)v218 + 416) = 0;
            v175 = (const md::LayoutContext **)v216;
            v176 = (_QWORD *)*((_QWORD *)v216 + 1);
            v177 = v176[1];
            if ((v177 & (v177 - 1)) != 0)
            {
              v180 = 0x1AF456233693CD46;
              v179 = v211;
              if (v177 <= 0x1AF456233693CD46)
                v180 = 0x1AF456233693CD46 % v177;
              v178 = *(_QWORD **)(*v176 + 8 * v180);
              do
              {
                do
                  v178 = (_QWORD *)*v178;
                while (v178[1] != 0x1AF456233693CD46);
              }
              while (v178[2] != 0x1AF456233693CD46);
            }
            else
            {
              v178 = **(_QWORD ***)(*v176 + 8 * ((v177 - 1) & 0x1AF456233693CD46));
              v179 = v211;
              while (v178[1] != 0x1AF456233693CD46 || v178[2] != 0x1AF456233693CD46)
                v178 = (_QWORD *)*v178;
            }
            v181 = *(double *)(*(_QWORD *)(v178[5] + 32) + 40);
            v182 = !v179;
            *((_BYTE *)v218 + 420) = !v179;
            if (v181 <= 0.0)
            {
              v184 = 0;
              *((_BYTE *)v218 + 419) = 0;
            }
            else
            {
              if (*((_BYTE *)v218 + 417))
              {
                v183 = vcvtms_s32_f32(fmaxf(v214[770] + v214[768], 1.0));
                if (v183 >= 0x17)
                  v183 = 23;
                v184 = v183 > 0xD;
              }
              else
              {
                v184 = **((unsigned __int8 **)v216 + 92);
              }
              *((_BYTE *)v218 + 419) = v184;
            }
            if (!v184)
              v182 = 0;
            *((_BYTE *)v218 + 421) = v182;
            if (*(_BYTE *)(*((_QWORD *)v218 + 47) + 4))
            {
              +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
              v185 = (void *)objc_claimAutoreleasedReturnValue();
              v186 = objc_msgSend(v185, "disableTransitLineDrawing");

              v187 = v186 ^ 1;
              v175 = (const md::LayoutContext **)v216;
              v174 = (uint64_t)v218;
            }
            else
            {
              v187 = 1;
            }
            if (!v187 || !v217)
              goto LABEL_388;
            v188 = 38;
            if (*(_QWORD *)(v174 + 368) == 1)
              v188 = 40;
            v189 = *(_QWORD *)(*(_QWORD *)(v174 + 384) + 8);
            v190 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v174 + 40) + 24) + 8);
            if (*(_QWORD *)(v174 + 368) == 1)
              v191 = 190;
            else
              v191 = 188;
            if (*(_QWORD *)(v174 + 368) == 1)
              v192 = 156;
            else
              v192 = 154;
            v193 = (_BYTE *)v174;
            v194 = md::PassList::commandBufferForId(*(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v174 + 40) + 24) + 8), *(_WORD *)(v189 + v188), HIBYTE(*(_WORD *)(v189 + v188)));
            v195 = md::PassList::commandBufferForId(v190, *(_WORD *)(v189 + v191), HIBYTE(*(_WORD *)(v189 + v191)));
            v196 = md::PassList::commandBufferForId(v190, *(_WORD *)(v189 + v192), HIBYTE(*(_WORD *)(v189 + v192)));
            v197 = v193[421];
            v193[418] = v197;
            if (v197)
              v198 = v196;
            else
              v198 = v195;
            if (v193[420])
              v199 = (ggl::CommandBuffer *)v194;
            else
              v199 = 0;
            if ((v217 & 1) != 0)
            {
              if (v193[420])
              {
                v200 = *(_DWORD *)(*((_QWORD *)v218 + 47) + 72);
                LOBYTE(v223) = 0;
                md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::layoutStencilTiles((uint64_t)v218, v216, v194, v200, &v223);
                v201 = *(_QWORD *)(*((_QWORD *)v218 + 47) + 152);
                if (v201)
                  *(_QWORD *)(v194 + 32) = v201;
              }
              v8 = v212;
              v175 = (const md::LayoutContext **)v216;
              v174 = (uint64_t)v218;
              if ((v217 & 0x100000000) == 0 && *((_BYTE *)v218 + 420))
                goto LABEL_386;
            }
            else
            {
              v8 = v212;
              v175 = (const md::LayoutContext **)v216;
              v174 = (uint64_t)v218;
              if ((v217 & 0x100000000) == 0)
              {
LABEL_386:
                if (*(_QWORD *)(v174 + 272) != *(_QWORD *)(v174 + 280))
                {
                  md::TransitRenderLayer::appendTransitLineCommandsToBuffer((md::TransitRenderLayer *)v174, (ggl::CommandBuffer *)v198, v199, v175[1]);
                  ggl::CommandBuffer::sortRenderItems(*(ggl::CommandBuffer **)(v198 + 72), *(ggl::CommandBuffer **)(v198 + 80));
                }
LABEL_388:
                md::TransitRenderLayer::debugLayoutWithContext((md::TransitRenderLayer *)v174, (const md::LayoutContext *)v175);
                goto LABEL_389;
              }
            }
            v202 = 64;
            if (!*(_BYTE *)(v174 + 418))
              v202 = 68;
            v203 = *(_DWORD *)(*(_QWORD *)(v174 + 376) + v202);
            LOBYTE(v223) = 0;
            md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::layoutStencilTiles(v174, (md::LayoutContext *)v175, v198, v203, &v223);
            v204 = 136;
            if (!*(_BYTE *)(v174 + 418))
              v204 = 144;
            v205 = *(_QWORD *)(*(_QWORD *)(v174 + 376) + v204);
            if (v205)
              *(_QWORD *)(v198 + 32) = v205;
            goto LABEL_386;
          }
        }
      }
    }
  }
LABEL_389:
  v206 = mach_absolute_time();
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
  v207 = (unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 128);
  do
    v208 = __ldaxr(v207);
  while (__stlxr(v208 + v206 - v8, v207));
  if (!v240)
  {
LABEL_400:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v240 + 48))(v240);
  result = v240;
  if (v240 == v239)
  {
    v210 = 4;
    result = v239;
  }
  else
  {
    if (!v240)
      return result;
    v210 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v210))();
}

void sub_19F3CF408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v13 = mach_absolute_time();
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
  v14 = (unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 128);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + v13 - a11, v14));
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v11 - 192));
  _Unwind_Resume(a1);
}

char **md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>::collectRenderItemsForPassesNoReset(char **result, char a2, uint64_t a3, __n128 a4)
{
  char **v5;
  uint64_t v6;
  _BOOL4 v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char **v15;
  char **v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char **v75;
  char *v76;
  char *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  char *v81;
  char *v82;
  char *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  char *v95;
  char *v96;
  char *v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  char *v109;
  char *v110;
  char *v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  char *v123;
  char *v124;
  char *v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  char *v130;
  uint64_t v131;
  md::CoastlineRenderLayer *v132;
  const md::LayoutContext *v133;
  __int128 *v134;
  __int128 *v135;
  __int128 *v136;
  __int128 *v137;
  int v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;

  if (!*((_BYTE *)result + 656))
    return result;
  v5 = result;
  if ((a2 & 1) != 0 && *((_BYTE *)result + 136))
  {
    v6 = *((_QWORD *)result[1] + 7);
    result[5] = (char *)v6;
    v7 = *(unsigned __int8 *)(v6 + 58) == 1;
    if ((a2 & 2) == 0)
      goto LABEL_10;
  }
  else
  {
    v7 = 0;
    if ((a2 & 2) == 0)
      goto LABEL_10;
  }
  if (*((_BYTE *)result + 264))
  {
    v8 = (char *)*((_QWORD *)result[1] + 8);
    result[21] = v8;
    if (v8[58] == 1)
      v7 = 1;
  }
LABEL_10:
  if ((a2 & 4) != 0)
  {
    if (*((_BYTE *)result + 392))
    {
      v9 = (char *)*((_QWORD *)result[1] + 9);
      result[37] = v9;
      if (v9[58] == 1)
        v7 = 1;
    }
  }
  if ((a2 & 8) != 0)
  {
    if (*((_BYTE *)result + 520))
    {
      v10 = (char *)*((_QWORD *)result[1] + 10);
      result[53] = v10;
      if (v10[58] == 1)
        v7 = 1;
    }
  }
  v11 = result[79];
  v12 = result[80];
  if (v11 != v12)
  {
    v13 = 0;
    v136 = (__int128 *)(result + 21);
    v137 = (__int128 *)(result + 5);
    v134 = (__int128 *)(result + 53);
    v135 = (__int128 *)(result + 37);
    while (1)
    {
      v14 = *(_QWORD *)v11;
      if (*(_BYTE *)(*(_QWORD *)v11 + 48))
      {
        if (*(_QWORD *)(v14 + 88) != v13)
        {
          if (v13)
          {
            v15 = ggl::Batcher::commit((__int128 **)v5 + 66, 0xC8u, a4);
            if (v15[1] != *v15)
            {
              v16 = v15;
              if ((a2 & 1) != 0 && *((_BYTE *)v5 + 136))
              {
                v18 = v5[3];
                v17 = v5[4];
                v19 = v137[3];
                v142 = v137[2];
                v143 = v19;
                v20 = v137[5];
                v144 = v137[4];
                v145 = v20;
                v21 = v137[1];
                v140 = *v137;
                v141 = v21;
                v22 = v5[77];
                v23 = (char *)*((_QWORD *)v22 + 1);
                if (v23 == v5[78])
                {
                  v22 = *(char **)v22;
                  if (!v22)
                  {
                    v22 = (char *)malloc_type_malloc(120 * (_QWORD)v23 + 16, 0xB644C221uLL);
                    *(_QWORD *)v22 = 0;
                    *((_QWORD *)v22 + 1) = 0;
                    *(_QWORD *)v5[77] = v22;
                  }
                  v5[77] = v22;
                  v23 = (char *)*((_QWORD *)v22 + 1);
                }
                v24 = &v22[120 * (_QWORD)v23];
                *((_QWORD *)v22 + 1) = v23 + 1;
                *((_QWORD *)v24 + 2) = &off_1E42B59B0;
                *((_QWORD *)v24 + 3) = v18;
                v24 += 16;
                *((_QWORD *)v24 + 2) = v17;
                v25 = v144;
                v26 = v145;
                v27 = v143;
                *(_OWORD *)(v24 + 56) = v142;
                v28 = v140;
                *(_OWORD *)(v24 + 40) = v141;
                *(_OWORD *)(v24 + 24) = v28;
                *(_OWORD *)(v24 + 104) = v26;
                *(_OWORD *)(v24 + 88) = v25;
                *(_OWORD *)(v24 + 72) = v27;
                *((_QWORD *)v24 + 8) = v13;
                v29 = *v16;
                *((_QWORD *)v24 + 11) = *v16;
                *((_QWORD *)v24 + 12) = (v16[1] - v29) >> 4;
                v139 = 0;
                *(_QWORD *)&v140 = v24;
                v30 = *(_QWORD *)(a3 + 24);
                if (!v30)
                  goto LABEL_101;
                (*(void (**)(uint64_t, int *, __int128 *))(*(_QWORD *)v30 + 48))(v30, &v139, &v140);
              }
              if ((a2 & 2) != 0 && *((_BYTE *)v5 + 264))
              {
                v31 = v5[19];
                v32 = v5[20];
                v33 = v136[3];
                v142 = v136[2];
                v143 = v33;
                v34 = v136[5];
                v144 = v136[4];
                v145 = v34;
                v35 = v136[1];
                v140 = *v136;
                v141 = v35;
                v36 = v5[77];
                v37 = (char *)*((_QWORD *)v36 + 1);
                if (v37 == v5[78])
                {
                  v36 = *(char **)v36;
                  if (!v36)
                  {
                    v36 = (char *)malloc_type_malloc(120 * (_QWORD)v37 + 16, 0xB644C221uLL);
                    *(_QWORD *)v36 = 0;
                    *((_QWORD *)v36 + 1) = 0;
                    *(_QWORD *)v5[77] = v36;
                  }
                  v5[77] = v36;
                  v37 = (char *)*((_QWORD *)v36 + 1);
                }
                v38 = &v36[120 * (_QWORD)v37];
                *((_QWORD *)v36 + 1) = v37 + 1;
                *((_QWORD *)v38 + 2) = &off_1E42B59B0;
                *((_QWORD *)v38 + 3) = v31;
                v38 += 16;
                *((_QWORD *)v38 + 2) = v32;
                v39 = v144;
                v40 = v145;
                v41 = v143;
                *(_OWORD *)(v38 + 56) = v142;
                v42 = v140;
                *(_OWORD *)(v38 + 40) = v141;
                *(_OWORD *)(v38 + 24) = v42;
                *(_OWORD *)(v38 + 104) = v40;
                *(_OWORD *)(v38 + 88) = v39;
                *(_OWORD *)(v38 + 72) = v41;
                *((_QWORD *)v38 + 8) = v13;
                v43 = *v16;
                *((_QWORD *)v38 + 11) = *v16;
                *((_QWORD *)v38 + 12) = (v16[1] - v43) >> 4;
                v139 = 1;
                *(_QWORD *)&v140 = v38;
                v44 = *(_QWORD *)(a3 + 24);
                if (!v44)
                  goto LABEL_101;
                (*(void (**)(uint64_t, int *, __int128 *))(*(_QWORD *)v44 + 48))(v44, &v139, &v140);
              }
              if ((a2 & 4) != 0 && *((_BYTE *)v5 + 392))
              {
                v45 = v5[35];
                v46 = v5[36];
                v47 = v135[3];
                v142 = v135[2];
                v143 = v47;
                v48 = v135[5];
                v144 = v135[4];
                v145 = v48;
                v49 = v135[1];
                v140 = *v135;
                v141 = v49;
                v50 = v5[77];
                v51 = (char *)*((_QWORD *)v50 + 1);
                if (v51 == v5[78])
                {
                  v50 = *(char **)v50;
                  if (!v50)
                  {
                    v50 = (char *)malloc_type_malloc(120 * (_QWORD)v51 + 16, 0xB644C221uLL);
                    *(_QWORD *)v50 = 0;
                    *((_QWORD *)v50 + 1) = 0;
                    *(_QWORD *)v5[77] = v50;
                  }
                  v5[77] = v50;
                  v51 = (char *)*((_QWORD *)v50 + 1);
                }
                v52 = &v50[120 * (_QWORD)v51];
                *((_QWORD *)v50 + 1) = v51 + 1;
                *((_QWORD *)v52 + 2) = &off_1E42B59B0;
                *((_QWORD *)v52 + 3) = v45;
                v52 += 16;
                *((_QWORD *)v52 + 2) = v46;
                v53 = v144;
                v54 = v145;
                v55 = v143;
                *(_OWORD *)(v52 + 56) = v142;
                v56 = v140;
                *(_OWORD *)(v52 + 40) = v141;
                *(_OWORD *)(v52 + 24) = v56;
                *(_OWORD *)(v52 + 104) = v54;
                *(_OWORD *)(v52 + 88) = v53;
                *(_OWORD *)(v52 + 72) = v55;
                *((_QWORD *)v52 + 8) = v13;
                v57 = *v16;
                *((_QWORD *)v52 + 11) = *v16;
                *((_QWORD *)v52 + 12) = (v16[1] - v57) >> 4;
                v139 = 2;
                *(_QWORD *)&v140 = v52;
                v58 = *(_QWORD *)(a3 + 24);
                if (!v58)
                  goto LABEL_101;
                (*(void (**)(uint64_t, int *, __int128 *))(*(_QWORD *)v58 + 48))(v58, &v139, &v140);
              }
              if ((a2 & 8) != 0 && *((_BYTE *)v5 + 520))
              {
                v59 = v5[51];
                v60 = v5[52];
                v61 = v134[3];
                v142 = v134[2];
                v143 = v61;
                v62 = v134[5];
                v144 = v134[4];
                v145 = v62;
                v63 = v134[1];
                v140 = *v134;
                v141 = v63;
                v64 = v5[77];
                v65 = (char *)*((_QWORD *)v64 + 1);
                if (v65 == v5[78])
                {
                  v64 = *(char **)v64;
                  if (!v64)
                  {
                    v64 = (char *)malloc_type_malloc(120 * (_QWORD)v65 + 16, 0xB644C221uLL);
                    *(_QWORD *)v64 = 0;
                    *((_QWORD *)v64 + 1) = 0;
                    *(_QWORD *)v5[77] = v64;
                  }
                  v5[77] = v64;
                  v65 = (char *)*((_QWORD *)v64 + 1);
                }
                v66 = &v64[120 * (_QWORD)v65];
                *((_QWORD *)v64 + 1) = v65 + 1;
                *((_QWORD *)v66 + 2) = &off_1E42B59B0;
                *((_QWORD *)v66 + 3) = v59;
                v66 += 16;
                *((_QWORD *)v66 + 2) = v60;
                v67 = v144;
                v68 = v145;
                v69 = v143;
                *(_OWORD *)(v66 + 56) = v142;
                v70 = v140;
                *(_OWORD *)(v66 + 40) = v141;
                *(_OWORD *)(v66 + 24) = v70;
                *(_OWORD *)(v66 + 104) = v68;
                *(_OWORD *)(v66 + 88) = v67;
                *(_OWORD *)(v66 + 72) = v69;
                *((_QWORD *)v66 + 8) = v13;
                v71 = *v16;
                *((_QWORD *)v66 + 11) = *v16;
                *((_QWORD *)v66 + 12) = (v16[1] - v71) >> 4;
                v139 = 3;
                *(_QWORD *)&v140 = v66;
                v72 = *(_QWORD *)(a3 + 24);
                if (!v72)
                  goto LABEL_101;
                (*(void (**)(uint64_t, int *, __int128 *))(*(_QWORD *)v72 + 48))(v72, &v139, &v140);
              }
            }
          }
          v14 = *(_QWORD *)v11;
          v13 = *(_QWORD *)(*(_QWORD *)v11 + 88);
        }
        if (v7)
          v73 = 32;
        else
          v73 = 16;
        if (v7)
          v74 = v14 + 32;
        else
          v74 = v14 + 16;
        if (*(_QWORD *)(v74 + 8) != *(_QWORD *)(v14 + v73))
          gm::MultiRange<unsigned long>::push_back(v5 + 66, (_OWORD *)v74);
      }
      v11 += 8;
      if (v11 == v12)
        goto LABEL_67;
    }
  }
  v13 = 0;
LABEL_67:
  result = ggl::Batcher::commit((__int128 **)v5 + 66, 0xC8u, a4);
  if (result[1] != *result)
  {
    v75 = result;
    if ((a2 & 1) != 0 && *((_BYTE *)v5 + 136))
    {
      v76 = v5[3];
      v77 = v5[4];
      v78 = *(_OWORD *)(v5 + 11);
      v142 = *(_OWORD *)(v5 + 9);
      v143 = v78;
      v79 = *(_OWORD *)(v5 + 15);
      v144 = *(_OWORD *)(v5 + 13);
      v145 = v79;
      v80 = *(_OWORD *)(v5 + 7);
      v140 = *(_OWORD *)(v5 + 5);
      v141 = v80;
      v81 = v5[77];
      v82 = (char *)*((_QWORD *)v81 + 1);
      if (v82 == v5[78])
      {
        v81 = *(char **)v81;
        if (!v81)
        {
          v81 = (char *)malloc_type_malloc(120 * (_QWORD)v82 + 16, 0xB644C221uLL);
          *(_QWORD *)v81 = 0;
          *((_QWORD *)v81 + 1) = 0;
          *(_QWORD *)v5[77] = v81;
        }
        v5[77] = v81;
        v82 = (char *)*((_QWORD *)v81 + 1);
      }
      v83 = &v81[120 * (_QWORD)v82];
      *((_QWORD *)v81 + 1) = v82 + 1;
      *((_QWORD *)v83 + 2) = &off_1E42B59B0;
      *((_QWORD *)v83 + 3) = v76;
      v83 += 16;
      *((_QWORD *)v83 + 2) = v77;
      v84 = v144;
      v85 = v145;
      v86 = v143;
      *(_OWORD *)(v83 + 56) = v142;
      v87 = v140;
      *(_OWORD *)(v83 + 40) = v141;
      *(_OWORD *)(v83 + 24) = v87;
      *(_OWORD *)(v83 + 104) = v85;
      *(_OWORD *)(v83 + 88) = v84;
      *(_OWORD *)(v83 + 72) = v86;
      *((_QWORD *)v83 + 8) = v13;
      v88 = *v75;
      *((_QWORD *)v83 + 11) = *v75;
      *((_QWORD *)v83 + 12) = (v75[1] - v88) >> 4;
      v139 = 0;
      *(_QWORD *)&v140 = v83;
      v89 = *(_QWORD *)(a3 + 24);
      if (!v89)
        goto LABEL_101;
      result = (char **)(*(uint64_t (**)(uint64_t, int *, __int128 *))(*(_QWORD *)v89 + 48))(v89, &v139, &v140);
    }
    if ((a2 & 2) != 0 && *((_BYTE *)v5 + 264))
    {
      v90 = v5[19];
      v91 = v5[20];
      v92 = *(_OWORD *)(v5 + 27);
      v142 = *(_OWORD *)(v5 + 25);
      v143 = v92;
      v93 = *(_OWORD *)(v5 + 31);
      v144 = *(_OWORD *)(v5 + 29);
      v145 = v93;
      v94 = *(_OWORD *)(v5 + 23);
      v140 = *(_OWORD *)(v5 + 21);
      v141 = v94;
      v95 = v5[77];
      v96 = (char *)*((_QWORD *)v95 + 1);
      if (v96 == v5[78])
      {
        v95 = *(char **)v95;
        if (!v95)
        {
          v95 = (char *)malloc_type_malloc(120 * (_QWORD)v96 + 16, 0xB644C221uLL);
          *(_QWORD *)v95 = 0;
          *((_QWORD *)v95 + 1) = 0;
          *(_QWORD *)v5[77] = v95;
        }
        v5[77] = v95;
        v96 = (char *)*((_QWORD *)v95 + 1);
      }
      v97 = &v95[120 * (_QWORD)v96];
      *((_QWORD *)v95 + 1) = v96 + 1;
      *((_QWORD *)v97 + 2) = &off_1E42B59B0;
      *((_QWORD *)v97 + 3) = v90;
      v97 += 16;
      *((_QWORD *)v97 + 2) = v91;
      v98 = v144;
      v99 = v145;
      v100 = v143;
      *(_OWORD *)(v97 + 56) = v142;
      v101 = v140;
      *(_OWORD *)(v97 + 40) = v141;
      *(_OWORD *)(v97 + 24) = v101;
      *(_OWORD *)(v97 + 104) = v99;
      *(_OWORD *)(v97 + 88) = v98;
      *(_OWORD *)(v97 + 72) = v100;
      *((_QWORD *)v97 + 8) = v13;
      v102 = *v75;
      *((_QWORD *)v97 + 11) = *v75;
      *((_QWORD *)v97 + 12) = (v75[1] - v102) >> 4;
      v139 = 1;
      *(_QWORD *)&v140 = v97;
      v103 = *(_QWORD *)(a3 + 24);
      if (!v103)
        goto LABEL_101;
      result = (char **)(*(uint64_t (**)(uint64_t, int *, __int128 *))(*(_QWORD *)v103 + 48))(v103, &v139, &v140);
    }
    if ((a2 & 4) != 0 && *((_BYTE *)v5 + 392))
    {
      v104 = v5[35];
      v105 = v5[36];
      v106 = *(_OWORD *)(v5 + 43);
      v142 = *(_OWORD *)(v5 + 41);
      v143 = v106;
      v107 = *(_OWORD *)(v5 + 47);
      v144 = *(_OWORD *)(v5 + 45);
      v145 = v107;
      v108 = *(_OWORD *)(v5 + 39);
      v140 = *(_OWORD *)(v5 + 37);
      v141 = v108;
      v109 = v5[77];
      v110 = (char *)*((_QWORD *)v109 + 1);
      if (v110 == v5[78])
      {
        v109 = *(char **)v109;
        if (!v109)
        {
          v109 = (char *)malloc_type_malloc(120 * (_QWORD)v110 + 16, 0xB644C221uLL);
          *(_QWORD *)v109 = 0;
          *((_QWORD *)v109 + 1) = 0;
          *(_QWORD *)v5[77] = v109;
        }
        v5[77] = v109;
        v110 = (char *)*((_QWORD *)v109 + 1);
      }
      v111 = &v109[120 * (_QWORD)v110];
      *((_QWORD *)v109 + 1) = v110 + 1;
      *((_QWORD *)v111 + 2) = &off_1E42B59B0;
      *((_QWORD *)v111 + 3) = v104;
      v111 += 16;
      *((_QWORD *)v111 + 2) = v105;
      v112 = v144;
      v113 = v145;
      v114 = v143;
      *(_OWORD *)(v111 + 56) = v142;
      v115 = v140;
      *(_OWORD *)(v111 + 40) = v141;
      *(_OWORD *)(v111 + 24) = v115;
      *(_OWORD *)(v111 + 104) = v113;
      *(_OWORD *)(v111 + 88) = v112;
      *(_OWORD *)(v111 + 72) = v114;
      *((_QWORD *)v111 + 8) = v13;
      v116 = *v75;
      *((_QWORD *)v111 + 11) = *v75;
      *((_QWORD *)v111 + 12) = (v75[1] - v116) >> 4;
      v139 = 2;
      *(_QWORD *)&v140 = v111;
      v117 = *(_QWORD *)(a3 + 24);
      if (!v117)
        goto LABEL_101;
      result = (char **)(*(uint64_t (**)(uint64_t, int *, __int128 *))(*(_QWORD *)v117 + 48))(v117, &v139, &v140);
    }
    if ((a2 & 8) != 0 && *((_BYTE *)v5 + 520))
    {
      v118 = v5[51];
      v119 = v5[52];
      v120 = *(_OWORD *)(v5 + 59);
      v142 = *(_OWORD *)(v5 + 57);
      v143 = v120;
      v121 = *(_OWORD *)(v5 + 63);
      v144 = *(_OWORD *)(v5 + 61);
      v145 = v121;
      v122 = *(_OWORD *)(v5 + 55);
      v140 = *(_OWORD *)(v5 + 53);
      v141 = v122;
      v123 = v5[77];
      v124 = (char *)*((_QWORD *)v123 + 1);
      if (v124 == v5[78])
      {
        v123 = *(char **)v123;
        if (!v123)
        {
          v123 = (char *)malloc_type_malloc(120 * (_QWORD)v124 + 16, 0xB644C221uLL);
          *(_QWORD *)v123 = 0;
          *((_QWORD *)v123 + 1) = 0;
          *(_QWORD *)v5[77] = v123;
        }
        v5[77] = v123;
        v124 = (char *)*((_QWORD *)v123 + 1);
      }
      v125 = &v123[120 * (_QWORD)v124];
      *((_QWORD *)v123 + 1) = v124 + 1;
      *((_QWORD *)v125 + 2) = &off_1E42B59B0;
      *((_QWORD *)v125 + 3) = v118;
      v125 += 16;
      *((_QWORD *)v125 + 2) = v119;
      v126 = v144;
      v127 = v145;
      v128 = v143;
      *(_OWORD *)(v125 + 56) = v142;
      v129 = v140;
      *(_OWORD *)(v125 + 40) = v141;
      *(_OWORD *)(v125 + 24) = v129;
      *(_OWORD *)(v125 + 104) = v127;
      *(_OWORD *)(v125 + 88) = v126;
      *(_OWORD *)(v125 + 72) = v128;
      *((_QWORD *)v125 + 8) = v13;
      v130 = *v75;
      *((_QWORD *)v125 + 11) = *v75;
      *((_QWORD *)v125 + 12) = (v75[1] - v130) >> 4;
      v139 = 3;
      *(_QWORD *)&v140 = v125;
      v131 = *(_QWORD *)(a3 + 24);
      if (v131)
        return (char **)(*(uint64_t (**)(uint64_t, int *, __int128 *))(*(_QWORD *)v131 + 48))(v131, &v139, &v140);
LABEL_101:
      std::__throw_bad_function_call[abi:nn180100]();
      return (char **)md::CoastlineRenderLayer::layout(v132, v133);
    }
  }
  return result;
}

_QWORD *md::CoastlineRenderLayer::layout(uint64_t **this, const md::LayoutContext *a2)
{
  _QWORD *v2;
  md::CoastlineRenderLayer *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _OWORD *v40;
  __int128 *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _OWORD *v66;
  __int128 *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  _QWORD *v100;
  int8x8_t v101;
  uint8x8_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  _QWORD *v111;
  int8x8_t v112;
  uint8x8_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  float v123;
  unsigned int v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *p_shared_owners;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  void ***v135;
  int v136;
  void *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  float *v145;
  float v146;
  unsigned int v148;
  float v149;
  float v150;
  float v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  unint64_t v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t *v181;
  __int128 *v182;
  uint64_t v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  __int128 *v190;
  uint64_t v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  std::__shared_weak_count **v197;
  std::__shared_weak_count *v198;
  std::__shared_weak_count **v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  uint16x4_t *v206;
  uint16x4_t v207;
  std::__shared_weak_count *v208;
  uint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  uint64_t v215;
  float *v216;
  float v217;
  BOOL v218;
  unsigned int v219;
  float v220;
  float v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  __double2 v227;
  double v228;
  double v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  float32x4_t *v232;
  __n128 v233;
  float32_t v234;
  float32_t v235;
  float v236;
  std::__shared_weak_count *v237;
  _QWORD *v238;
  _QWORD *v239;
  _QWORD *v240;
  Allocator *var0;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *var1;
  unint64_t *v246;
  unint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t *v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t *v265;
  uint64_t v266;
  uint64_t *v267;
  __int128 *v268;
  uint64_t v269;
  __int128 v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  void *v278;
  int v279;
  uint64_t isSuperset;
  uint64_t *v281;
  char v282;
  unsigned int v283;
  char v284;
  uint64_t v285;
  uint64_t **v286;
  uint64_t **v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t *v292;
  unint64_t v293;
  float v294;
  float v295;
  uint64_t v296;
  float *v297;
  float v298;
  BOOL v299;
  unsigned int v300;
  float v301;
  uint64_t v302;
  float *v303;
  float v304;
  BOOL v305;
  unsigned int v306;
  float v307;
  float v308;
  uint64_t v309;
  float *v310;
  float v311;
  BOOL v312;
  unsigned int v313;
  float v314;
  float v315;
  uint64_t v316;
  float *v317;
  float v318;
  BOOL v319;
  unsigned int v320;
  float v321;
  BOOL v322;
  BOOL v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  uint64_t *v330;
  _QWORD *v331;
  _BYTE *v332;
  Allocator *v333;
  _QWORD *v334;
  _QWORD *v335;
  _QWORD *v336;
  char v337;
  char v338;
  uint64_t v339;
  int v340;
  id v341;
  uint64_t v342;
  _QWORD *v343;
  uint64_t v344;
  _QWORD *v345;
  uint64_t v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t *v356;
  unint64_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  unint64_t v361;
  std::__shared_weak_count *v362;
  uint64_t v363;
  __n128 v364;
  id v365;
  id v366;
  int v367;
  int v368;
  std::__shared_weak_count *v369;
  id v370;
  uint64_t v371;
  _QWORD *v372;
  _QWORD *v373;
  _QWORD *v374;
  uint64_t v375;
  uint64_t *v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t *v389;
  uint64_t v390;
  uint64_t *v391;
  __int128 *v392;
  uint64_t v393;
  __int128 v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t *v397;
  uint64_t v398;
  void ***v399;
  int v400;
  void *v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t *v406;
  unint64_t v407;
  uint64_t v408;
  float *v409;
  float v410;
  unsigned int v411;
  unsigned int v413;
  float v414;
  float v415;
  uint64_t v416;
  float *v417;
  float v418;
  BOOL v419;
  unsigned int v420;
  float v421;
  float v422;
  uint64_t v423;
  _QWORD *v424;
  uint64_t v425;
  _QWORD *v426;
  uint64_t v427;
  unint64_t *v428;
  unint64_t v429;
  std::__shared_weak_count *v430;
  unint64_t *v431;
  unint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t *v437;
  unint64_t v438;
  std::__shared_weak_count *v439;
  unint64_t *v440;
  unint64_t v441;
  _QWORD *v442;
  unint64_t v443;
  float *v444;
  _QWORD *v445;
  _QWORD *v446;
  _QWORD *v447;
  std::__shared_weak_count *v449;
  unint64_t *v450;
  unint64_t v451;
  std::__shared_weak_count *v452;
  unint64_t *v453;
  unint64_t v454;
  _QWORD *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t *v458;
  unint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unint64_t v471;
  uint64_t *v472;
  uint64_t v473;
  uint64_t *v474;
  __int128 *v475;
  uint64_t v476;
  __int128 v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t *v480;
  __n128 v481;
  uint64_t v482;
  uint64_t v483;
  std::__shared_weak_count *v484;
  unint64_t *v485;
  unint64_t v486;
  std::__shared_weak_count *v487;
  unint64_t *v488;
  unint64_t v489;
  void ***v490;
  int v491;
  void *v492;
  std::__shared_weak_count *v493;
  unint64_t *v494;
  unint64_t v495;
  unint64_t v496;
  unint64_t *v497;
  unint64_t v498;
  uint64_t v499;
  float *v500;
  float v501;
  unsigned int v502;
  unsigned int v504;
  float v505;
  float v506;
  uint64_t v507;
  float *v508;
  float v509;
  BOOL v510;
  unsigned int v511;
  float v512;
  uint64_t v513;
  std::__shared_weak_count **v514;
  std::__shared_weak_count *v515;
  std::__shared_weak_count **v516;
  std::__shared_weak_count *v517;
  unint64_t *v518;
  unint64_t v519;
  std::__shared_weak_count *v520;
  unint64_t *v521;
  unint64_t v522;
  uint16x4_t *v523;
  uint16x4_t v524;
  std::__shared_weak_count *v525;
  uint64_t v526;
  unint64_t *v527;
  unint64_t v528;
  std::__shared_weak_count *v529;
  unint64_t *v530;
  unint64_t v531;
  unint64_t v532;
  std::__shared_weak_count *v533;
  __n128 *v534;
  __n128 v535;
  std::__shared_weak_count *v536;
  _QWORD *v537;
  _QWORD *v538;
  _QWORD *v539;
  Allocator *v541;
  unint64_t *v542;
  unint64_t v543;
  std::__shared_weak_count *v544;
  unint64_t *v545;
  unint64_t v546;
  _QWORD *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t *v550;
  unint64_t v551;
  uint64_t v552;
  uint64_t v553;
  unint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t *v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  unint64_t v563;
  uint64_t *v564;
  uint64_t v565;
  __n128 *v566;
  __n128 *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  unint64_t *v571;
  unint64_t v572;
  std::__shared_weak_count *v573;
  unint64_t *v574;
  unint64_t v575;
  uint64_t v576;
  uint64_t v577;
  std::__shared_weak_count *v578;
  std::__shared_weak_count *v579;
  unint64_t *v580;
  unint64_t v581;
  uint64_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  unint64_t v594;
  std::__shared_weak_count *v595;
  float32x4_t *v596;
  _OWORD *v597;
  unint64_t v598;
  std::__shared_weak_count *v599;
  float32x4_t *v600;
  uint64_t v601;
  uint64_t *v602;
  uint64_t v603;
  uint64_t v604;
  unint64_t *v605;
  unint64_t *v606;
  unint64_t v607;
  std::__shared_weak_count *v608;
  unint64_t *v609;
  unint64_t v610;
  uint16x4_t **v611;
  int v612;
  uint16x4_t v613;
  std::__shared_weak_count *v614;
  unint64_t *v615;
  unint64_t v616;
  unint64_t v617;
  unint64_t *v618;
  unint64_t v619;
  uint64_t v620;
  float *v621;
  float v622;
  unsigned int v623;
  int v625;
  unsigned __int16 *v626;
  unsigned int v627;
  char v628;
  char v629;
  char v630;
  uint64_t v631;
  float *v632;
  float v633;
  BOOL v634;
  unsigned int v635;
  float v636;
  float v637;
  uint64_t v638;
  float *v639;
  float v640;
  BOOL v641;
  unsigned int v642;
  float v643;
  float v644;
  uint64_t v646;
  void **v647;
  void *v648;
  _QWORD *v649;
  void *v650;
  unint64_t *v651;
  unint64_t v652;
  std::__shared_weak_count *v653;
  unint64_t *v654;
  unint64_t v655;
  uint16x4_t *v656;
  uint16x4_t v657;
  std::__shared_weak_count *v658;
  uint64_t v659;
  unint64_t *v660;
  unint64_t v661;
  std::__shared_weak_count *v662;
  unint64_t *v663;
  unint64_t v664;
  _QWORD *v665;
  unint64_t v666;
  float *v667;
  _QWORD *v668;
  _QWORD *v669;
  _QWORD *v670;
  _QWORD *v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t *v675;
  unint64_t v676;
  uint64_t v677;
  uint64_t v678;
  unint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t *v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  unint64_t v688;
  uint64_t *v689;
  uint64_t v690;
  uint64_t *v691;
  __int128 *v692;
  uint64_t v693;
  __int128 v694;
  uint64_t v695;
  uint64_t v696;
  unint64_t *v697;
  unint64_t v698;
  std::__shared_weak_count *v699;
  unint64_t *v700;
  unint64_t v701;
  uint16x4_t **v702;
  uint16x4_t *v703;
  uint16x4_t v704;
  std::__shared_weak_count *v705;
  unint64_t *v706;
  unint64_t v707;
  std::__shared_weak_count *v708;
  unint64_t *v709;
  unint64_t v710;
  void ***v711;
  int v712;
  void *v713;
  std::__shared_weak_count *v714;
  unint64_t *v715;
  unint64_t v716;
  unint64_t v717;
  unint64_t *v718;
  unint64_t v719;
  uint64_t v720;
  float *v721;
  float v722;
  unsigned int v723;
  int v725;
  unsigned __int16 *v726;
  unsigned int v727;
  char v728;
  char v729;
  char v730;
  uint64_t v731;
  float *v732;
  float v733;
  BOOL v734;
  unsigned int v735;
  float v736;
  float v737;
  uint64_t v738;
  float *v739;
  float v740;
  BOOL v741;
  unsigned int v742;
  float v743;
  float v744;
  uint64_t v746;
  uint16x4_t *v747;
  uint16x4_t v748;
  uint16x4_t *v749;
  std::__shared_weak_count *v750;
  unint64_t *v751;
  unint64_t v752;
  std::__shared_weak_count *v753;
  unint64_t *v754;
  unint64_t v755;
  uint16x4_t *v756;
  uint16x4_t v757;
  std::__shared_weak_count *v758;
  uint64_t v759;
  unint64_t *v760;
  unint64_t v761;
  std::__shared_weak_count *v762;
  unint64_t *v763;
  unint64_t v764;
  unint64_t v765;
  std::__shared_weak_count *v766;
  float32x4_t *v767;
  __n128 v768;
  std::__shared_weak_count *v769;
  _QWORD *v770;
  _QWORD *v771;
  _QWORD *v772;
  _QWORD *v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t *v777;
  unint64_t v778;
  uint64_t v779;
  uint64_t v780;
  unint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t *v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  unint64_t v790;
  uint64_t *v791;
  uint64_t v792;
  uint64_t *v793;
  __int128 *v794;
  uint64_t v795;
  __int128 v796;
  uint64_t v797;
  uint64_t v798;
  unint64_t *v799;
  unint64_t v800;
  std::__shared_weak_count *v801;
  unint64_t *v802;
  unint64_t v803;
  std::__shared_weak_count *v804;
  unint64_t *v805;
  unint64_t v806;
  _QWORD *result;
  uint64_t v808;
  float64x2_t *v809;
  uint64_t v810;
  float v811;
  id v812;
  uint64_t *v813;
  char v814;
  char v815;
  uint64_t *v816;
  uint64_t *v817;
  md::LayoutContext *v819;
  float32x4_t v820;
  uint64_t *v821;
  uint64_t *v822;
  uint16x4_t **v823;
  double *v824;
  uint64_t *v825;
  uint64_t *v826;
  float32x4_t v827;
  float32x4_t v828;
  __n128 v829;
  _QWORD *v830;
  uint64_t *v831;
  float32x4_t v832;
  float32x4_t v833;
  uint64_t *v834;
  __n128 v835;
  __n128 v836;
  _QWORD *v837;
  __n128 v838;
  float32x4_t v839;
  uint64_t *v840;
  void ***v841;
  uint64_t *v842;
  uint64_t v843;
  void ***v844;
  void ***v845;
  float32x4_t v846;
  uint16x4_t **v847;
  void ***v848;
  unsigned int v849;
  uint64_t *v850;
  unsigned int v851;
  uint16x4_t v853;
  std::__shared_weak_count *v854;
  FeatureAttributeSet v855;
  unsigned __int8 v856;
  uint64_t v857;
  std::__shared_weak_count *v858;
  std::__shared_weak_count *v859;
  uint64_t v860;
  uint64_t v861;
  uint16x4_t v862;
  std::__shared_weak_count *v863;
  __n128 v864;
  uint64_t v865;
  std::__shared_weak_count *v866;
  __int16 v867;
  float32x4_t *v868;
  uint16x4_t v869;
  _QWORD v870[3];
  _QWORD *v871;
  _QWORD v872[3];
  _QWORD *v873;
  _QWORD v874[3];
  _QWORD *v875;
  uint64_t v876;

  v876 = *MEMORY[0x1E0C80C00];
  v872[0] = &off_1E42D0508;
  v872[1] = a2;
  v873 = v872;
  v870[0] = &off_1E42D0550;
  v870[1] = a2;
  v871 = v870;
  v875 = v874;
  v874[0] = &off_1E42D0550;
  v874[1] = a2;
  std::__function::__func<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v872);
  v2 = v871;
  if (v871 == v870)
  {
    v4 = 4;
    v2 = v870;
    v3 = (md::CoastlineRenderLayer *)this;
  }
  else
  {
    v3 = (md::CoastlineRenderLayer *)this;
    if (!v871)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v4))();
LABEL_6:
  v5 = v873;
  if (v873 == v872)
  {
    v6 = 4;
    v5 = v872;
  }
  else
  {
    if (!v873)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = *((_QWORD *)v3 + 44);
  *(_QWORD *)(v7 + 112) = 0;
  *(_QWORD *)(v7 + 120) = 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)v3 + 5) + 24) + 8);
  v9 = v8[3];
  v10 = v8[4];
  v11 = v10 - v9;
  if (v10 == v9)
    goto LABEL_18;
  v12 = 0;
  v13 = v11 >> 3;
  while (1)
  {
    v14 = *(unsigned __int8 **)(v9 + 8 * v12);
    if (*v14 == *((unsigned __int8 *)v3 + 376))
    {
      v15 = *((_QWORD *)v14 + 1);
      v16 = v8[15];
      if (v15 < (v8[16] - v16) >> 3)
        break;
    }
    if (++v12 >= v13)
      goto LABEL_18;
  }
  v17 = *(_QWORD *)(v16 + 8 * v15);
  if (!v17)
LABEL_18:
    v18 = 0;
  else
    v18 = *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * *((unsigned __int8 *)v3 + 377));
  v19 = *(_QWORD *)(v18 + 72);
  if (*(_QWORD *)(v18 + 80) != v19)
    *(_QWORD *)(v18 + 80) = v19;
  v20 = (uint64_t **)this[46];
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(v20[2]);
  v21 = v20[3];
  v22 = (uint64_t *)v21[4];
  v23 = (uint64_t *)v21[5];
  if (v22 != v23)
  {
    v24 = (_QWORD *)v21[1];
    while (1)
    {
      v25 = *v22;
      v26 = v21[2];
      if ((unint64_t)v24 >= v26)
        break;
      if (v24)
        *v24 = v25;
      ++v24;
LABEL_24:
      v21[1] = (uint64_t)v24;
      if (++v22 == v23)
      {
        v46 = v21[4];
        if (v46 != v21[5])
          v21[5] = v46;
        goto LABEL_53;
      }
    }
    v27 = ((uint64_t)v24 - *v21) >> 3;
    if ((unint64_t)(v27 + 1) >> 61)
LABEL_1060:
      abort();
    v28 = v26 - *v21;
    v29 = v28 >> 2;
    if (v28 >> 2 <= (unint64_t)(v27 + 1))
      v29 = v27 + 1;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
      v30 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v30 = v29;
    if (v30)
    {
      v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21[3] + 16))(v21[3], 8 * v30, 8);
      v32 = (_QWORD *)(v31 + 8 * v27);
      v33 = v31 + 8 * v30;
      if (v31)
        *v32 = v25;
    }
    else
    {
      v33 = 0;
      v32 = (_QWORD *)(8 * v27);
    }
    v35 = *v21;
    v34 = v21[1];
    v36 = v34 - *v21;
    if (v34 == *v21)
    {
      v38 = v32;
      goto LABEL_49;
    }
    v37 = v36 - 8;
    if ((unint64_t)(v36 - 8) < 0x38)
    {
      v38 = v32;
    }
    else
    {
      v38 = v32;
      if ((unint64_t)(v34 - (_QWORD)v32) >= 0x20)
      {
        v39 = (v37 >> 3) + 1;
        v40 = v32 - 2;
        v41 = (__int128 *)(v34 - 16);
        v42 = v39 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v43 = *v41;
          *(v40 - 1) = *(v41 - 1);
          *v40 = v43;
          v40 -= 2;
          v41 -= 2;
          v42 -= 4;
        }
        while (v42);
        v38 = &v32[-(v39 & 0x3FFFFFFFFFFFFFFCLL)];
        v34 -= 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
        if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_48;
      }
    }
    do
    {
      v44 = *(_QWORD *)(v34 - 8);
      v34 -= 8;
      *--v38 = v44;
    }
    while (v34 != v35);
LABEL_48:
    v34 = *v21;
LABEL_49:
    v24 = v32 + 1;
    *v21 = (uint64_t)v38;
    v21[1] = (uint64_t)(v32 + 1);
    v45 = v21[2];
    v21[2] = v33;
    if (v34)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21[3] + 40))(v21[3], v34, v45 - v34);
    goto LABEL_24;
  }
LABEL_53:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(v20[13]);
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(v20[14]);
  v47 = *v20;
  v48 = (uint64_t *)(*v20)[4];
  v49 = (uint64_t *)(*v20)[5];
  if (v48 == v49)
    goto LABEL_85;
  v50 = (_QWORD *)v47[1];
  do
  {
    v51 = *v48;
    v52 = v47[2];
    if ((unint64_t)v50 < v52)
    {
      if (v50)
        *v50 = v51;
      ++v50;
      goto LABEL_56;
    }
    v53 = ((uint64_t)v50 - *v47) >> 3;
    if ((unint64_t)(v53 + 1) >> 61)
      goto LABEL_1060;
    v54 = v52 - *v47;
    v55 = v54 >> 2;
    if (v54 >> 2 <= (unint64_t)(v53 + 1))
      v55 = v53 + 1;
    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
      v56 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v56 = v55;
    if (v56)
    {
      v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v47[3] + 16))(v47[3], 8 * v56, 8);
      v58 = (_QWORD *)(v57 + 8 * v53);
      v59 = v57 + 8 * v56;
      if (v57)
        *v58 = v51;
    }
    else
    {
      v59 = 0;
      v58 = (_QWORD *)(8 * v53);
    }
    v61 = *v47;
    v60 = v47[1];
    v62 = v60 - *v47;
    if (v60 == *v47)
    {
      v64 = v58;
      goto LABEL_81;
    }
    v63 = v62 - 8;
    if ((unint64_t)(v62 - 8) < 0x38)
    {
      v64 = v58;
    }
    else
    {
      v64 = v58;
      if ((unint64_t)(v60 - (_QWORD)v58) >= 0x20)
      {
        v65 = (v63 >> 3) + 1;
        v66 = v58 - 2;
        v67 = (__int128 *)(v60 - 16);
        v68 = v65 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v69 = *v67;
          *(v66 - 1) = *(v67 - 1);
          *v66 = v69;
          v66 -= 2;
          v67 -= 2;
          v68 -= 4;
        }
        while (v68);
        v64 = &v58[-(v65 & 0x3FFFFFFFFFFFFFFCLL)];
        v60 -= 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
        if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_80;
      }
    }
    do
    {
      v70 = *(_QWORD *)(v60 - 8);
      v60 -= 8;
      *--v64 = v70;
    }
    while (v60 != v61);
LABEL_80:
    v60 = *v47;
LABEL_81:
    v50 = v58 + 1;
    *v47 = (uint64_t)v64;
    v47[1] = (uint64_t)(v58 + 1);
    v71 = v47[2];
    v47[2] = v59;
    if (v60)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v47[3] + 40))(v47[3], v60, v71 - v60);
LABEL_56:
    v47[1] = (uint64_t)v50;
    ++v48;
  }
  while (v48 != v49);
  v72 = v47[4];
  if (v72 != v47[5])
    v47[5] = v72;
LABEL_85:
  v73 = v20[1];
  v74 = (uint64_t *)v73[4];
  v75 = (uint64_t *)v73[5];
  if (v74 == v75)
    goto LABEL_117;
  v76 = (_QWORD *)v73[1];
  while (2)
  {
    v77 = *v74;
    v78 = v73[2];
    if ((unint64_t)v76 < v78)
    {
      if (v76)
        *v76 = v77;
      ++v76;
      goto LABEL_88;
    }
    v79 = ((uint64_t)v76 - *v73) >> 3;
    if ((unint64_t)(v79 + 1) >> 61)
      goto LABEL_1060;
    v80 = v78 - *v73;
    v81 = v80 >> 2;
    if (v80 >> 2 <= (unint64_t)(v79 + 1))
      v81 = v79 + 1;
    if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
      v82 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v82 = v81;
    if (v82)
    {
      v83 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v73[3] + 16))(v73[3], 8 * v82, 8);
      v84 = (_QWORD *)(v83 + 8 * v79);
      v85 = v83 + 8 * v82;
      if (v83)
        *v84 = v77;
    }
    else
    {
      v85 = 0;
      v84 = (_QWORD *)(8 * v79);
    }
    v87 = *v73;
    v86 = v73[1];
    v88 = v86 - *v73;
    if (v86 == *v73)
    {
      v90 = v84;
      goto LABEL_113;
    }
    v89 = v88 - 8;
    if ((unint64_t)(v88 - 8) < 0x38)
    {
      v90 = v84;
      do
      {
LABEL_111:
        v96 = *(_QWORD *)(v86 - 8);
        v86 -= 8;
        *--v90 = v96;
      }
      while (v86 != v87);
      goto LABEL_112;
    }
    v90 = v84;
    if ((unint64_t)(v86 - (_QWORD)v84) < 0x20)
      goto LABEL_111;
    v91 = (v89 >> 3) + 1;
    v92 = v84 - 2;
    v93 = (__int128 *)(v86 - 16);
    v94 = v91 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v95 = *v93;
      *(v92 - 1) = *(v93 - 1);
      *v92 = v95;
      v92 -= 2;
      v93 -= 2;
      v94 -= 4;
    }
    while (v94);
    v90 = &v84[-(v91 & 0x3FFFFFFFFFFFFFFCLL)];
    v86 -= 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
    if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_111;
LABEL_112:
    v86 = *v73;
LABEL_113:
    v76 = v84 + 1;
    *v73 = (uint64_t)v90;
    v73[1] = (uint64_t)(v84 + 1);
    v97 = v73[2];
    v73[2] = v85;
    if (v86)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v73[3] + 40))(v73[3], v86, v97 - v86);
LABEL_88:
    v73[1] = (uint64_t)v76;
    if (++v74 != v75)
      continue;
    break;
  }
  v98 = v73[4];
  if (v98 != v73[5])
    v73[5] = v98;
LABEL_117:
  if (this[35] != this[34])
  {
    v99 = *((_DWORD *)this[46] + 72);
    v864.n128_u8[0] = 0;
    md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles((uint64_t)this, a2, v18, v99, 1, &v864);
    v100 = (_QWORD *)*((_QWORD *)a2 + 1);
    v101 = (int8x8_t)v100[1];
    if (v101)
    {
      v102 = (uint8x8_t)vcnt_s8(v101);
      v102.i16[0] = vaddlv_u8(v102);
      if (v102.u32[0] > 1uLL)
      {
        v103 = 0x3070CB6B3C7F21D3;
        if (*(_QWORD *)&v101 <= 0x3070CB6B3C7F21D3uLL)
          v103 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v101;
      }
      else
      {
        v103 = (*(_QWORD *)&v101 - 1) & 0x3070CB6B3C7F21D3;
      }
      v104 = *(_QWORD **)(*v100 + 8 * v103);
      if (v104)
      {
        v105 = (_QWORD *)*v104;
        if (v105)
        {
          if (v102.u32[0] < 2uLL)
          {
            v106 = *(_QWORD *)&v101 - 1;
            while (1)
            {
              v108 = v105[1];
              if (v108 == 0x3070CB6B3C7F21D3)
              {
                if (v105[2] == 0x3070CB6B3C7F21D3)
                  goto LABEL_139;
              }
              else if ((v108 & v106) != v103)
              {
                goto LABEL_1053;
              }
              v105 = (_QWORD *)*v105;
              if (!v105)
                goto LABEL_1053;
            }
          }
          while (1)
          {
            v107 = v105[1];
            if (v107 == 0x3070CB6B3C7F21D3)
              break;
            if (v107 >= *(_QWORD *)&v101)
              v107 %= *(_QWORD *)&v101;
            if (v107 != v103)
              goto LABEL_1053;
LABEL_128:
            v105 = (_QWORD *)*v105;
            if (!v105)
              goto LABEL_1053;
          }
          if (v105[2] != 0x3070CB6B3C7F21D3)
            goto LABEL_128;
LABEL_139:
          v109 = v105[5];
          if (*(_QWORD *)(v109 + 8) == 0x3070CB6B3C7F21D3)
          {
            if (*(_QWORD *)(v109 + 32))
            {
              v810 = *(_QWORD *)(v109 + 32);
              v812 = *(id *)a2;
              objc_msgSend(v812, "contentScale");
              v111 = (_QWORD *)*((_QWORD *)a2 + 1);
              v112 = (int8x8_t)v111[1];
              if (!*(_QWORD *)&v112)
                goto LABEL_164;
              v113 = (uint8x8_t)vcnt_s8(v112);
              v113.i16[0] = vaddlv_u8(v113);
              if (v113.u32[0] > 1uLL)
              {
                v114 = 0x1AF456233693CD46;
                if (*(_QWORD *)&v112 <= 0x1AF456233693CD46uLL)
                  v114 = 0x1AF456233693CD46uLL % *(_QWORD *)&v112;
              }
              else
              {
                v114 = (*(_QWORD *)&v112 - 1) & 0x1AF456233693CD46;
              }
              v115 = *(_QWORD **)(*v111 + 8 * v114);
              if (!v115)
                goto LABEL_164;
              v116 = (_QWORD *)*v115;
              if (!v116)
                goto LABEL_164;
              if (v113.u32[0] < 2uLL)
              {
                v117 = *(_QWORD *)&v112 - 1;
                while (1)
                {
                  v119 = v116[1];
                  if (v119 == 0x1AF456233693CD46)
                  {
                    if (v116[2] == 0x1AF456233693CD46)
                      goto LABEL_162;
                  }
                  else if ((v119 & v117) != v114)
                  {
                    goto LABEL_164;
                  }
                  v116 = (_QWORD *)*v116;
                  if (!v116)
                    goto LABEL_164;
                }
              }
              while (2)
              {
                v118 = v116[1];
                if (v118 != 0x1AF456233693CD46)
                {
                  if (v118 >= *(_QWORD *)&v112)
                    v118 %= *(_QWORD *)&v112;
                  if (v118 != v114)
                    goto LABEL_164;
                  goto LABEL_151;
                }
                if (v116[2] != 0x1AF456233693CD46)
                {
LABEL_151:
                  v116 = (_QWORD *)*v116;
                  if (!v116)
                    goto LABEL_164;
                  continue;
                }
                break;
              }
LABEL_162:
              v120 = v116[5];
              if (*(_QWORD *)(v120 + 8) == 0x1AF456233693CD46)
              {
                v121 = *(_QWORD *)(v120 + 32);
                goto LABEL_165;
              }
LABEL_164:
              v121 = 0;
LABEL_165:
              *(_QWORD *)(v18 + 32) = this[46][35];
              v824 = (double *)v121;
              v811 = fmaxf(*(float *)(v121 + 3080) + *(float *)(v121 + 3076), 1.0);
              v122 = this[34];
              v813 = this[35];
              if (v122 != v813)
              {
                v123 = 1.0 / v110;
                if ((int)v811 >= 0x17)
                  v124 = 23;
                else
                  v124 = (int)v811;
                v820 = (float32x4_t)vdupq_n_s32(0x37800080u);
                v849 = v124;
                while (2)
                {
                  v125 = (_QWORD *)*v122;
                  v126 = *(_QWORD *)(*v122 + 384);
                  v127 = 8;
                  if (!*((_BYTE *)this + 360))
                    v127 = 7;
                  v128 = this[46][v127];
                  v129 = (std::__shared_weak_count *)v125[28];
                  v858 = (std::__shared_weak_count *)v125[27];
                  v859 = v129;
                  if (v129)
                  {
                    p_shared_owners = (unint64_t *)&v129->__shared_owners_;
                    do
                      v131 = __ldxr(p_shared_owners);
                    while (__stxr(v131 + 1, p_shared_owners));
                  }
                  v132 = (std::__shared_weak_count *)v125[30];
                  v862 = (uint16x4_t)v125[29];
                  v863 = v132;
                  if (v132)
                  {
                    v133 = (unint64_t *)&v132->__shared_owners_;
                    do
                      v134 = __ldxr(v133);
                    while (__stxr(v134 + 1, v133));
                  }
                  v135 = *(void ****)(v126 + 776);
                  v841 = *(void ****)(v126 + 784);
                  if (v135 == v841)
                    goto LABEL_349;
                  v816 = v122;
                  v136 = (*(_BYTE *)(v126 + 169) + *((_BYTE *)this[46] + 288));
LABEL_182:
                  v137 = **v135;
                  v138 = (std::__shared_weak_count *)(*v135)[1];
                  v864.n128_u64[0] = (unint64_t)v137;
                  v864.n128_u64[1] = (unint64_t)v138;
                  if (v138)
                  {
                    v139 = (unint64_t *)&v138->__shared_owners_;
                    do
                      v140 = __ldxr(v139);
                    while (__stxr(v140 + 1, v139));
                    v855.var0.var1 = v138;
                    do
                      v141 = __ldxr(v139);
                    while (__stxr(v141 + 1, v139));
                  }
                  else
                  {
                    v855.var0.var1 = 0;
                  }
                  v855.var0.var0 = v137;
                  v855.var0.var2.var0 = 0;
                  v855.var0.var2.var1.var0 = 0;
                  v856 = 0;
                  if (v137)
                    LODWORD(v137) = (*(uint64_t (**)(void *, __compressed_pair<std::pair<gss::StyleAttribute, unsigned short> *, geo::StdAllocator<std::pair<gss::StyleAttribute, unsigned short>, gss::Allocator>> *))(*(_QWORD *)v137 + 48))(v137, &v855.var0.var2);
                  v856 = v137;
                  if (v138)
                  {
                    v142 = (unint64_t *)&v138->__shared_owners_;
                    do
                      v143 = __ldaxr(v142);
                    while (__stlxr(v143 - 1, v142));
                    if (!v143)
                    {
                      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                      std::__shared_weak_count::__release_weak(v138);
                    }
                    LODWORD(v137) = v856;
                  }
                  if ((_DWORD)v137)
                  {
                    v144 = *((_QWORD *)v855.var0.var0 + 3);
                    v145 = *(float **)v144;
                    if (*(_QWORD *)v144
                      && (v146 = *v145, LODWORD(v145) = *v145 == 1.0, *(_BYTE *)(v144 + 10))
                      && (v146 != 0.0 ? (_ZF = v146 == 1.0) : (_ZF = 1), !_ZF)
                      || (v148 = *(unsigned __int8 *)(v144 + v145 + 11), v146 = 0.0, v148 == 2))
                    {
                      v864.n128_u8[0] = 1;
                      v853.i8[0] = 1;
                      v149 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v144, 0x8Bu, v124, 0, &v864);
                      v150 = v149
                           + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v144, 0x8Bu, v124, 1u, &v853)- v149)* v146);
                    }
                    else
                    {
                      v150 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*((_QWORD *)v855.var0.var0 + 3), 0x8Bu, v124, v148, 0);
                    }
                  }
                  else
                  {
                    v150 = 0.0;
                  }
                  v151 = v150 + v150;
                  if ((float)(v150 + v150) <= 0.0)
                    goto LABEL_307;
                  v152 = this[46][3];
                  v153 = *(_QWORD *)(v152 + 8);
                  if (v153 != *(_QWORD *)v152)
                  {
                    v154 = *(_QWORD *)(v153 - 8);
                    *(_QWORD *)(v152 + 8) = v153 - 8;
                    v155 = *(uint64_t **)(v152 + 40);
                    v156 = *(_QWORD *)(v152 + 48);
                    v157 = v849;
                    if ((unint64_t)v155 >= v156)
                    {
                      v158 = *(_QWORD *)(v152 + 32);
                      v159 = ((uint64_t)v155 - v158) >> 3;
                      v160 = v159 + 1;
                      if ((unint64_t)(v159 + 1) >> 61)
                        goto LABEL_1066;
                      v161 = v156 - v158;
                      if (v161 >> 2 > v160)
                        v160 = v161 >> 2;
                      if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFF8)
                        v162 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v162 = v160;
                      if (v162)
                      {
                        v163 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v152 + 56) + 16))(*(_QWORD *)(v152 + 56), 8 * v162, 8);
                        v164 = (uint64_t *)(v163 + 8 * v159);
                        v165 = v163 + 8 * v162;
                        if (v163)
                          *v164 = v154;
                      }
                      else
                      {
                        v165 = 0;
                        v164 = (uint64_t *)(8 * v159);
                      }
                      v176 = *(_QWORD *)(v152 + 32);
                      v175 = *(_QWORD *)(v152 + 40);
                      v177 = v175 - v176;
                      if (v175 != v176)
                      {
                        v178 = v177 - 8;
                        if ((unint64_t)(v177 - 8) < 0x38)
                        {
                          v179 = v164;
                        }
                        else
                        {
                          v179 = v164;
                          if ((unint64_t)(v175 - (_QWORD)v164) >= 0x20)
                          {
                            v180 = (v178 >> 3) + 1;
                            v181 = v164 - 2;
                            v182 = (__int128 *)(v175 - 16);
                            v183 = v180 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v184 = *v182;
                              *((_OWORD *)v181 - 1) = *(v182 - 1);
                              *(_OWORD *)v181 = v184;
                              v181 -= 4;
                              v182 -= 2;
                              v183 -= 4;
                            }
                            while (v183);
                            v179 = &v164[-(v180 & 0x3FFFFFFFFFFFFFFCLL)];
                            v175 -= 8 * (v180 & 0x3FFFFFFFFFFFFFFCLL);
                            if (v180 == (v180 & 0x3FFFFFFFFFFFFFFCLL))
                              goto LABEL_257;
                          }
                        }
                        do
                        {
                          v193 = *(_QWORD *)(v175 - 8);
                          v175 -= 8;
                          *--v179 = v193;
                        }
                        while (v175 != v176);
                        goto LABEL_257;
                      }
LABEL_251:
                      v179 = v164;
LABEL_258:
                      v168 = v164 + 1;
                      *(_QWORD *)(v152 + 32) = v179;
                      *(_QWORD *)(v152 + 40) = v164 + 1;
                      v195 = *(_QWORD *)(v152 + 48);
                      *(_QWORD *)(v152 + 48) = v165;
                      if (v175)
                        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v152 + 56) + 40))(*(_QWORD *)(v152 + 56), v175, v195 - v175);
LABEL_260:
                      *(_QWORD *)(v152 + 40) = v168;
                      v864.n128_u64[0] = v154;
                      v196 = *(_QWORD *)(v152 + 120);
                      if (!v196)
                        goto LABEL_1067;
                      (*(void (**)(uint64_t, __n128 *))(*(_QWORD *)v196 + 48))(v196, &v864);
                      v197 = *(std::__shared_weak_count ***)(v154 + 64);
                      v198 = v858;
                      *v197 = v858;
                      v197[1] = 0;
                      v199 = *(std::__shared_weak_count ***)(v154 + 160);
                      v200 = v859;
                      if (v859)
                      {
                        v201 = (unint64_t *)&v859->__shared_owners_;
                        do
                          v202 = __ldxr(v201);
                        while (__stxr(v202 + 1, v201));
                      }
                      v203 = v199[1];
                      *v199 = v198;
                      v199[1] = v200;
                      if (v203)
                      {
                        v204 = (unint64_t *)&v203->__shared_owners_;
                        do
                          v205 = __ldaxr(v204);
                        while (__stlxr(v205 - 1, v204));
                        if (!v205)
                        {
                          ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                          std::__shared_weak_count::__release_weak(v203);
                        }
                      }
                      v206 = *(uint16x4_t **)(v154 + 64);
                      v207 = v862;
                      v208 = v863;
                      v206[2] = v862;
                      v206[3] = 0;
                      v209 = *(_QWORD *)(v154 + 160);
                      if (v208)
                      {
                        v210 = (unint64_t *)&v208->__shared_owners_;
                        do
                          v211 = __ldxr(v210);
                        while (__stxr(v211 + 1, v210));
                      }
                      v212 = *(std::__shared_weak_count **)(v209 + 24);
                      *(uint16x4_t *)(v209 + 16) = v207;
                      *(_QWORD *)(v209 + 24) = v208;
                      if (!v212)
                        goto LABEL_276;
                      v213 = (unint64_t *)&v212->__shared_owners_;
                      do
                        v214 = __ldaxr(v213);
                      while (__stlxr(v214 - 1, v213));
                      if (!v214)
                      {
                        ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                        std::__shared_weak_count::__release_weak(v212);
                        if (!v856)
                          goto LABEL_287;
LABEL_277:
                        v215 = *((_QWORD *)v855.var0.var0 + 3);
                        v216 = *(float **)v215;
                        if (*(_QWORD *)v215
                          && (v217 = *v216, LODWORD(v216) = *v216 == 1.0, *(_BYTE *)(v215 + 10))
                          && (v217 != 0.0 ? (v218 = v217 == 1.0) : (v218 = 1), !v218)
                          || (v219 = *(unsigned __int8 *)(v215 + v216 + 11), v217 = 0.0, v219 == 2))
                        {
                          v864.n128_u8[0] = 1;
                          v853.i8[0] = 1;
                          v220 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v215, 0x8Cu, v157, 0, &v864);
                          v221 = v220
                               + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v215, 0x8Cu, v157, 1u, &v853)- v220)* v217);
                        }
                        else
                        {
                          v221 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*((_QWORD *)v855.var0.var0 + 3), 0x8Cu, v157, v219, 0);
                        }
                      }
                      else
                      {
LABEL_276:
                        if (v856)
                          goto LABEL_277;
LABEL_287:
                        v221 = 0.0;
                      }
                      v222 = v221;
                      v223 = v824[389];
                      v224 = -v223;
                      v225 = v824[390];
                      v226 = v824[391];
                      if (fabs(v222) <= 0.5)
                      {
                        v229 = -v225;
                      }
                      else
                      {
                        v227 = __sincos_stret(v222 * 0.0174532925);
                        v228 = v223 * v227.__cosval;
                        v229 = -(v225 * v227.__cosval - v227.__sinval * v224);
                        v224 = -(v228 - v225 * v227.__sinval);
                      }
                      v230 = *(_QWORD *)(*(_QWORD *)(v154 + 64) + 32);
                      v864 = 0uLL;
                      v231 = *(std::__shared_weak_count **)(v230 + 8);
                      if (v231)
                        v232 = *(float32x4_t **)(v230 + 72);
                      else
                        v232 = 0;
                      v233.n128_u64[0] = 0;
                      v233.n128_u64[1] = v230;
                      v829 = v233;
                      v864 = v233;
                      v865 = 0;
                      v866 = v231;
                      v868 = v232;
                      v867 = 1;
                      gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v853, *((_QWORD *)v855.var0.var0 + 3), 0x8Du, v157, 2u, 0);
                      *v232 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v853)), v820);
                      v234 = v224;
                      v235 = v229;
                      v236 = v226;
                      v232[2].f32[0] = v234;
                      v232[2].f32[1] = v235;
                      v232[2].f32[2] = -v236;
                      v232[1].f32[0] = v151 * v123;
                      if (v231)
                      {
                        if (v829.n128_u64[0] && *(_BYTE *)(v829.n128_u64[1] + 17) != 2)
                          (*(void (**)(void))(*(_QWORD *)v829.n128_u64[0] + 64))();
                        v237 = *(std::__shared_weak_count **)(v829.n128_u64[1] + 64);
                        if (v237 <= v231)
                          v237 = v231;
                        *(_QWORD *)(v829.n128_u64[1] + 56) = 0;
                        *(_QWORD *)(v829.n128_u64[1] + 64) = v237;
                      }
                      v238 = (*v135)[2];
                      v239 = (_QWORD *)*v238;
                      v240 = (_QWORD *)v238[1];
                      if (*(_QWORD *)(**(_QWORD **)(*(_QWORD *)*v238 + 64) + 48) != *(_QWORD *)(**(_QWORD **)(*(_QWORD *)*v238 + 64) + 40)
                        && v239 != v240)
                      {
                        while (1)
                        {
                          v249 = ggl::FragmentedPool<ggl::RenderItem>::pop(this[46][14]);
                          v250 = v249;
                          *(_QWORD *)(v249 + 24) = v128;
                          *(_QWORD *)(v249 + 32) = v154;
                          *(_QWORD *)(v249 + 64) = *v239;
                          *(_DWORD *)(v249 + 40) = v136;
                          v251 = *(uint64_t **)(v18 + 80);
                          v252 = *(_QWORD *)(v18 + 88);
                          if ((unint64_t)v251 >= v252)
                            break;
                          if (v251)
                            *v251 = v249;
                          v248 = v251 + 1;
LABEL_319:
                          *(_QWORD *)(v18 + 80) = v248;
                          if (++v239 == v240)
                            goto LABEL_307;
                        }
                        v253 = *(_QWORD *)(v18 + 72);
                        v254 = ((uint64_t)v251 - v253) >> 3;
                        v255 = v254 + 1;
                        if ((unint64_t)(v254 + 1) >> 61)
                          abort();
                        v256 = v252 - v253;
                        if (v256 >> 2 > v255)
                          v255 = v256 >> 2;
                        if ((unint64_t)v256 >= 0x7FFFFFFFFFFFFFF8)
                          v257 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v257 = v255;
                        if (v257)
                        {
                          v258 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v18 + 96) + 16))(*(_QWORD *)(v18 + 96), 8 * v257, 8);
                          v259 = (uint64_t *)(v258 + 8 * v254);
                          v260 = v258 + 8 * v257;
                          if (v258)
                            *v259 = v250;
                        }
                        else
                        {
                          v260 = 0;
                          v259 = (uint64_t *)(8 * v254);
                        }
                        v262 = *(_QWORD *)(v18 + 72);
                        v261 = *(_QWORD *)(v18 + 80);
                        v263 = v261 - v262;
                        if (v261 != v262)
                        {
                          v264 = v263 - 8;
                          if ((unint64_t)(v263 - 8) < 0x38)
                          {
                            v265 = v259;
                          }
                          else
                          {
                            v265 = v259;
                            if ((unint64_t)(v261 - (_QWORD)v259) >= 0x20)
                            {
                              v266 = (v264 >> 3) + 1;
                              v267 = v259 - 2;
                              v268 = (__int128 *)(v261 - 16);
                              v269 = v266 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                v270 = *v268;
                                *((_OWORD *)v267 - 1) = *(v268 - 1);
                                *(_OWORD *)v267 = v270;
                                v267 -= 4;
                                v268 -= 2;
                                v269 -= 4;
                              }
                              while (v269);
                              v265 = &v259[-(v266 & 0x3FFFFFFFFFFFFFFCLL)];
                              v261 -= 8 * (v266 & 0x3FFFFFFFFFFFFFFCLL);
                              if (v266 == (v266 & 0x3FFFFFFFFFFFFFFCLL))
                              {
LABEL_343:
                                v261 = *(_QWORD *)(v18 + 72);
LABEL_344:
                                v248 = v259 + 1;
                                *(_QWORD *)(v18 + 72) = v265;
                                *(_QWORD *)(v18 + 80) = v259 + 1;
                                v272 = *(_QWORD *)(v18 + 88);
                                *(_QWORD *)(v18 + 88) = v260;
                                if (v261)
                                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v18 + 96) + 40))(*(_QWORD *)(v18 + 96), v261, v272 - v261);
                                goto LABEL_319;
                              }
                            }
                          }
                          do
                          {
                            v271 = *(_QWORD *)(v261 - 8);
                            v261 -= 8;
                            *--v265 = v271;
                          }
                          while (v261 != v262);
                          goto LABEL_343;
                        }
                        v265 = v259;
                        goto LABEL_344;
                      }
LABEL_307:
                      if (v856)
                        (*(void (**)(void *))(*(_QWORD *)v855.var0.var0 + 56))(v855.var0.var0);
                      var0 = v855.var0.var2.var1.var0;
                      v124 = v849;
                      if (!v855.var0.var2.var1.var0)
                        goto LABEL_313;
                      v243 = (unint64_t *)((char *)v855.var0.var2.var1.var0 + 8);
                      do
                        v244 = __ldaxr(v243);
                      while (__stlxr(v244 - 1, v243));
                      if (!v244)
                      {
                        (*(void (**)(Allocator *))(*(_QWORD *)var0 + 16))(var0);
                        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)var0);
                        var1 = (std::__shared_weak_count *)v855.var0.var1;
                        if (v855.var0.var1)
                        {
LABEL_314:
                          v246 = (unint64_t *)&var1->__shared_owners_;
                          do
                            v247 = __ldaxr(v246);
                          while (__stlxr(v247 - 1, v246));
                          if (!v247)
                          {
                            ((void (*)(std::__shared_weak_count *))var1->__on_zero_shared)(var1);
                            std::__shared_weak_count::__release_weak(var1);
                          }
                        }
                      }
                      else
                      {
LABEL_313:
                        var1 = (std::__shared_weak_count *)v855.var0.var1;
                        if (v855.var0.var1)
                          goto LABEL_314;
                      }
                      if (++v135 == v841)
                      {
                        v132 = v863;
                        v122 = v816;
LABEL_349:
                        if (v132)
                        {
                          v273 = (unint64_t *)&v132->__shared_owners_;
                          do
                            v274 = __ldaxr(v273);
                          while (__stlxr(v274 - 1, v273));
                          if (!v274)
                          {
                            ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                            std::__shared_weak_count::__release_weak(v132);
                          }
                        }
                        v275 = v859;
                        if (v859)
                        {
                          v276 = (unint64_t *)&v859->__shared_owners_;
                          do
                            v277 = __ldaxr(v276);
                          while (__stlxr(v277 - 1, v276));
                          if (!v277)
                          {
                            ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
                            std::__shared_weak_count::__release_weak(v275);
                          }
                        }
                        if (++v122 == v813)
                          goto LABEL_359;
                        continue;
                      }
                      goto LABEL_182;
                    }
LABEL_223:
                    if (v155)
                      *v155 = v154;
                    v168 = v155 + 1;
                    goto LABEL_260;
                  }
                  break;
                }
                v166 = *(_QWORD *)(v152 + 88);
                v157 = v849;
                if (!v166)
                  goto LABEL_1067;
                v154 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v166 + 48))(v166);
                v155 = *(uint64_t **)(v152 + 40);
                v167 = *(_QWORD *)(v152 + 48);
                if ((unint64_t)v155 < v167)
                  goto LABEL_223;
                v169 = *(_QWORD *)(v152 + 32);
                v170 = ((uint64_t)v155 - v169) >> 3;
                v171 = v170 + 1;
                if ((unint64_t)(v170 + 1) >> 61)
LABEL_1066:
                  abort();
                v172 = v167 - v169;
                if (v172 >> 2 > v171)
                  v171 = v172 >> 2;
                if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFF8)
                  v173 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v173 = v171;
                if (v173)
                {
                  v174 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v152 + 56) + 16))(*(_QWORD *)(v152 + 56), 8 * v173, 8);
                  v164 = (uint64_t *)(v174 + 8 * v170);
                  v165 = v174 + 8 * v173;
                  if (v174)
                    *v164 = v154;
                }
                else
                {
                  v165 = 0;
                  v164 = (uint64_t *)(8 * v170);
                }
                v185 = *(_QWORD *)(v152 + 32);
                v175 = *(_QWORD *)(v152 + 40);
                v186 = v175 - v185;
                if (v175 == v185)
                  goto LABEL_251;
                v187 = v186 - 8;
                if ((unint64_t)(v186 - 8) < 0x38)
                {
                  v179 = v164;
                }
                else
                {
                  v179 = v164;
                  if ((unint64_t)(v175 - (_QWORD)v164) >= 0x20)
                  {
                    v188 = (v187 >> 3) + 1;
                    v189 = v164 - 2;
                    v190 = (__int128 *)(v175 - 16);
                    v191 = v188 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v192 = *v190;
                      *((_OWORD *)v189 - 1) = *(v190 - 1);
                      *(_OWORD *)v189 = v192;
                      v189 -= 4;
                      v190 -= 2;
                      v191 -= 4;
                    }
                    while (v191);
                    v179 = &v164[-(v188 & 0x3FFFFFFFFFFFFFFCLL)];
                    v175 -= 8 * (v188 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v188 == (v188 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_257;
                  }
                }
                do
                {
                  v194 = *(_QWORD *)(v175 - 8);
                  v175 -= 8;
                  *--v179 = v194;
                }
                while (v175 != v185);
LABEL_257:
                v175 = *(_QWORD *)(v152 + 32);
                goto LABEL_258;
              }
LABEL_359:
              +[VKPlatform sharedPlatform](VKPlatform, "sharedPlatform");
              v278 = (void *)objc_claimAutoreleasedReturnValue();
              v279 = objc_msgSend(v278, "supportsCoastlineGlows");

              if (!v279)
                goto LABEL_1052;
              v281 = this[34];
              v842 = this[35];
              if (v281 == v842)
                goto LABEL_1052;
              v282 = 0;
              v809 = (float64x2_t *)(v824 + 350);
              if ((int)v811 >= 0x17)
                v283 = 23;
              else
                v283 = (int)v811;
LABEL_365:
              v814 = v282;
              v284 = v282;
              while (2)
              {
                v850 = v281;
                v285 = *(_QWORD *)(*v281 + 384);
                v286 = *(uint64_t ***)(v285 + 776);
                v287 = *(uint64_t ***)(v285 + 784);
                if (v286 == v287)
                {
LABEL_447:
                  v281 = v850 + 1;
                  if (v850 + 1 != v842)
                    continue;
                  v282 = v814;
                  if ((v284 & 1) != 0)
                    goto LABEL_449;
                  goto LABEL_1052;
                }
                break;
              }
              while (2)
              {
                isSuperset = **v286;
                v288 = (std::__shared_weak_count *)(*v286)[1];
                v855.var0.var0 = (void *)isSuperset;
                v855.var0.var1 = v288;
                if (v288)
                {
                  v289 = (unint64_t *)&v288->__shared_owners_;
                  do
                    v290 = __ldxr(v289);
                  while (__stxr(v290 + 1, v289));
                  v864.n128_u64[1] = (unint64_t)v288;
                  do
                    v291 = __ldxr(v289);
                  while (__stxr(v291 + 1, v289));
                }
                else
                {
                  v864.n128_u64[1] = 0;
                }
                v864.n128_u64[0] = isSuperset;
                v865 = 0;
                v866 = 0;
                LOBYTE(v867) = 0;
                if (isSuperset)
                  isSuperset = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)isSuperset + 48))(isSuperset, &v865);
                LOBYTE(v867) = isSuperset;
                if (v288)
                {
                  v292 = (unint64_t *)&v288->__shared_owners_;
                  do
                    v293 = __ldaxr(v292);
                  while (__stlxr(v293 - 1, v292));
                  if (!v293)
                  {
                    ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                    std::__shared_weak_count::__release_weak(v288);
                  }
                  isSuperset = v867;
                }
                v294 = 0.0;
                v295 = 0.0;
                if ((_DWORD)isSuperset)
                {
                  v296 = *(_QWORD *)(v864.n128_u64[0] + 24);
                  v297 = *(float **)v296;
                  if (*(_QWORD *)v296
                    && (v298 = *v297, LODWORD(v297) = *v297 == 1.0, *(_BYTE *)(v296 + 10))
                    && (v298 != 0.0 ? (v299 = v298 == 1.0) : (v299 = 1), !v299)
                    || (v300 = *(unsigned __int8 *)(v296 + v297 + 11), v298 = 0.0, v300 == 2))
                  {
                    LOBYTE(v855.var0.var0) = 1;
                    LOBYTE(v858) = 1;
                    v301 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v296, 0x8Eu, v283, 0, &v855);
                    isSuperset = (uint64_t)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v296, 0x8Eu, v283, 1u, &v858);
                    v295 = v301 + (float)((float)(*(float *)isSuperset - v301) * v298);
                    goto LABEL_392;
                  }
                  isSuperset = (uint64_t)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v864.n128_u64[0] + 24), 0x8Eu, v283, v300, 0);
                  v295 = *(float *)isSuperset;
                  if (!(_BYTE)v867)
                  {
LABEL_413:
                    v315 = 0.0;
                    v308 = 0.0;
                    goto LABEL_427;
                  }
                }
                else
                {
LABEL_392:
                  if (!(_BYTE)v867)
                    goto LABEL_413;
                }
                v302 = *(_QWORD *)(v864.n128_u64[0] + 24);
                v303 = *(float **)v302;
                if (*(_QWORD *)v302
                  && (v304 = *v303, LODWORD(v303) = *v303 == 1.0, *(_BYTE *)(v302 + 10))
                  && (v304 != 0.0 ? (v305 = v304 == 1.0) : (v305 = 1), !v305)
                  || (v306 = *(unsigned __int8 *)(v302 + v303 + 11), v304 = 0.0, v306 == 2))
                {
                  LOBYTE(v855.var0.var0) = 1;
                  LOBYTE(v858) = 1;
                  v307 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v302, 0, v283, 0, &v855);
                  isSuperset = (uint64_t)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v302, 0, v283, 1u, &v858);
                  v308 = v307 + (float)((float)(*(float *)isSuperset - v307) * v304);
                  if ((_BYTE)v867)
                  {
LABEL_402:
                    v309 = *(_QWORD *)(v864.n128_u64[0] + 24);
                    v310 = *(float **)v309;
                    if (*(_QWORD *)v309
                      && (v311 = *v310, LODWORD(v310) = *v310 == 1.0, *(_BYTE *)(v309 + 10))
                      && (v311 != 0.0 ? (v312 = v311 == 1.0) : (v312 = 1), !v312)
                      || (v313 = *(unsigned __int8 *)(v309 + v310 + 11), v311 = 0.0, v313 == 2))
                    {
                      LOBYTE(v855.var0.var0) = 1;
                      LOBYTE(v858) = 1;
                      v314 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v309, 0x8Fu, v283, 0, &v855);
                      isSuperset = (uint64_t)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v309, 0x8Fu, v283, 1u, &v858);
                      v315 = v314 + (float)((float)(*(float *)isSuperset - v314) * v311);
                      if (!(_BYTE)v867)
                        goto LABEL_427;
                    }
                    else
                    {
                      isSuperset = (uint64_t)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v864.n128_u64[0] + 24), 0x8Fu, v283, v313, 0);
                      v315 = *(float *)isSuperset;
                      if (!(_BYTE)v867)
                        goto LABEL_427;
                    }
                    v316 = *(_QWORD *)(v864.n128_u64[0] + 24);
                    v317 = *(float **)v316;
                    if (*(_QWORD *)v316
                      && (v318 = *v317, LODWORD(v317) = *v317 == 1.0, *(_BYTE *)(v316 + 10))
                      && (v318 != 0.0 ? (v319 = v318 == 1.0) : (v319 = 1), !v319)
                      || (v320 = *(unsigned __int8 *)(v316 + v317 + 11), v318 = 0.0, v320 == 2))
                    {
                      LOBYTE(v855.var0.var0) = 1;
                      LOBYTE(v858) = 1;
                      v321 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v316, 1u, v283, 0, &v855);
                      isSuperset = (uint64_t)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v316, 1u, v283, 1u, &v858);
                      v294 = v321 + (float)((float)(*(float *)isSuperset - v321) * v318);
                    }
                    else
                    {
                      isSuperset = (uint64_t)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v864.n128_u64[0] + 24), 1u, v283, v320, 0);
                      v294 = *(float *)isSuperset;
                    }
LABEL_427:
                    v322 = v308 > 0.0019531 && v295 > 0.0019531;
                    v323 = v294 <= 0.0019531 || v315 <= 0.0019531;
                    if ((_BYTE)v867)
                      isSuperset = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v864.n128_u64[0] + 56))(v864.n128_u64[0]);
                    v324 = v866;
                    if (v866)
                    {
                      v325 = (unint64_t *)&v866->__shared_owners_;
                      do
                        v326 = __ldaxr(v325);
                      while (__stlxr(v326 - 1, v325));
                      if (!v326)
                      {
                        ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
                        std::__shared_weak_count::__release_weak(v324);
                      }
                    }
                    v327 = (std::__shared_weak_count *)v864.n128_u64[1];
                    if (v864.n128_u64[1])
                    {
                      v328 = (unint64_t *)(v864.n128_u64[1] + 8);
                      do
                        v329 = __ldaxr(v328);
                      while (__stlxr(v329 - 1, v328));
                      if (!v329)
                      {
                        ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
                        std::__shared_weak_count::__release_weak(v327);
                      }
                    }
                    if (v323)
                    {
                      v284 |= v322;
                      if (++v286 == v287)
                        goto LABEL_447;
                      continue;
                    }
                    v281 = v850 + 1;
                    v282 = 1;
                    if (v850 + 1 != v842)
                      goto LABEL_365;
LABEL_449:
                    v815 = v282;
                    v330 = this[34];
                    v817 = this[35];
                    v851 = v283;
                    if (v330 != v817)
                    {
                      while (2)
                      {
                        v331 = (_QWORD *)*v330;
                        v332 = *(_BYTE **)(*v330 + 384);
                        v333 = (Allocator *)gss::Allocator::instance((gss::Allocator *)isSuperset);
                        v334 = (_QWORD *)(*(uint64_t (**)(Allocator *, uint64_t, uint64_t))(*(_QWORD *)v333
                                                                                                  + 16))(v333, 16, 4);
                        v335 = v334;
                        if (v334)
                          *v334 = 0x200000005;
                        v334[1] = 0x1200000003;
                        memset(&v855, 0, 24);
                        v855.var0.var2.var1.var0 = v333;
                        v336 = (_QWORD *)(*(uint64_t (**)(Allocator *, uint64_t, uint64_t))(*(_QWORD *)v333
                                                                                                  + 16))(v333, 16, 4);
                        v855.var0.var0 = v336;
                        v855.var0.var2.var0 = v336 + 2;
                        if (v336)
                          *v336 = *v335;
                        v336[1] = v335[1];
                        v855.var0.var1 = v336 + 2;
                        gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)&v855);
                        v830 = v331;
                        v821 = v330;
                        (*(void (**)(Allocator *, _QWORD *, uint64_t))(*(_QWORD *)v333 + 40))(v333, v335, 16);
                        v337 = *((_BYTE *)this[46] + 288);
                        v338 = v332[169];
                        isSuperset = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v332 + 48))(v332);
                        v339 = *(_QWORD *)isSuperset;
                        v843 = *(_QWORD *)(isSuperset + 8);
                        if (*(_QWORD *)isSuperset != v843)
                        {
                          v340 = (v338 + v337) | 0x40;
                          while (1)
                          {
                            v341 = *(id *)(v339 + 8);
                            md::createFeatureAttributeSet((gss::Allocator *)&v858, *(uint64_t **)(objc_msgSend(v341, "attributeSets") + 24));

                            isSuperset = gss::FeatureAttributeSet::isSuperset((gss::FeatureAttributeSet *)&v858, &v855);
                            if ((_DWORD)isSuperset)
                              break;
LABEL_516:
                            if (v858)
                            {
                              v859 = v858;
                              isSuperset = (*(uint64_t (**)(uint64_t, std::__shared_weak_count *, uint64_t))(*(_QWORD *)v861 + 40))(v861, v858, v860 - (_QWORD)v858);
                            }
                            v339 += 24;
                            if (v339 == v843)
                              goto LABEL_518;
                          }
                          v342 = ggl::FragmentedPool<ggl::RenderItem>::pop(this[46][2]);
                          v343 = *(_QWORD **)(v342 + 64);
                          v343[1] = 0;
                          v344 = v830[27];
                          *v343 = v344;
                          v345 = *(_QWORD **)(v342 + 160);
                          v346 = v830[28];
                          if (v346)
                          {
                            v347 = (unint64_t *)(v346 + 8);
                            do
                              v348 = __ldxr(v347);
                            while (__stxr(v348 + 1, v347));
                          }
                          v349 = (std::__shared_weak_count *)v345[1];
                          *v345 = v344;
                          v345[1] = v346;
                          if (v349)
                          {
                            v350 = (unint64_t *)&v349->__shared_owners_;
                            do
                              v351 = __ldaxr(v350);
                            while (__stlxr(v351 - 1, v350));
                            if (!v351)
                            {
                              ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
                              std::__shared_weak_count::__release_weak(v349);
                            }
                          }
                          v352 = *(_QWORD *)(v342 + 64);
                          *(_QWORD *)(v352 + 24) = 0;
                          v353 = v830[29];
                          *(_QWORD *)(v352 + 16) = v353;
                          v354 = *(_QWORD *)(v342 + 160);
                          v355 = v830[30];
                          if (v355)
                          {
                            v356 = (unint64_t *)(v355 + 8);
                            do
                              v357 = __ldxr(v356);
                            while (__stxr(v357 + 1, v356));
                          }
                          v358 = *(std::__shared_weak_count **)(v354 + 24);
                          *(_QWORD *)(v354 + 16) = v353;
                          *(_QWORD *)(v354 + 24) = v355;
                          if (v358)
                          {
                            v359 = (unint64_t *)&v358->__shared_owners_;
                            do
                              v360 = __ldaxr(v359);
                            while (__stlxr(v360 - 1, v359));
                            if (!v360)
                            {
                              ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
                              std::__shared_weak_count::__release_weak(v358);
                            }
                          }
                          **(_QWORD **)(v342 + 96) = this[46][28];
                          v361 = *(_QWORD *)(*(_QWORD *)(v342 + 64) + 32);
                          v864 = 0uLL;
                          v362 = *(std::__shared_weak_count **)(v361 + 8);
                          if (v362)
                            v363 = *(_QWORD *)(v361 + 72);
                          else
                            v363 = 0;
                          v364.n128_u64[0] = 0;
                          v364.n128_u64[1] = v361;
                          v836 = v364;
                          v864 = v364;
                          v865 = 0;
                          v866 = v362;
                          v868 = (float32x4_t *)v363;
                          v867 = 1;
                          *(_OWORD *)(v363 + 64) = xmmword_19FFB34C0;
                          v365 = *(id *)(v339 + 8);
                          *(_QWORD *)(v363 + 88) = *(_QWORD *)objc_msgSend(v365, "origin");

                          v366 = *(id *)(v339 + 8);
                          objc_msgSend(v366, "size");
                          *(_DWORD *)(v363 + 96) = v367;
                          *(_DWORD *)(v363 + 100) = v368;

                          *(_DWORD *)(v363 + 80) = 1065353216;
                          *(_DWORD *)v363 = 1065353216;
                          *(_QWORD *)(v363 + 12) = 0;
                          *(_QWORD *)(v363 + 4) = 0;
                          *(_DWORD *)(v363 + 20) = 1065353216;
                          *(_QWORD *)(v363 + 24) = 0;
                          *(_QWORD *)(v363 + 32) = 0;
                          *(_DWORD *)(v363 + 40) = 1065353216;
                          *(_QWORD *)(v363 + 52) = 0;
                          *(_QWORD *)(v363 + 44) = 0;
                          *(_DWORD *)(v363 + 60) = 1065353216;
                          if (v362)
                          {
                            if (v836.n128_u64[0] && *(_BYTE *)(v836.n128_u64[1] + 17) != 2)
                              (*(void (**)(void))(*(_QWORD *)v836.n128_u64[0] + 64))();
                            v369 = *(std::__shared_weak_count **)(v836.n128_u64[1] + 64);
                            if (v369 <= v362)
                              v369 = v362;
                            *(_QWORD *)(v836.n128_u64[1] + 56) = 0;
                            *(_QWORD *)(v836.n128_u64[1] + 64) = v369;
                          }
                          v370 = *(id *)(v339 + 8);
                          v371 = objc_msgSend(v370, "fillMeshes");

                          v373 = *(_QWORD **)v371;
                          v372 = *(_QWORD **)(v371 + 8);
                          while (2)
                          {
                            if (v373 == v372)
                              goto LABEL_516;
                            isSuperset = ggl::FragmentedPool<ggl::RenderItem>::pop(this[46][13]);
                            v375 = isSuperset;
                            *(_QWORD *)(isSuperset + 24) = this[46][4];
                            *(_QWORD *)(isSuperset + 32) = v342;
                            *(_QWORD *)(isSuperset + 64) = *v373;
                            *(_DWORD *)(isSuperset + 40) = v340;
                            v376 = *(uint64_t **)(v18 + 80);
                            v377 = *(_QWORD *)(v18 + 88);
                            if ((unint64_t)v376 < v377)
                            {
                              if (v376)
                                *v376 = isSuperset;
                              v374 = v376 + 1;
LABEL_488:
                              *(_QWORD *)(v18 + 80) = v374;
                              v373 += 2;
                              continue;
                            }
                            break;
                          }
                          v378 = *(_QWORD *)(v18 + 72);
                          v379 = ((uint64_t)v376 - v378) >> 3;
                          v380 = v379 + 1;
                          if ((unint64_t)(v379 + 1) >> 61)
                            abort();
                          v381 = v377 - v378;
                          if (v381 >> 2 > v380)
                            v380 = v381 >> 2;
                          if ((unint64_t)v381 >= 0x7FFFFFFFFFFFFFF8)
                            v382 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v382 = v380;
                          if (v382)
                          {
                            isSuperset = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v18 + 96)
                                                                                             + 16))(*(_QWORD *)(v18 + 96), 8 * v382, 8);
                            v383 = (uint64_t *)(isSuperset + 8 * v379);
                            v384 = isSuperset + 8 * v382;
                            if (isSuperset)
                              *v383 = v375;
                          }
                          else
                          {
                            v384 = 0;
                            v383 = (uint64_t *)(8 * v379);
                          }
                          v386 = *(_QWORD *)(v18 + 72);
                          v385 = *(_QWORD *)(v18 + 80);
                          v387 = v385 - v386;
                          if (v385 != v386)
                          {
                            v388 = v387 - 8;
                            if ((unint64_t)(v387 - 8) < 0x38)
                            {
                              v389 = v383;
                            }
                            else
                            {
                              v389 = v383;
                              if ((unint64_t)(v385 - (_QWORD)v383) >= 0x20)
                              {
                                v390 = (v388 >> 3) + 1;
                                v391 = v383 - 2;
                                v392 = (__int128 *)(v385 - 16);
                                v393 = v390 & 0x3FFFFFFFFFFFFFFCLL;
                                do
                                {
                                  v394 = *v392;
                                  *((_OWORD *)v391 - 1) = *(v392 - 1);
                                  *(_OWORD *)v391 = v394;
                                  v391 -= 4;
                                  v392 -= 2;
                                  v393 -= 4;
                                }
                                while (v393);
                                v389 = &v383[-(v390 & 0x3FFFFFFFFFFFFFFCLL)];
                                v385 -= 8 * (v390 & 0x3FFFFFFFFFFFFFFCLL);
                                if (v390 == (v390 & 0x3FFFFFFFFFFFFFFCLL))
                                {
LABEL_513:
                                  v385 = *(_QWORD *)(v18 + 72);
LABEL_514:
                                  v374 = v383 + 1;
                                  *(_QWORD *)(v18 + 72) = v389;
                                  *(_QWORD *)(v18 + 80) = v383 + 1;
                                  v396 = *(_QWORD *)(v18 + 88);
                                  *(_QWORD *)(v18 + 88) = v384;
                                  if (v385)
                                    isSuperset = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v18 + 96) + 40))(*(_QWORD *)(v18 + 96), v385, v396 - v385);
                                  goto LABEL_488;
                                }
                              }
                            }
                            do
                            {
                              v395 = *(_QWORD *)(v385 - 8);
                              v385 -= 8;
                              *--v389 = v395;
                            }
                            while (v385 != v386);
                            goto LABEL_513;
                          }
                          v389 = v383;
                          goto LABEL_514;
                        }
LABEL_518:
                        if (v855.var0.var0)
                        {
                          v855.var0.var1 = v855.var0.var0;
                          isSuperset = (*(uint64_t (**)(Allocator *, void *, int64_t))(*(_QWORD *)v855.var0.var2.var1.var0 + 40))(v855.var0.var2.var1.var0, v855.var0.var0, (char *)v855.var0.var2.var0 - (char *)v855.var0.var0);
                        }
                        v330 = v821 + 1;
                        if (v821 + 1 != v817)
                          continue;
                        break;
                      }
                      v397 = this[34];
                      v825 = this[35];
                      if (v397 != v825)
                      {
                        while (2)
                        {
                          v831 = v397;
                          v837 = (_QWORD *)*v397;
                          v398 = *(_QWORD *)(*v397 + 384);
                          v399 = *(void ****)(v398 + 776);
                          v844 = *(void ****)(v398 + 784);
                          if (v399 != v844)
                          {
                            v400 = (*(_BYTE *)(v398 + 169) + *((_BYTE *)this[46] + 288));
                            do
                            {
                              v401 = **v399;
                              v402 = (std::__shared_weak_count *)(*v399)[1];
                              v855.var0.var0 = v401;
                              v855.var0.var1 = v402;
                              if (v402)
                              {
                                v403 = (unint64_t *)&v402->__shared_owners_;
                                do
                                  v404 = __ldxr(v403);
                                while (__stxr(v404 + 1, v403));
                                v864.n128_u64[1] = (unint64_t)v402;
                                do
                                  v405 = __ldxr(v403);
                                while (__stxr(v405 + 1, v403));
                              }
                              else
                              {
                                v864.n128_u64[1] = 0;
                              }
                              v864.n128_u64[0] = (unint64_t)v401;
                              v865 = 0;
                              v866 = 0;
                              LOBYTE(v867) = 0;
                              if (v401)
                                LODWORD(v401) = (*(uint64_t (**)(void *, uint64_t *))(*(_QWORD *)v401 + 48))(v401, &v865);
                              LOBYTE(v867) = (_BYTE)v401;
                              if (v402)
                              {
                                v406 = (unint64_t *)&v402->__shared_owners_;
                                do
                                  v407 = __ldaxr(v406);
                                while (__stlxr(v407 - 1, v406));
                                if (!v407)
                                {
                                  ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
                                  std::__shared_weak_count::__release_weak(v402);
                                }
                                LODWORD(v401) = v867;
                              }
                              if (!(_DWORD)v401)
                                goto LABEL_589;
                              v408 = *(_QWORD *)(v864.n128_u64[0] + 24);
                              v409 = *(float **)v408;
                              if (*(_QWORD *)v408)
                              {
                                v410 = *v409;
                                LODWORD(v409) = *v409 == 1.0;
                                v411 = v851;
                                if (*(_BYTE *)(v408 + 10))
                                {
                                  if (v410 != 0.0 && v410 != 1.0)
                                    goto LABEL_552;
                                }
                              }
                              else
                              {
                                v411 = v851;
                              }
                              v413 = *(unsigned __int8 *)(v408 + v409 + 11);
                              v410 = 0.0;
                              if (v413 != 2)
                              {
                                v415 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v864.n128_u64[0] + 24), 0x8Eu, v411, v413, 0);
                                goto LABEL_554;
                              }
LABEL_552:
                              LOBYTE(v855.var0.var0) = 1;
                              LOBYTE(v858) = 1;
                              v414 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v408, 0x8Eu, v411, 0, &v855);
                              v415 = v414
                                   + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v408, 0x8Eu, v411, 1u, &v858)- v414)* v410);
LABEL_554:
                              v416 = *(_QWORD *)(v864.n128_u64[0] + 24);
                              v417 = *(float **)v416;
                              if (*(_QWORD *)v416
                                && (v418 = *v417, LODWORD(v417) = *v417 == 1.0, *(_BYTE *)(v416 + 10))
                                && (v418 != 0.0 ? (v419 = v418 == 1.0) : (v419 = 1), !v419)
                                || (v420 = *(unsigned __int8 *)(v416 + v417 + 11), v418 = 0.0, v420 == 2))
                              {
                                LOBYTE(v855.var0.var0) = 1;
                                LOBYTE(v858) = 1;
                                v421 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v416, 0, v411, 0, &v855);
                                v422 = v421
                                     + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v416, 0, v411, 1u, &v858)- v421)* v418);
                                if (v415 > 0.0)
                                  goto LABEL_565;
                              }
                              else
                              {
                                v422 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v864.n128_u64[0] + 24), 0, v411, v420, 0);
                                if (v415 > 0.0)
                                {
LABEL_565:
                                  if (v422 <= 0.0)
                                    goto LABEL_589;
                                  v423 = ggl::FragmentedPool<ggl::RenderItem>::pop(*this[46]);
                                  v424 = *(_QWORD **)(v423 + 64);
                                  v424[1] = 0;
                                  v425 = v837[27];
                                  *v424 = v425;
                                  v426 = *(_QWORD **)(v423 + 160);
                                  v427 = v837[28];
                                  if (v427)
                                  {
                                    v428 = (unint64_t *)(v427 + 8);
                                    do
                                      v429 = __ldxr(v428);
                                    while (__stxr(v429 + 1, v428));
                                  }
                                  v430 = (std::__shared_weak_count *)v426[1];
                                  *v426 = v425;
                                  v426[1] = v427;
                                  if (v430)
                                  {
                                    v431 = (unint64_t *)&v430->__shared_owners_;
                                    do
                                      v432 = __ldaxr(v431);
                                    while (__stlxr(v432 - 1, v431));
                                    if (!v432)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v430->__on_zero_shared)(v430);
                                      std::__shared_weak_count::__release_weak(v430);
                                    }
                                  }
                                  v433 = *(_QWORD *)(v423 + 64);
                                  *(_QWORD *)(v433 + 24) = 0;
                                  v434 = v837[29];
                                  *(_QWORD *)(v433 + 16) = v434;
                                  v435 = *(_QWORD *)(v423 + 160);
                                  v436 = v837[30];
                                  if (v436)
                                  {
                                    v437 = (unint64_t *)(v436 + 8);
                                    do
                                      v438 = __ldxr(v437);
                                    while (__stxr(v438 + 1, v437));
                                  }
                                  v439 = *(std::__shared_weak_count **)(v435 + 24);
                                  *(_QWORD *)(v435 + 16) = v434;
                                  *(_QWORD *)(v435 + 24) = v436;
                                  if (v439)
                                  {
                                    v440 = (unint64_t *)&v439->__shared_owners_;
                                    do
                                      v441 = __ldaxr(v440);
                                    while (__stlxr(v441 - 1, v440));
                                    if (!v441)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v439->__on_zero_shared)(v439);
                                      std::__shared_weak_count::__release_weak(v439);
                                    }
                                  }
                                  v442 = *(_QWORD **)(*(_QWORD *)(v423 + 64) + 32);
                                  v443 = v442[1];
                                  v444 = (float *)v442[9];
                                  *v444 = -v415;
                                  v444[1] = v422;
                                  if (v442[8] > v443)
                                    v443 = v442[8];
                                  v442[7] = 0;
                                  v442[8] = v443;
                                  v445 = (*v399)[3];
                                  v447 = (_QWORD *)*v445;
                                  v446 = (_QWORD *)v445[1];
                                  if (*(_QWORD *)(**(_QWORD **)(*(_QWORD *)*v445 + 64) + 48) == *(_QWORD *)(**(_QWORD **)(*(_QWORD *)*v445 + 64) + 40)
                                    || v447 == v446)
                                  {
                                    goto LABEL_589;
                                  }
                                  while (2)
                                  {
                                    v456 = ggl::FragmentedPool<ggl::RenderItem>::pop(this[46][14]);
                                    v457 = v456;
                                    *(_QWORD *)(v456 + 24) = this[46][11];
                                    *(_QWORD *)(v456 + 32) = v423;
                                    *(_QWORD *)(v456 + 64) = *v447;
                                    *(_DWORD *)(v456 + 40) = v400;
                                    v458 = *(uint64_t **)(v18 + 80);
                                    v459 = *(_QWORD *)(v18 + 88);
                                    if ((unint64_t)v458 < v459)
                                    {
                                      if (v458)
                                        *v458 = v456;
                                      v455 = v458 + 1;
                                      goto LABEL_602;
                                    }
                                    v460 = *(_QWORD *)(v18 + 72);
                                    v461 = ((uint64_t)v458 - v460) >> 3;
                                    v462 = v461 + 1;
                                    if ((unint64_t)(v461 + 1) >> 61)
                                      abort();
                                    v463 = v459 - v460;
                                    if (v463 >> 2 > v462)
                                      v462 = v463 >> 2;
                                    if ((unint64_t)v463 >= 0x7FFFFFFFFFFFFFF8)
                                      v464 = 0x1FFFFFFFFFFFFFFFLL;
                                    else
                                      v464 = v462;
                                    if (v464)
                                    {
                                      v465 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v18 + 96)
                                                                                                 + 16))(*(_QWORD *)(v18 + 96), 8 * v464, 8);
                                      v466 = (uint64_t *)(v465 + 8 * v461);
                                      v467 = v465 + 8 * v464;
                                      if (v465)
                                        *v466 = v457;
                                    }
                                    else
                                    {
                                      v467 = 0;
                                      v466 = (uint64_t *)(8 * v461);
                                    }
                                    v469 = *(_QWORD *)(v18 + 72);
                                    v468 = *(_QWORD *)(v18 + 80);
                                    v470 = v468 - v469;
                                    if (v468 != v469)
                                    {
                                      v471 = v470 - 8;
                                      if ((unint64_t)(v470 - 8) < 0x38)
                                      {
                                        v472 = v466;
                                      }
                                      else
                                      {
                                        v472 = v466;
                                        if ((unint64_t)(v468 - (_QWORD)v466) >= 0x20)
                                        {
                                          v473 = (v471 >> 3) + 1;
                                          v474 = v466 - 2;
                                          v475 = (__int128 *)(v468 - 16);
                                          v476 = v473 & 0x3FFFFFFFFFFFFFFCLL;
                                          do
                                          {
                                            v477 = *v475;
                                            *((_OWORD *)v474 - 1) = *(v475 - 1);
                                            *(_OWORD *)v474 = v477;
                                            v474 -= 4;
                                            v475 -= 2;
                                            v476 -= 4;
                                          }
                                          while (v476);
                                          v472 = &v466[-(v473 & 0x3FFFFFFFFFFFFFFCLL)];
                                          v468 -= 8 * (v473 & 0x3FFFFFFFFFFFFFFCLL);
                                          if (v473 == (v473 & 0x3FFFFFFFFFFFFFFCLL))
                                          {
LABEL_626:
                                            v468 = *(_QWORD *)(v18 + 72);
LABEL_627:
                                            v455 = v466 + 1;
                                            *(_QWORD *)(v18 + 72) = v472;
                                            *(_QWORD *)(v18 + 80) = v466 + 1;
                                            v479 = *(_QWORD *)(v18 + 88);
                                            *(_QWORD *)(v18 + 88) = v467;
                                            if (v468)
                                              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v18 + 96)
                                                                                               + 40))(*(_QWORD *)(v18 + 96), v468, v479 - v468);
LABEL_602:
                                            *(_QWORD *)(v18 + 80) = v455;
                                            if (++v447 == v446)
                                              goto LABEL_589;
                                            continue;
                                          }
                                        }
                                      }
                                      do
                                      {
                                        v478 = *(_QWORD *)(v468 - 8);
                                        v468 -= 8;
                                        *--v472 = v478;
                                      }
                                      while (v468 != v469);
                                      goto LABEL_626;
                                    }
                                    break;
                                  }
                                  v472 = v466;
                                  goto LABEL_627;
                                }
                              }
LABEL_589:
                              if ((_BYTE)v867)
                                (*(void (**)(unint64_t))(*(_QWORD *)v864.n128_u64[0] + 56))(v864.n128_u64[0]);
                              v449 = v866;
                              if (v866)
                              {
                                v450 = (unint64_t *)&v866->__shared_owners_;
                                do
                                  v451 = __ldaxr(v450);
                                while (__stlxr(v451 - 1, v450));
                                if (!v451)
                                {
                                  ((void (*)(std::__shared_weak_count *))v449->__on_zero_shared)(v449);
                                  std::__shared_weak_count::__release_weak(v449);
                                }
                              }
                              v452 = (std::__shared_weak_count *)v864.n128_u64[1];
                              if (v864.n128_u64[1])
                              {
                                v453 = (unint64_t *)(v864.n128_u64[1] + 8);
                                do
                                  v454 = __ldaxr(v453);
                                while (__stlxr(v454 - 1, v453));
                                if (!v454)
                                {
                                  ((void (*)(std::__shared_weak_count *))v452->__on_zero_shared)(v452);
                                  std::__shared_weak_count::__release_weak(v452);
                                }
                              }
                              ++v399;
                            }
                            while (v399 != v844);
                          }
                          v397 = v831 + 1;
                          if (v831 + 1 != v825)
                            continue;
                          break;
                        }
                        v480 = this[34];
                        v822 = this[35];
                        if (v480 != v822)
                        {
                          v481 = (__n128)vdupq_n_s32(0x37800080u);
                          v832 = (float32x4_t)v481;
                          while (2)
                          {
                            v482 = *v480;
                            v483 = *(_QWORD *)(*v480 + 384);
                            v484 = *(std::__shared_weak_count **)(*v480 + 224);
                            v858 = *(std::__shared_weak_count **)(*v480 + 216);
                            v859 = v484;
                            if (v484)
                            {
                              v485 = (unint64_t *)&v484->__shared_owners_;
                              do
                                v486 = __ldxr(v485);
                              while (__stxr(v486 + 1, v485));
                            }
                            v487 = *(std::__shared_weak_count **)(v482 + 240);
                            v862 = *(uint16x4_t *)(v482 + 232);
                            v863 = v487;
                            if (v487)
                            {
                              v488 = (unint64_t *)&v487->__shared_owners_;
                              do
                                v489 = __ldxr(v488);
                              while (__stxr(v489 + 1, v488));
                            }
                            v490 = *(void ****)(v483 + 776);
                            v845 = *(void ****)(v483 + 784);
                            if (v490 == v845)
                              goto LABEL_753;
                            v826 = v480;
                            v491 = (*(_BYTE *)(v483 + 169) + *((_BYTE *)this[46] + 288));
LABEL_641:
                            v492 = **v490;
                            v493 = (std::__shared_weak_count *)(*v490)[1];
                            v864.n128_u64[0] = (unint64_t)v492;
                            v864.n128_u64[1] = (unint64_t)v493;
                            if (v493)
                            {
                              v494 = (unint64_t *)&v493->__shared_owners_;
                              do
                                v495 = __ldxr(v494);
                              while (__stxr(v495 + 1, v494));
                              v855.var0.var1 = v493;
                              do
                                v496 = __ldxr(v494);
                              while (__stxr(v496 + 1, v494));
                            }
                            else
                            {
                              v855.var0.var1 = 0;
                            }
                            v855.var0.var0 = v492;
                            v855.var0.var2.var0 = 0;
                            v855.var0.var2.var1.var0 = 0;
                            v856 = 0;
                            if (v492)
                              LODWORD(v492) = (*(uint64_t (**)(void *, __compressed_pair<std::pair<gss::StyleAttribute, unsigned short> *, geo::StdAllocator<std::pair<gss::StyleAttribute, unsigned short>, gss::Allocator>> *))(*(_QWORD *)v492 + 48))(v492, &v855.var0.var2);
                            v856 = v492;
                            if (v493)
                            {
                              v497 = (unint64_t *)&v493->__shared_owners_;
                              do
                                v498 = __ldaxr(v497);
                              while (__stlxr(v498 - 1, v497));
                              if (!v498)
                              {
                                ((void (*)(std::__shared_weak_count *))v493->__on_zero_shared)(v493);
                                std::__shared_weak_count::__release_weak(v493);
                              }
                              LODWORD(v492) = v856;
                            }
                            if (!(_DWORD)v492)
                              goto LABEL_712;
                            v499 = *((_QWORD *)v855.var0.var0 + 3);
                            v500 = *(float **)v499;
                            if (*(_QWORD *)v499)
                            {
                              v501 = *v500;
                              LODWORD(v500) = *v500 == 1.0;
                              v502 = v851;
                              if (*(_BYTE *)(v499 + 10))
                              {
                                if (v501 != 0.0 && v501 != 1.0)
                                {
LABEL_667:
                                  v864.n128_u8[0] = 1;
                                  v853.i8[0] = 1;
                                  v505 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v499, 0x8Eu, v502, 0, &v864);
                                  v506 = v505
                                       + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v499, 0x8Eu, v502, 1u, &v853)- v505)* v501);
                                  goto LABEL_669;
                                }
                              }
                            }
                            else
                            {
                              v502 = v851;
                            }
                            v504 = *(unsigned __int8 *)(v499 + v500 + 11);
                            v501 = 0.0;
                            if (v504 == 2)
                              goto LABEL_667;
                            v506 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*((_QWORD *)v855.var0.var0 + 3), 0x8Eu, v502, v504, 0);
LABEL_669:
                            if ((v507 = *((_QWORD *)v855.var0.var0 + 3), (v508 = *(float **)v507) != 0)
                              && (v509 = *v508, LODWORD(v508) = *v508 == 1.0, *(_BYTE *)(v507 + 10))
                              && (v509 != 0.0 ? (v510 = v509 == 1.0) : (v510 = 1), !v510)
                              || (v511 = *(unsigned __int8 *)(v507 + v508 + 11), v509 = 0.0, v511 == 2))
                            {
                              v864.n128_u8[0] = 1;
                              v853.i8[0] = 1;
                              v512 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v507, 0, v502, 0, &v864);
                              v481.n128_f32[0] = v512
                                               + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v507, 0, v502, 1u, &v853)- v512)* v509);
                              if (v506 <= 0.0)
                                goto LABEL_712;
                            }
                            else
                            {
                              v481.n128_u32[0] = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*((_QWORD *)v855.var0.var0 + 3), 0, v502, v511, 0);
                              if (v506 <= 0.0)
                                goto LABEL_712;
                            }
                            if (v481.n128_f32[0] <= 0.0)
                              goto LABEL_712;
                            v513 = ggl::FragmentedPool<ggl::RenderItem>::pop(this[46][1]);
                            v514 = *(std::__shared_weak_count ***)(v513 + 64);
                            v515 = v858;
                            *v514 = v858;
                            v514[1] = 0;
                            v516 = *(std::__shared_weak_count ***)(v513 + 160);
                            v517 = v859;
                            if (v859)
                            {
                              v518 = (unint64_t *)&v859->__shared_owners_;
                              do
                                v519 = __ldxr(v518);
                              while (__stxr(v519 + 1, v518));
                            }
                            v520 = v516[1];
                            *v516 = v515;
                            v516[1] = v517;
                            if (v520)
                            {
                              v521 = (unint64_t *)&v520->__shared_owners_;
                              do
                                v522 = __ldaxr(v521);
                              while (__stlxr(v522 - 1, v521));
                              if (!v522)
                              {
                                ((void (*)(std::__shared_weak_count *))v520->__on_zero_shared)(v520);
                                std::__shared_weak_count::__release_weak(v520);
                              }
                            }
                            v523 = *(uint16x4_t **)(v513 + 64);
                            v524 = v862;
                            v525 = v863;
                            v523[2] = v862;
                            v523[3] = 0;
                            v526 = *(_QWORD *)(v513 + 160);
                            if (v525)
                            {
                              v527 = (unint64_t *)&v525->__shared_owners_;
                              do
                                v528 = __ldxr(v527);
                              while (__stxr(v528 + 1, v527));
                            }
                            v529 = *(std::__shared_weak_count **)(v526 + 24);
                            *(uint16x4_t *)(v526 + 16) = v524;
                            *(_QWORD *)(v526 + 24) = v525;
                            if (v529)
                            {
                              v530 = (unint64_t *)&v529->__shared_owners_;
                              do
                                v531 = __ldaxr(v530);
                              while (__stlxr(v531 - 1, v530));
                              if (!v531)
                              {
                                ((void (*)(std::__shared_weak_count *))v529->__on_zero_shared)(v529);
                                std::__shared_weak_count::__release_weak(v529);
                              }
                            }
                            v532 = *(_QWORD *)(*(_QWORD *)(v513 + 64) + 32);
                            v864 = 0uLL;
                            v533 = *(std::__shared_weak_count **)(v532 + 8);
                            if (v533)
                              v534 = *(__n128 **)(v532 + 72);
                            else
                              v534 = 0;
                            v535.n128_u64[0] = 0;
                            v535.n128_u64[1] = v532;
                            v838 = v535;
                            v864 = v535;
                            v865 = 0;
                            v866 = v533;
                            v868 = (float32x4_t *)v534;
                            v867 = 1;
                            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v853, *((_QWORD *)v855.var0.var0 + 3), 0x90u, v851, 2u, 0);
                            v481 = (__n128)vmulq_f32(vcvtq_f32_u32(vmovl_u16(v853)), v832);
                            *v534 = v481;
                            v481.n128_f32[0] = -v506;
                            v534[1].n128_f32[0] = -v506;
                            if (v533)
                            {
                              v481 = v838;
                              if (v838.n128_u64[0] && *(_BYTE *)(v838.n128_u64[1] + 17) != 2)
                                (*(void (**)(void))(*(_QWORD *)v838.n128_u64[0] + 64))();
                              v536 = *(std::__shared_weak_count **)(v838.n128_u64[1] + 64);
                              if (v536 <= v533)
                                v536 = v533;
                              *(_QWORD *)(v838.n128_u64[1] + 56) = 0;
                              *(_QWORD *)(v838.n128_u64[1] + 64) = v536;
                            }
                            v537 = (*v490)[3];
                            v538 = (_QWORD *)*v537;
                            v539 = (_QWORD *)v537[1];
                            if (*(_QWORD *)(**(_QWORD **)(*(_QWORD *)*v537 + 64) + 48) == *(_QWORD *)(**(_QWORD **)(*(_QWORD *)*v537 + 64) + 40)
                              || v538 == v539)
                            {
LABEL_712:
                              if (v856)
                                (*(void (**)(void *, __n128))(*(_QWORD *)v855.var0.var0 + 56))(v855.var0.var0, v481);
                              v541 = v855.var0.var2.var1.var0;
                              if (v855.var0.var2.var1.var0)
                              {
                                v542 = (unint64_t *)((char *)v855.var0.var2.var1.var0 + 8);
                                do
                                  v543 = __ldaxr(v542);
                                while (__stlxr(v543 - 1, v542));
                                if (!v543)
                                {
                                  (*(void (**)(Allocator *, __n128))(*(_QWORD *)v541 + 16))(v541, v481);
                                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v541);
                                }
                              }
                              v544 = (std::__shared_weak_count *)v855.var0.var1;
                              if (v855.var0.var1)
                              {
                                v545 = (unint64_t *)((char *)v855.var0.var1 + 8);
                                do
                                  v546 = __ldaxr(v545);
                                while (__stlxr(v546 - 1, v545));
                                if (!v546)
                                {
                                  ((void (*)(std::__shared_weak_count *, __n128))v544->__on_zero_shared)(v544, v481);
                                  std::__shared_weak_count::__release_weak(v544);
                                }
                              }
                              if (++v490 == v845)
                              {
                                v487 = v863;
                                v480 = v826;
LABEL_753:
                                if (v487)
                                {
                                  v571 = (unint64_t *)&v487->__shared_owners_;
                                  do
                                    v572 = __ldaxr(v571);
                                  while (__stlxr(v572 - 1, v571));
                                  if (!v572)
                                  {
                                    ((void (*)(std::__shared_weak_count *, __n128))v487->__on_zero_shared)(v487, v481);
                                    std::__shared_weak_count::__release_weak(v487);
                                  }
                                }
                                v573 = v859;
                                if (v859)
                                {
                                  v574 = (unint64_t *)&v859->__shared_owners_;
                                  do
                                    v575 = __ldaxr(v574);
                                  while (__stlxr(v575 - 1, v574));
                                  if (!v575)
                                  {
                                    ((void (*)(std::__shared_weak_count *, __n128))v573->__on_zero_shared)(v573, v481);
                                    std::__shared_weak_count::__release_weak(v573);
                                  }
                                }
                                if (++v480 == v822)
                                  goto LABEL_763;
                                continue;
                              }
                              goto LABEL_641;
                            }
                            break;
                          }
                          while (2)
                          {
                            v548 = ggl::FragmentedPool<ggl::RenderItem>::pop(this[46][14]);
                            v549 = v548;
                            *(_QWORD *)(v548 + 24) = this[46][12];
                            *(_QWORD *)(v548 + 32) = v513;
                            *(_QWORD *)(v548 + 64) = *v538;
                            *(_DWORD *)(v548 + 40) = v491;
                            v550 = *(uint64_t **)(v18 + 80);
                            v551 = *(_QWORD *)(v18 + 88);
                            if ((unint64_t)v550 < v551)
                            {
                              if (v550)
                                *v550 = v548;
                              v547 = v550 + 1;
                              goto LABEL_725;
                            }
                            v552 = *(_QWORD *)(v18 + 72);
                            v553 = ((uint64_t)v550 - v552) >> 3;
                            v554 = v553 + 1;
                            if ((unint64_t)(v553 + 1) >> 61)
                              abort();
                            v555 = v551 - v552;
                            if (v555 >> 2 > v554)
                              v554 = v555 >> 2;
                            if ((unint64_t)v555 >= 0x7FFFFFFFFFFFFFF8)
                              v556 = 0x1FFFFFFFFFFFFFFFLL;
                            else
                              v556 = v554;
                            if (v556)
                            {
                              v557 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v18 + 96) + 16))(*(_QWORD *)(v18 + 96), 8 * v556, 8);
                              v558 = (uint64_t *)(v557 + 8 * v553);
                              v559 = v557 + 8 * v556;
                              if (v557)
                                *v558 = v549;
                            }
                            else
                            {
                              v559 = 0;
                              v558 = (uint64_t *)(8 * v553);
                            }
                            v561 = *(_QWORD *)(v18 + 72);
                            v560 = *(_QWORD *)(v18 + 80);
                            v562 = v560 - v561;
                            if (v560 != v561)
                            {
                              v563 = v562 - 8;
                              if ((unint64_t)(v562 - 8) < 0x38)
                              {
                                v564 = v558;
                              }
                              else
                              {
                                v564 = v558;
                                if ((unint64_t)(v560 - (_QWORD)v558) >= 0x20)
                                {
                                  v565 = (v563 >> 3) + 1;
                                  v566 = (__n128 *)(v558 - 2);
                                  v567 = (__n128 *)(v560 - 16);
                                  v568 = v565 & 0x3FFFFFFFFFFFFFFCLL;
                                  do
                                  {
                                    v481 = *v567;
                                    v566[-1] = v567[-1];
                                    *v566 = v481;
                                    v566 -= 2;
                                    v567 -= 2;
                                    v568 -= 4;
                                  }
                                  while (v568);
                                  v564 = &v558[-(v565 & 0x3FFFFFFFFFFFFFFCLL)];
                                  v560 -= 8 * (v565 & 0x3FFFFFFFFFFFFFFCLL);
                                  if (v565 == (v565 & 0x3FFFFFFFFFFFFFFCLL))
                                  {
LABEL_749:
                                    v560 = *(_QWORD *)(v18 + 72);
LABEL_750:
                                    v547 = v558 + 1;
                                    *(_QWORD *)(v18 + 72) = v564;
                                    *(_QWORD *)(v18 + 80) = v558 + 1;
                                    v570 = *(_QWORD *)(v18 + 88);
                                    *(_QWORD *)(v18 + 88) = v559;
                                    if (v560)
                                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v18 + 96) + 40))(*(_QWORD *)(v18 + 96), v560, v570 - v560);
LABEL_725:
                                    *(_QWORD *)(v18 + 80) = v547;
                                    if (++v538 == v539)
                                      goto LABEL_712;
                                    continue;
                                  }
                                }
                              }
                              do
                              {
                                v569 = *(_QWORD *)(v560 - 8);
                                v560 -= 8;
                                *--v564 = v569;
                              }
                              while (v560 != v561);
                              goto LABEL_749;
                            }
                            break;
                          }
                          v564 = v558;
                          goto LABEL_750;
                        }
                      }
                    }
LABEL_763:
                    v576 = v810 + 144;
                    v577 = 128;
                    if (*(unsigned __int8 *)(v810 + 320) - 1 >= 3)
                      v576 = v810 + 128;
                    else
                      v577 = 144;
                    v578 = *(std::__shared_weak_count **)(v810 + v577);
                    v579 = *(std::__shared_weak_count **)(v576 + 8);
                    v858 = v578;
                    v859 = v579;
                    if (v579)
                    {
                      v580 = (unint64_t *)&v579->__shared_owners_;
                      do
                        v581 = __ldxr(v580);
                      while (__stxr(v581 + 1, v580));
                    }
                    if ((v815 & 1) == 0)
                      goto LABEL_1047;
                    md::LayoutContext::frameState(a2);
                    if (*(unsigned __int8 *)(v582 + 128) - 1 >= 3)
                    {
                      v586 = *v809;
                      v591 = v809[1];
                      v585 = v809[2];
                      v592 = v809[3];
                      v593 = v809[4];
                      v584 = v809[5];
                      _Q2 = v809[6];
                      v583 = v809[7];
                    }
                    else
                    {
                      v583 = (float64x2_t)xmmword_19FFB33A0;
                      v584 = (float64x2_t)xmmword_19FFB32C0;
                      v585 = (float64x2_t)xmmword_19FFB34D0;
                      v586 = (float64x2_t)xmmword_19FFB34E0;
                      __asm { FMOV            V2.2D, #-1.0 }
                      v591 = 0uLL;
                      v592 = 0uLL;
                      v593 = 0uLL;
                    }
                    v839 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v585), v592);
                    v846 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v586), v591);
                    v827 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(_Q2), v583);
                    v833 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v593), v584);
                    v594 = **(_QWORD **)(this[46][15] + 64);
                    v857 = 0;
                    v855.var0.var0 = 0;
                    v855.var0.var1 = 0;
                    v595 = *(std::__shared_weak_count **)(v594 + 8);
                    v864.n128_u64[0] = 0;
                    v864.n128_u64[1] = v594;
                    v865 = 0;
                    v866 = v595;
                    v867 = 1;
                    v596 = v595 ? *(float32x4_t **)(v594 + 72) : 0;
                    v868 = v596;
                    ggl::BufferMemory::operator=((uint64_t *)&v855, (uint64_t)&v864);
                    ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v864);
                    v597 = (_OWORD *)v857;
                    *(float32x4_t *)v857 = v846;
                    v597[1] = v839;
                    v597[2] = v833;
                    v597[3] = v827;
                    ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v855);
                    ggl::GlobeAtmosphere::BasePipelineSetup::setLightConfigConstantData(*(_QWORD *)(this[46][15] + 64), *(_QWORD *)(this[46][15] + 160), this[46][30], this[46][31]);
                    v598 = *(_QWORD *)(*(_QWORD *)(this[46][15] + 64) + 32);
                    v857 = 0;
                    v855.var0.var0 = 0;
                    v855.var0.var1 = 0;
                    v599 = *(std::__shared_weak_count **)(v598 + 8);
                    v864.n128_u64[0] = 0;
                    v864.n128_u64[1] = v598;
                    v865 = 0;
                    v866 = v599;
                    v867 = 1;
                    v600 = v599 ? *(float32x4_t **)(v598 + 72) : 0;
                    v868 = v600;
                    ggl::BufferMemory::operator=((uint64_t *)&v855, (uint64_t)&v864);
                    ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v864);
                    v601 = v857;
                    *(_QWORD *)(v857 + 64) = 0;
                    *(_QWORD *)(v601 + 72) = 0;
                    *(_OWORD *)(v601 + 88) = xmmword_19FFB3480;
                    *(_DWORD *)(v601 + 80) = 1065353216;
                    *(_DWORD *)v601 = 1065353216;
                    *(_QWORD *)(v601 + 12) = 0;
                    *(_QWORD *)(v601 + 4) = 0;
                    *(_DWORD *)(v601 + 20) = 1065353216;
                    *(_QWORD *)(v601 + 24) = 0;
                    *(_QWORD *)(v601 + 32) = 0;
                    *(_DWORD *)(v601 + 40) = 1065353216;
                    *(_QWORD *)(v601 + 52) = 0;
                    *(_QWORD *)(v601 + 44) = 0;
                    *(_DWORD *)(v601 + 60) = 1065353216;
                    ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v855);
                    *(_QWORD *)(this[46][26] + 24) = this[46][5];
                    *(_QWORD *)(this[46][26] + 32) = this[46][15];
                    *(_QWORD *)(this[46][26] + 64) = v578;
                    ggl::CommandBuffer::pushRenderItem(v18, (ggl::RenderItem *)this[46][26]);
                    v602 = this[34];
                    v834 = this[35];
                    if (v602 == v834)
                    {
LABEL_1047:
                      *(_QWORD *)(this[46][27] + 24) = this[46][6];
                      *(_QWORD *)(this[46][27] + 32) = this[46][15];
                      *(_QWORD *)(this[46][27] + 64) = v858;
                      ggl::CommandBuffer::pushRenderItem(v18, (ggl::RenderItem *)this[46][27]);
                      v804 = v859;
                      if (v859)
                      {
                        v805 = (unint64_t *)&v859->__shared_owners_;
                        do
                          v806 = __ldaxr(v805);
                        while (__stlxr(v806 - 1, v805));
                        if (!v806)
                        {
                          ((void (*)(std::__shared_weak_count *))v804->__on_zero_shared)(v804);
                          std::__shared_weak_count::__release_weak(v804);
                        }
                      }
LABEL_1052:

                      goto LABEL_1053;
                    }
                    while (2)
                    {
                      v603 = *v602;
                      v604 = *(_QWORD *)(*v602 + 384);
                      v605 = *(unint64_t **)(*v602 + 224);
                      v855.var0.var0 = *(void **)(*v602 + 216);
                      v855.var0.var1 = v605;
                      if (v605)
                      {
                        v606 = v605 + 1;
                        do
                          v607 = __ldxr(v606);
                        while (__stxr(v607 + 1, v606));
                      }
                      v608 = *(std::__shared_weak_count **)(v603 + 240);
                      v862 = *(uint16x4_t *)(v603 + 232);
                      v863 = v608;
                      if (v608)
                      {
                        v609 = (unint64_t *)&v608->__shared_owners_;
                        do
                          v610 = __ldxr(v609);
                        while (__stxr(v610 + 1, v609));
                      }
                      v611 = *(uint16x4_t ***)(v604 + 776);
                      v847 = *(uint16x4_t ***)(v604 + 784);
                      if (v611 == v847)
                      {
LABEL_899:
                        if (v608)
                        {
                          v697 = (unint64_t *)&v608->__shared_owners_;
                          do
                            v698 = __ldaxr(v697);
                          while (__stlxr(v698 - 1, v697));
                          if (!v698)
                          {
                            ((void (*)(std::__shared_weak_count *))v608->__on_zero_shared)(v608);
                            std::__shared_weak_count::__release_weak(v608);
                          }
                        }
                        v699 = (std::__shared_weak_count *)v855.var0.var1;
                        if (v855.var0.var1)
                        {
                          v700 = (unint64_t *)((char *)v855.var0.var1 + 8);
                          do
                            v701 = __ldaxr(v700);
                          while (__stlxr(v701 - 1, v700));
                          if (!v701)
                          {
                            ((void (*)(std::__shared_weak_count *))v699->__on_zero_shared)(v699);
                            std::__shared_weak_count::__release_weak(v699);
                          }
                        }
                        if (++v602 != v834)
                          continue;
                        v702 = (uint16x4_t **)this[34];
                        v819 = (md::LayoutContext *)this[35];
                        if (v702 != (uint16x4_t **)v819)
                        {
                          v828 = (float32x4_t)vdupq_n_s32(0x37800080u);
LABEL_912:
                          v703 = *v702;
                          v704 = (*v702)[48];
                          v705 = (std::__shared_weak_count *)(*v702)[28];
                          v862 = (*v702)[27];
                          v863 = v705;
                          if (v705)
                          {
                            v706 = (unint64_t *)&v705->__shared_owners_;
                            do
                              v707 = __ldxr(v706);
                            while (__stxr(v707 + 1, v706));
                          }
                          v708 = (std::__shared_weak_count *)v703[30];
                          v853 = v703[29];
                          v854 = v708;
                          if (v708)
                          {
                            v709 = (unint64_t *)&v708->__shared_owners_;
                            do
                              v710 = __ldxr(v709);
                            while (__stxr(v710 + 1, v709));
                          }
                          v711 = *(void ****)(*(_QWORD *)&v704 + 776);
                          v848 = *(void ****)(*(_QWORD *)&v704 + 784);
                          if (v711 == v848)
                            goto LABEL_1037;
                          v823 = v702;
                          v712 = (*(_BYTE *)(*(_QWORD *)&v704 + 169) + *((_BYTE *)this[46] + 288));
                          while (1)
                          {
                            v713 = **v711;
                            v714 = (std::__shared_weak_count *)(*v711)[1];
                            v864.n128_u64[0] = (unint64_t)v713;
                            v864.n128_u64[1] = (unint64_t)v714;
                            if (v714)
                            {
                              v715 = (unint64_t *)&v714->__shared_owners_;
                              do
                                v716 = __ldxr(v715);
                              while (__stxr(v716 + 1, v715));
                              v855.var0.var1 = v714;
                              do
                                v717 = __ldxr(v715);
                              while (__stxr(v717 + 1, v715));
                            }
                            else
                            {
                              v855.var0.var1 = 0;
                            }
                            v855.var0.var0 = v713;
                            v855.var0.var2.var0 = 0;
                            v855.var0.var2.var1.var0 = 0;
                            v856 = 0;
                            if (v713)
                              LODWORD(v713) = (*(uint64_t (**)(void *, __compressed_pair<std::pair<gss::StyleAttribute, unsigned short> *, geo::StdAllocator<std::pair<gss::StyleAttribute, unsigned short>, gss::Allocator>> *))(*(_QWORD *)v713 + 48))(v713, &v855.var0.var2);
                            v856 = v713;
                            if (v714)
                            {
                              v718 = (unint64_t *)&v714->__shared_owners_;
                              do
                                v719 = __ldaxr(v718);
                              while (__stlxr(v719 - 1, v718));
                              if (!v719)
                              {
                                ((void (*)(std::__shared_weak_count *))v714->__on_zero_shared)(v714);
                                std::__shared_weak_count::__release_weak(v714);
                              }
                              LODWORD(v713) = v856;
                            }
                            if ((_DWORD)v713)
                              break;
LABEL_920:
                            gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v855);
                            if (++v711 == v848)
                            {
                              v708 = v854;
                              v702 = v823;
LABEL_1037:
                              if (v708)
                              {
                                v799 = (unint64_t *)&v708->__shared_owners_;
                                do
                                  v800 = __ldaxr(v799);
                                while (__stlxr(v800 - 1, v799));
                                if (!v800)
                                {
                                  ((void (*)(std::__shared_weak_count *))v708->__on_zero_shared)(v708);
                                  std::__shared_weak_count::__release_weak(v708);
                                }
                              }
                              v801 = v863;
                              if (v863)
                              {
                                v802 = (unint64_t *)&v863->__shared_owners_;
                                do
                                  v803 = __ldaxr(v802);
                                while (__stlxr(v803 - 1, v802));
                                if (!v803)
                                {
                                  ((void (*)(std::__shared_weak_count *))v801->__on_zero_shared)(v801);
                                  std::__shared_weak_count::__release_weak(v801);
                                }
                              }
                              if (++v702 == (uint16x4_t **)v819)
                                goto LABEL_1047;
                              goto LABEL_912;
                            }
                          }
                          v720 = *((_QWORD *)v855.var0.var0 + 3);
                          v721 = *(float **)v720;
                          if (*(_QWORD *)v720)
                          {
                            v722 = *v721;
                            LODWORD(v721) = *v721 == 1.0;
                            v723 = v851;
                            if (*(_BYTE *)(v720 + 10))
                            {
                              if (v722 != 0.0 && v722 != 1.0)
                                goto LABEL_947;
                            }
                          }
                          else
                          {
                            v723 = v851;
                          }
                          v725 = *(unsigned __int8 *)(v720 + v721 + 11);
                          v722 = 0.0;
                          if (v725 != 2)
                          {
                            v730 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*((unsigned __int16 **)v855.var0.var0 + 3), 0x5Bu, v723, v725, 0);
                            goto LABEL_951;
                          }
LABEL_947:
                          v864.n128_u8[0] = 1;
                          v869.i8[0] = 1;
                          v726 = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v720, 0x5Bu, v723, 0, &v864);
                          v727 = v723;
                          v728 = *(_BYTE *)v726;
                          v729 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v720, 0x5Bu, v727, 1, &v869);
                          if (v722 >= 1.0)
                            v730 = v729;
                          else
                            v730 = v728;
LABEL_951:
                          v731 = *((_QWORD *)v855.var0.var0 + 3);
                          v732 = *(float **)v731;
                          if (*(_QWORD *)v731
                            && (v733 = *v732, LODWORD(v732) = *v732 == 1.0, *(_BYTE *)(v731 + 10))
                            && (v733 != 0.0 ? (v734 = v733 == 1.0) : (v734 = 1), !v734)
                            || (v735 = *(unsigned __int8 *)(v731 + v732 + 11), v733 = 0.0, v735 == 2))
                          {
                            v864.n128_u8[0] = 1;
                            v869.i8[0] = 1;
                            v736 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v731, 0x8Fu, v851, 0, &v864);
                            v737 = v736
                                 + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v731, 0x8Fu, v851, 1u, &v869)- v736)* v733);
                          }
                          else
                          {
                            v737 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*((_QWORD *)v855.var0.var0 + 3), 0x8Fu, v851, v735, 0);
                          }
                          v738 = *((_QWORD *)v855.var0.var0 + 3);
                          v739 = *(float **)v738;
                          if (*(_QWORD *)v738
                            && (v740 = *v739, LODWORD(v739) = *v739 == 1.0, *(_BYTE *)(v738 + 10))
                            && (v740 != 0.0 ? (v741 = v740 == 1.0) : (v741 = 1), !v741)
                            || (v742 = *(unsigned __int8 *)(v738 + v739 + 11), v740 = 0.0, v742 == 2))
                          {
                            v864.n128_u8[0] = 1;
                            v869.i8[0] = 1;
                            v743 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v738, 1u, v851, 0, &v864);
                            v744 = v743
                                 + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v738, 1u, v851, 1u, &v869)- v743)* v740);
                            if (v737 <= 0.0)
                              goto LABEL_920;
                          }
                          else
                          {
                            v744 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*((_QWORD *)v855.var0.var0 + 3), 1u, v851, v742, 0);
                            if (v737 <= 0.0)
                              goto LABEL_920;
                          }
                          if (v744 > 0.0 && v730 != 0)
                          {
                            v746 = ggl::FragmentedPool<ggl::RenderItem>::pop(this[46][1]);
                            v747 = *(uint16x4_t **)(v746 + 64);
                            v748 = v862;
                            *v747 = v862;
                            v747[1] = 0;
                            v749 = *(uint16x4_t **)(v746 + 160);
                            v750 = v863;
                            if (v863)
                            {
                              v751 = (unint64_t *)&v863->__shared_owners_;
                              do
                                v752 = __ldxr(v751);
                              while (__stxr(v752 + 1, v751));
                            }
                            v753 = (std::__shared_weak_count *)v749[1];
                            *v749 = v748;
                            v749[1] = (uint16x4_t)v750;
                            if (v753)
                            {
                              v754 = (unint64_t *)&v753->__shared_owners_;
                              do
                                v755 = __ldaxr(v754);
                              while (__stlxr(v755 - 1, v754));
                              if (!v755)
                              {
                                ((void (*)(std::__shared_weak_count *))v753->__on_zero_shared)(v753);
                                std::__shared_weak_count::__release_weak(v753);
                              }
                            }
                            v756 = *(uint16x4_t **)(v746 + 64);
                            v757 = v853;
                            v758 = v854;
                            v756[2] = v853;
                            v756[3] = 0;
                            v759 = *(_QWORD *)(v746 + 160);
                            if (v758)
                            {
                              v760 = (unint64_t *)&v758->__shared_owners_;
                              do
                                v761 = __ldxr(v760);
                              while (__stxr(v761 + 1, v760));
                            }
                            v762 = *(std::__shared_weak_count **)(v759 + 24);
                            *(uint16x4_t *)(v759 + 16) = v757;
                            *(_QWORD *)(v759 + 24) = v758;
                            if (v762)
                            {
                              v763 = (unint64_t *)&v762->__shared_owners_;
                              do
                                v764 = __ldaxr(v763);
                              while (__stlxr(v764 - 1, v763));
                              if (!v764)
                              {
                                ((void (*)(std::__shared_weak_count *))v762->__on_zero_shared)(v762);
                                std::__shared_weak_count::__release_weak(v762);
                              }
                            }
                            v765 = *(_QWORD *)(*(_QWORD *)(v746 + 64) + 32);
                            v864 = 0uLL;
                            v766 = *(std::__shared_weak_count **)(v765 + 8);
                            if (v766)
                              v767 = *(float32x4_t **)(v765 + 72);
                            else
                              v767 = 0;
                            v768.n128_u64[0] = 0;
                            v768.n128_u64[1] = v765;
                            v835 = v768;
                            v864 = v768;
                            v865 = 0;
                            v866 = v766;
                            v868 = v767;
                            v867 = 1;
                            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v869, *((_QWORD *)v855.var0.var0 + 3), 0x91u, v851, 2u, 0);
                            *v767 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v869)), v828);
                            v767[1].f32[0] = v737;
                            if (v766)
                            {
                              if (v835.n128_u64[0] && *(_BYTE *)(v835.n128_u64[1] + 17) != 2)
                                (*(void (**)(void))(*(_QWORD *)v835.n128_u64[0] + 64))();
                              v769 = *(std::__shared_weak_count **)(v835.n128_u64[1] + 64);
                              if (v769 <= v766)
                                v769 = v766;
                              *(_QWORD *)(v835.n128_u64[1] + 56) = 0;
                              *(_QWORD *)(v835.n128_u64[1] + 64) = v769;
                            }
                            v770 = (*v711)[3];
                            v771 = (_QWORD *)*v770;
                            v772 = (_QWORD *)v770[1];
                            if (*(_QWORD *)(**(_QWORD **)(*(_QWORD *)*v770 + 64) + 48) != *(_QWORD *)(**(_QWORD **)(*(_QWORD *)*v770 + 64) + 40)
                              && v771 != v772)
                            {
                              while (1)
                              {
                                v775 = ggl::FragmentedPool<ggl::RenderItem>::pop(this[46][14]);
                                v776 = v775;
                                *(_QWORD *)(v775 + 24) = this[46][10];
                                *(_QWORD *)(v775 + 32) = v746;
                                *(_QWORD *)(v775 + 64) = *v771;
                                *(_DWORD *)(v775 + 40) = v712;
                                v777 = *(uint64_t **)(v18 + 80);
                                v778 = *(_QWORD *)(v18 + 88);
                                if ((unint64_t)v777 >= v778)
                                  break;
                                if (v777)
                                  *v777 = v775;
                                v774 = v777 + 1;
LABEL_1009:
                                *(_QWORD *)(v18 + 80) = v774;
                                if (++v771 == v772)
                                  goto LABEL_920;
                              }
                              v779 = *(_QWORD *)(v18 + 72);
                              v780 = ((uint64_t)v777 - v779) >> 3;
                              v781 = v780 + 1;
                              if ((unint64_t)(v780 + 1) >> 61)
                                abort();
                              v782 = v778 - v779;
                              if (v782 >> 2 > v781)
                                v781 = v782 >> 2;
                              if ((unint64_t)v782 >= 0x7FFFFFFFFFFFFFF8)
                                v783 = 0x1FFFFFFFFFFFFFFFLL;
                              else
                                v783 = v781;
                              if (v783)
                              {
                                v784 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v18 + 96)
                                                                                           + 16))(*(_QWORD *)(v18 + 96), 8 * v783, 8);
                                v785 = (uint64_t *)(v784 + 8 * v780);
                                v786 = v784 + 8 * v783;
                                if (v784)
                                  *v785 = v776;
                              }
                              else
                              {
                                v786 = 0;
                                v785 = (uint64_t *)(8 * v780);
                              }
                              v788 = *(_QWORD *)(v18 + 72);
                              v787 = *(_QWORD *)(v18 + 80);
                              v789 = v787 - v788;
                              if (v787 != v788)
                              {
                                v790 = v789 - 8;
                                if ((unint64_t)(v789 - 8) < 0x38)
                                {
                                  v791 = v785;
                                }
                                else
                                {
                                  v791 = v785;
                                  if ((unint64_t)(v787 - (_QWORD)v785) >= 0x20)
                                  {
                                    v792 = (v790 >> 3) + 1;
                                    v793 = v785 - 2;
                                    v794 = (__int128 *)(v787 - 16);
                                    v795 = v792 & 0x3FFFFFFFFFFFFFFCLL;
                                    do
                                    {
                                      v796 = *v794;
                                      *((_OWORD *)v793 - 1) = *(v794 - 1);
                                      *(_OWORD *)v793 = v796;
                                      v793 -= 4;
                                      v794 -= 2;
                                      v795 -= 4;
                                    }
                                    while (v795);
                                    v791 = &v785[-(v792 & 0x3FFFFFFFFFFFFFFCLL)];
                                    v787 -= 8 * (v792 & 0x3FFFFFFFFFFFFFFCLL);
                                    if (v792 == (v792 & 0x3FFFFFFFFFFFFFFCLL))
                                    {
LABEL_1033:
                                      v787 = *(_QWORD *)(v18 + 72);
LABEL_1034:
                                      v774 = v785 + 1;
                                      *(_QWORD *)(v18 + 72) = v791;
                                      *(_QWORD *)(v18 + 80) = v785 + 1;
                                      v798 = *(_QWORD *)(v18 + 88);
                                      *(_QWORD *)(v18 + 88) = v786;
                                      if (v787)
                                        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v18 + 96) + 40))(*(_QWORD *)(v18 + 96), v787, v798 - v787);
                                      goto LABEL_1009;
                                    }
                                  }
                                }
                                do
                                {
                                  v797 = *(_QWORD *)(v787 - 8);
                                  v787 -= 8;
                                  *--v791 = v797;
                                }
                                while (v787 != v788);
                                goto LABEL_1033;
                              }
                              v791 = v785;
                              goto LABEL_1034;
                            }
                          }
                          goto LABEL_920;
                        }
                        goto LABEL_1047;
                      }
                      break;
                    }
                    v840 = v602;
                    v612 = (*(_BYTE *)(v604 + 169) + *((_BYTE *)this[46] + 288));
                    while (2)
                    {
                      v613 = **v611;
                      v614 = (std::__shared_weak_count *)(*v611)[1];
                      v853 = v613;
                      v854 = v614;
                      if (v614)
                      {
                        v615 = (unint64_t *)&v614->__shared_owners_;
                        do
                          v616 = __ldxr(v615);
                        while (__stxr(v616 + 1, v615));
                        v864.n128_u64[1] = (unint64_t)v614;
                        do
                          v617 = __ldxr(v615);
                        while (__stxr(v617 + 1, v615));
                      }
                      else
                      {
                        v864.n128_u64[1] = 0;
                      }
                      v864.n128_u64[0] = (unint64_t)v613;
                      v865 = 0;
                      v866 = 0;
                      LOBYTE(v867) = 0;
                      if (v613)
                        v613.i32[0] = (*(uint64_t (**)(uint16x4_t, uint64_t *))(**(_QWORD **)&v613 + 48))(v613, &v865);
                      LOBYTE(v867) = v613.i8[0];
                      if (v614)
                      {
                        v618 = (unint64_t *)&v614->__shared_owners_;
                        do
                          v619 = __ldaxr(v618);
                        while (__stlxr(v619 - 1, v618));
                        if (!v619)
                        {
                          ((void (*)(std::__shared_weak_count *))v614->__on_zero_shared)(v614);
                          std::__shared_weak_count::__release_weak(v614);
                        }
                        v613.i32[0] = v867;
                      }
                      if (!v613.i32[0])
                        goto LABEL_790;
                      v620 = *(_QWORD *)(v864.n128_u64[0] + 24);
                      v621 = *(float **)v620;
                      if (*(_QWORD *)v620)
                      {
                        v622 = *v621;
                        LODWORD(v621) = *v621 == 1.0;
                        v623 = v851;
                        if (*(_BYTE *)(v620 + 10))
                        {
                          if (v622 != 0.0 && v622 != 1.0)
                          {
LABEL_817:
                            v853.i8[0] = 1;
                            v869.i8[0] = 1;
                            v626 = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v620, 0x5Bu, v623, 0, &v853);
                            v627 = v623;
                            v628 = *(_BYTE *)v626;
                            v629 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v620, 0x5Bu, v627, 1, &v869);
                            if (v622 >= 1.0)
                              v630 = v629;
                            else
                              v630 = v628;
                            goto LABEL_821;
                          }
                        }
                      }
                      else
                      {
                        v623 = v851;
                      }
                      v625 = *(unsigned __int8 *)(v620 + v621 + 11);
                      v622 = 0.0;
                      if (v625 == 2)
                        goto LABEL_817;
                      v630 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v864.n128_u64[0] + 24), 0x5Bu, v623, v625, 0);
LABEL_821:
                      if ((v631 = *(_QWORD *)(v864.n128_u64[0] + 24), (v632 = *(float **)v631) != 0)
                        && (v633 = *v632, LODWORD(v632) = *v632 == 1.0, *(_BYTE *)(v631 + 10))
                        && (v633 != 0.0 ? (v634 = v633 == 1.0) : (v634 = 1), !v634)
                        || (v635 = *(unsigned __int8 *)(v631 + v632 + 11), v633 = 0.0, v635 == 2))
                      {
                        v853.i8[0] = 1;
                        v869.i8[0] = 1;
                        v636 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v631, 0x8Fu, v851, 0, &v853);
                        v637 = v636
                             + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v631, 0x8Fu, v851, 1u, &v869)- v636)* v633);
                      }
                      else
                      {
                        v637 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v864.n128_u64[0] + 24), 0x8Fu, v851, v635, 0);
                      }
                      if ((v638 = *(_QWORD *)(v864.n128_u64[0] + 24), (v639 = *(float **)v638) != 0)
                        && (v640 = *v639, LODWORD(v639) = *v639 == 1.0, *(_BYTE *)(v638 + 10))
                        && (v640 != 0.0 ? (v641 = v640 == 1.0) : (v641 = 1), !v641)
                        || (v642 = *(unsigned __int8 *)(v638 + v639 + 11), v640 = 0.0, v642 == 2))
                      {
                        v853.i8[0] = 1;
                        v869.i8[0] = 1;
                        v643 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v638, 1u, v851, 0, &v853);
                        v644 = v643
                             + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v638, 1u, v851, 1u, &v869)- v643)* v640);
                        if (v637 <= 0.0)
                          goto LABEL_790;
                      }
                      else
                      {
                        v644 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v864.n128_u64[0] + 24), 1u, v851, v642, 0);
                        if (v637 <= 0.0)
                          goto LABEL_790;
                      }
                      if (v644 <= 0.0 || v630 == 0)
                        goto LABEL_790;
                      v646 = ggl::FragmentedPool<ggl::RenderItem>::pop(*this[46]);
                      v647 = *(void ***)(v646 + 64);
                      v648 = v855.var0.var0;
                      *v647 = v855.var0.var0;
                      v647[1] = 0;
                      v649 = *(_QWORD **)(v646 + 160);
                      v650 = v855.var0.var1;
                      if (v855.var0.var1)
                      {
                        v651 = (unint64_t *)((char *)v855.var0.var1 + 8);
                        do
                          v652 = __ldxr(v651);
                        while (__stxr(v652 + 1, v651));
                      }
                      v653 = (std::__shared_weak_count *)v649[1];
                      *v649 = v648;
                      v649[1] = v650;
                      if (v653)
                      {
                        v654 = (unint64_t *)&v653->__shared_owners_;
                        do
                          v655 = __ldaxr(v654);
                        while (__stlxr(v655 - 1, v654));
                        if (!v655)
                        {
                          ((void (*)(std::__shared_weak_count *))v653->__on_zero_shared)(v653);
                          std::__shared_weak_count::__release_weak(v653);
                        }
                      }
                      v656 = *(uint16x4_t **)(v646 + 64);
                      v657 = v862;
                      v658 = v863;
                      v656[2] = v862;
                      v656[3] = 0;
                      v659 = *(_QWORD *)(v646 + 160);
                      if (v658)
                      {
                        v660 = (unint64_t *)&v658->__shared_owners_;
                        do
                          v661 = __ldxr(v660);
                        while (__stxr(v661 + 1, v660));
                      }
                      v662 = *(std::__shared_weak_count **)(v659 + 24);
                      *(uint16x4_t *)(v659 + 16) = v657;
                      *(_QWORD *)(v659 + 24) = v658;
                      if (v662)
                      {
                        v663 = (unint64_t *)&v662->__shared_owners_;
                        do
                          v664 = __ldaxr(v663);
                        while (__stlxr(v664 - 1, v663));
                        if (!v664)
                        {
                          ((void (*)(std::__shared_weak_count *))v662->__on_zero_shared)(v662);
                          std::__shared_weak_count::__release_weak(v662);
                        }
                      }
                      v665 = *(_QWORD **)(*(_QWORD *)(v646 + 64) + 32);
                      v666 = v665[1];
                      v667 = (float *)v665[9];
                      *v667 = v637;
                      v667[1] = v644;
                      if (v665[8] > v666)
                        v666 = v665[8];
                      v665[7] = 0;
                      v665[8] = v666;
                      v668 = (_QWORD *)(*v611)[3];
                      v669 = (_QWORD *)*v668;
                      v670 = (_QWORD *)v668[1];
                      if (*(_QWORD *)(**(_QWORD **)(*(_QWORD *)*v668 + 64) + 48) == *(_QWORD *)(**(_QWORD **)(*(_QWORD *)*v668 + 64) + 40)
                        || v669 == v670)
                      {
LABEL_790:
                        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v864);
                        if (++v611 == v847)
                        {
                          v608 = v863;
                          v602 = v840;
                          goto LABEL_899;
                        }
                        continue;
                      }
                      break;
                    }
                    while (2)
                    {
                      v673 = ggl::FragmentedPool<ggl::RenderItem>::pop(this[46][14]);
                      v674 = v673;
                      *(_QWORD *)(v673 + 24) = this[46][9];
                      *(_QWORD *)(v673 + 32) = v646;
                      *(_QWORD *)(v673 + 64) = *v669;
                      *(_DWORD *)(v673 + 40) = v612;
                      v675 = *(uint64_t **)(v18 + 80);
                      v676 = *(_QWORD *)(v18 + 88);
                      if ((unint64_t)v675 < v676)
                      {
                        if (v675)
                          *v675 = v673;
                        v672 = v675 + 1;
                        goto LABEL_871;
                      }
                      v677 = *(_QWORD *)(v18 + 72);
                      v678 = ((uint64_t)v675 - v677) >> 3;
                      v679 = v678 + 1;
                      if ((unint64_t)(v678 + 1) >> 61)
                        abort();
                      v680 = v676 - v677;
                      if (v680 >> 2 > v679)
                        v679 = v680 >> 2;
                      if ((unint64_t)v680 >= 0x7FFFFFFFFFFFFFF8)
                        v681 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v681 = v679;
                      if (v681)
                      {
                        v682 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v18 + 96) + 16))(*(_QWORD *)(v18 + 96), 8 * v681, 8);
                        v683 = (uint64_t *)(v682 + 8 * v678);
                        v684 = v682 + 8 * v681;
                        if (v682)
                          *v683 = v674;
                      }
                      else
                      {
                        v684 = 0;
                        v683 = (uint64_t *)(8 * v678);
                      }
                      v686 = *(_QWORD *)(v18 + 72);
                      v685 = *(_QWORD *)(v18 + 80);
                      v687 = v685 - v686;
                      if (v685 != v686)
                      {
                        v688 = v687 - 8;
                        if ((unint64_t)(v687 - 8) < 0x38)
                        {
                          v689 = v683;
                        }
                        else
                        {
                          v689 = v683;
                          if ((unint64_t)(v685 - (_QWORD)v683) >= 0x20)
                          {
                            v690 = (v688 >> 3) + 1;
                            v691 = v683 - 2;
                            v692 = (__int128 *)(v685 - 16);
                            v693 = v690 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v694 = *v692;
                              *((_OWORD *)v691 - 1) = *(v692 - 1);
                              *(_OWORD *)v691 = v694;
                              v691 -= 4;
                              v692 -= 2;
                              v693 -= 4;
                            }
                            while (v693);
                            v689 = &v683[-(v690 & 0x3FFFFFFFFFFFFFFCLL)];
                            v685 -= 8 * (v690 & 0x3FFFFFFFFFFFFFFCLL);
                            if (v690 == (v690 & 0x3FFFFFFFFFFFFFFCLL))
                            {
LABEL_895:
                              v685 = *(_QWORD *)(v18 + 72);
LABEL_896:
                              v672 = v683 + 1;
                              *(_QWORD *)(v18 + 72) = v689;
                              *(_QWORD *)(v18 + 80) = v683 + 1;
                              v696 = *(_QWORD *)(v18 + 88);
                              *(_QWORD *)(v18 + 88) = v684;
                              if (v685)
                                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v18 + 96) + 40))(*(_QWORD *)(v18 + 96), v685, v696 - v685);
LABEL_871:
                              *(_QWORD *)(v18 + 80) = v672;
                              if (++v669 == v670)
                                goto LABEL_790;
                              continue;
                            }
                          }
                        }
                        do
                        {
                          v695 = *(_QWORD *)(v685 - 8);
                          v685 -= 8;
                          *--v689 = v695;
                        }
                        while (v685 != v686);
                        goto LABEL_895;
                      }
                      break;
                    }
                    v689 = v683;
                    goto LABEL_896;
                  }
                }
                else
                {
                  isSuperset = (uint64_t)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v864.n128_u64[0] + 24), 0, v283, v306, 0);
                  v308 = *(float *)isSuperset;
                  if ((_BYTE)v867)
                    goto LABEL_402;
                }
                break;
              }
              v315 = 0.0;
              goto LABEL_427;
            }
          }
        }
      }
    }
  }
LABEL_1053:
  if (!v875)
  {
LABEL_1067:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    JUMPOUT(0x19F3D4434);
  }
  (*(void (**)(_QWORD *))(*v875 + 48))(v875);
  result = v875;
  if (v875 == v874)
  {
    v808 = 4;
    result = v874;
  }
  else
  {
    if (!v875)
      return result;
    v808 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v808))();
}

void sub_19F3D4444(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t gss::GlobalProperties::loadFromStylChapterBitstream(uint64_t a1, geo::ibitstream *this, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  NSObject *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  NSObject *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  NSObject *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  NSObject *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  NSObject *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  NSObject *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  unsigned int v80;
  NSObject *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t v86;
  NSObject *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t result;
  NSObject *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  NSObject *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  NSObject *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  NSObject *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  NSObject *v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  NSObject *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  NSObject *v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  NSObject *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  NSObject *v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  NSObject *v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  NSObject *v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  NSObject *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  NSObject *v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  NSObject *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  NSObject *v170;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  _QWORD *v174;
  NSObject *v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  NSObject *v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  NSObject *v185;
  _QWORD *v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  NSObject *v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  NSObject *v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  NSObject *v200;
  _QWORD *v201;
  _QWORD *v202;
  _QWORD *v203;
  _QWORD *v204;
  NSObject *v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  NSObject *v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  _QWORD *v214;
  NSObject *v215;
  _QWORD *v216;
  _QWORD *v217;
  _QWORD *v218;
  _QWORD *v219;
  NSObject *v220;
  _QWORD *v221;
  _QWORD *v222;
  _QWORD *v223;
  _QWORD *v224;
  NSObject *v225;
  _QWORD *v226;
  _QWORD *v227;
  _QWORD *v228;
  _QWORD *v229;
  NSObject *v230;
  _QWORD *v231;
  _QWORD *v232;
  _QWORD *v233;
  _QWORD *v234;
  NSObject *v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239;
  NSObject *v240;
  _QWORD *v241;
  _QWORD *v242;
  _QWORD *v243;
  _QWORD *v244;
  NSObject *v245;
  _QWORD *v246;
  _QWORD *v247;
  _QWORD *v248;
  _QWORD *v249;
  NSObject *v250;
  _QWORD *v251;
  _QWORD *v252;
  _QWORD *v253;
  _QWORD *v254;
  NSObject *v255;
  _QWORD *v256;
  _QWORD *v257;
  _QWORD *v258;
  _QWORD *v259;
  NSObject *v260;
  _QWORD *v261;
  _QWORD *v262;
  _QWORD *v263;
  _QWORD *v264;
  NSObject *v265;
  _QWORD *v266;
  _QWORD *v267;
  _QWORD *v268;
  _QWORD *v269;
  NSObject *v270;
  _QWORD *v271;
  _QWORD *v272;
  _QWORD *v273;
  _QWORD *v274;
  NSObject *v275;
  _QWORD *v276;
  _QWORD *v277;
  _QWORD *v278;
  _QWORD *v279;
  NSObject *v280;
  _QWORD *v281;
  _QWORD *v282;
  _QWORD *v283;
  _QWORD *v284;
  NSObject *v285;
  _QWORD *v286;
  _QWORD *v287;
  _QWORD *v288;
  _QWORD *v289;
  NSObject *v290;
  _QWORD *v291;
  _QWORD *v292;
  _QWORD *v293;
  _QWORD *v294;
  NSObject *v295;
  _QWORD *v296;
  _QWORD *v297;
  _QWORD *v298;
  _QWORD *v299;
  NSObject *v300;
  _QWORD *v301;
  _QWORD *v302;
  _QWORD *v303;
  _QWORD *v304;
  NSObject *v305;
  _QWORD *v306;
  _QWORD *v307;
  _QWORD *v308;
  _QWORD *v309;
  NSObject *v310;
  _QWORD *v311;
  _QWORD *v312;
  _QWORD *v313;
  _QWORD *v314;
  NSObject *v315;
  _QWORD *v316;
  _QWORD *v317;
  _QWORD *v318;
  _QWORD *v319;
  NSObject *v320;
  _QWORD *v321;
  _QWORD *v322;
  _QWORD *v323;
  _QWORD *v324;
  NSObject *v325;
  _QWORD *v326;
  _QWORD *v327;
  _QWORD *v328;
  _QWORD *v329;
  NSObject *v330;
  _QWORD *v331;
  _QWORD *v332;
  _QWORD *v333;
  _QWORD *v334;
  NSObject *v335;
  _QWORD *v336;
  _QWORD *v337;
  _QWORD *v338;
  _QWORD *v339;
  NSObject *v340;
  _QWORD *v341;
  _QWORD *v342;
  _QWORD *v343;
  _QWORD *v344;
  NSObject *v345;
  _QWORD *v346;
  _QWORD *v347;
  _QWORD *v348;
  _QWORD *v349;
  NSObject *v350;
  _QWORD *v351;
  _QWORD *v352;
  _QWORD *v353;
  _QWORD *v354;
  NSObject *v355;
  _QWORD *v356;
  _QWORD *v357;
  _QWORD *v358;
  _QWORD *v359;
  NSObject *v360;
  _QWORD *v361;
  _QWORD *v362;
  _QWORD *v363;
  _QWORD *v364;
  NSObject *v365;
  _QWORD *v366;
  _QWORD *v367;
  _QWORD *v368;
  _QWORD *v369;
  NSObject *v370;
  _QWORD *v371;
  _QWORD *v372;
  _QWORD *v373;
  _QWORD *v374;
  NSObject *v375;
  _QWORD *v376;
  _QWORD *v377;
  _QWORD *v378;
  _QWORD *v379;
  NSObject *v380;
  _QWORD *v381;
  _QWORD *v382;
  _QWORD *v383;
  _QWORD *v384;
  NSObject *v385;
  _QWORD *v386;
  _QWORD *v387;
  _QWORD *v388;
  _QWORD *v389;
  NSObject *v390;
  _QWORD *v391;
  _QWORD *v392;
  _QWORD *v393;
  _QWORD *v394;
  NSObject *v395;
  _QWORD *v396;
  _QWORD *v397;
  _QWORD *v398;
  _QWORD *v399;
  NSObject *v400;
  _QWORD *v401;
  _QWORD *v402;
  _QWORD *v403;
  _QWORD *v404;
  NSObject *v405;
  _QWORD *v406;
  _QWORD *v407;
  _QWORD *v408;
  _QWORD *v409;
  NSObject *v410;
  _QWORD *v411;
  _QWORD *v412;
  _QWORD *v413;
  _QWORD *v414;
  NSObject *v415;
  _QWORD *v416;
  _QWORD *v417;
  _QWORD *v418;
  _QWORD *v419;
  NSObject *v420;
  _QWORD *v421;
  _QWORD *v422;
  _QWORD *v423;
  _QWORD *v424;
  NSObject *v425;
  _QWORD *v426;
  _QWORD *v427;
  _QWORD *v428;
  _QWORD *v429;
  NSObject *v430;
  _QWORD *v431;
  _QWORD *v432;
  _QWORD *v433;
  _QWORD *v434;
  NSObject *v435;
  _QWORD *v436;
  _QWORD *v437;
  _QWORD *v438;
  _QWORD *v439;
  NSObject *v440;
  _QWORD *v441;
  _QWORD *v442;
  _QWORD *v443;
  _QWORD *v444;
  NSObject *v445;
  _QWORD *v446;
  _QWORD *v447;
  _QWORD *v448;
  _QWORD *v449;
  NSObject *v450;
  _QWORD *v451;
  _QWORD *v452;
  _QWORD *v453;
  _QWORD *v454;
  NSObject *v455;
  _QWORD *v456;
  _QWORD *v457;
  _QWORD *v458;
  _QWORD *v459;
  NSObject *v460;
  _QWORD *v461;
  _QWORD *v462;
  _QWORD *v463;
  _QWORD *v464;
  NSObject *v465;
  _QWORD *v466;
  _QWORD *v467;
  _QWORD *v468;
  _QWORD *v469;
  NSObject *v470;
  _QWORD *v471;
  _QWORD *v472;
  _QWORD *v473;
  _QWORD *v474;
  NSObject *v475;
  _QWORD *v476;
  _QWORD *v477;
  _QWORD *v478;
  _QWORD *v479;
  NSObject *v480;
  _QWORD *v481;
  _QWORD *v482;
  _QWORD *v483;
  _QWORD *v484;
  NSObject *v485;
  _QWORD *v486;
  _QWORD *v487;
  _QWORD *v488;
  _QWORD *v489;
  NSObject *v490;
  _QWORD *v491;
  _QWORD *v492;
  _QWORD *v493;
  _QWORD *v494;
  NSObject *v495;
  _QWORD *v496;
  _QWORD *v497;
  _QWORD *v498;
  _QWORD *v499;
  NSObject *v500;
  _QWORD *v501;
  _QWORD *v502;
  _QWORD *v503;
  _QWORD *v504;
  NSObject *v505;
  _QWORD *v506;
  _QWORD *v507;
  _QWORD *v508;
  _QWORD *v509;
  NSObject *v510;
  _QWORD *v511;
  _QWORD *v512;
  _QWORD *v513;
  _QWORD *v514;
  NSObject *v515;
  _QWORD *v516;
  _QWORD *v517;
  _QWORD *v518;
  _QWORD *v519;
  NSObject *v520;
  _QWORD *v521;
  _QWORD *v522;
  _QWORD *v523;
  _QWORD *v524;
  NSObject *v525;
  _QWORD *v526;
  _QWORD *v527;
  _QWORD *v528;
  _QWORD *v529;
  NSObject *v530;
  _QWORD *v531;
  _QWORD *v532;
  _QWORD *v533;
  _QWORD *v534;
  NSObject *v535;
  _QWORD *v536;
  _QWORD *v537;
  _QWORD *v538;
  _QWORD *v539;
  NSObject *v540;
  _QWORD *v541;
  _QWORD *v542;
  _QWORD *v543;
  _QWORD *v544;
  NSObject *v545;
  _QWORD *v546;
  _QWORD *v547;
  _QWORD *v548;
  _QWORD *v549;
  NSObject *v550;
  _QWORD *v551;
  _QWORD *v552;
  _QWORD *v553;
  _QWORD *v554;
  NSObject *v555;
  _QWORD *v556;
  _QWORD *v557;
  _QWORD *v558;
  _QWORD *v559;
  NSObject *v560;
  _QWORD *v561;
  _QWORD *v562;
  _QWORD *v563;
  _QWORD *v564;
  NSObject *v565;
  _QWORD *v566;
  _QWORD *v567;
  _QWORD *v568;
  _QWORD *v569;
  NSObject *v570;
  _QWORD *v571;
  _QWORD *v572;
  _QWORD *v573;
  _QWORD *v574;
  NSObject *v575;
  _QWORD *v576;
  _QWORD *v577;
  _QWORD *v578;
  _QWORD *v579;
  NSObject *v580;
  _QWORD *v581;
  _QWORD *v582;
  _QWORD *v583;
  _QWORD *v584;
  NSObject *v585;
  _QWORD *v586;
  _QWORD *v587;
  _QWORD *v588;
  _QWORD *v589;
  NSObject *v590;
  _QWORD *v591;
  _QWORD *v592;
  _QWORD *v593;
  _QWORD *v594;
  NSObject *v595;
  NSObject *v596;
  NSObject *v597;
  _QWORD *v598;
  _QWORD *v599;
  _QWORD *v600;
  _QWORD *v601;
  NSObject *v602;
  _QWORD *v603;
  _QWORD *v604;
  _QWORD *v605;
  _QWORD *v606;
  NSObject *v607;
  _QWORD *v608;
  _QWORD *v609;
  _QWORD *v610;
  _QWORD *v611;
  NSObject *v612;
  _QWORD *v613;
  _QWORD *v614;
  _QWORD *v615;
  _QWORD *v616;
  NSObject *v617;
  _QWORD *v618;
  _QWORD *v619;
  _QWORD *v620;
  _QWORD *v621;
  NSObject *v622;
  _QWORD *v623;
  _QWORD *v624;
  _QWORD *v625;
  _QWORD *v626;
  NSObject *v627;
  _QWORD *v628;
  _QWORD *v629;
  _QWORD *v630;
  _QWORD *v631;
  NSObject *v632;
  _QWORD *v633;
  _QWORD *v634;
  _QWORD *v635;
  _QWORD *v636;
  NSObject *v637;
  _QWORD *v638;
  _QWORD *v639;
  _QWORD *v640;
  _QWORD *v641;
  NSObject *v642;
  _QWORD *v643;
  _QWORD *v644;
  _QWORD *v645;
  _QWORD *v646;
  NSObject *v647;
  _QWORD *v648;
  _QWORD *v649;
  _QWORD *v650;
  _QWORD *v651;
  NSObject *v652;
  _QWORD *v653;
  _QWORD *v654;
  _QWORD *v655;
  _QWORD *v656;
  NSObject *v657;
  _QWORD *v658;
  _QWORD *v659;
  _QWORD *v660;
  _QWORD *v661;
  NSObject *v662;
  _QWORD *v663;
  _QWORD *v664;
  _QWORD *v665;
  _QWORD *v666;
  NSObject *v667;
  _QWORD *v668;
  _QWORD *v669;
  _QWORD *v670;
  _QWORD *v671;
  NSObject *v672;
  _QWORD *v673;
  _QWORD *v674;
  _QWORD *v675;
  _QWORD *v676;
  NSObject *v677;
  _QWORD *v678;
  _QWORD *v679;
  _QWORD *v680;
  _QWORD *v681;
  NSObject *v682;
  _QWORD *v683;
  _QWORD *v684;
  _QWORD *v685;
  _QWORD *v686;
  NSObject *v687;
  _QWORD *v688;
  _QWORD *v689;
  _QWORD *v690;
  _QWORD *v691;
  char v692;
  unsigned __int8 v693;
  int v694;
  uint64_t v695;
  uint8_t buf[4];
  const char *v697;
  __int16 v698;
  int v699;
  __int16 v700;
  const char *v701;
  uint64_t v702;

  v702 = *MEMORY[0x1E0C80C00];
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v16 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 20;
      v700 = 2082;
      v701 = "Could not read indication of raster polygon changeover z existing.";
      _os_log_impl(&dword_19F029000, v16, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)":", 1);
    v18 = (_QWORD *)std::ostream::operator<<();
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" STYL Parse Error Here: ", 24);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Could not read indication of raster polygon changeover z existing.", 66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    v8 = *((unsigned __int8 *)this + 24);
    v10 = *((_QWORD *)this + 1);
    v9 = *((_QWORD *)this + 2);
    v11 = v9 + ((unint64_t)(v8 + 8) >> 3);
    v12 = v8 & 7;
    v13 = v9 + 1;
    if (v11 >= v9 + 1)
    {
      if (v8 <= 8)
        v21 = v9 + 1;
      else
        v21 = v9 + 2;
      if (v10 >= v21)
      {
        v27 = *(_QWORD *)this;
        if (*((_BYTE *)this + 24))
        {
          v28 = *(unsigned __int8 *)(v27 + v9);
          if (v13 >= v10)
            v29 = 0;
          else
            v29 = *(unsigned __int8 *)(v27 + v13);
          v15 = ((v29 & (0xFFFF << (8 - v8))) >> (8 - v8)) | ((((1 << (8 - v8)) + 255) & v28) << v8);
        }
        else
        {
          LOBYTE(v15) = *(_BYTE *)(v27 + v9);
        }
        goto LABEL_34;
      }
    }
    else
    {
      if (*((_BYTE *)this + 24))
        v14 = v9 + 1;
      else
        v14 = *((_QWORD *)this + 2);
      if (v10 < v14)
        goto LABEL_21;
      if (*((_BYTE *)this + 24))
      {
        if (v10 >= v13)
        {
          v15 = (((1 << (8 - v8)) - 1) & *(unsigned __int8 *)(*(_QWORD *)this + v9)) << v8;
LABEL_34:
          *((_QWORD *)this + 2) = v11;
          *((_BYTE *)this + 24) = v12;
          *(float *)(a1 + 36) = (float)((float)((float)v15 / 255.0) * 31.875) + 0.0;
          goto LABEL_35;
        }
      }
      else if (v10 >= v13)
      {
        LOBYTE(v15) = *(_BYTE *)(*(_QWORD *)this + v9);
        goto LABEL_34;
      }
    }
    *((_QWORD *)this + 2) = v11;
    *((_BYTE *)this + 24) = v12;
LABEL_21:
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v22 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 22;
      v700 = 2082;
      v701 = "Could not read raster polygon changeover z.";
      _os_log_impl(&dword_19F029000, v22, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)":", 1);
    v24 = (_QWORD *)std::ostream::operator<<();
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" STYL Parse Error Here: ", 24);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Could not read raster polygon changeover z.", 43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\n", 1);
    return 0;
  }
LABEL_35:
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v39 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 24;
      v700 = 2082;
      v701 = "Could not read indication of min triangle width existing.";
      _os_log_impl(&dword_19F029000, v39, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)":", 1);
    v41 = (_QWORD *)std::ostream::operator<<();
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" STYL Parse Error Here: ", 24);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Could not read indication of min triangle width existing.", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    *(_DWORD *)buf = 0;
    v30 = *((_QWORD *)this + 1);
    v31 = *((_QWORD *)this + 2);
    v32 = *((_BYTE *)this + 24);
    v33 = v31 + 5;
    if (!v32)
      v33 = v31 + 4;
    if (v30 < v33)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v34 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 26;
        v700 = 2082;
        v701 = "Could not read min line triangle width.";
        _os_log_impl(&dword_19F029000, v34, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)":", 1);
      v36 = (_QWORD *)std::ostream::operator<<();
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" STYL Parse Error Here: ", 24);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Could not read min line triangle width.", 39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"\n", 1);
      return 0;
    }
    v44 = *(_QWORD *)this;
    if (*((_BYTE *)this + 24))
    {
      v45 = 0;
      v46 = v44 + v31;
      v47 = v31 + 1;
      do
      {
        if (v47 + v45 >= v30)
          v48 = 0;
        else
          v48 = *(unsigned __int8 *)(v46 + v45 + 1);
        v49 = ((v48 & (0xFFFF << (8 - v32))) >> (8 - v32)) | ((((1 << (8 - v32)) + 255) & *(unsigned __int8 *)(v46 + v45)) << v32);
        *((_QWORD *)this + 2) = v47 + v45;
        buf[v45++] = v49;
      }
      while (v45 != 4);
      v50 = *(_DWORD *)buf;
    }
    else
    {
      v50 = *(_DWORD *)(v44 + v31);
      *((_QWORD *)this + 2) = v31 + 4;
    }
    *(_DWORD *)(a1 + 40) = v50;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v59 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 28;
      v700 = 2082;
      v701 = "Could not read indication of building changeover z existing.";
      _os_log_impl(&dword_19F029000, v59, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)":", 1);
    v61 = (_QWORD *)std::ostream::operator<<();
    v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" STYL Parse Error Here: ", 24);
    v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"Could not read indication of building changeover z existing.", 60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    v51 = *((unsigned __int8 *)this + 24);
    v53 = *((_QWORD *)this + 1);
    v52 = *((_QWORD *)this + 2);
    v54 = v52 + ((unint64_t)(v51 + 8) >> 3);
    v55 = v51 & 7;
    v56 = v52 + 1;
    if (v54 >= v52 + 1)
    {
      if (v51 <= 8)
        v64 = v52 + 1;
      else
        v64 = v52 + 2;
      if (v53 >= v64)
      {
        v70 = *(_QWORD *)this;
        if (*((_BYTE *)this + 24))
        {
          v71 = *(unsigned __int8 *)(v70 + v52);
          if (v56 >= v53)
            v72 = 0;
          else
            v72 = *(unsigned __int8 *)(v70 + v56);
          v58 = ((v72 & (0xFFFF << (8 - v51))) >> (8 - v51)) | ((((1 << (8 - v51)) + 255) & v71) << v51);
        }
        else
        {
          LOBYTE(v58) = *(_BYTE *)(v70 + v52);
        }
        goto LABEL_92;
      }
    }
    else
    {
      if (*((_BYTE *)this + 24))
        v57 = v52 + 1;
      else
        v57 = *((_QWORD *)this + 2);
      if (v53 < v57)
        goto LABEL_79;
      if (*((_BYTE *)this + 24))
      {
        if (v53 >= v56)
        {
          v58 = (((1 << (8 - v51)) - 1) & *(unsigned __int8 *)(*(_QWORD *)this + v52)) << v51;
LABEL_92:
          *((_QWORD *)this + 2) = v54;
          *((_BYTE *)this + 24) = v55;
          *(float *)(a1 + 44) = (float)((float)((float)v58 / 255.0) * 31.875) + 0.0;
          *(_BYTE *)a1 = 1;
          goto LABEL_93;
        }
      }
      else if (v53 >= v56)
      {
        LOBYTE(v58) = *(_BYTE *)(*(_QWORD *)this + v52);
        goto LABEL_92;
      }
    }
    *((_QWORD *)this + 2) = v54;
    *((_BYTE *)this + 24) = v55;
LABEL_79:
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v65 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 30;
      v700 = 2082;
      v701 = "Could not read building changeover z.";
      _os_log_impl(&dword_19F029000, v65, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)":", 1);
    v67 = (_QWORD *)std::ostream::operator<<();
    v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" STYL Parse Error Here: ", 24);
    v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Could not read building changeover z.", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"\n", 1);
    return 0;
  }
LABEL_93:
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v81 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 33;
      v700 = 2082;
      v701 = "Could not read indication of min traffic type (unknown) z existing.";
      _os_log_impl(&dword_19F029000, v81, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)":", 1);
    v83 = (_QWORD *)std::ostream::operator<<();
    v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" STYL Parse Error Here: ", 24);
    v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"Could not read indication of min traffic type (unknown) z existing.", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    v73 = *((unsigned __int8 *)this + 24);
    v75 = *((_QWORD *)this + 1);
    v74 = *((_QWORD *)this + 2);
    v76 = v74 + ((unint64_t)(v73 + 8) >> 3);
    v77 = v73 & 7;
    v78 = v74 + 1;
    if (v76 >= v74 + 1)
    {
      if (v73 <= 8)
        v86 = v74 + 1;
      else
        v86 = v74 + 2;
      if (v75 >= v86)
      {
        v92 = *(_QWORD *)this;
        if (*((_BYTE *)this + 24))
        {
          v93 = *(unsigned __int8 *)(v92 + v74);
          if (v78 >= v75)
            v94 = 0;
          else
            v94 = *(unsigned __int8 *)(v92 + v78);
          v80 = ((v94 & (0xFFFF << (8 - v73))) >> (8 - v73)) | ((((1 << (8 - v73)) + 255) & v93) << v73);
        }
        else
        {
          LOBYTE(v80) = *(_BYTE *)(v92 + v74);
        }
        goto LABEL_126;
      }
    }
    else
    {
      if (*((_BYTE *)this + 24))
        v79 = v74 + 1;
      else
        v79 = *((_QWORD *)this + 2);
      if (v75 < v79)
        goto LABEL_113;
      if (*((_BYTE *)this + 24))
      {
        if (v75 >= v78)
        {
          v80 = (((1 << (8 - v73)) - 1) & *(unsigned __int8 *)(*(_QWORD *)this + v74)) << v73;
LABEL_126:
          *((_QWORD *)this + 2) = v76;
          *((_BYTE *)this + 24) = v77;
          *(float *)(a1 + 48) = (float)((float)((float)v80 / 255.0) * 31.875) + 0.0;
          goto LABEL_127;
        }
      }
      else if (v75 >= v78)
      {
        LOBYTE(v80) = *(_BYTE *)(*(_QWORD *)this + v74);
        goto LABEL_126;
      }
    }
    *((_QWORD *)this + 2) = v76;
    *((_BYTE *)this + 24) = v77;
LABEL_113:
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v87 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 35;
      v700 = 2082;
      v701 = "Could not read min traffic type (unknown) z.";
      _os_log_impl(&dword_19F029000, v87, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)":", 1);
    v89 = (_QWORD *)std::ostream::operator<<();
    v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)" STYL Parse Error Here: ", 24);
    v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"Could not read min traffic type (unknown) z.", 44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"\n", 1);
    return 0;
  }
LABEL_127:
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v100 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 37;
      v700 = 2082;
      v701 = "Could not read indication of min traffic type (accident) z existing.";
      _os_log_impl(&dword_19F029000, v100, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)":", 1);
    v102 = (_QWORD *)std::ostream::operator<<();
    v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)" STYL Parse Error Here: ", 24);
    v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"Could not read indication of min traffic type (accident) z existing.", 68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v110 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 39;
        v700 = 2082;
        v701 = "Could not read min traffic type (accident) z.";
        _os_log_impl(&dword_19F029000, v110, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v111 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)":", 1);
      v112 = (_QWORD *)std::ostream::operator<<();
      v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)" STYL Parse Error Here: ", 24);
      v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)"Could not read min traffic type (accident) z.", 45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 52) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v105 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 41;
      v700 = 2082;
      v701 = "Could not read indication of min traffic type (construction) z existing.";
      _os_log_impl(&dword_19F029000, v105, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)":", 1);
    v107 = (_QWORD *)std::ostream::operator<<();
    v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)" STYL Parse Error Here: ", 24);
    v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"Could not read indication of min traffic type (construction) z existing.", 72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v120 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 43;
        v700 = 2082;
        v701 = "Could not read min traffic type (construction) z.";
        _os_log_impl(&dword_19F029000, v120, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v121 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)":", 1);
      v122 = (_QWORD *)std::ostream::operator<<();
      v123 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)" STYL Parse Error Here: ", 24);
      v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)"Could not read min traffic type (construction) z.", 49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 56) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v115 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 45;
      v700 = 2082;
      v701 = "Could not read indication of min traffic type (road closure) z existing.";
      _os_log_impl(&dword_19F029000, v115, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)":", 1);
    v117 = (_QWORD *)std::ostream::operator<<();
    v118 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)" STYL Parse Error Here: ", 24);
    v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)"Could not read indication of min traffic type (road closure) z existing.", 72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v130 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 47;
        v700 = 2082;
        v701 = "Could not read min traffic type (road closure) z.";
        _os_log_impl(&dword_19F029000, v130, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)":", 1);
      v132 = (_QWORD *)std::ostream::operator<<();
      v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)" STYL Parse Error Here: ", 24);
      v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)"Could not read min traffic type (road closure) z.", 49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 60) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v125 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 49;
      v700 = 2082;
      v701 = "Could not read indication of min traffic type (event) z existing.";
      _os_log_impl(&dword_19F029000, v125, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)":", 1);
    v127 = (_QWORD *)std::ostream::operator<<();
    v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)" STYL Parse Error Here: ", 24);
    v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)"Could not read indication of min traffic type (event) z existing.", 65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v140 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 51;
        v700 = 2082;
        v701 = "Could not read min traffic type (event) z.";
        _os_log_impl(&dword_19F029000, v140, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v141 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)":", 1);
      v142 = (_QWORD *)std::ostream::operator<<();
      v143 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)" STYL Parse Error Here: ", 24);
      v144 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, (uint64_t)"Could not read min traffic type (event) z.", 42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 64) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v135 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 53;
      v700 = 2082;
      v701 = "Could not read indication of min traffic type (hazard) z existing.";
      _os_log_impl(&dword_19F029000, v135, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v136 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)":", 1);
    v137 = (_QWORD *)std::ostream::operator<<();
    v138 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)" STYL Parse Error Here: ", 24);
    v139 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)"Could not read indication of min traffic type (hazard) z existing.", 66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v150 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 55;
        v700 = 2082;
        v701 = "Could not read min traffic type (hazard) z.";
        _os_log_impl(&dword_19F029000, v150, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v151 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v151, (uint64_t)":", 1);
      v152 = (_QWORD *)std::ostream::operator<<();
      v153 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v152, (uint64_t)" STYL Parse Error Here: ", 24);
      v154 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153, (uint64_t)"Could not read min traffic type (hazard) z.", 43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 68) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v145 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 57;
      v700 = 2082;
      v701 = "Could not read indication of min traffic type (lane closure) z existing.";
      _os_log_impl(&dword_19F029000, v145, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v146 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v146, (uint64_t)":", 1);
    v147 = (_QWORD *)std::ostream::operator<<();
    v148 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, (uint64_t)" STYL Parse Error Here: ", 24);
    v149 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148, (uint64_t)"Could not read indication of min traffic type (lane closure) z existing.", 72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v149, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v160 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 59;
        v700 = 2082;
        v701 = "Could not read min traffic type (lane closure) z.";
        _os_log_impl(&dword_19F029000, v160, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v161 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, (uint64_t)":", 1);
      v162 = (_QWORD *)std::ostream::operator<<();
      v163 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v162, (uint64_t)" STYL Parse Error Here: ", 24);
      v164 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Could not read min traffic type (lane closure) z.", 49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 72) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v155 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 61;
      v700 = 2082;
      v701 = "Could not read indication of min traffic type (ramp closure) z existing.";
      _os_log_impl(&dword_19F029000, v155, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v156 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)":", 1);
    v157 = (_QWORD *)std::ostream::operator<<();
    v158 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v157, (uint64_t)" STYL Parse Error Here: ", 24);
    v159 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)"Could not read indication of min traffic type (ramp closure) z existing.", 72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v170 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 63;
        v700 = 2082;
        v701 = "Could not read min traffic type (ramp closure) z.";
        _os_log_impl(&dword_19F029000, v170, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v171 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v171, (uint64_t)":", 1);
      v172 = (_QWORD *)std::ostream::operator<<();
      v173 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v172, (uint64_t)" STYL Parse Error Here: ", 24);
      v174 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v173, (uint64_t)"Could not read min traffic type (ramp closure) z.", 49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v174, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 76) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v165 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 65;
      v700 = 2082;
      v701 = "Could not read indication of realistic night brightness existing.";
      _os_log_impl(&dword_19F029000, v165, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v166 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, (uint64_t)":", 1);
    v167 = (_QWORD *)std::ostream::operator<<();
    v168 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)" STYL Parse Error Here: ", 24);
    v169 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v168, (uint64_t)"Could not read indication of realistic night brightness existing.", 65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v169, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 0xAu, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v180 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 67;
        v700 = 2082;
        v701 = "Could not read realistic night brightness.";
        _os_log_impl(&dword_19F029000, v180, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v181 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, (uint64_t)":", 1);
      v182 = (_QWORD *)std::ostream::operator<<();
      v183 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v182, (uint64_t)" STYL Parse Error Here: ", 24);
      v184 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183, (uint64_t)"Could not read realistic night brightness.", 42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v184, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 84) = (float)v697 / 1023.0;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v175 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 69;
      v700 = 2082;
      v701 = "Could not read indication of shield night brightness existing.";
      _os_log_impl(&dword_19F029000, v175, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v176 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, (uint64_t)":", 1);
    v177 = (_QWORD *)std::ostream::operator<<();
    v178 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)" STYL Parse Error Here: ", 24);
    v179 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v178, (uint64_t)"Could not read indication of shield night brightness existing.", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v179, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 0xAu, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v190 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 71;
        v700 = 2082;
        v701 = "Could not read shield night brightness.";
        _os_log_impl(&dword_19F029000, v190, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v191 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v191, (uint64_t)":", 1);
      v192 = (_QWORD *)std::ostream::operator<<();
      v193 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v192, (uint64_t)" STYL Parse Error Here: ", 24);
      v194 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v193, (uint64_t)"Could not read shield night brightness.", 39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v194, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 88) = (float)v697 / 1023.0;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v185 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 73;
      v700 = 2082;
      v701 = "Could not read indication of realistic shield night brightness existing.";
      _os_log_impl(&dword_19F029000, v185, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v186 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v186, (uint64_t)":", 1);
    v187 = (_QWORD *)std::ostream::operator<<();
    v188 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v187, (uint64_t)" STYL Parse Error Here: ", 24);
    v189 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"Could not read indication of realistic shield night brightness existing.", 72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v189, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 0xAu, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v200 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 75;
        v700 = 2082;
        v701 = "Could not read realistic shieldnight brightness.";
        _os_log_impl(&dword_19F029000, v200, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v201 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v201, (uint64_t)":", 1);
      v202 = (_QWORD *)std::ostream::operator<<();
      v203 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v202, (uint64_t)" STYL Parse Error Here: ", 24);
      v204 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v203, (uint64_t)"Could not read realistic shieldnight brightness.", 48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v204, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 92) = (float)v697 / 1023.0;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v195 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 77;
      v700 = 2082;
      v701 = "Could not read indication of background rasters zoom range existing.";
      _os_log_impl(&dword_19F029000, v195, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v196 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v196, (uint64_t)":", 1);
    v197 = (_QWORD *)std::ostream::operator<<();
    v198 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)" STYL Parse Error Here: ", 24);
    v199 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v198, (uint64_t)"Could not read indication of background rasters zoom range existing.", 68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v205 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 79;
        v700 = 2082;
        v701 = "Could not read background rasters min zoom.";
        _os_log_impl(&dword_19F029000, v205, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v206 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v206, (uint64_t)":", 1);
      v207 = (_QWORD *)std::ostream::operator<<();
      v208 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v207, (uint64_t)" STYL Parse Error Here: ", 24);
      v209 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v208, (uint64_t)"Could not read background rasters min zoom.", 43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v209, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 96) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v215 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 80;
        v700 = 2082;
        v701 = "Could not read background rasters max zoom.";
        _os_log_impl(&dword_19F029000, v215, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v216 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v216, (uint64_t)":", 1);
      v217 = (_QWORD *)std::ostream::operator<<();
      v218 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v217, (uint64_t)" STYL Parse Error Here: ", 24);
      v219 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v218, (uint64_t)"Could not read background rasters max zoom.", 43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 100) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(_BYTE *)(a1 + 1) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v210 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 83;
      v700 = 2082;
      v701 = "Could not read indication of standard rasters zoom range existing.";
      _os_log_impl(&dword_19F029000, v210, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v211 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v211, (uint64_t)":", 1);
    v212 = (_QWORD *)std::ostream::operator<<();
    v213 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v212, (uint64_t)" STYL Parse Error Here: ", 24);
    v214 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v213, (uint64_t)"Could not read indication of standard rasters zoom range existing.", 66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v214, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v220 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 85;
        v700 = 2082;
        v701 = "Could not read standard rasters min zoom.";
        _os_log_impl(&dword_19F029000, v220, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v221 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v221, (uint64_t)":", 1);
      v222 = (_QWORD *)std::ostream::operator<<();
      v223 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v222, (uint64_t)" STYL Parse Error Here: ", 24);
      v224 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"Could not read standard rasters min zoom.", 41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v224, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 104) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v230 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 86;
        v700 = 2082;
        v701 = "Could not read standard rasters max zoom.";
        _os_log_impl(&dword_19F029000, v230, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v231 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v231, (uint64_t)":", 1);
      v232 = (_QWORD *)std::ostream::operator<<();
      v233 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v232, (uint64_t)" STYL Parse Error Here: ", 24);
      v234 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"Could not read standard rasters max zoom.", 41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 108) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(_BYTE *)(a1 + 2) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v225 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 89;
      v700 = 2082;
      v701 = "Could not read indication of satellite rasters zoom range existing.";
      _os_log_impl(&dword_19F029000, v225, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v226 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v226, (uint64_t)":", 1);
    v227 = (_QWORD *)std::ostream::operator<<();
    v228 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v227, (uint64_t)" STYL Parse Error Here: ", 24);
    v229 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v228, (uint64_t)"Could not read indication of satellite rasters zoom range existing.", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v229, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v235 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 91;
        v700 = 2082;
        v701 = "Could not read satellite rasters min zoom.";
        _os_log_impl(&dword_19F029000, v235, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v236 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v236, (uint64_t)":", 1);
      v237 = (_QWORD *)std::ostream::operator<<();
      v238 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v237, (uint64_t)" STYL Parse Error Here: ", 24);
      v239 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v238, (uint64_t)"Could not read satellite rasters min zoom.", 42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v239, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 112) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v245 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 92;
        v700 = 2082;
        v701 = "Could not read satellite rasters max zoom.";
        _os_log_impl(&dword_19F029000, v245, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v246 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v246, (uint64_t)":", 1);
      v247 = (_QWORD *)std::ostream::operator<<();
      v248 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v247, (uint64_t)" STYL Parse Error Here: ", 24);
      v249 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v248, (uint64_t)"Could not read satellite rasters max zoom.", 42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v249, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 116) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(_BYTE *)(a1 + 3) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v240 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 95;
      v700 = 2082;
      v701 = "Could not read indication of hybrid rasters zoom range existing.";
      _os_log_impl(&dword_19F029000, v240, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v241 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v241, (uint64_t)":", 1);
    v242 = (_QWORD *)std::ostream::operator<<();
    v243 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v242, (uint64_t)" STYL Parse Error Here: ", 24);
    v244 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v243, (uint64_t)"Could not read indication of hybrid rasters zoom range existing.", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v244, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v250 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 97;
        v700 = 2082;
        v701 = "Could not read hybrid rasters min zoom.";
        _os_log_impl(&dword_19F029000, v250, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v251 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v251, (uint64_t)":", 1);
      v252 = (_QWORD *)std::ostream::operator<<();
      v253 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v252, (uint64_t)" STYL Parse Error Here: ", 24);
      v254 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v253, (uint64_t)"Could not read hybrid rasters min zoom.", 39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v254, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 120) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v260 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 98;
        v700 = 2082;
        v701 = "Could not read hybrid rasters max zoom.";
        _os_log_impl(&dword_19F029000, v260, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v261 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v261, (uint64_t)":", 1);
      v262 = (_QWORD *)std::ostream::operator<<();
      v263 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v262, (uint64_t)" STYL Parse Error Here: ", 24);
      v264 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v263, (uint64_t)"Could not read hybrid rasters max zoom.", 39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 124) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(_BYTE *)(a1 + 4) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v255 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 101;
      v700 = 2082;
      v701 = "Could not read indication of ground cover zoom range existing.";
      _os_log_impl(&dword_19F029000, v255, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v256 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v256, (uint64_t)":", 1);
    v257 = (_QWORD *)std::ostream::operator<<();
    v258 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v257, (uint64_t)" STYL Parse Error Here: ", 24);
    v259 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v258, (uint64_t)"Could not read indication of ground cover zoom range existing.", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v259, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v265 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 103;
        v700 = 2082;
        v701 = "Could not read ground cover min zoom.";
        _os_log_impl(&dword_19F029000, v265, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v266 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v266, (uint64_t)":", 1);
      v267 = (_QWORD *)std::ostream::operator<<();
      v268 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v267, (uint64_t)" STYL Parse Error Here: ", 24);
      v269 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v268, (uint64_t)"Could not read ground cover min zoom.", 37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v269, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 128) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v275 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 104;
        v700 = 2082;
        v701 = "Could not read ground cover max zoom.";
        _os_log_impl(&dword_19F029000, v275, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v276 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v276, (uint64_t)":", 1);
      v277 = (_QWORD *)std::ostream::operator<<();
      v278 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v277, (uint64_t)" STYL Parse Error Here: ", 24);
      v279 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v278, (uint64_t)"Could not read ground cover max zoom.", 37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v279, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 132) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(_BYTE *)(a1 + 5) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v270 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 107;
      v700 = 2082;
      v701 = "Could not read indication of raster traffic zoom range existing.";
      _os_log_impl(&dword_19F029000, v270, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v271 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v271, (uint64_t)":", 1);
    v272 = (_QWORD *)std::ostream::operator<<();
    v273 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v272, (uint64_t)" STYL Parse Error Here: ", 24);
    v274 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v273, (uint64_t)"Could not read indication of raster traffic zoom range existing.", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v274, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v280 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 109;
        v700 = 2082;
        v701 = "Could not read raster traffic min zoom.";
        _os_log_impl(&dword_19F029000, v280, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v281 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v281, (uint64_t)":", 1);
      v282 = (_QWORD *)std::ostream::operator<<();
      v283 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v282, (uint64_t)" STYL Parse Error Here: ", 24);
      v284 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v283, (uint64_t)"Could not read raster traffic min zoom.", 39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v284, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 136) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v290 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 110;
        v700 = 2082;
        v701 = "Could not read raster traffic max zoom.";
        _os_log_impl(&dword_19F029000, v290, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v291 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v291, (uint64_t)":", 1);
      v292 = (_QWORD *)std::ostream::operator<<();
      v293 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v292, (uint64_t)" STYL Parse Error Here: ", 24);
      v294 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v293, (uint64_t)"Could not read raster traffic max zoom.", 39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v294, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 140) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(_BYTE *)(a1 + 6) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v285 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 113;
      v700 = 2082;
      v701 = "Could not read indication of vector polygons zoom range existing.";
      _os_log_impl(&dword_19F029000, v285, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v286 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v286, (uint64_t)":", 1);
    v287 = (_QWORD *)std::ostream::operator<<();
    v288 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v287, (uint64_t)" STYL Parse Error Here: ", 24);
    v289 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v288, (uint64_t)"Could not read indication of vector polygons zoom range existing.", 65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v289, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v295 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 115;
        v700 = 2082;
        v701 = "Could not read vector polygons min zoom.";
        _os_log_impl(&dword_19F029000, v295, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v296 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v296, (uint64_t)":", 1);
      v297 = (_QWORD *)std::ostream::operator<<();
      v298 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v297, (uint64_t)" STYL Parse Error Here: ", 24);
      v299 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v298, (uint64_t)"Could not read vector polygons min zoom.", 40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v299, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 144) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v305 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 116;
        v700 = 2082;
        v701 = "Could not read vector polygons max zoom.";
        _os_log_impl(&dword_19F029000, v305, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v306 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v306, (uint64_t)":", 1);
      v307 = (_QWORD *)std::ostream::operator<<();
      v308 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v307, (uint64_t)" STYL Parse Error Here: ", 24);
      v309 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v308, (uint64_t)"Could not read vector polygons max zoom.", 40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v309, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 148) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(_BYTE *)(a1 + 7) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v300 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 119;
      v700 = 2082;
      v701 = "Could not read indication of vector roads zoom range existing.";
      _os_log_impl(&dword_19F029000, v300, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v301 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v301, (uint64_t)":", 1);
    v302 = (_QWORD *)std::ostream::operator<<();
    v303 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v302, (uint64_t)" STYL Parse Error Here: ", 24);
    v304 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v303, (uint64_t)"Could not read indication of vector roads zoom range existing.", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v304, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v310 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 121;
        v700 = 2082;
        v701 = "Could not read vector roads min zoom.";
        _os_log_impl(&dword_19F029000, v310, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v311 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v311, (uint64_t)":", 1);
      v312 = (_QWORD *)std::ostream::operator<<();
      v313 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v312, (uint64_t)" STYL Parse Error Here: ", 24);
      v314 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v313, (uint64_t)"Could not read vector roads min zoom.", 37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v314, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 152) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v320 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 122;
        v700 = 2082;
        v701 = "Could not read vector roads max zoom.";
        _os_log_impl(&dword_19F029000, v320, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v321 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v321, (uint64_t)":", 1);
      v322 = (_QWORD *)std::ostream::operator<<();
      v323 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v322, (uint64_t)" STYL Parse Error Here: ", 24);
      v324 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v323, (uint64_t)"Could not read vector roads max zoom.", 37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v324, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 156) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(_BYTE *)(a1 + 8) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v315 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 125;
      v700 = 2082;
      v701 = "Could not read indication of vector land cover zoom range existing.";
      _os_log_impl(&dword_19F029000, v315, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v316 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v316, (uint64_t)":", 1);
    v317 = (_QWORD *)std::ostream::operator<<();
    v318 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v317, (uint64_t)" STYL Parse Error Here: ", 24);
    v319 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v318, (uint64_t)"Could not read indication of vector land cover zoom range existing.", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v319, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v325 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 127;
        v700 = 2082;
        v701 = "Could not read vector land cover min zoom.";
        _os_log_impl(&dword_19F029000, v325, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v326 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v326, (uint64_t)":", 1);
      v327 = (_QWORD *)std::ostream::operator<<();
      v328 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v327, (uint64_t)" STYL Parse Error Here: ", 24);
      v329 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v328, (uint64_t)"Could not read vector land cover min zoom.", 42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v329, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 160) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v335 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 128;
        v700 = 2082;
        v701 = "Could not read vector land cover max zoom.";
        _os_log_impl(&dword_19F029000, v335, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v336 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v336, (uint64_t)":", 1);
      v337 = (_QWORD *)std::ostream::operator<<();
      v338 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v337, (uint64_t)" STYL Parse Error Here: ", 24);
      v339 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v338, (uint64_t)"Could not read vector land cover max zoom.", 42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v339, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 164) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(_BYTE *)(a1 + 9) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v330 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 131;
      v700 = 2082;
      v701 = "Could not read indication of vector buildings zoom range existing.";
      _os_log_impl(&dword_19F029000, v330, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v331 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v331, (uint64_t)":", 1);
    v332 = (_QWORD *)std::ostream::operator<<();
    v333 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v332, (uint64_t)" STYL Parse Error Here: ", 24);
    v334 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v333, (uint64_t)"Could not read indication of vector buildings zoom range existing.", 66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v334, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v340 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 133;
        v700 = 2082;
        v701 = "Could not read vector buildings min zoom.";
        _os_log_impl(&dword_19F029000, v340, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v341 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v341, (uint64_t)":", 1);
      v342 = (_QWORD *)std::ostream::operator<<();
      v343 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v342, (uint64_t)" STYL Parse Error Here: ", 24);
      v344 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v343, (uint64_t)"Could not read vector buildings min zoom.", 41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v344, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 168) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v350 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 134;
        v700 = 2082;
        v701 = "Could not read vector buildings max zoom.";
        _os_log_impl(&dword_19F029000, v350, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v351 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v351, (uint64_t)":", 1);
      v352 = (_QWORD *)std::ostream::operator<<();
      v353 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v352, (uint64_t)" STYL Parse Error Here: ", 24);
      v354 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v353, (uint64_t)"Could not read vector buildings max zoom.", 41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v354, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 172) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(_BYTE *)(a1 + 10) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v345 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 137;
      v700 = 2082;
      v701 = "Could not read indication of vector PoIs zoom range existing.";
      _os_log_impl(&dword_19F029000, v345, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v346 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v346, (uint64_t)":", 1);
    v347 = (_QWORD *)std::ostream::operator<<();
    v348 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v347, (uint64_t)" STYL Parse Error Here: ", 24);
    v349 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v348, (uint64_t)"Could not read indication of vector PoIs zoom range existing.", 61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v349, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v355 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 139;
        v700 = 2082;
        v701 = "Could not read vector PoIs min zoom.";
        _os_log_impl(&dword_19F029000, v355, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v356 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v356, (uint64_t)":", 1);
      v357 = (_QWORD *)std::ostream::operator<<();
      v358 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v357, (uint64_t)" STYL Parse Error Here: ", 24);
      v359 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v358, (uint64_t)"Could not read vector PoIs min zoom.", 36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v359, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 176) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v365 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 140;
        v700 = 2082;
        v701 = "Could not read vector PoIs max zoom.";
        _os_log_impl(&dword_19F029000, v365, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v366 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v366, (uint64_t)":", 1);
      v367 = (_QWORD *)std::ostream::operator<<();
      v368 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v367, (uint64_t)" STYL Parse Error Here: ", 24);
      v369 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v368, (uint64_t)"Could not read vector PoIs max zoom.", 36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v369, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 180) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(_BYTE *)(a1 + 11) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v360 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 143;
      v700 = 2082;
      v701 = "Could not read indication of vector traffic zoom range existing.";
      _os_log_impl(&dword_19F029000, v360, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v361 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v361, (uint64_t)":", 1);
    v362 = (_QWORD *)std::ostream::operator<<();
    v363 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v362, (uint64_t)" STYL Parse Error Here: ", 24);
    v364 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v363, (uint64_t)"Could not read indication of vector traffic zoom range existing.", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v364, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v370 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 145;
        v700 = 2082;
        v701 = "Could not read vector traffic min zoom.";
        _os_log_impl(&dword_19F029000, v370, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      goto LABEL_632;
    }
    *(float *)(a1 + 184) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v380 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 146;
        v700 = 2082;
        v701 = "Could not read vector traffic max zoom.";
        _os_log_impl(&dword_19F029000, v380, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
LABEL_642:
      v381 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v381, (uint64_t)":", 1);
      v382 = (_QWORD *)std::ostream::operator<<();
      v383 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v382, (uint64_t)" STYL Parse Error Here: ", 24);
      v384 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v383, (uint64_t)"Could not read vector traffic max zoom.", 39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v384, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 188) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(_BYTE *)(a1 + 12) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v375 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 149;
      v700 = 2082;
      v701 = "Could not read indication of tile limit satellite scale existing.";
      _os_log_impl(&dword_19F029000, v375, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v376 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v376, (uint64_t)":", 1);
    v377 = (_QWORD *)std::ostream::operator<<();
    v378 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v377, (uint64_t)" STYL Parse Error Here: ", 24);
    v379 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v378, (uint64_t)"Could not read indication of tile limit satellite scale existing.", 65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v379, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v390 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 151;
        v700 = 2082;
        v701 = "Could not read tile limit satellite scale.";
        _os_log_impl(&dword_19F029000, v390, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v391 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v391, (uint64_t)":", 1);
      v392 = (_QWORD *)std::ostream::operator<<();
      v393 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v392, (uint64_t)" STYL Parse Error Here: ", 24);
      v394 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v393, (uint64_t)"Could not read tile limit satellite scale.", 42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v394, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 200) = v694;
    *(_BYTE *)(a1 + 14) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v385 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 154;
      v700 = 2082;
      v701 = "Could not read indication of global LoD scale existing.";
      _os_log_impl(&dword_19F029000, v385, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v386 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v386, (uint64_t)":", 1);
    v387 = (_QWORD *)std::ostream::operator<<();
    v388 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v387, (uint64_t)" STYL Parse Error Here: ", 24);
    v389 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v388, (uint64_t)"Could not read indication of global LoD scale existing.", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v389, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v400 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 156;
        v700 = 2082;
        v701 = "Could not read global LoD scale.";
        _os_log_impl(&dword_19F029000, v400, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v401 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v401, (uint64_t)":", 1);
      v402 = (_QWORD *)std::ostream::operator<<();
      v403 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v402, (uint64_t)" STYL Parse Error Here: ", 24);
      v404 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v403, (uint64_t)"Could not read global LoD scale.", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v404, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 204) = v694;
    *(_BYTE *)(a1 + 15) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v395 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 159;
      v700 = 2082;
      v701 = "Could not read indication of LoD offset existing.";
      _os_log_impl(&dword_19F029000, v395, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v396 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v396, (uint64_t)":", 1);
    v397 = (_QWORD *)std::ostream::operator<<();
    v398 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v397, (uint64_t)" STYL Parse Error Here: ", 24);
    v399 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v398, (uint64_t)"Could not read indication of LoD offset existing.", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v399, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v410 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 161;
        v700 = 2082;
        v701 = "Could not read LoD offset.";
        _os_log_impl(&dword_19F029000, v410, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v411 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v411, (uint64_t)":", 1);
      v412 = (_QWORD *)std::ostream::operator<<();
      v413 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v412, (uint64_t)" STYL Parse Error Here: ", 24);
      v414 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v413, (uint64_t)"Could not read LoD offset.", 26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v414, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 208) = v694;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v405 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 163;
      v700 = 2082;
      v701 = "Could not read indication of label icon scale existing.";
      _os_log_impl(&dword_19F029000, v405, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v406 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v406, (uint64_t)":", 1);
    v407 = (_QWORD *)std::ostream::operator<<();
    v408 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v407, (uint64_t)" STYL Parse Error Here: ", 24);
    v409 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v408, (uint64_t)"Could not read indication of label icon scale existing.", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v409, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v420 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 165;
        v700 = 2082;
        v701 = "Could not read label icon scale.";
        _os_log_impl(&dword_19F029000, v420, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v421 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v421, (uint64_t)":", 1);
      v422 = (_QWORD *)std::ostream::operator<<();
      v423 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v422, (uint64_t)" STYL Parse Error Here: ", 24);
      v424 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v423, (uint64_t)"Could not read label icon scale.", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v424, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 216) = v694;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v415 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 167;
      v700 = 2082;
      v701 = "Could not read indication of nav label road sign height existing.";
      _os_log_impl(&dword_19F029000, v415, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v416 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v416, (uint64_t)":", 1);
    v417 = (_QWORD *)std::ostream::operator<<();
    v418 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v417, (uint64_t)" STYL Parse Error Here: ", 24);
    v419 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v418, (uint64_t)"Could not read indication of nav label road sign height existing.", 65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v419, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v430 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 169;
        v700 = 2082;
        v701 = "Could not read nav label road sign height.";
        _os_log_impl(&dword_19F029000, v430, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v431 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v431, (uint64_t)":", 1);
      v432 = (_QWORD *)std::ostream::operator<<();
      v433 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v432, (uint64_t)" STYL Parse Error Here: ", 24);
      v434 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v433, (uint64_t)"Could not read nav label road sign height.", 42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v434, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 220) = v694;
    *(_BYTE *)(a1 + 16) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v425 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 172;
      v700 = 2082;
      v701 = "Could not read indication of nav label road sign height (small) existing.";
      _os_log_impl(&dword_19F029000, v425, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v426 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v426, (uint64_t)":", 1);
    v427 = (_QWORD *)std::ostream::operator<<();
    v428 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v427, (uint64_t)" STYL Parse Error Here: ", 24);
    v429 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v428, (uint64_t)"Could not read indication of nav label road sign height (small) existing.", 73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v429, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v440 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 174;
        v700 = 2082;
        v701 = "Could not read nav label road sign height (small).";
        _os_log_impl(&dword_19F029000, v440, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v441 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v441, (uint64_t)":", 1);
      v442 = (_QWORD *)std::ostream::operator<<();
      v443 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v442, (uint64_t)" STYL Parse Error Here: ", 24);
      v444 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v443, (uint64_t)"Could not read nav label road sign height (small).", 50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v444, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 224) = v694;
    *(_BYTE *)(a1 + 17) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v435 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 177;
      v700 = 2082;
      v701 = "Could not read indication of nav label road sign height (medium) existing.";
      _os_log_impl(&dword_19F029000, v435, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v436 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v436, (uint64_t)":", 1);
    v437 = (_QWORD *)std::ostream::operator<<();
    v438 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v437, (uint64_t)" STYL Parse Error Here: ", 24);
    v439 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v438, (uint64_t)"Could not read indication of nav label road sign height (medium) existing.", 74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v439, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v450 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 179;
        v700 = 2082;
        v701 = "Could not read nav label road sign height (medium).";
        _os_log_impl(&dword_19F029000, v450, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v451 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v451, (uint64_t)":", 1);
      v452 = (_QWORD *)std::ostream::operator<<();
      v453 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v452, (uint64_t)" STYL Parse Error Here: ", 24);
      v454 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v453, (uint64_t)"Could not read nav label road sign height (medium).", 51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v454, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 228) = v694;
    *(_BYTE *)(a1 + 18) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v445 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 182;
      v700 = 2082;
      v701 = "Could not read indication of nav label road sign height (large) existing.";
      _os_log_impl(&dword_19F029000, v445, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v446 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v446, (uint64_t)":", 1);
    v447 = (_QWORD *)std::ostream::operator<<();
    v448 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v447, (uint64_t)" STYL Parse Error Here: ", 24);
    v449 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v448, (uint64_t)"Could not read indication of nav label road sign height (large) existing.", 73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v449, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v460 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 184;
        v700 = 2082;
        v701 = "Could not read nav label road sign height (large).";
        _os_log_impl(&dword_19F029000, v460, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v461 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v461, (uint64_t)":", 1);
      v462 = (_QWORD *)std::ostream::operator<<();
      v463 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v462, (uint64_t)" STYL Parse Error Here: ", 24);
      v464 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v463, (uint64_t)"Could not read nav label road sign height (large).", 50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v464, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 232) = v694;
    *(_BYTE *)(a1 + 19) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v455 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 187;
      v700 = 2082;
      v701 = "Could not read indication of nav label road sign height (extra large) existing.";
      _os_log_impl(&dword_19F029000, v455, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v456 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v456, (uint64_t)":", 1);
    v457 = (_QWORD *)std::ostream::operator<<();
    v458 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v457, (uint64_t)" STYL Parse Error Here: ", 24);
    v459 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v458, (uint64_t)"Could not read indication of nav label road sign height (extra large) existing.", 79);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v459, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v470 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 189;
        v700 = 2082;
        v701 = "Could not read nav label road sign height (extra large).";
        _os_log_impl(&dword_19F029000, v470, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v471 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v471, (uint64_t)":", 1);
      v472 = (_QWORD *)std::ostream::operator<<();
      v473 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v472, (uint64_t)" STYL Parse Error Here: ", 24);
      v474 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v473, (uint64_t)"Could not read nav label road sign height (extra large).", 56);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v474, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 236) = v694;
    *(_BYTE *)(a1 + 20) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v465 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 192;
      v700 = 2082;
      v701 = "Could not read indication of nav label road sign height (extra extra large) existing.";
      _os_log_impl(&dword_19F029000, v465, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v466 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v466, (uint64_t)":", 1);
    v467 = (_QWORD *)std::ostream::operator<<();
    v468 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v467, (uint64_t)" STYL Parse Error Here: ", 24);
    v469 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v468, (uint64_t)"Could not read indication of nav label road sign height (extra extra large) existing.", 85);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v469, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v480 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 194;
        v700 = 2082;
        v701 = "Could not read nav label road sign height (extra extra large).";
        _os_log_impl(&dword_19F029000, v480, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v481 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v481, (uint64_t)":", 1);
      v482 = (_QWORD *)std::ostream::operator<<();
      v483 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v482, (uint64_t)" STYL Parse Error Here: ", 24);
      v484 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v483, (uint64_t)"Could not read nav label road sign height (extra extra large).", 62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v484, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 240) = v694;
    *(_BYTE *)(a1 + 21) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v475 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 197;
      v700 = 2082;
      v701 = "Could not read indication of nav label max road signs existing.";
      _os_log_impl(&dword_19F029000, v475, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v476 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v476, (uint64_t)":", 1);
    v477 = (_QWORD *)std::ostream::operator<<();
    v478 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v477, (uint64_t)" STYL Parse Error Here: ", 24);
    v479 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v478, (uint64_t)"Could not read indication of nav label max road signs existing.", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v479, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readVarInt((uint64_t)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v490 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 199;
        v700 = 2082;
        v701 = "Could not read nav label max road signs.";
        _os_log_impl(&dword_19F029000, v490, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v491 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v491, (uint64_t)":", 1);
      v492 = (_QWORD *)std::ostream::operator<<();
      v493 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v492, (uint64_t)" STYL Parse Error Here: ", 24);
      v494 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v493, (uint64_t)"Could not read nav label max road signs.", 40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v494, (uint64_t)"\n", 1);
      return 0;
    }
    *(_QWORD *)(a1 + 248) = v695;
    *(_BYTE *)(a1 + 22) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v485 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 203;
      v700 = 2082;
      v701 = "Could not read label disable alternate text positions.";
      _os_log_impl(&dword_19F029000, v485, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v486 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v486, (uint64_t)":", 1);
    v487 = (_QWORD *)std::ostream::operator<<();
    v488 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v487, (uint64_t)" STYL Parse Error Here: ", 24);
    v489 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v488, (uint64_t)"Could not read label disable alternate text positions.", 54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v489, (uint64_t)"\n", 1);
    return 0;
  }
  *(_BYTE *)(a1 + 256) = v694 != 0;
  if (*(_DWORD *)(a3 + 8) < 2u)
    return 1;
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v495 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 207;
      v700 = 2082;
      v701 = "Could not read indication of min traffic type (traffic) z existing.";
      _os_log_impl(&dword_19F029000, v495, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v496 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v496, (uint64_t)":", 1);
    v497 = (_QWORD *)std::ostream::operator<<();
    v498 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v497, (uint64_t)" STYL Parse Error Here: ", 24);
    v499 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v498, (uint64_t)"Could not read indication of min traffic type (traffic) z existing.", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v499, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v500 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 209;
        v700 = 2082;
        v701 = "Could not read min traffic type (traffic) z.";
        _os_log_impl(&dword_19F029000, v500, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v501 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v501, (uint64_t)":", 1);
      v502 = (_QWORD *)std::ostream::operator<<();
      v503 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v502, (uint64_t)" STYL Parse Error Here: ", 24);
      v504 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v503, (uint64_t)"Could not read min traffic type (traffic) z.", 44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v504, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 80) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
  }
  if (*(_DWORD *)(a3 + 8) < 4u)
    return 1;
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v505 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 214;
      v700 = 2082;
      v701 = "Could not read indication of maneuver distance (immediate) existing.";
      _os_log_impl(&dword_19F029000, v505, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v506 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v506, (uint64_t)":", 1);
    v507 = (_QWORD *)std::ostream::operator<<();
    v508 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v507, (uint64_t)" STYL Parse Error Here: ", 24);
    v509 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v508, (uint64_t)"Could not read indication of maneuver distance (immediate) existing.", 68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v509, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v515 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 216;
        v700 = 2082;
        v701 = "Could not read maneuver distance (immediate).";
        _os_log_impl(&dword_19F029000, v515, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v516 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v516, (uint64_t)":", 1);
      v517 = (_QWORD *)std::ostream::operator<<();
      v518 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v517, (uint64_t)" STYL Parse Error Here: ", 24);
      v519 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v518, (uint64_t)"Could not read maneuver distance (immediate).", 45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v519, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 260) = v694;
    *(_BYTE *)(a1 + 23) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v510 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 220;
      v700 = 2082;
      v701 = "Could not read indication of maneuver distance (extremely near) existing.";
      _os_log_impl(&dword_19F029000, v510, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v511 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v511, (uint64_t)":", 1);
    v512 = (_QWORD *)std::ostream::operator<<();
    v513 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v512, (uint64_t)" STYL Parse Error Here: ", 24);
    v514 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v513, (uint64_t)"Could not read indication of maneuver distance (extremely near) existing.", 73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v514, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v525 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 222;
        v700 = 2082;
        v701 = "Could not read maneuver distance (extremely near).";
        _os_log_impl(&dword_19F029000, v525, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v526 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v526, (uint64_t)":", 1);
      v527 = (_QWORD *)std::ostream::operator<<();
      v528 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v527, (uint64_t)" STYL Parse Error Here: ", 24);
      v529 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v528, (uint64_t)"Could not read maneuver distance (extremely near).", 50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v529, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 264) = v694;
    *(_BYTE *)(a1 + 24) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v520 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 226;
      v700 = 2082;
      v701 = "Could not read indication of maneuver distance (very near) existing.";
      _os_log_impl(&dword_19F029000, v520, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v521 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v521, (uint64_t)":", 1);
    v522 = (_QWORD *)std::ostream::operator<<();
    v523 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v522, (uint64_t)" STYL Parse Error Here: ", 24);
    v524 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v523, (uint64_t)"Could not read indication of maneuver distance (very near) existing.", 68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v524, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v535 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 228;
        v700 = 2082;
        v701 = "Could not read maneuver distance (very near).";
        _os_log_impl(&dword_19F029000, v535, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v536 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v536, (uint64_t)":", 1);
      v537 = (_QWORD *)std::ostream::operator<<();
      v538 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v537, (uint64_t)" STYL Parse Error Here: ", 24);
      v539 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v538, (uint64_t)"Could not read maneuver distance (very near).", 45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v539, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 268) = v694;
    *(_BYTE *)(a1 + 25) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v530 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 232;
      v700 = 2082;
      v701 = "Could not read indication of maneuver distance (near) existing.";
      _os_log_impl(&dword_19F029000, v530, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v531 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v531, (uint64_t)":", 1);
    v532 = (_QWORD *)std::ostream::operator<<();
    v533 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v532, (uint64_t)" STYL Parse Error Here: ", 24);
    v534 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v533, (uint64_t)"Could not read indication of maneuver distance (near) existing.", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v534, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v545 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 234;
        v700 = 2082;
        v701 = "Could not read maneuver distance (near).";
        _os_log_impl(&dword_19F029000, v545, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v546 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v546, (uint64_t)":", 1);
      v547 = (_QWORD *)std::ostream::operator<<();
      v548 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v547, (uint64_t)" STYL Parse Error Here: ", 24);
      v549 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v548, (uint64_t)"Could not read maneuver distance (near).", 40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v549, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 272) = v694;
    *(_BYTE *)(a1 + 26) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v540 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 238;
      v700 = 2082;
      v701 = "Could not read indication of maneuver distance (medium) existing.";
      _os_log_impl(&dword_19F029000, v540, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v541 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v541, (uint64_t)":", 1);
    v542 = (_QWORD *)std::ostream::operator<<();
    v543 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v542, (uint64_t)" STYL Parse Error Here: ", 24);
    v544 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v543, (uint64_t)"Could not read indication of maneuver distance (medium) existing.", 65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v544, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v555 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 240;
        v700 = 2082;
        v701 = "Could not read maneuver distance (medium).";
        _os_log_impl(&dword_19F029000, v555, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v556 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v556, (uint64_t)":", 1);
      v557 = (_QWORD *)std::ostream::operator<<();
      v558 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v557, (uint64_t)" STYL Parse Error Here: ", 24);
      v559 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v558, (uint64_t)"Could not read maneuver distance (medium).", 42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v559, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 276) = v694;
    *(_BYTE *)(a1 + 27) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v550 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 244;
      v700 = 2082;
      v701 = "Could not read indication of maneuver distance (far) existing.";
      _os_log_impl(&dword_19F029000, v550, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v551 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v551, (uint64_t)":", 1);
    v552 = (_QWORD *)std::ostream::operator<<();
    v553 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v552, (uint64_t)" STYL Parse Error Here: ", 24);
    v554 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v553, (uint64_t)"Could not read indication of maneuver distance (far) existing.", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v554, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v565 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 246;
        v700 = 2082;
        v701 = "Could not read maneuver distance (far).";
        _os_log_impl(&dword_19F029000, v565, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v566 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v566, (uint64_t)":", 1);
      v567 = (_QWORD *)std::ostream::operator<<();
      v568 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v567, (uint64_t)" STYL Parse Error Here: ", 24);
      v569 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v568, (uint64_t)"Could not read maneuver distance (far).", 39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v569, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 280) = v694;
    *(_BYTE *)(a1 + 28) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v560 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 250;
      v700 = 2082;
      v701 = "Could not read indication of maneuver distance (very far) existing.";
      _os_log_impl(&dword_19F029000, v560, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v561 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v561, (uint64_t)":", 1);
    v562 = (_QWORD *)std::ostream::operator<<();
    v563 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v562, (uint64_t)" STYL Parse Error Here: ", 24);
    v564 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v563, (uint64_t)"Could not read indication of maneuver distance (very far) existing.", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v564, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v570 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 252;
        v700 = 2082;
        v701 = "Could not read maneuver distance (very far).";
        _os_log_impl(&dword_19F029000, v570, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v571 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v571, (uint64_t)":", 1);
      v572 = (_QWORD *)std::ostream::operator<<();
      v573 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v572, (uint64_t)" STYL Parse Error Here: ", 24);
      v574 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v573, (uint64_t)"Could not read maneuver distance (very far).", 44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v574, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 284) = v694;
    *(_BYTE *)(a1 + 29) = 1;
  }
  if (*(_DWORD *)(a3 + 8) < 5u)
    return 1;
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v575 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 258;
      v700 = 2082;
      v701 = "Could not read indication of nav map zoom level transition z existing.";
      _os_log_impl(&dword_19F029000, v575, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v576 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v576, (uint64_t)":", 1);
    v577 = (_QWORD *)std::ostream::operator<<();
    v578 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v577, (uint64_t)" STYL Parse Error Here: ", 24);
    v579 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v578, (uint64_t)"Could not read indication of nav map zoom level transition z existing.", 70);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v579, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v580 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        v698 = 1024;
        v699 = 260;
        v700 = 2082;
        v701 = "Could not read nav map zoom level transition z.";
        _os_log_impl(&dword_19F029000, v580, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v581 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v581, (uint64_t)":", 1);
      v582 = (_QWORD *)std::ostream::operator<<();
      v583 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v582, (uint64_t)" STYL Parse Error Here: ", 24);
      v584 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v583, (uint64_t)"Could not read nav map zoom level transition z.", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v584, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 288) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(_BYTE *)(a1 + 30) = 1;
  }
  if (*(_DWORD *)(a3 + 8) < 6u)
    return 1;
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v585 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 267;
      v700 = 2082;
      v701 = "Could not read suppress oppositie carriageway signs.";
      _os_log_impl(&dword_19F029000, v585, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v586 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v586, (uint64_t)":", 1);
    v587 = (_QWORD *)std::ostream::operator<<();
    v588 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v587, (uint64_t)" STYL Parse Error Here: ", 24);
    v589 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v588, (uint64_t)"Could not read suppress oppositie carriageway signs.", 52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v589, (uint64_t)"\n", 1);
    return 0;
  }
  *(_BYTE *)(a1 + 257) = v694 != 0;
  if (*(_DWORD *)(a3 + 8) < 7u)
    return 1;
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v590 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 272;
      v700 = 2082;
      v701 = "Could not read indication of vector venue zoom range existing.";
      _os_log_impl(&dword_19F029000, v590, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v591 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v591, (uint64_t)":", 1);
    v592 = (_QWORD *)std::ostream::operator<<();
    v593 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v592, (uint64_t)" STYL Parse Error Here: ", 24);
    v594 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v593, (uint64_t)"Could not read indication of vector venue zoom range existing.", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v594, (uint64_t)"\n", 1);
    return 0;
  }
  if (!v694)
  {
LABEL_319:
    if (*(_DWORD *)(a3 + 8) >= 8u)
    {
      geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
      if (!v692)
      {
        if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
          dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
        v597 = GEOGetGeoCSSStyleSheetLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
          v698 = 1024;
          v699 = 281;
          v700 = 2082;
          v701 = "Could not read building shadow color existing.";
          _os_log_impl(&dword_19F029000, v597, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }
        v598 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v598, (uint64_t)":", 1);
        v599 = (_QWORD *)std::ostream::operator<<();
        v600 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v599, (uint64_t)" STYL Parse Error Here: ", 24);
        v601 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v600, (uint64_t)"Could not read building shadow color existing.", 46);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v601, (uint64_t)"\n", 1);
        return 0;
      }
      if (v694)
      {
        geo::ibitstream::readByte((uint64_t)this, &v692);
        if (!v692)
        {
          if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
            dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
          v602 = GEOGetGeoCSSStyleSheetLog_log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
            v698 = 1024;
            v699 = 284;
            v700 = 2082;
            v701 = "Could not read building shadow red";
            _os_log_impl(&dword_19F029000, v602, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }
          v603 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v603, (uint64_t)":", 1);
          v604 = (_QWORD *)std::ostream::operator<<();
          v605 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v604, (uint64_t)" STYL Parse Error Here: ", 24);
          v606 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v605, (uint64_t)"Could not read building shadow red", 34);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v606, (uint64_t)"\n", 1);
          return 0;
        }
        v95 = v693;
        geo::ibitstream::readByte((uint64_t)this, &v692);
        if (!v692)
        {
          if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
            dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
          v607 = GEOGetGeoCSSStyleSheetLog_log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
            v698 = 1024;
            v699 = 285;
            v700 = 2082;
            v701 = "Could not read building shadow green";
            _os_log_impl(&dword_19F029000, v607, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }
          v608 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v608, (uint64_t)":", 1);
          v609 = (_QWORD *)std::ostream::operator<<();
          v610 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v609, (uint64_t)" STYL Parse Error Here: ", 24);
          v611 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v610, (uint64_t)"Could not read building shadow green", 36);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v611, (uint64_t)"\n", 1);
          return 0;
        }
        v96 = v693;
        geo::ibitstream::readByte((uint64_t)this, &v692);
        if (!v692)
        {
          if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
            dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
          v612 = GEOGetGeoCSSStyleSheetLog_log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
            v698 = 1024;
            v699 = 286;
            v700 = 2082;
            v701 = "Could not read building shadow blue";
            _os_log_impl(&dword_19F029000, v612, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }
          v613 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v613, (uint64_t)":", 1);
          v614 = (_QWORD *)std::ostream::operator<<();
          v615 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v614, (uint64_t)" STYL Parse Error Here: ", 24);
          v616 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v615, (uint64_t)"Could not read building shadow blue", 35);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v616, (uint64_t)"\n", 1);
          return 0;
        }
        v97 = v693;
        geo::ibitstream::readByte((uint64_t)this, &v692);
        if (!v692)
        {
          if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
            dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
          v617 = GEOGetGeoCSSStyleSheetLog_log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
            v698 = 1024;
            v699 = 287;
            v700 = 2082;
            v701 = "Could not read building shadow alpha";
            _os_log_impl(&dword_19F029000, v617, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }
          v618 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v618, (uint64_t)":", 1);
          v619 = (_QWORD *)std::ostream::operator<<();
          v620 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v619, (uint64_t)" STYL Parse Error Here: ", 24);
          v621 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v620, (uint64_t)"Could not read building shadow alpha", 36);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v621, (uint64_t)"\n", 1);
          return 0;
        }
        LOBYTE(v98) = v693;
        *(float *)(a1 + 300) = (float)v95 / 255.0;
        *(float *)(a1 + 304) = (float)v96 / 255.0;
        *(float *)(a1 + 308) = (float)v97 / 255.0;
        *(float *)(a1 + 312) = (float)v98 / 255.0;
      }
      if (*(_DWORD *)(a3 + 8) >= 9u)
      {
        geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
        if (!v692)
        {
          if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
            dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
          v622 = GEOGetGeoCSSStyleSheetLog_log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
            v698 = 1024;
            v699 = 293;
            v700 = 2082;
            v701 = "Could not read venue dimming factor existing.";
            _os_log_impl(&dword_19F029000, v622, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }
          v623 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v623, (uint64_t)":", 1);
          v624 = (_QWORD *)std::ostream::operator<<();
          v625 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v624, (uint64_t)" STYL Parse Error Here: ", 24);
          v626 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v625, (uint64_t)"Could not read venue dimming factor existing.", 45);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v626, (uint64_t)"\n", 1);
          return 0;
        }
        if (v694)
        {
          geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
          if (!buf[0])
          {
            if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
              dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
            v627 = GEOGetGeoCSSStyleSheetLog_log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
              v698 = 1024;
              v699 = 295;
              v700 = 2082;
              v701 = "Could not read venue dimming factor";
              _os_log_impl(&dword_19F029000, v627, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
            }
            v628 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v628, (uint64_t)":", 1);
            v629 = (_QWORD *)std::ostream::operator<<();
            v630 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v629, (uint64_t)" STYL Parse Error Here: ", 24);
            v631 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v630, (uint64_t)"Could not read venue dimming factor", 35);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v631, (uint64_t)"\n", 1);
            return 0;
          }
          *(float *)(a1 + 316) = (float)v697 / 255.0;
        }
        if (*(_DWORD *)(a3 + 8) >= 0xBu)
        {
          geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
          if (!v692)
          {
            if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
              dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
            v632 = GEOGetGeoCSSStyleSheetLog_log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
              v698 = 1024;
              v699 = 300;
              v700 = 2082;
              v701 = "Could not read value standard map zoom level transition z existing.";
              _os_log_impl(&dword_19F029000, v632, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
            }
            v633 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v633, (uint64_t)":", 1);
            v634 = (_QWORD *)std::ostream::operator<<();
            v635 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v634, (uint64_t)" STYL Parse Error Here: ", 24);
            v636 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v635, (uint64_t)"Could not read value standard map zoom level transition z existing.", 67);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v636, (uint64_t)"\n", 1);
            return 0;
          }
          if (v694)
          {
            geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
            if (!buf[0])
            {
              if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
                dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
              v637 = GEOGetGeoCSSStyleSheetLog_log;
              if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
                v698 = 1024;
                v699 = 302;
                v700 = 2082;
                v701 = "Could not read standard map zoom level transition z.";
                _os_log_impl(&dword_19F029000, v637, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
              }
              v638 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v638, (uint64_t)":", 1);
              v639 = (_QWORD *)std::ostream::operator<<();
              v640 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v639, (uint64_t)" STYL Parse Error Here: ", 24);
              v641 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v640, (uint64_t)"Could not read standard map zoom level transition z.", 52);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v641, (uint64_t)"\n", 1);
              return 0;
            }
            *(float *)(a1 + 292) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
            *(_BYTE *)(a1 + 31) = 1;
          }
          if (*(_DWORD *)(a3 + 8) >= 0xBu)
          {
            geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
            if (!v692)
            {
              if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
                dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
              v642 = GEOGetGeoCSSStyleSheetLog_log;
              if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
                v698 = 1024;
                v699 = 309;
                v700 = 2082;
                v701 = "Could not read value force 3d buildings";
                _os_log_impl(&dword_19F029000, v642, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
              }
              v643 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v643, (uint64_t)":", 1);
              v644 = (_QWORD *)std::ostream::operator<<();
              v645 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v644, (uint64_t)" STYL Parse Error Here: ", 24);
              v646 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v645, (uint64_t)"Could not read value force 3d buildings", 39);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v646, (uint64_t)"\n", 1);
              return 0;
            }
            *(_BYTE *)(a1 + 296) = v694 != 0;
            if (*(_DWORD *)(a3 + 8) >= 0xCu)
            {
              geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
              if (!v692)
              {
                if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
                  dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
                v647 = GEOGetGeoCSSStyleSheetLog_log;
                if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
                  v698 = 1024;
                  v699 = 315;
                  v700 = 2082;
                  v701 = "Could not read value round buildings";
                  _os_log_impl(&dword_19F029000, v647, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                }
                v648 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v648, (uint64_t)":", 1);
                v649 = (_QWORD *)std::ostream::operator<<();
                v650 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v649, (uint64_t)" STYL Parse Error Here: ", 24);
                v651 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v650, (uint64_t)"Could not read value round buildings", 36);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v651, (uint64_t)"\n", 1);
                return 0;
              }
              *(_BYTE *)(a1 + 297) = v694 != 0;
              if (*(_DWORD *)(a3 + 8) >= 0xEu)
              {
                geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
                if (!v692)
                {
                  if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
                    dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
                  v652 = GEOGetGeoCSSStyleSheetLog_log;
                  if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315650;
                    v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
                    v698 = 1024;
                    v699 = 320;
                    v700 = 2082;
                    v701 = "Could not read indication of route sinuosity (straight) existing.";
                    _os_log_impl(&dword_19F029000, v652, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                  }
                  v653 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v653, (uint64_t)":", 1);
                  v654 = (_QWORD *)std::ostream::operator<<();
                  v655 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v654, (uint64_t)" STYL Parse Error Here: ", 24);
                  v656 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v655, (uint64_t)"Could not read indication of route sinuosity (straight) existing.", 65);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v656, (uint64_t)"\n", 1);
                  return 0;
                }
                if (v694)
                {
                  geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
                  if (!v692)
                  {
                    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
                      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
                    v657 = GEOGetGeoCSSStyleSheetLog_log;
                    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315650;
                      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
                      v698 = 1024;
                      v699 = 322;
                      v700 = 2082;
                      v701 = "Could not read route sinuosity (straight).";
                      _os_log_impl(&dword_19F029000, v657, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                    }
                    v658 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v658, (uint64_t)":", 1);
                    v659 = (_QWORD *)std::ostream::operator<<();
                    v660 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v659, (uint64_t)" STYL Parse Error Here: ", 24);
                    v661 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v660, (uint64_t)"Could not read route sinuosity (straight).", 42);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v661, (uint64_t)"\n", 1);
                    return 0;
                  }
                  *(_DWORD *)(a1 + 320) = v694;
                  *(_BYTE *)(a1 + 32) = 1;
                }
                geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
                if (!v692)
                {
                  if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
                    dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
                  v662 = GEOGetGeoCSSStyleSheetLog_log;
                  if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315650;
                    v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
                    v698 = 1024;
                    v699 = 326;
                    v700 = 2082;
                    v701 = "Could not read indication of route sinuosity (low) existing.";
                    _os_log_impl(&dword_19F029000, v662, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                  }
                  v663 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v663, (uint64_t)":", 1);
                  v664 = (_QWORD *)std::ostream::operator<<();
                  v665 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v664, (uint64_t)" STYL Parse Error Here: ", 24);
                  v666 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v665, (uint64_t)"Could not read indication of route sinuosity (low) existing.", 60);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v666, (uint64_t)"\n", 1);
                  return 0;
                }
                if (v694)
                {
                  geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
                  if (!v692)
                  {
                    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
                      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
                    v667 = GEOGetGeoCSSStyleSheetLog_log;
                    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315650;
                      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
                      v698 = 1024;
                      v699 = 328;
                      v700 = 2082;
                      v701 = "Could not read route sinuosity (low).";
                      _os_log_impl(&dword_19F029000, v667, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                    }
                    v668 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v668, (uint64_t)":", 1);
                    v669 = (_QWORD *)std::ostream::operator<<();
                    v670 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v669, (uint64_t)" STYL Parse Error Here: ", 24);
                    v671 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v670, (uint64_t)"Could not read route sinuosity (low).", 37);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v671, (uint64_t)"\n", 1);
                    return 0;
                  }
                  *(_DWORD *)(a1 + 324) = v694;
                  *(_BYTE *)(a1 + 33) = 1;
                }
                geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
                if (!v692)
                {
                  if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
                    dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
                  v672 = GEOGetGeoCSSStyleSheetLog_log;
                  if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315650;
                    v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
                    v698 = 1024;
                    v699 = 332;
                    v700 = 2082;
                    v701 = "Could not read indication of route sinuosity (medium) existing.";
                    _os_log_impl(&dword_19F029000, v672, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                  }
                  v673 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v673, (uint64_t)":", 1);
                  v674 = (_QWORD *)std::ostream::operator<<();
                  v675 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v674, (uint64_t)" STYL Parse Error Here: ", 24);
                  v676 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v675, (uint64_t)"Could not read indication of route sinuosity (medium) existing.", 63);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v676, (uint64_t)"\n", 1);
                  return 0;
                }
                if (v694)
                {
                  geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
                  if (!v692)
                  {
                    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
                      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
                    v677 = GEOGetGeoCSSStyleSheetLog_log;
                    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315650;
                      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
                      v698 = 1024;
                      v699 = 334;
                      v700 = 2082;
                      v701 = "Could not read route sinuosity (medium).";
                      _os_log_impl(&dword_19F029000, v677, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                    }
                    v678 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v678, (uint64_t)":", 1);
                    v679 = (_QWORD *)std::ostream::operator<<();
                    v680 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v679, (uint64_t)" STYL Parse Error Here: ", 24);
                    v681 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v680, (uint64_t)"Could not read route sinuosity (medium).", 40);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v681, (uint64_t)"\n", 1);
                    return 0;
                  }
                  *(_DWORD *)(a1 + 328) = v694;
                  *(_BYTE *)(a1 + 34) = 1;
                }
                geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
                if (!v692)
                {
                  if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
                    dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
                  v682 = GEOGetGeoCSSStyleSheetLog_log;
                  if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315650;
                    v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
                    v698 = 1024;
                    v699 = 338;
                    v700 = 2082;
                    v701 = "Could not read indication of route sinuosity (high) existing.";
                    _os_log_impl(&dword_19F029000, v682, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                  }
                  v683 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v683, (uint64_t)":", 1);
                  v684 = (_QWORD *)std::ostream::operator<<();
                  v685 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v684, (uint64_t)" STYL Parse Error Here: ", 24);
                  v686 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v685, (uint64_t)"Could not read indication of route sinuosity (high) existing.", 61);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v686, (uint64_t)"\n", 1);
                  return 0;
                }
                if (v694)
                {
                  geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
                  if (v692)
                  {
                    *(_DWORD *)(a1 + 332) = v694;
                    result = 1;
                    *(_BYTE *)(a1 + 35) = 1;
                    return result;
                  }
                  if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
                    dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
                  v687 = GEOGetGeoCSSStyleSheetLog_log;
                  if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315650;
                    v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
                    v698 = 1024;
                    v699 = 340;
                    v700 = 2082;
                    v701 = "Could not read route sinuosity (high).";
                    _os_log_impl(&dword_19F029000, v687, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                  }
                  v688 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v688, (uint64_t)":", 1);
                  v689 = (_QWORD *)std::ostream::operator<<();
                  v690 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v689, (uint64_t)" STYL Parse Error Here: ", 24);
                  v691 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v690, (uint64_t)"Could not read route sinuosity (high).", 38);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v691, (uint64_t)"\n", 1);
                  return 0;
                }
              }
            }
          }
        }
      }
    }
    return 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
  if (buf[0])
  {
    *(float *)(a1 + 192) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (buf[0])
    {
      *(float *)(a1 + 196) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
      *(_BYTE *)(a1 + 13) = 1;
      goto LABEL_319;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v596 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      v698 = 1024;
      v699 = 275;
      v700 = 2082;
      v701 = "Could not read vector traffic max zoom.";
      _os_log_impl(&dword_19F029000, v596, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    goto LABEL_642;
  }
  if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
    dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
  v595 = GEOGetGeoCSSStyleSheetLog_log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
    v698 = 1024;
    v699 = 274;
    v700 = 2082;
    v701 = "Could not read vector traffic min zoom.";
    _os_log_impl(&dword_19F029000, v595, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }
LABEL_632:
  v371 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v371, (uint64_t)":", 1);
  v372 = (_QWORD *)std::ostream::operator<<();
  v373 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v372, (uint64_t)" STYL Parse Error Here: ", 24);
  v374 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v373, (uint64_t)"Could not read vector traffic min zoom.", 39);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v374, (uint64_t)"\n", 1);
  return 0;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_29,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_29>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id WeakRetained;
  id v4;
  char v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 1128);
  v5 = 30;
  md::MapEngineSettings::set(v2, &v5, (_QWORD *)1);
  md::AnimationManager::forceInstantAnimations(*(md::AnimationManager **)(v1 + 104), 0);
  WeakRetained = objc_loadWeakRetained((id *)(v1 + 848));

  if (WeakRetained)
  {
    v4 = objc_loadWeakRetained((id *)(v1 + 848));
    objc_msgSend(v4, "willBecomeFullyDrawn");

  }
  if (*(_BYTE *)(v1 + 4608))
    md::MapEngine::updateLogicsFrequency(v1, *(_QWORD **)(*(_QWORD *)(v1 + 1080) + 8), kVariableLogicFrequency, 1);
}

void sub_19F3DDF80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::CaptionedIconLabelPart::evaluateFeatureNormalTextPosition(md::CaptionedIconLabelPart *this, md::Label *a2, const md::LabelLayoutContext *a3)
{
  float v3;
  float v4;
  float v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  float v24;
  float v25;
  float v26;

  if (!*((_BYTE *)this + 164))
    return 6;
  v3 = *((float *)this + 38);
  v4 = *((float *)this + 39);
  v5 = *((float *)this + 40);
  v6 = *((double *)this + 74);
  v7 = *((double *)a2 + 14) - v6;
  v8 = *((double *)this + 75);
  v9 = *((double *)a2 + 15) - v8;
  v10 = *((double *)this + 76);
  v11 = *((double *)a2 + 16) - v10;
  v12 = 1.0 / sqrt(v7 * v7 + v9 * v9 + v11 * v11);
  v13 = v12 * v7;
  v14 = v12 * v9;
  v15 = v12 * v11;
  v16 = 1.0 / sqrt(v6 * v6 + v8 * v8 + v10 * v10);
  v17 = v16 * v6;
  v18 = v16 * v8;
  v19 = v16 * v10;
  v20 = *((_BYTE *)a2 + 8) ? 0.0 : v17;
  v21 = *((_BYTE *)a2 + 8) ? 0.0 : v18;
  v22 = *((_BYTE *)a2 + 8) ? 1.0 : v19;
  if (v13 * v3 + v14 * v4 + v15 * v5 > *((float *)this + 52))
    return 6;
  v24 = -(v21 * v13 - v20 * v14);
  v25 = -(v20 * v15 - v22 * v13);
  v26 = -(v22 * v14 - v21 * v15);
  return 4 * ((float)((float)((float)(v5 * v24) + (float)(v3 * v26)) + (float)(v4 * v25)) <= 0.0);
}

uint64_t stringForLayoutReasonsMask(_BYTE *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  char v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  char v14;
  size_t v15;
  unint64_t v16;
  const void **v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  unint64_t v28;
  void *__p[2];
  __int128 v30;
  int v31;
  uint64_t v32[20];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v32[0] = MEMORY[0x1E0DE4FE0] + 64;
  v24 = v7;
  *(uint64_t *)((char *)&v24 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v24 + *(_QWORD *)(v24 - 24));
  std::ios_base::init(v9, &v25);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v24 = v4 + 24;
  v32[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = 0;
  v11 = 0;
  v25 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v30 = 0u;
  v31 = 16;
  do
  {
    v14 = md::NeedsLayoutReasonList[v11];
    if (((a2 >> v14) & 1) != 0)
    {
      if ((v10 & 1) != 0)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v24, (uint64_t)"|", 1);
      v12 = off_1E42F3298[v14];
      v13 = strlen(v12);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v24, (uint64_t)v12, v13);
      v10 = 1;
    }
    ++v11;
  }
  while (v11 != 14);
  if ((v31 & 0x10) != 0)
  {
    v16 = *((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1) < v28)
    {
      *((_QWORD *)&v30 + 1) = v28;
      v16 = v28;
    }
    v17 = (const void **)&v27;
  }
  else
  {
    if ((v31 & 8) == 0)
    {
      v15 = 0;
      a1[23] = 0;
      goto LABEL_22;
    }
    v17 = (const void **)v26;
    v16 = v26[2];
  }
  v18 = *v17;
  v15 = v16 - (_QWORD)*v17;
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v15 >= 0x17)
  {
    v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v19 = v15 | 7;
    v20 = v19 + 1;
    v21 = operator new(v19 + 1);
    *((_QWORD *)a1 + 1) = v15;
    *((_QWORD *)a1 + 2) = v20 | 0x8000000000000000;
    *(_QWORD *)a1 = v21;
    a1 = v21;
    goto LABEL_21;
  }
  a1[23] = v15;
  if (v15)
LABEL_21:
    memmove(a1, v18, v15);
LABEL_22:
  v22 = MEMORY[0x1E0DE4FB8];
  a1[v15] = 0;
  v24 = *v6;
  *(uint64_t *)((char *)&v24 + *(_QWORD *)(v24 - 24)) = v6[3];
  v25 = v22 + 16;
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v32);
}

void sub_19F3DE2EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v1);
  _Unwind_Resume(a1);
}

void sub_19F3DE314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19F3DE53C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const char *a1, _QWORD *a2)
{
  size_t v4;

  v4 = strlen(a1);
  if (*((char *)a2 + 23) < 0)
  {
    if (v4 == a2[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a2 = (_QWORD *)*a2;
      return memcmp(a2, a1, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a2 + 23))
  {
    if (v4 == -1)
LABEL_10:
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a2, a1, v4) == 0;
  }
  return 0;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E426DB58, MEMORY[0x1E0DE42D0]);
}

void sub_19F3DE834(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E426DB60, MEMORY[0x1E0DE42E0]);
}

void sub_19F3DE8CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

uint64_t esl::QuartzImage::dimensions(esl::QuartzImage *this)
{
  unsigned __int16 v2;

  v2 = (*(uint64_t (**)(esl::QuartzImage *))(*(_QWORD *)this + 24))(this);
  return v2 | ((*(unsigned __int16 (**)(esl::QuartzImage *))(*(_QWORD *)this + 32))(this) << 16);
}

void esl::QuartzImage::asPNG(CGImageRef *this@<X0>, _QWORD *a2@<X8>)
{
  CGDataProvider *DataProvider;
  const __CFData *v5;
  CFIndex Length;
  UInt8 *v7;
  CFIndex v8;
  CFRange v9;

  if (((*((uint64_t (**)(CGImageRef *))*this + 5))(this) & 1) != 0)
  {
    DataProvider = CGImageGetDataProvider(this[2]);
    v5 = CGDataProviderCopyData(DataProvider);
    Length = CFDataGetLength(v5);
    v7 = (UInt8 *)malloc_type_malloc(Length, 0x9ED7DE0AuLL);
    v8 = CFDataGetLength(v5);
    v9.location = 0;
    v9.length = v8;
    CFDataGetBytes(v5, v9, v7);
    CFRelease(v5);
    std::string::basic_string[abi:ne180100](a2, v7, v8);
    free(v7);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

BOOL esl::QuartzImage::writeAsPNG(CGImageRef *this, const char *a2)
{
  const __CFString *v4;
  const __CFURL *v5;
  CGImageDestination *v6;
  _BOOL8 v7;

  if (!(*((unsigned int (**)(CGImageRef *))*this + 5))(this))
    return 0;
  v4 = CFStringCreateWithCString(0, a2, 0x600u);
  v5 = CFURLCreateWithFileSystemPath(0, v4, kCFURLPOSIXPathStyle, 0);
  v6 = CGImageDestinationCreateWithURL(v5, CFSTR("public.png"), 1uLL, 0);
  CFRelease(v5);
  CFRelease(v4);
  if (!v6)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Failed to write image to %s\n", a2);
    return 0;
  }
  CGImageDestinationAddImage(v6, this[2], 0);
  v7 = CGImageDestinationFinalize(v6);
  if (!v7)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Failed to write image to %s\n", a2);
  CFRelease(v6);
  return v7;
}

CGImageRef esl::QuartzImage::byteData(CGImageRef *this)
{
  CGDataProvider *DataProvider;
  const __CFData *v3;
  CFIndex Length;
  CGImageRef v5;
  UInt8 *v6;
  CFRange v8;

  if (!(*((unsigned int (**)(CGImageRef *))*this + 5))(this))
    return 0;
  DataProvider = CGImageGetDataProvider(this[2]);
  v3 = CGDataProviderCopyData(DataProvider);
  Length = CFDataGetLength(v3);
  this[4] = (CGImageRef)Length;
  v5 = this[3];
  if (v5)
    v6 = (UInt8 *)malloc_type_realloc(v5, Length, 0x604897BEuLL);
  else
    v6 = (UInt8 *)malloc_type_malloc(Length, 0x29C68BB0uLL);
  this[3] = (CGImageRef)v6;
  v8.length = (CFIndex)this[4];
  v8.location = 0;
  CFDataGetBytes(v3, v8, v6);
  CFRelease(v3);
  return this[3];
}

CGImageRef esl::QuartzImage::byteLength(CGImageRef *this)
{
  CGDataProvider *DataProvider;
  const __CFData *v3;

  if (!(*((unsigned int (**)(CGImageRef *))*this + 5))(this))
    return 0;
  DataProvider = CGImageGetDataProvider(this[2]);
  v3 = CGDataProviderCopyData(DataProvider);
  this[4] = (CGImageRef)CFDataGetLength(v3);
  CFRelease(v3);
  return this[4];
}

size_t esl::QuartzImage::bytesPerRow(CGImageRef *this)
{
  if ((*((unsigned int (**)(CGImageRef *))*this + 5))(this))
    return CGImageGetBytesPerRow(this[2]);
  else
    return 0;
}

void esl::__Image::clone(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t esl::__Image::drawOverlayColor(esl::__Image *this, const esl::QuartzColor *a2)
{
  return 0;
}

void esl::__Image::imageWithOverlayColor(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t esl::__Image::applyBrightness(esl::__Image *this, float a2)
{
  return 0;
}

void esl::__Image::imageWithBrightness(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::allocate_shared[abi:ne180100]<esl::QuartzContext,std::allocator<esl::QuartzContext>,esl::ContextType,unsigned int,unsigned int,void>@<X0>(unsigned __int8 *a1@<X1>, unsigned int *a2@<X2>, unsigned int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x28uLL);
  result = std::__shared_ptr_emplace<esl::QuartzContext>::__shared_ptr_emplace[abi:ne180100]<esl::ContextType,unsigned int,unsigned int,std::allocator<esl::QuartzContext>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_19F3DED0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<esl::QuartzContext>::__shared_ptr_emplace[abi:ne180100]<esl::ContextType,unsigned int,unsigned int,std::allocator<esl::QuartzContext>,0>(_QWORD *a1, unsigned __int8 *a2, unsigned int *a3, unsigned int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E42DE0D8;
  esl::QuartzContext::QuartzContext(a1 + 3, *a2, *a3, *a4);
  return a1;
}

void sub_19F3DED60(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<esl::QuartzContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE0D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<esl::QuartzContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE0D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<esl::QuartzImage,std::allocator<esl::QuartzImage>,CGImage *&,void>@<X0>(CGImageRef *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<esl::QuartzImage>::__shared_ptr_emplace[abi:ne180100]<CGImage *&,std::allocator<esl::QuartzImage>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_19F3DEE50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<esl::QuartzImage>::__shared_ptr_emplace[abi:ne180100]<CGImage *&,std::allocator<esl::QuartzImage>,0>(_QWORD *a1, CGImageRef *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E42DE0A0;
  esl::QuartzImage::QuartzImage((esl::QuartzImage *)(a1 + 3), *a2);
  return a1;
}

void sub_19F3DEE9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<esl::QuartzImage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE0A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<esl::QuartzImage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE0A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void geo::_retain_ptr<CGImage *,geo::_retain_cf<CGImage *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  geo::_retain_ptr<CGImage *,geo::_retain_cf<CGImage *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *geo::_retain_ptr<CGImage *,geo::_retain_cf<CGImage *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E42B4870;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

void geo::_retain_ptr<CGColorSpace *,geo::_retain_cf<CGColorSpace *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  geo::_retain_ptr<CGColorSpace *,geo::_retain_cf<CGColorSpace *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(a1);
  JUMPOUT(0x1A1AF4E00);
}

void geo::_retain_ptr<CGContext *,geo::_retain_cf<CGContext *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  geo::_retain_ptr<CGContext *,geo::_retain_cf<CGContext *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *geo::_retain_ptr<CGContext *,geo::_retain_cf<CGContext *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E42B4890;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<esl::QuartzImage,std::allocator<esl::QuartzImage>,CGImage *,void>@<X0>(CGImageRef *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<esl::QuartzImage>::__shared_ptr_emplace[abi:ne180100]<CGImage *,std::allocator<esl::QuartzImage>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_19F3DF018(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<esl::QuartzImage>::__shared_ptr_emplace[abi:ne180100]<CGImage *,std::allocator<esl::QuartzImage>,0>(_QWORD *a1, CGImageRef *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E42DE0A0;
  esl::QuartzImage::QuartzImage((esl::QuartzImage *)(a1 + 3), *a2);
  return a1;
}

void sub_19F3DF064(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void esl::QuartzContext::translate(CGContextRef *this, float a2, float a3)
{
  if ((*((unsigned int (**)(CGContextRef *))*this + 3))(this))
    CGContextTranslateCTM(this[1], a2, a3);
}

void esl::QuartzContext::scale(CGContextRef *this, float a2, float a3)
{
  if ((*((unsigned int (**)(CGContextRef *))*this + 3))(this))
    CGContextScaleCTM(this[1], a2, a3);
}

void esl::QuartzContext::rotate(CGContextRef *this, float a2)
{
  if ((*((unsigned int (**)(CGContextRef *))*this + 3))(this))
    CGContextRotateCTM(this[1], a2);
}

void esl::QuartzContext::concat(CGContext **this, const esl::QuartzAffineTransform *a2)
{
  int v4;
  CGContext *v5;
  __int128 v6;
  CGAffineTransform v7;

  v4 = (*((uint64_t (**)(CGContext **))*this + 3))(this);
  if (a2)
  {
    if (v4)
    {
      v5 = this[1];
      v6 = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)&v7.a = *(_OWORD *)((char *)a2 + 8);
      *(_OWORD *)&v7.c = v6;
      *(_OWORD *)&v7.tx = *(_OWORD *)((char *)a2 + 40);
      CGContextConcatCTM(v5, &v7);
    }
  }
}

size_t esl::QuartzContext::bytesPerRow(CGContextRef *this)
{
  if ((*((unsigned int (**)(CGContextRef *))*this + 3))(this))
    return CGBitmapContextGetBytesPerRow(this[1]);
  else
    return 0;
}

BOOL esl::QuartzContext::writeToPNG(CGContextRef *this, const char *a2)
{
  const __CFString *v4;
  const __CFURL *v5;
  CGImageDestination *v6;
  CGImage *Image;
  _BOOL8 v8;

  if (!(*((unsigned int (**)(CGContextRef *))*this + 3))(this))
    return 0;
  v4 = CFStringCreateWithCString(0, a2, 0x600u);
  v5 = CFURLCreateWithFileSystemPath(0, v4, kCFURLPOSIXPathStyle, 0);
  v6 = CGImageDestinationCreateWithURL(v5, CFSTR("public.png"), 1uLL, 0);
  CFRelease(v5);
  CFRelease(v4);
  if (!v6)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Failed to write image to %s\n", a2);
    return 0;
  }
  Image = CGBitmapContextCreateImage(this[1]);
  CGImageDestinationAddImage(v6, Image, 0);
  v8 = CGImageDestinationFinalize(v6);
  if (!v8)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Failed to write image to %s\n", a2);
  CFRelease(Image);
  CFRelease(v6);
  return v8;
}

uint64_t esl::QuartzContext::write(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 != 1)
    esl::QuartzContext::write();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 464))(a1);
}

void esl::QuartzContext::flip(esl::QuartzContext *this, float a2)
{
  CGContext *v4;
  CGAffineTransform v5;

  if ((*(unsigned int (**)(esl::QuartzContext *))(*(_QWORD *)this + 24))(this))
  {
    v4 = (CGContext *)*((_QWORD *)this + 1);
    v5.b = 0.0;
    v5.c = 0.0;
    v5.a = 1.0;
    *(_OWORD *)&v5.d = xmmword_19FFB15E0;
    v5.ty = a2;
    CGContextConcatCTM(v4, &v5);
  }
}

uint64_t esl::QuartzContext::flipIfNecessary(esl::QuartzContext *this, float a2)
{
  (*(void (**)(esl::QuartzContext *, float))(*(_QWORD *)this + 136))(this, a2);
  return 1;
}

uint64_t esl::QuartzContext::fillWithColor(CGContextRef *this, const esl::QuartzColor *a2)
{
  uint64_t result;
  CGFloat v5;
  CGRect v6;

  result = (*((uint64_t (**)(CGContextRef *))*this + 3))(this);
  if ((_DWORD)result)
  {
    result = (*((uint64_t (**)(CGContextRef *, const esl::QuartzColor *))*this + 29))(this, a2);
    if ((_DWORD)result)
    {
      v5 = (double)(*((unsigned int (**)(CGContextRef *))*this + 14))(this);
      v6.size.height = (double)(*((unsigned int (**)(CGContextRef *))*this + 15))(this);
      v6.origin.x = 0.0;
      v6.origin.y = 0.0;
      v6.size.width = v5;
      CGContextFillRect(this[1], v6);
      return 1;
    }
  }
  return result;
}

uint64_t esl::QuartzContext::setStrokeColor(CGContext **this, const esl::QuartzColor *a2)
{
  uint64_t result;
  CGContext *v5;
  CGColorRef v6[3];

  result = (*(uint64_t (**)(const esl::QuartzColor *))(*(_QWORD *)a2 + 48))(a2);
  if ((_DWORD)result)
  {
    result = (*((uint64_t (**)(CGContext **))*this + 3))(this);
    if ((_DWORD)result)
    {
      v5 = this[1];
      esl::QuartzColor::color(a2, v6);
      CGContextSetStrokeColorWithColor(v5, v6[1]);
      geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(v6);
      return 1;
    }
  }
  return result;
}

void sub_19F3DF5B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr((uint64_t *)va);
  _Unwind_Resume(a1);
}

void esl::QuartzContext::setLineWidth(CGContextRef *this, float a2)
{
  if ((*((unsigned int (**)(CGContextRef *))*this + 3))(this))
    CGContextSetLineWidth(this[1], a2);
}

void esl::QuartzContext::setLineCapStyle(CGContextRef *a1, CGLineCap a2)
{
  BOOL v4;

  if ((*((unsigned int (**)(CGContextRef *))*a1 + 3))(a1))
    v4 = a2 > kCGLineCapSquare;
  else
    v4 = 1;
  if (!v4)
    CGContextSetLineCap(a1[1], a2);
}

void esl::QuartzContext::setLineJoinStyle(CGContextRef *a1, CGLineJoin a2)
{
  BOOL v4;

  if ((*((unsigned int (**)(CGContextRef *))*a1 + 3))(a1))
    v4 = a2 > kCGLineJoinBevel;
  else
    v4 = 1;
  if (!v4)
    CGContextSetLineJoin(a1[1], a2);
}

double esl::QuartzContext::strokeEllipseInRect(CGContextRef *a1, float *a2)
{
  double result;
  float v5;
  double v6;
  double v7;
  float v8;
  float v9;
  double v10;
  float v11;
  double v12;

  if ((*((unsigned int (**)(CGContextRef *))*a1 + 3))(a1))
  {
    v5 = a2[1];
    v7 = v5;
    v8 = a2[3] - v5;
    if ((float)(a2[2] - *a2) >= 0.0)
      v9 = a2[2] - *a2;
    else
      v9 = 0.0;
    v10 = v9;
    if (v8 >= 0.0)
      v11 = v8;
    else
      v11 = 0.0;
    v12 = v11;
    v6 = *a2;
    CGContextStrokeEllipseInRect(a1[1], *(CGRect *)(&v7 - 1));
  }
  return result;
}

double esl::QuartzContext::fillEllipseInRect(CGContextRef *a1, float *a2)
{
  double result;
  float v5;
  double v6;
  double v7;
  float v8;
  float v9;
  double v10;
  float v11;
  double v12;

  if ((*((unsigned int (**)(CGContextRef *))*a1 + 3))(a1))
  {
    v5 = a2[1];
    v7 = v5;
    v8 = a2[3] - v5;
    if ((float)(a2[2] - *a2) >= 0.0)
      v9 = a2[2] - *a2;
    else
      v9 = 0.0;
    v10 = v9;
    if (v8 >= 0.0)
      v11 = v8;
    else
      v11 = 0.0;
    v12 = v11;
    v6 = *a2;
    CGContextFillEllipseInRect(a1[1], *(CGRect *)(&v7 - 1));
  }
  return result;
}

double esl::QuartzContext::addEllipseInRect(CGContextRef *a1, float *a2)
{
  double result;
  float v5;
  double v6;
  double v7;
  float v8;
  float v9;
  double v10;
  float v11;
  double v12;

  if ((*((unsigned int (**)(CGContextRef *))*a1 + 3))(a1))
  {
    v5 = a2[1];
    v7 = v5;
    v8 = a2[3] - v5;
    if ((float)(a2[2] - *a2) >= 0.0)
      v9 = a2[2] - *a2;
    else
      v9 = 0.0;
    v10 = v9;
    if (v8 >= 0.0)
      v11 = v8;
    else
      v11 = 0.0;
    v12 = v11;
    v6 = *a2;
    CGContextAddEllipseInRect(a1[1], *(CGRect *)(&v7 - 1));
  }
  return result;
}

void esl::QuartzContext::addArc(CGContextRef *this, float a2, float a3, float a4, float a5, float a6, int a7)
{
  if ((*((unsigned int (**)(CGContextRef *))*this + 3))(this))
    CGContextAddArc(this[1], a2, a3, a4, a5, a6, a7);
}

void esl::QuartzContext::replacePathWithStrokedPath(CGContextRef *this)
{
  if ((*((unsigned int (**)(CGContextRef *))*this + 3))(this))
    CGContextReplacePathWithStrokedPath(this[1]);
}

double esl::QuartzContext::clearRect(CGContextRef *a1, float *a2)
{
  double result;
  float v5;
  double v6;
  double v7;
  float v8;
  float v9;
  double v10;
  float v11;
  double v12;

  if ((*((unsigned int (**)(CGContextRef *))*a1 + 3))(a1))
  {
    v5 = a2[1];
    v7 = v5;
    v8 = a2[3] - v5;
    if ((float)(a2[2] - *a2) >= 0.0)
      v9 = a2[2] - *a2;
    else
      v9 = 0.0;
    v10 = v9;
    if (v8 >= 0.0)
      v11 = v8;
    else
      v11 = 0.0;
    v12 = v11;
    v6 = *a2;
    CGContextClearRect(a1[1], *(CGRect *)(&v7 - 1));
  }
  return result;
}

void esl::QuartzContext::clip(CGContextRef *this)
{
  if ((*((unsigned int (**)(CGContextRef *))*this + 3))(this))
    CGContextClip(this[1]);
}

void esl::QuartzContext::evenOddClip(CGContextRef *this)
{
  if ((*((unsigned int (**)(CGContextRef *))*this + 3))(this))
    CGContextEOClip(this[1]);
}

void esl::QuartzContext::beginPath(CGContextRef *this)
{
  if ((*((unsigned int (**)(CGContextRef *))*this + 3))(this))
    CGContextBeginPath(this[1]);
}

void esl::QuartzContext::strokePath(CGContextRef *this)
{
  if ((*((unsigned int (**)(CGContextRef *))*this + 3))(this))
    CGContextStrokePath(this[1]);
}

void esl::QuartzContext::closePath(CGContextRef *this)
{
  if ((*((unsigned int (**)(CGContextRef *))*this + 3))(this))
    CGContextClosePath(this[1]);
}

void esl::QuartzContext::moveTo(CGContextRef *this, float a2, float a3)
{
  if ((*((unsigned int (**)(CGContextRef *))*this + 3))(this))
    CGContextMoveToPoint(this[1], a2, a3);
}

uint64_t esl::QuartzContext::drawLinearGradient(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t result;
  const void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t (**v14)();
  char *v15;
  uint64_t v16;
  _QWORD v17[2];
  char v18;
  void *__p;
  uint64_t (**v20)();
  _QWORD *v21;
  void (**v22)(esl::QuartzColor *__hidden);
  _QWORD v23[3];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD *))(*a2 + 48))(a2);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD *))(*a4 + 48))(a4);
    if ((_DWORD)result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      if ((_DWORD)result)
      {
        __p = &off_1E42B02E0;
        v20 = &off_1E42B4850;
        v11 = (const void *)a2[2];
        if (v11)
          CFRetain(v11);
        v21 = v11;
        v22 = &off_1E42B02E0;
        v23[0] = &off_1E42B4850;
        v12 = (const void *)a4[2];
        if (v12)
          CFRetain(v12);
        v23[1] = v12;
        v16 = 0;
        v17[0] = 0;
        v15 = 0;
        v17[1] = &v15;
        v18 = 0;
        v15 = (char *)operator new(0x40uLL);
        v16 = (uint64_t)v15;
        v17[0] = v15 + 64;
        v13 = 0;
        v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<esl::QuartzColor>,esl::QuartzColor const*,esl::QuartzColor const*,esl::QuartzColor*>((uint64_t)v17, (uint64_t)&__p, (uint64_t)&v24, (uint64_t)v15);
        do
        {
          v23[v13 - 1] = &off_1E42B02E0;
          geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v23[v13]);
          v13 -= 4;
        }
        while (v13 != -8);
        v14 = (uint64_t (**)())operator new(8uLL);
        __p = v14;
        *v14 = (uint64_t (*)())0x3F80000000000000;
        v20 = v14 + 1;
        v21 = v14 + 1;
        (*(void (**)(uint64_t, char **, void **, uint64_t, uint64_t))(*(_QWORD *)a1 + 360))(a1, &v15, &__p, a3, a5);
        if (__p)
        {
          v20 = (uint64_t (**)())__p;
          operator delete(__p);
        }
        __p = &v15;
        std::vector<esl::QuartzColor>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        return 1;
      }
    }
  }
  return result;
}

void sub_19F3DFCA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15)
{
  _QWORD *v15;

  geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(v15);
  _Unwind_Resume(a1);
}

BOOL esl::QuartzContext::drawRadialGradient(CGContextRef *a1, _QWORD *a2, float *a3, _QWORD *a4, float *a5, float a6, float a7)
{
  char *v14;
  const void *v15;
  uint64_t v16;
  float *v17;
  uint64_t v18;
  double *v19;
  double v20;
  double *v21;
  double *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  double *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __CFArray *v32;
  CGGradient *v33;
  _BOOL8 v34;
  _QWORD v36[3];
  uint64_t v37;
  void *value;
  void **v39;
  CFArrayRef colors;
  char *v41;
  char *v42;
  char *v43;
  void *__p;
  uint64_t (**v45)();
  double *v46;
  void (**v47)(esl::QuartzColor *__hidden);
  _QWORD v48[3];
  uint64_t v49;
  CGPoint v50;
  CGPoint v51;

  v49 = *MEMORY[0x1E0C80C00];
  if (!(*(unsigned int (**)(_QWORD *))(*a2 + 48))(a2)
    || !(*(unsigned int (**)(_QWORD *))(*a4 + 48))(a4)
    || !(*((unsigned int (**)(CGContextRef *))*a1 + 3))(a1))
  {
    return 0;
  }
  __p = &off_1E42B02E0;
  v45 = &off_1E42B4850;
  v14 = (char *)a2[2];
  if (v14)
    CFRetain(v14);
  v46 = (double *)v14;
  v47 = &off_1E42B02E0;
  v48[0] = &off_1E42B4850;
  v15 = (const void *)a4[2];
  if (v15)
    CFRetain(v15);
  v48[1] = v15;
  v42 = 0;
  v43 = 0;
  v41 = 0;
  v39 = (void **)&v41;
  LOBYTE(colors) = 0;
  v41 = (char *)operator new(0x40uLL);
  v42 = v41;
  v43 = v41 + 64;
  v16 = 0;
  v42 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<esl::QuartzColor>,esl::QuartzColor const*,esl::QuartzColor const*,esl::QuartzColor*>((uint64_t)&v43, (uint64_t)&__p, (uint64_t)&v49, (uint64_t)v41);
  do
  {
    v48[v16 - 1] = &off_1E42B02E0;
    geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v48[v16]);
    v16 -= 4;
  }
  while (v16 != -8);
  v17 = (float *)operator new(8uLL);
  *(_QWORD *)v17 = 0x3F80000000000000;
  __p = 0;
  v45 = 0;
  v46 = 0;
  std::vector<double>::reserve(&__p, 2uLL);
  v18 = 0;
  v19 = (double *)v45;
  do
  {
    v20 = v17[v18];
    if (v19 >= v46)
    {
      v22 = (double *)__p;
      v23 = ((char *)v19 - (_BYTE *)__p) >> 3;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v25 = (char *)v46 - (_BYTE *)__p;
      if (((char *)v46 - (_BYTE *)__p) >> 2 > v24)
        v24 = v25 >> 2;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      if (v26)
      {
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v46, v26);
        v22 = (double *)__p;
        v19 = (double *)v45;
      }
      else
      {
        v27 = 0;
      }
      v28 = (double *)&v27[8 * v23];
      *v28 = v20;
      v21 = v28 + 1;
      while (v19 != v22)
      {
        v29 = *((_QWORD *)v19-- - 1);
        *((_QWORD *)v28-- - 1) = v29;
      }
      __p = v28;
      v45 = (uint64_t (**)())v21;
      v46 = (double *)&v27[8 * v26];
      if (v22)
        operator delete(v22);
    }
    else
    {
      *v19 = v20;
      v21 = v19 + 1;
    }
    v45 = (uint64_t (**)())v21;
    ++v18;
    v19 = v21;
  }
  while (v18 != 2);
  v39 = (void **)&off_1E42B48B0;
  colors = CFArrayCreateMutable(0, (v42 - v41) >> 5, 0);
  if (colors)
  {
    v30 = v41;
    v31 = v42;
    if (v41 != v42)
    {
      do
      {
        v32 = colors;
        esl::QuartzColor::color(v30, &v37);
        CFArrayAppendValue(v32, value);
        geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v37);
        v30 += 32;
      }
      while (v30 != v31);
      v30 = v41;
    }
    esl::QuartzColor::cgColorSpace((CGColorRef *)v30, &v37);
    if (value)
    {
      v33 = CGGradientCreateWithColors((CGColorSpaceRef)value, colors, (const CGFloat *)__p);
      v36[0] = &off_1E42B47D0;
      v36[1] = v33;
      v34 = v33 != 0;
      if (v33)
      {
        v50.x = *a3;
        v50.y = a3[1];
        v51.x = *a5;
        v51.y = a5[1];
        CGContextDrawRadialGradient(a1[1], v33, v50, a6, v51, a7, 3u);
      }
      geo::_retain_ptr<CGGradient *,geo::_retain_cf<CGGradient *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(v36);
    }
    else
    {
      v34 = 0;
    }
    geo::_retain_ptr<CGColorSpace *,geo::_retain_cf<CGColorSpace *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v37);
  }
  else
  {
    v34 = 0;
  }
  geo::_retain_ptr<__CFArray *,geo::_retain_cf<__CFArray *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v39);
  if (__p)
  {
    v45 = (uint64_t (**)())__p;
    operator delete(__p);
  }
  operator delete(v17);
  __p = &v41;
  std::vector<esl::QuartzColor>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v34;
}

void sub_19F3E00FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *__p,char *a23)
{
  void *v23;

  geo::_retain_ptr<CGGradient *,geo::_retain_cf<CGGradient *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&a10);
  geo::_retain_ptr<CGColorSpace *,geo::_retain_cf<CGColorSpace *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&a13);
  geo::_retain_ptr<__CFArray *,geo::_retain_cf<__CFArray *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&a16);
  if (__p)
  {
    a23 = __p;
    operator delete(__p);
  }
  operator delete(v23);
  __p = &a19;
  std::vector<esl::QuartzColor>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void esl::QuartzContext::imageInRect(uint64_t a1@<X0>, float *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  float v11;
  double v12;
  double v13;
  float v14;
  float v15;
  double v16;
  float v17;
  double v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  CGImageRef image;
  std::__shared_weak_count *v23;
  CGImageRef v24;
  std::__shared_weak_count *v25;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) & 1) != 0)
  {
    (*(void (**)(CGImageRef *__return_ptr, uint64_t))(*(_QWORD *)a1 + 392))(&image, a1);
    v24 = image;
    v25 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = v23;
      if (v23)
      {
        v9 = (unint64_t *)&v23->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    if (v24)
    {
      v11 = a2[1];
      v13 = v11;
      v14 = a2[3] - v11;
      if ((float)(a2[2] - *a2) >= 0.0)
        v15 = a2[2] - *a2;
      else
        v15 = 0.0;
      v16 = v15;
      if (v14 >= 0.0)
        v17 = v14;
      else
        v17 = 0.0;
      v18 = v17;
      v12 = *a2;
      image = CGImageCreateWithImageInRect(*((CGImageRef *)v24 + 2), *(CGRect *)(&v13 - 1));
      std::allocate_shared[abi:ne180100]<esl::QuartzImage,std::allocator<esl::QuartzImage>,CGImage *&,void>(&image, a3);
      CGImageRelease(image);
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
    }
    v19 = v25;
    if (v25)
    {
      v20 = (unint64_t *)&v25->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_19F3E0344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *esl::QuartzContext::byteData(CGContextRef *this)
{
  if ((*((unsigned int (**)(CGContextRef *))*this + 3))(this))
    return CGBitmapContextGetData(this[1]);
  else
    return 0;
}

size_t esl::QuartzContext::byteLength(CGContextRef *this)
{
  size_t BytesPerRow;

  if (!(*((unsigned int (**)(CGContextRef *))*this + 3))(this))
    return 0;
  BytesPerRow = CGBitmapContextGetBytesPerRow(this[1]);
  return CGBitmapContextGetHeight(this[1]) * BytesPerRow;
}

uint64_t esl::QuartzContext::bitmapData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)v4)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
    *(_QWORD *)a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
    *(_DWORD *)(a2 + 8) = (__int16)v5;
    *(_DWORD *)(a2 + 12) = v5 >> 16;
    *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  }
  return v4;
}

void esl::QuartzContext::pngData()
{
  __assert_rtn("pngData", "context.cpp", 2643, "false && \"Need to implement QuartzContext::pngData before using.\"");
}

CGContext *esl::QuartzContext::width(esl::QuartzContext *this)
{
  CGContext *result;

  result = (CGContext *)*((_QWORD *)this + 1);
  if (result)
    return (CGContext *)CGBitmapContextGetWidth(result);
  return result;
}

uint64_t esl::QuartzContext::dimensions(esl::QuartzContext *this)
{
  unsigned __int16 v2;

  if (!(*(unsigned int (**)(esl::QuartzContext *))(*(_QWORD *)this + 24))(this))
    return 0;
  v2 = (*(uint64_t (**)(esl::QuartzContext *))(*(_QWORD *)this + 112))(this);
  return v2 | ((*(unsigned __int16 (**)(esl::QuartzContext *))(*(_QWORD *)this + 120))(this) << 16);
}

void esl::QuartzContext::endTransparencyLayer(CGContextRef *this)
{
  CGContextEndTransparencyLayer(this[1]);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<esl::QuartzColor>,esl::QuartzColor const*,esl::QuartzColor const*,esl::QuartzColor*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = (_QWORD *)(a4 + v7);
      *v8 = &off_1E42B02E0;
      v8[1] = &off_1E42B4850;
      v9 = *(_QWORD *)(a2 + v7 + 16);
      if (v9)
        CFRetain(*(CFTypeRef *)(a2 + v7 + 16));
      v8[2] = v9;
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_19F3E05EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 32;
    do
    {
      (**(void (***)(uint64_t))(v4 + v2))(v4 + v2);
      v2 -= 32;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<esl::QuartzColor>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 32;
      v7 = v4 - 32;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 32;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<double>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

void geo::_retain_ptr<__CFArray *,geo::_retain_cf<__CFArray *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  geo::_retain_ptr<__CFArray *,geo::_retain_cf<__CFArray *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *geo::_retain_ptr<__CFArray *,geo::_retain_cf<__CFArray *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E42B48B0;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

void geo::_retain_ptr<CGGradient *,geo::_retain_cf<CGGradient *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  geo::_retain_ptr<CGGradient *,geo::_retain_cf<CGGradient *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *geo::_retain_ptr<CGGradient *,geo::_retain_cf<CGGradient *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E42B47D0;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

void esl::QuartzContext::isValid()
{
  __assert_rtn("isValid", "context.cpp", 1940, "(valid) && \"Invalid QuartzContext: missing CGContextRef.\"");
}

void esl::QuartzContext::write()
{
  __assert_rtn("write", "context.cpp", 2046, "(ImageFormat::PNG == format) && \"Only PNG is supported for writing thus far\"");
}

void esl::QuartzContext::setAlpha()
{
  __assert_rtn("setAlpha", "context.cpp", 2275, "(0.0f <= alpha && 1.0f >= alpha) && \"Alpha values are expected to be 0.0 <= alpha <= 1.0\"");
}

void esl::QuartzContext::setShadowWithColor()
{
  __assert_rtn("setShadowWithColor", "context.cpp", 2423, "(0 <= radius) && \"Can not set shadow with negative blur radius\"");
}

double esl::AffineTransformMake@<D0>(float a1@<S0>, float a2@<S1>, float a3@<S2>, float a4@<S3>, float a5@<S4>, float a6@<S5>, uint64_t a7@<X8>)
{
  double result;

  *(_QWORD *)a7 = &off_1E42B05C0;
  *(double *)(a7 + 8) = a1;
  *(double *)(a7 + 16) = a2;
  *(double *)(a7 + 24) = a3;
  *(double *)(a7 + 32) = a4;
  result = a6;
  *(double *)(a7 + 40) = a5;
  *(double *)(a7 + 48) = a6;
  return result;
}

double esl::AffineTransformConcat@<D0>(esl *this@<X0>, const esl::QuartzAffineTransform *a2@<X1>, const esl::QuartzAffineTransform *a3@<X2>, uint64_t a4@<X8>)
{
  double v7;
  double v8;
  double v9;
  float v10;
  double v11;
  double v12;
  double v13;
  float v14;
  double v15;
  double v16;
  double v17;
  float v18;
  double v19;
  double v20;
  double v21;
  float v22;
  double v23;
  double v24;
  double v25;
  double v26;
  float v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double result;

  v7 = (*(double (**)(esl *, const esl::QuartzAffineTransform *, const esl::QuartzAffineTransform *))(*(_QWORD *)this + 80))(this, a2, a3);
  v8 = (*(double (**)(const esl::QuartzAffineTransform *))(*(_QWORD *)a2 + 80))(a2);
  v9 = (*(double (**)(esl *))(*(_QWORD *)this + 88))(this);
  v10 = v9 * (*(double (**)(const esl::QuartzAffineTransform *))(*(_QWORD *)a2 + 96))(a2) + v7 * v8;
  v11 = (*(double (**)(esl *))(*(_QWORD *)this + 80))(this);
  v12 = (*(double (**)(const esl::QuartzAffineTransform *))(*(_QWORD *)a2 + 88))(a2);
  v13 = (*(double (**)(esl *))(*(_QWORD *)this + 88))(this);
  v14 = v13 * (*(double (**)(const esl::QuartzAffineTransform *))(*(_QWORD *)a2 + 104))(a2) + v11 * v12;
  v15 = (*(double (**)(esl *))(*(_QWORD *)this + 96))(this);
  v16 = (*(double (**)(const esl::QuartzAffineTransform *))(*(_QWORD *)a2 + 80))(a2);
  v17 = (*(double (**)(esl *))(*(_QWORD *)this + 104))(this);
  v18 = v17 * (*(double (**)(const esl::QuartzAffineTransform *))(*(_QWORD *)a2 + 96))(a2) + v15 * v16;
  v19 = (*(double (**)(esl *))(*(_QWORD *)this + 96))(this);
  v20 = (*(double (**)(const esl::QuartzAffineTransform *))(*(_QWORD *)a2 + 88))(a2);
  v21 = (*(double (**)(esl *))(*(_QWORD *)this + 104))(this);
  v22 = v21 * (*(double (**)(const esl::QuartzAffineTransform *))(*(_QWORD *)a2 + 104))(a2) + v19 * v20;
  v23 = (*(double (**)(esl *))(*(_QWORD *)this + 112))(this);
  v24 = (*(double (**)(const esl::QuartzAffineTransform *))(*(_QWORD *)a2 + 80))(a2);
  v25 = (*(double (**)(esl *))(*(_QWORD *)this + 120))(this);
  v26 = v25 * (*(double (**)(const esl::QuartzAffineTransform *))(*(_QWORD *)a2 + 96))(a2) + v23 * v24;
  v27 = v26 + (*(double (**)(const esl::QuartzAffineTransform *))(*(_QWORD *)a2 + 112))(a2);
  v28 = (*(double (**)(esl *))(*(_QWORD *)this + 112))(this);
  v29 = (*(double (**)(const esl::QuartzAffineTransform *))(*(_QWORD *)a2 + 88))(a2);
  v30 = (*(double (**)(esl *))(*(_QWORD *)this + 120))(this);
  v31 = v30 * (*(double (**)(const esl::QuartzAffineTransform *))(*(_QWORD *)a2 + 104))(a2) + v28 * v29;
  v32 = (*(double (**)(const esl::QuartzAffineTransform *))(*(_QWORD *)a2 + 120))(a2);
  *(_QWORD *)a4 = &off_1E42B05C0;
  *(float *)&v32 = v31 + v32;
  *(double *)(a4 + 8) = v10;
  *(double *)(a4 + 16) = v14;
  *(double *)(a4 + 24) = v18;
  *(double *)(a4 + 32) = v22;
  result = *(float *)&v32;
  *(double *)(a4 + 40) = v27;
  *(double *)(a4 + 48) = result;
  return result;
}

uint64_t esl::QuartzAffineTransform::invert(esl::QuartzAffineTransform *this)
{
  __int128 v2;
  __int128 v3;
  CGAffineTransform v5;
  CGAffineTransform v6;

  v2 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)&v5.a = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)&v5.c = v2;
  *(_OWORD *)&v5.tx = *(_OWORD *)((char *)this + 40);
  CGAffineTransformInvert(&v6, &v5);
  v3 = *(_OWORD *)&v6.c;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)&v6.a;
  *(_OWORD *)((char *)this + 24) = v3;
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)&v6.tx;
  return 1;
}

BOOL esl::QuartzAffineTransform::equalToTransform(uint64_t a1, void *lpsrc)
{
  char *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  CGAffineTransform v8;
  CGAffineTransform t1;

  if (!v3)
    __cxa_bad_cast();
  v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&t1.a = *(_OWORD *)(a1 + 8);
  *(_OWORD *)&t1.c = v4;
  *(_OWORD *)&t1.tx = *(_OWORD *)(a1 + 40);
  v5 = *(_OWORD *)(v3 + 8);
  v6 = *(_OWORD *)(v3 + 40);
  *(_OWORD *)&v8.c = *(_OWORD *)(v3 + 24);
  *(_OWORD *)&v8.tx = v6;
  *(_OWORD *)&v8.a = v5;
  return CGAffineTransformEqualToTransform(&t1, &v8);
}

BOOL esl::QuartzAffineTransform::isIdentity(esl::QuartzAffineTransform *this)
{
  __int128 v1;
  __int128 v2;
  CGAffineTransform v4;
  CGAffineTransform t1;

  v1 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)&t1.a = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)&t1.c = v1;
  *(_OWORD *)&t1.tx = *(_OWORD *)((char *)this + 40);
  v2 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)&v4.a = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)&v4.c = v2;
  *(_OWORD *)&v4.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  return CGAffineTransformEqualToTransform(&t1, &v4);
}

float32x2_t esl::QuartzAffineTransform::applyToPoint(uint64_t a1, float *a2)
{
  return vcvt_f32_f64(vaddq_f64(*(float64x2_t *)(a1 + 40), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 24), a2[1]), *(float64x2_t *)(a1 + 8), *a2)));
}

float esl::QuartzAffineTransform::applyToRect(uint64_t a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  __int128 v5;
  CGAffineTransform v7;
  CGRect v8;

  v2 = a2[1];
  v3 = 0.0;
  if ((float)(a2[2] - *a2) >= 0.0)
    v4 = a2[2] - *a2;
  else
    v4 = 0.0;
  if ((float)(a2[3] - v2) >= 0.0)
    v3 = a2[3] - v2;
  v8.origin.x = *a2;
  v8.origin.y = v2;
  v8.size.width = v4;
  v8.size.height = v3;
  v5 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&v7.a = *(_OWORD *)(a1 + 8);
  *(_OWORD *)&v7.c = v5;
  *(_OWORD *)&v7.tx = *(_OWORD *)(a1 + 40);
  return COERCE_DOUBLE(CGRectApplyAffineTransform(v8, &v7));
}

double esl::QuartzAffineTransform::a(esl::QuartzAffineTransform *this)
{
  return *((double *)this + 1);
}

double esl::QuartzAffineTransform::b(esl::QuartzAffineTransform *this)
{
  return *((double *)this + 2);
}

double esl::QuartzAffineTransform::c(esl::QuartzAffineTransform *this)
{
  return *((double *)this + 3);
}

double esl::QuartzAffineTransform::d(esl::QuartzAffineTransform *this)
{
  return *((double *)this + 4);
}

double esl::QuartzAffineTransform::tx(esl::QuartzAffineTransform *this)
{
  return *((double *)this + 5);
}

double esl::QuartzAffineTransform::ty(esl::QuartzAffineTransform *this)
{
  return *((double *)this + 6);
}

void esl::QuartzAffineTransform::~QuartzAffineTransform(esl::QuartzAffineTransform *this)
{
  JUMPOUT(0x1A1AF4E00);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

unint64_t std::string::find[abi:ne180100](uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  int64_t v8;
  void *v9;
  char *v10;
  int64_t v11;
  char *v12;
  int v14;
  uint64_t v15;
  char *v16;

  v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    v5 = *a1;
    v6 = a1[1];
  }
  else
  {
    v6 = *((unsigned __int8 *)a1 + 23);
  }
  v7 = strlen(__s);
  if (v6 < a3)
    return -1;
  v8 = v7;
  if (v7)
  {
    v9 = (void *)(v5 + a3);
    v10 = (char *)(v5 + v6);
    v11 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v8)
    {
      v14 = *__s;
      do
      {
        v15 = v11 - v8;
        if (v15 == -1)
          break;
        v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16)
          break;
        v12 = v16;
        if (!memcmp(v16, __s, v8))
          goto LABEL_9;
        v9 = v12 + 1;
        v11 = v10 - (v12 + 1);
      }
      while (v11 >= v8);
    }
    v12 = v10;
LABEL_9:
    if (v12 == v10)
      return -1;
    else
      return (unint64_t)&v12[-v5];
  }
  return a3;
}

uint64_t std::string::rfind[abi:ne180100](unsigned __int8 *a1, char *__s, unint64_t a3)
{
  unsigned __int8 *v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  int v17;

  v5 = a1;
  if ((char)a1[23] < 0)
  {
    v5 = *(unsigned __int8 **)a1;
    v6 = *((_QWORD *)a1 + 1);
  }
  else
  {
    v6 = a1[23];
  }
  v7 = strlen(__s);
  if (v6 >= a3)
    v8 = a3;
  else
    v8 = v6;
  v9 = v6 - v8;
  v10 = v8 + v7;
  if (v9 <= v7)
    v11 = v6;
  else
    v11 = v10;
  v12 = &v5[v11];
  if (v7 && v11)
  {
    v13 = v5;
    v14 = &v5[v11];
    do
    {
      if (*v13 == *__s)
      {
        v15 = 1;
        while (v7 != v15)
        {
          if (&v13[v15] == v12)
            goto LABEL_23;
          v16 = v13[v15];
          v17 = __s[v15++];
          if (v16 != v17)
            goto LABEL_14;
        }
        v14 = v13;
      }
LABEL_14:
      ++v13;
    }
    while (v13 != v12);
  }
  else
  {
    v14 = &v5[v11];
  }
LABEL_23:
  if (v14 != v12 || v7 == 0)
    return v14 - v5;
  else
    return -1;
}

void esl::FontKey::parseStylisticAlternates(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  void **p_dst;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  int v15;
  int v16;
  unint64_t v17;
  char *v18;
  _DWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  uint64_t v28;
  char *__endptr;
  void **__dst;
  size_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v4 = 0;
  v33 = a2;
  v34 = a3;
  v5 = (void **)(a1 + 12);
  v28 = (uint64_t)(a1 + 14);
  do
  {
    v6 = std::string_view::find_first_of[abi:ne180100](&v33, "+-", v4 + 1);
    if (v34 < v4)
      std::__throw_out_of_range[abi:ne180100]("string_view::substr");
    v7 = v6;
    v8 = v6 - v4;
    if (v6 == -1)
      v8 = -1;
    if (v34 - v4 >= v8)
      v9 = v8;
    else
      v9 = v34 - v4;
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v10 = v33;
    if (v9 >= 0x17)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      p_dst = (void **)operator new(v12 + 1);
      v31 = v9;
      v32 = v13 | 0x8000000000000000;
      __dst = p_dst;
LABEL_15:
      memmove(p_dst, (const void *)(v10 + v4), v9);
      goto LABEL_16;
    }
    HIBYTE(v32) = v9;
    p_dst = (void **)&__dst;
    if (v9)
      goto LABEL_15;
LABEL_16:
    *((_BYTE *)p_dst + v9) = 0;
    if (SHIBYTE(v32) < 0)
    {
      if (!v31)
        goto LABEL_40;
      __endptr = 0;
      v14 = (const char *)__dst;
    }
    else
    {
      if (!HIBYTE(v32))
        goto LABEL_41;
      __endptr = 0;
      v14 = (const char *)&__dst;
    }
    v15 = strtol(v14, &__endptr, 10);
    if (!*__endptr)
    {
      v16 = v15;
      v18 = (char *)a1[13];
      v17 = a1[14];
      if ((unint64_t)v18 >= v17)
      {
        v20 = (char *)*v5;
        v21 = (v18 - (_BYTE *)*v5) >> 2;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v23 = v17 - (_QWORD)v20;
        if (v23 >> 1 > v22)
          v22 = v23 >> 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
          v24 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v28, v24);
          v20 = (char *)a1[12];
          v18 = (char *)a1[13];
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[4 * v21];
        *(_DWORD *)v26 = v16;
        v19 = v26 + 4;
        while (v18 != v20)
        {
          v27 = *((_DWORD *)v18 - 1);
          v18 -= 4;
          *((_DWORD *)v26 - 1) = v27;
          v26 -= 4;
        }
        a1[12] = v26;
        a1[13] = v19;
        a1[14] = &v25[4 * v24];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_DWORD *)v18 = v15;
        v19 = v18 + 4;
      }
      a1[13] = v19;
    }
    if (SHIBYTE(v32) < 0)
LABEL_40:
      operator delete(__dst);
LABEL_41:
    v4 = v7;
  }
  while (v7 != -1);
}

void sub_19F3E11C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::istringstream::basic_istringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;

  v6 = MEMORY[0x1E0DE4FD8];
  v7 = MEMORY[0x1E0DE4FD8] + 64;
  a1[15] = MEMORY[0x1E0DE4FD8] + 64;
  v8 = (uint64_t)(a1 + 2);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 16);
  *a1 = v9;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v9 - 24)) = v10;
  a1[1] = 0;
  v11 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 2);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6 + 24;
  a1[15] = v7;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3 | 8);
  return a1;
}

void sub_19F3E129C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1A1AF4D64](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x1A1AF4980](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_19F3E13F0(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x19F3E13BCLL);
  }
  __cxa_rethrow();
}

void sub_19F3E1434(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::string_view::find_first_of[abi:ne180100](uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  size_t v12;
  char *v13;

  v5 = *a1;
  v6 = a1[1];
  v7 = strlen(__s);
  if (v6 <= a3 || v7 == 0)
    return -1;
  v10 = (unsigned __int8 *)(v5 + a3);
  v11 = (unsigned __int8 *)(v5 + v6);
LABEL_7:
  v12 = v7;
  v13 = __s;
  while (*v10 != *v13)
  {
    ++v13;
    if (!--v12)
    {
      if (++v10 != v11)
        goto LABEL_7;
      v10 = (unsigned __int8 *)(v5 + v6);
      break;
    }
  }
  if (v10 == v11)
    return -1;
  else
    return (uint64_t)&v10[-v5];
}

BOOL std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 1;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) != 0;
  if (a1[23])
  {
    v6 = v2 - 1;
    do
    {
      v8 = *a1++;
      v7 = v8;
      v9 = *a2++;
      v10 = v7 == v9;
      v2 = v7 != v9;
      v10 = !v10 || v6-- == 0;
    }
    while (!v10);
  }
  return v2;
}

BOOL std::operator!=[abi:ne180100]<int,std::allocator<int>>(uint64_t a1, uint64_t a2)
{
  const void *v2;
  size_t v4;
  const void *v5;

  v2 = *(const void **)a1;
  v4 = *(_QWORD *)(a1 + 8) - (_QWORD)v2;
  v5 = *(const void **)a2;
  return v4 != *(_QWORD *)(a2 + 8) - (_QWORD)v5 || memcmp(v2, v5, v4) != 0;
}

void std::__list_imp<std::string>::__delete_node[abi:ne180100]<>(int a1, void **__p)
{
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_19F3E1B10(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

_QWORD *std::__list_imp<std::string>::__create_node[abi:ne180100]<std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  std::string *v8;

  v7 = operator new(0x28uLL);
  *v7 = a2;
  v7[1] = a3;
  v8 = (std::string *)(v7 + 2);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    v7[4] = *(_QWORD *)(a4 + 16);
  }
  return v7;
}

void sub_19F3E1CA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

uint64_t esl::QuartzColor::colorSpace@<X0>(CGColorRef *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  CGColorSpaceRef ColorSpace;
  CGColorSpace *v6;
  CFStringRef Name;
  CFStringRef v8;
  __int16 v9;
  uint64_t (**v10)();
  CFTypeRef cf1;
  uint64_t (**v12)();
  CGColorSpace *v13;

  result = (*((uint64_t (**)(CGColorRef *))*this + 6))(this);
  if ((result & 1) == 0)
  {
    *a2 = 0;
    return result;
  }
  ColorSpace = CGColorGetColorSpace(this[2]);
  v12 = &off_1E42B47F0;
  if (ColorSpace)
  {
    v6 = ColorSpace;
    CFRetain(ColorSpace);
    v13 = v6;
    Name = CGColorSpaceGetName(v6);
    v8 = Name;
    v10 = &off_1E42B48F0;
    if (Name)
    {
      CFRetain(Name);
      cf1 = v8;
      if (CFEqual(v8, (CFTypeRef)*MEMORY[0x1E0C9DA10]))
      {
        v9 = 513;
LABEL_18:
        *(_WORD *)a2 = v9;
        goto LABEL_19;
      }
      if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0C9DA00]))
      {
        v9 = 1;
        goto LABEL_18;
      }
      if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0C9D988]))
      {
        v9 = 257;
        goto LABEL_18;
      }
      if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0C9D908]))
      {
        v9 = 769;
        goto LABEL_18;
      }
      if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0C9D900]))
      {
        v9 = 1025;
        goto LABEL_18;
      }
    }
    else
    {
      cf1 = 0;
    }
    *a2 = 0;
LABEL_19:
    geo::_retain_ptr<__CFString const*,geo::_retain_cf<__CFString const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v10);
    return (uint64_t)geo::_retain_ptr<CGColorSpace *,geo::_retain_cf<CGColorSpace *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v12);
  }
  v13 = 0;
  *a2 = 0;
  return (uint64_t)geo::_retain_ptr<CGColorSpace *,geo::_retain_cf<CGColorSpace *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v12);
}

void sub_19F3E1E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  geo::_retain_ptr<__CFString const*,geo::_retain_cf<__CFString const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&a9);
  geo::_retain_ptr<CGColorSpace *,geo::_retain_cf<CGColorSpace *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&a12);
  _Unwind_Resume(a1);
}

float esl::QuartzColor::alpha(CGColorRef *this)
{
  return CGColorGetAlpha(this[2]);
}

const CGFloat *esl::QuartzColor::sRGBComponents@<X0>(CGColorRef *this@<X0>, uint64_t a2@<X8>)
{
  const CGFloat *result;
  float64x2_t *v5;
  float v6;
  int v7;
  float v8;
  float v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  float v16;
  __int32 v17;
  float v18;
  float v19;
  int v20;
  int v21;
  int v22;
  double v23;
  float v24;
  __int32 v25;
  float v26;
  float v27;
  int v28;
  int v29;
  int v30;
  float v31;
  __int32 v32;
  float v33;
  float v34;
  int v35;
  int v36;
  int v37;
  float v38;
  float64x2_t v39;
  float32x2_t v40;
  float v41;
  float v42;
  _BYTE v43[2];
  float32x2_t v44;
  float v45;
  float v46;

  result = CGColorGetComponents(this[2]);
  if (result)
  {
    v5 = (float64x2_t *)result;
    v6 = 1.0;
    if ((*((uint64_t (**)(CGColorRef *))*this + 5))(this) == 4)
      v6 = v5[1].f64[1];
    (*((void (**)(_BYTE *__return_ptr, CGColorRef *))*this + 2))(v43, this);
    v7 = v43[0];
    *(_BYTE *)a2 = 0;
    if (v7)
    {
      switch(*geo::optional<esl::FontWeight>::value(v43))
      {
        case 0:
          v8 = v5[1].f64[0];
          v44 = vcvt_f32_f64(*v5);
          v45 = v8;
          v46 = v6;
          v9 = geo::colorTransform<geo::GammaCorrection>(geo::sRGBGammaCorrection, (float *)&v44);
          v11 = v10;
          v13 = v12;
          v15 = v14;
          if (!*(_BYTE *)a2)
            goto LABEL_17;
          geo::optional<int>::value((_BYTE *)a2);
          goto LABEL_18;
        case 1:
          v16 = v5[1].f64[0];
          v40 = vcvt_f32_f64(*v5);
          v41 = v16;
          v42 = v6;
          v44.i32[0] = geo::colorTransform<geo::ReverseGammaCorrection>(geo::reverseDisplayRGBGammaCorrection, (float *)&v40);
          v44.i32[1] = v17;
          v45 = v18;
          v46 = v19;
          v9 = geo::colorTransform<geo::GammaCorrection>(geo::sRGBGammaCorrection, (float *)&v44);
          v11 = v20;
          v13 = v21;
          v15 = v22;
          if (*(_BYTE *)a2)
            goto LABEL_16;
          goto LABEL_17;
        case 2:
          v39 = *v5;
          v23 = v5[1].f64[0];
          if (*(_BYTE *)a2)
            geo::optional<int>::value((_BYTE *)a2);
          else
            *(_BYTE *)a2 = 1;
          *(float32x2_t *)(a2 + 4) = vcvt_f32_f64(v39);
          v38 = v23;
          *(float *)(a2 + 12) = v38;
          *(float *)(a2 + 16) = v6;
          return (const CGFloat *)geo::optional<geo::ColorSpace>::~optional(v43);
        case 3:
          v24 = v5[1].f64[0];
          v40 = vcvt_f32_f64(*v5);
          v41 = v24;
          v42 = v6;
          v44.i32[0] = geo::colorTransform<geo::ReverseGammaCorrection>(geo::reverseDisplayP3GammaCorrection, (float *)&v40);
          v44.i32[1] = v25;
          v45 = v26;
          v46 = v27;
          v9 = geo::colorTransform<geo::GammaCorrection>(geo::sRGBGammaCorrection, (float *)&v44);
          v11 = v28;
          v13 = v29;
          v15 = v30;
          if (*(_BYTE *)a2)
            goto LABEL_16;
          goto LABEL_17;
        case 4:
          v31 = v5[1].f64[0];
          v40 = vcvt_f32_f64(*v5);
          v41 = v31;
          v42 = v6;
          v44.i32[0] = geo::colorTransform<geo::ReverseGammaCorrection>(geo::reverseDCI_P3GammaCorrection, (float *)&v40);
          v44.i32[1] = v32;
          v45 = v33;
          v46 = v34;
          v9 = geo::colorTransform<geo::GammaCorrection>(geo::sRGBGammaCorrection, (float *)&v44);
          v11 = v35;
          v13 = v36;
          v15 = v37;
          if (*(_BYTE *)a2)
LABEL_16:
            geo::optional<int>::value((_BYTE *)a2);
          else
LABEL_17:
            *(_BYTE *)a2 = 1;
LABEL_18:
          *(float *)(a2 + 4) = v9;
          *(_DWORD *)(a2 + 8) = v11;
          *(_DWORD *)(a2 + 12) = v13;
          *(_DWORD *)(a2 + 16) = v15;
          break;
        default:
          return (const CGFloat *)geo::optional<geo::ColorSpace>::~optional(v43);
      }
    }
    return (const CGFloat *)geo::optional<geo::ColorSpace>::~optional(v43);
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  return result;
}

void sub_19F3E2120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16)
{
  _BYTE *v16;

  geo::optional<geo::Color<float,4,(geo::ColorSpace)2>>::~optional(v16);
  geo::optional<geo::ColorSpace>::~optional(&a16);
  _Unwind_Resume(a1);
}

size_t esl::QuartzColor::numberOfComponents(CGColorRef *this)
{
  size_t NumberOfComponents;

  NumberOfComponents = CGColorGetNumberOfComponents(this[2]);
  if (NumberOfComponents)
    return NumberOfComponents - 1;
  else
    return 0;
}

BOOL esl::QuartzColor::operator!=(uint64_t a1, uint64_t a2)
{
  return CFEqual(*(CFTypeRef *)(a1 + 16), *(CFTypeRef *)(a2 + 16)) == 0;
}

_BYTE *geo::optional<geo::ColorSpace>::~optional(_BYTE *a1)
{
  if (*a1)
  {
    geo::optional<esl::FontWeight>::value(a1);
    *a1 = 0;
  }
  return a1;
}

void geo::_retain_ptr<__CFString const*,geo::_retain_cf<__CFString const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  geo::_retain_ptr<__CFString const*,geo::_retain_cf<__CFString const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *geo::_retain_ptr<__CFString const*,geo::_retain_cf<__CFString const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E42B48F0;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

_BYTE *geo::optional<geo::Color<float,4,(geo::ColorSpace)2>>::~optional(_BYTE *a1)
{
  if (*a1)
  {
    geo::optional<int>::value(a1);
    *a1 = 0;
  }
  return a1;
}

BOOL esl::QuartzPath::isEmpty(esl::QuartzPath *this)
{
  CGRect BoundingBox;

  BoundingBox = CGPathGetBoundingBox((CGPathRef)*((_QWORD *)this + 1));
  return CGRectIsNull(BoundingBox);
}

uint64_t esl::QuartzPath::addLineToPoint(CGMutablePathRef *a1, uint64_t a2, float a3, float a4)
{
  uint64_t v8;
  const CGAffineTransform *v9;

  v8 = (*((uint64_t (**)(CGMutablePathRef *))*a1 + 2))(a1);
  if ((_DWORD)v8)
  {
    if (a2)
      v9 = (const CGAffineTransform *)(a2 + 8);
    else
      v9 = 0;
    CGPathAddLineToPoint(a1[1], v9, a3, a4);
  }
  return v8;
}

uint64_t esl::QuartzPath::addQuadCurveToPoint(CGMutablePathRef *a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  uint64_t v12;
  const CGAffineTransform *v13;

  v12 = (*((uint64_t (**)(CGMutablePathRef *))*a1 + 2))(a1);
  if ((_DWORD)v12)
  {
    if (a2)
      v13 = (const CGAffineTransform *)(a2 + 8);
    else
      v13 = 0;
    CGPathAddQuadCurveToPoint(a1[1], v13, a3, a4, a5, a6);
  }
  return v12;
}

uint64_t esl::QuartzPath::addEllipseInRect(CGMutablePathRef *a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  uint64_t v12;
  const CGAffineTransform *v13;
  float v14;
  float v15;
  CGRect v17;

  v12 = (*((uint64_t (**)(CGMutablePathRef *))*a1 + 2))(a1);
  if ((_DWORD)v12)
  {
    if (a2)
      v13 = (const CGAffineTransform *)(a2 + 8);
    else
      v13 = 0;
    if ((float)(a5 - a3) >= 0.0)
      v14 = a5 - a3;
    else
      v14 = 0.0;
    if ((float)(a6 - a4) >= 0.0)
      v15 = a6 - a4;
    else
      v15 = 0.0;
    v17.origin.x = a3;
    v17.origin.y = a4;
    v17.size.width = v14;
    v17.size.height = v15;
    CGPathAddEllipseInRect(a1[1], v13, v17);
  }
  return v12;
}

uint64_t esl::QuartzPath::addRect(CGMutablePathRef *a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  uint64_t v12;
  const CGAffineTransform *v13;
  float v14;
  float v15;
  CGRect v17;

  v12 = (*((uint64_t (**)(CGMutablePathRef *))*a1 + 2))(a1);
  if ((_DWORD)v12)
  {
    if (a2)
      v13 = (const CGAffineTransform *)(a2 + 8);
    else
      v13 = 0;
    if ((float)(a5 - a3) >= 0.0)
      v14 = a5 - a3;
    else
      v14 = 0.0;
    if ((float)(a6 - a4) >= 0.0)
      v15 = a6 - a4;
    else
      v15 = 0.0;
    v17.origin.x = a3;
    v17.origin.y = a4;
    v17.size.width = v14;
    v17.size.height = v15;
    CGPathAddRect(a1[1], v13, v17);
  }
  return v12;
}

float esl::QuartzPath::currentPoint(esl::QuartzPath *this)
{
  return CGPathGetCurrentPoint((CGPathRef)*((_QWORD *)this + 1)).x;
}

float esl::QuartzPath::boundingBox(esl::QuartzPath *this)
{
  return COERCE_DOUBLE(CGPathGetBoundingBox((CGPathRef)*((_QWORD *)this + 1)));
}

void std::__shared_ptr_emplace<esl::QuartzPath>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE030;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<esl::QuartzPath>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE030;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t GEOGetGeoCSSStyleSheetLog()
{
  if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
    dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
  return GEOGetGeoCSSStyleSheetLog_log;
}

void Flyover::GetDataIDs(Flyover *this)
{
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((v1 & 1) == 0)
  {
    {
      v2 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>();
      v3 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>();
      v4 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>();
      v5 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>();
      v6 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>();
      v7 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>();
      v8 = gdc::typeIndex<Flyover::AtmosphereTexture>();
      v9 = gdc::typeIndex<Flyover::DiffuseTexture>();
      v10 = gdc::typeIndex<Flyover::NightTexture>();
      Flyover::GetDataIDs(void)::kDataIDs = 0u;
      unk_1EE577040 = 0u;
      dword_1EE577050 = 1065353216;
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&Flyover::GetDataIDs(void)::kDataIDs, v2, v2);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&Flyover::GetDataIDs(void)::kDataIDs, v3, v3);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&Flyover::GetDataIDs(void)::kDataIDs, v4, v4);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&Flyover::GetDataIDs(void)::kDataIDs, v5, v5);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&Flyover::GetDataIDs(void)::kDataIDs, v6, v6);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&Flyover::GetDataIDs(void)::kDataIDs, v7, v7);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&Flyover::GetDataIDs(void)::kDataIDs, v8, v8);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&Flyover::GetDataIDs(void)::kDataIDs, v9, v9);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&Flyover::GetDataIDs(void)::kDataIDs, v10, v10);
      __cxa_atexit((void (*)(void *))std::unordered_set<unsigned long>::~unordered_set[abi:nn180100], &Flyover::GetDataIDs(void)::kDataIDs, &dword_19F029000);
    }
  }
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[355];
}

uint64_t GEOGetGeoCSSMaterialSystemLog()
{
  if (qword_1ECE65978 != -1)
    dispatch_once(&qword_1ECE65978, &__block_literal_global_4);
  return _MergedGlobals;
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE578000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE578000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>(void)::index = v4;
      v1 = &unk_1EE578000;
    }
  }
  return v1[197];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[347];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[353];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[349];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[351];
}

uint64_t gdc::typeIndex<Flyover::AtmosphereTexture>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<Flyover::AtmosphereTexture>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[443];
}

uint64_t gdc::typeIndex<Flyover::DiffuseTexture>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<Flyover::DiffuseTexture>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[441];
}

uint64_t gdc::typeIndex<Flyover::NightTexture>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<Flyover::NightTexture>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[439];
}

uint64_t std::unordered_set<unsigned long>::~unordered_set[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
  abort();
}

void md::DrapingLogic::~DrapingLogic(md::DrapingTaskScheduler **this)
{
  md::DrapingLogic::~DrapingLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  md::DrapingTaskScheduler **v2;
  md::DrapingTaskScheduler *v3;
  md::DrapingTaskScheduler *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  md::DrapingTaskScheduler *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  *this = (md::DrapingTaskScheduler *)&off_1E428CB48;
  v2 = this + 21;
  md::DrapingTaskScheduler::reset(this[21]);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)(this + 48));
  v3 = this[45];
  if (v3)
  {
    this[46] = v3;
    operator delete(v3);
  }
  v4 = this[42];
  if (v4)
  {
    this[43] = v4;
    operator delete(v4);
  }
  geo::Pool<gdc::FallbackNode>::disposeElements((uint64_t)(this + 36));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(this[37]);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(this[33]);
  if (*((_BYTE *)this + 232))
    *((_BYTE *)this + 232) = 0;
  v5 = (std::__shared_weak_count *)this[25];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  v6 = (std::__shared_weak_count *)this[23];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  v7 = *v2;
  *v2 = 0;
  if (v7)
  {
    md::DrapingTaskScheduler::~DrapingTaskScheduler(v7);
    MEMORY[0x1A1AF4E00]();
  }
  v8 = (std::__shared_weak_count *)this[20];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)this[18];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)this[16];
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *this = (md::DrapingTaskScheduler *)off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(this[13]);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(this[10]);
}

void md::DrapingLogic::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[8];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18[23];
  char v19;

  strcpy((char *)a2, "DrapingLogic");
  *(_WORD *)(a2 + 23) = 12;
  *(_OWORD *)(a2 + 47) = 0u;
  *(_OWORD *)(a2 + 63) = 0u;
  *(_OWORD *)(a2 + 79) = 0u;
  *(_BYTE *)(a2 + 95) = 0;
  v3 = *(_QWORD *)(a1 + 168);
  v4 = *(unsigned int *)(v3 + 52);
  v19 = 13;
  strcpy(v18, "Pending Tasks");
  v15 = 0;
  v16 = 0;
  v17 = 1;
  v14 = 0;
  v13 = v4;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v18, (uint64_t)v12);
  v5 = *(unsigned int *)(v3 + 48);
  v19 = 15;
  strcpy(v18, "Cached Vertices");
  v9 = 0;
  v10 = 0;
  v11 = 1;
  v8 = 0;
  v7 = v5;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v18, (uint64_t)v6);
}

uint64_t md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[5];

  if (*(_QWORD *)(a3 + 8) == 0x1B9039CBDAB12E5CLL && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 64);
    v4 = *(void **)(a1 + 56);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v4);
  }
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(void **)(a1 + 32);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 9) < 0)
          operator delete(*(void **)(v6 - 32));
        v6 -= 64;
      }
      while (v6 != v5);
      v7 = *(void **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = v5;
    operator delete(v7);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void ***std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](void ***a1)
{
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void *v7;
  void **v8;
  void **v9;
  void *v10;
  void **v11;
  void **v12;
  void *v13;
  void **v14;
  void **v15;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void **)*(v3 - 3);
        if (v5)
        {
          v6 = (void **)*(v3 - 2);
          v7 = *(v3 - 3);
          if (v6 != v5)
          {
            do
            {
              v8 = (void **)*(v6 - 3);
              if (v8)
              {
                v9 = (void **)*(v6 - 2);
                v10 = *(v6 - 3);
                if (v9 != v8)
                {
                  do
                  {
                    if (*((char *)v9 - 1) < 0)
                      operator delete(*(v9 - 3));
                    v9 -= 3;
                  }
                  while (v9 != v8);
                  v10 = *(v6 - 3);
                }
                *(v6 - 2) = v8;
                operator delete(v10);
              }
              v11 = (void **)*(v6 - 6);
              if (v11)
              {
                v12 = (void **)*(v6 - 5);
                v13 = *(v6 - 6);
                if (v12 != v11)
                {
                  do
                  {
                    if (*((char *)v12 - 9) < 0)
                      operator delete(*(v12 - 4));
                    v12 -= 8;
                  }
                  while (v12 != v11);
                  v13 = *(v6 - 6);
                }
                *(v6 - 5) = v11;
                operator delete(v13);
              }
              v14 = v6 - 10;
              if (*((char *)v6 - 57) < 0)
                operator delete(*v14);
              v6 -= 10;
            }
            while (v14 != v5);
            v7 = *(v3 - 3);
          }
          *(v3 - 2) = v5;
          operator delete(v7);
        }
        std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](v3 - 6);
        if (*((char *)v3 - 49) < 0)
          operator delete(*(v3 - 9));
        v15 = v3 - 12;
        if (*((char *)v3 - 73) < 0)
          operator delete(*v15);
        v3 -= 12;
      }
      while (v15 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void gdc::DebugTreeNode::~DebugTreeNode(gdc::DebugTreeNode *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = *((_QWORD *)this + 10);
    v4 = (void *)*((_QWORD *)this + 9);
    if (v3 != v2)
    {
      do
      {
        v3 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v3);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v2;
    operator delete(v4);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)this + 6);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(*(void **)this);
    return;
  }
  operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    goto LABEL_10;
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = a2[2];
      if (*(_BYTE *)(v2 + 24))
        break;
      v3 = *(uint64_t **)(v2 + 16);
      v4 = *v3;
      if (*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if (*(uint64_t **)v2 == a2)
          {
            v9 = (uint64_t *)a2[2];
          }
          else
          {
            v9 = *(uint64_t **)(v2 + 8);
            v10 = *v9;
            *(_QWORD *)(v2 + 8) = *v9;
            if (v10)
            {
              *(_QWORD *)(v10 + 16) = v2;
              v3 = *(uint64_t **)(v2 + 16);
            }
            v9[2] = (uint64_t)v3;
            *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
            *v9 = v2;
            *(_QWORD *)(v2 + 16) = v9;
            v3 = (uint64_t *)v9[2];
            v2 = *v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v14 = *(_QWORD *)(v2 + 8);
          *v3 = v14;
          if (v14)
            *(_QWORD *)(v14 + 16) = v3;
          *(_QWORD *)(v2 + 16) = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          *(_QWORD *)(v2 + 8) = v3;
          v3[2] = v2;
          return result;
        }
      }
      else if (!v4 || (v6 = *(unsigned __int8 *)(v4 + 24), v5 = (_BYTE *)(v4 + 24), v6))
      {
        if (*(uint64_t **)v2 == a2)
        {
          v11 = a2[1];
          *(_QWORD *)v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = *(uint64_t **)(v2 + 16);
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
          a2[1] = v2;
          *(_QWORD *)(v2 + 16) = a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v12 = (uint64_t *)v3[1];
        v13 = *v12;
        v3[1] = *v12;
        if (v13)
          *(_QWORD *)(v13 + 16) = v3;
        v12[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v12;
        *v12 = (uint64_t)v3;
        v3[2] = (uint64_t)v12;
        return result;
      }
      *(_BYTE *)(v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v10 = operator new(0x38uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[6] = 0;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    goto LABEL_72;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v20 = operator new(8 * prime);
    v21 = (void *)*a1;
    *a1 = (uint64_t)v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v22++) = 0;
    while (prime != v22);
    v23 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_59;
    v24 = v23[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*a1 + 8 * v26) = v13;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v28))
        {
          *v23 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*a1 + v29);
          **(_QWORD **)(*a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v28) = v23;
          v23 = i;
          v26 = v28;
        }
      }
LABEL_59:
      v7 = prime;
      goto LABEL_60;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*a1 + 8 * v24) = v13;
    v33 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_59;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*a1 + 8 * v35))
        {
          *(_QWORD *)(*a1 + 8 * v35) = v23;
          goto LABEL_64;
        }
        *v23 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*a1 + v34);
        **(_QWORD **)(*a1 + v34) = v33;
        v33 = v23;
      }
      v35 = v24;
LABEL_64:
      v23 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_59;
    }
  }
  if (prime >= v7)
    goto LABEL_60;
  v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
  if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    v30 = std::__next_prime(v30);
  }
  else
  {
    v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2)
      v30 = v32;
  }
  if (prime <= v30)
    prime = v30;
  if (prime < v7)
  {
    if (!prime)
    {
      v40 = (void *)*a1;
      *a1 = 0;
      if (v40)
        operator delete(v40);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v7 = a1[1];
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_72:
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v5);
  if (v37)
  {
    *v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v36 + 8 * v5) = v13;
  if (*v10)
  {
    v38 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
  return v10;
}

void sub_19F3E37F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void std::__function::__func<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#3},std::allocator<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#3}>,void ()(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#3},std::allocator<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#3}>,void ()(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E4289DD0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#3},std::allocator<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#3}>,void ()(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E4289DD0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#3},std::allocator<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#3}>,void ()(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)>::operator()(_QWORD *a1, uint64_t *a2, unint64_t **a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  char **v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v20;
  _QWORD *i;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t *v29;

  v4 = *a2;
  v5 = *a3;
  v6 = a3[1];
  v7 = (_QWORD *)a1[5];
  if (v6)
  {
    v8 = *a3;
    do
    {
      v9 = *v8;
      v10 = (unsigned __int16)*v8;
      if (*(unsigned __int16 *)(v4 + 40) == v10)
      {
        v11 = HIDWORD(v9);
        v12 = *(_QWORD *)(v4 + 48);
        if (HIDWORD(v9) < (unint64_t)((*(_QWORD *)(v4 + 56) - v12) >> 3))
        {
          v13 = (unsigned __int16 *)(v12 + 8 * v11);
          if (*v13 == v10 && v13[1] == WORD1(v9) && *((_DWORD *)v13 + 1) == HIDWORD(v9))
          {
            v14 = *(char ***)(v7[12] + 8 * v11);
            if (v14)
            {
              v16 = *v14;
              v15 = v14[1];
              if (*v14 != v15)
              {
                v17 = a1[2];
                while (1)
                {
                  v18 = *(_QWORD *)v16;
                  if (*(_QWORD *)v16 == v17)
                    break;
                  v16 += 24;
                  if (v17 < v18 || v16 == v15)
                    goto LABEL_4;
                }
              }
              if (v16 != v15)
              {
                v20 = v15 - (v16 + 24);
                if (v15 != v16 + 24)
                  memmove(v16, v16 + 24, v15 - (v16 + 24));
                v14[1] = &v16[v20];
              }
            }
          }
        }
      }
LABEL_4:
      ++v8;
    }
    while (v8 != &v5[(_QWORD)v6]);
  }
  for (i = (_QWORD *)v7[23]; i; i = (_QWORD *)*i)
  {
    v28 = v5;
    v29 = v6;
    v27 = v4;
    v22 = i[6];
    if (!v22)
      goto LABEL_31;
    (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v22 + 48))(v22, &v27, &v28);
  }
  v23 = (_QWORD *)v7[47];
  if (v23)
  {
    v24 = a1[1];
    while (1)
    {
      v28 = v5;
      v29 = v6;
      v26 = v24;
      v27 = v4;
      v25 = v23[6];
      if (!v25)
        break;
      (*(void (**)(uint64_t, uint64_t *, unint64_t **, uint64_t *))(*(_QWORD *)v25 + 48))(v25, &v27, &v28, &v26);
      v23 = (_QWORD *)*v23;
      if (!v23)
        return;
    }
LABEL_31:
    std::__throw_bad_function_call[abi:nn180100]();
    std::__throw_bad_function_call[abi:nn180100]();
  }
}

void std::__throw_bad_function_call[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  JUMPOUT(0x19F3E3BB0);
}

void std::__function::__func<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_1E4289D88;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &unk_1E4289D88;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)>::operator()(uint64_t a1, uint64_t *a2, unint64_t **a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t *i;
  __int128 v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  char **v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  __int128 v26;
  char *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  char *v35;
  char *v36;
  _QWORD *v37;
  int64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  char *v42;
  char *v43;
  __int128 v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  __int128 v49;
  char *v50;
  char *v51;
  int64_t v52;
  char *v53;
  _QWORD *j;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *__src;
  char *__srca;
  char *__srcb;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t *v67;

  v3 = a1;
  v4 = *a2;
  v6 = *a3;
  v5 = a3[1];
  v7 = *(_QWORD **)(a1 + 40);
  if (v5)
  {
    v8 = (_QWORD *)(a1 + 16);
    for (i = *a3; i != &v6[(_QWORD)v5]; ++i)
    {
      v11 = *i;
      v12 = (unsigned __int16)*i;
      if (*(unsigned __int16 *)(v4 + 40) == v12)
      {
        v13 = HIDWORD(v11);
        v14 = *(_QWORD *)(v4 + 48);
        if (HIDWORD(v11) < (unint64_t)((*(_QWORD *)(v4 + 56) - v14) >> 3))
        {
          v15 = (unsigned __int16 *)(v14 + 8 * v13);
          if (*v15 == v12 && v15[1] == WORD1(v11) && *((_DWORD *)v15 + 1) == HIDWORD(v11))
          {
            v16 = *(char ***)(v7[12] + 8 * v13);
            if (v16)
            {
              v18 = *v16;
              v17 = (unint64_t)v16[1];
              if (*v16 == (char *)v17)
              {
                v19 = *v16;
LABEL_17:
                v20 = v16[1];
                if (v19 != (char *)v17)
                {
                  v20 = v19;
                  if (*v8 == *(_QWORD *)v19)
                    continue;
                }
              }
              else
              {
                v19 = *v16;
                do
                {
                  if (*(_QWORD *)v19 >= *v8)
                    goto LABEL_17;
                  v19 += 24;
                }
                while (v19 != (char *)v17);
                v20 = v16[1];
              }
              v21 = (v20 - v18) / 24;
              v22 = &v18[24 * v21];
              v23 = (unint64_t)v16[2];
              if (v17 >= v23)
              {
                v63 = v8;
                v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (_QWORD)v18) >> 3) + 1;
                if (v29 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_68;
                v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (_QWORD)v18) >> 3);
                if (2 * v30 > v29)
                  v29 = 2 * v30;
                if (v30 >= 0x555555555555555)
                  v31 = 0xAAAAAAAAAAAAAAALL;
                else
                  v31 = v29;
                v62 = v3;
                if (v31)
                {
                  __src = v7;
                  if (v31 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_69;
                  v32 = v22;
                  v33 = (char *)operator new(24 * v31);
                  v22 = v32;
                  v7 = __src;
                }
                else
                {
                  v33 = 0;
                }
                v35 = &v33[24 * v21];
                v36 = &v33[24 * v31];
                if (v35 == v36)
                {
                  v38 = 0xAAAAAAAAAAAAAAABLL * ((24 * v21) >> 3);
                  if (v35 <= v33)
                  {
                    __srca = v22;
                    if (v35 == v33)
                      v40 = 1;
                    else
                      v40 = 0x5555555555555556 * ((24 * v21) >> 3);
                    if (v40 > 0xAAAAAAAAAAAAAAALL)
LABEL_69:
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    v41 = v33;
                    v42 = (char *)operator new(24 * v40);
                    v35 = &v42[24 * (v40 >> 2)];
                    v36 = &v42[24 * v40];
                    if (v41)
                    {
                      v43 = &v42[24 * v40];
                      operator delete(v41);
                      v36 = v43;
                    }
                    v37 = v63;
                    v22 = __srca;
                  }
                  else
                  {
                    if (v38 >= -1)
                      v39 = v38 + 1;
                    else
                      v39 = v38 + 2;
                    v36 = &v33[24 * v21];
                    v35 -= 24 * (v39 >> 1);
                    v37 = v63;
                  }
                }
                else
                {
                  v37 = v63;
                }
                v44 = *(_OWORD *)v37;
                *((_QWORD *)v35 + 2) = v37[2];
                *(_OWORD *)v35 = v44;
                v45 = *v16;
                v46 = v35;
                if (*v16 != v22)
                {
                  v47 = v22;
                  v48 = v35;
                  do
                  {
                    v49 = *(_OWORD *)(v47 - 24);
                    v46 = v48 - 24;
                    *((_QWORD *)v48 - 1) = *((_QWORD *)v47 - 1);
                    *(_OWORD *)(v48 - 24) = v49;
                    v47 -= 24;
                    v48 -= 24;
                  }
                  while (v47 != v45);
                }
                v50 = v35 + 24;
                v51 = v16[1];
                v52 = v51 - v22;
                if (v51 != v22)
                {
                  __srcb = v36;
                  memmove(v50, v22, v51 - v22);
                  v36 = __srcb;
                }
                v53 = *v16;
                *v16 = v46;
                v16[1] = &v50[v52];
                v16[2] = v36;
                v3 = v62;
                v8 = v63;
                if (v53)
                  operator delete(v53);
              }
              else if (v22 == (char *)v17)
              {
                v34 = *(_OWORD *)v8;
                *(_QWORD *)(v17 + 16) = v8[2];
                *(_OWORD *)v17 = v34;
                v16[1] = (char *)(v17 + 24);
              }
              else
              {
                v24 = v17 - 24;
                v25 = v16[1];
                if (v17 >= 0x18)
                {
                  do
                  {
                    v26 = *(_OWORD *)v24;
                    *((_QWORD *)v25 + 2) = *(_QWORD *)(v24 + 16);
                    *(_OWORD *)v25 = v26;
                    v25 += 24;
                    v24 += 24;
                  }
                  while (v24 < v17);
                }
                v16[1] = v25;
                if ((char *)v17 != v22 + 24)
                {
                  v27 = v22;
                  memmove(v22 + 24, v22, v17 - (_QWORD)(v22 + 24));
                  v22 = v27;
                }
                v28 = v8;
                if (v22 <= (char *)v8)
                  v28 = &v8[3 * (v16[1] > (char *)v8)];
                v10 = *(_OWORD *)v28;
                *((_QWORD *)v22 + 2) = v28[2];
                *(_OWORD *)v22 = v10;
              }
            }
          }
        }
      }
    }
  }
  for (j = (_QWORD *)v7[23]; j; j = (_QWORD *)*j)
  {
    v66 = v6;
    v67 = v5;
    v65 = v4;
    v55 = j[6];
    if (!v55)
      goto LABEL_67;
    (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v55 + 48))(v55, &v65, &v66);
  }
  v56 = (_QWORD *)v7[41];
  if (v56)
  {
    v57 = *(_QWORD *)(v3 + 8);
    while (1)
    {
      v66 = v6;
      v67 = v5;
      v64 = v57;
      v65 = v4;
      v58 = v56[6];
      if (!v58)
        break;
      (*(void (**)(uint64_t, uint64_t *, unint64_t **, uint64_t *))(*(_QWORD *)v58 + 48))(v58, &v65, &v66, &v64);
      v56 = (_QWORD *)*v56;
      if (!v56)
        return;
    }
LABEL_67:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_68:
    abort();
  }
}

void sub_19F3E4100(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[6];
      if (v3 == v2 + 3)
      {
        v4 = 4;
        v3 = v2 + 3;
        goto LABEL_7;
      }
      if (v3)
      {
        v4 = 5;
LABEL_7:
        (*(void (**)(void))(*v3 + 8 * v4))();
      }
    }
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4289E18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E4289E18;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)>::operator()(uint64_t result, uint64_t *a2, __int128 *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;

  v3 = *(_QWORD **)(*(_QWORD *)(result + 8) + 184);
  if (v3)
  {
    v4 = *a2;
    v7 = *a3;
    while (1)
    {
      v9 = v7;
      v8 = v4;
      v5 = v3[6];
      if (!v5)
        break;
      result = (*(uint64_t (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)v5 + 48))(v5, &v8, &v9);
      v3 = (_QWORD *)*v3;
      if (!v3)
        return result;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,void *>>>>::~unique_ptr[abi:nn180100](v6);
  }
  return result;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[3];
      v2[3] = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    operator delete(v2);
  }
  return a1;
}

void gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::overlayComponents::VectorOverlay>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::VectorOverlay>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::VectorOverlay>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD v68[2];

  v66 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  v15 = (_QWORD *)(v14 + 104 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v16 = a1[11];
  *v15 = *(_QWORD *)(v16 - 104);
  v17 = v15 + 1;
  v19 = *(_QWORD *)(v16 - 96);
  v18 = *(_QWORD *)(v16 - 88);
  if (v18)
  {
    v20 = (unint64_t *)(v18 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *v17 = v19;
  v22 = v14 + 104 * v7;
  v23 = *(std::__shared_weak_count **)(v22 + 16);
  *(_QWORD *)(v22 + 16) = v18;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v27 = *(_QWORD *)(v16 - 80);
  v26 = *(_QWORD *)(v16 - 72);
  if (v26)
  {
    v28 = (unint64_t *)(v26 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  *(_QWORD *)(v14 + 104 * v7 + 24) = v27;
  v30 = v14 + 104 * v7;
  v31 = *(std::__shared_weak_count **)(v30 + 32);
  *(_QWORD *)(v30 + 32) = v26;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v35 = *(_QWORD *)(v16 - 64);
  v34 = *(_QWORD *)(v16 - 56);
  if (v34)
  {
    v36 = (unint64_t *)(v34 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  *(_QWORD *)(v14 + 104 * v7 + 40) = v35;
  v38 = v14 + 104 * v7;
  v39 = *(std::__shared_weak_count **)(v38 + 48);
  *(_QWORD *)(v38 + 48) = v34;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v43 = *(_QWORD *)(v16 - 48);
  v42 = *(_QWORD *)(v16 - 40);
  if (v42)
  {
    v44 = (unint64_t *)(v42 + 8);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  *(_QWORD *)(v14 + 104 * v7 + 56) = v43;
  v46 = v14 + 104 * v7;
  v47 = *(std::__shared_weak_count **)(v46 + 64);
  *(_QWORD *)(v46 + 64) = v42;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v51 = *(_QWORD *)(v16 - 32);
  v50 = *(_QWORD *)(v16 - 24);
  if (v50)
  {
    v52 = (unint64_t *)(v50 + 8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  *(_QWORD *)(v14 + 104 * v7 + 72) = v51;
  v54 = v14 + 104 * v7;
  v55 = *(std::__shared_weak_count **)(v54 + 80);
  *(_QWORD *)(v54 + 80) = v50;
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v14 + 104 * v7;
  v59 = *(_QWORD *)(v16 - 16);
  *(_BYTE *)(v58 + 96) = *(_BYTE *)(v16 - 8);
  *(_QWORD *)(v58 + 88) = v59;
  md::overlayComponents::VectorOverlay::~VectorOverlay((md::overlayComponents::VectorOverlay *)(a1[11] - 104));
  a1[11] = v60;
  v61 = (_QWORD *)a1[28];
  if (!v61)
    return 1;
  v62 = a1[31];
  while (1)
  {
    v68[0] = &v66;
    v68[1] = 1;
    v67 = v62;
    v63 = v61[6];
    if (!v63)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v63 + 48))(v63, &v67, v68);
    v61 = (_QWORD *)*v61;
    if (!v61)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::overlayComponents::VectorOverlay>::contains(v64, v65);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::VectorOverlay>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void md::overlayComponents::VectorOverlay::~VectorOverlay(md::overlayComponents::VectorOverlay *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

_QWORD *gdc::ComponentStorageWrapper<md::overlayComponents::VectorOverlay>::~ComponentStorageWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  v2 = a1[10];
  if (v2)
  {
    v3 = a1[11];
    v4 = (void *)a1[10];
    if (v3 != v2)
    {
      do
        md::overlayComponents::VectorOverlay::~VectorOverlay((md::overlayComponents::VectorOverlay *)(v3 - 104));
      while (v3 != v2);
      v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  v5 = (void *)a1[7];
  if (v5)
  {
    a1[8] = v5;
    operator delete(v5);
  }
  v6 = (_QWORD *)a1[4];
  if (v6)
  {
    v7 = (_QWORD *)a1[5];
    v8 = (void *)a1[4];
    if (v7 != v6)
    {
      do
      {
        v10 = *--v7;
        v9 = v10;
        *v7 = 0;
        if (v10)
          MEMORY[0x1A1AF4E00](v9, 0x1000C40104B78CFLL);
      }
      while (v7 != v6);
      v8 = (void *)a1[4];
    }
    a1[5] = v6;
    operator delete(v8);
  }
  return a1;
}

void _ZZN2md12DrapingLogic29runBeforeLayoutAtVariableRateERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_15OverlaysContextENS_13CameraContextENS_19PendingSceneContextENS_16ElevationContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_14DrapingContextEENK3__1clENS5_6EntityERNS_17overlayComponents17RasterOverlayBaseINS_15OverlayTileData19OverlayTileResource10RasterTileEEERNSt3__113unordered_mapIPNS5_8RegistryENSS_6vectorISK_NSS_9allocatorISK_EEEENSS_4hashISV_EENSS_8equal_toISV_EENSX_INSS_4pairIKSV_SZ_EEEEEERNSW_ISV_NSX_ISV_EEEE(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, unint64_t **a5)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  _BOOL4 v21;
  _QWORD *CanDisable;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  int8x8_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  char v48;
  unint64_t v49;
  _QWORD *i;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  size_t v59;
  char *v60;
  char *v61;
  char *v62;
  _QWORD *j;
  uint64_t v64;
  uint64_t v65;
  int8x8_t v66;
  uint8x8_t v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  char v78;
  unint64_t v79;
  _QWORD *k;
  uint64_t v81;
  unint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  size_t v89;
  char *v90;
  char *v91;
  char *v92;
  _QWORD *m;
  uint64_t v94;
  _QWORD *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int8x8_t v102;
  uint8x8_t v103;
  unint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int8x8_t v110;
  uint8x8_t v111;
  unint64_t v112;
  uint64_t **v113;
  uint64_t *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  int8x8_t v118;
  uint8x8_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  NSObject *v136;
  uint64_t v137;
  _OWORD *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t *v141;
  char *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t *v147;
  uint64_t *v148;
  int8x8_t v149;
  uint8x8_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  unsigned int v168;
  unsigned int v169;
  char v170;
  double v171;
  float v172;
  float v173;
  float v174;
  uint64_t *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *p_shared_owners;
  unint64_t v181;
  _QWORD *v182;
  uint64_t *v183;
  uint64_t v184;
  int8x8_t v185;
  uint8x8_t v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  _QWORD *v196;
  char v197;
  unint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  unint64_t v201;
  _BYTE *v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  size_t v208;
  char *v209;
  char *v210;
  char *v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  int8x8_t v215;
  uint8x8_t v216;
  unint64_t v217;
  _QWORD *v218;
  _QWORD *v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  _QWORD *v226;
  char v227;
  unint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  unint64_t v231;
  _BYTE *v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  size_t v238;
  char *v239;
  char *v240;
  char *v241;
  _QWORD *n;
  uint64_t v243;
  uint64_t v244;
  unint64_t *v246;
  unint64_t *v247;
  _QWORD *v248;
  _QWORD *v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t *v252;
  int8x8_t *v253;
  uint64_t *v254;
  uint64_t *v255;
  uint64_t v256;
  unint64_t *v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  unint64_t v262;
  _BYTE buf[32];
  __int128 v264;
  __int128 v265;
  __int128 v266;
  _OWORD v267[2];
  uint64_t v268;

  v268 = *MEMORY[0x1E0C80C00];
  v253 = (int8x8_t *)gdc::Registry::getOrAdd<gdc::components::RegistryBridgeMap<gdc::Entity>>(**(_QWORD **)a1, a2);
  v9 = (_QWORD *)gdc::Registry::storage<md::overlayComponents::TileIsInView>(**(_QWORD **)a1);
  v10 = a2 >> 39;
  v11 = v9[4];
  if (a2 >> 39 < (v9[5] - v11) >> 3
    && (v12 = *(_QWORD *)(v11 + 8 * v10)) != 0
    && (v13 = *(unsigned __int16 *)(v12 + 2 * (HIDWORD(a2) & 0x7F)), v15 = v9[7], v14 = v9[8], v13 < (v14 - v15) >> 3)
    && ((v16 = v15 + 8 * v13, v16 != v14) ? (v17 = *(_DWORD *)(v16 + 4) == HIDWORD(a2)) : (v17 = 0), v17))
  {
    v18 = v9[11];
    v19 = v9[10] + v13;
  }
  else
  {
    v18 = v9[11];
    v19 = v18;
  }
  v21 = v19 == v18 || v19 == 0;
  CanDisable = (_QWORD *)gdc::Registry::storage<md::overlayComponents::CanDisableDraping>(**(_QWORD **)a1);
  v23 = CanDisable[4];
  if (v10 < (CanDisable[5] - v23) >> 3)
  {
    v24 = *(_QWORD *)(v23 + 8 * v10);
    if (v24)
    {
      v25 = *(unsigned __int16 *)(v24 + 2 * (HIDWORD(a2) & 0x7F));
      v27 = CanDisable[7];
      v26 = CanDisable[8];
      if (v25 < (v26 - v27) >> 3)
      {
        v28 = v27 + 8 * v25;
        if (v28 != v26 && *(_DWORD *)(v28 + 4) == HIDWORD(a2))
        {
          v30 = CanDisable[10];
          v31 = v30 + v25;
          v32 = !v30 || v31 == CanDisable[11];
          if (!v32 && **(_BYTE **)(a1 + 8))
            return;
        }
      }
    }
  }
  if (!v21)
  {
    v95 = *(_QWORD **)(a4 + 16);
    if (!v95)
      return;
    while (1)
    {
      v96 = (unint64_t *)v95[3];
      v257 = (unint64_t *)v95[4];
      if (v96 != v257)
        break;
LABEL_139:
      v95 = (_QWORD *)*v95;
      if (!v95)
        return;
    }
    v97 = v95[2];
    v98 = 0x9DDFEA08EB382D69 * (((8 * v97) + 8) ^ HIDWORD(v97));
    v99 = 0x9DDFEA08EB382D69 * (HIDWORD(v97) ^ (v98 >> 47) ^ v98);
    v100 = 0x9DDFEA08EB382D69 * (v99 ^ (v99 >> 47));
    v248 = v95;
LABEL_143:
    v101 = *v96;
    v262 = *v96;
    v102 = v253[2];
    if (!*(_QWORD *)&v102)
      goto LABEL_187;
    v103 = (uint8x8_t)vcnt_s8(v102);
    v103.i16[0] = vaddlv_u8(v103);
    if (v103.u32[0] > 1uLL)
    {
      v104 = v100;
      if (v100 >= *(_QWORD *)&v102)
        v104 = v100 % *(_QWORD *)&v102;
    }
    else
    {
      v104 = (*(_QWORD *)&v102 - 1) & v100;
    }
    v105 = *(_QWORD **)(*(_QWORD *)&v253[1] + 8 * v104);
    if (!v105)
      goto LABEL_187;
    v106 = (_QWORD *)*v105;
    if (!v106)
      goto LABEL_187;
    if (v103.u32[0] < 2uLL)
    {
      v107 = *(_QWORD *)&v102 - 1;
      while (1)
      {
        v109 = v106[1];
        if (v100 == v109)
        {
          if (v106[2] == v97)
            goto LABEL_164;
        }
        else if ((v109 & v107) != v104)
        {
          goto LABEL_187;
        }
        v106 = (_QWORD *)*v106;
        if (!v106)
          goto LABEL_187;
      }
    }
    while (1)
    {
      v108 = v106[1];
      if (v100 == v108)
      {
        if (v106[2] == v97)
        {
LABEL_164:
          v110 = (int8x8_t)v106[4];
          if (v110)
          {
            v111 = (uint8x8_t)vcnt_s8(v110);
            v111.i16[0] = vaddlv_u8(v111);
            if (v111.u32[0] > 1uLL)
            {
              v112 = v101;
              if (v101 >= *(_QWORD *)&v110)
                v112 = v101 % *(_QWORD *)&v110;
            }
            else
            {
              v112 = (*(_QWORD *)&v110 - 1) & v101;
            }
            v113 = *(uint64_t ***)(v106[3] + 8 * v112);
            if (v113)
            {
              v114 = *v113;
              if (v114)
              {
                if (v111.u32[0] >= 2uLL)
                {
                  while (1)
                  {
                    v116 = v114[1];
                    if (v101 == v116)
                    {
                      if (__PAIR64__(*((unsigned __int16 *)v114 + 9), *((unsigned __int16 *)v114 + 8)) == __PAIR64__(WORD1(v101), (unsigned __int16)v101)
                        && *((_DWORD *)v114 + 5) == HIDWORD(v101))
                      {
                        goto LABEL_142;
                      }
                    }
                    else
                    {
                      if (v116 >= *(_QWORD *)&v110)
                        v116 %= *(_QWORD *)&v110;
                      if (v116 != v112)
                        goto LABEL_187;
                    }
                    v114 = (uint64_t *)*v114;
                    if (!v114)
                      goto LABEL_187;
                  }
                }
                v115 = *(_QWORD *)&v110 - 1;
                do
                {
                  v117 = v114[1];
                  if (v101 == v117)
                  {
                    if (__PAIR64__(*((unsigned __int16 *)v114 + 9), *((unsigned __int16 *)v114 + 8)) == __PAIR64__(WORD1(v101), (unsigned __int16)v101)
                      && *((_DWORD *)v114 + 5) == HIDWORD(v101))
                    {
                      goto LABEL_142;
                    }
                  }
                  else if ((v117 & v115) != v112)
                  {
                    break;
                  }
                  v114 = (uint64_t *)*v114;
                }
                while (v114);
              }
            }
          }
LABEL_187:
          v259 = 0x6307588E3A87BAE2;
          v118 = *(int8x8_t *)(v97 + 128);
          if (v118)
          {
            v119 = (uint8x8_t)vcnt_s8(v118);
            v119.i16[0] = vaddlv_u8(v119);
            if (v119.u32[0] > 1uLL)
            {
              v120 = 0x6307588E3A87BAE2;
              if (*(_QWORD *)&v118 <= 0x6307588E3A87BAE2uLL)
                v120 = 0x6307588E3A87BAE2uLL % *(_QWORD *)&v118;
            }
            else
            {
              v120 = (*(_QWORD *)&v118 - 1) & 0x6307588E3A87BAE2;
            }
            v121 = *(_QWORD **)(*(_QWORD *)(v97 + 120) + 8 * v120);
            if (v121)
            {
              v122 = (_QWORD *)*v121;
              if (v122)
              {
                if (v119.u32[0] < 2uLL)
                {
                  v123 = *(_QWORD *)&v118 - 1;
                  while (1)
                  {
                    v125 = v122[1];
                    if (v125 == 0x6307588E3A87BAE2)
                    {
                      if (v122[2] == 0x6307588E3A87BAE2)
                        goto LABEL_231;
                    }
                    else if ((v125 & v123) != v120)
                    {
                      goto LABEL_207;
                    }
                    v122 = (_QWORD *)*v122;
                    if (!v122)
                      goto LABEL_207;
                  }
                }
                do
                {
                  v124 = v122[1];
                  if (v124 == 0x6307588E3A87BAE2)
                  {
                    if (v122[2] == 0x6307588E3A87BAE2)
                    {
LABEL_231:
                      v126 = v122[3];
                      goto LABEL_210;
                    }
                  }
                  else
                  {
                    if (v124 >= *(_QWORD *)&v118)
                      v124 %= *(_QWORD *)&v118;
                    if (v124 != v120)
                      break;
                  }
                  v122 = (_QWORD *)*v122;
                }
                while (v122);
              }
            }
          }
LABEL_207:
          v126 = operator new();
          *(_QWORD *)(v126 + 16) = "md::components::MeshInstance]";
          *(_QWORD *)(v126 + 24) = 28;
          *(_OWORD *)(v126 + 32) = 0u;
          *(_OWORD *)(v126 + 48) = 0u;
          *(_OWORD *)(v126 + 64) = 0u;
          *(_OWORD *)(v126 + 80) = 0u;
          *(_OWORD *)(v126 + 96) = 0u;
          *(_OWORD *)(v126 + 112) = 0u;
          *(_OWORD *)(v126 + 128) = 0u;
          *(_DWORD *)(v126 + 144) = 1065353216;
          *(_OWORD *)(v126 + 152) = 0u;
          *(_OWORD *)(v126 + 168) = 0u;
          *(_QWORD *)(v126 + 184) = 0;
          *(_DWORD *)(v126 + 192) = 1065353216;
          *(_OWORD *)(v126 + 200) = 0u;
          *(_OWORD *)(v126 + 216) = 0u;
          *(_QWORD *)(v126 + 232) = 0;
          *(_DWORD *)(v126 + 240) = 1065353216;
          *(_QWORD *)v126 = &off_1E42B2F58;
          *(_QWORD *)(v126 + 8) = 0x6307588E3A87BAE2;
          *(_QWORD *)(v126 + 248) = v97;
          v127 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v97 + 120), 0x6307588E3A87BAE2uLL, &v259);
          v128 = v127[3];
          v127[3] = v126;
          if (v128)
            (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
          *(_QWORD *)buf = 0x6307588E3A87BAE2;
          *(_QWORD *)&buf[8] = "md::components::MeshInstance]";
          *(_QWORD *)&buf[16] = 28;
          gdc::Registry::_registerStorageDataSignals(v97, 0x6307588E3A87BAE2, (uint64_t)buf, (uint64_t *)(v126 + 104));
LABEL_210:
          v129 = *(_QWORD *)(v126 + 32);
          if (v101 >> 39 >= (*(_QWORD *)(v126 + 40) - v129) >> 3)
            goto LABEL_217;
          v130 = *(_QWORD *)(v129 + 8 * (v101 >> 39));
          if (!v130)
            goto LABEL_217;
          v131 = *(unsigned __int16 *)(v130 + 2 * (HIDWORD(v101) & 0x7F));
          v133 = *(_QWORD *)(v126 + 56);
          v132 = *(_QWORD *)(v126 + 64);
          if (v131 >= (v132 - v133) >> 3)
            goto LABEL_217;
          v134 = v133 + 8 * v131;
          v135 = v134 != v132 && *(_DWORD *)(v134 + 4) == HIDWORD(v101);
          if (!v135
            || (v137 = *(_QWORD *)(v126 + 80)) == 0
            || (v138 = (_OWORD *)(v137 + 112 * v131), v138 == *(_OWORD **)(v126 + 88)))
          {
LABEL_217:
            if (GEOGetVectorKitDrapingLogicLog(void)::onceToken != -1)
              dispatch_once(&GEOGetVectorKitDrapingLogicLog(void)::onceToken, &__block_literal_global_0);
            v136 = GEOGetVectorKitDrapingLogicLog(void)::log;
            if (os_log_type_enabled((os_log_t)GEOGetVectorKitDrapingLogicLog(void)::log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "false";
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/Overlays/DrapingLogic.mm";
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = 307;
              _os_log_impl(&dword_19F029000, v136, OS_LOG_TYPE_ERROR, "Entity MUST have a mesh instance: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
            }
            goto LABEL_142;
          }
          v139 = *(_QWORD *)(gdc::components::RegistryBridgeMap<gdc::Entity>::nodeForRegistryAndKey((uint64_t)v253, v97, &v262)+ 16);
          v140 = (uint64_t *)gdc::Registry::storage<md::components::MeshInstance>(v97);
          v265 = v138[3];
          v266 = v138[4];
          v267[0] = v138[5];
          *(_OWORD *)((char *)v267 + 12) = *(_OWORD *)((char *)v138 + 92);
          *(_OWORD *)buf = *v138;
          *(_OWORD *)&buf[16] = v138[1];
          v264 = v138[2];
          gdc::ComponentStorageWrapper<md::components::MeshInstance>::emplace(v140, v139, (__int128 *)buf);
          v141 = (uint64_t *)gdc::Registry::storage<md::components::Visibility>(v97);
          buf[0] = 1;
          gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v141, v139, buf);
          v142 = (char *)operator new(0x50uLL);
          *((_QWORD *)v142 + 1) = 0;
          *((_QWORD *)v142 + 2) = 0;
          *(_QWORD *)v142 = &off_1E42DC7E8;
          v142[32] = 1;
          *(_OWORD *)(v142 + 40) = 0u;
          *(_OWORD *)(v142 + 56) = 0u;
          *((_QWORD *)v142 + 9) = &md::ZeroBlendFactor;
          *((_QWORD *)v142 + 3) = &off_1E429BA20;
          *(_QWORD *)buf = v142 + 24;
          *(_QWORD *)&buf[8] = v142;
          v143 = gdc::Registry::storage<md::components::Material>(v97);
          gdc::ComponentStorageWrapper<md::components::Material>::emplace<int,std::shared_ptr<gms::Material<ggl::Texture2D>>>(v143, v139, 0, (uint64_t *)buf);
          v144 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v145 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v146 = __ldaxr(v145);
            while (__stlxr(v146 - 1, v145));
            if (!v146)
            {
              ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
              std::__shared_weak_count::__release_weak(v144);
            }
          }
          v147 = (uint64_t *)gdc::Registry::storage<md::components::Collapsible>(v97);
          gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v147, v139);
          v148 = (uint64_t *)gdc::Registry::storage<md::components::IntendedSceneLayer>(v97);
          buf[0] = 4;
          gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v148, v139, buf);
          v149 = *(int8x8_t *)(v97 + 8);
          v251 = v139;
          if (!*(_QWORD *)&v149)
            goto LABEL_252;
          v150 = (uint8x8_t)vcnt_s8(v149);
          v150.i16[0] = vaddlv_u8(v150);
          if (v150.u32[0] > 1uLL)
          {
            v151 = 0x64A448A5CD5D38DBLL;
            if (*(_QWORD *)&v149 <= 0x64A448A5CD5D38DBuLL)
              v151 = 0x64A448A5CD5D38DBuLL % *(_QWORD *)&v149;
          }
          else
          {
            v151 = (*(_QWORD *)&v149 - 1) & 0x64A448A5CD5D38DBLL;
          }
          v152 = *(_QWORD **)(*(_QWORD *)v97 + 8 * v151);
          if (!v152)
            goto LABEL_252;
          v153 = (_QWORD *)*v152;
          if (!v153)
            goto LABEL_252;
          if (v150.u32[0] < 2uLL)
          {
            v154 = *(_QWORD *)&v149 - 1;
            while (1)
            {
              v156 = v153[1];
              if (v156 == 0x64A448A5CD5D38DBLL)
              {
                if (v153[2] == 0x64A448A5CD5D38DBLL)
                  goto LABEL_250;
              }
              else if ((v156 & v154) != v151)
              {
                goto LABEL_252;
              }
              v153 = (_QWORD *)*v153;
              if (!v153)
                goto LABEL_252;
            }
          }
          while (2)
          {
            v155 = v153[1];
            if (v155 != 0x64A448A5CD5D38DBLL)
            {
              if (v155 >= *(_QWORD *)&v149)
                v155 %= *(_QWORD *)&v149;
              if (v155 != v151)
                goto LABEL_252;
              goto LABEL_239;
            }
            if (v153[2] != 0x64A448A5CD5D38DBLL)
            {
LABEL_239:
              v153 = (_QWORD *)*v153;
              if (!v153)
                goto LABEL_252;
              continue;
            }
            break;
          }
LABEL_250:
          v157 = v153[5];
          if (*(_QWORD *)(v157 + 8) == 0x64A448A5CD5D38DBLL)
          {
            v158 = *(_QWORD *)(v157 + 32);
            goto LABEL_253;
          }
LABEL_252:
          v158 = 0;
LABEL_253:
          v159 = *a3;
          v160 = *(_QWORD *)(*a3 + 24);
          *(_QWORD *)buf = *(_QWORD *)(*a3 + 16);
          *(_QWORD *)&buf[8] = v160;
          v161 = v159;
          if (v160)
          {
            v162 = (unint64_t *)(v160 + 8);
            do
              v163 = __ldxr(v162);
            while (__stxr(v163 + 1, v162));
            v161 = *a3;
          }
          buf[28] = 1;
          v165 = *(_QWORD *)(v161 + 112);
          v164 = *(_QWORD *)(v161 + 120);
          *(_QWORD *)&v264 = v165;
          *((_QWORD *)&v264 + 1) = v164;
          if (v164)
          {
            v166 = (unint64_t *)(v164 + 8);
            do
              v167 = __ldxr(v166);
            while (__stxr(v167 + 1, v166));
          }
          v168 = *(unsigned __int8 *)(v159 + 33);
          v169 = *(unsigned __int8 *)(v158 + 1);
          v170 = v168 - v169;
          __powidf2();
          v172 = v171;
          *(float *)&buf[24] = v172;
          if (v168 >= v169)
          {
            v173 = (float)(*(_DWORD *)(v159 + 40) - (*(_DWORD *)(v158 + 8) << v170)) / v172;
            v174 = 1.0 - (float)((float)(*(_DWORD *)(v159 + 36) - (*(_DWORD *)(v158 + 4) << v170) + 1) / v172);
            *(float *)&buf[16] = v173;
            *(float *)&buf[20] = v174;
          }
          v175 = (uint64_t *)gdc::Registry::storage<md::overlayComponents::DrapedRasterOverlay>(v97);
          v95 = v248;
          gdc::ComponentStorageWrapper<md::overlayComponents::DrapedRasterOverlay>::emplace(v175, v251, (__int128 *)buf);
          v176 = (std::__shared_weak_count *)*((_QWORD *)&v264 + 1);
          if (!*((_QWORD *)&v264 + 1))
            goto LABEL_266;
          v177 = (unint64_t *)(*((_QWORD *)&v264 + 1) + 8);
          do
            v178 = __ldaxr(v177);
          while (__stlxr(v178 - 1, v177));
          if (!v178)
          {
            ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
            std::__shared_weak_count::__release_weak(v176);
            v179 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
LABEL_267:
              p_shared_owners = (unint64_t *)&v179->__shared_owners_;
              do
                v181 = __ldaxr(p_shared_owners);
              while (__stlxr(v181 - 1, p_shared_owners));
              if (!v181)
              {
                ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                std::__shared_weak_count::__release_weak(v179);
              }
            }
          }
          else
          {
LABEL_266:
            v179 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
              goto LABEL_267;
          }
LABEL_142:
          if (++v96 == v257)
            goto LABEL_139;
          goto LABEL_143;
        }
      }
      else
      {
        if (v108 >= *(_QWORD *)&v102)
          v108 %= *(_QWORD *)&v102;
        if (v108 != v104)
          goto LABEL_187;
      }
      v106 = (_QWORD *)*v106;
      if (!v106)
        goto LABEL_187;
    }
  }
  v33 = *a5;
  v244 = a4;
  v246 = a5[1];
  if (*a5 == v246)
    goto LABEL_273;
  while (2)
  {
    v256 = *v33;
    gdc::components::RegistryBridgeMap<gdc::Entity>::entities(&v259, v253, *v33);
    v34 = (uint64_t *)v259;
    v250 = v260;
    if ((uint64_t *)v259 == v260)
      goto LABEL_135;
    v247 = v33;
    v254 = (uint64_t *)(v256 + 120);
    do
    {
      v35 = *v34;
      v262 = 0x257EF5A82043772ELL;
      v36 = *(int8x8_t *)(v256 + 128);
      if (v36)
      {
        v37 = (uint8x8_t)vcnt_s8(v36);
        v37.i16[0] = vaddlv_u8(v37);
        if (v37.u32[0] > 1uLL)
        {
          v38 = 0x257EF5A82043772ELL;
          if (*(_QWORD *)&v36 <= 0x257EF5A82043772EuLL)
            v38 = 0x257EF5A82043772EuLL % *(_QWORD *)&v36;
        }
        else
        {
          v38 = (*(_QWORD *)&v36 - 1) & 0x257EF5A82043772ELL;
        }
        v39 = *(_QWORD **)(*v254 + 8 * v38);
        if (v39)
        {
          v40 = (_QWORD *)*v39;
          if (v40)
          {
            if (v37.u32[0] < 2uLL)
            {
              v41 = *(_QWORD *)&v36 - 1;
              while (1)
              {
                v43 = v40[1];
                if (v43 == 0x257EF5A82043772ELL)
                {
                  if (v40[2] == 0x257EF5A82043772ELL)
                    goto LABEL_132;
                }
                else if ((v43 & v41) != v38)
                {
                  goto LABEL_55;
                }
                v40 = (_QWORD *)*v40;
                if (!v40)
                  goto LABEL_55;
              }
            }
            do
            {
              v42 = v40[1];
              if (v42 == 0x257EF5A82043772ELL)
              {
                if (v40[2] == 0x257EF5A82043772ELL)
                {
LABEL_132:
                  v44 = v40[3];
                  goto LABEL_58;
                }
              }
              else
              {
                if (v42 >= *(_QWORD *)&v36)
                  v42 %= *(_QWORD *)&v36;
                if (v42 != v38)
                  break;
              }
              v40 = (_QWORD *)*v40;
            }
            while (v40);
          }
        }
      }
LABEL_55:
      v44 = operator new();
      *(_QWORD *)(v44 + 16) = "md::components::QueuedForDestruction<>]";
      *(_QWORD *)(v44 + 24) = 38;
      *(_OWORD *)(v44 + 32) = 0u;
      *(_OWORD *)(v44 + 48) = 0u;
      *(_OWORD *)(v44 + 64) = 0u;
      *(_OWORD *)(v44 + 80) = 0u;
      *(_OWORD *)(v44 + 96) = 0u;
      *(_OWORD *)(v44 + 112) = 0u;
      *(_OWORD *)(v44 + 128) = 0u;
      *(_DWORD *)(v44 + 144) = 1065353216;
      *(_OWORD *)(v44 + 152) = 0u;
      *(_OWORD *)(v44 + 168) = 0u;
      *(_QWORD *)(v44 + 184) = 0;
      *(_DWORD *)(v44 + 192) = 1065353216;
      *(_OWORD *)(v44 + 200) = 0u;
      *(_OWORD *)(v44 + 216) = 0u;
      *(_QWORD *)(v44 + 232) = 0;
      *(_DWORD *)(v44 + 240) = 1065353216;
      *(_QWORD *)v44 = &off_1E42B3228;
      *(_QWORD *)(v44 + 8) = 0x257EF5A82043772ELL;
      *(_QWORD *)(v44 + 248) = v256;
      v45 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v254, 0x257EF5A82043772EuLL, &v262);
      v46 = v45[3];
      v45[3] = v44;
      if (v46)
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
      *(_QWORD *)buf = 0x257EF5A82043772ELL;
      *(_QWORD *)&buf[8] = "md::components::QueuedForDestruction<>]";
      *(_QWORD *)&buf[16] = 38;
      gdc::Registry::_registerStorageDataSignals(v256, 0x257EF5A82043772ELL, (uint64_t)buf, (uint64_t *)(v44 + 104));
LABEL_58:
      v261 = v35;
      v47 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v44 + 32), (uint64_t)&v261);
      if ((v48 & 1) != 0)
      {
        v53 = *(_BYTE **)(v44 + 88);
        v52 = *(_QWORD *)(v44 + 96);
        if ((unint64_t)v53 >= v52)
        {
          v55 = *(char **)(v44 + 80);
          v56 = v53 - v55;
          v57 = v53 - v55 + 1;
          if (v57 < 0)
            goto LABEL_385;
          v58 = v52 - (_QWORD)v55;
          if (2 * v58 > v57)
            v57 = 2 * v58;
          if (v58 >= 0x3FFFFFFFFFFFFFFFLL)
            v59 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v59 = v57;
          if (v59)
            v60 = (char *)operator new(v59);
          else
            v60 = 0;
          v61 = &v60[v59];
          v54 = (uint64_t)&v60[v56 + 1];
          v62 = (char *)(v55 - v53);
          if (v55 == v53)
            v62 = 0;
          *(_QWORD *)(v44 + 80) = &v60[v56 + (_QWORD)v62];
          *(_QWORD *)(v44 + 88) = v54;
          *(_QWORD *)(v44 + 96) = v61;
          if (v55)
            operator delete(v55);
        }
        else
        {
          v54 = (uint64_t)(v53 + 1);
        }
        *(_QWORD *)(v44 + 88) = v54;
        v49 = *(_QWORD *)(v44 + 248);
      }
      else
      {
        v49 = *(_QWORD *)(v44 + 248);
        if (*(_QWORD *)(v44 + 80) + (((uint64_t)v47 - *(_QWORD *)(v44 + 56)) >> 3) != *(_QWORD *)(v44 + 88))
        {
          for (i = *(_QWORD **)(v44 + 128); i; i = (_QWORD *)*i)
          {
            *(_QWORD *)buf = &v261;
            *(_QWORD *)&buf[8] = 1;
            v262 = v49;
            v51 = i[6];
            if (!v51)
              goto LABEL_383;
            (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v51 + 48))(v51, &v262, buf);
          }
          goto LABEL_83;
        }
      }
      for (j = *(_QWORD **)(v44 + 176); j; j = (_QWORD *)*j)
      {
        *(_QWORD *)buf = &v261;
        *(_QWORD *)&buf[8] = 1;
        v262 = v49;
        v64 = j[6];
        if (!v64)
          goto LABEL_383;
        (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v64 + 48))(v64, &v262, buf);
      }
LABEL_83:
      v65 = *v34;
      v262 = 0xB02BC19BABA3EE9ELL;
      v66 = *(int8x8_t *)(v256 + 128);
      if (v66)
      {
        v67 = (uint8x8_t)vcnt_s8(v66);
        v67.i16[0] = vaddlv_u8(v67);
        if (v67.u32[0] > 1uLL)
        {
          v68 = 0xB02BC19BABA3EE9ELL;
          if (*(_QWORD *)&v66 <= 0xB02BC19BABA3EE9ELL)
            v68 = 0xB02BC19BABA3EE9ELL % *(_QWORD *)&v66;
        }
        else
        {
          v68 = (*(_QWORD *)&v66 - 1) & 0xB02BC19BABA3EE9ELL;
        }
        v69 = *(_QWORD **)(*v254 + 8 * v68);
        if (v69)
        {
          v70 = (_QWORD *)*v69;
          if (v70)
          {
            if (v67.u32[0] < 2uLL)
            {
              v71 = *(_QWORD *)&v66 - 1;
              while (1)
              {
                v73 = v70[1];
                if (v73 == 0xB02BC19BABA3EE9ELL)
                {
                  if (v70[2] == 0xB02BC19BABA3EE9ELL)
                    goto LABEL_133;
                }
                else if ((v73 & v71) != v68)
                {
                  goto LABEL_103;
                }
                v70 = (_QWORD *)*v70;
                if (!v70)
                  goto LABEL_103;
              }
            }
            do
            {
              v72 = v70[1];
              if (v72 == 0xB02BC19BABA3EE9ELL)
              {
                if (v70[2] == 0xB02BC19BABA3EE9ELL)
                {
LABEL_133:
                  v74 = v70[3];
                  goto LABEL_106;
                }
              }
              else
              {
                if (v72 >= *(_QWORD *)&v66)
                  v72 %= *(_QWORD *)&v66;
                if (v72 != v68)
                  break;
              }
              v70 = (_QWORD *)*v70;
            }
            while (v70);
          }
        }
      }
LABEL_103:
      v74 = operator new();
      *(_QWORD *)(v74 + 16) = "md::components::QueuedForDestruction<md::DrapingLogic>]";
      *(_QWORD *)(v74 + 24) = 54;
      *(_OWORD *)(v74 + 32) = 0u;
      *(_OWORD *)(v74 + 48) = 0u;
      *(_OWORD *)(v74 + 64) = 0u;
      *(_OWORD *)(v74 + 80) = 0u;
      *(_OWORD *)(v74 + 96) = 0u;
      *(_OWORD *)(v74 + 112) = 0u;
      *(_OWORD *)(v74 + 128) = 0u;
      *(_DWORD *)(v74 + 144) = 1065353216;
      *(_OWORD *)(v74 + 152) = 0u;
      *(_OWORD *)(v74 + 168) = 0u;
      *(_QWORD *)(v74 + 184) = 0;
      *(_DWORD *)(v74 + 192) = 1065353216;
      *(_OWORD *)(v74 + 200) = 0u;
      *(_OWORD *)(v74 + 216) = 0u;
      *(_QWORD *)(v74 + 232) = 0;
      *(_DWORD *)(v74 + 240) = 1065353216;
      *(_QWORD *)v74 = &off_1E42B3288;
      *(_QWORD *)(v74 + 8) = 0xB02BC19BABA3EE9ELL;
      *(_QWORD *)(v74 + 248) = v256;
      v75 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v254, 0xB02BC19BABA3EE9ELL, &v262);
      v76 = v75[3];
      v75[3] = v74;
      if (v76)
        (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
      *(_QWORD *)buf = 0xB02BC19BABA3EE9ELL;
      *(_QWORD *)&buf[8] = "md::components::QueuedForDestruction<md::DrapingLogic>]";
      *(_QWORD *)&buf[16] = 54;
      gdc::Registry::_registerStorageDataSignals(v256, 0xB02BC19BABA3EE9ELL, (uint64_t)buf, (uint64_t *)(v74 + 104));
LABEL_106:
      v261 = v65;
      v77 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v74 + 32), (uint64_t)&v261);
      if ((v78 & 1) != 0)
      {
        v83 = *(_BYTE **)(v74 + 88);
        v82 = *(_QWORD *)(v74 + 96);
        if ((unint64_t)v83 >= v82)
        {
          v85 = *(char **)(v74 + 80);
          v86 = v83 - v85;
          v87 = v83 - v85 + 1;
          if (v87 < 0)
LABEL_385:
            abort();
          v88 = v82 - (_QWORD)v85;
          if (2 * v88 > v87)
            v87 = 2 * v88;
          if (v88 >= 0x3FFFFFFFFFFFFFFFLL)
            v89 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v89 = v87;
          if (v89)
            v90 = (char *)operator new(v89);
          else
            v90 = 0;
          v91 = &v90[v89];
          v84 = (uint64_t)&v90[v86 + 1];
          v92 = (char *)(v85 - v83);
          if (v85 == v83)
            v92 = 0;
          *(_QWORD *)(v74 + 80) = &v90[v86 + (_QWORD)v92];
          *(_QWORD *)(v74 + 88) = v84;
          *(_QWORD *)(v74 + 96) = v91;
          if (v85)
            operator delete(v85);
        }
        else
        {
          v84 = (uint64_t)(v83 + 1);
        }
        *(_QWORD *)(v74 + 88) = v84;
        v79 = *(_QWORD *)(v74 + 248);
      }
      else
      {
        v79 = *(_QWORD *)(v74 + 248);
        if (*(_QWORD *)(v74 + 80) + (((uint64_t)v77 - *(_QWORD *)(v74 + 56)) >> 3) != *(_QWORD *)(v74 + 88))
        {
          for (k = *(_QWORD **)(v74 + 128); k; k = (_QWORD *)*k)
          {
            *(_QWORD *)buf = &v261;
            *(_QWORD *)&buf[8] = 1;
            v262 = v79;
            v81 = k[6];
            if (!v81)
              goto LABEL_383;
            (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v81 + 48))(v81, &v262, buf);
          }
          goto LABEL_34;
        }
      }
      for (m = *(_QWORD **)(v74 + 176); m; m = (_QWORD *)*m)
      {
        *(_QWORD *)buf = &v261;
        *(_QWORD *)&buf[8] = 1;
        v262 = v79;
        v94 = m[6];
        if (!v94)
          goto LABEL_383;
        (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v94 + 48))(v94, &v262, buf);
      }
LABEL_34:
      ++v34;
    }
    while (v34 != v250);
    v34 = (uint64_t *)v259;
    v33 = v247;
LABEL_135:
    if (v34)
      operator delete(v34);
    if (++v33 != v246)
      continue;
    break;
  }
LABEL_273:
  v182 = *(_QWORD **)(v244 + 16);
  if (!v182)
    return;
  while (2)
  {
    v258 = v182[2];
    gdc::components::RegistryBridgeMap<gdc::Entity>::entities(&v259, v253, v258);
    v183 = (uint64_t *)v259;
    v252 = v260;
    if ((uint64_t *)v259 == v260)
      goto LABEL_379;
    v249 = v182;
    v255 = (uint64_t *)(v258 + 120);
    while (2)
    {
      v184 = *v183;
      v262 = 0x257EF5A82043772ELL;
      v185 = *(int8x8_t *)(v258 + 128);
      if (v185)
      {
        v186 = (uint8x8_t)vcnt_s8(v185);
        v186.i16[0] = vaddlv_u8(v186);
        if (v186.u32[0] > 1uLL)
        {
          v187 = 0x257EF5A82043772ELL;
          if (*(_QWORD *)&v185 <= 0x257EF5A82043772EuLL)
            v187 = 0x257EF5A82043772EuLL % *(_QWORD *)&v185;
        }
        else
        {
          v187 = (*(_QWORD *)&v185 - 1) & 0x257EF5A82043772ELL;
        }
        v188 = *(_QWORD **)(*v255 + 8 * v187);
        if (v188)
        {
          v189 = (_QWORD *)*v188;
          if (v189)
          {
            if (v186.u32[0] < 2uLL)
            {
              v190 = *(_QWORD *)&v185 - 1;
              while (1)
              {
                v192 = v189[1];
                if (v192 == 0x257EF5A82043772ELL)
                {
                  if (v189[2] == 0x257EF5A82043772ELL)
                    goto LABEL_376;
                }
                else if ((v192 & v190) != v187)
                {
                  goto LABEL_299;
                }
                v189 = (_QWORD *)*v189;
                if (!v189)
                  goto LABEL_299;
              }
            }
            do
            {
              v191 = v189[1];
              if (v191 == 0x257EF5A82043772ELL)
              {
                if (v189[2] == 0x257EF5A82043772ELL)
                {
LABEL_376:
                  v193 = v189[3];
                  goto LABEL_302;
                }
              }
              else
              {
                if (v191 >= *(_QWORD *)&v185)
                  v191 %= *(_QWORD *)&v185;
                if (v191 != v187)
                  break;
              }
              v189 = (_QWORD *)*v189;
            }
            while (v189);
          }
        }
      }
LABEL_299:
      v193 = operator new();
      *(_QWORD *)(v193 + 16) = "md::components::QueuedForDestruction<>]";
      *(_QWORD *)(v193 + 24) = 38;
      *(_OWORD *)(v193 + 32) = 0u;
      *(_OWORD *)(v193 + 48) = 0u;
      *(_OWORD *)(v193 + 64) = 0u;
      *(_OWORD *)(v193 + 80) = 0u;
      *(_OWORD *)(v193 + 96) = 0u;
      *(_OWORD *)(v193 + 112) = 0u;
      *(_OWORD *)(v193 + 128) = 0u;
      *(_DWORD *)(v193 + 144) = 1065353216;
      *(_OWORD *)(v193 + 152) = 0u;
      *(_OWORD *)(v193 + 168) = 0u;
      *(_QWORD *)(v193 + 184) = 0;
      *(_DWORD *)(v193 + 192) = 1065353216;
      *(_OWORD *)(v193 + 200) = 0u;
      *(_OWORD *)(v193 + 216) = 0u;
      *(_QWORD *)(v193 + 232) = 0;
      *(_DWORD *)(v193 + 240) = 1065353216;
      *(_QWORD *)v193 = &off_1E42B3228;
      *(_QWORD *)(v193 + 8) = 0x257EF5A82043772ELL;
      *(_QWORD *)(v193 + 248) = v258;
      v194 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v255, 0x257EF5A82043772EuLL, &v262);
      v195 = v194[3];
      v194[3] = v193;
      if (v195)
        (*(void (**)(uint64_t))(*(_QWORD *)v195 + 8))(v195);
      *(_QWORD *)buf = 0x257EF5A82043772ELL;
      *(_QWORD *)&buf[8] = "md::components::QueuedForDestruction<>]";
      *(_QWORD *)&buf[16] = 38;
      gdc::Registry::_registerStorageDataSignals(v258, 0x257EF5A82043772ELL, (uint64_t)buf, (uint64_t *)(v193 + 104));
LABEL_302:
      v261 = v184;
      v196 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v193 + 32), (uint64_t)&v261);
      if ((v197 & 1) != 0)
      {
        v202 = *(_BYTE **)(v193 + 88);
        v201 = *(_QWORD *)(v193 + 96);
        if ((unint64_t)v202 >= v201)
        {
          v204 = *(char **)(v193 + 80);
          v205 = v202 - v204;
          v206 = v202 - v204 + 1;
          if (v206 < 0)
            goto LABEL_386;
          v207 = v201 - (_QWORD)v204;
          if (2 * v207 > v206)
            v206 = 2 * v207;
          if (v207 >= 0x3FFFFFFFFFFFFFFFLL)
            v208 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v208 = v206;
          if (v208)
            v209 = (char *)operator new(v208);
          else
            v209 = 0;
          v210 = &v209[v208];
          v203 = (uint64_t)&v209[v205 + 1];
          v211 = (char *)(v204 - v202);
          if (v204 == v202)
            v211 = 0;
          *(_QWORD *)(v193 + 80) = &v209[v205 + (_QWORD)v211];
          *(_QWORD *)(v193 + 88) = v203;
          *(_QWORD *)(v193 + 96) = v210;
          if (v204)
            operator delete(v204);
        }
        else
        {
          v203 = (uint64_t)(v202 + 1);
        }
        *(_QWORD *)(v193 + 88) = v203;
        v198 = *(_QWORD *)(v193 + 248);
      }
      else
      {
        v198 = *(_QWORD *)(v193 + 248);
        if (*(_QWORD *)(v193 + 80) + (((uint64_t)v196 - *(_QWORD *)(v193 + 56)) >> 3) != *(_QWORD *)(v193 + 88))
        {
          v199 = *(_QWORD **)(v193 + 128);
          if (v199)
          {
            while (1)
            {
              *(_QWORD *)buf = &v261;
              *(_QWORD *)&buf[8] = 1;
              v262 = v198;
              v200 = v199[6];
              if (!v200)
                goto LABEL_383;
              (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v200 + 48))(v200, &v262, buf);
              v199 = (_QWORD *)*v199;
              if (!v199)
                goto LABEL_327;
            }
          }
          goto LABEL_327;
        }
      }
      v212 = *(_QWORD **)(v193 + 176);
      if (v212)
      {
        while (1)
        {
          *(_QWORD *)buf = &v261;
          *(_QWORD *)&buf[8] = 1;
          v262 = v198;
          v213 = v212[6];
          if (!v213)
            break;
          (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v213 + 48))(v213, &v262, buf);
          v212 = (_QWORD *)*v212;
          if (!v212)
            goto LABEL_327;
        }
LABEL_383:
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
      }
LABEL_327:
      v214 = *v183;
      v262 = 0xB02BC19BABA3EE9ELL;
      v215 = *(int8x8_t *)(v258 + 128);
      if (v215)
      {
        v216 = (uint8x8_t)vcnt_s8(v215);
        v216.i16[0] = vaddlv_u8(v216);
        if (v216.u32[0] > 1uLL)
        {
          v217 = 0xB02BC19BABA3EE9ELL;
          if (*(_QWORD *)&v215 <= 0xB02BC19BABA3EE9ELL)
            v217 = 0xB02BC19BABA3EE9ELL % *(_QWORD *)&v215;
        }
        else
        {
          v217 = (*(_QWORD *)&v215 - 1) & 0xB02BC19BABA3EE9ELL;
        }
        v218 = *(_QWORD **)(*v255 + 8 * v217);
        if (v218)
        {
          v219 = (_QWORD *)*v218;
          if (v219)
          {
            if (v216.u32[0] < 2uLL)
            {
              v220 = *(_QWORD *)&v215 - 1;
              while (1)
              {
                v222 = v219[1];
                if (v222 == 0xB02BC19BABA3EE9ELL)
                {
                  if (v219[2] == 0xB02BC19BABA3EE9ELL)
                    goto LABEL_377;
                }
                else if ((v222 & v220) != v217)
                {
                  goto LABEL_347;
                }
                v219 = (_QWORD *)*v219;
                if (!v219)
                  goto LABEL_347;
              }
            }
            do
            {
              v221 = v219[1];
              if (v221 == 0xB02BC19BABA3EE9ELL)
              {
                if (v219[2] == 0xB02BC19BABA3EE9ELL)
                {
LABEL_377:
                  v223 = v219[3];
                  goto LABEL_350;
                }
              }
              else
              {
                if (v221 >= *(_QWORD *)&v215)
                  v221 %= *(_QWORD *)&v215;
                if (v221 != v217)
                  break;
              }
              v219 = (_QWORD *)*v219;
            }
            while (v219);
          }
        }
      }
LABEL_347:
      v223 = operator new();
      *(_QWORD *)(v223 + 16) = "md::components::QueuedForDestruction<md::DrapingLogic>]";
      *(_QWORD *)(v223 + 24) = 54;
      *(_OWORD *)(v223 + 32) = 0u;
      *(_OWORD *)(v223 + 48) = 0u;
      *(_OWORD *)(v223 + 64) = 0u;
      *(_OWORD *)(v223 + 80) = 0u;
      *(_OWORD *)(v223 + 96) = 0u;
      *(_OWORD *)(v223 + 112) = 0u;
      *(_OWORD *)(v223 + 128) = 0u;
      *(_DWORD *)(v223 + 144) = 1065353216;
      *(_OWORD *)(v223 + 152) = 0u;
      *(_OWORD *)(v223 + 168) = 0u;
      *(_QWORD *)(v223 + 184) = 0;
      *(_DWORD *)(v223 + 192) = 1065353216;
      *(_OWORD *)(v223 + 200) = 0u;
      *(_OWORD *)(v223 + 216) = 0u;
      *(_QWORD *)(v223 + 232) = 0;
      *(_DWORD *)(v223 + 240) = 1065353216;
      *(_QWORD *)v223 = &off_1E42B3288;
      *(_QWORD *)(v223 + 8) = 0xB02BC19BABA3EE9ELL;
      *(_QWORD *)(v223 + 248) = v258;
      v224 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v255, 0xB02BC19BABA3EE9ELL, &v262);
      v225 = v224[3];
      v224[3] = v223;
      if (v225)
        (*(void (**)(uint64_t))(*(_QWORD *)v225 + 8))(v225);
      *(_QWORD *)buf = 0xB02BC19BABA3EE9ELL;
      *(_QWORD *)&buf[8] = "md::components::QueuedForDestruction<md::DrapingLogic>]";
      *(_QWORD *)&buf[16] = 54;
      gdc::Registry::_registerStorageDataSignals(v258, 0xB02BC19BABA3EE9ELL, (uint64_t)buf, (uint64_t *)(v223 + 104));
LABEL_350:
      v261 = v214;
      v226 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v223 + 32), (uint64_t)&v261);
      if ((v227 & 1) != 0)
      {
        v232 = *(_BYTE **)(v223 + 88);
        v231 = *(_QWORD *)(v223 + 96);
        if ((unint64_t)v232 >= v231)
        {
          v234 = *(char **)(v223 + 80);
          v235 = v232 - v234;
          v236 = v232 - v234 + 1;
          if (v236 < 0)
LABEL_386:
            abort();
          v237 = v231 - (_QWORD)v234;
          if (2 * v237 > v236)
            v236 = 2 * v237;
          if (v237 >= 0x3FFFFFFFFFFFFFFFLL)
            v238 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v238 = v236;
          if (v238)
            v239 = (char *)operator new(v238);
          else
            v239 = 0;
          v240 = &v239[v238];
          v233 = (uint64_t)&v239[v235 + 1];
          v241 = (char *)(v234 - v232);
          if (v234 == v232)
            v241 = 0;
          *(_QWORD *)(v223 + 80) = &v239[v235 + (_QWORD)v241];
          *(_QWORD *)(v223 + 88) = v233;
          *(_QWORD *)(v223 + 96) = v240;
          if (v234)
            operator delete(v234);
        }
        else
        {
          v233 = (uint64_t)(v232 + 1);
        }
        *(_QWORD *)(v223 + 88) = v233;
        v228 = *(_QWORD *)(v223 + 248);
      }
      else
      {
        v228 = *(_QWORD *)(v223 + 248);
        if (*(_QWORD *)(v223 + 80) + (((uint64_t)v226 - *(_QWORD *)(v223 + 56)) >> 3) != *(_QWORD *)(v223 + 88))
        {
          v229 = *(_QWORD **)(v223 + 128);
          if (v229)
          {
            while (1)
            {
              *(_QWORD *)buf = &v261;
              *(_QWORD *)&buf[8] = 1;
              v262 = v228;
              v230 = v229[6];
              if (!v230)
                goto LABEL_383;
              (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v230 + 48))(v230, &v262, buf);
              v229 = (_QWORD *)*v229;
              if (!v229)
                goto LABEL_278;
            }
          }
          goto LABEL_278;
        }
      }
      for (n = *(_QWORD **)(v223 + 176); n; n = (_QWORD *)*n)
      {
        *(_QWORD *)buf = &v261;
        *(_QWORD *)&buf[8] = 1;
        v262 = v228;
        v243 = n[6];
        if (!v243)
          goto LABEL_383;
        (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v243 + 48))(v243, &v262, buf);
      }
LABEL_278:
      if (++v183 != v252)
        continue;
      break;
    }
    v183 = (uint64_t *)v259;
    v182 = v249;
LABEL_379:
    if (v183)
      operator delete(v183);
    v182 = (_QWORD *)*v182;
    if (v182)
      continue;
    break;
  }
}

void sub_19F3E6408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  md::overlayComponents::DrapedRasterOverlay::~DrapedRasterOverlay((md::overlayComponents::DrapedRasterOverlay *)va);
  _Unwind_Resume(a1);
}

void sub_19F3E641C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F3E6430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p)
{
  uint64_t v18;

  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void _ZZN2md12DrapingLogic29runBeforeLayoutAtVariableRateERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_15OverlaysContextENS_13CameraContextENS_19PendingSceneContextENS_16ElevationContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_14DrapingContextEENK3__2clENS5_6EntityERNS_17overlayComponents17RasterOverlayBaseINS_15OverlayTileData19OverlayTileResource7TextureEEERNSt3__113unordered_mapIPNS5_8RegistryENSS_6vectorISK_NSS_9allocatorISK_EEEENSS_4hashISV_EENSS_8equal_toISV_EENSX_INSS_4pairIKSV_SZ_EEEEEERNSW_ISV_NSX_ISV_EEEE(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, unint64_t **a5)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  _BOOL4 v21;
  _QWORD *CanDisable;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  int8x8_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  char v48;
  unint64_t v49;
  _QWORD *i;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  size_t v59;
  char *v60;
  char *v61;
  char *v62;
  _QWORD *j;
  uint64_t v64;
  uint64_t v65;
  int8x8_t v66;
  uint8x8_t v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  char v78;
  unint64_t v79;
  _QWORD *k;
  uint64_t v81;
  unint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  size_t v89;
  char *v90;
  char *v91;
  char *v92;
  _QWORD *m;
  uint64_t v94;
  _QWORD *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int8x8_t v102;
  uint8x8_t v103;
  unint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int8x8_t v110;
  uint8x8_t v111;
  unint64_t v112;
  uint64_t **v113;
  uint64_t *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  int8x8_t v118;
  uint8x8_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  NSObject *v136;
  uint64_t v137;
  _OWORD *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t *v141;
  char *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t *v147;
  uint64_t *v148;
  int8x8_t v149;
  uint8x8_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  unsigned int v168;
  unsigned int v169;
  char v170;
  double v171;
  float v172;
  int v173;
  uint64_t *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *p_shared_owners;
  unint64_t v180;
  _QWORD *v181;
  uint64_t *v182;
  uint64_t v183;
  int8x8_t v184;
  uint8x8_t v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  _QWORD *v195;
  char v196;
  unint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  unint64_t v200;
  _BYTE *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  size_t v207;
  char *v208;
  char *v209;
  char *v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  int8x8_t v214;
  uint8x8_t v215;
  unint64_t v216;
  _QWORD *v217;
  _QWORD *v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  _QWORD *v225;
  char v226;
  unint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  unint64_t v230;
  _BYTE *v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  size_t v237;
  char *v238;
  char *v239;
  char *v240;
  _QWORD *n;
  uint64_t v242;
  uint64_t v243;
  unint64_t *v245;
  unint64_t *v246;
  _QWORD *v247;
  _QWORD *v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t *v251;
  int8x8_t *v252;
  uint64_t *v253;
  uint64_t *v254;
  uint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  unint64_t v261;
  _BYTE buf[32];
  __int128 v263;
  __int128 v264;
  __int128 v265;
  _OWORD v266[2];
  uint64_t v267;

  v267 = *MEMORY[0x1E0C80C00];
  v252 = (int8x8_t *)gdc::Registry::getOrAdd<gdc::components::RegistryBridgeMap<gdc::Entity>>(**(_QWORD **)a1, a2);
  v9 = (_QWORD *)gdc::Registry::storage<md::overlayComponents::TileIsInView>(**(_QWORD **)a1);
  v10 = a2 >> 39;
  v11 = v9[4];
  if (a2 >> 39 < (v9[5] - v11) >> 3
    && (v12 = *(_QWORD *)(v11 + 8 * v10)) != 0
    && (v13 = *(unsigned __int16 *)(v12 + 2 * (HIDWORD(a2) & 0x7F)), v15 = v9[7], v14 = v9[8], v13 < (v14 - v15) >> 3)
    && ((v16 = v15 + 8 * v13, v16 != v14) ? (v17 = *(_DWORD *)(v16 + 4) == HIDWORD(a2)) : (v17 = 0), v17))
  {
    v18 = v9[11];
    v19 = v9[10] + v13;
  }
  else
  {
    v18 = v9[11];
    v19 = v18;
  }
  v21 = v19 == v18 || v19 == 0;
  CanDisable = (_QWORD *)gdc::Registry::storage<md::overlayComponents::CanDisableDraping>(**(_QWORD **)a1);
  v23 = CanDisable[4];
  if (v10 < (CanDisable[5] - v23) >> 3)
  {
    v24 = *(_QWORD *)(v23 + 8 * v10);
    if (v24)
    {
      v25 = *(unsigned __int16 *)(v24 + 2 * (HIDWORD(a2) & 0x7F));
      v27 = CanDisable[7];
      v26 = CanDisable[8];
      if (v25 < (v26 - v27) >> 3)
      {
        v28 = v27 + 8 * v25;
        if (v28 != v26 && *(_DWORD *)(v28 + 4) == HIDWORD(a2))
        {
          v30 = CanDisable[10];
          v31 = v30 + v25;
          v32 = !v30 || v31 == CanDisable[11];
          if (!v32 && **(_BYTE **)(a1 + 8))
            return;
        }
      }
    }
  }
  if (!v21)
  {
    v95 = *(_QWORD **)(a4 + 16);
    if (!v95)
      return;
    while (1)
    {
      v96 = (unint64_t *)v95[3];
      v256 = (unint64_t *)v95[4];
      if (v96 != v256)
        break;
LABEL_139:
      v95 = (_QWORD *)*v95;
      if (!v95)
        return;
    }
    v97 = v95[2];
    v98 = 0x9DDFEA08EB382D69 * (((8 * v97) + 8) ^ HIDWORD(v97));
    v99 = 0x9DDFEA08EB382D69 * (HIDWORD(v97) ^ (v98 >> 47) ^ v98);
    v100 = 0x9DDFEA08EB382D69 * (v99 ^ (v99 >> 47));
    v247 = v95;
LABEL_143:
    v101 = *v96;
    v261 = *v96;
    v102 = v252[2];
    if (!*(_QWORD *)&v102)
      goto LABEL_187;
    v103 = (uint8x8_t)vcnt_s8(v102);
    v103.i16[0] = vaddlv_u8(v103);
    if (v103.u32[0] > 1uLL)
    {
      v104 = v100;
      if (v100 >= *(_QWORD *)&v102)
        v104 = v100 % *(_QWORD *)&v102;
    }
    else
    {
      v104 = (*(_QWORD *)&v102 - 1) & v100;
    }
    v105 = *(_QWORD **)(*(_QWORD *)&v252[1] + 8 * v104);
    if (!v105)
      goto LABEL_187;
    v106 = (_QWORD *)*v105;
    if (!v106)
      goto LABEL_187;
    if (v103.u32[0] < 2uLL)
    {
      v107 = *(_QWORD *)&v102 - 1;
      while (1)
      {
        v109 = v106[1];
        if (v100 == v109)
        {
          if (v106[2] == v97)
            goto LABEL_164;
        }
        else if ((v109 & v107) != v104)
        {
          goto LABEL_187;
        }
        v106 = (_QWORD *)*v106;
        if (!v106)
          goto LABEL_187;
      }
    }
    while (1)
    {
      v108 = v106[1];
      if (v100 == v108)
      {
        if (v106[2] == v97)
        {
LABEL_164:
          v110 = (int8x8_t)v106[4];
          if (v110)
          {
            v111 = (uint8x8_t)vcnt_s8(v110);
            v111.i16[0] = vaddlv_u8(v111);
            if (v111.u32[0] > 1uLL)
            {
              v112 = v101;
              if (v101 >= *(_QWORD *)&v110)
                v112 = v101 % *(_QWORD *)&v110;
            }
            else
            {
              v112 = (*(_QWORD *)&v110 - 1) & v101;
            }
            v113 = *(uint64_t ***)(v106[3] + 8 * v112);
            if (v113)
            {
              v114 = *v113;
              if (v114)
              {
                if (v111.u32[0] >= 2uLL)
                {
                  while (1)
                  {
                    v116 = v114[1];
                    if (v101 == v116)
                    {
                      if (__PAIR64__(*((unsigned __int16 *)v114 + 9), *((unsigned __int16 *)v114 + 8)) == __PAIR64__(WORD1(v101), (unsigned __int16)v101)
                        && *((_DWORD *)v114 + 5) == HIDWORD(v101))
                      {
                        goto LABEL_142;
                      }
                    }
                    else
                    {
                      if (v116 >= *(_QWORD *)&v110)
                        v116 %= *(_QWORD *)&v110;
                      if (v116 != v112)
                        goto LABEL_187;
                    }
                    v114 = (uint64_t *)*v114;
                    if (!v114)
                      goto LABEL_187;
                  }
                }
                v115 = *(_QWORD *)&v110 - 1;
                do
                {
                  v117 = v114[1];
                  if (v101 == v117)
                  {
                    if (__PAIR64__(*((unsigned __int16 *)v114 + 9), *((unsigned __int16 *)v114 + 8)) == __PAIR64__(WORD1(v101), (unsigned __int16)v101)
                      && *((_DWORD *)v114 + 5) == HIDWORD(v101))
                    {
                      goto LABEL_142;
                    }
                  }
                  else if ((v117 & v115) != v112)
                  {
                    break;
                  }
                  v114 = (uint64_t *)*v114;
                }
                while (v114);
              }
            }
          }
LABEL_187:
          v258 = 0x6307588E3A87BAE2;
          v118 = *(int8x8_t *)(v97 + 128);
          if (v118)
          {
            v119 = (uint8x8_t)vcnt_s8(v118);
            v119.i16[0] = vaddlv_u8(v119);
            if (v119.u32[0] > 1uLL)
            {
              v120 = 0x6307588E3A87BAE2;
              if (*(_QWORD *)&v118 <= 0x6307588E3A87BAE2uLL)
                v120 = 0x6307588E3A87BAE2uLL % *(_QWORD *)&v118;
            }
            else
            {
              v120 = (*(_QWORD *)&v118 - 1) & 0x6307588E3A87BAE2;
            }
            v121 = *(_QWORD **)(*(_QWORD *)(v97 + 120) + 8 * v120);
            if (v121)
            {
              v122 = (_QWORD *)*v121;
              if (v122)
              {
                if (v119.u32[0] < 2uLL)
                {
                  v123 = *(_QWORD *)&v118 - 1;
                  while (1)
                  {
                    v125 = v122[1];
                    if (v125 == 0x6307588E3A87BAE2)
                    {
                      if (v122[2] == 0x6307588E3A87BAE2)
                        goto LABEL_231;
                    }
                    else if ((v125 & v123) != v120)
                    {
                      goto LABEL_207;
                    }
                    v122 = (_QWORD *)*v122;
                    if (!v122)
                      goto LABEL_207;
                  }
                }
                do
                {
                  v124 = v122[1];
                  if (v124 == 0x6307588E3A87BAE2)
                  {
                    if (v122[2] == 0x6307588E3A87BAE2)
                    {
LABEL_231:
                      v126 = v122[3];
                      goto LABEL_210;
                    }
                  }
                  else
                  {
                    if (v124 >= *(_QWORD *)&v118)
                      v124 %= *(_QWORD *)&v118;
                    if (v124 != v120)
                      break;
                  }
                  v122 = (_QWORD *)*v122;
                }
                while (v122);
              }
            }
          }
LABEL_207:
          v126 = operator new();
          *(_QWORD *)(v126 + 16) = "md::components::MeshInstance]";
          *(_QWORD *)(v126 + 24) = 28;
          *(_OWORD *)(v126 + 32) = 0u;
          *(_OWORD *)(v126 + 48) = 0u;
          *(_OWORD *)(v126 + 64) = 0u;
          *(_OWORD *)(v126 + 80) = 0u;
          *(_OWORD *)(v126 + 96) = 0u;
          *(_OWORD *)(v126 + 112) = 0u;
          *(_OWORD *)(v126 + 128) = 0u;
          *(_DWORD *)(v126 + 144) = 1065353216;
          *(_OWORD *)(v126 + 152) = 0u;
          *(_OWORD *)(v126 + 168) = 0u;
          *(_QWORD *)(v126 + 184) = 0;
          *(_DWORD *)(v126 + 192) = 1065353216;
          *(_OWORD *)(v126 + 200) = 0u;
          *(_OWORD *)(v126 + 216) = 0u;
          *(_QWORD *)(v126 + 232) = 0;
          *(_DWORD *)(v126 + 240) = 1065353216;
          *(_QWORD *)v126 = &off_1E42B2F58;
          *(_QWORD *)(v126 + 8) = 0x6307588E3A87BAE2;
          *(_QWORD *)(v126 + 248) = v97;
          v127 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v97 + 120), 0x6307588E3A87BAE2uLL, &v258);
          v128 = v127[3];
          v127[3] = v126;
          if (v128)
            (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
          *(_QWORD *)buf = 0x6307588E3A87BAE2;
          *(_QWORD *)&buf[8] = "md::components::MeshInstance]";
          *(_QWORD *)&buf[16] = 28;
          gdc::Registry::_registerStorageDataSignals(v97, 0x6307588E3A87BAE2, (uint64_t)buf, (uint64_t *)(v126 + 104));
LABEL_210:
          v129 = *(_QWORD *)(v126 + 32);
          if (v101 >> 39 >= (*(_QWORD *)(v126 + 40) - v129) >> 3)
            goto LABEL_217;
          v130 = *(_QWORD *)(v129 + 8 * (v101 >> 39));
          if (!v130)
            goto LABEL_217;
          v131 = *(unsigned __int16 *)(v130 + 2 * (HIDWORD(v101) & 0x7F));
          v133 = *(_QWORD *)(v126 + 56);
          v132 = *(_QWORD *)(v126 + 64);
          if (v131 >= (v132 - v133) >> 3)
            goto LABEL_217;
          v134 = v133 + 8 * v131;
          v135 = v134 != v132 && *(_DWORD *)(v134 + 4) == HIDWORD(v101);
          if (!v135
            || (v137 = *(_QWORD *)(v126 + 80)) == 0
            || (v138 = (_OWORD *)(v137 + 112 * v131), v138 == *(_OWORD **)(v126 + 88)))
          {
LABEL_217:
            if (GEOGetVectorKitDrapingLogicLog(void)::onceToken != -1)
              dispatch_once(&GEOGetVectorKitDrapingLogicLog(void)::onceToken, &__block_literal_global_0);
            v136 = GEOGetVectorKitDrapingLogicLog(void)::log;
            if (os_log_type_enabled((os_log_t)GEOGetVectorKitDrapingLogicLog(void)::log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "false";
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/Overlays/DrapingLogic.mm";
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = 307;
              _os_log_impl(&dword_19F029000, v136, OS_LOG_TYPE_ERROR, "Entity MUST have a mesh instance: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
            }
            goto LABEL_142;
          }
          v139 = *(_QWORD *)(gdc::components::RegistryBridgeMap<gdc::Entity>::nodeForRegistryAndKey((uint64_t)v252, v97, &v261)+ 16);
          v140 = (uint64_t *)gdc::Registry::storage<md::components::MeshInstance>(v97);
          v264 = v138[3];
          v265 = v138[4];
          v266[0] = v138[5];
          *(_OWORD *)((char *)v266 + 12) = *(_OWORD *)((char *)v138 + 92);
          *(_OWORD *)buf = *v138;
          *(_OWORD *)&buf[16] = v138[1];
          v263 = v138[2];
          gdc::ComponentStorageWrapper<md::components::MeshInstance>::emplace(v140, v139, (__int128 *)buf);
          v141 = (uint64_t *)gdc::Registry::storage<md::components::Visibility>(v97);
          buf[0] = 1;
          gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v141, v139, buf);
          v142 = (char *)operator new(0x50uLL);
          *((_QWORD *)v142 + 1) = 0;
          *((_QWORD *)v142 + 2) = 0;
          *(_QWORD *)v142 = &off_1E42DC7E8;
          v142[32] = 1;
          *(_OWORD *)(v142 + 40) = 0u;
          *(_OWORD *)(v142 + 56) = 0u;
          *((_QWORD *)v142 + 9) = &md::ZeroBlendFactor;
          *((_QWORD *)v142 + 3) = &off_1E429BA20;
          *(_QWORD *)buf = v142 + 24;
          *(_QWORD *)&buf[8] = v142;
          v143 = gdc::Registry::storage<md::components::Material>(v97);
          gdc::ComponentStorageWrapper<md::components::Material>::emplace<int,std::shared_ptr<gms::Material<ggl::Texture2D>>>(v143, v139, 0, (uint64_t *)buf);
          v144 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v145 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v146 = __ldaxr(v145);
            while (__stlxr(v146 - 1, v145));
            if (!v146)
            {
              ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
              std::__shared_weak_count::__release_weak(v144);
            }
          }
          v147 = (uint64_t *)gdc::Registry::storage<md::components::Collapsible>(v97);
          gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v147, v139);
          v148 = (uint64_t *)gdc::Registry::storage<md::components::IntendedSceneLayer>(v97);
          buf[0] = 4;
          gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v148, v139, buf);
          v149 = *(int8x8_t *)(v97 + 8);
          v250 = v139;
          if (!*(_QWORD *)&v149)
            goto LABEL_252;
          v150 = (uint8x8_t)vcnt_s8(v149);
          v150.i16[0] = vaddlv_u8(v150);
          if (v150.u32[0] > 1uLL)
          {
            v151 = 0x64A448A5CD5D38DBLL;
            if (*(_QWORD *)&v149 <= 0x64A448A5CD5D38DBuLL)
              v151 = 0x64A448A5CD5D38DBuLL % *(_QWORD *)&v149;
          }
          else
          {
            v151 = (*(_QWORD *)&v149 - 1) & 0x64A448A5CD5D38DBLL;
          }
          v152 = *(_QWORD **)(*(_QWORD *)v97 + 8 * v151);
          if (!v152)
            goto LABEL_252;
          v153 = (_QWORD *)*v152;
          if (!v153)
            goto LABEL_252;
          if (v150.u32[0] < 2uLL)
          {
            v154 = *(_QWORD *)&v149 - 1;
            while (1)
            {
              v156 = v153[1];
              if (v156 == 0x64A448A5CD5D38DBLL)
              {
                if (v153[2] == 0x64A448A5CD5D38DBLL)
                  goto LABEL_250;
              }
              else if ((v156 & v154) != v151)
              {
                goto LABEL_252;
              }
              v153 = (_QWORD *)*v153;
              if (!v153)
                goto LABEL_252;
            }
          }
          while (2)
          {
            v155 = v153[1];
            if (v155 != 0x64A448A5CD5D38DBLL)
            {
              if (v155 >= *(_QWORD *)&v149)
                v155 %= *(_QWORD *)&v149;
              if (v155 != v151)
                goto LABEL_252;
              goto LABEL_239;
            }
            if (v153[2] != 0x64A448A5CD5D38DBLL)
            {
LABEL_239:
              v153 = (_QWORD *)*v153;
              if (!v153)
                goto LABEL_252;
              continue;
            }
            break;
          }
LABEL_250:
          v157 = v153[5];
          if (*(_QWORD *)(v157 + 8) == 0x64A448A5CD5D38DBLL)
          {
            v158 = *(_QWORD *)(v157 + 32);
            goto LABEL_253;
          }
LABEL_252:
          v158 = 0;
LABEL_253:
          v159 = *a3;
          v160 = *(_QWORD *)(*a3 + 32);
          *(_QWORD *)buf = *(_QWORD *)(*a3 + 24);
          *(_QWORD *)&buf[8] = v160;
          v161 = v159;
          if (v160)
          {
            v162 = (unint64_t *)(v160 + 8);
            do
              v163 = __ldxr(v162);
            while (__stxr(v163 + 1, v162));
            v161 = *a3;
          }
          buf[28] = 1;
          v165 = *(_QWORD *)(v161 + 56);
          v164 = *(_QWORD *)(v161 + 64);
          *(_QWORD *)&v263 = v165;
          *((_QWORD *)&v263 + 1) = v164;
          if (v164)
          {
            v166 = (unint64_t *)(v164 + 8);
            do
              v167 = __ldxr(v166);
            while (__stxr(v167 + 1, v166));
          }
          v168 = *(unsigned __int8 *)(v159 + 1);
          v169 = *(unsigned __int8 *)(v158 + 1);
          v170 = v168 - v169;
          __powidf2();
          v172 = v171;
          *(float *)&buf[24] = v172;
          if (v168 >= v169)
          {
            v173 = *(_DWORD *)(v158 + 4) << v170;
            *(float *)&buf[16] = (float)(*(_DWORD *)(v159 + 8) - (*(_DWORD *)(v158 + 8) << v170)) / v172;
            *(float *)&buf[20] = 1.0 - (float)((float)(*(_DWORD *)(v159 + 4) - v173 + 1) / v172);
          }
          v174 = (uint64_t *)gdc::Registry::storage<md::overlayComponents::DrapedRasterOverlay>(v97);
          v95 = v247;
          gdc::ComponentStorageWrapper<md::overlayComponents::DrapedRasterOverlay>::emplace(v174, v250, (__int128 *)buf);
          v175 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
          if (!*((_QWORD *)&v263 + 1))
            goto LABEL_266;
          v176 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
          do
            v177 = __ldaxr(v176);
          while (__stlxr(v177 - 1, v176));
          if (!v177)
          {
            ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
            std::__shared_weak_count::__release_weak(v175);
            v178 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
LABEL_267:
              p_shared_owners = (unint64_t *)&v178->__shared_owners_;
              do
                v180 = __ldaxr(p_shared_owners);
              while (__stlxr(v180 - 1, p_shared_owners));
              if (!v180)
              {
                ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                std::__shared_weak_count::__release_weak(v178);
              }
            }
          }
          else
          {
LABEL_266:
            v178 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
              goto LABEL_267;
          }
LABEL_142:
          if (++v96 == v256)
            goto LABEL_139;
          goto LABEL_143;
        }
      }
      else
      {
        if (v108 >= *(_QWORD *)&v102)
          v108 %= *(_QWORD *)&v102;
        if (v108 != v104)
          goto LABEL_187;
      }
      v106 = (_QWORD *)*v106;
      if (!v106)
        goto LABEL_187;
    }
  }
  v33 = *a5;
  v243 = a4;
  v245 = a5[1];
  if (*a5 == v245)
    goto LABEL_273;
  while (2)
  {
    v255 = *v33;
    gdc::components::RegistryBridgeMap<gdc::Entity>::entities(&v258, v252, *v33);
    v34 = (uint64_t *)v258;
    v249 = v259;
    if ((uint64_t *)v258 == v259)
      goto LABEL_135;
    v246 = v33;
    v253 = (uint64_t *)(v255 + 120);
    do
    {
      v35 = *v34;
      v261 = 0x257EF5A82043772ELL;
      v36 = *(int8x8_t *)(v255 + 128);
      if (v36)
      {
        v37 = (uint8x8_t)vcnt_s8(v36);
        v37.i16[0] = vaddlv_u8(v37);
        if (v37.u32[0] > 1uLL)
        {
          v38 = 0x257EF5A82043772ELL;
          if (*(_QWORD *)&v36 <= 0x257EF5A82043772EuLL)
            v38 = 0x257EF5A82043772EuLL % *(_QWORD *)&v36;
        }
        else
        {
          v38 = (*(_QWORD *)&v36 - 1) & 0x257EF5A82043772ELL;
        }
        v39 = *(_QWORD **)(*v253 + 8 * v38);
        if (v39)
        {
          v40 = (_QWORD *)*v39;
          if (v40)
          {
            if (v37.u32[0] < 2uLL)
            {
              v41 = *(_QWORD *)&v36 - 1;
              while (1)
              {
                v43 = v40[1];
                if (v43 == 0x257EF5A82043772ELL)
                {
                  if (v40[2] == 0x257EF5A82043772ELL)
                    goto LABEL_132;
                }
                else if ((v43 & v41) != v38)
                {
                  goto LABEL_55;
                }
                v40 = (_QWORD *)*v40;
                if (!v40)
                  goto LABEL_55;
              }
            }
            do
            {
              v42 = v40[1];
              if (v42 == 0x257EF5A82043772ELL)
              {
                if (v40[2] == 0x257EF5A82043772ELL)
                {
LABEL_132:
                  v44 = v40[3];
                  goto LABEL_58;
                }
              }
              else
              {
                if (v42 >= *(_QWORD *)&v36)
                  v42 %= *(_QWORD *)&v36;
                if (v42 != v38)
                  break;
              }
              v40 = (_QWORD *)*v40;
            }
            while (v40);
          }
        }
      }
LABEL_55:
      v44 = operator new();
      *(_QWORD *)(v44 + 16) = "md::components::QueuedForDestruction<>]";
      *(_QWORD *)(v44 + 24) = 38;
      *(_OWORD *)(v44 + 32) = 0u;
      *(_OWORD *)(v44 + 48) = 0u;
      *(_OWORD *)(v44 + 64) = 0u;
      *(_OWORD *)(v44 + 80) = 0u;
      *(_OWORD *)(v44 + 96) = 0u;
      *(_OWORD *)(v44 + 112) = 0u;
      *(_OWORD *)(v44 + 128) = 0u;
      *(_DWORD *)(v44 + 144) = 1065353216;
      *(_OWORD *)(v44 + 152) = 0u;
      *(_OWORD *)(v44 + 168) = 0u;
      *(_QWORD *)(v44 + 184) = 0;
      *(_DWORD *)(v44 + 192) = 1065353216;
      *(_OWORD *)(v44 + 200) = 0u;
      *(_OWORD *)(v44 + 216) = 0u;
      *(_QWORD *)(v44 + 232) = 0;
      *(_DWORD *)(v44 + 240) = 1065353216;
      *(_QWORD *)v44 = &off_1E42B3228;
      *(_QWORD *)(v44 + 8) = 0x257EF5A82043772ELL;
      *(_QWORD *)(v44 + 248) = v255;
      v45 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v253, 0x257EF5A82043772EuLL, &v261);
      v46 = v45[3];
      v45[3] = v44;
      if (v46)
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
      *(_QWORD *)buf = 0x257EF5A82043772ELL;
      *(_QWORD *)&buf[8] = "md::components::QueuedForDestruction<>]";
      *(_QWORD *)&buf[16] = 38;
      gdc::Registry::_registerStorageDataSignals(v255, 0x257EF5A82043772ELL, (uint64_t)buf, (uint64_t *)(v44 + 104));
LABEL_58:
      v260 = v35;
      v47 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v44 + 32), (uint64_t)&v260);
      if ((v48 & 1) != 0)
      {
        v53 = *(_BYTE **)(v44 + 88);
        v52 = *(_QWORD *)(v44 + 96);
        if ((unint64_t)v53 >= v52)
        {
          v55 = *(char **)(v44 + 80);
          v56 = v53 - v55;
          v57 = v53 - v55 + 1;
          if (v57 < 0)
            goto LABEL_385;
          v58 = v52 - (_QWORD)v55;
          if (2 * v58 > v57)
            v57 = 2 * v58;
          if (v58 >= 0x3FFFFFFFFFFFFFFFLL)
            v59 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v59 = v57;
          if (v59)
            v60 = (char *)operator new(v59);
          else
            v60 = 0;
          v61 = &v60[v59];
          v54 = (uint64_t)&v60[v56 + 1];
          v62 = (char *)(v55 - v53);
          if (v55 == v53)
            v62 = 0;
          *(_QWORD *)(v44 + 80) = &v60[v56 + (_QWORD)v62];
          *(_QWORD *)(v44 + 88) = v54;
          *(_QWORD *)(v44 + 96) = v61;
          if (v55)
            operator delete(v55);
        }
        else
        {
          v54 = (uint64_t)(v53 + 1);
        }
        *(_QWORD *)(v44 + 88) = v54;
        v49 = *(_QWORD *)(v44 + 248);
      }
      else
      {
        v49 = *(_QWORD *)(v44 + 248);
        if (*(_QWORD *)(v44 + 80) + (((uint64_t)v47 - *(_QWORD *)(v44 + 56)) >> 3) != *(_QWORD *)(v44 + 88))
        {
          for (i = *(_QWORD **)(v44 + 128); i; i = (_QWORD *)*i)
          {
            *(_QWORD *)buf = &v260;
            *(_QWORD *)&buf[8] = 1;
            v261 = v49;
            v51 = i[6];
            if (!v51)
              goto LABEL_383;
            (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v51 + 48))(v51, &v261, buf);
          }
          goto LABEL_83;
        }
      }
      for (j = *(_QWORD **)(v44 + 176); j; j = (_QWORD *)*j)
      {
        *(_QWORD *)buf = &v260;
        *(_QWORD *)&buf[8] = 1;
        v261 = v49;
        v64 = j[6];
        if (!v64)
          goto LABEL_383;
        (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v64 + 48))(v64, &v261, buf);
      }
LABEL_83:
      v65 = *v34;
      v261 = 0xB02BC19BABA3EE9ELL;
      v66 = *(int8x8_t *)(v255 + 128);
      if (v66)
      {
        v67 = (uint8x8_t)vcnt_s8(v66);
        v67.i16[0] = vaddlv_u8(v67);
        if (v67.u32[0] > 1uLL)
        {
          v68 = 0xB02BC19BABA3EE9ELL;
          if (*(_QWORD *)&v66 <= 0xB02BC19BABA3EE9ELL)
            v68 = 0xB02BC19BABA3EE9ELL % *(_QWORD *)&v66;
        }
        else
        {
          v68 = (*(_QWORD *)&v66 - 1) & 0xB02BC19BABA3EE9ELL;
        }
        v69 = *(_QWORD **)(*v253 + 8 * v68);
        if (v69)
        {
          v70 = (_QWORD *)*v69;
          if (v70)
          {
            if (v67.u32[0] < 2uLL)
            {
              v71 = *(_QWORD *)&v66 - 1;
              while (1)
              {
                v73 = v70[1];
                if (v73 == 0xB02BC19BABA3EE9ELL)
                {
                  if (v70[2] == 0xB02BC19BABA3EE9ELL)
                    goto LABEL_133;
                }
                else if ((v73 & v71) != v68)
                {
                  goto LABEL_103;
                }
                v70 = (_QWORD *)*v70;
                if (!v70)
                  goto LABEL_103;
              }
            }
            do
            {
              v72 = v70[1];
              if (v72 == 0xB02BC19BABA3EE9ELL)
              {
                if (v70[2] == 0xB02BC19BABA3EE9ELL)
                {
LABEL_133:
                  v74 = v70[3];
                  goto LABEL_106;
                }
              }
              else
              {
                if (v72 >= *(_QWORD *)&v66)
                  v72 %= *(_QWORD *)&v66;
                if (v72 != v68)
                  break;
              }
              v70 = (_QWORD *)*v70;
            }
            while (v70);
          }
        }
      }
LABEL_103:
      v74 = operator new();
      *(_QWORD *)(v74 + 16) = "md::components::QueuedForDestruction<md::DrapingLogic>]";
      *(_QWORD *)(v74 + 24) = 54;
      *(_OWORD *)(v74 + 32) = 0u;
      *(_OWORD *)(v74 + 48) = 0u;
      *(_OWORD *)(v74 + 64) = 0u;
      *(_OWORD *)(v74 + 80) = 0u;
      *(_OWORD *)(v74 + 96) = 0u;
      *(_OWORD *)(v74 + 112) = 0u;
      *(_OWORD *)(v74 + 128) = 0u;
      *(_DWORD *)(v74 + 144) = 1065353216;
      *(_OWORD *)(v74 + 152) = 0u;
      *(_OWORD *)(v74 + 168) = 0u;
      *(_QWORD *)(v74 + 184) = 0;
      *(_DWORD *)(v74 + 192) = 1065353216;
      *(_OWORD *)(v74 + 200) = 0u;
      *(_OWORD *)(v74 + 216) = 0u;
      *(_QWORD *)(v74 + 232) = 0;
      *(_DWORD *)(v74 + 240) = 1065353216;
      *(_QWORD *)v74 = &off_1E42B3288;
      *(_QWORD *)(v74 + 8) = 0xB02BC19BABA3EE9ELL;
      *(_QWORD *)(v74 + 248) = v255;
      v75 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v253, 0xB02BC19BABA3EE9ELL, &v261);
      v76 = v75[3];
      v75[3] = v74;
      if (v76)
        (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
      *(_QWORD *)buf = 0xB02BC19BABA3EE9ELL;
      *(_QWORD *)&buf[8] = "md::components::QueuedForDestruction<md::DrapingLogic>]";
      *(_QWORD *)&buf[16] = 54;
      gdc::Registry::_registerStorageDataSignals(v255, 0xB02BC19BABA3EE9ELL, (uint64_t)buf, (uint64_t *)(v74 + 104));
LABEL_106:
      v260 = v65;
      v77 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v74 + 32), (uint64_t)&v260);
      if ((v78 & 1) != 0)
      {
        v83 = *(_BYTE **)(v74 + 88);
        v82 = *(_QWORD *)(v74 + 96);
        if ((unint64_t)v83 >= v82)
        {
          v85 = *(char **)(v74 + 80);
          v86 = v83 - v85;
          v87 = v83 - v85 + 1;
          if (v87 < 0)
LABEL_385:
            abort();
          v88 = v82 - (_QWORD)v85;
          if (2 * v88 > v87)
            v87 = 2 * v88;
          if (v88 >= 0x3FFFFFFFFFFFFFFFLL)
            v89 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v89 = v87;
          if (v89)
            v90 = (char *)operator new(v89);
          else
            v90 = 0;
          v91 = &v90[v89];
          v84 = (uint64_t)&v90[v86 + 1];
          v92 = (char *)(v85 - v83);
          if (v85 == v83)
            v92 = 0;
          *(_QWORD *)(v74 + 80) = &v90[v86 + (_QWORD)v92];
          *(_QWORD *)(v74 + 88) = v84;
          *(_QWORD *)(v74 + 96) = v91;
          if (v85)
            operator delete(v85);
        }
        else
        {
          v84 = (uint64_t)(v83 + 1);
        }
        *(_QWORD *)(v74 + 88) = v84;
        v79 = *(_QWORD *)(v74 + 248);
      }
      else
      {
        v79 = *(_QWORD *)(v74 + 248);
        if (*(_QWORD *)(v74 + 80) + (((uint64_t)v77 - *(_QWORD *)(v74 + 56)) >> 3) != *(_QWORD *)(v74 + 88))
        {
          for (k = *(_QWORD **)(v74 + 128); k; k = (_QWORD *)*k)
          {
            *(_QWORD *)buf = &v260;
            *(_QWORD *)&buf[8] = 1;
            v261 = v79;
            v81 = k[6];
            if (!v81)
              goto LABEL_383;
            (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v81 + 48))(v81, &v261, buf);
          }
          goto LABEL_34;
        }
      }
      for (m = *(_QWORD **)(v74 + 176); m; m = (_QWORD *)*m)
      {
        *(_QWORD *)buf = &v260;
        *(_QWORD *)&buf[8] = 1;
        v261 = v79;
        v94 = m[6];
        if (!v94)
          goto LABEL_383;
        (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v94 + 48))(v94, &v261, buf);
      }
LABEL_34:
      ++v34;
    }
    while (v34 != v249);
    v34 = (uint64_t *)v258;
    v33 = v246;
LABEL_135:
    if (v34)
      operator delete(v34);
    if (++v33 != v245)
      continue;
    break;
  }
LABEL_273:
  v181 = *(_QWORD **)(v243 + 16);
  if (!v181)
    return;
  while (2)
  {
    v257 = v181[2];
    gdc::components::RegistryBridgeMap<gdc::Entity>::entities(&v258, v252, v257);
    v182 = (uint64_t *)v258;
    v251 = v259;
    if ((uint64_t *)v258 == v259)
      goto LABEL_379;
    v248 = v181;
    v254 = (uint64_t *)(v257 + 120);
    while (2)
    {
      v183 = *v182;
      v261 = 0x257EF5A82043772ELL;
      v184 = *(int8x8_t *)(v257 + 128);
      if (v184)
      {
        v185 = (uint8x8_t)vcnt_s8(v184);
        v185.i16[0] = vaddlv_u8(v185);
        if (v185.u32[0] > 1uLL)
        {
          v186 = 0x257EF5A82043772ELL;
          if (*(_QWORD *)&v184 <= 0x257EF5A82043772EuLL)
            v186 = 0x257EF5A82043772EuLL % *(_QWORD *)&v184;
        }
        else
        {
          v186 = (*(_QWORD *)&v184 - 1) & 0x257EF5A82043772ELL;
        }
        v187 = *(_QWORD **)(*v254 + 8 * v186);
        if (v187)
        {
          v188 = (_QWORD *)*v187;
          if (v188)
          {
            if (v185.u32[0] < 2uLL)
            {
              v189 = *(_QWORD *)&v184 - 1;
              while (1)
              {
                v191 = v188[1];
                if (v191 == 0x257EF5A82043772ELL)
                {
                  if (v188[2] == 0x257EF5A82043772ELL)
                    goto LABEL_376;
                }
                else if ((v191 & v189) != v186)
                {
                  goto LABEL_299;
                }
                v188 = (_QWORD *)*v188;
                if (!v188)
                  goto LABEL_299;
              }
            }
            do
            {
              v190 = v188[1];
              if (v190 == 0x257EF5A82043772ELL)
              {
                if (v188[2] == 0x257EF5A82043772ELL)
                {
LABEL_376:
                  v192 = v188[3];
                  goto LABEL_302;
                }
              }
              else
              {
                if (v190 >= *(_QWORD *)&v184)
                  v190 %= *(_QWORD *)&v184;
                if (v190 != v186)
                  break;
              }
              v188 = (_QWORD *)*v188;
            }
            while (v188);
          }
        }
      }
LABEL_299:
      v192 = operator new();
      *(_QWORD *)(v192 + 16) = "md::components::QueuedForDestruction<>]";
      *(_QWORD *)(v192 + 24) = 38;
      *(_OWORD *)(v192 + 32) = 0u;
      *(_OWORD *)(v192 + 48) = 0u;
      *(_OWORD *)(v192 + 64) = 0u;
      *(_OWORD *)(v192 + 80) = 0u;
      *(_OWORD *)(v192 + 96) = 0u;
      *(_OWORD *)(v192 + 112) = 0u;
      *(_OWORD *)(v192 + 128) = 0u;
      *(_DWORD *)(v192 + 144) = 1065353216;
      *(_OWORD *)(v192 + 152) = 0u;
      *(_OWORD *)(v192 + 168) = 0u;
      *(_QWORD *)(v192 + 184) = 0;
      *(_DWORD *)(v192 + 192) = 1065353216;
      *(_OWORD *)(v192 + 200) = 0u;
      *(_OWORD *)(v192 + 216) = 0u;
      *(_QWORD *)(v192 + 232) = 0;
      *(_DWORD *)(v192 + 240) = 1065353216;
      *(_QWORD *)v192 = &off_1E42B3228;
      *(_QWORD *)(v192 + 8) = 0x257EF5A82043772ELL;
      *(_QWORD *)(v192 + 248) = v257;
      v193 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v254, 0x257EF5A82043772EuLL, &v261);
      v194 = v193[3];
      v193[3] = v192;
      if (v194)
        (*(void (**)(uint64_t))(*(_QWORD *)v194 + 8))(v194);
      *(_QWORD *)buf = 0x257EF5A82043772ELL;
      *(_QWORD *)&buf[8] = "md::components::QueuedForDestruction<>]";
      *(_QWORD *)&buf[16] = 38;
      gdc::Registry::_registerStorageDataSignals(v257, 0x257EF5A82043772ELL, (uint64_t)buf, (uint64_t *)(v192 + 104));
LABEL_302:
      v260 = v183;
      v195 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v192 + 32), (uint64_t)&v260);
      if ((v196 & 1) != 0)
      {
        v201 = *(_BYTE **)(v192 + 88);
        v200 = *(_QWORD *)(v192 + 96);
        if ((unint64_t)v201 >= v200)
        {
          v203 = *(char **)(v192 + 80);
          v204 = v201 - v203;
          v205 = v201 - v203 + 1;
          if (v205 < 0)
            goto LABEL_386;
          v206 = v200 - (_QWORD)v203;
          if (2 * v206 > v205)
            v205 = 2 * v206;
          if (v206 >= 0x3FFFFFFFFFFFFFFFLL)
            v207 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v207 = v205;
          if (v207)
            v208 = (char *)operator new(v207);
          else
            v208 = 0;
          v209 = &v208[v207];
          v202 = (uint64_t)&v208[v204 + 1];
          v210 = (char *)(v203 - v201);
          if (v203 == v201)
            v210 = 0;
          *(_QWORD *)(v192 + 80) = &v208[v204 + (_QWORD)v210];
          *(_QWORD *)(v192 + 88) = v202;
          *(_QWORD *)(v192 + 96) = v209;
          if (v203)
            operator delete(v203);
        }
        else
        {
          v202 = (uint64_t)(v201 + 1);
        }
        *(_QWORD *)(v192 + 88) = v202;
        v197 = *(_QWORD *)(v192 + 248);
      }
      else
      {
        v197 = *(_QWORD *)(v192 + 248);
        if (*(_QWORD *)(v192 + 80) + (((uint64_t)v195 - *(_QWORD *)(v192 + 56)) >> 3) != *(_QWORD *)(v192 + 88))
        {
          v198 = *(_QWORD **)(v192 + 128);
          if (v198)
          {
            while (1)
            {
              *(_QWORD *)buf = &v260;
              *(_QWORD *)&buf[8] = 1;
              v261 = v197;
              v199 = v198[6];
              if (!v199)
                goto LABEL_383;
              (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v199 + 48))(v199, &v261, buf);
              v198 = (_QWORD *)*v198;
              if (!v198)
                goto LABEL_327;
            }
          }
          goto LABEL_327;
        }
      }
      v211 = *(_QWORD **)(v192 + 176);
      if (v211)
      {
        while (1)
        {
          *(_QWORD *)buf = &v260;
          *(_QWORD *)&buf[8] = 1;
          v261 = v197;
          v212 = v211[6];
          if (!v212)
            break;
          (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v212 + 48))(v212, &v261, buf);
          v211 = (_QWORD *)*v211;
          if (!v211)
            goto LABEL_327;
        }
LABEL_383:
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
      }
LABEL_327:
      v213 = *v182;
      v261 = 0xB02BC19BABA3EE9ELL;
      v214 = *(int8x8_t *)(v257 + 128);
      if (v214)
      {
        v215 = (uint8x8_t)vcnt_s8(v214);
        v215.i16[0] = vaddlv_u8(v215);
        if (v215.u32[0] > 1uLL)
        {
          v216 = 0xB02BC19BABA3EE9ELL;
          if (*(_QWORD *)&v214 <= 0xB02BC19BABA3EE9ELL)
            v216 = 0xB02BC19BABA3EE9ELL % *(_QWORD *)&v214;
        }
        else
        {
          v216 = (*(_QWORD *)&v214 - 1) & 0xB02BC19BABA3EE9ELL;
        }
        v217 = *(_QWORD **)(*v254 + 8 * v216);
        if (v217)
        {
          v218 = (_QWORD *)*v217;
          if (v218)
          {
            if (v215.u32[0] < 2uLL)
            {
              v219 = *(_QWORD *)&v214 - 1;
              while (1)
              {
                v221 = v218[1];
                if (v221 == 0xB02BC19BABA3EE9ELL)
                {
                  if (v218[2] == 0xB02BC19BABA3EE9ELL)
                    goto LABEL_377;
                }
                else if ((v221 & v219) != v216)
                {
                  goto LABEL_347;
                }
                v218 = (_QWORD *)*v218;
                if (!v218)
                  goto LABEL_347;
              }
            }
            do
            {
              v220 = v218[1];
              if (v220 == 0xB02BC19BABA3EE9ELL)
              {
                if (v218[2] == 0xB02BC19BABA3EE9ELL)
                {
LABEL_377:
                  v222 = v218[3];
                  goto LABEL_350;
                }
              }
              else
              {
                if (v220 >= *(_QWORD *)&v214)
                  v220 %= *(_QWORD *)&v214;
                if (v220 != v216)
                  break;
              }
              v218 = (_QWORD *)*v218;
            }
            while (v218);
          }
        }
      }
LABEL_347:
      v222 = operator new();
      *(_QWORD *)(v222 + 16) = "md::components::QueuedForDestruction<md::DrapingLogic>]";
      *(_QWORD *)(v222 + 24) = 54;
      *(_OWORD *)(v222 + 32) = 0u;
      *(_OWORD *)(v222 + 48) = 0u;
      *(_OWORD *)(v222 + 64) = 0u;
      *(_OWORD *)(v222 + 80) = 0u;
      *(_OWORD *)(v222 + 96) = 0u;
      *(_OWORD *)(v222 + 112) = 0u;
      *(_OWORD *)(v222 + 128) = 0u;
      *(_DWORD *)(v222 + 144) = 1065353216;
      *(_OWORD *)(v222 + 152) = 0u;
      *(_OWORD *)(v222 + 168) = 0u;
      *(_QWORD *)(v222 + 184) = 0;
      *(_DWORD *)(v222 + 192) = 1065353216;
      *(_OWORD *)(v222 + 200) = 0u;
      *(_OWORD *)(v222 + 216) = 0u;
      *(_QWORD *)(v222 + 232) = 0;
      *(_DWORD *)(v222 + 240) = 1065353216;
      *(_QWORD *)v222 = &off_1E42B3288;
      *(_QWORD *)(v222 + 8) = 0xB02BC19BABA3EE9ELL;
      *(_QWORD *)(v222 + 248) = v257;
      v223 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v254, 0xB02BC19BABA3EE9ELL, &v261);
      v224 = v223[3];
      v223[3] = v222;
      if (v224)
        (*(void (**)(uint64_t))(*(_QWORD *)v224 + 8))(v224);
      *(_QWORD *)buf = 0xB02BC19BABA3EE9ELL;
      *(_QWORD *)&buf[8] = "md::components::QueuedForDestruction<md::DrapingLogic>]";
      *(_QWORD *)&buf[16] = 54;
      gdc::Registry::_registerStorageDataSignals(v257, 0xB02BC19BABA3EE9ELL, (uint64_t)buf, (uint64_t *)(v222 + 104));
LABEL_350:
      v260 = v213;
      v225 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v222 + 32), (uint64_t)&v260);
      if ((v226 & 1) != 0)
      {
        v231 = *(_BYTE **)(v222 + 88);
        v230 = *(_QWORD *)(v222 + 96);
        if ((unint64_t)v231 >= v230)
        {
          v233 = *(char **)(v222 + 80);
          v234 = v231 - v233;
          v235 = v231 - v233 + 1;
          if (v235 < 0)
LABEL_386:
            abort();
          v236 = v230 - (_QWORD)v233;
          if (2 * v236 > v235)
            v235 = 2 * v236;
          if (v236 >= 0x3FFFFFFFFFFFFFFFLL)
            v237 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v237 = v235;
          if (v237)
            v238 = (char *)operator new(v237);
          else
            v238 = 0;
          v239 = &v238[v237];
          v232 = (uint64_t)&v238[v234 + 1];
          v240 = (char *)(v233 - v231);
          if (v233 == v231)
            v240 = 0;
          *(_QWORD *)(v222 + 80) = &v238[v234 + (_QWORD)v240];
          *(_QWORD *)(v222 + 88) = v232;
          *(_QWORD *)(v222 + 96) = v239;
          if (v233)
            operator delete(v233);
        }
        else
        {
          v232 = (uint64_t)(v231 + 1);
        }
        *(_QWORD *)(v222 + 88) = v232;
        v227 = *(_QWORD *)(v222 + 248);
      }
      else
      {
        v227 = *(_QWORD *)(v222 + 248);
        if (*(_QWORD *)(v222 + 80) + (((uint64_t)v225 - *(_QWORD *)(v222 + 56)) >> 3) != *(_QWORD *)(v222 + 88))
        {
          v228 = *(_QWORD **)(v222 + 128);
          if (v228)
          {
            while (1)
            {
              *(_QWORD *)buf = &v260;
              *(_QWORD *)&buf[8] = 1;
              v261 = v227;
              v229 = v228[6];
              if (!v229)
                goto LABEL_383;
              (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v229 + 48))(v229, &v261, buf);
              v228 = (_QWORD *)*v228;
              if (!v228)
                goto LABEL_278;
            }
          }
          goto LABEL_278;
        }
      }
      for (n = *(_QWORD **)(v222 + 176); n; n = (_QWORD *)*n)
      {
        *(_QWORD *)buf = &v260;
        *(_QWORD *)&buf[8] = 1;
        v261 = v227;
        v242 = n[6];
        if (!v242)
          goto LABEL_383;
        (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v242 + 48))(v242, &v261, buf);
      }
LABEL_278:
      if (++v182 != v251)
        continue;
      break;
    }
    v182 = (uint64_t *)v258;
    v181 = v248;
LABEL_379:
    if (v182)
      operator delete(v182);
    v181 = (_QWORD *)*v181;
    if (v181)
      continue;
    break;
  }
}

void sub_19F3E7F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  md::overlayComponents::DrapedRasterOverlay::~DrapedRasterOverlay((md::overlayComponents::DrapedRasterOverlay *)va);
  _Unwind_Resume(a1);
}

void sub_19F3E7F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F3E7F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p)
{
  uint64_t v18;

  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void md::FoundationOverlayPair::~FoundationOverlayPair(md::FoundationOverlayPair *this)
{
  void *v2;
  void *v3;

  if (*((_BYTE *)this + 208))
    *((_BYTE *)this + 208) = 0;
  v2 = (void *)*((_QWORD *)this + 16);
  if (v2 != *((void **)this + 18))
    free(v2);
  if (*((_BYTE *)this + 96))
    *((_BYTE *)this + 96) = 0;
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3 != *((void **)this + 4))
    free(v3);
}

void md::DrapingLogic::_fixUpHoles(uint64_t a1, _QWORD *a2, _QWORD *a3, char **a4)
{
  _QWORD *v4;
  int64x2_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t **v25;
  BOOL v26;
  _BOOL4 v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t **v30;
  unsigned __int8 *v31;
  unsigned int v32;
  const void *v33;
  uint64_t *v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t *v37;
  const void *v38;
  uint64_t *v39;
  uint64_t *v40;
  unint64_t v41;
  _BYTE *v42;
  char *v43;
  uint64_t *v44;
  uint64_t **v45;
  uint64_t **v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t v49;
  const void *v50;
  size_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t *v55;
  _BYTE *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t **v67;
  char *__ptr32 *v68;
  NSObject *v69;
  _BOOL4 v70;
  NSObject *v71;
  int v72;
  std::string::size_type v73;
  std::string *v74;
  _BYTE *v75;
  _WORD *v76;
  int64_t v77;
  uint64_t v78;
  char *v79;
  unsigned __int16 *v80;
  uint64_t *v81;
  int v82;
  int v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  char *v86;
  char *v87;
  unsigned __int8 **v88;
  const void *v89;
  size_t v90;
  uint64_t *v91;
  char *v92;
  unsigned __int8 *v93;
  int v94;
  int v95;
  int v96;
  unsigned __int8 *v97;
  int v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  unsigned __int8 **v104;
  char *v105;
  char *v106;
  __int128 v107;
  unsigned __int8 *i;
  char *v109;
  unsigned __int16 *v110;
  unsigned int v111;
  int *v112;
  int v113;
  int v114;
  int v115;
  char v116;
  BOOL v117;
  std::string::size_type size;
  std::string::size_type *p_size;
  std::string::size_type *j;
  unsigned int v122;
  size_t v123;
  const void *v124;
  const void *v125;
  size_t v126;
  _BYTE *v127;
  std::string::size_type v128;
  uint64_t v129;
  _BYTE *v130;
  uint64_t v131;
  _BYTE *v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE *v139;
  uint64_t v140;
  std::string::size_type v141;
  unint64_t v142;
  std::string::size_type v143;
  unint64_t v144;
  std::string *v145;
  std::string *v146;
  char *v147;
  char *v148;
  std::string *v149;
  std::string *v150;
  NSObject *v151;
  _BOOL4 v152;
  NSObject *v153;
  std::string *v154;
  char *v155;
  double v156;
  char *v157;
  _BYTE *v158;
  char *v159;
  double v160;
  int16x4_t v161;
  double v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  void *v166;
  std::string::size_type v167;
  std::string::size_type v168;
  void *v169;
  void *v170;
  NSObject *v171;
  char *v172;
  char *k;
  uint64_t **v174;
  unsigned __int16 *v175;
  unsigned __int16 *v176;
  unint64_t v177;
  uint64_t v178;
  unsigned __int16 *v179;
  unsigned __int8 *v180;
  unsigned __int8 *v181;
  int v182;
  int v183;
  uint64_t v184;
  const void *v185;
  size_t v186;
  const void *v187;
  char *v188;
  uint64_t **v189;
  double v190;
  int16x4_t v191;
  unsigned __int16 *v192;
  unsigned __int16 *v193;
  unint64_t v194;
  uint64_t v195;
  unsigned __int16 *v196;
  _BYTE *v197;
  double v198;
  std::__shared_weak_count *v199;
  std::__shared_weak_count *v200;
  void *v201;
  std::__shared_weak_count_vtbl *v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  void *v206;
  NSObject *v207;
  _BOOL4 v208;
  NSObject *v209;
  std::string *v210;
  NSObject *v211;
  double v212;
  std::string *v213;
  uint64_t v214;
  std::string *v215;
  float v216;
  uint64_t v217;
  NSObject *v218;
  char *v219;
  double v220;
  int16x4_t v221;
  double v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  void *v226;
  NSObject *v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  void *v231;
  char *v232;
  char *n;
  void *v234;
  uint64_t *v235;
  uint64_t **v236;
  char *m;
  unsigned __int8 *v238;
  unsigned __int8 *v239;
  int v240;
  int v241;
  uint64_t v242;
  const void *v243;
  size_t v244;
  const void *v245;
  uint64_t **v246;
  double v247;
  int16x4_t v248;
  unsigned __int16 *v249;
  unsigned __int16 *v250;
  unint64_t v251;
  uint64_t v252;
  unsigned __int16 *v253;
  char *v254;
  double v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  void *v259;
  NSObject *v260;
  _BYTE *v261;
  NSObject *v262;
  _QWORD *v263;
  std::__shared_weak_count *v264;
  unint64_t *p_shared_owners;
  unint64_t v266;
  char *v267;
  NSObject *v268;
  NSObject *v269;
  _BOOL4 v270;
  NSObject *v271;
  std::string *v272;
  char *v273;
  char *v274;
  void *v275;
  NSObject *v276;
  _BOOL4 v277;
  NSObject *v278;
  std::string *v279;
  uint64_t v280;
  unsigned __int16 *v281;
  unsigned __int16 *v282;
  const gdc::LayerDataRequestKey *v283;
  uint64_t v284;
  unsigned int v285;
  int *v286;
  unsigned int v287;
  BOOL v288;
  unsigned int v289;
  int *v290;
  int *v291;
  uint64_t *v292;
  char *v293;
  char *v294;
  char *v295;
  int v296;
  int v297;
  int v298;
  unsigned int v299;
  char v300;
  int v301;
  int v302;
  unint64_t v303;
  unint64_t v304;
  char *v305;
  char *v306;
  char *ii;
  __int16 v308;
  char *jj;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  void *v313;
  unint64_t *v314;
  unint64_t v315;
  std::__shared_weak_count *v316;
  _BYTE *v317;
  _BYTE *kk;
  void *v319;
  _QWORD *v322;
  unsigned __int8 **v323;
  _QWORD *v324;
  uint64_t v325;
  unsigned __int8 *v326;
  gdc::LayerDataCollector *v327;
  unsigned __int16 *v329;
  unsigned __int16 *v330;
  std::__shared_weak_count *v331;
  uint64_t **v332;
  unsigned __int8 **v333;
  char *v334;
  char v335;
  _QWORD *v336;
  unsigned int v337;
  int v338;
  unsigned int v339;
  char *v340;
  int v341;
  int v342;
  char *v343;
  char v344[8];
  uint64_t v345;
  void *v346;
  void *v347;
  char v348;
  int v349;
  unint64_t v350;
  char v351[8];
  uint64_t v352;
  void *v353;
  void *v354;
  char v355;
  int v356;
  uint64_t *v357;
  std::string::value_type v358[8];
  uint64_t v359;
  void *v360;
  void *v361;
  char v362;
  int v363;
  unint64_t v364;
  char v365[8];
  uint64_t v366;
  void *v367;
  void *v368;
  char v369;
  int v370;
  uint64_t *v371;
  void *v372;
  std::__shared_weak_count *v373;
  _BYTE *v374;
  char v375[8];
  uint64_t v376;
  void *v377;
  void *v378;
  char v379;
  int v380;
  unint64_t v381;
  char v382[8];
  uint64_t v383;
  void *v384;
  void *v385;
  char v386;
  int v387;
  uint64_t *v388;
  std::string::value_type v389[8];
  uint64_t v390;
  void *v391;
  void *v392;
  char v393;
  int v394;
  unint64_t v395;
  char v396[8];
  uint64_t v397;
  void *v398;
  void *v399;
  char v400;
  int v401;
  uint64_t *v402;
  void *v403;
  _BYTE *v404;
  unint64_t v405;
  uint64_t **v406;
  uint64_t *v407;
  uint64_t v408;
  void *v409;
  char *v410;
  char *v411;
  void *v412;
  void *v413;
  _WORD *v414;
  void *v415;
  char *v416;
  uint64_t v417;
  void *v418;
  void *v419;
  char v420;
  int v421;
  unint64_t v422;
  __int128 v423;
  char *v424;
  uint8_t v425;
  uint64_t v426;
  void *v427;
  void *v428;
  char v429;
  int v430;
  unint64_t v431;
  std::string v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t *v435;
  uint64_t v436;
  char v437;
  int v438;
  unint64_t v439;
  __int128 __p;
  char *v441;
  std::string v442;
  uint8_t buf[32];
  uint64_t v444;
  char v445;
  int v446;
  unint64_t v447;
  _BYTE v448[12];
  void *v449;
  uint64_t v450;
  void *v451;
  uint64_t v452;
  char v453;
  int v454;
  unint64_t v455;
  uint64_t v456;

  v4 = a2;
  v5 = (int64x2_t *)a1;
  v456 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t *)a3[2];
  v7 = *v6;
  v8 = v6[1];
  if (v7 != v8)
  {
    while (*(_WORD *)v7 != 1)
    {
      v7 += 32;
      if (v7 == v8)
      {
        v7 = v8;
        break;
      }
    }
  }
  v325 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 16);
  v408 = 0;
  v407 = 0;
  v406 = &v407;
  if (a2)
  {
    do
    {
      v9 = v4 + 2;
      v10 = *(unsigned __int8 *)(v4[4] + 8);
      v11 = *(unsigned __int8 *)(v4[18] + 8);
      v12 = v10 > v11;
      if (v10 <= v11)
        v13 = 2;
      else
        v13 = 16;
      if (v12)
        v14 = v4 + 16;
      else
        v14 = v4 + 2;
      v448[0] = v4[v13];
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v448[8], (uint64_t)(v14 + 1));
      v453 = 0;
      if (*((_BYTE *)v14 + 96))
      {
        v454 = *((_DWORD *)v14 + 25);
        v453 = 1;
      }
      v455 = v14[13];
      v15 = *(unsigned __int8 *)(v4[4] + 8);
      v16 = *(unsigned __int8 *)(v4[18] + 8);
      v17 = v15 > v16;
      if (v15 <= v16)
        v18 = 16;
      else
        v18 = 2;
      if (!v17)
        v9 = v4 + 16;
      buf[0] = v4[v18];
      gdc::LayerDataKey::LayerDataKey((uint64_t)&buf[8], (uint64_t)(v9 + 1));
      v445 = 0;
      if (*((_BYTE *)v9 + 96))
      {
        v446 = *((_DWORD *)v9 + 25);
        v445 = 1;
      }
      v447 = v9[13];
      v19 = v407;
      if (!v407)
        goto LABEL_64;
      v20 = *(unsigned __int16 *)&v448[8];
      v21 = v452;
      v23 = v449;
      v22 = v450;
      v24 = v450 - (_QWORD)v449;
      v337 = v448[0];
      v25 = &v407;
      do
      {
        v29 = v19;
        v30 = v25;
        v31 = (unsigned __int8 *)(v19 + 4);
        v32 = *((unsigned __int16 *)v19 + 20);
        v26 = v32 >= v20;
        if (v32 != v20)
          goto LABEL_26;
        if (v29[14] == v21)
        {
          v33 = (const void *)v29[6];
          if (v29[7] - (_QWORD)v33 == v24 && !memcmp(v33, v23, v22 - (_QWORD)v23))
          {
            v26 = *v31 >= v337;
LABEL_26:
            v27 = !v26;
            goto LABEL_29;
          }
        }
        v27 = gdc::GenericKey::operator<(v29[6], v29[7], (uint64_t)v23, v22);
LABEL_29:
        v28 = v29 + 1;
        if (v27)
        {
          v25 = v30;
        }
        else
        {
          v28 = v29;
          v25 = (uint64_t **)v29;
        }
        v19 = (uint64_t *)*v28;
      }
      while (v19);
      if (v25 != &v407)
      {
        if (v27)
        {
          v31 = (unsigned __int8 *)(v30 + 4);
          v34 = (uint64_t *)v30;
        }
        else
        {
          v34 = v29;
        }
        v35 = *((unsigned __int16 *)v34 + 20);
        if (v20 == v35)
        {
          if (v27)
            v36 = (uint64_t *)v30;
          else
            v36 = v29;
          if (v21 == v36[14]
            && (!v27 ? (v37 = v29) : (v37 = (uint64_t *)v30),
                (v38 = (const void *)v37[6], v24 == v37[7] - (_QWORD)v38) && !memcmp(v23, v38, v22 - (_QWORD)v23)))
          {
            if (v337 >= *v31)
              goto LABEL_56;
          }
          else
          {
            if (v27)
              v39 = (uint64_t *)v30;
            else
              v39 = v29;
            if (!gdc::GenericKey::operator<((uint64_t)v23, v22, v39[6], v39[7]))
            {
LABEL_56:
              if (v27)
                v40 = (uint64_t *)v30;
              else
                v40 = v29;
              v41 = v40[19];
              if (v41 >= v40[20])
              {
                if (v27)
                  v62 = (uint64_t *)v30;
                else
                  v62 = v29;
                v42 = std::vector<gdc::LayerDataRequestKey>::__push_back_slow_path<gdc::LayerDataRequestKey const&>((void **)v62 + 18, (uint64_t)buf);
              }
              else
              {
                *(_BYTE *)v41 = buf[0];
                gdc::LayerDataKey::LayerDataKey(v41 + 8, (uint64_t)&buf[8]);
                *(_BYTE *)(v41 + 96) = 0;
                if (v445)
                {
                  *(_DWORD *)(v41 + 100) = v446;
                  *(_BYTE *)(v41 + 96) = 1;
                }
                *(_QWORD *)(v41 + 104) = v447;
                v42 = (_BYTE *)(v41 + 112);
                v40[19] = v41 + 112;
              }
              v5 = (int64x2_t *)a1;
              v40[19] = (uint64_t)v42;
              if (!v445)
                goto LABEL_116;
LABEL_115:
              v445 = 0;
              goto LABEL_116;
            }
          }
        }
        else if (v20 >= v35)
        {
          goto LABEL_56;
        }
      }
LABEL_64:
      v425 = buf[0];
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v426, (uint64_t)&buf[8]);
      v429 = 0;
      if (v445)
      {
        v430 = v446;
        v429 = 1;
      }
      v431 = v447;
      v418 = 0;
      v416 = 0;
      v417 = 0;
      v43 = (char *)operator new(0x70uLL);
      v416 = v43;
      v418 = v43 + 112;
      *v43 = v425;
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v43 + 8), (uint64_t)&v426);
      v43[96] = 0;
      if (v429)
      {
        *((_DWORD *)v43 + 25) = v430;
        v43[96] = 1;
      }
      *((_QWORD *)v43 + 13) = v431;
      v432.__r_.__value_.__s.__data_[0] = v448[0];
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v432.__r_.__value_.__l.__size_, (uint64_t)&v448[8]);
      v437 = 0;
      if (v453)
      {
        v438 = v454;
        v437 = 1;
      }
      v439 = v455;
      *(_QWORD *)&__p = v43;
      *((_QWORD *)&__p + 1) = v43 + 112;
      v441 = v43 + 112;
      v418 = 0;
      v416 = 0;
      v417 = 0;
      v44 = v407;
      v45 = &v407;
      v46 = &v407;
      if (v407)
      {
        v47 = LOWORD(v432.__r_.__value_.__r.__words[1]);
        v48 = v435;
        v49 = v433;
        v50 = (const void *)v432.__r_.__value_.__r.__words[2];
        v51 = v433 - v432.__r_.__value_.__r.__words[2];
        v52 = v432.__r_.__value_.__s.__data_[0];
        while (1)
        {
          v45 = (uint64_t **)v44;
          v53 = *((unsigned __int16 *)v44 + 20);
          if (v47 != v53)
            break;
          if (v48 == v45[14] && (v54 = v45[6], v51 == (char *)v45[7] - (char *)v54) && !memcmp(v50, v54, v51))
          {
            if (v52 >= *((unsigned __int8 *)v45 + 32))
              goto LABEL_78;
LABEL_72:
            v44 = *v45;
            v46 = v45;
            if (!*v45)
              goto LABEL_91;
          }
          else
          {
            if (gdc::GenericKey::operator<((uint64_t)v50, v49, (uint64_t)v45[6], (uint64_t)v45[7]))
              goto LABEL_72;
LABEL_78:
            if (v45[14] == v48 && (v55 = v45[6], (char *)v45[7] - (char *)v55 == v51) && !memcmp(v55, v50, v51))
            {
              if (*((unsigned __int8 *)v45 + 32) >= v52)
                goto LABEL_96;
            }
            else if (!gdc::GenericKey::operator<((uint64_t)v45[6], (uint64_t)v45[7], (uint64_t)v50, v49))
            {
              goto LABEL_96;
            }
LABEL_85:
            v46 = v45 + 1;
            v44 = v45[1];
            if (!v44)
              goto LABEL_91;
          }
        }
        if (v47 >= v53)
        {
          if (v53 >= v47)
            goto LABEL_96;
          goto LABEL_85;
        }
        goto LABEL_72;
      }
LABEL_91:
      v56 = operator new(0xA8uLL);
      v56[32] = v432.__r_.__value_.__s.__data_[0];
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v56 + 40), (uint64_t)&v432.__r_.__value_.__l.__size_);
      v56[128] = 0;
      if (v437)
      {
        *((_DWORD *)v56 + 33) = v438;
        v56[128] = 1;
      }
      v57 = v441;
      *((_QWORD *)v56 + 17) = v439;
      *((_OWORD *)v56 + 9) = __p;
      *((_QWORD *)v56 + 20) = v57;
      v441 = 0;
      __p = 0uLL;
      *(_QWORD *)v56 = 0;
      *((_QWORD *)v56 + 1) = 0;
      *((_QWORD *)v56 + 2) = v45;
      *v46 = (uint64_t *)v56;
      if (*v406)
      {
        v406 = (uint64_t **)*v406;
        v56 = *v46;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v407, (uint64_t *)v56);
      ++v408;
LABEL_96:
      v58 = __p;
      v5 = (int64x2_t *)a1;
      if ((_QWORD)__p)
      {
        v59 = *((_QWORD *)&__p + 1);
        v60 = (void *)__p;
        if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
        {
          do
          {
            if (*(_BYTE *)(v59 - 16))
              *(_BYTE *)(v59 - 16) = 0;
            v61 = *(void **)(v59 - 96);
            if (v61 != *(void **)(v59 - 80))
              free(v61);
            v59 -= 112;
          }
          while (v59 != v58);
          v60 = (void *)__p;
        }
        *((_QWORD *)&__p + 1) = v58;
        operator delete(v60);
      }
      if (v437)
        v437 = 0;
      if (v432.__r_.__value_.__r.__words[2] != v434)
        free((void *)v432.__r_.__value_.__r.__words[2]);
      if (v429)
        v429 = 0;
      if (v427 != v428)
        free(v427);
      if (v445)
        goto LABEL_115;
LABEL_116:
      if (*(_QWORD *)&buf[16] != v444)
        free(*(void **)&buf[16]);
      if (v453)
        v453 = 0;
      if (v449 != v451)
        free(v449);
      v4 = (_QWORD *)*v4;
    }
    while (v4);
  }
  v63 = (void *)*a3;
  v64 = *(_QWORD *)(*a3 + 112);
  v65 = *(_QWORD *)(*a3 + 120);
  if (v64 != v65)
  {
    while (*(_WORD *)v64 != 1)
    {
      v64 += 112;
      if (v64 == v65)
      {
        v64 = *(_QWORD *)(*a3 + 120);
        break;
      }
    }
  }
  v66 = *(_QWORD **)(v64 + 104);
  v404 = 0;
  v403 = 0;
  v405 = 0;
  v67 = v406;
  v68 = &off_19FFB1000;
  v327 = (gdc::LayerDataCollector *)v66;
  if (v406 != &v407)
  {
    v322 = *(_QWORD **)(v325 + 56);
    v324 = v66 + 6;
    while (1)
    {
      if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_43);
      v69 = (id)GEOGetVectorKitDrapingFallbackLog_log;
      v70 = os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG);

      v326 = (unsigned __int8 *)(v67 + 4);
      if (v70)
        break;
LABEL_150:
      v413 = 0;
      v412 = 0;
      v414 = 0;
      v330 = (unsigned __int16 *)(v67 + 5);
      if (*((_WORD *)v67 + 20) != 33)
      {
        v76 = operator new(2uLL);
        *v76 = 33;
        v414 = v76 + 1;
        v412 = v76;
        v413 = v76 + 1;
        v77 = 2;
        v78 = 1;
LABEL_155:
        v79 = (char *)operator new(v77);
        v80 = (unsigned __int16 *)&v79[2 * v78];
        v329 = (unsigned __int16 *)v79;
        memcpy(v79, v76, v77);
        goto LABEL_156;
      }
      std::vector<md::MapDataType>::__assign_with_size[abi:nn180100]<md::MapDataType*,md::MapDataType*>(&v412, *a4, a4[1], (a4[1] - *a4) >> 1);
      v76 = v412;
      v77 = (_BYTE *)v413 - (_BYTE *)v412;
      if (v413 != v412)
      {
        if (v77 < 0)
          abort();
        v78 = v77 >> 1;
        goto LABEL_155;
      }
      v80 = 0;
      v329 = 0;
LABEL_156:
      v81 = v67[6];
      v342 = *((_DWORD *)v81 + 1);
      v341 = *(_DWORD *)v81;
      v82 = *((_DWORD *)v81 + 2);
      v83 = *((_DWORD *)v81 + 3);
      *(_OWORD *)&v432.__r_.__value_.__r.__words[1] = 0uLL;
      v432.__r_.__value_.__r.__words[0] = (std::string::size_type)&v432.__r_.__value_.__l.__size_;
      v84 = *(unsigned __int8 **)v327;
      v85 = (unsigned __int8 *)*((_QWORD *)v327 + 1);
      v332 = v67;
      if (*(unsigned __int8 **)v327 == v85)
      {
        v87 = 0;
      }
      else
      {
        v86 = 0;
        v323 = 0;
        v87 = 0;
        v335 = v82;
        v339 = v82;
        do
        {
          if (*v84 == *v326 && *((unsigned __int16 *)v84 + 4) == *v330 && *((uint64_t **)v84 + 10) == v67[14])
          {
            v89 = (const void *)*((_QWORD *)v84 + 2);
            v90 = *((_QWORD *)v84 + 3) - (_QWORD)v89;
            v91 = v67[6];
            if (v90 == (char *)v67[7] - (char *)v91 && !memcmp(v89, v91, v90))
            {
              v92 = v87;
              v93 = *(unsigned __int8 **)v327;
              if (*(unsigned __int8 **)v327 != v85)
              {
                v94 = v84[113];
                v95 = *((_DWORD *)v84 + 29);
                v96 = *((_DWORD *)v84 + 30);
                v97 = v93 + 144;
                v98 = v84[112];
                while (v93[112] != v98
                     || v93[113] != v94
                     || *((_DWORD *)v93 + 29) != v95
                     || *((_DWORD *)v93 + 30) != v96)
                {
                  v93 += 144;
                  v97 += 144;
                  if (v93 == v85)
                    goto LABEL_164;
                }
                v99 = v93;
                while (v97 != v85)
                {
                  v100 = v97;
                  v99 += 144;
                  if (v97[112] != v98 || v97[113] != v94 || *((_DWORD *)v97 + 29) != v95)
                  {
                    v100 = v99;
                    goto LABEL_187;
                  }
                  v97 += 144;
                  if (*((_DWORD *)v100 + 30) != v96)
                    goto LABEL_187;
                }
                v100 = v85;
LABEL_187:
                if (v323 < (unsigned __int8 **)v86)
                {
                  *v323 = v93;
                  v323[1] = v100;
                  v88 = v323 + 3;
                  v323[2] = v85;
                }
                else
                {
                  v101 = 0xAAAAAAAAAAAAAAABLL * (((char *)v323 - v92) >> 3) + 1;
                  if (v101 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_804;
                  if (0x5555555555555556 * ((v86 - v92) >> 3) > v101)
                    v101 = 0x5555555555555556 * ((v86 - v92) >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * ((v86 - v92) >> 3) >= 0x555555555555555)
                    v102 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v102 = v101;
                  if (v102)
                  {
                    if (v102 > 0xAAAAAAAAAAAAAAALL)
LABEL_802:
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    v103 = (char *)operator new(24 * v102);
                  }
                  else
                  {
                    v103 = 0;
                  }
                  v104 = (unsigned __int8 **)&v103[8 * (((char *)v323 - v92) >> 3)];
                  *v104 = v93;
                  v104[1] = v100;
                  v104[2] = v85;
                  v105 = (char *)v323;
                  if (v323 == (unsigned __int8 **)v92)
                  {
                    v92 = &v103[8 * (((char *)v323 - v92) >> 3)];
                  }
                  else
                  {
                    v106 = &v103[8 * (((char *)v323 - v92) >> 3)];
                    do
                    {
                      v107 = *(_OWORD *)(v105 - 24);
                      *((_QWORD *)v106 - 1) = *((_QWORD *)v105 - 1);
                      *(_OWORD *)(v106 - 24) = v107;
                      v106 -= 24;
                      v105 -= 24;
                    }
                    while (v105 != v92);
                    v105 = v92;
                    v92 = v106;
                  }
                  v86 = &v103[24 * v102];
                  v88 = v104 + 3;
                  if (v105)
                    operator delete(v105);
                }
                v85 = (unsigned __int8 *)*((_QWORD *)v327 + 1);
                v323 = v88;
              }
LABEL_164:
              v87 = v92;
            }
          }
          v84 += 144;
        }
        while (v84 != v85);
        if (v87 != (char *)v323)
        {
          v333 = (unsigned __int8 **)v87;
          do
          {
            if (v329 != v80)
            {
              for (i = *v333; i != v333[1]; i += 144)
              {
                v109 = v87;
                if (!*i)
                {
                  v110 = v329;
                  do
                  {
                    v111 = *v110;
                    if (*((unsigned __int16 *)i + 4) != v111)
                      goto LABEL_217;
                    v112 = (int *)*((_QWORD *)i + 2);
                    if (*((unsigned __int8 *)v112 + 12) != v83)
                      goto LABEL_217;
                    v113 = v112[1];
                    v114 = v112[2];
                    v115 = *v112;
                    if (v339 >= v114)
                    {
                      v117 = v339 == v114 && v342 == v113;
                    }
                    else
                    {
                      v116 = v114 - v335;
                      v115 >>= v116;
                      v117 = v342 == v113 >> v116;
                    }
                    if (!v117 || v341 != v115)
                      goto LABEL_217;
                    size = v432.__r_.__value_.__l.__size_;
                    p_size = &v432.__r_.__value_.__l.__size_;
LABEL_232:
                    for (j = p_size; size; size = p_size[1])
                    {
                      p_size = (std::string::size_type *)size;
                      v122 = *(unsigned __int16 *)(size + 40);
                      if (v111 == v122)
                      {
                        if (*((_QWORD *)i + 10) == p_size[14]
                          && (v123 = *((_QWORD *)i + 3) - (_QWORD)v112,
                              v124 = (const void *)p_size[6],
                              v123 == p_size[7] - (_QWORD)v124)
                          && !memcmp(v112, v124, v123))
                        {
                          if (*i < *((unsigned __int8 *)p_size + 32))
                          {
LABEL_231:
                            size = *p_size;
                            goto LABEL_232;
                          }
                        }
                        else if (gdc::GenericKey::operator<((uint64_t)v112, *((_QWORD *)i + 3), p_size[6], p_size[7]))
                        {
                          goto LABEL_231;
                        }
                        if (p_size[14] == *((_QWORD *)i + 10)
                          && (v125 = (const void *)p_size[6],
                              v126 = p_size[7] - (_QWORD)v125,
                              v126 == *((_QWORD *)i + 3) - (_QWORD)v112)
                          && !memcmp(v125, v112, v126))
                        {
                          if (*((unsigned __int8 *)p_size + 32) >= *i)
                            goto LABEL_217;
                        }
                        else if (!gdc::GenericKey::operator<(p_size[6], p_size[7], (uint64_t)v112, *((_QWORD *)i + 3)))
                        {
                          goto LABEL_217;
                        }
                      }
                      else
                      {
                        if (v111 < v122)
                          goto LABEL_231;
                        if (v122 >= v111)
                          goto LABEL_217;
                      }
                      j = p_size + 1;
                    }
                    v127 = operator new(0x90uLL);
                    v127[32] = *i;
                    gdc::LayerDataKey::LayerDataKey((uint64_t)(v127 + 40), (uint64_t)(i + 8));
                    v127[128] = 0;
                    if (i[96])
                    {
                      *((_DWORD *)v127 + 33) = *((_DWORD *)i + 25);
                      v127[128] = 1;
                    }
                    *((_QWORD *)v127 + 17) = *((_QWORD *)i + 13);
                    *(_QWORD *)v127 = 0;
                    *((_QWORD *)v127 + 1) = 0;
                    *((_QWORD *)v127 + 2) = p_size;
                    *j = (std::string::size_type)v127;
                    if (*(_QWORD *)v432.__r_.__value_.__l.__data_)
                    {
                      v432.__r_.__value_.__r.__words[0] = *(_QWORD *)v432.__r_.__value_.__l.__data_;
                      v127 = (_BYTE *)*j;
                    }
                    v128 = v432.__r_.__value_.__l.__size_;
                    v117 = v127 == (_BYTE *)v432.__r_.__value_.__l.__size_;
                    v127[24] = v127 == (_BYTE *)v432.__r_.__value_.__l.__size_;
                    if (!v117)
                    {
                      do
                      {
                        v129 = *((_QWORD *)v127 + 2);
                        if (*(_BYTE *)(v129 + 24))
                          break;
                        v130 = *(_BYTE **)(v129 + 16);
                        v131 = *(_QWORD *)v130;
                        if (*(_QWORD *)v130 == v129)
                        {
                          v134 = *((_QWORD *)v130 + 1);
                          if (!v134 || (v135 = *(unsigned __int8 *)(v134 + 24), v132 = (_BYTE *)(v134 + 24), v135))
                          {
                            if (*(_BYTE **)v129 == v127)
                            {
                              v136 = (uint64_t *)*((_QWORD *)v127 + 2);
                            }
                            else
                            {
                              v136 = *(uint64_t **)(v129 + 8);
                              v137 = *v136;
                              *(_QWORD *)(v129 + 8) = *v136;
                              if (v137)
                              {
                                *(_QWORD *)(v137 + 16) = v129;
                                v130 = *(_BYTE **)(v129 + 16);
                              }
                              v136[2] = (uint64_t)v130;
                              *(_QWORD *)(*(_QWORD *)(v129 + 16) + 8 * (**(_QWORD **)(v129 + 16) != v129)) = v136;
                              *v136 = v129;
                              *(_QWORD *)(v129 + 16) = v136;
                              v130 = (_BYTE *)v136[2];
                              v129 = *(_QWORD *)v130;
                            }
                            *((_BYTE *)v136 + 24) = 1;
                            v130[24] = 0;
                            v140 = *(_QWORD *)(v129 + 8);
                            *(_QWORD *)v130 = v140;
                            if (v140)
                              *(_QWORD *)(v140 + 16) = v130;
                            *(_QWORD *)(v129 + 16) = *((_QWORD *)v130 + 2);
                            *(_QWORD *)(*((_QWORD *)v130 + 2) + 8 * (**((_QWORD **)v130 + 2) != (_QWORD)v130)) = v129;
                            *(_QWORD *)(v129 + 8) = v130;
                            goto LABEL_215;
                          }
                        }
                        else if (!v131 || (v133 = *(unsigned __int8 *)(v131 + 24), v132 = (_BYTE *)(v131 + 24), v133))
                        {
                          if (*(_BYTE **)v129 == v127)
                          {
                            v138 = *((_QWORD *)v127 + 1);
                            *(_QWORD *)v129 = v138;
                            if (v138)
                            {
                              *(_QWORD *)(v138 + 16) = v129;
                              v130 = *(_BYTE **)(v129 + 16);
                            }
                            *((_QWORD *)v127 + 2) = v130;
                            *(_QWORD *)(*(_QWORD *)(v129 + 16) + 8 * (**(_QWORD **)(v129 + 16) != v129)) = v127;
                            *((_QWORD *)v127 + 1) = v129;
                            *(_QWORD *)(v129 + 16) = v127;
                            v130 = (_BYTE *)*((_QWORD *)v127 + 2);
                          }
                          else
                          {
                            v127 = (_BYTE *)*((_QWORD *)v127 + 2);
                          }
                          v127[24] = 1;
                          v130[24] = 0;
                          v129 = *((_QWORD *)v130 + 1);
                          v139 = *(_BYTE **)v129;
                          *((_QWORD *)v130 + 1) = *(_QWORD *)v129;
                          if (v139)
                            *((_QWORD *)v139 + 2) = v130;
                          *(_QWORD *)(v129 + 16) = *((_QWORD *)v130 + 2);
                          *(_QWORD *)(*((_QWORD *)v130 + 2) + 8 * (**((_QWORD **)v130 + 2) != (_QWORD)v130)) = v129;
                          *(_QWORD *)v129 = v130;
LABEL_215:
                          *((_QWORD *)v130 + 2) = v129;
                          break;
                        }
                        *(_BYTE *)(v129 + 24) = 1;
                        v127 = v130;
                        v130[24] = v130 == (_BYTE *)v128;
                        *v132 = 1;
                      }
                      while (v130 != (_BYTE *)v128);
                    }
                    ++v432.__r_.__value_.__r.__words[2];
LABEL_217:
                    ++v110;
                  }
                  while (v110 != v80);
                }
                v67 = v332;
                v87 = v109;
              }
            }
            v333 += 3;
          }
          while (v333 != v323);
        }
      }
      v141 = v432.__r_.__value_.__r.__words[0];
      v411 = 0;
      v409 = 0;
      v410 = 0;
      v5 = (int64x2_t *)a1;
      if ((std::string::size_type *)v432.__r_.__value_.__l.__data_ == &v432.__r_.__value_.__r.__words[1])
      {
        v147 = v87;
        v148 = 0;
        if (!v147)
          goto LABEL_303;
      }
      else
      {
        v142 = 0;
        v143 = v432.__r_.__value_.__r.__words[0];
        do
        {
          v144 = v142;
          v145 = *(std::string **)(v143 + 8);
          if (v145)
          {
            do
            {
              v146 = v145;
              v145 = (std::string *)v145->__r_.__value_.__r.__words[0];
            }
            while (v145);
          }
          else
          {
            do
            {
              v146 = *(std::string **)(v143 + 16);
              v117 = v146->__r_.__value_.__r.__words[0] == v143;
              v143 = (std::string::size_type)v146;
            }
            while (!v117);
          }
          ++v142;
          v143 = (std::string::size_type)v146;
        }
        while (v146 != (std::string *)&v432.__r_.__value_.__r.__words[1]);
        v147 = v87;
        if (v144 >= 0x249249249249249)
          abort();
        v148 = (char *)operator new(112 * v142);
        v409 = v148;
        v410 = v148;
        v411 = &v148[112 * v142];
        do
        {
          *v148 = *(_BYTE *)(v141 + 32);
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v148 + 8), v141 + 40);
          v148[96] = 0;
          if (*(_BYTE *)(v141 + 128))
          {
            *((_DWORD *)v148 + 25) = *(_DWORD *)(v141 + 132);
            v148[96] = 1;
          }
          *((_QWORD *)v148 + 13) = *(_QWORD *)(v141 + 136);
          v149 = *(std::string **)(v141 + 8);
          if (v149)
          {
            do
            {
              v150 = v149;
              v149 = (std::string *)v149->__r_.__value_.__r.__words[0];
            }
            while (v149);
          }
          else
          {
            do
            {
              v150 = *(std::string **)(v141 + 16);
              v117 = v150->__r_.__value_.__r.__words[0] == v141;
              v141 = (std::string::size_type)v150;
            }
            while (!v117);
          }
          v148 += 112;
          v141 = (std::string::size_type)v150;
        }
        while (v150 != (std::string *)&v432.__r_.__value_.__r.__words[1]);
        v410 = v148;
        if (!v147)
          goto LABEL_303;
      }
      operator delete(v147);
LABEL_303:
      std::__tree<gdc::LayerDataRequestKey>::destroy((_QWORD *)v432.__r_.__value_.__l.__size_);
      if (v329)
        operator delete(v329);
      if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_43);
      v151 = (id)GEOGetVectorKitDrapingFallbackLog_log;
      v152 = os_log_type_enabled(v151, OS_LOG_TYPE_DEBUG);

      if (v152)
      {
        if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_43);
        v153 = (id)GEOGetVectorKitDrapingFallbackLog_log;
        if (os_log_type_enabled(v153, OS_LOG_TYPE_DEBUG))
        {
          v154 = &v432;
          if ((v432.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v154 = (std::string *)v432.__r_.__value_.__r.__words[0];
          *(_DWORD *)v448 = 136315138;
          *(_QWORD *)&v448[4] = v154;
          _os_log_impl(&dword_19F029000, v153, OS_LOG_TYPE_DEBUG, "smaller keys covering: %s", v448, 0xCu);
          if (SHIBYTE(v432.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v432.__r_.__value_.__l.__data_);
        }

      }
      v155 = (char *)v409;
      v156 = 0.0;
      if (v409 != v148)
      {
        v157 = (char *)v409;
        do
        {
          v432.__r_.__value_.__s.__data_[0] = *v157;
          gdc::LayerDataKey::LayerDataKey((uint64_t)&v432.__r_.__value_.__l.__size_, (uint64_t)(v157 + 8));
          v437 = 0;
          if (v157[96])
          {
            v438 = *((_DWORD *)v157 + 25);
            v437 = 1;
          }
          v439 = *((_QWORD *)v157 + 13);
          v396[0] = *((_BYTE *)v67 + 32);
          gdc::LayerDataKey::LayerDataKey((uint64_t)&v397, (uint64_t)v330);
          v400 = 0;
          if (*((_BYTE *)v67 + 128))
          {
            v401 = *((_DWORD *)v67 + 33);
            v400 = 1;
          }
          v402 = v67[17];
          v389[0] = v432.__r_.__value_.__s.__data_[0];
          gdc::LayerDataKey::LayerDataKey((uint64_t)&v390, (uint64_t)&v432.__r_.__value_.__l.__size_);
          v393 = 0;
          if (v437)
          {
            v394 = v438;
            v393 = 1;
          }
          v395 = v439;
          v448[0] = *((_BYTE *)v67 + 32);
          gdc::LayerDataKey::LayerDataKey((uint64_t)&v448[8], (uint64_t)v330);
          v453 = 0;
          if (*((_BYTE *)v67 + 128))
          {
            v454 = *((_DWORD *)v67 + 33);
            v453 = 1;
          }
          v455 = (unint64_t)v67[17];
          memset(&v442, 0, sizeof(v442));
          v158 = operator new(0x70uLL);
          v442.__r_.__value_.__r.__words[0] = (std::string::size_type)v158;
          v442.__r_.__value_.__l.__size_ = (std::string::size_type)v158;
          v442.__r_.__value_.__r.__words[2] = (std::string::size_type)(v158 + 112);
          *v158 = v448[0];
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v158 + 8), (uint64_t)&v448[8]);
          v158[96] = 0;
          if (v453)
          {
            *((_DWORD *)v158 + 25) = v454;
            v158[96] = 1;
          }
          *((_QWORD *)v158 + 13) = v455;
          v442.__r_.__value_.__l.__size_ = (std::string::size_type)(v158 + 112);
          buf[0] = v432.__r_.__value_.__s.__data_[0];
          gdc::LayerDataKey::LayerDataKey((uint64_t)&buf[8], (uint64_t)&v432.__r_.__value_.__l.__size_);
          v445 = 0;
          if (v437)
          {
            v446 = v438;
            v445 = 1;
          }
          v447 = v439;
          v424 = 0;
          v423 = 0uLL;
          v159 = (char *)operator new(0x70uLL);
          *(_QWORD *)&v423 = v159;
          *((_QWORD *)&v423 + 1) = v159;
          v424 = v159 + 112;
          *v159 = buf[0];
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v159 + 8), (uint64_t)&buf[8]);
          v159[96] = 0;
          if (v445)
          {
            *((_DWORD *)v159 + 25) = v446;
            v159[96] = 1;
          }
          *((_QWORD *)v159 + 13) = v447;
          *((_QWORD *)&v423 + 1) = v159 + 112;
          v162 = md::DrapingLogic::_evaluateCoverageOfTilePairs(a1, (uint64_t)v396, (uint64_t)v389, (unsigned __int16 **)&v442, (unsigned __int16 **)&v423, v160, v161);
          v163 = v423;
          if ((_QWORD)v423)
          {
            v164 = *((_QWORD *)&v423 + 1);
            v165 = (void *)v423;
            if (*((_QWORD *)&v423 + 1) != (_QWORD)v423)
            {
              do
              {
                if (*(_BYTE *)(v164 - 16))
                  *(_BYTE *)(v164 - 16) = 0;
                v166 = *(void **)(v164 - 96);
                if (v166 != *(void **)(v164 - 80))
                  free(v166);
                v164 -= 112;
              }
              while (v164 != v163);
              v165 = (void *)v423;
            }
            *((_QWORD *)&v423 + 1) = v163;
            operator delete(v165);
          }
          if (v445)
            v445 = 0;
          if (*(_QWORD *)&buf[16] != v444)
            free(*(void **)&buf[16]);
          v167 = v442.__r_.__value_.__r.__words[0];
          if (v442.__r_.__value_.__r.__words[0])
          {
            v168 = v442.__r_.__value_.__l.__size_;
            v169 = (void *)v442.__r_.__value_.__r.__words[0];
            if (v442.__r_.__value_.__l.__size_ != v442.__r_.__value_.__r.__words[0])
            {
              do
              {
                if (*(_BYTE *)(v168 - 16))
                  *(_BYTE *)(v168 - 16) = 0;
                v170 = *(void **)(v168 - 96);
                if (v170 != *(void **)(v168 - 80))
                  free(v170);
                v168 -= 112;
              }
              while (v168 != v167);
              v169 = (void *)v442.__r_.__value_.__r.__words[0];
            }
            v442.__r_.__value_.__l.__size_ = v167;
            operator delete(v169);
          }
          if (v453)
            v453 = 0;
          if (v449 != v451)
            free(v449);
          if (v393)
            v393 = 0;
          if (v391 != v392)
            free(v391);
          if (v400)
            v400 = 0;
          if (v398 != v399)
            free(v398);
          if (v437)
            v437 = 0;
          if (v432.__r_.__value_.__r.__words[2] != v434)
            free((void *)v432.__r_.__value_.__r.__words[2]);
          v156 = v162 + v156;
          v157 += 112;
        }
        while (v157 != v148);
      }
      if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_43);
      v171 = (id)GEOGetVectorKitDrapingFallbackLog_log;
      if (os_log_type_enabled(v171, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v432.__r_.__value_.__l.__data_) = 134217984;
        *(double *)((char *)v432.__r_.__value_.__r.__words + 4) = v156;
        _os_log_impl(&dword_19F029000, v171, OS_LOG_TYPE_DEBUG, "Current Coverage: %f", (uint8_t *)&v432, 0xCu);
      }

      memset(&v442, 0, sizeof(v442));
      v172 = v410;
      for (k = v155; k != v172; k += 112)
      {
        v448[0] = *k;
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v448[8], (uint64_t)(k + 8));
        v453 = 0;
        if (k[96])
        {
          v454 = *((_DWORD *)k + 25);
          v453 = 1;
        }
        v455 = *((_QWORD *)k + 13);
        v180 = (unsigned __int8 *)v67[18];
        v181 = (unsigned __int8 *)v67[19];
        if (v180 == v181)
        {
          v181 = (unsigned __int8 *)v67[18];
        }
        else
        {
          v182 = v448[0];
          v183 = *(unsigned __int16 *)&v448[8];
          v184 = v452;
          v185 = v449;
          v186 = v450 - (_QWORD)v449;
          while (1)
          {
            if (*v180 == v182 && *((unsigned __int16 *)v180 + 4) == v183 && *((_QWORD *)v180 + 10) == v184)
            {
              v187 = (const void *)*((_QWORD *)v180 + 2);
              if (*((_QWORD *)v180 + 3) - (_QWORD)v187 == v186 && !memcmp(v187, v185, v186))
                break;
            }
            v180 += 112;
            if (v180 == v181)
            {
              v180 = v181;
              break;
            }
          }
          v5 = (int64x2_t *)a1;
          v67 = v332;
        }
        v382[0] = *((_BYTE *)v67 + 32);
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v383, (uint64_t)v330);
        v386 = 0;
        if (*((_BYTE *)v67 + 128))
        {
          v387 = *((_DWORD *)v67 + 33);
          v386 = 1;
        }
        v388 = v67[17];
        v375[0] = v448[0];
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v376, (uint64_t)&v448[8]);
        v379 = 0;
        if (v453)
        {
          v380 = v454;
          v379 = 1;
        }
        v381 = v455;
        buf[0] = *((_BYTE *)v67 + 32);
        gdc::LayerDataKey::LayerDataKey((uint64_t)&buf[8], (uint64_t)v330);
        v445 = 0;
        if (*((_BYTE *)v67 + 128))
        {
          v446 = *((_DWORD *)v67 + 33);
          v445 = 1;
        }
        v447 = (unint64_t)v67[17];
        v424 = 0;
        v423 = 0uLL;
        v188 = (char *)operator new(0x70uLL);
        *(_QWORD *)&v423 = v188;
        *((_QWORD *)&v423 + 1) = v188;
        v424 = v188 + 112;
        *v188 = buf[0];
        gdc::LayerDataKey::LayerDataKey((uint64_t)(v188 + 8), (uint64_t)&buf[8]);
        v188[96] = 0;
        if (v445)
        {
          *((_DWORD *)v188 + 25) = v446;
          v188[96] = 1;
        }
        *((_QWORD *)v188 + 13) = v447;
        *((_QWORD *)&v423 + 1) = v188 + 112;
        if (v180 == v181)
        {
          v425 = v448[0];
          gdc::LayerDataKey::LayerDataKey((uint64_t)&v426, (uint64_t)&v448[8]);
          v429 = 0;
          if (v453)
          {
            v430 = v454;
            v429 = 1;
          }
          v431 = v455;
          v374 = 0;
          v372 = 0;
          v373 = 0;
          v197 = operator new(0x70uLL);
          v372 = v197;
          v373 = (std::__shared_weak_count *)v197;
          v374 = v197 + 112;
          *v197 = v425;
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v197 + 8), (uint64_t)&v426);
          v197[96] = 0;
          if (v429)
          {
            *((_DWORD *)v197 + 25) = v430;
            v197[96] = 1;
          }
          *((_QWORD *)v197 + 13) = v431;
          v373 = (std::__shared_weak_count *)(v197 + 112);
        }
        else
        {
          v189 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v324, v448);
          if (!v189)
            goto LABEL_418;
          v192 = (unsigned __int16 *)*((_QWORD *)v327 + 3);
          v193 = (unsigned __int16 *)*((_QWORD *)v327 + 4);
          if (v192 != v193)
          {
            while (*v192 != *(unsigned __int16 *)&v448[8])
            {
              v192 += 16;
              if (v192 == v193)
              {
                v192 = (unsigned __int16 *)*((_QWORD *)v327 + 4);
                break;
              }
            }
          }
          v194 = (unint64_t)v189[16];
          v196 = v192 + 4;
          v195 = *((_QWORD *)v192 + 1);
          if (0x8E38E38E38E38E39 * ((*((_QWORD *)v196 + 1) - v195) >> 4) <= v194)
            goto LABEL_804;
          if (*(_BYTE *)(v195 + 144 * v194 + 132))
          {
            v373 = 0;
            v372 = 0;
            v374 = 0;
          }
          else
          {
LABEL_418:
            v432.__r_.__value_.__s.__data_[0] = v448[0];
            gdc::LayerDataKey::LayerDataKey((uint64_t)&v432.__r_.__value_.__l.__size_, (uint64_t)&v448[8]);
            v437 = 0;
            if (v453)
            {
              v438 = v454;
              v437 = 1;
            }
            v439 = v455;
            md::DrapingLogic::_fallbackTilesForHoleTile((uint64_t)&v372, v5, (uint64_t)&v432, v322);
            if (v437)
              v437 = 0;
            if (v432.__r_.__value_.__r.__words[2] != v434)
              free((void *)v432.__r_.__value_.__r.__words[2]);
          }
        }
        v198 = md::DrapingLogic::_evaluateCoverageOfTilePairs((uint64_t)v5, (uint64_t)v382, (uint64_t)v375, (unsigned __int16 **)&v423, (unsigned __int16 **)&v372, v190, v191);
        *(double *)&v442.__r_.__value_.__l.__data_ = *(double *)&v442.__r_.__value_.__l.__data_ + v198;
        v199 = (std::__shared_weak_count *)v372;
        if (v372)
        {
          v200 = v373;
          v201 = v372;
          if (v373 != v372)
          {
            do
            {
              if (LOBYTE(v200[-1].__shared_owners_))
                LOBYTE(v200[-1].__shared_owners_) = 0;
              v202 = v200[-4].__vftable;
              if (v202 != (std::__shared_weak_count_vtbl *)v200[-4].__shared_weak_owners_)
                free(v202);
              v200 = (std::__shared_weak_count *)((char *)v200 - 112);
            }
            while (v200 != v199);
            v201 = v372;
          }
          v373 = v199;
          operator delete(v201);
        }
        if (v180 == v181)
        {
          if (v429)
            v429 = 0;
          if (v427 != v428)
            free(v427);
        }
        v203 = v423;
        if ((_QWORD)v423)
        {
          v204 = *((_QWORD *)&v423 + 1);
          v205 = (void *)v423;
          if (*((_QWORD *)&v423 + 1) != (_QWORD)v423)
          {
            do
            {
              if (*(_BYTE *)(v204 - 16))
                *(_BYTE *)(v204 - 16) = 0;
              v206 = *(void **)(v204 - 96);
              if (v206 != *(void **)(v204 - 80))
                free(v206);
              v204 -= 112;
            }
            while (v204 != v203);
            v205 = (void *)v423;
          }
          *((_QWORD *)&v423 + 1) = v203;
          operator delete(v205);
        }
        if (v445)
          v445 = 0;
        if (*(_QWORD *)&buf[16] != v444)
          free(*(void **)&buf[16]);
        if (v379)
          v379 = 0;
        if (v377 != v378)
          free(v377);
        if (v386)
          v386 = 0;
        if (v384 != v385)
          free(v384);
        if (v453)
          v453 = 0;
        if (v449 != v451)
          free(v449);
      }
      v174 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v324, v326);
      if (!v174)
        goto LABEL_470;
      v175 = (unsigned __int16 *)*((_QWORD *)v327 + 3);
      v176 = (unsigned __int16 *)*((_QWORD *)v327 + 4);
      if (v175 != v176)
      {
        while (*v175 != *v330)
        {
          v175 += 16;
          if (v175 == v176)
          {
            v175 = (unsigned __int16 *)*((_QWORD *)v327 + 4);
            break;
          }
        }
      }
      v177 = (unint64_t)v174[16];
      v179 = v175 + 4;
      v178 = *((_QWORD *)v175 + 1);
      if (0x8E38E38E38E38E39 * ((*((_QWORD *)v179 + 1) - v178) >> 4) <= v177)
LABEL_804:
        abort();
      if (*(_BYTE *)(v178 + 144 * v177 + 132))
      {
        memset(buf, 0, 24);
      }
      else
      {
LABEL_470:
        v432.__r_.__value_.__s.__data_[0] = *((_BYTE *)v67 + 32);
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v432.__r_.__value_.__l.__size_, (uint64_t)v330);
        v437 = 0;
        if (*((_BYTE *)v67 + 128))
        {
          v438 = *((_DWORD *)v67 + 33);
          v437 = 1;
        }
        v439 = (unint64_t)v67[17];
        md::DrapingLogic::_fallbackTilesForHoleTile((uint64_t)buf, v5, (uint64_t)&v432, v322);
        if (v437)
          v437 = 0;
        if (v432.__r_.__value_.__r.__words[2] != v434)
          free((void *)v432.__r_.__value_.__r.__words[2]);
      }
      if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
      {
        if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_43);
        v207 = (id)GEOGetVectorKitDrapingFallbackLog_log;
        v208 = os_log_type_enabled(v207, OS_LOG_TYPE_DEBUG);

        if (v208)
        {
          if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_43);
          v209 = (id)GEOGetVectorKitDrapingFallbackLog_log;
          if (os_log_type_enabled(v209, OS_LOG_TYPE_DEBUG))
          {
            v210 = &v432;
            if ((v432.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v210 = (std::string *)v432.__r_.__value_.__r.__words[0];
            *(_DWORD *)v448 = 136315138;
            *(_QWORD *)&v448[4] = v210;
            _os_log_impl(&dword_19F029000, v209, OS_LOG_TYPE_DEBUG, "larger fallback keys: %s", v448, 0xCu);
            if (SHIBYTE(v432.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v432.__r_.__value_.__l.__data_);
          }

        }
        if (v155 != v172)
        {
          do
          {
            v432.__r_.__value_.__s.__data_[0] = *v155;
            gdc::LayerDataKey::LayerDataKey((uint64_t)&v432.__r_.__value_.__l.__size_, (uint64_t)(v155 + 8));
            v437 = 0;
            if (v155[96])
            {
              v438 = *((_DWORD *)v155 + 25);
              v437 = 1;
            }
            v439 = *((_QWORD *)v155 + 13);
            v365[0] = *((_BYTE *)v67 + 32);
            gdc::LayerDataKey::LayerDataKey((uint64_t)&v366, (uint64_t)v330);
            v369 = 0;
            if (*((_BYTE *)v67 + 128))
            {
              v370 = *((_DWORD *)v67 + 33);
              v369 = 1;
            }
            v371 = v67[17];
            v358[0] = v432.__r_.__value_.__s.__data_[0];
            gdc::LayerDataKey::LayerDataKey((uint64_t)&v359, (uint64_t)&v432.__r_.__value_.__l.__size_);
            v362 = 0;
            if (v437)
            {
              v363 = v438;
              v362 = 1;
            }
            v364 = v439;
            v448[0] = v432.__r_.__value_.__s.__data_[0];
            gdc::LayerDataKey::LayerDataKey((uint64_t)&v448[8], (uint64_t)&v432.__r_.__value_.__l.__size_);
            v453 = 0;
            if (v437)
            {
              v454 = v438;
              v453 = 1;
            }
            v455 = v439;
            v424 = 0;
            v423 = 0uLL;
            v219 = (char *)operator new(0x70uLL);
            *(_QWORD *)&v423 = v219;
            *((_QWORD *)&v423 + 1) = v219;
            v424 = v219 + 112;
            *v219 = v448[0];
            gdc::LayerDataKey::LayerDataKey((uint64_t)(v219 + 8), (uint64_t)&v448[8]);
            v219[96] = 0;
            if (v453)
            {
              *((_DWORD *)v219 + 25) = v454;
              v219[96] = 1;
            }
            *((_QWORD *)v219 + 13) = v455;
            *((_QWORD *)&v423 + 1) = v219 + 112;
            v222 = md::DrapingLogic::_evaluateCoverageOfTilePairs((uint64_t)v5, (uint64_t)v365, (uint64_t)v358, (unsigned __int16 **)buf, (unsigned __int16 **)&v423, v220, v221);
            *(double *)&v442.__r_.__value_.__l.__size_ = *(double *)&v442.__r_.__value_.__l.__size_ + v222;
            v223 = v423;
            if ((_QWORD)v423)
            {
              v224 = *((_QWORD *)&v423 + 1);
              v225 = (void *)v423;
              if (*((_QWORD *)&v423 + 1) != (_QWORD)v423)
              {
                do
                {
                  if (*(_BYTE *)(v224 - 16))
                    *(_BYTE *)(v224 - 16) = 0;
                  v226 = *(void **)(v224 - 96);
                  if (v226 != *(void **)(v224 - 80))
                    free(v226);
                  v224 -= 112;
                }
                while (v224 != v223);
                v225 = (void *)v423;
              }
              *((_QWORD *)&v423 + 1) = v223;
              operator delete(v225);
            }
            if (v453)
              v453 = 0;
            if (v449 != v451)
              free(v449);
            if (v362)
              v362 = 0;
            if (v360 != v361)
              free(v360);
            if (v369)
              v369 = 0;
            if (v367 != v368)
              free(v367);
            if (v437)
              v437 = 0;
            if (v432.__r_.__value_.__r.__words[2] != v434)
              free((void *)v432.__r_.__value_.__r.__words[2]);
            v155 += 112;
          }
          while (v155 != v172);
          for (m = (char *)v409; m != v172; m += 112)
          {
            v448[0] = *m;
            gdc::LayerDataKey::LayerDataKey((uint64_t)&v448[8], (uint64_t)(m + 8));
            v453 = 0;
            if (m[96])
            {
              v454 = *((_DWORD *)m + 25);
              v453 = 1;
            }
            v455 = *((_QWORD *)m + 13);
            v238 = (unsigned __int8 *)v67[18];
            v239 = (unsigned __int8 *)v67[19];
            if (v238 == v239)
            {
              v239 = (unsigned __int8 *)v67[18];
            }
            else
            {
              v240 = v448[0];
              v241 = *(unsigned __int16 *)&v448[8];
              v242 = v452;
              v243 = v449;
              v244 = v450 - (_QWORD)v449;
              while (1)
              {
                if (*v238 == v240 && *((unsigned __int16 *)v238 + 4) == v241 && *((_QWORD *)v238 + 10) == v242)
                {
                  v245 = (const void *)*((_QWORD *)v238 + 2);
                  if (*((_QWORD *)v238 + 3) - (_QWORD)v245 == v244 && !memcmp(v245, v243, v244))
                    break;
                }
                v238 += 112;
                if (v238 == v239)
                {
                  v238 = v239;
                  break;
                }
              }
              v67 = v332;
            }
            v351[0] = *((_BYTE *)v67 + 32);
            gdc::LayerDataKey::LayerDataKey((uint64_t)&v352, (uint64_t)v330);
            v355 = 0;
            if (*((_BYTE *)v67 + 128))
            {
              v356 = *((_DWORD *)v67 + 33);
              v355 = 1;
            }
            v357 = v67[17];
            v344[0] = v448[0];
            gdc::LayerDataKey::LayerDataKey((uint64_t)&v345, (uint64_t)&v448[8]);
            v348 = 0;
            if (v453)
            {
              v349 = v454;
              v348 = 1;
            }
            v350 = v455;
            if (v238 == v239)
            {
              LOBYTE(v416) = v448[0];
              gdc::LayerDataKey::LayerDataKey((uint64_t)&v417, (uint64_t)&v448[8]);
              v420 = 0;
              if (v453)
              {
                v421 = v454;
                v420 = 1;
              }
              v422 = v455;
              v424 = 0;
              v423 = 0uLL;
              v254 = (char *)operator new(0x70uLL);
              *(_QWORD *)&v423 = v254;
              *((_QWORD *)&v423 + 1) = v254;
              v424 = v254 + 112;
              *v254 = (char)v416;
              gdc::LayerDataKey::LayerDataKey((uint64_t)(v254 + 8), (uint64_t)&v417);
              v254[96] = 0;
              if (v420)
              {
                *((_DWORD *)v254 + 25) = v421;
                v254[96] = 1;
              }
              *((_QWORD *)v254 + 13) = v422;
              *((_QWORD *)&v423 + 1) = v254 + 112;
            }
            else
            {
              v246 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v324, v448);
              if (!v246)
                goto LABEL_607;
              v249 = (unsigned __int16 *)*((_QWORD *)v327 + 3);
              v250 = (unsigned __int16 *)*((_QWORD *)v327 + 4);
              if (v249 != v250)
              {
                while (*v249 != *(unsigned __int16 *)&v448[8])
                {
                  v249 += 16;
                  if (v249 == v250)
                  {
                    v249 = (unsigned __int16 *)*((_QWORD *)v327 + 4);
                    break;
                  }
                }
              }
              v251 = (unint64_t)v246[16];
              v253 = v249 + 4;
              v252 = *((_QWORD *)v249 + 1);
              if (0x8E38E38E38E38E39 * ((*((_QWORD *)v253 + 1) - v252) >> 4) <= v251)
                goto LABEL_804;
              if (*(_BYTE *)(v252 + 144 * v251 + 132))
              {
                v423 = 0uLL;
                v424 = 0;
              }
              else
              {
LABEL_607:
                v432.__r_.__value_.__s.__data_[0] = v448[0];
                gdc::LayerDataKey::LayerDataKey((uint64_t)&v432.__r_.__value_.__l.__size_, (uint64_t)&v448[8]);
                v437 = 0;
                if (v453)
                {
                  v438 = v454;
                  v437 = 1;
                }
                v439 = v455;
                md::DrapingLogic::_fallbackTilesForHoleTile((uint64_t)&v423, v5, (uint64_t)&v432, v322);
                if (v437)
                  v437 = 0;
                if (v432.__r_.__value_.__r.__words[2] != v434)
                  free((void *)v432.__r_.__value_.__r.__words[2]);
              }
            }
            v255 = md::DrapingLogic::_evaluateCoverageOfTilePairs((uint64_t)v5, (uint64_t)v351, (uint64_t)v344, (unsigned __int16 **)buf, (unsigned __int16 **)&v423, v247, v248);
            *(double *)&v442.__r_.__value_.__r.__words[2] = *(double *)&v442.__r_.__value_.__r.__words[2] + v255;
            v256 = v423;
            if ((_QWORD)v423)
            {
              v257 = *((_QWORD *)&v423 + 1);
              v258 = (void *)v423;
              if (*((_QWORD *)&v423 + 1) != (_QWORD)v423)
              {
                do
                {
                  if (*(_BYTE *)(v257 - 16))
                    *(_BYTE *)(v257 - 16) = 0;
                  v259 = *(void **)(v257 - 96);
                  if (v259 != *(void **)(v257 - 80))
                    free(v259);
                  v257 -= 112;
                }
                while (v257 != v256);
                v258 = (void *)v423;
              }
              *((_QWORD *)&v423 + 1) = v256;
              operator delete(v258);
            }
            if (v238 == v239)
            {
              if (v420)
                v420 = 0;
              if (v418 != v419)
                free(v418);
            }
            if (v348)
              v348 = 0;
            if (v346 != v347)
              free(v346);
            if (v355)
              v355 = 0;
            if (v353 != v354)
              free(v353);
            if (v453)
              v453 = 0;
            if (v449 != v451)
              free(v449);
          }
        }
      }
      if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_43);
      v211 = (id)GEOGetVectorKitDrapingFallbackLog_log;
      if (os_log_type_enabled(v211, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v432.__r_.__value_.__l.__data_) = 134218496;
        *(std::string::size_type *)((char *)v432.__r_.__value_.__r.__words + 4) = v442.__r_.__value_.__r.__words[0];
        WORD2(v432.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v432.__r_.__value_.__r.__words[1] + 6) = v442.__r_.__value_.__l.__size_;
        HIWORD(v432.__r_.__value_.__r.__words[2]) = 2048;
        v433 = v442.__r_.__value_.__r.__words[2];
        _os_log_impl(&dword_19F029000, v211, OS_LOG_TYPE_DEBUG, "Coverage for fallback smaller: %f  fallback larger: %f  Fallback smaller and larger: %f", (uint8_t *)&v432, 0x20u);
      }

      v212 = fmax(*(double *)&v442.__r_.__value_.__l.__data_, *(double *)&v442.__r_.__value_.__l.__size_);
      v213 = (std::string *)&v442.__r_.__value_.__r.__words[1];
      if (*(double *)&v442.__r_.__value_.__l.__data_ >= *(double *)&v442.__r_.__value_.__l.__size_)
        v213 = &v442;
      v214 = 16;
      if (v212 >= *(double *)&v442.__r_.__value_.__r.__words[2])
        v214 = 8 * (*(double *)&v442.__r_.__value_.__l.__data_ < *(double *)&v442.__r_.__value_.__l.__size_);
      v215 = (std::string *)&v442.__r_.__value_.__r.__words[2];
      if (v212 >= *(double *)&v442.__r_.__value_.__r.__words[2])
        v215 = v213;
      v216 = *(double *)((char *)&v442.__r_.__value_.__l.__data_ + v214);
      if (v156 >= v216)
      {
        if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_43);
        v227 = (id)GEOGetVectorKitDrapingFallbackLog_log;
        if (os_log_type_enabled(v227, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v432.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_19F029000, v227, OS_LOG_TYPE_DEBUG, "failed to fill hole!", (uint8_t *)&v432, 2u);
        }

        goto LABEL_550;
      }
      v217 = ((char *)v215 - (char *)&v442) >> 3;
      if (v217 == 2)
      {
        if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_43);
        v262 = (id)GEOGetVectorKitDrapingFallbackLog_log;
        if (os_log_type_enabled(v262, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v432.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_19F029000, v262, OS_LOG_TYPE_DEBUG, "Filled hole by falling back both tiles of pair", (uint8_t *)&v432, 2u);
        }

        std::vector<gdc::LayerDataRequestKey>::__insert_with_size[abi:nn180100]<std::__wrap_iter<gdc::LayerDataRequestKey const*>,std::__wrap_iter<gdc::LayerDataRequestKey const*>>(&v403, (uint64_t)v404, (uint64_t)v67[18], (uint64_t)v67[19], 0x6DB6DB6DB6DB6DB7 * (((char *)v67[19] - (char *)v67[18]) >> 4));
        v261 = v404;
        if ((unint64_t)v404 < v405)
        {
LABEL_658:
          *v261 = *((_BYTE *)v67 + 32);
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v261 + 8), (uint64_t)v330);
          v261[96] = 0;
          if (*((_BYTE *)v67 + 128))
          {
            *((_DWORD *)v261 + 25) = *((_DWORD *)v67 + 33);
            v261[96] = 1;
          }
          *((_QWORD *)v261 + 13) = v67[17];
          v404 = v261 + 112;
          goto LABEL_550;
        }
      }
      else
      {
        if (v217 != 1)
        {
          if (!v217)
          {
            if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1)
              dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_43);
            v218 = (id)GEOGetVectorKitDrapingFallbackLog_log;
            if (os_log_type_enabled(v218, OS_LOG_TYPE_DEBUG))
            {
              LOWORD(v432.__r_.__value_.__l.__data_) = 0;
              _os_log_impl(&dword_19F029000, v218, OS_LOG_TYPE_DEBUG, "Filled hole by falling back smaller tile of pair", (uint8_t *)&v432, 2u);
            }

            std::vector<gdc::LayerDataRequestKey>::__insert_with_size[abi:nn180100]<std::__wrap_iter<gdc::LayerDataRequestKey const*>,std::__wrap_iter<gdc::LayerDataRequestKey const*>>(&v403, (uint64_t)v404, (uint64_t)v67[18], (uint64_t)v67[19], 0x6DB6DB6DB6DB6DB7 * (((char *)v67[19] - (char *)v67[18]) >> 4));
          }
          goto LABEL_550;
        }
        if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_43);
        v260 = (id)GEOGetVectorKitDrapingFallbackLog_log;
        if (os_log_type_enabled(v260, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v432.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_19F029000, v260, OS_LOG_TYPE_DEBUG, "Filled hole by falling back larger tile of pair", (uint8_t *)&v432, 2u);
        }

        v261 = v404;
        if ((unint64_t)v404 < v405)
          goto LABEL_658;
      }
      v404 = std::vector<gdc::LayerDataRequestKey>::__push_back_slow_path<gdc::LayerDataRequestKey const&>(&v403, (uint64_t)v326);
LABEL_550:
      v228 = *(_QWORD *)buf;
      if (*(_QWORD *)buf)
      {
        v229 = *(_QWORD *)&buf[8];
        v230 = *(void **)buf;
        if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
        {
          do
          {
            if (*(_BYTE *)(v229 - 16))
              *(_BYTE *)(v229 - 16) = 0;
            v231 = *(void **)(v229 - 96);
            if (v231 != *(void **)(v229 - 80))
              free(v231);
            v229 -= 112;
          }
          while (v229 != v228);
          v230 = *(void **)buf;
        }
        *(_QWORD *)&buf[8] = v228;
        operator delete(v230);
      }
      v232 = (char *)v409;
      if (v409)
      {
        for (n = v410; n != v232; n -= 112)
        {
          if (*(n - 16))
            *(n - 16) = 0;
          v234 = (void *)*((_QWORD *)n - 12);
          if (v234 != *((void **)n - 10))
            free(v234);
        }
        operator delete(v232);
      }
      if (v412)
        operator delete(v412);
      v235 = v67[1];
      v68 = &off_19FFB1000;
      if (v235)
      {
        do
        {
          v236 = (uint64_t **)v235;
          v235 = (uint64_t *)*v235;
        }
        while (v235);
      }
      else
      {
        do
        {
          v236 = (uint64_t **)v67[2];
          v117 = *v236 == (uint64_t *)v67;
          v67 = v236;
        }
        while (!v117);
      }
      v67 = v236;
      if (v236 == &v407)
      {
        v263 = a3;
        v63 = (void *)*a3;
        goto LABEL_664;
      }
    }
    if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_43);
    v71 = (id)GEOGetVectorKitDrapingFallbackLog_log;
    if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
    {
      gdc::LayerDataRequestKey::keysInt32Str(&v432, (unsigned __int16 *)v326);
      v72 = SHIBYTE(v432.__r_.__value_.__r.__words[2]);
      v73 = v432.__r_.__value_.__r.__words[0];
      v74 = &v432;
      if (v72 < 0)
        v74 = (std::string *)v73;
      v75 = v448;
      if (SHIBYTE(v449) < 0)
        v75 = *(_BYTE **)v448;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v74;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v75;
      _os_log_impl(&dword_19F029000, v71, OS_LOG_TYPE_DEBUG, "Hole: Larger tile %s contains pairs: %s", buf, 0x16u);
      if (SHIBYTE(v449) < 0)
      {
        operator delete(*(void **)v448);
        if ((SHIBYTE(v432.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_149;
      }
      else if ((SHIBYTE(v432.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_149;
      }
      operator delete(v432.__r_.__value_.__l.__data_);
    }
LABEL_149:

    goto LABEL_150;
  }
  v263 = a3;
LABEL_664:
  v264 = (std::__shared_weak_count *)v263[1];
  v372 = v63;
  v373 = v264;
  if (v264)
  {
    p_shared_owners = (unint64_t *)&v264->__shared_owners_;
    do
      v266 = __ldxr(p_shared_owners);
    while (__stxr(v266 + 1, p_shared_owners));
  }
  v267 = (char *)v403;
  v334 = v404;
  if (v403 == v404)
    goto LABEL_787;
  v331 = v264;
  v336 = v63;
  if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_43);
  v268 = (id)GEOGetVectorKitDrapingFallbackLog_log;
  if (os_log_type_enabled(v268, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(v432.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)v432.__r_.__value_.__r.__words + 4) = 0x6DB6DB6DB6DB6DB7
                                                                            * ((v334 - v267) >> 4);
    _os_log_impl(&dword_19F029000, v268, OS_LOG_TYPE_DEBUG, "Holding back %zu tiles", (uint8_t *)&v432, 0xCu);
  }

  v338 = *((_QWORD *)v68 + 289);
  while (2)
  {
    if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_43);
    v269 = (id)GEOGetVectorKitDrapingFallbackLog_log;
    v270 = os_log_type_enabled(v269, OS_LOG_TYPE_DEBUG);

    if (v270)
    {
      if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_43);
      v271 = (id)GEOGetVectorKitDrapingFallbackLog_log;
      if (os_log_type_enabled(v271, OS_LOG_TYPE_DEBUG))
      {
        gdc::LayerDataRequestKey::keysInt32Str(&v432, (unsigned __int16 *)v267);
        v272 = &v432;
        if ((v432.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v272 = (std::string *)v432.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = v338;
        *(_QWORD *)&buf[4] = v272;
        _os_log_impl(&dword_19F029000, v271, OS_LOG_TYPE_DEBUG, "Holding back %s", buf, 0xCu);
        if (SHIBYTE(v432.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v432.__r_.__value_.__l.__data_);
      }

    }
    md::SceneStateManager::setHasLayerDataDependency(v336, (uint64_t)v267);
    gdc::LayerDataKey::LayerDataKey((uint64_t)&v412, (uint64_t)(v267 + 8));
    v432.__r_.__value_.__s.__data_[0] = 1;
    gdc::LayerDataKey::LayerDataKey((uint64_t)&v432.__r_.__value_.__l.__size_, (uint64_t)&v412);
    v437 = 0;
    v439 = (v436
          - 0x61C8864680B583EBLL
          + ((v432.__r_.__value_.__s.__data_[0] - 0x61C8864680B583EBLL) << 6)
          + (((unint64_t)v432.__r_.__value_.__s.__data_[0] - 0x61C8864680B583EBLL) >> 2)) ^ (v432.__r_.__value_.__s.__data_[0] - 0x61C8864680B583EBLL);
    if (v413 != v415)
      free(v413);
    md::SceneStateManager::setHasLayerDataDependency(v336, (uint64_t)&v432);
    v448[0] = *v267;
    gdc::LayerDataKey::LayerDataKey((uint64_t)&v448[8], (uint64_t)(v267 + 8));
    v453 = 0;
    if (v267[96])
    {
      v454 = *((_DWORD *)v267 + 25);
      v453 = 1;
    }
    v455 = *((_QWORD *)v267 + 13);
    md::DrapingLogic::_fallbackTilesForHoleTile((uint64_t)&v409, v5, (uint64_t)v448, *(_QWORD **)(v325 + 56));
    if (v453)
      v453 = 0;
    if (v449 != v451)
      free(v449);
    v273 = (char *)v409;
    v343 = v410;
    v340 = v267;
    if (v409 == v410)
    {
      if (!v409)
        goto LABEL_779;
      goto LABEL_695;
    }
    while (2)
    {
      buf[0] = *v273;
      gdc::LayerDataKey::LayerDataKey((uint64_t)&buf[8], (uint64_t)(v273 + 8));
      v445 = 0;
      if (v273[96])
      {
        v446 = *((_DWORD *)v273 + 25);
        v445 = 1;
      }
      v447 = *((_QWORD *)v273 + 13);
      if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_43);
      v276 = (id)GEOGetVectorKitDrapingFallbackLog_log;
      v277 = os_log_type_enabled(v276, OS_LOG_TYPE_DEBUG);

      if (v277)
      {
        if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_43);
        v278 = (id)GEOGetVectorKitDrapingFallbackLog_log;
        if (os_log_type_enabled(v278, OS_LOG_TYPE_DEBUG))
        {
          gdc::LayerDataRequestKey::keysInt32Str(&v442, (unsigned __int16 *)buf);
          v279 = &v442;
          if ((v442.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v279 = (std::string *)v442.__r_.__value_.__r.__words[0];
          LODWORD(v423) = v338;
          *(_QWORD *)((char *)&v423 + 4) = v279;
          _os_log_impl(&dword_19F029000, v278, OS_LOG_TYPE_DEBUG, "Replacing this with %s", (uint8_t *)&v423, 0xCu);
          if (SHIBYTE(v442.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v442.__r_.__value_.__l.__data_);
        }

      }
      v280 = v5[29].i64[0];
      v281 = *(unsigned __int16 **)(v280 + 80);
      v282 = *(unsigned __int16 **)(v280 + 88);
      if (v281 != v282)
      {
        while (*v281 != *(unsigned __int16 *)&buf[8])
        {
          v281 += 8;
          if (v281 == v282)
            goto LABEL_717;
        }
      }
      if (v281 == v282)
LABEL_717:
        v283 = 0;
      else
        v283 = (const gdc::LayerDataRequestKey *)*((_QWORD *)v281 + 1);
      gdc::LayerDataStore::get((gdc::LayerDataStore *)&v423, v283, buf);
      v284 = *((_QWORD *)v267 + 2);
      v285 = *(unsigned __int8 *)(v284 + 8);
      v286 = (int *)(v284 + 4);
      v287 = *(unsigned __int8 *)(*(_QWORD *)&buf[16] + 8);
      v288 = v285 >= v287;
      if (v285 <= v287)
        v289 = *(unsigned __int8 *)(*(_QWORD *)&buf[16] + 8);
      else
        v289 = *(unsigned __int8 *)(v284 + 8);
      if (v285 >= v287)
      {
        v290 = (int *)*((_QWORD *)v267 + 2);
      }
      else
      {
        v286 = (int *)(*(_QWORD *)&buf[16] + 4);
        v290 = *(int **)&buf[16];
      }
      if (v288)
        v291 = (int *)(v284 + 12);
      else
        v291 = (int *)(*(_QWORD *)&buf[16] + 12);
      v292 = *(uint64_t **)(*(_QWORD *)(v325 + 64) + 24);
      if (!v292)
        goto LABEL_763;
      v293 = 0;
      v294 = 0;
      v295 = 0;
      v296 = *v286;
      v297 = *v290;
      v298 = *v291;
      do
      {
        if (*((unsigned __int8 *)v292 + 16) != v298)
          goto LABEL_730;
        v299 = *((unsigned __int8 *)v292 + 17);
        v300 = v299 - v289;
        if (v299 >= v289)
        {
          if (v299 == v289 && *((_DWORD *)v292 + 5) == v296)
          {
            v302 = v297;
            v301 = v296;
            if (*((_DWORD *)v292 + 6) == v297)
              goto LABEL_746;
          }
        }
        else
        {
          v301 = v296 >> (v289 - v299);
          if (*((_DWORD *)v292 + 5) == v301)
          {
            v302 = v297 >> (v289 - v299);
            if (*((_DWORD *)v292 + 6) == v302)
              goto LABEL_746;
          }
        }
        if (v289 >= v299)
        {
          if (v289 != v299)
            goto LABEL_730;
          if (v296 != *((_DWORD *)v292 + 5))
            goto LABEL_730;
          v302 = v297;
          v301 = v296;
          if (v297 != *((_DWORD *)v292 + 6))
            goto LABEL_730;
        }
        else
        {
          v301 = *((_DWORD *)v292 + 5);
          if (v296 != v301 >> v300)
            goto LABEL_730;
          v302 = *((_DWORD *)v292 + 6);
          if (v297 != v302 >> v300)
            goto LABEL_730;
        }
LABEL_746:
        if (v294 < v293)
        {
          *v294 = v298;
          v294[1] = v299;
          *((_DWORD *)v294 + 1) = v301;
          *((_DWORD *)v294 + 2) = v302;
          v294 += 24;
        }
        else
        {
          v303 = 0xAAAAAAAAAAAAAAABLL * ((v294 - v295) >> 3) + 1;
          if (v303 > 0xAAAAAAAAAAAAAAALL)
            abort();
          if (0x5555555555555556 * ((v293 - v295) >> 3) > v303)
            v303 = 0x5555555555555556 * ((v293 - v295) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v293 - v295) >> 3) >= 0x555555555555555)
            v304 = 0xAAAAAAAAAAAAAAALL;
          else
            v304 = v303;
          if (v304 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_802;
          v305 = (char *)operator new(24 * v304);
          v306 = &v305[8 * ((v294 - v295) >> 3)];
          *(_WORD *)v306 = *((_WORD *)v292 + 8);
          *(_QWORD *)(v306 + 4) = *(uint64_t *)((char *)v292 + 20);
          for (ii = v306; v294 != v295; *(_QWORD *)(ii + 4) = *(_QWORD *)(v294 + 4))
          {
            v308 = *((_WORD *)v294 - 12);
            v294 -= 24;
            *((_WORD *)ii - 12) = v308;
            ii -= 24;
          }
          v293 = &v305[24 * v304];
          v294 = v306 + 24;
          if (v295)
            operator delete(v295);
          v295 = ii;
        }
LABEL_730:
        v292 = (uint64_t *)*v292;
      }
      while (v292);
      for (jj = v295; jj != v294; jj += 24)
      {
        LOWORD(v442.__r_.__value_.__l.__data_) = *(_WORD *)jj;
        *(std::string::size_type *)((char *)v442.__r_.__value_.__r.__words + 4) = *(_QWORD *)(jj + 4);
        gdc::LayerDataCollector::addFallbackData((uint64_t)v327, (uint64_t)buf, (__int16 *)&v442, &v423);
      }
      v5 = (int64x2_t *)a1;
      v267 = v340;
      if (v295)
        operator delete(v295);
LABEL_763:
      v310 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
      if (!*((_QWORD *)&v423 + 1))
        goto LABEL_767;
      v311 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 8);
      do
        v312 = __ldaxr(v311);
      while (__stlxr(v312 - 1, v311));
      if (!v312)
      {
        ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
        std::__shared_weak_count::__release_weak(v310);
        if (v445)
LABEL_768:
          v445 = 0;
      }
      else
      {
LABEL_767:
        if (v445)
          goto LABEL_768;
      }
      if (*(_QWORD *)&buf[16] != v444)
        free(*(void **)&buf[16]);
      v273 += 112;
      if (v273 != v343)
        continue;
      break;
    }
    v273 = (char *)v409;
    if (!v409)
    {
LABEL_779:
      if (v437)
        goto LABEL_780;
      goto LABEL_781;
    }
LABEL_695:
    v274 = v410;
    v275 = v273;
    if (v410 != v273)
    {
      do
      {
        if (*(v274 - 16))
          *(v274 - 16) = 0;
        v313 = (void *)*((_QWORD *)v274 - 12);
        if (v313 != *((void **)v274 - 10))
          free(v313);
        v274 -= 112;
      }
      while (v274 != v273);
      v275 = v409;
    }
    v410 = v273;
    operator delete(v275);
    if (v437)
LABEL_780:
      v437 = 0;
LABEL_781:
    if (v432.__r_.__value_.__r.__words[2] != v434)
      free((void *)v432.__r_.__value_.__r.__words[2]);
    v267 += 112;
    if (v267 != v334)
      continue;
    break;
  }
  gdc::LayerDataCollector::sortIndexList((unsigned __int8 **)v327);
  v264 = v331;
LABEL_787:
  if (v264)
  {
    v314 = (unint64_t *)&v264->__shared_owners_;
    do
      v315 = __ldaxr(v314);
    while (__stlxr(v315 - 1, v314));
    if (!v315)
    {
      v316 = v264;
      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
      std::__shared_weak_count::__release_weak(v316);
    }
  }
  v317 = v403;
  if (v403)
  {
    for (kk = v404; kk != v317; kk -= 112)
    {
      if (*(kk - 16))
        *(kk - 16) = 0;
      v319 = (void *)*((_QWORD *)kk - 12);
      if (v319 != *((void **)kk - 10))
        free(v319);
    }
    operator delete(v317);
  }
  std::__tree<std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>,std::__map_value_compare<gdc::LayerDataRequestKey,std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>,std::less<gdc::LayerDataRequestKey>,true>,std::allocator<std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>>>::destroy(v407);
}

void sub_19F3EB240(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  if (LOBYTE(STACK[0x7A0]))
    LOBYTE(STACK[0x7A0]) = 0;
  if (STACK[0x750] != STACK[0x760])
    free((void *)STACK[0x750]);
  if (*(_BYTE *)(v1 - 144))
    *(_BYTE *)(v1 - 144) = 0;
  v3 = *(void **)(v1 - 224);
  if (v3 != *(void **)(v1 - 208))
    free(v3);
  std::__tree<std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>,std::__map_value_compare<gdc::LayerDataRequestKey,std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>,std::less<gdc::LayerDataRequestKey>,true>,std::allocator<std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>>>::destroy((_QWORD *)STACK[0x520]);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<md::FoundationOverlayPair,md::FoundationOverlayPairHash,std::equal_to<md::FoundationOverlayPair>,std::allocator<md::FoundationOverlayPair>>::~unordered_set[abi:nn180100](uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  _BYTE *v5;
  void *v6;
  void *v7;

  v2 = *(_BYTE **)(a1 + 16);
  if (v2)
  {
    do
    {
      if (v2[224])
        v2[224] = 0;
      v5 = *(_BYTE **)v2;
      v6 = (void *)*((_QWORD *)v2 + 18);
      if (v6 != *((void **)v2 + 20))
        free(v6);
      if (v2[112])
        v2[112] = 0;
      v7 = (void *)*((_QWORD *)v2 + 4);
      if (v7 != *((void **)v2 + 6))
        free(v7);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void _ZZN2md12DrapingLogic29runBeforeLayoutAtVariableRateERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_15OverlaysContextENS_13CameraContextENS_19PendingSceneContextENS_16ElevationContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_14DrapingContextEENK3__4clENS5_6EntityERNS_10components12MeshInstanceE(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  _QWORD *HasDebug;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  char **v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  __int128 v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t *v40;
  _QWORD *v41;
  char v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  size_t v53;
  char *v54;
  char *v55;
  char *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;

  HasDebug = (_QWORD *)gdc::Registry::storage<md::overlayComponents::HasDebugDisplay>(**(_QWORD **)a1);
  v7 = HasDebug[4];
  if (a2 >> 39 >= (HasDebug[5] - v7) >> 3)
    goto LABEL_14;
  v8 = *(_QWORD *)(v7 + 8 * (a2 >> 39));
  if (!v8)
    goto LABEL_14;
  v9 = *(unsigned __int16 *)(v8 + 2 * (HIDWORD(a2) & 0x7F));
  v11 = HasDebug[7];
  v10 = HasDebug[8];
  if (v9 >= (v10 - v11) >> 3)
    goto LABEL_14;
  v12 = v11 + 8 * v9;
  v13 = v12 != v10 && *(_DWORD *)(v12 + 4) == HIDWORD(a2);
  if (!v13 || ((v14 = HasDebug[10], v14 + v9 != HasDebug[11]) ? (v15 = v14 == 0) : (v15 = 1), v15))
  {
LABEL_14:
    v16 = *(char ***)(a1 + 8);
    v18 = v16[1];
    v17 = (unint64_t)v16[2];
    if ((unint64_t)v18 >= v17)
    {
      v25 = *v16;
      v26 = 0x6DB6DB6DB6DB6DB7 * ((v18 - *v16) >> 4);
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) > 0x249249249249249)
        goto LABEL_58;
      v28 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v17 - (_QWORD)v25) >> 4);
      if (2 * v28 > v27)
        v27 = 2 * v28;
      if (v28 >= 0x124924924924924)
        v29 = 0x249249249249249;
      else
        v29 = v27;
      if (v29)
      {
        if (v29 > 0x249249249249249)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v30 = (char *)operator new(112 * v29);
      }
      else
      {
        v30 = 0;
      }
      v31 = a3[5];
      v32 = &v30[112 * v26];
      *((_OWORD *)v32 + 4) = a3[4];
      *((_OWORD *)v32 + 5) = v31;
      *((_OWORD *)v32 + 6) = a3[6];
      v33 = a3[1];
      *(_OWORD *)v32 = *a3;
      *((_OWORD *)v32 + 1) = v33;
      v34 = a3[3];
      *((_OWORD *)v32 + 2) = a3[2];
      *((_OWORD *)v32 + 3) = v34;
      v24 = v32 + 112;
      if (v18 != v25)
      {
        do
        {
          v35 = *((_OWORD *)v18 - 7);
          v36 = *((_OWORD *)v18 - 5);
          *((_OWORD *)v32 - 6) = *((_OWORD *)v18 - 6);
          *((_OWORD *)v32 - 5) = v36;
          *((_OWORD *)v32 - 7) = v35;
          v37 = *((_OWORD *)v18 - 4);
          v38 = *((_OWORD *)v18 - 3);
          v39 = *((_OWORD *)v18 - 1);
          *((_OWORD *)v32 - 2) = *((_OWORD *)v18 - 2);
          *((_OWORD *)v32 - 1) = v39;
          *((_OWORD *)v32 - 4) = v37;
          *((_OWORD *)v32 - 3) = v38;
          v32 -= 112;
          v18 -= 112;
        }
        while (v18 != v25);
        v18 = *v16;
      }
      *v16 = v32;
      v16[1] = v24;
      v16[2] = &v30[112 * v29];
      if (v18)
        operator delete(v18);
    }
    else
    {
      v19 = *a3;
      v20 = a3[2];
      *((_OWORD *)v18 + 1) = a3[1];
      *((_OWORD *)v18 + 2) = v20;
      *(_OWORD *)v18 = v19;
      v21 = a3[3];
      v22 = a3[4];
      v23 = a3[6];
      *((_OWORD *)v18 + 5) = a3[5];
      *((_OWORD *)v18 + 6) = v23;
      *((_OWORD *)v18 + 3) = v21;
      *((_OWORD *)v18 + 4) = v22;
      v24 = v18 + 112;
    }
    v16[1] = v24;
    v40 = (uint64_t *)gdc::Registry::storage<md::overlayComponents::HasDebugDisplay>(**(_QWORD **)a1);
    v59 = a2;
    v41 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v40 + 4, (uint64_t)&v59);
    if ((v42 & 1) != 0)
    {
      v47 = (_BYTE *)v40[11];
      v46 = v40[12];
      if ((unint64_t)v47 >= v46)
      {
        v49 = (char *)v40[10];
        v50 = v47 - v49;
        v51 = v47 - v49 + 1;
        if (v51 < 0)
          goto LABEL_58;
        v52 = v46 - (_QWORD)v49;
        if (2 * v52 > v51)
          v51 = 2 * v52;
        if (v52 >= 0x3FFFFFFFFFFFFFFFLL)
          v53 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v53 = v51;
        if (v53)
          v54 = (char *)operator new(v53);
        else
          v54 = 0;
        v55 = &v54[v53];
        v48 = (uint64_t)&v54[v50 + 1];
        v56 = (char *)(v49 - v47);
        if (v49 == v47)
          v56 = 0;
        v40[10] = (uint64_t)&v54[v50 + (_QWORD)v56];
        v40[11] = v48;
        v40[12] = (uint64_t)v55;
        if (v49)
          operator delete(v49);
      }
      else
      {
        v48 = (uint64_t)(v47 + 1);
      }
      v40[11] = v48;
      v43 = v40[31];
    }
    else
    {
      v43 = v40[31];
      if (v40[10] + (((uint64_t)v41 - v40[7]) >> 3) != v40[11])
      {
        v44 = (_QWORD *)v40[16];
        if (!v44)
          return;
        while (1)
        {
          v61 = (uint64_t *)&v59;
          v62 = 1;
          v60 = v43;
          v45 = v44[6];
          if (!v45)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v45 + 48))(v45, &v60, &v61);
          v44 = (_QWORD *)*v44;
          if (!v44)
            return;
        }
LABEL_57:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_58:
        abort();
      }
    }
    v57 = (_QWORD *)v40[22];
    if (!v57)
      return;
    while (1)
    {
      v61 = (uint64_t *)&v59;
      v62 = 1;
      v60 = v43;
      v58 = v57[6];
      if (!v58)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v58 + 48))(v58, &v60, &v61);
      v57 = (_QWORD *)*v57;
      if (!v57)
        return;
    }
    goto LABEL_57;
  }
}

void gdc::ComponentStorageWrapper<md::components::CustomRenderState>::emplace(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;

  v49 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v49);
  if ((v6 & 1) != 0)
  {
    v21 = (char *)a1[11];
    v20 = a1[12];
    if ((unint64_t)v21 >= v20)
    {
      v26 = (char *)a1[10];
      v27 = 0xAAAAAAAAAAAAAAABLL * ((v21 - v26) >> 3);
      v28 = v27 + 1;
      if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_58;
      v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (_QWORD)v26) >> 3);
      if (2 * v29 > v28)
        v28 = 2 * v29;
      if (v29 >= 0x555555555555555)
        v30 = 0xAAAAAAAAAAAAAAALL;
      else
        v30 = v28;
      if (v30)
      {
        if (v30 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v31 = operator new(24 * v30);
      }
      else
      {
        v31 = 0;
      }
      v32 = a3[1];
      v33 = &v31[8 * ((v21 - v26) >> 3)];
      *v33 = *a3;
      v33[1] = v32;
      if (v32)
      {
        v34 = (unint64_t *)(v32 + 8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
        v26 = (char *)a1[10];
        v21 = (char *)a1[11];
      }
      v36 = &v31[24 * v30];
      v31[24 * v27 + 16] = *((_BYTE *)a3 + 16);
      v25 = v33 + 3;
      if (v21 == v26)
      {
        a1[10] = (uint64_t)v33;
        a1[11] = (uint64_t)v25;
        a1[12] = (uint64_t)v36;
      }
      else
      {
        v37 = v21;
        v38 = v33;
        do
        {
          v39 = *((_QWORD *)v37 - 3);
          v37 -= 24;
          *(v38 - 3) = v39;
          v38 -= 3;
          v40 = *((_QWORD *)v37 + 1);
          v38[1] = v40;
          if (v40)
          {
            v41 = (unint64_t *)(v40 + 8);
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
          }
          *((_BYTE *)v33 - 8) = *(v21 - 8);
          v21 = v37;
          v33 = v38;
        }
        while (v37 != v26);
        v26 = (char *)a1[10];
        v43 = (char *)a1[11];
        a1[10] = (uint64_t)v38;
        a1[11] = (uint64_t)v25;
        a1[12] = (uint64_t)v36;
        while (v43 != v26)
        {
          v44 = (std::__shared_weak_count *)*((_QWORD *)v43 - 2);
          if (v44)
          {
            p_shared_owners = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(p_shared_owners);
            while (__stlxr(v46 - 1, p_shared_owners));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          v43 -= 24;
        }
      }
      if (v26)
        operator delete(v26);
    }
    else
    {
      *(_QWORD *)v21 = *a3;
      v22 = a3[1];
      *((_QWORD *)v21 + 1) = v22;
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v21[16] = *((_BYTE *)a3 + 16);
      v25 = v21 + 24;
    }
    a1[11] = (uint64_t)v25;
    v17 = a1[31];
  }
  else
  {
    v7 = a1[10];
    v8 = ((uint64_t)v5 - a1[7]) >> 3;
    v9 = (_QWORD *)(v7 + 24 * v8);
    v11 = *a3;
    v10 = a3[1];
    if (v10)
    {
      v12 = (unint64_t *)(v10 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = (std::__shared_weak_count *)v9[1];
    *v9 = v11;
    v9[1] = v10;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    *(_BYTE *)(v7 + 24 * v8 + 16) = *((_BYTE *)a3 + 16);
    v17 = a1[31];
    if (v9 != (_QWORD *)a1[11])
    {
      v18 = (_QWORD *)a1[16];
      if (v18)
      {
        while (1)
        {
          v51 = &v49;
          v52 = 1;
          v50 = v17;
          v19 = v18[6];
          if (!v19)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v19 + 48))(v19, &v50, &v51);
          v18 = (_QWORD *)*v18;
          if (!v18)
            return;
        }
LABEL_57:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_58:
        abort();
      }
      return;
    }
  }
  v47 = (_QWORD *)a1[22];
  if (v47)
  {
    while (1)
    {
      v51 = &v49;
      v52 = 1;
      v50 = v17;
      v48 = v47[6];
      if (!v48)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v48 + 48))(v48, &v50, &v51);
      v47 = (_QWORD *)*v47;
      if (!v47)
        return;
    }
    goto LABEL_57;
  }
}

char *std::vector<md::components::Material>::__emplace_back_slow_path<md::components::Material&>(char **a1, _QWORD *a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v2 = *a1;
  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - v2) >> 3) > v5)
    v5 = 0x5555555555555556 * ((a1[2] - v2) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v2) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v8 = 24 * v5;
  v9 = (char *)operator new(24 * v5);
  v10 = &v9[24 * v4];
  v11 = a2[1];
  *(_QWORD *)v10 = *a2;
  *((_QWORD *)v10 + 1) = v11;
  v12 = a2[2];
  *((_QWORD *)v10 + 2) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v2 = *a1;
    v3 = a1[1];
  }
  v15 = &v9[v8];
  v16 = v10 + 24;
  if (v3 == v2)
  {
    *a1 = v10;
    a1[1] = v16;
    a1[2] = v15;
  }
  else
  {
    do
    {
      v17 = *((_QWORD *)v3 - 3);
      v3 -= 24;
      *((_QWORD *)v10 - 3) = v17;
      v10 -= 24;
      *(_OWORD *)(v10 + 8) = *(_OWORD *)(v3 + 8);
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v2);
    v2 = *a1;
    v18 = a1[1];
    *a1 = v10;
    a1[1] = v16;
    a1[2] = v15;
    while (v18 != v2)
    {
      v19 = (std::__shared_weak_count *)*((_QWORD *)v18 - 1);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v18 -= 24;
    }
  }
  if (v2)
    operator delete(v2);
  return v16;
}

void md::components::Material::~Material(md::components::Material *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void gdc::ComponentStorageWrapper<md::components::IntendedSceneLayer>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::IntendedSceneLayer>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::IntendedSceneLayer>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::components::IntendedSceneLayer>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::components::Collapsible>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::Collapsible>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::Collapsible>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::components::Collapsible>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::components::Visibility>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::Visibility>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::Visibility>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::components::Visibility>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::Material>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,md::components::Material>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<md::components::Material>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,md::components::Material>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::Material>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v10 = a2;
  v3 = geo::sparse_map<gdc::Entity,md::components::Material>::erase(a1 + 4, HIDWORD(a2));
  if (!(_DWORD)v3)
    return v3;
  v4 = (_QWORD *)a1[28];
  if (!v4)
    return v3;
  v5 = a1[31];
  while (1)
  {
    v12[0] = &v10;
    v12[1] = 1;
    v11 = v5;
    v6 = v4[6];
    if (!v6)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v6 + 48))(v6, &v11, v12);
    v4 = (_QWORD *)*v4;
    if (!v4)
      return v3;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::Material>::contains(v8, v9);
}

BOOL gdc::ComponentStorageWrapper<md::components::Material>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t geo::sparse_map<gdc::Entity,md::components::Material>::erase(uint64_t *a1, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;

  v2 = (unint64_t)a2 >> 7;
  if (v2 >= (a1[1] - *a1) >> 3)
    return 0;
  v3 = *(_QWORD *)(*a1 + 8 * v2);
  if (!v3)
    return 0;
  v5 = *(unsigned __int16 *)(v3 + 2 * (a2 & 0x7F));
  v6 = a1[3];
  v7 = a1[4];
  if (v5 >= (v7 - v6) >> 3)
    return 0;
  v8 = v6 + 8 * v5;
  if (*(_DWORD *)(v8 + 4) != a2 || v8 == v7)
    return 0;
  v11 = a1[6];
  v12 = (_QWORD *)(v11 + 24 * v5);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(a1, (_QWORD *)v8);
  v13 = a1[7];
  v14 = *(_QWORD *)(v13 - 16);
  *v12 = *(_QWORD *)(v13 - 24);
  v15 = v12 + 1;
  v16 = *(_QWORD *)(v13 - 8);
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *v15 = v14;
  v19 = v11 + 24 * v5;
  v20 = *(std::__shared_weak_count **)(v19 + 16);
  *(_QWORD *)(v19 + 16) = v16;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = a1[7];
  v24 = *(std::__shared_weak_count **)(v23 - 8);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  a1[7] = v23 - 24;
  return 1;
}

_QWORD *geo::sparse_map<gdc::Entity,md::components::Material>::~sparse_map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[6];
  if (v2)
  {
    v3 = a1[7];
    v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  v8 = (void *)a1[3];
  if (v8)
  {
    a1[4] = v8;
    operator delete(v8);
  }
  v9 = (_QWORD *)*a1;
  if (*a1)
  {
    v10 = (_QWORD *)a1[1];
    v11 = (_QWORD *)*a1;
    if (v10 != v9)
    {
      do
      {
        v13 = *--v10;
        v12 = v13;
        *v10 = 0;
        if (v13)
          MEMORY[0x1A1AF4E00](v12, 0x1000C40104B78CFLL);
      }
      while (v10 != v9);
      v11 = (_QWORD *)*a1;
    }
    a1[1] = v9;
    operator delete(v11);
  }
  return a1;
}

uint64_t gdc::ComponentStorageWrapper<md::components::CustomRenderState>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,md::components::CustomRenderState>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<md::components::CustomRenderState>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,md::components::CustomRenderState>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::CustomRenderState>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD v35[2];

  v33 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = a1[10];
  v15 = (_QWORD *)(v14 + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v16 = a1[11];
  v18 = *(_QWORD *)(v16 - 24);
  v17 = *(_QWORD *)(v16 - 16);
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (std::__shared_weak_count *)v15[1];
  *v15 = v18;
  v15[1] = v17;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  *(_BYTE *)(v14 + 24 * v7 + 16) = *(_BYTE *)(v16 - 8);
  v24 = a1[11];
  v25 = *(std::__shared_weak_count **)(v24 - 16);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  a1[11] = v24 - 24;
  v28 = (_QWORD *)a1[28];
  if (!v28)
    return 1;
  v29 = a1[31];
  while (1)
  {
    v35[0] = &v33;
    v35[1] = 1;
    v34 = v29;
    v30 = v28[6];
    if (!v30)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v30 + 48))(v30, &v34, v35);
    v28 = (_QWORD *)*v28;
    if (!v28)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::CustomRenderState>::contains(v31, v32);
}

BOOL gdc::ComponentStorageWrapper<md::components::CustomRenderState>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *geo::sparse_map<gdc::Entity,md::components::CustomRenderState>::~sparse_map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[6];
  if (v2)
  {
    v3 = a1[7];
    v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 16);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  v8 = (void *)a1[3];
  if (v8)
  {
    a1[4] = v8;
    operator delete(v8);
  }
  v9 = (_QWORD *)*a1;
  if (*a1)
  {
    v10 = (_QWORD *)a1[1];
    v11 = (_QWORD *)*a1;
    if (v10 != v9)
    {
      do
      {
        v13 = *--v10;
        v12 = v13;
        *v10 = 0;
        if (v13)
          MEMORY[0x1A1AF4E00](v12, 0x1000C40104B78CFLL);
      }
      while (v10 != v9);
      v11 = (_QWORD *)*a1;
    }
    a1[1] = v9;
    operator delete(v11);
  }
  return a1;
}

void gdc::ComponentStorageWrapper<md::components::MeshInstance>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::MeshInstance>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v25[2];

  v23 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = a1[10] + 112 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_OWORD *)(v15 - 112);
  v17 = *(_OWORD *)(v15 - 96);
  *(_BYTE *)(v14 + 32) = *(_BYTE *)(v15 - 80);
  *(_OWORD *)v14 = v16;
  *(_OWORD *)(v14 + 16) = v17;
  *(_DWORD *)(v14 + 36) = *(_DWORD *)(v15 - 76);
  *(_DWORD *)(v14 + 40) = *(_DWORD *)(v15 - 72);
  *(_DWORD *)(v14 + 44) = *(_DWORD *)(v15 - 68);
  *(_DWORD *)(v14 + 48) = *(_DWORD *)(v15 - 64);
  *(_DWORD *)(v14 + 52) = *(_DWORD *)(v15 - 60);
  *(_DWORD *)(v14 + 56) = *(_DWORD *)(v15 - 56);
  *(_DWORD *)(v14 + 60) = *(_DWORD *)(v15 - 52);
  *(_DWORD *)(v14 + 64) = *(_DWORD *)(v15 - 48);
  *(_DWORD *)(v14 + 68) = *(_DWORD *)(v15 - 44);
  *(_DWORD *)(v14 + 72) = *(_DWORD *)(v15 - 40);
  *(_DWORD *)(v14 + 76) = *(_DWORD *)(v15 - 36);
  *(_DWORD *)(v14 + 80) = *(_DWORD *)(v15 - 32);
  *(_DWORD *)(v14 + 84) = *(_DWORD *)(v15 - 28);
  *(_DWORD *)(v14 + 88) = *(_DWORD *)(v15 - 24);
  *(_DWORD *)(v14 + 92) = *(_DWORD *)(v15 - 20);
  *(_DWORD *)(v14 + 96) = *(_DWORD *)(v15 - 16);
  *(_DWORD *)(v14 + 100) = *(_DWORD *)(v15 - 12);
  *(_DWORD *)(v14 + 104) = *(_DWORD *)(v15 - 8);
  a1[11] -= 112;
  v18 = (_QWORD *)a1[28];
  if (!v18)
    return 1;
  v19 = a1[31];
  while (1)
  {
    v25[0] = &v23;
    v25[1] = 1;
    v24 = v19;
    v20 = v18[6];
    if (!v20)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v20 + 48))(v20, &v24, v25);
    v18 = (_QWORD *)*v18;
    if (!v18)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::MeshInstance>::contains(v21, v22);
}

BOOL gdc::ComponentStorageWrapper<md::components::MeshInstance>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void md::VectorOverlayMaterial::~VectorOverlayMaterial(md::VectorOverlayMaterial *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C1CB0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C1CB0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyAlbedo(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::albedo(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyNormal(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::normal(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyRoughnessMetallic(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
  return result;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyEmissive(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 104))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::emissive(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyRoughnessFactor(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceRoughnessFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetRoughnessFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::roughnessFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minRoughnessFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::maxRoughnessFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyMetallicFactor(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceMetallicFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetMetallicFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::metallicFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minMetallicFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::maxMetallicFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyEmissiveFactor(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 176))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceEmissiveFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetEmissiveFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::emissiveFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyAlbedoFactor(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceAlbedoFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetAlbedoFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void md::VectorOverlayMaterial::albedoFactor(md::VectorOverlayMaterial *this@<X0>, uint64_t a2@<X8>)
{
  float v4;
  float v5;
  int v6;
  float v7;
  float v8;
  float v9;
  float v10;

  v4 = *((float *)this + 14);
  v5 = *((float *)this + 15);
  v7 = *((float *)this + 16);
  v6 = *((_DWORD *)this + 17);
  if (v4 >= 0.04045)
    v8 = powf((float)(v4 * 0.94787) + 0.052133, 2.4);
  else
    v8 = v4 * 0.077399;
  if (v5 >= 0.04045)
    v9 = powf((float)(v5 * 0.94787) + 0.052133, 2.4);
  else
    v9 = v5 * 0.077399;
  if (v7 >= 0.04045)
    v10 = powf((float)(v7 * 0.94787) + 0.052133, 2.4);
  else
    v10 = v7 * 0.077399;
  *(_BYTE *)a2 = 1;
  *(float *)(a2 + 4) = v8;
  *(float *)(a2 + 8) = v9;
  *(float *)(a2 + 12) = v10;
  *(_DWORD *)(a2 + 16) = v6;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyZIndex(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 224))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceZIndex(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetZIndex(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minZIndex(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::maxZIndex(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyLineWidth(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 248))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceLineWidth(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetLineWidth(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::lineWidth(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minLineWidth(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::maxLineWidth(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyVisibility(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 272))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceVisibility(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetVisibility(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minVisibility(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::maxVisibility(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyTiling(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 296))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceTiling(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetTiling(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::tiling(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyOffset(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 320))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceOffset(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetOffset(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::offset(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnySpecularity(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 344))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceSpecularity(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetSpecularity(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::specularity(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minSpecularity(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::maxSpecularity(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyShininess(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 368))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceShininess(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetShininess(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::shininess(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minShininess(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::maxShininess(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyCastShadow(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 392))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceCastShadow(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetCastShadow(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minCastShadow(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::maxCastShadow(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyColorRamp(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 416))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceColorRamp(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetColorRamp(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnySaturationFactor(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 440))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceSaturationFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetSaturationFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::saturationFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minSaturationFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::maxSaturationFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyBrightnessFactor(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 464))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceBrightnessFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetBrightnessFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::brightnessFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minBrightnessFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::maxBrightnessFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyAcceptsOverlays(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 488))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceAcceptsOverlays(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetAcceptsOverlays(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minAcceptsOverlays(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::maxAcceptsOverlays(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnySaturationRemapRange(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 512))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceSaturationRemapRange(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetSaturationRemapRange(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::saturationRemapRange(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyBrightnessRemapRange(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 536))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceBrightnessRemapRange(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetBrightnessRemapRange(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::brightnessRemapRange(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyGradientMaskFactor(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 560))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceGradientMaskFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetGradientMaskFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::gradientMaskFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyHideOnCollapse(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 584))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceHideOnCollapse(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetHideOnCollapse(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minHideOnCollapse(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::maxHideOnCollapse(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyNoColorCorrection(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 608))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceNoColorCorrection(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetNoColorCorrection(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::maxNoColorCorrection(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyAlpha(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 632))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceAlpha(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetAlpha(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

float md::VectorOverlayMaterial::alpha@<S0>(md::VectorOverlayMaterial *this@<X0>, uint64_t a2@<X8>)
{
  float result;

  result = *((float *)this + 17);
  *(_BYTE *)a2 = 1;
  *(float *)(a2 + 4) = result;
  return result;
}

void gms::Material<ggl::Texture2D>::minAlpha(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::maxAlpha(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyAlbedoFactorRGB(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 656))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceAlbedoFactorRGB(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetAlbedoFactorRGB(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void md::VectorOverlayMaterial::albedoFactorRGB(md::VectorOverlayMaterial *this@<X0>, uint64_t a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  v4 = *((float *)this + 14);
  v5 = *((float *)this + 15);
  v6 = *((float *)this + 16);
  if (v4 >= 0.04045)
    v7 = powf((float)(v4 * 0.94787) + 0.052133, 2.4);
  else
    v7 = v4 * 0.077399;
  if (v5 >= 0.04045)
    v8 = powf((float)(v5 * 0.94787) + 0.052133, 2.4);
  else
    v8 = v5 * 0.077399;
  if (v6 >= 0.04045)
    v9 = powf((float)(v6 * 0.94787) + 0.052133, 2.4);
  else
    v9 = v6 * 0.077399;
  *(_BYTE *)a2 = 1;
  *(float *)(a2 + 4) = v7;
  *(float *)(a2 + 8) = v8;
  *(float *)(a2 + 12) = v9;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyEmissiveFactorRGB(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 680))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceEmissiveFactorRGB(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetEmissiveFactorRGB(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::emissiveFactorRGB(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyGradientMaskFactorRGB(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 704))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceGradientMaskFactorRGB(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetGradientMaskFactorRGB(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::gradientMaskFactorRGB(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyColorRampRGB(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 728))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceColorRampRGB(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetColorRampRGB(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyHotAdjustment(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 752))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceHotAdjustment(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetHotAdjustment(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyColdAdjustment(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 776))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceColdAdjustment(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetColdAdjustment(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyWetAdjustment(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 800))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceWetAdjustment(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetWetAdjustment(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyDryAdjustment(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 824))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceDryAdjustment(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetDryAdjustment(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnySsaoIntensity(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 848))(result);
  return result;
}

void gms::Material<ggl::Texture2D>::sourceSsaoIntensity(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetSsaoIntensity(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::ssaoIntensity(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minSsaoIntensity(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::maxSsaoIntensity(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *gms::Material<ggl::Texture2D>::~Material(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42C1CB0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      return a1;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      return a1;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void gms::Material<ggl::Texture2D>::~Material(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42C1CB0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x1A1AF4E00);
}

void gms::Material<ggl::Texture2D>::albedoFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::alpha(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void std::__shared_ptr_emplace<md::VectorOverlayMaterial>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC900;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::VectorOverlayMaterial>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC900;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::VectorOverlayMaterial>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t gdc::Registry::storage<md::overlayComponents::HasDebugDisplay>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x6A5EB78DB32E8B87;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x6A5EB78DB32E8B87;
      if (*(_QWORD *)&v3 <= 0x6A5EB78DB32E8B87uLL)
        v5 = 0x6A5EB78DB32E8B87uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x6A5EB78DB32E8B87;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x6A5EB78DB32E8B87)
            {
              if (v7[2] == 0x6A5EB78DB32E8B87)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x6A5EB78DB32E8B87)
          {
            if (v7[2] == 0x6A5EB78DB32E8B87)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::overlayComponents::HasDebugDisplay]";
  *(_QWORD *)(v11 + 24) = 38;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3708;
  *(_QWORD *)(v11 + 8) = 0x6A5EB78DB32E8B87;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x6A5EB78DB32E8B87uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x6A5EB78DB32E8B87;
  v15[1] = "md::overlayComponents::HasDebugDisplay]";
  v15[2] = 38;
  gdc::Registry::_registerStorageDataSignals(a1, 0x6A5EB78DB32E8B87, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F3EDD04(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::overlayComponents::HasDebugDisplay>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::HasDebugDisplay>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::overlayComponents::HasDebugDisplay>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::HasDebugDisplay>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)24>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)24>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)24>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)24>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void _ZNSt3__110__function6__funcIZN2md12DrapingLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15OverlaysContextENS2_13CameraContextENS2_19PendingSceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14DrapingContextEE3__3NS_9allocatorISM_EEFbRKPNS8_8RegistryEEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md12DrapingLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15OverlaysContextENS2_13CameraContextENS2_19PendingSceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14DrapingContextEE3__3NS_9allocatorISM_EEFbRKPNS8_8RegistryEEE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42C91B8;
  return result;
}

void _ZNKSt3__110__function6__funcIZN2md12DrapingLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15OverlaysContextENS2_13CameraContextENS2_19PendingSceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14DrapingContextEE3__3NS_9allocatorISM_EEFbRKPNS8_8RegistryEEE7__cloneEPNS0_6__baseIST_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42C91B8;
}

BOOL _ZNSt3__110__function6__funcIZN2md12DrapingLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15OverlaysContextENS2_13CameraContextENS2_19PendingSceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14DrapingContextEE3__3NS_9allocatorISM_EEFbRKPNS8_8RegistryEEEclESS_(uint64_t a1, int8x8_t **a2)
{
  int8x8_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  int8x8_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL8 result;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v2 = *a2;
  v3 = (*a2)[1];
  if (!*(_QWORD *)&v3)
    return 0;
  v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = 0x64A448A5CD5D38DBLL;
    if (*(_QWORD *)&v3 <= 0x64A448A5CD5D38DBuLL)
      v5 = 0x64A448A5CD5D38DBuLL % *(_QWORD *)&v3;
  }
  else
  {
    v5 = (*(_QWORD *)&v3 - 1) & 0x64A448A5CD5D38DBLL;
  }
  v6 = *v2;
  v7 = *(_QWORD **)(*(_QWORD *)v2 + 8 * v5);
  if (!v7)
    return 0;
  v8 = (_QWORD *)*v7;
  if (!*v7)
    return 0;
  v9 = *(_QWORD *)&v3 - 1;
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      v10 = v8[1];
      if (v10 == 0x64A448A5CD5D38DBLL)
      {
        if (v8[2] == 0x64A448A5CD5D38DBLL)
          goto LABEL_22;
      }
      else if ((v10 & v9) != v5)
      {
        return 0;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        return 0;
    }
  }
  while (1)
  {
    v11 = v8[1];
    if (v11 != 0x64A448A5CD5D38DBLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
      if (v11 != v5)
        return 0;
      goto LABEL_16;
    }
    if (v8[2] == 0x64A448A5CD5D38DBLL)
      break;
LABEL_16:
    v8 = (_QWORD *)*v8;
    if (!v8)
      return 0;
  }
LABEL_22:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) != 0x64A448A5CD5D38DBLL || !*(_QWORD *)(v12 + 32))
    return 0;
  if (v4.u32[0] > 1uLL)
  {
    v13 = 0x41A3BFA74D47A0E8;
    if (*(_QWORD *)&v3 <= 0x41A3BFA74D47A0E8uLL)
      v13 = 0x41A3BFA74D47A0E8uLL % *(_QWORD *)&v3;
  }
  else
  {
    v13 = v9 & 0x41A3BFA74D47A0E8;
  }
  v14 = *(_QWORD **)(*(_QWORD *)&v6 + 8 * v13);
  if (!v14)
    return 0;
  v15 = (_QWORD *)*v14;
  if (!v15)
    return 0;
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 0x41A3BFA74D47A0E8)
      {
        if (v15[2] == 0x41A3BFA74D47A0E8)
          goto LABEL_44;
      }
      else if ((v17 & v9) != v13)
      {
        return 0;
      }
      result = 0;
      v15 = (_QWORD *)*v15;
      if (!v15)
        return result;
    }
  }
  while (2)
  {
    v18 = v15[1];
    if (v18 != 0x41A3BFA74D47A0E8)
    {
      if (v18 >= *(_QWORD *)&v3)
        v18 %= *(_QWORD *)&v3;
      if (v18 != v13)
        return 0;
      goto LABEL_38;
    }
    if (v15[2] != 0x41A3BFA74D47A0E8)
    {
LABEL_38:
      result = 0;
      v15 = (_QWORD *)*v15;
      if (!v15)
        return result;
      continue;
    }
    break;
  }
LABEL_44:
  v19 = v15[5];
  if (*(_QWORD *)(v19 + 8) == 0x41A3BFA74D47A0E8)
    return *(_QWORD *)(v19 + 32) != 0;
  return 0;
}

_BYTE *std::vector<gdc::LayerDataRequestKey>::__push_back_slow_path<gdc::LayerDataRequestKey const&>(void **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  _DWORD *v7;
  _BYTE *v8;
  char *v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  char *v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v2 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x249249249249249)
    abort();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4)) >= 0x124924924924924)
    v6 = 0x249249249249249;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x249249249249249)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = operator new(112 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[28 * v2];
  *v8 = *(_BYTE *)a2;
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v8 + 8), a2 + 8);
  v8[96] = 0;
  if (*(_BYTE *)(a2 + 96))
  {
    v7[28 * v2 + 25] = *(_DWORD *)(a2 + 100);
    v8[96] = 1;
  }
  v9 = (char *)&v7[28 * v6];
  *(_QWORD *)&v7[28 * v2 + 26] = *(_QWORD *)(a2 + 104);
  v10 = v8 + 112;
  v12 = (char *)*a1;
  v11 = (char *)a1[1];
  if (v11 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = &v8[v13];
      v15 = &v11[v13];
      v8[v13 - 112] = v11[v13 - 112];
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v8[v13 - 104], (uint64_t)&v11[v13 - 104]);
      v8[v13 - 16] = 0;
      if (v11[v13 - 16])
      {
        *((_DWORD *)v14 - 3) = *((_DWORD *)v15 - 3);
        *(v14 - 16) = 1;
      }
      *((_QWORD *)v14 - 1) = *((_QWORD *)v15 - 1);
      v13 -= 112;
    }
    while (&v11[v13] != v12);
    v16 = &v8[v13];
    v11 = (char *)*a1;
    v17 = (char *)a1[1];
    *a1 = v16;
    a1[1] = v10;
    a1[2] = v9;
    while (v17 != v11)
    {
      if (*(v17 - 16))
        *(v17 - 16) = 0;
      v18 = (void *)*((_QWORD *)v17 - 12);
      if (v18 != *((void **)v17 - 10))
        free(v18);
      v17 -= 112;
    }
  }
  if (v11)
    operator delete(v11);
  return v10;
}

uint64_t std::pair<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>::~pair(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 112);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 120);
    v4 = *(void **)(a1 + 112);
    if (v3 != v2)
    {
      do
      {
        if (*(_BYTE *)(v3 - 16))
          *(_BYTE *)(v3 - 16) = 0;
        v5 = *(void **)(v3 - 96);
        if (v5 != *(void **)(v3 - 80))
          free(v5);
        v3 -= 112;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 112);
    }
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v4);
  }
  if (*(_BYTE *)(a1 + 96))
    *(_BYTE *)(a1 + 96) = 0;
  v6 = *(void **)(a1 + 16);
  if (v6 != *(void **)(a1 + 32))
    free(v6);
  return a1;
}

void **std::vector<gdc::LayerDataRequestKey>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*(v3 - 16))
          *(v3 - 16) = 0;
        v5 = (void *)*((_QWORD *)v3 - 12);
        if (v5 != *((void **)v3 - 10))
          free(v5);
        v3 -= 112;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t `anonymous namespace'::_tileListToString(_BYTE *a1, unsigned __int16 **a2)
{
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  std::string *p_p;
  std::string::size_type size;
  size_t v8;
  unint64_t v9;
  const void **v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  std::string __p;
  _QWORD v18[2];
  _QWORD v19[3];
  _QWORD v20[3];
  uint64_t v21;
  unint64_t v22;
  void *v23;
  char v24;
  unint64_t v25;
  int v26;
  uint64_t v27;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v18);
  __p.__r_.__value_.__s.__data_[0] = 91;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)&__p, 1);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      gdc::LayerDataRequestKey::keysInt32Str(&__p, v4);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)p_p, size);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v4 += 56;
    }
    while (v4 != v5);
  }
  __p.__r_.__value_.__s.__data_[0] = 93;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)&__p, 1);
  if ((v26 & 0x10) != 0)
  {
    v9 = v25;
    if (v25 < v22)
    {
      v25 = v22;
      v9 = v22;
    }
    v10 = (const void **)&v21;
  }
  else
  {
    if ((v26 & 8) == 0)
    {
      v8 = 0;
      a1[23] = 0;
      goto LABEL_27;
    }
    v10 = (const void **)v20;
    v9 = v20[2];
  }
  v11 = *v10;
  v8 = v9 - (_QWORD)*v10;
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v8 >= 0x17)
  {
    v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v12 = v8 | 7;
    v13 = v12 + 1;
    v14 = operator new(v12 + 1);
    *((_QWORD *)a1 + 1) = v8;
    *((_QWORD *)a1 + 2) = v13 | 0x8000000000000000;
    *(_QWORD *)a1 = v14;
    a1 = v14;
    goto LABEL_26;
  }
  a1[23] = v8;
  if (v8)
LABEL_26:
    memmove(a1, v11, v8);
LABEL_27:
  a1[v8] = 0;
  v18[0] = *MEMORY[0x1E0DE4F50];
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v19[0] = v15;
  v19[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v24 < 0)
    operator delete(v23);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AF4D64](&v27);
}

void sub_19F3EE76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<md::MapDataType>::__assign_with_size[abi:nn180100]<md::MapDataType*,md::MapDataType*>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  size_t v8;
  char *v9;
  size_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (uint64_t)(v8 - *result) >> 1)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((__sz & 0x8000000000000000) != 0)
      goto LABEL_23;
    if (v8 <= __sz)
      v10 = __sz;
    else
      v10 = v8;
    v11 = v8 >= 0x7FFFFFFFFFFFFFFELL;
    v12 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 < 0)
LABEL_23:
      abort();
    v13 = 2 * v12;
    result = operator new(2 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 1;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v19 = (void *)*result;
LABEL_21:
    result = memmove(v19, __src, v14);
    goto LABEL_22;
  }
  v18 = &__src[2 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

void std::__tree<gdc::LayerDataRequestKey>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<gdc::LayerDataRequestKey>::destroy(*a1);
    std::__tree<gdc::LayerDataRequestKey>::destroy(a1[1]);
    if (*((_BYTE *)a1 + 128))
      *((_BYTE *)a1 + 128) = 0;
    v2 = (void *)a1[6];
    if (v2 != (void *)a1[8])
      free(v2);
    operator delete(a1);
  }
}

double md::DrapingLogic::_evaluateCoverageOfTilePairs(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 **a4, unsigned __int16 **a5, double a6, int16x4_t a7)
{
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  double v11;
  int32x2_t *v12;
  __int32 v13;
  double v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  char v25;
  int v28;
  unsigned __int16 *v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  uint64_t *v34;
  int8x8_t v35;
  int v36;
  uint64_t *v37;
  unsigned __int8 *v38;
  int v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  NSObject *v46;
  std::string *v47;
  std::string *v48;
  int v49;
  _BYTE *v50;
  _BYTE *v51;
  void *p_p;
  unsigned int v57;
  unsigned int v58;
  std::string::size_type v59;
  void *__p;
  std::__shared_weak_count *v61;
  char v62;
  _BYTE v63[12];
  char v64;
  std::string v65;
  std::string v66;
  char v67[8];
  std::__shared_weak_count *v68;
  uint8_t buf[4];
  double v70;
  __int16 v71;
  std::string *v72;
  __int16 v73;
  _BYTE *v74;
  __int16 v75;
  void *v76;
  __int16 v77;
  double v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v8 = *a4;
  v9 = a4[1];
  if (*a4 != v9)
  {
    v58 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 8);
    v11 = 0.0;
    v57 = *(_DWORD *)(*(_QWORD *)(a3 + 16) + 8);
    while (1)
    {
      v12 = (int32x2_t *)*((_QWORD *)v8 + 2);
      v13 = v12[1].i32[0];
      v65.__r_.__value_.__s.__data_[0] = v12[1].i32[1];
      v65.__r_.__value_.__s.__data_[1] = v13;
      v14 = COERCE_DOUBLE(vrev64_s32(*v12));
      *(double *)((char *)v65.__r_.__value_.__r.__words + 4) = v14;
      v16 = *a5;
      v15 = a5[1];
      while (v16 != v15)
      {
        v19 = *((_QWORD *)v16 + 2);
        v20 = *(_DWORD *)(v19 + 4);
        v21 = *(_DWORD *)(v19 + 8);
        v22 = *(_DWORD *)v19;
        LODWORD(v19) = *(unsigned __int8 *)(v19 + 12);
        v63[0] = v19;
        v63[1] = v21;
        *(_DWORD *)&v63[4] = v20;
        *(_DWORD *)&v63[8] = v22;
        if (v65.__r_.__value_.__s.__data_[0] != (_DWORD)v19)
          goto LABEL_12;
        if (v65.__r_.__value_.__s.__data_[1] >= v21)
        {
          if (v65.__r_.__value_.__s.__data_[1] == v21
            && HIDWORD(v65.__r_.__value_.__r.__words[0]) == v20
            && LODWORD(v65.__r_.__value_.__r.__words[1]) == v22)
          {
            goto LABEL_37;
          }
        }
        else if (*(std::string::size_type *)((char *)v65.__r_.__value_.__r.__words + 4) == __PAIR64__(v22 >> (v21 - v65.__r_.__value_.__s.__data_[1]), v20 >> (v21 - v65.__r_.__value_.__s.__data_[1])))
        {
          goto LABEL_37;
        }
        if (v65.__r_.__value_.__s.__data_[1] <= v21)
        {
          if (v65.__r_.__value_.__s.__data_[1] != v21
            || v20 != HIDWORD(v65.__r_.__value_.__r.__words[0])
            || v22 != LODWORD(v65.__r_.__value_.__r.__words[1]))
          {
            goto LABEL_12;
          }
        }
        else
        {
          v25 = v65.__r_.__value_.__s.__data_[1] - v21;
          if (v20 != SHIDWORD(v65.__r_.__value_.__r.__words[0]) >> v25
            || v22 != SLODWORD(v65.__r_.__value_.__r.__words[1]) >> v25)
          {
            goto LABEL_12;
          }
        }
LABEL_37:
        v28 = v8[4];
        if (v28 == 33)
          v29 = v16;
        else
          v29 = v8;
        if (v28 == 33)
          v30 = v65.__r_.__value_.__s.__data_[0];
        else
          v30 = v63[0];
        if (v28 == 33)
          v31 = v65.__r_.__value_.__s.__data_[1];
        else
          v31 = v63[1];
        if (v28 == 33)
          v32 = v63[0];
        else
          v32 = v65.__r_.__value_.__s.__data_[0];
        if (v28 == 33)
          v33 = v63[1];
        else
          v33 = v65.__r_.__value_.__s.__data_[1];
        v34 = *(uint64_t **)(*(_QWORD *)(a1 + 168) + 24);
        if (v34)
        {
          LODWORD(v14) = 33;
          a7.i32[0] = v8[4];
          v35 = (int8x8_t)vdup_lane_s16(vceq_s16(a7, *(int16x4_t *)&v14), 0);
          v14 = COERCE_DOUBLE(vbsl_s8(v35, *(int8x8_t *)((char *)v65.__r_.__value_.__r.__words + 4), *(int8x8_t *)&v63[4]));
          a7 = (int16x4_t)vbsl_s8(v35, *(int8x8_t *)&v63[4], *(int8x8_t *)((char *)v65.__r_.__value_.__r.__words + 4));
          v36 = v29[4];
          while (1)
          {
            if (*((unsigned __int8 *)v34 + 16) == v30
              && *((unsigned __int8 *)v34 + 17) == v31
              && *(uint64_t *)((char *)v34 + 20) == *(_QWORD *)&v14)
            {
              v37 = (uint64_t *)v34[8];
              if (v37)
                break;
            }
LABEL_54:
            v34 = (uint64_t *)*v34;
            if (!v34)
              goto LABEL_12;
          }
          while (*((unsigned __int8 *)v37 + 16) != v32
               || *((unsigned __int8 *)v37 + 17) != v33
               || *(uint64_t *)((char *)v37 + 20) != *(_QWORD *)&a7
               || *((unsigned __int16 *)v37 + 20) != v36)
          {
            v37 = (uint64_t *)*v37;
            if (!v37)
              goto LABEL_54;
          }
          v38 = (unsigned __int8 *)v37[8];
          if (v38)
          {
            v39 = atomic_load(v38);
            if (v39 == 2)
            {
              v59 = (std::string::size_type)a7;
              buf[0] = v30;
              buf[1] = v31;
              v70 = v14;
              md::DrapingLogic::_dataInStore((gdc::LayerDataStore *)&__p, *(unsigned __int16 **)(*(_QWORD *)(a1 + 464) + 80), *(unsigned __int16 **)(*(_QWORD *)(a1 + 464) + 88), buf, 33);
              v66.__r_.__value_.__s.__data_[0] = v32;
              v66.__r_.__value_.__s.__data_[1] = v33;
              *(std::string::size_type *)((char *)v66.__r_.__value_.__r.__words + 4) = v59;
              md::DrapingLogic::_dataInStore((gdc::LayerDataStore *)v67, *(unsigned __int16 **)(*(_QWORD *)(a1 + 464) + 80), *(unsigned __int16 **)(*(_QWORD *)(a1 + 464) + 88), (unsigned __int8 *)&v66, v36);
              v40 = v68;
              if (v68)
              {
                p_shared_owners = (unint64_t *)&v68->__shared_owners_;
                do
                  v42 = __ldaxr(p_shared_owners);
                while (__stlxr(v42 - 1, p_shared_owners));
                if (!v42)
                {
                  ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                  std::__shared_weak_count::__release_weak(v40);
                }
              }
              v43 = v61;
              if (v61)
              {
                v44 = (unint64_t *)&v61->__shared_owners_;
                do
                  v45 = __ldaxr(v44);
                while (__stlxr(v45 - 1, v44));
                if (!v45)
                {
                  ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                  std::__shared_weak_count::__release_weak(v43);
                }
              }
              v17 = v65.__r_.__value_.__s.__data_[1];
              if (v65.__r_.__value_.__s.__data_[1] <= v58)
                v17 = v58;
              v18 = v63[1];
              if (v63[1] <= v57)
                v18 = v57;
              if (v17 <= v18)
                LOBYTE(v17) = v18;
              v14 = 1.0 / (double)(unint64_t)(1 << (2 * (v17 - v58)));
              v11 = v14 + v11;
            }
          }
        }
LABEL_12:
        v16 += 56;
      }
      v8 += 56;
      if (v8 == v9)
        goto LABEL_78;
    }
  }
  v11 = 0.0;
LABEL_78:
  if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_43);
  v46 = (id)GEOGetVectorKitDrapingFallbackLog_log;
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
  {
    gdc::LayerDataRequestKey::keysInt32Str(&v66, (unsigned __int16 *)a2);
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = &v66;
    else
      v47 = (std::string *)v66.__r_.__value_.__r.__words[0];
    gdc::LayerDataRequestKey::keysInt32Str(&v65, (unsigned __int16 *)a3);
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = &v65;
    else
      v48 = (std::string *)v65.__r_.__value_.__r.__words[0];
    v49 = v64;
    v50 = *(_BYTE **)v63;
    v51 = v63;
    if (v49 < 0)
      v51 = v50;
    if (v62 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136316162;
    v70 = *(double *)&v47;
    v71 = 2080;
    v72 = v48;
    v73 = 2080;
    v74 = v51;
    v75 = 2080;
    v76 = p_p;
    v77 = 2048;
    v78 = v11;
    _os_log_impl(&dword_19F029000, v46, OS_LOG_TYPE_DEBUG, "evaluate coverage of : %s vs %s.  First Keys = %s.  Second Keys = %s  Area = %f", buf, 0x34u);
    if (v62 < 0)
    {
      operator delete(__p);
      if ((v64 & 0x80000000) == 0)
      {
LABEL_94:
        if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_95;
        goto LABEL_99;
      }
    }
    else if ((v64 & 0x80000000) == 0)
    {
      goto LABEL_94;
    }
    operator delete(*(void **)v63);
    if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_95:
      if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_96;
LABEL_100:
      operator delete(v66.__r_.__value_.__l.__data_);
      goto LABEL_96;
    }
LABEL_99:
    operator delete(v65.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_96;
    goto LABEL_100;
  }
LABEL_96:

  return v11;
}

void sub_19F3EEE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;
  void *v35;
  int v36;

  if (v36 < 0)
  {
    operator delete(v34);
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a23);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_5:

    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(__p);
  goto LABEL_5;
}

void md::DrapingLogic::_fallbackTilesForHoleTile(uint64_t a1, int64x2_t *a2, uint64_t a3, _QWORD *a4)
{
  _DWORD *v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  gdc::FallbackCollector *v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  _QWORD *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  const gdc::LayerDataRequestKey *v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  __int16 v25;
  __int128 *v26;
  uint64_t v27;
  _QWORD *v28;
  const QuadTile *v29;
  _QWORD *v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void *v46;
  int8x16_t v47;
  int8x16_t v48;
  int64x2_t v49;
  unsigned __int128 v50;
  unsigned __int128 v51;
  int8x16_t v52;
  int8x16_t v53;
  int64x2_t v54;
  __int16 v55[2];
  int v56;
  int v57;
  void *__p;
  _QWORD *v59;
  uint64_t v60;
  char v61[4];
  int v62;
  int v63;
  __int128 v64;
  __int128 *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD **)(a3 + 16);
  v8 = v7[2];
  v9 = v7[3];
  v10 = v8;
  v11 = 1 << v8;
  v12 = (v7[1] % v11 + v11) % v11;
  LODWORD(v7) = *v7 % v11 + v11;
  v61[0] = v9;
  v61[1] = v8;
  v13 = (int)v7 % (1 << v8);
  v62 = v12;
  v63 = (int)v7 % v11;
  v14 = (gdc::FallbackCollector *)&a2[14].u64[1];
  if (v10 > 0x1E
    || ((v15 = vcvtmd_s64_f64((double)v13 / (double)v11), v15 >= 0) ? (v16 = v15) : (v16 = -v15), v16 > 0x7F))
  {
    LOBYTE(v15) = 0;
    LOBYTE(v10) = 0;
    v17 = 0;
    if (*(_BYTE *)v14)
      goto LABEL_8;
    goto LABEL_7;
  }
  v47.i64[0] = ((v13 + v11) % v11) | ((unint64_t)((v13 + v11) % v11) << 16);
  v47.i64[1] = ((v12 + v11) % v11) | ((unint64_t)((v12 + v11) % v11) << 16);
  v48.i64[0] = 0xFFFF0000FFFFLL;
  v48.i64[1] = 0xFFFF0000FFFFLL;
  v49 = (int64x2_t)vandq_s8(v47, v48);
  v50 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64(v49, 8uLL), (int8x16_t)v49) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
  v51 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v50, 4uLL), (int8x16_t)v50) & __PAIR128__(0xFF0FFF0FFF0FFF0FLL, 0xFF0FFF0FFF0FFF0FLL);
  v48.i64[0] = 0x3333333333333333;
  v48.i64[1] = 0x3333333333333333;
  v52 = vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v51, 2uLL), (int8x16_t)v51), v48);
  v53 = (int8x16_t)vshlq_u64((uint64x2_t)v52, (uint64x2_t)xmmword_19FFB2DB0);
  v52.i64[1] *= 2;
  v54 = (int64x2_t)vandq_s8(vorrq_s8(v53, v52), (int8x16_t)xmmword_19FFB2DC0);
  v17 = vorrq_s8((int8x16_t)v54, (int8x16_t)vdupq_laneq_s64(v54, 1)).u64[0];
  if (!*(_BYTE *)v14)
LABEL_7:
    *(_BYTE *)v14 = 1;
LABEL_8:
  a2[15].i64[0] = v17;
  a2[15].i8[8] = v10;
  a2[15].i8[9] = v15;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  __p = 0;
  v59 = 0;
  v60 = 0;
  v18 = *(unsigned __int16 *)(a3 + 8);
  v19 = (_QWORD *)a2[29].i64[0];
  v20 = (unsigned __int16 *)v19[10];
  v21 = (unsigned __int16 *)v19[11];
  if (v20 != v21)
  {
    while (*v20 != v18)
    {
      v20 += 8;
      if (v20 == v21)
        goto LABEL_14;
    }
  }
  if (v20 == v21)
LABEL_14:
    v22 = 0;
  else
    v22 = (const gdc::LayerDataRequestKey *)*((_QWORD *)v20 + 1);
  v23 = (unsigned __int16 *)v19[5];
  v24 = (unsigned __int16 *)v19[4];
  if (v24 != v23)
  {
    while (*v24 != v18)
      v24 += 8;
  }
  v25 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v24 + 1) + 104))(*((_QWORD *)v24 + 1));
  *(_QWORD *)&v64 = &off_1E42C6F00;
  *((_QWORD *)&v64 + 1) = md::TileAdjustmentHelpers::dataKeyForTile;
  v65 = &v64;
  md::TileAdjustmentHelpers::getFallbackDataForTile(a2 + 21, v18, v61, v22, (uint64_t)&v64, (uint64_t)v14);
  v26 = v65;
  if (v65 == &v64)
  {
    v27 = 4;
    v26 = &v64;
  }
  else
  {
    if (!v65)
      goto LABEL_23;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_23:
  v55[0] = 255;
  v56 = 0;
  v57 = 0;
  if ((v25 & 0xFF00) != 0)
    v28 = a4;
  else
    v28 = 0;
  gdc::FallbackCollector::collectFallbackData((uint64_t)v14, &__p, v25 != 0, v28, v55);
  gdc::FallbackCollector::end(v14, v29);
  v31 = __p;
  v30 = v59;
  std::vector<gdc::LayerDataRequestKey>::reserve(a1, ((char *)v59 - (_BYTE *)__p) >> 7);
  if (v31 != v30)
  {
    do
    {
      LOWORD(v64) = *(_WORD *)v31;
      *(_QWORD *)((char *)&v64 + 4) = *(_QWORD *)((char *)v31 + 4);
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v65, (uint64_t)(v31 + 3));
      v33 = v31[14];
      v32 = (std::__shared_weak_count *)v31[15];
      v68 = v33;
      v69 = v32;
      if (v32)
      {
        p_shared_owners = (unint64_t *)&v32->__shared_owners_;
        do
          v35 = __ldxr(p_shared_owners);
        while (__stxr(v35 + 1, p_shared_owners));
        v33 = v68;
      }
      v36 = *(_QWORD *)(a1 + 8);
      if (v36 >= *(_QWORD *)(a1 + 16))
      {
        v37 = std::vector<gdc::LayerDataRequestKey>::__push_back_slow_path<gdc::LayerDataRequestKey const&>((void **)a1, v33 + 16);
      }
      else
      {
        *(_BYTE *)v36 = *(_BYTE *)(v33 + 16);
        gdc::LayerDataKey::LayerDataKey(v36 + 8, v33 + 24);
        *(_BYTE *)(v36 + 96) = 0;
        if (*(_BYTE *)(v33 + 112))
        {
          *(_DWORD *)(v36 + 100) = *(_DWORD *)(v33 + 116);
          *(_BYTE *)(v36 + 96) = 1;
        }
        *(_QWORD *)(v36 + 104) = *(_QWORD *)(v33 + 120);
        v37 = (_BYTE *)(v36 + 112);
        *(_QWORD *)(a1 + 8) = v36 + 112;
      }
      *(_QWORD *)(a1 + 8) = v37;
      v38 = v69;
      if (v69)
      {
        v39 = (unint64_t *)&v69->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      if (v66 != v67)
        free(v66);
      v31 += 16;
    }
    while (v31 != v30);
    v30 = __p;
  }
  if (v30)
  {
    v41 = v59;
    v42 = v30;
    if (v59 != v30)
    {
      do
      {
        v43 = (std::__shared_weak_count *)*(v41 - 1);
        if (v43)
        {
          v44 = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v46 = (void *)*(v41 - 12);
        if (v46 != (void *)*(v41 - 10))
          free(v46);
        v41 -= 16;
      }
      while (v41 != v30);
      v42 = __p;
    }
    v59 = v30;
    operator delete(v42);
  }
}

void sub_19F3EF370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v4;
  va_list va;

  va_start(va, a4);
  std::vector<gdc::FallbackData>::~vector[abi:nn180100]((void **)va);
  std::vector<gdc::LayerDataRequestKey>::~vector[abi:nn180100](v4);
  _Unwind_Resume(a1);
}

void std::vector<gdc::LayerDataRequestKey>::__insert_with_size[abi:nn180100]<std::__wrap_iter<gdc::LayerDataRequestKey const*>,std::__wrap_iter<gdc::LayerDataRequestKey const*>>(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v63;
  uint64_t v64;
  void **v65;
  void **v66;
  void **v67;
  uint64_t v68;

  if (a5 < 1)
    return;
  v5 = a5;
  v6 = a3;
  v7 = (char *)*a1;
  v8 = (unint64_t)a1[1];
  v9 = (a2 - (uint64_t)*a1) / 112;
  v10 = (uint64_t)*a1 + 112 * v9;
  v11 = a1[2];
  v68 = v9;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v11[-v8] >> 4) < a5)
  {
    v12 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8 - (_QWORD)v7) >> 4);
    if (v12 > 0x249249249249249)
      abort();
    v13 = 0x6DB6DB6DB6DB6DB7 * ((v11 - v7) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x124924924924924)
      v14 = 0x249249249249249;
    else
      v14 = v12;
    v65 = a1;
    v60 = v14;
    if (v14)
    {
      if (v14 > 0x249249249249249)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v15 = (char *)operator new(112 * v14);
      v9 = v68;
    }
    else
    {
      v15 = 0;
    }
    v24 = 0;
    v63 = v15;
    v25 = &v15[112 * v9];
    v58 = &v25[112 * v5];
    do
    {
      v26 = v6 + v24;
      v27 = &v25[v24];
      v25[v24] = *(_BYTE *)(v6 + v24);
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v25[v24 + 8], v6 + v24 + 8);
      v25[v24 + 96] = 0;
      if (*(_BYTE *)(v6 + v24 + 96))
      {
        *((_DWORD *)v27 + 25) = *(_DWORD *)(v26 + 100);
        v27[96] = 1;
      }
      *((_QWORD *)v27 + 13) = *(_QWORD *)(v26 + 104);
      v24 += 112;
    }
    while (112 * v5 != v24);
    v28 = 112 * v60;
    v30 = v65;
    v29 = v68;
    v31 = (char *)*v65;
    v32 = v68 << 7;
    if (*v65 != (void *)v10)
    {
      v33 = v63;
      v34 = v7;
      v35 = 112 * v68;
      do
      {
        v36 = &v33[v35];
        v37 = &v34[v35];
        v33[v35 - 112] = v34[v35 - 112];
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v33[v35 - 104], (uint64_t)&v34[v35 - 104]);
        v33[v35 - 16] = 0;
        if (v34[v35 - 16])
        {
          *((_DWORD *)v36 - 3) = *((_DWORD *)v37 - 3);
          *(v36 - 16) = 1;
        }
        *((_QWORD *)v36 - 1) = *((_QWORD *)v37 - 1);
        v34 -= 112;
        v33 -= 112;
      }
      while (&v34[v35] != v31);
      v29 = v68;
      v25 = &v33[112 * v68];
      v30 = v65;
      v32 = v68 << 7;
      v28 = 112 * v60;
    }
    v38 = &v63[v28];
    v39 = (char *)v30[1];
    v40 = v58;
    if (v39 != (char *)v10)
    {
      v41 = v32 - 16 * v29;
      v42 = &v63[112 * v5];
      do
      {
        v43 = &v7[v41];
        v44 = &v42[v41];
        v42[v41] = v7[v41];
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v42[v41 + 8], (uint64_t)&v7[v41 + 8]);
        v42[v41 + 96] = 0;
        if (v7[v41 + 96])
        {
          *((_DWORD *)v44 + 25) = *((_DWORD *)v43 + 25);
          v44[96] = 1;
        }
        *((_QWORD *)v44 + 13) = *((_QWORD *)v43 + 13);
        v7 += 112;
        v42 += 112;
      }
      while (v43 + 112 != v39);
      v40 = &v42[v41];
      v10 = (uint64_t)v30[1];
    }
    v45 = *v30;
    *v30 = v25;
    v30[1] = v40;
    v30[2] = v38;
    while ((void *)v10 != v45)
    {
      if (*(_BYTE *)(v10 - 16))
        *(_BYTE *)(v10 - 16) = 0;
      v46 = *(void **)(v10 - 96);
      if (v46 != *(void **)(v10 - 80))
        free(v46);
      v10 -= 112;
    }
    if (v45)
      operator delete(v45);
    return;
  }
  v16 = v8 - v10;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8 - v10) >> 4) >= a5)
  {
    v18 = a3 + 112 * a5;
    v23 = (char *)a1[1];
LABEL_48:
    v47 = v10 + 112 * v5;
    v48 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v23[-v47] >> 4);
    v49 = (unint64_t)&v23[-112 * v5];
    v50 = v23;
    if (v49 < v8)
    {
      v59 = v47;
      v61 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v23[-v47] >> 4);
      v64 = v18;
      v67 = a1;
      v51 = 0;
      v52 = &v7[112 * v9 + 16 * ((uint64_t)&v23[-v47] >> 4)];
      do
      {
        v53 = v49 + v51;
        v54 = &v23[v51];
        v23[v51] = *(_BYTE *)(v49 + v51);
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v23[v51 + 8], v49 + v51 + 8);
        v23[v51 + 96] = 0;
        if (*(_BYTE *)(v49 + v51 + 96))
        {
          *((_DWORD *)v54 + 25) = *(_DWORD *)&v52[v51 + 100];
          v54[96] = 1;
        }
        *((_QWORD *)v54 + 13) = *(_QWORD *)(v53 + 104);
        v51 += 112;
      }
      while (v53 + 112 < v8);
      v50 = &v23[v51];
      a1 = v67;
      v9 = v68;
      v48 = v61;
      v18 = v64;
      v47 = v59;
    }
    a1[1] = v50;
    if (v23 != (char *)v47)
    {
      v55 = (uint64_t)(v23 - 112);
      v56 = 112 * v48;
      v57 = (uint64_t)&v7[112 * v9 - 112];
      do
      {
        v55 = gdc::LayerDataRequestKey::operator=(v55, v57 + v56) - 112;
        v56 -= 112;
      }
      while (v56);
    }
    for (; v6 != v18; v10 += 112)
    {
      gdc::LayerDataRequestKey::operator=(v10, v6);
      v6 += 112;
    }
    return;
  }
  v18 = a3 + 16 * ((uint64_t)(v8 - v10) >> 4);
  if (v18 == a4)
  {
    v23 = (char *)a1[1];
  }
  else
  {
    v66 = a1;
    v19 = 0;
    do
    {
      v20 = v18;
      v21 = v18 + v19;
      v22 = v8 + v19;
      *(_BYTE *)(v8 + v19) = *(_BYTE *)v21;
      gdc::LayerDataKey::LayerDataKey(v8 + v19 + 8, v21 + 8);
      *(_BYTE *)(v8 + v19 + 96) = 0;
      if (*(_BYTE *)(v21 + 96))
      {
        *(_DWORD *)(v22 + 100) = *(_DWORD *)(v21 + 100);
        *(_BYTE *)(v22 + 96) = 1;
      }
      *(_QWORD *)(v22 + 104) = *(_QWORD *)(v21 + 104);
      v19 += 112;
      v18 = v20;
    }
    while (v21 + 112 != a4);
    v23 = (char *)(v8 + v19);
    a1 = v66;
    v9 = v68;
    v16 = v8 - v10;
    v5 = a5;
  }
  a1[1] = v23;
  if (v16 >= 1)
    goto LABEL_48;
}

void std::__tree<std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>,std::__map_value_compare<gdc::LayerDataRequestKey,std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>,std::less<gdc::LayerDataRequestKey>,true>,std::allocator<std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>>>::destroy(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  if (a1)
  {
    std::__tree<std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>,std::__map_value_compare<gdc::LayerDataRequestKey,std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>,std::less<gdc::LayerDataRequestKey>,true>,std::allocator<std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>>>::destroy(*a1);
    std::__tree<std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>,std::__map_value_compare<gdc::LayerDataRequestKey,std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>,std::less<gdc::LayerDataRequestKey>,true>,std::allocator<std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>>>::destroy(a1[1]);
    v2 = a1[18];
    if (v2)
    {
      v3 = a1[19];
      v4 = (void *)a1[18];
      if (v3 != v2)
      {
        do
        {
          if (*(_BYTE *)(v3 - 16))
            *(_BYTE *)(v3 - 16) = 0;
          v5 = *(void **)(v3 - 96);
          if (v5 != *(void **)(v3 - 80))
            free(v5);
          v3 -= 112;
        }
        while (v3 != v2);
        v4 = (void *)a1[18];
      }
      a1[19] = v2;
      operator delete(v4);
    }
    if (*((_BYTE *)a1 + 128))
      *((_BYTE *)a1 + 128) = 0;
    v6 = (void *)a1[6];
    if (v6 != (void *)a1[8])
      free(v6);
    operator delete(a1);
  }
}

uint64_t gdc::LayerDataRequestKey::operator=(uint64_t a1, uint64_t a2)
{
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 *v16;
  _OWORD *v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char *v27;
  __int128 *v28;
  _OWORD *v29;
  unint64_t v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  char *v35;
  uint64_t v36;
  char v37;
  int v38;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  if (a1 != a2)
  {
    v4 = (char *)(a1 + 48);
    v5 = *(void **)(a1 + 16);
    if (v5 != *(void **)(a1 + 32))
      free(v5);
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v4;
    *(_QWORD *)(a1 + 40) = 32;
    v6 = *(char **)(a2 + 16);
    v7 = *(char **)(a2 + 24);
    v8 = v7 - v6;
    if ((unint64_t)(v7 - v6) < 0x21)
    {
LABEL_25:
      if (v6 == v7)
      {
LABEL_43:
        *(_QWORD *)(a1 + 24) = &v4[v8];
        goto LABEL_44;
      }
      if (v8 < 8)
      {
        v27 = v4;
        goto LABEL_41;
      }
      if ((unint64_t)(v4 - v6) < 0x20)
      {
        v27 = v4;
        goto LABEL_41;
      }
      if (v8 >= 0x20)
      {
        v26 = v8 & 0xFFFFFFFFFFFFFFE0;
        v28 = (__int128 *)(v6 + 16);
        v29 = v4 + 16;
        v30 = v8 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v31 = *v28;
          *(v29 - 1) = *(v28 - 1);
          *v29 = v31;
          v28 += 2;
          v29 += 2;
          v30 -= 32;
        }
        while (v30);
        if (v8 == v26)
          goto LABEL_42;
        if ((v8 & 0x18) == 0)
        {
          v6 += v26;
          v27 = &v4[v26];
          goto LABEL_41;
        }
      }
      else
      {
        v26 = 0;
      }
      v32 = v8 & 0xFFFFFFFFFFFFFFF8;
      v27 = &v4[v8 & 0xFFFFFFFFFFFFFFF8];
      v33 = v26 - (v8 & 0xFFFFFFFFFFFFFFF8);
      v34 = (uint64_t *)&v6[v26];
      v35 = &v4[v26];
      do
      {
        v36 = *v34++;
        *(_QWORD *)v35 = v36;
        v35 += 8;
        v33 += 8;
      }
      while (v33);
      if (v8 == v32)
        goto LABEL_42;
      v6 += v32;
      do
      {
LABEL_41:
        v37 = *v6++;
        *v27++ = v37;
      }
      while (v6 != v7);
LABEL_42:
      v4 = *(char **)(a1 + 24);
      goto LABEL_43;
    }
    if (v8 <= 0x40)
      v9 = 64;
    else
      v9 = v7 - v6;
    v10 = (char *)malloc_type_malloc(v9, 0x100004077774924uLL);
    v4 = v10;
    v11 = *(char **)(a1 + 16);
    v12 = *(char **)(a1 + 24);
    if (v11 == v12)
    {
LABEL_24:
      *(_QWORD *)(a1 + 16) = v10;
      *(_QWORD *)(a1 + 24) = v10;
      *(_QWORD *)(a1 + 40) = v9;
      goto LABEL_25;
    }
    v13 = v12 - v11;
    if ((unint64_t)(v12 - v11) < 8)
    {
      v14 = v10;
    }
    else
    {
      v14 = v10;
      if ((unint64_t)(v10 - v11) >= 0x20)
      {
        if (v13 < 0x20)
        {
          v15 = 0;
LABEL_18:
          v20 = v13 & 0xFFFFFFFFFFFFFFF8;
          v14 = &v10[v13 & 0xFFFFFFFFFFFFFFF8];
          v21 = v15 - (v13 & 0xFFFFFFFFFFFFFFF8);
          v22 = (uint64_t *)&v11[v15];
          v23 = &v10[v15];
          do
          {
            v24 = *v22++;
            *(_QWORD *)v23 = v24;
            v23 += 8;
            v21 += 8;
          }
          while (v21);
          if (v13 == v20)
            goto LABEL_24;
          v11 += v20;
          goto LABEL_23;
        }
        v15 = v13 & 0xFFFFFFFFFFFFFFE0;
        v16 = (__int128 *)(v11 + 16);
        v17 = v10 + 16;
        v18 = v13 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v19 = *v16;
          *(v17 - 1) = *(v16 - 1);
          *v17 = v19;
          v16 += 2;
          v17 += 2;
          v18 -= 32;
        }
        while (v18);
        if (v13 == v15)
          goto LABEL_24;
        if ((v13 & 0x18) != 0)
          goto LABEL_18;
        v11 += v15;
        v14 = &v10[v15];
      }
    }
    do
    {
LABEL_23:
      v25 = *v11++;
      *v14++ = v25;
    }
    while (v11 != v12);
    goto LABEL_24;
  }
LABEL_44:
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v38 = *(unsigned __int8 *)(a1 + 96);
  if (*(_BYTE *)(a2 + 96))
  {
    *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
    if (!v38)
      *(_BYTE *)(a1 + 96) = 1;
  }
  else if (*(_BYTE *)(a1 + 96))
  {
    *(_BYTE *)(a1 + 96) = 0;
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

void std::vector<gdc::LayerDataRequestKey>::reserve(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  void *v13;

  v2 = *(char **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL)
      abort();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 112 * a2;
    v6 = (char *)operator new(112 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v4[v9];
        v8[v9 - 112] = v4[v9 - 112];
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v8[v9 - 104], (uint64_t)&v4[v9 - 104]);
        v8[v9 - 16] = 0;
        if (v4[v9 - 16])
        {
          *((_DWORD *)v10 - 3) = *((_DWORD *)v11 - 3);
          *(v10 - 16) = 1;
        }
        *((_QWORD *)v10 - 1) = *((_QWORD *)v11 - 1);
        v9 -= 112;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v12 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v12 != v2)
      {
        if (*(v12 - 16))
          *(v12 - 16) = 0;
        v13 = (void *)*((_QWORD *)v12 - 12);
        if (v13 != *((void **)v12 - 10))
          free(v13);
        v12 -= 112;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

void gdc::FallbackData::~FallbackData(gdc::FallbackData *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5 != *((void **)this + 6))
    free(v5);
}

void **std::vector<gdc::FallbackData>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v8 = (void *)*((_QWORD *)v3 - 12);
        if (v8 != *((void **)v3 - 10))
          free(v8);
        v3 -= 128;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void md::DrapingLogic::_dataInStore(gdc::LayerDataStore *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int8 *a4, int a5)
{
  __int16 v5;
  const gdc::LayerDataRequestKey *v8;
  int v9;
  int v10;
  _OWORD *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  _OWORD *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  __int128 *v22;
  _OWORD *v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  _BYTE *v33;
  __int128 *v34;
  _OWORD *v35;
  unint64_t v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unsigned __int8 v51[8];
  __int16 v52;
  void *v53;
  _OWORD *v54;
  _OWORD *v55;
  uint64_t v56;
  _OWORD v57[3];
  char v58;
  int v59;
  uint64_t v60;
  __int128 v61;
  void *v62;
  char *v63;
  void *v64;
  __int128 v65;
  char v66;
  int v67;
  uint64_t v68;
  int32x2_t v69;
  int v70;
  int v71;
  uint64_t v72;

  v5 = a5;
  v72 = *MEMORY[0x1E0C80C00];
  if (a2 != a3)
  {
    while (*a2 != a5)
    {
      a2 += 8;
      if (a2 == a3)
        goto LABEL_7;
    }
  }
  if (a2 == a3)
LABEL_7:
    v8 = 0;
  else
    v8 = (const gdc::LayerDataRequestKey *)*((_QWORD *)a2 + 1);
  *(int32x2_t *)&v61 = vrev64_s32(*(int32x2_t *)(a4 + 4));
  v9 = *a4;
  DWORD2(v61) = a4[1];
  HIDWORD(v61) = v9;
  gdc::LayerDataRequestKey::LayerDataRequestKey(v51, 0, a5, (int *)&v61, 4);
  gdc::LayerDataStore::get(a1, v8, v51);
  if (!*(_QWORD *)a1)
  {
    v69 = vrev64_s32(*(int32x2_t *)(a4 + 4));
    v10 = *a4;
    v70 = a4[1];
    v71 = v10;
    gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v61, 1u, v5, (int *)&v69, 4);
    v51[0] = v61;
    v52 = WORD4(v61);
    v11 = v57;
    if (v53 != v55)
      free(v53);
    v53 = v57;
    v54 = v57;
    v55 = v57;
    v56 = 32;
    v12 = (char *)v62;
    v13 = v63;
    v14 = v63 - (_BYTE *)v62;
    if ((unint64_t)(v63 - (_BYTE *)v62) < 0x21)
    {
LABEL_37:
      if (v12 == v13)
      {
LABEL_55:
        v54 = (_OWORD *)((char *)v11 + v14);
        v57[2] = v65;
        if (v66)
        {
          if (!v58)
            v58 = 1;
          v59 = v67;
          v60 = v68;
          v66 = 0;
        }
        else
        {
          if (v58)
            v58 = 0;
          v60 = v68;
        }
        if (v62 != v64)
          free(v62);
        gdc::LayerDataStore::get((gdc::LayerDataStore *)&v61, v8, v51);
        v44 = v61;
        v61 = 0uLL;
        v45 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
        *(_OWORD *)a1 = v44;
        if (v45)
        {
          p_shared_owners = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(p_shared_owners);
          while (__stlxr(v47 - 1, p_shared_owners));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
        if (*((_QWORD *)&v61 + 1))
        {
          v49 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        goto LABEL_9;
      }
      if (v14 < 8)
      {
        v33 = v11;
        goto LABEL_53;
      }
      if ((unint64_t)((char *)v11 - v12) < 0x20)
      {
        v33 = v11;
        goto LABEL_53;
      }
      if (v14 >= 0x20)
      {
        v32 = v14 & 0xFFFFFFFFFFFFFFE0;
        v34 = (__int128 *)(v12 + 16);
        v35 = v11 + 1;
        v36 = v14 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v37 = *v34;
          *(v35 - 1) = *(v34 - 1);
          *v35 = v37;
          v34 += 2;
          v35 += 2;
          v36 -= 32;
        }
        while (v36);
        if (v14 == v32)
          goto LABEL_54;
        if ((v14 & 0x18) == 0)
        {
          v12 += v32;
          v33 = (char *)v11 + v32;
          goto LABEL_53;
        }
      }
      else
      {
        v32 = 0;
      }
      v38 = v14 & 0xFFFFFFFFFFFFFFF8;
      v33 = (char *)v11 + (v14 & 0xFFFFFFFFFFFFFFF8);
      v39 = v32 - (v14 & 0xFFFFFFFFFFFFFFF8);
      v40 = (uint64_t *)&v12[v32];
      v41 = (_QWORD *)((char *)v11 + v32);
      do
      {
        v42 = *v40++;
        *v41++ = v42;
        v39 += 8;
      }
      while (v39);
      if (v14 == v38)
        goto LABEL_54;
      v12 += v38;
      do
      {
LABEL_53:
        v43 = *v12++;
        *v33++ = v43;
      }
      while (v12 != v13);
LABEL_54:
      v11 = v54;
      goto LABEL_55;
    }
    if (v14 <= 0x40)
      v15 = 64;
    else
      v15 = v63 - (_BYTE *)v62;
    v16 = malloc_type_malloc(v15, 0x100004077774924uLL);
    v11 = v16;
    v17 = (char *)v53;
    v18 = (char *)v54;
    if (v53 == v54)
    {
LABEL_36:
      v53 = v16;
      v54 = v16;
      v56 = v15;
      goto LABEL_37;
    }
    v19 = (char *)v54 - (_BYTE *)v53;
    if ((unint64_t)((char *)v54 - (_BYTE *)v53) < 8)
    {
      v20 = v16;
    }
    else
    {
      v20 = v16;
      if ((unint64_t)((char *)v16 - (_BYTE *)v53) >= 0x20)
      {
        if (v19 < 0x20)
        {
          v21 = 0;
LABEL_30:
          v26 = v19 & 0xFFFFFFFFFFFFFFF8;
          v20 = (char *)v16 + (v19 & 0xFFFFFFFFFFFFFFF8);
          v27 = v21 - (v19 & 0xFFFFFFFFFFFFFFF8);
          v28 = (uint64_t *)&v17[v21];
          v29 = (_QWORD *)((char *)v16 + v21);
          do
          {
            v30 = *v28++;
            *v29++ = v30;
            v27 += 8;
          }
          while (v27);
          if (v19 == v26)
            goto LABEL_36;
          v17 += v26;
          goto LABEL_35;
        }
        v21 = v19 & 0xFFFFFFFFFFFFFFE0;
        v22 = (__int128 *)((char *)v53 + 16);
        v23 = v16 + 1;
        v24 = v19 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v25 = *v22;
          *(v23 - 1) = *(v22 - 1);
          *v23 = v25;
          v22 += 2;
          v23 += 2;
          v24 -= 32;
        }
        while (v24);
        if (v19 == v21)
          goto LABEL_36;
        if ((v19 & 0x18) != 0)
          goto LABEL_30;
        v17 += v21;
        v20 = (char *)v16 + v21;
      }
    }
    do
    {
LABEL_35:
      v31 = *v17++;
      *v20++ = v31;
    }
    while (v17 != v18);
    goto LABEL_36;
  }
LABEL_9:
  if (v58)
    v58 = 0;
  if (v53 != v55)
    free(v53);
}

void sub_19F3F0314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  if (a25 != a27)
    free(a25);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v35);
  if (a11 != a13)
    free(a11);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = (_QWORD *)(a1 + 16);
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *v4 = v9;
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *v4 = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_19F3F046C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1A1AF4D64](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1A1AF49E0](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1A1AF49EC](v13);
  return a1;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1A1AF49E0](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = a2 + a3;
    if ((*(_DWORD *)(v6 + 8) & 0xB0) == 0x20)
      v9 = v8;
    else
      v9 = a2;
    v10 = *(_DWORD *)(v6 + 144);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v10;
    }
    if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v7, a2, v9, v8, v6, (char)v10))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1A1AF49EC](v13);
  return a1;
}

void sub_19F3F059C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x1A1AF49EC](&a10);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AF4D64](a1 + 128);
  return a1;
}

uint64_t std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[2];
  int64_t v22;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (v22 >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:nn180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_19F3F07D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<std::__hash_node<md::FoundationOverlayPair,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<md::FoundationOverlayPair,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      if (*(_BYTE *)(v2 + 224))
        *(_BYTE *)(v2 + 224) = 0;
      v3 = *(void **)(v2 + 144);
      if (v3 != *(void **)(v2 + 160))
        free(v3);
      if (*(_BYTE *)(v2 + 112))
        *(_BYTE *)(v2 + 112) = 0;
      v4 = *(void **)(v2 + 32);
      if (v4 != *(void **)(v2 + 48))
        free(v4);
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t std::__throw_bad_optional_access[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_optional_access was thrown in -fno-exceptions mode");
  return std::vector<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem>>::emplace_back<md::overlayComponents::VectorOverlay &,md::DrapingStyle>();
}

void std::vector<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem>>::emplace_back<md::overlayComponents::VectorOverlay &,md::DrapingStyle>(void **a1, uint64_t a2, __int128 *a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  char *v57;

  v6 = (char *)a1[1];
  v7 = (char *)a1[2];
  if (v6 < v7)
  {
    *(_OWORD *)v6 = *(_OWORD *)a2;
    v8 = *(_QWORD *)(a2 + 16);
    *((_QWORD *)v6 + 2) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = *(_QWORD *)(a2 + 32);
    *((_QWORD *)v6 + 3) = *(_QWORD *)(a2 + 24);
    *((_QWORD *)v6 + 4) = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = *(_QWORD *)(a2 + 48);
    *((_QWORD *)v6 + 5) = *(_QWORD *)(a2 + 40);
    *((_QWORD *)v6 + 6) = v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v17 = *(_QWORD *)(a2 + 64);
    *((_QWORD *)v6 + 7) = *(_QWORD *)(a2 + 56);
    *((_QWORD *)v6 + 8) = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = *(_QWORD *)(a2 + 80);
    *((_QWORD *)v6 + 9) = *(_QWORD *)(a2 + 72);
    *((_QWORD *)v6 + 10) = v20;
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v23 = *(_QWORD *)(a2 + 88);
    v6[96] = *(_BYTE *)(a2 + 96);
    *((_QWORD *)v6 + 11) = v23;
    v24 = *a3;
    *(_OWORD *)(v6 + 116) = *(__int128 *)((char *)a3 + 12);
    *(_OWORD *)(v6 + 104) = v24;
    v25 = v6 + 136;
    goto LABEL_50;
  }
  v26 = 0xF0F0F0F0F0F0F0F1 * ((v6 - (_BYTE *)*a1) >> 3);
  v27 = v26 + 1;
  if (v26 + 1 > 0x1E1E1E1E1E1E1E1)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v28 = 0xF0F0F0F0F0F0F0F1 * ((v7 - (_BYTE *)*a1) >> 3);
  if (2 * v28 > v27)
    v27 = 2 * v28;
  if (v28 >= 0xF0F0F0F0F0F0F0)
    v29 = 0x1E1E1E1E1E1E1E1;
  else
    v29 = v27;
  if (v29)
  {
    if (v29 > 0x1E1E1E1E1E1E1E1)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v30 = (char *)operator new(136 * v29);
  }
  else
  {
    v30 = 0;
  }
  v31 = &v30[136 * v26];
  *(_OWORD *)v31 = *(_OWORD *)a2;
  v32 = *(_QWORD *)(a2 + 16);
  *((_QWORD *)v31 + 2) = v32;
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = *(_QWORD *)(a2 + 32);
  *((_QWORD *)v31 + 3) = *(_QWORD *)(a2 + 24);
  *((_QWORD *)v31 + 4) = v35;
  if (v35)
  {
    v36 = (unint64_t *)(v35 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v38 = *(_QWORD *)(a2 + 48);
  *((_QWORD *)v31 + 5) = *(_QWORD *)(a2 + 40);
  *((_QWORD *)v31 + 6) = v38;
  if (v38)
  {
    v39 = (unint64_t *)(v38 + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v41 = *(_QWORD *)(a2 + 64);
  *((_QWORD *)v31 + 7) = *(_QWORD *)(a2 + 56);
  *((_QWORD *)v31 + 8) = v41;
  if (v41)
  {
    v42 = (unint64_t *)(v41 + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v44 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v31 + 9) = *(_QWORD *)(a2 + 72);
  *((_QWORD *)v31 + 10) = v44;
  if (v44)
  {
    v45 = (unint64_t *)(v44 + 8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v47 = &v30[136 * v29];
  *((_QWORD *)v31 + 11) = *(_QWORD *)(a2 + 88);
  v31[96] = *(_BYTE *)(a2 + 96);
  v48 = &v30[136 * v26];
  *(_OWORD *)(v48 + 104) = *a3;
  *(_OWORD *)(v48 + 116) = *(__int128 *)((char *)a3 + 12);
  v25 = v31 + 136;
  v49 = (char *)*a1;
  v50 = (char *)a1[1];
  if (v50 == *a1)
  {
    *a1 = v31;
    a1[1] = v25;
    a1[2] = v47;
    if (!v50)
      goto LABEL_50;
    goto LABEL_49;
  }
  v51 = 0;
  do
  {
    v52 = &v31[v51];
    v53 = &v50[v51];
    *(_OWORD *)(v52 - 136) = *(_OWORD *)&v50[v51 - 136];
    *((_QWORD *)v52 - 15) = *(_QWORD *)&v50[v51 - 120];
    *((_QWORD *)v53 - 16) = 0;
    *((_QWORD *)v53 - 15) = 0;
    *((_OWORD *)v52 - 7) = *(_OWORD *)&v50[v51 - 112];
    *((_QWORD *)v53 - 14) = 0;
    *((_QWORD *)v53 - 13) = 0;
    *((_OWORD *)v52 - 6) = *(_OWORD *)&v50[v51 - 96];
    v54 = *(_OWORD *)&v50[v51 - 80];
    *((_QWORD *)v53 - 12) = 0;
    *((_QWORD *)v53 - 11) = 0;
    *((_OWORD *)v52 - 5) = v54;
    *((_QWORD *)v53 - 10) = 0;
    *((_QWORD *)v53 - 9) = 0;
    *((_OWORD *)v52 - 4) = *(_OWORD *)&v50[v51 - 64];
    *((_QWORD *)v53 - 8) = 0;
    *((_QWORD *)v53 - 7) = 0;
    v55 = *(_QWORD *)&v50[v51 - 48];
    *(v52 - 40) = v50[v51 - 40];
    *((_QWORD *)v52 - 6) = v55;
    v56 = *(_OWORD *)&v50[v51 - 32];
    *(_OWORD *)(v52 - 20) = *(_OWORD *)&v50[v51 - 20];
    *((_OWORD *)v52 - 2) = v56;
    v51 -= 136;
  }
  while (&v50[v51] != v49);
  v50 = (char *)*a1;
  v57 = (char *)a1[1];
  *a1 = &v31[v51];
  a1[1] = v25;
  a1[2] = v47;
  while (v57 != v50)
    md::overlayComponents::VectorOverlay::~VectorOverlay((md::overlayComponents::VectorOverlay *)(v57 - 136));
  if (v50)
LABEL_49:
    operator delete(v50);
LABEL_50:
  a1[1] = v25;
}

void md::PolygonOverlayMeshBuilder::PolygonMeshes::~PolygonMeshes(md::PolygonOverlayMeshBuilder::PolygonMeshes *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v3 + 72);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = *(std::__shared_weak_count **)(v3 + 8);
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    MEMORY[0x1A1AF4E00](v3, 0x1020C408635837CLL);
  }
}

_QWORD *md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0::~$_0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;

  v2 = a1[16];
  if (v2)
  {
    v3 = a1[17];
    v4 = (void *)a1[16];
    if (v3 == v2)
    {
LABEL_17:
      a1[17] = v2;
      operator delete(v4);
      goto LABEL_18;
    }
    while (1)
    {
      v5 = *(std::__shared_weak_count **)(v3 - 8);
      if (!v5)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = *(std::__shared_weak_count **)(v3 - 72);
        if (v8)
        {
LABEL_10:
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_9:
        v8 = *(std::__shared_weak_count **)(v3 - 72);
        if (v8)
          goto LABEL_10;
      }
      v3 -= 80;
      if (v3 == v2)
      {
        v4 = (void *)a1[16];
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  v11 = a1[13];
  if (v11)
  {
    v12 = a1[14];
    v13 = (void *)a1[13];
    if (v12 != v11)
    {
      do
        md::overlayComponents::VectorOverlay::~VectorOverlay((md::overlayComponents::VectorOverlay *)(v12 - 136));
      while (v12 != v11);
      v13 = (void *)a1[13];
    }
    a1[14] = v11;
    operator delete(v13);
  }
  v14 = (std::__shared_weak_count *)a1[5];
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  v15 = (std::__shared_weak_count *)a1[3];
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  v16 = (std::__shared_weak_count *)a1[1];
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  return a1;
}

void **std::vector<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem>>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        md::overlayComponents::VectorOverlay::~VectorOverlay((md::overlayComponents::VectorOverlay *)(v3 - 136));
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **std::vector<md::Mesh>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_17:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
      if (!v5)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 9);
        if (v8)
        {
LABEL_10:
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_9:
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 9);
        if (v8)
          goto LABEL_10;
      }
      v3 -= 80;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_17;
      }
    }
  }
  return a1;
}

_QWORD *std::__function::__func<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E42C8FC0;
  md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0::~$_0(a1 + 1);
  return a1;
}

void std::__function::__func<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E42C8FC0;
  md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0::~$_0(a1 + 1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xA0uLL);
  *v2 = &off_1E42C8FC0;
  std::__compressed_pair_elem<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_19F3F0FB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42C8FC0;
  return std::__compressed_pair_elem<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0::~$_0((_QWORD *)(a1 + 8));
}

void std::__function::__func<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *a1)
{
  md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0::~$_0(a1 + 1);
  operator delete(a1);
}

void std::__function::__func<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  void *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t *v29;
  __int128 v30;
  unsigned __int8 v31;
  unint64_t v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t *v81;
  BOOL v82;
  std::chrono::steady_clock::time_point v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  _QWORD *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  __int128 v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unsigned __int8 v112;
  unsigned __int8 v113;
  uint64_t v114;
  _QWORD *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *shared_owners;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  char v131;
  char v132;
  char v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  _QWORD *shared_weak_owners;
  uint64_t v143;
  std::__shared_weak_count *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  char v150;
  char v151;
  double v152;
  void *v153;
  double v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  char *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;
  void (__cdecl *v172)(std::__shared_weak_count *__hidden);
  void (__cdecl *v173)(std::__shared_weak_count *__hidden);
  unint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  char *v179;
  unint64_t v180;
  gdc::DCEL *v181;
  uint64_t v182;
  size_t v183;
  char *v184;
  char *v185;
  unint64_t v186;
  unint64_t v187;
  _QWORD *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  NSObject *v194;
  uint64_t v195;
  void (__cdecl *v196)(std::__shared_weak_count *__hidden);
  void (__cdecl *v197)(std::__shared_weak_count *__hidden);
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  std::__shared_weak_count *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  void **v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  void **v209;
  uint64_t v210;
  void *v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  char *v215;
  unsigned __int8 v216;
  unsigned __int8 v217;
  uint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  _QWORD *v233;
  int v234;
  int v235;
  unint64_t v236;
  unint64_t v237;
  _QWORD *v238;
  _QWORD *v239;
  _QWORD *v240;
  int v241;
  int v242;
  _QWORD *v243;
  _QWORD *v244;
  unint64_t v245;
  unint64_t v246;
  _QWORD *v247;
  int v248;
  int v249;
  unint64_t v250;
  unint64_t v251;
  _BYTE *v252;
  _BYTE *v253;
  _QWORD *v254;
  int v255;
  int v256;
  _BYTE *v257;
  _BYTE *v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t v262;
  double v263;
  unint64_t v264;
  NSObject *v265;
  int v266;
  void **v267;
  void **v268;
  void *p_p;
  __int128 v270;
  __int128 *v271;
  uint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  uint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  unint64_t *v289;
  unint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  uint64_t v293;
  float v294;
  float v295;
  float v296;
  uint64_t v297;
  __int128 v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  float v308;
  float v309;
  float v310;
  _QWORD *v311;
  __int128 v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  unsigned __int8 v322;
  uint64_t v323;
  geo::read_write_lock *v324;
  const char *v325;
  malloc_zone_t *v326;
  uint64_t v327;
  geo::read_write_lock *v328;
  const char *v329;
  malloc_zone_t *v330;
  unsigned __int8 v331;
  uint64_t v332;
  geo::read_write_lock *v333;
  const char *v334;
  malloc_zone_t *v335;
  uint64_t v336;
  geo::read_write_lock *v337;
  const char *v338;
  malloc_zone_t *v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  int v343;
  uint64_t v344;
  unsigned __int8 v345;
  uint64_t v346;
  geo::read_write_lock *v347;
  const char *v348;
  malloc_zone_t *zone;
  uint64_t v350;
  geo::read_write_lock *v351;
  const char *v352;
  malloc_zone_t *v353;
  std::__shared_weak_count *v354;
  std::__shared_weak_count *v355;
  std::__shared_weak_count *v356;
  std::__shared_weak_count *v357;
  uint64_t *v358;
  uint64_t v359;
  unint64_t *v360;
  unint64_t v361;
  unint64_t *v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t *v368;
  unint64_t v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  unint64_t *p_shared_owners;
  unint64_t v374;
  std::__shared_weak_count *v375;
  std::__shared_weak_count *v376;
  std::__shared_weak_count *v377;
  std::__shared_weak_count *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v383;
  unsigned int v384;
  unsigned int v385;
  std::__shared_weak_count_vtbl *v386;
  __int128 v387;
  __int128 v388;
  uint64_t v389;
  uint64_t v390;
  __int128 v391;
  unsigned int v392;
  char v393[4];
  uint64_t v394;
  char v395[4];
  uint64_t v396;
  __int16 v397;
  uint64_t v398;
  __int16 v399;
  uint64_t v400;
  _QWORD v401[18];
  __int128 v402;
  uint64_t v403;
  std::__shared_weak_count *v404;
  uint64_t v405;
  __int128 v406;
  uint64_t v407;
  _BYTE v408[24];
  void *__p;
  std::__shared_weak_count *v410;
  char v411;
  __int128 v412;
  __int128 v413;
  uint64_t v414;
  int v415;
  char v416;
  __int16 v417;
  __int16 v418;
  __int16 v419;
  uint64_t v420;
  std::__shared_weak_count *v421;
  std::__shared_weak_count *v422;
  std::__shared_weak_count *v423;
  _BYTE v424[36];
  uint64_t v425;
  char v426;
  char v427;
  uint64_t v428;
  std::__shared_weak_count *v429;
  __int128 v430;
  __int128 v431;
  uint64_t v432;
  std::__shared_weak_count *v433;
  unint64_t v434;
  int v435;
  __int128 v436;
  __int128 *v437;
  void *v438;
  std::__shared_weak_count *v439;
  std::__shared_weak_count *v440;
  void **v441;
  _BYTE buf[24];
  _BYTE *v443;
  __int128 v444;
  uint64_t v445;
  __int128 v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  std::__shared_weak_count *v451;
  _QWORD *v452;
  _QWORD *v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unint64_t v458;
  unint64_t v459;
  unsigned __int8 v460;
  unsigned __int8 v461;
  uint64_t v462;
  _QWORD *v463;
  std::__shared_weak_count *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;

  v1 = a1;
  v467 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(v1 + 40);
      if (!v5 || (v6 = atomic_load((unsigned __int8 *)v5), v6 == 3))
      {
LABEL_505:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v374 = __ldaxr(p_shared_owners);
        while (__stlxr(v374 - 1, p_shared_owners));
        if (!v374)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v7 = *(std::__shared_weak_count **)(v5 + 32);
      if (v7 && (v8 = std::__shared_weak_count::lock(v7)) != 0)
      {
        v378 = v8;
        v9 = *(_QWORD *)(v5 + 24);
        v10 = *(std::__shared_weak_count **)(v5 + 48);
        if (!v10)
          goto LABEL_500;
      }
      else
      {
        v378 = 0;
        v9 = 0;
        v10 = *(std::__shared_weak_count **)(v5 + 48);
        if (!v10)
          goto LABEL_500;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (v11)
      {
        if (v9 && *(_QWORD *)(v5 + 40))
        {
          v375 = v11;
          v377 = v4;
          atomic_store(1u, (unsigned __int8 *)v5);
          +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)objc_msgSend(v12, "gglDevice") + 24))(&v407);

          v13 = *(std::__shared_weak_count **)(v1 + 32);
          if (v13)
          {
            v13 = std::__shared_weak_count::lock(v13);
            if (v13)
              v14 = *(_QWORD *)(v1 + 24);
            else
              v14 = 0;
          }
          else
          {
            v14 = 0;
          }
          v15 = *(_QWORD *)(v5 + 112);
          v16 = *(_QWORD *)(v5 + 120);
          v17 = 0xFCFCFCFCFCFCFCFDLL
              * ((uint64_t)(*(_QWORD *)(v1 + 120) - *(_QWORD *)(v1 + 112)) >> 3)
              * ((uint64_t)(*(_QWORD *)(v1 + 144) - *(_QWORD *)(v1 + 136)) >> 4);
          v18 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - v15) >> 4);
          v376 = v13;
          if (v17 <= v18)
          {
            if (v17 >= v18)
            {
              v19 = *(_QWORD *)(v5 + 120);
            }
            else
            {
              v19 = v15
                  + 0xF0F0F0F0F0F0F10
                  * ((uint64_t)(*(_QWORD *)(v1 + 120) - *(_QWORD *)(v1 + 112)) >> 3)
                  * ((uint64_t)(*(_QWORD *)(v1 + 144) - *(_QWORD *)(v1 + 136)) >> 4);
              while (v16 != v19)
              {
                v16 -= 80;
                std::__destroy_at[abi:nn180100]<md::ClientDrapedMeshes,0>(v16);
              }
              *(_QWORD *)(v5 + 120) = v19;
            }
          }
          else
          {
            std::vector<md::ClientDrapedMeshes>::__append((char **)(v5 + 112), v17 - v18);
            v19 = *(_QWORD *)(v5 + 120);
          }
          v4 = v377;
          if (v19 == *(_QWORD *)(v5 + 112))
          {
            atomic_store(2u, (unsigned __int8 *)v5);
            v355 = v376;
          }
          else
          {
            v20 = *(_QWORD *)(v1 + 136);
            if (*(_QWORD *)(v1 + 144) != v20)
            {
              v21 = 0;
              v385 = 0;
              v379 = v5;
              v381 = v14;
              v380 = v1;
              while (1)
              {
                v22 = v20 + 80 * v21;
                v23 = **(_QWORD ***)(*(_QWORD *)v22 + 64);
                v25 = v23[5];
                v24 = v23[6];
                v26 = v23[1];
                v27 = operator new(0xF8uLL);
                v28 = (v24 - v25) / v26;
                v27[1] = 0;
                v29 = v27 + 1;
                v27[2] = 0;
                v27[3] = &off_1E42B5748;
                *v27 = &off_1E42E0758;
                v27[4] = 16;
                *((_DWORD *)v27 + 10) = 1;
                v27[6] = 0;
                v27[7] = 0;
                v27[8] = 0;
                v27[9] = 16 * v28;
                v30 = 0uLL;
                *((_OWORD *)v27 + 5) = 0u;
                *((_OWORD *)v27 + 6) = 0u;
                v27[14] = 0;
                if ((v31 & 1) == 0)
                {
                  v30 = 0uLL;
                  if (v343)
                  {
                    v344 = operator new();
                    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v344, "GeoGL", 0xA3D02C1100000005);
                    v30 = 0uLL;
                  }
                }
                v27[15] = ggl::Allocator::instance(void)::alloc;
                v27[16] = 0;
                *((_OWORD *)v27 + 11) = v30;
                *((_OWORD *)v27 + 12) = v30;
                v27[26] = 0;
                v27[27] = -1;
                *((_OWORD *)v27 + 10) = v30;
                *((_OWORD *)v27 + 9) = xmmword_19FFB2DD0;
                *((_DWORD *)v27 + 34) = 0;
                v27[3] = &off_1E42B84A0;
                v27[29] = "TempFoundation Verts";
                v27[30] = &ggl::Draping::foundationVboReflection;
                v27[28] = &unk_1E42B84C0;
                v438 = v27 + 3;
                v439 = (std::__shared_weak_count *)v27;
                v422 = (std::__shared_weak_count *)(v20 + 80 * v21);
                v423 = (std::__shared_weak_count *)(v27 + 3);
                *(_QWORD *)v424 = v27;
                do
                  v32 = __ldxr(v29);
                while (__stxr(v32 + 1, v29));
                *(_QWORD *)&v424[8] = v28;
                *(_QWORD *)&v424[16] = &v436;
                v443 = 0;
                v33 = operator new(0x30uLL);
                *v33 = &off_1E42C9128;
                v33[1] = v22;
                v33[2] = v27 + 3;
                v33[3] = v27;
                v423 = 0;
                *(_QWORD *)v424 = 0;
                *((_OWORD *)v33 + 2) = *(_OWORD *)&v424[8];
                v443 = v33;
                v430 = 0uLL;
                (*(void (**)(uint64_t, _BYTE *, __int128 *))(*(_QWORD *)v407 + 16))(v407, buf, &v430);
                v34 = (std::__shared_weak_count *)*((_QWORD *)&v430 + 1);
                if (*((_QWORD *)&v430 + 1))
                {
                  v35 = (unint64_t *)(*((_QWORD *)&v430 + 1) + 8);
                  do
                    v36 = __ldaxr(v35);
                  while (__stlxr(v36 - 1, v35));
                  if (!v36)
                  {
                    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                    std::__shared_weak_count::__release_weak(v34);
                  }
                }
                v37 = v443;
                if (v443 == buf)
                  break;
                if (v443)
                {
                  v38 = 5;
LABEL_41:
                  (*(void (**)(void))(*v37 + 8 * v38))();
                }
                v39 = *(std::__shared_weak_count **)v424;
                if (*(_QWORD *)v424)
                {
                  v40 = (unint64_t *)(*(_QWORD *)v424 + 8);
                  do
                    v41 = __ldaxr(v40);
                  while (__stlxr(v41 - 1, v40));
                  if (!v41)
                  {
                    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                    std::__shared_weak_count::__release_weak(v39);
                  }
                }
                v42 = v438;
                v43 = v439;
                if (v439)
                {
                  v44 = (unint64_t *)&v439->__shared_owners_;
                  do
                    v45 = __ldxr(v44);
                  while (__stxr(v45 + 1, v44));
                }
                v46 = *(_QWORD *)(*(_QWORD *)v22 + 96);
                v47 = *(std::__shared_weak_count **)(*(_QWORD *)v22 + 104);
                v390 = v46;
                if (v47)
                {
                  v48 = (unint64_t *)&v47->__shared_owners_;
                  do
                    v49 = __ldxr(v48);
                  while (__stxr(v49 + 1, v48));
                }
                if ((v50 & 1) == 0
                {
                  if ((v345 & 1) == 0
                  {
                    ggl::MeshTyped<ggl::Draping::FoundationVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Draping::foundationVboReflection;
                  }
                  ggl::MeshTyped<ggl::Draping::FoundationVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Draping::FoundationVbo>::attributesReflection(void)::r;
                  *(_QWORD *)algn_1EE589CA8 = 1;
                }
                v444 = 0uLL;
                v443 = 0;
                LODWORD(v445) = 0;
                *(_QWORD *)&buf[8] = "TempFoundationMesh";
                *(_QWORD *)buf = &off_1E42BBC08;
                *(_QWORD *)&buf[16] = &unk_1E42BBC28;
                *(_QWORD *)&v446 = &ggl::MeshTyped<ggl::Draping::FoundationVbo>::typedReflection(void)::r;
                v447 = 0;
                v448 = 0;
                *((_QWORD *)&v446 + 1) = 0;
                {
                  v346 = operator new();
                  *(_QWORD *)(v346 + 16) = 0xA3D02C1100000005;
                  *(_QWORD *)(v346 + 24) = "GeoGL";
                  *(_OWORD *)(v346 + 32) = xmmword_19FFB2DE0;
                  *(_QWORD *)v346 = &off_1E42B5668;
                  *(_QWORD *)(v346 + 8) = "GeoGL";
                  *(_OWORD *)(v346 + 72) = 0u;
                  *(_OWORD *)(v346 + 88) = 0u;
                  *(_OWORD *)(v346 + 104) = 0u;
                  *(_OWORD *)(v346 + 120) = 0u;
                  *(_OWORD *)(v346 + 136) = 0u;
                  *(_OWORD *)(v346 + 152) = 0u;
                  *(_OWORD *)(v346 + 168) = 0u;
                  *(_OWORD *)(v346 + 184) = 0u;
                  *(_OWORD *)(v346 + 200) = 0u;
                  *(_OWORD *)(v346 + 216) = 0u;
                  *(_OWORD *)(v346 + 232) = 0u;
                  *(_QWORD *)(v346 + 248) = 0;
                  *(_OWORD *)(v346 + 56) = 0u;
                  v347 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v346 + 56), 0);
                  if ((_DWORD)v347)
                    geo::read_write_lock::logFailure(v347, (uint64_t)"initialization", v348);
                  zone = malloc_create_zone(0, 0);
                  *(_QWORD *)(v346 + 48) = zone;
                  malloc_set_zone_name(zone, "GeoGL");
                  *(_QWORD *)(v346 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                  ggl::Allocator::instance(void)::alloc = v346;
                }
                v450 = 0;
                v451 = 0;
                v449 = ggl::Allocator::instance(void)::alloc;
                v453 = 0;
                {
                  v350 = operator new();
                  *(_QWORD *)(v350 + 16) = 0xA3D02C1100000005;
                  *(_QWORD *)(v350 + 24) = "GeoGL";
                  *(_OWORD *)(v350 + 32) = xmmword_19FFB2DE0;
                  *(_QWORD *)v350 = &off_1E42B5668;
                  *(_QWORD *)(v350 + 8) = "GeoGL";
                  *(_OWORD *)(v350 + 72) = 0u;
                  *(_OWORD *)(v350 + 88) = 0u;
                  *(_OWORD *)(v350 + 104) = 0u;
                  *(_OWORD *)(v350 + 120) = 0u;
                  *(_OWORD *)(v350 + 136) = 0u;
                  *(_OWORD *)(v350 + 152) = 0u;
                  *(_OWORD *)(v350 + 168) = 0u;
                  *(_OWORD *)(v350 + 184) = 0u;
                  *(_OWORD *)(v350 + 200) = 0u;
                  *(_OWORD *)(v350 + 216) = 0u;
                  *(_OWORD *)(v350 + 232) = 0u;
                  *(_QWORD *)(v350 + 248) = 0;
                  *(_OWORD *)(v350 + 56) = 0u;
                  v351 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v350 + 56), 0);
                  if ((_DWORD)v351)
                    geo::read_write_lock::logFailure(v351, (uint64_t)"initialization", v352);
                  v353 = malloc_create_zone(0, 0);
                  *(_QWORD *)(v350 + 48) = v353;
                  malloc_set_zone_name(v353, "GeoGL");
                  *(_QWORD *)(v350 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                  ggl::Allocator::instance(void)::alloc = v350;
                }
                v455 = 0;
                v454 = ggl::Allocator::instance(void)::alloc;
                v452 = &v453;
                *(_QWORD *)buf = &off_1E42BE0F8;
                *(_QWORD *)&buf[16] = &unk_1E42BE118;
                *(_QWORD *)&v430 = v42;
                *((_QWORD *)&v430 + 1) = v43;
                if (v43)
                {
                  v53 = (unint64_t *)&v43->__shared_owners_;
                  do
                    v54 = __ldxr(v53);
                  while (__stxr(v54 + 1, v53));
                }
                std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>((uint64_t)&v446 + 8, (uint64_t *)&v430, (uint64_t *)&v431, 1uLL);
                v55 = (std::__shared_weak_count *)*((_QWORD *)&v430 + 1);
                if (*((_QWORD *)&v430 + 1))
                {
                  v56 = (unint64_t *)(*((_QWORD *)&v430 + 1) + 8);
                  do
                    v57 = __ldaxr(v56);
                  while (__stlxr(v57 - 1, v56));
                  if (!v57)
                  {
                    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                    std::__shared_weak_count::__release_weak(v55);
                  }
                }
                if (v47)
                {
                  v58 = (unint64_t *)&v47->__shared_owners_;
                  do
                    v59 = __ldxr(v58);
                  while (__stxr(v59 + 1, v58));
                }
                v60 = v451;
                v450 = v390;
                v451 = v47;
                v61 = v381;
                if (v60)
                {
                  v62 = (unint64_t *)&v60->__shared_owners_;
                  do
                    v63 = __ldaxr(v62);
                  while (__stlxr(v63 - 1, v62));
                  if (!v63)
                  {
                    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                    std::__shared_weak_count::__release_weak(v60);
                  }
                }
                *(_QWORD *)buf = &off_1E42BC9E0;
                *(_QWORD *)&buf[16] = &unk_1E42BCA00;
                if (v47)
                {
                  v64 = (unint64_t *)&v47->__shared_owners_;
                  do
                    v65 = __ldaxr(v64);
                  while (__stlxr(v65 - 1, v64));
                  if (!v65)
                  {
                    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                    std::__shared_weak_count::__release_weak(v47);
                  }
                }
                if (v43)
                {
                  v66 = (unint64_t *)&v43->__shared_owners_;
                  do
                    v67 = __ldaxr(v66);
                  while (__stlxr(v67 - 1, v66));
                  if (!v67)
                  {
                    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                    std::__shared_weak_count::__release_weak(v43);
                  }
                }
                v68 = v20 + 80 * v21;
                v69 = *(uint64_t **)(v68 + 64);
                v70 = v69[2];
                v388 = *(_OWORD *)(v68 + 16);
                v391 = v436;
                ggl::Mesh::Mesh((uint64_t)v401, (uint64_t)buf);
                v401[0] = &off_1E42BC9E0;
                v401[2] = &unk_1E42BCA00;
                v402 = v388;
                v403 = *v69;
                v71 = (std::__shared_weak_count *)v69[1];
                v404 = v71;
                if (v71)
                {
                  v72 = (unint64_t *)&v71->__shared_owners_;
                  do
                    v73 = __ldxr(v72);
                  while (__stxr(v73 + 1, v72));
                }
                v405 = v70;
                v406 = v391;
                ggl::Mesh::~Mesh((ggl::Mesh *)buf);
                v74 = v439;
                if (v439)
                {
                  v75 = (unint64_t *)&v439->__shared_owners_;
                  do
                    v76 = __ldaxr(v75);
                  while (__stlxr(v76 - 1, v75));
                  if (!v76)
                  {
                    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                    std::__shared_weak_count::__release_weak(v74);
                  }
                }
                v77 = *(_QWORD *)(v1 + 112);
                if (*(_QWORD *)(v1 + 120) != v77)
                {
                  v78 = 0;
                  v79 = 0;
                  while (2)
                  {
                    v80 = v77 + 136 * v78;
                    v392 = v79 + *(_DWORD *)(v5 + 56) * v385;
                    v389 = *(_QWORD *)(v5 + 112);
                    v81 = *(uint64_t **)(v80 + 8);
                    if (*(_BYTE *)(v80 + 128))
                      v82 = v81 == 0;
                    else
                      v82 = 1;
                    if (v82)
                      goto LABEL_377;
                    v383 = v77 + 136 * v78;
                    v384 = v79;
                    v399 = *(_WORD *)(v1 + 56);
                    v400 = *(_QWORD *)(v1 + 60);
                    v397 = *(_WORD *)(v1 + 80);
                    v398 = *(_QWORD *)(v1 + 84);
                    v83.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
                    v84 = **(_QWORD ***)(*v81 + 64);
                    v86 = v84[5];
                    v85 = v84[6];
                    v87 = v84[1];
                    v88 = (std::__shared_weak_count *)operator new(0xF8uLL);
                    v89 = v85 - v86;
                    v88->__shared_owners_ = 0;
                    v90 = (unint64_t *)&v88->__shared_owners_;
                    v88->__shared_weak_owners_ = 0;
                    v88->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0678;
                    v91 = v89 / v87;
                    ggl::BufferData::BufferData((uint64_t)&v88[1], 16, 0, 0, 6, v89 / v87);
                    v88[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B83A0;
                    v88[9].__shared_weak_owners_ = (uint64_t)"Temp Overlay Verts";
                    v88[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::DaVinci::texturedCompressedDrapingVboReflection;
                    v88[9].__shared_owners_ = (uint64_t)&unk_1E42B83C0;
                    *(_QWORD *)&v436 = v88 + 1;
                    *((_QWORD *)&v436 + 1) = v88;
                    v438 = v81;
                    v439 = v88 + 1;
                    v440 = v88;
                    v92 = &unk_1ECE44000;
                    do
                      v93 = __ldxr(v90);
                    while (__stxr(v93 + 1, v90));
                    v441 = (void **)v91;
                    v443 = 0;
                    v94 = operator new(0x28uLL);
                    *v94 = &off_1E42C9170;
                    v94[1] = v81;
                    v94[2] = v88 + 1;
                    v94[3] = v88;
                    v439 = 0;
                    v440 = 0;
                    v94[4] = v91;
                    v443 = v94;
                    v412 = 0uLL;
                    (*(void (**)(uint64_t, _BYTE *, __int128 *))(*(_QWORD *)v407 + 16))(v407, buf, &v412);
                    v95 = (std::__shared_weak_count *)*((_QWORD *)&v412 + 1);
                    if (*((_QWORD *)&v412 + 1))
                    {
                      v96 = (unint64_t *)(*((_QWORD *)&v412 + 1) + 8);
                      do
                        v97 = __ldaxr(v96);
                      while (__stlxr(v97 - 1, v96));
                      if (!v97)
                      {
                        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                        std::__shared_weak_count::__release_weak(v95);
                      }
                    }
                    v98 = v443;
                    if (v443 == buf)
                    {
                      v98 = buf;
                      v99 = 4;
LABEL_108:
                      (*(void (**)(void))(*v98 + 8 * v99))();
                    }
                    else if (v443)
                    {
                      v99 = 5;
                      goto LABEL_108;
                    }
                    v100 = v440;
                    if (v440)
                    {
                      v101 = (unint64_t *)&v440->__shared_owners_;
                      do
                        v102 = __ldaxr(v101);
                      while (__stlxr(v102 - 1, v101));
                      if (!v102)
                      {
                        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                        std::__shared_weak_count::__release_weak(v100);
                      }
                    }
                    rep = v83.__d_.__rep_;
                    v103 = *v81;
                    v104 = (std::__shared_weak_count *)operator new(0xA8uLL);
                    v104->__shared_owners_ = 0;
                    v105 = (unint64_t *)&v104->__shared_owners_;
                    v104->__shared_weak_owners_ = 0;
                    v104->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4BD0;
                    v106 = v436;
                    if (*((_QWORD *)&v436 + 1))
                    {
                      v107 = (unint64_t *)(*((_QWORD *)&v436 + 1) + 8);
                      do
                        v108 = __ldxr(v107);
                      while (__stxr(v108 + 1, v107));
                    }
                    v109 = *(std::__shared_weak_count **)(v103 + 104);
                    v386 = *(std::__shared_weak_count_vtbl **)(v103 + 96);
                    if (v109)
                    {
                      v110 = (unint64_t *)&v109->__shared_owners_;
                      do
                        v111 = __ldxr(v110);
                      while (__stxr(v111 + 1, v110));
                    }
                    if ((v112 & 1) == 0
                    {
                      if ((v322 & 1) == 0
                      {
                        ggl::MeshTyped<ggl::DaVinci::TexturedCompressedDrapingVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::texturedCompressedDrapingVboReflection;
                      }
                      ggl::MeshTyped<ggl::DaVinci::TexturedCompressedDrapingVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::TexturedCompressedDrapingVbo>::attributesReflection(void)::r;
                      unk_1EE5884A0 = 1;
                      v92 = (_QWORD *)&unk_1ECE44000;
                    }
                    v104[3].__shared_weak_owners_ = 0;
                    v104[2].__shared_owners_ = 0;
                    v104[2].__shared_weak_owners_ = 0;
                    LODWORD(v104[3].__vftable) = 0;
                    v104[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BBC08;
                    v104[1].__shared_owners_ = (uint64_t)"TempOverlayMesh";
                    v104[1].__shared_weak_owners_ = (uint64_t)&unk_1E42BBC28;
                    v104[2].__vftable = 0;
                    v104[3].__shared_owners_ = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::TexturedCompressedDrapingVbo>::typedReflection(void)::r;
                    v104[4].__vftable = 0;
                    v104[4].__shared_owners_ = 0;
                    if ((v113 & 1) == 0
                    {
                      v323 = operator new();
                      *(_QWORD *)(v323 + 16) = 0xA3D02C1100000005;
                      *(_QWORD *)(v323 + 24) = "GeoGL";
                      *(_OWORD *)(v323 + 32) = xmmword_19FFB2DE0;
                      *(_QWORD *)v323 = &off_1E42B5668;
                      *(_QWORD *)(v323 + 8) = "GeoGL";
                      *(_OWORD *)(v323 + 72) = 0u;
                      *(_OWORD *)(v323 + 88) = 0u;
                      *(_OWORD *)(v323 + 104) = 0u;
                      *(_OWORD *)(v323 + 120) = 0u;
                      *(_OWORD *)(v323 + 136) = 0u;
                      *(_OWORD *)(v323 + 152) = 0u;
                      *(_OWORD *)(v323 + 168) = 0u;
                      *(_OWORD *)(v323 + 184) = 0u;
                      *(_OWORD *)(v323 + 200) = 0u;
                      *(_OWORD *)(v323 + 216) = 0u;
                      *(_OWORD *)(v323 + 232) = 0u;
                      *(_QWORD *)(v323 + 248) = 0;
                      *(_OWORD *)(v323 + 56) = 0u;
                      v324 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v323 + 56), 0);
                      if ((_DWORD)v324)
                        geo::read_write_lock::logFailure(v324, (uint64_t)"initialization", v325);
                      v326 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v323 + 48) = v326;
                      malloc_set_zone_name(v326, "GeoGL");
                      *(_QWORD *)(v323 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      v92 = &unk_1ECE44000;
                      ggl::Allocator::instance(void)::alloc = v323;
                    }
                    v114 = v92[495];
                    v115 = v92;
                    v104[6].__vftable = 0;
                    v104[5].__vftable = 0;
                    v104[5].__shared_owners_ = 0;
                    v104[4].__shared_weak_owners_ = v114;
                    if ((v114 & 1) == 0
                    {
                      v327 = operator new();
                      *(_QWORD *)(v327 + 16) = 0xA3D02C1100000005;
                      *(_QWORD *)(v327 + 24) = "GeoGL";
                      *(_OWORD *)(v327 + 32) = xmmword_19FFB2DE0;
                      *(_QWORD *)v327 = &off_1E42B5668;
                      *(_QWORD *)(v327 + 8) = "GeoGL";
                      *(_OWORD *)(v327 + 72) = 0u;
                      *(_OWORD *)(v327 + 88) = 0u;
                      *(_OWORD *)(v327 + 104) = 0u;
                      *(_OWORD *)(v327 + 120) = 0u;
                      *(_OWORD *)(v327 + 136) = 0u;
                      *(_OWORD *)(v327 + 152) = 0u;
                      *(_OWORD *)(v327 + 168) = 0u;
                      *(_OWORD *)(v327 + 184) = 0u;
                      *(_OWORD *)(v327 + 200) = 0u;
                      *(_OWORD *)(v327 + 216) = 0u;
                      *(_OWORD *)(v327 + 232) = 0u;
                      *(_QWORD *)(v327 + 248) = 0;
                      *(_OWORD *)(v327 + 56) = 0u;
                      v328 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v327 + 56), 0);
                      if ((_DWORD)v328)
                        geo::read_write_lock::logFailure(v328, (uint64_t)"initialization", v329);
                      v330 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v327 + 48) = v330;
                      malloc_set_zone_name(v330, "GeoGL");
                      *(_QWORD *)(v327 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      v115 = &unk_1ECE44000;
                      ggl::Allocator::instance(void)::alloc = v327;
                    }
                    v104[6].__shared_owners_ = v115[495];
                    v104[6].__shared_weak_owners_ = 0;
                    v104[5].__shared_weak_owners_ = (uint64_t)&v104[6];
                    v104[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BDFF8;
                    v104[1].__shared_weak_owners_ = (uint64_t)&unk_1E42BE018;
                    *(_OWORD *)buf = v106;
                    v1 = v380;
                    if (*((_QWORD *)&v106 + 1))
                    {
                      v116 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
                      do
                        v117 = __ldxr(v116);
                      while (__stxr(v117 + 1, v116));
                    }
                    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>((uint64_t)&v104[3].__shared_weak_owners_, (uint64_t *)buf, (uint64_t *)&buf[16], 1uLL);
                    v118 = *(std::__shared_weak_count **)&buf[8];
                    if (!*(_QWORD *)&buf[8])
                      goto LABEL_130;
                    v119 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                    do
                      v120 = __ldaxr(v119);
                    while (__stlxr(v120 - 1, v119));
                    if (!v120)
                    {
                      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                      std::__shared_weak_count::__release_weak(v118);
                      if (v109)
                        goto LABEL_131;
                    }
                    else
                    {
LABEL_130:
                      if (v109)
                      {
LABEL_131:
                        v121 = (unint64_t *)&v109->__shared_owners_;
                        do
                          v122 = __ldxr(v121);
                        while (__stxr(v122 + 1, v121));
                      }
                    }
                    shared_owners = (std::__shared_weak_count *)v104[5].__shared_owners_;
                    v104[5].__vftable = v386;
                    v104[5].__shared_owners_ = (uint64_t)v109;
                    if (shared_owners)
                    {
                      v124 = (unint64_t *)&shared_owners->__shared_owners_;
                      do
                        v125 = __ldaxr(v124);
                      while (__stlxr(v125 - 1, v124));
                      if (!v125)
                      {
                        ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
                        std::__shared_weak_count::__release_weak(shared_owners);
                      }
                    }
                    v104[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BC780;
                    v104[1].__shared_weak_owners_ = (uint64_t)&unk_1E42BC7A0;
                    if (!v109)
                      goto LABEL_142;
                    v126 = (unint64_t *)&v109->__shared_owners_;
                    do
                      v127 = __ldaxr(v126);
                    while (__stlxr(v127 - 1, v126));
                    if (!v127)
                    {
                      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                      std::__shared_weak_count::__release_weak(v109);
                      if (*((_QWORD *)&v106 + 1))
                      {
LABEL_143:
                        v128 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
                        do
                          v129 = __ldaxr(v128);
                        while (__stlxr(v129 - 1, v128));
                        if (!v129)
                        {
                          (*(void (**)(_QWORD))(**((_QWORD **)&v106 + 1) + 16))(*((_QWORD *)&v106 + 1));
                          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v106 + 1));
                        }
                      }
                    }
                    else
                    {
LABEL_142:
                      if (*((_QWORD *)&v106 + 1))
                        goto LABEL_143;
                    }
                    *(_OWORD *)v424 = *((_OWORD *)v81 + 1);
                    do
                      v130 = __ldxr(v105);
                    while (__stxr(v130 + 1, v105));
                    v131 = *((_BYTE *)v81 + 32);
                    v132 = *((_BYTE *)v81 + 61);
                    v133 = *((_BYTE *)v81 + 60);
                    v422 = v104 + 1;
                    v423 = v104;
                    do
                      v134 = __ldxr(v105);
                    while (__stxr(v134 + 1, v105));
                    v424[16] = v131;
                    v135 = *(uint64_t *)((char *)v81 + 52);
                    *(_OWORD *)&v424[20] = *(_OWORD *)((char *)v81 + 36);
                    v425 = v135;
                    v426 = v133;
                    v427 = v132;
                    v428 = 0;
                    v429 = 0;
                    do
                      v136 = __ldaxr(v105);
                    while (__stlxr(v136 - 1, v105));
                    if (!v136)
                    {
                      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                      std::__shared_weak_count::__release_weak(v104);
                    }
                    do
                      v137 = __ldaxr(v105);
                    while (__stlxr(v137 - 1, v105));
                    if (v137)
                    {
                      v138 = (std::__shared_weak_count *)*((_QWORD *)&v436 + 1);
                      if (!*((_QWORD *)&v436 + 1))
                        goto LABEL_167;
                    }
                    else
                    {
                      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                      std::__shared_weak_count::__release_weak(v104);
                      v138 = (std::__shared_weak_count *)*((_QWORD *)&v436 + 1);
                      if (!*((_QWORD *)&v436 + 1))
                        goto LABEL_167;
                    }
                    v139 = (unint64_t *)&v138->__shared_owners_;
                    do
                      v140 = __ldaxr(v139);
                    while (__stlxr(v140 - 1, v139));
                    if (!v140)
                    {
                      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                      std::__shared_weak_count::__release_weak(v138);
                    }
LABEL_167:
                    v141 = v422;
                    shared_weak_owners = (_QWORD *)v422[2].__shared_weak_owners_;
                    v143 = *shared_weak_owners;
                    v144 = (std::__shared_weak_count *)shared_weak_owners[1];
                    v146 = *(_QWORD *)(*shared_weak_owners + 40);
                    v145 = *(_QWORD *)(*shared_weak_owners + 48);
                    v147 = *(_QWORD *)(*shared_weak_owners + 8);
                    v420 = *shared_weak_owners;
                    v421 = v144;
                    if (v144)
                    {
                      v148 = (unint64_t *)&v144->__shared_owners_;
                      do
                        v149 = __ldxr(v148);
                      while (__stxr(v149 + 1, v148));
                    }
                    v437 = 0;
                    v150 = HIBYTE(v399) - HIBYTE(v397);
                    if (HIBYTE(v399) < HIBYTE(v397))
                    {
                      v151 = HIBYTE(v397) - HIBYTE(v399);
                      v416 = HIBYTE(v397) - HIBYTE(v399);
                      __powidf2();
                      v417 = (int)v152;
                      v418 = WORD2(v398) - (HIDWORD(v400) << v151);
                      v419 = v398 - ((_DWORD)v400 << v151);
                      *(_QWORD *)buf = &off_1E42C6EB8;
                      v153 = convertHighToLowZTileSpace;
                      goto LABEL_174;
                    }
                    if (HIBYTE(v399) > HIBYTE(v397))
                    {
                      v416 = HIBYTE(v399) - HIBYTE(v397);
                      __powidf2();
                      v417 = (int)v154;
                      v418 = WORD2(v400) - (HIDWORD(v398) << v150);
                      v419 = v400 - ((_DWORD)v398 << v150);
                      *(_QWORD *)buf = &off_1E42C6EB8;
                      v153 = convertLowToHighZTileSpace;
LABEL_174:
                      *(_QWORD *)&buf[8] = v153;
                      v443 = buf;
                      std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](buf, &v436);
                      v155 = v443;
                      if (v443 == buf)
                      {
                        v155 = buf;
                        v156 = 4;
LABEL_178:
                        (*(void (**)(void))(*v155 + 8 * v156))();
                      }
                      else if (v443)
                      {
                        v156 = 5;
                        goto LABEL_178;
                      }
                      *(_QWORD *)&v430 = &v399;
                      *((_QWORD *)&v430 + 1) = &v397;
                      *(_QWORD *)&v431 = &v436;
                      *((_QWORD *)&v431 + 1) = &v416;
                      v432 = v143;
                      v433 = v144;
                      if (v144)
                      {
                        v157 = (unint64_t *)&v144->__shared_owners_;
                        do
                          v158 = __ldxr(v157);
                        while (__stxr(v158 + 1, v157));
                      }
                      v434 = (v145 - v146) / v147;
                      v435 = 1199570688;
                      v443 = 0;
                      v159 = (char *)operator new(0x48uLL);
                      *(_QWORD *)v159 = &off_1E42C9008;
                      *(_OWORD *)(v159 + 8) = v430;
                      *(_OWORD *)(v159 + 24) = v431;
                      *((_QWORD *)v159 + 5) = v143;
                      *((_QWORD *)v159 + 6) = v144;
                      if (v144)
                      {
                        v160 = (unint64_t *)&v144->__shared_owners_;
                        do
                          v161 = __ldxr(v160);
                        while (__stxr(v161 + 1, v160));
                      }
                      *((_QWORD *)v159 + 7) = v434;
                      *((_DWORD *)v159 + 16) = v435;
                      v443 = v159;
                      v439 = 0;
                      v438 = 0;
                      (*(void (**)(uint64_t, _BYTE *, void **))(*(_QWORD *)v407 + 16))(v407, buf, &v438);
                      v162 = v439;
                      if (v439)
                      {
                        v163 = (unint64_t *)&v439->__shared_owners_;
                        do
                          v164 = __ldaxr(v163);
                        while (__stlxr(v164 - 1, v163));
                        if (!v164)
                        {
                          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                          std::__shared_weak_count::__release_weak(v162);
                        }
                      }
                      v165 = v443;
                      if (v443 == buf)
                      {
                        v165 = buf;
                        v166 = 4;
LABEL_194:
                        (*(void (**)(void))(*v165 + 8 * v166))();
                      }
                      else if (v443)
                      {
                        v166 = 5;
                        goto LABEL_194;
                      }
                      v167 = v433;
                      if (v433)
                      {
                        v168 = (unint64_t *)&v433->__shared_owners_;
                        do
                          v169 = __ldaxr(v168);
                        while (__stlxr(v169 - 1, v168));
                        if (!v169)
                        {
                          ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                          std::__shared_weak_count::__release_weak(v167);
                        }
                      }
                      v141 = v422;
                    }
                    *(_QWORD *)v408 = v405;
                    v171 = v141 + 4;
                    v170 = v141[4].__vftable;
                    v173 = v170[1].~__shared_weak_count;
                    v172 = v170[1].~__shared_weak_count_0;
                    v174 = (unint64_t)v170->~__shared_weak_count_0;
                    v175 = *(_QWORD **)v141[2].__shared_weak_owners_;
                    v177 = v175[5];
                    v176 = v175[6];
                    v178 = v175[1];
                    v179 = (char *)operator new(0x98uLL);
                    v180 = v176 - v177;
                    *((_QWORD *)v179 + 1) = 0;
                    *((_QWORD *)v179 + 2) = 0;
                    *(_QWORD *)v179 = &off_1E42DE260;
                    *(_OWORD *)(v179 + 24) = 0u;
                    v181 = (gdc::DCEL *)(v179 + 24);
                    *(_QWORD *)buf = &off_1E42C70D0;
                    *(_QWORD *)&buf[8] = gdc::DCEL::defaultWarningHandler;
                    v443 = buf;
                    *(_OWORD *)(v179 + 40) = 0u;
                    *(_OWORD *)(v179 + 56) = 0u;
                    *(_OWORD *)(v179 + 72) = 0u;
                    *((_QWORD *)v179 + 11) = 0;
                    v182 = (v180 / v178);
                    if (v182)
                    {
                      v183 = 4 * v182;
                      v184 = (char *)operator new(4 * v182);
                      *((_QWORD *)v179 + 9) = v184;
                      v185 = &v184[v183];
                      *((_QWORD *)v179 + 11) = &v184[v183];
                      memset(v184, 255, v183);
                      *((_QWORD *)v179 + 10) = v185;
                    }
                    *((_QWORD *)v179 + 15) = v179 + 96;
                    v186 = ((char *)v172 - (char *)v173) / v174;
                    std::__function::__func<void (*)(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int),std::allocator<void (*)(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int)>,void ()(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int)>::__clone((uint64_t)buf, (_QWORD *)v179 + 12);
                    *((_QWORD *)v179 + 16) = 0;
                    *((_QWORD *)v179 + 17) = 0;
                    *((_QWORD *)v179 + 18) = 0;
                    *(_QWORD *)&v412 = v179 + 24;
                    *((_QWORD *)&v412 + 1) = v179;
                    v187 = v186 / 3;
                    gdc::DCEL::reserveFaces(v181, v186 / 3);
                    v188 = operator new(0x30uLL);
                    *v188 = &off_1E42CE3D8;
                    v188[1] = &v412;
                    v188[2] = v171;
                    v188[3] = 0;
                    v188[4] = v186;
                    v188[5] = v186;
                    v443 = v188;
                    v439 = 0;
                    v438 = 0;
                    (*(void (**)(uint64_t, _BYTE *, void **))(*(_QWORD *)v407 + 16))(v407, buf, &v438);
                    v189 = v439;
                    v5 = v379;
                    v61 = v381;
                    if (v439)
                    {
                      v190 = (unint64_t *)&v439->__shared_owners_;
                      do
                        v191 = __ldaxr(v190);
                      while (__stlxr(v191 - 1, v190));
                      if (!v191)
                      {
                        ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                        std::__shared_weak_count::__release_weak(v189);
                      }
                    }
                    v192 = v443;
                    if (v443 == buf)
                    {
                      v192 = buf;
                      v193 = 4;
LABEL_212:
                      (*(void (**)(void))(*v192 + 8 * v193))();
                    }
                    else if (v443)
                    {
                      v193 = 5;
                      goto LABEL_212;
                    }
                    if (((*(_QWORD *)(v412 + 32) - *(_QWORD *)(v412 + 24)) >> 2) != (_DWORD)v187)
                    {
                      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                      v194 = (id)GEOGetVectorKitVKDefaultLog_log;
                      if (os_log_type_enabled(v194, OS_LOG_TYPE_ERROR))
                      {
                        v195 = (*(_QWORD *)(v412 + 32) - *(_QWORD *)(v412 + 24)) >> 2;
                        *(_DWORD *)buf = 67109376;
                        *(_DWORD *)&buf[4] = v195;
                        *(_WORD *)&buf[8] = 1024;
                        *(_DWORD *)&buf[10] = v187;
                        _os_log_impl(&dword_19F029000, v194, OS_LOG_TYPE_ERROR, "face count does not match (%d to %d)", buf, 0xEu);
                      }

                    }
                    v197 = v171->__vftable[1].~__shared_weak_count;
                    v196 = v171->__vftable[1].~__shared_weak_count_0;
                    v198 = (unint64_t)v171->~__shared_weak_count_0;
                    *(_QWORD *)buf = 0;
                    *(_QWORD *)&buf[8] = 0;
                    v462 = 0;
                    v445 = 0;
                    *(_QWORD *)&v446 = 0;
                    *((_QWORD *)&v444 + 1) = 0;
                    v450 = 0;
                    v451 = 0;
                    v449 = 0;
                    v456 = 0;
                    v457 = 0;
                    v455 = 0;
                    v199 = operator new();
                    v200 = ((char *)v196 - (char *)v197) / v198;
                    v201 = (_QWORD *)ggl::BufferData::BufferData(v199, 8, 0, 0, 6, v200);
                    *v201 = &off_1E42B82A0;
                    v201[26] = "OverlayVertexData";
                    v201[27] = &ggl::DaVinci::elevatedFillVboReflection;
                    v201[25] = &unk_1E42B82C0;
                    v463 = v201;
                    v202 = (std::__shared_weak_count *)operator new();
                    v202->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E7950;
                    v202->__shared_owners_ = 0;
                    v202->__shared_weak_owners_ = 0;
                    v202[1].__vftable = (std::__shared_weak_count_vtbl *)v199;
                    v464 = v202;
                    v465 = v200;
                    v466 = 0;
                    if (LODWORD(v171->__vftable[5].__on_zero_shared))
                    {
                      v415 = 0;
                      v414 = 0;
                      goto LABEL_221;
                    }
                    v205 = (void **)operator new(0x40uLL);
                    *v205 = &off_1E42C83F0;
                    v205[1] = v401;
                    v205[2] = buf;
                    v205[3] = v141;
                    v205[4] = &v403;
                    v205[5] = v408;
                    v205[6] = &v412;
                    v205[7] = &v414;
                    v441 = v205;
                    v410 = 0;
                    __p = 0;
                    (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)v407 + 16))(v407, &v438, &__p);
                    v206 = v410;
                    if (v410)
                    {
                      v207 = (unint64_t *)&v410->__shared_owners_;
                      do
                        v208 = __ldaxr(v207);
                      while (__stlxr(v208 - 1, v207));
                      if (!v208)
                      {
                        ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                        std::__shared_weak_count::__release_weak(v206);
                      }
                    }
                    v209 = v441;
                    if (v441 == &v438)
                    {
                      v209 = &v438;
                      v210 = 4;
LABEL_232:
                      (*((void (**)(void))*v209 + v210))();
                    }
                    else if (v441)
                    {
                      v210 = 5;
                      goto LABEL_232;
                    }
                    if (v466)
                    {
                      v211 = v463;
                      v212 = v464;
                      if (v464)
                      {
                        v213 = (unint64_t *)&v464->__shared_owners_;
                        do
                          v214 = __ldxr(v213);
                        while (__stxr(v214 + 1, v213));
                      }
                      v215 = (char *)operator new(0xA8uLL);
                      *((_QWORD *)v215 + 1) = 0;
                      *((_QWORD *)v215 + 2) = 0;
                      *(_QWORD *)v215 = &off_1E42E4968;
                      if ((v216 & 1) == 0
                      {
                        if ((v331 & 1) == 0
                        {
                          ggl::MeshTyped<ggl::DaVinci::ElevatedFillVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::elevatedFillVboReflection;
                        }
                        ggl::MeshTyped<ggl::DaVinci::ElevatedFillVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::ElevatedFillVbo>::attributesReflection(void)::r;
                        *(_QWORD *)algn_1EE586C58 = 1;
                        v5 = v379;
                        v61 = v381;
                        v1 = v380;
                      }
                      *((_QWORD *)v215 + 11) = 0;
                      *((_QWORD *)v215 + 7) = 0;
                      *((_QWORD *)v215 + 8) = 0;
                      *((_DWORD *)v215 + 18) = 0;
                      *((_QWORD *)v215 + 3) = &off_1E42BBC08;
                      *((_QWORD *)v215 + 4) = "overlaid mesh";
                      *((_QWORD *)v215 + 5) = &unk_1E42BBC28;
                      *((_QWORD *)v215 + 6) = 0;
                      *((_QWORD *)v215 + 10) = &ggl::MeshTyped<ggl::DaVinci::ElevatedFillVbo>::typedReflection(void)::r;
                      *((_QWORD *)v215 + 12) = 0;
                      *((_QWORD *)v215 + 13) = 0;
                      if ((v217 & 1) == 0
                      {
                        v332 = operator new();
                        *(_QWORD *)(v332 + 16) = 0xA3D02C1100000005;
                        *(_QWORD *)(v332 + 24) = "GeoGL";
                        *(_OWORD *)(v332 + 32) = xmmword_19FFB2DE0;
                        *(_QWORD *)v332 = &off_1E42B5668;
                        *(_QWORD *)(v332 + 8) = "GeoGL";
                        *(_OWORD *)(v332 + 72) = 0u;
                        *(_OWORD *)(v332 + 88) = 0u;
                        *(_OWORD *)(v332 + 104) = 0u;
                        *(_OWORD *)(v332 + 120) = 0u;
                        *(_OWORD *)(v332 + 136) = 0u;
                        *(_OWORD *)(v332 + 152) = 0u;
                        *(_OWORD *)(v332 + 168) = 0u;
                        *(_OWORD *)(v332 + 184) = 0u;
                        *(_OWORD *)(v332 + 200) = 0u;
                        *(_OWORD *)(v332 + 216) = 0u;
                        *(_OWORD *)(v332 + 232) = 0u;
                        *(_QWORD *)(v332 + 248) = 0;
                        *(_OWORD *)(v332 + 56) = 0u;
                        v333 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v332 + 56), 0);
                        if ((_DWORD)v333)
                          geo::read_write_lock::logFailure(v333, (uint64_t)"initialization", v334);
                        v335 = malloc_create_zone(0, 0);
                        *(_QWORD *)(v332 + 48) = v335;
                        malloc_set_zone_name(v335, "GeoGL");
                        *(_QWORD *)(v332 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                        ggl::Allocator::instance(void)::alloc = v332;
                        v5 = v379;
                        v61 = v381;
                        v1 = v380;
                      }
                      v218 = ggl::Allocator::instance(void)::alloc;
                      *((_QWORD *)v215 + 18) = 0;
                      *((_QWORD *)v215 + 15) = 0;
                      *((_QWORD *)v215 + 16) = 0;
                      *((_QWORD *)v215 + 14) = v218;
                      if ((v218 & 1) == 0
                      {
                        v336 = operator new();
                        *(_QWORD *)(v336 + 16) = 0xA3D02C1100000005;
                        *(_QWORD *)(v336 + 24) = "GeoGL";
                        *(_OWORD *)(v336 + 32) = xmmword_19FFB2DE0;
                        *(_QWORD *)v336 = &off_1E42B5668;
                        *(_QWORD *)(v336 + 8) = "GeoGL";
                        *(_OWORD *)(v336 + 72) = 0u;
                        *(_OWORD *)(v336 + 88) = 0u;
                        *(_OWORD *)(v336 + 104) = 0u;
                        *(_OWORD *)(v336 + 120) = 0u;
                        *(_OWORD *)(v336 + 136) = 0u;
                        *(_OWORD *)(v336 + 152) = 0u;
                        *(_OWORD *)(v336 + 168) = 0u;
                        *(_OWORD *)(v336 + 184) = 0u;
                        *(_OWORD *)(v336 + 200) = 0u;
                        *(_OWORD *)(v336 + 216) = 0u;
                        *(_OWORD *)(v336 + 232) = 0u;
                        *(_QWORD *)(v336 + 248) = 0;
                        *(_OWORD *)(v336 + 56) = 0u;
                        v337 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v336 + 56), 0);
                        if ((_DWORD)v337)
                          geo::read_write_lock::logFailure(v337, (uint64_t)"initialization", v338);
                        v339 = malloc_create_zone(0, 0);
                        *(_QWORD *)(v336 + 48) = v339;
                        malloc_set_zone_name(v339, "GeoGL");
                        *(_QWORD *)(v336 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                        ggl::Allocator::instance(void)::alloc = v336;
                        v5 = v379;
                        v61 = v381;
                        v1 = v380;
                      }
                      *((_QWORD *)v215 + 19) = ggl::Allocator::instance(void)::alloc;
                      *((_QWORD *)v215 + 20) = 0;
                      *((_QWORD *)v215 + 17) = v215 + 144;
                      *((_QWORD *)v215 + 3) = &off_1E42BDEF8;
                      *((_QWORD *)v215 + 5) = &unk_1E42BDF18;
                      v438 = v211;
                      v439 = v212;
                      if (v212)
                      {
                        v219 = (unint64_t *)&v212->__shared_owners_;
                        do
                          v220 = __ldxr(v219);
                        while (__stxr(v220 + 1, v219));
                      }
                      std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>((uint64_t)(v215 + 88), (uint64_t *)&v438, (uint64_t *)&v440, 1uLL);
                      v221 = v439;
                      if (v439)
                      {
                        v222 = (unint64_t *)&v439->__shared_owners_;
                        do
                          v223 = __ldaxr(v222);
                        while (__stlxr(v223 - 1, v222));
                        if (!v223)
                        {
                          ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                          std::__shared_weak_count::__release_weak(v221);
                        }
                      }
                      v224 = (std::__shared_weak_count *)*((_QWORD *)v215 + 16);
                      *((_QWORD *)v215 + 15) = 0;
                      *((_QWORD *)v215 + 16) = 0;
                      if (v224)
                      {
                        v225 = (unint64_t *)&v224->__shared_owners_;
                        do
                          v226 = __ldaxr(v225);
                        while (__stlxr(v226 - 1, v225));
                        if (!v226)
                        {
                          ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                          std::__shared_weak_count::__release_weak(v224);
                        }
                      }
                      *((_QWORD *)v215 + 3) = &off_1E42BC410;
                      *((_QWORD *)v215 + 5) = &unk_1E42BC430;
                      if (v212)
                      {
                        v227 = (unint64_t *)&v212->__shared_owners_;
                        do
                          v228 = __ldaxr(v227);
                        while (__stlxr(v228 - 1, v227));
                        if (!v228)
                        {
                          ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                          std::__shared_weak_count::__release_weak(v212);
                        }
                      }
                      *(_QWORD *)&v413 = v215 + 24;
                      *((_QWORD *)&v413 + 1) = v215;
                      v204 = v464;
                      if (v464)
                      {
LABEL_259:
                        v229 = (unint64_t *)&v204->__shared_owners_;
                        do
                          v230 = __ldaxr(v229);
                        while (__stlxr(v230 - 1, v229));
                        if (v230)
                          break;
                        ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                        std::__shared_weak_count::__release_weak(v204);
                        if (!v462)
                        {
LABEL_279:
                          if (v455)
                          {
                            v238 = v452;
                            v239 = v453;
                            if (v453 != v452)
                            {
                              v240 = &v451->__vftable;
                              v241 = v454;
                              v242 = BYTE1(v454);
                              if (v450 && BYTE1(v451->__shared_weak_owners_) != 2)
                                (*(void (**)(void))(*(_QWORD *)v450 + 64))();
                              if (v241 && !v242)
                              {
                                v243 = (_QWORD *)v240[7];
                                v244 = (_QWORD *)v240[8];
                                if (v244 == v243)
                                  v243 = (_QWORD *)(v240[10] - v240[9]);
                                if (v238 < v243)
                                  v243 = v238;
                                if (v244 <= v239)
                                  v244 = v239;
                                if (v244 == v243)
                                  v244 = (_QWORD *)((char *)v243 + v240[10] - v240[9]);
                                v240[7] = v243;
                                v240[8] = v244;
                              }
                            }
                          }
                          if (v449)
                          {
                            v245 = *((_QWORD *)&v446 + 1);
                            v246 = v447;
                            if (v447 != *((_QWORD *)&v446 + 1))
                            {
                              v247 = (_QWORD *)v446;
                              v248 = v448;
                              v249 = BYTE1(v448);
                              if (v445 && *(_BYTE *)(v446 + 17) != 2)
                                (*(void (**)(void))(*(_QWORD *)v445 + 64))();
                              if (v248 && !v249)
                              {
                                v250 = v247[7];
                                v251 = v247[8];
                                if (v251 == v250)
                                  v250 = v247[10] - v247[9];
                                if (v245 < v250)
                                  v250 = v245;
                                if (v251 <= v246)
                                  v251 = v246;
                                if (v251 == v250)
                                  v251 = v250 + v247[10] - v247[9];
                                v247[7] = v250;
                                v247[8] = v251;
                              }
                            }
                          }
                          if (*((_QWORD *)&v444 + 1))
                          {
                            v252 = *(_BYTE **)&buf[16];
                            v253 = v443;
                            if (v443 != *(_BYTE **)&buf[16])
                            {
                              v254 = *(_QWORD **)&buf[8];
                              v255 = v444;
                              v256 = BYTE1(v444);
                              if (*(_QWORD *)buf && *(_BYTE *)(*(_QWORD *)&buf[8] + 17) != 2)
                                (*(void (**)(void))(**(_QWORD **)buf + 64))();
                              if (v255 && !v256)
                              {
                                v257 = (_BYTE *)v254[7];
                                v258 = (_BYTE *)v254[8];
                                if (v258 == v257)
                                  v257 = (_BYTE *)(v254[10] - v254[9]);
                                if (v252 < v257)
                                  v257 = v252;
                                if (v258 <= v253)
                                  v258 = v253;
                                if (v258 == v257)
                                  v258 = &v257[v254[10] - v254[9]];
                                v254[7] = v257;
                                v254[8] = v258;
                              }
                            }
                          }
                          v259 = (std::__shared_weak_count *)*((_QWORD *)&v412 + 1);
                          v79 = v384;
                          if (*((_QWORD *)&v412 + 1))
                          {
                            v260 = (unint64_t *)(*((_QWORD *)&v412 + 1) + 8);
                            do
                              v261 = __ldaxr(v260);
                            while (__stlxr(v261 - 1, v260));
                            if (!v261)
                            {
                              ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
                              std::__shared_weak_count::__release_weak(v259);
                            }
                          }
                          LODWORD(v203) = v414;
                          gdc::Statistics::addSampleValue(v61, "Drape Fill - Triangle intersection tests", 0xB9E4604400000028, (double)v203);
                          LODWORD(v262) = HIDWORD(v414);
                          gdc::Statistics::addSampleValue(v61, "Drape Fill - Brute Force searches", 0xA33AA5C200000021, (double)v262);
                          v263 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - rep) * 0.000001;
                          v264 = (*(_QWORD *)&v424[8] - *(_QWORD *)v424) / 3uLL;
                          gdc::Statistics::addSampleValue(v61, "Drape Fill - Source Triangle Count", 0x35E4C0DA00000022uLL, (double)v264);
                          gdc::Statistics::addSampleValue(v61, "Drape Fill - Time", 0xD090694200000011, v263);
                          if ((_QWORD)v413)
                            gdc::Statistics::addSampleValue(v61, "Drape Fill - Output Triangle Count", 0xD4C4BE4100000022, (double)((*(_QWORD *)(**(_QWORD **)(v413 + 64) + 48)- *(_QWORD *)(**(_QWORD **)(v413 + 64) + 40))/ *(_QWORD *)(**(_QWORD **)(v413 + 64) + 8)/ 3uLL));
                          if (GEOGetVectorKitElevatedStrokesLog_onceToken != -1)
                            dispatch_once(&GEOGetVectorKitElevatedStrokesLog_onceToken, &__block_literal_global_37);
                          v265 = (id)GEOGetVectorKitElevatedStrokesLog_log;
                          if (os_log_type_enabled(v265, OS_LOG_TYPE_DEBUG))
                          {
                            LOWORD(v412) = v397;
                            *(_QWORD *)((char *)&v412 + 4) = v398;
                            md::debugString<geo::QuadTile>(&v438, &v412);
                            v266 = SHIBYTE(v440);
                            v267 = (void **)v438;
                            *(_WORD *)v408 = v399;
                            *(_QWORD *)&v408[4] = v400;
                            md::debugString<geo::QuadTile>(&__p, v408);
                            v268 = &v438;
                            if (v266 < 0)
                              v268 = v267;
                            p_p = &__p;
                            if (v411 < 0)
                              p_p = __p;
                            *(_DWORD *)buf = 136316930;
                            *(_QWORD *)&buf[4] = v268;
                            *(_WORD *)&buf[12] = 2080;
                            *(_QWORD *)&buf[14] = p_p;
                            *(_WORD *)&buf[22] = 2048;
                            v443 = (_BYTE *)v264;
                            LOWORD(v444) = 2048;
                            *(_QWORD *)((char *)&v444 + 2) = (*((_QWORD *)&v402 + 1) - (_QWORD)v402) / 3uLL;
                            WORD5(v444) = 1024;
                            HIDWORD(v444) = v414;
                            LOWORD(v445) = 1024;
                            *(_DWORD *)((char *)&v445 + 2) = HIDWORD(v414);
                            HIWORD(v445) = 1024;
                            LODWORD(v446) = v415;
                            WORD2(v446) = 2048;
                            *(double *)((char *)&v446 + 6) = v263;
                            _os_log_impl(&dword_19F029000, v265, OS_LOG_TYPE_DEBUG, "Draped fill mesh tile %s onto foundation tile %s\nFill Triangle Count: %zu  Foundation Triangle Count: %zu\nIntersection Tests: %d  Brute Force Searches: %d  Triangle Culls: %d  Draping Time: %.1f", buf, 0x46u);
                            if (v411 < 0)
                            {
                              operator delete(__p);
                              if (SHIBYTE(v440) < 0)
                                goto LABEL_397;
                            }
                            else
                            {
                              if ((SHIBYTE(v440) & 0x80000000) == 0)
                                goto LABEL_343;
LABEL_397:
                              operator delete(v438);
                            }
                          }
LABEL_343:

                          v270 = v413;
                          v271 = v437;
                          v387 = v413;
                          if (v437 == &v436)
                          {
                            v271 = &v436;
                            v272 = 4;
LABEL_347:
                            (*(void (**)(void))(*(_QWORD *)v271 + 8 * v272))();
                            v270 = v387;
                          }
                          else if (v437)
                          {
                            v272 = 5;
                            goto LABEL_347;
                          }
                          v273 = v421;
                          if (!v421)
                            goto LABEL_352;
                          v274 = (unint64_t *)&v421->__shared_owners_;
                          do
                            v275 = __ldaxr(v274);
                          while (__stlxr(v275 - 1, v274));
                          if (!v275)
                          {
                            ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                            std::__shared_weak_count::__release_weak(v273);
                            v270 = v387;
                            v276 = v429;
                            if (v429)
                            {
LABEL_353:
                              v277 = (unint64_t *)&v276->__shared_owners_;
                              do
                                v278 = __ldaxr(v277);
                              while (__stlxr(v278 - 1, v277));
                              if (!v278)
                              {
                                ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
                                std::__shared_weak_count::__release_weak(v276);
                                v270 = v387;
                              }
                            }
                          }
                          else
                          {
LABEL_352:
                            v276 = v429;
                            if (v429)
                              goto LABEL_353;
                          }
                          v279 = v423;
                          if (!v423)
                            goto LABEL_362;
                          v280 = (unint64_t *)&v423->__shared_owners_;
                          do
                            v281 = __ldaxr(v280);
                          while (__stlxr(v281 - 1, v280));
                          if (!v281)
                          {
                            ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
                            std::__shared_weak_count::__release_weak(v279);
                            v270 = v387;
                            v282 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
                            if (*((_QWORD *)&v387 + 1))
                              goto LABEL_363;
                          }
                          else
                          {
LABEL_362:
                            v282 = (std::__shared_weak_count *)*((_QWORD *)&v270 + 1);
                            if (*((_QWORD *)&v270 + 1))
                            {
LABEL_363:
                              v283 = (unint64_t *)&v282->__shared_owners_;
                              do
                                v284 = __ldxr(v283);
                              while (__stxr(v284 + 1, v283));
                            }
                          }
                          v285 = v389 + 80 * v392;
                          v286 = *(std::__shared_weak_count **)(v285 + 72);
                          *(_OWORD *)(v285 + 64) = v270;
                          v80 = v383;
                          if (!v286)
                            goto LABEL_369;
                          v287 = (unint64_t *)&v286->__shared_owners_;
                          do
                            v288 = __ldaxr(v287);
                          while (__stlxr(v288 - 1, v287));
                          if (!v288)
                          {
                            ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
                            std::__shared_weak_count::__release_weak(v286);
                            if (!v282)
                              goto LABEL_377;
                          }
                          else
                          {
LABEL_369:
                            if (!v282)
                              goto LABEL_377;
                          }
                          v289 = (unint64_t *)&v282->__shared_owners_;
                          do
                            v290 = __ldaxr(v289);
                          while (__stlxr(v290 - 1, v289));
                          if (!v290)
                          {
                            ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
                            std::__shared_weak_count::__release_weak(v282);
                          }
LABEL_377:
                          v291 = *(_QWORD **)(v80 + 24);
                          if (!v291)
                            goto LABEL_92;
                          v292 = v80 + 104;
                          v293 = v389 + 80 * v392;
                          if (*(_BYTE *)(v80 + 112))
                          {
                            v294 = *(float *)(v1 + 104);
                            v295 = v294 * *(float *)v292;
                            v296 = *(float *)(v80 + 108) * v294;
                            *(_WORD *)v395 = *(_WORD *)(v1 + 56);
                            v396 = *(_QWORD *)(v1 + 60);
                            *(_WORD *)v393 = *(_WORD *)(v1 + 80);
                            v394 = *(_QWORD *)(v1 + 84);
                            md::DrapingLogic::drapeStrokeMesh((uint64_t)buf, &v407, v401, v395, v291, v393, v61, v295, v296);
                            v297 = v80;
                            if (*(unsigned __int8 *)(v293 + 24) == v443)
                            {
                              if (!*(_BYTE *)(v293 + 24))
                                goto LABEL_404;
                              v298 = *(_OWORD *)buf;
                              *(_QWORD *)&buf[8] = 0;
                              *(_QWORD *)buf = 0;
                              v299 = *(std::__shared_weak_count **)(v293 + 8);
                              *(_OWORD *)v293 = v298;
                              if (v299)
                              {
                                v300 = (unint64_t *)&v299->__shared_owners_;
                                do
                                  v301 = __ldaxr(v300);
                                while (__stlxr(v301 - 1, v300));
                                if (!v301)
                                {
                                  ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
                                  std::__shared_weak_count::__release_weak(v299);
                                }
                              }
                              *(_QWORD *)(v293 + 16) = *(_QWORD *)&buf[16];
                              if (!(_BYTE)v443)
                                goto LABEL_404;
LABEL_399:
                              v305 = *(std::__shared_weak_count **)&buf[8];
                              if (*(_QWORD *)&buf[8])
                              {
                                v306 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                                do
                                  v307 = __ldaxr(v306);
                                while (__stlxr(v307 - 1, v306));
                                if (!v307)
                                {
                                  ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
                                  std::__shared_weak_count::__release_weak(v305);
                                }
                              }
                            }
                            else
                            {
                              if (*(_BYTE *)(v293 + 24))
                              {
                                v302 = *(std::__shared_weak_count **)(v293 + 8);
                                if (v302)
                                {
                                  v303 = (unint64_t *)&v302->__shared_owners_;
                                  do
                                    v304 = __ldaxr(v303);
                                  while (__stlxr(v304 - 1, v303));
                                  if (!v304)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
                                    std::__shared_weak_count::__release_weak(v302);
                                  }
                                }
                                *(_BYTE *)(v293 + 24) = 0;
                                if (!(_BYTE)v443)
                                  goto LABEL_404;
                                goto LABEL_399;
                              }
                              *(_OWORD *)v293 = *(_OWORD *)buf;
                              *(_QWORD *)&buf[8] = 0;
                              *(_QWORD *)buf = 0;
                              *(_QWORD *)(v293 + 16) = *(_QWORD *)&buf[16];
                              *(_BYTE *)(v293 + 24) = 1;
                              if ((_BYTE)v443)
                                goto LABEL_399;
                            }
LABEL_404:
                            v80 = v297;
                          }
                          if (*(_BYTE *)(v292 + 20))
                          {
                            v308 = *(float *)(v1 + 104);
                            v309 = v308 * *(float *)(v292 + 12);
                            v310 = *(float *)(v292 + 16) * v308;
                            *(_WORD *)v395 = *(_WORD *)(v1 + 56);
                            v396 = *(_QWORD *)(v1 + 60);
                            v311 = *(_QWORD **)(v80 + 24);
                            *(_WORD *)v393 = *(_WORD *)(v1 + 80);
                            v394 = *(_QWORD *)(v1 + 84);
                            md::DrapingLogic::drapeStrokeMesh((uint64_t)buf, &v407, v401, v395, v311, v393, v61, v309, v310);
                            if (*(unsigned __int8 *)(v293 + 56) == v443)
                            {
                              if (!*(_BYTE *)(v293 + 56))
                                goto LABEL_92;
                              v312 = *(_OWORD *)buf;
                              *(_QWORD *)&buf[8] = 0;
                              *(_QWORD *)buf = 0;
                              v313 = *(std::__shared_weak_count **)(v293 + 40);
                              *(_OWORD *)(v293 + 32) = v312;
                              if (v313)
                              {
                                v314 = (unint64_t *)&v313->__shared_owners_;
                                do
                                  v315 = __ldaxr(v314);
                                while (__stlxr(v315 - 1, v314));
                                if (!v315)
                                {
                                  ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
                                  std::__shared_weak_count::__release_weak(v313);
                                }
                              }
                              *(_QWORD *)(v293 + 48) = *(_QWORD *)&buf[16];
                              if (!(_BYTE)v443)
                                goto LABEL_92;
                              goto LABEL_424;
                            }
                            if (*(_BYTE *)(v293 + 56))
                            {
                              v316 = *(std::__shared_weak_count **)(v293 + 40);
                              if (v316)
                              {
                                v317 = (unint64_t *)&v316->__shared_owners_;
                                do
                                  v318 = __ldaxr(v317);
                                while (__stlxr(v318 - 1, v317));
                                if (!v318)
                                {
                                  ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
                                  std::__shared_weak_count::__release_weak(v316);
                                }
                              }
                              *(_BYTE *)(v293 + 56) = 0;
                              if (!(_BYTE)v443)
                                goto LABEL_92;
LABEL_424:
                              v319 = *(std::__shared_weak_count **)&buf[8];
                              if (*(_QWORD *)&buf[8])
                              {
                                v320 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                                do
                                  v321 = __ldaxr(v320);
                                while (__stlxr(v321 - 1, v320));
                                if (!v321)
                                {
                                  ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
                                  std::__shared_weak_count::__release_weak(v319);
                                }
                              }
                              goto LABEL_92;
                            }
                            *(_OWORD *)(v293 + 32) = *(_OWORD *)buf;
                            *(_QWORD *)&buf[8] = 0;
                            *(_QWORD *)buf = 0;
                            *(_QWORD *)(v293 + 48) = *(_QWORD *)&buf[16];
                            *(_BYTE *)(v293 + 56) = 1;
                            if ((_BYTE)v443)
                              goto LABEL_424;
                          }
LABEL_92:
                          v77 = *(_QWORD *)(v1 + 112);
                          v78 = ++v79;
                          if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(v1 + 120) - v77) >> 3) <= v79)
                            goto LABEL_455;
                          continue;
                        }
LABEL_263:
                        v231 = v458;
                        v232 = v459;
                        if (v459 != v458)
                        {
                          v233 = (_QWORD *)v457;
                          v234 = v460;
                          v235 = v461;
                          if (v456 && *(_BYTE *)(v457 + 17) != 2)
                            (*(void (**)(void))(*(_QWORD *)v456 + 64))();
                          if (v234 && !v235)
                          {
                            v236 = v233[7];
                            v237 = v233[8];
                            if (v237 == v236)
                              v236 = v233[10] - v233[9];
                            if (v231 < v236)
                              v236 = v231;
                            if (v237 <= v232)
                              v237 = v232;
                            if (v237 == v236)
                              v237 = v236 + v233[10] - v233[9];
                            v233[7] = v236;
                            v233[8] = v237;
                          }
                        }
                        goto LABEL_279;
                      }
                    }
                    else
                    {
LABEL_221:
                      v413 = 0uLL;
                      v204 = v464;
                      if (v464)
                        goto LABEL_259;
                    }
                    break;
                  }
                  if (!v462)
                    goto LABEL_279;
                  goto LABEL_263;
                }
LABEL_455:
                v340 = v404;
                if (v404)
                {
                  v341 = (unint64_t *)&v404->__shared_owners_;
                  do
                    v342 = __ldaxr(v341);
                  while (__stlxr(v342 - 1, v341));
                  if (!v342)
                  {
                    ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
                    std::__shared_weak_count::__release_weak(v340);
                  }
                }
                ggl::Mesh::~Mesh((ggl::Mesh *)v401);
                v20 = *(_QWORD *)(v1 + 136);
                v21 = ++v385;
                if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v1 + 144) - v20) >> 4) <= v385)
                  goto LABEL_475;
              }
              v37 = buf;
              v38 = 4;
              goto LABEL_41;
            }
LABEL_475:
            atomic_store(2u, (unsigned __int8 *)v5);
            v354 = *(std::__shared_weak_count **)(v1 + 16);
            v355 = v376;
            v4 = v377;
            if (v354)
            {
              v356 = std::__shared_weak_count::lock(v354);
              if (v356)
              {
                v357 = v356;
                v358 = *(uint64_t **)(v1 + 8);
                if (v358)
                {
                  v359 = *v358;
                  if (*v358)
                  {
                    buf[0] = 10;
                    md::MapEngine::setNeedsTick(v359, buf);
                  }
                }
                v360 = (unint64_t *)&v357->__shared_owners_;
                do
                  v361 = __ldaxr(v360);
                while (__stlxr(v361 - 1, v360));
                if (!v361)
                {
                  ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
                  std::__shared_weak_count::__release_weak(v357);
                }
              }
            }
          }
          if (v355)
          {
            v362 = (unint64_t *)&v355->__shared_owners_;
            do
              v363 = __ldaxr(v362);
            while (__stlxr(v363 - 1, v362));
            if (!v363)
            {
              ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
              std::__shared_weak_count::__release_weak(v355);
            }
          }
          if (v407)
          {
            v364 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v407 + 24))(v407);
            v365 = v407;
            v407 = 0;
            *(_QWORD *)buf = v365;
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v364 + 48))(v364, buf);
            v366 = *(_QWORD *)buf;
            *(_QWORD *)buf = 0;
            if (v366)
              (*(void (**)(uint64_t))(*(_QWORD *)v366 + 8))(v366);
            v367 = v407;
            v407 = 0;
            if (v367)
              (*(void (**)(uint64_t))(*(_QWORD *)v367 + 8))(v367);
          }
          v11 = v375;
        }
        v368 = (unint64_t *)&v11->__shared_owners_;
        do
          v369 = __ldaxr(v368);
        while (__stlxr(v369 - 1, v368));
        if (!v369)
        {
          v370 = v11;
          ((void (*)(void))v11->__on_zero_shared)();
          std::__shared_weak_count::__release_weak(v370);
        }
      }
LABEL_500:
      if (v378)
      {
        v371 = (unint64_t *)&v378->__shared_owners_;
        do
          v372 = __ldaxr(v371);
        while (__stlxr(v372 - 1, v371));
        if (!v372)
        {
          ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
          std::__shared_weak_count::__release_weak(v378);
        }
      }
      goto LABEL_505;
    }
  }
}

void sub_19F3F3A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ggl::BufferMemory *a12, ggl::BufferMemory *a13, std::__shared_weak_count *a14, std::__shared_weak_count *a15, std::__shared_weak_count *a16, std::__shared_weak_count *a17)
{
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;

  if (a15)
  {
    p_shared_owners = (unint64_t *)&a15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
      std::__shared_weak_count::__release_weak(a15);
    }
  }
  ggl::Loader::~Loader((ggl::Loader *)&STACK[0x2B0]);
  v20 = (unint64_t *)&a14->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
    std::__shared_weak_count::__release_weak(a14);
  }
  if (a17)
  {
    v22 = (unint64_t *)&a17->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
      std::__shared_weak_count::__release_weak(a17);
    }
  }
  v24 = (unint64_t *)&a16->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
    std::__shared_weak_count::__release_weak(a16);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void std::vector<md::ClientDrapedMeshes>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v5 = a1[1];
  v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      v12 = 80 * ((80 * a2 - 80) / 0x50) + 80;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 4);
    v8 = v7 + a2;
    if (v7 + a2 > 0x333333333333333)
      abort();
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v6) >> 4);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x199999999999999)
      v10 = 0x333333333333333;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x333333333333333)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v11 = (char *)operator new(80 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[80 * v7];
    v14 = &v11[80 * v10];
    v15 = 80 * ((80 * a2 - 80) / 0x50) + 80;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (v5)
LABEL_25:
        operator delete(v5);
    }
    else
    {
      v17 = 0;
      do
      {
        v19 = &v13[v17];
        v20 = &v5[v17];
        *(v19 - 80) = 0;
        *(v19 - 56) = 0;
        if (v5[v17 - 56])
        {
          v21 = v20 - 80;
          *((_OWORD *)v19 - 5) = *((_OWORD *)v20 - 5);
          *(_QWORD *)v21 = 0;
          *((_QWORD *)v21 + 1) = 0;
          *((_QWORD *)v19 - 8) = *((_QWORD *)v20 - 8);
          *(v19 - 56) = 1;
        }
        *(v19 - 48) = 0;
        *(v19 - 24) = 0;
        if (*(v20 - 24))
        {
          v22 = &v5[v17];
          *((_OWORD *)v19 - 3) = *(_OWORD *)&v5[v17 - 48];
          *((_QWORD *)v22 - 6) = 0;
          *((_QWORD *)v22 - 5) = 0;
          *(_QWORD *)&v13[v17 - 32] = *(_QWORD *)&v5[v17 - 32];
          *(v19 - 24) = 1;
        }
        v18 = &v5[v17];
        *(_OWORD *)&v13[v17 - 16] = *(_OWORD *)&v5[v17 - 16];
        *((_QWORD *)v18 - 2) = 0;
        *((_QWORD *)v18 - 1) = 0;
        v17 -= 80;
      }
      while (&v5[v17] != v6);
      v23 = &v13[v17];
      v5 = *a1;
      v24 = (uint64_t)a1[1];
      *a1 = v23;
      a1[1] = v16;
      a1[2] = v14;
      while ((char *)v24 != v5)
      {
        v24 -= 80;
        std::__destroy_at[abi:nn180100]<md::ClientDrapedMeshes,0>(v24);
      }
      if (v5)
        goto LABEL_25;
    }
  }
}

void std::__destroy_at[abi:nn180100]<md::ClientDrapedMeshes,0>(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*(_BYTE *)(a1 + 56))
      goto LABEL_12;
  }
  else
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 56))
      goto LABEL_12;
  }
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_12:
  if (*(_BYTE *)(a1 + 24))
  {
    v8 = *(std::__shared_weak_count **)(a1 + 8);
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void md::DrapingLogic::drapeStrokeMesh(uint64_t a1, _QWORD *a2, _QWORD *a3, char *a4, _QWORD *a5, char *a6, uint64_t a7, float a8, float a9)
{
  uint64_t *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void **v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  void **p_p;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  char v70;
  char v71;
  double v72;
  int v73;
  int v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  double v93;
  int v94;
  int v95;
  std::__shared_weak_count *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  char v105;
  int v106;
  int v107;
  char v108;
  int v109;
  int v110;
  char v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t *v123;
  unint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  std::__shared_weak_count *v156;
  int64_t v157;
  std::__shared_weak_count *v158;
  std::__shared_count v159;
  unsigned __int8 v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  uint64_t *v170;
  unint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  uint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  char *v189;
  unint64_t v190;
  uint64_t v191;
  size_t v192;
  char *v193;
  char *v194;
  std::__shared_weak_count *v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  NSObject *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  std::__shared_weak_count *v208;
  std::__shared_weak_count *v209;
  std::__shared_weak_count *v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  _QWORD *v216;
  int v217;
  int v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  _QWORD *v223;
  int v224;
  int v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  _QWORD *v230;
  int v231;
  int v232;
  unint64_t v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  std::__shared_weak_count *v236;
  _QWORD *v237;
  int v238;
  int v239;
  std::__shared_weak_count *v240;
  std::__shared_weak_count *v241;
  std::__shared_weak_count *v242;
  uint64_t *v243;
  unint64_t v244;
  double v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  NSObject *v249;
  int v250;
  void **v251;
  void **v252;
  void *v253;
  unint64_t v254;
  void **v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  void **v259;
  uint64_t v260;
  unint64_t *v261;
  unint64_t v262;
  void *v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  unsigned __int8 v267;
  uint64_t p_shared_weak_owners;
  unsigned __int8 v269;
  uint64_t v270;
  unint64_t *v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *shared_owners;
  unint64_t *v277;
  unint64_t v278;
  unint64_t *v279;
  unint64_t v280;
  unsigned __int8 v281;
  int v282;
  uint64_t v283;
  geo::read_write_lock *v284;
  const char *v285;
  malloc_zone_t *zone;
  uint64_t v287;
  int v288;
  uint64_t v289;
  geo::read_write_lock *v290;
  const char *v291;
  malloc_zone_t *v292;
  int v293;
  uint64_t v294;
  int v295;
  char v296;
  int v297;
  int v298;
  char v299;
  uint64_t v300;
  uint64_t v301;
  std::chrono::steady_clock::time_point v302;
  uint64_t v303;
  _QWORD *v305;
  char *v306;
  char *v308;
  __int16 v309[2];
  uint64_t v310;
  void *v311;
  std::__shared_weak_count *v312;
  char v313;
  __int16 v314[2];
  uint64_t v315;
  uint64_t v316;
  int v317;
  uint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t v320;
  uint64_t v321[2];
  uint64_t v322;
  std::__shared_weak_count *v323;
  __int128 v324;
  uint64_t v325;
  std::__shared_weak_count *v326;
  char v327;
  char v328;
  int v329;
  int v330;
  char v331;
  char v332;
  int v333;
  int v334;
  uint64_t v335;
  std::__shared_weak_count *v336;
  uint64_t v337;
  std::__shared_weak_count *v338;
  __int128 v339;
  __int16 v340;
  uint64_t v341[2];
  void *v342;
  std::__shared_weak_count *v343;
  void **v344;
  uint64_t v345;
  std::__shared_weak_count *v346;
  _QWORD *v347;
  std::__shared_weak_count *v348;
  uint64_t v349;
  __int16 v350;
  _BYTE v351[64];
  uint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  std::__shared_weak_count *v356;
  uint64_t v357;
  void *__p;
  std::__shared_weak_count *v359;
  uint64_t v360;
  void **v361;
  _BYTE buf[24];
  std::__shared_weak_count *v363;
  __int128 v364;
  std::__shared_weak_count *v365;
  __int128 v366;
  unint64_t v367;
  unsigned __int8 v368;
  unsigned __int8 v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unsigned __int8 v375;
  unsigned __int8 v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unsigned __int8 v382;
  unsigned __int8 v383;
  uint64_t v384;
  _QWORD *v385;
  std::__shared_weak_count *v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;

  v389 = *MEMORY[0x1E0C80C00];
  v302.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v16 = (uint64_t *)a5[8];
  v18 = (_QWORD *)*v16;
  v17 = (std::__shared_weak_count *)v16[1];
  v318 = *v16;
  v319 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  v305 = a2;
  v306 = a4;
  v303 = a7;
  v308 = a6;
  v22 = v18[5];
  v21 = v18[6];
  v23 = v18[1];
  v24 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v24->__shared_owners_ = 0;
  v25 = (unint64_t *)&v24->__shared_owners_;
  v24->__shared_weak_owners_ = 0;
  v24->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E01A8;
  v26 = (v21 - v22) / v23;
  ggl::BufferData::BufferData((uint64_t)&v24[1], 16, 0, 0, 6, v26);
  v24[9].__shared_weak_owners_ = (uint64_t)"BakedRibbonVertexData";
  v24[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::PolylineOverlayRibbon::bakedWidthVboReflection;
  v24[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B7EE0;
  v24[9].__shared_owners_ = (uint64_t)&unk_1E42B7F00;
  v311 = &v24[1];
  v312 = v24;
  *(float *)&v316 = a8 * 8.0001;
  *((float *)&v316 + 1) = a9 * 8.0001;
  *(_QWORD *)buf = v18;
  *(_QWORD *)&buf[8] = v17;
  if (v17)
  {
    v27 = (unint64_t *)&v17->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  *(_QWORD *)&buf[16] = v24 + 1;
  v363 = v24;
  do
    v29 = __ldxr(v25);
  while (__stxr(v29 + 1, v25));
  v30 = (void *)a5[12];
  v31 = (std::__shared_weak_count *)a5[13];
  *(_QWORD *)&v364 = v26;
  *((_QWORD *)&v364 + 1) = v30;
  v365 = v31;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  *(_QWORD *)&v366 = &v316;
  v361 = 0;
  v34 = (void **)operator new(0x48uLL);
  *v34 = &off_1E42C7430;
  v34[1] = v18;
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)buf = 0;
  v34[2] = v17;
  v34[3] = &v24[1];
  *(_QWORD *)&buf[16] = 0;
  v363 = 0;
  v34[4] = v24;
  v34[5] = (void *)v26;
  v34[6] = v30;
  v34[7] = v31;
  if (v31)
  {
    v35 = (unint64_t *)&v31->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v34[8] = &v316;
  v361 = v34;
  v356 = 0;
  v355 = 0;
  v37 = a2;
  (*(void (**)(_QWORD, void **, uint64_t *))(*(_QWORD *)*a2 + 16))(*a2, &__p, &v355);
  v38 = v356;
  if (v356)
  {
    v39 = (unint64_t *)&v356->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  p_p = v361;
  if (v361 == &__p)
  {
    v42 = 4;
    p_p = &__p;
    goto LABEL_24;
  }
  if (v361)
  {
    v42 = 5;
LABEL_24:
    (*((void (**)(void))*p_p + v42))();
  }
  v43 = v365;
  if (v365)
  {
    v44 = (unint64_t *)&v365->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v363;
  if (v363)
  {
    v47 = (unint64_t *)&v363->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v50 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  __p = v311;
  v359 = v312;
  if (v312)
  {
    v52 = &v312->__shared_owners_;
    do
      v53 = __ldxr((unint64_t *)v52);
    while (__stxr(v53 + 1, (unint64_t *)v52));
  }
  v54 = (std::__shared_weak_count *)a5[13];
  v355 = a5[12];
  v356 = v54;
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
    ggl::PolylineOverlayRibbon::BakedWidthMesh::BakedWidthMesh((uint64_t)v351, (uint64_t)"baked ribbon mesh", (uint64_t *)&__p, &v355);
    do
      v57 = __ldaxr(v55);
    while (__stlxr(v57 - 1, v55));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  else
  {
    ggl::PolylineOverlayRibbon::BakedWidthMesh::BakedWidthMesh((uint64_t)v351, (uint64_t)"baked ribbon mesh", (uint64_t *)&__p, &v355);
  }
  v58 = v359;
  if (v359)
  {
    v59 = (unint64_t *)&v359->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (v312)
  {
    v61 = &v312->__shared_owners_;
    do
      v62 = __ldaxr((unint64_t *)v61);
    while (__stlxr(v62 - 1, (unint64_t *)v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
      std::__shared_weak_count::__release_weak(v312);
    }
  }
  v63 = v319;
  if (v319)
  {
    v64 = (unint64_t *)&v319->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = v352;
  v67 = (*(_QWORD *)(*v352 + 48) - *(_QWORD *)(*v352 + 40)) / *(_QWORD *)(*v352 + 8);
  v68 = v306[1];
  v69 = v308[1];
  v70 = v68 - v69;
  if (v68 < v69)
  {
    v71 = v69 - v68;
    LOBYTE(v311) = v69 - v68;
    __powidf2();
    WORD1(v311) = (int)v72;
    v73 = *((_DWORD *)v306 + 1);
    v74 = *((_DWORD *)v308 + 1);
    WORD2(v311) = *((_DWORD *)v308 + 2) - (*((_DWORD *)v306 + 2) << v71);
    HIWORD(v311) = v74 - ((_WORD)v73 << v71);
    v75 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v75->__shared_owners_ = 0;
    v76 = (unint64_t *)&v75->__shared_owners_;
    v75->__shared_weak_owners_ = 0;
    v75->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E01A8;
    ggl::BufferData::BufferData((uint64_t)&v75[1], 16, 0, 0, 6, v67);
    v75[9].__shared_weak_owners_ = (uint64_t)"OverlayTransformedVertexData";
    v75[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::PolylineOverlayRibbon::bakedWidthVboReflection;
    v75[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B7EE0;
    v75[9].__shared_owners_ = (uint64_t)&unk_1E42B7F00;
    __p = &v75[1];
    v359 = v75;
    v344 = &v311;
    v77 = *v66;
    v345 = *v66;
    v78 = (std::__shared_weak_count *)v66[1];
    v346 = v78;
    if (v78)
    {
      v79 = (unint64_t *)&v78->__shared_owners_;
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
    }
    v347 = &v75[1].__vftable;
    v348 = v75;
    do
      v81 = __ldxr(v76);
    while (__stxr(v81 + 1, v76));
    v349 = v67;
    v350 = -1;
    v363 = 0;
    v82 = operator new(0x40uLL);
    *v82 = &off_1E42C9050;
    v82[1] = &v311;
    v82[2] = v77;
    v82[3] = v78;
    if (v78)
    {
      v83 = (unint64_t *)&v78->__shared_owners_;
      do
        v84 = __ldxr(v83);
      while (__stxr(v84 + 1, v83));
    }
    v82[4] = v75 + 1;
    v82[5] = v75;
    v347 = 0;
    v348 = 0;
    v82[6] = v349;
    *((_WORD *)v82 + 28) = v350;
    v363 = (std::__shared_weak_count *)v82;
    v318 = 0;
    v319 = 0;
    (*(void (**)(_QWORD, _BYTE *, uint64_t *))(*(_QWORD *)*v305 + 16))(*v305, buf, &v318);
    v85 = v319;
    if (v319)
    {
      v86 = (unint64_t *)&v319->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    v88 = &v363->__vftable;
    if (v363 == (std::__shared_weak_count *)buf)
    {
      v89 = 4;
      v88 = buf;
    }
    else
    {
      if (!v363)
        goto LABEL_111;
      v89 = 5;
    }
    (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_111:
    v127 = v348;
    if (v348)
    {
      v128 = (unint64_t *)&v348->__shared_owners_;
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 - 1, v128));
      if (!v129)
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
    }
    v130 = v346;
    if (v346)
    {
      v131 = (unint64_t *)&v346->__shared_owners_;
      do
        v132 = __ldaxr(v131);
      while (__stlxr(v132 - 1, v131));
      if (!v132)
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
    }
    v342 = __p;
    v343 = v359;
    if (v359)
    {
      v133 = (unint64_t *)&v359->__shared_owners_;
      do
        v134 = __ldxr(v133);
      while (__stxr(v134 + 1, v133));
    }
    v135 = (std::__shared_weak_count *)v354;
    v341[0] = v353;
    v341[1] = v354;
    if (v354)
    {
      v136 = (unint64_t *)(v354 + 8);
      do
        v137 = __ldxr(v136);
      while (__stxr(v137 + 1, v136));
    }
    ggl::PolylineOverlayRibbon::BakedWidthMesh::BakedWidthMesh((uint64_t)buf, (uint64_t)"transformed OverlayMesh", (uint64_t *)&v342, v341);
    ggl::Mesh::operator=((uint64_t)v351, (uint64_t)buf);
    ggl::Mesh::~Mesh((ggl::Mesh *)buf);
    if (v135)
    {
      v138 = (unint64_t *)&v135->__shared_owners_;
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
        std::__shared_weak_count::__release_weak(v135);
      }
    }
    v140 = v343;
    if (v343)
    {
      v141 = (unint64_t *)&v343->__shared_owners_;
      do
        v142 = __ldaxr(v141);
      while (__stlxr(v142 - 1, v141));
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
        std::__shared_weak_count::__release_weak(v140);
      }
    }
    v143 = v359;
    if (v359)
    {
      v144 = (unint64_t *)&v359->__shared_owners_;
      do
        v145 = __ldaxr(v144);
      while (__stlxr(v145 - 1, v144));
      if (!v145)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
    }
    goto LABEL_201;
  }
  if (v69 >= v68)
    goto LABEL_201;
  v91 = *(_QWORD *)(v353 + 40);
  v90 = *(_QWORD *)(v353 + 48);
  v92 = *(_QWORD *)(v353 + 8);
  LOBYTE(v316) = v68 - v69;
  __powidf2();
  WORD1(v316) = (int)v93;
  v94 = *((_DWORD *)v308 + 1);
  v95 = *((_DWORD *)v306 + 1);
  WORD2(v316) = *((_DWORD *)v306 + 2) - (*((_DWORD *)v308 + 2) << v70);
  HIWORD(v316) = v95 - ((_WORD)v94 << v70);
  v96 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v97 = v90 - v91;
  v96->__shared_owners_ = 0;
  v98 = (unint64_t *)&v96->__shared_owners_;
  v96->__shared_weak_owners_ = 0;
  v96->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E01A8;
  v99 = v97 / v92;
  v100 = ggl::BufferData::BufferData((uint64_t)&v96[1], 16, 0, 0, 6, v67);
  v96[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B7EE0;
  v96[9].__shared_weak_owners_ = (uint64_t)"OverlayTransformedVertexData";
  v96[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::PolylineOverlayRibbon::bakedWidthVboReflection;
  v96[9].__shared_owners_ = (uint64_t)&unk_1E42B7F00;
  v301 = v100;
  v318 = v100;
  v319 = v96;
  v359 = 0;
  __p = 0;
  v360 = 0;
  if (v92 <= v97)
  {
    if ((v99 & 0x8000000000000000) != 0)
      abort();
    __p = operator new(2 * v99);
    v359 = (std::__shared_weak_count *)__p;
    v360 = (uint64_t)__p + 2 * v99;
  }
  *(_QWORD *)&v324 = &v316;
  *((_QWORD *)&v324 + 1) = &__p;
  v101 = v354;
  v300 = v353;
  v325 = v353;
  v326 = (std::__shared_weak_count *)v354;
  if (v354)
  {
    v102 = (unint64_t *)(v354 + 8);
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
  }
  v104 = v97 / v92;
  v105 = v306[1];
  v106 = *((_DWORD *)v306 + 1);
  v107 = *((_DWORD *)v306 + 2);
  v108 = *v306;
  v327 = *v306;
  v298 = v106;
  v299 = v105;
  v328 = v105;
  v329 = v106;
  v297 = v107;
  v330 = v107;
  LOBYTE(v106) = v308[1];
  v109 = *((_DWORD *)v308 + 1);
  v110 = *((_DWORD *)v308 + 2);
  v111 = *v308;
  v331 = *v308;
  v295 = v109;
  v296 = v106;
  v332 = v106;
  v333 = v109;
  v334 = v110;
  v112 = *v66;
  v335 = *v66;
  v113 = (std::__shared_weak_count *)v66[1];
  v336 = v113;
  if (v113)
  {
    v114 = (unint64_t *)&v113->__shared_owners_;
    do
      v115 = __ldxr(v114);
    while (__stxr(v115 + 1, v114));
  }
  v337 = v301;
  v338 = v96;
  do
    v116 = __ldxr(v98);
  while (__stxr(v116 + 1, v98));
  *(_QWORD *)&v339 = v67;
  *((_QWORD *)&v339 + 1) = v104;
  v340 = -1;
  v363 = 0;
  v117 = (char *)operator new(0x90uLL);
  *(_QWORD *)v117 = &off_1E42C9098;
  *(_OWORD *)(v117 + 8) = v324;
  *((_QWORD *)v117 + 3) = v300;
  *((_QWORD *)v117 + 4) = v101;
  if (v101)
  {
    v118 = (unint64_t *)(v101 + 8);
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
  }
  v117[40] = v108;
  v117[41] = v299;
  *((_DWORD *)v117 + 11) = v298;
  *((_DWORD *)v117 + 12) = v297;
  v117[64] = v111;
  v117[65] = v296;
  *((_DWORD *)v117 + 17) = v295;
  *((_DWORD *)v117 + 18) = v110;
  *((_QWORD *)v117 + 11) = v112;
  *((_QWORD *)v117 + 12) = v113;
  if (v113)
  {
    v120 = (unint64_t *)&v113->__shared_owners_;
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 1, v120));
  }
  *((_QWORD *)v117 + 13) = v301;
  *((_QWORD *)v117 + 14) = v96;
  v337 = 0;
  v338 = 0;
  *(_OWORD *)(v117 + 120) = v339;
  *((_WORD *)v117 + 68) = v340;
  v363 = (std::__shared_weak_count *)v117;
  v311 = 0;
  v312 = 0;
  v37 = v305;
  (*(void (**)(_QWORD, _BYTE *, void **))(*(_QWORD *)*v305 + 16))(*v305, buf, &v311);
  v122 = v312;
  if (v312)
  {
    v123 = &v312->__shared_owners_;
    do
      v124 = __ldaxr((unint64_t *)v123);
    while (__stlxr(v124 - 1, (unint64_t *)v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = &v363->__vftable;
  if (v363 == (std::__shared_weak_count *)buf)
  {
    v126 = 4;
    v125 = buf;
    goto LABEL_143;
  }
  if (v363)
  {
    v126 = 5;
LABEL_143:
    (*(void (**)(void))(*v125 + 8 * v126))();
  }
  v146 = v338;
  if (v338)
  {
    v147 = (unint64_t *)&v338->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = v336;
  if (v336)
  {
    v150 = (unint64_t *)&v336->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = v326;
  if (v326)
  {
    v153 = (unint64_t *)&v326->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = v359;
  v156 = (std::__shared_weak_count *)__p;
  v157 = (char *)v359 - (_BYTE *)__p;
  if (v359 == __p)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    v166 = v155;
    if (!v155)
      goto LABEL_196;
    goto LABEL_195;
  }
  v158 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v158->__shared_owners_ = 0;
  v158->__shared_weak_owners_ = 0;
  v158[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
  v158->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5228;
  v158[1].__shared_owners_ = 2;
  LODWORD(v158[1].__shared_weak_owners_) = 257;
  v158[2].__vftable = 0;
  v158[2].__shared_owners_ = 0;
  v158[2].__shared_weak_owners_ = 0;
  v158[3].__vftable = (std::__shared_weak_count_vtbl *)v157;
  v159 = (std::__shared_count)0;
  *(_OWORD *)&v158[3].__shared_owners_ = 0u;
  v158[4].std::__shared_count = 0u;
  v158[4].__shared_weak_owners_ = 0;
  if ((v160 & 1) == 0)
  {
    v159 = (std::__shared_count)0;
    if (v293)
    {
      v294 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v294, "GeoGL", 0xA3D02C1100000005);
      v159 = (std::__shared_count)0;
    }
  }
  v158[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
  v158[5].__shared_owners_ = 0;
  *((std::__shared_count *)v158 + 11) = v159;
  v158[8].std::__shared_count = v159;
  v158[8].__shared_weak_owners_ = 0;
  v158[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
  v158[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
  *((std::__shared_count *)v158 + 10) = v159;
  LODWORD(v158[5].__shared_weak_owners_) = 0;
  v158[9].__shared_owners_ = (uint64_t)&unk_1E42BD118;
  v158[9].__shared_weak_owners_ = (uint64_t)"OverlayTransformedIndexData";
  LODWORD(v158[10].__vftable) = 0;
  v158[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BD0F8;
  v158[1].__shared_owners_ = 2;
  v311 = &v158[1];
  v312 = v158;
  *(_QWORD *)buf = &off_1E42C90E0;
  *(_QWORD *)&buf[8] = &v311;
  *(_QWORD *)&buf[16] = &__p;
  v363 = (std::__shared_weak_count *)buf;
  v356 = 0;
  v355 = 0;
  (*(void (**)(_QWORD, _BYTE *, uint64_t *))(*(_QWORD *)*v305 + 16))(*v305, buf, &v355);
  v161 = v356;
  if (v356)
  {
    v162 = (unint64_t *)&v356->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = &v363->__vftable;
  if (v363 == (std::__shared_weak_count *)buf)
  {
    v165 = 4;
    v164 = buf;
  }
  else
  {
    if (!v363)
      goto LABEL_173;
    v165 = 5;
  }
  (*(void (**)(void))(*v164 + 8 * v165))();
LABEL_173:
  v322 = v318;
  v323 = v319;
  if (v319)
  {
    v167 = (unint64_t *)&v319->__shared_owners_;
    do
      v168 = __ldxr(v167);
    while (__stxr(v168 + 1, v167));
  }
  v169 = v312;
  v321[0] = (uint64_t)v311;
  v321[1] = (uint64_t)v312;
  if (v312)
  {
    v170 = &v312->__shared_owners_;
    do
      v171 = __ldxr((unint64_t *)v170);
    while (__stxr(v171 + 1, (unint64_t *)v170));
  }
  ggl::PolylineOverlayRibbon::BakedWidthMesh::BakedWidthMesh((uint64_t)buf, (uint64_t)"transformed OverlayMesh", &v322, v321);
  ggl::Mesh::operator=((uint64_t)v351, (uint64_t)buf);
  ggl::Mesh::~Mesh((ggl::Mesh *)buf);
  if (v169)
  {
    v172 = (unint64_t *)&v169->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v174 = v323;
  if (v323)
  {
    v175 = (unint64_t *)&v323->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  v177 = v312;
  if (v312)
  {
    v178 = &v312->__shared_owners_;
    do
      v179 = __ldaxr((unint64_t *)v178);
    while (__stlxr(v179 - 1, (unint64_t *)v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v166 = (std::__shared_weak_count *)__p;
  if (__p)
  {
LABEL_195:
    v359 = v166;
    operator delete(v166);
  }
LABEL_196:
  v180 = v319;
  if (!v319)
    goto LABEL_200;
  v181 = (unint64_t *)&v319->__shared_owners_;
  do
    v182 = __ldaxr(v181);
  while (__stlxr(v182 - 1, v181));
  if (!v182)
  {
    ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
    std::__shared_weak_count::__release_weak(v180);
    if (v155 == v156)
      goto LABEL_309;
  }
  else
  {
LABEL_200:
    if (v155 == v156)
      goto LABEL_309;
  }
LABEL_201:
  v318 = 0;
  v319 = 0;
  v320 = __PAIR64__(LODWORD(a9), LODWORD(a8));
  v357 = a3[22];
  v184 = *(_QWORD *)(v353 + 40);
  v183 = *(_QWORD *)(v353 + 48);
  v185 = *(_QWORD *)(v353 + 8);
  v187 = *(_QWORD *)(*v352 + 40);
  v186 = *(_QWORD *)(*v352 + 48);
  v188 = *(_QWORD *)(*v352 + 8);
  v189 = (char *)operator new(0x98uLL);
  v190 = (v183 - v184) / v185;
  *((_QWORD *)v189 + 1) = 0;
  *((_QWORD *)v189 + 2) = 0;
  *(_QWORD *)v189 = &off_1E42DE260;
  *(_OWORD *)(v189 + 24) = 0u;
  *(_QWORD *)buf = &off_1E42C70D0;
  *(_QWORD *)&buf[8] = gdc::DCEL::defaultWarningHandler;
  v363 = (std::__shared_weak_count *)buf;
  *(_OWORD *)(v189 + 40) = 0u;
  *(_OWORD *)(v189 + 56) = 0u;
  *(_OWORD *)(v189 + 72) = 0u;
  *((_QWORD *)v189 + 11) = 0;
  v191 = ((v186 - v187) / v188);
  if (((v186 - v187) / v188))
  {
    v192 = 4 * v191;
    v193 = (char *)operator new(4 * v191);
    *((_QWORD *)v189 + 9) = v193;
    v194 = &v193[v192];
    *((_QWORD *)v189 + 11) = &v193[v192];
    memset(v193, 255, v192);
    *((_QWORD *)v189 + 10) = v194;
  }
  *((_QWORD *)v189 + 15) = v189 + 96;
  std::__function::__func<void (*)(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int),std::allocator<void (*)(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int)>,void ()(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int)>::__clone((uint64_t)buf, (_QWORD *)v189 + 12);
  *((_QWORD *)v189 + 16) = 0;
  *((_QWORD *)v189 + 17) = 0;
  *((_QWORD *)v189 + 18) = 0;
  v311 = v189 + 24;
  v312 = (std::__shared_weak_count *)v189;
  gdc::DCEL::reserveFaces((gdc::DCEL *)(v189 + 24), v190 / 3);
  v195 = (std::__shared_weak_count *)operator new(0x30uLL);
  v195->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42CE390;
  v195->__shared_owners_ = (uint64_t)&v311;
  v195->__shared_weak_owners_ = (uint64_t)&v353;
  v195[1].__vftable = 0;
  v195[1].__shared_owners_ = v190;
  v195[1].__shared_weak_owners_ = v190;
  v363 = v195;
  v359 = 0;
  __p = 0;
  (*(void (**)(_QWORD, _BYTE *, void **))(*(_QWORD *)*v37 + 16))(*v37, buf, &__p);
  v196 = v359;
  if (v359)
  {
    v197 = (unint64_t *)&v359->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  v199 = &v363->__vftable;
  if (v363 == (std::__shared_weak_count *)buf)
  {
    v200 = 4;
    v199 = buf;
  }
  else
  {
    if (!v363)
      goto LABEL_213;
    v200 = 5;
  }
  (*(void (**)(void))(*v199 + 8 * v200))();
LABEL_213:
  if (((*((_QWORD *)v311 + 4) - *((_QWORD *)v311 + 3)) >> 2) != (v190 / 3))
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v201 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v201, OS_LOG_TYPE_ERROR))
    {
      v202 = (*((_QWORD *)v311 + 4) - *((_QWORD *)v311 + 3)) >> 2;
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v202;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v190 / 3;
      _os_log_impl(&dword_19F029000, v201, OS_LOG_TYPE_ERROR, "face count does not match (%d to %d)", buf, 0xEu);
    }

  }
  v204 = *(_QWORD *)(v353 + 40);
  v203 = *(_QWORD *)(v353 + 48);
  v205 = *(_QWORD *)(v353 + 8);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  *((_QWORD *)&v364 + 1) = 0;
  v365 = 0;
  *(_QWORD *)&v366 = 0;
  v370 = 0;
  v372 = 0;
  v371 = 0;
  v384 = 0;
  v379 = 0;
  v377 = 0;
  v378 = 0;
  v206 = operator new();
  v207 = (_QWORD *)ggl::BufferData::BufferData(v206, 16, 0, 0, 6, (v203 - v204) / v205);
  v207[26] = "OverlayVertexData";
  v207[27] = &ggl::PolylineOverlayRibbon::elevatedVboReflection;
  *v207 = &off_1E42B7EA0;
  v207[25] = &unk_1E42B7EC0;
  v385 = v207;
  v208 = (std::__shared_weak_count *)operator new();
  v208->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E7918;
  v208->__shared_owners_ = 0;
  v208->__shared_weak_owners_ = 0;
  v208[1].__vftable = (std::__shared_weak_count_vtbl *)v206;
  v386 = v208;
  v387 = (v203 - v204) / v205;
  v388 = 0;
  if (*(_DWORD *)(v353 + 216))
  {
    v209 = 0;
    v210 = 0;
    v317 = 0;
    v316 = 0;
    goto LABEL_221;
  }
  v255 = (void **)operator new(0x40uLL);
  *v255 = &off_1E42C83A8;
  v255[1] = a3;
  v255[2] = buf;
  v255[3] = v351;
  v255[4] = a3 + 20;
  v255[5] = &v357;
  v255[6] = &v311;
  v255[7] = &v316;
  v361 = v255;
  v356 = 0;
  v355 = 0;
  (*(void (**)(_QWORD, void **, uint64_t *))(*(_QWORD *)*v37 + 16))(*v37, &__p, &v355);
  v256 = v356;
  if (v356)
  {
    v257 = (unint64_t *)&v356->__shared_owners_;
    do
      v258 = __ldaxr(v257);
    while (__stlxr(v258 - 1, v257));
    if (!v258)
    {
      ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
      std::__shared_weak_count::__release_weak(v256);
    }
  }
  v259 = v361;
  if (v361 == &__p)
  {
    v260 = 4;
    v259 = &__p;
  }
  else
  {
    if (!v361)
      goto LABEL_327;
    v260 = 5;
  }
  (*((void (**)(void))*v259 + v260))();
LABEL_327:
  if (v388)
  {
    v263 = v385;
    v264 = v386;
    if (v386)
    {
      v265 = (unint64_t *)&v386->__shared_owners_;
      do
        v266 = __ldxr(v265);
      while (__stxr(v266 + 1, v265));
    }
    v210 = (std::__shared_weak_count *)operator new(0xA8uLL);
    v210->__shared_owners_ = 0;
    v210->__shared_weak_owners_ = 0;
    v210->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3A50;
    if ((v267 & 1) == 0
    {
      if ((v281 & 1) == 0
      {
        ggl::MeshTyped<ggl::PolylineOverlayRibbon::ElevatedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolylineOverlayRibbon::elevatedVboReflection;
      }
      ggl::MeshTyped<ggl::PolylineOverlayRibbon::ElevatedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolylineOverlayRibbon::ElevatedVbo>::attributesReflection(void)::r;
      unk_1EE5894A0 = 1;
    }
    v210[3].__shared_weak_owners_ = 0;
    p_shared_weak_owners = (uint64_t)&v210[3].__shared_weak_owners_;
    v210[2].__shared_owners_ = 0;
    v210[2].__shared_weak_owners_ = 0;
    LODWORD(v210[3].__vftable) = 0;
    v210[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BBC08;
    v210[1].__shared_owners_ = (uint64_t)"overlaid mesh";
    v210[1].__shared_weak_owners_ = (uint64_t)&unk_1E42BBC28;
    v210[2].__vftable = 0;
    v210[3].__shared_owners_ = (uint64_t)&ggl::MeshTyped<ggl::PolylineOverlayRibbon::ElevatedVbo>::typedReflection(void)::r;
    v210[4].__vftable = 0;
    v210[4].__shared_owners_ = 0;
    if ((v269 & 1) == 0)
    {
      p_shared_weak_owners = (uint64_t)&v210[3].__shared_weak_owners_;
      if (v282)
      {
        v283 = operator new();
        *(_QWORD *)(v283 + 16) = 0xA3D02C1100000005;
        *(_QWORD *)(v283 + 24) = "GeoGL";
        *(_OWORD *)(v283 + 32) = xmmword_19FFB2DE0;
        *(_QWORD *)v283 = &off_1E42B5668;
        *(_QWORD *)(v283 + 8) = "GeoGL";
        *(_OWORD *)(v283 + 72) = 0u;
        *(_OWORD *)(v283 + 88) = 0u;
        *(_OWORD *)(v283 + 104) = 0u;
        *(_OWORD *)(v283 + 120) = 0u;
        *(_OWORD *)(v283 + 136) = 0u;
        *(_OWORD *)(v283 + 152) = 0u;
        *(_OWORD *)(v283 + 168) = 0u;
        *(_OWORD *)(v283 + 184) = 0u;
        *(_OWORD *)(v283 + 200) = 0u;
        *(_OWORD *)(v283 + 216) = 0u;
        *(_OWORD *)(v283 + 232) = 0u;
        *(_QWORD *)(v283 + 248) = 0;
        *(_OWORD *)(v283 + 56) = 0u;
        v284 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v283 + 56), 0);
        if ((_DWORD)v284)
          geo::read_write_lock::logFailure(v284, (uint64_t)"initialization", v285);
        zone = malloc_create_zone(0, 0);
        *(_QWORD *)(v283 + 48) = zone;
        malloc_set_zone_name(zone, "GeoGL");
        *(_QWORD *)(v283 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        ggl::Allocator::instance(void)::alloc = v283;
        p_shared_weak_owners = (uint64_t)&v210[3].__shared_weak_owners_;
      }
    }
    v270 = ggl::Allocator::instance(void)::alloc;
    v210[6].__vftable = 0;
    v210[5].__vftable = 0;
    v210[5].__shared_owners_ = 0;
    v210[4].__shared_weak_owners_ = v270;
    if ((v270 & 1) == 0)
    {
      v287 = p_shared_weak_owners;
      p_shared_weak_owners = v287;
      if (v288)
      {
        v289 = operator new();
        *(_QWORD *)(v289 + 16) = 0xA3D02C1100000005;
        *(_QWORD *)(v289 + 24) = "GeoGL";
        *(_OWORD *)(v289 + 32) = xmmword_19FFB2DE0;
        *(_QWORD *)v289 = &off_1E42B5668;
        *(_QWORD *)(v289 + 8) = "GeoGL";
        *(_OWORD *)(v289 + 72) = 0u;
        *(_OWORD *)(v289 + 88) = 0u;
        *(_OWORD *)(v289 + 104) = 0u;
        *(_OWORD *)(v289 + 120) = 0u;
        *(_OWORD *)(v289 + 136) = 0u;
        *(_OWORD *)(v289 + 152) = 0u;
        *(_OWORD *)(v289 + 168) = 0u;
        *(_OWORD *)(v289 + 184) = 0u;
        *(_OWORD *)(v289 + 200) = 0u;
        *(_OWORD *)(v289 + 216) = 0u;
        *(_OWORD *)(v289 + 232) = 0u;
        *(_QWORD *)(v289 + 248) = 0;
        *(_OWORD *)(v289 + 56) = 0u;
        v290 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v289 + 56), 0);
        if ((_DWORD)v290)
          geo::read_write_lock::logFailure(v290, (uint64_t)"initialization", v291);
        v292 = malloc_create_zone(0, 0);
        *(_QWORD *)(v289 + 48) = v292;
        malloc_set_zone_name(v292, "GeoGL");
        *(_QWORD *)(v289 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        ggl::Allocator::instance(void)::alloc = v289;
        p_shared_weak_owners = v287;
      }
    }
    v210[6].__shared_owners_ = ggl::Allocator::instance(void)::alloc;
    v210[6].__shared_weak_owners_ = 0;
    v210[5].__shared_weak_owners_ = (uint64_t)&v210[6];
    v210[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BDB38;
    v210[1].__shared_weak_owners_ = (uint64_t)&unk_1E42BDB58;
    __p = v263;
    v359 = v264;
    if (v264)
    {
      v271 = (unint64_t *)&v264->__shared_owners_;
      do
        v272 = __ldxr(v271);
      while (__stxr(v272 + 1, v271));
    }
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(p_shared_weak_owners, (uint64_t *)&__p, &v360, 1uLL);
    v273 = v359;
    if (v359)
    {
      v274 = (unint64_t *)&v359->__shared_owners_;
      do
        v275 = __ldaxr(v274);
      while (__stlxr(v275 - 1, v274));
      if (!v275)
      {
        ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
        std::__shared_weak_count::__release_weak(v273);
      }
    }
    v209 = v210 + 1;
    shared_owners = (std::__shared_weak_count *)v210[5].__shared_owners_;
    v210[5].__vftable = 0;
    v210[5].__shared_owners_ = 0;
    if (shared_owners)
    {
      v277 = (unint64_t *)&shared_owners->__shared_owners_;
      do
        v278 = __ldaxr(v277);
      while (__stlxr(v278 - 1, v277));
      if (!v278)
      {
        ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
        std::__shared_weak_count::__release_weak(shared_owners);
      }
    }
    v210[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BADE0;
    v210[1].__shared_weak_owners_ = (uint64_t)&unk_1E42BAE00;
    if (v264)
    {
      v279 = (unint64_t *)&v264->__shared_owners_;
      do
        v280 = __ldaxr(v279);
      while (__stlxr(v280 - 1, v279));
      if (!v280)
      {
        ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
        std::__shared_weak_count::__release_weak(v264);
      }
    }
  }
  else
  {
    v209 = 0;
    v210 = 0;
  }
LABEL_221:
  v211 = v386;
  if (v386)
  {
    v212 = (unint64_t *)&v386->__shared_owners_;
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }
  if (v384)
  {
    v214 = v380;
    v215 = v381;
    if (v381 != v380)
    {
      v216 = (_QWORD *)v379;
      v217 = v382;
      v218 = v383;
      if (v378 && *(_BYTE *)(v379 + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v378 + 64))();
      if (v217 && !v218)
      {
        v220 = v216[7];
        v219 = v216[8];
        if (v219 == v220)
          v220 = v216[10] - v216[9];
        if (v214 < v220)
          v220 = v214;
        if (v219 <= v215)
          v219 = v215;
        if (v219 == v220)
          v219 = v220 + v216[10] - v216[9];
        v216[7] = v220;
        v216[8] = v219;
      }
    }
  }
  if (v377)
  {
    v221 = v373;
    v222 = v374;
    if (v374 != v373)
    {
      v223 = (_QWORD *)v372;
      v224 = v375;
      v225 = v376;
      if (v371 && *(_BYTE *)(v372 + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v371 + 64))();
      if (v224 && !v225)
      {
        v227 = v223[7];
        v226 = v223[8];
        if (v226 == v227)
          v227 = v223[10] - v223[9];
        if (v221 < v227)
          v227 = v221;
        if (v226 <= v222)
          v226 = v222;
        if (v226 == v227)
          v226 = v227 + v223[10] - v223[9];
        v223[7] = v227;
        v223[8] = v226;
      }
    }
  }
  if (v370)
  {
    v228 = *((_QWORD *)&v366 + 1);
    v229 = v367;
    if (v367 != *((_QWORD *)&v366 + 1))
    {
      v230 = (_QWORD *)v366;
      v231 = v368;
      v232 = v369;
      if (v365 && *(_BYTE *)(v366 + 17) != 2)
        ((void (*)(void))v365->__vftable[1].__get_deleter)();
      if (v231 && !v232)
      {
        v234 = v230[7];
        v233 = v230[8];
        if (v233 == v234)
          v234 = v230[10] - v230[9];
        if (v228 < v234)
          v234 = v228;
        if (v233 <= v229)
          v233 = v229;
        if (v233 == v234)
          v233 = v234 + v230[10] - v230[9];
        v230[7] = v234;
        v230[8] = v233;
      }
    }
  }
  if (*((_QWORD *)&v364 + 1))
  {
    v235 = *(std::__shared_weak_count **)&buf[16];
    v236 = v363;
    if (v363 != *(std::__shared_weak_count **)&buf[16])
    {
      v237 = *(_QWORD **)&buf[8];
      v238 = v364;
      v239 = BYTE1(v364);
      if (*(_QWORD *)buf && *(_BYTE *)(*(_QWORD *)&buf[8] + 17) != 2)
        (*(void (**)(void))(**(_QWORD **)buf + 64))();
      if (v238 && !v239)
      {
        v241 = (std::__shared_weak_count *)v237[7];
        v240 = (std::__shared_weak_count *)v237[8];
        if (v240 == v241)
          v241 = (std::__shared_weak_count *)(v237[10] - v237[9]);
        if (v235 < v241)
          v241 = v235;
        if (v240 <= v236)
          v240 = v236;
        if (v240 == v241)
          v240 = (std::__shared_weak_count *)((char *)v241 + v237[10] - v237[9]);
        v237[7] = v241;
        v237[8] = v240;
      }
    }
  }
  v242 = v312;
  if (v312)
  {
    v243 = &v312->__shared_owners_;
    do
      v244 = __ldaxr((unint64_t *)v243);
    while (__stlxr(v244 - 1, (unint64_t *)v243));
    if (!v244)
    {
      ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
      std::__shared_weak_count::__release_weak(v242);
    }
  }
  v318 = (uint64_t)v209;
  v319 = v210;
  v245 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v302.__d_.__rep_) * 0.000001;
  v246 = (*(_QWORD *)(v353 + 48) - *(_QWORD *)(v353 + 40)) / *(_QWORD *)(v353 + 8) / 3uLL;
  gdc::Statistics::addSampleValue(v303, "Drape Stroke - Source Triangle Count", 0x1CEDE5FE00000024uLL, (double)v246);
  LODWORD(v247) = v316;
  gdc::Statistics::addSampleValue(v303, "Drape Stroke - Triangle intersection tests", 0x666CB5F50000002AuLL, (double)v247);
  LODWORD(v248) = HIDWORD(v316);
  gdc::Statistics::addSampleValue(v303, "Drape Stroke - Brute Force searches", 0x73D619BB00000023uLL, (double)v248);
  gdc::Statistics::addSampleValue(v303, "Drape Stroke - Time", 0x2D1377C000000013uLL, v245);
  if (v209)
    gdc::Statistics::addSampleValue(v303, "Drape Stroke - Output Triangle Count", 0xFDCD9B6500000024, (double)((*(_QWORD *)(*(_QWORD *)v209[2].__shared_weak_owners_ + 48)- *(_QWORD *)(*(_QWORD *)v209[2].__shared_weak_owners_ + 40))/ *(_QWORD *)(*(_QWORD *)v209[2].__shared_weak_owners_ + 8)/ 3uLL));
  if (GEOGetVectorKitElevatedStrokesLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitElevatedStrokesLog_onceToken, &__block_literal_global_37);
  v249 = (id)GEOGetVectorKitElevatedStrokesLog_log;
  if (!os_log_type_enabled(v249, OS_LOG_TYPE_DEBUG))
    goto LABEL_307;
  v314[0] = *(_WORD *)v308;
  v315 = *(_QWORD *)(v308 + 4);
  md::debugString<geo::QuadTile>(&__p, v314);
  v250 = SHIBYTE(v360);
  v251 = (void **)__p;
  v309[0] = *(_WORD *)v306;
  v310 = *(_QWORD *)(v306 + 4);
  md::debugString<geo::QuadTile>(&v311, v309);
  v252 = &__p;
  if (v250 < 0)
    v252 = v251;
  if (v313 >= 0)
    v253 = &v311;
  else
    v253 = v311;
  v254 = (a3[19] - a3[18]) / 3uLL;
  *(_DWORD *)buf = 136316930;
  *(_QWORD *)&buf[4] = v252;
  *(_WORD *)&buf[12] = 2080;
  *(_QWORD *)&buf[14] = v253;
  *(_WORD *)&buf[22] = 2048;
  v363 = (std::__shared_weak_count *)v246;
  LOWORD(v364) = 2048;
  *(_QWORD *)((char *)&v364 + 2) = v254;
  WORD5(v364) = 1024;
  HIDWORD(v364) = v316;
  LOWORD(v365) = 1024;
  *(_DWORD *)((char *)&v365 + 2) = HIDWORD(v316);
  HIWORD(v365) = 1024;
  LODWORD(v366) = v317;
  WORD2(v366) = 2048;
  *(double *)((char *)&v366 + 6) = v245;
  _os_log_impl(&dword_19F029000, v249, OS_LOG_TYPE_DEBUG, "Draping stroke mesh tile %s onto foundation tile %s\nStroke Triangle Count: %zu  Foundation Triangle Count: %zu\nIntersection Tests: %d  Brute Force Searches: %d  Triangle Culls: %d  Draping Time: %.1f", buf, 0x46u);
  if (v313 < 0)
  {
    operator delete(v311);
    if ((SHIBYTE(v360) & 0x80000000) == 0)
      goto LABEL_307;
  }
  else if ((SHIBYTE(v360) & 0x80000000) == 0)
  {
    goto LABEL_307;
  }
  operator delete(__p);
LABEL_307:

  if (v209)
  {
    *(_QWORD *)a1 = v209;
    *(_QWORD *)(a1 + 8) = v210;
    *(_QWORD *)(a1 + 16) = v320;
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    if (v210)
    {
      v261 = (unint64_t *)&v210->__shared_owners_;
      do
        v262 = __ldaxr(v261);
      while (__stlxr(v262 - 1, v261));
      if (!v262)
      {
        ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
        std::__shared_weak_count::__release_weak(v210);
      }
    }
  }
LABEL_309:
  ggl::Mesh::~Mesh((ggl::Mesh *)v351);
}

void sub_19F3F5E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  void *v69;

  ggl::Mesh::~Mesh((ggl::Mesh *)&STACK[0x2A0]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  v69 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v69;
    operator delete(v69);
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  ggl::Mesh::~Mesh((ggl::Mesh *)&a68);
  _Unwind_Resume(a1);
}

void sub_19F3F6084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0::~$_0(&STACK[0x2A0]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

uint64_t ggl::Mesh::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD **v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t **v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t **v76;
  uint64_t **v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  BOOL v81;
  uint64_t *v82;
  uint64_t *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t *i;
  uint64_t **v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t **v96;
  uint64_t **v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t *v102;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(std::__shared_weak_count **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v4;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  if (a1 == a2)
  {
LABEL_71:
    v48 = *(_QWORD *)(a2 + 96);
    v47 = *(_QWORD *)(a2 + 104);
    if (!v47)
      goto LABEL_74;
    goto LABEL_72;
  }
  v12 = *(char **)(a1 + 64);
  v14 = *(char **)(a2 + 64);
  v13 = *(char **)(a2 + 72);
  v15 = (v13 - v14) >> 4;
  v16 = *(_QWORD *)(a1 + 80);
  if (v15 > (v16 - (uint64_t)v12) >> 4)
  {
    if (v12)
    {
      v17 = *(char **)(a1 + 72);
      if (v17 == v12)
      {
        v18 = *(_QWORD *)(a1 + 64);
      }
      else
      {
        do
        {
          v19 = (std::__shared_weak_count *)*((_QWORD *)v17 - 1);
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          v17 -= 16;
        }
        while (v17 != v12);
        v18 = *(_QWORD *)(a1 + 64);
      }
      *(_QWORD *)(a1 + 72) = v12;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 40))(*(_QWORD *)(a1 + 88), v18);
      v16 = 0;
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    if (v13 - v14 < 0)
      goto LABEL_170;
    v39 = v16 >> 3;
    if (v16 >> 3 <= v15)
      v39 = (v13 - v14) >> 4;
    v40 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0;
    v41 = 0xFFFFFFFFFFFFFFFLL;
    if (!v40)
      v41 = v39;
    if (v41 >> 60)
LABEL_170:
      abort();
    v42 = 2 * v41;
    v43 = (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 88) + 16))(*(_QWORD *)(a1 + 88), 16 * v41, 8);
    *(_QWORD *)(a1 + 64) = v43;
    *(_QWORD *)(a1 + 72) = v43;
    *(_QWORD *)(a1 + 80) = &v43[v42];
    while (v14 != v13)
    {
      if (v43)
      {
        v44 = *((_QWORD *)v14 + 1);
        *v43 = *(_QWORD *)v14;
        v43[1] = v44;
        if (v44)
        {
          v45 = (unint64_t *)(v44 + 8);
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
        }
      }
      v14 += 16;
      v43 += 2;
    }
    *(_QWORD *)(a1 + 72) = v43;
    v48 = *(_QWORD *)(a2 + 96);
    v47 = *(_QWORD *)(a2 + 104);
    if (!v47)
      goto LABEL_74;
LABEL_72:
    v53 = (unint64_t *)(v47 + 8);
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
    goto LABEL_74;
  }
  v22 = *(char **)(a1 + 72);
  v23 = (v22 - v12) >> 4;
  if (v23 < v15)
  {
    v24 = &v14[16 * v23];
    if (v22 != v12)
    {
      do
      {
        v26 = *(_QWORD *)v14;
        v25 = *((_QWORD *)v14 + 1);
        if (v25)
        {
          v27 = (unint64_t *)(v25 + 8);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v29 = (std::__shared_weak_count *)*((_QWORD *)v12 + 1);
        *(_QWORD *)v12 = v26;
        *((_QWORD *)v12 + 1) = v25;
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v14 += 16;
        v12 += 16;
      }
      while (v14 != v24);
      v12 = *(char **)(a1 + 72);
    }
    v49 = v12;
    if (v24 != v13)
    {
      v49 = v12;
      do
      {
        if (v49)
        {
          v50 = *((_QWORD *)v24 + 1);
          *(_QWORD *)v49 = *(_QWORD *)v24;
          *((_QWORD *)v49 + 1) = v50;
          if (v50)
          {
            v51 = (unint64_t *)(v50 + 8);
            do
              v52 = __ldxr(v51);
            while (__stxr(v52 + 1, v51));
          }
        }
        v24 += 16;
        v49 += 16;
      }
      while (v24 != v13);
    }
    *(_QWORD *)(a1 + 72) = v49;
    goto LABEL_71;
  }
  if (v14 != v13)
  {
    do
    {
      v33 = *(_QWORD *)v14;
      v32 = *((_QWORD *)v14 + 1);
      if (v32)
      {
        v34 = (unint64_t *)(v32 + 8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      v36 = (std::__shared_weak_count *)*((_QWORD *)v12 + 1);
      *(_QWORD *)v12 = v33;
      *((_QWORD *)v12 + 1) = v32;
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v14 += 16;
      v12 += 16;
    }
    while (v14 != v13);
    v22 = *(char **)(a1 + 72);
  }
  while (v22 != v12)
  {
    v84 = (std::__shared_weak_count *)*((_QWORD *)v22 - 1);
    if (v84)
    {
      v85 = (unint64_t *)&v84->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    v22 -= 16;
  }
  *(_QWORD *)(a1 + 72) = v12;
  v48 = *(_QWORD *)(a2 + 96);
  v47 = *(_QWORD *)(a2 + 104);
  if (v47)
    goto LABEL_72;
LABEL_74:
  v55 = *(std::__shared_weak_count **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v48;
  *(_QWORD *)(a1 + 104) = v47;
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (a1 != a2)
  {
    v58 = (_QWORD **)(a1 + 112);
    v59 = *(_QWORD **)(a2 + 112);
    v60 = (_QWORD *)(a2 + 120);
    if (!*(_QWORD *)(a1 + 136))
      goto LABEL_128;
    v62 = (uint64_t **)(a1 + 120);
    v61 = *(_QWORD *)(a1 + 120);
    v63 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = a1 + 120;
    *(_QWORD *)(v61 + 16) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    v64 = *(_QWORD *)(v63 + 8) ? *(uint64_t **)(v63 + 8) : (uint64_t *)v63;
    if (v64)
    {
      v65 = (uint64_t *)v64[2];
      if (v65)
      {
        v66 = (uint64_t *)*v65;
        if ((uint64_t *)*v65 == v64)
        {
          *v65 = 0;
          while (1)
          {
            v102 = (uint64_t *)v65[1];
            if (!v102)
              break;
            do
            {
              v65 = v102;
              v102 = (uint64_t *)*v102;
            }
            while (v102);
          }
        }
        else
        {
          for (v65[1] = 0; v66; v66 = (uint64_t *)v65[1])
          {
            do
            {
              v65 = v66;
              v66 = (uint64_t *)*v66;
            }
            while (v66);
          }
        }
      }
      if (v59 == v60)
      {
        v80 = v59;
        v67 = v64;
      }
      else
      {
        do
        {
          v67 = v65;
          v68 = v59[5];
          v64[4] = v59[4];
          v69 = v59[6];
          if (v69)
          {
            v70 = (unint64_t *)(v69 + 8);
            do
              v71 = __ldxr(v70);
            while (__stxr(v71 + 1, v70));
          }
          v72 = (std::__shared_weak_count *)v64[6];
          v64[5] = v68;
          v64[6] = v69;
          if (v72)
          {
            v73 = (unint64_t *)&v72->__shared_owners_;
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          v75 = *v62;
          v76 = (uint64_t **)(a1 + 120);
          v77 = (uint64_t **)(a1 + 120);
          if (*v62)
          {
            do
            {
              while (1)
              {
                v76 = (uint64_t **)v75;
                if (v64[4] >= (unint64_t)v75[4])
                  break;
                v75 = (uint64_t *)*v75;
                v77 = v76;
                if (!*v76)
                  goto LABEL_106;
              }
              v75 = (uint64_t *)v75[1];
            }
            while (v75);
            v77 = v76 + 1;
          }
LABEL_106:
          *v64 = 0;
          v64[1] = 0;
          v64[2] = (uint64_t)v76;
          *v77 = v64;
          v78 = (_QWORD *)**v58;
          if (v78)
          {
            *v58 = v78;
            v64 = *v77;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 120), v64);
          ++*(_QWORD *)(a1 + 136);
          if (v67)
          {
            v65 = (uint64_t *)v67[2];
            if (v65)
            {
              v82 = (uint64_t *)*v65;
              if ((uint64_t *)*v65 == v67)
              {
                *v65 = 0;
                while (1)
                {
                  v83 = (uint64_t *)v65[1];
                  if (!v83)
                    break;
                  do
                  {
                    v65 = v83;
                    v83 = (uint64_t *)*v83;
                  }
                  while (v83);
                }
              }
              else
              {
                for (v65[1] = 0; v82; v82 = (uint64_t *)v65[1])
                {
                  do
                  {
                    v65 = v82;
                    v82 = (uint64_t *)*v82;
                  }
                  while (v82);
                }
              }
            }
          }
          else
          {
            v65 = 0;
          }
          v79 = (_QWORD *)v59[1];
          if (v79)
          {
            do
            {
              v80 = v79;
              v79 = (_QWORD *)*v79;
            }
            while (v79);
          }
          else
          {
            do
            {
              v80 = (_QWORD *)v59[2];
              v81 = *v80 == (_QWORD)v59;
              v59 = v80;
            }
            while (!v81);
          }
          if (!v67)
            break;
          v64 = v67;
          v59 = v80;
        }
        while (v80 != v60);
      }
      std::__tree<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::less<unsigned long>,true>,geo::StdAllocator<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,ggl::Allocator>>::destroy(a1 + 112, v67);
      if (v65)
      {
        for (i = (uint64_t *)v65[2]; i; i = (uint64_t *)i[2])
          v65 = i;
        std::__tree<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::less<unsigned long>,true>,geo::StdAllocator<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,ggl::Allocator>>::destroy(a1 + 112, v65);
      }
    }
    else
    {
LABEL_128:
      v80 = v59;
    }
    if (v80 != v60)
    {
      v88 = (uint64_t **)(a1 + 120);
      do
      {
        v89 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128), 56, 8);
        v90 = v89;
        v91 = v80[5];
        v89[4] = v80[4];
        v89[5] = v91;
        v92 = v80[6];
        v89[6] = v92;
        if (v92)
        {
          v93 = (unint64_t *)(v92 + 8);
          do
            v94 = __ldxr(v93);
          while (__stxr(v94 + 1, v93));
        }
        v95 = *v88;
        v96 = (uint64_t **)(a1 + 120);
        v97 = (uint64_t **)(a1 + 120);
        if (*v88)
        {
          do
          {
            while (1)
            {
              v96 = (uint64_t **)v95;
              if (v89[4] >= (unint64_t)v95[4])
                break;
              v95 = (uint64_t *)*v95;
              v97 = v96;
              if (!*v96)
                goto LABEL_157;
            }
            v95 = (uint64_t *)v95[1];
          }
          while (v95);
          v97 = v96 + 1;
        }
LABEL_157:
        *v89 = 0;
        v89[1] = 0;
        v89[2] = (uint64_t)v96;
        *v97 = v89;
        v98 = (_QWORD *)**v58;
        if (v98)
        {
          *v58 = v98;
          v90 = *v97;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 120), v90);
        ++*(_QWORD *)(a1 + 136);
        v99 = (_QWORD *)v80[1];
        if (v99)
        {
          do
          {
            v100 = v99;
            v99 = (_QWORD *)*v99;
          }
          while (v99);
        }
        else
        {
          do
          {
            v100 = (_QWORD *)v80[2];
            v81 = *v100 == (_QWORD)v80;
            v80 = v100;
          }
          while (!v81);
        }
        v80 = v100;
      }
      while (v100 != v60);
    }
  }
  return a1;
}

uint64_t md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0::~$_0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return a1;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return a1;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

_QWORD *md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1::~$_1(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[13];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[11];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[11];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[3];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return a1;
}

void std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_2,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_2>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_2,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_2>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C90E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_2,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_2>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C90E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_2,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_2>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  _WORD *v18;
  __int16 *v19;
  __int16 v20;

  v2 = result;
  v3 = *a2;
  v4 = **(_QWORD **)(result + 8);
  v5 = *(_QWORD *)(v4 + 8) * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(result + 16) + 8) - **(_QWORD **)(result + 16)) >> 1);
  if (v5)
  {
    if (v3 && *(_BYTE *)(v4 + 17) != 2)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 56))(*a2, v4, 0, v5, 1, 1);
      v6 = result;
    }
    else
    {
      v6 = *(_QWORD *)(v4 + 72);
    }
  }
  else
  {
    v6 = 0;
  }
  v7 = **(_QWORD **)(v2 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8);
  v9 = v8 - v7;
  if (v8 != v7)
  {
    v10 = 0;
    v11 = v9 >> 1;
    if (v11 <= 1)
      v11 = 1;
    if (v11 < 0x10)
      goto LABEL_15;
    if ((unint64_t)(v6 - v7) < 0x20)
      goto LABEL_15;
    v10 = v11 & 0xFFFFFFFFFFFFFFF0;
    v12 = (_OWORD *)(v6 + 16);
    v13 = (__int128 *)(v7 + 16);
    v14 = v11 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 16;
    }
    while (v14);
    if (v11 != v10)
    {
LABEL_15:
      v16 = v11 - v10;
      v17 = 2 * v10;
      v18 = (_WORD *)(v6 + 2 * v10);
      v19 = (__int16 *)(v7 + v17);
      do
      {
        v20 = *v19++;
        *v18++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  if (v6 && v5 && v3 && *(_BYTE *)(v4 + 17) != 2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
  return result;
}

void std::__shared_ptr_emplace<ggl::IndexData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5228;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::IndexData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5228;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::IndexData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1>,void ()(ggl::ResourceAccessor *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = &off_1E42C9098;
  v2 = (std::__shared_weak_count *)a1[14];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[12];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[12];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[4];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return a1;
}

void std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1>,void ()(ggl::ResourceAccessor *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = &off_1E42C9098;
  v2 = (std::__shared_weak_count *)a1[14];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[12];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[12];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[4];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __n128 result;

  v2 = (char *)operator new(0x90uLL);
  *(_QWORD *)v2 = &off_1E42C9098;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)v2 + 4) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *((_WORD *)v2 + 20) = *(_WORD *)(a1 + 40);
  *(_QWORD *)(v2 + 44) = *(_QWORD *)(a1 + 44);
  *((_WORD *)v2 + 32) = *(_WORD *)(a1 + 64);
  *(_QWORD *)(v2 + 68) = *(_QWORD *)(a1 + 68);
  v6 = *(_QWORD *)(a1 + 96);
  *((_QWORD *)v2 + 11) = *(_QWORD *)(a1 + 88);
  *((_QWORD *)v2 + 12) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a1 + 112);
  *((_QWORD *)v2 + 13) = *(_QWORD *)(a1 + 104);
  *((_QWORD *)v2 + 14) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  result = *(__n128 *)(a1 + 120);
  *(__n128 *)(v2 + 120) = result;
  *((_WORD *)v2 + 68) = *(_WORD *)(a1 + 136);
  return result;
}

__n128 std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C9098;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 32) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_WORD *)(a2 + 40) = *(_WORD *)(a1 + 40);
  *(_QWORD *)(a2 + 44) = *(_QWORD *)(a1 + 44);
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 64);
  *(_QWORD *)(a2 + 68) = *(_QWORD *)(a1 + 68);
  v5 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 96) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 112) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  result = *(__n128 *)(a1 + 120);
  *(_WORD *)(a2 + 136) = *(_WORD *)(a1 + 136);
  *(__n128 *)(a2 + 120) = result;
  return result;
}

void std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1>,void ()(ggl::ResourceAccessor *)>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[14];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[12];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[12];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[4];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1>,void ()(ggl::ResourceAccessor *)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)__p[14];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[12];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[12];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)__p[4];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(__p);
}

void std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1>,void ()(ggl::ResourceAccessor *)>::operator()(_QWORD *a1, unint64_t *a2, __n128 a3)
{
  float v3;
  float v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  int v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __n128 v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  int v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  int v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _WORD *v56;
  unsigned __int16 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float *v61;
  float *v62;
  float *v63;
  _WORD *v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  BOOL v72;
  BOOL v73;
  BOOL v74;
  BOOL v75;
  BOOL v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  _WORD *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  _WORD *v96;
  unint64_t v97;
  uint64_t v98;
  __n128 *v99;
  __n128 *v100;
  unint64_t v101;
  __int16 v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  _WORD *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  _WORD *v114;
  unint64_t v115;
  uint64_t v116;
  __n128 *v117;
  __n128 *v118;
  unint64_t v119;
  __int16 v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  _BYTE *v130;
  _WORD *v131;
  unint64_t v132;
  uint64_t v133;
  __n128 *v134;
  __n128 *v135;
  unint64_t v136;
  __int16 v137;
  uint64_t v138;
  __n128 v139;
  __n128 v140;
  uint64_t v141;
  unint64_t v142;
  __int16 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  __n128 v148;
  unint64_t v149;
  unint64_t v150;
  __int16 v151;
  uint64_t v152;
  __int128 v153;
  unint64_t v154;
  unint64_t v155;
  __int16 v156;
  uint64_t v157;
  __int128 v158;
  unint64_t v159;
  unint64_t v160;
  __int16 v161;
  uint64_t v162;
  char v163;
  _QWORD *v164;
  _QWORD v165[2];

  v5 = *a2;
  v6 = a1[11];
  v7 = a1[15];
  v162 = 0;
  v158 = 0uLL;
  v8 = *(_QWORD *)(v6 + 8) * v7;
  if ((*(_BYTE *)(v6 + 16) & 2) == 0)
  {
    v9 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v9 != -1)
    {
      *(_QWORD *)&v153 = v165;
      v148.n128_u64[0] = (unint64_t)&v153;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v148, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  a3.n128_u64[0] = v5;
  v139 = a3;
  if (v8)
  {
    if (v5 && *(_BYTE *)(v6 + 17) != 2)
    {
      v11 = (*(uint64_t (**)(unint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 56))(v5, v6, 0, v8, 0, 1);
      a3 = v139;
      v10 = v11;
    }
    else
    {
      v10 = *(_QWORD *)(v6 + 72);
    }
  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)&v12 = a3.n128_u64[0];
  *((_QWORD *)&v12 + 1) = v6;
  if (v162)
  {
    v14 = v159;
    v13 = v160;
    if (v160 != v159)
    {
      v15 = (_QWORD *)*((_QWORD *)&v158 + 1);
      v16 = v161;
      v17 = HIBYTE(v161);
      if ((_QWORD)v158 && *(_BYTE *)(*((_QWORD *)&v158 + 1) + 17) != 2)
      {
        v145 = v12;
        (*(void (**)(void))(*(_QWORD *)v158 + 64))();
        v12 = v145;
        a3 = v139;
      }
      if (v16 && !v17)
      {
        v19 = v15[7];
        v18 = v15[8];
        if (v18 == v19)
          v19 = v15[10] - v15[9];
        if (v14 < v19)
          v19 = v14;
        if (v18 <= v13)
          v18 = v13;
        if (v18 == v19)
          v18 = v19 + v15[10] - v15[9];
        v15[7] = v19;
        v15[8] = v18;
      }
    }
  }
  v158 = v12;
  v159 = 0;
  v160 = v8;
  v162 = v10;
  v161 = 256;
  v20 = a1[13];
  v21 = a1[15];
  v153 = 0uLL;
  v22 = *(_QWORD *)(v20 + 8) * v21;
  *(_QWORD *)&v23 = a3.n128_u64[0];
  *((_QWORD *)&v23 + 1) = v20;
  if (v22)
  {
    if (v5 && *(_BYTE *)(v20 + 17) != 2)
    {
      v146 = v23;
      v24 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 56))(v5);
      v23 = v146;
      a3 = v139;
    }
    else
    {
      v24 = *(_QWORD *)(v20 + 72);
    }
  }
  else
  {
    v24 = 0;
  }
  v153 = v23;
  v154 = 0;
  v155 = v22;
  v157 = v24;
  v156 = 257;
  v25 = a1;
  v26 = a1[3];
  v27 = a1[16];
  v152 = 0;
  v148 = 0uLL;
  v28 = *(_QWORD *)(v26 + 8) * v27;
  if ((*(_BYTE *)(v26 + 16) & 2) == 0)
  {
    v29 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v29 != -1)
    {
      v165[0] = &v163;
      v164 = v165;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v164, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      a3 = v139;
    }
  }
  if (v28)
  {
    if (v5 && *(_BYTE *)(v26 + 17) != 2)
    {
      v30 = (*(uint64_t (**)(unint64_t, unint64_t, _QWORD, uint64_t, _QWORD, uint64_t, __n128))(*(_QWORD *)v5 + 56))(v5, v26, 0, v28, 0, 1, a3);
      a3.n128_u64[0] = v139.n128_u64[0];
      v147 = v30;
    }
    else
    {
      v147 = *(_QWORD *)(v26 + 72);
    }
  }
  else
  {
    v147 = 0;
  }
  a3.n128_u64[1] = v26;
  v140 = a3;
  if (v152)
  {
    v32 = v149;
    v31 = v150;
    if (v150 != v149)
    {
      v33 = (_QWORD *)v148.n128_u64[1];
      v34 = v151;
      v35 = HIBYTE(v151);
      if (v148.n128_u64[0] && *(_BYTE *)(v148.n128_u64[1] + 17) != 2)
      {
        (*(void (**)(void))(*(_QWORD *)v148.n128_u64[0] + 64))();
        a3 = v140;
      }
      if (v34 && !v35)
      {
        v37 = v33[7];
        v36 = v33[8];
        if (v36 == v37)
          v37 = v33[10] - v33[9];
        if (v32 < v37)
          v37 = v32;
        if (v36 <= v31)
          v36 = v31;
        if (v36 == v37)
          v36 = v37 + v33[10] - v33[9];
        v33[7] = v37;
        v33[8] = v36;
      }
    }
  }
  v148 = a3;
  v149 = 0;
  v150 = v28;
  v138 = v28;
  v152 = v147;
  v151 = 256;
  v38 = a1[16];
  if (v38 >= 3)
  {
    v54 = 0;
    v55 = v162;
    v141 = v162;
    v142 = v38 / 3;
    do
    {
      v57 = (unsigned __int16 *)(v147 + 6 * v54);
      v58 = *v57;
      v59 = v57[1];
      v60 = v57[2];
      v61 = (float *)(v55 + 16 * v58);
      v62 = (float *)(v55 + 16 * v59);
      v63 = (float *)(v55 + 16 * v60);
      v64 = (_WORD *)v25[1];
      a3.n128_u16[0] = *((_WORD *)v25 + 68);
      v65 = (float)a3.n128_u32[0];
      a3.n128_u16[0] = v64[2];
      LOWORD(v3) = v64[1];
      v3 = (float)LODWORD(v3);
      v66 = (float)((float)a3.n128_u32[0] * v65) / v3;
      a3.n128_f32[0] = (float)(*v61 - v66) * v3;
      LOWORD(v4) = v64[3];
      v4 = (float)((float)((float)(v3 + -1.0) - (float)LODWORD(v4)) * v65) / v3;
      v67 = (float)(v61[1] - v4) * v3;
      v68 = (float)(*v62 - v66) * v3;
      v69 = (float)(v62[1] - v4) * v3;
      v70 = (float)(*v63 - v66) * v3;
      v71 = (float)(v63[1] - v4) * v3;
      v72 = a3.n128_f32[0] >= 0.0 && a3.n128_f32[0] <= v65;
      if (v72 && (v67 >= 0.0 ? (v73 = v67 <= v65) : (v73 = 0), v73)
        || (v68 >= 0.0 ? (v74 = v68 <= v65) : (v74 = 0), v74 && (v69 >= 0.0 ? (v75 = v69 <= v65) : (v75 = 0), v75))
        || (v70 >= 0.0 ? (v76 = v70 <= v65) : (v76 = 0), v76 && (v71 >= 0.0 ? (v77 = v71 <= v65) : (v77 = 0), v77)))
      {
        v78 = v157;
        v79 = v157 + 16 * v58;
        *(float *)v79 = *v61;
        *(float *)(v79 + 4) = v61[1];
        v80 = v55 + 16 * v58;
        *(_WORD *)(v79 + 8) = *(_WORD *)(v80 + 8);
        *(_WORD *)(v79 + 10) = *(_WORD *)(v80 + 10);
        *(_DWORD *)(v79 + 12) = *(_DWORD *)(v80 + 12);
        v81 = v78 + 16 * v59;
        *(float *)v81 = *v62;
        *(float *)(v81 + 4) = v62[1];
        v82 = v55 + 16 * v59;
        *(_WORD *)(v81 + 8) = *(_WORD *)(v82 + 8);
        *(_WORD *)(v81 + 10) = *(_WORD *)(v82 + 10);
        *(_DWORD *)(v81 + 12) = *(_DWORD *)(v82 + 12);
        v144 = v60;
        v83 = v78 + 16 * v60;
        *(float *)v83 = *v63;
        *(float *)(v83 + 4) = v63[1];
        v84 = v55 + 16 * v60;
        *(_WORD *)(v83 + 8) = *(_WORD *)(v84 + 8);
        *(_WORD *)(v83 + 10) = *(_WORD *)(v84 + 10);
        *(_DWORD *)(v83 + 12) = *(_DWORD *)(v84 + 12);
        *(_DWORD *)v79 = a3.n128_u32[0];
        *(float *)(v79 + 4) = v67;
        *(float *)v81 = v68;
        *(float *)(v81 + 4) = v69;
        *(float *)v83 = v70;
        *(float *)(v83 + 4) = v71;
        v85 = v25[2];
        v87 = *(char **)(v85 + 8);
        v86 = *(_QWORD *)(v85 + 16);
        if ((unint64_t)v87 >= v86)
        {
          v89 = *(char **)v85;
          v90 = (uint64_t)&v87[-*(_QWORD *)v85];
          if (v90 <= -3)
            goto LABEL_196;
          v91 = v90 >> 1;
          v92 = v86 - (_QWORD)v89;
          if (v92 <= (v90 >> 1) + 1)
            v93 = v91 + 1;
          else
            v93 = v92;
          if (v92 >= 0x7FFFFFFFFFFFFFFELL)
            v94 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v94 = v93;
          if (v94)
          {
            if (v94 < 0)
              goto LABEL_197;
            v95 = operator new(2 * v94);
          }
          else
          {
            v95 = 0;
          }
          v96 = &v95[2 * v91];
          *v96 = v58;
          v88 = v96 + 1;
          if (v87 != v89)
          {
            v97 = v87 - 2 - v89;
            if (v97 < 0x1E)
              goto LABEL_200;
            if (v87 - v95 - (v90 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
              goto LABEL_200;
            v98 = (v97 >> 1) + 1;
            v99 = (__n128 *)&v95[2 * v91 - 16];
            v100 = (__n128 *)(v87 - 16);
            v101 = v98 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              a3 = *v100;
              v99[-1] = v100[-1];
              *v99 = a3;
              v99 -= 2;
              v100 -= 2;
              v101 -= 16;
            }
            while (v101);
            v96 -= v98 & 0xFFFFFFFFFFFFFFF0;
            v87 -= 2 * (v98 & 0xFFFFFFFFFFFFFFF0);
            if (v98 != (v98 & 0xFFFFFFFFFFFFFFF0))
            {
LABEL_200:
              do
              {
                v102 = *((_WORD *)v87 - 1);
                v87 -= 2;
                *--v96 = v102;
              }
              while (v87 != v89);
            }
          }
          *(_QWORD *)v85 = v96;
          *(_QWORD *)(v85 + 8) = v88;
          *(_QWORD *)(v85 + 16) = &v95[2 * v94];
          if (v89)
            operator delete(v89);
          v25 = a1;
        }
        else
        {
          *(_WORD *)v87 = v58;
          v88 = v87 + 2;
        }
        *(_QWORD *)(v85 + 8) = v88;
        v103 = v25[2];
        v105 = *(char **)(v103 + 8);
        v104 = *(_QWORD *)(v103 + 16);
        if ((unint64_t)v105 >= v104)
        {
          v107 = *(char **)v103;
          v108 = (uint64_t)&v105[-*(_QWORD *)v103];
          if (v108 < -2)
            goto LABEL_196;
          v109 = v108 >> 1;
          v110 = v104 - (_QWORD)v107;
          if (v110 <= (v108 >> 1) + 1)
            v111 = v109 + 1;
          else
            v111 = v110;
          if (v110 >= 0x7FFFFFFFFFFFFFFELL)
            v112 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v112 = v111;
          if (v112)
          {
            if (v112 < 0)
              goto LABEL_197;
            v113 = operator new(2 * v112);
          }
          else
          {
            v113 = 0;
          }
          v114 = &v113[2 * v109];
          *v114 = v59;
          v106 = v114 + 1;
          if (v105 != v107)
          {
            v115 = v105 - 2 - v107;
            if (v115 < 0x1E)
              goto LABEL_201;
            if (v105 - v113 - (v108 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
              goto LABEL_201;
            v116 = (v115 >> 1) + 1;
            v117 = (__n128 *)&v113[2 * v109 - 16];
            v118 = (__n128 *)(v105 - 16);
            v119 = v116 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              a3 = *v118;
              v117[-1] = v118[-1];
              *v117 = a3;
              v117 -= 2;
              v118 -= 2;
              v119 -= 16;
            }
            while (v119);
            v114 -= v116 & 0xFFFFFFFFFFFFFFF0;
            v105 -= 2 * (v116 & 0xFFFFFFFFFFFFFFF0);
            if (v116 != (v116 & 0xFFFFFFFFFFFFFFF0))
            {
LABEL_201:
              do
              {
                v120 = *((_WORD *)v105 - 1);
                v105 -= 2;
                *--v114 = v120;
              }
              while (v105 != v107);
            }
          }
          *(_QWORD *)v103 = v114;
          *(_QWORD *)(v103 + 8) = v106;
          *(_QWORD *)(v103 + 16) = &v113[2 * v112];
          if (v107)
            operator delete(v107);
          v25 = a1;
        }
        else
        {
          *(_WORD *)v105 = v59;
          v106 = v105 + 2;
        }
        *(_QWORD *)(v103 + 8) = v106;
        v121 = v25[2];
        v123 = *(char **)(v121 + 8);
        v122 = *(_QWORD *)(v121 + 16);
        if ((unint64_t)v123 < v122)
        {
          *(_WORD *)v123 = v144;
          v56 = v123 + 2;
        }
        else
        {
          v124 = *(char **)v121;
          v125 = (uint64_t)&v123[-*(_QWORD *)v121];
          if (v125 < -2)
LABEL_196:
            abort();
          v126 = v125 >> 1;
          v127 = v122 - (_QWORD)v124;
          if (v127 <= (v125 >> 1) + 1)
            v128 = v126 + 1;
          else
            v128 = v127;
          if (v127 >= 0x7FFFFFFFFFFFFFFELL)
            v129 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v129 = v128;
          if (v129)
          {
            if (v129 < 0)
LABEL_197:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v130 = operator new(2 * v129);
          }
          else
          {
            v130 = 0;
          }
          v131 = &v130[2 * v126];
          *v131 = v144;
          v56 = v131 + 1;
          if (v123 != v124)
          {
            v132 = v123 - 2 - v124;
            if (v132 < 0x1E)
              goto LABEL_202;
            if (v123 - v130 - (v125 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
              goto LABEL_202;
            v133 = (v132 >> 1) + 1;
            v134 = (__n128 *)&v130[2 * v126 - 16];
            v135 = (__n128 *)(v123 - 16);
            v136 = v133 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              a3 = *v135;
              v134[-1] = v135[-1];
              *v134 = a3;
              v134 -= 2;
              v135 -= 2;
              v136 -= 16;
            }
            while (v136);
            v131 -= v133 & 0xFFFFFFFFFFFFFFF0;
            v123 -= 2 * (v133 & 0xFFFFFFFFFFFFFFF0);
            if (v133 != (v133 & 0xFFFFFFFFFFFFFFF0))
            {
LABEL_202:
              do
              {
                v137 = *((_WORD *)v123 - 1);
                v123 -= 2;
                *--v131 = v137;
              }
              while (v123 != v124);
            }
          }
          *(_QWORD *)v121 = v131;
          *(_QWORD *)(v121 + 8) = v56;
          *(_QWORD *)(v121 + 16) = &v130[2 * v129];
          if (v124)
            operator delete(v124);
          v25 = a1;
        }
        v55 = v141;
        *(_QWORD *)(v121 + 8) = v56;
      }
      ++v54;
    }
    while (v54 != v142);
  }
  v39 = v140;
  if (v147 && v138 && v140.n128_u64[0] && *(_BYTE *)(v140.n128_u64[1] + 17) != 2)
    (*(void (**)(__n128))(*(_QWORD *)v140.n128_u64[0] + 64))(v140);
  if (v157)
  {
    v41 = v154;
    v40 = v155;
    if (v155 != v154)
    {
      v42 = (_QWORD *)*((_QWORD *)&v153 + 1);
      v43 = v156;
      v44 = HIBYTE(v156);
      if ((_QWORD)v153 && *(_BYTE *)(*((_QWORD *)&v153 + 1) + 17) != 2)
        (*(void (**)(__n128))(*(_QWORD *)v153 + 64))(v39);
      if (v43 && !v44)
      {
        v46 = v42[7];
        v45 = v42[8];
        if (v45 == v46)
          v46 = v42[10] - v42[9];
        if (v41 < v46)
          v46 = v41;
        if (v45 <= v40)
          v45 = v40;
        if (v45 == v46)
          v45 = v46 + v42[10] - v42[9];
        v42[7] = v46;
        v42[8] = v45;
      }
    }
  }
  if (v162)
  {
    v48 = v159;
    v47 = v160;
    if (v160 != v159)
    {
      v49 = (_QWORD *)*((_QWORD *)&v158 + 1);
      v50 = v161;
      v51 = HIBYTE(v161);
      if ((_QWORD)v158 && *(_BYTE *)(*((_QWORD *)&v158 + 1) + 17) != 2)
        (*(void (**)(__n128))(*(_QWORD *)v158 + 64))(v39);
      if (v50 && !v51)
      {
        v53 = v49[7];
        v52 = v49[8];
        if (v52 == v53)
          v53 = v49[10] - v49[9];
        if (v48 < v53)
          v53 = v48;
        if (v52 <= v47)
          v52 = v47;
        if (v52 == v53)
          v52 = v53 + v49[10] - v49[9];
        v49[7] = v53;
        v49[8] = v52;
      }
    }
  }
}

void sub_19F3F7B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a19);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a25);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a31);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42C9050;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      return a1;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      return a1;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42C9050;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (char *)operator new(0x40uLL);
  *(_QWORD *)result = &off_1E42C9050;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 4) = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 5) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *((_QWORD *)result + 6) = *(_QWORD *)(a1 + 48);
  *((_WORD *)result + 28) = *(_WORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = &off_1E42C9050;
  *(_QWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
  *(_QWORD *)(a2 + 24) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(result + 48);
  *(_WORD *)(a2 + 56) = *(_WORD *)(result + 56);
  *(_QWORD *)(a2 + 48) = v9;
  return result;
}

void std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)__p[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[3];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[3];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  operator delete(__p);
}

void std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  char **v21;
  char *v22;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(v7 + 8) * *(_QWORD *)(a1 + 48);
  if ((*(_BYTE *)(v7 + 16) & 2) == 0)
  {
    v9 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v9 != -1)
    {
      v22 = &v20;
      v21 = &v22;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  if (v8)
  {
    if (v6 && *(_BYTE *)(v7 + 17) != 2)
      v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 56))(v6, v7, 0, v8, 0, 1);
    else
      v10 = *(_QWORD *)(v7 + 72);
  }
  else
  {
    v10 = 0;
  }
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(v11 + 8) * *(_QWORD *)(a1 + 48);
  if (v12)
  {
    if (v6 && *(_BYTE *)(v11 + 17) != 2)
    {
      v13 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 56))(v6, *(_QWORD *)(a1 + 32), 0, v12, 1, 1);
      v14 = *(_QWORD *)(a1 + 48);
      if (!v14)
        goto LABEL_20;
    }
    else
    {
      v13 = *(_QWORD *)(v11 + 72);
      v14 = *(_QWORD *)(a1 + 48);
      if (!v14)
        goto LABEL_20;
    }
  }
  else
  {
    v13 = 0;
    v14 = *(_QWORD *)(a1 + 48);
    if (!v14)
      goto LABEL_20;
  }
  v15 = *(unsigned __int16 **)(a1 + 8);
  v16 = v13 + 8;
  v17 = v10 + 8;
  do
  {
    *(_DWORD *)(v16 - 8) = *(_DWORD *)(v17 - 8);
    *(_DWORD *)(v16 - 4) = *(_DWORD *)(v17 - 4);
    *(_WORD *)v16 = *(_WORD *)v17;
    *(_WORD *)(v16 + 2) = *(_WORD *)(v17 + 2);
    v18 = *(_DWORD *)(v17 + 4);
    *(_DWORD *)(v16 + 4) = v18;
    LOWORD(v18) = *(_WORD *)(a1 + 56);
    v19 = v15[1];
    *(float *)&a4 = (float)v19;
    LOWORD(a5) = v15[2];
    *(float *)&a5 = (float)LODWORD(a5);
    *((float *)&a5 + 1) = (float)(int)(~v15[3] + v19);
    a4 = COERCE_DOUBLE(vdup_lane_s32(*(int32x2_t *)&a4, 0));
    *(float32x2_t *)(v16 - 8) = vdiv_f32(vmla_n_f32(*(float32x2_t *)(v17 - 8), *(float32x2_t *)&a5, (float)v18), *(float32x2_t *)&a4);
    v16 += 16;
    v17 += 16;
    --v14;
  }
  while (v14);
LABEL_20:
  if (v13 && v12 && v6 && *(_BYTE *)(v11 + 17) != 2)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
  if (v10 && v8 && v6 && *(_BYTE *)(v7 + 17) != 2)
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 64))(v6, v10, v7, 0, v8, 0, 1);
}

uint64_t ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::BakedWidthVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::BakedWidthVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::BakedWidthVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::BakedWidthVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E01A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::BakedWidthVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E01A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::BakedWidthVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0::~$_0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[1];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return a1;
}

_QWORD *std::__function::__func<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0,std::allocator<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = &off_1E42C7430;
  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return a1;
}

void std::__function::__func<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0,std::allocator<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = &off_1E42C7430;
  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0,std::allocator<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  result = operator new(0x48uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_1E42C7430;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  v11 = a1[7];
  result[7] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  result[8] = a1[8];
  return result;
}

_QWORD *std::__function::__func<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0,std::allocator<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_1E42C7430;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  v10 = result[7];
  a2[7] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  a2[8] = result[8];
  return result;
}

void std::__function::__func<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0,std::allocator<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0>,void ()(ggl::ResourceAccessor *)>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void std::__function::__func<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0,std::allocator<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0>,void ()(ggl::ResourceAccessor *)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)__p[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)__p[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(__p);
}

void std::__function::__func<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0,std::allocator<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(_QWORD *a1, uint64_t *a2, double a3, float a4, double a5, double a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float v19;
  char v20;
  char **v21;
  char *v22;

  v7 = *a2;
  v8 = a1[1];
  v9 = *(_QWORD *)(v8 + 8) * a1[5];
  if ((*(_BYTE *)(v8 + 16) & 2) == 0)
  {
    v10 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v10 != -1)
    {
      v22 = &v20;
      v21 = &v22;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  if (v9)
  {
    if (v7 && *(_BYTE *)(v8 + 17) != 2)
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 56))(v7, v8, 0, v9, 0, 1);
    else
      v11 = *(_QWORD *)(v8 + 72);
  }
  else
  {
    v11 = 0;
  }
  v12 = a1[3];
  v13 = *(_QWORD *)(v12 + 8) * a1[5];
  if (v13)
  {
    if (v7 && *(_BYTE *)(v12 + 17) != 2)
    {
      v14 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 56))(v7, a1[3], 0, v13, 1, 1);
      v15 = a1[5];
      if (!v15)
        goto LABEL_20;
    }
    else
    {
      v14 = *(_QWORD *)(v12 + 72);
      v15 = a1[5];
      if (!v15)
        goto LABEL_20;
    }
  }
  else
  {
    v14 = 0;
    v15 = a1[5];
    if (!v15)
      goto LABEL_20;
  }
  v16 = a1[8];
  v17 = v11 + 6;
  v18 = (float *)(v14 + 12);
  do
  {
    v19 = *(float *)(v16 + 4 * ((*(unsigned __int16 *)(v17 + 4) >> 15) ^ 1u));
    LOWORD(a4) = *(_WORD *)(v17 - 6);
    LOWORD(a5) = *(_WORD *)(v17 - 2);
    *(_QWORD *)&a5 = vmovl_s16(*(int16x4_t *)&a5).u64[0];
    *(float *)&a5 = (float)SLODWORD(a5);
    a4 = (float)LODWORD(a4) + (float)(v19 * *(float *)&a5);
    LOWORD(a5) = *(_WORD *)(v17 - 4);
    *(float *)&a5 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)v17;
    *(_QWORD *)&a6 = vmovl_s16(*(int16x4_t *)&a6).u64[0];
    *(float *)&a6 = (float)SLODWORD(a6);
    *(v18 - 3) = a4;
    *(v18 - 2) = *(float *)&a5 + (float)(v19 * *(float *)&a6);
    *((_WORD *)v18 - 2) = *(_WORD *)(v17 + 2);
    *((_WORD *)v18 - 1) = *(_WORD *)(v17 + 4);
    *v18 = *(float *)(v17 + 6);
    v18 += 4;
    v17 += 20;
    --v15;
  }
  while (v15);
LABEL_20:
  if (v14 && v13 && v7 && *(_BYTE *)(v12 + 17) != 2)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7);
  if (v11 && v9 && v7 && *(_BYTE *)(v8 + 17) != 2)
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 64))(v7, v11, v8, 0, v9, 0, 1);
}

float convertHighToLowZTileSpace(uint64_t a1, float *a2, float a3, double a4, float a5)
{
  LOWORD(a5) = *(_WORD *)(a1 + 4);
  return (float)(*a2 + (float)((float)LODWORD(a5) * a3)) / (float)*(unsigned __int16 *)(a1 + 2);
}

float convertLowToHighZTileSpace(uint64_t a1, float *a2, float a3, float a4, float a5)
{
  LOWORD(a4) = *(_WORD *)(a1 + 4);
  LOWORD(a5) = *(_WORD *)(a1 + 2);
  return (float)(*a2 - (float)((float)((float)LODWORD(a4) * a3) / (float)LODWORD(a5))) * (float)LODWORD(a5);
}

uint64_t md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0::~$_0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void md::Mesh::~Mesh(md::Mesh *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

_QWORD *std::__function::__func<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42C9008;
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E42C9008;
  v1 = (std::__shared_weak_count *)a1[6];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x48uLL);
  *(_QWORD *)result = &off_1E42C9008;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 48);
  *((_QWORD *)result + 5) = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 6) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *((_QWORD *)result + 7) = *(_QWORD *)(a1 + 56);
  *((_DWORD *)result + 16) = *(_DWORD *)(a1 + 64);
  return result;
}

uint64_t std::__function::__func<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  *(_QWORD *)a2 = &off_1E42C9008;
  v2 = *(_OWORD *)(result + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 48) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(result + 56);
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(result + 64);
  *(_QWORD *)(a2 + 56) = v6;
  return result;
}

void std::__function::__func<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__function::__func<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  __n128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(v4 + 8) * *(_QWORD *)(a1 + 56);
  v6.n128_u64[0] = v3;
  v6.n128_u64[1] = v4;
  v16 = v6;
  if (v5)
  {
    if (v3 && *(_BYTE *)(v4 + 17) != 2)
      v7 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v3 + 56))(v3);
    else
      v7 = *(_QWORD *)(v4 + 72);
  }
  else
  {
    v7 = 0;
  }
  if (*(_QWORD *)(a1 + 56))
  {
    v8 = 0;
    v9 = v7;
    while (1)
    {
      v10 = *(_QWORD *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 64);
      v12 = *(_QWORD *)v9;
      v19 = **(_QWORD **)(a1 + 32);
      v18 = v12;
      v17 = v11;
      v13 = *(_QWORD *)(v10 + 24);
      if (!v13)
        break;
      *(float *)v9 = (*(float (**)(uint64_t, uint64_t *, uint64_t *, int *))(*(_QWORD *)v13 + 48))(v13, &v19, &v18, &v17);
      *(_DWORD *)(v9 + 4) = v14;
      v9 += 16;
      if ((unint64_t)++v8 >= *(_QWORD *)(a1 + 56))
        goto LABEL_11;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  else
  {
LABEL_11:
    if (v7)
    {
      if (v5)
        v15 = v16.n128_u64[0] == 0;
      else
        v15 = 1;
      if (!v15 && *(_BYTE *)(v16.n128_u64[1] + 17) != 2)
        (*(void (**)(__n128))(*(_QWORD *)v16.n128_u64[0] + 64))(v16);
    }
  }
}

void sub_19F3F90B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<gm::Matrix<float,2,1> (*)(ZDiffParams const&,gm::Matrix<float,2,1> const&,float),std::allocator<gm::Matrix<float,2,1> (*)(ZDiffParams const&,gm::Matrix<float,2,1> const&,float)>,gm::Matrix<float,2,1> ()(ZDiffParams,gm::Matrix<float,2,1>,float)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<gm::Matrix<float,2,1> (*)(ZDiffParams const&,gm::Matrix<float,2,1> const&,float),std::allocator<gm::Matrix<float,2,1> (*)(ZDiffParams const&,gm::Matrix<float,2,1> const&,float)>,gm::Matrix<float,2,1> ()(ZDiffParams,gm::Matrix<float,2,1>,float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C6EB8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gm::Matrix<float,2,1> (*)(ZDiffParams const&,gm::Matrix<float,2,1> const&,float),std::allocator<gm::Matrix<float,2,1> (*)(ZDiffParams const&,gm::Matrix<float,2,1> const&,float)>,gm::Matrix<float,2,1> ()(ZDiffParams,gm::Matrix<float,2,1>,float)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C6EB8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<gm::Matrix<float,2,1> (*)(ZDiffParams const&,gm::Matrix<float,2,1> const&,float),std::allocator<gm::Matrix<float,2,1> (*)(ZDiffParams const&,gm::Matrix<float,2,1> const&,float)>,gm::Matrix<float,2,1> ()(ZDiffParams,gm::Matrix<float,2,1>,float)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(a1 + 8))(a2, a3, *a4);
}

void std::__shared_ptr_emplace<ggl::DaVinci::TexturedCompressedDrapingMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4BD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DaVinci::TexturedCompressedDrapingMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4BD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::TexturedCompressedDrapingMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::__function::__func<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42C9170;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E42C9170;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)result = &off_1E42C9170;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *((_QWORD *)result + 4) = *(_QWORD *)(a1 + 32);
  return result;
}

_QWORD *std::__function::__func<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = result[1];
  *a2 = &off_1E42C9170;
  a2[1] = v2;
  v3 = result[3];
  a2[2] = result[2];
  a2[3] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[4] = result[4];
  return result;
}

void std::__function::__func<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__function::__func<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(_QWORD *a1, _QWORD *a2, int16x4_t a3, double a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  float *v17;
  _DWORD *v18;
  int v19;
  float *v20;
  _DWORD *v21;
  int v22;
  BOOL v23;
  char v24;
  char **v25;
  char *v26;

  v5 = *a2;
  v6 = a1[2];
  v7 = *(_QWORD *)(v6 + 8) * a1[4];
  if (v7)
  {
    if (v5 && *(_BYTE *)(v6 + 17) != 2)
      v8 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 56))(*a2, v6, 0, v7, 1, 1);
    else
      v8 = *(_QWORD *)(v6 + 72);
  }
  else
  {
    v8 = 0;
  }
  v9 = (_BYTE *)a1[1];
  if (v9[61] == 1)
  {
    v10 = **(_QWORD **)(*(_QWORD *)v9 + 64);
    v11 = *(_QWORD *)(v10 + 8) * a1[4];
    if ((*(_BYTE *)(v10 + 16) & 2) == 0)
    {
      v15 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v15 != -1)
      {
        v26 = &v24;
        v25 = &v26;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    if (v11)
    {
      if (v5 && *(_BYTE *)(v10 + 17) != 2)
      {
        v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 56))(v5, v10, 0, v11, 0, 1);
        v16 = a1[4];
        if (!v16)
          goto LABEL_36;
      }
      else
      {
        v13 = *(_QWORD *)(v10 + 72);
        v16 = a1[4];
        if (!v16)
          goto LABEL_36;
      }
    }
    else
    {
      v13 = 0;
      v16 = a1[4];
      if (!v16)
        goto LABEL_36;
    }
    v20 = (float *)(v8 + 8);
    v21 = (_DWORD *)(v13 + 4);
    do
    {
      a3.i16[0] = *((_WORD *)v21 - 2);
      a3 = (int16x4_t)vmovl_s16(a3).u64[0];
      LOWORD(a4) = *((_WORD *)v21 - 1);
      *(_QWORD *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      *(float *)&a4 = (float)SLODWORD(a4) * 3.9001;
      *(v20 - 2) = (float)a3.i32[0] * 3.9001;
      *(v20 - 1) = *(float *)&a4;
      v22 = *v21;
      v21 += 2;
      a3.i16[1] = HIWORD(v22);
      *(_DWORD *)v20 = v22;
      v20 += 4;
      --v16;
    }
    while (v16);
  }
  else
  {
    if (v9[61])
      goto LABEL_41;
    v10 = **(_QWORD **)(*(_QWORD *)v9 + 64);
    v11 = *(_QWORD *)(v10 + 8) * a1[4];
    if ((*(_BYTE *)(v10 + 16) & 2) == 0)
    {
      v12 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v12 != -1)
      {
        v26 = &v24;
        v25 = &v26;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    if (v11)
    {
      if (v5 && *(_BYTE *)(v10 + 17) != 2)
      {
        v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 56))(v5, v10, 0, v11, 0, 1);
        v14 = a1[4];
        if (!v14)
          goto LABEL_36;
      }
      else
      {
        v13 = *(_QWORD *)(v10 + 72);
        v14 = a1[4];
        if (!v14)
          goto LABEL_36;
      }
    }
    else
    {
      v13 = 0;
      v14 = a1[4];
      if (!v14)
        goto LABEL_36;
    }
    v17 = (float *)(v8 + 8);
    v18 = (_DWORD *)(v13 + 4);
    do
    {
      a3.i16[0] = *((_WORD *)v18 - 2);
      a3 = (int16x4_t)vmovl_s16(a3).u64[0];
      LOWORD(a4) = *((_WORD *)v18 - 1);
      *(_QWORD *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      *(float *)&a4 = (float)SLODWORD(a4) * 3.9001;
      *(v17 - 2) = (float)a3.i32[0] * 3.9001;
      *(v17 - 1) = *(float *)&a4;
      v19 = *v18;
      v18 += 2;
      a3.i16[1] = HIWORD(v19);
      *(_DWORD *)v17 = v19;
      v17 += 4;
      --v14;
    }
    while (v14);
  }
LABEL_36:
  if (v13 && v11 && v5 && *(_BYTE *)(v10 + 17) != 2)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5);
LABEL_41:
  if (v8)
  {
    if (v7)
      v23 = v5 == 0;
    else
      v23 = 1;
    if (!v23 && *(_BYTE *)(v6 + 17) != 2)
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 64))(v5, v8, v6, 0, v7, 1, 1);
  }
}

uint64_t ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedDrapingVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedDrapingVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedDrapingVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedDrapingVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0678;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedDrapingVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0678;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedDrapingVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void `non-virtual thunk to'ggl::Mesh::~Mesh(ggl::Mesh *this)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::Mesh::Mesh(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t ***v20;
  uint64_t v21;
  uint64_t **v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  BOOL v30;
  unint64_t v31;
  uint64_t **v32;
  uint64_t **v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  _QWORD *v43;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &off_1E42BE298;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = &off_1E42B8A10;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)a1 = &off_1E42BBC08;
  *(_QWORD *)(a1 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v9;
  v10 = *(char **)(a2 + 64);
  v11 = *(char **)(a2 + 72);
  v12 = v11 - v10;
  if (v11 != v10)
  {
    if (v12 < 0)
      abort();
    v13 = (_QWORD *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v11 - v10, 8);
    *(_QWORD *)(a1 + 64) = v13;
    *(_QWORD *)(a1 + 72) = v13;
    *(_QWORD *)(a1 + 80) = &v13[2 * (v12 >> 4)];
    do
    {
      if (v13)
      {
        v14 = *((_QWORD *)v10 + 1);
        *v13 = *(_QWORD *)v10;
        v13[1] = v14;
        if (v14)
        {
          v15 = (unint64_t *)(v14 + 8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
      }
      v10 += 16;
      v13 += 2;
    }
    while (v10 != v11);
    *(_QWORD *)(a1 + 72) = v13;
  }
  v17 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *(_QWORD *)(a1 + 112) = 0;
  v20 = (uint64_t ***)(a1 + 112);
  v21 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = v21;
  v22 = (uint64_t **)(a1 + 120);
  v23 = (_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  v24 = *(_QWORD **)(a2 + 112);
  if (v24 != v23)
  {
    do
    {
      v26 = *v22;
      v27 = (uint64_t *)(a1 + 120);
      if (*v20 == v22)
        goto LABEL_26;
      v28 = *v22;
      v29 = (uint64_t *)(a1 + 120);
      if (v26)
      {
        do
        {
          v27 = v28;
          v28 = (uint64_t *)v28[1];
        }
        while (v28);
      }
      else
      {
        do
        {
          v27 = (uint64_t *)v29[2];
          v30 = *v27 == (_QWORD)v29;
          v29 = v27;
        }
        while (v30);
      }
      v31 = v24[4];
      if (v27[4] < v31)
      {
LABEL_26:
        if (v26)
          v32 = (uint64_t **)v27;
        else
          v32 = (uint64_t **)(a1 + 120);
        if (v26)
          v33 = (uint64_t **)(v27 + 1);
        else
          v33 = (uint64_t **)(a1 + 120);
      }
      else
      {
        v32 = (uint64_t **)(a1 + 120);
        v33 = (uint64_t **)(a1 + 120);
        if (v26)
        {
          v33 = (uint64_t **)(a1 + 120);
          while (1)
          {
            while (1)
            {
              v32 = (uint64_t **)v26;
              v35 = v26[4];
              if (v31 >= v35)
                break;
              v26 = *v32;
              v33 = v32;
              if (!*v32)
                goto LABEL_41;
            }
            if (v35 >= v31)
              break;
            v33 = v32 + 1;
            v26 = v32[1];
            if (!v26)
              goto LABEL_41;
          }
        }
      }
      if (*v33)
      {
        v34 = (_QWORD *)v24[1];
        if (v34)
          goto LABEL_47;
      }
      else
      {
LABEL_41:
        v36 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128), 56, 8);
        v37 = v36;
        v38 = v24[5];
        v36[4] = v24[4];
        v36[5] = v38;
        v39 = v24[6];
        v36[6] = v39;
        if (v39)
        {
          v40 = (unint64_t *)(v39 + 8);
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
        *v36 = 0;
        v36[1] = 0;
        v36[2] = (uint64_t)v32;
        *v33 = v36;
        v42 = **v20;
        if (v42)
        {
          *v20 = (uint64_t **)v42;
          v37 = *v33;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 120), v37);
        ++*(_QWORD *)(a1 + 136);
        v34 = (_QWORD *)v24[1];
        if (v34)
        {
          do
          {
LABEL_47:
            v43 = v34;
            v34 = (_QWORD *)*v34;
          }
          while (v34);
          goto LABEL_19;
        }
      }
      do
      {
        v43 = (_QWORD *)v24[2];
        v30 = *v43 == (_QWORD)v24;
        v24 = v43;
      }
      while (!v30);
LABEL_19:
      v24 = v43;
    }
    while (v43 != v23);
  }
  return a1;
}

void sub_19F3F9CEC(_Unwind_Exception *a1)
{
  ggl::Texture *v1;

  ggl::Texture::~Texture(v1);
  _Unwind_Resume(a1);
}

void ggl::Draping::FoundationMesh::~FoundationMesh(ggl::Draping::FoundationMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::Draping::FoundationMesh::~FoundationMesh(ggl::Draping::FoundationMesh *this)
{
  ggl::Mesh::~Mesh((ggl::Draping::FoundationMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Draping::FoundationMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t *std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

void ggl::NamedBase<char const*>::~NamedBase()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42C9128;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E42C9128;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E42C9128;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)v2 + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 32);
  *((__n128 *)v2 + 2) = result;
  return result;
}

__n128 std::__function::__func<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(__n128 *a1, __n128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v2 = a1->n128_u64[1];
  a2->n128_u64[0] = (unint64_t)&off_1E42C9128;
  a2->n128_u64[1] = v2;
  v3 = a1[1].n128_u64[1];
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  a2[1].n128_u64[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = a1[2];
  a2[2] = result;
  return result;
}

void std::__function::__func<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__function::__func<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int8x16_t *v15;
  _DWORD *v16;
  int *v17;
  float32x2_t v18;
  int32x2_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int v23;
  int8x16_t *v24;
  _DWORD *v25;
  int *v26;
  float32x2_t v27;
  int32x2_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int v32;
  BOOL v33;
  char v34;
  char **v35;
  char *v36;

  v3 = *a2;
  v4 = a1[2];
  v5 = *(_QWORD *)(v4 + 8) * a1[4];
  if (v5)
  {
    if (v3 && *(_BYTE *)(v4 + 17) != 2)
      v6 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 56))(*a2, v4, 0, v5, 1, 1);
    else
      v6 = *(_QWORD *)(v4 + 72);
  }
  else
  {
    v6 = 0;
  }
  v7 = (_BYTE *)a1[1];
  if (v7[61] == 1)
  {
    v8 = **(_QWORD **)(*(_QWORD *)v7 + 64);
    v9 = *(_QWORD *)(v8 + 8) * a1[4];
    if ((*(_BYTE *)(v8 + 16) & 2) == 0)
    {
      v13 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v13 != -1)
      {
        v36 = &v34;
        v35 = &v36;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v35, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    if (v9)
    {
      if (v3 && *(_BYTE *)(v8 + 17) != 2)
      {
        v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 56))(v3, v8, 0, v9, 0, 1);
        v14 = a1[4];
        if (!v14)
          goto LABEL_36;
      }
      else
      {
        v11 = *(_QWORD *)(v8 + 72);
        v14 = a1[4];
        if (!v14)
          goto LABEL_36;
      }
    }
    else
    {
      v11 = 0;
      v14 = a1[4];
      if (!v14)
        goto LABEL_36;
    }
    v24 = (int8x16_t *)a1[5];
    v25 = (_DWORD *)(v6 + 8);
    v26 = (int *)(v11 + 4);
    v27 = (float32x2_t)vdup_n_s32(0x40799A93u);
    do
    {
      v28.i32[0] = *((__int16 *)v26 - 2);
      v28.i32[1] = *((__int16 *)v26 - 1);
      *(float32x2_t *)v29.i8 = vmul_f32(vcvt_f32_s32(v28), v27);
      v29.i64[1] = v29.i64[0];
      v30.i64[0] = v24->i64[0];
      v30.i64[1] = v29.i64[0];
      v31.i64[0] = v29.i64[0];
      v31.i64[1] = vextq_s8(*v24, *v24, 8uLL).u64[0];
      *v24 = vbslq_s8((int8x16_t)vcgtq_f32(v30, v31), v29, *v24);
      *((_QWORD *)v25 - 1) = v29.i64[0];
      v32 = *v26;
      v26 += 2;
      *v25 = v32;
      v25 += 4;
      --v14;
    }
    while (v14);
  }
  else
  {
    if (v7[61])
      goto LABEL_41;
    v8 = **(_QWORD **)(*(_QWORD *)v7 + 64);
    v9 = *(_QWORD *)(v8 + 8) * a1[4];
    if ((*(_BYTE *)(v8 + 16) & 2) == 0)
    {
      v10 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v10 != -1)
      {
        v36 = &v34;
        v35 = &v36;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v35, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    if (v9)
    {
      if (v3 && *(_BYTE *)(v8 + 17) != 2)
      {
        v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 56))(v3, v8, 0, v9, 0, 1);
        v12 = a1[4];
        if (!v12)
          goto LABEL_36;
      }
      else
      {
        v11 = *(_QWORD *)(v8 + 72);
        v12 = a1[4];
        if (!v12)
          goto LABEL_36;
      }
    }
    else
    {
      v11 = 0;
      v12 = a1[4];
      if (!v12)
        goto LABEL_36;
    }
    v15 = (int8x16_t *)a1[5];
    v16 = (_DWORD *)(v6 + 8);
    v17 = (int *)(v11 + 4);
    v18 = (float32x2_t)vdup_n_s32(0x40799A93u);
    do
    {
      v19.i32[0] = *((__int16 *)v17 - 2);
      v19.i32[1] = *((__int16 *)v17 - 1);
      *(float32x2_t *)v20.i8 = vmul_f32(vcvt_f32_s32(v19), v18);
      v20.i64[1] = v20.i64[0];
      v21.i64[0] = v15->i64[0];
      v21.i64[1] = v20.i64[0];
      v22.i64[0] = v20.i64[0];
      v22.i64[1] = vextq_s8(*v15, *v15, 8uLL).u64[0];
      *v15 = vbslq_s8((int8x16_t)vcgtq_f32(v21, v22), v20, *v15);
      *((_QWORD *)v16 - 1) = v20.i64[0];
      v23 = *v17;
      v17 += 2;
      *v16 = v23;
      v16 += 4;
      --v12;
    }
    while (v12);
  }
LABEL_36:
  if (v11 && v9 && v3 && *(_BYTE *)(v8 + 17) != 2)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
LABEL_41:
  if (v6)
  {
    if (v5)
      v33 = v3 == 0;
    else
      v33 = 1;
    if (!v33 && *(_BYTE *)(v4 + 17) != 2)
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(v3, v6, v4, 0, v5, 1, 1);
  }
}

uint64_t ggl::VertexDataTyped<ggl::Draping::FoundationVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::Draping::FoundationVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::Draping::FoundationVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Draping::FoundationVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0758;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Draping::FoundationVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0758;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Draping::FoundationVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__compressed_pair_elem<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 16);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_QWORD *)(a1 + 52) = *(_QWORD *)(a2 + 52);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_QWORD *)(a1 + 76) = *(_QWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  std::vector<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem>>::vector((_QWORD *)(a1 + 104), (uint64_t *)(a2 + 104));
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v14 = *(_QWORD *)(a2 + 128);
  v13 = *(_QWORD *)(a2 + 136);
  v15 = v13 - v14;
  if (v13 != v14)
  {
    v16 = 0xCCCCCCCCCCCCCCCDLL * (v15 >> 4);
    if (v16 >= 0x333333333333334)
      abort();
    v17 = (char *)operator new(v15);
    *(_QWORD *)(a1 + 128) = v17;
    *(_QWORD *)(a1 + 136) = v17;
    *(_QWORD *)(a1 + 144) = &v17[80 * v16];
    do
    {
      v18 = *(_QWORD *)(v14 + 8);
      *(_QWORD *)v17 = *(_QWORD *)v14;
      *((_QWORD *)v17 + 1) = v18;
      if (v18)
      {
        v19 = (unint64_t *)(v18 + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v21 = *(_OWORD *)(v14 + 16);
      v22 = *(_OWORD *)(v14 + 32);
      *(_OWORD *)(v17 + 46) = *(_OWORD *)(v14 + 46);
      *((_OWORD *)v17 + 1) = v21;
      *((_OWORD *)v17 + 2) = v22;
      v23 = *(_QWORD *)(v14 + 72);
      *((_QWORD *)v17 + 8) = *(_QWORD *)(v14 + 64);
      *((_QWORD *)v17 + 9) = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v14 += 80;
      v17 += 80;
    }
    while (v14 != v13);
    *(_QWORD *)(a1 + 136) = v17;
  }
  return a1;
}

void sub_19F3FA818(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;

  v3 = (std::__shared_weak_count *)v1[5];
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
    v4 = (std::__shared_weak_count *)v1[3];
    if (!v4)
    {
LABEL_3:
      v5 = (std::__shared_weak_count *)v1[1];
      if (!v5)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v4 = (std::__shared_weak_count *)v1[3];
    if (!v4)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v4);
  v5 = (std::__shared_weak_count *)v1[1];
  if (!v5)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(exception_object);
}

uint64_t md::outputDebugString(_BYTE *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  char v11;

  v4 = (_QWORD *)std::ostream::operator<<();
  v10 = 46;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, (uint64_t)&v10, 1);
  v5 = (_QWORD *)std::ostream::operator<<();
  v11 = 46;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)&v11, 1);
  result = std::ostream::operator<<();
  switch(*a1)
  {
    case 0:
      v7 = ".front";
      goto LABEL_4;
    case 1:
      v7 = ".right";
LABEL_4:
      v8 = a2;
      v9 = 6;
      goto LABEL_10;
    case 2:
      v7 = ".top";
      v8 = a2;
      v9 = 4;
      goto LABEL_10;
    case 3:
      v7 = ".back";
      goto LABEL_8;
    case 4:
      v7 = ".left";
LABEL_8:
      v8 = a2;
      v9 = 5;
      goto LABEL_10;
    case 5:
      v7 = ".bottom";
      v8 = a2;
      v9 = 7;
LABEL_10:
      result = (uint64_t)std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)v7, v9);
      break;
    default:
      return result;
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::PolylineOverlayRibbon::BaseMesh  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::PolylineOverlayRibbon::BaseMesh  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<md::Mesh  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::Mesh  *>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 72);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::__shared_ptr_emplace<md::DrapingTaskInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB320;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::DrapingTaskInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB320;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::DrapingTaskInfo>::__on_zero_shared(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = a1[17];
  if (v2)
  {
    v3 = a1[18];
    v4 = (void *)a1[17];
    if (v3 != v2)
    {
      do
      {
        v3 -= 80;
        std::__destroy_at[abi:nn180100]<md::ClientDrapedMeshes,0>(v3);
      }
      while (v3 != v2);
      v4 = (void *)a1[17];
    }
    a1[18] = v2;
    operator delete(v4);
  }
  v5 = (void *)a1[14];
  if (v5)
  {
    a1[15] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[11];
  if (v6)
    operator delete(v6);
  v7 = (std::__shared_weak_count *)a1[9];
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  v8 = (std::__shared_weak_count *)a1[7];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void ___ZL30GEOGetVectorKitDrapingLogicLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "DrapingLogic");
  v1 = (void *)GEOGetVectorKitDrapingLogicLog(void)::log;
  GEOGetVectorKitDrapingLogicLog(void)::log = (uint64_t)v0;

}

uint64_t gdc::Registry::getOrAdd<gdc::components::RegistryBridgeMap<gdc::Entity>>(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t *v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (***v23)();
  uint64_t v24;
  _QWORD *jj;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t **kk;
  unint64_t v30;
  unint64_t v31;
  _QWORD *i;
  uint64_t v33;
  uint64_t **j;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t (***v41)();
  _QWORD *k;
  char *v43;
  char *v44;
  char *v45;
  uint64_t (***v46)();
  _QWORD *n;
  uint64_t **ii;
  uint64_t **m;
  char *v50;
  char *v51;
  void (***v52)(char *);
  void (**v53)(char *);
  _QWORD *mm;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t **nn;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  void *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (**v75)();
  void *v76[2];
  void *__p[2];
  int v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;

  v4 = (_QWORD *)gdc::Registry::storage<gdc::components::RegistryBridgeMap<gdc::Entity>>(a1);
  v5 = HIDWORD(a2);
  v6 = a2 >> 39;
  v7 = v4[4];
  if (a2 >> 39 < (v4[5] - v7) >> 3)
  {
    v8 = *(_QWORD *)(v7 + 8 * v6);
    if (v8)
    {
      v9 = *(unsigned __int16 *)(v8 + 2 * (HIDWORD(a2) & 0x7F));
      v11 = v4[7];
      v10 = v4[8];
      if (v9 < (v10 - v11) >> 3)
      {
        v12 = v11 + 8 * v9;
        v13 = v12 != v10 && *(_DWORD *)(v12 + 4) == HIDWORD(a2);
        if (v13)
        {
          v14 = v4[10];
          v15 = v4[11];
          result = v14 + 48 * v9;
          if (result != v15 && v14 != 0)
            return result;
        }
      }
    }
  }
  v18 = (uint64_t *)gdc::Registry::storage<gdc::components::RegistryBridgeMap<gdc::Entity>>(a1);
  v75 = &off_1E42B06D8;
  *(_OWORD *)v76 = 0u;
  *(_OWORD *)__p = 0u;
  v78 = 1065353216;
  v79 = a2;
  v19 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v18 + 4, (uint64_t)&v79);
  if ((v20 & 1) != 0)
  {
    v31 = v18[11];
    v30 = v18[12];
    if (v31 < v30)
    {
      *(_OWORD *)(v31 + 8) = 0u;
      *(_QWORD *)v31 = &off_1E42B06D8;
      *(_OWORD *)(v31 + 24) = 0u;
      *(_DWORD *)(v31 + 40) = 1065353216;
      if ((uint64_t (***)())v31 != &v75)
      {
        std::__hash_table<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>>>::swap(v31 + 8, (uint64_t)v76);
        for (i = *(_QWORD **)(v31 + 24); i; i = (_QWORD *)*i)
        {
          for (j = (uint64_t **)i[5]; j; j = (uint64_t **)*j)
            *j[3] = v31;
        }
      }
      v33 = v31 + 48;
      goto LABEL_68;
    }
    v35 = v18[10];
    v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - v35) >> 4);
    if (v36 + 1 > 0x555555555555555)
      abort();
    v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - v35) >> 4);
    v38 = 2 * v37;
    if (2 * v37 <= v36 + 1)
      v38 = v36 + 1;
    if (v37 >= 0x2AAAAAAAAAAAAAALL)
      v39 = 0x555555555555555;
    else
      v39 = v38;
    if (v39)
    {
      if (v39 > 0x555555555555555)
        goto LABEL_101;
      v40 = operator new(48 * v39);
    }
    else
    {
      v40 = 0;
    }
    v41 = (uint64_t (***)())&v40[6 * v36];
    *(_OWORD *)(v41 + 1) = 0u;
    *v41 = &off_1E42B06D8;
    *(_OWORD *)(v41 + 3) = 0u;
    *((_DWORD *)v41 + 10) = 1065353216;
    if (v41 != &v75)
    {
      std::__hash_table<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>>>::swap((uint64_t)(v41 + 1), (uint64_t)v76);
      for (k = (_QWORD *)v40[6 * v36 + 3]; k; k = (_QWORD *)*k)
      {
        for (m = (uint64_t **)k[5]; m; m = (uint64_t **)*m)
          *m[3] = (uint64_t)v41;
      }
    }
    v43 = (char *)&v40[6 * v39];
    v33 = (uint64_t)(v41 + 6);
    v45 = (char *)v18[10];
    v44 = (char *)v18[11];
    if (v44 == v45)
    {
      v18[10] = (uint64_t)v41;
      v18[11] = v33;
      v18[12] = (uint64_t)v43;
      v6 = a2 >> 39;
      if (!v44)
      {
LABEL_68:
        v18[11] = v33;
        v26 = v18[31];
        goto LABEL_69;
      }
    }
    else
    {
      v74 = (uint64_t)v43;
      do
      {
        v46 = v41;
        *(v41 - 6) = &off_1E42B06D8;
        v41 -= 6;
        *(_OWORD *)(v46 - 5) = 0u;
        *(_OWORD *)(v46 - 3) = 0u;
        *((_DWORD *)v46 - 2) = 1065353216;
        if (v46 != (uint64_t (***)())v44)
        {
          std::__hash_table<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>>>::swap((uint64_t)(v46 - 5), (uint64_t)(v44 - 40));
          for (n = *(v46 - 3); n; n = (_QWORD *)*n)
          {
            for (ii = (uint64_t **)n[5]; ii; ii = (uint64_t **)*ii)
              *ii[3] = (uint64_t)v41;
          }
        }
        v44 -= 48;
      }
      while (v44 != v45);
      v44 = (char *)v18[10];
      v50 = (char *)v18[11];
      v18[10] = (uint64_t)v41;
      v18[11] = v33;
      v18[12] = v74;
      if (v50 == v44)
      {
        v5 = HIDWORD(a2);
        v6 = a2 >> 39;
        if (!v44)
          goto LABEL_68;
      }
      else
      {
        v51 = v50 - 48;
        v52 = (void (***)(char *))(v50 - 48);
        v6 = a2 >> 39;
        do
        {
          v53 = *v52;
          v52 -= 6;
          (*v53)(v51);
          v13 = v51 == v44;
          v51 = (char *)v52;
        }
        while (!v13);
        v5 = HIDWORD(a2);
        if (!v44)
          goto LABEL_68;
      }
    }
    operator delete(v44);
    goto LABEL_68;
  }
  v21 = v18[10];
  v22 = ((uint64_t)v19 - v18[7]) >> 3;
  v23 = (uint64_t (***)())(v21 + 48 * v22);
  if (v23 != &v75)
  {
    v24 = v21 + 48 * v22;
    std::__hash_table<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>>>::swap(v24 + 8, (uint64_t)v76);
    for (jj = *(_QWORD **)(v24 + 24); jj; jj = (_QWORD *)*jj)
    {
      for (kk = (uint64_t **)jj[5]; kk; kk = (uint64_t **)*kk)
        *kk[3] = (uint64_t)v23;
    }
  }
  v26 = v18[31];
  if (v23 != (uint64_t (***)())v18[11])
  {
    v27 = (_QWORD *)v18[16];
    if (v27)
    {
      while (1)
      {
        v81 = (uint64_t *)&v79;
        v82 = 1;
        v80 = v26;
        v28 = v27[6];
        if (!v28)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v28 + 48))(v28, &v80, &v81);
        v27 = (_QWORD *)*v27;
        if (!v27)
          goto LABEL_72;
      }
LABEL_99:
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
LABEL_101:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    goto LABEL_72;
  }
LABEL_69:
  for (mm = (_QWORD *)v18[22]; mm; mm = (_QWORD *)*mm)
  {
    v81 = (uint64_t *)&v79;
    v82 = 1;
    v80 = v26;
    v55 = mm[6];
    if (!v55)
      goto LABEL_99;
    (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v55 + 48))(v55, &v80, &v81);
  }
LABEL_72:
  v75 = &off_1E42B06D8;
  v56 = __p[0];
  if (__p[0])
  {
    v57 = __p[0];
    do
    {
      for (nn = (uint64_t **)v57[5]; nn; nn = (uint64_t **)*nn)
        *nn[3] = 0;
      v57 = (_QWORD *)*v57;
    }
    while (v57);
    do
    {
      v59 = (_QWORD *)*v56;
      v60 = (_QWORD *)v56[5];
      if (v60)
      {
        do
        {
          v61 = (_QWORD *)*v60;
          operator delete(v60);
          v60 = v61;
        }
        while (v61);
      }
      v62 = (void *)v56[3];
      v56[3] = 0;
      if (v62)
        operator delete(v62);
      operator delete(v56);
      v56 = v59;
    }
    while (v59);
  }
  v63 = v76[0];
  v76[0] = 0;
  if (v63)
    operator delete(v63);
  v64 = (_QWORD *)gdc::Registry::storage<gdc::components::RegistryBridgeMap<gdc::Entity>>(a1);
  v65 = v64[4];
  if (v6 < (v64[5] - v65) >> 3
    && (v66 = *(_QWORD *)(v65 + 8 * v6)) != 0
    && (v67 = *(unsigned __int16 *)(v66 + 2 * (HIDWORD(a2) & 0x7F)), v69 = v64[7], v68 = v64[8], v67 < (v68 - v69) >> 3)
    && ((v70 = v69 + 8 * v67, v70 != v68) ? (v71 = *(_DWORD *)(v70 + 4) == (_DWORD)v5) : (v71 = 0), v71))
  {
    v72 = v64[11];
    v73 = v64[10] + 48 * v67;
  }
  else
  {
    v72 = v64[11];
    v73 = v72;
  }
  if (v73 == v72)
    return 0;
  else
    return v73;
}

void sub_19F3FB164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  gdc::components::RegistryBridgeMap<gdc::Entity>::~RegistryBridgeMap((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::overlayComponents::CanDisableDraping>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0xC0B2E017CC0570FLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xC0B2E017CC0570FLL;
      if (*(_QWORD *)&v3 <= 0xC0B2E017CC0570FuLL)
        v5 = 0xC0B2E017CC0570FuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xC0B2E017CC0570FLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xC0B2E017CC0570FLL)
            {
              if (v7[2] == 0xC0B2E017CC0570FLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xC0B2E017CC0570FLL)
          {
            if (v7[2] == 0xC0B2E017CC0570FLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::overlayComponents::CanDisableDraping]";
  *(_QWORD *)(v11 + 24) = 40;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3738;
  *(_QWORD *)(v11 + 8) = 0xC0B2E017CC0570FLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xC0B2E017CC0570FuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xC0B2E017CC0570FLL;
  v15[1] = "md::overlayComponents::CanDisableDraping]";
  v15[2] = 40;
  gdc::Registry::_registerStorageDataSignals(a1, 0xC0B2E017CC0570FLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F3FB38C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::components::RegistryBridgeMap<gdc::Entity>::entities(_QWORD *a1, int8x8_t *a2, unint64_t a3)
{
  int8x8_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;

  v4 = a2[2];
  if (!*(_QWORD *)&v4)
    goto LABEL_21;
  v5 = 0x9DDFEA08EB382D69 * (((((a3 >> 3) & 0x3FFFFFF) << 6) | 8) ^ HIDWORD(a3));
  v6 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v5 >> 47) ^ v5);
  v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  v8 = (uint8x8_t)vcnt_s8(v4);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = v7;
    if (v7 >= *(_QWORD *)&v4)
      v9 = v7 % *(_QWORD *)&v4;
  }
  else
  {
    v9 = v7 & (*(_QWORD *)&v4 - 1);
  }
  v10 = *(_QWORD **)(*(_QWORD *)&a2[1] + 8 * v9);
  if (!v10 || (v11 = (_QWORD *)*v10) == 0)
  {
LABEL_21:
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  if (v8.u32[0] < 2uLL)
  {
    v12 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v14 = v11[1];
      if (v7 == v14)
      {
        if (v11[2] == a3)
          goto LABEL_23;
      }
      else if ((v14 & v12) != v9)
      {
        goto LABEL_21;
      }
      v11 = (_QWORD *)*v11;
      if (!v11)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v13 = v11[1];
    if (v7 == v13)
      break;
    if (v13 >= *(_QWORD *)&v4)
      v13 %= *(_QWORD *)&v4;
    if (v13 != v9)
      goto LABEL_21;
LABEL_11:
    v11 = (_QWORD *)*v11;
    if (!v11)
      goto LABEL_21;
  }
  if (v11[2] != a3)
    goto LABEL_11;
LABEL_23:
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v15 = v11[6];
  if (v15)
  {
    if (v15 >> 61)
      abort();
    v16 = v15;
    v17 = operator new(8 * v15);
    *a1 = v17;
    a1[1] = v17;
    a1[2] = &v17[v16];
    v18 = (_QWORD *)v11[5];
    if (!v18)
      return;
LABEL_31:
    while (2)
    {
      v20 = v18[3];
      v21 = a1[2];
      if ((unint64_t)v17 >= v21)
      {
        v22 = (_BYTE *)*a1;
        v23 = (uint64_t)v17 - *a1;
        v24 = v23 >> 3;
        v25 = (v23 >> 3) + 1;
        if (v25 >> 61)
          abort();
        v26 = v21 - (_QWORD)v22;
        if (v26 >> 2 > v25)
          v25 = v26 >> 2;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          if (v27 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v28 = operator new(8 * v27);
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[8 * v24];
        *v29 = *(_QWORD *)(v20 + 16);
        v19 = v29 + 1;
        if (v17 == (_QWORD *)v22)
        {
          v22 = v17;
          goto LABEL_48;
        }
        v30 = (char *)(v17 - 1) - v22;
        if (v30 < 0x168)
        {
          v31 = v17;
          goto LABEL_45;
        }
        if (&v28[v23 - 8 - (v30 & 0xFFFFFFFFFFFFFFF8)] > &v28[v23 - 8])
        {
          v31 = v17;
        }
        else
        {
          if ((_QWORD *)((char *)v17 - (v30 & 0xFFFFFFFFFFFFFFF8) - 8) <= v17 - 1)
          {
            if ((unint64_t)((char *)v17 - v28 - v23) < 0x20)
            {
              v31 = v17;
              goto LABEL_45;
            }
            v33 = (v30 >> 3) + 1;
            v31 = &v17[-(v33 & 0x3FFFFFFFFFFFFFFCLL)];
            v34 = &v28[8 * v24 - 16];
            v35 = (__int128 *)(v17 - 2);
            v36 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v37 = *v35;
              *(v34 - 1) = *(v35 - 1);
              *v34 = v37;
              v34 -= 2;
              v35 -= 2;
              v36 -= 4;
            }
            while (v36);
            v29 -= v33 & 0x3FFFFFFFFFFFFFFCLL;
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_45;
LABEL_48:
            *a1 = v29;
            a1[1] = v19;
            a1[2] = &v28[8 * v27];
            if (v22)
              operator delete(v22);
LABEL_30:
            a1[1] = v19;
            v18 = (_QWORD *)*v18;
            v17 = v19;
            if (!v18)
              return;
            continue;
          }
          v31 = v17;
        }
        do
        {
LABEL_45:
          v32 = *--v31;
          *--v29 = v32;
        }
        while (v31 != (_QWORD *)v22);
        v22 = (_BYTE *)*a1;
        goto LABEL_48;
      }
      break;
    }
    *v17 = *(_QWORD *)(v20 + 16);
    v19 = v17 + 1;
    goto LABEL_30;
  }
  v17 = 0;
  v18 = (_QWORD *)v11[5];
  if (v18)
    goto LABEL_31;
}

void sub_19F3FB6DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gdc::components::RegistryBridgeMap<gdc::Entity>::nodeForRegistryAndKey(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  unint64_t v3;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  float *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  _QWORD *v51;
  char *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t *v76;
  float *v77;
  unint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  __int128 v81;
  unint64_t v82;
  unint64_t *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t *v87;
  unint64_t v88;

  v7 = (uint64_t *)(a1 + 8);
  v8 = 0x9DDFEA08EB382D69 * (((((a2 >> 3) & 0x3FFFFFF) << 6) | 8) ^ HIDWORD(a2));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v8 >> 47) ^ v8);
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11)
        v3 = v10 % v11;
    }
    else
    {
      v3 = v10 & (v11 - 1);
    }
    v13 = *(void ***)(*v7 + 8 * v3);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = *((_QWORD *)v14 + 1);
            if (v16 == v10)
            {
              if (*((_QWORD *)v14 + 2) == a2)
                goto LABEL_60;
            }
            else if ((v16 & (v11 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v14 = *(char **)v14;
            if (!v14)
              goto LABEL_22;
          }
        }
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v10)
          {
            if (*((_QWORD *)v14 + 2) == a2)
              goto LABEL_60;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v3)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_22:
  v17 = (_QWORD *)(a1 + 24);
  v14 = (char *)operator new(0x40uLL);
  v83 = (unint64_t *)v14;
  v84 = a1 + 24;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_QWORD *)v14 + 2) = a2;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  LOBYTE(v85) = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 32) + 1);
  v19 = *(float *)(a1 + 40);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    v20 = 1;
    if (v11 >= 3)
      v20 = (v11 & (v11 - 1)) != 0;
    v21 = v20 | (2 * v11);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 16);
    }
    if (prime > v11)
      goto LABEL_34;
    if (prime < v11)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 32) / *(float *)(a1 + 40));
      if (v11 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v11)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v7, prime);
    }
    v11 = *(_QWORD *)(a1 + 16);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v27 = *v7;
  v28 = *(_QWORD **)(*v7 + 8 * v3);
  if (v28)
  {
    *(_QWORD *)v14 = *v28;
LABEL_58:
    *v28 = v14;
    goto LABEL_59;
  }
  *(_QWORD *)v14 = *v17;
  *v17 = v14;
  *(_QWORD *)(v27 + 8 * v3) = v17;
  if (*(_QWORD *)v14)
  {
    v29 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v29 >= v11)
        v29 %= v11;
    }
    else
    {
      v29 &= v11 - 1;
    }
    v28 = (_QWORD *)(*v7 + 8 * v29);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 32);
LABEL_60:
  v30 = (float *)(v14 + 24);
  v31 = std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::find<gdc::Entity>((_QWORD *)v14 + 3, *a3);
  if (v31)
    return v31[3];
  v33 = gdc::Registry::create((gdc::Registry *)a2);
  v34 = (uint64_t *)gdc::Registry::storage<gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode>(a2);
  v79 = 0;
  v80 = a2;
  v35 = *a3;
  *(_QWORD *)&v81 = v33;
  *((_QWORD *)&v81 + 1) = v35;
  v82 = v33;
  v36 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v34 + 4, (uint64_t)&v82);
  v78 = v33;
  if ((v37 & 1) == 0)
  {
    v38 = gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode::operator=((uint64_t *)(v34[10] + 4 * ((_QWORD)v36 - v34[7])), (uint64_t *)&v79);
    v39 = v34[31];
    if (v38 == (uint64_t *)v34[11])
    {
      v51 = (_QWORD *)v34[22];
      if (v51)
        goto LABEL_97;
    }
    else
    {
      v40 = (_QWORD *)v34[16];
      if (v40)
      {
        while (1)
        {
          v83 = &v82;
          v84 = 1;
          v88 = v39;
          v41 = v40[6];
          if (!v41)
            break;
          (*(void (**)(uint64_t, unint64_t *, unint64_t **))(*(_QWORD *)v41 + 48))(v41, &v88, &v83);
          v40 = (_QWORD *)*v40;
          if (!v40)
            goto LABEL_99;
        }
LABEL_117:
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
LABEL_119:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
    }
    goto LABEL_99;
  }
  v42 = v34[12];
  v43 = (char *)v34[11];
  v77 = v30;
  if ((unint64_t)v43 < v42)
  {
    *(_QWORD *)v43 = v79;
    *((_QWORD *)v43 + 1) = v80;
    *((_OWORD *)v43 + 1) = v81;
    v44 = (uint64_t)(v43 + 32);
    v34[11] = (uint64_t)(v43 + 32);
    goto LABEL_96;
  }
  v45 = (char *)v34[10];
  v46 = (v43 - v45) >> 5;
  v47 = v46 + 1;
  if ((unint64_t)(v46 + 1) >> 59)
    abort();
  v48 = v42 - (_QWORD)v45;
  if (v48 >> 4 > v47)
    v47 = v48 >> 4;
  if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFE0)
    v49 = 0x7FFFFFFFFFFFFFFLL;
  else
    v49 = v47;
  v87 = v34 + 12;
  v76 = a3;
  if (v49)
  {
    if (v49 >> 59)
      goto LABEL_119;
    v50 = (unint64_t *)operator new(32 * v49);
  }
  else
  {
    v50 = 0;
  }
  v52 = (char *)&v50[4 * v46];
  v83 = v50;
  v84 = (uint64_t)v52;
  v53 = (char *)&v50[4 * v49];
  v86 = v53;
  v54 = v80;
  *(_QWORD *)v52 = v79;
  *((_QWORD *)v52 + 1) = v54;
  *((_OWORD *)v52 + 1) = v81;
  v44 = (uint64_t)(v52 + 32);
  v85 = v52 + 32;
  if (v43 == v45)
  {
    v61 = v45;
  }
  else
  {
    v55 = 0;
    do
    {
      v56 = &v52[v55];
      v57 = *(_QWORD *)&v43[v55 - 32];
      *(_QWORD *)&v52[v55 - 32] = v57;
      v58 = &v52[v55 - 32];
      v59 = *(_QWORD *)&v43[v55 - 24];
      *((_QWORD *)v56 - 3) = v59;
      *((_QWORD *)v56 - 2) = *(_QWORD *)&v43[v55 - 16];
      *((_QWORD *)v56 - 1) = *(_QWORD *)&v43[v55 - 8];
      if (v57)
      {
        v88 = v59;
        v60 = std::__hash_table<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>>>::__emplace_unique_key_args<gdc::Registry *,std::piecewise_construct_t const&,std::tuple<gdc::Registry * const&>,std::tuple<>>(v57 + 8, v59, &v88);
        std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::__emplace_unique_key_args<gdc::Entity,std::piecewise_construct_t const&,std::tuple<gdc::Entity const&>,std::tuple<>>((float *)v60 + 6, *(_QWORD *)&v52[v55 - 8], &v52[v55 - 8])[3] = v58;
        *(_QWORD *)v58 = v57;
      }
      v55 -= 32;
    }
    while (&v43[v55] != v45);
    v52 += v55;
    v61 = (char *)v34[10];
    v45 = (char *)v34[11];
    v44 = (uint64_t)v85;
    v53 = v86;
  }
  v34[10] = (uint64_t)v52;
  v34[11] = v44;
  v62 = v34[12];
  v34[12] = (uint64_t)v53;
  v85 = v45;
  v86 = (char *)v62;
  v83 = (unint64_t *)v61;
  v84 = (uint64_t)v61;
  if (v45 == v61)
  {
    a3 = v76;
    if (v45)
LABEL_95:
      operator delete(v45);
  }
  else
  {
    v63 = v45 - 32;
    a3 = v76;
    do
    {
      v85 = v63;
      if (*(_QWORD *)v63)
        gdc::components::RegistryBridgeMap<gdc::Entity>::nodeIsBeingDestroyed(*(_QWORD **)v63, (uint64_t)v63);
      v72 = v63 == v61;
      v63 -= 32;
    }
    while (!v72);
    v45 = v61;
    if (v61)
      goto LABEL_95;
  }
LABEL_96:
  v34[11] = v44;
  v39 = v34[31];
  v30 = v77;
  v51 = (_QWORD *)v34[22];
  if (v51)
  {
LABEL_97:
    do
    {
      v83 = &v82;
      v84 = 1;
      v88 = v39;
      v64 = v51[6];
      if (!v64)
        goto LABEL_117;
      (*(void (**)(uint64_t, unint64_t *, unint64_t **))(*(_QWORD *)v64 + 48))(v64, &v88, &v83);
      v51 = (_QWORD *)*v51;
    }
    while (v51);
  }
LABEL_99:
  if (v79)
    gdc::components::RegistryBridgeMap<gdc::Entity>::nodeIsBeingDestroyed(v79, (uint64_t)&v79);
  v65 = (_QWORD *)gdc::Registry::storage<gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode>(a2);
  v66 = v65[4];
  if (v78 >> 39 < (v65[5] - v66) >> 3
    && (v67 = *(_QWORD *)(v66 + 8 * (v78 >> 39))) != 0
    && (v68 = *(unsigned __int16 *)(v67 + 2 * (HIDWORD(v78) & 0x7F)), v70 = v65[7], v69 = v65[8], v68 < (v69 - v70) >> 3)
    && ((v71 = v70 + 8 * v68, v71 != v69) ? (v72 = *(_DWORD *)(v71 + 4) == HIDWORD(v78)) : (v72 = 0), v72))
  {
    v73 = v65[11];
    v32 = v65[10] + 32 * v68;
  }
  else
  {
    v73 = v65[11];
    v32 = v73;
  }
  if (v32 == v73)
    v74 = 0;
  else
    v74 = (_QWORD *)v32;
  std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::__emplace_unique_key_args<gdc::Entity,std::piecewise_construct_t const&,std::tuple<gdc::Entity const&>,std::tuple<>>(v30, *a3, a3)[3] = v74;
  *v74 = a1;
  return v32;
}

void sub_19F3FBE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  _QWORD *v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::__split_buffer<gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode,std::allocator<gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode> &>::~__split_buffer((uint64_t)va1);
  if (!v5)
    _Unwind_Resume(a1);
  gdc::components::RegistryBridgeMap<gdc::Entity>::nodeIsBeingDestroyed(v5, (uint64_t)va);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::components::Material>::emplace<int,std::shared_ptr<gms::Material<ggl::Texture2D>>>(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  _QWORD v15[2];
  std::__shared_weak_count *v16;

  v4 = (std::__shared_weak_count *)a4[1];
  v5 = *a4;
  v14 = v4;
  *a4 = 0;
  a4[1] = 0;
  v15[0] = a3;
  v15[1] = v5;
  v16 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  gdc::ComponentStorageWrapper<md::components::Material>::emplace(a1, a2, v15);
  v8 = v16;
  if (!v16)
    goto LABEL_8;
  v9 = (unint64_t *)&v16->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = v14;
    if (!v14)
      return;
  }
  else
  {
LABEL_8:
    v11 = v14;
    if (!v14)
      return;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_19F3FBF64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  md::components::Material::~Material((md::components::Material *)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::overlayComponents::DrapedRasterOverlay>::emplace(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  _QWORD *v48;
  _QWORD *v49;
  __int128 v50;
  uint64_t v51;
  _QWORD *v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;

  v61 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v61);
  if ((v6 & 1) != 0)
  {
    v23 = (_QWORD *)a1[11];
    v24 = a1[12];
    if ((unint64_t)v23 < v24)
    {
      *v23 = *(_QWORD *)a3;
      v25 = *((_QWORD *)a3 + 1);
      v23[1] = v25;
      if (v25)
      {
        v26 = (unint64_t *)(v25 + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v28 = *((_QWORD *)a3 + 2);
      *(_QWORD *)((char *)v23 + 21) = *(_QWORD *)((char *)a3 + 21);
      v23[2] = v28;
      v23[4] = *((_QWORD *)a3 + 4);
      v29 = *((_QWORD *)a3 + 5);
      v23[5] = v29;
      if (v29)
      {
        v30 = (unint64_t *)(v29 + 8);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v32 = v23 + 6;
LABEL_60:
      a1[11] = (uint64_t)v32;
      v20 = a1[31];
      goto LABEL_61;
    }
    v33 = a1[10];
    v34 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v23 - v33) >> 4);
    v35 = v34 + 1;
    if (v34 + 1 > 0x555555555555555)
      goto LABEL_66;
    v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - v33) >> 4);
    if (2 * v36 > v35)
      v35 = 2 * v36;
    if (v36 >= 0x2AAAAAAAAAAAAAALL)
      v37 = 0x555555555555555;
    else
      v37 = v35;
    if (v37)
    {
      if (v37 > 0x555555555555555)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v38 = (char *)operator new(48 * v37);
    }
    else
    {
      v38 = 0;
    }
    v39 = *((_QWORD *)a3 + 1);
    v40 = &v38[48 * v34];
    *(_QWORD *)v40 = *(_QWORD *)a3;
    *((_QWORD *)v40 + 1) = v39;
    if (v39)
    {
      v41 = (unint64_t *)(v39 + 8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v43 = &v38[48 * v34];
    *((_QWORD *)v43 + 2) = *((_QWORD *)a3 + 2);
    *(_QWORD *)(v43 + 21) = *(_QWORD *)((char *)a3 + 21);
    v44 = *((_QWORD *)a3 + 5);
    *((_QWORD *)v43 + 4) = *((_QWORD *)a3 + 4);
    *((_QWORD *)v43 + 5) = v44;
    if (v44)
    {
      v45 = (unint64_t *)(v44 + 8);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    v47 = &v38[48 * v37];
    v32 = v40 + 48;
    v48 = (_QWORD *)a1[10];
    v49 = (_QWORD *)a1[11];
    if (v49 == v48)
    {
      a1[10] = (uint64_t)v40;
      a1[11] = (uint64_t)v32;
      a1[12] = (uint64_t)v47;
LABEL_58:
      if (v49)
        operator delete(v49);
      goto LABEL_60;
    }
    do
    {
      v50 = *((_OWORD *)v49 - 3);
      v49 -= 6;
      *((_OWORD *)v40 - 3) = v50;
      v40 -= 48;
      *v49 = 0;
      v49[1] = 0;
      v51 = v49[2];
      *(_QWORD *)(v40 + 21) = *(_QWORD *)((char *)v49 + 21);
      *((_QWORD *)v40 + 2) = v51;
      *((_OWORD *)v40 + 2) = *((_OWORD *)v49 + 2);
      v49[4] = 0;
      v49[5] = 0;
    }
    while (v49 != v48);
    v49 = (_QWORD *)a1[10];
    v52 = (_QWORD *)a1[11];
    a1[10] = (uint64_t)v40;
    a1[11] = (uint64_t)v32;
    a1[12] = (uint64_t)v47;
    while (1)
    {
      if (v52 == v49)
        goto LABEL_58;
      v53 = (std::__shared_weak_count *)*(v52 - 1);
      if (!v53)
        goto LABEL_50;
      p_shared_owners = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(p_shared_owners);
      while (__stlxr(v55 - 1, p_shared_owners));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
        v56 = (std::__shared_weak_count *)*(v52 - 5);
        if (!v56)
          goto LABEL_44;
      }
      else
      {
LABEL_50:
        v56 = (std::__shared_weak_count *)*(v52 - 5);
        if (!v56)
          goto LABEL_44;
      }
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
LABEL_44:
      v52 -= 6;
    }
  }
  v7 = a1[10];
  v8 = ((uint64_t)v5 - a1[7]) >> 3;
  v9 = v7 + 48 * v8;
  v10 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v11 = *(std::__shared_weak_count **)(v9 + 8);
  *(_OWORD *)v9 = v10;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v7 + 48 * v8;
  *(_DWORD *)(v14 + 16) = *((_DWORD *)a3 + 4);
  *(_DWORD *)(v14 + 20) = *((_DWORD *)a3 + 5);
  v15 = *((_DWORD *)a3 + 6);
  *(_BYTE *)(v14 + 28) = *((_BYTE *)a3 + 28);
  *(_DWORD *)(v14 + 24) = v15;
  v16 = a3[2];
  *((_QWORD *)a3 + 4) = 0;
  *((_QWORD *)a3 + 5) = 0;
  v17 = *(std::__shared_weak_count **)(v14 + 40);
  *(_OWORD *)(v14 + 32) = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = a1[31];
  if (v9 != a1[11])
  {
    v21 = (_QWORD *)a1[16];
    if (v21)
    {
      while (1)
      {
        v63 = &v61;
        v64 = 1;
        v62 = v20;
        v22 = v21[6];
        if (!v22)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v22 + 48))(v22, &v62, &v63);
        v21 = (_QWORD *)*v21;
        if (!v21)
          return;
      }
LABEL_65:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_66:
      abort();
    }
    return;
  }
LABEL_61:
  v59 = (_QWORD *)a1[22];
  if (v59)
  {
    while (1)
    {
      v63 = &v61;
      v64 = 1;
      v62 = v20;
      v60 = v59[6];
      if (!v60)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v60 + 48))(v60, &v62, &v63);
      v59 = (_QWORD *)*v59;
      if (!v59)
        return;
    }
    goto LABEL_65;
  }
}

void md::overlayComponents::DrapedRasterOverlay::~DrapedRasterOverlay(md::overlayComponents::DrapedRasterOverlay *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t gdc::ComponentStorageWrapper<md::overlayComponents::DrapedRasterOverlay>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,md::overlayComponents::DrapedRasterOverlay>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<md::overlayComponents::DrapedRasterOverlay>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,md::overlayComponents::DrapedRasterOverlay>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::DrapedRasterOverlay>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD v49[2];

  v47 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  v15 = (_QWORD *)(v14 + 48 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v16 = a1[11];
  v18 = *(_QWORD *)(v16 - 48);
  v17 = *(_QWORD *)(v16 - 40);
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (std::__shared_weak_count *)v15[1];
  *v15 = v18;
  v15[1] = v17;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v14 + 48 * v7;
  *(_DWORD *)(v24 + 16) = *(_DWORD *)(v16 - 32);
  *(_DWORD *)(v24 + 20) = *(_DWORD *)(v16 - 28);
  v25 = *(_DWORD *)(v16 - 24);
  *(_BYTE *)(v24 + 28) = *(_BYTE *)(v16 - 20);
  *(_DWORD *)(v24 + 24) = v25;
  v26 = (_QWORD *)(v24 + 32);
  v28 = *(_QWORD *)(v16 - 16);
  v27 = *(_QWORD *)(v16 - 8);
  if (v27)
  {
    v29 = (unint64_t *)(v27 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  *v26 = v28;
  v31 = v14 + 48 * v7;
  v32 = *(std::__shared_weak_count **)(v31 + 40);
  *(_QWORD *)(v31 + 40) = v27;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = a1[11];
  v36 = *(std::__shared_weak_count **)(v35 - 8);
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = *(std::__shared_weak_count **)(v35 - 40);
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  a1[11] = v35 - 48;
  v42 = (_QWORD *)a1[28];
  if (!v42)
    return 1;
  v43 = a1[31];
  while (1)
  {
    v49[0] = &v47;
    v49[1] = 1;
    v48 = v43;
    v44 = v42[6];
    if (!v44)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v44 + 48))(v44, &v48, v49);
    v42 = (_QWORD *)*v42;
    if (!v42)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::overlayComponents::DrapedRasterOverlay>::contains(v45, v46);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::DrapedRasterOverlay>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *geo::sparse_map<gdc::Entity,md::overlayComponents::DrapedRasterOverlay>::~sparse_map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a1[6];
  if (v2)
  {
    v3 = a1[7];
    v4 = (void *)a1[6];
    if (v3 == v2)
    {
LABEL_17:
      a1[7] = v2;
      operator delete(v4);
      goto LABEL_18;
    }
    while (1)
    {
      v5 = *(std::__shared_weak_count **)(v3 - 8);
      if (!v5)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = *(std::__shared_weak_count **)(v3 - 40);
        if (v8)
        {
LABEL_10:
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_9:
        v8 = *(std::__shared_weak_count **)(v3 - 40);
        if (v8)
          goto LABEL_10;
      }
      v3 -= 48;
      if (v3 == v2)
      {
        v4 = (void *)a1[6];
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  v11 = (void *)a1[3];
  if (v11)
  {
    a1[4] = v11;
    operator delete(v11);
  }
  v12 = (_QWORD *)*a1;
  if (*a1)
  {
    v13 = (_QWORD *)a1[1];
    v14 = (_QWORD *)*a1;
    if (v13 != v12)
    {
      do
      {
        v16 = *--v13;
        v15 = v16;
        *v13 = 0;
        if (v16)
          MEMORY[0x1A1AF4E00](v15, 0x1000C40104B78CFLL);
      }
      while (v13 != v12);
      v14 = (_QWORD *)*a1;
    }
    a1[1] = v12;
    operator delete(v14);
  }
  return a1;
}

void md::RasterOverlayMaterial::~RasterOverlayMaterial(md::RasterOverlayMaterial *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C1CB0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C1CB0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x1A1AF4E00);
}

double md::RasterOverlayMaterial::albedoFactor@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)a1 = 1;
  *(_QWORD *)&result = 1065353216;
  *(_OWORD *)(a1 + 4) = xmmword_19FFB2DF0;
  return result;
}

void std::__shared_ptr_emplace<md::RasterOverlayMaterial>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC7E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::RasterOverlayMaterial>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC7E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::RasterOverlayMaterial>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t gdc::Registry::storage<gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xFC21CCDFEDC314FBLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xFC21CCDFEDC314FBLL;
      if (*(_QWORD *)&v3 <= 0xFC21CCDFEDC314FBLL)
        v5 = 0xFC21CCDFEDC314FBLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xFC21CCDFEDC314FBLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xFC21CCDFEDC314FBLL)
            {
              if (v7[2] == 0xFC21CCDFEDC314FBLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xFC21CCDFEDC314FBLL)
          {
            if (v7[2] == 0xFC21CCDFEDC314FBLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode]";
  *(_QWORD *)(v11 + 24) = 65;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3E28;
  *(_QWORD *)(v11 + 8) = 0xFC21CCDFEDC314FBLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xFC21CCDFEDC314FBLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xFC21CCDFEDC314FBLL;
  v15[1] = "gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode]";
  v15[2] = 65;
  gdc::Registry::_registerStorageDataSignals(a1, 0xFC21CCDFEDC314FBLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F3FCC3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::components::RegistryBridgeMap<gdc::Entity>::nodeIsBeingDestroyed(_QWORD *a1, uint64_t a2)
{
  int8x8_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void ***v11;
  void **v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void **v16;
  uint64_t *v17;
  int8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  void **v31;
  void **v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;

  v4 = (int8x8_t)a1[2];
  if (!*(_QWORD *)&v4)
    goto LABEL_21;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = (uint8x8_t)vcnt_s8(v4);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v8;
    if (v8 >= *(_QWORD *)&v4)
      v10 = v8 % *(_QWORD *)&v4;
  }
  else
  {
    v10 = v8 & (*(_QWORD *)&v4 - 1);
  }
  v11 = *(void ****)(a1[1] + 8 * v10);
  if (v11)
  {
    v12 = *v11;
    if (*v11)
    {
      if (v9.u32[0] < 2uLL)
      {
        v13 = *(_QWORD *)&v4 - 1;
        while (1)
        {
          v15 = (unint64_t)v12[1];
          if (v15 == v8)
          {
            if (v12[2] == (void *)v5)
              goto LABEL_22;
          }
          else if ((v15 & v13) != v10)
          {
            goto LABEL_21;
          }
          v12 = (void **)*v12;
          if (!v12)
            goto LABEL_22;
        }
      }
      do
      {
        v14 = (unint64_t)v12[1];
        if (v14 == v8)
        {
          if (v12[2] == (void *)v5)
            break;
        }
        else
        {
          if (v14 >= *(_QWORD *)&v4)
            v14 %= *(_QWORD *)&v4;
          if (v14 != v10)
            goto LABEL_21;
        }
        v12 = (void **)*v12;
      }
      while (v12);
    }
  }
  else
  {
LABEL_21:
    v12 = 0;
  }
LABEL_22:
  v16 = v12 + 3;
  v17 = std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::find<gdc::Entity>(v12 + 3, *(_QWORD *)(a2 + 24));
  if (v17[3] == a2)
  {
    v18 = (int8x8_t)v12[4];
    v19 = v17[1];
    v20 = (uint8x8_t)vcnt_s8(v18);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      if (v19 >= *(_QWORD *)&v18)
        v19 %= *(_QWORD *)&v18;
    }
    else
    {
      v19 &= *(_QWORD *)&v18 - 1;
    }
    v21 = (uint64_t *)*((_QWORD *)*v16 + v19);
    do
    {
      v22 = v21;
      v21 = (uint64_t *)*v21;
    }
    while (v21 != v17);
    if (v22 == (uint64_t *)(v12 + 5))
      goto LABEL_40;
    v23 = v22[1];
    if (v20.u32[0] > 1uLL)
    {
      if (v23 >= *(_QWORD *)&v18)
        v23 %= *(_QWORD *)&v18;
    }
    else
    {
      v23 &= *(_QWORD *)&v18 - 1;
    }
    if (v23 != v19)
    {
LABEL_40:
      if (!*v17)
        goto LABEL_41;
      v24 = *(_QWORD *)(*v17 + 8);
      if (v20.u32[0] > 1uLL)
      {
        if (v24 >= *(_QWORD *)&v18)
          v24 %= *(_QWORD *)&v18;
      }
      else
      {
        v24 &= *(_QWORD *)&v18 - 1;
      }
      if (v24 != v19)
LABEL_41:
        *((_QWORD *)*v16 + v19) = 0;
    }
    v25 = *v17;
    if (*v17)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v20.u32[0] > 1uLL)
      {
        if (v26 >= *(_QWORD *)&v18)
          v26 %= *(_QWORD *)&v18;
      }
      else
      {
        v26 &= *(_QWORD *)&v18 - 1;
      }
      if (v26 != v19)
      {
        *((_QWORD *)*v16 + v26) = v22;
        v25 = *v17;
      }
    }
    *v22 = v25;
    *v17 = 0;
    v12[6] = (char *)v12[6] - 1;
    operator delete(v17);
    if (!v12[6])
    {
      v27 = (int8x8_t)a1[2];
      v28 = (unint64_t)v12[1];
      v29 = (uint8x8_t)vcnt_s8(v27);
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.u32[0] > 1uLL)
      {
        if (v28 >= *(_QWORD *)&v27)
          v28 %= *(_QWORD *)&v27;
      }
      else
      {
        v28 &= *(_QWORD *)&v27 - 1;
      }
      v30 = a1[1];
      v31 = *(void ***)(v30 + 8 * v28);
      do
      {
        v32 = v31;
        v31 = (void **)*v31;
      }
      while (v31 != v12);
      if (v32 == a1 + 3)
        goto LABEL_68;
      v33 = (unint64_t)v32[1];
      if (v29.u32[0] > 1uLL)
      {
        if (v33 >= *(_QWORD *)&v27)
          v33 %= *(_QWORD *)&v27;
      }
      else
      {
        v33 &= *(_QWORD *)&v27 - 1;
      }
      if (v33 != v28)
      {
LABEL_68:
        if (!*v12)
          goto LABEL_69;
        v34 = *((_QWORD *)*v12 + 1);
        if (v29.u32[0] > 1uLL)
        {
          if (v34 >= *(_QWORD *)&v27)
            v34 %= *(_QWORD *)&v27;
        }
        else
        {
          v34 &= *(_QWORD *)&v27 - 1;
        }
        if (v34 != v28)
LABEL_69:
          *(_QWORD *)(v30 + 8 * v28) = 0;
      }
      v35 = *v12;
      if (*v12)
      {
        v36 = v35[1];
        if (v29.u32[0] > 1uLL)
        {
          if (v36 >= *(_QWORD *)&v27)
            v36 %= *(_QWORD *)&v27;
        }
        else
        {
          v36 &= *(_QWORD *)&v27 - 1;
        }
        if (v36 != v28)
        {
          *(_QWORD *)(a1[1] + 8 * v36) = v32;
          v35 = *v12;
        }
      }
      *v32 = v35;
      *v12 = 0;
      --a1[4];
      v37 = v12[5];
      if (v37)
      {
        do
        {
          v38 = (_QWORD *)*v37;
          operator delete(v37);
          v37 = v38;
        }
        while (v38);
      }
      v39 = *v16;
      *v16 = 0;
      if (v39)
        operator delete(v39);
      operator delete(v12);
    }
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::__emplace_unique_key_args<gdc::Entity,std::piecewise_construct_t const&,std::tuple<gdc::Entity const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v40;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (__PAIR64__(*((unsigned __int16 *)v10 + 9), *((unsigned __int16 *)v10 + 8)) == __PAIR64__(WORD1(a2), (unsigned __int16)a2)&& *((_DWORD *)v10 + 5) == HIDWORD(a2))
              {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_25;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_25;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (__PAIR64__(*((unsigned __int16 *)v10 + 9), *((unsigned __int16 *)v10 + 8)) == __PAIR64__(WORD1(a2), (unsigned __int16)a2)&& *((_DWORD *)v10 + 5) == HIDWORD(a2))
            {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_25:
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
    goto LABEL_75;
  }
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = v17;
  else
    prime = v16;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_38:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v19 = operator new(8 * prime);
    v20 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v19;
    if (v20)
      operator delete(v20);
    v21 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
    while (prime != v21);
    v23 = (uint64_t *)(a1 + 4);
    v22 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v22)
      goto LABEL_62;
    v24 = v22[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v23;
      for (i = (_QWORD *)*v22; *v22; i = (_QWORD *)*v22)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v22 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
        {
          *v22 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v29);
          **(_QWORD **)(*(_QWORD *)a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v22;
          v22 = i;
          v26 = v28;
        }
      }
LABEL_62:
      v7 = prime;
      goto LABEL_63;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v23;
    v33 = (_QWORD *)*v22;
    if (!*v22)
      goto LABEL_62;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v22;
          goto LABEL_67;
        }
        *v22 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*(_QWORD *)a1 + v34);
        **(_QWORD **)(*(_QWORD *)a1 + v34) = v33;
        v33 = v22;
      }
      v35 = v24;
LABEL_67:
      v22 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_62;
    }
  }
  if (prime >= v7)
    goto LABEL_63;
  v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    v30 = std::__next_prime(v30);
  }
  else
  {
    v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2)
      v30 = v32;
  }
  if (prime <= v30)
    prime = v30;
  if (prime < v7)
  {
    if (!prime)
    {
      v40 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v40)
        operator delete(v40);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_63;
    }
    goto LABEL_38;
  }
  v7 = *((_QWORD *)a1 + 1);
LABEL_63:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_75:
  v36 = *(_QWORD **)a1;
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v37)
  {
    *v10 = *v37;
LABEL_83:
    *v37 = v10;
    goto LABEL_84;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v36[v5] = a1 + 4;
  if (*v10)
  {
    v38 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_83;
  }
LABEL_84:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_19F3FD4C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v15;

  if (a2 != a1)
  {
    v4 = *a1;
    *a1 = *a2;
    *a2 = v4;
    v5 = a1[1];
    a1[1] = a2[1];
    a2[1] = v5;
    v6 = a1[2];
    a1[2] = a2[2];
    a2[2] = v6;
    v7 = a1[3];
    v8 = a2 + 3;
    a1[3] = a2[3];
    a2[3] = v7;
    v9 = *a2;
    if (*a2)
    {
      v10 = a2[1];
      v15 = a2[1];
      v11 = std::__hash_table<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>>>::__emplace_unique_key_args<gdc::Registry *,std::piecewise_construct_t const&,std::tuple<gdc::Registry * const&>,std::tuple<>>(v9 + 8, v10, &v15);
      std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::__emplace_unique_key_args<gdc::Entity,std::piecewise_construct_t const&,std::tuple<gdc::Entity const&>,std::tuple<>>((float *)v11 + 6, a2[3], v8)[3] = a2;
      *a2 = v9;
    }
    v12 = *a1;
    if (*a1)
    {
      v15 = a1[1];
      v13 = std::__hash_table<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>>>::__emplace_unique_key_args<gdc::Registry *,std::piecewise_construct_t const&,std::tuple<gdc::Registry * const&>,std::tuple<>>(v12 + 8, v15, &v15);
      std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::__emplace_unique_key_args<gdc::Entity,std::piecewise_construct_t const&,std::tuple<gdc::Entity const&>,std::tuple<>>((float *)v13 + 6, a1[3], a1 + 3)[3] = a1;
      *a1 = v12;
    }
  }
  return a1;
}

char *std::__hash_table<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>>>::__emplace_unique_key_args<gdc::Registry *,std::piecewise_construct_t const&,std::tuple<gdc::Registry * const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = *((_QWORD *)v12 + 1);
            if (v14 == v8)
            {
              if (*((_QWORD *)v12 + 2) == a2)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = *(char **)v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v8)
          {
            if (*((_QWORD *)v12 + 2) == a2)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = (_QWORD *)(a1 + 16);
  v12 = (char *)operator new(0x40uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  *((_QWORD *)v12 + 2) = *a3;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *((_DWORD *)v12 + 14) = 1065353216;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_34;
    if (prime < v9)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v9)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
  {
    *(_QWORD *)v12 = *v26;
LABEL_58:
    *v26 = v12;
    goto LABEL_59;
  }
  *(_QWORD *)v12 = *v15;
  *v15 = v12;
  *(_QWORD *)(v25 + 8 * v3) = v15;
  if (*(_QWORD *)v12)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_19F3FD8F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode,std::allocator<gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v5 = *(_QWORD **)(v2 - 32);
    v2 -= 32;
    v4 = v5;
    *(_QWORD *)(a1 + 16) = v2;
    if (v5)
    {
      gdc::components::RegistryBridgeMap<gdc::Entity>::nodeIsBeingDestroyed(v4, v2);
      v2 = *(_QWORD *)(a1 + 16);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[5];
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = (void *)v2[3];
      v2[3] = 0;
      if (v5)
        operator delete(v5);
    }
    operator delete(v2);
  }
  return a1;
}

void gdc::ComponentStorageWrapper<gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD v26[2];

  v24 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (uint64_t *)(a1[10] + 32 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode::operator=(v14, (uint64_t *)(a1[11] - 32));
  v15 = a1[11];
  v18 = *(_QWORD **)(v15 - 32);
  v17 = v15 - 32;
  v16 = v18;
  if (v18)
    gdc::components::RegistryBridgeMap<gdc::Entity>::nodeIsBeingDestroyed(v16, v17);
  a1[11] = v17;
  v19 = (_QWORD *)a1[28];
  if (!v19)
    return 1;
  v20 = a1[31];
  while (1)
  {
    v26[0] = &v24;
    v26[1] = 1;
    v25 = v20;
    v21 = v19[6];
    if (!v21)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v21 + 48))(v21, &v25, v26);
    v19 = (_QWORD *)*v19;
    if (!v19)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode>::contains(v22, v23);
}

BOOL gdc::ComponentStorageWrapper<gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *gdc::ComponentStorageWrapper<gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode>::~ComponentStorageWrapper(_QWORD *a1)
{
  _QWORD **v2;
  _QWORD **v3;
  void *v4;
  _QWORD **v5;
  BOOL v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  v2 = (_QWORD **)a1[10];
  if (v2)
  {
    v3 = (_QWORD **)a1[11];
    v4 = (void *)a1[10];
    if (v3 != v2)
    {
      v5 = v3 - 4;
      do
      {
        if (*v5)
          gdc::components::RegistryBridgeMap<gdc::Entity>::nodeIsBeingDestroyed(*v5, (uint64_t)v5);
        v6 = v5 == v2;
        v5 -= 4;
      }
      while (!v6);
      v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  v7 = (void *)a1[7];
  if (v7)
  {
    a1[8] = v7;
    operator delete(v7);
  }
  v8 = (_QWORD *)a1[4];
  if (v8)
  {
    v9 = (_QWORD *)a1[5];
    v10 = (void *)a1[4];
    if (v9 != v8)
    {
      do
      {
        v12 = *--v9;
        v11 = v12;
        *v9 = 0;
        if (v12)
          MEMORY[0x1A1AF4E00](v11, 0x1000C40104B78CFLL);
      }
      while (v9 != v8);
      v10 = (void *)a1[4];
    }
    a1[5] = v8;
    operator delete(v10);
  }
  return a1;
}

void gdc::ComponentStorageWrapper<md::components::QueuedForDestruction<md::DrapingLogic>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::QueuedForDestruction<md::DrapingLogic>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::QueuedForDestruction<md::DrapingLogic>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::components::QueuedForDestruction<md::DrapingLogic>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::components::QueuedForDestruction<>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::QueuedForDestruction<>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::QueuedForDestruction<>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::components::QueuedForDestruction<>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::overlayComponents::CanDisableDraping>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::CanDisableDraping>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::overlayComponents::CanDisableDraping>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::CanDisableDraping>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<gdc::components::RegistryBridgeMap<gdc::Entity>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCF1B3CF834D7AFD0;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCF1B3CF834D7AFD0;
      if (*(_QWORD *)&v3 <= 0xCF1B3CF834D7AFD0)
        v5 = 0xCF1B3CF834D7AFD0 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCF1B3CF834D7AFD0;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCF1B3CF834D7AFD0)
            {
              if (v7[2] == 0xCF1B3CF834D7AFD0)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCF1B3CF834D7AFD0)
          {
            if (v7[2] == 0xCF1B3CF834D7AFD0)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "gdc::components::RegistryBridgeMap<gdc::Entity>]";
  *(_QWORD *)(v11 + 24) = 47;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3E58;
  *(_QWORD *)(v11 + 8) = 0xCF1B3CF834D7AFD0;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCF1B3CF834D7AFD0, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCF1B3CF834D7AFD0;
  v15[1] = "gdc::components::RegistryBridgeMap<gdc::Entity>]";
  v15[2] = 47;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCF1B3CF834D7AFD0, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F3FE268(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *gdc::components::RegistryBridgeMap<gdc::Entity>::~RegistryBridgeMap(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t **i;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;

  *a1 = &off_1E42B06D8;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[3];
    do
    {
      for (i = (uint64_t **)v3[5]; i; i = (uint64_t **)*i)
        *i[3] = 0;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (_QWORD *)v2[5];
      if (v6)
      {
        do
        {
          v7 = (_QWORD *)*v6;
          operator delete(v6);
          v6 = v7;
        }
        while (v7);
      }
      v8 = (void *)v2[3];
      v2[3] = 0;
      if (v8)
        operator delete(v8);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v9 = (void *)a1[1];
  a1[1] = 0;
  if (v9)
    operator delete(v9);
  return a1;
}

void std::__hash_table<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>>>::swap(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  v5 = *(void **)a2;
  *(_QWORD *)a2 = 0;
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = *(void **)a2;
  *(_QWORD *)a2 = v4;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v9;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v11;
  v13 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v13;
  if (*(_QWORD *)(a1 + 24))
  {
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v15 >= v14)
        v15 %= v14;
    }
    else
    {
      v15 &= v14 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = a1 + 16;
  }
  if (v11)
  {
    v16 = *(_QWORD *)(a2 + 8);
    v17 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v17 >= v16)
        v17 %= v16;
    }
    else
    {
      v17 &= v16 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v17) = a2 + 16;
  }
}

void gdc::components::RegistryBridgeMap<gdc::Entity>::~RegistryBridgeMap(_QWORD *a1)
{
  gdc::components::RegistryBridgeMap<gdc::Entity>::~RegistryBridgeMap(a1);
  JUMPOUT(0x1A1AF4E00);
}

void gdc::ComponentStorageWrapper<gdc::components::RegistryBridgeMap<gdc::Entity>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<gdc::components::RegistryBridgeMap<gdc::Entity>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::components::RegistryBridgeMap<gdc::Entity>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *i;
  uint64_t v19;
  void (**v20)(uint64_t);
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t **j;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD v29[2];

  v27 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = a1[10];
  v15 = v14 + 48 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v16 = a1[11];
  if (v15 != v16 - 48)
  {
    v17 = v14 + 48 * v7;
    std::__hash_table<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>>>::swap(v17 + 8, v16 - 40);
    for (i = *(_QWORD **)(v17 + 24); i; i = (_QWORD *)*i)
    {
      for (j = (uint64_t **)i[5]; j; j = (uint64_t **)*j)
        *j[3] = v15;
    }
  }
  v19 = a1[11];
  v20 = *(void (***)(uint64_t))(v19 - 48);
  v19 -= 48;
  (*v20)(v19);
  a1[11] = v19;
  v21 = (_QWORD *)a1[28];
  if (!v21)
    return 1;
  v22 = a1[31];
  while (1)
  {
    v29[0] = &v27;
    v29[1] = 1;
    v28 = v22;
    v23 = v21[6];
    if (!v23)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v23 + 48))(v23, &v28, v29);
    v21 = (_QWORD *)*v21;
    if (!v21)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::components::RegistryBridgeMap<gdc::Entity>>::contains(v25, v26);
}

BOOL gdc::ComponentStorageWrapper<gdc::components::RegistryBridgeMap<gdc::Entity>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *gdc::ComponentStorageWrapper<gdc::components::RegistryBridgeMap<gdc::Entity>>::~ComponentStorageWrapper(_QWORD *a1)
{
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (**v7)(_QWORD);
  BOOL v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  v2 = (void (***)(_QWORD))a1[10];
  if (v2)
  {
    v3 = (void (***)(_QWORD))a1[11];
    v4 = (void *)a1[10];
    if (v3 != v2)
    {
      v5 = v3 - 6;
      v6 = v3 - 6;
      do
      {
        v7 = *v6;
        v6 -= 6;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  v9 = (void *)a1[7];
  if (v9)
  {
    a1[8] = v9;
    operator delete(v9);
  }
  v10 = (_QWORD *)a1[4];
  if (v10)
  {
    v11 = (_QWORD *)a1[5];
    v12 = (void *)a1[4];
    if (v11 != v10)
    {
      do
      {
        v14 = *--v11;
        v13 = v14;
        *v11 = 0;
        if (v14)
          MEMORY[0x1A1AF4E00](v13, 0x1000C40104B78CFLL);
      }
      while (v11 != v10);
      v12 = (void *)a1[4];
    }
    a1[5] = v10;
    operator delete(v12);
  }
  return a1;
}

void gdc::ComponentStorageWrapper<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::Texture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::Texture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::Texture>>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::Texture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<std::vector<gdc::Registry *>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<std::vector<gdc::Registry *>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ComponentStorageWrapper<std::vector<gdc::Registry *>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  char *v17;
  _BYTE *v18;
  size_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char **v32;
  uint64_t v33;
  char *v34;
  char *v35;
  size_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD v48[2];

  v46 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = a1[10];
  v15 = (void **)(v14 + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v16 = a1[11];
  if (v15 != (void **)(v16 - 24))
  {
    v17 = *(char **)(v16 - 24);
    v18 = *(_BYTE **)(v16 - 16);
    v19 = v18 - v17;
    v20 = (v18 - v17) >> 3;
    v21 = v14 + 24 * v7;
    v24 = *(_QWORD *)(v21 + 16);
    v23 = (_QWORD *)(v21 + 16);
    v22 = v24;
    v25 = (char *)*v15;
    if (v20 > (v24 - (uint64_t)*v15) >> 3)
    {
      if (v25)
      {
        *(_QWORD *)(v14 + 24 * v7 + 8) = v25;
        operator delete(v25);
        v22 = 0;
        *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
      }
      if ((v19 & 0x8000000000000000) != 0)
        goto LABEL_40;
      v26 = v22 >> 2;
      if (v22 >> 2 <= v20)
        v26 = (v18 - v17) >> 3;
      v27 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8;
      v28 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v27)
        v28 = v26;
      if (v28 >> 61)
        goto LABEL_40;
      v29 = 8 * v28;
      v30 = (char *)operator new(8 * v28);
      v25 = v30;
      *v15 = v30;
      v31 = v14 + 24 * v7;
      *(_QWORD *)(v31 + 8) = v30;
      v32 = (char **)(v31 + 8);
      *v23 = &v30[v29];
      if (v18 != v17)
        memcpy(v30, v17, v18 - v17);
      goto LABEL_31;
    }
    v33 = v14 + 24 * v7;
    v35 = *(char **)(v33 + 8);
    v32 = (char **)(v33 + 8);
    v34 = v35;
    v36 = v35 - v25;
    v37 = (v35 - v25) >> 3;
    if (v37 >= v20)
    {
      if (v18 == v17)
      {
LABEL_31:
        *v32 = &v25[v19];
        v16 = a1[11];
        goto LABEL_32;
      }
      v39 = (char *)*v15;
      v40 = v17;
    }
    else
    {
      v38 = &v17[8 * v37];
      if (v34 != v25)
      {
        memmove(*v15, v17, v36);
        v25 = *v32;
      }
      v19 = v18 - v38;
      if (v18 == v38)
        goto LABEL_31;
      v39 = v25;
      v40 = v38;
    }
    memmove(v39, v40, v19);
    goto LABEL_31;
  }
LABEL_32:
  v42 = v16 - 24;
  v41 = *(void **)(v16 - 24);
  if (v41)
  {
    *(_QWORD *)(v16 - 16) = v41;
    operator delete(v41);
  }
  a1[11] = v42;
  v43 = (_QWORD *)a1[28];
  if (v43)
  {
    v44 = a1[31];
    while (1)
    {
      v48[0] = &v46;
      v48[1] = 1;
      v47 = v44;
      v45 = v43[6];
      if (!v45)
        break;
      (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v45 + 48))(v45, &v47, v48);
      v43 = (_QWORD *)*v43;
      if (!v43)
        return 1;
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_40:
    abort();
  }
  return 1;
}

BOOL gdc::ComponentStorageWrapper<std::vector<gdc::Registry *>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *gdc::ComponentStorageWrapper<std::vector<gdc::Registry *>>::~ComponentStorageWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  v2 = a1[10];
  if (v2)
  {
    v3 = a1[11];
    v4 = (void *)a1[10];
    if (v3 != v2)
    {
      v5 = a1[11];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  v8 = (void *)a1[7];
  if (v8)
  {
    a1[8] = v8;
    operator delete(v8);
  }
  v9 = (_QWORD *)a1[4];
  if (v9)
  {
    v10 = (_QWORD *)a1[5];
    v11 = (void *)a1[4];
    if (v10 != v9)
    {
      do
      {
        v13 = *--v10;
        v12 = v13;
        *v10 = 0;
        if (v13)
          MEMORY[0x1A1AF4E00](v12, 0x1000C40104B78CFLL);
      }
      while (v10 != v9);
      v11 = (void *)a1[4];
    }
    a1[5] = v9;
    operator delete(v11);
  }
  return a1;
}

uint64_t gdc::ComponentStorageWrapper<std::unordered_map<gdc::Registry *,std::vector<gdc::Entity>>>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,std::unordered_map<gdc::Registry *,std::vector<gdc::Entity>>>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<std::unordered_map<gdc::Registry *,std::vector<gdc::Entity>>>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,std::unordered_map<gdc::Registry *,std::vector<gdc::Entity>>>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<std::unordered_map<gdc::Registry *,std::vector<gdc::Entity>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD v28[2];

  v26 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 40 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != v15 - 40)
  {
    *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 - 8);
    std::__hash_table<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *> *>>((_QWORD *)v14, *(uint64_t ***)(v15 - 24));
    v15 = a1[11];
  }
  v16 = (void **)(v15 - 40);
  v17 = *(_QWORD **)(v15 - 24);
  if (v17)
  {
    do
    {
      v22 = (_QWORD *)*v17;
      v23 = (void *)v17[3];
      if (v23)
      {
        v17[4] = v23;
        operator delete(v23);
      }
      operator delete(v17);
      v17 = v22;
    }
    while (v22);
  }
  v18 = *v16;
  *v16 = 0;
  if (v18)
    operator delete(v18);
  a1[11] = v16;
  v19 = (_QWORD *)a1[28];
  if (!v19)
    return 1;
  v20 = a1[31];
  while (1)
  {
    v28[0] = &v26;
    v28[1] = 1;
    v27 = v20;
    v21 = v19[6];
    if (!v21)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v21 + 48))(v21, &v27, v28);
    v19 = (_QWORD *)*v19;
    if (!v19)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<std::unordered_map<gdc::Registry *,std::vector<gdc::Entity>>>::contains(v24, v25);
}

BOOL gdc::ComponentStorageWrapper<std::unordered_map<gdc::Registry *,std::vector<gdc::Entity>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__hash_table<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *> *>>(_QWORD *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  int64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  void *v18;

  v4 = a1[1];
  if (!v4)
    goto LABEL_5;
  for (i = 0; i != v4; ++i)
    *(_QWORD *)(*a1 + 8 * i) = 0;
  v6 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      v6[2] = (uint64_t)a2[2];
      if (v6 != (uint64_t *)a2)
        std::vector<gdc::Entity>::__assign_with_size[abi:nn180100]<gdc::Entity*,gdc::Entity*>(v6 + 3, (char *)a2[3], (char *)a2[4], a2[4] - a2[3]);
      v16 = (uint64_t *)*v6;
      std::__hash_table<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>>>::__node_insert_multi((uint64_t)a1, v6);
      a2 = (uint64_t **)*a2;
      v6 = v16;
      if (!v16)
        goto LABEL_5;
    }
    do
    {
      v17 = (uint64_t *)*v6;
      v18 = (void *)v6[3];
      if (v18)
      {
        v6[4] = (uint64_t)v18;
        operator delete(v18);
      }
      operator delete(v6);
      v6 = v17;
    }
    while (v17);
  }
  else
  {
LABEL_5:
    while (a2)
    {
      v7 = operator new(0x30uLL);
      *v7 = 0;
      v7[1] = 0;
      v8 = (unint64_t)a2[2];
      v7[3] = 0;
      v7[2] = v8;
      v7[4] = 0;
      v7[5] = 0;
      v10 = a2[3];
      v9 = a2[4];
      v11 = (char *)v9 - (char *)v10;
      if (v9 != v10)
      {
        if (v11 < 0)
          abort();
        v12 = (char *)operator new((char *)v9 - (char *)v10);
        v7[3] = v12;
        v7[4] = v12;
        v13 = &v12[8 * (v11 >> 3)];
        v7[5] = v13;
        memcpy(v12, v10, v11);
        v7[4] = v13;
      }
      v14 = 0x9DDFEA08EB382D69 * (((8 * v8) + 8) ^ HIDWORD(v8));
      v15 = 0x9DDFEA08EB382D69 * (HIDWORD(v8) ^ (v14 >> 47) ^ v14);
      v7[1] = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
      std::__hash_table<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>>>::__node_insert_multi((uint64_t)a1, v7);
      a2 = (uint64_t **)*a2;
    }
  }
}

void sub_19F3FF000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F3FF018(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<gdc::Entity>::__assign_with_size[abi:nn180100]<gdc::Entity*,gdc::Entity*>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61)
      goto LABEL_22;
    v10 = v8 >> 2;
    if (v8 >> 2 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
LABEL_22:
      abort();
    v13 = v12;
    result = operator new(8 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void std::__hash_table<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>>>::__node_insert_multi(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  float v9;
  float v10;
  _BOOL8 v11;
  unint64_t v12;
  unint64_t v13;
  size_t prime;
  void *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  size_t v22;
  _QWORD *j;
  size_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *i;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  _BOOL4 v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  size_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  int v46;
  _BOOL4 v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;

  v4 = a2[2];
  v5 = HIDWORD(v4);
  v6 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
  v7 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
  a2[1] = v7;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v10 = *(float *)(a1 + 32);
  if (!v8 || (float)(v10 * (float)v8) < v9)
  {
    v11 = 1;
    if (v8 >= 3)
      v11 = (v8 & (v8 - 1)) != 0;
    v12 = v11 | (2 * v8);
    v13 = vcvtps_u32_f32(v9 / v10);
    if (v12 <= v13)
      prime = v13;
    else
      prime = v12;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_105;
    if (prime >= v8)
      goto LABEL_40;
    v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v8 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
    {
      v28 = std::__next_prime(v28);
    }
    else
    {
      v30 = 1 << -(char)__clz(v28 - 1);
      if (v28 >= 2)
        v28 = v30;
    }
    if (prime <= v28)
      prime = v28;
    if (prime >= v8)
    {
      v8 = *(_QWORD *)(a1 + 8);
      goto LABEL_40;
    }
    if (prime)
    {
LABEL_105:
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v15 = operator new(8 * prime);
      v16 = *(void **)a1;
      *(_QWORD *)a1 = v15;
      if (v16)
        operator delete(v16);
      v17 = 0;
      *(_QWORD *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v17++) = 0;
      while (prime != v17);
      v19 = a1 + 16;
      v18 = *(_QWORD **)(a1 + 16);
      if (v18)
      {
        v20 = v18[1];
        v21 = prime - 1;
        if ((prime & (prime - 1)) != 0)
        {
          if (v20 >= prime)
            v20 %= prime;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v19;
          for (i = (_QWORD *)*v18; *v18; i = (_QWORD *)*v18)
          {
            v40 = i[1];
            if (v40 >= prime)
              v40 %= prime;
            if (v40 == v20)
            {
              v18 = i;
            }
            else
            {
              v41 = i;
              if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v40))
              {
                do
                {
                  v42 = v41;
                  v41 = (_QWORD *)*v41;
                }
                while (v41 && i[2] == v41[2]);
                *v18 = v41;
                v43 = 8 * v40;
                *v42 = **(_QWORD **)(*(_QWORD *)a1 + v43);
                **(_QWORD **)(*(_QWORD *)a1 + v43) = i;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v18;
                v18 = i;
                v20 = v40;
              }
            }
          }
        }
        else
        {
          v22 = v20 & v21;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v19;
          for (j = (_QWORD *)*v18; *v18; j = (_QWORD *)*v18)
          {
            v24 = j[1] & v21;
            if (v24 == v22)
            {
              v18 = j;
            }
            else
            {
              v25 = j;
              if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v24))
              {
                do
                {
                  v26 = v25;
                  v25 = (_QWORD *)*v25;
                }
                while (v25 && j[2] == v25[2]);
                *v18 = v25;
                v27 = 8 * v24;
                *v26 = **(_QWORD **)(*(_QWORD *)a1 + v27);
                **(_QWORD **)(*(_QWORD *)a1 + v27) = j;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v18;
                v18 = j;
                v22 = v24;
              }
            }
          }
        }
      }
      v8 = prime;
    }
    else
    {
      v53 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v53)
        operator delete(v53);
      v8 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_40:
  v32 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v32.i16[0] = vaddlv_u8(v32);
  if (v32.u32[0] >= 2uLL)
  {
    v44 = v7;
    if (v8 <= v7)
      v44 = v7 % v8;
    v45 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v44);
    if (!v45)
    {
      v38 = 0;
      v51 = a2[1];
      if (v51 < v8)
        goto LABEL_78;
      goto LABEL_77;
    }
    v46 = 0;
    do
    {
      v38 = v45;
      v45 = (_QWORD *)*v45;
      if (!v45)
        break;
      v49 = v45[1];
      v50 = v49;
      if (v49 >= v8)
        v50 = v49 % v8;
      if (v50 != v44)
        break;
      v47 = v49 == v7 && v45[2] == a2[2];
      v48 = v46 & !v47;
      v46 |= v47;
    }
    while (v48 != 1);
  }
  else
  {
    v33 = (v8 - 1) & v7;
    v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v33);
    if (!v34)
    {
      v38 = 0;
      v51 = a2[1];
      goto LABEL_75;
    }
    v35 = 0;
    do
    {
      v38 = v34;
      v34 = (_QWORD *)*v34;
      if (!v34)
        break;
      v39 = v34[1];
      if ((v39 & (v8 - 1)) != v33)
        break;
      v36 = v39 == v7 && v34[2] == a2[2];
      v37 = v35 & !v36;
      v35 |= v36;
    }
    while ((v37 & 1) == 0);
  }
  v51 = a2[1];
  if (v32.u32[0] <= 1uLL)
  {
LABEL_75:
    v51 &= v8 - 1;
    goto LABEL_78;
  }
  if (v51 >= v8)
LABEL_77:
    v51 %= v8;
LABEL_78:
  if (!v38)
  {
    *a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v51) = a1 + 16;
    if (!*a2)
      goto LABEL_92;
    v52 = *(_QWORD *)(*a2 + 8);
    if (v32.u32[0] > 1uLL)
    {
      if (v52 >= v8)
        v52 %= v8;
    }
    else
    {
      v52 &= v8 - 1;
    }
LABEL_91:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v52) = a2;
    goto LABEL_92;
  }
  *a2 = *v38;
  *v38 = a2;
  if (*a2)
  {
    v52 = *(_QWORD *)(*a2 + 8);
    if (v32.u32[0] > 1uLL)
    {
      if (v52 >= v8)
        v52 %= v8;
    }
    else
    {
      v52 &= v8 - 1;
    }
    if (v52 != v51)
      goto LABEL_91;
  }
LABEL_92:
  ++*(_QWORD *)(a1 + 24);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[3];
      if (v3)
      {
        v2[4] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

_QWORD *geo::sparse_map<gdc::Entity,std::unordered_map<gdc::Registry *,std::vector<gdc::Entity>>>::~sparse_map(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = (_QWORD *)a1[6];
  if (v2)
  {
    v3 = (_QWORD *)a1[7];
    v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        v5 = (_QWORD *)*(v3 - 3);
        if (v5)
        {
          do
          {
            v8 = (_QWORD *)*v5;
            v9 = (void *)v5[3];
            if (v9)
            {
              v5[4] = v9;
              operator delete(v9);
            }
            operator delete(v5);
            v5 = v8;
          }
          while (v8);
        }
        v7 = (void *)*(v3 - 5);
        v3 -= 5;
        v6 = v7;
        *v3 = 0;
        if (v7)
          operator delete(v6);
      }
      while (v3 != v2);
      v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  v10 = (void *)a1[3];
  if (v10)
  {
    a1[4] = v10;
    operator delete(v10);
  }
  v11 = (_QWORD *)*a1;
  if (*a1)
  {
    v12 = (_QWORD *)a1[1];
    v13 = (_QWORD *)*a1;
    if (v12 != v11)
    {
      do
      {
        v15 = *--v12;
        v14 = v15;
        *v12 = 0;
        if (v15)
          MEMORY[0x1A1AF4E00](v14, 0x1000C40104B78CFLL);
      }
      while (v12 != v11);
      v13 = (_QWORD *)*a1;
    }
    a1[1] = v11;
    operator delete(v13);
  }
  return a1;
}

void gdc::ComponentStorageWrapper<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::RasterTile>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::RasterTile>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::RasterTile>>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::RasterTile>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *gdc::ManagedObjectHolder<md::DrapingContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B0C30;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1020C40D090CC53);
  return a1;
}

void gdc::ManagedObjectHolder<md::DrapingContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B0C30;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0x1020C40D090CC53);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::DrapingContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void sub_19F3FFBAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 296));
  _Unwind_Resume(a1);
}

void sub_19F3FFBC0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  md::DrapingTaskScheduler **v2;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;

  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)(v1 + 48));
  md::TileAdjustmentHelpers::~TileAdjustmentHelpers((md::TileAdjustmentHelpers *)(v1 + 42));
  gdc::FallbackCollector::~FallbackCollector((gdc::FallbackCollector *)(v1 + 29));
  v4 = (std::__shared_weak_count *)v1[25];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  v5 = (std::__shared_weak_count *)v1[23];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  std::unique_ptr<md::DrapingTaskScheduler>::~unique_ptr[abi:nn180100](v2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 19));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 17));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 15));
  md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (*(_QWORD *)(a1 + 24))
  {
    GEOConfigRemoveBlockListener();
    v2 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;

  }
  atomic_store(0, *(unsigned __int8 **)(a1 + 32));
  v3 = *(_QWORD **)(a1 + 72);
  if (v3 == (_QWORD *)(a1 + 48))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 48);
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return a1;
}

void sub_19F3FFCD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 + 72);
  if (v3 == (_QWORD *)(v1 + 48))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 + 48);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 32);

  _Unwind_Resume(a1);
}

void geo::Pool<gdc::FallbackNode>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t **v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;

  v33 = 0;
  v34 = 0;
  v32 = &v33;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = &v33;
      v5 = &v33;
      if (v33)
      {
        v6 = v33;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v6;
            v7 = v6[4];
            if ((unint64_t)v2 >= v7)
              break;
            v6 = *v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_12;
          }
          if (v7 >= (unint64_t)v2)
            break;
          v6 = v5[1];
          if (!v6)
          {
            v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *v4 = v8;
        if (*v32)
        {
          v32 = (uint64_t **)*v32;
          v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v33, v8);
        v3 = ++v34;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)a1;
  v11 = (_QWORD *)(a1 + 8);
  v12 = v3 == *(_QWORD *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11)
      goto LABEL_52;
    goto LABEL_54;
  }
  v14 = 1;
  do
  {
    if (v14)
    {
      v15 = 0;
      v16 = v10[4];
      do
      {
        v17 = (_QWORD *)(v16 + 104 * v15);
        v18 = v33;
        if (!v33)
          goto LABEL_38;
        v19 = &v33;
        do
        {
          v20 = v18;
          v21 = v19;
          v22 = v18[4];
          v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            v23 = (uint64_t **)v20;
            v19 = (uint64_t **)v20;
          }
          v18 = *v23;
        }
        while (v18);
        if (v19 == &v33)
          goto LABEL_38;
        if (v22 < (unint64_t)v17)
          v20 = (uint64_t *)v21;
        if ((unint64_t)v17 < v20[4])
        {
LABEL_38:
          v24 = (std::__shared_weak_count *)v17[12];
          if (v24)
          {
            p_shared_owners = (unint64_t *)&v24->__shared_owners_;
            do
              v26 = __ldaxr(p_shared_owners);
            while (__stlxr(v26 - 1, p_shared_owners));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          v27 = (void *)v17[1];
          if (v27 != (void *)v17[3])
            free(v27);
        }
        ++v15;
        v14 = *(_QWORD *)(a1 + 24);
      }
      while (v15 < v14);
    }
    v28 = (_QWORD *)v10[1];
    if (v28)
    {
      do
      {
        v29 = v28;
        v28 = (_QWORD *)*v28;
      }
      while (v28);
    }
    else
    {
      do
      {
        v29 = (_QWORD *)v10[2];
        v12 = *v29 == (_QWORD)v10;
        v10 = v29;
      }
      while (!v12);
    }
    v10 = v29;
  }
  while (v29 != v11);
  v10 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v11)
  {
    do
    {
LABEL_54:
      free((void *)v10[4]);
      v30 = (_QWORD *)v10[1];
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = (_QWORD *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (_QWORD *)v10[2];
          v12 = *v31 == (_QWORD)v10;
          v10 = v31;
        }
        while (!v12);
      }
      v10 = v31;
    }
    while (v31 != v11);
  }
LABEL_52:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v33);
}

void sub_19F3FFFC8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void md::TileAdjustmentHelpers::~TileAdjustmentHelpers(md::TileAdjustmentHelpers *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

void gdc::FallbackCollector::~FallbackCollector(gdc::FallbackCollector *this)
{
  geo::Pool<gdc::FallbackNode>::disposeElements((uint64_t)this + 56);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 8));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 4));
  if (*(_BYTE *)this)
    *(_BYTE *)this = 0;
}

void sub_19F400060(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 64));
  _Unwind_Resume(a1);
}

md::DrapingTaskScheduler **std::unique_ptr<md::DrapingTaskScheduler>::~unique_ptr[abi:nn180100](md::DrapingTaskScheduler **a1)
{
  md::DrapingTaskScheduler *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::DrapingTaskScheduler::~DrapingTaskScheduler(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

uint64_t md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  return a1;
}

void std::shared_ptr<md::Mesh>::reset[abi:nn180100]<md::Mesh,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42E7410;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  v5 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_19F40018C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  if (v1)
  {
    v3 = *(std::__shared_weak_count **)(v1 + 72);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = *(std::__shared_weak_count **)(v1 + 8);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    MEMORY[0x1A1AF4E00](v1, 0x1020C408635837CLL);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<md::components::MeshInstance *,std::shared_ptr<md::components::MeshInstance>::__shared_ptr_default_delete<md::components::MeshInstance,md::components::MeshInstance>,std::allocator<md::components::MeshInstance>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::components::MeshInstance *,std::shared_ptr<md::components::MeshInstance>::__shared_ptr_default_delete<md::components::MeshInstance,md::components::MeshInstance>,std::allocator<md::components::MeshInstance>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x1A1AF4E00);
  return result;
}

void std::__function::__func<gm::Box<float,3>::transformedAndEnclosed(gm::Matrix<float,4,4> const&)::{lambda(gm::Matrix<float,3,1> &)#1},std::allocator<gm::Box<float,3>::transformedAndEnclosed(gm::Matrix<float,4,4> const&)::{lambda(gm::Matrix<float,3,1> &)#1}>,void ()(gm::Matrix<float,3,1> &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<gm::Box<float,3>::transformedAndEnclosed(gm::Matrix<float,4,4> const&)::{lambda(gm::Matrix<float,3,1> &)#1},std::allocator<gm::Box<float,3>::transformedAndEnclosed(gm::Matrix<float,4,4> const&)::{lambda(gm::Matrix<float,3,1> &)#1}>,void ()(gm::Matrix<float,3,1> &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D8AB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<gm::Box<float,3>::transformedAndEnclosed(gm::Matrix<float,4,4> const&)::{lambda(gm::Matrix<float,3,1> &)#1},std::allocator<gm::Box<float,3>::transformedAndEnclosed(gm::Matrix<float,4,4> const&)::{lambda(gm::Matrix<float,3,1> &)#1}>,void ()(gm::Matrix<float,3,1> &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D8AB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__shared_ptr_pointer<md::Mesh *,std::shared_ptr<md::Mesh>::__shared_ptr_default_delete<md::Mesh,md::Mesh>,std::allocator<md::Mesh>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::Mesh *,std::shared_ptr<md::Mesh>::__shared_ptr_default_delete<md::Mesh,md::Mesh>,std::allocator<md::Mesh>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 72);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::__shared_ptr_emplace<ggl::CommonMesh::Pos4Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE5E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::CommonMesh::Pos4Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE5E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t __copy_helper_block_ea8_40c40_ZTSNSt3__110shared_ptrINS_6atomicIbEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_40c40_ZTSNSt3__110shared_ptrINS_6atomicIbEEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<std::atomic<BOOL>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::atomic<BOOL>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A338;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::PolylineOverlayRibbon::ElevatedMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3A50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::PolylineOverlayRibbon::ElevatedMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3A50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::PolylineOverlayRibbon::ElevatedMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::ElevatedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::ElevatedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::ElevatedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__hash_table<md::MuninJunction const*,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,std::allocator<md::MuninJunction const*>>::__emplace_unique_key_args<md::MuninJunction const*,md::MuninJunction const* const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = v7 ^ (v7 >> 47);
  v9 = 0x9DDFEA08EB382D69 * v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * v8;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (v13)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == a2)
                return;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_22;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == a2)
              return;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_22:
  v16 = operator new(0x18uLL);
  *v16 = 0;
  v16[1] = v9;
  v16[2] = a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_34;
    if (prime < v10)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v10)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v27)
  {
    *v16 = *v27;
LABEL_58:
    *v27 = v16;
    goto LABEL_59;
  }
  *v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(v26 + 8 * v3) = a1 + 16;
  if (*v16)
  {
    v28 = *(_QWORD *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10)
        v28 %= v10;
    }
    else
    {
      v28 &= v10 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19F400B08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t md::ComposedRoadEdge::walkEdges(uint64_t result, char a2, uint64_t a3)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 24))
  {
    v4 = (_QWORD *)result;
    v5 = ((uint64_t)(*(_QWORD *)(result + 32) - *(_QWORD *)(result + 24)) >> 3) - 1;
    if ((a2 & 1) != 0)
    {
      v6 = 0;
      if ((uint64_t)(*(_QWORD *)(result + 32) - *(_QWORD *)(result + 24)) >> 3 == 1)
        v7 = -1;
      else
        v7 = 1;
      v8 = v7 + v5;
      do
      {
        if (v8 == v6)
          break;
        v9 = *(_QWORD *)(*v4 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6;
        v14 = *(_QWORD *)(v4[3] + 8 * v6);
        v13 = v9 & 1;
        v10 = *(_QWORD *)(a3 + 24);
        if (!v10)
          goto LABEL_15;
        result = (*(uint64_t (**)(uint64_t, uint64_t *, BOOL *))(*(_QWORD *)v10 + 48))(v10, &v14, &v13);
        v6 += v7;
      }
      while ((result & 1) != 0);
    }
    else
    {
      do
      {
        if (v5 == -1)
          break;
        v11 = ((*(_QWORD *)(*v4 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) == 0;
        v14 = *(_QWORD *)(v4[3] + 8 * v5);
        v13 = v11;
        v12 = *(_QWORD *)(a3 + 24);
        if (!v12)
        {
LABEL_15:
          std::__throw_bad_function_call[abi:nn180100]();
          JUMPOUT(0x19F400C38);
        }
        result = (*(uint64_t (**)(uint64_t, uint64_t *, BOOL *))(*(_QWORD *)v12 + 48))(v12, &v14, &v13);
        --v5;
      }
      while ((result & 1) != 0);
    }
  }
  return result;
}

void std::__function::__func<md::ComposedRoadEdge::edgeRange(BOOL,md::MuninRoadEdge const*,double &,double &)::$_0,std::allocator<md::ComposedRoadEdge::edgeRange(BOOL,md::MuninRoadEdge const*,double &,double &)::$_0>,BOOL ()(md::MuninRoadEdge const*,BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ComposedRoadEdge::edgeRange(BOOL,md::MuninRoadEdge const*,double &,double &)::$_0,std::allocator<md::ComposedRoadEdge::edgeRange(BOOL,md::MuninRoadEdge const*,double &,double &)::$_0>,BOOL ()(md::MuninRoadEdge const*,BOOL)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &unk_1E42D8EE8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<md::ComposedRoadEdge::edgeRange(BOOL,md::MuninRoadEdge const*,double &,double &)::$_0,std::allocator<md::ComposedRoadEdge::edgeRange(BOOL,md::MuninRoadEdge const*,double &,double &)::$_0>,BOOL ()(md::MuninRoadEdge const*,BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &unk_1E42D8EE8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<md::ComposedRoadEdge::edgeRange(BOOL,md::MuninRoadEdge const*,double &,double &)::$_0,std::allocator<md::ComposedRoadEdge::edgeRange(BOOL,md::MuninRoadEdge const*,double &,double &)::$_0>,BOOL ()(md::MuninRoadEdge const*,BOOL)>::operator()(uint64_t a1, md::MuninRoadEdge **a2)
{
  md::MuninRoadEdge *v3;
  uint64_t v4;
  double v5;
  md::MuninRoadEdge *v6;
  double *v7;
  double v8;
  _BYTE *v9;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = md::MuninRoadEdge::edgeLengthInMeters(*a2);
  v6 = **(md::MuninRoadEdge ***)(a1 + 8);
  v7 = *(double **)(a1 + 24);
  v8 = *v7;
  if (v6 == v3)
  {
    **(double **)(a1 + 16) = v8 / *(double *)(v4 + 144);
    v9 = *(_BYTE **)(a1 + 48);
    **(double **)(a1 + 40) = (*v7 + v5) / *(double *)(v4 + 144);
    *v9 = 1;
  }
  else
  {
    *v7 = v8 + v5;
  }
  return v6 != v3;
}

float64x2_t md::ComposedRoadEdge::walker(md::ComposedRoadEdge *this, uint64_t a2, char a3)
{
  float64x2_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  double v15;
  double v16;
  float64x2_t *v17;
  float64x2_t v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_BYTE *)this + 8) = a3;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  v19[0] = &off_1E42D0CE8;
  v19[1] = this;
  v20 = v19;
  md::ComposedRoadEdge::walkEdges(a2, a3, (uint64_t)v19);
  v5 = v20;
  if (v20 == v19)
  {
    v6 = 4;
    v5 = v19;
    goto LABEL_5;
  }
  if (v20)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)this + 144);
  result.f64[0] = *((float64_t *)this + 14);
  if (result.f64[0] >= 0.0)
  {
    v7 = *((_QWORD *)this + 8);
    v8 = *((_QWORD *)this + 5);
    if (*(double *)(v8 + 56 * v7 + 48) >= result.f64[0])
    {
      v9 = *(_QWORD *)(v8 + 56 * v7 + 24);
      v10 = *(_QWORD *)(v8 + 56 * v7 + 32);
      v11 = v10 - v9;
      if (v10 != v9)
      {
        v12 = 0;
        v13 = (_QWORD *)(v8 + 56 * v7);
        v14 = v11 >> 3;
        if ((unint64_t)(v11 >> 3) <= 1)
          v14 = 1;
        v15 = 0.0;
        while (1)
        {
          v16 = *(double *)(v9 + 8 * v12);
          if (v16 + v15 >= result.f64[0])
            break;
          ++v12;
          v15 = v16 + v15;
          if (v14 == v12)
            return result;
        }
        v17 = (float64x2_t *)(*v13 + 16 * v12);
        *((float64x2_t *)this + 5) = vmlaq_n_f64(*v17, vsubq_f64(v17[1], *v17), (result.f64[0] - v15) / v16);
        v18 = vsubq_f64(v17[1], *v17);
        result = vmulq_n_f64(v18, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v18, v18))));
        *((float64x2_t *)this + 6) = result;
      }
    }
  }
  return result;
}

void sub_19F400EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  _QWORD *v13;
  void **v14;
  char *v15;
  char *v17;
  uint64_t v18;
  char *v19;
  void *v20;
  char *v21;
  char *v22;
  void *v23;
  void *v24;

  v17 = a13;
  if (a13 == v15)
  {
    v18 = 4;
    v17 = &a10;
  }
  else
  {
    if (!a13)
    {
      v19 = (char *)v13[5];
      if (v19)
        goto LABEL_9;
      goto LABEL_5;
    }
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
  v19 = (char *)v13[5];
  if (v19)
  {
LABEL_9:
    v21 = (char *)v13[6];
    v22 = v19;
    if (v21 != v19)
    {
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 4);
        if (v23)
        {
          *((_QWORD *)v21 - 3) = v23;
          operator delete(v23);
        }
        v24 = (void *)*((_QWORD *)v21 - 7);
        if (v24)
        {
          *((_QWORD *)v21 - 6) = v24;
          operator delete(v24);
        }
        v21 -= 56;
      }
      while (v21 != v19);
      v22 = (char *)v13[5];
    }
    v13[6] = v19;
    operator delete(v22);
    v20 = *v14;
    if (*v14)
    {
LABEL_18:
      v13[3] = v20;
      operator delete(v20);
      _Unwind_Resume(exception_object);
    }
LABEL_6:
    _Unwind_Resume(exception_object);
  }
LABEL_5:
  v20 = *v14;
  if (*v14)
    goto LABEL_18;
  goto LABEL_6;
}

void altitude::Tile::~Tile(altitude::Tile *this)
{
  altitude::Tile::~Tile(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  altitude::Tile *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void (***v13)(_QWORD);
  void (***v14)(_QWORD);
  void *v15;
  void (***v16)(_QWORD);
  void (***v17)(_QWORD);
  void (**v18)(_QWORD);
  BOOL v19;

  *(_QWORD *)this = &off_1E42C6788;
  v3 = *((_QWORD *)this + 38);
  v2 = *((_QWORD *)this + 39);
  if (v2 != v3)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      v6 = *(altitude::Tile **)(v3 + 32 * v4);
      if (v6)
      {
        altitude::Tile::removeChildTile(this, v6);
        v3 = *((_QWORD *)this + 38);
        v2 = *((_QWORD *)this + 39);
      }
      v4 = v5++;
    }
    while (v4 < (v2 - v3) >> 5);
  }
  v7 = *((_QWORD *)this + 41);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 42);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 43);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 44);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 45);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (void *)*((_QWORD *)this + 38);
  if (v12)
  {
    *((_QWORD *)this + 39) = v12;
    operator delete(v12);
  }
  v13 = (void (***)(_QWORD))*((_QWORD *)this + 33);
  if (v13)
  {
    v14 = (void (***)(_QWORD))*((_QWORD *)this + 34);
    v15 = (void *)*((_QWORD *)this + 33);
    if (v14 != v13)
    {
      v16 = v14 - 6;
      v17 = v14 - 6;
      do
      {
        v18 = *v17;
        v17 -= 6;
        (*v18)(v16);
        v19 = v16 == v13;
        v16 = v17;
      }
      while (!v19);
      v15 = (void *)*((_QWORD *)this + 33);
    }
    *((_QWORD *)this + 34) = v13;
    operator delete(v15);
  }
  *(_QWORD *)this = &off_1E42C3688;
}

uint64_t karo::Bounded::setFrame(_QWORD *a1, _QWORD *a2)
{
  a1[4] = a2[3];
  a1[5] = a2[4];
  a1[6] = a2[5];
  a1[7] = a2[6];
  a1[1] = *a2;
  a1[2] = a2[1];
  a1[3] = a2[2];
  return (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
}

uint64_t karo::Oriented::getFrame(karo::Oriented *this)
{
  return (uint64_t)this + 8;
}

uint64_t karo::Bounded::setLocalBounds(_QWORD *a1, _QWORD *a2)
{
  a1[8] = *a2;
  a1[9] = a2[1];
  a1[10] = a2[2];
  a1[11] = a2[3];
  a1[12] = a2[4];
  a1[13] = a2[5];
  return (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
}

uint64_t karo::Bounded::setBounds(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  a1[4] = a2[3];
  a1[5] = a2[4];
  a1[6] = a2[5];
  a1[7] = a2[6];
  a1[1] = *a2;
  a1[2] = a2[1];
  a1[3] = a2[2];
  a1[8] = *a3;
  a1[9] = a3[1];
  a1[10] = a3[2];
  a1[11] = a3[3];
  a1[12] = a3[4];
  a1[13] = a3[5];
  return (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
}

uint64_t karo::Bounded::getBounds(karo::Bounded *this)
{
  return (uint64_t)this + 112;
}

uint64_t karo::Bounded::getLocalBounds(karo::Bounded *this)
{
  return (uint64_t)this + 64;
}

double karo::Bounded::updateBounds(karo::Bounded *this)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  __n128 v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  double result;
  double v24[12];
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  int64x2_t v28;
  __int128 v29;
  int64x2_t v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = *((double *)this + 5);
  v3 = *((double *)this + 6);
  v4 = *((double *)this + 7);
  v5 = v2 + v2;
  v6 = (v2 + v2) * v2;
  v7 = (v3 + v3) * v3;
  v9 = *((_QWORD *)this + 3);
  v8 = *((double *)this + 4);
  v10 = (v8 + v8) * v2;
  v11 = (v3 + v3) * v4;
  v12 = v10 - v11;
  v13 = v3 * (v8 + v8);
  v24[0] = 1.0 - (v6 + v7);
  v24[1] = v11 + v10;
  v14 = 1.0 - (v8 + v8) * v8;
  v24[4] = v12;
  v24[5] = v14 - v7;
  v15 = v4 * v5;
  v16 = v4 * v5 + v13;
  v17 = v5 * v3;
  v18 = v4 * (v8 + v8);
  v24[8] = v16;
  v24[9] = v17 - v18;
  v24[2] = v13 - v15;
  v24[6] = v18 + v17;
  v24[10] = v14 - v6;
  v24[3] = 0.0;
  v24[7] = 0.0;
  v24[11] = 0.0;
  v25 = *(_OWORD *)((char *)this + 8);
  v26 = v9;
  v27 = 0x3FF0000000000000;
  v28 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v29 = xmmword_19FFB2E00;
  v30 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v31[0] = &off_1E42D8A68;
  v31[1] = &v28;
  v31[2] = v24;
  v32 = v31;
  v19.n128_f64[0] = gm::Box<double,3>::forEachCorner((uint64_t)this + 64, (uint64_t)v31);
  v20 = v32;
  if (v32 == v31)
  {
    v21 = 4;
    v20 = v31;
    goto LABEL_5;
  }
  if (v32)
  {
    v21 = 5;
LABEL_5:
    (*(void (**)(__n128))(*v20 + 8 * v21))(v19);
  }
  v22 = v29;
  *((int64x2_t *)this + 7) = v28;
  *((_OWORD *)this + 8) = v22;
  result = *(double *)v30.i64;
  *((int64x2_t *)this + 9) = v30;
  return result;
}

void std::__function::__func<gm::Box<double,3>::transformedAndEnclosed(gm::Matrix<double,4,4> const&)::{lambda(gm::Matrix<double,3,1> &)#1},std::allocator<gm::Box<double,3>::transformedAndEnclosed(gm::Matrix<double,4,4> const&)::{lambda(gm::Matrix<double,3,1> &)#1}>,void ()(gm::Matrix<double,3,1> &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<gm::Box<double,3>::transformedAndEnclosed(gm::Matrix<double,4,4> const&)::{lambda(gm::Matrix<double,3,1> &)#1},std::allocator<gm::Box<double,3>::transformedAndEnclosed(gm::Matrix<double,4,4> const&)::{lambda(gm::Matrix<double,3,1> &)#1}>,void ()(gm::Matrix<double,3,1> &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D8A68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<gm::Box<double,3>::transformedAndEnclosed(gm::Matrix<double,4,4> const&)::{lambda(gm::Matrix<double,3,1> &)#1},std::allocator<gm::Box<double,3>::transformedAndEnclosed(gm::Matrix<double,4,4> const&)::{lambda(gm::Matrix<double,3,1> &)#1}>,void ()(gm::Matrix<double,3,1> &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D8A68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void altitude::Tile::removeChildTile(altitude::Tile *this, altitude::Tile *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  NSObject *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  char v18;
  uint8_t buf[4];
  void **v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 38);
  v4 = *((_QWORD *)this + 39) - v3;
  if (v4)
  {
    v6 = 0;
    v7 = v4 >> 5;
    v8 = 1;
    while (1)
    {
      v9 = 32 * v6;
      if (*(altitude::Tile **)(v3 + v9) == a2)
        break;
      v6 = v8++;
      if (v7 <= v6)
        goto LABEL_5;
    }
    *((_QWORD *)a2 + 37) = 0;
    *(_QWORD *)(v3 + v9) = 0;
    v12 = *((_QWORD *)this + 41);
    if (v12)
      (*(void (**)(uint64_t, altitude::Tile *))(*(_QWORD *)v12 + 112))(v12, a2);
    v13 = *((_QWORD *)this + 42);
    if (v13)
      (*(void (**)(uint64_t, altitude::Tile *))(*(_QWORD *)v13 + 112))(v13, a2);
    v14 = *((_QWORD *)this + 43);
    if (v14)
      (*(void (**)(uint64_t, altitude::Tile *))(*(_QWORD *)v14 + 112))(v14, a2);
    v15 = *((_QWORD *)this + 44);
    if (v15)
      (*(void (**)(uint64_t, altitude::Tile *))(*(_QWORD *)v15 + 112))(v15, a2);
    v16 = *((_QWORD *)this + 45);
    if (v16)
      (*(void (**)(uint64_t, altitude::Tile *))(*(_QWORD *)v16 + 112))(v16, a2);
    (*(void (**)(_QWORD, altitude::Tile *, altitude::Tile *))(**((_QWORD **)this + 53) + 40))(*((_QWORD *)this + 53), this, a2);
    (*(void (**)(altitude::Tile *))(*(_QWORD *)a2 + 8))(a2);
  }
  else
  {
LABEL_5:
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v10 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
    {
      altitude::Tile::createTileName(__p, (unsigned int *)a2 + 98, (uint64_t *)(*((_QWORD *)a2 + 36) + 40), (uint64_t *)(*((_QWORD *)a2 + 36) + 112));
      if (v18 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v20 = v11;
      _os_log_impl(&dword_19F029000, v10, OS_LOG_TYPE_ERROR, "Trying to remove child that is not a child: %s", buf, 0xCu);
      if (v18 < 0)
        operator delete(__p[0]);
    }
  }
}

size_t altitude::Tile::createTileName(_QWORD *a1, unsigned int *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v10;
  uint64_t *v12;
  size_t result;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char __str[1024];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = *((unsigned __int8 *)a4 + 23);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = a4[1];
  if (v5 == 5)
  {
    if (v6 >= 0)
      v10 = a4;
    else
      v10 = (uint64_t *)*a4;
    if (*(_DWORD *)v10 == 1819308129 && *((_BYTE *)v10 + 4) == 101)
    {
      snprintf(__str, 0x400uLL, "%s&z=%d&x=%d&y=%d&h=0");
      goto LABEL_31;
    }
  }
  else if (v5 == 15)
  {
    if (v6 >= 0)
      v7 = a4;
    else
      v7 = (_QWORD *)*a4;
    if (*v7 == 0x756F7365726F6567 && *(_QWORD *)((char *)v7 + 7) == 0x6833635F65637275)
    {
      snprintf(__str, 0x400uLL, "%s_%i_%i_%i.c3h");
      goto LABEL_31;
    }
    if (*v7 == 0x756F7365726F6567 && *(_QWORD *)((char *)v7 + 7) == 0x6233635F65637275)
    {
      snprintf(__str, 0x400uLL, "%s_%i_%i_%i.c3b");
      goto LABEL_31;
    }
  }
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  snprintf(__str, 0x400uLL, "%s%i/%i/map_%i_%i_%i%s", v12, *a2);
LABEL_31:
  result = strlen(__str);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v14 = result;
  if (result >= 0x17)
  {
    v15 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v15 = result | 7;
    v16 = v15 + 1;
    v17 = operator new(v15 + 1);
    a1[1] = v14;
    a1[2] = v16 | 0x8000000000000000;
    *a1 = v17;
    a1 = v17;
  }
  else
  {
    *((_BYTE *)a1 + 23) = result;
    if (!result)
      goto LABEL_39;
  }
  result = (size_t)memcpy(a1, __str, v14);
LABEL_39:
  *((_BYTE *)a1 + v14) = 0;
  return result;
}

uint64_t altitude::Tile::updateBoundsAltitude(altitude::Tile *this, float a2, float a3)
{
  float v4;
  float v5;
  _BYTE v7[48];
  _OWORD v8[3];
  uint64_t v9;

  v4 = fminf(*((float *)this + 102), a2);
  *((float *)this + 102) = v4;
  v5 = fmaxf(*((float *)this + 103), a3);
  *((float *)this + 103) = v5;
  memset(v8, 0, sizeof(v8));
  v9 = 0x3FF0000000000000;
  altitude::Tile::computeGeocentricBoundsFromTileIndex((unsigned int *)this + 98, (uint64_t)v8, (uint64_t)v7, v4, v5);
  return (*(uint64_t (**)(altitude::Tile *, _OWORD *, _BYTE *))(*(_QWORD *)this + 40))(this, v8, v7);
}

void altitude::Tile::computeGeocentricBoundsFromTileIndex(unsigned int *a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  unsigned int v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  char v12;
  double v13;
  int v14;
  long double v15;
  long double v16;
  double v17;
  long double v18;
  __double2 v19;
  double v20;
  __double2 v21;
  double v22;
  double v23;
  double v24;
  __double2 v25;
  double sinval;
  double v27;
  double v28;
  __double2 v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  long double v49;
  long double v50;
  __double2 v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  long double v63;
  long double v64;
  __double2 v65;
  unsigned int v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  long double v85;
  double v86;
  long double v87;
  double v88;
  __double2 v89;
  double v90;
  double v91;
  __double2 v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v141;
  double v142;
  double v143;
  double v144;

  v8 = *a1;
  v7 = a1[1];
  v9 = a1[2];
  if (*a1)
    v10 = 0;
  else
    v10 = v7 == 0;
  if (v10 && v9 == 0)
  {
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_QWORD *)(a2 + 48) = 0x3FF0000000000000;
    *(int64x2_t *)a3 = vdupq_n_s64(0xC158CBA800000000);
    *(_OWORD *)(a3 + 16) = xmmword_19FFB2E10;
    *(int64x2_t *)(a3 + 32) = vdupq_n_s64(0x4158CBA800000000uLL);
  }
  else
  {
    if (v8 >= 0x1F)
      v12 = 31;
    else
      v12 = *a1;
    v13 = (float)(a4 + (float)((float)(a5 - a4) * 0.5));
    v14 = 1 << v8;
    v133 = (double)v9;
    v135 = (double)(int)((-1 << v12) + v7 + v14);
    v136 = 1.0 / (double)v14;
    v15 = ((double)v9 + 0.5) * 6.28318531 * v136;
    v16 = exp((v135 + 0.5) * v136 * 6.28318531 + -3.14159265);
    v17 = atan(v16) * 2.0 + -1.57079633;
    v18 = fmod(v15, 6.28318531);
    v138 = fmod(v18 + 6.28318531, 6.28318531) + -3.14159265;
    v19 = __sincos_stret(v17);
    v128 = v13;
    v122 = 6378137.0 / sqrt(1.0 - v19.__sinval * v19.__sinval * 0.00669437999);
    v20 = (v122 + v13) * v19.__cosval;
    v21 = __sincos_stret(v138);
    v22 = v20 * v21.__cosval;
    v23 = v20 * v21.__sinval;
    v124 = v122 * 0.99330562;
    v24 = (v122 * 0.99330562 + v13) * v19.__sinval;
    *(double *)a2 = v20 * v21.__cosval;
    *(double *)(a2 + 8) = v20 * v21.__sinval;
    *(double *)(a2 + 16) = v24;
    v25 = __sincos_stret(v17 * 0.5);
    sinval = v25.__sinval;
    v27 = (sinval + sinval) * v25.__cosval;
    v28 = 1.0 - (sinval + sinval) * sinval;
    v29 = __sincos_stret(v138 * 0.5);
    v30 = v29.__sinval / sqrt(v27 * v27 + v28 * v28);
    v31 = v30 * v27;
    v32 = v30 * v28;
    v33 = -(v29.__cosval * v25.__sinval);
    v34 = -(v32 * v25.__sinval - v31 * v25.__cosval);
    v35 = v31 * v25.__sinval + v32 * v25.__cosval;
    *(double *)(a2 + 24) = v34;
    *(double *)(a2 + 32) = v33;
    *(double *)(a2 + 40) = v35;
    *(double *)(a2 + 48) = v25.__cosval * v29.__cosval;
    v36 = -(v24 * v33 - v35 * v23) - (v24 * v33 - v35 * v23);
    v37 = -(v35 * v22 - v34 * v24) - (v35 * v22 - v34 * v24);
    v38 = -(v34 * v23 - v22 * v33) - (v34 * v23 - v22 * v33);
    v134 = -(v20 * v21.__sinval + v37 * (v25.__cosval * v29.__cosval) + v38 * v34 - v36 * v35);
    v137 = -(v24 + v36 * v33 + v38 * (v25.__cosval * v29.__cosval) - v37 * v34);
    v139 = -(v20 * v21.__cosval + v36 * (v25.__cosval * v29.__cosval) + v37 * v35 - v38 * v33);
    v39 = (v122 + a5) * v19.__cosval;
    v40 = v39 * v21.__cosval;
    v41 = v39 * v21.__sinval;
    v123 = a5;
    v42 = (v124 + a5) * v19.__sinval;
    v43 = -(v42 * v33 - v41 * v35) - (v42 * v33 - v41 * v35);
    v44 = -(v40 * v35 - v42 * v34) - (v40 * v35 - v42 * v34);
    v45 = -(v41 * v34 - v40 * v33) - (v41 * v34 - v40 * v33);
    v46 = v40 + v139 + v43 * (v25.__cosval * v29.__cosval) + v44 * v35 - v45 * v33;
    v47 = v41 + v134 + v44 * (v25.__cosval * v29.__cosval) + v45 * v34 - v43 * v35;
    v48 = v42 + v137 + v43 * v33 + v45 * (v25.__cosval * v29.__cosval) - v44 * v34;
    v131 = fmin(v46, 1.79769313e308);
    v125 = fmin(v47, 1.79769313e308);
    v127 = fmax(v46, -1.79769313e308);
    v120 = fmin(v48, 1.79769313e308);
    v121 = fmax(v47, -1.79769313e308);
    v113 = fmax(v48, -1.79769313e308);
    v49 = exp(v136 * 6.28318531 * v135 + -3.14159265);
    v50 = atan(v49);
    v51 = __sincos_stret(v50 * 2.0 + -1.57079633);
    v52 = 6378137.0 / sqrt(1.0 - v51.__sinval * v51.__sinval * 0.00669437999);
    v53 = (v52 + v128) * v51.__cosval;
    v54 = v53 * v21.__cosval;
    v55 = v53 * v21.__sinval;
    v56 = (v128 + v52 * 0.99330562) * v51.__sinval;
    v57 = -(v56 * v33 - v55 * v35) - (v56 * v33 - v55 * v35);
    v58 = -(v54 * v35 - v56 * v34) - (v54 * v35 - v56 * v34);
    v59 = -(v55 * v34 - v54 * v33) - (v55 * v34 - v54 * v33);
    v60 = v54 + v139 + v57 * (v25.__cosval * v29.__cosval) + v58 * v35 - v59 * v33;
    v61 = v55 + v134 + v58 * (v25.__cosval * v29.__cosval) + v59 * v34 - v57 * v35;
    v62 = v56 + v137 + v57 * v33 + v59 * (v25.__cosval * v29.__cosval) - v58 * v34;
    v118 = fmax(v127, v60);
    v119 = fmin(v60, v131);
    v116 = fmax(v121, v61);
    v117 = fmin(v61, v125);
    v114 = fmax(v113, v62);
    v115 = fmin(v62, v120);
    v63 = exp(v136 * 6.28318531 * (v135 + 1.0) + -3.14159265);
    v64 = atan(v63);
    v65 = __sincos_stret(v64 * 2.0 + -1.57079633);
    v66 = 0;
    v67 = 6378137.0 / sqrt(1.0 - v65.__sinval * v65.__sinval * 0.00669437999);
    v68 = (v67 + v128) * v65.__cosval;
    v69 = v68 * v21.__cosval;
    v70 = v68 * v21.__sinval;
    v71 = (v128 + v67 * 0.99330562) * v65.__sinval;
    v72 = -(v71 * v33 - v70 * v35) - (v71 * v33 - v70 * v35);
    v73 = -(v69 * v35 - v71 * v34) - (v69 * v35 - v71 * v34);
    v74 = -(v70 * v34 - v69 * v33) - (v70 * v34 - v69 * v33);
    v75 = v69 + v139 + v72 * (v25.__cosval * v29.__cosval) + v73 * v35 - v74 * v33;
    v126 = v25.__cosval * v29.__cosval;
    v76 = v70 + v134 + v73 * (v25.__cosval * v29.__cosval) + v74 * v34 - v72 * v35;
    v129 = v34;
    v132 = v33;
    v77 = v71 + v137 + v72 * v33 + v74 * (v25.__cosval * v29.__cosval) - v73 * v34;
    v78 = fmin(v75, v119);
    v79 = fmax(v118, v75);
    v80 = fmin(v76, v117);
    v81 = fmax(v116, v76);
    v82 = fmin(v77, v115);
    v83 = fmax(v114, v77);
    v84 = a4;
    do
    {
      v141 = v78;
      v142 = v79;
      v143 = v82;
      v144 = v83;
      v85 = exp(((double)(v66 & 1) + v135) * v136 * 6.28318531 + -3.14159265);
      v86 = atan(v85) * 2.0 + -1.57079633;
      v87 = fmod(((float)(v66 >> 1) + v133) * (v136 * 6.28318531), 6.28318531);
      v88 = fmod(v87 + 6.28318531, 6.28318531) + -3.14159265;
      v89 = __sincos_stret(v86);
      v90 = 6378137.0 / sqrt(v89.__sinval * v89.__sinval * -0.00669437999 + 1.0);
      v91 = (v90 + v84) * v89.__cosval;
      v92 = __sincos_stret(v88);
      v93 = (v90 * 0.99330562 + v84) * v89.__sinval;
      v94 = -(v93 * v132 - v91 * v92.__sinval * v35);
      v95 = -(v91 * v92.__cosval * v35 - v93 * v129);
      v96 = -(v91 * v92.__sinval * v129 - v91 * v92.__cosval * v132);
      v97 = v95 + v95;
      v98 = v94 + v94;
      v99 = v96 + v96;
      v100 = v91 * v92.__sinval + v134 + v97 * v126 + v99 * v129 - v98 * v35;
      v101 = v91 * v92.__cosval + v139 + v98 * v126 + v97 * v35 - v99 * v132;
      v102 = v93 + v137 + v98 * v132 + v99 * v126 - v97 * v129;
      v103 = (v90 + v123) * v89.__cosval;
      v104 = v103 * v92.__cosval;
      v105 = v103 * v92.__sinval;
      v106 = (v90 * 0.99330562 + v123) * v89.__sinval;
      v107 = -(v106 * v132 - v105 * v35) - (v106 * v132 - v105 * v35);
      v108 = -(v104 * v35 - v106 * v129) - (v104 * v35 - v106 * v129);
      v109 = -(v105 * v129 - v104 * v132) - (v105 * v129 - v104 * v132);
      v110 = v104 + v139 + v107 * v126 + v108 * v35 - v109 * v132;
      v111 = v105 + v134 + v108 * v126 + v109 * v129 - v107 * v35;
      v112 = v106 + v137 + v107 * v132 + v109 * v126 - v108 * v129;
      v78 = fmin(v110, fmin(v101, v141));
      v79 = fmax(fmax(v142, v101), v110);
      v80 = fmin(v111, fmin(v100, v80));
      v81 = fmax(fmax(v81, v100), v111);
      v82 = fmin(v112, fmin(v102, v143));
      v83 = fmax(fmax(v144, v102), v112);
      ++v66;
    }
    while (v66 != 4);
    *(double *)a3 = v78;
    *(double *)(a3 + 8) = v80;
    *(double *)(a3 + 16) = v82;
    *(double *)(a3 + 24) = v79;
    *(double *)(a3 + 32) = v81;
    *(double *)(a3 + 40) = v83;
  }
}

uint64_t altitude::Tile::propagateChildBounds(uint64_t result, float a2, float a3)
{
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  _BYTE v10[48];
  _OWORD v11[3];
  uint64_t v12;

  if (result)
  {
    v5 = result;
    while (*(_DWORD *)(v5 + 392) >= 4u)
    {
      v9 = *(float *)(v5 + 412);
      if (v9 < a3)
      {
        v6 = *(float *)(v5 + 408);
      }
      else
      {
        v6 = *(float *)(v5 + 408);
        if (v6 <= a2)
          return result;
      }
      v7 = fminf(v6, a2);
      *(float *)(v5 + 408) = v7;
      v8 = fmaxf(v9, a3);
      *(float *)(v5 + 412) = v8;
      memset(v11, 0, sizeof(v11));
      v12 = 0x3FF0000000000000;
      altitude::Tile::computeGeocentricBoundsFromTileIndex((unsigned int *)(v5 + 392), (uint64_t)v11, (uint64_t)v10, v7, v8);
      result = (*(uint64_t (**)(uint64_t, _OWORD *, _BYTE *))(*(_QWORD *)v5 + 40))(v5, v11, v10);
      v5 = *(_QWORD *)(v5 + 296);
      if (!v5)
        return result;
    }
  }
  return result;
}

uint64_t altitude::Tile::isPoleTile(char **a1)
{
  char v1;
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  char *v9;
  char *v11;
  _BOOL4 v14;

  v1 = *((_BYTE *)a1 + 23);
  if (v1 >= 0)
    v2 = *((unsigned __int8 *)a1 + 23);
  else
    v2 = (uint64_t)a1[1];
  if (v1 >= 0)
    v3 = (char *)a1;
  else
    v3 = *a1;
  v4 = &v3[v2];
  if (v2 >= 9)
  {
    v6 = v3;
    v7 = v2;
    v8 = v3;
    while (1)
    {
      v9 = (char *)memchr(v8, 115, v7 - 8);
      if (!v9)
      {
LABEL_16:
        v5 = &v3[v2];
        break;
      }
      v5 = v9;
      if (*(_QWORD *)v9 == 0x6C6F706874756F73 && v9[8] == 101)
        break;
      v8 = v9 + 1;
      v7 = v4 - (v5 + 1);
      if (v7 <= 8)
        goto LABEL_16;
    }
    do
    {
      v11 = (char *)memchr(v6, 110, v2 - 8);
      if (!v11)
        break;
      if (*(_QWORD *)v11 == 0x6C6F706874726F6ELL && v11[8] == 101)
        goto LABEL_24;
      v6 = v11 + 1;
      v2 = v4 - (v11 + 1);
    }
    while (v2 > 8);
  }
  else
  {
    v5 = &v3[v2];
  }
  v11 = v4;
LABEL_24:
  v14 = v5 != v4 && v5 - v3 != -1;
  return v11 != v4 && v11 - v3 != -1 || v14;
}

uint64_t altitude::Tile::createClipPlanes(uint64_t a1, double *a2, double a3)
{
  uint64_t v5;
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v19;
  uint64_t result;
  float64x2_t *v21;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  int8x16_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v33;
  float64x2_t v34;
  int8x16_t v35;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  float64x2_t v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  float64x2_t v64;
  double v65;
  double v66;
  double v67;
  double v68;
  float64x2_t v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  float64x2_t v148;
  double v149;
  float64x2_t v150;
  double v151;
  float64x2_t v152;
  double v153;
  float64x2_t v154;
  double v155;
  float64x2_t v156;
  double v157;
  float64x2_t v158;
  double v159;
  float64x2_t v160;
  double v161;
  float64x2_t v162;
  double v163;
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v6 = 0;
  v7 = *(double *)(v5 + 16);
  v8 = *(double *)(v5 + 40) - v7;
  v9 = fmax(v8, 0.0) * a3;
  v10 = v7 + (v8 - v9) * 0.5;
  v11 = v10 + v9;
  v12 = vsubq_f64(*(float64x2_t *)(v5 + 24), *(float64x2_t *)v5);
  v13 = vmulq_n_f64(vmaxnmq_f64(v12, (float64x2_t)0), a3);
  __asm { FMOV            V5.2D, #0.5 }
  v19 = vmlaq_f64(*(float64x2_t *)v5, _Q5, vsubq_f64(v12, v13));
  v148 = vaddq_f64(v19, v13);
  v149 = v11;
  v13.f64[0] = v148.f64[0];
  v13.f64[1] = v19.f64[1];
  v154 = v19;
  v162 = v19;
  v19.f64[1] = v148.f64[1];
  v150 = v19;
  v151 = v11;
  v152 = v13;
  v153 = v11;
  v155 = v11;
  v156 = v148;
  v157 = v10;
  v158 = v19;
  v159 = v10;
  v160 = v13;
  v161 = v10;
  v163 = v10;
  do
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v21 = (float64x2_t *)((char *)&v148 + v6);
    _Q1 = *(int8x16_t *)(result + 24);
    v23 = *(float64x2_t *)(result + 40);
    v24 = *(float64x2_t *)((char *)&v148 + v6);
    v25 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v23.f64[0], 0);
    v26 = (float64x2_t)vextq_s8(_Q1, _Q1, 8uLL);
    v25.f64[0] = *(float64_t *)((char *)&v148 + v6 + 16);
    v27.f64[0] = v26.f64[0];
    v27.f64[1] = v148.f64[v6 / 8 + 1];
    v28 = vmulq_f64(v25, v27);
    v27.f64[1] = v26.f64[1];
    v27.f64[0] = *(float64_t *)(result + 40);
    v29 = (int8x16_t)vmulq_f64(v24, v27);
    v30 = vaddq_f64(*(float64x2_t *)result, v24);
    v28.f64[0] = vsubq_f64(v28, (float64x2_t)vdupq_laneq_s64((int64x2_t)v28, 1)).f64[0];
    v24.f64[1] = *(float64_t *)((char *)&v148 + v6 + 16);
    v31 = vmlsq_f64((float64x2_t)vextq_s8(v29, v29, 8uLL), v26, v24);
    _D0 = v28.f64[0] + v28.f64[0];
    v33 = vaddq_f64(v31, v31);
    v34 = vmulq_f64(v33, v26);
    v26.f64[1] = *(float64_t *)(result + 48);
    v35 = (int8x16_t)vmulq_n_f64(v23, _D0);
    __asm { FMLS            D7, D0, V1.D[1] }
    *v21 = vmlsq_f64(vmlaq_f64(vaddq_f64(v30, (float64x2_t)vextq_s8(v35, v35, 8uLL)), v26, v33), v27, (float64x2_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL));
    v21[1].f64[0] = _D7 + v34.f64[1] + vmulq_laneq_f64(v33, v23, 1).f64[0];
    v6 += 24;
  }
  while (v6 != 192);
  v37 = v157;
  v38 = v158.f64[0];
  v40 = v161;
  v39 = v162.f64[0];
  v41 = v158.f64[1];
  v42 = v159;
  v44 = v162.f64[1];
  v43 = v163;
  v45 = 1.0
      / sqrt((v158.f64[0] - v162.f64[0]) * (v158.f64[0] - v162.f64[0])+ (v158.f64[1] - v162.f64[1]) * (v158.f64[1] - v162.f64[1])+ (v159 - v163) * (v159 - v163));
  v46 = v45 * (v158.f64[0] - v162.f64[0]);
  v47 = v45 * (v158.f64[1] - v162.f64[1]);
  v48 = v45 * (v159 - v163);
  v49 = v149;
  v51 = v150;
  v50 = v151;
  v52 = 1.0
      / sqrt((v150.f64[0] - v162.f64[0]) * (v150.f64[0] - v162.f64[0])+ (v150.f64[1] - v162.f64[1]) * (v150.f64[1] - v162.f64[1])+ (v151 - v163) * (v151 - v163));
  v53 = v52 * (v150.f64[0] - v162.f64[0]);
  v54 = v52 * (v150.f64[1] - v162.f64[1]);
  v55 = v52 * (v151 - v163);
  v56 = -(v54 * v48 - v55 * v47);
  v57 = -(v55 * v46 - v53 * v48);
  v58 = -(v53 * v47 - v54 * v46);
  v59 = 1.0 / sqrt(v56 * v56 + v57 * v57 + v58 * v58);
  v60 = v59 * v56;
  v61 = v59 * v57;
  v62 = v59 * v58;
  v63 = -(v59 * v56 * v162.f64[0] + v61 * v162.f64[1] + v62 * v163);
  *a2 = v60;
  a2[1] = v61;
  a2[2] = v62;
  a2[3] = v63;
  v64 = v156;
  v65 = 1.0
      / sqrt((v156.f64[0] - v38) * (v156.f64[0] - v38)+ (v156.f64[1] - v41) * (v156.f64[1] - v41)+ (v37 - v42) * (v37 - v42));
  v66 = v65 * (v156.f64[0] - v38);
  v67 = v65 * (v156.f64[1] - v41);
  v68 = v65 * (v37 - v42);
  v69 = v148;
  v70 = 1.0
      / sqrt((v148.f64[0] - v38) * (v148.f64[0] - v38)+ (v148.f64[1] - v41) * (v148.f64[1] - v41)+ (v49 - v42) * (v49 - v42));
  v71 = v70 * (v148.f64[0] - v38);
  v72 = v70 * (v148.f64[1] - v41);
  v73 = v70 * (v49 - v42);
  v74 = -(v72 * v68 - v73 * v67);
  v75 = -(v73 * v66 - v71 * v68);
  v76 = -(v71 * v67 - v72 * v66);
  v77 = 1.0 / sqrt(v74 * v74 + v75 * v75 + v76 * v76);
  v78 = v77 * v75;
  v79 = v77 * v76;
  a2[4] = v77 * v74;
  a2[5] = v78;
  a2[6] = v79;
  a2[7] = -(v77 * v74 * v38 + v78 * v41 + v79 * v42);
  v81 = v160.f64[1];
  v80 = v160.f64[0];
  v82 = 1.0
      / sqrt((v160.f64[0] - v64.f64[0]) * (v160.f64[0] - v64.f64[0])+ (v160.f64[1] - v64.f64[1]) * (v160.f64[1] - v64.f64[1])+ (v40 - v37) * (v40 - v37));
  v83 = v82 * (v160.f64[0] - v64.f64[0]);
  v84 = v82 * (v160.f64[1] - v64.f64[1]);
  v85 = v82 * (v40 - v37);
  v86 = v154.f64[0];
  v87 = 1.0
      / sqrt((v152.f64[0] - v64.f64[0]) * (v152.f64[0] - v64.f64[0])+ (v152.f64[1] - v64.f64[1]) * (v152.f64[1] - v64.f64[1])+ (v153 - v37) * (v153 - v37));
  v88 = v87 * (v152.f64[0] - v64.f64[0]);
  v89 = v87 * (v152.f64[1] - v64.f64[1]);
  v90 = v87 * (v153 - v37);
  v91 = -(v89 * v85 - v90 * v84);
  v92 = -(v90 * v83 - v88 * v85);
  v93 = -(v88 * v84 - v89 * v83);
  v94 = 1.0 / sqrt(v91 * v91 + v92 * v92 + v93 * v93);
  v95 = v94 * v92;
  v96 = v94 * v93;
  a2[8] = v94 * v91;
  a2[9] = v95;
  a2[10] = v96;
  a2[11] = -(v94 * v91 * v64.f64[0] + v95 * v64.f64[1] + v96 * v37);
  v97 = 1.0 / sqrt((v39 - v80) * (v39 - v80) + (v44 - v81) * (v44 - v81) + (v43 - v40) * (v43 - v40));
  v98 = v97 * (v39 - v80);
  v99 = v97 * (v44 - v81);
  v100 = v97 * (v43 - v40);
  v101 = v154.f64[1];
  v102 = v155;
  v103 = 1.0 / sqrt((v86 - v80) * (v86 - v80) + (v154.f64[1] - v81) * (v154.f64[1] - v81) + (v155 - v40) * (v155 - v40));
  v104 = v103 * (v86 - v80);
  v105 = v103 * (v154.f64[1] - v81);
  v106 = v103 * (v155 - v40);
  v107 = -(v105 * v100 - v106 * v99);
  v108 = -(v106 * v98 - v104 * v100);
  v109 = -(v104 * v99 - v105 * v98);
  v110 = 1.0 / sqrt(v107 * v107 + v108 * v108 + v109 * v109);
  v111 = v110 * v108;
  v112 = v110 * v109;
  a2[12] = v110 * v107;
  a2[13] = v111;
  a2[14] = v112;
  a2[15] = -(v110 * v107 * v80 + v111 * v81 + v112 * v40);
  v113 = v50 - v102;
  v114 = 1.0 / sqrt((v51.f64[0] - v86) * (v51.f64[0] - v86) + (v51.f64[1] - v101) * (v51.f64[1] - v101) + v113 * v113);
  v115 = v114 * (v51.f64[0] - v86);
  v116 = v114 * (v51.f64[1] - v101);
  v117 = v114 * v113;
  v118 = v49 - v102;
  v119 = 1.0 / sqrt((v69.f64[0] - v86) * (v69.f64[0] - v86) + (v69.f64[1] - v101) * (v69.f64[1] - v101) + v118 * v118);
  v120 = v119 * (v69.f64[0] - v86);
  v121 = v119 * (v69.f64[1] - v101);
  v122 = v119 * v118;
  v123 = -(v121 * v117 - v122 * v116);
  v124 = -(v122 * v115 - v120 * v117);
  v125 = -(v120 * v116 - v121 * v115);
  v126 = 1.0 / sqrt(v123 * v123 + v124 * v124 + v125 * v125);
  v127 = v126 * v124;
  v128 = v126 * v125;
  a2[16] = v126 * v123;
  a2[17] = v127;
  a2[18] = v128;
  a2[19] = -(v126 * v123 * v86 + v127 * v101 + v128 * v102);
  v129 = v80 - v39;
  v130 = v40 - v43;
  v131 = 1.0 / sqrt(v129 * v129 + (v81 - v44) * (v81 - v44) + v130 * v130);
  v132 = v131 * v129;
  v133 = v131 * (v81 - v44);
  v134 = v131 * v130;
  v135 = v37 - v43;
  v136 = 1.0 / sqrt((v64.f64[0] - v39) * (v64.f64[0] - v39) + (v64.f64[1] - v44) * (v64.f64[1] - v44) + v135 * v135);
  v137 = v136 * (v64.f64[0] - v39);
  v138 = v136 * (v64.f64[1] - v44);
  v139 = v136 * v135;
  v140 = -(v134 * v138 - v133 * v139);
  v141 = -(v132 * v139 - v134 * v137);
  v142 = -(v133 * v137 - v132 * v138);
  v143 = 1.0 / sqrt(v140 * v140 + v141 * v141 + v142 * v142);
  v144 = v143 * v140;
  v145 = v143 * v141;
  v146 = v143 * v142;
  a2[20] = v144;
  a2[21] = v145;
  a2[22] = v146;
  a2[23] = -(v144 * v39 + v145 * v44 + v146 * v43);
  return result;
}

uint64_t *std::set<altitude::TileKey>::insert[abi:nn180100]<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  _QWORD v32[9];

  if (a2 != a3)
  {
    v32[7] = v3;
    v32[8] = v4;
    v6 = a2;
    v7 = (uint64_t)result;
    v8 = result + 1;
    do
    {
      v9 = *(_QWORD *)(v7 + 8);
      v10 = v8;
      if (*(_QWORD **)v7 == v8)
        goto LABEL_25;
      v11 = *(_QWORD **)(v7 + 8);
      v12 = v8;
      if (v9)
      {
        do
        {
          v10 = v11;
          v11 = (_QWORD *)v11[1];
        }
        while (v11);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v12[2];
          v13 = *v10 == (_QWORD)v12;
          v12 = v10;
        }
        while (v13);
      }
      v14 = (unsigned int *)v6 + 7;
      v15 = *((_DWORD *)v10 + 11);
      v16 = *((_DWORD *)v6 + 11);
      if (v15 == v16
        && *((_DWORD *)v10 + 12) == *((_DWORD *)v6 + 12)
        && *((_DWORD *)v10 + 13) == *((_DWORD *)v6 + 13)
        && *((_DWORD *)v6 + 14) == *((_DWORD *)v10 + 14))
      {
        v17 = *((_DWORD *)v10 + 7);
        v18 = v17 >= *v14;
        if (v17 == *v14)
        {
          v19 = *((_DWORD *)v10 + 8);
          v20 = *((_DWORD *)v6 + 8);
          v18 = v19 >= v20;
          if (v19 == v20)
          {
            if (*((_DWORD *)v10 + 9) >= *((_DWORD *)v6 + 9))
              goto LABEL_32;
            goto LABEL_25;
          }
        }
      }
      else
      {
        if (v15 < v16)
          goto LABEL_25;
        if (v15 > v16)
          goto LABEL_32;
        v21 = *((_DWORD *)v10 + 12);
        v22 = *((_DWORD *)v6 + 12);
        if (v21 < v22)
          goto LABEL_25;
        if (v21 > v22)
          goto LABEL_32;
        v23 = *((_DWORD *)v10 + 13);
        v24 = *((_DWORD *)v6 + 13);
        if (v23 < v24)
          goto LABEL_25;
        if (v23 > v24)
          goto LABEL_32;
        v18 = *((_DWORD *)v10 + 14) >= *((_DWORD *)v6 + 14);
      }
      if (v18)
      {
LABEL_32:
        result = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>(v7, v32, v14);
        v25 = result;
        if (*result)
        {
LABEL_27:
          v26 = (_QWORD *)v6[1];
          if (!v26)
            goto LABEL_38;
          goto LABEL_36;
        }
        goto LABEL_30;
      }
LABEL_25:
      if (v9)
      {
        v32[0] = v10;
        v25 = v10 + 1;
        if (v10[1])
          goto LABEL_27;
      }
      else
      {
        v32[0] = v8;
        v25 = v8;
        if (*v8)
          goto LABEL_27;
      }
LABEL_30:
      v27 = (char *)operator new(0x40uLL);
      *(_OWORD *)(v27 + 28) = *(_OWORD *)((char *)v6 + 28);
      *(_OWORD *)(v27 + 44) = *(_OWORD *)((char *)v6 + 44);
      v28 = v32[0];
      *(_QWORD *)v27 = 0;
      *((_QWORD *)v27 + 1) = 0;
      *((_QWORD *)v27 + 2) = v28;
      *v25 = (uint64_t)v27;
      v29 = **(_QWORD **)v7;
      if (v29)
      {
        *(_QWORD *)v7 = v29;
        v30 = (uint64_t *)*v25;
      }
      else
      {
        v30 = (uint64_t *)v27;
      }
      result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 8), v30);
      ++*(_QWORD *)(v7 + 16);
      v26 = (_QWORD *)v6[1];
      if (!v26)
      {
        do
        {
LABEL_38:
          v31 = (_QWORD *)v6[2];
          v13 = *v31 == (_QWORD)v6;
          v6 = v31;
        }
        while (!v13);
        goto LABEL_3;
      }
      do
      {
LABEL_36:
        v31 = v26;
        v26 = (_QWORD *)*v26;
      }
      while (v26);
LABEL_3:
      v6 = v31;
    }
    while (v31 != a3);
  }
  return result;
}

uint64_t *std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = a3[4];
    v7 = a3[5];
    v8 = a3[6];
    v9 = a3[7];
    v10 = *a3;
    v11 = a3[1];
    v12 = a3[2];
    while (1)
    {
      v13 = v4;
      v14 = *((_DWORD *)v4 + 11);
      if (v6 == v14 && v7 == *((_DWORD *)v13 + 12) && v8 == *((_DWORD *)v13 + 13) && *((_DWORD *)v13 + 14) == v9)
      {
        v15 = *((_DWORD *)v13 + 7);
        v16 = v10 >= v15;
        if (v10 == v15 && (v17 = *((_DWORD *)v13 + 8), v16 = v11 >= v17, v11 == v17))
        {
          if (v12 >= *((_DWORD *)v13 + 9))
            goto LABEL_25;
        }
        else if (v16)
        {
          goto LABEL_25;
        }
LABEL_3:
        v4 = (uint64_t *)*v13;
        result = v13;
        if (!*v13)
          goto LABEL_40;
      }
      else
      {
        if (v6 < v14)
          goto LABEL_3;
        if (v6 <= v14)
        {
          v18 = *((_DWORD *)v13 + 12);
          if (v7 < v18)
            goto LABEL_3;
          if (v7 <= v18)
          {
            v19 = *((_DWORD *)v13 + 13);
            if (v8 < v19 || v8 <= v19 && v9 < *((_DWORD *)v13 + 14))
              goto LABEL_3;
          }
        }
        if (v6 != v14 || *((_DWORD *)v13 + 12) != v7 || *((_DWORD *)v13 + 13) != v8)
        {
LABEL_32:
          if (v14 >= v6)
          {
            if (v14 > v6)
              goto LABEL_40;
            v23 = *((_DWORD *)v13 + 12);
            if (v23 >= v7)
            {
              if (v23 > v7)
                goto LABEL_40;
              v24 = *((_DWORD *)v13 + 13);
              if (v24 >= v8 && (v24 > v8 || *((_DWORD *)v13 + 14) >= v9))
                goto LABEL_40;
            }
          }
          goto LABEL_39;
        }
LABEL_25:
        if (v9 != *((_DWORD *)v13 + 14))
          goto LABEL_32;
        v20 = *((_DWORD *)v13 + 7);
        v21 = v20 >= v10;
        if (v20 == v10)
        {
          v22 = *((_DWORD *)v13 + 8);
          v21 = v22 >= v11;
          if (v22 == v11)
            v21 = *((_DWORD *)v13 + 9) >= v12;
        }
        if (v21)
        {
LABEL_40:
          *a2 = v13;
          return result;
        }
LABEL_39:
        result = v13 + 1;
        v4 = (uint64_t *)v13[1];
        if (!v4)
          goto LABEL_40;
      }
    }
  }
  *a2 = result;
  return result;
}

char *altitude::Tile::getOrCreateTileView(altitude::Tile *this, const altitude::View *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const altitude::View **v6;
  char *v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  char *v14;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  unint64_t v22;
  char *v23;
  void (**v24)(altitude::TileView *__hidden);
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v3 = *((_QWORD *)this + 20);
  if (!v3)
    goto LABEL_10;
  if (v3 < 3)
  {
    if (*((const altitude::View **)this + 23) == a2)
    {
      v16 = 0;
    }
    else
    {
      if (v3 == 1 || *((const altitude::View **)this + 29) != a2)
      {
LABEL_10:
        v24 = &off_1E42C6A78;
        *(_QWORD *)&v25 = this;
        *((_QWORD *)&v25 + 1) = a2;
        *(_QWORD *)&v26 = 1065353216;
        BYTE8(v26) = 1;
        HIDWORD(v26) = 0;
        LOBYTE(v27) = 0;
        HIDWORD(v27) = 0;
        if (v3 > 1)
        {
          if (v3 == 2)
          {
            v10 = *((_QWORD *)this + 34);
            if (v10 >= *((_QWORD *)this + 35))
            {
              v13 = std::vector<altitude::TileView>::__push_back_slow_path<altitude::TileView const&>((void **)this + 33, (uint64_t)this + 168);
            }
            else
            {
              *(_QWORD *)v10 = &off_1E42C6A78;
              v11 = *((_OWORD *)this + 11);
              v12 = *((_OWORD *)this + 12);
              *(_QWORD *)(v10 + 40) = *((_QWORD *)this + 26);
              *(_OWORD *)(v10 + 24) = v12;
              *(_OWORD *)(v10 + 8) = v11;
              v13 = (char *)(v10 + 48);
            }
            *((_QWORD *)this + 34) = v13;
            if ((unint64_t)v13 >= *((_QWORD *)this + 35))
            {
              v14 = std::vector<altitude::TileView>::__push_back_slow_path<altitude::TileView const&>((void **)this + 33, (uint64_t)this + 216);
            }
            else
            {
              *(_QWORD *)v13 = &off_1E42C6A78;
              v17 = *((_OWORD *)this + 14);
              v18 = *((_OWORD *)this + 15);
              *((_QWORD *)v13 + 5) = *((_QWORD *)this + 32);
              *(_OWORD *)(v13 + 24) = v18;
              *(_OWORD *)(v13 + 8) = v17;
              v14 = v13 + 48;
            }
            *((_QWORD *)this + 34) = v14;
          }
          else
          {
            v14 = (char *)*((_QWORD *)this + 34);
          }
          if ((unint64_t)v14 >= *((_QWORD *)this + 35))
          {
            v21 = std::vector<altitude::TileView>::__push_back_slow_path<altitude::TileView const&>((void **)this + 33, (uint64_t)&v24);
          }
          else
          {
            *(_QWORD *)v14 = &off_1E42C6A78;
            v19 = v25;
            v20 = v26;
            *((_QWORD *)v14 + 5) = v27;
            *(_OWORD *)(v14 + 24) = v20;
            *(_OWORD *)(v14 + 8) = v19;
            v21 = v14 + 48;
          }
          *((_QWORD *)this + 34) = v21;
          v9 = *((_QWORD *)this + 20) + 1;
          *((_QWORD *)this + 20) = v9;
        }
        else
        {
          *((_QWORD *)this + 20) = v3 + 1;
          v7 = (char *)this + 48 * v3 + 160;
          *((_QWORD *)v7 + 6) = v27;
          v8 = v26;
          *((_OWORD *)v7 + 1) = v25;
          *((_OWORD *)v7 + 2) = v8;
          v9 = *((_QWORD *)this + 20);
        }
        v22 = v9 - 1;
        if (v9 >= 3)
          return (char *)(*((_QWORD *)this + 33) + 48 * v22);
        v23 = (char *)this + 48 * v22;
        return v23 + 168;
      }
      v16 = 1;
    }
    v23 = (char *)this + 48 * v16;
    return v23 + 168;
  }
  v4 = 0;
  v5 = *((_QWORD *)this + 33);
  v6 = (const altitude::View **)(v5 + 16);
  while (*v6 != a2)
  {
    ++v4;
    v6 += 6;
    if (v3 == v4)
      goto LABEL_10;
  }
  return (char *)(v5 + 48 * v4);
}

char *altitude::Tile::computeTileResolution(char *result, uint64_t a2, _DWORD *a3, int a4, float *a5, unsigned int a6, float a7)
{
  altitude::Tile *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  float v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  long double v30;
  long double v31;
  double v32;
  double v33;
  double v34;
  float64x2_t v35;
  uint64_t v36;
  float v37;
  double v38;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  __int128 v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  float64x2_t v86;
  float64x2_t v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  BOOL v100;
  float64x2_t v101;
  BOOL v102;
  NSObject *v103;
  unsigned int v104;
  double v105;
  double v106;
  double v107;
  double v108;
  float64x2_t v109;
  uint64_t v110;
  float v111;
  double v112;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  float64x2_t v130;
  float64x2_t v132;
  double v133;
  float64_t v134;
  float64_t v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  float64x2_t v143;
  double v145;
  float64x2_t v146;
  uint64_t v147;
  float v148;
  double v149;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  float64_t v164;
  float64_t v165;
  float64_t v166;
  float64_t v167;
  double v168;
  double v169;
  float64_t v170;
  float64_t v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  unsigned int v236;
  double v237;
  float64x2_t v238;
  uint64_t v239;
  float v240;
  double v241;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  double v254;
  double v255;
  float64_t v256;
  float64_t v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  double v263;
  double v264;
  double v265;
  double v266;
  double v267;
  double v268;
  double v269;
  double v270;
  double v271;
  double v272;
  double v273;
  double v274;
  double v275;
  double v276;
  double v277;
  double v278;
  double v279;
  double v280;
  double v281;
  double v282;
  double v283;
  double v284;
  double v285;
  double v286;
  double v287;
  double v288;
  double v289;
  double v290;
  double v291;
  double v292;
  double v293;
  double v294;
  double v295;
  double v296;
  double v297;
  double v298;
  double v299;
  double v300;
  double v301;
  double v302;
  double v303;
  double v304;
  double v305;
  double v306;
  double v307;
  double v308;
  double v309;
  double v310;
  double v311;
  double v312;
  double v313;
  double v314;
  double v315;
  double v316;
  double v317;
  double v318;
  double v319;
  double v320;
  double v321;
  double v322;
  double v323;
  double v324;
  double v325;
  double v326;
  double v327;
  double v328;
  double v329;
  double v330;
  double v331;
  double v332;
  double v333;
  float v334;
  double v335;
  float v336;
  double v337;
  double v338;
  double v339;
  double v340;
  double v341;
  double v342;
  double v343;
  double v344;
  double v345;
  double v346;
  double v347;
  double v348;
  double v349;
  double v350;
  double v351;
  double v352;
  double v353;
  double v354;
  double v355;
  double v356;
  double v357;
  double v358;
  double v359;
  double v360;
  double v361;
  double v362;
  double v363;
  double v364;
  double v365;
  double v366;
  double v367;
  double v368;
  double v369;
  double v370;
  double v371;
  double v372;
  double v373;
  double v374;
  double v375;
  double v376;
  double v377;
  double v378;
  double v379;
  double v380;
  double v381;
  float v383;
  double v384;
  double v385;
  double v386;
  double v387;
  double v388;
  double v389;
  double v390;
  double v391;
  double v392;
  double v393;
  double v394;
  double v395;
  double v396;
  double v397;
  double v398;
  double v399;
  double v400;
  double v401;
  double v402;
  double v403;
  double v404;
  double v405;
  double v406;
  double v407;
  double v408;
  double v409;
  double v410;
  double v411;
  double v412;
  double v413;
  double v414;
  double v415;
  double v416;
  double v417;
  double v418;
  double v419;
  double v420;
  double v421;
  double v422;
  double v423;
  double v424;
  double v425;
  double v426;
  double v427;
  double v428;
  double v429;
  double v430;
  double v431;
  double v432;
  float64x2_t v438;
  float64x2_t v439;
  double v442;
  double v443;
  double *v444;
  double v445;
  unsigned int v446;
  double v447;
  double v448;
  double v449;
  double v450;
  double v451;
  double v452;
  double v453;
  double v454;
  double v455;
  float64x2_t v456;
  float64x2_t v457;
  float64_t v458;
  float64_t v459;
  double v460;
  double v461;
  double v462;
  float v463;
  float v464;
  double v465;
  double v466;
  double v467;
  double v468;
  double v469;
  double v470;
  double v471;
  double v472;
  double v473;
  double v474;
  __int128 v475;
  double v476;
  double v477;
  double v478;
  double v479;
  double v480;
  double v481;
  double v482;
  float64x2_t v483;
  double v484;
  double v485;
  double v486;
  double v487;
  double v488;
  double v489;
  double v490;
  double v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  double v495;
  float64x2_t v496;
  double v497;
  double v498;
  float v500;
  float v501;
  double v502;
  double v503;
  double v504;
  float64x2_t v505;
  double v506;
  __int128 v507;
  double v508;
  double v509;
  double v510[5];
  uint64_t v511;
  double v512[36];
  double v513;
  double v514;
  float64x2_t v515;
  double v516;
  __int128 v517;
  double v518;
  double v519;
  float64x2_t v520;
  double v521;
  __int128 v522;
  double v523;
  double v524;
  uint64_t v525;
  double v526;
  double v527;
  double v528;
  uint64_t v529;
  double v530;
  double v531;
  double v532;
  uint64_t v533;
  double v534;
  double v535;
  double v536;
  double v537;
  double v538;
  double v539;
  double v540;
  double v541;
  __int128 v542;
  __int128 v543;
  double v544;
  __int128 v545;
  __int128 v546;
  double v547;
  double v548;
  double v549;
  double v550;
  double v551;
  double v552;
  uint8_t buf[8];
  float64x2_t v554;
  __int128 v555;
  _BYTE v556[24];
  _BYTE v557[24];
  double v558;
  double v559;
  float64x2_t v560;
  double v561;
  float64x2_t v562;
  double v563;
  __int128 v564;
  double v565;
  double v566;
  _BYTE v567[24];
  _BYTE v568[24];
  uint64_t v569;

  v11 = (altitude::Tile *)result;
  v569 = *MEMORY[0x1E0C80C00];
  v12 = *((_QWORD *)result + 20);
  if (!v12)
    goto LABEL_15;
  if (v12 < 3)
  {
    if (*((_QWORD *)result + 23) == a2)
    {
      v16 = 0;
    }
    else
    {
      if (v12 == 1 || *((_QWORD *)result + 29) != a2)
        goto LABEL_15;
      v16 = 1;
    }
    v17 = (uint64_t)&result[48 * v16 + 168];
  }
  else
  {
    v13 = 0;
    v14 = *((_QWORD *)result + 33);
    v15 = (_QWORD *)(v14 + 16);
    while (*v15 != a2)
    {
      ++v13;
      v15 += 6;
      if (v12 == v13)
        goto LABEL_15;
    }
    v17 = v14 + 48 * v13;
  }
  if (*(_DWORD *)(v17 + 28) >= a6)
  {
    *a5 = *(float *)(v17 + 24);
    return result;
  }
LABEL_15:
  v500 = *((float *)result + 104);
  v501 = *(float *)(a2 + 1304);
  v18 = *(float *)(a2 + 1308);
  v19 = a3[13] - a3[11];
  v20 = a3[12] - a3[10];
  v21 = (*(uint64_t (**)(char *))(*(_QWORD *)result + 24))(result);
  v515 = *(float64x2_t *)v21;
  v22 = *(double *)(v21 + 16);
  v517 = *(_OWORD *)(v21 + 24);
  v23 = *(double *)(v21 + 40);
  v516 = v22;
  v518 = v23;
  v24 = *(double *)(v21 + 48);
  v519 = v24;
  v25 = (*(uint64_t (**)(altitude::Tile *))(*(_QWORD *)v11 + 56))(v11);
  *(_OWORD *)v568 = *(_OWORD *)v25;
  *(_QWORD *)&v568[16] = *(_QWORD *)(v25 + 16);
  *(_OWORD *)v567 = *(_OWORD *)(v25 + 24);
  *(_QWORD *)&v567[16] = *(_QWORD *)(v25 + 40);
  LODWORD(v520.f64[0]) = (unsigned __int16)v20 | ((unsigned __int16)v19 << 16);
  v26 = *(double *)(a2 + 1000);
  v27 = *(double *)(a2 + 952);
  v28 = *(double *)(a2 + 944);
  v29 = *(double *)(a2 + 1008);
  v30 = tan(v26 * 0.5);
  v31 = (v27 + v27) * v30 * (double)(unsigned __int16)v20 / (double)(unsigned __int16)v19;
  v554 = 0u;
  v555 = 0u;
  *(double *)buf = (v27 + v27) / v31;
  *(double *)v556 = 1.0 / v30;
  v32 = -(v28 - v29 * v27);
  *(_OWORD *)&v556[8] = 0u;
  *(_OWORD *)v557 = 0u;
  *(double *)&v557[16] = v32 / (v28 - v27);
  v33 = -(v28 * v27 - v29 * (v28 * v27));
  v560.f64[0] = 0.0;
  v558 = -1.0;
  v559 = 0.0;
  v560.f64[1] = v33 / (v28 - v27);
  v561 = 0.0;
  v542 = 0u;
  v543 = 0u;
  v541 = v31 / (v27 + v27);
  v544 = v30;
  v545 = 0u;
  v546 = 0u;
  v547 = 0.0;
  v548 = (v28 - v27) / v33;
  v550 = 0.0;
  v549 = 0.0;
  v551 = -1.0;
  v552 = v32 / v33;
  geo::View<double>::View((uint64_t)&v505, (__int128 *)(a2 + 48), (double *)buf, (__int128 *)&v541, &v520, 0, v29);
  v512[35] = v26;
  v513 = v27;
  v514 = v28;
  switch(a4)
  {
    case 0:
      v34 = v516;
      v492 = v515;
      v35 = vsubq_f64(v515, v505);
      *(double *)&v36 = sqrt(vaddvq_f64(vmulq_f64(v35, v35)) + (v516 - v506) * (v516 - v506));
      v37 = *(double *)&v36;
      v38 = *(double *)&v36 - (float)((float)(v37 / v18) + v501);
      v562 = vaddq_f64(vdivq_f64(vmulq_n_f64(v35, v38), (float64x2_t)vdupq_lane_s64(v36, 0)), v505);
      v563 = v38 * (v516 - v506) / *(double *)&v36 + v506;
      v564 = v507;
      v565 = v508;
      v566 = v509;
      _D2 = v518;
      _D3 = v492.f64[1];
      __asm { FMLA            D4, D2, V7.D[1] }
      v45 = vmlad_n_f64(-(v492.f64[1] * *(double *)&v517), *((double *)&v517 + 1), v492.f64[0]);
      v46 = _D4 + _D4;
      v47 = -(v518 * v492.f64[0] - v34 * *(double *)&v517) - (v518 * v492.f64[0] - v34 * *(double *)&v517);
      v48 = v45 + v45;
      v49 = v537 * v24 + v538 * v518 - (v539 * *((double *)&v517 + 1) + v540 * *(double *)&v517);
      v50 = v538 * v24 + v539 * *(double *)&v517 - (v537 * v518 + v540 * *((double *)&v517 + 1));
      v51 = v537 * *((double *)&v517 + 1) + v539 * v24 - (v538 * *(double *)&v517 + v540 * v518);
      v52 = v537 * *(double *)&v517 + v538 * *((double *)&v517 + 1) + v539 * v518 + v540 * v24;
      v53 = -(v536 * *((double *)&v517 + 1) - v535 * v518) - (v536 * *((double *)&v517 + 1) - v535 * v518);
      v54 = -(v534 * v518 - v536 * *(double *)&v517) - (v534 * v518 - v536 * *(double *)&v517);
      v55 = -(v535 * *(double *)&v517 - v534 * *((double *)&v517 + 1))
          - (v535 * *(double *)&v517
           - v534 * *((double *)&v517 + 1));
      v56 = v534
          - (v492.f64[0]
           - v48 * *((double *)&v517 + 1))
          + v53 * v24
          + v54 * v518
          - (v46 * v24
           + v47 * v518
           + v55 * *((double *)&v517 + 1));
      v57 = v535
          - (v492.f64[1]
           - v46 * v518)
          + v54 * v24
          + v55 * *(double *)&v517
          - (v48 * *(double *)&v517
           + v47 * v24
           + v53 * v518);
      v58 = v536
          - (v34
           - v47 * *(double *)&v517)
          + v53 * *((double *)&v517 + 1)
          + v55 * v24
          - (v46 * *((double *)&v517 + 1)
           + v48 * v24
           + v54 * *(double *)&v517);
      v472 = *(double *)v567;
      v473 = *(double *)v568;
      v470 = *(double *)&v567[8];
      v471 = *(double *)&v568[8];
      v468 = *(double *)&v567[16];
      v469 = *(double *)&v568[16];
      v59 = -(v58 * v50 - v57 * v51) - (v58 * v50 - v57 * v51);
      v60 = -(v56 * v51 - v58 * v49) - (v56 * v51 - v58 * v49);
      v61 = -(v57 * v49 - v56 * v50) - (v57 * v49 - v56 * v50);
      v62 = -(v56 + v60 * v51 + v59 * v52 - v61 * v50);
      v63 = -(v57 + v60 * v52 + v61 * v49 - v59 * v51);
      v64 = v58 + v59 * v50 + v61 * v52;
      v65 = -(v50 * (v50 * -2.0));
      v66 = v51 * -2.0 * v52;
      v67 = v52 * (v50 * -2.0);
      v68 = v49 * -2.0 * v49 + 1.0;
      v69 = v49 * -2.0 * v52;
      v541 = 1.0 - (v65 - v51 * (v51 * -2.0));
      *(double *)&v542 = v66 - v50 * (v49 * -2.0);
      *((double *)&v543 + 1) = -(v50 * (v49 * -2.0)) - v66;
      v544 = v68 - -(v51 * (v51 * -2.0));
      *(double *)&v546 = v67 - v51 * (v49 * -2.0);
      *((double *)&v546 + 1) = -(v51 * (v50 * -2.0)) - v69;
      *((double *)&v542 + 1) = -(v51 * (v49 * -2.0)) - v67;
      v545 = COERCE_UNSIGNED_INT64(v69 - v51 * (v50 * -2.0));
      v547 = v68 - v65;
      *(_QWORD *)&v543 = 0;
      v548 = 0.0;
      v549 = v62;
      v550 = v63;
      v551 = -(v64 - v60 * v49);
      v552 = 1.0;
      gm::operator*<double,4,4,4>((double *)buf, v510, &v541);
      v465 = v554.f64[0];
      v502 = *((double *)&v555 + 1);
      v466 = *(double *)v556;
      v467 = *(double *)buf;
      v70 = (v50 + v50) * v50;
      v71 = (v51 + v51) * v51;
      v72 = (v49 + v49) * v50;
      v73 = (v51 + v51) * v52;
      v74 = v72 - v73;
      v75 = (v49 + v49) * v51;
      v76 = v52 * (v50 + v50);
      v77 = (v50 + v50) * v51;
      v78 = (v49 + v49) * v52;
      v526 = v75 + v76;
      v520.f64[0] = 1.0 - (v71 + v70);
      v520.f64[1] = v72 + v73;
      v79 = *(_OWORD *)v557;
      v80 = 1.0 - (v49 + v49) * v49;
      v488 = v559;
      v485 = v560.f64[0];
      v478 = v554.f64[1];
      v480 = *(double *)&v555;
      *((double *)&v522 + 1) = v74;
      v523 = v80 - v71;
      v475 = *(_OWORD *)&v556[8];
      v527 = v77 - v78;
      v521 = v75 - v76;
      v81 = *(double *)&v557[16];
      v82 = v558;
      v524 = v78 + v77;
      v528 = v80 - v70;
      v83 = v560.f64[1];
      v84 = v561;
      *(_QWORD *)&v522 = 0;
      v525 = 0;
      v529 = 0;
      v530 = v56;
      v531 = v57;
      v532 = v58;
      v533 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>(&v541, v520.f64, v512);
      if (*(double *)&v567[16] - *(double *)&v568[16] >= 0.0)
        v85 = (*(double *)&v567[16] - *(double *)&v568[16]) * 0.5;
      else
        v85 = 0.0;
      v86 = vsubq_f64(*(float64x2_t *)v567, *(float64x2_t *)v568);
      __asm { FMOV            V29.2D, #0.5 }
      v88 = vmaxnmq_f64((float64x2_t)vbicq_s8((int8x16_t)vmulq_f64(v86, _Q29), (int8x16_t)vcltzq_f64(v86)), (float64x2_t)0);
      v89 = fmax(v85, 0.0);
      v90 = 1.0 / sqrt(v515.f64[0] * v515.f64[0] + v515.f64[1] * v515.f64[1] + v516 * v516);
      v91 = v90 * v515.f64[0];
      v92 = v90 * v515.f64[1];
      v93 = v90 * v516;
      v94 = -(*((double *)&v517 + 1) * v93 - v518 * v92) - (*((double *)&v517 + 1) * v93 - v518 * v92);
      v95 = -(v518 * v91 - *(double *)&v517 * v93) - (v518 * v91 - *(double *)&v517 * v93);
      v96 = -(*(double *)&v517 * v92 - *((double *)&v517 + 1) * v91)
          - (*(double *)&v517 * v92
           - *((double *)&v517 + 1) * v91);
      v97 = v91 - v96 * *((double *)&v517 + 1) + v94 * v519 + v95 * v518;
      v98 = v92 + v96 * *(double *)&v517 + v95 * v519 - v94 * v518;
      v99 = v93 + v96 * v519 + v94 * *((double *)&v517 + 1) - v95 * *(double *)&v517;
      v100 = v97 <= v98 || v97 <= v99;
      if (v100)
      {
        v101 = vmulq_f64(v88, v88);
        v102 = v98 <= v97 || v98 <= v99;
        v336 = a7;
        if (v102)
          v335 = vaddvq_f64(v101);
        else
          v335 = v101.f64[0] + v89 * v89;
      }
      else
      {
        v88.f64[0] = v89;
        v335 = vaddvq_f64(vmulq_f64(v88, v88));
        v336 = a7;
      }
      v385 = v473;
      v386 = v471;
      v387 = v469;
      if (v58 >= 0.0)
        v387 = v468;
      if (v57 >= 0.0)
        v386 = v470;
      if (v56 >= 0.0)
        v385 = v472;
      v388 = 1.0 / (v84 + v480 * v385 + *((double *)&v475 + 1) * v386 + v82 * v387);
      v389 = v388 * (v83 + v478 * v385 + *(double *)&v475 * v386 + v81 * v387);
      v390 = v388 * (v485 + v465 * v385 + v466 * v386 + *((double *)&v79 + 1) * v387);
      v391 = 0.5 / (double)v20 + v388 * (v488 + v467 * v385 + v502 * v386 + *(double *)&v79 * v387);
      v392 = v551 + *((double *)&v542 + 1) * v391 + *(double *)&v545 * v390 + v547 * v389;
      v393 = 1.0 / (v552 + *(double *)&v543 * v391 + *((double *)&v545 + 1) * v390 + v548 * v389);
      v394 = v550 + *(double *)&v542 * v391 + v544 * v390 + *((double *)&v546 + 1) * v389;
      v395 = -(v385 - v393 * (v549 + v541 * v391 + *((double *)&v543 + 1) * v390 + *(double *)&v546 * v389));
      v360 = sqrt(v395 * v395+ -(v386 - v393 * v394) * -(v386 - v393 * v394)+ -(v387 - v393 * v392) * -(v387 - v393 * v392))* v500/ (v336* 0.355* sqrt(v335));
      goto LABEL_167;
    case 1:
      v104 = *((_DWORD *)v11 + 98);
      v105 = *(double *)(a2 + 1424);
      v106 = *(double *)(a2 + 1432);
      v107 = *(double *)(a2 + 1440);
      v108 = v516;
      v493 = v515;
      v109 = vsubq_f64(v515, v505);
      *(double *)&v110 = sqrt(vaddvq_f64(vmulq_f64(v109, v109)) + (v516 - v506) * (v516 - v506));
      v111 = *(double *)&v110;
      v112 = *(double *)&v110 - (float)((float)(v111 / v18) + v501);
      v562 = vaddq_f64(vdivq_f64(vmulq_n_f64(v109, v112), (float64x2_t)vdupq_lane_s64(v110, 0)), v505);
      v563 = v112 * (v516 - v506) / *(double *)&v110 + v506;
      v564 = v507;
      v565 = v508;
      v566 = v509;
      _D0 = v518;
      _D3 = v493.f64[1];
      __asm { FMLA            D4, D0, V27.D[1] }
      v116 = vmlad_n_f64(-(v493.f64[1] * *(double *)&v517), *((double *)&v517 + 1), v493.f64[0]);
      v117 = _D4 + _D4;
      v118 = -(v518 * v493.f64[0] - v108 * *(double *)&v517) - (v518 * v493.f64[0] - v108 * *(double *)&v517);
      v119 = v116 + v116;
      v120 = -(v536 * *((double *)&v517 + 1) - v535 * v518) - (v536 * *((double *)&v517 + 1) - v535 * v518);
      v121 = -(v534 * v518 - v536 * *(double *)&v517) - (v534 * v518 - v536 * *(double *)&v517);
      v122 = -(v535 * *(double *)&v517 - v534 * *((double *)&v517 + 1))
           - (v535 * *(double *)&v517
            - v534 * *((double *)&v517 + 1));
      v123 = v117 * v24 + v118 * v518 + v122 * *((double *)&v517 + 1);
      v124 = v534 - (v493.f64[0] - v119 * *((double *)&v517 + 1)) + v120 * v24 + v121 * v518;
      v125 = v119 * *(double *)&v517 + v118 * v24 + v120 * v518;
      v126 = v535 - (v493.f64[1] - v117 * v518) + v121 * v24 + v122 * *(double *)&v517;
      v127 = v117 * *((double *)&v517 + 1) + v119 * v24 + v121 * *(double *)&v517;
      v128 = v536 - (v108 - v118 * *(double *)&v517) + v120 * *((double *)&v517 + 1) + v122 * v24;
      if (*(double *)&v567[16] - *(double *)&v568[16] >= 0.0)
        v129 = (*(double *)&v567[16] - *(double *)&v568[16]) * 0.5;
      else
        v129 = 0.0;
      v130 = vsubq_f64(*(float64x2_t *)v567, *(float64x2_t *)v568);
      __asm { FMOV            V28.2D, #0.5 }
      v132 = vmaxnmq_f64((float64x2_t)vbicq_s8((int8x16_t)vmulq_f64(v130, _Q28), (int8x16_t)vcltzq_f64(v130)), (float64x2_t)0);
      v133 = fmax(v129, 0.0);
      _Q28.f64[0] = 1.0 / sqrt(v515.f64[0] * v515.f64[0] + v515.f64[1] * v515.f64[1] + v516 * v516);
      v134 = _Q28.f64[0] * v515.f64[0];
      v135 = _Q28.f64[0] * v515.f64[1];
      _Q28.f64[0] = _Q28.f64[0] * v516;
      v136 = -(*((double *)&v517 + 1) * _Q28.f64[0] - v518 * v135)
           - (*((double *)&v517 + 1) * _Q28.f64[0]
            - v518 * v135);
      v137 = -(v518 * v134 - *(double *)&v517 * _Q28.f64[0]) - (v518 * v134 - *(double *)&v517 * _Q28.f64[0]);
      v138 = -(*(double *)&v517 * v135 - *((double *)&v517 + 1) * v134)
           - (*(double *)&v517 * v135
            - *((double *)&v517 + 1) * v134);
      v139 = v134 - v138 * *((double *)&v517 + 1) + v136 * v519 + v137 * v518;
      v140 = v135 + v138 * *(double *)&v517 + v137 * v519 - v136 * v518;
      v141 = _Q28.f64[0] + v138 * v519 + v136 * *((double *)&v517 + 1) - v137 * *(double *)&v517;
      if (v139 <= v140 || v139 <= v141)
      {
        v143 = vmulq_f64(v132, v132);
        if (v140 <= v139 || v140 <= v141)
          v337 = vaddvq_f64(v143);
        else
          v337 = v143.f64[0] + v133 * v133;
      }
      else
      {
        v132.f64[0] = v133;
        v337 = vaddvq_f64(vmulq_f64(v132, v132));
      }
      v396 = v124 - v123;
      v397 = v126 - v125;
      v398 = v128 - v127;
      v399 = sqrt(v337);
      if (v20 < 0x190 || v19 <= 0x18F)
      {
        v444 = (double *)&v511;
        if (v20 < v19)
          v444 = v510;
        v445 = *v444;
        if (v20 >= v19)
          v446 = v19;
        else
          v446 = v20;
        if (v446 <= 0xC8)
          v446 = 200;
        v447 = vmlad_n_f64(*(double *)v568 - v396, 0.5, v130.f64[0]);
        v443 = fmax(v513, sqrt(v447 * v447+ (*(double *)&v568[8] - v397 + (*(double *)&v567[8] - *(double *)&v568[8]) * 0.5)* (*(double *)&v568[8] - v397 + (*(double *)&v567[8] - *(double *)&v568[8]) * 0.5)+ (*(double *)&v568[16] - v398 + (*(double *)&v567[16] - *(double *)&v568[16]) * 0.5)* (*(double *)&v568[16] - v398 + (*(double *)&v567[16] - *(double *)&v568[16]) * 0.5))- v399)* 0.35/ (v445* (double)v446);
      }
      else
      {
        v486 = v106;
        v487 = v105;
        v400 = v537 * v24 + v538 * v518 - (v539 * *((double *)&v517 + 1) + v540 * *(double *)&v517);
        v401 = v538 * v24 + v539 * *(double *)&v517 - (v537 * v518 + v540 * *((double *)&v517 + 1));
        v402 = v537 * *((double *)&v517 + 1) + v539 * v24 - (v538 * *(double *)&v517 + v540 * v518);
        v484 = v107;
        v403 = v537 * *(double *)&v517 + v538 * *((double *)&v517 + 1) + v539 * v518 + v540 * v24;
        if (v396 >= 0.0)
          v404 = *(double *)v567;
        else
          v404 = *(double *)v568;
        v504 = v404;
        if (v397 >= 0.0)
          v405 = *(double *)&v567[8];
        else
          v405 = *(double *)&v568[8];
        v491 = v405;
        if (v398 >= 0.0)
          v406 = *(double *)&v567[16];
        else
          v406 = *(double *)&v568[16];
        v498 = v406;
        v407 = -(v398 * v401 - v397 * v402) - (v398 * v401 - v397 * v402);
        v408 = -(v396 * v402 - v398 * v400) - (v396 * v402 - v398 * v400);
        v409 = -(v397 * v400 - v396 * v401) - (v397 * v400 - v396 * v401);
        v410 = -(v396 + v407 * v403 + v408 * v402 - v409 * v401);
        v411 = -(v397 + v408 * v403 + v409 * v400 - v407 * v402);
        v412 = v398 + v407 * v401 + v409 * v403;
        v413 = -(v401 * (v401 * -2.0));
        v414 = v402 * -2.0 * v403;
        v415 = v401 * -2.0 * v403;
        v416 = v400 * -2.0 * v400 + 1.0;
        v417 = v400 * -2.0 * v403;
        v541 = 1.0 - (v413 - v402 * (v402 * -2.0));
        *(double *)&v542 = v414 - v401 * (v400 * -2.0);
        *((double *)&v543 + 1) = -(v401 * (v400 * -2.0)) - v414;
        v544 = v416 - -(v402 * (v402 * -2.0));
        *(double *)&v546 = v415 - v402 * (v400 * -2.0);
        *((double *)&v546 + 1) = -(v402 * (v401 * -2.0)) - v417;
        *((double *)&v542 + 1) = -(v402 * (v400 * -2.0)) - v415;
        v545 = COERCE_UNSIGNED_INT64(v417 - v402 * (v401 * -2.0));
        v547 = v416 - v413;
        *(_QWORD *)&v543 = 0;
        v548 = 0.0;
        v549 = v410;
        v550 = v411;
        v551 = -(v412 - v408 * v400);
        v552 = 1.0;
        v418 = v399;
        gm::operator*<double,4,4,4>((double *)buf, v510, &v541);
        v419 = 1.0 / (v561 + *(double *)&v555 * v504 + *(double *)&v556[16] * v491 + v558 * v498);
        v420 = (v401 + v401) * v401;
        v421 = (v402 + v402) * v402;
        v422 = v400 + v400;
        v423 = (v400 + v400) * v401;
        v424 = (v402 + v402) * v403;
        v425 = v423 - v424;
        v426 = (v400 + v400) * v402;
        v427 = (v401 + v401) * v403;
        v428 = v424 + v423;
        v429 = 1.0 - (v400 + v400) * v400;
        v430 = (v401 + v401) * v402;
        v106 = v486;
        v105 = v487;
        v431 = v422 * v403;
        v107 = v484;
        v520.f64[0] = 1.0 - (v421 + v420);
        v520.f64[1] = v428;
        *((double *)&v522 + 1) = v425;
        v523 = v429 - v421;
        v526 = v427 + v426;
        v527 = v430 - v431;
        v521 = v426 - v427;
        v524 = v431 + v430;
        v528 = v429 - v420;
        *(_QWORD *)&v522 = 0;
        v525 = 0;
        v529 = 0;
        v530 = v396;
        v531 = v397;
        v532 = v398;
        v533 = 0x3FF0000000000000;
        v432 = 0.5 / (double)v20
             + v419 * (v559 + *(double *)buf * v504 + *((double *)&v555 + 1) * v491 + *(double *)v557 * v498);
        v483 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v560, v554, v504), *(float64x2_t *)v556, v491), *(float64x2_t *)&v557[8], v498), v419);
        gm::operator*<double,4,4,4>(&v541, v520.f64, v512);
        v399 = v418;
        _D3 = v548;
        _V7.D[1] = v483.f64[1];
        _KR10_16 = v546;
        __asm
        {
          FMLA            D0, D2, V7.D[1]
          FMLA            D1, D5, V7.D[1]
        }
        *(_QWORD *)&v438.f64[0] = v545;
        v438.f64[1] = v547;
        v439 = vmulq_f64(v438, v483);
        _V16.D[1] = v483.f64[1];
        __asm { FMLA            D4, D3, V16.D[1] }
        v442 = 1.0 / (_D4 + v552);
        v439.f64[0] = -(v498 - v442 * (v439.f64[0] + *((double *)&v542 + 1) * v432 + v439.f64[1] + v551));
        v443 = sqrt(-(v504 - v442 * _D0) * -(v504 - v442 * _D0)+ -(v491 - v442 * _D1) * -(v491 - v442 * _D1)+ v439.f64[0] * v439.f64[0]);
      }
      if (v104 >= 5)
      {
        v449 = sqrt(v105 * v105 + v106 * v106 + v107 * v107);
        v450 = *(double *)(a2 + 1416);
        v451 = *(double *)(a2 + 1408);
        v452 = *(double *)(a2 + 1400);
        v453 = -(v451 * v565 - v450 * *((double *)&v564 + 1)) - (v451 * v565 - v450 * *((double *)&v564 + 1));
        v454 = -(*(double *)&v564 * v450 - v452 * v565) - (*(double *)&v564 * v450 - v452 * v565);
        v455 = -(v452 * *((double *)&v564 + 1) - *(double *)&v564 * v451)
             - (v452 * *((double *)&v564 + 1)
              - *(double *)&v564 * v451);
        v456 = vsubq_f64(*(float64x2_t *)&v567[8], *(float64x2_t *)&v568[8]);
        v457 = vmulq_f64(v456, v456);
        v458 = v515.f64[0] + v454 * v565 - (v452 + v453 * v566 + v455 * *((double *)&v564 + 1));
        v459 = v515.f64[1] + v455 * *(double *)&v564 - (v451 + v453 * v565 + v454 * v566);
        v460 = v516 + v453 * *((double *)&v564 + 1) - (v450 + v454 * *(double *)&v564 + v455 * v566);
        v461 = fmin((sqrt(v458 * v458 + v459 * v459 + v460 * v460)+ (sqrt(v457.f64[0]+ (*(double *)v567 - *(double *)v568) * (*(double *)v567 - *(double *)v568)+ v457.f64[1])+ v449)* -0.5)/ (v449* -5.0)+ 1.0, 1.0);
        v462 = v461 * 0.71;
        v100 = v461 <= 0.1;
        v448 = 0.071;
        if (!v100)
          v448 = v462;
      }
      else
      {
        v448 = 0.71;
      }
      v360 = v443 * v500 / (a7 * 0.5 * v448 * v399);
      goto LABEL_167;
    case 2:
      v145 = v516;
      v494 = v515;
      v146 = vsubq_f64(v515, v505);
      *(double *)&v147 = sqrt(vaddvq_f64(vmulq_f64(v146, v146)) + (v516 - v506) * (v516 - v506));
      v148 = *(double *)&v147;
      v149 = *(double *)&v147 - (float)((float)(v148 / v18) + v501);
      v520 = vaddq_f64(vdivq_f64(vmulq_n_f64(v146, v149), (float64x2_t)vdupq_lane_s64(v147, 0)), v505);
      v521 = v149 * (v516 - v506) / *(double *)&v147 + v506;
      v522 = v507;
      v523 = v508;
      v524 = v509;
      _D4 = v518;
      _D5 = v494.f64[1];
      __asm { FMLA            D0, D4, V7.D[1] }
      v153 = vmlad_n_f64(-(v494.f64[1] * *(double *)&v517), *((double *)&v517 + 1), v494.f64[0]);
      v154 = _D0 + _D0;
      v155 = -(v518 * v494.f64[0] - v145 * *(double *)&v517) - (v518 * v494.f64[0] - v145 * *(double *)&v517);
      v156 = v153 + v153;
      v157 = (_D0 + _D0) * v24;
      v158 = (_D0 + _D0) * *((double *)&v517 + 1);
      v159 = *(double *)&v564 * v24
           + *((double *)&v564 + 1) * v518
           - (v565 * *((double *)&v517 + 1)
            + v566 * *(double *)&v517);
      v160 = *((double *)&v564 + 1) * v24
           + v565 * *(double *)&v517
           - (*(double *)&v564 * v518
            + v566 * *((double *)&v517 + 1));
      v161 = *(double *)&v564 * *((double *)&v517 + 1)
           + v565 * v24
           - (*((double *)&v564 + 1) * *(double *)&v517
            + v566 * v518);
      v162 = *(double *)&v564 * *(double *)&v517
           + *((double *)&v564 + 1) * *((double *)&v517 + 1)
           + v565 * v518
           + v566 * v24;
      v163 = -(v563 * *((double *)&v517 + 1) - v562.f64[1] * v518)
           - (v563 * *((double *)&v517 + 1)
            - v562.f64[1] * v518);
      v164 = -(v562.f64[0] * v518 - v563 * *(double *)&v517) - (v562.f64[0] * v518 - v563 * *(double *)&v517);
      v165 = -(v562.f64[1] * *(double *)&v517 - v562.f64[0] * *((double *)&v517 + 1))
           - (v562.f64[1] * *(double *)&v517
            - v562.f64[0] * *((double *)&v517 + 1));
      v166 = v562.f64[0]
           - (v494.f64[0]
            - v156 * *((double *)&v517 + 1))
           + v163 * v24
           + v164 * v518
           - (v157
            + v155 * v518
            + v165 * *((double *)&v517 + 1));
      v167 = v562.f64[1]
           - (v494.f64[1]
            - v154 * v518)
           + v164 * v24
           + v165 * *(double *)&v517
           - (v156 * *(double *)&v517
            + v155 * v24
            + v163 * v518);
      v168 = v563
           - (v145
            - v155 * *(double *)&v517)
           + v163 * *((double *)&v517 + 1)
           + v165 * v24
           - (v158
            + v156 * v24
            + v164 * *(double *)&v517);
      v169 = -(v168 * v160 - v167 * v161) - (v168 * v160 - v167 * v161);
      v170 = -(v166 * v161 - v168 * v159) - (v166 * v161 - v168 * v159);
      v171 = -(v167 * v159 - v166 * v160) - (v167 * v159 - v166 * v160);
      v172 = -(v166 + v170 * v161 + v169 * v162 - v171 * v160);
      v173 = -(v167 + v170 * v162 + v171 * v159 - v169 * v161);
      v174 = v168 + v169 * v160 + v171 * v162;
      v175 = v160 * -2.0;
      v176 = -(v160 * (v160 * -2.0));
      v177 = 1.0 - (v176 - v161 * (v161 * -2.0));
      v178 = -(v160 * (v159 * -2.0));
      v179 = v161 * -2.0 * v162;
      v180 = -(v161 * (v159 * -2.0));
      v181 = v162 * v175 - v161 * (v159 * -2.0);
      v182 = v159 * -2.0 * v159 + 1.0;
      v183 = v182 - -(v161 * (v161 * -2.0));
      v184 = -(v161 * v175);
      v185 = v159 * -2.0 * v162;
      v541 = v177;
      *(double *)&v542 = v178 + v179;
      *((double *)&v543 + 1) = v178 - v179;
      v544 = v183;
      *(double *)&v546 = v181;
      *((double *)&v546 + 1) = v184 - v185;
      *((double *)&v542 + 1) = v180 - v162 * v175;
      v545 = COERCE_UNSIGNED_INT64(v185 + v184);
      v547 = v182 - v176;
      *(_QWORD *)&v543 = 0;
      v548 = 0.0;
      v549 = v172;
      v550 = v173;
      v551 = -(v174 - v170 * v159);
      v552 = 1.0;
      gm::operator*<double,4,4,4>((double *)buf, v510, &v541);
      v186 = (double)v19 * 0.5;
      v187 = (double)v20 * 0.5;
      v188 = *(double *)&v556[16] * *(double *)&v567[8] + *(double *)&v555 * *(double *)v567;
      v189 = v558 * *(double *)&v567[16] + v561;
      if (v188 + v189 == 0.0)
        v190 = 0.0000001;
      else
        v190 = v188 + v189;
      v191 = *((double *)&v555 + 1) * *(double *)&v567[8];
      v192 = *((double *)&v555 + 1) * *(double *)&v567[8] + *(double *)buf * *(double *)v567;
      v193 = *(double *)v557 * *(double *)&v567[16] + v559;
      v194 = *(double *)v556 * *(double *)&v567[8];
      v195 = *(double *)v556 * *(double *)&v567[8] + v554.f64[0] * *(double *)v567;
      v196 = *(double *)&v557[8] * *(double *)&v567[16] + v560.f64[0];
      v489 = v186 * (v195 + v196) / v190;
      v197 = *(double *)buf * *(double *)v568;
      v198 = v554.f64[0] * *(double *)v568;
      v199 = *(double *)&v556[16] * *(double *)&v567[8] + *(double *)&v555 * *(double *)v568;
      v200 = v199 + v189;
      if (v199 + v189 == 0.0)
        v200 = 0.0000001;
      v201 = v191 + v197;
      v202 = v187 * (v191 + v197 + v193) / v200;
      v203 = v194 + v198;
      v495 = v186 * (v194 + v198 + v196) / v200;
      v204 = *(double *)&v556[16] * *(double *)&v568[8] + *(double *)&v555 * *(double *)v567;
      v205 = *(double *)&v556[16] * *(double *)&v568[8] + *(double *)&v555 * *(double *)v568;
      v206 = *((double *)&v555 + 1) * *(double *)&v568[8] + *(double *)buf * *(double *)v567;
      v207 = *((double *)&v555 + 1) * *(double *)&v568[8] + v197;
      v208 = *(double *)v556 * *(double *)&v568[8] + v554.f64[0] * *(double *)v567;
      v209 = v202;
      v210 = v187 * (v192 + v193) / v190;
      v211 = (double)v19 * 0.5;
      v212 = *(double *)v556 * *(double *)&v568[8] + v198;
      v213 = (double)v20 * 0.5;
      v214 = v558 * *(double *)&v568[16] + v561;
      v215 = *(double *)v557 * *(double *)&v568[16] + v559;
      v216 = v204 + v189;
      if (v204 + v189 == 0.0)
        v216 = 0.0000001;
      v217 = *(double *)&v557[8] * *(double *)&v568[16] + v560.f64[0];
      v218 = v187 * (v206 + v193) / v216;
      v219 = v188 + v214;
      v220 = v199 + v214;
      v221 = v204 + v214;
      v222 = v205 + v214;
      v223 = v211 * (v208 + v196) / v216;
      if (v205 + v189 == 0.0)
        v224 = 0.0000001;
      else
        v224 = v205 + v189;
      if (v219 == 0.0)
        v225 = 0.0000001;
      else
        v225 = v219;
      v226 = v213 * (v192 + v215);
      if (v220 == 0.0)
        v227 = 0.0000001;
      else
        v227 = v220;
      if (v221 == 0.0)
        v228 = 0.0000001;
      else
        v228 = v221;
      if (v222 == 0.0)
        v229 = 0.0000001;
      else
        v229 = v222;
      v230 = 0.0;
      if (v554.f64[1] < 0.0)
        v230 = fabs((v210 - v209) * (v223 - v489) + (v495 - v489) * (v218 - v210));
      v231 = v203 + v217;
      v232 = v207 + v215;
      v233 = v212 + v217;
      v234 = v226 / v225;
      v235 = v211 * (v195 + v217) / v225;
      if (*(double *)&v556[8] < 0.0)
        v230 = fabs((v210 - v234) * (v495 - v489) + (v235 - v489) * (v209 - v210)) + v230;
      v338 = v207 + v193;
      v339 = v212 + v196;
      v340 = v208 + v217;
      if (*(double *)&v557[16] < 0.0)
        v230 = fabs((v210 - v218) * (v235 - v489) + (v223 - v489) * (v234 - v210)) + v230;
      v341 = v213 * v338;
      v342 = v211 * v339;
      v343 = v213 * (v206 + v215);
      v344 = v211 * v340;
      v345 = v213 * (v201 + v215) / v227;
      v346 = v211 * v231 / v227;
      v347 = v213 * v232 / v229;
      v348 = v211 * v233 / v229;
      if (v554.f64[1] > 0.0)
        v230 = fabs((v345 - v234) * (v348 - v346) + (v235 - v346) * (v347 - v345)) + v230;
      v349 = v341 / v224;
      v350 = v342 / v224;
      v351 = v343 / v228;
      v352 = v344 / v228;
      if (*(double *)&v556[8] > 0.0)
        v230 = fabs((v218 - v349) * (v352 - v223) + (v350 - v223) * (v351 - v218)) + v230;
      if (*(double *)&v557[16] > 0.0)
        v230 = fabs((v345 - v347) * (v495 - v346) + (v348 - v346) * (v209 - v345)) + v230;
      v353 = fmax(fmax(fmax(fmax(fmax(fmax(fmax(v210, 2.22507386e-308), v209), v218), v349), v234), v345), v351);
      v354 = fmin(v347, fmin(v351, fmin(v345, fmin(v234, fmin(v349, fmin(v218, fmin(v209, fmin(v210, 1.79769313e308))))))));
      v355 = fmax(v353, v347);
      v356 = fmax(fmax(fmax(fmax(fmax(fmax(fmax(fmax(v489, 2.22507386e-308), v495), v223), v350), v235), v346), v352), v348)- fmin(v348, fmin(v352, fmin(v346, fmin(v235, fmin(v350, fmin(v223, fmin(v495, fmin(v489, 1.79769313e308))))))));
      v357 = fmin(fmax(v355 - v354, v356) / fmax(fmin(v356, v355 - v354), 0.1), 5.0);
      v358 = v357 + -0.25;
      _NF = v357 < 1.25;
      v359 = 1.0;
      if (!_NF)
        v359 = v358;
      v360 = (float)(v500 * v500) / (a7 * 0.75 * v230 * v359);
      goto LABEL_167;
    case 3:
      v236 = *((_DWORD *)v11 + 98);
      v481 = *(double *)(a2 + 1432);
      v482 = *(double *)(a2 + 1424);
      v479 = *(double *)(a2 + 1440);
      v237 = v516;
      v496 = v515;
      v238 = vsubq_f64(v515, v505);
      *(double *)&v239 = sqrt(vaddvq_f64(vmulq_f64(v238, v238)) + (v516 - v506) * (v516 - v506));
      v240 = *(double *)&v239;
      v241 = *(double *)&v239 - (float)((float)(v240 / v18) + v501);
      v520 = vaddq_f64(vdivq_f64(vmulq_n_f64(v238, v241), (float64x2_t)vdupq_lane_s64(v239, 0)), v505);
      v521 = v241 * (v516 - v506) / *(double *)&v239 + v506;
      v522 = v507;
      v523 = v508;
      v524 = v509;
      _D4 = v518;
      _D5 = v496.f64[1];
      __asm { FMLA            D0, D4, V7.D[1] }
      v245 = vmlad_n_f64(-(v496.f64[1] * *(double *)&v517), *((double *)&v517 + 1), v496.f64[0]);
      v246 = _D0 + _D0;
      v247 = -(v518 * v496.f64[0] - v237 * *(double *)&v517) - (v518 * v496.f64[0] - v237 * *(double *)&v517);
      v248 = v245 + v245;
      v249 = (_D0 + _D0) * v24;
      v250 = (_D0 + _D0) * *((double *)&v517 + 1);
      v251 = *(double *)&v564 * v24
           + *((double *)&v564 + 1) * v518
           - (v565 * *((double *)&v517 + 1)
            + v566 * *(double *)&v517);
      v252 = *((double *)&v564 + 1) * v24
           + v565 * *(double *)&v517
           - (*(double *)&v564 * v518
            + v566 * *((double *)&v517 + 1));
      v253 = *(double *)&v564 * *((double *)&v517 + 1)
           + v565 * v24
           - (*((double *)&v564 + 1) * *(double *)&v517
            + v566 * v518);
      v254 = *(double *)&v564 * *(double *)&v517
           + *((double *)&v564 + 1) * *((double *)&v517 + 1)
           + v565 * v518
           + v566 * v24;
      v255 = -(v563 * *((double *)&v517 + 1) - v562.f64[1] * v518)
           - (v563 * *((double *)&v517 + 1)
            - v562.f64[1] * v518);
      v256 = -(v562.f64[0] * v518 - v563 * *(double *)&v517) - (v562.f64[0] * v518 - v563 * *(double *)&v517);
      v257 = -(v562.f64[1] * *(double *)&v517 - v562.f64[0] * *((double *)&v517 + 1))
           - (v562.f64[1] * *(double *)&v517
            - v562.f64[0] * *((double *)&v517 + 1));
      v258 = v562.f64[0]
           - (v496.f64[0]
            - v248 * *((double *)&v517 + 1))
           + v255 * v24
           + v256 * v518
           - (v249
            + v247 * v518
            + v257 * *((double *)&v517 + 1));
      v259 = v562.f64[1]
           - (v496.f64[1]
            - v246 * v518)
           + v256 * v24
           + v257 * *(double *)&v517
           - (v248 * *(double *)&v517
            + v247 * v24
            + v255 * v518);
      v260 = v563
           - (v237
            - v247 * *(double *)&v517)
           + v255 * *((double *)&v517 + 1)
           + v257 * v24
           - (v250
            + v248 * v24
            + v256 * *(double *)&v517);
      v261 = -(v260 * v252 - v259 * v253) - (v260 * v252 - v259 * v253);
      v262 = -(v258 * v253 - v260 * v251) - (v258 * v253 - v260 * v251);
      v263 = -(v259 * v251 - v258 * v252) - (v259 * v251 - v258 * v252);
      v476 = v259;
      v477 = v258;
      v264 = -(v258 + v262 * v253 + v261 * v254 - v263 * v252);
      v265 = -(v259 + v262 * v254 + v263 * v251 - v261 * v253);
      v474 = v260;
      v266 = v260 + v261 * v252 + v263 * v254;
      v267 = v252 * -2.0;
      v268 = -(v252 * (v252 * -2.0));
      v269 = 1.0 - (v268 - v253 * (v253 * -2.0));
      v270 = -(v252 * (v251 * -2.0));
      v271 = v253 * -2.0 * v254;
      v272 = v270 - v271;
      v273 = -(v253 * (v251 * -2.0));
      v274 = v270 + v271;
      v275 = v254 * v267 - v253 * (v251 * -2.0);
      v276 = v251 * -2.0 * v251 + 1.0;
      v277 = v276 - -(v253 * (v253 * -2.0));
      v278 = -(v253 * v267);
      v279 = v251 * -2.0 * v254;
      v541 = v269;
      *(double *)&v542 = v274;
      *((double *)&v543 + 1) = v272;
      v544 = v277;
      *(double *)&v546 = v275;
      *((double *)&v546 + 1) = v278 - v279;
      *((double *)&v542 + 1) = v273 - v254 * v267;
      v545 = COERCE_UNSIGNED_INT64(v279 + v278);
      v547 = v276 - v268;
      *(_QWORD *)&v543 = 0;
      v548 = 0.0;
      v549 = v264;
      v550 = v265;
      v551 = -(v266 - v262 * v251);
      v552 = 1.0;
      gm::operator*<double,4,4,4>((double *)buf, v510, &v541);
      v280 = (double)v19 * 0.5;
      v281 = (double)v20 * 0.5;
      v282 = *(double *)&v556[16] * *(double *)&v567[8] + *(double *)&v555 * *(double *)v567;
      v283 = v558 * *(double *)&v567[16] + v561;
      if (v282 + v283 == 0.0)
        v284 = 0.0000001;
      else
        v284 = v282 + v283;
      v285 = *((double *)&v555 + 1) * *(double *)&v567[8];
      v286 = *((double *)&v555 + 1) * *(double *)&v567[8] + *(double *)buf * *(double *)v567;
      v287 = *(double *)v557 * *(double *)&v567[16] + v559;
      v490 = v281 * (v286 + v287) / v284;
      v288 = *(double *)v556 * *(double *)&v567[8];
      v289 = *(double *)v556 * *(double *)&v567[8] + v554.f64[0] * *(double *)v567;
      v290 = *(double *)&v557[8] * *(double *)&v567[16] + v560.f64[0];
      v291 = v280 * (v289 + v290) / v284;
      v292 = *(double *)buf * *(double *)v568;
      v293 = v554.f64[0] * *(double *)v568;
      v294 = *(double *)&v556[16] * *(double *)&v567[8] + *(double *)&v555 * *(double *)v568;
      if (v294 + v283 == 0.0)
        v295 = 0.0000001;
      else
        v295 = v294 + v283;
      v296 = v285 + v292;
      v497 = v281 * (v285 + v292 + v287) / v295;
      v297 = v288 + v293;
      v503 = v280 * (v288 + v293 + v290) / v295;
      v298 = *(double *)&v556[16] * *(double *)&v568[8] + *(double *)&v555 * *(double *)v567;
      v299 = *(double *)&v556[16] * *(double *)&v568[8] + *(double *)&v555 * *(double *)v568;
      v300 = *((double *)&v555 + 1) * *(double *)&v568[8] + *(double *)buf * *(double *)v567;
      v301 = *((double *)&v555 + 1) * *(double *)&v568[8] + v292;
      v302 = *(double *)v556 * *(double *)&v568[8] + v554.f64[0] * *(double *)v567;
      v303 = *(double *)v556 * *(double *)&v568[8] + v293;
      v304 = v558 * *(double *)&v568[16] + v561;
      v305 = *(double *)v557 * *(double *)&v568[16] + v559;
      if (v298 + v283 == 0.0)
        v306 = 0.0000001;
      else
        v306 = v298 + v283;
      v307 = *(double *)&v557[8] * *(double *)&v568[16] + v560.f64[0];
      v308 = v281 * (v300 + v287) / v306;
      v309 = v299 + v283;
      v310 = v294 + v304;
      v311 = v298 + v304;
      v312 = v299 + v304;
      v313 = v280 * (v302 + v290) / v306;
      if (v309 == 0.0)
        v314 = 0.0000001;
      else
        v314 = v309;
      if (v282 + v304 == 0.0)
        v315 = 0.0000001;
      else
        v315 = v282 + v304;
      v316 = v281 * (v286 + v305);
      if (v310 == 0.0)
        v310 = 0.0000001;
      if (v311 == 0.0)
        v311 = 0.0000001;
      if (v312 == 0.0)
        v317 = 0.0000001;
      else
        v317 = v312;
      v318 = 0.0;
      if (v554.f64[1] < 0.0)
        v318 = fabs((v490 - v497) * (v313 - v291) + (v503 - v291) * (v308 - v490));
      v319 = v297 + v307;
      v320 = v301 + v305;
      v321 = v303 + v307;
      v322 = v316 / v315;
      v323 = *(double *)&v556[8];
      v324 = v280 * (v289 + v307) / v315;
      if (*(double *)&v556[8] < 0.0)
        v318 = fabs((v490 - v322) * (v503 - v291) + (v324 - v291) * (v497 - v490)) + v318;
      v325 = v301 + v287;
      v326 = v303 + v290;
      v327 = v300 + v305;
      v328 = v302 + v307;
      v329 = v281 * (v296 + v305);
      v330 = v280 * v319;
      v331 = v281 * v320;
      v332 = v280 * v321;
      if (*(double *)&v557[16] >= 0.0)
      {
        v334 = a7;
        v333 = v308;
      }
      else
      {
        v333 = v308;
        v318 = fabs((v490 - v308) * (v324 - v291) + (v313 - v291) * (v322 - v490)) + v318;
        v334 = a7;
      }
      v361 = v281 * v325;
      v362 = v280 * v326;
      v363 = v281 * v327;
      v364 = v280 * v328;
      v365 = v329 / v310;
      v366 = v330 / v310;
      v367 = v331 / v317;
      v368 = v332 / v317;
      if (v554.f64[1] > 0.0)
      {
        v323 = *(double *)&v556[8];
        v318 = fabs((v365 - v322) * (v368 - v366) + (v324 - v366) * (v367 - v365)) + v318;
      }
      v369 = v361 / v314;
      v370 = v362 / v314;
      v371 = v363 / v311;
      v372 = v364 / v311;
      if (v323 > 0.0)
        v318 = fabs((v333 - v369) * (v372 - v313) + (v370 - v313) * (v371 - v333)) + v318;
      if (*(double *)&v557[16] > 0.0)
        v318 = fabs((v365 - v367) * (v503 - v366) + (v368 - v366) * (v497 - v365)) + v318;
      v373 = 1.0;
      if (v236 >= 5)
      {
        v374 = *(double *)&v567[8] - *(double *)&v568[8];
        v375 = *(double *)v567 - *(double *)v568;
        v376 = *(double *)&v567[16] - *(double *)&v568[16];
        v377 = (sqrt((v476 - *(double *)&v568[8] + v374 * -0.5) * (v476 - *(double *)&v568[8] + v374 * -0.5)+ (v477 - *(double *)v568 + v375 * -0.5) * (v477 - *(double *)v568 + v375 * -0.5)+ (v474 - *(double *)&v568[16] + v376 * -0.5) * (v474 - *(double *)&v568[16] + v376 * -0.5))+ sqrt(v374 * v374 + v375 * v375 + v376 * v376) * -0.5)/ (sqrt(v482 * v482 + v481 * v481 + v479 * v479)* 5.0);
        if (v377 <= 1.0)
          v373 = v377 * -0.9 + 1.0;
        else
          v373 = 0.1;
      }
      v378 = fmax(fmax(fmax(fmax(fmax(fmax(fmax(fmax(v291, 2.22507386e-308), v503), v313), v370), v324), v366), v372), v368);
      v379 = fmin(v368, fmin(v372, fmin(v366, fmin(v324, fmin(v370, fmin(v313, fmin(v503, fmin(v291, 1.79769313e308))))))));
      v380 = fmax(fmax(fmax(fmax(fmax(fmax(fmax(fmax(v490, 2.22507386e-308), v497), v333), v369), v322), v365), v371), v367)- fmin(v367, fmin(v371, fmin(v365, fmin(v322, fmin(v369, fmin(v333, fmin(v497, fmin(v490, 1.79769313e308))))))));
      v381 = fmin(fmax(v380, v378 - v379) / fmax(fmin(v378 - v379, v380), 0.1), 5.0);
      _CF = v20 >= 0x190 && v19 >= 0x190;
      v383 = v500 * 0.35;
      if (_CF)
        v383 = v500;
      if (v381 >= 1.25)
        v384 = v381 + -0.25;
      else
        v384 = 1.0;
      v360 = (float)(v383 * v383) / (v334 * 0.75 * v318 * v373 * v384);
LABEL_167:
      v463 = v360;
      *a5 = v463;
      break;
    default:
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v103 = GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19F029000, v103, OS_LOG_TYPE_ERROR, "Unsupported LodMode.", buf, 2u);
      }
      break;
  }
  v464 = *a5;
  result = altitude::Tile::getOrCreateTileView(v11, (const altitude::View *)a2);
  *((float *)result + 6) = v464;
  *((_DWORD *)result + 7) = a6;
  return result;
}

char *std::vector<altitude::TileView>::__push_back_slow_path<altitude::TileView const&>(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  char *v16;
  void (***v17)(char *);
  void (**v18)(char *);
  BOOL v19;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - (_BYTE *)*a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - v3) >> 4) > v5)
    v5 = 0x5555555555555556 * (((_BYTE *)a1[2] - v3) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - v3) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v8 = 0x555555555555555;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(48 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[48 * v4];
  v11 = &v9[48 * v8];
  *(_QWORD *)v10 = &off_1E42C6A78;
  *(_OWORD *)(v10 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v10 + 5) = *(_QWORD *)(a2 + 40);
  v12 = v10 + 48;
  if (v2 == v3)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    if (!v2)
      return v12;
    goto LABEL_18;
  }
  do
  {
    *((_QWORD *)v10 - 6) = &off_1E42C6A78;
    v10 -= 48;
    v13 = *(_OWORD *)(v2 - 40);
    v14 = *(_OWORD *)(v2 - 24);
    *((_QWORD *)v10 + 5) = *((_QWORD *)v2 - 1);
    *(_OWORD *)(v10 + 24) = v14;
    *(_OWORD *)(v10 + 8) = v13;
    v2 -= 48;
  }
  while (v2 != v3);
  v2 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v12;
  a1[2] = v11;
  if (v15 != v2)
  {
    v16 = v15 - 48;
    v17 = (void (***)(char *))(v15 - 48);
    do
    {
      v18 = *v17;
      v17 -= 6;
      (*v18)(v16);
      v19 = v16 == v2;
      v16 = (char *)v17;
    }
    while (!v19);
  }
  if (v2)
LABEL_18:
    operator delete(v2);
  return v12;
}

void md::AnimationManager::~AnimationManager(md::AnimationManager *this)
{
  md::AnimationManager::~AnimationManager(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void (***v6)(uint64_t);
  void (**v7)(uint64_t);
  void *v8;
  void (***v9)(uint64_t);
  void (**v10)(uint64_t);
  void *v11;

  *(_QWORD *)this = &off_1E42913D8;
  md::AnimationManager::stopAllAnimations(this);
  v2 = (void *)*((_QWORD *)this + 26);
  if (v2)
  {
    do
    {
      v3 = *(void **)v2;
      v4 = *((_QWORD *)v2 + 5);
      *((_QWORD *)v2 + 5) = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      *((_QWORD *)v2 + 2) = &off_1E42B49F0;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = (void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v5)
    operator delete(v5);
  v6 = (void (***)(uint64_t))*((_QWORD *)this + 20);
  if (v6)
  {
    do
    {
      v7 = *v6;
      (*v6[2])((uint64_t)(v6 + 2));
      operator delete(v6);
      v6 = (void (***)(uint64_t))v7;
    }
    while (v7);
  }
  v8 = (void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v8)
    operator delete(v8);
  v9 = (void (***)(uint64_t))*((_QWORD *)this + 15);
  if (v9)
  {
    do
    {
      v10 = *v9;
      (*v9[2])((uint64_t)(v9 + 2));
      operator delete(v9);
      v9 = (void (***)(uint64_t))v10;
    }
    while (v10);
  }
  v11 = (void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v11)
    operator delete(v11);
  std::mutex::~mutex((std::mutex *)((char *)this + 40));
  *((_QWORD *)this + 1) = &off_1E42B5050;

}

void md::AnimationManager::animationDidResume(md::AnimationManager *this, VKAnimation *a2)
{
  VKAnimation *v3;
  uint64_t **v4;
  float v5;
  uint64_t v6;
  VKAnimation *v7;
  _QWORD v8[3];

  v7 = a2;
  if (-[VKAnimation hasFrequency](v7, "hasFrequency"))
  {
    if (*((_BYTE *)this + 232))
    {
      v3 = v7;
      v8[0] = &off_1E42B49F0;
      v8[1] = v3;
      v4 = std::__hash_table<std::__hash_value_type<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>,std::__unordered_map_hasher<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__hash_value_type<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>,std::hash<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::equal_to<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,true>,std::__unordered_map_equal<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__hash_value_type<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>,std::equal_to<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::hash<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,true>,std::allocator<std::__hash_value_type<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>>>::find<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>((_QWORD *)this + 24, (uint64_t)v8);
      if (v4)
      {
        -[VKAnimation frequency](v3, "frequency");
        (*(void (**)(uint64_t *, double, double))(*v4[5] + 32))(v4[5], 0.0, 1.0 / v5);
      }

    }
  }
  else
  {
    atomic_store(1u, (unsigned __int8 *)this + 184);
    v6 = **((_QWORD **)this + 4);
    if (v6)
    {
      LOBYTE(v8[0]) = 6;
      md::MapEngine::setNeedsTick(v6, v8);
    }
  }

}

void sub_19F405174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;

  v3 = a1;
  v4 = *(id *)(a2 + 8);
  v5 = v3;
  v6 = v4;
  if (v6 == v5)
    v7 = 1;
  else
    v7 = objc_msgSend(v5, "isEqual:", v6);

  return v7;
}

void sub_19F405214(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B49F0;

  return a1;
}

void geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B49F0;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      *(_QWORD *)(v2 + 16) = &off_1E42B49F0;

    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t std::__function::__func<md::AnimationManager::runAnimation(VKAnimation *)::$_0,std::allocator<md::AnimationManager::runAnimation(VKAnimation *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42CD268;
  *(_QWORD *)(a1 + 16) = &off_1E42B49F0;

  return a1;
}

void std::__function::__func<md::AnimationManager::runAnimation(VKAnimation *)::$_0,std::allocator<md::AnimationManager::runAnimation(VKAnimation *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42CD268;
  *(_QWORD *)(a1 + 16) = &off_1E42B49F0;

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::AnimationManager::runAnimation(VKAnimation *)::$_0,std::allocator<md::AnimationManager::runAnimation(VKAnimation *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x28uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E42CD268;
  v2[1] = v3;
  v2[2] = &off_1E42B49F0;
  v2[3] = *(id *)(a1 + 24);
  return v2;
}

void std::__function::__func<md::AnimationManager::runAnimation(VKAnimation *)::$_0,std::allocator<md::AnimationManager::runAnimation(VKAnimation *)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  id v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  *a2 = &off_1E42CD268;
  a2[1] = v3;
  a2[2] = &off_1E42B49F0;
  a2[3] = 0;
  v4 = *(id *)(a1 + 24);
  v5 = (void *)a2[3];
  a2[3] = v4;

}

void std::__function::__func<md::AnimationManager::runAnimation(VKAnimation *)::$_0,std::allocator<md::AnimationManager::runAnimation(VKAnimation *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_1E42B49F0;

}

void std::__function::__func<md::AnimationManager::runAnimation(VKAnimation *)::$_0,std::allocator<md::AnimationManager::runAnimation(VKAnimation *)::$_0>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_1E42B49F0;

  operator delete((void *)a1);
}

void std::__function::__func<md::AnimationManager::runAnimation(VKAnimation *)::$_0,std::allocator<md::AnimationManager::runAnimation(VKAnimation *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  char v4;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(id *)(a1 + 24);
  objc_msgSend(v2, "onTimerFired:", CFAbsoluteTimeGetCurrent());

  v3 = **(_QWORD **)(v1 + 32);
  if (v3)
  {
    v4 = 6;
    md::MapEngine::setNeedsTick(v3, &v4);
  }
}

void sub_19F4054E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__push_back_slow_path<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> const&>(void **a1, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  id v10;
  void *v11;
  char *v12;
  id *v13;
  id *v14;
  void *v15;
  id *v16;
  id *v17;
  id *v18;
  void (**v19)(id *);
  BOOL v20;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v2];
  v9 = &v7[24 * v6];
  *(_QWORD *)v8 = &off_1E42B49F0;
  *((_QWORD *)v8 + 1) = 0;
  v10 = a2;
  v11 = (void *)*((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v10;

  v12 = v8 + 24;
  v14 = (id *)*a1;
  v13 = (id *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v12;
    a1[2] = v9;
    if (!v13)
      return v12;
    goto LABEL_18;
  }
  do
  {
    *((_QWORD *)v8 - 3) = &off_1E42B49F0;
    v8 -= 24;
    *((_QWORD *)v8 + 1) = 0;
    objc_storeStrong((id *)v8 + 1, *(v13 - 2));
    v15 = *(v13 - 2);
    *(v13 - 2) = 0;

    v13 -= 3;
  }
  while (v13 != v14);
  v13 = (id *)*a1;
  v16 = (id *)a1[1];
  *a1 = v8;
  a1[1] = v12;
  a1[2] = v9;
  if (v16 != v13)
  {
    v17 = v16 - 3;
    v18 = v16 - 3;
    do
    {
      v19 = (void (**)(id *))*v18;
      v18 -= 3;
      (*v19)(v17);
      v20 = v17 == v13;
      v17 = v18;
    }
    while (!v20);
  }
  if (v13)
LABEL_18:
    operator delete(v13);
  return v12;
}

void **std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  void (**v7)(char *);
  BOOL v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = v3 - 24;
      v6 = v3 - 24;
      do
      {
        v7 = *(void (***)(char *))v6;
        v6 -= 24;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_19F405804(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>::~unordered_map[abi:nn180100](v1 + 192);
  std::array<std::unordered_set<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,2ul>::~array(v1 + 104);
  std::mutex::~mutex((std::mutex *)(v1 + 40));
  *(_QWORD *)(v1 + 8) = &off_1E42B5050;

  _Unwind_Resume(a1);
}

void md::AnimationManager::stopAllAnimations(md::AnimationManager *this)
{
  std::mutex *v2;
  uint64_t **v3;
  char *i;
  uint64_t **j;
  char *v6;
  id *v7;
  id v8;
  char *v9;
  char *v10;
  void (**v11)(char *);
  BOOL v12;
  uint64_t *v13;
  void *v14;
  uint64_t *v15;
  void *v16;
  char *v17;
  char *v18;
  unint64_t v19;

  v17 = 0;
  v18 = 0;
  v19 = 0;
  v2 = (std::mutex *)((char *)this + 40);
  std::mutex::lock((std::mutex *)((char *)this + 40));
  v3 = (uint64_t **)*((_QWORD *)this + 15);
  for (i = 0; v3; v3 = (uint64_t **)*v3)
  {
    if ((unint64_t)i < v19)
    {
      *(_QWORD *)i = &off_1E42B49F0;
      *((_QWORD *)i + 1) = 0;
      v13 = v3[3];
      v14 = (void *)*((_QWORD *)i + 1);
      *((_QWORD *)i + 1) = v13;

      i += 24;
    }
    else
    {
      i = std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__push_back_slow_path<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> const&>((void **)&v17, v3[3]);
    }
    v18 = i;
  }
  for (j = (uint64_t **)*((_QWORD *)this + 20); j; j = (uint64_t **)*j)
  {
    if ((unint64_t)i < v19)
    {
      *(_QWORD *)i = &off_1E42B49F0;
      *((_QWORD *)i + 1) = 0;
      v15 = j[3];
      v16 = (void *)*((_QWORD *)i + 1);
      *((_QWORD *)i + 1) = v15;

      i += 24;
    }
    else
    {
      i = std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__push_back_slow_path<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> const&>((void **)&v17, j[3]);
    }
    v18 = i;
  }
  std::mutex::unlock(v2);
  v6 = v17;
  if (v17 == i)
  {
    if (!v17)
      return;
    goto LABEL_21;
  }
  v7 = (id *)v17;
  do
  {
    v8 = v7[1];
    objc_msgSend(v8, "stop");

    v7 += 3;
  }
  while (v7 != (id *)i);
  if (v6)
  {
    if (v6 != i)
    {
      v9 = i - 24;
      v10 = v9;
      do
      {
        v11 = *(void (***)(char *))v10;
        v10 -= 24;
        (*v11)(v9);
        v12 = v9 == v6;
        v9 = v10;
      }
      while (!v12);
    }
LABEL_21:
    operator delete(v6);
  }
}

void sub_19F4059BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100]((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *(void **)v2;
      v4 = *((_QWORD *)v2 + 5);
      *((_QWORD *)v2 + 5) = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      *((_QWORD *)v2 + 2) = &off_1E42B49F0;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

uint64_t std::array<std::unordered_set<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,2ul>::~array(uint64_t a1)
{
  void (***v2)(uint64_t);
  void (**v3)(uint64_t);
  void *v4;
  void (***v5)(uint64_t);
  void (**v6)(uint64_t);
  void *v7;

  v2 = *(void (****)(uint64_t))(a1 + 56);
  if (v2)
  {
    do
    {
      v3 = *v2;
      (*v2[2])((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = (void (***)(uint64_t))v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(void (****)(uint64_t))(a1 + 16);
  if (v5)
  {
    do
    {
      v6 = *v5;
      (*v5[2])((uint64_t)(v5 + 2));
      operator delete(v5);
      v5 = (void (***)(uint64_t))v6;
    }
    while (v6);
  }
  v7 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
    operator delete(v7);
  return a1;
}

uint64_t geo::_retain_ptr<_AnimationManagerRunner * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5050;

  return a1;
}

void geo::_retain_ptr<_AnimationManagerRunner * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5050;

  JUMPOUT(0x1A1AF4E00);
}

void md::SnapshotAnimationManager::~SnapshotAnimationManager(md::SnapshotAnimationManager *this)
{
  md::AnimationManager::~AnimationManager(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::AnimationManager::wantsTimerTick(md::AnimationManager *this)
{
  unsigned __int8 v1;
  std::mutex *v3;
  uint64_t **i;
  uint64_t **v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  char v10;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  int v14;

  v1 = atomic_load((unsigned __int8 *)this + 184);
  if ((v1 & 1) != 0)
    return 1;
  v3 = (std::mutex *)((char *)this + 40);
  std::mutex::lock((std::mutex *)((char *)this + 40));
  for (i = (uint64_t **)*((_QWORD *)this + 15); i; i = (uint64_t **)*i)
  {
    v7 = i[3];
    v8 = objc_msgSend(v7, "running");

    if (v8)
    {
      v9 = i[3];
      v10 = objc_msgSend(v9, "hasFrequency");

      if ((v10 & 1) == 0)
        goto LABEL_12;
    }
  }
  v5 = (uint64_t **)*((_QWORD *)this + 20);
  if (v5)
  {
    while (1)
    {
      v11 = v5[3];
      v12 = objc_msgSend(v11, "running");

      if (v12)
      {
        v13 = v5[3];
        v14 = objc_msgSend(v13, "hasFrequency");

        if (!v14)
          break;
      }
      v5 = (uint64_t **)*v5;
      if (!v5)
        goto LABEL_4;
    }
LABEL_12:
    v6 = 1;
    goto LABEL_13;
  }
LABEL_4:
  v6 = 0;
LABEL_13:
  std::mutex::unlock(v3);
  return v6;
}

void sub_19F405CB4(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void *v2;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void md::ARPassList::~ARPassList(md::ARPassList *this)
{
  ggl::RenderQueue *v2;
  md::FrameGraph *v3;

  *(_QWORD *)this = off_1E42AF5D0;
  v2 = (ggl::RenderQueue *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    ggl::RenderQueue::~RenderQueue(v2);
    MEMORY[0x1A1AF4E00]();
  }
  v3 = (md::FrameGraph *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    md::FrameGraph::~FrameGraph(v3);
    MEMORY[0x1A1AF4E00]();
  }
}

{
  ggl::RenderQueue *v2;
  md::FrameGraph *v3;

  *(_QWORD *)this = off_1E42AF5D0;
  v2 = (ggl::RenderQueue *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    ggl::RenderQueue::~RenderQueue(v2);
    MEMORY[0x1A1AF4E00]();
  }
  v3 = (md::FrameGraph *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    md::FrameGraph::~FrameGraph(v3);
    MEMORY[0x1A1AF4E00]();
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::ARPassList::buildFrameGraph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 ***a5)
{
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  ggl::RenderQueue *v9;
  _QWORD *v10;
  _OWORD *v11;
  ggl::CommandBuffer *v12;
  double v13;
  uint64_t v14;
  ggl::CommandBuffer *v15;
  double v16;
  uint64_t v17;
  ggl::CommandBuffer *v18;
  double v19;
  uint64_t v20;
  ggl::CommandBuffer *v21;
  double v22;
  uint64_t v23;
  ggl::CommandBuffer *v24;
  double v25;
  uint64_t v26;
  ggl::CommandBuffer *v27;
  double v28;
  uint64_t v29;
  ggl::CommandBuffer *v30;
  double v31;
  uint64_t v32;
  ggl::CommandBuffer *v33;
  double v34;
  uint64_t v35;
  ggl::CommandBuffer *v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *result;
  uint64_t v43;
  _QWORD *v44;
  _QWORD v45[3];
  _QWORD *v46;
  _BYTE v47[24];
  _BYTE *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v45[0] = &off_1E42C84C8;
  v45[1] = a4;
  v46 = v45;
  v6 = (_QWORD *)operator new();
  *v6 = &off_1E4290AA0;
  v7 = v6 + 1;
  v8 = operator new(0x150uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E42DE9D0;
  v9 = ggl::RenderQueue::RenderQueue((ggl::RenderQueue *)(v8 + 3), 9);
  v6[3] = 0;
  v10 = v6 + 3;
  v6[1] = v9;
  v6[2] = v8;
  v6[4] = 0;
  v6[5] = 0;
  v11 = operator new(0x48uLL);
  v6[4] = (char *)v11 + 72;
  v6[5] = (char *)v11 + 72;
  *v11 = 0u;
  v11[1] = 0u;
  v11[2] = 0u;
  v11[3] = 0u;
  *((_QWORD *)v11 + 8) = 0;
  v6[3] = v11;
  *v6 = &off_1E428C4C0;
  v12 = (ggl::CommandBuffer *)operator new();
  v13 = ggl::CommandBuffer::CommandBuffer(v12, 0, "LoadTextures");
  v14 = *(_QWORD *)v6[3];
  *(_QWORD *)v6[3] = v12;
  if (v14)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v14 + 8))(v14, v13);
  ggl::RenderQueue::setBufferForLayer(*v7, 0, v12);
  v15 = (ggl::CommandBuffer *)operator new();
  v16 = ggl::CommandBuffer::CommandBuffer(v15, 1, "SobelH");
  v17 = *(_QWORD *)(*v10 + 8);
  *(_QWORD *)(*v10 + 8) = v15;
  if (v17)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v17 + 8))(v17, v16);
  ggl::RenderQueue::setBufferForLayer(*v7, 1, v15);
  v18 = (ggl::CommandBuffer *)operator new();
  v19 = ggl::CommandBuffer::CommandBuffer(v18, 2, "SobelV");
  v20 = *(_QWORD *)(*v10 + 16);
  *(_QWORD *)(*v10 + 16) = v18;
  if (v20)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v20 + 8))(v20, v19);
  ggl::RenderQueue::setBufferForLayer(*v7, 2, v18);
  v21 = (ggl::CommandBuffer *)operator new();
  v22 = ggl::CommandBuffer::CommandBuffer(v21, 3, "Harris");
  v23 = *(_QWORD *)(*v10 + 24);
  *(_QWORD *)(*v10 + 24) = v21;
  if (v23)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v23 + 8))(v23, v22);
  ggl::RenderQueue::setBufferForLayer(*v7, 3, v21);
  v24 = (ggl::CommandBuffer *)operator new();
  v25 = ggl::CommandBuffer::CommandBuffer(v24, 4, "CameraImage");
  v26 = *(_QWORD *)(*v10 + 32);
  *(_QWORD *)(*v10 + 32) = v24;
  if (v26)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v26 + 8))(v26, v25);
  ggl::RenderQueue::setBufferForLayer(*v7, 4, v24);
  v27 = (ggl::CommandBuffer *)operator new();
  v28 = ggl::CommandBuffer::CommandBuffer(v27, 5, "Shadows");
  v29 = *(_QWORD *)(*v10 + 40);
  *(_QWORD *)(*v10 + 40) = v27;
  if (v29)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v29 + 8))(v29, v28);
  ggl::RenderQueue::setBufferForLayer(*v7, 5, v27);
  v30 = (ggl::CommandBuffer *)operator new();
  v31 = ggl::CommandBuffer::CommandBuffer(v30, 6, "Labels");
  v32 = *(_QWORD *)(*v10 + 48);
  *(_QWORD *)(*v10 + 48) = v30;
  if (v32)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v32 + 8))(v32, v31);
  ggl::RenderQueue::setBufferForLayer(*v7, 6, v30);
  v33 = (ggl::CommandBuffer *)operator new();
  v34 = ggl::CommandBuffer::CommandBuffer(v33, 7, "Meshes");
  v35 = *(_QWORD *)(*v10 + 56);
  *(_QWORD *)(*v10 + 56) = v33;
  if (v35)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v35 + 8))(v35, v34);
  ggl::RenderQueue::setBufferForLayer(*v7, 7, v33);
  v36 = (ggl::CommandBuffer *)operator new();
  v37 = ggl::CommandBuffer::CommandBuffer(v36, 8, "Debug");
  v38 = *(_QWORD *)(*v10 + 64);
  *(_QWORD *)(*v10 + 64) = v36;
  if (v38)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v38 + 8))(v38, v37);
  ggl::RenderQueue::setBufferForLayer(v6[1], 8, v36);
  v44 = v6;
  if (!v46)
  {
    v39 = 0;
    goto LABEL_23;
  }
  if (v46 != v45)
  {
    v39 = (*(uint64_t (**)(void))(*v46 + 16))();
LABEL_23:
    v48 = (_BYTE *)v39;
    goto LABEL_25;
  }
  v48 = v47;
  (*(void (**)(_QWORD *, _BYTE *))(v45[0] + 24))(v45, v47);
  v39 = (uint64_t)v48;
LABEL_25:
  md::FrameGraphBuilder::addRenderPass(a5, 0, (uint64_t *)&v44, v39);
  v40 = v48;
  if (v48 == v47)
  {
    v41 = 4;
    v40 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_30;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_30:
  if (v44)
    (*(void (**)(_QWORD *))(*v44 + 8))(v44);
  result = v46;
  if (v46 == v45)
  {
    v43 = 4;
    result = v45;
  }
  else
  {
    if (!v46)
      return result;
    v43 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v43))();
}

void sub_19F4062C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v15;
  uint64_t v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *md::RenderQueue<md::ARCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void md::RenderQueue<md::ARCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::ARPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::ARPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::ARPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C84C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ARPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::ARPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C84C8;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::ARPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::ARPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  __int128 __src;
  uint64_t v10;

  HIBYTE(v10) = 7;
  strcpy((char *)&__src, "Primary");
  v4 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v4, &__src, 7uLL);
  }
  else
  {
    *(_OWORD *)v4 = __src;
    *(_QWORD *)(a2 + 48) = v10;
  }
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v5;
  result = *(__n128 *)(v5 + 16);
  v7 = *(_OWORD *)(v5 + 32);
  v8 = *(_OWORD *)(v5 + 48);
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(v5 + 64);
  *(_OWORD *)(a2 + 152) = v8;
  *(_OWORD *)(a2 + 136) = v7;
  *(__n128 *)(a2 + 120) = result;
  if (*(_BYTE *)(v5 + 72))
  {
    result = *(__n128 *)(v5 + 76);
    if (*(_BYTE *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
      *(_BYTE *)(a2 + 176) = 1;
    }
  }
  else if (*(_BYTE *)(a2 + 176))
  {
    *(_BYTE *)(a2 + 176) = 0;
  }
  return result;
}

void altitude::GeoResourceManager::~GeoResourceManager(void **this)
{
  *this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t altitude::GeoResourceManager::getTileIdWithDataForTileId(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  uint32x2_t v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  void *v13;
  void *v14;
  unsigned int v15;
  uint64_t v17;
  void *v18;
  void *v19;
  int v20;
  uint64_t v21;
  void *v22;
  char v23;
  uint32x2_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  unsigned int v29[2];
  uint64_t v30;
  __int128 v31;
  unint64_t GEOTileKey;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a3 == 63)
    return *(_QWORD *)a2;
  v30 = 0;
  v29[0] = a3;
  v29[1] = 0;
  v31 = *a2;
  v6 = (a3 - 13);
  if (v6 > 0x37)
    goto LABEL_7;
  if (((1 << (a3 - 13)) & 0x80000000000281) == 0)
  {
    if (v6 == 4)
    {
      v7 = 1;
LABEL_9:
      v8 = *(uint32x2_t *)((char *)&v31 + 4);
      v9 = HIDWORD(v31);
      if ((_DWORD)v31)
      {
        if (v7 - 1 >= (v31 - 1))
          v10 = v31 - 1;
        else
          v10 = v7 - 1;
        v11 = v10 + 1;
        do
        {
          v8 = vshr_n_u32(v8, 1uLL);
          v9 >>= 1;
          --v11;
        }
        while (v11);
        v12 = v31 - 1 - v10;
      }
      else
      {
        v12 = 0;
      }
      LODWORD(v31) = v12;
      *(uint32x2_t *)((char *)&v31 + 4) = v8;
      HIDWORD(v31) = v9;
      goto LABEL_18;
    }
LABEL_7:
    if ((_DWORD)a3 != 1)
      goto LABEL_18;
  }
  v7 = (int)*(double *)(a1 + 32);
  if (v7)
    goto LABEL_9;
LABEL_18:
  objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (*(double *)(a1 + 32) <= 1.0)
    v15 = 1;
  else
    v15 = 2;
  if ((_DWORD)a3 == 33 || (_DWORD)a3 == 17)
    v17 = 1;
  else
    v17 = v15;
  if (v13)
  {
    objc_msgSend(v13, "activeTileGroup");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "activeTileSetForTileType:scale:", a3, v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (v19)
    {
      v20 = v31;
      if ((_DWORD)v31)
      {
        if ((a3 - 12) <= 0x38 && ((1 << (a3 - 12)) & 0x100000000000503) != 0
          || (_DWORD)a3 == 1)
        {
          do
          {
            GEOTileKey = 0;
            v33 = 0;
            GEOTileKey = altitude::TileKey::getGEOTileKey(v29, a1);
            v33 = v21;
            objc_msgSend(v14, "activeTileGroup");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            v23 = objc_msgSend(v22, "isHybridModeAvailableForTileKey:", &GEOTileKey);

            if ((v23 & 1) == 0)
            {
              v20 = 0;
              v31 = xmmword_19FFB2E20;
            }
            if (((v20 != 0) & ~objc_msgSend(v19, "isAvailableForTileKey:", &GEOTileKey)) == 0)
              break;
            *(uint32x2_t *)((char *)&v31 + 4) = vshr_n_u32(*(uint32x2_t *)((char *)&v31 + 4), 1uLL);
            HIDWORD(v31) >>= 1;
            LODWORD(v31) = --v20;
          }
          while (v20);
        }
        else
        {
          v25 = *(uint32x2_t *)((char *)&v31 + 4);
          v26 = HIDWORD(v31);
          v27 = v31 - 1;
          do
          {
            GEOTileKey = 0;
            v33 = 0;
            GEOTileKey = altitude::TileKey::getGEOTileKey(v29, a1);
            v33 = v28;
            if (objc_msgSend(v19, "isAvailableForTileKey:", &GEOTileKey))
              break;
            LODWORD(v31) = v27;
            v25 = vshr_n_u32(v25, 1uLL);
            *(uint32x2_t *)((char *)&v31 + 4) = v25;
            v26 >>= 1;
            HIDWORD(v31) = v26;
            --v27;
          }
          while (v27 != -1);
        }
      }
    }
    else
    {
      v31 = xmmword_19FFB2E20;
    }

  }
  v3 = v31;

  return v3;
}

void sub_19F406AEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t altitude::GeoResourceManager::getVersionForGEOType(uint64_t a1, unsigned int a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  if (a2 <= 0x2C && ((1 << a2) & 0x1C000001C000) != 0)
  {
    objc_msgSend(MEMORY[0x1E0D26ED8], "sharedManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "versionForRegion:", a3);

  }
  else
  {
    v9 = a2;
    v10 = 0;
    v12 = 0;
    v11 = 0;
    v13 = 0;
    v14[0] = altitude::TileKey::getGEOTileKey(&v9, a1);
    v14[1] = v7;
    objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v8, "versionForTileKey:", v14);

  }
  return v5;
}

void sub_19F406C18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::Monitorable(uint64_t a1, _OWORD *a2, void *a3, _QWORD *a4)
{
  id v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  *(_OWORD *)a1 = *a2;
  if (*(_QWORD *)a1)
    v8 = *(_QWORD *)(a1 + 8) == 0;
  else
    v8 = 1;
  if (!v8)
    *(_BYTE *)(a1 + 16) = GEOConfigGetBOOL();
  *(_QWORD *)(a1 + 24) = 0;
  v9 = operator new(0x20uLL);
  v9[1] = 0;
  v9[2] = 0;
  *v9 = &off_1E428A338;
  *((_BYTE *)v9 + 24) = 1;
  *(_QWORD *)(a1 + 32) = v9 + 3;
  *(_QWORD *)(a1 + 40) = v9;
  v10 = a4[3];
  if (!v10)
    goto LABEL_9;
  if ((_QWORD *)v10 != a4)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
LABEL_9:
    *(_QWORD *)(a1 + 72) = v10;
    goto LABEL_11;
  }
  *(_QWORD *)(a1 + 72) = a1 + 48;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)a4[3] + 24))(a4[3], a1 + 48);
LABEL_11:
  v11 = a4[3];
  if (!v11)
  {
LABEL_14:
    v16 = (_QWORD *)v11;
    goto LABEL_16;
  }
  if ((_QWORD *)v11 != a4)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    goto LABEL_14;
  }
  v16 = v15;
  (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v15);
LABEL_16:
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::setCallbackQueue((_QWORD *)a1, v7, v15);
  v12 = v16;
  if (v16 == v15)
  {
    v13 = 4;
    v12 = v15;
    goto LABEL_20;
  }
  if (v16)
  {
    v13 = 5;
LABEL_20:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }

  return a1;
}

void sub_19F406DBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::Monitorable<md::ConfigValue<GEOConfigKeyString,std::string>>::~Monitorable(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (*(_QWORD *)(a1 + 40))
  {
    GEOConfigRemoveBlockListener();
    v2 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;

  }
  atomic_store(0, *(unsigned __int8 **)(a1 + 48));
  v3 = *(_QWORD **)(a1 + 88);
  if (v3 == (_QWORD *)(a1 + 64))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 64);
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = *(std::__shared_weak_count **)(a1 + 56);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_19F406F28(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 + 88);
  if (v3 == (_QWORD *)(v1 + 64))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 + 64);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 48);

  if (*(char *)(v1 + 39) < 0)
    operator delete(*(void **)(v1 + 16));
  _Unwind_Resume(a1);
}

void ___ZN2md11MonitorableINS_11ConfigValueI18GEOConfigKeyStringNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE16setCallbackQueueEPU28objcproto17OS_dispatch_queue8NSObjectNS3_8functionIFvS9_EEE_block_invoke(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  std::string __p;
  std::string v6;

  v1 = *(_BYTE **)(a1 + 40);
  if (v1)
  {
    v2 = *(_QWORD *)(a1 + 32);
    if ((*v1 & 1) != 0)
    {
      if (*(char *)(v2 + 39) < 0)
        std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(v2 + 16), *(_QWORD *)(v2 + 24));
      else
        v6 = *(std::string *)(v2 + 16);
      if (*(_DWORD *)v2)
        v3 = *(_QWORD *)(v2 + 8) == 0;
      else
        v3 = 1;
      if (!v3)
        md::ConfigValue<GEOConfigKeyString,std::string>::_update(v2);
      v4 = *(_QWORD *)(v2 + 88);
      if (!v4)
        goto LABEL_16;
      if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
        v4 = *(_QWORD *)(v2 + 88);
        if (!v4)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
          return;
        }
      }
      else
      {
        __p = v6;
      }
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v4 + 48))(v4, &__p);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_16:
        if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_17;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
LABEL_17:
        operator delete(v6.__r_.__value_.__l.__data_);
    }
  }
}

void sub_19F40707C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a21 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0,std::allocator<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0>,void ()(std::string)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E4279E28;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0,std::allocator<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0>,void ()(std::string)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E4279E28;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0,std::allocator<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0>,void ()(std::string)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E4279E28;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0,std::allocator<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0>,void ()(std::string)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E4279E28;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0,std::allocator<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0>,void ()(std::string)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0,std::allocator<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0>,void ()(std::string)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__function::__func<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0,std::allocator<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0>,void ()(std::string)>::operator()(uint64_t a1, uint64_t a2)
{
  void *v3;
  int v4;

  v3 = *(void **)a2;
  v4 = *(char *)(a2 + 23);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  **(_BYTE **)(a1 + 8) = 1;
  if (v4 < 0)
    operator delete(v3);
}

void std::__shared_ptr_emplace<BOOL>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A370;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BOOL>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A370;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::StyleSettingsParser::~StyleSettingsParser(md::StyleSettingsParser *this)
{
  *((_QWORD *)this + 3) = &off_1E429F8B0;
  std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::destroy(*((char **)this + 6));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void md::TransitRenderLayer::setDebugHighlightedItem(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const QuadTile *v15;
  NSObject *v16;
  const QuadTile *v17;
  void **v18;
  id v19;
  uint64_t v20;
  void *__p[2];
  char v22;
  uint8_t buf[4];
  void **v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 376);
  v4 = *(_QWORD ***)(v3 + 304);
  v5 = (_QWORD **)*a2;
  if (v4 != (_QWORD **)*a2)
  {
    if (v4)
    {
      ((void (*)(_QWORD **, _QWORD))(*v4)[2])(v4, 0);
      v3 = *(_QWORD *)(a1 + 376);
      v5 = (_QWORD **)*a2;
    }
    v7 = a2[1];
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = *(std::__shared_weak_count **)(v3 + 312);
    *(_QWORD *)(v3 + 304) = v5;
    *(_QWORD *)(v3 + 312) = v7;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 376) + 304);
    if (v13)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, 1);
    v14 = **(_QWORD **)(*(_QWORD *)(a1 + 40) + 88);
    if (v14)
    {
      LOBYTE(__p[0]) = 7;
      md::MapEngine::setNeedsTick(v14, __p);
    }
    v4 = *(_QWORD ***)(*(_QWORD *)(a1 + 376) + 304);
  }
  if (v4)
  {
    v15 = (const QuadTile *)*v4[1];
    if (GEOGetVectorKitLabelHighlightLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitLabelHighlightLog(void)::onceToken, &__block_literal_global_50);
    v16 = (id)GEOGetVectorKitLabelHighlightLog(void)::log;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      v17 = v15 + 7;
      v18 = __p;
      md::HighlightHelper::to_string((md::HighlightHelper *)__p, v17);
      if (v22 < 0)
        v18 = (void **)__p[0];
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 376) + 304) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 304), 1);
      v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v20 = objc_msgSend(v19, "UTF8String");
      *(_DWORD *)buf = 136315394;
      v24 = v18;
      v25 = 2080;
      v26 = v20;
      _os_log_impl(&dword_19F029000, v16, OS_LOG_TYPE_INFO, "Transit Item:\nTile:%s\n%s", buf, 0x16u);

      if (v22 < 0)
        operator delete(__p[0]);
    }

  }
}

void sub_19F4075D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  v17 = v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZL32GEOGetVectorKitLabelHighlightLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "LabelHighlight");
  v1 = (void *)GEOGetVectorKitLabelHighlightLog(void)::log;
  GEOGetVectorKitLabelHighlightLog(void)::log = (uint64_t)v0;

}

void md::TransitRenderLayer::updateDebugSettings(md::TransitRenderLayer *this)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  id v14;
  _QWORD v15[2];

  if (*(_BYTE *)(*((_QWORD *)this + 47) + 4))
  {
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v14 = (id)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v14, "disableTransitLineMerging") & 1) != 0)
    {
      v2 = 7;
    }
    else if (objc_msgSend(v14, "disableTransitLineGroupMerging"))
    {
      v2 = 4;
    }
    else
    {
      v2 = 0;
    }
    v3 = *((_QWORD *)this + 47);
    if (*(unsigned __int8 *)(v3 + 323) != v2)
    {
      *(_BYTE *)(v3 + 323) = v2;
      v4 = *((_DWORD *)this + 102);
      if ((v4 + 1) > 1)
        v5 = v4 + 1;
      else
        v5 = 1;
      *((_DWORD *)this + 102) = v5;
    }
    v6 = *(unsigned __int8 *)(v3 + 324);
    if (v6 != objc_msgSend(v14, "disableIntraLinkTransitLineCrossings"))
    {
      *(_BYTE *)(*((_QWORD *)this + 47) + 324) = objc_msgSend(v14, "disableIntraLinkTransitLineCrossings");
      v7 = *((_DWORD *)this + 102);
      if ((v7 + 1) > 1)
        v8 = v7 + 1;
      else
        v8 = 1;
      *((_DWORD *)this + 102) = v8;
    }
    if ((objc_msgSend(v14, "transitHighlighting") & 1) == 0 && !*(_BYTE *)(*((_QWORD *)this + 47) + 322))
    {
      v15[0] = 0;
      v15[1] = 0;
      md::TransitRenderLayer::setDebugHighlightedItem((uint64_t)this, v15);
    }
    v9 = objc_msgSend(v14, "disableOverlayTextConsole");
    v10 = *((_QWORD *)this + 47);
    *(_BYTE *)(v10 + 322) = v9;
    v11 = *(unsigned __int8 *)(v10 + 321);
    if (v11 != objc_msgSend(v14, "paintTransitCounts"))
    {
      *(_BYTE *)(*((_QWORD *)this + 47) + 321) = objc_msgSend(v14, "paintTransitCounts");
      v12 = *((_DWORD *)this + 102);
      if ((v12 + 1) > 1)
        v13 = v12 + 1;
      else
        v13 = 1;
      *((_DWORD *)this + 102) = v13;
      *((_BYTE *)this + 416) = 1;
    }

  }
}

void sub_19F4077A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void md::TransitRenderLayer::debugLayoutWithContext(md::TransitRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t v2;
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  float32x2_t *v26;
  double v27;
  double v28;
  uint64_t v29;
  int v30;
  float32x2_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  double v38;
  unint64_t *v39;
  unint64_t v40;
  char v41;
  float v42;
  int v43;
  float v44;
  float v45;
  unint64_t *v46;
  unint64_t v47;
  float v48;
  unint64_t *v49;
  unint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  _QWORD *v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  _DWORD *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  float v65;
  float v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  uint64_t v75;
  std::__shared_weak_count *v76;
  float v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  double v82;
  unint64_t *v83;
  unint64_t v84;
  char v85;
  float v86;
  int v87;
  float v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  float32_t v93;
  int8x16_t *v94;
  size_t v95;
  double v96;
  int32x2_t v97;
  float v98;
  float v99;
  _DWORD __p[5];
  float v101;
  uint64_t v102;
  uint64_t v103;
  float v104;
  int v105;
  float v106;
  int v107;
  float v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  _BYTE v112[20];
  float v113;
  uint64_t v114;
  uint64_t v115;
  float v116;
  int v117;
  float32x2_t v118;
  float v119;
  int v120;

  v2 = *((_QWORD *)this + 47);
  v3 = (_QWORD *)*((_QWORD *)a2 + 1);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_39;
  v7 = (uint8x8_t)vcnt_s8(v4);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v8 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v8 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v9 = *(_QWORD **)(*v3 + 8 * v8);
  if (!v9)
    goto LABEL_39;
  v10 = (_QWORD *)*v9;
  if (!v10)
    goto LABEL_39;
  if (v7.u32[0] < 2uLL)
  {
    v11 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v13 = v10[1];
      if (v13 == 0x1AF456233693CD46)
      {
        if (v10[2] == 0x1AF456233693CD46)
          goto LABEL_22;
      }
      else if ((v13 & v11) != v8)
      {
        goto LABEL_39;
      }
      v10 = (_QWORD *)*v10;
      if (!v10)
        goto LABEL_39;
    }
  }
  while (1)
  {
    v12 = v10[1];
    if (v12 == 0x1AF456233693CD46)
      break;
    if (v12 >= *(_QWORD *)&v4)
      v12 %= *(_QWORD *)&v4;
    if (v12 != v8)
      goto LABEL_39;
LABEL_11:
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_39;
  }
  if (v10[2] != 0x1AF456233693CD46)
    goto LABEL_11;
LABEL_22:
  v14 = v10[5];
  if (*(_QWORD *)(v14 + 8) != 0x1AF456233693CD46 || (v15 = *(_QWORD **)(v14 + 32)) == 0)
  {
LABEL_39:
    *(_BYTE *)(v2 + 296) = 0;
    return;
  }
  *(_QWORD *)(v2 + 160) = v15[672];
  *(_QWORD *)(v2 + 168) = v15[673];
  *(_QWORD *)(v2 + 176) = v15[674];
  *(_QWORD *)(v2 + 184) = v15[675];
  *(_QWORD *)(v2 + 192) = v15[676];
  *(_QWORD *)(v2 + 200) = v15[677];
  *(_QWORD *)(v2 + 208) = v15[678];
  *(_QWORD *)(v2 + 216) = v15[679];
  *(_QWORD *)(v2 + 224) = v15[680];
  *(_QWORD *)(v2 + 232) = v15[681];
  *(_QWORD *)(v2 + 240) = v15[682];
  *(_QWORD *)(v2 + 248) = v15[683];
  *(_QWORD *)(v2 + 256) = v15[684];
  *(_QWORD *)(v2 + 264) = v15[685];
  *(_QWORD *)(v2 + 272) = v15[686];
  *(_QWORD *)(v2 + 280) = v15[687];
  objc_msgSend(*(id *)a2, "sizeInPixels");
  *(float *)&v16 = v16;
  *(float *)&v17 = v17;
  *(_DWORD *)(v2 + 288) = LODWORD(v16);
  *(_DWORD *)(v2 + 292) = LODWORD(v17);
  *(_BYTE *)(v2 + 296) = 1;
  v18 = *((_QWORD *)this + 47);
  v19 = *(_QWORD *)(v18 + 304);
  if (v19)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19)
      || (v20 = *((_QWORD *)this + 34), v21 = *((_QWORD *)this + 35), v20 == v21))
    {
LABEL_30:
      *(_QWORD *)v112 = 0;
      *(_QWORD *)&v112[8] = 0;
      md::TransitRenderLayer::setDebugHighlightedItem((uint64_t)this, v112);
      v18 = *((_QWORD *)this + 47);
      v22 = *(_QWORD *)(v18 + 304);
    }
    else
    {
      v18 = *((_QWORD *)this + 47);
      v22 = *(_QWORD *)(v18 + 304);
      while (*(_QWORD *)(*(_QWORD *)v20 + 384) != **(_QWORD **)(v22 + 8))
      {
        v20 += 8;
        if (v20 == v21)
          goto LABEL_30;
      }
    }
    if (v22)
      goto LABEL_33;
  }
  if (*(_BYTE *)(v18 + 321))
  {
LABEL_33:
    v23 = 1;
    goto LABEL_34;
  }
  if (*(_BYTE *)(v18 + 320))
  {
    v23 = 0;
LABEL_34:
    v24 = md::LayoutContext::debugConsoleForId((id *)a2, 4);
    v25 = md::LayoutContext::debugConsoleForId((id *)a2, 5);
    if (v24)
    {
      v26 = (float32x2_t *)v25;
      if (v25)
      {
        if ((v23 & 1) != 0 || !*(_BYTE *)(*((_QWORD *)this + 47) + 320))
        {
          objc_msgSend(*(id *)(*((_QWORD *)this + 5) + 104), "contentScale");
          v28 = v27;
          md::LayoutContext::frameState(a2);
          v30 = *(unsigned __int8 *)(v29 + 128);
          v31 = *(float32x2_t *)(*((_QWORD *)this + 47) + 288);
          v32 = *((_QWORD *)a2 + 4);
          v33 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
          if (v33)
          {
            p_shared_owners = (unint64_t *)&v33->__shared_owners_;
            do
              v35 = __ldxr(p_shared_owners);
            while (__stxr(v35 + 1, p_shared_owners));
            v36 = *((_QWORD *)a2 + 4);
            v37 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
            v38 = *(double *)(v32 + 64);
            if (v37)
            {
              v39 = (unint64_t *)&v37->__shared_owners_;
              do
                v40 = __ldxr(v39);
              while (__stxr(v40 + 1, v39));
              v41 = 0;
            }
            else
            {
              v41 = 1;
            }
            v32 = v36;
          }
          else
          {
            v37 = 0;
            v38 = *(double *)(v32 + 64);
            v41 = 1;
          }
          v42 = v38;
          v43 = *(unsigned __int8 *)(v32 + 72);
          *(float *)v112 = 2.0 / v31.f32[0];
          v44 = v31.f32[1];
          *(_OWORD *)&v112[4] = 0uLL;
          v113 = 2.0 / v31.f32[1];
          v45 = v42 + -1.0;
          if (!v43)
            v45 = 1.0 - v42;
          v114 = 0;
          v115 = 0;
          v116 = v45 * 0.5;
          v117 = 0;
          v118 = vdiv_f32(vneg_f32(v31), v31);
          v119 = (float)(v42 * 0.5) + 0.5;
          v120 = 1065353216;
          v98 = v31.f32[0];
          if ((v41 & 1) == 0)
          {
            v46 = (unint64_t *)&v37->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          v48 = v28;
          v99 = v48;
          if (v33)
          {
            v49 = (unint64_t *)&v33->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          ggl::DebugConsole::setProjection((uint64_t)v26, v112);
          ggl::DebugConsole::begin((ggl::DebugConsole *)v26);
          v26[10] = 0;
          v26[13].f32[0] = fabsf(v99 + v99) * 0.5;
          v26[12].i32[0] = -8388353;
          v26[4] = vmul_n_f32((float32x2_t)0x4120000041000000, v99);
          v51 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
          v52 = *((_QWORD *)this + 47);
          if (*(_BYTE *)(v52 + 321))
          {
            v53 = *(_QWORD *)(v52 + 304);
            if (v53)
            {
              md::TransitTileData::debugString(**(md::TransitTileData ***)(v53 + 8));
              v54 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v51, "appendString:", v54);

              v52 = *((_QWORD *)this + 47);
            }
          }
          if (*(_QWORD *)(v52 + 304))
          {
            v55 = (_QWORD *)*((_QWORD *)a2 + 1);
            v56 = v55[1];
            if ((v56 & (v56 - 1)) != 0)
            {
              v58 = 0x1AF456233693CD46;
              if (v56 <= 0x1AF456233693CD46)
                v58 = 0x1AF456233693CD46 % v56;
              v57 = *(_QWORD **)(*v55 + 8 * v58);
              do
              {
                do
                  v57 = (_QWORD *)*v57;
                while (v57[1] != 0x1AF456233693CD46);
              }
              while (v57[2] != 0x1AF456233693CD46);
            }
            else
            {
              v57 = *(_QWORD **)(*v55 + 8 * ((v56 - 1) & 0x1AF456233693CD46));
              do
              {
                do
                  v57 = (_QWORD *)*v57;
                while (v57[1] != 0x1AF456233693CD46);
              }
              while (v57[2] != 0x1AF456233693CD46);
            }
            objc_msgSend(v51, "appendFormat:", CFSTR("LayoutZoom:%.2f\n"), fmaxf(*(float *)(*(_QWORD *)(v57[5] + 32) + 3080) + *(float *)(*(_QWORD *)(v57[5] + 32) + 3072), 1.0));
            md::HighlightHelper::to_string((md::HighlightHelper *)__p, (const QuadTile *)(**(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 47) + 304) + 8) + 168));
            if (v101 >= 0.0)
              v59 = __p;
            else
              v59 = *(_DWORD **)__p;
            objc_msgSend(v51, "appendFormat:", CFSTR("Tile:%s\n"), v59);
            if (SHIBYTE(v101) < 0)
              operator delete(*(void **)__p);
            (*(void (**)(_QWORD, float32x2_t *, uint64_t, BOOL))(**(_QWORD **)(*((_QWORD *)this + 47) + 304)
                                                                         + 40))(*(_QWORD *)(*((_QWORD *)this + 47) + 304), v26, *((_QWORD *)this + 47) + 160, (v30 - 4) < 0xFFFFFFFD);
            (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)this + 47) + 304) + 32))(*(_QWORD *)(*((_QWORD *)this + 47) + 304), 0);
            v60 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v51, "appendString:", v60);

          }
          ggl::DebugConsole::end((uint64_t)v26);
          v61 = *((_QWORD *)this + 47);
          if (!*(_BYTE *)(v61 + 322))
          {
            objc_msgSend(MEMORY[0x1E0CB3500], "newlineCharacterSet");
            v62 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v51, "componentsSeparatedByCharactersInSet:", v62);
            v63 = (void *)objc_claimAutoreleasedReturnValue();
            v64 = objc_msgSend(v63, "count");

            v65 = *(float *)(v24 + 24);
            v66 = *(float *)(v24 + 28);
            md::LayoutContext::frameState(a2);
            v68 = *v67;
            v69 = v67[1];
            v70 = v69 + 10.0;
            v71 = *v67 + 10.0;
            v72 = (float)(v69 + 10.0) + (float)(v65 * 75.0);
            v73 = v71 + (float)(v66 * (float)v64);
            if (v72 < (float)(v69 + 10.0) || v73 < v71)
            {
              v68 = *v67 + 10.0;
              v69 = v69 + 10.0;
            }
            else
            {
              v72 = v72 + 10.0;
              v73 = v73 + 10.0;
            }
            v110 = __PAIR64__(LODWORD(v68), LODWORD(v69));
            v111 = __PAIR64__(LODWORD(v73), LODWORD(v72));
            v75 = *((_QWORD *)a2 + 4);
            v76 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
            v77 = v98 / v99;
            if (v76)
            {
              v78 = (unint64_t *)&v76->__shared_owners_;
              do
                v79 = __ldxr(v78);
              while (__stxr(v79 + 1, v78));
              v80 = *((_QWORD *)a2 + 4);
              v81 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
              v82 = *(double *)(v75 + 64);
              if (v81)
              {
                v83 = (unint64_t *)&v81->__shared_owners_;
                do
                  v84 = __ldxr(v83);
                while (__stxr(v84 + 1, v83));
                v85 = 0;
              }
              else
              {
                v85 = 1;
              }
              v75 = v80;
            }
            else
            {
              v81 = 0;
              v82 = *(double *)(v75 + 64);
              v85 = 1;
            }
            v86 = v82;
            v87 = *(unsigned __int8 *)(v75 + 72);
            *(float *)__p = 2.0 / v77;
            *(_QWORD *)&__p[3] = 0;
            *(_QWORD *)&__p[1] = 0;
            v101 = (float)(v99 * -2.0) / v44;
            v88 = v86 + -1.0;
            if (!v87)
              v88 = 1.0 - v86;
            v102 = 0;
            v103 = 0;
            v104 = v88;
            v105 = 0;
            v106 = (float)-v77 / v77;
            v107 = 1065353216;
            v108 = v86;
            v109 = 1065353216;
            if ((v85 & 1) == 0)
            {
              v89 = (unint64_t *)&v81->__shared_owners_;
              do
                v90 = __ldaxr(v89);
              while (__stlxr(v90 - 1, v89));
              if (!v90)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }
            if (v76)
            {
              v91 = (unint64_t *)&v76->__shared_owners_;
              do
                v92 = __ldaxr(v91);
              while (__stlxr(v92 - 1, v91));
              if (!v92)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
            ggl::DebugConsole::setProjection(v24, __p);
            ggl::DebugConsole::begin((ggl::DebugConsole *)v24);
            *(_QWORD *)(v24 + 80) = 0;
            *(_DWORD *)(v24 + 96) = 922746880;
            v93 = *(float *)&v110;
            *(_QWORD *)(v24 + 8) = v110;
            ggl::DebugConsole::drawRectangleWithFill((float32x2_t *)v24, (float32x2_t *)&v111, v93);
            *(_WORD *)(v24 + 96) = 0;
            *(_BYTE *)(v24 + 98) = 0;
            *(_DWORD *)(v24 + 99) = -1;
            *(_BYTE *)(v24 + 103) = -76;
            *(float *)(v24 + 8) = v70;
            *(float *)(v24 + 12) = v71;
            v94 = (int8x16_t *)objc_msgSend(objc_retainAutorelease(v51), "UTF8String");
            v95 = strlen(v94->i8);
            ggl::DebugConsole::drawString(v24, v94, v95, v96, v97);
            ggl::DebugConsole::end(v24);
            v61 = *((_QWORD *)this + 47);
          }
          *(_BYTE *)(v61 + 320) = 1;

        }
        else
        {
          ggl::DebugConsole::begin((ggl::DebugConsole *)v24);
          *(_QWORD *)(v24 + 80) = 0;
          ggl::DebugConsole::end(v24);
          ggl::DebugConsole::begin((ggl::DebugConsole *)v26);
          v26[10] = 0;
          ggl::DebugConsole::end((uint64_t)v26);
          *(_BYTE *)(*((_QWORD *)this + 47) + 320) = 0;
        }
      }
    }
  }
}

void sub_19F4080AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_19F408118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void altitude::CameraManager::~CameraManager(altitude::CameraManager *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void altitude::CameraManager::update(altitude::CameraManager *this, altitude::GlobeView *a2, int a3)
{
  _BOOL4 v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  long double v17;
  long double v18;
  long double v19;
  double v20;
  double v21;
  long double v22;
  __double2 v23;
  double v24;
  __double2 v25;
  uint64_t v26;
  double v27;
  double v28;
  __double2 v29;
  double v30;
  double v31;
  __double2 v32;
  double v33;
  double v34;
  double v36;
  double v37;
  int v38;
  double v39;
  double v40;
  __double2 v41;
  double v42;
  double v43;
  double v44;
  __double2 v45;
  double v46;
  double v47;
  double v48;
  __double2 v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  uint64_t v63;
  double v64;
  double v65;
  double v66;
  __double2 v67;
  double v68;
  double v69;
  __double2 v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  __double2 v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  __double2 v107;
  double v108;
  double v109;
  __double2 v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v120;
  double v121;
  float64x2_t v122;
  int32x2_t v123;
  int32x2_t v124;
  int32x2_t v125;
  uint64_t v126;
  double v127;
  double v128;
  int64x2_t v129;
  float64x2_t v130;
  uint64_t v131;
  uint64_t v132;
  float64x2_t v133;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  int v138;
  int v139;
  int32x2_t v140;
  double v141;
  double v142;
  double v143;
  float64_t v144;
  float64_t v145;
  float64_t v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  __double2 v154;
  long double v155;
  long double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  int v174;
  double v175;
  double v176;
  __double2 v177;
  __double2 v178;
  double v179;
  double v180;
  __double2 v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  int v223;
  __int128 v224;
  __int128 v225;
  int isFlyoverTileAtTarget;
  int v227;
  char v228;
  int v229;
  uint64_t v230;
  double v231;
  double v232;
  __double2 v233;
  double v234;
  double v235;
  __double2 v236;
  uint64_t v237;
  double v238;
  double v239;
  double v240;
  double v241;
  uint64_t v242;
  unsigned __int8 v243;
  uint64_t v244;
  unsigned __int8 v245;
  uint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *p_shared_owners;
  unint64_t v249;
  _BOOL4 v250;
  unint64_t *v251;
  unint64_t v252;
  uint64_t v253;
  float v254;
  unsigned __int8 v255;
  uint64_t v256;
  unsigned __int8 v257;
  uint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  double v262;
  double *v263;
  double v264;
  double v265;
  __double2 v266;
  double v267;
  double v268;
  __double2 v269;
  double v270;
  double v271;
  double v272;
  double v273;
  double v274;
  double v275;
  double v276;
  double v277;
  double v278;
  double v279;
  double v280;
  double v281;
  double v282;
  float v283;
  float v284;
  __int128 v285;
  double v286;
  double v287;
  double v288;
  __double2 v289;
  __double2 v290;
  double v291;
  double v292;
  double v293;
  double v294;
  double v295;
  double v296;
  double v297;
  __double2 v298;
  double v299;
  double v300;
  double v301;
  double v302;
  double v303;
  double v304;
  double v305;
  double v306;
  double v307;
  double v308;
  double v309;
  double *v310;
  double v311;
  double v312;
  double v313;
  double v314;
  long double v315;
  double v316;
  double v317;
  double v318;
  double v319;
  double v320;
  double v321;
  double v322;
  double v323;
  BOOL v324;
  double v325;
  double v326;
  int8x16_t v327;
  double v328;
  double v329;
  double v330;
  double v331;
  double v332;
  double v333;
  double v334;
  double v335;
  double v336;
  double v337;
  double v338;
  double v339;
  double v340;
  double v341;
  int8x16_t v342;
  uint64_t v343;
  double v344;
  double v346;
  long double v347;
  double v348;
  long double v349;
  long double v350;
  long double v351;
  char *v352;
  float64x2_t v353;
  char v354;
  double v355;
  double v356;
  unint64_t *v357;
  unint64_t v358;
  double v359;
  double v360;
  char v361;
  double v362;
  double v363;
  double v364;
  double v365;
  float64x2_t *v366;
  int8x16_t v367;
  double v368;
  double v369;
  double v370;
  double v371;
  double v372;
  double v373;
  double v374;
  double v375;
  double v376;
  double v377;
  double v378;
  double v379;
  double v380;
  double v381;
  double v382;
  double v383;
  double v384;
  double v385;
  double v386;
  int32x2_t v387;
  double v388;
  double v389;
  double v390;
  double v391;
  double v392;
  double v393;
  double v394;
  double v395;
  double v396;
  double v397;
  double v398;
  double v399;
  double v400;
  float64x2_t v401;
  double v402;
  int8x16_t v403;
  double v404;
  double v405;
  double v406;
  double v407;
  double v408;
  double v409;
  double v410;
  double v411;
  double v412;
  double v413;
  double v414;
  double v415;
  double v416;
  double v417;
  double v418[2];
  long double v419;
  float64x2_t v420;
  double v421;
  double v422;
  double v423;
  double v424;
  double v425;
  float64x2_t v426;
  double v427;
  __int128 v428;
  __int128 v429;
  _BYTE v430[24];
  _BYTE v431[24];
  uint64_t v432;

  v432 = *MEMORY[0x1E0C80C00];
  v6 = *((_BYTE *)this + 8) != 0;
  if (*((_BYTE *)this + 8))
  {
    altitude::GlobeView::getCoordAtScreenPosition((uint64_t)a2, (int *)this + 3, 0, (uint64_t)this + 40, 1);
    *((_BYTE *)this + 9) = 1;
  }
  if (*((_BYTE *)this + 73))
  {
    v6 = 1;
    altitude::GlobeView::getCoordAtScreenPosition((uint64_t)a2, (int *)this + 26, 0, (uint64_t)this + 80, 1);
    *((_BYTE *)this + 74) = 1;
  }
  if (!*((_BYTE *)this + 120))
  {
    if (!*((_BYTE *)this + 176))
    {
      if (!v6)
        goto LABEL_16;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  altitude::GlobeView::getCoordAtScreenPosition((uint64_t)a2, (int *)this + 38, 0, (uint64_t)this + 128, 1);
  *((_BYTE *)this + 121) = 1;
  if (*((_BYTE *)this + 176))
  {
LABEL_9:
    altitude::GlobeView::getCoordAtScreenPosition((uint64_t)a2, (int *)this + 52, 0, (uint64_t)this + 184, 1);
    *((_QWORD *)this + 28) = *(_QWORD *)(*((_QWORD *)a2 + 9) + 32);
    *((_BYTE *)this + 177) = 1;
  }
LABEL_10:
  v7 = *((_QWORD *)a2 + 66);
  if (v7)
  {
    v8 = (double *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 24))(v7, 0, 0xFFFFFFFFLL);
    if (v8)
    {
      v9 = v8[10];
      v10 = v8[11];
      v11 = v8[12];
      v12 = v8[9];
      v13 = v10 * (v12 + v12) + v11 * (v9 + v9);
      v14 = -((v9 + v9) * v10 - v11 * (v12 + v12));
      v15 = *((_QWORD *)a2 + 9);
      v16 = *(double *)(v15 + 32);
      v17 = v8[6] - v16 * v13;
      v18 = v8[7] + v16 * v14;
      v19 = v8[8] + v16 * ((v12 + v12) * v12 + -1.0 + (v9 + v9) * v9);
      v20 = sqrt(v17 * v17 + v18 * v18);
      v21 = atan2(v19, v20 * 0.996647189);
      v22 = atan2(v18, v17);
      v23 = __sincos_stret(v21);
      v24 = atan2(v19 + v23.__sinval * v23.__sinval * 42841.3115 * v23.__sinval, v20 + v23.__cosval * v23.__cosval * -42697.6727 * v23.__cosval);
      v25 = __sincos_stret(v24);
      *(double *)(v15 + 8) = v24;
      *(long double *)(v15 + 16) = v22;
      *(double *)(v15 + 24) = v20 / v25.__cosval + -6378137.0 / sqrt(v25.__sinval * v25.__sinval * -0.00669437999 + 1.0);
    }
  }
  if (!*((_BYTE *)this + 8) || !*((_BYTE *)this + 241))
    *((_BYTE *)this + 242) = 0;
LABEL_16:
  v26 = *((_QWORD *)a2 + 9);
  gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric(v426.f64, (double *)(v26 + 8));
  v27 = *(double *)(v26 + 16);
  v28 = *(double *)(v26 + 24);
  v29 = __sincos_stret(*(double *)(v26 + 8));
  v30 = 6378137.0 / sqrt(v29.__sinval * v29.__sinval * -0.00669437999 + 1.0);
  v31 = (v30 + v28) * v29.__cosval;
  v32 = __sincos_stret(v27);
  v409 = v31 * v32.__sinval;
  v413 = v31 * v32.__cosval;
  *(double *)v430 = v31 * v32.__cosval;
  *(double *)&v430[8] = v31 * v32.__sinval;
  v404 = (v28 + v30 * 0.99330562) * v29.__sinval;
  *(double *)&v430[16] = v404;
  v33 = v426.f64[0];
  *(float64x2_t *)v431 = v426;
  _D15 = v427;
  v34 = *(double *)&v428;
  *(double *)&v431[16] = v427;
  v36 = (v34 + v34) * *((double *)&v428 + 1) + *((double *)&v429 + 1) * (*(double *)&v429 * -2.0);
  v390 = -(*(double *)&v429 * -2.0 * *((double *)&v428 + 1) - (v34 + v34) * *((double *)&v429 + 1));
  v391 = *(double *)&v429 * -2.0 * *(double *)&v429 + 1.0 - (v34 + v34) * v34;
  v37 = v426.f64[1];
  if (!*((_BYTE *)this + 9)
    || *((_DWORD *)this + 3) == *((_DWORD *)this + 5) && *((_DWORD *)this + 4) == *((_DWORD *)this + 6))
  {
    v38 = 0;
    if (!*((_BYTE *)this + 74))
      goto LABEL_21;
    goto LABEL_20;
  }
  v123 = *(int32x2_t *)((char *)this + 20);
  v124 = *(int32x2_t *)((char *)this + 12);
  v395 = v426.f64[1];
  v401 = v426;
  if (*((_BYTE *)this + 72))
  {
    v125 = vsub_s32(v124, v123);
    v123 = *(int32x2_t *)((char *)this + 28);
    v124 = vadd_s32(v125, v123);
  }
  v126 = *((_QWORD *)a2 + 99);
  v127 = *(double *)(v26 + 32);
  v128 = cos(*(long double *)(v26 + 40));
  v129.i64[0] = v124.i32[0];
  v129.i64[1] = v124.i32[1];
  v130 = vcvtq_f64_s64(v129);
  v131 = *(_QWORD *)(v126 + 40);
  v132 = *(_QWORD *)(v126 + 48);
  v129.i64[0] = (int)v131;
  v129.i64[1] = SHIDWORD(v131);
  v133 = vcvtq_f64_s64(v129);
  v129.i64[0] = (int)v132;
  v129.i64[1] = SHIDWORD(v132);
  __asm { FMOV            V4.2D, #0.5 }
  v135 = vmulq_f64(vsubq_f64(vcvtq_f64_s64(v129), v133), _Q4);
  v136 = vaddq_f64(v135, v133);
  v137 = vmulq_n_f64(v135, v128);
  *(int32x2_t *)&v130.f64[0] = vmovn_s64(vcvtq_s64_f64(vminnmq_f64(vaddq_f64(v137, v136), vmaxnmq_f64(vsubq_f64(v136, v137), v130))));
  v138 = LODWORD(v130.f64[0]);
  v387 = *(int32x2_t *)&v130.f64[0];
  v139 = HIDWORD(v130.f64[0]);
  if (!altitude::GlobeView::getDirFromScreenPosition((uint64_t)a2, &v426, (float)SLODWORD(v130.f64[0]), (float)SHIDWORD(v130.f64[0]))|| (v140 = vadd_s32(vsub_s32(v123, v124), v387), !altitude::GlobeView::getDirFromScreenPosition((uint64_t)a2, &v420, (float)v140.i32[0], (float)v140.i32[1])))
  {
    v38 = 0;
    v37 = v395;
    v33 = v401.f64[0];
    if (!*((_BYTE *)this + 74))
      goto LABEL_21;
LABEL_20:
    v39 = *((double *)this + 11);
    v40 = *((double *)this + 12);
    v392 = v37;
    v398 = v33;
    v41 = __sincos_stret(*((double *)this + 10));
    v42 = 6378137.0 / sqrt(v41.__sinval * v41.__sinval * -0.00669437999 + 1.0);
    v43 = v36;
    v44 = (v42 + v40) * v41.__cosval;
    v45 = __sincos_stret(v39);
    v46 = v44 * v45.__cosval;
    v47 = v44 * v45.__sinval;
    v48 = (v40 + v42 * 0.99330562) * v41.__sinval;
    v49 = __sincos_stret(*((double *)this + 14) * 0.5);
    v50 = v49.__sinval / sqrt(v46 * v46 + v47 * v47 + v48 * v48);
    v51 = v50 * v46;
    v52 = v50 * v47;
    v53 = v50 * v48;
    v54 = -(v53 * v392 - v52 * _D15) - (v53 * v392 - v52 * _D15);
    v55 = -(v51 * _D15 - v53 * v398) - (v51 * _D15 - v53 * v398);
    v56 = -(v52 * v398 - v51 * v392) - (v52 * v398 - v51 * v392);
    v33 = v398 + v54 * v49.__cosval + v56 * v52 - v55 * v53;
    v37 = v392 + v54 * v53 + v55 * v49.__cosval - v56 * v51;
    _D15 = _D15 + v55 * v51 + v56 * v49.__cosval - v54 * v52;
    *(double *)v431 = v33;
    *(double *)&v431[8] = v37;
    *(double *)&v431[16] = _D15;
    v57 = -(v53 * v409 - v52 * v404) - (v53 * v409 - v52 * v404);
    v58 = -(v51 * v404 - v53 * v413) - (v51 * v404 - v53 * v413);
    v59 = -(v52 * v413 - v51 * v409) - (v52 * v413 - v51 * v409);
    v409 = v409 + v57 * v53 + v58 * v49.__cosval - v59 * v51;
    v413 = v413 + v57 * v49.__cosval + v59 * v52 - v58 * v53;
    *(double *)v430 = v413;
    *(double *)&v430[8] = v409;
    v404 = v404 + v58 * v51 + v59 * v49.__cosval - v57 * v52;
    *(double *)&v430[16] = v404;
    v60 = -(v391 * v53 - v390 * v52) - (v391 * v53 - v390 * v52);
    v61 = -(v51 * v390 - v43 * v53) - (v51 * v390 - v43 * v53);
    v62 = -(v43 * v52 - v391 * v51) - (v43 * v52 - v391 * v51);
    v36 = v43 + v60 * v49.__cosval + v62 * v52 - v61 * v53;
    v390 = v390 - v60 * v52 + v61 * v51 + v62 * v49.__cosval;
    v391 = v391 + v60 * v53 + v61 * v49.__cosval - v62 * v51;
    *((_QWORD *)this + 14) = 0;
    v38 = 1;
    goto LABEL_21;
  }
  v388 = v36;
  v142 = v426.f64[1];
  v141 = v427;
  v410 = v421;
  v414 = v127 * 0.2;
  v143 = v426.f64[0];
  v405 = v420.f64[1];
  v379 = v420.f64[0];
  v144 = -(v426.f64[1] * v421 - v427 * v420.f64[1]);
  v145 = -(v420.f64[0] * v427 - v426.f64[0] * v421);
  v146 = -(v426.f64[0] * v420.f64[1] - v420.f64[0] * v426.f64[1]);
  v147 = 1.0 / sqrt(v144 * v144 + v145 * v145 + v146 * v146);
  v373 = v147 * v145;
  v376 = v147 * v144;
  v384 = v147 * v146;
  altitude::GlobeView::getSpherePointIntersection((uint64_t)a2, v138, v139, 1, (double *)this + 5, (double *)(*((_QWORD *)a2 + 9) + 8), v418, 1);
  v148 = _D15;
  v149 = v418[0];
  v150 = v418[1];
  v151 = v419;
  v152 = sqrt(v149 * v149 + v150 * v150);
  v153 = atan2(v419, v152 * 0.996647189);
  v154 = __sincos_stret(v153);
  v155 = atan2(v151 + v154.__sinval * v154.__sinval * 42841.3115 * v154.__sinval, v152 + v154.__cosval * v154.__cosval * -42697.6727 * v154.__cosval);
  v156 = cos(v155);
  v157 = fmax(v414, sqrt((v149 - v401.f64[0]) * (v149 - v401.f64[0]) + (v150 - v395) * (v150 - v395) + (v151 - v148)* (v151 - v148)));
  v158 = sqrt(v157 * v157 + v157 * v157 - (v379 * v143 + v405 * v142 + v410 * v141) * (v157 * v157 + v157 * v157));
  *((double *)this + 8) = v158;
  v159 = v158
       * (0.000000156961014
        * fmin(1.0/ fabs(-(v395 * v142 + v148 * v141 + v401.f64[0] * v143)/ sqrt(vmulq_f64(v401, v401).f64[0] + v395 * v395 + v148 * v148)), 2.0));
  v411 = *(double *)&v430[8];
  v415 = *(double *)&v430[16];
  v160 = 1.0 / sqrt(*(double *)v430 * *(double *)v430 + v411 * v411 + v415 * v415);
  v406 = *(double *)v430;
  v161 = v160 * *(double *)v430;
  v162 = -(*(double *)&v430[8] * v160);
  v163 = 1.0 / sqrt(v162 * v162 + v161 * v161);
  v164 = v163 * v162;
  v165 = v163 * v161;
  v380 = -(v163 * v162);
  v369 = v163 * v162 * v376 + v163 * v161 * v373;
  v371 = -(v163 * v162 * v373 - v163 * v161 * v376);
  v166 = -(v148 * (v163 * v161));
  v167 = -(v164 * v395 - v163 * v161 * v401.f64[0]);
  v168 = v159
       * fmin(1.0 / v156, 4.0)
       * (v164 * v148 * v373 + v167 * v384 + v166 * v376)
       / sqrt(v166 * v166 + v164 * v148 * (v164 * v148) + v167 * v167);
  v169 = fmax(fabs(v155), 1.30899694);
  v170 = 1.0;
  if (v169 <= 1.48352986)
    v171 = v169 * 5.72957795 + -7.5;
  else
    v171 = 1.0;
  v172 = -((v171 * 2.0 + -3.0) * (v171 * v171));
  v173 = v168 + -(v168 - v159 * v384) * v172;
  if (*(double *)(*((_QWORD *)a2 + 9) + 32) > 1000000.0)
  {
    v174 = *((_DWORD *)this + 4) - *((_DWORD *)this + 8);
    if (v174)
    {
      v175 = fmax(fabs((double)(*((_DWORD *)this + 3) - *((_DWORD *)this + 7)) / (double)v174), 1.0);
      if (v175 <= 2.0)
        v176 = v175 + -1.0;
      else
        v176 = 1.0;
      v170 = v176 * v176 * (v176 * 2.0 + -3.0) + 1.0;
    }
  }
  v177 = __sincos_stret(v173 * 0.5);
  v178 = __sincos_stret(v159 * 0.5 * v170 * v369);
  v179 = -(v178.__sinval * v165 * v177.__sinval - v178.__sinval * v164 * v177.__cosval);
  v180 = v178.__sinval * v164 * v177.__sinval + v178.__sinval * v165 * v177.__cosval;
  v181 = __sincos_stret(v159 * 0.5 * v172 * v371);
  v182 = v179 * v181.__cosval
       - (v178.__cosval * v177.__sinval * (v181.__sinval * v380)
        - v178.__cosval * v177.__cosval * (v181.__sinval * v165));
  v183 = v178.__cosval * v177.__cosval * (v181.__sinval * v380)
       + v178.__cosval * v177.__sinval * (v181.__sinval * v165)
       + v180 * v181.__cosval;
  v184 = v178.__cosval * v177.__sinval * v181.__cosval - (v180 * (v181.__sinval * v165) - v179 * (v181.__sinval * v380));
  v185 = -(v180 * (v181.__sinval * v380) + v179 * (v181.__sinval * v165) - v178.__cosval * v177.__cosval * v181.__cosval);
  v187 = *(double *)&v431[8];
  v186 = *(double *)&v431[16];
  v188 = *(double *)v431;
  v189 = -(v184 * v187 - v183 * v186) - (v184 * v187 - v183 * v186);
  v190 = -(v182 * v186 - v184 * v188) - (v182 * v186 - v184 * v188);
  v191 = -(v183 * v188 - v182 * v187) - (v183 * v188 - v182 * v187);
  v33 = *(double *)v431 + v189 * v185 + v191 * v183 - v190 * v184;
  v37 = *(double *)&v431[8] + v189 * v184 + v190 * v185 - v191 * v182;
  _D15 = *(double *)&v431[16] + v190 * v182 + v191 * v185 - v189 * v183;
  *(double *)v431 = v33;
  *(double *)&v431[8] = v37;
  *(double *)&v431[16] = _D15;
  v192 = -(v411 * v184 - v183 * v415) - (v411 * v184 - v183 * v415);
  v193 = -(v182 * v415 - v406 * v184) - (v182 * v415 - v406 * v184);
  v194 = -(v406 * v183 - v411 * v182) - (v406 * v183 - v411 * v182);
  v195 = v406 + v192 * v185 + v194 * v183 - v193 * v184;
  v196 = v411 + v192 * v184 + v193 * v185 - v194 * v182;
  v197 = v415 - v192 * v183 + v193 * v182 + v194 * v185;
  v409 = v196;
  v413 = v195;
  *(double *)v430 = v195;
  *(double *)&v430[8] = v196;
  v404 = v197;
  *(double *)&v430[16] = v197;
  v198 = -(v391 * v184 - v390 * v183) - (v391 * v184 - v390 * v183);
  v199 = -(v390 * v182 - v388 * v184) - (v390 * v182 - v388 * v184);
  v200 = -(v388 * v183 - v391 * v182) - (v388 * v183 - v391 * v182);
  v36 = v388 + v198 * v185 + v200 * v183 - v199 * v184;
  v390 = v390 - v198 * v183 + v199 * v182 + v200 * v185;
  v391 = v391 + v198 * v184 + v199 * v185 - v200 * v182;
  *(_QWORD *)((char *)this + 20) = *(_QWORD *)((char *)this + 12);
  v38 = 1;
  if (*((_BYTE *)this + 74))
    goto LABEL_20;
LABEL_21:
  if (*((_BYTE *)this + 121))
  {
    v385 = v36;
    v63 = *((_QWORD *)a2 + 9);
    v381 = *((double *)this + 21);
    v64 = *(double *)(v63 + 40);
    v65 = *((double *)this + 17);
    v66 = *((double *)this + 18);
    v393 = v37;
    v399 = v33;
    v67 = __sincos_stret(*((double *)this + 16));
    v68 = 6378137.0 / sqrt(v67.__sinval * v67.__sinval * -0.00669437999 + 1.0);
    v69 = (v68 + v66) * v67.__cosval;
    v70 = __sincos_stret(v65);
    v71 = v69 * v70.__cosval;
    v72 = v69 * v70.__sinval;
    v73 = (v66 + v68 * 0.99330562) * v67.__sinval;
    v74 = *(double *)(v63 + 32) * 0.2;
    v75 = v413 - v399;
    v76 = v409 - v393;
    v77 = v404 - _D15;
    v78 = 1.0 / sqrt(v75 * v75 + v76 * v76 + v77 * v77);
    v79 = v78 * (v413 - v399);
    v80 = v78 * (v409 - v393);
    v81 = v78 * (v404 - _D15);
    if (v79 * (v69 * v70.__cosval - v399) + v80 * (v69 * v70.__sinval - v393) + v81 * (v73 - _D15) < v74)
    {
      v71 = v399 + v79 * v74;
      v72 = v393 + v80 * v74;
      v73 = _D15 + v81 * v74;
    }
    v82 = fmin(fmax(v64 + v381, 0.0), 3.14159265) - v64;
    v370 = v399 - v71;
    v372 = _D15;
    v368 = v393 - v72;
    v83 = _D15 - v73;
    v382 = v413 - v71;
    v374 = v404 - v73;
    v377 = v409 - v72;
    v85 = v390;
    v84 = v391;
    v86 = -(v391 * v77 - v390 * v76);
    v87 = v385;
    v88 = -(v390 * v75 - v385 * v77);
    v89 = -(v385 * v76 - v391 * v75);
    v90 = __sincos_stret(v82 * 0.5);
    v91 = v90.__sinval / sqrt(v86 * v86 + v88 * v88 + v89 * v89);
    v92 = v91 * v86;
    v93 = v91 * v88;
    v94 = v91 * v89;
    v95 = -(v94 * v368 - v93 * v83) - (v94 * v368 - v93 * v83);
    v96 = -(v92 * v83 - v94 * v370) - (v92 * v83 - v94 * v370);
    v97 = -(v93 * v370 - v92 * v368) - (v93 * v370 - v92 * v368);
    v33 = v399 + v95 * v90.__cosval + v97 * v93 - v96 * v94;
    v37 = v393 + v95 * v94 + v96 * v90.__cosval - v97 * v92;
    _D15 = v372 + v96 * v92 + v97 * v90.__cosval - v95 * v93;
    *(double *)v431 = v33;
    *(double *)&v431[8] = v37;
    *(double *)&v431[16] = _D15;
    v98 = -(v94 * v377 - v93 * v374) - (v94 * v377 - v93 * v374);
    v99 = -(v92 * v374 - v94 * v382) - (v92 * v374 - v94 * v382);
    v100 = -(v93 * v382 - v92 * v377) - (v93 * v382 - v92 * v377);
    v409 = v409 + v98 * v94 + v99 * v90.__cosval - v100 * v92;
    v413 = v413 + v98 * v90.__cosval + v100 * v93 - v99 * v94;
    *(double *)v430 = v413;
    *(double *)&v430[8] = v409;
    v404 = v404 + v99 * v92 + v100 * v90.__cosval - v98 * v93;
    *(double *)&v430[16] = v404;
    v101 = -(v94 * v84 - v93 * v85) - (v94 * v84 - v93 * v85);
    v102 = -(v92 * v85 - v87 * v94) - (v92 * v85 - v87 * v94);
    v103 = -(v87 * v93 - v92 * v84) - (v87 * v93 - v92 * v84);
    v36 = v385 + v101 * v90.__cosval + v103 * v93 - v102 * v94;
    v390 = v390 + v102 * v92 + v103 * v90.__cosval - v101 * v93;
    v391 = v391 + v101 * v94 + v102 * v90.__cosval - v103 * v92;
    *((_QWORD *)this + 21) = 0;
    v38 = 1;
  }
  if (*((_BYTE *)this + 177))
  {
    v394 = v37;
    v400 = v33;
    v386 = v36;
    v378 = altitude::GlobeView::calculateMinZoomDistance(a2);
    v375 = *((double *)a2 + 50);
    v383 = altitude::GlobeView::calculateMinZoomDistance(a2);
    v104 = *(double *)(*((_QWORD *)a2 + 9) + 32);
    if (v104 < *((double *)this + 28) * 0.125)
    {
      altitude::GlobeView::getCoordAtScreenPosition((uint64_t)a2, (int *)this + 52, 0, (uint64_t)this + 184, 1);
      *((_QWORD *)this + 28) = *(_QWORD *)(*((_QWORD *)a2 + 9) + 32);
    }
    v105 = *((double *)this + 24);
    v106 = *((double *)this + 25);
    v107 = __sincos_stret(*((double *)this + 23));
    v108 = 6378137.0 / sqrt(v107.__sinval * v107.__sinval * -0.00669437999 + 1.0);
    v109 = (v108 + v106) * v107.__cosval;
    v110 = __sincos_stret(v105);
    v111 = v109 * v110.__cosval;
    v112 = v109 * v110.__sinval;
    v113 = (v106 + v108 * 0.99330562) * v107.__sinval;
    v114 = *((double *)this + 27);
    *(double *)&_Q22 = v394;
    if (v114 > 1.0)
    {
      _Q22 = *(_OWORD *)&v431[8];
      _D15 = *(double *)&v431[16];
      __asm { FMLA            D5, D6, V22.D[1] }
      if (sqrt(_D5) - sqrt(v111 * v111 + v112 * v112 + v113 * v113) < v104 * 0.2)
      {
        v120 = 0.2 - v114 * 0.2;
        v121 = v120 * (v413 - v400);
        v122 = vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v430[8], *(float64x2_t *)&v431[8]), v120);
        *(double *)v431 = v121 + v400;
        *(float64x2_t *)&v431[8] = vaddq_f64(v122, *(float64x2_t *)&v431[8]);
        *(double *)v430 = v413 + v121;
        *(float64x2_t *)&v430[8] = vaddq_f64(*(float64x2_t *)&v430[8], v122);
        v36 = v386;
        goto LABEL_63;
      }
    }
    v201 = v111 - v400;
    v202 = v112 - *(double *)&_Q22;
    v203 = v113 - _D15;
    v204 = sqrt(v201 * v201 + v202 * v202 + v203 * v203);
    v205 = v204 * v114;
    v36 = v386;
    if (v114 >= 1.0)
    {
      if (v114 <= 1.0)
      {
        v207 = v204 * v114;
LABEL_59:
        v208 = v204 - v207;
        v209 = 1.0
             / sqrt((v413 - v400) * (v413 - v400)+ (v409 - *(double *)&_Q22) * (v409 - *(double *)&_Q22)+ (v404 - _D15) * (v404 - _D15));
        v210 = v209 * (v413 - v400);
        v211 = v209 * (v409 - *(double *)&_Q22);
        v212 = v209 * (v404 - _D15);
        v213 = v208 / v204;
        v214 = v400 + v213 * v201;
        v215 = *(double *)&_Q22 + v213 * v202;
        v216 = _D15 + v213 * v203;
        v217 = v111 * v111 + v112 * v112 + v113 * v113;
        v218 = v210 * v210 + v211 * v211 + v212 * v212;
        v219 = v210 * v214 + v211 * v215 + v212 * v216;
        v220 = v219 + v219;
        v221 = (v215 * v215 - (v217 - v214 * v214) + v216 * v216) * (-4.0 * v218) + v220 * v220;
        if (v221 < 0.0 || (v222 = (sqrt(v221) + v220) * -0.5 / v218, v222 < 0.0))
        {
          v223 = 0;
LABEL_64:
          v38 |= v223;
          goto LABEL_65;
        }
        *(double *)&v224 = v214;
        *((double *)&v224 + 1) = v215;
        *(double *)&v225 = v214 + v222 * v210;
        *((double *)&v225 + 1) = v215 + v222 * v211;
        *(_OWORD *)v430 = v225;
        *(double *)&v430[16] = v216 + v222 * v212;
        *(_OWORD *)v431 = v224;
        *(double *)&v431[16] = _D15 + v213 * v203;
LABEL_63:
        *((_QWORD *)this + 27) = 0x3FF0000000000000;
        v223 = 1;
        goto LABEL_64;
      }
      v206 = fmax(fmin(v375, 60592301.5), v378);
      v207 = v204;
      if (v204 > v206)
        goto LABEL_59;
      v207 = v205;
      if (v205 <= v206)
        goto LABEL_59;
    }
    else
    {
      v206 = v383;
      v207 = v204;
      if (v204 < v383)
        goto LABEL_59;
      v207 = v205;
      if (v205 >= v383)
        goto LABEL_59;
    }
    v207 = v206;
    goto LABEL_59;
  }
LABEL_65:
  if ((*((_BYTE *)this + 10) || *((_BYTE *)this + 122) || *((_BYTE *)this + 75) || *((_BYTE *)this + 178))
    && *((_BYTE *)this + 241)
    && *((double *)this + 32) >= 1.0)
  {
    *((_BYTE *)this + 241) = 0;
  }
  isFlyoverTileAtTarget = altitude::GlobeView::isFlyoverTileAtTarget(a2);
  v227 = isFlyoverTileAtTarget ^ 1;
  if (*((_DWORD *)this + 59) != (isFlyoverTileAtTarget ^ 1))
  {
    v228 = isFlyoverTileAtTarget;
    v229 = *((unsigned __int8 *)this + 241);
    v230 = *((_QWORD *)a2 + 9);
    if (!*((_BYTE *)this + 241))
      *((_QWORD *)this + 33) = *(_QWORD *)(v230 + 40);
    v231 = *(double *)(v230 + 16);
    v232 = *(double *)(v230 + 24);
    v233 = __sincos_stret(*(double *)(v230 + 8));
    v234 = 6378137.0 / sqrt(v233.__sinval * v233.__sinval * -0.00669437999 + 1.0);
    v235 = (v234 + v232) * v233.__cosval;
    v236 = __sincos_stret(v231);
    *((double *)this + 34) = v235 * v236.__cosval;
    *((double *)this + 35) = v235 * v236.__sinval;
    *((double *)this + 36) = (v232 + v234 * 0.99330562) * v233.__sinval;
    *((_QWORD *)this + 32) = 0;
    *((_QWORD *)this + 38) = 0;
    *((_QWORD *)this + 39) = 0;
    *((_QWORD *)this + 37) = 0;
    *((_DWORD *)this + 59) = v227;
    *((_BYTE *)this + 242) = 0;
    v237 = *((_QWORD *)a2 + 9);
    if (*((_BYTE *)this + 233))
    {
      v238 = *(double *)(v237 + 32);
      v239 = 0.0;
      if (v238 <= 1500000.0)
      {
        v240 = 1.0;
        v241 = fmax(v238, 1.0);
        v239 = 0.680678408 - cos(sqrt(v241 * 0.000000666666667) * 3.7699104 + 2.5132736) * 0.680678408;
        if ((v228 & 1) == 0)
        {
          if (v241 < 20000.0)
            v240 = *((double *)this + 40) + v241 * 0.00005 * (1.0 - *((double *)this + 40));
          v239 = v240 * v239;
        }
        if (v229)
          v239 = *((double *)this + 33);
      }
    }
    else
    {
      v239 = 1.57079633;
    }
    *((_BYTE *)this + 241) = v239 < *(double *)(v237 + 40);
  }
  v242 = *((_QWORD *)a2 + 76);
  if (!v242)
    goto LABEL_112;
  v243 = atomic_load((unsigned __int8 *)(*(_QWORD *)(v242 + 16) + 2784));
  if ((v243 & 1) == 0)
    goto LABEL_112;
  v244 = *(_QWORD *)(*((_QWORD *)a2 + 76) + 16);
  if (!v244)
    goto LABEL_112;
  v245 = atomic_load((unsigned __int8 *)(v244 + 2784));
  if ((v245 & 1) == 0)
    std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(v244 + 2808));
  v246 = *(_QWORD *)(v244 + 120);
  v247 = *(std::__shared_weak_count **)(v244 + 128);
  if (v247)
  {
    p_shared_owners = (unint64_t *)&v247->__shared_owners_;
    do
      v249 = __ldxr(p_shared_owners);
    while (__stxr(v249 + 1, p_shared_owners));
  }
  if (v246)
  {
    v250 = *(unsigned __int8 *)(v246 + 14) != 0;
    if (!v247)
      goto LABEL_100;
  }
  else
  {
    v250 = 0;
    if (!v247)
      goto LABEL_100;
  }
  v251 = (unint64_t *)&v247->__shared_owners_;
  do
    v252 = __ldaxr(v251);
  while (__stlxr(v252 - 1, v251));
  if (v252)
  {
LABEL_100:
    if (v250)
      goto LABEL_101;
LABEL_112:
    v262 = 0.3;
    goto LABEL_113;
  }
  ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
  std::__shared_weak_count::__release_weak(v247);
  if (!v250)
    goto LABEL_112;
LABEL_101:
  v253 = *((_QWORD *)a2 + 76);
  v254 = 0.0;
  if (v253)
  {
    v255 = atomic_load((unsigned __int8 *)(*(_QWORD *)(v253 + 16) + 2784));
    if ((v255 & 1) != 0)
    {
      v256 = *(_QWORD *)(*((_QWORD *)a2 + 76) + 16);
      if (v256)
      {
        v257 = atomic_load((unsigned __int8 *)(v256 + 2784));
        if ((v257 & 1) == 0)
          std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(v256 + 2808));
        v258 = *(_QWORD *)(v256 + 120);
        v259 = *(std::__shared_weak_count **)(v256 + 128);
        if (v259)
        {
          v260 = (unint64_t *)&v259->__shared_owners_;
          do
            v261 = __ldxr(v260);
          while (__stxr(v261 + 1, v260));
        }
        if (v258)
          v254 = *(float *)(v258 + 200);
        else
          v254 = 0.0;
        if (v259)
        {
          v357 = (unint64_t *)&v259->__shared_owners_;
          do
            v358 = __ldaxr(v357);
          while (__stlxr(v358 - 1, v357));
          if (!v358)
          {
            ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
            std::__shared_weak_count::__release_weak(v259);
          }
        }
      }
    }
  }
  v262 = v254;
LABEL_113:
  *((double *)this + 40) = v262;
  if (*((_BYTE *)this + 241))
  {
    v263 = (double *)*((_QWORD *)a2 + 9);
    v264 = v263[2];
    v265 = v263[3];
    v266 = __sincos_stret(v263[1]);
    v267 = 6378137.0 / sqrt(v266.__sinval * v266.__sinval * -0.00669437999 + 1.0);
    v268 = (v267 + v265) * v266.__cosval;
    v269 = __sincos_stret(v264);
    v270 = (v265 + v267 * 0.99330562) * v266.__sinval;
    v271 = *((double *)this + 38);
    v272 = *((double *)this + 39);
    v273 = *((double *)this + 34);
    v274 = *((double *)this + 35);
    v275 = v268 * v269.__cosval - v273;
    v276 = v268 * v269.__sinval - v274;
    v277 = *((double *)this + 36);
    v278 = *((double *)this + 37);
    v279 = v270 - v277;
    if (v278 == 0.0 && v271 == 0.0 && v272 == 0.0)
    {
      v280 = sqrt(v275 * v275 + v276 * v276 + v279 * v279);
      v281 = 0.0;
      if (v280 > 1.0)
      {
        v282 = 1.0 / v280;
        *((double *)this + 37) = v282 * v275;
        *((double *)this + 38) = v282 * v276;
        *((double *)this + 39) = v282 * v279;
      }
    }
    else
    {
      v281 = 0.0;
      if ((v276 * v271 + v279 * v272 + v275 * v278) / sqrt(v275 * v275 + v276 * v276 + v279 * v279) > 0.0)
      {
        v283 = fmin(fmax((v268 * v269.__cosval * v278+ v271 * (v268 * v269.__sinval)+ v272 * v270- (v273 * v278+ v274 * v271+ v277 * v272))* 5.0/ v263[4], 0.0), 1.0);
        v284 = 1.0 - cos(v283 * 3.14159265);
        v281 = (float)(v284 * 0.5);
      }
    }
    *((double *)this + 32) = v281;
  }
  if ((v38 | a3) == 1)
  {
    v285 = *(_OWORD *)v430;
    v286 = *(double *)&v430[16];
    v389 = *(double *)v430 * *(double *)v430 + *(double *)&v430[8] * *(double *)&v430[8];
    v287 = sqrt(v389);
    v288 = atan2(*(long double *)&v430[16], v287 * 0.996647189);
    v416 = atan2(*((long double *)&v285 + 1), *(long double *)&v285);
    v289 = __sincos_stret(v288);
    v402 = atan2(v286 + v289.__sinval * v289.__sinval * 42841.3115 * v289.__sinval, v287 + v289.__cosval * v289.__cosval * -42697.6727 * v289.__cosval);
    v290 = __sincos_stret(v402);
    v407 = sqrt((*(double *)&v285 - *(double *)v431) * (*(double *)&v285 - *(double *)v431)+ (*((double *)&v285 + 1) - *(double *)&v431[8]) * (*((double *)&v285 + 1) - *(double *)&v431[8])+ (v286 - *(double *)&v431[16]) * (v286 - *(double *)&v431[16]));
    v412 = v287 / v290.__cosval + -6378137.0 / sqrt(v290.__sinval * v290.__sinval * -0.00669437999 + 1.0);
    v291 = 1.0 / v407 * (*(double *)&v285 - *(double *)v431);
    v292 = 1.0 / v407 * (*((double *)&v285 + 1) - *(double *)&v431[8]);
    v293 = 1.0 / v407 * (v286 - *(double *)&v431[16]);
    v294 = 1.0 / sqrt(v36 * v36 + v391 * v391 + v390 * v390);
    v295 = v294 * v36;
    v296 = v294 * v391;
    v396 = v294 * v390;
    if (*((_BYTE *)this + 121))
      v297 = acos(fmin(fmax(-(v292 * *((double *)&v285 + 1) + v293 * v286 + v291 * *(double *)&v285) / sqrt(v389 + v286 * v286), -1.0), 1.0));
    else
      v297 = *(double *)(*((_QWORD *)a2 + 9) + 40);
    v298 = __sincos_stret(v297);
    v299 = v295 * v298.__cosval + v298.__sinval * v291;
    v300 = v296 * v298.__cosval + v298.__sinval * v292;
    v429 = 0u;
    v428 = 0u;
    v301 = v396 * v298.__cosval + v298.__sinval * v293;
    v426.f64[0] = v402;
    v426.f64[1] = v416;
    v427 = v412;
    gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric(v420.f64, v426.f64);
    v302 = -(v423 * v301 - v424 * v300) - (v423 * v301 - v424 * v300);
    v303 = -(v424 * v299 - v422 * v301) - (v424 * v299 - v422 * v301);
    v304 = -(v422 * v300 - v423 * v299) - (v422 * v300 - v423 * v299);
    v305 = atan2(-(v303 * v424 - (-(v299 - v304 * v423) - v302 * v425)), v300 + v304 * v422 + v303 * v425 - v302 * v424);
    v306 = v407;
    if (*((_BYTE *)this + 9))
    {
      v307 = altitude::GlobeView::calculateMinZoomDistance(a2);
      v306 = v407;
      if (v407 < v307)
        v306 = fmin(v307 - v407, *((double *)this + 8)) + v407;
    }
    if (*((_BYTE *)this + 121))
      goto LABEL_130;
    if (*((_BYTE *)this + 233))
    {
      v308 = 0.0;
      if (v306 <= 1500000.0)
      {
        v312 = 1.0;
        v313 = fmax(v306, 1.0);
        v308 = 0.680678408 - cos(sqrt(v313 * 0.000000666666667) * 3.7699104 + 2.5132736) * 0.680678408;
        if (*((_DWORD *)this + 59) == 1)
        {
          if (v313 < 20000.0)
            v312 = *((double *)this + 40) + v313 * 0.00005 * (1.0 - *((double *)this + 40));
          v308 = v312 * v308;
        }
        if (*((_BYTE *)this + 241))
          v308 = *((double *)this + 33) + fmin(fmax(*((double *)this + 32), 0.0), 1.0) * (v308 - *((double *)this + 33));
      }
      if (v297 > v308)
        goto LABEL_144;
    }
    else
    {
      v308 = 1.57079633;
      if (v297 > 1.57079633)
      {
LABEL_144:
        if (*((_BYTE *)this + 240) && !*((_BYTE *)this + 242))
        {
          *((_BYTE *)this + 242) = 1;
          *((double *)this + 31) = v297;
        }
LABEL_131:
        if (*((_BYTE *)this + 74))
        {
          v309 = v305;
        }
        else
        {
          v309 = v305;
          if (fabs(v402) < 1.30899694)
          {
            v310 = (double *)*((_QWORD *)a2 + 9);
            v311 = v310[6];
            if (v306 >= 400000.0)
            {
              v314 = fabs(v311);
              v309 = 0.0;
              if (v314 >= 0.01)
              {
                v315 = fmod(v416 + 3.14159265 - v310[2], 6.28318531);
                v316 = fabs(fmod(v315 + 6.28318531, 6.28318531) + -3.14159265);
                v317 = v316 + v316;
                if (*((_BYTE *)this + 232))
                {
                  v318 = v310[4];
                  if (v306 >= v318)
                    v319 = v306 * 0.785398163 / v318;
                  else
                    v319 = v318 * 0.785398163 / v306;
                  v320 = v319 + -0.785398163;
                }
                else
                {
                  v320 = 0.0;
                }
                v321 = fmin(v314, fmax(v317, v320));
                if (v311 <= 0.0)
                  v321 = -v321;
                v309 = v305 - v321;
              }
            }
            else
            {
              v309 = v310[6];
            }
          }
        }
        v322 = fmax(v306, 15000000.0);
        v323 = v322 * 0.0000000285714286 + -0.428571429;
        v324 = v322 <= 50000000.0;
        v325 = 1.0;
        if (v324)
          v325 = v323;
        v326 = v325 * v325 * 1.57079633 * (v325 * 2.0 + -3.0) + 1.57079633;
        v397 = fmin(fmax(v402, -v326), v326);
        *(double *)v327.i64 = v397;
        *(double *)&v327.i64[1] = v416;
        v403 = v327;
        v328 = altitude::GlobeView::calculateMinZoomDistance(a2);
        v329 = fmin(fmax(v407, v328), fmax(fmin(*((double *)a2 + 50), 60592301.5), altitude::GlobeView::calculateMinZoomDistance(a2)));
        v330 = *((double *)this + 43);
        v331 = *((double *)this + 41);
        if (v330 < v331 || (v332 = *((double *)this + 44), v333 = *((double *)this + 42), v332 < v333))
        {
LABEL_167:
          v334 = *((double *)this + 47);
          v335 = *((double *)this + 45);
          if (v334 < v335)
            goto LABEL_171;
          v336 = *((double *)this + 48);
          v337 = *((double *)this + 46);
          if (v336 < v337)
            goto LABEL_171;
          v338 = *((double *)this + 51);
          v339 = *((double *)this + 49);
          if (v338 < v339)
            goto LABEL_171;
          v340 = *((double *)this + 52);
          v341 = *((double *)this + 50);
          if (v340 < v341)
            goto LABEL_171;
          v353.f64[0] = v416;
          if (v416 <= v334)
          {
            if (v416 >= v335)
            {
              v354 = 1;
              v356 = 0.0;
LABEL_208:
              if (v397 <= v336)
              {
                if (v397 >= v337)
                {
                  if ((v354 & 1) != 0)
                  {
LABEL_171:
                    v342 = v403;
LABEL_172:
                    v343 = *((_QWORD *)a2 + 9);
                    *(int8x16_t *)(v343 + 8) = v342;
                    *(double *)(v343 + 24) = v412;
                    *(double *)(v343 + 32) = v329;
                    *(double *)(v343 + 40) = v308;
                    *(double *)(v343 + 48) = v309;
                    *(_QWORD *)(v343 + 56) = 0;
                    ++*((_DWORD *)a2 + 94);
                    goto LABEL_173;
                  }
                  v360 = sqrt(v356);
                  if (v416 > v338)
                    goto LABEL_213;
                  goto LABEL_216;
                }
                v359 = v337 - v397;
              }
              else
              {
                v359 = v397 - v336;
              }
              v360 = sqrt(v359 * v359 + v356);
              if (v416 > v338)
              {
LABEL_213:
                v361 = 0;
                v362 = v416 - v338;
                goto LABEL_218;
              }
LABEL_216:
              if (v416 >= v339)
              {
                v361 = 1;
                v363 = 0.0;
LABEL_220:
                v342 = v403;
                if (v397 <= v340)
                {
                  if (v397 >= v341)
                  {
                    if ((v361 & 1) != 0)
                      goto LABEL_172;
                    v365 = sqrt(v363);
LABEL_225:
                    v366 = (float64x2_t *)((char *)this + 360);
                    if (v360 > v365)
                      v366 = (float64x2_t *)((char *)this + 392);
                    v353.f64[1] = v397;
                    v367 = (int8x16_t)vminnmq_f64(vmaxnmq_f64(v353, *v366), v366[1]);
                    v342 = vextq_s8(v367, v367, 8uLL);
                    goto LABEL_172;
                  }
                  v364 = v341 - v397;
                }
                else
                {
                  v364 = v397 - v340;
                }
                v365 = sqrt(v364 * v364 + v363);
                goto LABEL_225;
              }
              v361 = 0;
              v362 = v339 - v416;
LABEL_218:
              v363 = v362 * v362;
              goto LABEL_220;
            }
            v354 = 0;
            v355 = v335 - v416;
          }
          else
          {
            v354 = 0;
            v355 = v416 - v334;
          }
          v356 = v355 * v355;
          goto LABEL_208;
        }
        v344 = v416;
        if (v416 < v331)
          goto LABEL_189;
        if (v416 < v330 && v397 >= v333 && v397 < v332)
          goto LABEL_167;
        v344 = v416;
        if (v416 <= v330)
        {
          v342.i64[1] = v403.i64[1];
        }
        else
        {
LABEL_189:
          v417 = v308;
          v346 = v344 + -3.14159265;
          v408 = v329;
          v347 = fmod(v331 - (v344 + -3.14159265), 6.28318531);
          v348 = fabs(fmod(v347 + 6.28318531, 6.28318531) + -3.14159265);
          v349 = v330 - v346;
          v308 = v417;
          v350 = fmod(v349, 6.28318531);
          v351 = fmod(v350 + 6.28318531, 6.28318531);
          v329 = v408;
          if (v348 <= fabs(v351 + -3.14159265))
            v352 = (char *)this + 328;
          else
            v352 = (char *)this + 344;
          v342.i64[1] = *(_QWORD *)v352;
        }
        v342.i64[0] = fmin(fmax(v397, v333), v332);
        goto LABEL_172;
      }
    }
    if (*((_BYTE *)this + 242))
    {
      if (v297 <= *((double *)this + 31))
        goto LABEL_131;
      *((_BYTE *)this + 242) = 0;
    }
LABEL_130:
    v308 = v297;
    goto LABEL_131;
  }
LABEL_173:
  if (*((_BYTE *)this + 10))
    *(_WORD *)((char *)this + 9) = 0;
  if (*((_BYTE *)this + 122))
    *(_WORD *)((char *)this + 121) = 0;
  if (*((_BYTE *)this + 75))
    *((_WORD *)this + 37) = 0;
  if (*((_BYTE *)this + 178))
    *(_WORD *)((char *)this + 177) = 0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 73) = 0;
  *((_BYTE *)this + 176) = 0;
}

double gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric(double *a1, double *a2)
{
  double v4;
  double v5;
  __double2 v6;
  double v7;
  double v8;
  __double2 v9;
  double v10;
  __double2 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  BOOL v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  __double2 v51;
  __double2 v52;
  double v53;
  __double2 v54;
  __double2 v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double result;
  double v66;
  double v67;
  double v68;
  double v69;

  v4 = a2[1];
  v5 = a2[2];
  v6 = __sincos_stret(*a2);
  v7 = 6378137.0 / sqrt(v6.__sinval * v6.__sinval * -0.00669437999 + 1.0);
  v8 = (v7 + v5) * v6.__cosval;
  v9 = __sincos_stret(v4);
  v10 = (v5 + v7 * 0.99330562) * v6.__sinval;
  v11 = __sincos_stret(v4 + 0.00001);
  v12 = 1.0 / sqrt(v8 * v9.__cosval * (v8 * v9.__cosval) + v8 * v9.__sinval * (v8 * v9.__sinval) + v10 * v10);
  v13 = v12 * (v8 * v9.__cosval);
  v14 = v12 * (v8 * v9.__sinval);
  v15 = v12 * v10;
  v16 = -(v8 * v9.__cosval - v8 * v11.__cosval);
  v17 = -(v8 * v9.__sinval - v8 * v11.__sinval);
  v18 = 1.0 / sqrt(v16 * v16 + v17 * v17);
  v19 = v18 * v16;
  v20 = v18 * v17;
  v21 = -(v20 * v15);
  v22 = v19 * v15;
  v23 = -(v19 * v14 - v13 * v20);
  v24 = -(v23 * v14 - v19 * v15 * v15);
  v25 = -(v21 * v15 - v23 * v13);
  v26 = -(v19 * v15 * v13 - v21 * v14);
  v27 = v24 + v22 + v15;
  if (v27 <= 0.0)
  {
    if (v24 <= v22 || v24 <= v15)
    {
      v31 = v22 <= v15;
      v32 = sqrt(v15 + 1.0 - (v24 + v22));
      v33 = 1.0 / (v32 + v32);
      v34 = (v26 + v13) * v33;
      v35 = v23 + v14;
      v36 = v35 * v33;
      v37 = v32 * 0.5;
      v38 = (v25 - v21) * v33;
      v39 = sqrt(v22 + 1.0 - (v15 + v24));
      v40 = v25 + v21;
      v41 = 1.0 / (v39 + v39);
      v42 = v40 * v41;
      v43 = v39 * 0.5;
      v44 = v35 * v41;
      v45 = (v13 - v26) * v41;
      if (v31)
        v46 = v34;
      else
        v46 = v42;
      if (v31)
        v47 = v36;
      else
        v47 = v43;
      v68 = v47;
      v69 = v46;
      if (v31)
        v48 = v37;
      else
        v48 = v44;
      v66 = v48;
      if (v31)
        v29 = v38;
      else
        v29 = v45;
    }
    else
    {
      v49 = sqrt(1.0 - (v15 + v22) + v24);
      v68 = (v25 + v21) * (1.0 / (v49 + v49));
      v69 = v49 * 0.5;
      v66 = (v26 + v13) * (1.0 / (v49 + v49));
      v29 = (v23 - v14) * (1.0 / (v49 + v49));
    }
  }
  else
  {
    v28 = 0.5 / sqrt(v27 + 1.0);
    v68 = v28 * (v13 - v26);
    v69 = v28 * (v23 - v14);
    v66 = v28 * (v25 - v21);
    v29 = 0.25 / v28;
  }
  v67 = v29;
  v50 = a2[5];
  v51 = __sincos_stret(a2[4] * 0.5);
  v52 = __sincos_stret(v50 * 0.5);
  v53 = a2[6];
  v54 = __sincos_stret((v53 + v50) * 0.5);
  v55 = __sincos_stret((v50 - v53) * 0.5);
  v56 = v51.__sinval * v52.__cosval * v67
      + v51.__cosval * v52.__cosval * v69
      + v51.__cosval * v52.__sinval * v68
      - v51.__sinval * v52.__sinval * v66;
  v57 = v51.__sinval * v52.__sinval * v67
      + v51.__cosval * v52.__cosval * v68
      + v51.__sinval * v52.__cosval * v66
      - v51.__cosval * v52.__sinval * v69;
  v58 = v51.__cosval * v52.__sinval * v67
      + v51.__sinval * v52.__sinval * v69
      + v51.__cosval * v52.__cosval * v66
      - v51.__sinval * v52.__cosval * v68;
  v59 = -(v51.__sinval * v52.__sinval * v68
        + v51.__cosval * v52.__sinval * v66
        + v51.__sinval * v52.__cosval * v69
        - v51.__cosval * v52.__cosval * v67);
  v60 = v56 * -2.0 * v59;
  v61 = -(v56 * -2.0 * v58 - (v57 + v57) * v59);
  v62 = v60 + (v57 + v57) * v58;
  v63 = -(v56 * -2.0 * v56 + 1.0 - (v57 + v57) * v57);
  v64 = a2[3];
  *a1 = v8 * v9.__cosval + v61 * v64;
  a1[1] = v8 * v9.__sinval + v62 * v64;
  a1[2] = v10 - v63 * v64;
  a1[3] = v55.__cosval * v51.__sinval * v67
        + v54.__cosval * v51.__cosval * v69
        + v54.__sinval * v51.__cosval * v68
        - v55.__sinval * v51.__sinval * v66;
  result = -(v55.__sinval * v51.__sinval * v68
           + v54.__sinval * v51.__cosval * v66
           + v55.__cosval * v51.__sinval * v69
           - v54.__cosval * v51.__cosval * v67);
  a1[4] = v55.__sinval * v51.__sinval * v67
        + v54.__cosval * v51.__cosval * v68
        + v55.__cosval * v51.__sinval * v66
        - v54.__sinval * v51.__cosval * v69;
  a1[5] = v54.__sinval * v51.__cosval * v67
        + v55.__sinval * v51.__sinval * v69
        + v54.__cosval * v51.__cosval * v66
        - v55.__cosval * v51.__sinval * v68;
  a1[6] = result;
  return result;
}

void md::MuninAvailabilityData::~MuninAvailabilityData(md::MuninAvailabilityData *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E429B668;
  *((_QWORD *)this + 79) = &unk_1E429B6A8;
  v2 = (void *)*((_QWORD *)this + 90);
  if (v2)
  {
    *((_QWORD *)this + 91) = v2;
    operator delete(v2);
  }
  md::MapTileData::~MapTileData(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E429B668;
  *((_QWORD *)this + 79) = &unk_1E429B6A8;
  v2 = (void *)*((_QWORD *)this + 90);
  if (v2)
  {
    *((_QWORD *)this + 91) = v2;
    operator delete(v2);
  }
  md::MapTileData::~MapTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::MapTileData::bounds(md::MapTileData *this)
{
  return (uint64_t)this + 688;
}

uint64_t md::MapTileData::supportsTileSkirtsFactor(md::MapTileData *this)
{
  return *((unsigned __int8 *)this + 712);
}

uint64_t md::TileDataRegistry::featureRegistryPtr(md::TileDataRegistry *this)
{
  return 0;
}

void std::__function::__func<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(GeoCodecsRoadFeature const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(GeoCodecsRoadFeature const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42EA6F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(GeoCodecsRoadFeature const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42EA6F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(GeoCodecsRoadFeature const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9[3];
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  md::createFeatureAttributeSet((gss::Allocator *)v9, (uint64_t *)(*a2 + 24));
  v8 = 0;
  result = (_QWORD *)gss::FeatureAttributeSet::getValueForAttributeKey(v9, 74, &v8);
  if (!(_DWORD)result)
    goto LABEL_7;
  v5 = *(uint64_t **)(a1 + 8);
  v6 = **(_QWORD **)(a1 + 16);
  v11[0] = &off_1E42D0B80;
  v11[1] = v6;
  v12 = v11;
  geo::codec::forEachEdgeInRoad(v5, v3, 0, (uint64_t)v11);
  result = v12;
  if (v12 == v11)
  {
    v7 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_7;
    v7 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
LABEL_7:
  if (v9[0])
  {
    v9[1] = v9[0];
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, v9[0], v9[2] - v9[0]);
  }
  return result;
}

void sub_19F40A30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  if (a10)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a13 + 40))(a13, a10, a12 - a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(GeoCodecsRoadEdge *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(GeoCodecsRoadEdge *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D0B80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(GeoCodecsRoadEdge *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D0B80;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(GeoCodecsRoadEdge *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  float32x2_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  int16x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x2_t *v15;
  unint64_t v16;
  float32x2_t *v17;
  float32x2_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  float32x2_t *v24;
  uint64_t v25;
  float32x2_t v26;
  float32x2_t v27;
  unint64_t v28;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v28 = 0;
    v4 = geo::codec::multiSectionFeaturePoints(*(_QWORD **)v2, 0, &v28);
    v5 = *(_QWORD *)(v2 + 8);
    if (v5 < v28)
    {
      v6 = *(_QWORD *)(v2 + 16);
      if (v6 < v28)
      {
        v7 = (float32x2_t)v4[v5];
        *(float32x2_t *)v8.f32 = v7;
        *(float32x2_t *)&v8.u32[2] = v7;
        v14.i64[0] = v4[v6];
        v9.i64[0] = v14.i64[0];
        v9.i64[1] = v14.i64[0];
        v10 = *(float32x4_t *)(v3 + 744);
        v11.i32[0] = vmovn_s32(vcgtq_f32(v10, v8)).u32[0];
        v11.i32[1] = vmovn_s32(vcgtq_f32(v8, v10)).i32[1];
        v12 = vbslq_s8((int8x16_t)vmovl_s16(v11), (int8x16_t)v8, (int8x16_t)v10);
        v13.i64[0] = v12.i64[0];
        v13.i64[1] = v14.i64[0];
        v14.i64[1] = vextq_s8(v12, v12, 8uLL).u64[0];
        *(int8x16_t *)(v3 + 744) = vbslq_s8((int8x16_t)vcgtq_f32(v13, v14), v9, v12);
        v15 = *(float32x2_t **)(v3 + 728);
        v16 = *(_QWORD *)(v3 + 736);
        if ((unint64_t)v15 >= v16)
        {
          v18 = *(float32x2_t **)(v3 + 720);
          v19 = ((char *)v15 - (char *)v18) >> 4;
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 60)
            abort();
          v21 = v16 - (_QWORD)v18;
          if (v21 >> 3 > v20)
            v20 = v21 >> 3;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
            v22 = 0xFFFFFFFFFFFFFFFLL;
          else
            v22 = v20;
          if (v22)
          {
            v25 = v14.i64[0];
            v26 = v7;
            v27 = v7;
            if (v22 >> 60)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v23 = (char *)operator new(16 * v22);
            *(float32x2_t *)v8.f32 = v26;
            v7 = v27;
            v9.i64[0] = v25;
          }
          else
          {
            v23 = 0;
          }
          v24 = (float32x2_t *)&v23[16 * v19];
          *v24 = v7;
          v24[1] = vsub_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v8.f32);
          v17 = v24 + 2;
          if (v15 != v18)
          {
            do
            {
              *(_OWORD *)v24[-2].f32 = *(_OWORD *)v15[-2].f32;
              v24 -= 2;
              v15 -= 2;
            }
            while (v15 != v18);
            v15 = *(float32x2_t **)(v3 + 720);
          }
          *(_QWORD *)(v3 + 720) = v24;
          *(_QWORD *)(v3 + 728) = v17;
          *(_QWORD *)(v3 + 736) = &v23[16 * v22];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *v15 = v7;
          v15[1] = vsub_f32(*(float32x2_t *)v14.f32, v7);
          v17 = v15 + 2;
        }
        *(_QWORD *)(v3 + 728) = v17;
      }
    }
  }
}

uint64_t md::MuninAvailabilityData::MuninAvailabilityData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t (***v5)();
  uint64_t v6;
  int v7;
  double v8;
  long double v9;
  long double v10;
  double v11;
  double v12;
  double v13;
  long double v14;
  long double v15;
  double v16;
  long double v17;
  double v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v25;
  uint64_t (**v26)();
  uint64_t *v27;
  uint64_t *v28;
  uint64_t (***v29)();
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v26 = 0;
  v27 = 0;
  v28 = 0;
  md::MapTileData::MapTileData(a1, a2, (uint64_t)&v26, (uint64_t)a3, 1);
  *(_QWORD *)a1 = &off_1E429B668;
  *(_QWORD *)(a1 + 632) = &unk_1E429B6A8;
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 744) = xmmword_19FFB2E30;
  v25 = a1;
  v26 = &off_1E42EA6F8;
  v27 = a3;
  v28 = &v25;
  v29 = &v26;
  geo::codec::forEachRoad(a3, (uint64_t)&v26);
  v5 = v29;
  if (v29 == &v26)
  {
    v6 = 4;
    v5 = &v26;
  }
  else
  {
    if (!v29)
      goto LABEL_6;
    v6 = 5;
  }
  (*v5)[v6]();
LABEL_6:
  if (*(_QWORD *)(a1 + 728) != *(_QWORD *)(a1 + 720))
  {
    v7 = 1 << *(_BYTE *)(a1 + 169);
    v8 = 1.0 / (double)v7;
    v9 = exp(v8 * 6.28318531 * ((double)(v7 + ~*(_DWORD *)(a1 + 172)) + 0.5) + -3.14159265);
    v10 = atan(v9) * 114.591559 + -90.0;
    v11 = cos(v10 * 0.034906585);
    v12 = cos(v10 * 0.0698131701);
    v13 = cos(v10 * 0.104719755);
    v14 = v10 * 0.00872664626;
    v15 = tan(v10 * 0.00872664626 + 0.78103484);
    v16 = log(v15);
    v17 = tan(v14 + 0.789761487);
    v18 = log(v17);
    v19 = *(float *)(a1 + 752);
    v20 = *(float *)(a1 + 744);
    if (v19 >= v20)
    {
      v22 = *(float *)(a1 + 756);
      v21 = *(float *)(a1 + 748);
      if (v22 >= v21)
      {
        v23 = fabs((v18 - v16) * 0.159154943)
            * -5000.0
            / ((v11 * -559.82 + 111132.92 + v12 * 1.175 + v13 * -0.0023)
             * v8);
        v20 = v20 + v23;
        v19 = v19 - v23;
        v21 = v21 + v23;
        v22 = v22 - v23;
      }
    }
    else
    {
      v21 = *(float *)(a1 + 748);
      v22 = *(float *)(a1 + 756);
    }
    *(float *)(a1 + 744) = v20;
    *(float *)(a1 + 748) = v21;
    *(float *)(a1 + 752) = v19;
    *(float *)(a1 + 756) = v22;
  }
  return a1;
}

void sub_19F40A838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  md::MapTileData *v13;
  void **v14;
  char *v16;
  uint64_t v17;
  void *v18;

  v16 = a13;
  if (a13 == &a10)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  v18 = *v14;
  if (*v14)
  {
    *((_QWORD *)v13 + 91) = v18;
    operator delete(v18);
  }
  md::MapTileData::~MapTileData(v13);
  _Unwind_Resume(a1);
}

void md::MuninAvailabilityData::nearestAvailableRoadPoint(uint64_t a1, uint64_t a2, double a3, double a4)
{
  long double v8;
  long double v9;
  double v10;
  double v11;
  double v12;
  long double v13;
  long double v14;
  double v15;
  long double v16;
  double v17;
  float v18;
  float v19;
  float *v20;
  float *v21;
  int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  float v29;
  float v30;
  char v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  char v40;

  v8 = exp(a4 * 6.28318531 + -3.14159265);
  v9 = atan(v8) * 114.591559 + -90.0;
  v10 = cos(v9 * 0.034906585);
  v11 = cos(v9 * 0.0698131701);
  v12 = cos(v9 * 0.104719755);
  v13 = v9 * 0.00872664626;
  v14 = tan(v9 * 0.00872664626 + 0.78103484);
  v15 = log(v14);
  v16 = tan(v13 + 0.789761487);
  v17 = log(v16);
  v20 = *(float **)(a2 + 720);
  v21 = *(float **)(a2 + 728);
  if (v20 == v21)
  {
LABEL_17:
    v40 = 0;
  }
  else
  {
    v22 = 1 << *(_BYTE *)(a2 + 169);
    v23 = fabs((v17 - v15) * 0.159154943) * 250.0;
    v24 = 1.0 / (double)v22;
    v25 = (double)*(int *)(a2 + 176);
    v26 = (double)(v22 + ~*(_DWORD *)(a2 + 172));
    v27 = v23 / ((v10 * -559.82 + 111132.92 + v11 * 1.175 + v12 * -0.0023) * v24);
    v28 = v27 * v27;
    v29 = (a3 - v24 * v25) * (double)v22;
    v30 = (a4 - v24 * v26) * (double)v22;
    v31 = 1;
    v32 = 3.4028e38;
LABEL_3:
    v33 = v19;
    v34 = v18;
    v35 = v32;
    do
    {
      v19 = *v20;
      v18 = v20[1];
      v36 = v20[2];
      v37 = v20[3];
      v38 = (float)((float)(v36 * (float)(v29 - *v20)) + (float)(v37 * (float)(v30 - v18)))
          / (float)((float)(v36 * v36) + (float)(v37 * v37));
      if (v38 >= 0.0)
      {
        if (v38 <= 1.0)
        {
          v19 = v19 + (float)(v38 * v36);
          v18 = v18 + (float)(v38 * v37);
        }
        else
        {
          v19 = v36 + v19;
          v18 = v37 + v18;
        }
      }
      v32 = (float)((float)(v19 - v29) * (float)(v19 - v29)) + (float)((float)(v18 - v30) * (float)(v18 - v30));
      v20 += 4;
      if (v28 > v32 && v32 < v35)
      {
        v31 = 0;
        if (v20 != v21)
          goto LABEL_3;
        goto LABEL_18;
      }
    }
    while (v20 != v21);
    v19 = v33;
    v18 = v34;
    if ((v31 & 1) != 0)
      goto LABEL_17;
LABEL_18:
    *(double *)(a1 + 8) = (v19 + v25) * v24;
    *(double *)(a1 + 16) = (v18 + v26) * v24;
    v40 = 1;
  }
  *(_BYTE *)a1 = v40;
}

void sub_19F40B1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VKSharedResources;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19F40B334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

void geo::read_write_lock::logFailure(geo::read_write_lock *this, uint64_t a2, const char *a3)
{
  int v4;
  unsigned __int8 v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v4 = (int)this;
  v11 = *MEMORY[0x1E0C80C00];
  {
    geo::read_write_lock::logFailure(int,char const*)::log = (uint64_t)os_log_create("com.apple.GeoStdLib", "Locking");
  }
  v6 = geo::read_write_lock::logFailure(int,char const*)::log;
  if (os_log_type_enabled((os_log_t)geo::read_write_lock::logFailure(int,char const*)::log, OS_LOG_TYPE_FAULT))
  {
    v7 = 136315394;
    v8 = a2;
    v9 = 1024;
    v10 = v4;
    _os_log_fault_impl(&dword_19F029000, v6, OS_LOG_TYPE_FAULT, "Read/write lock %s resulted in non-zero value %d", (uint8_t *)&v7, 0x12u);
  }
}

{
  int v4;
  unsigned __int8 v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v4 = (int)this;
  v11 = *MEMORY[0x1E0C80C00];
  {
    geo::read_write_lock::logFailure(int,char const*)::log = (uint64_t)os_log_create("com.apple.GeoStdLib", "Locking");
  }
  v6 = geo::read_write_lock::logFailure(int,char const*)::log;
  if (os_log_type_enabled((os_log_t)geo::read_write_lock::logFailure(int,char const*)::log, OS_LOG_TYPE_FAULT))
  {
    v7 = 136315394;
    v8 = a2;
    v9 = 1024;
    v10 = v4;
    _os_log_fault_impl(&dword_19F029000, v6, OS_LOG_TYPE_FAULT, "Read/write lock %s resulted in non-zero value %d", (uint8_t *)&v7, 0x12u);
  }
}

uint64_t geo::_retain_ptr<VKResourceManager * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4D10;

  return a1;
}

void geo::_retain_ptr<VKResourceManager * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4D10;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t geo::_retain_ptr<VKInternalIconManager * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4F70;

  return a1;
}

void geo::_retain_ptr<VKInternalIconManager * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4F70;

  JUMPOUT(0x1A1AF4E00);
}

void md::SharedDeviceResources::~SharedDeviceResources(md::SharedDeviceResources *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void md::SharedResourcesManager::~SharedResourcesManager(md::SharedResourcesManager *this)
{
  std::condition_variable *v2;
  std::condition_variable *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = (std::condition_variable *)((char *)this + 304);
  v3 = (std::condition_variable *)((char *)this + 3632);
  do
  {
    v4 = *(_QWORD **)&v3[-1].__cv_.__opaque[16];
    while (v4)
    {
      v6 = v4;
      v4 = (_QWORD *)*v4;
      v7 = (std::__shared_weak_count *)v6[3];
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      operator delete(v6);
    }
    v5 = *(void **)v3[-1].__cv_.__opaque;
    *(_QWORD *)v3[-1].__cv_.__opaque = 0;
    if (v5)
      operator delete(v5);
    std::condition_variable::~condition_variable(v3 - 2);
    std::condition_variable::~condition_variable(v3 - 3);
    std::mutex::~mutex((std::mutex *)&v3[-5].__cv_.__opaque[24]);
    v3 = (std::condition_variable *)((char *)v3 - 208);
  }
  while (v3 != v2);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 64));
  std::mutex::~mutex((std::mutex *)this);
}

void geo::write_lock_guard::~write_lock_guard(pthread_rwlock_t **this)
{
  geo::read_write_lock *v1;
  const char *v2;

  v1 = (geo::read_write_lock *)pthread_rwlock_unlock(*this);
  if ((_DWORD)v1)
    geo::read_write_lock::logFailure(v1, (uint64_t)"unlock", v2);
}

void std::allocate_shared[abi:nn180100]<md::StylesheetVendor,std::allocator<md::StylesheetVendor>,VKResourceManager * {__strong},void>(_QWORD *a1, void *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  id v6;
  id v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *shared_owners;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v4 = (std::__shared_weak_count *)operator new(0xA8uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB828;
  v6 = a2;
  v4[1].std::__shared_count = 0u;
  *(_OWORD *)&v4[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[1].__shared_weak_owners_ = 0u;
  LODWORD(v4[2].__shared_owners_) = 0;
  *(_OWORD *)&v4[3].__shared_owners_ = 0u;
  v4[4].std::__shared_count = 0u;
  LOBYTE(v4[4].__shared_weak_owners_) = 0;
  v4[5].__vftable = 0;
  v4[5].__shared_owners_ = 0;
  LOBYTE(v4[5].__shared_weak_owners_) = 0;
  v4[6].__shared_owners_ = 0;
  v4[6].__shared_weak_owners_ = 0;
  v4[6].__vftable = 0;
  v7 = v6;
  v4[1].__shared_weak_owners_ = (uint64_t)v7;
  v8 = (std::__shared_weak_count_vtbl *)operator new(0x90uLL);
  v4[2].__shared_weak_owners_ = (uint64_t)v8;
  v4[3].__vftable = v8;
  v4[3].__shared_owners_ = (uint64_t)&v8[3].__get_deleter;
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x30uLL);
  v4[3].__shared_weak_owners_ = (uint64_t)v9;
  v4[4].__vftable = v9;
  v4[4].__shared_owners_ = (uint64_t)&v9[1].~__shared_weak_count_0;

  *a1 = v4 + 1;
  a1[1] = v4;
  shared_owners = (std::__shared_weak_count *)v4[1].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      return;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)&v4[1];
    v4[1].__shared_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v15 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)&v4[1];
    v4[1].__shared_owners_ = (uint64_t)v4;
  }
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_19F40BE2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void ***v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void **v11;
  void **v12;
  void *v13;
  void **v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void **v18;
  void **v19;
  void **v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;

  v5 = *(std::__shared_weak_count **)(v1 + 152);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *(std::__shared_weak_count **)(v1 + 128);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *(void ***)(v1 + 88);
  if (v11)
  {
    v12 = *(void ***)(v1 + 96);
    v13 = *(void **)(v1 + 88);
    if (v12 != v11)
    {
      do
      {
        v15 = (std::__shared_weak_count *)*(v12 - 1);
        if (v15)
        {
          v16 = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v14 = v12 - 6;
        if (*((char *)v12 - 25) < 0)
          operator delete(*v14);
        v12 -= 6;
      }
      while (v14 != v11);
      v13 = *(void **)(v1 + 88);
    }
    *(_QWORD *)(v1 + 96) = v11;
    operator delete(v13);
  }
  v18 = *v3;
  if (*v3)
  {
    v19 = *(void ***)(v1 + 72);
    v20 = *v3;
    if (v19 != v18)
    {
      do
      {
        v22 = (std::__shared_weak_count *)*(v19 - 1);
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v21 = v19 - 6;
        if (*((char *)v19 - 25) < 0)
          operator delete(*v21);
        v19 -= 6;
      }
      while (v21 != v18);
      v20 = *v3;
    }
    *(_QWORD *)(v1 + 72) = v18;
    operator delete(v20);
  }

  v25 = *(std::__shared_weak_count **)(v1 + 32);
  if (v25)
    std::__shared_weak_count::__release_weak(v25);

  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v26);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<grl::IconManager>::__shared_ptr_emplace[abi:nn180100]<std::shared_ptr<md::GeoResourceProvider> &,std::shared_ptr<grl::FontManager> &,std::allocator<grl::IconManager>,0>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, _QWORD *a4)
{
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E42E57A0;
  v5 = (uint64_t)(a1 + 3);
  v12 = a2;
  v13 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  grl::IconManager::IconManager(v5, &v12, a4);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return a1;
}

void sub_19F40C07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<md::RealisticCommandBufferSelector *,std::shared_ptr<md::RealisticCommandBufferSelector>::__shared_ptr_default_delete<md::RealisticCommandBufferSelector,md::RealisticCommandBufferSelector>,std::allocator<md::RealisticCommandBufferSelector>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::RealisticCommandBufferSelector *,std::shared_ptr<md::RealisticCommandBufferSelector>::__shared_ptr_default_delete<md::RealisticCommandBufferSelector,md::RealisticCommandBufferSelector>,std::allocator<md::RealisticCommandBufferSelector>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<md::StandardCommandBufferSelector *,std::shared_ptr<md::StandardCommandBufferSelector>::__shared_ptr_default_delete<md::StandardCommandBufferSelector,md::StandardCommandBufferSelector>,std::allocator<md::StandardCommandBufferSelector>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::StandardCommandBufferSelector *,std::shared_ptr<md::StandardCommandBufferSelector>::__shared_ptr_default_delete<md::StandardCommandBufferSelector,md::StandardCommandBufferSelector>,std::allocator<md::StandardCommandBufferSelector>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_emplace<grl::IconManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E57A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<grl::IconManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E57A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<grl::IconManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<grl::FontManager *,std::shared_ptr<grl::FontManager>::__shared_ptr_default_delete<grl::FontManager,grl::FontManager>,std::allocator<grl::FontManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<grl::FontManager *,std::shared_ptr<grl::FontManager>::__shared_ptr_default_delete<grl::FontManager,grl::FontManager>,std::allocator<grl::FontManager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_emplace<md::GeoResourceProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::GeoResourceProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC120;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::GeoResourceProvider>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::DataOverrideManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC078;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::DataOverrideManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC078;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::DataOverrideManager>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<md::StylesheetVendor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB828;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::StylesheetVendor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB828;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::StylesheetVendor>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  void **v8;
  void **v9;
  void *v10;
  void **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void **v15;
  void **v16;
  void *v17;
  void **v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;

  v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 128);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 128);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *(void ***)(a1 + 88);
  if (v8)
  {
    v9 = *(void ***)(a1 + 96);
    v10 = *(void **)(a1 + 88);
    if (v9 != v8)
    {
      do
      {
        v12 = (std::__shared_weak_count *)*(v9 - 1);
        if (v12)
        {
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v11 = v9 - 6;
        if (*((char *)v9 - 25) < 0)
          operator delete(*v11);
        v9 -= 6;
      }
      while (v11 != v8);
      v10 = *(void **)(a1 + 88);
    }
    *(_QWORD *)(a1 + 96) = v8;
    operator delete(v10);
  }
  v15 = *(void ***)(a1 + 64);
  if (v15)
  {
    v16 = *(void ***)(a1 + 72);
    v17 = *(void **)(a1 + 64);
    if (v16 != v15)
    {
      do
      {
        v19 = (std::__shared_weak_count *)*(v16 - 1);
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v18 = v16 - 6;
        if (*((char *)v16 - 25) < 0)
          operator delete(*v18);
        v16 -= 6;
      }
      while (v18 != v15);
      v17 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v15;
    operator delete(v17);
  }

  v22 = *(std::__shared_weak_count **)(a1 + 32);
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
}

void std::__shared_ptr_emplace<md::MaterialTextureManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCA88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::MaterialTextureManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCA88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::MaterialTextureManager>::__on_zero_shared(uint64_t a1)
{
  pthread_rwlock_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  geo::read_write_lock *v10;
  const char *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  v2 = (pthread_rwlock_t *)(a1 + 24);
  md::MaterialTextureManager::purge((pthread_rwlock_t *)(a1 + 24));
  v3 = *(std::__shared_weak_count **)(a1 + 344);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_QWORD *)(a1 + 304) = &off_1E42B4D10;

  v6 = *(_QWORD **)(a1 + 280);
  while (v6)
  {
    v12 = v6;
    v6 = (_QWORD *)*v6;
    v13 = (std::__shared_weak_count *)v12[5];
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    operator delete(v12);
  }
  v7 = *(void **)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD **)(a1 + 240);
  while (v8)
  {
    v16 = v8;
    v8 = (_QWORD *)*v8;
    v17 = (std::__shared_weak_count *)v16[5];
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    operator delete(v16);
  }
  v9 = *(void **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v9)
    operator delete(v9);
  v10 = (geo::read_write_lock *)pthread_rwlock_destroy(v2);
  if ((_DWORD)v10)
    geo::read_write_lock::logFailure(v10, (uint64_t)"destruction", v11);
}

void sub_19F40C668(_Unwind_Exception *a1)
{
  pthread_rwlock_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  geo::read_write_lock *v11;
  const char *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v4 = *(std::__shared_weak_count **)(v2 + 344);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(_QWORD *)(v2 + 304) = &off_1E42B4D10;

  v7 = *(_QWORD **)(v2 + 280);
  while (v7)
  {
    v13 = v7;
    v7 = (_QWORD *)*v7;
    v14 = (std::__shared_weak_count *)v13[5];
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    operator delete(v13);
  }
  v8 = *(void **)(v2 + 264);
  *(_QWORD *)(v2 + 264) = 0;
  if (v8)
    operator delete(v8);
  v9 = *(_QWORD **)(v2 + 240);
  while (v9)
  {
    v17 = v9;
    v9 = (_QWORD *)*v9;
    v18 = (std::__shared_weak_count *)v17[5];
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    operator delete(v17);
  }
  v10 = *(void **)(v2 + 224);
  *(_QWORD *)(v2 + 224) = 0;
  if (v10)
    operator delete(v10);
  v11 = (geo::read_write_lock *)pthread_rwlock_destroy(v1);
  if ((_DWORD)v11)
    geo::read_write_lock::logFailure(v11, (uint64_t)"destruction", v12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::TextureManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB2E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TextureManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB2E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::TextureManager>::__on_zero_shared(uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  _BYTE *v4;
  void *v5;
  geo::read_write_lock *v6;
  const char *v7;
  geo::read_write_lock *v8;
  const char *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _BYTE *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  _BYTE *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;

  md::TextureManager::purge((md::TextureManager *)(a1 + 24));
  *(_QWORD *)(a1 + 568) = &off_1E42B4D10;

  v2 = *(_BYTE **)(a1 + 544);
  if (v2)
  {
    while (1)
    {
      v22 = *(_BYTE **)v2;
      v23 = (std::__shared_weak_count *)*((_QWORD *)v2 + 7);
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
          break;
      }
      if (v2[40])
        goto LABEL_36;
LABEL_37:
      if ((char)v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v22;
      if (!v22)
        goto LABEL_2;
    }
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if (!v2[40])
      goto LABEL_37;
LABEL_36:
    v2[40] = 0;
    goto LABEL_37;
  }
LABEL_2:
  v3 = *(void **)(a1 + 528);
  *(_QWORD *)(a1 + 528) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(_BYTE **)(a1 + 504);
  if (v4)
  {
    while (1)
    {
      v26 = *(_BYTE **)v4;
      v27 = (std::__shared_weak_count *)*((_QWORD *)v4 + 7);
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
          break;
      }
      if (v4[40])
        goto LABEL_47;
LABEL_48:
      if ((char)v4[39] < 0)
        operator delete(*((void **)v4 + 2));
      operator delete(v4);
      v4 = v26;
      if (!v26)
        goto LABEL_5;
    }
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v4[40])
      goto LABEL_48;
LABEL_47:
    v4[40] = 0;
    goto LABEL_48;
  }
LABEL_5:
  v5 = *(void **)(a1 + 488);
  *(_QWORD *)(a1 + 488) = 0;
  if (v5)
    operator delete(v5);
  v6 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 288));
  if ((_DWORD)v6)
    geo::read_write_lock::logFailure(v6, (uint64_t)"destruction", v7);
  v8 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 88));
  if ((_DWORD)v8)
    geo::read_write_lock::logFailure(v8, (uint64_t)"destruction", v9);
  v10 = *(std::__shared_weak_count **)(a1 + 80);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(std::__shared_weak_count **)(a1 + 64);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v16)
    goto LABEL_25;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v19)
      return;
  }
  else
  {
LABEL_25:
    v19 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v19)
      return;
  }
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

