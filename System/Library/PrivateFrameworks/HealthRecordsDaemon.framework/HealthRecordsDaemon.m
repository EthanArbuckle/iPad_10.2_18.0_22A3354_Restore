void type metadata accessor for Result(uint64_t a1)
{
  sub_21FA2B264(a1, &qword_25553DD68);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_21FA2B264(a1, &qword_25406BA80);
}

void type metadata accessor for HKClinicalSharingReason(uint64_t a1)
{
  sub_21FA2B264(a1, &qword_25406BAA8);
}

void type metadata accessor for HKSignedClinicalDataProcessingOptions(uint64_t a1)
{
  sub_21FA2B264(a1, (unint64_t *)&unk_25553DD70);
}

void type metadata accessor for HKClinicalSharingOptions(uint64_t a1)
{
  sub_21FA2B264(a1, &qword_25406BAB8);
}

void type metadata accessor for HKClinicalSharingQueryDiagnosticOptions(uint64_t a1)
{
  sub_21FA2B264(a1, &qword_25553DD80);
}

BOOL sub_21FA29898(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_21FA298B0()
{
  sub_21FC5BE8C();
  sub_21FC5BE98();
  return sub_21FC5BEB0();
}

uint64_t sub_21FA298F4()
{
  return sub_21FC5BE98();
}

uint64_t sub_21FA2991C()
{
  sub_21FC5BE8C();
  sub_21FC5BE98();
  return sub_21FC5BEB0();
}

uint64_t sub_21FA2995C()
{
  _BYTE *v0;

  if (*v0)
    return 1635017060;
  else
    return 0x54746E65746E6F63;
}

uint64_t sub_21FA29998@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_21FA2A720(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_21FA299BC()
{
  return 0;
}

void sub_21FA299C8(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_21FA299D4()
{
  sub_21FA2B32C();
  return sub_21FC5BF10();
}

uint64_t sub_21FA299FC()
{
  sub_21FA2B32C();
  return sub_21FC5BF1C();
}

uint64_t sub_21FA29A24@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_21FA2A818(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_21FA29A50()
{
  sub_21FC5BE8C();
  sub_21FC5BE98();
  return sub_21FC5BEB0();
}

uint64_t sub_21FA29A94()
{
  return sub_21FC5BE98();
}

uint64_t sub_21FA29ABC()
{
  sub_21FC5BE8C();
  sub_21FC5BE98();
  return sub_21FC5BEB0();
}

BOOL sub_21FA29AFC(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_21FA29B2C(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

uint64_t sub_21FA29B40(uint64_t a1, uint64_t a2)
{
  return sub_21FA2A5AC(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

id sub_21FA29B58()
{
  id *v0;

  return *v0;
}

uint64_t sub_21FA29B60@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_21FA29B68(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_21FC5B5EC();
  *a2 = 0;
  return result;
}

uint64_t sub_21FA29BDC(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_21FC5B5F8();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_21FA29C58@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_21FC5B604();
  v2 = sub_21FC5B5E0();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_21FA29C98(uint64_t a1, uint64_t a2)
{
  return sub_21FA2A5AC(a1, a2, MEMORY[0x24BEE0CD8]);
}

void sub_21FA29CB0(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_21FA29CB8()
{
  return sub_21FC5BAFC();
}

_QWORD *sub_21FA29CD0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_21FA29CE0(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

_QWORD *sub_21FA29CEC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_21FA29CF8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_21FA29D0C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_QWORD *sub_21FA29D20@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_21FA29D4C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_21FA29D70(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_21FA29D84@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_21FA29D98(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_21FA29DAC()
{
  _QWORD *v0;

  return *v0 == 0;
}

_QWORD *sub_21FA29DBC(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_21FA29DD0()
{
  return sub_21FC5B604();
}

uint64_t sub_21FA29DE0()
{
  sub_21FA2A08C(&qword_25553DF18, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_21FC5DC24);
  return sub_21FC5A8CC();
}

uint64_t sub_21FA29E20()
{
  sub_21FA2A08C(&qword_25553DF18, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_21FC5DC24);
  return sub_21FC5A89C();
}

uint64_t sub_21FA29E60(void *a1)
{
  id v2;

  sub_21FA2A08C(&qword_25553DF18, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_21FC5DC24);
  v2 = a1;
  return sub_21FC5A890();
}

uint64_t sub_21FA29EC4()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = sub_21FC5BA6C();

  return v2;
}

uint64_t sub_21FA29EF8()
{
  sub_21FA2A08C(&qword_25553DF18, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_21FC5DC24);
  return sub_21FC5A8C0();
}

uint64_t sub_21FA29F48()
{
  sub_21FC5BE8C();
  sub_21FC5B598();
  return sub_21FC5BEB0();
}

_QWORD *sub_21FA29FA8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_21FA29FBC(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

BOOL sub_21FA29FD0(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_21FA29FE4(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

uint64_t sub_21FA29FF8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_21FA2AF88(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_21FA2A034()
{
  return sub_21FA2A08C(&qword_25553DD88, (uint64_t (*)(uint64_t))type metadata accessor for HKClinicalSharingQueryDiagnosticOptions, (uint64_t)&unk_21FC5CC8C);
}

uint64_t sub_21FA2A060()
{
  return sub_21FA2A08C(&qword_25553DD90, (uint64_t (*)(uint64_t))type metadata accessor for HKClinicalSharingQueryDiagnosticOptions, (uint64_t)&unk_21FC5CC58);
}

uint64_t sub_21FA2A08C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x2207D0F78](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FA2A0CC()
{
  return sub_21FA2A08C(&qword_25553DD98, (uint64_t (*)(uint64_t))type metadata accessor for HKClinicalSharingQueryDiagnosticOptions, (uint64_t)&unk_21FC5CCB8);
}

uint64_t sub_21FA2A0F8()
{
  return sub_21FA2A08C(&qword_25553DDA0, (uint64_t (*)(uint64_t))type metadata accessor for HKClinicalSharingQueryDiagnosticOptions, (uint64_t)&unk_21FC5CCF4);
}

uint64_t sub_21FA2A124()
{
  return sub_21FA2A08C((unint64_t *)&unk_25553DDA8, (uint64_t (*)(uint64_t))type metadata accessor for HKClinicalSharingOptions, (uint64_t)&unk_21FC5CE30);
}

uint64_t sub_21FA2A150()
{
  return sub_21FA2A08C((unint64_t *)&unk_25406CC20, (uint64_t (*)(uint64_t))type metadata accessor for HKClinicalSharingOptions, (uint64_t)&unk_21FC5CDFC);
}

uint64_t sub_21FA2A17C()
{
  return sub_21FA2A08C(&qword_25553DDB8, (uint64_t (*)(uint64_t))type metadata accessor for HKClinicalSharingOptions, (uint64_t)&unk_21FC5CE5C);
}

uint64_t sub_21FA2A1A8()
{
  return sub_21FA2A08C(&qword_25553DDC0, (uint64_t (*)(uint64_t))type metadata accessor for HKClinicalSharingOptions, (uint64_t)&unk_21FC5CE98);
}

uint64_t sub_21FA2A1D4()
{
  return sub_21FA2A08C(&qword_25553DDC8, (uint64_t (*)(uint64_t))type metadata accessor for HKSignedClinicalDataProcessingOptions, (uint64_t)&unk_21FC5CFD4);
}

uint64_t sub_21FA2A200()
{
  return sub_21FA2A08C(&qword_25553DDD0, (uint64_t (*)(uint64_t))type metadata accessor for HKSignedClinicalDataProcessingOptions, (uint64_t)&unk_21FC5CFA0);
}

uint64_t sub_21FA2A22C()
{
  return sub_21FA2A08C(&qword_25553DDD8, (uint64_t (*)(uint64_t))type metadata accessor for HKSignedClinicalDataProcessingOptions, (uint64_t)&unk_21FC5D000);
}

uint64_t sub_21FA2A258()
{
  return sub_21FA2A08C(&qword_25553DDE0, (uint64_t (*)(uint64_t))type metadata accessor for HKSignedClinicalDataProcessingOptions, (uint64_t)&unk_21FC5D03C);
}

uint64_t sub_21FA2A284()
{
  sub_21FA2A08C(&qword_25553DF40, (uint64_t (*)(uint64_t))type metadata accessor for HKClinicalGatewayFeatureName, (uint64_t)&unk_21FC5D46C);
  sub_21FA2A08C(&qword_25553DF48, (uint64_t (*)(uint64_t))type metadata accessor for HKClinicalGatewayFeatureName, (uint64_t)&unk_21FC5D40C);
  return sub_21FC5BCC4();
}

uint64_t sub_21FA2A308()
{
  sub_21FA2A08C(&qword_25553DEE0, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_21FC5D780);
  return sub_21FC5BE38();
}

uint64_t sub_21FA2A348()
{
  sub_21FA2A08C(&qword_25553DEE0, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_21FC5D780);
  return sub_21FC5BE2C();
}

uint64_t sub_21FA2A38C()
{
  sub_21FA2A08C(&qword_25553DF18, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_21FC5DC24);
  return sub_21FC5A884();
}

uint64_t sub_21FA2A3CC()
{
  sub_21FA2A08C(&qword_25553DF18, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_21FC5DC24);
  return sub_21FC5A8A8();
}

BOOL sub_21FA2A424(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_21FA2A438()
{
  sub_21FA2A08C(&qword_25553DF20, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_21FC5DB50);
  sub_21FA2A08C(&qword_25553DF28, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_21FC5DAF0);
  return sub_21FC5BCC4();
}

uint64_t sub_21FA2A4BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_21FC5B5E0();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_21FA2A500@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_21FC5B604();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_21FA2A528()
{
  sub_21FA2A08C((unint64_t *)&qword_25553DF30, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_21FC5DBE0);
  sub_21FA2A08C(&qword_25553DF38, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_21FC5D9DC);
  return sub_21FC5BCC4();
}

uint64_t sub_21FA2A5AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_21FC5B604();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_21FA2A5E8()
{
  sub_21FC5B604();
  sub_21FC5B67C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21FA2A628()
{
  uint64_t v0;

  sub_21FC5B604();
  sub_21FC5BE8C();
  sub_21FC5B67C();
  v0 = sub_21FC5BEB0();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_21FA2A698()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_21FC5B604();
  v2 = v1;
  if (v0 == sub_21FC5B604() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_21FC5BDF0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_21FA2A720(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x54746E65746E6F63 && a2 == 0xEB00000000657079;
  if (v2 || (sub_21FC5BDF0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_21FC5BDF0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_21FA2A818(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  char v12;

  sub_21FA2B2D4();
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_21FA2B32C();
  sub_21FC5BEE0();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v12 = 0;
    v8 = sub_21FC5BD18();
    v11 = 1;
    swift_bridgeObjectRetain();
    sub_21FC5BCE8();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v8;
}

void type metadata accessor for AuthChallengeDisposition(uint64_t a1)
{
  sub_21FA2B264(a1, &qword_25553DDE8);
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
  sub_21FA2B264(a1, &qword_25553DDF0);
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
  sub_21FA2B264(a1, &qword_25553DDF8);
}

void type metadata accessor for HKVerifiableHealthRecordsParsingOptions(uint64_t a1)
{
  sub_21FA2B264(a1, &qword_25553DE00);
}

void type metadata accessor for HKError(uint64_t a1)
{
  sub_21FA2B264(a1, &qword_25553DE08);
}

void type metadata accessor for HDXPCGatedActivityResult(uint64_t a1)
{
  sub_21FA2B264(a1, (unint64_t *)&unk_25553DE10);
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_21FA2B264(a1, &qword_25406BA78);
}

void type metadata accessor for SecCertificate(uint64_t a1)
{
  sub_21FA2B264(a1, &qword_25553DE20);
}

void type metadata accessor for CFError(uint64_t a1)
{
  sub_21FA2B264(a1, &qword_25553DE28);
}

void type metadata accessor for HKMCDaySummarySymptoms(uint64_t a1)
{
  sub_21FA2B264(a1, &qword_25553DE30);
}

void type metadata accessor for Lead(uint64_t a1)
{
  sub_21FA2B264(a1, &qword_25553DE38);
}

void type metadata accessor for HKClinicalGatewayFeatureName(uint64_t a1)
{
  sub_21FA2B264(a1, &qword_25553DE40);
}

uint64_t sub_21FA2AAB4()
{
  return sub_21FA2A08C(&qword_25553DE48, (uint64_t (*)(uint64_t))type metadata accessor for HKClinicalGatewayFeatureName, (uint64_t)&unk_21FC5D3D0);
}

uint64_t sub_21FA2AAE0()
{
  return sub_21FA2A08C(&qword_25553DE50, (uint64_t (*)(uint64_t))type metadata accessor for HKClinicalGatewayFeatureName, (uint64_t)&unk_21FC5D3A4);
}

uint64_t sub_21FA2AB0C()
{
  return sub_21FA2A08C(&qword_25553DE58, (uint64_t (*)(uint64_t))type metadata accessor for HKClinicalGatewayFeatureName, (uint64_t)&unk_21FC5D440);
}

uint64_t sub_21FA2AB38()
{
  return sub_21FA2A08C(&qword_25553DE60, (uint64_t (*)(uint64_t))type metadata accessor for HKMCDaySummarySymptoms, (uint64_t)&unk_21FC5D52C);
}

uint64_t sub_21FA2AB64()
{
  return sub_21FA2A08C(&qword_25553DE68, (uint64_t (*)(uint64_t))type metadata accessor for HKMCDaySummarySymptoms, (uint64_t)&unk_21FC5D4FC);
}

uint64_t sub_21FA2AB90()
{
  return sub_21FA2A08C(&qword_25553DE70, (uint64_t (*)(uint64_t))type metadata accessor for HKMCDaySummarySymptoms, (uint64_t)&unk_21FC5D554);
}

uint64_t sub_21FA2ABBC()
{
  return sub_21FA2A08C(&qword_25553DE78, (uint64_t (*)(uint64_t))type metadata accessor for HKMCDaySummarySymptoms, (uint64_t)&unk_21FC5D58C);
}

uint64_t sub_21FA2ABE8()
{
  return sub_21FA2A08C(&qword_25553DE80, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_21FC5D698);
}

uint64_t sub_21FA2AC14()
{
  return sub_21FA2A08C(&qword_25553DE88, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_21FC5D6C4);
}

uint64_t sub_21FA2AC40()
{
  return sub_21FA2A08C(&qword_25553DE90, (uint64_t (*)(uint64_t))type metadata accessor for HKVerifiableHealthRecordsParsingOptions, (uint64_t)&unk_21FC5D7F8);
}

uint64_t sub_21FA2AC6C()
{
  return sub_21FA2A08C(&qword_25553DE98, (uint64_t (*)(uint64_t))type metadata accessor for HKVerifiableHealthRecordsParsingOptions, (uint64_t)&unk_21FC5D7C4);
}

uint64_t sub_21FA2AC98()
{
  return sub_21FA2A08C(&qword_25553DEA0, (uint64_t (*)(uint64_t))type metadata accessor for HKVerifiableHealthRecordsParsingOptions, (uint64_t)&unk_21FC5D824);
}

uint64_t sub_21FA2ACC4()
{
  return sub_21FA2A08C(&qword_25553DEA8, (uint64_t (*)(uint64_t))type metadata accessor for HKVerifiableHealthRecordsParsingOptions, (uint64_t)&unk_21FC5D860);
}

uint64_t sub_21FA2ACF0()
{
  return sub_21FA2A08C(&qword_25553DEB0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_21FC5D9A0);
}

uint64_t sub_21FA2AD1C()
{
  return sub_21FA2A08C(&qword_25553DEB8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_21FC5D974);
}

uint64_t sub_21FA2AD48()
{
  return sub_21FA2A08C(&qword_25553DEC0, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_21FC5DAB4);
}

uint64_t sub_21FA2AD74()
{
  return sub_21FA2A08C(&qword_25553DEC8, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_21FC5DA88);
}

uint64_t sub_21FA2ADA0()
{
  return sub_21FA2A08C(&qword_25553DED0, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_21FC5DB24);
}

uint64_t sub_21FA2ADCC()
{
  return sub_21FA2A08C(&qword_25553DED8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_21FC5DA10);
}

uint64_t sub_21FA2ADF8()
{
  return sub_21FA2A08C(&qword_25553DEE0, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_21FC5D780);
}

uint64_t sub_21FA2AE24()
{
  return sub_21FA2A08C(&qword_25553DEE8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_21FC5D74C);
}

uint64_t sub_21FA2AE50()
{
  return sub_21FA2A08C(&qword_25553DEF0, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_21FC5D708);
}

uint64_t sub_21FA2AE7C()
{
  return sub_21FA2A08C(&qword_25553DEF8, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_21FC5DCCC);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_21FA2B264(a1, &qword_25553DF68);
}

uint64_t sub_21FA2AEBC()
{
  return sub_21FA2A08C(&qword_25553DF00, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_21FC5DC90);
}

unint64_t sub_21FA2AEEC()
{
  unint64_t result;

  result = qword_25553DF08;
  if (!qword_25553DF08)
  {
    result = MEMORY[0x2207D0F78](MEMORY[0x24BEE17C8], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_25553DF08);
  }
  return result;
}

uint64_t sub_21FA2AF30()
{
  return sub_21FA2A08C(&qword_25553DF10, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_21FC5DD08);
}

uint64_t sub_21FA2AF5C()
{
  return sub_21FA2A08C(&qword_25553DF18, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_21FC5DC24);
}

uint64_t sub_21FA2AF88(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

void type metadata accessor for HKCategoryValueSleepAnalysis(uint64_t a1)
{
  sub_21FA2B264(a1, &qword_25553DF50);
}

void type metadata accessor for HKInspectableValueCollectionType(uint64_t a1)
{
  sub_21FA2B264(a1, &qword_25553DF58);
}

void type metadata accessor for HKInspectableValueType(uint64_t a1)
{
  sub_21FA2B264(a1, &qword_25553DF60);
}

uint64_t initializeBufferWithCopyOfBuffer for ClinicalSharingFHIRAttachment(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for ClinicalSharingFHIRAttachment()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ClinicalSharingFHIRAttachment(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ClinicalSharingFHIRAttachment(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for ClinicalSharingFHIRAttachment(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClinicalSharingFHIRAttachment(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClinicalSharingFHIRAttachment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingFHIRAttachment()
{
  return &type metadata for ClinicalSharingFHIRAttachment;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_21FA2B1F4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_21FA2B214(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for HKDayIndexRange(uint64_t a1)
{
  sub_21FA2B264(a1, &qword_25553DF70);
}

void type metadata accessor for HKMedicalRecordCategoryType(uint64_t a1)
{
  sub_21FA2B264(a1, &qword_25553DF78);
}

void sub_21FA2B264(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_21FA2B2A8()
{
  return sub_21FA2A08C(&qword_25553DF80, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueSleepAnalysis, (uint64_t)&unk_21FC5DEC8);
}

void sub_21FA2B2D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553DF88)
  {
    sub_21FA2B32C();
    v0 = sub_21FC5BD3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553DF88);
  }
}

unint64_t sub_21FA2B32C()
{
  unint64_t result;

  result = qword_25553DF90;
  if (!qword_25553DF90)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC5E01C, &type metadata for ClinicalSharingFHIRAttachment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25553DF90);
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ClinicalSharingFHIRAttachment.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ClinicalSharingFHIRAttachment.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21FA2B49C + 4 * byte_21FC5CB45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21FA2B4D0 + 4 * byte_21FC5CB40[v4]))();
}

uint64_t sub_21FA2B4D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FA2B4D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FA2B4E0);
  return result;
}

uint64_t sub_21FA2B4EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FA2B4F4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21FA2B4F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FA2B500(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FA2B50C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_21FA2B518(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingFHIRAttachment.CodingKeys()
{
  return &type metadata for ClinicalSharingFHIRAttachment.CodingKeys;
}

unint64_t sub_21FA2B538()
{
  unint64_t result;

  result = qword_25553DF98;
  if (!qword_25553DF98)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC5DFF4, &type metadata for ClinicalSharingFHIRAttachment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25553DF98);
  }
  return result;
}

unint64_t sub_21FA2B580()
{
  unint64_t result;

  result = qword_25553DFA0;
  if (!qword_25553DFA0)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC5DF64, &type metadata for ClinicalSharingFHIRAttachment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25553DFA0);
  }
  return result;
}

unint64_t sub_21FA2B5C8()
{
  unint64_t result;

  result = qword_25553DFA8;
  if (!qword_25553DFA8)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC5DF8C, &type metadata for ClinicalSharingFHIRAttachment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25553DFA8);
  }
  return result;
}

uint64_t *sub_21FA2B664(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  void *v14;
  id v15;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_21FC5A6C8();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_retain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = *(void **)((char *)a2 + v13);
    *(uint64_t *)((char *)v7 + v13) = (uint64_t)v14;
    v15 = v14;
  }
  return v7;
}

void sub_21FA2B71C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_21FC5A6C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

}

_QWORD *sub_21FA2B778(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  void *v12;
  id v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21FC5A6C8();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_retain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = *(void **)((char *)a2 + v11);
  *(_QWORD *)((char *)a1 + v11) = v12;
  v13 = v12;
  return a1;
}

_QWORD *sub_21FA2B808(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21FC5A6C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = *(void **)((char *)a2 + v10);
  v12 = *(void **)((char *)a1 + v10);
  *(_QWORD *)((char *)a1 + v10) = v11;
  v13 = v11;

  return a1;
}

_QWORD *sub_21FA2B89C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21FC5A6C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_21FA2B914(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *a1 = *a2;
  swift_release();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21FC5A6C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = *(void **)((char *)a1 + v10);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);

  return a1;
}

uint64_t sub_21FA2B99C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA2B9A8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_21FC5A6C8();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_21FA2BA24()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_21FA2BA30(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_21FC5A6C8();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ClinicalSharingWalkingSteadinessClassificationQuery()
{
  uint64_t result;

  result = qword_25553E068;
  if (!qword_25553E068)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21FA2BAE0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_21FC5A6C8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21FA2BB64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void (*v21)(char *, uint64_t);
  void *v22;
  id v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD v56[7];

  v1 = type metadata accessor for ClinicalSharingWalkingSteadinessClassificationQuery();
  v2 = *(_QWORD *)(*(_QWORD *)(v1 - 8) + 64);
  v46 = *(_QWORD *)(v1 - 8);
  v47 = v2;
  MEMORY[0x24BDAC7A8](v1);
  v45 = (uint64_t)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_21FC5B8E0();
  v5 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  v44 = v5;
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2CE08(0, (unint64_t *)&qword_25553E0A8, (void (*)(uint64_t))type metadata accessor for PBTypedData);
  v50 = v8;
  v52 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v48 = (char *)&v41 - v9;
  sub_21FA2CE08(0, &qword_25553E0D0, (void (*)(uint64_t))type metadata accessor for ClinicalSharingQueryOutput);
  v51 = v10;
  v53 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v49 = (char *)&v41 - v11;
  v12 = sub_21FC5AAAC();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(int *)(v1 + 24);
  v54 = (_QWORD *)v0;
  v17 = *(void **)(v0 + v16);
  v18 = (void *)objc_opt_self();
  v19 = v17;
  sub_21FC5A6A4();
  v20 = (void *)sub_21FC5AA64();
  v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v15, v12);
  sub_21FC5A680();
  v22 = (void *)sub_21FC5AA64();
  v21(v15, v12);
  v23 = objc_msgSend(v18, sel_predicateForSamplesWithStartDate_endDate_options_, v20, v22, 0);

  v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3E98]), sel_initWithSampleType_predicate_, v19, v23);
  v25 = v54;
  sub_21FBE6F50(0xD000000000000021, 0x800000021FC74B70, *(_QWORD *)((char *)v54 + v16), 5, 1);
  v26 = (uint64_t)v25;
  sub_21FA2CEA0(*v25 + 16, (uint64_t)v56);
  __swift_project_boxed_opaque_existential_1(v56, v56[3]);
  sub_21FA2CEE4();
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_21FC5E070;
  *(_QWORD *)(v27 + 32) = v24;
  v55 = v27;
  sub_21FC5B7C0();
  v42 = v24;
  sub_21FC5B8EC();
  sub_21FA2A08C(&qword_25553E0D8, (uint64_t (*)(uint64_t))MEMORY[0x24BE459E0], MEMORY[0x24BE459D8]);
  v28 = v43;
  v29 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v7, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v55 = v29;
  v30 = v45;
  sub_21FA2D120(v26, v45, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingWalkingSteadinessClassificationQuery);
  v31 = (*(unsigned __int8 *)(v46 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  v32 = swift_allocObject();
  sub_21FA2D23C(v30, v32 + v31, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingWalkingSteadinessClassificationQuery);
  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = sub_21FA2CF40;
  *(_QWORD *)(v33 + 24) = v32;
  sub_21FA2CCF4();
  type metadata accessor for PBTypedData(0);
  sub_21FA2A08C(&qword_25553E0C8, (uint64_t (*)(uint64_t))sub_21FA2CCF4, MEMORY[0x24BDB9AF8]);
  v34 = v48;
  sub_21FC5B28C();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
  sub_21FA2D120((uint64_t)v54, v30, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingWalkingSteadinessClassificationQuery);
  v35 = swift_allocObject();
  sub_21FA2D23C(v30, v35 + v31, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingWalkingSteadinessClassificationQuery);
  type metadata accessor for ClinicalSharingQueryOutput(0);
  v37 = v49;
  v36 = v50;
  sub_21FC5AFF8();
  swift_release();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v34, v36);
  sub_21FA2D0AC();
  v38 = v51;
  v39 = sub_21FC5B280();

  (*(void (**)(char *, uint64_t))(v53 + 8))(v37, v38);
  return v39;
}

uint64_t sub_21FA2C088@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _BYTE v46[16];

  v4 = type metadata accessor for ClinicalSharingWalkingSteadinessClassificationQuery();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D1A0(0, &qword_25553E0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v40 - v8;
  v10 = type metadata accessor for PBDateRange(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PBCategorySeries(0);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v40 - v17;
  if (!(a1 >> 62))
  {
    if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_14:
    v36 = type metadata accessor for PBTypedData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(a2, 1, 1, v36);
  }
  swift_bridgeObjectRetain();
  v35 = sub_21FC5BC7C();
  swift_bridgeObjectRelease();
  if (!v35)
    goto LABEL_14;
LABEL_3:
  v41 = v12;
  v19 = sub_21FAC1B2C(a1);
  if (v19)
  {
    v20 = v19;
    MEMORY[0x24BDAC7A8](v19);
    v39 = v43;
    v21 = sub_21FC41D10((void (*)(id *))sub_21FA2D104, (uint64_t)(&v40 - 4), v20, (uint64_t)v46);
    swift_bridgeObjectRelease();
    sub_21FC5AD10();
    v22 = *(int *)(v13 + 20);
    if (qword_25553D868 != -1)
      swift_once();
    *(_QWORD *)&v18[v22] = qword_255543A10;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBCategorySeries._StorageClass(0);
      swift_allocObject();
      v23 = swift_retain();
      *(_QWORD *)&v18[v22] = sub_21FB4D47C(v23);
      swift_release();
    }
    v42 = v16;
    v24 = (uint64_t *)(*(_QWORD *)&v18[v22]
                    + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBCategorySeriesP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__events);
    swift_beginAccess();
    *v24 = v21;
    swift_bridgeObjectRelease();
    sub_21FC5AD10();
    v25 = type metadata accessor for PBTypedData(0);
    v26 = *(int *)(v25 + 20);
    if (qword_25553D590 != -1)
      swift_once();
    *(_QWORD *)(a2 + v26) = qword_25553E450;
    v27 = v43 + *(int *)(v4 + 20);
    v28 = sub_21FC5A6C8();
    v29 = *(_QWORD *)(v28 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v9, v27, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v9, 0, 1, v28);
    swift_retain();
    v30 = (uint64_t)v41;
    sub_21FBE7E8C(5, 1, v9);
    sub_21FA2D1F8((uint64_t)v9, &qword_25553E0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878]);
    PBTypedData.dateRange.setter(v30);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBTypedData._StorageClass(0);
      swift_allocObject();
      v31 = swift_retain();
      *(_QWORD *)(a2 + v26) = sub_21FA3A458(v31);
      swift_release();
    }
    v32 = *(_QWORD *)(a2 + v26);
    swift_beginAccess();
    *(_QWORD *)(v32 + 16) = 125;
    *(_BYTE *)(v32 + 24) = 1;
    v33 = (uint64_t)v42;
    sub_21FA2D120((uint64_t)v18, (uint64_t)v42, type metadata accessor for PBCategorySeries);
    PBTypedData.categorySeries.setter(v33);
    sub_21FA2D164((uint64_t)v18);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a2, 0, 1, v25);
  }
  else
  {
    sub_21FA2D120(v43, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingWalkingSteadinessClassificationQuery);
    v44 = 0;
    v45 = 0xE000000000000000;
    sub_21FC5BB74();
    swift_bridgeObjectRelease();
    v44 = 0xD000000000000023;
    v45 = 0x800000021FC74BF0;
    v37 = *(id *)&v6[*(int *)(v4 + 24)];
    v38 = objc_msgSend(v37, sel_description);
    sub_21FC5B604();

    sub_21FC5B6AC();
    swift_bridgeObjectRelease();
    result = sub_21FC5BC70();
    __break(1u);
  }
  return result;
}

void sub_21FA2C5F0(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void (*v27)(char *, _QWORD, uint64_t, uint64_t);
  id v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  id v37;
  double v38;
  double v39;
  double v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;

  v66 = a2;
  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_21FA2D1A0(0, &qword_25553E0F0, type metadata accessor for PBCategorySeries.Event.OneOf_AdditionalData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v6 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v62 = (uint64_t)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v61 = (uint64_t *)((char *)&v60 - v8);
  sub_21FA2D1A0(0, &qword_25553E0F8, type metadata accessor for PBDateRange, v5);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v67 = (uint64_t)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v60 - v12;
  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], v5);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v60 - v18;
  v20 = type metadata accessor for PBDateRange(0);
  v64 = *(_QWORD *)(v20 - 8);
  v65 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *a1;
  sub_21FC5AD10();
  v24 = *(int *)(type metadata accessor for PBCategorySeries.Event(0) + 20);
  if (qword_25553D890 != -1)
    swift_once();
  *(_QWORD *)(a3 + v24) = qword_255543A68;
  swift_retain();
  v25 = objc_msgSend(v23, sel_startDate);
  sub_21FC5AA94();

  v26 = sub_21FC5AAAC();
  v27 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
  v27(v19, 0, 1, v26);
  v68 = v23;
  v28 = objc_msgSend(v23, sel_endDate);
  sub_21FC5AA94();

  v27(v17, 0, 1, v26);
  sub_21FC0329C(v19, v17);
  v29 = (uint64_t)v17;
  v30 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
  sub_21FA2D1F8(v29, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  sub_21FA2D1F8((uint64_t)v19, (unint64_t *)&qword_25406AAE8, v30);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBCategorySeries.Event._StorageClass(0);
    swift_allocObject();
    v31 = swift_retain();
    *(_QWORD *)(a3 + v24) = sub_21FB4E9EC(v31);
    swift_release();
  }
  v32 = *(_QWORD *)(a3 + v24);
  sub_21FA2D23C((uint64_t)v22, (uint64_t)v13, type metadata accessor for PBDateRange);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v13, 0, 1, v65);
  v33 = v67;
  sub_21FA2D280((uint64_t)v13, v67, &qword_25553E0F8, type metadata accessor for PBDateRange);
  v34 = v32
      + OBJC_IVAR____TtCVV19HealthRecordsDaemon16PBCategorySeries5EventP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__recordedTime;
  swift_beginAccess();
  swift_retain();
  sub_21FA2D2D8(v33, v34, &qword_25553E0F8, type metadata accessor for PBDateRange);
  swift_endAccess();
  swift_release();
  v35 = v68;
  v36 = objc_msgSend(v68, sel_quantity);
  v37 = objc_msgSend((id)objc_opt_self(), sel_percentUnit);
  objc_msgSend(v36, sel_doubleValueForUnit_, v37);
  v39 = v38;

  v40 = v39 * 100.0;
  if ((~COERCE__INT64(v39 * 100.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v40 <= -2147483650.0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v40 >= 2147483650.0)
  {
LABEL_29:
    __break(1u);
    return;
  }
  v41 = (int)v40;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBCategorySeries.Event._StorageClass(0);
    swift_allocObject();
    v42 = swift_retain();
    *(_QWORD *)(a3 + v24) = sub_21FB4E9EC(v42);
    swift_release();
  }
  v43 = *(_QWORD *)(a3 + v24);
  swift_beginAccess();
  *(_DWORD *)(v43 + 16) = v41;
  v44 = objc_msgSend(v35, sel_quantity);
  v45 = v63;
  v46 = sub_21FC5BA3C();
  if (v45)
  {

  }
  else
  {
    v47 = v46;
    v48 = v46 - 1;
    switch(v46)
    {
      case 1:
        v49 = 0xE200000000000000;
        v50 = 27503;
        break;
      case 3:
        v49 = 0xE700000000000000;
        v50 = 0x776F4C79726576;
        break;
      case 2:
        v49 = 0xE300000000000000;
        v50 = 7827308;
        break;
      default:
        v49 = 0xE600000000000000;
        v50 = 0x746553746F6ELL;
        break;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBCategorySeries.Event._StorageClass(0);
      swift_allocObject();
      v51 = swift_retain();
      *(_QWORD *)(a3 + v24) = sub_21FB4E9EC(v51);
      swift_release();
    }
    v52 = *(_QWORD *)(a3 + v24);
    swift_beginAccess();
    *(_QWORD *)(v52 + 24) = v50;
    *(_QWORD *)(v52 + 32) = v49;
    swift_bridgeObjectRelease();
    if (v48 >= 3)
      v53 = 0;
    else
      v53 = v47;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBCategorySeries.Event._StorageClass(0);
      swift_allocObject();
      v54 = swift_retain();
      *(_QWORD *)(a3 + v24) = sub_21FB4E9EC(v54);
      swift_release();
    }
    v55 = *(_QWORD *)(a3 + v24);
    v56 = (uint64_t)v61;
    *v61 = v53;
    *(_BYTE *)(v56 + 8) = 1;
    v57 = type metadata accessor for PBCategorySeries.Event.OneOf_AdditionalData(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v56, 0, 1, v57);
    v58 = v62;
    sub_21FA2D280(v56, v62, &qword_25553E0F0, type metadata accessor for PBCategorySeries.Event.OneOf_AdditionalData);
    v59 = v55
        + OBJC_IVAR____TtCVV19HealthRecordsDaemon16PBCategorySeries5EventP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__additionalData;
    swift_beginAccess();
    swift_retain();
    sub_21FA2D2D8(v58, v59, &qword_25553E0F0, type metadata accessor for PBCategorySeries.Event.OneOf_AdditionalData);
    swift_endAccess();
    swift_release();
  }
}

void sub_21FA2CCF4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553E0B0)
  {
    sub_21FA2D1A0(255, (unint64_t *)&qword_25553E0B8, (uint64_t (*)(uint64_t))sub_21FA2CD78, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FA2CDB4();
    v0 = sub_21FC5B190();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553E0B0);
  }
}

unint64_t sub_21FA2CD78()
{
  unint64_t result;

  result = qword_25553E0C0;
  if (!qword_25553E0C0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25553E0C0);
  }
  return result;
}

unint64_t sub_21FA2CDB4()
{
  unint64_t result;

  result = qword_25406BB50;
  if (!qword_25406BB50)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_25406BB50);
  }
  return result;
}

void sub_21FA2CE08(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_21FA2CCF4();
    a3(255);
    sub_21FA2A08C(&qword_25553E0C8, (uint64_t (*)(uint64_t))sub_21FA2CCF4, MEMORY[0x24BDB9AF8]);
    v5 = sub_21FC5B004();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t sub_21FA2CEA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_21FA2CEE4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554BAF0)
  {
    v0 = sub_21FC5BDD8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554BAF0);
  }
}

uint64_t sub_21FA2CF40@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for ClinicalSharingWalkingSteadinessClassificationQuery();
  return sub_21FA2C088(a1, a2);
}

uint64_t sub_21FA2CF90()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FA2CFB4(_QWORD *a1)
{
  uint64_t v1;

  return sub_21FAF2614(a1, *(uint64_t (**)(_QWORD))(v1 + 16));
}

uint64_t objectdestroyTm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for ClinicalSharingWalkingSteadinessClassificationQuery();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  v4 = v3 + *(int *)(v1 + 20);
  v5 = sub_21FC5A6C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

  return swift_deallocObject();
}

uint64_t sub_21FA2D058@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for ClinicalSharingWalkingSteadinessClassificationQuery();
  return sub_21FBE70B4(a1, 0, a2);
}

unint64_t sub_21FA2D0AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25553E0E0;
  if (!qword_25553E0E0)
  {
    sub_21FA2CE08(255, &qword_25553E0D0, (void (*)(uint64_t))type metadata accessor for ClinicalSharingQueryOutput);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB94C8], v1);
    atomic_store(result, (unint64_t *)&qword_25553E0E0);
  }
  return result;
}

void sub_21FA2D104(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_21FA2C5F0(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_21FA2D120(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_21FA2D164(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PBCategorySeries(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_21FA2D1A0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_21FA2D1F8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  sub_21FA2D1A0(0, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_21FA2D23C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_21FA2D280(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_21FA2D1A0(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_21FA2D2D8(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_21FA2D1A0(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t sub_21FA2D330@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  __int128 v15;
  uint64_t v16;

  v16 = *a1;
  v7 = *((_BYTE *)a1 + 8);
  v8 = sub_21FC5ACF8();
  v10 = v9;
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 24) = 1;
  *(_QWORD *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 40) = 1;
  *(_QWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 56) = 0xE000000000000000;
  type metadata accessor for PBRevocationAuthorization();
  sub_21FC5AD10();
  sub_21FC5A794();
  swift_allocObject();
  *(_QWORD *)&v15 = 0x2000000000;
  *((_QWORD *)&v15 + 1) = sub_21FC5A770() | 0x4000000000000000;
  sub_21FA2D488((uint64_t)&v15);
  if (v11)
  {
    v12 = v11;
    sub_21FA2D72C();
    swift_allocError();
    *v13 = v12;
    swift_willThrow();
    sub_21FA2D770(v15, *((unint64_t *)&v15 + 1));
    swift_bridgeObjectRelease();
    return sub_21FA2D7B4(a4);
  }
  else
  {
    result = sub_21FA2D770(v8, v10);
    *(_OWORD *)a4 = v15;
    *(_QWORD *)(a4 + 48) = a2;
    *(_QWORD *)(a4 + 56) = a3;
    *(_QWORD *)(a4 + 16) = 1;
    *(_BYTE *)(a4 + 24) = 1;
    *(_QWORD *)(a4 + 32) = v16;
    *(_BYTE *)(a4 + 40) = v7;
  }
  return result;
}

void sub_21FA2D488(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_21FA2D4E4@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t bytes, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _QWORD *v17;
  size_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;

  v22 = v19;
  LOWORD(v23) = a1;
  BYTE2(v23) = BYTE2(a1);
  HIBYTE(v23) = BYTE3(a1);
  v24 = BYTE4(a1);
  v25 = BYTE5(a1);
  v26 = BYTE6(a1);
  result = SecRandomCopyBytes((SecRandomRef)*MEMORY[0x24BDE94B8], v18, &v22);
  v21 = v23 | ((unint64_t)v24 << 32) | ((unint64_t)v25 << 40) | ((unint64_t)v26 << 48);
  *v17 = v22;
  v17[1] = v21;
  return result;
}

unint64_t sub_21FA2D72C()
{
  unint64_t result;

  result = qword_25553E100;
  if (!qword_25553E100)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC60380, &type metadata for DataError);
    atomic_store(result, (unint64_t *)&qword_25553E100);
  }
  return result;
}

uint64_t sub_21FA2D770(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_21FA2D7B4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PBRevocationAuthorization();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21FA2D7F0(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = sub_21FC5A764();
  if (result)
  {
    v8 = result;
    result = sub_21FC5A788();
    v9 = a1 - result;
    if (__OFSUB__(a1, result))
    {
      __break(1u);
    }
    else if (!__OFSUB__(a2, a1))
    {
      sub_21FC5A77C();
      return SecRandomCopyBytes((SecRandomRef)*MEMORY[0x24BDE94B8], a4, (void *)(v8 + v9));
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_21FA2D880()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  id v10;
  double v11;
  double v12;
  void *v13;
  __int128 v14;
  __int128 v15;

  v1 = objc_msgSend(v0, sel_sampleType);
  v2 = objc_msgSend(v1, sel_code);

  if (v2 != (id)147 && v2 != (id)140)
    return;
  v3 = objc_msgSend(v0, sel_metadata);
  if (!v3)
  {
    v14 = 0u;
    v15 = 0u;
    goto LABEL_14;
  }
  v4 = v3;
  v5 = sub_21FC5B568();

  v6 = sub_21FC5B604();
  if (!*(_QWORD *)(v5 + 16) || (v8 = sub_21FA73F34(v6, v7), (v9 & 1) == 0))
  {
    v14 = 0u;
    v15 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  sub_21FA2DB6C(*(_QWORD *)(v5 + 56) + 32 * v8, (uint64_t)&v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v15 + 1))
  {
LABEL_14:
    sub_21FA2DA9C((uint64_t)&v14);
    return;
  }
  sub_21FA2DB30();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v10 = objc_msgSend((id)objc_opt_self(), sel__countPerMinuteUnit);
    objc_msgSend(v13, sel_doubleValueForUnit_, v10);
    v12 = v11;

    if ((~*(_QWORD *)&v12 & 0x7FF0000000000000) != 0)
    {
      if (v12 > -9.22337204e18)
      {
        if (v12 < 9.22337204e18)
        {
          *(_QWORD *)&v14 = (uint64_t)v12;
          sub_21FC5BDCC();

          return;
        }
        goto LABEL_18;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_18:
    __break(1u);
  }
}

uint64_t sub_21FA2DA9C(uint64_t a1)
{
  uint64_t v2;

  sub_21FA2DAD8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_21FA2DAD8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406BB90)
  {
    v0 = sub_21FC5BAA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406BB90);
  }
}

unint64_t sub_21FA2DB30()
{
  unint64_t result;

  result = qword_25553E108;
  if (!qword_25553E108)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25553E108);
  }
  return result;
}

uint64_t sub_21FA2DB6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_21FA2DBA8(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xE900000000000031;
  v3 = 0x6B36353270636573;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x3635322D50;
    else
      v5 = 0x39313535326445;
    if (v4 == 1)
      v6 = 0xE500000000000000;
    else
      v6 = 0xE700000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x6B36353270636573;
  v6 = 0xE900000000000031;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x3635322D50;
    else
      v3 = 0x39313535326445;
    if (v7 == 1)
      v2 = 0xE500000000000000;
    else
      v2 = 0xE700000000000000;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_21FC5BDF0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_21FA2DCB8(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 17221;
    else
      v3 = 5262159;
    if (v2 == 1)
      v4 = 0xE200000000000000;
    else
      v4 = 0xE300000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 17221;
      else
        v6 = 5262159;
      if (v5 == 1)
        v7 = 0xE200000000000000;
      else
        v7 = 0xE300000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE300000000000000;
    v3 = 4281170;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE300000000000000;
  if (v3 != 4281170)
  {
LABEL_21:
    v8 = sub_21FC5BDF0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_21FA2DD98(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6E776F6E6B6E75;
  else
    v3 = 0xD000000000000018;
  if (v2)
    v4 = 0x800000021FC74B10;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6E776F6E6B6E75;
  else
    v5 = 0xD000000000000018;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0x800000021FC74B10;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_21FC5BDF0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_21FA2DE40(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7972726163;
  else
    v3 = 1685025392;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x7972726163;
  else
    v5 = 1685025392;
  if ((a2 & 1) != 0)
    v6 = 0xE500000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_21FC5BDF0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

BOOL sub_21FA2DED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1 == a3;
}

void sub_21FA2DEE4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_21FA2DF24(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_21FA2DF84 + 4 * byte_21FC5E0F4[a2]))(1701667182);
}

uint64_t sub_21FA2DF84(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1701667182 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = sub_21FC5BDF0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

BOOL sub_21FA2E028(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if ((a2 & 1) != 0)
    a1 = qword_21FC5E250[a1];
  if ((a4 & 1) != 0)
    a3 = qword_21FC5E250[a3];
  return a1 == a3;
}

BOOL sub_21FA2E04C(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if ((a2 & 1) != 0)
    a1 = qword_21FC5E290[a1];
  if ((a4 & 1) != 0)
    a3 = qword_21FC5E290[a3];
  return a1 == a3;
}

uint64_t sub_21FA2E070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = ContentVariables.rawValue.getter();
  v2 = v1;
  if (v0 == ContentVariables.rawValue.getter() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_21FC5BDF0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

void sub_21FA2E104(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_21FA2E154(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_21FA2E1EC + 4 * byte_21FC5E100[a2]))(0x4554454C4544);
}

uint64_t sub_21FA2E1EC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x4554454C4544 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = sub_21FC5BDF0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t ClinicalIngestionAnalyticsMetricKey.reportedHost.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ClinicalIngestionAnalyticsMetricKey.resourceType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

void ClinicalIngestionAnalyticsMetricKey.interactionType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 48);
}

uint64_t sub_21FA2E348()
{
  id v0;

  swift_bridgeObjectRetain();
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  swift_bridgeObjectRetain_n();
  sub_21FC5BE08();
  v0 = (id)HKSensitiveLogItem();
  swift_unknownObjectRelease();
  sub_21FC5BAF0();
  swift_unknownObjectRelease();
  sub_21FC5B64C();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  return 40;
}

uint64_t ClinicalIngestionAnalyticsMetricKey.__allocating_init(reportedHost:resourceType:interactionType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t result;
  char v11;

  result = swift_allocObject();
  v11 = *a5;
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 40) = a4;
  *(_BYTE *)(result + 48) = v11;
  return result;
}

uint64_t ClinicalIngestionAnalyticsMetricKey.init(reportedHost:resourceType:interactionType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v5;
  char v6;

  v6 = *a5;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = a4;
  *(_BYTE *)(v5 + 48) = v6;
  return v5;
}

uint64_t ClinicalIngestionAnalyticsMetricKey.__allocating_init(with:interactionType:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  ClinicalIngestionAnalyticsMetricKey.init(with:interactionType:)(a1, a2);
  return v4;
}

uint64_t ClinicalIngestionAnalyticsMetricKey.init(with:interactionType:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned __int8 v10;

  v10 = *a2;
  v4 = _s19HealthRecordsDaemon35ClinicalIngestionAnalyticsMetricKeyC09analyticsgH04with15interactionTypeAC10Foundation3URLV_AA0def11InteractionL0OtFZ_0(a1, &v10);
  v5 = sub_21FC5A98C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  v6 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v2 + 24) = v6;
  v7 = *(_QWORD *)(v4 + 40);
  *(_QWORD *)(v2 + 32) = *(_QWORD *)(v4 + 32);
  *(_QWORD *)(v2 + 40) = v7;
  v8 = *(_BYTE *)(v4 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  *(_BYTE *)(v2 + 48) = v8;
  return v2;
}

uint64_t sub_21FA2E608(uint64_t a1)
{
  uint64_t v1;
  BOOL v3;
  char v4;
  BOOL v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = *(_QWORD *)(v1 + 16) == *(_QWORD *)(a1 + 16) && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 24);
  if (v3 || (v4 = 0, (sub_21FC5BDF0() & 1) != 0))
  {
    v5 = *(_QWORD *)(v1 + 32) == *(_QWORD *)(a1 + 32) && *(_QWORD *)(v1 + 40) == *(_QWORD *)(a1 + 40);
    if (v5 || (v4 = 0, (sub_21FC5BDF0() & 1) != 0))
    {
      v6 = *(unsigned __int8 *)(a1 + 48);
      if (*(_BYTE *)(v1 + 48))
        v7 = 0x6E776F6E6B6E75;
      else
        v7 = 0xD000000000000018;
      if (*(_BYTE *)(v1 + 48))
        v8 = 0xE700000000000000;
      else
        v8 = 0x800000021FC74B10;
      if (v6)
        v9 = 0x6E776F6E6B6E75;
      else
        v9 = 0xD000000000000018;
      if (v6)
        v10 = 0xE700000000000000;
      else
        v10 = 0x800000021FC74B10;
      if (v7 == v9 && v8 == v10)
        v4 = 1;
      else
        v4 = sub_21FC5BDF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  return v4 & 1;
}

uint64_t static ClinicalIngestionAnalyticsMetricKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a2) & 1;
}

uint64_t sub_21FA2E730()
{
  swift_bridgeObjectRetain();
  sub_21FC5B67C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_21FC5B67C();
  swift_bridgeObjectRelease();
  sub_21FC5B67C();
  return swift_bridgeObjectRelease();
}

uint64_t ClinicalIngestionAnalyticsMetricKey.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ClinicalIngestionAnalyticsMetricKey.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_21FA2E838()
{
  uint64_t v0;
  _BYTE v2[72];

  sub_21FC5BE8C();
  (*(void (**)(_BYTE *))(*(_QWORD *)v0 + 136))(v2);
  return sub_21FC5BEB0();
}

uint64_t sub_21FA2E87C()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_21FC5BE8C();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 136))(v3);
  return sub_21FC5BEB0();
}

uint64_t sub_21FA2E8C4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 136))();
}

uint64_t sub_21FA2E8EC()
{
  uint64_t v0;
  _BYTE v2[72];

  sub_21FC5BE8C();
  (*(void (**)(_BYTE *))(**(_QWORD **)v0 + 136))(v2);
  return sub_21FC5BEB0();
}

uint64_t sub_21FA2E930(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 128))(*a2) & 1;
}

uint64_t _s19HealthRecordsDaemon35ClinicalIngestionAnalyticsMetricKeyC09analyticsgH04with15interactionTypeAC10Foundation3URLV_AA0def11InteractionL0OtFZ_0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(_QWORD *, uint64_t, uint64_t);
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t result;
  _BYTE v27[12];
  int v28;

  sub_21FA2ED54(0, &qword_25553E1F0, (void (*)(uint64_t))sub_21FA2ECEC);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = &v27[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v4);
  v8 = &v27[-v7];
  sub_21FA2ED54(0, (unint64_t *)&qword_25406AAC8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v27[-v10];
  v28 = *a2;
  sub_21FC0A6F4(v8);
  sub_21FA2ECEC();
  v13 = v12;
  v14 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48);
  if (v14(v8, 1, v12) == 1)
  {
    sub_21FA2EDA0((uint64_t)v8, &qword_25553E1F0, (void (*)(uint64_t))sub_21FA2ECEC);
    v15 = sub_21FC5A98C();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v11, 1, 1, v15);
LABEL_4:
    sub_21FA2EDA0((uint64_t)v11, (unint64_t *)&qword_25406AAC8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    v19 = 0xE700000000000000;
    v20 = 0x6E776F6E6B6E75;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = (char *)v8 + *(int *)(v13 + 64);
  v17 = sub_21FC5A98C();
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(_BYTE *, char *, uint64_t))(v18 + 32))(v11, v16, v17);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v11, 0, 1, v17);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48))(v11, 1, v17) == 1)
    goto LABEL_4;
  v20 = sub_21FC5A8FC();
  v19 = v21;
  (*(void (**)(_BYTE *, uint64_t))(v18 + 8))(v11, v17);
LABEL_6:
  sub_21FC0A6F4(v6);
  if (v14(v6, 1, v13) == 1)
  {
    sub_21FA2EDA0((uint64_t)v6, &qword_25553E1F0, (void (*)(uint64_t))sub_21FA2ECEC);
    v22 = 0x800000021FC74C90;
    v23 = 0xD000000000000013;
  }
  else
  {
    swift_bridgeObjectRelease();
    v23 = v6[2];
    v22 = v6[3];
    v24 = (char *)v6 + *(int *)(v13 + 64);
    v25 = sub_21FC5A98C();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  }
  type metadata accessor for ClinicalIngestionAnalyticsMetricKey();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v20;
  *(_QWORD *)(result + 24) = v19;
  *(_QWORD *)(result + 32) = v23;
  *(_QWORD *)(result + 40) = v22;
  *(_BYTE *)(result + 48) = v28;
  return result;
}

unint64_t sub_21FA2EC34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25553E110;
  if (!qword_25553E110)
  {
    v1 = type metadata accessor for ClinicalIngestionAnalyticsMetricKey();
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for ClinicalIngestionAnalyticsMetricKey, v1);
    atomic_store(result, (unint64_t *)&qword_25553E110);
  }
  return result;
}

uint64_t type metadata accessor for ClinicalIngestionAnalyticsMetricKey()
{
  return objc_opt_self();
}

uint64_t _s19HealthRecordsDaemon39ClinicalIngestionAnalyticsMetricElementP03keyH0AA0defG3KeyCvgTj_0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t method lookup function for ClinicalIngestionAnalyticsMetricKey()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ClinicalIngestionAnalyticsMetricKey.analyticsString.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of ClinicalIngestionAnalyticsMetricKey.__allocating_init(reportedHost:resourceType:interactionType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of ClinicalIngestionAnalyticsMetricKey.__allocating_init(with:interactionType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of ClinicalIngestionAnalyticsMetricKey.equalTo(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of ClinicalIngestionAnalyticsMetricKey.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of ClinicalIngestionAnalyticsMetricKey.hashValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

void sub_21FA2ECEC()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_25553E1F8)
  {
    sub_21FC5A98C();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_25553E1F8);
  }
}

void sub_21FA2ED54(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_21FC5BAA8();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_21FA2EDA0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  sub_21FA2ED54(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

id sub_21FA2EE10()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DefaultDaemonXPCService();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for DefaultDaemonXPCService()
{
  return objc_opt_self();
}

id sub_21FA2EF8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  char *v9;
  char *v10;
  id v11;
  char *v12;
  void *v13;
  id v14;
  char *v15;
  objc_super v17;

  v9 = &v6[OBJC_IVAR____TtC19HealthRecordsDaemon23DefaultDaemonXPCService_identifier];
  *(_QWORD *)v9 = a1;
  *((_QWORD *)v9 + 1) = a2;
  v10 = &v6[OBJC_IVAR____TtC19HealthRecordsDaemon23DefaultDaemonXPCService_requiredEntitlementOverride];
  *(_QWORD *)v10 = a3;
  *((_QWORD *)v10 + 1) = a4;
  v11 = objc_allocWithZone(MEMORY[0x24BE40E58]);
  v12 = v6;
  swift_bridgeObjectRetain();
  v13 = (void *)sub_21FC5B5E0();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v11, sel_initWithLabel_, v13);

  *(_QWORD *)&v12[OBJC_IVAR____TtC19HealthRecordsDaemon23DefaultDaemonXPCService_listener] = v14;
  v15 = &v12[OBJC_IVAR____TtC19HealthRecordsDaemon23DefaultDaemonXPCService_serverGenerator];
  *(_QWORD *)v15 = a5;
  *((_QWORD *)v15 + 1) = a6;
  swift_retain();

  v17.receiver = v12;
  v17.super_class = (Class)type metadata accessor for DefaultDaemonXPCService();
  return objc_msgSendSuper2(&v17, sel_init);
}

uint64_t sub_21FA2F080(char a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  __int128 v18;
  uint64_t v19;
  _UNKNOWN **v20;
  _QWORD v21[5];

  v3 = a1 & 1;
  sub_21FA32848(0, &qword_25553E358);
  sub_21FA328AC(0, &qword_25553E360, sub_21FA30BA4, (void (*)(void))sub_21FA30BB8);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v17 - v7;
  v9 = sub_21FC5A98C();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC2B858(v3, (uint64_t)v11);
  v19 = type metadata accessor for IssuerDirectoryWebRequest();
  v20 = &off_24E483A90;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v18);
  sub_21FA2F2A4((uint64_t)v11, (uint64_t)boxed_opaque_existential_1);
  sub_21FA3175C(&v18, (uint64_t)v21);
  v13 = __swift_project_boxed_opaque_existential_1(v21, v21[3]);
  v17[0] = sub_21FA31774((uint64_t)v13, 0, 1, 0, 1, 0, a2);
  sub_21FA2CEA0((uint64_t)v21, (uint64_t)&v18);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  sub_21FA3175C(&v18, v14 + 24);
  sub_21FA30BA4(0);
  sub_21FA30BB8();
  swift_retain();
  sub_21FC5B31C();
  swift_release();
  swift_release();
  sub_21FA327B0(&qword_25553E368, &qword_25553E360);
  v15 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return v15;
}

uint64_t sub_21FA2F2A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;

  *(_BYTE *)a2 = 2;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = (int *)type metadata accessor for IssuerDirectoryWebRequest();
  *(_OWORD *)(a2 + v4[7]) = xmmword_21FC5E350;
  v5 = a2 + v4[6];
  v6 = sub_21FC5A98C();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, a1, v6);
  sub_21FC5BB74();
  swift_bridgeObjectRelease();
  sub_21FC5A8FC();
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  v9 = (_QWORD *)(a2 + v4[8]);
  *v9 = 0xD00000000000001ELL;
  v9[1] = 0x800000021FC74D90;
  return result;
}

uint64_t sub_21FA2F3B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t result;
  uint64_t v46;
  _BYTE *v47;
  _QWORD v48[2];
  os_log_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  ValueMetadata *v55;
  _QWORD v56[3];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v7 = sub_21FC5A98C();
  v54 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v48 - v11;
  v13 = *(_QWORD *)(a1 + 48);
  if (v13 >> 60 == 15)
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v14 = sub_21FC5AFD4();
    __swift_project_value_buffer(v14, (uint64_t)qword_25406D830);
    sub_21FA2CEA0(a2, (uint64_t)v56);
    swift_retain_n();
    v15 = sub_21FC5AFC8();
    v16 = sub_21FC5B97C();
    v17 = v16;
    if (os_log_type_enabled(v15, v16))
    {
      v18 = swift_slowAlloc();
      v53 = swift_slowAlloc();
      v59 = v53;
      *(_DWORD *)v18 = 136315394;
      LODWORD(v52) = v17;
      v55 = &type metadata for IssuerDirectoryWebRequestHandler;
      sub_21FA31724();
      v19 = sub_21FC5B64C();
      v55 = (ValueMetadata *)sub_21FABDCF8(v19, v20, &v59);
      sub_21FC5BAC0();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2080;
      v51 = v18 + 14;
      v22 = v57;
      v21 = v58;
      __swift_project_boxed_opaque_existential_1(v56, v57);
      (*(void (**)(uint64_t, uint64_t))(v21 + 40))(v22, v21);
      sub_21FC5A8F0();
      v23 = *(void (**)(char *, uint64_t))(v54 + 8);
      v23(v10, v7);
      sub_21FA2A08C((unint64_t *)&qword_25553E2C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
      v24 = sub_21FC5BDCC();
      v26 = v25;
      v23(v12, v7);
      v55 = (ValueMetadata *)sub_21FABDCF8(v24, v26, &v59);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
      _os_log_impl(&dword_21FA27000, v15, (os_log_type_t)v52, "%s: No response data received from URL %s", (uint8_t *)v18, 0x16u);
      v27 = v53;
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v27, -1, -1);
      MEMORY[0x2207D105C](v18, -1, -1);
    }
    else
    {
      swift_release_n();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
    }

    sub_21FA322D0();
    swift_allocError();
    *v44 = 0;
    return swift_willThrow();
  }
  else
  {
    v53 = v7;
    v28 = *(_QWORD *)(a1 + 40);
    sub_21FC5A614();
    swift_allocObject();
    sub_21FA32314(v28, v13);
    sub_21FC5A608();
    sub_21FA3296C();
    sub_21FC5A5FC();
    if (v3)
    {
      v52 = v28;
      swift_release();
      if (qword_25406B7F8 != -1)
        swift_once();
      v29 = sub_21FC5AFD4();
      __swift_project_value_buffer(v29, (uint64_t)qword_25406D830);
      sub_21FA2CEA0(a2, (uint64_t)v56);
      swift_retain_n();
      v30 = sub_21FC5AFC8();
      v31 = sub_21FC5B97C();
      v32 = v31;
      if (os_log_type_enabled(v30, v31))
      {
        v33 = swift_slowAlloc();
        v51 = swift_slowAlloc();
        v59 = v51;
        *(_DWORD *)v33 = 136315394;
        v49 = v30;
        v50 = v32;
        v55 = &type metadata for IssuerDirectoryWebRequestHandler;
        sub_21FA31724();
        v34 = sub_21FC5B64C();
        v55 = (ValueMetadata *)sub_21FABDCF8(v34, v35, &v59);
        sub_21FC5BAC0();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v33 + 12) = 2080;
        v48[1] = v33 + 14;
        v36 = v57;
        v37 = v58;
        __swift_project_boxed_opaque_existential_1(v56, v57);
        (*(void (**)(uint64_t, uint64_t))(v37 + 40))(v36, v37);
        sub_21FC5A8F0();
        v38 = v53;
        v39 = *(void (**)(char *, uint64_t))(v54 + 8);
        v39(v10, v53);
        sub_21FA2A08C((unint64_t *)&qword_25553E2C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
        v40 = sub_21FC5BDCC();
        v42 = v41;
        v39(v12, v38);
        v55 = (ValueMetadata *)sub_21FABDCF8(v40, v42, &v59);
        sub_21FC5BAC0();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
        v30 = v49;
        _os_log_impl(&dword_21FA27000, v49, (os_log_type_t)v50, "%s: CHR Catalog parsing failed for URL %s", (uint8_t *)v33, 0x16u);
        v43 = v51;
        swift_arrayDestroy();
        MEMORY[0x2207D105C](v43, -1, -1);
        MEMORY[0x2207D105C](v33, -1, -1);
      }
      else
      {
        swift_release_n();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
      }

      v46 = v52;
      sub_21FA322D0();
      swift_allocError();
      *v47 = 1;
      swift_willThrow();

      return sub_21FA3239C(v46, v13);
    }
    else
    {
      swift_release();
      result = sub_21FA3239C(v28, v13);
      *a3 = v56[0];
    }
  }
  return result;
}

uint64_t sub_21FA2FA40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[8];
  __int128 v22;
  uint64_t v23;
  _UNKNOWN **v24;
  _QWORD v25[5];

  sub_21FA32848(0, &qword_25553E330);
  v21[3] = v4;
  v21[5] = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v21[4] = (char *)v21 - v5;
  v6 = type metadata accessor for CatalogEntry();
  MEMORY[0x24BDAC7A8](v6);
  sub_21FA328AC(0, &qword_25553E338, sub_21FA30BA4, (void (*)(void))sub_21FA30BB8);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v21 - v10;
  v12 = sub_21FC5A98C();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v14, a1 + *(int *)(v6 + 24), v12);
  v23 = type metadata accessor for IssuerDirectoryWebRequest();
  v24 = &off_24E483A90;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v22);
  sub_21FA2F2A4((uint64_t)v14, (uint64_t)boxed_opaque_existential_1);
  sub_21FA3175C(&v22, (uint64_t)v25);
  v17 = __swift_project_boxed_opaque_existential_1(v25, v25[3]);
  v21[6] = sub_21FA31774((uint64_t)v17, 0, 1, 0, 1, 0, a2);
  sub_21FA2CEA0((uint64_t)v25, (uint64_t)&v22);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a2;
  sub_21FA3175C(&v22, v18 + 24);
  sub_21FA30BA4(0);
  sub_21FA30BB8();
  swift_retain();
  sub_21FC5B31C();
  swift_release();
  swift_release();
  sub_21FA327B0(&qword_25553E348, &qword_25553E338);
  v19 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  return v19;
}

uint64_t sub_21FA2FFAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _QWORD v49[2];
  os_log_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  ValueMetadata *v56;
  _QWORD v57[3];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v7 = sub_21FC5A98C();
  v55 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v49 - v11;
  v13 = *(_QWORD *)(a1 + 48);
  if (v13 >> 60 == 15)
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v14 = sub_21FC5AFD4();
    __swift_project_value_buffer(v14, (uint64_t)qword_25406D830);
    sub_21FA2CEA0(a2, (uint64_t)v57);
    swift_retain_n();
    v15 = sub_21FC5AFC8();
    v16 = sub_21FC5B97C();
    v17 = v16;
    if (os_log_type_enabled(v15, v16))
    {
      v18 = swift_slowAlloc();
      v54 = swift_slowAlloc();
      v60 = v54;
      *(_DWORD *)v18 = 136315394;
      LODWORD(v53) = v17;
      v56 = &type metadata for IssuerDirectoryWebRequestHandler;
      sub_21FA31724();
      v19 = sub_21FC5B64C();
      v56 = (ValueMetadata *)sub_21FABDCF8(v19, v20, &v60);
      sub_21FC5BAC0();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2080;
      v52 = v18 + 14;
      v22 = v58;
      v21 = v59;
      __swift_project_boxed_opaque_existential_1(v57, v58);
      (*(void (**)(uint64_t, uint64_t))(v21 + 40))(v22, v21);
      sub_21FC5A8F0();
      v23 = *(void (**)(char *, uint64_t))(v55 + 8);
      v23(v10, v7);
      sub_21FA2A08C((unint64_t *)&qword_25553E2C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
      v24 = sub_21FC5BDCC();
      v26 = v25;
      v23(v12, v7);
      v56 = (ValueMetadata *)sub_21FABDCF8(v24, v26, &v60);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
      _os_log_impl(&dword_21FA27000, v15, (os_log_type_t)v53, "%s: No response data received from URL %s", (uint8_t *)v18, 0x16u);
      v27 = v54;
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v27, -1, -1);
      MEMORY[0x2207D105C](v18, -1, -1);
    }
    else
    {
      swift_release_n();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
    }

    sub_21FA322D0();
    swift_allocError();
    *v44 = 0;
    return swift_willThrow();
  }
  else
  {
    v54 = v7;
    v28 = *(_QWORD *)(a1 + 40);
    sub_21FC5A614();
    swift_allocObject();
    sub_21FA32314(v28, v13);
    sub_21FC5A608();
    sub_21FA32804();
    sub_21FC5A5FC();
    if (v3)
    {
      v53 = v28;
      swift_release();
      if (qword_25406B7F8 != -1)
        swift_once();
      v29 = sub_21FC5AFD4();
      __swift_project_value_buffer(v29, (uint64_t)qword_25406D830);
      sub_21FA2CEA0(a2, (uint64_t)v57);
      swift_retain_n();
      v30 = sub_21FC5AFC8();
      v31 = sub_21FC5B97C();
      v32 = v31;
      if (os_log_type_enabled(v30, v31))
      {
        v33 = swift_slowAlloc();
        v52 = swift_slowAlloc();
        v60 = v52;
        *(_DWORD *)v33 = 136315394;
        v50 = v30;
        v51 = v32;
        v56 = &type metadata for IssuerDirectoryWebRequestHandler;
        sub_21FA31724();
        v34 = sub_21FC5B64C();
        v56 = (ValueMetadata *)sub_21FABDCF8(v34, v35, &v60);
        sub_21FC5BAC0();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v33 + 12) = 2080;
        v49[1] = v33 + 14;
        v36 = v58;
        v37 = v59;
        __swift_project_boxed_opaque_existential_1(v57, v58);
        (*(void (**)(uint64_t, uint64_t))(v37 + 40))(v36, v37);
        sub_21FC5A8F0();
        v38 = v54;
        v39 = *(void (**)(char *, uint64_t))(v55 + 8);
        v39(v10, v54);
        sub_21FA2A08C((unint64_t *)&qword_25553E2C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
        v40 = sub_21FC5BDCC();
        v42 = v41;
        v39(v12, v38);
        v56 = (ValueMetadata *)sub_21FABDCF8(v40, v42, &v60);
        sub_21FC5BAC0();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
        v30 = v50;
        _os_log_impl(&dword_21FA27000, v50, (os_log_type_t)v51, "%s: VHRDirectory parsing failed for URL %s", (uint8_t *)v33, 0x16u);
        v43 = v52;
        swift_arrayDestroy();
        MEMORY[0x2207D105C](v43, -1, -1);
        MEMORY[0x2207D105C](v33, -1, -1);
      }
      else
      {
        swift_release_n();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
      }

      v47 = v53;
      sub_21FA322D0();
      swift_allocError();
      *v48 = 2;
      swift_willThrow();

      return sub_21FA3239C(v47, v13);
    }
    else
    {
      swift_release();
      result = sub_21FA3239C(v28, v13);
      v46 = v57[1];
      *a3 = v57[0];
      a3[1] = v46;
    }
  }
  return result;
}

uint64_t sub_21FA30638(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[8];
  __int128 v22;
  uint64_t v23;
  _UNKNOWN **v24;
  _QWORD v25[5];

  sub_21FA32848(0, &qword_25553E290);
  v21[3] = v4;
  v21[5] = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v21[4] = (char *)v21 - v5;
  v6 = type metadata accessor for CatalogEntry();
  MEMORY[0x24BDAC7A8](v6);
  sub_21FA328AC(0, &qword_25553E298, sub_21FA30BA4, (void (*)(void))sub_21FA30BB8);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v21 - v10;
  v12 = sub_21FC5A98C();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v14, a1 + *(int *)(v6 + 24), v12);
  v23 = type metadata accessor for IssuerDirectoryWebRequest();
  v24 = &off_24E483A90;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v22);
  sub_21FA2F2A4((uint64_t)v14, (uint64_t)boxed_opaque_existential_1);
  sub_21FA3175C(&v22, (uint64_t)v25);
  v17 = __swift_project_boxed_opaque_existential_1(v25, v25[3]);
  v21[6] = sub_21FA31774((uint64_t)v17, 0, 1, 0, 1, 0, a2);
  sub_21FA2CEA0((uint64_t)v25, (uint64_t)&v22);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a2;
  sub_21FA3175C(&v22, v18 + 24);
  sub_21FA30BA4(0);
  sub_21FA30BB8();
  swift_retain();
  sub_21FC5B31C();
  swift_release();
  swift_release();
  sub_21FA327B0(&qword_25553E2D0, &qword_25553E298);
  v19 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  return v19;
}

void sub_21FA30BA4(uint64_t a1)
{
  sub_21FA325D4(a1, &qword_25553E2A0, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, uint64_t))MEMORY[0x24BDB9AE0]);
}

uint64_t sub_21FA30BB8()
{
  return sub_21FA2A08C(&qword_25553E2B0, (uint64_t (*)(uint64_t))sub_21FA30BA4, MEMORY[0x24BDB9AF8]);
}

uint64_t type metadata accessor for IssuerDirectoryWebRequest()
{
  uint64_t result;

  result = qword_25553E3D0;
  if (!qword_25553E3D0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 80) & 0x20000) != 0)
    JUMPOUT(0x2207D105CLL);
  return result;
}

uint64_t sub_21FA30C80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  void *v4;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  void (*v27)(_BYTE *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t result;
  uint64_t v59;
  _BYTE *v60;
  _BYTE v61[12];
  int v62;
  os_log_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  ValueMetadata *v72;
  _QWORD v73[3];
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v71 = a2;
  v70 = sub_21FC5A98C();
  v68 = *(_QWORD *)(v70 - 8);
  v8 = MEMORY[0x24BDAC7A8](v70);
  v10 = &v61[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8);
  v69 = &v61[-v11];
  v12 = sub_21FC5A5E4();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = &v61[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = *(_QWORD *)(a1 + 48);
  if (v16 >> 60 == 15)
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v17 = sub_21FC5AFD4();
    __swift_project_value_buffer(v17, (uint64_t)qword_25406D830);
    sub_21FA2CEA0(a3, (uint64_t)v73);
    swift_retain_n();
    v18 = sub_21FC5AFC8();
    v19 = sub_21FC5B97C();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc();
      v67 = swift_slowAlloc();
      v76 = v67;
      *(_DWORD *)v20 = 136315394;
      v72 = &type metadata for IssuerDirectoryWebRequestHandler;
      sub_21FA31724();
      v21 = sub_21FC5B64C();
      v72 = (ValueMetadata *)sub_21FABDCF8(v21, v22, &v76);
      sub_21FC5BAC0();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2080;
      v71 = v20 + 14;
      v23 = v74;
      v24 = v75;
      __swift_project_boxed_opaque_existential_1(v73, v74);
      (*(void (**)(uint64_t, uint64_t))(v24 + 40))(v23, v24);
      v25 = v10;
      v26 = v69;
      sub_21FC5A8F0();
      v27 = *(void (**)(_BYTE *, uint64_t))(v68 + 8);
      v28 = v70;
      v27(v25, v70);
      sub_21FA2A08C((unint64_t *)&qword_25553E2C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
      v29 = sub_21FC5BDCC();
      v31 = v30;
      v27(v26, v28);
      v72 = (ValueMetadata *)sub_21FABDCF8(v29, v31, &v76);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
      _os_log_impl(&dword_21FA27000, v18, v19, "%s: No response data received from URL %s", (uint8_t *)v20, 0x16u);
      v32 = v67;
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v32, -1, -1);
      MEMORY[0x2207D105C](v20, -1, -1);
    }
    else
    {
      swift_release_n();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
    }

    sub_21FA322D0();
    swift_allocError();
    *v57 = 0;
    return swift_willThrow();
  }
  else
  {
    v67 = (uint64_t)v10;
    v33 = *(_QWORD *)(a1 + 40);
    sub_21FC5A614();
    swift_allocObject();
    sub_21FA32314(v33, v16);
    sub_21FC5A608();
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x24BDCB1D8], v12);
    sub_21FC5A5F0();
    sub_21FA32358();
    sub_21FC5A5FC();
    if (v4)
    {
      v66 = v16;
      swift_release();
      if (qword_25406B7F8 != -1)
        swift_once();
      v34 = sub_21FC5AFD4();
      __swift_project_value_buffer(v34, (uint64_t)qword_25406D830);
      sub_21FA2CEA0(a3, (uint64_t)v73);
      swift_retain();
      v35 = v4;
      swift_retain();
      v36 = v4;
      v37 = sub_21FC5AFC8();
      v38 = sub_21FC5B97C();
      v39 = v38;
      v40 = os_log_type_enabled(v37, v38);
      v41 = v67;
      if (v40)
      {
        v42 = swift_slowAlloc();
        v64 = swift_slowAlloc();
        v76 = v64;
        *(_DWORD *)v42 = 136315650;
        v63 = v37;
        v72 = &type metadata for IssuerDirectoryWebRequestHandler;
        sub_21FA31724();
        v65 = v33;
        v43 = sub_21FC5B64C();
        v62 = v39;
        v72 = (ValueMetadata *)sub_21FABDCF8(v43, v44, &v76);
        sub_21FC5BAC0();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v42 + 12) = 2080;
        v71 = v42 + 14;
        v45 = v74;
        v46 = v75;
        __swift_project_boxed_opaque_existential_1(v73, v74);
        (*(void (**)(uint64_t, uint64_t))(v46 + 40))(v45, v46);
        v47 = v69;
        sub_21FC5A8F0();
        v48 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
        v49 = v41;
        v50 = v70;
        v48(v49, v70);
        sub_21FA2A08C((unint64_t *)&qword_25553E2C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
        v51 = sub_21FC5BDCC();
        v53 = v52;
        v48((uint64_t)v47, v50);
        v33 = v65;
        v72 = (ValueMetadata *)sub_21FABDCF8(v51, v53, &v76);
        sub_21FC5BAC0();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
        *(_WORD *)(v42 + 22) = 2080;
        swift_getErrorValue();
        v54 = sub_21FC5BE44();
        v72 = (ValueMetadata *)sub_21FABDCF8(v54, v55, &v76);
        sub_21FC5BAC0();
        swift_bridgeObjectRelease();

        v37 = v63;
        _os_log_impl(&dword_21FA27000, v63, (os_log_type_t)v62, "%s: EUDCCPublicKeys parsing failed for URL %s - %s", (uint8_t *)v42, 0x20u);
        v56 = v64;
        swift_arrayDestroy();
        MEMORY[0x2207D105C](v56, -1, -1);
        MEMORY[0x2207D105C](v42, -1, -1);
      }
      else
      {
        swift_release_n();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);

      }
      sub_21FA322D0();
      swift_allocError();
      *v60 = 5;
      swift_willThrow();

      return sub_21FA3239C(v33, v66);
    }
    else
    {
      swift_release();
      result = sub_21FA3239C(v33, v16);
      v59 = v73[1];
      *a4 = v73[0];
      a4[1] = v59;
    }
  }
  return result;
}

void sub_21FA3140C(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_21FA31418()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_21FA31420(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*sub_21FA31448())()
{
  return nullsub_1;
}

uint64_t sub_21FA31458@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = sub_21FC5A98C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_21FA31498(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *(int *)(a1 + 28);
  v3 = *(_QWORD *)v2;
  sub_21FA3277C(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  return v3;
}

uint64_t sub_21FA314D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 32));
  swift_bridgeObjectRetain();
  return v2;
}

BOOL sub_21FA31504(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_21FA3153C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    sub_21FA32848(255, a2);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9DB0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FA3157C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[0] = a2;
  v17[1] = a4;
  v8 = sub_21FC5A98C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for IssuerDirectoryWebRequest();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v5 + *(int *)(v12 + 24), v8);
  sub_21FC5A59C();
  sub_21FC5A578();
  sub_21FC5A56C();
  sub_21FA3277C(*(_QWORD *)(v5 + *(int *)(v12 + 28)), *(_QWORD *)(v5 + *(int *)(v12 + 28) + 8));
  result = sub_21FC5A5C0();
  v14 = *(_QWORD *)(v5 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      swift_bridgeObjectRetain();
      v16 = v14 + 56;
      do
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_21FC5A5B4();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v16 += 32;
        --v15;
      }
      while (v15);
      result = swift_bridgeObjectRelease();
    }
  }
  if ((a3 & 1) == 0)
    result = sub_21FC5A590();
  if ((a5 & 1) == 0)
    return sub_21FC5A584();
  return result;
}

unint64_t sub_21FA31724()
{
  unint64_t result;

  result = qword_25553E2C0;
  if (!qword_25553E2C0)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_25553E2C0);
  }
  return result;
}

uint64_t sub_21FA3175C(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_21FA31774(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  NSObject *v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  os_log_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v76[2];
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  os_log_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103[2];
  uint64_t v104;
  uint64_t v105[5];

  v92 = a7;
  v100 = a6;
  v81 = a5;
  v80 = a4;
  v82 = a3;
  v76[1] = a2;
  v83 = sub_21FC5B8BC();
  v88 = *(_QWORD *)(v83 - 8);
  MEMORY[0x24BDAC7A8](v83);
  v87 = (char *)v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA328AC(0, (unint64_t *)&qword_25553E2E8, v9, (void (*)(void))sub_21FA323B0);
  v94 = v10;
  v89 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v93 = (char *)v76 - v11;
  sub_21FA323CC();
  v84 = v12;
  v90 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v95 = (char *)v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA32500();
  v86 = v14;
  v85 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v91 = (char *)v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_21FC5A98C();
  v78 = *(_QWORD *)(v79 - 8);
  MEMORY[0x24BDAC7A8](v79);
  v76[0] = (char *)v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA32580();
  MEMORY[0x24BDAC7A8](v17);
  v77 = (char *)v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA325D4(0, &qword_25553E318, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, uint64_t))MEMORY[0x24BDB9DA0]);
  v98 = *(_QWORD *)(v19 - 8);
  v99 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v97 = (char *)v76 - v20;
  v101 = type metadata accessor for WebRequestResponseError(0);
  v21 = MEMORY[0x24BDAC7A8](v101);
  v96 = (os_log_t)((char *)v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v21);
  v23 = type metadata accessor for WebRequestResponseError.ErrorType(0);
  MEMORY[0x24BDAC7A8](v23);
  v24 = sub_21FC5A5D8();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)v76 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)v76 - v29;
  v105[3] = type metadata accessor for IssuerDirectoryWebRequest();
  v105[4] = (uint64_t)&off_24E483A90;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v105);
  sub_21FA2D120(a1, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for IssuerDirectoryWebRequest);
  v102 = swift_allocBox();
  v33 = v32;
  sub_21FA3157C(v100, 0, 1, 0, 1);
  v34 = v81;
  v97 = v28;
  v98 = v24;
  v100 = v25;
  (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v33, v30, v24);
  if ((v82 & 1) == 0)
    sub_21FC5A590();
  v35 = v95;
  v36 = v94;
  v37 = v93;
  if ((v34 & 1) == 0)
    sub_21FC5A584();
  v99 = v33;
  if (qword_25406B7F8 != -1)
    swift_once();
  v38 = sub_21FC5AFD4();
  __swift_project_value_buffer(v38, (uint64_t)qword_25406D830);
  swift_retain_n();
  v39 = sub_21FC5AFC8();
  v40 = sub_21FC5B970();
  v41 = os_log_type_enabled(v39, (os_log_type_t)v40);
  v42 = v100;
  if (v41)
  {
    v82 = v40;
    v96 = v39;
    v43 = swift_slowAlloc();
    v44 = swift_slowAlloc();
    v104 = v44;
    *(_DWORD *)v43 = 136315394;
    swift_beginAccess();
    v45 = sub_21FC5A560();
    v47 = v46;
    swift_endAccess();
    if (v47)
      v48 = v45;
    else
      v48 = 0xD000000000000010;
    if (v47)
      v49 = v47;
    else
      v49 = 0x800000021FC74D70;
    *(_QWORD *)&v103[0] = sub_21FABDCF8(v48, v49, &v104);
    sub_21FC5BAC0();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v43 + 12) = 2080;
    swift_beginAccess();
    v50 = (uint64_t)v77;
    sub_21FC5A5A8();
    v51 = v78;
    v52 = v79;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v50, 1, v79))
    {
      sub_21FA326EC(v50, (uint64_t (*)(_QWORD))sub_21FA32580);
      swift_endAccess();
      v53 = 0;
      v54 = 0;
    }
    else
    {
      v58 = v76[0];
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v51 + 16))(v76[0], v50, v52);
      sub_21FA326EC(v50, (uint64_t (*)(_QWORD))sub_21FA32580);
      swift_endAccess();
      v53 = sub_21FC5A8FC();
      v54 = v59;
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v58, v52);
    }
    *(_QWORD *)&v103[0] = v53;
    *((_QWORD *)&v103[0] + 1) = v54;
    sub_21FA32728();
    swift_bridgeObjectRetain();
    sub_21FC5BE08();
    v60 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_21FC5BAF0();
    swift_unknownObjectRelease();
    v61 = sub_21FC5B64C();
    v63 = v62;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v103[0] = sub_21FABDCF8(v61, v63, &v104);
    sub_21FC5BAC0();
    swift_release_n();
    swift_bridgeObjectRelease();
    v64 = v96;
    _os_log_impl(&dword_21FA27000, v96, (os_log_type_t)v82, "WebRequestPerformer: making request: %s %s", (uint8_t *)v43, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v44, -1, -1);
    MEMORY[0x2207D105C](v43, -1, -1);

    v57 = v95;
    v36 = v94;
    v37 = v93;
    v55 = v88;
    v56 = v98;
    v42 = v100;
  }
  else
  {

    swift_release_n();
    v55 = v88;
    v56 = v98;
    v57 = v35;
  }
  v65 = v99;
  swift_beginAccess();
  v66 = v97;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v97, v65, v56);
  v67 = v87;
  sub_21FC5B8C8();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v66, v56);
  sub_21FA323B0();
  v68 = v83;
  sub_21FC5B31C();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v67, v68);
  sub_21FA2CEA0((uint64_t)v105, (uint64_t)v103);
  v69 = swift_allocObject();
  sub_21FA3175C(v103, v69 + 16);
  sub_21FA32498();
  sub_21FA2A08C(&qword_25553E2A8, type metadata accessor for WebRequestResponseError, (uint64_t)&protocol conformance descriptor for WebRequestResponseError);
  sub_21FC5B358();
  swift_release();
  (*(void (**)(char *, uint64_t))(v89 + 8))(v37, v36);
  sub_21FA2CEA0((uint64_t)v105, (uint64_t)v103);
  v70 = swift_allocObject();
  *(_QWORD *)(v70 + 16) = v102;
  sub_21FA3175C(v103, v70 + 24);
  sub_21FA2A08C(&qword_25553E310, (uint64_t (*)(uint64_t))sub_21FA323CC, MEMORY[0x24BDB9938]);
  swift_retain();
  v71 = v91;
  v72 = v84;
  sub_21FC5B2C8();
  swift_release();
  (*(void (**)(char *, uint64_t))(v90 + 8))(v57, v72);
  sub_21FA2A08C(&qword_25553E328, (uint64_t (*)(uint64_t))sub_21FA32500, MEMORY[0x24BDB96C0]);
  v73 = v86;
  v74 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v85 + 8))(v71, v73);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v105);
  return v74;
}

uint64_t sub_21FA322B4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_21FA30C80(a1, *(_QWORD *)(v2 + 16), v2 + 24, a2);
}

unint64_t sub_21FA322D0()
{
  unint64_t result;

  result = qword_25553E2D8;
  if (!qword_25553E2D8)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC5E4D0, &type metadata for IssuerDirectoryWebRequestHandlerError);
    atomic_store(result, (unint64_t *)&qword_25553E2D8);
  }
  return result;
}

uint64_t sub_21FA32314(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

unint64_t sub_21FA32358()
{
  unint64_t result;

  result = qword_25553E2E0;
  if (!qword_25553E2E0)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for EUDCCPublicKeys, &type metadata for EUDCCPublicKeys);
    atomic_store(result, (unint64_t *)&qword_25553E2E0);
  }
  return result;
}

uint64_t sub_21FA3239C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_21FA2D770(a1, a2);
  return a1;
}

uint64_t sub_21FA323B0()
{
  return sub_21FA2A08C(&qword_25553E2F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCFEB8], MEMORY[0x24BDCFEB0]);
}

void sub_21FA323CC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553E2F8)
  {
    sub_21FA328AC(255, (unint64_t *)&qword_25553E2E8, (void (*)(uint64_t))MEMORY[0x24BDCFEB8], (void (*)(void))sub_21FA323B0);
    type metadata accessor for WebRequestResponseError(255);
    sub_21FA32498();
    sub_21FA2A08C(&qword_25553E2A8, type metadata accessor for WebRequestResponseError, (uint64_t)&protocol conformance descriptor for WebRequestResponseError);
    v0 = sub_21FC5B10C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553E2F8);
  }
}

unint64_t sub_21FA32498()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25553E300;
  if (!qword_25553E300)
  {
    sub_21FA328AC(255, (unint64_t *)&qword_25553E2E8, (void (*)(uint64_t))MEMORY[0x24BDCFEB8], (void (*)(void))sub_21FA323B0);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB98C8], v1);
    atomic_store(result, (unint64_t *)&qword_25553E300);
  }
  return result;
}

void sub_21FA32500()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553E308)
  {
    sub_21FA323CC();
    sub_21FA2A08C(&qword_25553E310, (uint64_t (*)(uint64_t))sub_21FA323CC, MEMORY[0x24BDB9938]);
    v0 = sub_21FC5B064();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553E308);
  }
}

void sub_21FA32580()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406AAC8)
  {
    sub_21FC5A98C();
    v0 = sub_21FC5BAA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406AAC8);
  }
}

void sub_21FA325D4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = type metadata accessor for WebRequestResponseError(255);
    v7 = sub_21FA2A08C(&qword_25553E2A8, type metadata accessor for WebRequestResponseError, (uint64_t)&protocol conformance descriptor for WebRequestResponseError);
    v8 = a3(a1, &type metadata for WebRequestResponse, v6, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

unint64_t sub_21FA32658()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25553E320;
  if (!qword_25553E320)
  {
    sub_21FA325D4(255, &qword_25553E318, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, uint64_t))MEMORY[0x24BDB9DA0]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9DB0], v1);
    atomic_store(result, (unint64_t *)&qword_25553E320);
  }
  return result;
}

uint64_t sub_21FA326B0()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_21FA326D4@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21FC55F88(a1, v2 + 16, a2);
}

id sub_21FA326E0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_21FC562B8(a1, v2 + 24, a2);
}

uint64_t sub_21FA326EC(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_21FA32728()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406BA00)
  {
    v0 = sub_21FC5BAA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406BA00);
  }
}

uint64_t sub_21FA3277C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_21FA32314(a1, a2);
  return a1;
}

uint64_t sub_21FA32794@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_21FA2FFAC(a1, v2 + 24, a2);
}

uint64_t sub_21FA327B0(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    sub_21FA328AC(255, a2, sub_21FA30BA4, (void (*)(void))sub_21FA30BB8);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB98C8], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_21FA32804()
{
  unint64_t result;

  result = qword_25553E350;
  if (!qword_25553E350)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for VHRDirectory, &type metadata for VHRDirectory);
    atomic_store(result, (unint64_t *)&qword_25553E350);
  }
  return result;
}

void sub_21FA32848(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    sub_21FA2CDB4();
    v3 = sub_21FC5B1FC();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void sub_21FA328AC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4();
    v6 = sub_21FC5B0E8();
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return swift_deallocObject();
}

uint64_t sub_21FA32950@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_21FA2F3B4(a1, v2 + 24, a2);
}

unint64_t sub_21FA3296C()
{
  unint64_t result;

  result = qword_25553E370;
  if (!qword_25553E370)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for Catalog, &type metadata for Catalog);
    atomic_store(result, (unint64_t *)&qword_25553E370);
  }
  return result;
}

ValueMetadata *type metadata accessor for IssuerDirectoryWebRequestHandler()
{
  return &type metadata for IssuerDirectoryWebRequestHandler;
}

uint64_t *initializeBufferWithCopyOfBuffer for WellKnownJWKSRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    a1[1] = a2[1];
    v7 = a3[6];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_21FC5A98C();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    v12 = a3[7];
    v13 = (char *)v4 + v12;
    v14 = (char *)a2 + v12;
    v15 = *((_QWORD *)v14 + 1);
    if (v15 >> 60 == 15)
    {
      *(_OWORD *)v13 = *(_OWORD *)v14;
    }
    else
    {
      v17 = *(_QWORD *)v14;
      sub_21FA32314(*(_QWORD *)v14, *((_QWORD *)v14 + 1));
      *(_QWORD *)v13 = v17;
      *((_QWORD *)v13 + 1) = v15;
    }
    v18 = a3[8];
    v19 = (uint64_t *)((char *)v4 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for WellKnownJWKSRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_21FC5A98C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (uint64_t *)(a1 + *(int *)(a2 + 28));
  v7 = v6[1];
  if (v7 >> 60 != 15)
    sub_21FA2D770(*v6, v7);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WellKnownJWKSRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_21FC5A98C();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = (uint64_t *)(a2 + v11);
  v14 = v13[1];
  if (v14 >> 60 == 15)
  {
    *(_OWORD *)v12 = *(_OWORD *)v13;
  }
  else
  {
    v15 = *v13;
    sub_21FA32314(*v13, v13[1]);
    *(_QWORD *)v12 = v15;
    *(_QWORD *)(v12 + 8) = v14;
  }
  v16 = a3[8];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WellKnownJWKSRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_21FC5A98C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[7];
  v11 = (uint64_t *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  v13 = *(_QWORD *)(a2 + v10 + 8);
  if (*(_QWORD *)(a1 + v10 + 8) >> 60 != 15)
  {
    if (v13 >> 60 != 15)
    {
      v15 = *v12;
      sub_21FA32314(v15, v13);
      v16 = *v11;
      v17 = v11[1];
      *v11 = v15;
      v11[1] = v13;
      sub_21FA2D770(v16, v17);
      goto LABEL_8;
    }
    sub_21FA32D54((uint64_t)v11);
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v11 = *(_OWORD *)v12;
    goto LABEL_8;
  }
  v14 = *v12;
  sub_21FA32314(v14, v13);
  *v11 = v14;
  v11[1] = v13;
LABEL_8:
  v18 = a3[8];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  *v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21FA32D54(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDCDDE8] - 8) + 8))();
  return a1;
}

uint64_t initializeWithTake for WellKnownJWKSRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_21FC5A98C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  return a1;
}

uint64_t assignWithTake for WellKnownJWKSRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_21FC5A98C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[7];
  v11 = (uint64_t *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  v13 = *(_QWORD *)(a1 + v10 + 8);
  if (v13 >> 60 != 15)
  {
    v14 = v12[1];
    if (v14 >> 60 != 15)
    {
      v15 = *v11;
      *v11 = *v12;
      v11[1] = v14;
      sub_21FA2D770(v15, v13);
      goto LABEL_6;
    }
    sub_21FA32D54((uint64_t)v11);
  }
  *(_OWORD *)v11 = *(_OWORD *)v12;
LABEL_6:
  v16 = a3[8];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  v20 = *v18;
  v19 = v18[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21FA32EF8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA32F04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_21FC5A98C();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_21FA32F88()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA32F94(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_21FC5A98C();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 24), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_21FA33014()
{
  uint64_t result;
  unint64_t v1;

  result = sub_21FC5A98C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for HTTPMethod(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for IssuerDirectoryWebRequestHandlerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_21FA33180 + 4 * byte_21FC5E375[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_21FA331B4 + 4 * byte_21FC5E370[v4]))();
}

uint64_t sub_21FA331B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FA331BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FA331C4);
  return result;
}

uint64_t sub_21FA331D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FA331D8);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_21FA331DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FA331E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_21FA331F0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for IssuerDirectoryWebRequestHandlerError()
{
  return &type metadata for IssuerDirectoryWebRequestHandlerError;
}

unint64_t sub_21FA3320C()
{
  unint64_t result;

  result = qword_25553E418;
  if (!qword_25553E418)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC5E498, &type metadata for IssuerDirectoryWebRequestHandlerError);
    atomic_store(result, (unint64_t *)&qword_25553E418);
  }
  return result;
}

uint64_t PBNodeType.deletionCommitmentType.getter()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 8) == 1)
    __asm { BR              X10 }
  sub_21FC5BDCC();
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  return 3176496;
}

uint64_t PBTypedData.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA398EC(type metadata accessor for PBTypedData, &qword_25553D590, &qword_25553E450, a1);
}

uint64_t type metadata accessor for PBTypedData(uint64_t a1)
{
  return sub_21FA44B58(a1, qword_25406C000);
}

uint64_t PBTypedData.dateRange.setter(uint64_t a1)
{
  return sub_21FA38114(a1, type metadata accessor for PBTypedData, (void (*)(_QWORD))type metadata accessor for PBTypedData._StorageClass, sub_21FA3A458, &OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange);
}

uint64_t PBTypedData.type.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = *(int *)(type metadata accessor for PBTypedData(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBTypedData._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(v1 + v4) = sub_21FA3A458(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 16) = v2;
  *(_BYTE *)(v6 + 24) = v3;
  return result;
}

uint64_t PBTypedData.categorySeries.setter(uint64_t a1)
{
  return sub_21FA34018(a1, type metadata accessor for PBCategorySeries);
}

uint64_t PBRawData.blob.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_21FA32314(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t PBRawData.blob.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_21FA2D770(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t (*PBRawData.blob.modify())()
{
  return nullsub_1;
}

uint64_t PBRawData.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA399A8(type metadata accessor for PBRawData, a1);
}

uint64_t PBRawData.unknownFields.setter(uint64_t a1)
{
  return sub_21FA39A00(a1, type metadata accessor for PBRawData);
}

uint64_t (*PBRawData.unknownFields.modify())()
{
  type metadata accessor for PBRawData(0);
  return nullsub_1;
}

uint64_t PBRawData.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = sub_21FC5ACF8();
  a1[1] = v2;
  type metadata accessor for PBRawData(0);
  return sub_21FC5AD10();
}

uint64_t PBTypedData.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20));
  result = swift_beginAccess();
  v5 = *(_BYTE *)(v3 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v3 + 16);
  *(_BYTE *)(a1 + 8) = v5;
  return result;
}

uint64_t sub_21FA3356C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *(int *)(type metadata accessor for PBTypedData(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBTypedData._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = sub_21FA3A458(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 16) = v3;
  *(_BYTE *)(v7 + 24) = v4;
  return result;
}

void (*PBTypedData.type.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for PBTypedData(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_BYTE *)(v5 + 24);
  v3[9] = *(_QWORD *)(v5 + 16);
  *((_BYTE *)v3 + 80) = v6;
  return sub_21FA33698;
}

void sub_21FA33698(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  v5 = *(_BYTE *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 88);
    type metadata accessor for PBTypedData._StorageClass(0);
    swift_allocObject();
    v9 = swift_retain();
    *(_QWORD *)(v8 + v7) = sub_21FA3A458(v9);
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_QWORD *)(v10 + 16) = v4;
  *(_BYTE *)(v10 + 24) = v5;
  free((void *)v3);
}

uint64_t PBTypedData.dateRange.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA37F9C(type metadata accessor for PBTypedData, &OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange, a1);
}

void (*PBTypedData.dateRange.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_21FA2D1A0(0, &qword_25553E0F8, type metadata accessor for PBDateRange, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for PBDateRange(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  swift_beginAccess();
  sub_21FA44968(v10, (uint64_t)v5, &qword_25553E0F8, type metadata accessor for PBDateRange);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    v9[2] = 0;
    v9[3] = 0xE000000000000000;
    v9[4] = 0;
    *((_BYTE *)v9 + 40) = 1;
    sub_21FC5AD10();
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E0F8, type metadata accessor for PBDateRange);
  }
  else
  {
    sub_21FA2D23C((uint64_t)v5, (uint64_t)v9, type metadata accessor for PBDateRange);
  }
  return sub_21FA338FC;
}

void sub_21FA338FC(uint64_t a1, char a2)
{
  sub_21FA38454(a1, a2, (void (*)(void *))PBTypedData.dateRange.setter, type metadata accessor for PBDateRange);
}

BOOL PBTypedData.hasDateRange.getter()
{
  return sub_21FA384FC(type metadata accessor for PBTypedData, &OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange);
}

Swift::Void __swiftcall PBTypedData.clearDateRange()()
{
  sub_21FA38624(type metadata accessor for PBTypedData, (void (*)(_QWORD))type metadata accessor for PBTypedData._StorageClass, sub_21FA3A458, &OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange);
}

uint64_t PBTypedData.raw.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA38B60(type metadata accessor for PBTypedData, &OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, a1);
}

uint64_t sub_21FA3396C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - v5;
  sub_21FA44968(a1, (uint64_t)&v11 - v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v7 = *(int *)(type metadata accessor for PBTypedData(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBTypedData._StorageClass(0);
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(a2 + v7) = sub_21FA3A458(v8);
    swift_release();
  }
  v9 = *(_QWORD *)(a2 + v7)
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  swift_retain();
  sub_21FA2D2D8((uint64_t)v6, v9, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  swift_endAccess();
  return swift_release();
}

uint64_t PBTypedData.raw.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for PBTypedData(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBTypedData._StorageClass(0);
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = sub_21FA3A458(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3)
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  swift_retain();
  sub_21FA2D2D8(a1, v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  swift_endAccess();
  return swift_release();
}

void (*PBTypedData.raw.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[9] = v1;
  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v3[10] = malloc(v5);
  v6 = malloc(v5);
  v3[11] = v6;
  v7 = *(int *)(type metadata accessor for PBTypedData(0) + 20);
  *((_DWORD *)v3 + 24) = v7;
  v8 = *(_QWORD *)(v1 + v7)
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v8, (uint64_t)v6, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  return sub_21FA33C78;
}

void sub_21FA33C78(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    sub_21FA44968(*(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 80), &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v3 = *(int *)(v2 + 96);
      v4 = *(_QWORD *)(v2 + 72);
      type metadata accessor for PBTypedData._StorageClass(0);
      swift_allocObject();
      v5 = swift_retain();
      *(_QWORD *)(v4 + v3) = sub_21FA3A458(v5);
      swift_release();
    }
    v7 = *(void **)(v2 + 80);
    v6 = *(void **)(v2 + 88);
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 72) + *(int *)(v2 + 96))
       + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
    swift_beginAccess();
    swift_retain();
    sub_21FA2D2D8((uint64_t)v7, v8, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
    swift_endAccess();
    swift_release();
    sub_21FA2D1F8((uint64_t)v6, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 72);
      type metadata accessor for PBTypedData._StorageClass(0);
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = sub_21FA3A458(v11);
      swift_release();
    }
    v7 = *(void **)(v2 + 80);
    v6 = *(void **)(v2 + 88);
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 72) + *(int *)(v2 + 96))
        + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
    swift_beginAccess();
    swift_retain();
    sub_21FA2D2D8((uint64_t)v6, v12, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
    swift_endAccess();
    swift_release();
  }
  free(v6);
  free(v7);
  free((void *)v2);
}

uint64_t PBTypedData.timeSeries.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - v4;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v6, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
      return sub_21FA2D23C((uint64_t)v5, a1, type metadata accessor for PBTimeSeries);
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  sub_21FC5AD10();
  v8 = *(int *)(type metadata accessor for PBTimeSeries(0) + 20);
  if (qword_25553D7F8 != -1)
    swift_once();
  *(_QWORD *)(a1 + v8) = qword_2555438F0;
  return swift_retain();
}

uint64_t PBTypedData.timeSeries.setter(uint64_t a1)
{
  return sub_21FA34018(a1, type metadata accessor for PBTimeSeries);
}

uint64_t sub_21FA34018(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  v11 = *(int *)(type metadata accessor for PBTypedData(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBTypedData._StorageClass(0);
    swift_allocObject();
    v12 = swift_retain();
    *(_QWORD *)(v2 + v11) = sub_21FA3A458(v12);
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v11);
  sub_21FA2D23C(a1, (uint64_t)v10, a2);
  v14 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v10, 0, 1, v14);
  sub_21FA2D280((uint64_t)v10, (uint64_t)v8, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v15 = v13
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  swift_retain();
  sub_21FA2D2D8((uint64_t)v8, v15, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  swift_endAccess();
  return swift_release();
}

void (*PBTypedData.timeSeries.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for PBTimeSeries(0);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v3[5] = malloc(v7);
  v8 = (char *)malloc(v7);
  v3[6] = v8;
  v9 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v9, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v10 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v5, 1, v10) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      sub_21FA2D23C((uint64_t)v5, (uint64_t)v8, type metadata accessor for PBTimeSeries);
      return sub_21FA343A8;
    }
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  sub_21FC5AD10();
  v11 = *(int *)(v6 + 20);
  if (qword_25553D7F8 != -1)
    swift_once();
  *(_QWORD *)&v8[v11] = qword_2555438F0;
  swift_retain();
  return sub_21FA343A8;
}

void sub_21FA343A8(uint64_t a1, char a2)
{
  sub_21FA38454(a1, a2, (void (*)(void *))PBTypedData.timeSeries.setter, type metadata accessor for PBTimeSeries);
}

uint64_t PBTypedData.categorySeries.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - v4;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v6, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return sub_21FA2D23C((uint64_t)v5, a1, type metadata accessor for PBCategorySeries);
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  sub_21FC5AD10();
  v9 = *(int *)(type metadata accessor for PBCategorySeries(0) + 20);
  if (qword_25553D868 != -1)
    swift_once();
  *(_QWORD *)(a1 + v9) = qword_255543A10;
  return swift_retain();
}

void (*PBTypedData.categorySeries.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for PBCategorySeries(0);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v3[5] = malloc(v7);
  v8 = (char *)malloc(v7);
  v3[6] = v8;
  v9 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v9, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v10 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v5, 1, v10) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_21FA2D23C((uint64_t)v5, (uint64_t)v8, type metadata accessor for PBCategorySeries);
      return sub_21FA34720;
    }
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  sub_21FC5AD10();
  v11 = *(int *)(v6 + 20);
  if (qword_25553D868 != -1)
    swift_once();
  *(_QWORD *)&v8[v11] = qword_255543A10;
  swift_retain();
  return sub_21FA34720;
}

void sub_21FA34720(uint64_t a1, char a2)
{
  sub_21FA38454(a1, a2, (void (*)(void *))PBTypedData.categorySeries.setter, type metadata accessor for PBCategorySeries);
}

uint64_t PBTypedData.workout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - v4;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v6, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
      return sub_21FA2D23C((uint64_t)v5, a1, type metadata accessor for PBWorkout);
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  sub_21FC5AD10();
  v9 = *(int *)(type metadata accessor for PBWorkout(0) + 20);
  if (qword_25553D8A8 != -1)
    swift_once();
  *(_QWORD *)(a1 + v9) = qword_255543AA0;
  return swift_retain();
}

uint64_t PBTypedData.workout.setter(uint64_t a1)
{
  return sub_21FA34018(a1, type metadata accessor for PBWorkout);
}

void (*PBTypedData.workout.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for PBWorkout(0);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v3[5] = malloc(v7);
  v8 = (char *)malloc(v7);
  v3[6] = v8;
  v9 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v9, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v10 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v5, 1, v10) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      sub_21FA2D23C((uint64_t)v5, (uint64_t)v8, type metadata accessor for PBWorkout);
      return sub_21FA34AA8;
    }
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  sub_21FC5AD10();
  v11 = *(int *)(v6 + 20);
  if (qword_25553D8A8 != -1)
    swift_once();
  *(_QWORD *)&v8[v11] = qword_255543AA0;
  swift_retain();
  return sub_21FA34AA8;
}

void sub_21FA34AA8(uint64_t a1, char a2)
{
  sub_21FA38454(a1, a2, (void (*)(void *))PBTypedData.workout.setter, type metadata accessor for PBWorkout);
}

uint64_t PBTypedData.characteristics.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - v4;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v6, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 3)
      return sub_21FA2D23C((uint64_t)v5, (uint64_t)a1, type metadata accessor for PBCharacteristics);
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  type metadata accessor for PBCharacteristics(0);
  return sub_21FC5AD10();
}

uint64_t PBTypedData.characteristics.setter(uint64_t a1)
{
  return sub_21FA34018(a1, type metadata accessor for PBCharacteristics);
}

void (*PBTypedData.characteristics.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for PBCharacteristics(0) - 8) + 64);
  v3[5] = malloc(v6);
  v7 = malloc(v6);
  v3[6] = v7;
  v8 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v8, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v9 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
LABEL_6:
    *v7 = 0;
    v7[1] = 0xE000000000000000;
    v7[2] = 0;
    v7[3] = 0xE000000000000000;
    v7[4] = 0;
    v7[5] = 0xE000000000000000;
    sub_21FC5AD10();
    return sub_21FA34DE0;
  }
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
    goto LABEL_6;
  }
  sub_21FA2D23C((uint64_t)v5, (uint64_t)v7, type metadata accessor for PBCharacteristics);
  return sub_21FA34DE0;
}

void sub_21FA34DE0(uint64_t a1, char a2)
{
  sub_21FA38454(a1, a2, (void (*)(void *))PBTypedData.characteristics.setter, type metadata accessor for PBCharacteristics);
}

uint64_t PBTypedData.record.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - v4;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v6, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 4)
      return sub_21FA2D23C((uint64_t)v5, (uint64_t)a1, type metadata accessor for PBAllClinicalRecords);
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  *a1 = MEMORY[0x24BEE4AF8];
  type metadata accessor for PBAllClinicalRecords(0);
  return sub_21FC5AD10();
}

uint64_t PBTypedData.record.setter(uint64_t a1)
{
  return sub_21FA34018(a1, type metadata accessor for PBAllClinicalRecords);
}

void (*PBTypedData.record.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for PBAllClinicalRecords(0) - 8) + 64);
  v3[5] = malloc(v6);
  v7 = malloc(v6);
  v3[6] = v7;
  v8 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v8, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v9 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
LABEL_6:
    *v7 = MEMORY[0x24BEE4AF8];
    sub_21FC5AD10();
    return sub_21FA35110;
  }
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
    goto LABEL_6;
  }
  sub_21FA2D23C((uint64_t)v5, (uint64_t)v7, type metadata accessor for PBAllClinicalRecords);
  return sub_21FA35110;
}

void sub_21FA35110(uint64_t a1, char a2)
{
  sub_21FA38454(a1, a2, (void (*)(void *))PBTypedData.record.setter, type metadata accessor for PBAllClinicalRecords);
}

uint64_t PBTypedData.ecgs.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - v4;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v6, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 5)
      return sub_21FA2D23C((uint64_t)v5, (uint64_t)a1, type metadata accessor for PBECGs);
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  *a1 = MEMORY[0x24BEE4AF8];
  type metadata accessor for PBECGs(0);
  return sub_21FC5AD10();
}

uint64_t PBTypedData.ecgs.setter(uint64_t a1)
{
  return sub_21FA34018(a1, type metadata accessor for PBECGs);
}

void (*PBTypedData.ecgs.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for PBECGs(0) - 8) + 64);
  v3[5] = malloc(v6);
  v7 = malloc(v6);
  v3[6] = v7;
  v8 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v8, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v9 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
LABEL_6:
    *v7 = MEMORY[0x24BEE4AF8];
    sub_21FC5AD10();
    return sub_21FA35440;
  }
  if (swift_getEnumCaseMultiPayload() != 5)
  {
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
    goto LABEL_6;
  }
  sub_21FA2D23C((uint64_t)v5, (uint64_t)v7, type metadata accessor for PBECGs);
  return sub_21FA35440;
}

void sub_21FA35440(uint64_t a1, char a2)
{
  sub_21FA38454(a1, a2, (void (*)(void *))PBTypedData.ecgs.setter, type metadata accessor for PBECGs);
}

uint64_t PBTypedData.cycleTracking.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - v4;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v6, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 6)
      return sub_21FA2D23C((uint64_t)v5, a1, type metadata accessor for PBCycleTracking);
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  sub_21FC5AD10();
  v9 = *(int *)(type metadata accessor for PBCycleTracking(0) + 20);
  if (qword_25553DA18 != -1)
    swift_once();
  *(_QWORD *)(a1 + v9) = qword_255543DC0;
  return swift_retain();
}

uint64_t PBTypedData.cycleTracking.setter(uint64_t a1)
{
  return sub_21FA34018(a1, type metadata accessor for PBCycleTracking);
}

void (*PBTypedData.cycleTracking.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for PBCycleTracking(0);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v3[5] = malloc(v7);
  v8 = (char *)malloc(v7);
  v3[6] = v8;
  v9 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v9, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v10 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v5, 1, v10) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 6)
    {
      sub_21FA2D23C((uint64_t)v5, (uint64_t)v8, type metadata accessor for PBCycleTracking);
      return sub_21FA357C8;
    }
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  sub_21FC5AD10();
  v11 = *(int *)(v6 + 20);
  if (qword_25553DA18 != -1)
    swift_once();
  *(_QWORD *)&v8[v11] = qword_255543DC0;
  swift_retain();
  return sub_21FA357C8;
}

void sub_21FA357C8(uint64_t a1, char a2)
{
  sub_21FA38454(a1, a2, (void (*)(void *))PBTypedData.cycleTracking.setter, type metadata accessor for PBCycleTracking);
}

uint64_t PBTypedData.ecg.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - v4;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v6, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 7)
      return sub_21FA2D23C((uint64_t)v5, a1, type metadata accessor for PBECGMeasurement);
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0xE000000000000000;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0xE000000000000000;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0xE000000000000000;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0xE000000000000000;
  v9 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 88) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 96) = v9;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 1;
  type metadata accessor for PBECGMeasurement(0);
  return sub_21FC5AD10();
}

uint64_t PBTypedData.ecg.setter(uint64_t a1)
{
  return sub_21FA34018(a1, type metadata accessor for PBECGMeasurement);
}

void (*PBTypedData.ecg.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t v3;
  void *v4;

  *a1 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for PBECGMeasurement(0) - 8) + 64);
  a1[1] = malloc(v3);
  v4 = malloc(v3);
  a1[2] = v4;
  PBTypedData.ecg.getter((uint64_t)v4);
  return sub_21FA359EC;
}

void sub_21FA359EC(uint64_t a1, char a2)
{
  sub_21FA39588(a1, a2, (void (*)(void *))PBTypedData.ecg.setter, type metadata accessor for PBECGMeasurement);
}

uint64_t PBTypedData.activitySummaries.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - v4;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v6, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 8)
      return sub_21FA2D23C((uint64_t)v5, a1, type metadata accessor for PBActivitySummarySeries);
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  sub_21FC5AD10();
  v9 = *(int *)(type metadata accessor for PBActivitySummarySeries(0) + 20);
  if (qword_25553DAA0 != -1)
    swift_once();
  *(_QWORD *)(a1 + v9) = qword_255543F18;
  return swift_retain();
}

uint64_t PBTypedData.activitySummaries.setter(uint64_t a1)
{
  return sub_21FA34018(a1, type metadata accessor for PBActivitySummarySeries);
}

void (*PBTypedData.activitySummaries.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for PBActivitySummarySeries(0);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v3[5] = malloc(v7);
  v8 = (char *)malloc(v7);
  v3[6] = v8;
  v9 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v9, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v10 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v5, 1, v10) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 8)
    {
      sub_21FA2D23C((uint64_t)v5, (uint64_t)v8, type metadata accessor for PBActivitySummarySeries);
      return sub_21FA35D74;
    }
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  sub_21FC5AD10();
  v11 = *(int *)(v6 + 20);
  if (qword_25553DAA0 != -1)
    swift_once();
  *(_QWORD *)&v8[v11] = qword_255543F18;
  swift_retain();
  return sub_21FA35D74;
}

void sub_21FA35D74(uint64_t a1, char a2)
{
  sub_21FA38454(a1, a2, (void (*)(void *))PBTypedData.activitySummaries.setter, type metadata accessor for PBActivitySummarySeries);
}

uint64_t PBTypedData.patientMeta.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - v4;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v6, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 9)
      return sub_21FA2D23C((uint64_t)v5, a1, type metadata accessor for PBPatientMeta);
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  sub_21FC5AD10();
  v9 = *(int *)(type metadata accessor for PBPatientMeta(0) + 20);
  if (qword_25553DAC0 != -1)
    swift_once();
  *(_QWORD *)(a1 + v9) = qword_255543F60;
  return swift_retain();
}

uint64_t PBTypedData.patientMeta.setter(uint64_t a1)
{
  return sub_21FA34018(a1, type metadata accessor for PBPatientMeta);
}

void (*PBTypedData.patientMeta.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for PBPatientMeta(0);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v3[5] = malloc(v7);
  v8 = (char *)malloc(v7);
  v3[6] = v8;
  v9 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v9, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v10 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v5, 1, v10) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 9)
    {
      sub_21FA2D23C((uint64_t)v5, (uint64_t)v8, type metadata accessor for PBPatientMeta);
      return sub_21FA360FC;
    }
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  sub_21FC5AD10();
  v11 = *(int *)(v6 + 20);
  if (qword_25553DAC0 != -1)
    swift_once();
  *(_QWORD *)&v8[v11] = qword_255543F60;
  swift_retain();
  return sub_21FA360FC;
}

void sub_21FA360FC(uint64_t a1, char a2)
{
  sub_21FA38454(a1, a2, (void (*)(void *))PBTypedData.patientMeta.setter, type metadata accessor for PBPatientMeta);
}

uint64_t PBTypedData.sleepSummary.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - v4;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v6, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 10)
      return sub_21FA2D23C((uint64_t)v5, a1, type metadata accessor for PBSleepSummary);
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(a1 + 8) = 0;
  type metadata accessor for PBSleepSummary(0);
  return sub_21FC5AD10();
}

uint64_t PBTypedData.sleepSummary.setter(uint64_t a1)
{
  return sub_21FA34018(a1, type metadata accessor for PBSleepSummary);
}

void (*PBTypedData.sleepSummary.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for PBSleepSummary(0) - 8) + 64);
  v3[5] = malloc(v6);
  v7 = malloc(v6);
  v3[6] = v7;
  v8 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v8, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v9 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
LABEL_6:
    *(_QWORD *)v7 = MEMORY[0x24BEE4AF8];
    v7[2] = 0;
    sub_21FC5AD10();
    return sub_21FA36434;
  }
  if (swift_getEnumCaseMultiPayload() != 10)
  {
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
    goto LABEL_6;
  }
  sub_21FA2D23C((uint64_t)v5, (uint64_t)v7, type metadata accessor for PBSleepSummary);
  return sub_21FA36434;
}

void sub_21FA36434(uint64_t a1, char a2)
{
  sub_21FA38454(a1, a2, (void (*)(void *))PBTypedData.sleepSummary.setter, type metadata accessor for PBSleepSummary);
}

uint64_t PBTypedData.sleepSeries.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - v4;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v6, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 11)
      return sub_21FA2D23C((uint64_t)v5, (uint64_t)a1, type metadata accessor for PBSleepSeries);
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  *a1 = MEMORY[0x24BEE4AF8];
  type metadata accessor for PBSleepSeries(0);
  return sub_21FC5AD10();
}

uint64_t PBTypedData.sleepSeries.setter(uint64_t a1)
{
  return sub_21FA34018(a1, type metadata accessor for PBSleepSeries);
}

void (*PBTypedData.sleepSeries.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for PBSleepSeries(0) - 8) + 64);
  v3[5] = malloc(v6);
  v7 = malloc(v6);
  v3[6] = v7;
  v8 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v8, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v9 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
LABEL_6:
    *v7 = MEMORY[0x24BEE4AF8];
    sub_21FC5AD10();
    return sub_21FA36764;
  }
  if (swift_getEnumCaseMultiPayload() != 11)
  {
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
    goto LABEL_6;
  }
  sub_21FA2D23C((uint64_t)v5, (uint64_t)v7, type metadata accessor for PBSleepSeries);
  return sub_21FA36764;
}

void sub_21FA36764(uint64_t a1, char a2)
{
  sub_21FA38454(a1, a2, (void (*)(void *))PBTypedData.sleepSeries.setter, type metadata accessor for PBSleepSeries);
}

uint64_t PBTypedData.histogramSeries.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - v4;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v6, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 12)
      return sub_21FA2D23C((uint64_t)v5, (uint64_t)a1, type metadata accessor for PBHistogramSeries);
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = 0;
  a1[2] = 0xE000000000000000;
  type metadata accessor for PBHistogramSeries(0);
  return sub_21FC5AD10();
}

uint64_t PBTypedData.histogramSeries.setter(uint64_t a1)
{
  return sub_21FA34018(a1, type metadata accessor for PBHistogramSeries);
}

void (*PBTypedData.histogramSeries.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for PBHistogramSeries(0) - 8) + 64);
  v3[5] = malloc(v6);
  v7 = malloc(v6);
  v3[6] = v7;
  v8 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v8, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v9 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
LABEL_6:
    *v7 = MEMORY[0x24BEE4AF8];
    v7[1] = 0;
    v7[2] = 0xE000000000000000;
    sub_21FC5AD10();
    return sub_21FA36AA4;
  }
  if (swift_getEnumCaseMultiPayload() != 12)
  {
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
    goto LABEL_6;
  }
  sub_21FA2D23C((uint64_t)v5, (uint64_t)v7, type metadata accessor for PBHistogramSeries);
  return sub_21FA36AA4;
}

void sub_21FA36AA4(uint64_t a1, char a2)
{
  sub_21FA38454(a1, a2, (void (*)(void *))PBTypedData.histogramSeries.setter, type metadata accessor for PBHistogramSeries);
}

uint64_t PBTypedData.medicationTrackings.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - v4;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v6, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 13)
      return sub_21FA2D23C((uint64_t)v5, (uint64_t)a1, type metadata accessor for PBMedicationTrackings);
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  *a1 = MEMORY[0x24BEE4AF8];
  type metadata accessor for PBMedicationTrackings(0);
  return sub_21FC5AD10();
}

uint64_t PBTypedData.medicationTrackings.setter(uint64_t a1)
{
  return sub_21FA34018(a1, type metadata accessor for PBMedicationTrackings);
}

void (*PBTypedData.medicationTrackings.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for PBMedicationTrackings(0) - 8) + 64);
  v3[5] = malloc(v6);
  v7 = malloc(v6);
  v3[6] = v7;
  v8 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v8, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v9 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
LABEL_6:
    *v7 = MEMORY[0x24BEE4AF8];
    sub_21FC5AD10();
    return sub_21FA36DD4;
  }
  if (swift_getEnumCaseMultiPayload() != 13)
  {
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
    goto LABEL_6;
  }
  sub_21FA2D23C((uint64_t)v5, (uint64_t)v7, type metadata accessor for PBMedicationTrackings);
  return sub_21FA36DD4;
}

void sub_21FA36DD4(uint64_t a1, char a2)
{
  sub_21FA38454(a1, a2, (void (*)(void *))PBTypedData.medicationTrackings.setter, type metadata accessor for PBMedicationTrackings);
}

uint64_t PBTypedData.medicationTrackingDoseEvents.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - v4;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v6, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 14)
      return sub_21FA2D23C((uint64_t)v5, (uint64_t)a1, type metadata accessor for PBMedicationTrackingDoseEvents);
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  *a1 = MEMORY[0x24BEE4AF8];
  type metadata accessor for PBMedicationTrackingDoseEvents(0);
  return sub_21FC5AD10();
}

uint64_t PBTypedData.medicationTrackingDoseEvents.setter(uint64_t a1)
{
  return sub_21FA34018(a1, type metadata accessor for PBMedicationTrackingDoseEvents);
}

void (*PBTypedData.medicationTrackingDoseEvents.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for PBMedicationTrackingDoseEvents(0) - 8) + 64);
  v3[5] = malloc(v6);
  v7 = malloc(v6);
  v3[6] = v7;
  v8 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v8, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v9 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
LABEL_6:
    *v7 = MEMORY[0x24BEE4AF8];
    sub_21FC5AD10();
    return sub_21FA37104;
  }
  if (swift_getEnumCaseMultiPayload() != 14)
  {
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
    goto LABEL_6;
  }
  sub_21FA2D23C((uint64_t)v5, (uint64_t)v7, type metadata accessor for PBMedicationTrackingDoseEvents);
  return sub_21FA37104;
}

void sub_21FA37104(uint64_t a1, char a2)
{
  sub_21FA38454(a1, a2, (void (*)(void *))PBTypedData.medicationTrackingDoseEvents.setter, type metadata accessor for PBMedicationTrackingDoseEvents);
}

uint64_t PBTypedData.medicationTrackingSchedules.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - v4;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v6, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 15)
      return sub_21FA2D23C((uint64_t)v5, (uint64_t)a1, type metadata accessor for PBMedicationTrackingSchedules);
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  *a1 = MEMORY[0x24BEE4AF8];
  type metadata accessor for PBMedicationTrackingSchedules(0);
  return sub_21FC5AD10();
}

uint64_t PBTypedData.medicationTrackingSchedules.setter(uint64_t a1)
{
  return sub_21FA34018(a1, type metadata accessor for PBMedicationTrackingSchedules);
}

void (*PBTypedData.medicationTrackingSchedules.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for PBMedicationTrackingSchedules(0) - 8) + 64);
  v3[5] = malloc(v6);
  v7 = malloc(v6);
  v3[6] = v7;
  v8 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v8, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v9 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
LABEL_6:
    *v7 = MEMORY[0x24BEE4AF8];
    sub_21FC5AD10();
    return sub_21FA37434;
  }
  if (swift_getEnumCaseMultiPayload() != 15)
  {
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
    goto LABEL_6;
  }
  sub_21FA2D23C((uint64_t)v5, (uint64_t)v7, type metadata accessor for PBMedicationTrackingSchedules);
  return sub_21FA37434;
}

void sub_21FA37434(uint64_t a1, char a2)
{
  sub_21FA38454(a1, a2, (void (*)(void *))PBTypedData.medicationTrackingSchedules.setter, type metadata accessor for PBMedicationTrackingSchedules);
}

uint64_t PBTypedData.activeMedications.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - v4;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v6, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 16)
      return sub_21FA2D23C((uint64_t)v5, (uint64_t)a1, type metadata accessor for PBActiveMedications);
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  *a1 = MEMORY[0x24BEE4AF8];
  type metadata accessor for PBActiveMedications(0);
  return sub_21FC5AD10();
}

uint64_t PBTypedData.activeMedications.setter(uint64_t a1)
{
  return sub_21FA34018(a1, type metadata accessor for PBActiveMedications);
}

void (*PBTypedData.activeMedications.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for PBActiveMedications(0) - 8) + 64);
  v3[5] = malloc(v6);
  v7 = malloc(v6);
  v3[6] = v7;
  v8 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v8, (uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v9 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
LABEL_6:
    *v7 = MEMORY[0x24BEE4AF8];
    sub_21FC5AD10();
    return sub_21FA37764;
  }
  if (swift_getEnumCaseMultiPayload() != 16)
  {
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
    goto LABEL_6;
  }
  sub_21FA2D23C((uint64_t)v5, (uint64_t)v7, type metadata accessor for PBActiveMedications);
  return sub_21FA37764;
}

void sub_21FA37764(uint64_t a1, char a2)
{
  sub_21FA38454(a1, a2, (void (*)(void *))PBTypedData.activeMedications.setter, type metadata accessor for PBActiveMedications);
}

uint64_t (*PBTypedData.unknownFields.modify())()
{
  return nullsub_1;
}

uint64_t PBReference.dlid.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PBReference(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_21FA377F0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PBReference(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 24);
  *a2 = *(_QWORD *)(v3 + 16);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_21FA37848(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for PBReference(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(a2 + v5) = sub_21FA41010(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t PBReference.dlid.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for PBReference(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(v2 + v5) = sub_21FA41010(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  return swift_bridgeObjectRelease();
}

void (*PBReference.dlid.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for PBReference(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 24);
  v3[9] = *(_QWORD *)(v5 + 16);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_21FA37A30;
}

void sub_21FA37A30(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBReference._StorageClass(0);
      swift_allocObject();
      v7 = (_QWORD *)swift_retain();
      *(_QWORD *)(v6 + v5) = sub_21FA41010(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 16) = v3;
    *(_QWORD *)(v8 + 24) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBReference._StorageClass(0);
      swift_allocObject();
      v11 = (_QWORD *)swift_retain();
      *(_QWORD *)(v10 + v9) = sub_21FA41010(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 16) = v3;
    *(_QWORD *)(v12 + 24) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t PBReference.aesGcmKey.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PBReference(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 32);
  sub_21FA32314(v2, *(_QWORD *)(v1 + 40));
  return v2;
}

uint64_t sub_21FA37BE8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PBReference(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 32);
  v5 = *(_QWORD *)(v3 + 40);
  *a2 = v4;
  a2[1] = v5;
  return sub_21FA32314(v4, v5);
}

uint64_t sub_21FA37C40(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = *a1;
  v4 = a1[1];
  v5 = *(int *)(type metadata accessor for PBReference(0) + 20);
  sub_21FA32314(v3, v4);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(a2 + v5) = sub_21FA41010(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v7 + 32) = v3;
  *(_QWORD *)(v7 + 40) = v4;
  return sub_21FA2D770(v8, v9);
}

uint64_t PBReference.aesGcmKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(int *)(type metadata accessor for PBReference(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(v2 + v5) = sub_21FA41010(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v7 + 32) = a1;
  *(_QWORD *)(v7 + 40) = a2;
  return sub_21FA2D770(v8, v9);
}

void (*PBReference.aesGcmKey.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for PBReference(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 32);
  v7 = *(_QWORD *)(v5 + 40);
  v3[9] = v6;
  v3[10] = v7;
  sub_21FA32314(v6, v7);
  return sub_21FA37E28;
}

void sub_21FA37E28(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    sub_21FA32314(*(_QWORD *)(*a1 + 72), v4);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBReference._StorageClass(0);
      swift_allocObject();
      v7 = (_QWORD *)swift_retain();
      *(_QWORD *)(v6 + v5) = sub_21FA41010(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    v9 = *(_QWORD *)(v8 + 32);
    v10 = *(_QWORD *)(v8 + 40);
    *(_QWORD *)(v8 + 32) = v3;
    *(_QWORD *)(v8 + 40) = v4;
    sub_21FA2D770(v9, v10);
    v11 = *(_QWORD *)(v2 + 72);
    v12 = *(_QWORD *)(v2 + 80);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v13 = *(int *)(v2 + 96);
      v14 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBReference._StorageClass(0);
      swift_allocObject();
      v15 = (_QWORD *)swift_retain();
      *(_QWORD *)(v14 + v13) = sub_21FA41010(v15);
      swift_release();
    }
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    v11 = *(_QWORD *)(v16 + 32);
    v12 = *(_QWORD *)(v16 + 40);
    *(_QWORD *)(v16 + 32) = v3;
    *(_QWORD *)(v16 + 40) = v4;
  }
  sub_21FA2D770(v11, v12);
  free((void *)v2);
}

uint64_t PBReference.dateRange.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA37F9C(type metadata accessor for PBReference, &OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange, a1);
}

uint64_t sub_21FA37F9C@<X0>(uint64_t (*a1)(_QWORD)@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  sub_21FA2D1A0(0, &qword_25553E0F8, type metadata accessor for PBDateRange, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v13 - v8;
  v10 = *(_QWORD *)(v3 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  sub_21FA44968(v10, (uint64_t)v9, &qword_25553E0F8, type metadata accessor for PBDateRange);
  v11 = type metadata accessor for PBDateRange(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1)
    return sub_21FA2D23C((uint64_t)v9, a3, type metadata accessor for PBDateRange);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0xE000000000000000;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0xE000000000000000;
  *(_QWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 40) = 1;
  sub_21FC5AD10();
  return sub_21FA2D1F8((uint64_t)v9, &qword_25553E0F8, type metadata accessor for PBDateRange);
}

uint64_t PBReference.dateRange.setter(uint64_t a1)
{
  return sub_21FA38114(a1, type metadata accessor for PBReference, (void (*)(_QWORD))type metadata accessor for PBReference._StorageClass, (uint64_t (*)(uint64_t))sub_21FA41010, &OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange);
}

uint64_t sub_21FA38114(uint64_t a1, uint64_t (*a2)(_QWORD), void (*a3)(_QWORD), uint64_t (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  sub_21FA2D1A0(0, &qword_25553E0F8, type metadata accessor for PBDateRange, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v23 - v15;
  v17 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a3(0);
    swift_allocObject();
    v18 = swift_retain();
    *(_QWORD *)(v5 + v17) = a4(v18);
    swift_release();
  }
  v19 = *(_QWORD *)(v5 + v17);
  sub_21FA2D23C(a1, (uint64_t)v16, type metadata accessor for PBDateRange);
  v20 = type metadata accessor for PBDateRange(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v16, 0, 1, v20);
  sub_21FA2D280((uint64_t)v16, (uint64_t)v14, &qword_25553E0F8, type metadata accessor for PBDateRange);
  v21 = v19 + *a5;
  swift_beginAccess();
  swift_retain();
  sub_21FA2D2D8((uint64_t)v14, v21, &qword_25553E0F8, type metadata accessor for PBDateRange);
  swift_endAccess();
  return swift_release();
}

void (*PBReference.dateRange.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_21FA2D1A0(0, &qword_25553E0F8, type metadata accessor for PBDateRange, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for PBDateRange(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBReference(0) + 20))
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  swift_beginAccess();
  sub_21FA44968(v10, (uint64_t)v5, &qword_25553E0F8, type metadata accessor for PBDateRange);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    v9[2] = 0;
    v9[3] = 0xE000000000000000;
    v9[4] = 0;
    *((_BYTE *)v9 + 40) = 1;
    sub_21FC5AD10();
    sub_21FA2D1F8((uint64_t)v5, &qword_25553E0F8, type metadata accessor for PBDateRange);
  }
  else
  {
    sub_21FA2D23C((uint64_t)v5, (uint64_t)v9, type metadata accessor for PBDateRange);
  }
  return sub_21FA38440;
}

void sub_21FA38440(uint64_t a1, char a2)
{
  sub_21FA38454(a1, a2, (void (*)(void *))PBReference.dateRange.setter, type metadata accessor for PBDateRange);
}

void sub_21FA38454(uint64_t a1, char a2, void (*a3)(void *), uint64_t (*a4)(_QWORD))
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v5 = *(void **)a1;
  v6 = *(void **)(*(_QWORD *)a1 + 40);
  v7 = *(void **)(*(_QWORD *)a1 + 48);
  v8 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    sub_21FA2D120(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)v6, a4);
    a3(v6);
    sub_21FA326EC((uint64_t)v7, a4);
  }
  else
  {
    a3(*(void **)(*(_QWORD *)a1 + 48));
  }
  free(v7);
  free(v6);
  free(v8);
  free(v5);
}

BOOL PBReference.hasDateRange.getter()
{
  return sub_21FA384FC(type metadata accessor for PBReference, &OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange);
}

BOOL sub_21FA384FC(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v12;

  sub_21FA2D1A0(0, &qword_25553E0F8, type metadata accessor for PBDateRange, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v12 - v6;
  v8 = *(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  sub_21FA44968(v8, (uint64_t)v7, &qword_25553E0F8, type metadata accessor for PBDateRange);
  v9 = type metadata accessor for PBDateRange(0);
  v10 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9) != 1;
  sub_21FA2D1F8((uint64_t)v7, &qword_25553E0F8, type metadata accessor for PBDateRange);
  return v10;
}

Swift::Void __swiftcall PBReference.clearDateRange()()
{
  sub_21FA38624(type metadata accessor for PBReference, (void (*)(_QWORD))type metadata accessor for PBReference._StorageClass, (uint64_t (*)(uint64_t))sub_21FA41010, &OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange);
}

uint64_t sub_21FA38624(uint64_t (*a1)(_QWORD), void (*a2)(_QWORD), uint64_t (*a3)(uint64_t), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  sub_21FA2D1A0(0, &qword_25553E0F8, type metadata accessor for PBDateRange, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v18 - v10;
  v12 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    swift_allocObject();
    v13 = swift_retain();
    *(_QWORD *)(v4 + v12) = a3(v13);
    swift_release();
  }
  v14 = *(_QWORD *)(v4 + v12);
  v15 = type metadata accessor for PBDateRange(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v11, 1, 1, v15);
  v16 = v14 + *a4;
  swift_beginAccess();
  swift_retain();
  sub_21FA2D2D8((uint64_t)v11, v16, &qword_25553E0F8, type metadata accessor for PBDateRange);
  swift_endAccess();
  return swift_release();
}

uint64_t PBReference.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBReference(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
  result = swift_beginAccess();
  v5 = *(_BYTE *)(v3 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_BYTE *)(a1 + 8) = v5;
  return result;
}

uint64_t sub_21FA387EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PBReference(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
  result = swift_beginAccess();
  v5 = *(_BYTE *)(v3 + 8);
  *(_QWORD *)a2 = *(_QWORD *)v3;
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_21FA38854(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *(int *)(type metadata accessor for PBReference(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(a2 + v5) = sub_21FA41010(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5)
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
  result = swift_beginAccess();
  *(_QWORD *)v7 = v3;
  *(_BYTE *)(v7 + 8) = v4;
  return result;
}

uint64_t PBReference.type.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = *(int *)(type metadata accessor for PBReference(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    v5 = (_QWORD *)swift_retain();
    *(_QWORD *)(v1 + v4) = sub_21FA41010(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
  result = swift_beginAccess();
  *(_QWORD *)v6 = v2;
  *(_BYTE *)(v6 + 8) = v3;
  return result;
}

void (*PBReference.type.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for PBReference(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
  swift_beginAccess();
  v6 = *(_BYTE *)(v5 + 8);
  v3[9] = *(_QWORD *)v5;
  *((_BYTE *)v3 + 80) = v6;
  return sub_21FA38A54;
}

void sub_21FA38A54(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  v5 = *(_BYTE *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 88);
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    v9 = (_QWORD *)swift_retain();
    *(_QWORD *)(v8 + v7) = sub_21FA41010(v9);
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + *(int *)(v3 + 84))
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
  swift_beginAccess();
  *(_QWORD *)v10 = v4;
  *(_BYTE *)(v10 + 8) = v5;
  free((void *)v3);
}

uint64_t PBReference.metadata.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA38B60(type metadata accessor for PBReference, &OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata, a1);
}

uint64_t sub_21FA38B60@<X0>(uint64_t (*a1)(_QWORD)@<X0>, _QWORD *a2@<X1>, unint64_t *a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;

  v9 = *(_QWORD *)(v5 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  return sub_21FA44968(v9, a5, a3, a4);
}

uint64_t sub_21FA38BE4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, _QWORD *a3@<X4>, unint64_t *a4@<X5>, uint64_t (*a5)(uint64_t)@<X6>, uint64_t a6@<X8>)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a1 + *(int *)(a2(0) + 20)) + *a3;
  swift_beginAccess();
  return sub_21FA44968(v9, a6, a4, a5);
}

uint64_t sub_21FA38C68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  sub_21FA2D1A0(0, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - v5;
  sub_21FA44968(a1, (uint64_t)&v11 - v5, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
  v7 = *(int *)(type metadata accessor for PBReference(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    v8 = (_QWORD *)swift_retain();
    *(_QWORD *)(a2 + v7) = sub_21FA41010(v8);
    swift_release();
  }
  v9 = *(_QWORD *)(a2 + v7)
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
  swift_beginAccess();
  swift_retain();
  sub_21FA2D2D8((uint64_t)v6, v9, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
  swift_endAccess();
  return swift_release();
}

uint64_t PBReference.metadata.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for PBReference(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    v4 = (_QWORD *)swift_retain();
    *(_QWORD *)(v1 + v3) = sub_21FA41010(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3)
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
  swift_beginAccess();
  swift_retain();
  sub_21FA2D2D8(a1, v5, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
  swift_endAccess();
  return swift_release();
}

void (*PBReference.metadata.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[9] = v1;
  sub_21FA2D1A0(0, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v3[10] = malloc(v5);
  v6 = malloc(v5);
  v3[11] = v6;
  v7 = *(int *)(type metadata accessor for PBReference(0) + 20);
  *((_DWORD *)v3 + 24) = v7;
  v8 = *(_QWORD *)(v1 + v7)
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
  swift_beginAccess();
  sub_21FA44968(v8, (uint64_t)v6, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
  return sub_21FA38F74;
}

void sub_21FA38F74(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    sub_21FA44968(*(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 80), &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v3 = *(int *)(v2 + 96);
      v4 = *(_QWORD *)(v2 + 72);
      type metadata accessor for PBReference._StorageClass(0);
      swift_allocObject();
      v5 = (_QWORD *)swift_retain();
      *(_QWORD *)(v4 + v3) = sub_21FA41010(v5);
      swift_release();
    }
    v7 = *(void **)(v2 + 80);
    v6 = *(void **)(v2 + 88);
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 72) + *(int *)(v2 + 96))
       + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
    swift_beginAccess();
    swift_retain();
    sub_21FA2D2D8((uint64_t)v7, v8, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
    swift_endAccess();
    swift_release();
    sub_21FA2D1F8((uint64_t)v6, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 72);
      type metadata accessor for PBReference._StorageClass(0);
      swift_allocObject();
      v11 = (_QWORD *)swift_retain();
      *(_QWORD *)(v10 + v9) = sub_21FA41010(v11);
      swift_release();
    }
    v7 = *(void **)(v2 + 80);
    v6 = *(void **)(v2 + 88);
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 72) + *(int *)(v2 + 96))
        + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
    swift_beginAccess();
    swift_retain();
    sub_21FA2D2D8((uint64_t)v6, v12, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
    swift_endAccess();
    swift_release();
  }
  free(v6);
  free(v7);
  free((void *)v2);
}

uint64_t PBReference.ecgMeta.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  sub_21FA2D1A0(0, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - v4;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBReference(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
  swift_beginAccess();
  sub_21FA44968(v6, (uint64_t)v5, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
  v7 = type metadata accessor for PBReference.OneOf_Metadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_21FA2D23C((uint64_t)v5, a1, type metadata accessor for PBECGMeta);
  sub_21FA2D1F8((uint64_t)v5, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0xE000000000000000;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0xE000000000000000;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0xE000000000000000;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0xE000000000000000;
  *(_QWORD *)(a1 + 88) = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 1;
  type metadata accessor for PBECGMeta(0);
  return sub_21FC5AD10();
}

uint64_t sub_21FA392DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v9 = a5(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v13 - v10;
  sub_21FA2D120(a1, (uint64_t)&v13 - v10, a5);
  return a6(v11);
}

uint64_t PBReference.ecgMeta.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  sub_21FA2D1A0(0, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v15 - v7;
  v9 = *(int *)(type metadata accessor for PBReference(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    v10 = (_QWORD *)swift_retain();
    *(_QWORD *)(v1 + v9) = sub_21FA41010(v10);
    swift_release();
  }
  v11 = *(_QWORD *)(v1 + v9);
  sub_21FA2D23C(a1, (uint64_t)v8, type metadata accessor for PBECGMeta);
  v12 = type metadata accessor for PBReference.OneOf_Metadata(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v8, 0, 1, v12);
  sub_21FA2D280((uint64_t)v8, (uint64_t)v6, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
  v13 = v11
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
  swift_beginAccess();
  swift_retain();
  sub_21FA2D2D8((uint64_t)v6, v13, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
  swift_endAccess();
  return swift_release();
}

void (*PBReference.ecgMeta.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t v3;
  void *v4;

  *a1 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for PBECGMeta(0) - 8) + 64);
  a1[1] = malloc(v3);
  v4 = malloc(v3);
  a1[2] = v4;
  PBReference.ecgMeta.getter((uint64_t)v4);
  return sub_21FA39574;
}

void sub_21FA39574(uint64_t a1, char a2)
{
  sub_21FA39588(a1, a2, (void (*)(void *))PBReference.ecgMeta.setter, type metadata accessor for PBECGMeta);
}

void sub_21FA39588(uint64_t a1, char a2, void (*a3)(void *), uint64_t (*a4)(_QWORD))
{
  void *v5;
  void *v6;

  v5 = *(void **)(a1 + 8);
  v6 = *(void **)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    sub_21FA2D120(*(_QWORD *)(a1 + 16), (uint64_t)v5, a4);
    a3(v5);
    sub_21FA326EC((uint64_t)v6, a4);
  }
  else
  {
    a3(*(void **)(a1 + 16));
  }
  free(v6);
  free(v5);
}

uint64_t _s19HealthRecordsDaemon11PBTypedDataV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t _s19HealthRecordsDaemon11PBTypedDataV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvs_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*PBReference.unknownFields.modify())()
{
  return nullsub_1;
}

uint64_t static PBReference.OneOf_Metadata.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v13;

  v4 = type metadata accessor for PBECGMeta(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA48FCC(0, &qword_25553E4C8, (void (*)(uint64_t))type metadata accessor for PBReference.OneOf_Metadata);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v13 - v9;
  v11 = (char *)&v13 + *(int *)(v8 + 48) - v9;
  sub_21FA2D120(a1, (uint64_t)&v13 - v9, type metadata accessor for PBReference.OneOf_Metadata);
  sub_21FA2D120(a2, (uint64_t)v11, type metadata accessor for PBReference.OneOf_Metadata);
  sub_21FA2D23C((uint64_t)v10, (uint64_t)v6, type metadata accessor for PBECGMeta);
  LOBYTE(a2) = _s19HealthRecordsDaemon9PBECGMetaV2eeoiySbAC_ACtFZ_0((uint64_t)v6, (uint64_t)v11);
  sub_21FA326EC((uint64_t)v11, type metadata accessor for PBECGMeta);
  sub_21FA326EC((uint64_t)v6, type metadata accessor for PBECGMeta);
  return a2 & 1;
}

uint64_t sub_21FA397A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v13;

  v4 = type metadata accessor for PBECGMeta(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA48FCC(0, &qword_25553E4C8, (void (*)(uint64_t))type metadata accessor for PBReference.OneOf_Metadata);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v13 - v9;
  v11 = (char *)&v13 + *(int *)(v8 + 48) - v9;
  sub_21FA2D120(a1, (uint64_t)&v13 - v9, type metadata accessor for PBReference.OneOf_Metadata);
  sub_21FA2D120(a2, (uint64_t)v11, type metadata accessor for PBReference.OneOf_Metadata);
  sub_21FA2D23C((uint64_t)v10, (uint64_t)v6, type metadata accessor for PBECGMeta);
  LOBYTE(a2) = static PBECGMeta.== infix(_:_:)((uint64_t)v6, (uint64_t)v11);
  sub_21FA326EC((uint64_t)v11, type metadata accessor for PBECGMeta);
  sub_21FA326EC((uint64_t)v6, type metadata accessor for PBECGMeta);
  return a2 & 1;
}

uint64_t PBReference.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA398EC(type metadata accessor for PBReference, &qword_25553D5A0, &qword_25553E470, a1);
}

uint64_t sub_21FA398EC@<X0>(uint64_t (*a1)(_QWORD)@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  sub_21FC5AD10();
  v8 = *(int *)(a1(0) + 20);
  if (*a2 != -1)
    swift_once();
  *(_QWORD *)(a4 + v8) = *a3;
  return swift_retain();
}

uint64_t PBReferences.references.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PBReferences.references.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*PBReferences.references.modify())()
{
  return nullsub_1;
}

uint64_t PBReferences.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA399A8(type metadata accessor for PBReferences, a1);
}

uint64_t sub_21FA399A8@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 20);
  v5 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t PBReferences.unknownFields.setter(uint64_t a1)
{
  return sub_21FA39A00(a1, type metadata accessor for PBReferences);
}

uint64_t sub_21FA39A00(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 20);
  v5 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*PBReferences.unknownFields.modify())()
{
  type metadata accessor for PBReferences(0);
  return nullsub_1;
}

uint64_t PBReferences.init()@<X0>(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
  type metadata accessor for PBReferences(0);
  return sub_21FC5AD10();
}

unint64_t static PBRawData.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t sub_21FA39AC8(uint64_t a1)
{
  return sub_21FA42CD8(a1, qword_25553E420, (uint64_t)"blob", 4);
}

uint64_t static PBRawData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA3A338(&qword_25553D580, (uint64_t)qword_25553E420, a1);
}

uint64_t PBRawData.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = sub_21FC5AD88();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
      sub_21FC5ADF4();
  }
  return result;
}

void PBRawData.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_21FA39BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0 || (result = sub_21FC5AEF0(), !v2))
  {
    type metadata accessor for PBRawData(0);
    return sub_21FC5AD04();
  }
  return result;
}

uint64_t PBRawData.hashValue.getter()
{
  return sub_21FA42FDC(type metadata accessor for PBRawData, &qword_25553E4D0, (uint64_t)&protocol conformance descriptor for PBRawData);
}

uint64_t sub_21FA39C5C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = sub_21FC5ACF8();
  a1[1] = v2;
  return sub_21FC5AD10();
}

unint64_t sub_21FA39C90()
{
  return 0xD000000000000022;
}

uint64_t (*sub_21FA39CB8())()
{
  return nullsub_1;
}

uint64_t sub_21FA39CCC()
{
  return PBRawData.decodeMessage<A>(decoder:)();
}

void sub_21FA39CE0()
{
  PBRawData.traverse<A>(visitor:)();
}

uint64_t sub_21FA39CF8()
{
  sub_21FA2A08C(&qword_25553EAA0, type metadata accessor for PBRawData, (uint64_t)&protocol conformance descriptor for PBRawData);
  return sub_21FC5AD70();
}

uint64_t sub_21FA39D4C@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA40BC8(&qword_25553D580, (uint64_t)qword_25553E420, a1);
}

uint64_t sub_21FA39D68()
{
  sub_21FA2A08C(&qword_25553E500, type metadata accessor for PBRawData, (uint64_t)&protocol conformance descriptor for PBRawData);
  return sub_21FC5AE9C();
}

uint64_t sub_21FA39DAC()
{
  sub_21FA2A08C(&qword_25553E500, type metadata accessor for PBRawData, (uint64_t)&protocol conformance descriptor for PBRawData);
  return sub_21FC5AEA8();
}

unint64_t static PBTypedData.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t sub_21FA39E20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  char *v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  uint64_t v45;

  v0 = sub_21FC5AF74();
  __swift_allocate_value_buffer(v0, qword_25553E438);
  __swift_project_value_buffer(v0, (uint64_t)qword_25553E438);
  sub_21FA2D1A0(0, (unint64_t *)&qword_25553EAC0, (uint64_t (*)(uint64_t))sub_21FA48EB8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  sub_21FA48EB8();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_21FC5EE10;
  v6 = v45 + v5;
  v7 = v45 + v5 + *(int *)(v2 + 48);
  *(_QWORD *)(v45 + v5) = 1;
  *(_QWORD *)v7 = "type";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_21FC5AF5C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v45 + v5 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + v4) = 2;
  *(_QWORD *)v11 = "date_range";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v45 + v5 + 2 * v4);
  v13 = (char *)v12 + *(int *)(v2 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "time_series";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v45 + v5 + 3 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "category_series";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v45 + v5 + 4 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "workout";
  *((_QWORD *)v17 + 1) = 7;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v45 + v5 + 5 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "characteristics";
  *((_QWORD *)v19 + 1) = 15;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v45 + v5 + 6 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "record";
  *((_QWORD *)v21 + 1) = 6;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v45 + v5 + 7 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 13;
  *(_QWORD *)v23 = "ecgs";
  *((_QWORD *)v23 + 1) = 4;
  v23[16] = 2;
  v10();
  v24 = v45 + v5 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + 8 * v4) = 14;
  *(_QWORD *)v24 = "cycleTracking";
  *(_QWORD *)(v24 + 8) = 13;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v45 + v5 + 9 * v4);
  v26 = (char *)v25 + *(int *)(v2 + 48);
  *v25 = 15;
  *(_QWORD *)v26 = "ecg";
  *((_QWORD *)v26 + 1) = 3;
  v26[16] = 2;
  v10();
  v27 = (_QWORD *)(v45 + v5 + 10 * v4);
  v28 = (char *)v27 + *(int *)(v2 + 48);
  *v27 = 16;
  *(_QWORD *)v28 = "activitySummaries";
  *((_QWORD *)v28 + 1) = 17;
  v28[16] = 2;
  v10();
  v29 = (_QWORD *)(v45 + v5 + 11 * v4);
  v30 = (char *)v29 + *(int *)(v2 + 48);
  *v29 = 17;
  *(_QWORD *)v30 = "patient_meta";
  *((_QWORD *)v30 + 1) = 12;
  v30[16] = 2;
  v10();
  v31 = (_QWORD *)(v45 + v5 + 12 * v4);
  v32 = (char *)v31 + *(int *)(v2 + 48);
  *v31 = 18;
  *(_QWORD *)v32 = "sleep_summary";
  *((_QWORD *)v32 + 1) = 13;
  v32[16] = 2;
  v10();
  v33 = (_QWORD *)(v45 + v5 + 13 * v4);
  v34 = (char *)v33 + *(int *)(v2 + 48);
  *v33 = 19;
  *(_QWORD *)v34 = "sleep_series";
  *((_QWORD *)v34 + 1) = 12;
  v34[16] = 2;
  v10();
  v35 = (_QWORD *)(v45 + v5 + 14 * v4);
  v36 = (char *)v35 + *(int *)(v2 + 48);
  *v35 = 20;
  *(_QWORD *)v36 = "histogram_series";
  *((_QWORD *)v36 + 1) = 16;
  v36[16] = 2;
  v10();
  v37 = (_QWORD *)(v45 + v5 + 15 * v4);
  v38 = (char *)v37 + *(int *)(v2 + 48);
  *v37 = 21;
  *(_QWORD *)v38 = "medication_trackings";
  *((_QWORD *)v38 + 1) = 20;
  v38[16] = 2;
  v10();
  v39 = v45 + v5 + 16 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + 16 * v4) = 22;
  *(_QWORD *)v39 = "medication_tracking_dose_events";
  *(_QWORD *)(v39 + 8) = 31;
  *(_BYTE *)(v39 + 16) = 2;
  v10();
  v40 = (_QWORD *)(v45 + v5 + 17 * v4);
  v41 = (char *)v40 + *(int *)(v2 + 48);
  *v40 = 23;
  *(_QWORD *)v41 = "medication_tracking_schedules";
  *((_QWORD *)v41 + 1) = 29;
  v41[16] = 2;
  v10();
  v42 = (_QWORD *)(v45 + v5 + 18 * v4);
  v43 = (char *)v42 + *(int *)(v2 + 48);
  *v42 = 24;
  *(_QWORD *)v43 = "active_medications";
  *((_QWORD *)v43 + 1) = 18;
  v43[16] = 2;
  v10();
  return sub_21FC5AF68();
}

uint64_t static PBTypedData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA3A338(&qword_25553D588, (uint64_t)qword_25553E438, a1);
}

uint64_t sub_21FA3A338@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_21FC5AF74();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t sub_21FA3A3A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  type metadata accessor for PBTypedData._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  v1 = v0
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  v2 = type metadata accessor for PBDateRange(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0 + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  v4 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  qword_25553E450 = v0;
  return result;
}

uint64_t type metadata accessor for PBTypedData._StorageClass(uint64_t a1)
{
  return sub_21FA44B58(a1, qword_25553E850);
}

uint64_t sub_21FA3A458(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v2 = v1;
  v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v20 - v6;
  sub_21FA2D1A0(0, &qword_25553E0F8, type metadata accessor for PBDateRange, v4);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v20 - v9;
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  v11 = v1
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  v12 = type metadata accessor for PBDateRange(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = v1 + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  v14 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  swift_beginAccess();
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(_BYTE *)(a1 + 24);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v15;
  *(_BYTE *)(v1 + 24) = v16;
  v17 = a1
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  swift_beginAccess();
  sub_21FA44968(v17, (uint64_t)v10, &qword_25553E0F8, type metadata accessor for PBDateRange);
  swift_beginAccess();
  sub_21FA2D2D8((uint64_t)v10, v11, &qword_25553E0F8, type metadata accessor for PBDateRange);
  swift_endAccess();
  v18 = a1 + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v18, (uint64_t)v7, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  swift_release();
  swift_beginAccess();
  sub_21FA2D2D8((uint64_t)v7, v13, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  swift_endAccess();
  return v2;
}

uint64_t type metadata accessor for PBTypedData.OneOf_Raw(uint64_t a1)
{
  return sub_21FA44B58(a1, qword_25553E650);
}

uint64_t type metadata accessor for PBRawData(uint64_t a1)
{
  return sub_21FA44B58(a1, qword_25553E5A8);
}

uint64_t sub_21FA3A6EC()
{
  uint64_t v0;

  sub_21FA2D1F8(v0+ OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange, &qword_25553E0F8, type metadata accessor for PBDateRange);
  sub_21FA2D1F8(v0 + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  return swift_deallocClassInstance();
}

uint64_t PBTypedData.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21FA41414(a1, a2, a3, type metadata accessor for PBTypedData, (void (*)(_QWORD))type metadata accessor for PBTypedData._StorageClass, sub_21FA3A458, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_21FA3A780);
}

uint64_t sub_21FA3A780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t (*v104)(uint64_t);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (*v112)(uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t (*v120)(uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t (*v128)(uint64_t);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t result;
  char v256;
  unint64_t *v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  void (*v263)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  void (*v268)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void (*v272)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  void (*v276)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  void (*v282)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  void (*v287)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  void (*v293)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  void (*v298)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  void (*v302)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v303;
  void (*v304)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  void (*v310)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v311;
  uint64_t v312;
  uint64_t (*v313)(uint64_t);
  unint64_t *v314;
  void (*v315)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v316;
  uint64_t v317;
  void (*v318)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v319;
  uint64_t v320;
  void (*v321)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  void (*v326)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v327;
  uint64_t v328;
  unint64_t *v329;
  void (*v330)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v331;
  uint64_t v332;
  char *v333;
  void (*v334)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  int EnumCaseMultiPayload;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  int v354;
  uint64_t (*v355)(uint64_t);
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  int v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  void (*v386)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  int v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  int v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  int v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  int v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  int v426;
  uint64_t (*v427)(uint64_t);
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  int v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t *v439;
  unint64_t *v440;
  unint64_t *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  unint64_t *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unint64_t *v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  unint64_t *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  unint64_t *v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  unint64_t *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t *v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  unint64_t *v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  unint64_t *v528;
  unint64_t *v529;
  unint64_t *v530;
  char *v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  unint64_t *v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t *v545;
  uint64_t v546;
  unint64_t *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  unint64_t *v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  unint64_t *v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  unint64_t *v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  char *v574;
  char *v575;
  char *v576;
  char *v577;
  char *v578;
  char *v579;
  char *v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  char *v633;
  char *v634;
  char *v635;
  char *v636;
  char *v637;
  char *v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  unint64_t *v647;
  uint64_t v648;
  uint64_t v649;
  char *v650;
  char *v651;
  char *v652;
  char *v653;
  unint64_t *v654;
  char *v655;
  char *v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  char *v674;
  char *v675;
  char *v676;
  char *v677;
  char *v678;
  char *v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  char *v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  char *v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  unint64_t *v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;

  v724 = a1;
  v736 = a4;
  v734 = a2;
  v735 = a3;
  v721 = type metadata accessor for PBActiveMedications(0);
  v697 = *(_QWORD *)(v721 - 8);
  v4 = MEMORY[0x24BDAC7A8](v721);
  v605 = (uint64_t)&v573 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v591 = (uint64_t)&v573 - v6;
  v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_21FA2D1A0(0, &qword_25553EB80, v8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v727 = (char *)&v573 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v711 = (uint64_t)&v573 - v12;
  v729 = type metadata accessor for PBMedicationTrackingSchedules(0);
  v710 = *(_QWORD *)(v729 - 8);
  v13 = MEMORY[0x24BDAC7A8](v729);
  v656 = (char *)&v573 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v590 = (uint64_t)&v573 - v15;
  sub_21FA2D1A0(0, &qword_25553EB88, v16, v7);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v655 = (char *)&v573 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v690 = (uint64_t)&v573 - v20;
  v720 = type metadata accessor for PBMedicationTrackingDoseEvents(0);
  v696 = *(_QWORD *)(v720 - 8);
  v21 = MEMORY[0x24BDAC7A8](v720);
  v604 = (uint64_t)&v573 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v589 = (uint64_t)&v573 - v23;
  sub_21FA2D1A0(0, &qword_25553EB90, v24, v7);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v654 = (unint64_t *)((char *)&v573 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v26);
  v689 = (uint64_t)&v573 - v28;
  v719 = type metadata accessor for PBMedicationTrackings(0);
  v709 = *(_QWORD *)(v719 - 8);
  v29 = MEMORY[0x24BDAC7A8](v719);
  v653 = (char *)&v573 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v638 = (char *)&v573 - v31;
  sub_21FA2D1A0(0, &qword_25553EB98, v32, v7);
  v34 = MEMORY[0x24BDAC7A8](v33);
  v652 = (char *)&v573 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v34);
  v679 = (char *)&v573 - v36;
  v718 = type metadata accessor for PBHistogramSeries(0);
  v708 = *(_QWORD *)(v718 - 8);
  v37 = MEMORY[0x24BDAC7A8](v718);
  v603 = (uint64_t)&v573 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v37);
  v588 = (uint64_t)&v573 - v39;
  sub_21FA2D1A0(0, &qword_25553EBA0, v40, v7);
  v42 = MEMORY[0x24BDAC7A8](v41);
  v649 = (uint64_t)&v573 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v42);
  v695 = (uint64_t)&v573 - v44;
  v717 = type metadata accessor for PBSleepSeries(0);
  v707 = *(_QWORD *)(v717 - 8);
  v45 = MEMORY[0x24BDAC7A8](v717);
  v602 = (uint64_t)&v573 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v45);
  v587 = (uint64_t)&v573 - v47;
  sub_21FA2D1A0(0, &qword_25553EBA8, v48, v7);
  v50 = MEMORY[0x24BDAC7A8](v49);
  v648 = (uint64_t)&v573 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v50);
  v694 = (uint64_t)&v573 - v52;
  v716 = type metadata accessor for PBSleepSummary(0);
  v706 = *(_QWORD *)(v716 - 8);
  v53 = MEMORY[0x24BDAC7A8](v716);
  v601 = (uint64_t)&v573 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v53);
  v586 = (uint64_t)&v573 - v55;
  sub_21FA2D1A0(0, &qword_25553EBB0, v56, v7);
  v58 = MEMORY[0x24BDAC7A8](v57);
  v647 = (unint64_t *)((char *)&v573 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v58);
  v693 = (uint64_t)&v573 - v60;
  v715 = type metadata accessor for PBPatientMeta(0);
  v730 = *(_QWORD *)(v715 - 8);
  v61 = MEMORY[0x24BDAC7A8](v715);
  v651 = (char *)&v573 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v61);
  v585 = (uint64_t)&v573 - v63;
  sub_21FA2D1A0(0, &qword_25553EBB8, v64, v7);
  v66 = MEMORY[0x24BDAC7A8](v65);
  v678 = (char *)&v573 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v66);
  v692 = (uint64_t)&v573 - v68;
  v714 = type metadata accessor for PBActivitySummarySeries(0);
  v705 = *(_QWORD *)(v714 - 8);
  v69 = MEMORY[0x24BDAC7A8](v714);
  v600 = (uint64_t)&v573 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v69);
  v584 = (uint64_t)&v573 - v71;
  sub_21FA2D1A0(0, &qword_25553EBC0, v72, v7);
  v74 = MEMORY[0x24BDAC7A8](v73);
  v646 = (uint64_t)&v573 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v74);
  v722 = (uint64_t)&v573 - v76;
  v713 = type metadata accessor for PBECGMeasurement(0);
  v731 = *(_QWORD *)(v713 - 8);
  v77 = MEMORY[0x24BDAC7A8](v713);
  v599 = (uint64_t)&v573 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v77);
  v583 = (uint64_t)&v573 - v79;
  sub_21FA2D1A0(0, &qword_25553EBC8, v80, v7);
  v82 = MEMORY[0x24BDAC7A8](v81);
  v650 = (char *)&v573 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v82);
  v691 = (uint64_t)&v573 - v84;
  v686 = type metadata accessor for PBCycleTracking(0);
  v704 = *(_QWORD *)(v686 - 8);
  v85 = MEMORY[0x24BDAC7A8](v686);
  v598 = (uint64_t)&v573 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v85);
  v637 = (char *)&v573 - v87;
  sub_21FA2D1A0(0, &qword_25553EBD0, v88, v7);
  v90 = MEMORY[0x24BDAC7A8](v89);
  v645 = (uint64_t)&v573 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v90);
  v677 = (char *)&v573 - v92;
  v685 = type metadata accessor for PBECGs(0);
  v703 = *(_QWORD *)(v685 - 8);
  v93 = MEMORY[0x24BDAC7A8](v685);
  v597 = (uint64_t)&v573 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v93);
  v582 = (uint64_t)&v573 - v95;
  sub_21FA2D1A0(0, &qword_25553EBD8, v96, v7);
  v98 = MEMORY[0x24BDAC7A8](v97);
  v644 = (uint64_t)&v573 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v98);
  v688 = (uint64_t)&v573 - v100;
  v684 = type metadata accessor for PBAllClinicalRecords(0);
  v702 = *(_QWORD *)(v684 - 8);
  v101 = MEMORY[0x24BDAC7A8](v684);
  v596 = (uint64_t)&v573 - ((v102 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v101);
  v636 = (char *)&v573 - v103;
  sub_21FA2D1A0(0, &qword_25553EBE0, v104, v7);
  v106 = MEMORY[0x24BDAC7A8](v105);
  v643 = (uint64_t)&v573 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v106);
  v676 = (char *)&v573 - v108;
  v683 = type metadata accessor for PBCharacteristics(0);
  v701 = *(_QWORD *)(v683 - 8);
  v109 = MEMORY[0x24BDAC7A8](v683);
  v595 = (uint64_t)&v573 - ((v110 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v109);
  v581 = (uint64_t)&v573 - v111;
  sub_21FA2D1A0(0, &qword_25553EBE8, v112, v7);
  v114 = MEMORY[0x24BDAC7A8](v113);
  v642 = (uint64_t)&v573 - ((v115 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v114);
  v687 = (uint64_t)&v573 - v116;
  v682 = type metadata accessor for PBWorkout(0);
  v700 = *(_QWORD *)(v682 - 8);
  v117 = MEMORY[0x24BDAC7A8](v682);
  v594 = (uint64_t)&v573 - ((v118 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v117);
  v635 = (char *)&v573 - v119;
  sub_21FA2D1A0(0, &qword_25553EBF0, v120, v7);
  v122 = MEMORY[0x24BDAC7A8](v121);
  v641 = (uint64_t)&v573 - ((v123 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v122);
  v675 = (char *)&v573 - v124;
  v681 = type metadata accessor for PBCategorySeries(0);
  v699 = *(_QWORD *)(v681 - 8);
  v125 = MEMORY[0x24BDAC7A8](v681);
  v593 = (uint64_t)&v573 - ((v126 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v125);
  v634 = (char *)&v573 - v127;
  sub_21FA2D1A0(0, &qword_25553EBF8, v128, v7);
  v130 = MEMORY[0x24BDAC7A8](v129);
  v640 = (uint64_t)&v573 - ((v131 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v130);
  v674 = (char *)&v573 - v132;
  v680 = type metadata accessor for PBTimeSeries(0);
  v698 = *(_QWORD *)(v680 - 8);
  v133 = MEMORY[0x24BDAC7A8](v680);
  v592 = (uint64_t)&v573 - ((v134 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v133);
  v633 = (char *)&v573 - v135;
  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, v7);
  v137 = MEMORY[0x24BDAC7A8](v136);
  v673 = (uint64_t)&v573 - ((v138 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = MEMORY[0x24BDAC7A8](v137);
  v672 = (uint64_t)&v573 - v140;
  v141 = MEMORY[0x24BDAC7A8](v139);
  v671 = (uint64_t)&v573 - v142;
  v143 = MEMORY[0x24BDAC7A8](v141);
  v670 = (uint64_t)&v573 - v144;
  v145 = MEMORY[0x24BDAC7A8](v143);
  v669 = (uint64_t)&v573 - v146;
  v147 = MEMORY[0x24BDAC7A8](v145);
  v668 = (uint64_t)&v573 - v148;
  v149 = MEMORY[0x24BDAC7A8](v147);
  v667 = (uint64_t)&v573 - v150;
  v151 = MEMORY[0x24BDAC7A8](v149);
  v666 = (uint64_t)&v573 - v152;
  v153 = MEMORY[0x24BDAC7A8](v151);
  v665 = (uint64_t)&v573 - v154;
  v155 = MEMORY[0x24BDAC7A8](v153);
  v664 = (uint64_t)&v573 - v156;
  v157 = MEMORY[0x24BDAC7A8](v155);
  v663 = (uint64_t)&v573 - v158;
  v159 = MEMORY[0x24BDAC7A8](v157);
  v662 = (uint64_t)&v573 - v160;
  v161 = MEMORY[0x24BDAC7A8](v159);
  v661 = (uint64_t)&v573 - v162;
  v163 = MEMORY[0x24BDAC7A8](v161);
  v660 = (uint64_t)&v573 - v164;
  v165 = MEMORY[0x24BDAC7A8](v163);
  v659 = (uint64_t)&v573 - v166;
  v167 = MEMORY[0x24BDAC7A8](v165);
  v658 = (uint64_t)&v573 - v168;
  v169 = MEMORY[0x24BDAC7A8](v167);
  v726 = (uint64_t)&v573 - v170;
  v171 = MEMORY[0x24BDAC7A8](v169);
  v725 = (uint64_t)&v573 - v172;
  MEMORY[0x24BDAC7A8](v171);
  v657 = (uint64_t)&v573 - v173;
  v174 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  v732 = *(_QWORD *)(v174 - 8);
  v733 = (unint64_t *)v174;
  v175 = MEMORY[0x24BDAC7A8](v174);
  v619 = (uint64_t)&v573 - ((v176 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = MEMORY[0x24BDAC7A8](v175);
  v632 = (uint64_t)&v573 - v178;
  v179 = MEMORY[0x24BDAC7A8](v177);
  v618 = (uint64_t)&v573 - v180;
  v181 = MEMORY[0x24BDAC7A8](v179);
  v631 = (uint64_t)&v573 - v182;
  v183 = MEMORY[0x24BDAC7A8](v181);
  v617 = (uint64_t)&v573 - v184;
  v185 = MEMORY[0x24BDAC7A8](v183);
  v630 = (uint64_t)&v573 - v186;
  v187 = MEMORY[0x24BDAC7A8](v185);
  v616 = (uint64_t)&v573 - v188;
  v189 = MEMORY[0x24BDAC7A8](v187);
  v629 = (uint64_t)&v573 - v190;
  v191 = MEMORY[0x24BDAC7A8](v189);
  v615 = (uint64_t)&v573 - v192;
  v193 = MEMORY[0x24BDAC7A8](v191);
  v628 = (uint64_t)&v573 - v194;
  v195 = MEMORY[0x24BDAC7A8](v193);
  v614 = (uint64_t)&v573 - v196;
  v197 = MEMORY[0x24BDAC7A8](v195);
  v627 = (uint64_t)&v573 - v198;
  v199 = MEMORY[0x24BDAC7A8](v197);
  v613 = (uint64_t)&v573 - v200;
  v201 = MEMORY[0x24BDAC7A8](v199);
  v626 = (uint64_t)&v573 - v202;
  v203 = MEMORY[0x24BDAC7A8](v201);
  v612 = (uint64_t)&v573 - v204;
  v205 = MEMORY[0x24BDAC7A8](v203);
  v625 = (uint64_t)&v573 - v206;
  v207 = MEMORY[0x24BDAC7A8](v205);
  v611 = (uint64_t)&v573 - v208;
  v209 = MEMORY[0x24BDAC7A8](v207);
  v624 = (uint64_t)&v573 - v210;
  v211 = MEMORY[0x24BDAC7A8](v209);
  v610 = (uint64_t)&v573 - v212;
  v213 = MEMORY[0x24BDAC7A8](v211);
  v623 = (uint64_t)&v573 - v214;
  v215 = MEMORY[0x24BDAC7A8](v213);
  v609 = (uint64_t)&v573 - v216;
  v217 = MEMORY[0x24BDAC7A8](v215);
  v622 = (uint64_t)&v573 - v218;
  v219 = MEMORY[0x24BDAC7A8](v217);
  v608 = (uint64_t)&v573 - v220;
  v221 = MEMORY[0x24BDAC7A8](v219);
  v621 = (uint64_t)&v573 - v222;
  v223 = MEMORY[0x24BDAC7A8](v221);
  v607 = (uint64_t)&v573 - v224;
  v225 = MEMORY[0x24BDAC7A8](v223);
  v620 = (uint64_t)&v573 - v226;
  v227 = MEMORY[0x24BDAC7A8](v225);
  v606 = (uint64_t)&v573 - v228;
  v229 = MEMORY[0x24BDAC7A8](v227);
  v231 = (char *)&v573 - v230;
  v232 = MEMORY[0x24BDAC7A8](v229);
  v234 = (char *)&v573 - v233;
  v235 = MEMORY[0x24BDAC7A8](v232);
  v237 = (char *)&v573 - v236;
  v238 = MEMORY[0x24BDAC7A8](v235);
  v240 = (char *)&v573 - v239;
  v241 = MEMORY[0x24BDAC7A8](v238);
  v243 = (char *)&v573 - v242;
  v244 = MEMORY[0x24BDAC7A8](v241);
  v246 = (char *)&v573 - v245;
  MEMORY[0x24BDAC7A8](v244);
  v248 = (char *)&v573 - v247;
  sub_21FA2D1A0(0, &qword_25553EC00, type metadata accessor for PBTimeSeries, v7);
  v250 = MEMORY[0x24BDAC7A8](v249);
  v639 = (uint64_t)&v573 - ((v251 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v250);
  v253 = (char *)&v573 - v252;
  v712 = OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  v728 = v724
       + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  v254 = (uint64_t)v723;
  result = sub_21FC5AD88();
  if (!v254)
  {
    v723 = v253;
    v577 = v248;
    v574 = v246;
    v578 = v243;
    v575 = v240;
    v579 = v237;
    v576 = v234;
    v580 = v231;
    v712 += v724;
    v724 += 16;
    v257 = (unint64_t *)&jpt_21FA3BF94;
    v259 = v727;
    v258 = v728;
    v261 = v729;
    v260 = v730;
    v262 = v731;
    while ((v256 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          swift_beginAccess();
          sub_21FA48F1C();
          sub_21FC5ADC4();
          swift_endAccess();
          v257 = (unint64_t *)&jpt_21FA3BF94;
          goto LABEL_7;
        case 2:
          swift_beginAccess();
          type metadata accessor for PBDateRange(0);
          sub_21FA2A08C(&qword_25553EAE0, type metadata accessor for PBDateRange, (uint64_t)&protocol conformance descriptor for PBDateRange);
          sub_21FC5AE60();
          swift_endAccess();
          v262 = v731;
          goto LABEL_7;
        case 3:
          v263 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v698 + 56);
          v264 = v680;
          v263(v723, 1, 1, v680);
          v265 = v657;
          sub_21FA44968(v258, v657, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t *))(v732 + 48))(v265, 1, v733) == 1)
          {
            sub_21FA2D1F8(v265, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            v262 = v731;
            v266 = (uint64_t)v723;
          }
          else
          {
            v337 = (uint64_t)v577;
            sub_21FA2D23C(v265, (uint64_t)v577, type metadata accessor for PBTypedData.OneOf_Raw);
            sub_21FC5AD94();
            v338 = (uint64_t)v633;
            v339 = v337;
            v340 = (uint64_t)v574;
            sub_21FA2D23C(v339, (uint64_t)v574, type metadata accessor for PBTypedData.OneOf_Raw);
            EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            v266 = (uint64_t)v723;
            if (EnumCaseMultiPayload)
            {
              sub_21FA326EC(v340, type metadata accessor for PBTypedData.OneOf_Raw);
              v262 = v731;
              v264 = v680;
            }
            else
            {
              sub_21FA2D1F8((uint64_t)v723, &qword_25553EC00, type metadata accessor for PBTimeSeries);
              sub_21FA2D23C(v340, v338, type metadata accessor for PBTimeSeries);
              sub_21FA2D23C(v338, v266, type metadata accessor for PBTimeSeries);
              v264 = v680;
              v263((char *)v266, 0, 1, v680);
              v262 = v731;
            }
          }
          sub_21FA2A08C(&qword_25553EB78, type metadata accessor for PBTimeSeries, (uint64_t)&protocol conformance descriptor for PBTimeSeries);
          sub_21FC5AE60();
          v342 = v639;
          sub_21FA2D280(v266, v639, &qword_25553EC00, type metadata accessor for PBTimeSeries);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v698 + 48))(v342, 1, v264) != 1)
          {
            v436 = v592;
            sub_21FA2D23C(v342, v592, type metadata accessor for PBTimeSeries);
            v437 = v436;
            v438 = v725;
            sub_21FA2D23C(v437, v725, type metadata accessor for PBTimeSeries);
            v439 = v257;
            v440 = v733;
            swift_storeEnumTagMultiPayload();
            v441 = v440;
            v257 = v439;
            (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t *))(v732 + 56))(v438, 0, 1, v441);
            v442 = v438;
            v443 = v726;
            sub_21FA2D280(v442, v726, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            v258 = v728;
            swift_beginAccess();
            v259 = v727;
            sub_21FA2D2D8(v443, v258, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_endAccess();
            goto LABEL_166;
          }
          sub_21FA2D1F8(v342, &qword_25553EC00, type metadata accessor for PBTimeSeries);
          v260 = v730;
          v258 = v728;
          v261 = v729;
          goto LABEL_7;
        case 4:
          v267 = (uint64_t)v259;
          v268 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v699 + 56);
          v269 = (uint64_t)v674;
          v270 = v681;
          v268(v674, 1, 1, v681);
          v271 = v658;
          sub_21FA44968(v258, v658, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t *))(v732 + 48))(v271, 1, v733) == 1)
          {
            sub_21FA2D1F8(v271, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            v262 = v731;
          }
          else
          {
            v343 = (uint64_t)v578;
            sub_21FA2D23C(v271, (uint64_t)v578, type metadata accessor for PBTypedData.OneOf_Raw);
            sub_21FC5AD94();
            v344 = (uint64_t)v634;
            v345 = v343;
            v346 = (uint64_t)v575;
            sub_21FA2D23C(v345, (uint64_t)v575, type metadata accessor for PBTypedData.OneOf_Raw);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              sub_21FA2D1F8(v269, &qword_25553EBF8, type metadata accessor for PBCategorySeries);
              sub_21FA2D23C(v346, v344, type metadata accessor for PBCategorySeries);
              sub_21FA2D23C(v344, v269, type metadata accessor for PBCategorySeries);
              v270 = v681;
              v268((char *)v269, 0, 1, v681);
              v262 = v731;
            }
            else
            {
              sub_21FA326EC(v346, type metadata accessor for PBTypedData.OneOf_Raw);
              v262 = v731;
              v270 = v681;
            }
            v258 = v728;
          }
          sub_21FA2A08C(&qword_25553EB70, type metadata accessor for PBCategorySeries, (uint64_t)&protocol conformance descriptor for PBCategorySeries);
          sub_21FC5AE60();
          v444 = v269;
          v445 = v640;
          v257 = &qword_25553EBF8;
          sub_21FA2D280(v444, v640, &qword_25553EBF8, type metadata accessor for PBCategorySeries);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v699 + 48))(v445, 1, v270) == 1)
          {
            sub_21FA2D1F8(v445, &qword_25553EBF8, type metadata accessor for PBCategorySeries);
            goto LABEL_5;
          }
          v446 = v445;
          v447 = v593;
          sub_21FA2D23C(v446, v593, type metadata accessor for PBCategorySeries);
          v448 = v725;
          sub_21FA2D23C(v447, v725, type metadata accessor for PBCategorySeries);
          v257 = v733;
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t *))(v732 + 56))(v448, 0, 1, v257);
          v449 = v448;
          v450 = v726;
          sub_21FA2D280(v449, v726, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          swift_beginAccess();
          v451 = v450;
          v452 = v258;
          goto LABEL_110;
        case 5:
          v272 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v700 + 56);
          v273 = (uint64_t)v675;
          v274 = v682;
          v272(v675, 1, 1, v682);
          v275 = v659;
          sub_21FA44968(v258, v659, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t *))(v732 + 48))(v275, 1, v733) == 1)
          {
            sub_21FA2D1F8(v275, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            v262 = v731;
          }
          else
          {
            v347 = (uint64_t)v579;
            sub_21FA2D23C(v275, (uint64_t)v579, type metadata accessor for PBTypedData.OneOf_Raw);
            sub_21FC5AD94();
            v348 = (uint64_t)v635;
            v349 = v347;
            v350 = (uint64_t)v576;
            sub_21FA2D23C(v349, (uint64_t)v576, type metadata accessor for PBTypedData.OneOf_Raw);
            if (swift_getEnumCaseMultiPayload() == 2)
            {
              v257 = &qword_25553EBF0;
              sub_21FA2D1F8(v273, &qword_25553EBF0, type metadata accessor for PBWorkout);
              sub_21FA2D23C(v350, v348, type metadata accessor for PBWorkout);
              sub_21FA2D23C(v348, v273, type metadata accessor for PBWorkout);
              v274 = v682;
              v272((char *)v273, 0, 1, v682);
              v262 = v731;
              v258 = v728;
              goto LABEL_93;
            }
            sub_21FA326EC(v350, type metadata accessor for PBTypedData.OneOf_Raw);
            v262 = v731;
            v274 = v682;
            v258 = v728;
          }
          v257 = &qword_25553EBF0;
LABEL_93:
          sub_21FA2A08C(&qword_25553EB68, type metadata accessor for PBWorkout, (uint64_t)&protocol conformance descriptor for PBWorkout);
          sub_21FC5AE60();
          v453 = v273;
          v454 = v641;
          sub_21FA2D280(v453, v641, &qword_25553EBF0, type metadata accessor for PBWorkout);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v700 + 48))(v454, 1, v274) == 1)
          {
            sub_21FA2D1F8(v454, &qword_25553EBF0, type metadata accessor for PBWorkout);
          }
          else
          {
            v455 = v454;
            v456 = v594;
            sub_21FA2D23C(v455, v594, type metadata accessor for PBWorkout);
            v457 = v456;
            v458 = v725;
            sub_21FA2D23C(v457, v725, type metadata accessor for PBWorkout);
            v257 = v733;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t *))(v732 + 56))(v458, 0, 1, v257);
            v459 = v458;
            v460 = v726;
            sub_21FA2D280(v459, v726, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_beginAccess();
            sub_21FA2D2D8(v460, v258, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_endAccess();
          }
          goto LABEL_157;
        case 6:
          v276 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v701 + 56);
          v277 = v687;
          v278 = v258;
          v279 = v683;
          v276(v687, 1, 1, v683);
          v280 = v278;
          v281 = v660;
          sub_21FA44968(v280, v660, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t *))(v732 + 48))(v281, 1, v733) == 1)
          {
            sub_21FA2D1F8(v281, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          }
          else
          {
            v351 = (uint64_t)v580;
            sub_21FA2D23C(v281, (uint64_t)v580, type metadata accessor for PBTypedData.OneOf_Raw);
            sub_21FC5AD94();
            v352 = v351;
            v353 = v606;
            sub_21FA2D23C(v352, v606, type metadata accessor for PBTypedData.OneOf_Raw);
            v354 = swift_getEnumCaseMultiPayload();
            v277 = v687;
            if (v354 == 3)
            {
              v355 = type metadata accessor for PBCharacteristics;
              sub_21FA2D1F8(v687, &qword_25553EBE8, type metadata accessor for PBCharacteristics);
              v356 = v353;
              v357 = v581;
              sub_21FA2D23C(v356, v581, type metadata accessor for PBCharacteristics);
              sub_21FA2D23C(v357, v277, type metadata accessor for PBCharacteristics);
              v279 = v683;
              v276(v277, 0, 1, v683);
              goto LABEL_98;
            }
            sub_21FA326EC(v353, type metadata accessor for PBTypedData.OneOf_Raw);
            v279 = v683;
          }
          v355 = type metadata accessor for PBCharacteristics;
LABEL_98:
          sub_21FA2A08C(&qword_25553EB60, type metadata accessor for PBCharacteristics, (uint64_t)&protocol conformance descriptor for PBCharacteristics);
          sub_21FC5AE60();
          v262 = v731;
          v267 = (uint64_t)v259;
          v461 = v642;
          v257 = &qword_25553EBE8;
          sub_21FA2D280(v277, v642, &qword_25553EBE8, type metadata accessor for PBCharacteristics);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v701 + 48))(v461, 1, v279) == 1)
            goto LABEL_4;
          v462 = v595;
          sub_21FA2D23C(v461, v595, type metadata accessor for PBCharacteristics);
          v463 = v462;
          v464 = v725;
          sub_21FA2D23C(v463, v725, type metadata accessor for PBCharacteristics);
          v465 = v733;
          goto LABEL_109;
        case 7:
          v282 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v702 + 56);
          v283 = (uint64_t)v676;
          v284 = v684;
          v282(v676, 1, 1, v684);
          v285 = v258;
          v286 = v661;
          sub_21FA44968(v285, v661, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t *))(v732 + 48))(v286, 1, v733) == 1)
          {
            sub_21FA2D1F8(v286, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          }
          else
          {
            v358 = v286;
            v359 = v620;
            sub_21FA2D23C(v358, v620, type metadata accessor for PBTypedData.OneOf_Raw);
            sub_21FC5AD94();
            v360 = (uint64_t)v636;
            v361 = v359;
            v362 = v607;
            sub_21FA2D23C(v361, v607, type metadata accessor for PBTypedData.OneOf_Raw);
            if (swift_getEnumCaseMultiPayload() == 4)
            {
              sub_21FA2D1F8(v283, &qword_25553EBE0, type metadata accessor for PBAllClinicalRecords);
              sub_21FA2D23C(v362, v360, type metadata accessor for PBAllClinicalRecords);
              sub_21FA2D23C(v360, v283, type metadata accessor for PBAllClinicalRecords);
              v284 = v684;
              v282((char *)v283, 0, 1, v684);
            }
            else
            {
              sub_21FA326EC(v362, type metadata accessor for PBTypedData.OneOf_Raw);
              v284 = v684;
            }
          }
          sub_21FA2A08C(&qword_25553EB58, type metadata accessor for PBAllClinicalRecords, (uint64_t)&protocol conformance descriptor for PBAllClinicalRecords);
          sub_21FC5AE60();
          v262 = v731;
          v466 = v283;
          v467 = v643;
          sub_21FA2D280(v466, v643, &qword_25553EBE0, type metadata accessor for PBAllClinicalRecords);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v702 + 48))(v467, 1, v284) == 1)
          {
            sub_21FA2D1F8(v467, &qword_25553EBE0, type metadata accessor for PBAllClinicalRecords);
            v258 = v728;
          }
          else
          {
            v468 = v467;
            v469 = v596;
            sub_21FA2D23C(v468, v596, type metadata accessor for PBAllClinicalRecords);
            v470 = v725;
            sub_21FA2D23C(v469, v725, type metadata accessor for PBAllClinicalRecords);
            v471 = v733;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t *))(v732 + 56))(v470, 0, 1, v471);
            v472 = v470;
            v473 = v726;
            sub_21FA2D280(v472, v726, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            v474 = v728;
            swift_beginAccess();
            v475 = v473;
            v258 = v474;
            sub_21FA2D2D8(v475, v474, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_endAccess();
          }
          v260 = v730;
          v259 = v727;
          goto LABEL_7;
        case 13:
          v287 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v703 + 56);
          v288 = v688;
          v289 = v258;
          v290 = v685;
          v287(v688, 1, 1, v685);
          v291 = v289;
          v292 = v662;
          sub_21FA44968(v291, v662, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t *))(v732 + 48))(v292, 1, v733) == 1)
          {
            sub_21FA2D1F8(v292, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          }
          else
          {
            v363 = v621;
            sub_21FA2D23C(v292, v621, type metadata accessor for PBTypedData.OneOf_Raw);
            sub_21FC5AD94();
            v364 = v363;
            v365 = v608;
            sub_21FA2D23C(v364, v608, type metadata accessor for PBTypedData.OneOf_Raw);
            v366 = swift_getEnumCaseMultiPayload();
            v288 = v688;
            if (v366 == 5)
            {
              v355 = type metadata accessor for PBECGs;
              sub_21FA2D1F8(v688, &qword_25553EBD8, type metadata accessor for PBECGs);
              v367 = v365;
              v368 = v582;
              sub_21FA2D23C(v367, v582, type metadata accessor for PBECGs);
              sub_21FA2D23C(v368, v288, type metadata accessor for PBECGs);
              v290 = v685;
              v287(v288, 0, 1, v685);
              goto LABEL_107;
            }
            sub_21FA326EC(v365, type metadata accessor for PBTypedData.OneOf_Raw);
            v290 = v685;
          }
          v355 = type metadata accessor for PBECGs;
LABEL_107:
          sub_21FA2A08C(&qword_25553EB50, type metadata accessor for PBECGs, (uint64_t)&protocol conformance descriptor for PBECGs);
          sub_21FC5AE60();
          v262 = v731;
          v267 = (uint64_t)v259;
          v461 = v644;
          v257 = &qword_25553EBD8;
          sub_21FA2D280(v288, v644, &qword_25553EBD8, type metadata accessor for PBECGs);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v703 + 48))(v461, 1, v290) == 1)
          {
LABEL_4:
            sub_21FA2D1F8(v461, v257, v355);
            v258 = v728;
          }
          else
          {
            v476 = v597;
            sub_21FA2D23C(v461, v597, type metadata accessor for PBECGs);
            v477 = v476;
            v464 = v725;
            sub_21FA2D23C(v477, v725, type metadata accessor for PBECGs);
            v465 = v733;
LABEL_109:
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t *))(v732 + 56))(v464, 0, 1, v465);
            v478 = v464;
            v479 = v726;
            v257 = (unint64_t *)type metadata accessor for PBTypedData.OneOf_Raw;
            sub_21FA2D280(v478, v726, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            v480 = v728;
            swift_beginAccess();
            v451 = v479;
            v258 = v480;
            v452 = v480;
LABEL_110:
            sub_21FA2D2D8(v451, v452, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_endAccess();
          }
LABEL_5:
          v259 = (char *)v267;
          v261 = v729;
          goto LABEL_6;
        case 14:
          v293 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v704 + 56);
          v294 = (uint64_t)v677;
          v295 = v686;
          v293(v677, 1, 1, v686);
          v296 = v258;
          v297 = v663;
          sub_21FA44968(v296, v663, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t *))(v732 + 48))(v297, 1, v733) == 1)
          {
            sub_21FA2D1F8(v297, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          }
          else
          {
            v369 = v297;
            v370 = v622;
            sub_21FA2D23C(v369, v622, type metadata accessor for PBTypedData.OneOf_Raw);
            sub_21FC5AD94();
            v371 = (uint64_t)v637;
            v372 = v370;
            v373 = v609;
            sub_21FA2D23C(v372, v609, type metadata accessor for PBTypedData.OneOf_Raw);
            if (swift_getEnumCaseMultiPayload() == 6)
            {
              sub_21FA2D1F8(v294, &qword_25553EBD0, type metadata accessor for PBCycleTracking);
              sub_21FA2D23C(v373, v371, type metadata accessor for PBCycleTracking);
              sub_21FA2D23C(v371, v294, type metadata accessor for PBCycleTracking);
              v295 = v686;
              v293((char *)v294, 0, 1, v686);
            }
            else
            {
              sub_21FA326EC(v373, type metadata accessor for PBTypedData.OneOf_Raw);
              v295 = v686;
            }
          }
          sub_21FA2A08C(&qword_25553EB48, type metadata accessor for PBCycleTracking, (uint64_t)&protocol conformance descriptor for PBCycleTracking);
          sub_21FC5AE60();
          v262 = v731;
          v481 = v294;
          v482 = v645;
          sub_21FA2D280(v481, v645, &qword_25553EBD0, type metadata accessor for PBCycleTracking);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v704 + 48))(v482, 1, v295) != 1)
          {
            v483 = v482;
            v484 = v598;
            sub_21FA2D23C(v483, v598, type metadata accessor for PBCycleTracking);
            v485 = v725;
            sub_21FA2D23C(v484, v725, type metadata accessor for PBCycleTracking);
            v486 = v733;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t *))(v732 + 56))(v485, 0, 1, v486);
            v487 = v485;
            v488 = v726;
            sub_21FA2D280(v487, v726, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            v489 = v728;
            swift_beginAccess();
            v490 = v488;
            v258 = v489;
            sub_21FA2D2D8(v490, v489, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_endAccess();
            v257 = (unint64_t *)&jpt_21FA3BF94;
            goto LABEL_166;
          }
          sub_21FA2D1F8(v482, &qword_25553EBD0, type metadata accessor for PBCycleTracking);
          v258 = v728;
LABEL_121:
          v257 = (unint64_t *)&jpt_21FA3BF94;
          v261 = v729;
          v260 = v730;
          goto LABEL_7;
        case 15:
          v298 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v262 + 56);
          v299 = v691;
          v298(v691, 1, 1, v713);
          v300 = v664;
          sub_21FA44968(v258, v664, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t *))(v732 + 48))(v300, 1, v733) == 1)
          {
            v301 = (uint64_t)v650;
            sub_21FA2D1F8(v300, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          }
          else
          {
            v374 = v623;
            sub_21FA2D23C(v300, v623, type metadata accessor for PBTypedData.OneOf_Raw);
            sub_21FC5AD94();
            v301 = (uint64_t)v650;
            v375 = v374;
            v376 = v610;
            sub_21FA2D23C(v375, v610, type metadata accessor for PBTypedData.OneOf_Raw);
            v377 = swift_getEnumCaseMultiPayload();
            v299 = v691;
            if (v377 == 7)
            {
              sub_21FA2D1F8(v691, &qword_25553EBC8, type metadata accessor for PBECGMeasurement);
              v378 = v583;
              sub_21FA2D23C(v376, v583, type metadata accessor for PBECGMeasurement);
              v379 = v378;
              v299 = v691;
              sub_21FA2D23C(v379, v691, type metadata accessor for PBECGMeasurement);
              v298(v299, 0, 1, v713);
            }
            else
            {
              sub_21FA326EC(v376, type metadata accessor for PBTypedData.OneOf_Raw);
            }
            v258 = v728;
          }
          sub_21FA2A08C(&qword_25553EB40, type metadata accessor for PBECGMeasurement, (uint64_t)&protocol conformance descriptor for PBECGMeasurement);
          v491 = v713;
          sub_21FC5AE60();
          sub_21FA2D280(v299, v301, &qword_25553EBC8, type metadata accessor for PBECGMeasurement);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v731 + 48))(v301, 1, v491) == 1)
          {
            sub_21FA2D1F8(v301, &qword_25553EBC8, type metadata accessor for PBECGMeasurement);
          }
          else
          {
            v492 = v599;
            sub_21FA2D23C(v301, v599, type metadata accessor for PBECGMeasurement);
            v493 = v725;
            sub_21FA2D23C(v492, v725, type metadata accessor for PBECGMeasurement);
            v494 = v733;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t *))(v732 + 56))(v493, 0, 1, v494);
            v495 = v493;
            v496 = v726;
            sub_21FA2D280(v495, v726, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_beginAccess();
            sub_21FA2D2D8(v496, v258, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_endAccess();
          }
          v262 = v731;
          goto LABEL_121;
        case 16:
          v302 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v705 + 56);
          v302(v722, 1, 1, v714);
          v303 = v665;
          sub_21FA44968(v258, v665, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t *))(v732 + 48))(v303, 1, v733) == 1)
          {
            sub_21FA2D1F8(v303, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          }
          else
          {
            v380 = v624;
            sub_21FA2D23C(v303, v624, type metadata accessor for PBTypedData.OneOf_Raw);
            sub_21FC5AD94();
            v381 = v380;
            v382 = v611;
            sub_21FA2D23C(v381, v611, type metadata accessor for PBTypedData.OneOf_Raw);
            if (swift_getEnumCaseMultiPayload() == 8)
            {
              v383 = v722;
              sub_21FA2D1F8(v722, &qword_25553EBC0, type metadata accessor for PBActivitySummarySeries);
              v384 = v382;
              v385 = v584;
              sub_21FA2D23C(v384, v584, type metadata accessor for PBActivitySummarySeries);
              sub_21FA2D23C(v385, v383, type metadata accessor for PBActivitySummarySeries);
              v302(v383, 0, 1, v714);
            }
            else
            {
              sub_21FA326EC(v382, type metadata accessor for PBTypedData.OneOf_Raw);
            }
            v258 = v728;
          }
          sub_21FA2A08C(&qword_25553EB38, type metadata accessor for PBActivitySummarySeries, (uint64_t)&protocol conformance descriptor for PBActivitySummarySeries);
          v497 = v722;
          v498 = v714;
          sub_21FC5AE60();
          v267 = (uint64_t)v259;
          v499 = v497;
          v500 = v646;
          v257 = &qword_25553EBC0;
          sub_21FA2D280(v499, v646, &qword_25553EBC0, type metadata accessor for PBActivitySummarySeries);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v705 + 48))(v500, 1, v498) == 1)
          {
            sub_21FA2D1F8(v500, &qword_25553EBC0, type metadata accessor for PBActivitySummarySeries);
          }
          else
          {
            v501 = v600;
            sub_21FA2D23C(v500, v600, type metadata accessor for PBActivitySummarySeries);
            v502 = v501;
            v503 = v725;
            sub_21FA2D23C(v502, v725, type metadata accessor for PBActivitySummarySeries);
            v504 = v733;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t *))(v732 + 56))(v503, 0, 1, v504);
            v505 = v503;
            v506 = v726;
            sub_21FA2D280(v505, v726, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_beginAccess();
            sub_21FA2D2D8(v506, v258, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_endAccess();
          }
          v262 = v731;
          goto LABEL_5;
        case 17:
          v304 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v260 + 56);
          v305 = v692;
          v304(v692, 1, 1, v715);
          v306 = v258;
          v307 = v666;
          sub_21FA44968(v306, v666, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          v308 = v260;
          if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t *))(v732 + 48))(v307, 1, v733) == 1)
          {
            v309 = (uint64_t)v678;
            sub_21FA2D1F8(v307, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          }
          else
          {
            v386 = v304;
            v387 = v307;
            v388 = v625;
            sub_21FA2D23C(v387, v625, type metadata accessor for PBTypedData.OneOf_Raw);
            sub_21FC5AD94();
            v309 = (uint64_t)v678;
            v389 = v388;
            v390 = v612;
            sub_21FA2D23C(v389, v612, type metadata accessor for PBTypedData.OneOf_Raw);
            v391 = swift_getEnumCaseMultiPayload();
            v305 = v692;
            if (v391 == 9)
            {
              sub_21FA2D1F8(v692, &qword_25553EBB8, type metadata accessor for PBPatientMeta);
              v392 = v585;
              sub_21FA2D23C(v390, v585, type metadata accessor for PBPatientMeta);
              v393 = v392;
              v305 = v692;
              sub_21FA2D23C(v393, v692, type metadata accessor for PBPatientMeta);
              v386(v305, 0, 1, v715);
              v394 = (uint64_t)v651;
              goto LABEL_129;
            }
            sub_21FA326EC(v390, type metadata accessor for PBTypedData.OneOf_Raw);
          }
          v394 = (uint64_t)v651;
LABEL_129:
          sub_21FA2A08C(&qword_25553EB30, type metadata accessor for PBPatientMeta, (uint64_t)&protocol conformance descriptor for PBPatientMeta);
          v507 = v715;
          sub_21FC5AE60();
          sub_21FA2D280(v305, v309, &qword_25553EBB8, type metadata accessor for PBPatientMeta);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v308 + 48))(v309, 1, v507) == 1)
          {
            sub_21FA2D1F8(v309, &qword_25553EBB8, type metadata accessor for PBPatientMeta);
            v260 = v308;
            v262 = v731;
            v258 = v728;
          }
          else
          {
            sub_21FA2D23C(v309, v394, type metadata accessor for PBPatientMeta);
            v508 = v725;
            sub_21FA2D23C(v394, v725, type metadata accessor for PBPatientMeta);
            v509 = v733;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t *))(v732 + 56))(v508, 0, 1, v509);
            v510 = v508;
            v511 = v726;
            sub_21FA2D280(v510, v726, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            v512 = v728;
            swift_beginAccess();
            v513 = v511;
            v258 = v512;
            sub_21FA2D2D8(v513, v512, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_endAccess();
            v260 = v308;
            v262 = v731;
          }
          v257 = (unint64_t *)&jpt_21FA3BF94;
          goto LABEL_139;
        case 18:
          v310 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v706 + 56);
          v311 = v693;
          v310(v693, 1, 1, v716);
          v312 = v667;
          sub_21FA44968(v258, v667, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t *))(v732 + 48))(v312, 1, v733) == 1)
          {
            sub_21FA2D1F8(v312, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            v313 = type metadata accessor for PBSleepSummary;
            v314 = &qword_25553EBB0;
          }
          else
          {
            v395 = v626;
            sub_21FA2D23C(v312, v626, type metadata accessor for PBTypedData.OneOf_Raw);
            sub_21FC5AD94();
            v314 = &qword_25553EBB0;
            v396 = v395;
            v397 = v613;
            sub_21FA2D23C(v396, v613, type metadata accessor for PBTypedData.OneOf_Raw);
            v398 = swift_getEnumCaseMultiPayload();
            v311 = v693;
            if (v398 == 10)
            {
              v313 = type metadata accessor for PBSleepSummary;
              sub_21FA2D1F8(v693, &qword_25553EBB0, type metadata accessor for PBSleepSummary);
              v399 = v586;
              sub_21FA2D23C(v397, v586, type metadata accessor for PBSleepSummary);
              v400 = v399;
              v311 = v693;
              sub_21FA2D23C(v400, v693, type metadata accessor for PBSleepSummary);
              v310(v311, 0, 1, v716);
            }
            else
            {
              sub_21FA326EC(v397, type metadata accessor for PBTypedData.OneOf_Raw);
              v313 = type metadata accessor for PBSleepSummary;
            }
          }
          sub_21FA2A08C(&qword_25553EB28, type metadata accessor for PBSleepSummary, (uint64_t)&protocol conformance descriptor for PBSleepSummary);
          v514 = v716;
          sub_21FC5AE60();
          v258 = v728;
          v257 = v647;
          sub_21FA2D280(v311, (uint64_t)v647, &qword_25553EBB0, type metadata accessor for PBSleepSummary);
          if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v706 + 48))(v257, 1, v514) == 1)
            goto LABEL_153;
          v515 = v601;
          sub_21FA2D23C((uint64_t)v257, v601, type metadata accessor for PBSleepSummary);
          v516 = v515;
          v517 = v725;
          sub_21FA2D23C(v516, v725, type metadata accessor for PBSleepSummary);
          v518 = v733;
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t *))(v732 + 56))(v517, 0, 1, v518);
          v519 = v517;
          v520 = v726;
          v257 = (unint64_t *)type metadata accessor for PBTypedData.OneOf_Raw;
          sub_21FA2D280(v519, v726, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          swift_beginAccess();
          v521 = v520;
          v522 = v258;
          goto LABEL_155;
        case 19:
          v315 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v707 + 56);
          v316 = v694;
          v315(v694, 1, 1, v717);
          v317 = v668;
          sub_21FA44968(v258, v668, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t *))(v732 + 48))(v317, 1, v733) == 1)
          {
            sub_21FA2D1F8(v317, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          }
          else
          {
            v401 = v627;
            sub_21FA2D23C(v317, v627, type metadata accessor for PBTypedData.OneOf_Raw);
            sub_21FC5AD94();
            v402 = v401;
            v403 = v614;
            sub_21FA2D23C(v402, v614, type metadata accessor for PBTypedData.OneOf_Raw);
            v404 = swift_getEnumCaseMultiPayload();
            v316 = v694;
            if (v404 == 11)
            {
              sub_21FA2D1F8(v694, &qword_25553EBA8, type metadata accessor for PBSleepSeries);
              v405 = v587;
              sub_21FA2D23C(v403, v587, type metadata accessor for PBSleepSeries);
              v406 = v405;
              v316 = v694;
              sub_21FA2D23C(v406, v694, type metadata accessor for PBSleepSeries);
              v315(v316, 0, 1, v717);
            }
            else
            {
              sub_21FA326EC(v403, type metadata accessor for PBTypedData.OneOf_Raw);
            }
            v258 = v728;
          }
          sub_21FA2A08C(&qword_25553EB20, type metadata accessor for PBSleepSeries, (uint64_t)&protocol conformance descriptor for PBSleepSeries);
          v523 = v717;
          sub_21FC5AE60();
          v524 = v648;
          sub_21FA2D280(v316, v648, &qword_25553EBA8, type metadata accessor for PBSleepSeries);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v707 + 48))(v524, 1, v523) != 1)
          {
            v525 = v602;
            sub_21FA2D23C(v524, v602, type metadata accessor for PBSleepSeries);
            v526 = v525;
            v527 = v725;
            sub_21FA2D23C(v526, v725, type metadata accessor for PBSleepSeries);
            v528 = v257;
            v529 = v733;
            swift_storeEnumTagMultiPayload();
            v530 = v529;
            v257 = v528;
            v531 = v727;
            (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t *))(v732 + 56))(v527, 0, 1, v530);
            v532 = v527;
            v533 = v726;
            sub_21FA2D280(v532, v726, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_beginAccess();
            v259 = v531;
            sub_21FA2D2D8(v533, v258, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_endAccess();
            v262 = v731;
            goto LABEL_166;
          }
          sub_21FA2D1F8(v524, &qword_25553EBA8, type metadata accessor for PBSleepSeries);
          v260 = v730;
          v262 = v731;
LABEL_139:
          v259 = v727;
          v261 = v729;
          goto LABEL_7;
        case 20:
          v318 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v708 + 56);
          v319 = v695;
          v318(v695, 1, 1, v718);
          v320 = v669;
          sub_21FA44968(v258, v669, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t *))(v732 + 48))(v320, 1, v733) == 1)
          {
            sub_21FA2D1F8(v320, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          }
          else
          {
            v407 = v628;
            sub_21FA2D23C(v320, v628, type metadata accessor for PBTypedData.OneOf_Raw);
            sub_21FC5AD94();
            v408 = v407;
            v409 = v615;
            sub_21FA2D23C(v408, v615, type metadata accessor for PBTypedData.OneOf_Raw);
            v410 = swift_getEnumCaseMultiPayload();
            v319 = v695;
            if (v410 == 12)
            {
              sub_21FA2D1F8(v695, &qword_25553EBA0, type metadata accessor for PBHistogramSeries);
              v411 = v588;
              sub_21FA2D23C(v409, v588, type metadata accessor for PBHistogramSeries);
              v412 = v411;
              v319 = v695;
              sub_21FA2D23C(v412, v695, type metadata accessor for PBHistogramSeries);
              v318(v319, 0, 1, v718);
            }
            else
            {
              sub_21FA326EC(v409, type metadata accessor for PBTypedData.OneOf_Raw);
            }
            v258 = v728;
          }
          sub_21FA2A08C(&qword_25553EB18, type metadata accessor for PBHistogramSeries, (uint64_t)&protocol conformance descriptor for PBHistogramSeries);
          v534 = v718;
          sub_21FC5AE60();
          v535 = v649;
          sub_21FA2D280(v319, v649, &qword_25553EBA0, type metadata accessor for PBHistogramSeries);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v708 + 48))(v535, 1, v534) == 1)
          {
            sub_21FA2D1F8(v535, &qword_25553EBA0, type metadata accessor for PBHistogramSeries);
          }
          else
          {
            v536 = v603;
            sub_21FA2D23C(v535, v603, type metadata accessor for PBHistogramSeries);
            v537 = v536;
            v538 = v725;
            sub_21FA2D23C(v537, v725, type metadata accessor for PBHistogramSeries);
            v539 = v733;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t *))(v732 + 56))(v538, 0, 1, v539);
            v540 = v538;
            v541 = v726;
            sub_21FA2D280(v540, v726, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_beginAccess();
            sub_21FA2D2D8(v541, v258, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_endAccess();
          }
          v262 = v731;
          v257 = (unint64_t *)&jpt_21FA3BF94;
          goto LABEL_165;
        case 21:
          v321 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v709 + 56);
          v322 = (uint64_t)v679;
          v321(v679, 1, 1, v719);
          v323 = v670;
          sub_21FA44968(v258, v670, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t *))(v732 + 48))(v323, 1, v733) == 1)
          {
            v324 = (uint64_t)v652;
            sub_21FA2D1F8(v323, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            v325 = (uint64_t)v653;
          }
          else
          {
            v413 = v629;
            sub_21FA2D23C(v323, v629, type metadata accessor for PBTypedData.OneOf_Raw);
            sub_21FC5AD94();
            v414 = (uint64_t)v638;
            v324 = (uint64_t)v652;
            v415 = v413;
            v416 = v616;
            sub_21FA2D23C(v415, v616, type metadata accessor for PBTypedData.OneOf_Raw);
            if (swift_getEnumCaseMultiPayload() == 13)
            {
              sub_21FA2D1F8(v322, &qword_25553EB98, type metadata accessor for PBMedicationTrackings);
              sub_21FA2D23C(v416, v414, type metadata accessor for PBMedicationTrackings);
              sub_21FA2D23C(v414, v322, type metadata accessor for PBMedicationTrackings);
              v321((char *)v322, 0, 1, v719);
            }
            else
            {
              sub_21FA326EC(v416, type metadata accessor for PBTypedData.OneOf_Raw);
            }
            v325 = (uint64_t)v653;
            v258 = v728;
          }
          v427 = type metadata accessor for PBMedicationTrackings;
          sub_21FA2A08C(&qword_25553EB10, type metadata accessor for PBMedicationTrackings, (uint64_t)&protocol conformance descriptor for PBMedicationTrackings);
          v542 = v322;
          v543 = v719;
          sub_21FC5AE60();
          v544 = v542;
          v545 = &qword_25553EB98;
          sub_21FA2D280(v544, v324, &qword_25553EB98, type metadata accessor for PBMedicationTrackings);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v709 + 48))(v324, 1, v543) == 1)
            goto LABEL_161;
          sub_21FA2D23C(v324, v325, type metadata accessor for PBMedicationTrackings);
          v546 = v725;
          sub_21FA2D23C(v325, v725, type metadata accessor for PBMedicationTrackings);
          v547 = v733;
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t *))(v732 + 56))(v546, 0, 1, v547);
          v548 = v546;
          v549 = v726;
          sub_21FA2D280(v548, v726, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          swift_beginAccess();
          v550 = v549;
          v551 = v258;
          goto LABEL_163;
        case 22:
          v326 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v696 + 56);
          v327 = v689;
          v326(v689, 1, 1, v720);
          v328 = v671;
          sub_21FA44968(v258, v671, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t *))(v732 + 48))(v328, 1, v733) == 1)
          {
            v329 = v654;
            sub_21FA2D1F8(v328, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          }
          else
          {
            v417 = v630;
            sub_21FA2D23C(v328, v630, type metadata accessor for PBTypedData.OneOf_Raw);
            sub_21FC5AD94();
            v418 = v417;
            v419 = v617;
            sub_21FA2D23C(v418, v617, type metadata accessor for PBTypedData.OneOf_Raw);
            v420 = swift_getEnumCaseMultiPayload();
            v327 = v689;
            if (v420 == 14)
            {
              v329 = v654;
              v313 = type metadata accessor for PBMedicationTrackingDoseEvents;
              sub_21FA2D1F8(v689, &qword_25553EB90, type metadata accessor for PBMedicationTrackingDoseEvents);
              v421 = v419;
              v422 = v589;
              sub_21FA2D23C(v421, v589, type metadata accessor for PBMedicationTrackingDoseEvents);
              sub_21FA2D23C(v422, v327, type metadata accessor for PBMedicationTrackingDoseEvents);
              v326(v327, 0, 1, v720);
              v258 = v728;
              goto LABEL_152;
            }
            v329 = v654;
            sub_21FA326EC(v419, type metadata accessor for PBTypedData.OneOf_Raw);
            v258 = v728;
          }
          v313 = type metadata accessor for PBMedicationTrackingDoseEvents;
LABEL_152:
          sub_21FA2A08C(&qword_25553EB08, type metadata accessor for PBMedicationTrackingDoseEvents, (uint64_t)&protocol conformance descriptor for PBMedicationTrackingDoseEvents);
          v552 = v720;
          sub_21FC5AE60();
          v257 = v329;
          v553 = (uint64_t)v329;
          v314 = &qword_25553EB90;
          sub_21FA2D280(v327, v553, &qword_25553EB90, type metadata accessor for PBMedicationTrackingDoseEvents);
          if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v696 + 48))(v257, 1, v552) == 1)
          {
LABEL_153:
            sub_21FA2D1F8((uint64_t)v257, v314, v313);
          }
          else
          {
            v554 = v604;
            sub_21FA2D23C((uint64_t)v257, v604, type metadata accessor for PBMedicationTrackingDoseEvents);
            v555 = v554;
            v556 = v725;
            sub_21FA2D23C(v555, v725, type metadata accessor for PBMedicationTrackingDoseEvents);
            v557 = v733;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t *))(v732 + 56))(v556, 0, 1, v557);
            v558 = v556;
            v559 = v726;
            sub_21FA2D280(v558, v726, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_beginAccess();
            v521 = v559;
            v522 = v258;
LABEL_155:
            sub_21FA2D2D8(v521, v522, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_endAccess();
          }
          v262 = v731;
LABEL_157:
          v259 = v727;
LABEL_6:
          v260 = v730;
          goto LABEL_7;
        case 23:
          v330 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v710 + 56);
          v331 = v690;
          v330(v690, 1, 1, v261);
          v332 = v672;
          sub_21FA44968(v258, v672, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t *))(v732 + 48))(v332, 1, v733) == 1)
          {
            v333 = v655;
            sub_21FA2D1F8(v332, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          }
          else
          {
            v423 = v631;
            sub_21FA2D23C(v332, v631, type metadata accessor for PBTypedData.OneOf_Raw);
            sub_21FC5AD94();
            v333 = v655;
            v424 = v423;
            v425 = v618;
            sub_21FA2D23C(v424, v618, type metadata accessor for PBTypedData.OneOf_Raw);
            v426 = swift_getEnumCaseMultiPayload();
            v331 = v690;
            if (v426 == 15)
            {
              v427 = type metadata accessor for PBMedicationTrackingSchedules;
              sub_21FA2D1F8(v690, &qword_25553EB88, type metadata accessor for PBMedicationTrackingSchedules);
              v428 = v425;
              v429 = v590;
              sub_21FA2D23C(v428, v590, type metadata accessor for PBMedicationTrackingSchedules);
              sub_21FA2D23C(v429, v331, type metadata accessor for PBMedicationTrackingSchedules);
              v430 = v729;
              v330(v331, 0, 1, v729);
              v258 = v728;
              goto LABEL_160;
            }
            sub_21FA326EC(v425, type metadata accessor for PBTypedData.OneOf_Raw);
            v258 = v728;
          }
          v427 = type metadata accessor for PBMedicationTrackingSchedules;
          v430 = v729;
LABEL_160:
          sub_21FA2A08C(&qword_25553EB00, type metadata accessor for PBMedicationTrackingSchedules, (uint64_t)&protocol conformance descriptor for PBMedicationTrackingSchedules);
          sub_21FC5AE60();
          v560 = (uint64_t)v656;
          v324 = (uint64_t)v333;
          v561 = (uint64_t)v333;
          v545 = &qword_25553EB88;
          sub_21FA2D280(v331, v561, &qword_25553EB88, type metadata accessor for PBMedicationTrackingSchedules);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v710 + 48))(v324, 1, v430) == 1)
          {
LABEL_161:
            sub_21FA2D1F8(v324, v545, v427);
          }
          else
          {
            sub_21FA2D23C(v324, v560, type metadata accessor for PBMedicationTrackingSchedules);
            v562 = v560;
            v563 = v725;
            sub_21FA2D23C(v562, v725, type metadata accessor for PBMedicationTrackingSchedules);
            v564 = v733;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t *))(v732 + 56))(v563, 0, 1, v564);
            v565 = v563;
            v566 = v726;
            sub_21FA2D280(v565, v726, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_beginAccess();
            v550 = v566;
            v551 = v258;
LABEL_163:
            sub_21FA2D2D8(v550, v551, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_endAccess();
          }
          v262 = v731;
          v257 = (unint64_t *)&jpt_21FA3BF94;
LABEL_165:
          v259 = v727;
LABEL_166:
          v261 = v729;
          v260 = v730;
LABEL_7:
          result = sub_21FC5AD88();
          break;
        case 24:
          v334 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v697 + 56);
          v334(v711, 1, 1, v721);
          v335 = v673;
          sub_21FA44968(v258, v673, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
          if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t *))(v732 + 48))(v335, 1, v733) == 1)
          {
            v267 = (uint64_t)v259;
            sub_21FA2D1F8(v335, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            v336 = v711;
          }
          else
          {
            v431 = v632;
            sub_21FA2D23C(v335, v632, type metadata accessor for PBTypedData.OneOf_Raw);
            sub_21FC5AD94();
            v432 = v431;
            v433 = v619;
            sub_21FA2D23C(v432, v619, type metadata accessor for PBTypedData.OneOf_Raw);
            v434 = swift_getEnumCaseMultiPayload();
            v336 = v711;
            if (v434 == 16)
            {
              sub_21FA2D1F8(v711, &qword_25553EB80, type metadata accessor for PBActiveMedications);
              v267 = (uint64_t)v259;
              v435 = v591;
              sub_21FA2D23C(v433, v591, type metadata accessor for PBActiveMedications);
              sub_21FA2D23C(v435, v336, type metadata accessor for PBActiveMedications);
              v334(v336, 0, 1, v721);
            }
            else
            {
              v267 = (uint64_t)v259;
              sub_21FA326EC(v433, type metadata accessor for PBTypedData.OneOf_Raw);
            }
            v258 = v728;
          }
          v257 = (unint64_t *)type metadata accessor for PBActiveMedications;
          sub_21FA2A08C(&qword_25553EAF8, type metadata accessor for PBActiveMedications, (uint64_t)&protocol conformance descriptor for PBActiveMedications);
          v567 = v721;
          sub_21FC5AE60();
          sub_21FA2D280(v336, v267, &qword_25553EB80, type metadata accessor for PBActiveMedications);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v697 + 48))(v267, 1, v567) == 1)
          {
            sub_21FA2D1F8(v267, &qword_25553EB80, type metadata accessor for PBActiveMedications);
          }
          else
          {
            v568 = v605;
            sub_21FA2D23C(v267, v605, type metadata accessor for PBActiveMedications);
            v569 = v725;
            sub_21FA2D23C(v568, v725, type metadata accessor for PBActiveMedications);
            v570 = v733;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t *))(v732 + 56))(v569, 0, 1, v570);
            v571 = v569;
            v572 = v726;
            sub_21FA2D280(v571, v726, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_beginAccess();
            sub_21FA2D2D8(v572, v258, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_endAccess();
          }
          v262 = v731;
          goto LABEL_5;
        default:
          goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t PBTypedData.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21FA41BCC(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PBTypedData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_21FA3F500);
}

uint64_t sub_21FA3F500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;

  v78 = a4;
  v82 = a3;
  v79 = a2;
  v75 = type metadata accessor for PBActiveMedications(0);
  MEMORY[0x24BDAC7A8](v75);
  v76 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for PBMedicationTrackingSchedules(0);
  MEMORY[0x24BDAC7A8](v73);
  v74 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for PBMedicationTrackingDoseEvents(0);
  MEMORY[0x24BDAC7A8](v71);
  v72 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for PBMedicationTrackings(0);
  MEMORY[0x24BDAC7A8](v69);
  v70 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for PBHistogramSeries(0);
  MEMORY[0x24BDAC7A8](v67);
  v68 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for PBSleepSeries(0);
  MEMORY[0x24BDAC7A8](v65);
  v66 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for PBSleepSummary(0);
  MEMORY[0x24BDAC7A8](v63);
  v64 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for PBPatientMeta(0);
  MEMORY[0x24BDAC7A8](v61);
  v62 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for PBActivitySummarySeries(0);
  MEMORY[0x24BDAC7A8](v59);
  v60 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for PBECGMeasurement(0);
  MEMORY[0x24BDAC7A8](v57);
  v58 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for PBCycleTracking(0);
  MEMORY[0x24BDAC7A8](v55);
  v56 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for PBECGs(0);
  MEMORY[0x24BDAC7A8](v53);
  v54 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for PBAllClinicalRecords(0);
  MEMORY[0x24BDAC7A8](v51);
  v52 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for PBCharacteristics(0);
  MEMORY[0x24BDAC7A8](v49);
  v50 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for PBWorkout(0);
  MEMORY[0x24BDAC7A8](v47);
  v48 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for PBCategorySeries(0);
  MEMORY[0x24BDAC7A8](v45);
  v46 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for PBTimeSeries(0);
  MEMORY[0x24BDAC7A8](v43);
  v44 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v42 - v24;
  sub_21FA2D1A0(0, &qword_25553E0F8, type metadata accessor for PBDateRange, v22);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v42 - v27;
  v29 = type metadata accessor for PBDateRange(0);
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)&v42 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v33 = *(_QWORD *)(a1 + 16);
  v34 = *(_BYTE *)(a1 + 24);
  v80 = v33;
  v81 = v34;
  if (PBDataType.rawValue.getter())
  {
    v80 = v33;
    v81 = v34;
    sub_21FA48F1C();
    v35 = v77;
    result = sub_21FC5AED8();
    v37 = v35;
    if (v35)
      return result;
  }
  else
  {
    v37 = v77;
  }
  v38 = a1
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  swift_beginAccess();
  sub_21FA44968(v38, (uint64_t)v28, &qword_25553E0F8, type metadata accessor for PBDateRange);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29) == 1)
  {
    sub_21FA2D1F8((uint64_t)v28, &qword_25553E0F8, type metadata accessor for PBDateRange);
  }
  else
  {
    sub_21FA2D23C((uint64_t)v28, (uint64_t)v32, type metadata accessor for PBDateRange);
    sub_21FA2A08C(&qword_25553EAE0, type metadata accessor for PBDateRange, (uint64_t)&protocol conformance descriptor for PBDateRange);
    sub_21FC5AF50();
    if (v37)
      return sub_21FA326EC((uint64_t)v32, type metadata accessor for PBDateRange);
    sub_21FA326EC((uint64_t)v32, type metadata accessor for PBDateRange);
  }
  v39 = a1 + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v39, (uint64_t)v25, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v40 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 48))(v25, 1, v40);
  if ((_DWORD)result != 1)
  {
    v41 = (char *)&loc_21FA3FC44 + 4 * word_21FC5E5D4[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t static PBTypedData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_21FA449D4(a1, a2, type metadata accessor for PBTypedData, (uint64_t (*)(uint64_t, uint64_t))sub_21FA40360) & 1;
}

BOOL sub_21FA40360(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  char v53;
  char v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;

  v60 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  v62 = *(_QWORD *)(v60 - 8);
  MEMORY[0x24BDAC7A8](v60);
  v57 = (uint64_t)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA48F60(0, &qword_25553EAF0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v59 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v61 = (uint64_t)&v55 - v6;
  v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v58 = (uint64_t)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v55 - v11;
  v13 = type metadata accessor for PBDateRange(0);
  v64 = *(_QWORD *)(v13 - 8);
  v65 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA48F60(0, &qword_25553EAB0, &qword_25553E0F8, type metadata accessor for PBDateRange);
  v63 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v55 - v17;
  sub_21FA2D1A0(0, &qword_25553E0F8, type metadata accessor for PBDateRange, v7);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char **)((char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v55 - v23;
  swift_beginAccess();
  v25 = *(_QWORD *)(a1 + 16);
  LOBYTE(v7) = *(_BYTE *)(a1 + 24);
  swift_beginAccess();
  v26 = *(_QWORD *)(a2 + 16);
  v27 = *(_BYTE *)(a2 + 24);
  v68 = v25;
  v69 = (char)v7;
  v66 = v26;
  v67 = v27;
  v28 = PBDataType.rawValue.getter();
  if (v28 != PBDataType.rawValue.getter())
    return 0;
  v55 = v15;
  v56 = v12;
  v29 = a1
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  swift_beginAccess();
  v30 = a2;
  sub_21FA44968(v29, (uint64_t)v24, &qword_25553E0F8, type metadata accessor for PBDateRange);
  v31 = a2
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  swift_beginAccess();
  v32 = (uint64_t)&v18[*(int *)(v63 + 48)];
  sub_21FA44968((uint64_t)v24, (uint64_t)v18, &qword_25553E0F8, type metadata accessor for PBDateRange);
  sub_21FA44968(v31, v32, &qword_25553E0F8, type metadata accessor for PBDateRange);
  v33 = v65;
  v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v64 + 48);
  if (v34((uint64_t)v18, 1, v65) != 1)
  {
    sub_21FA44968((uint64_t)v18, (uint64_t)v22, &qword_25553E0F8, type metadata accessor for PBDateRange);
    v39 = v34(v32, 1, v33);
    v40 = (uint64_t)v56;
    if (v39 != 1)
    {
      v41 = (uint64_t)v55;
      sub_21FA2D23C(v32, (uint64_t)v55, type metadata accessor for PBDateRange);
      v36 = a1;
      swift_retain();
      swift_retain();
      v42 = static PBDateRange.== infix(_:_:)(v22, v41);
      v43 = v41;
      v37 = v40;
      sub_21FA326EC(v43, type metadata accessor for PBDateRange);
      sub_21FA2D1F8((uint64_t)v24, &qword_25553E0F8, type metadata accessor for PBDateRange);
      sub_21FA326EC((uint64_t)v22, type metadata accessor for PBDateRange);
      sub_21FA2D1F8((uint64_t)v18, &qword_25553E0F8, type metadata accessor for PBDateRange);
      v38 = v62;
      if ((v42 & 1) != 0)
        goto LABEL_10;
LABEL_8:
      swift_release();
      swift_release();
      return 0;
    }
    swift_retain();
    swift_retain();
    sub_21FA2D1F8((uint64_t)v24, &qword_25553E0F8, type metadata accessor for PBDateRange);
    sub_21FA326EC((uint64_t)v22, type metadata accessor for PBDateRange);
LABEL_7:
    sub_21FA48E3C((uint64_t)v18, &qword_25553EAB0, &qword_25553E0F8, type metadata accessor for PBDateRange);
    goto LABEL_8;
  }
  swift_retain();
  swift_retain();
  sub_21FA2D1F8((uint64_t)v24, &qword_25553E0F8, type metadata accessor for PBDateRange);
  v35 = v34(v32, 1, v33);
  v36 = a1;
  v37 = (uint64_t)v56;
  v38 = v62;
  if (v35 != 1)
    goto LABEL_7;
  sub_21FA2D1F8((uint64_t)v18, &qword_25553E0F8, type metadata accessor for PBDateRange);
LABEL_10:
  v44 = v36
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA44968(v44, v37, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v45 = v30
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  v46 = v61;
  v47 = v61 + *(int *)(v59 + 48);
  sub_21FA44968(v37, v61, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  sub_21FA44968(v45, v47, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
  v49 = v60;
  if (v48(v46, 1, v60) == 1)
  {
    swift_release();
    swift_release();
    sub_21FA2D1F8(v37, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
    if (v48(v47, 1, v49) == 1)
    {
      sub_21FA2D1F8(v46, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
      return 1;
    }
    goto LABEL_15;
  }
  v50 = v58;
  sub_21FA44968(v46, v58, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  if (v48(v47, 1, v49) == 1)
  {
    swift_release();
    swift_release();
    sub_21FA2D1F8(v37, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
    sub_21FA326EC(v50, type metadata accessor for PBTypedData.OneOf_Raw);
LABEL_15:
    sub_21FA48E3C(v46, &qword_25553EAF0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
    return 0;
  }
  v52 = v57;
  sub_21FA2D23C(v47, v57, type metadata accessor for PBTypedData.OneOf_Raw);
  _s19HealthRecordsDaemon11PBTypedDataV9OneOf_RawO2eeoiySbAE_AEtFZ_0(v50, v52);
  v54 = v53;
  swift_release();
  swift_release();
  sub_21FA326EC(v52, type metadata accessor for PBTypedData.OneOf_Raw);
  sub_21FA2D1F8(v37, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  sub_21FA326EC(v50, type metadata accessor for PBTypedData.OneOf_Raw);
  sub_21FA2D1F8(v46, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  return (v54 & 1) != 0;
}

uint64_t PBTypedData.hashValue.getter()
{
  return sub_21FA42FDC(type metadata accessor for PBTypedData, &qword_25553E4D8, (uint64_t)&protocol conformance descriptor for PBTypedData);
}

uint64_t sub_21FA40AE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21FA42AD4(a1, &qword_25553D590, &qword_25553E450, a2);
}

unint64_t sub_21FA40B00()
{
  return 0xD000000000000024;
}

uint64_t (*sub_21FA40B24())()
{
  return nullsub_1;
}

uint64_t sub_21FA40B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PBTypedData.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_21FA40B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PBTypedData.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_21FA40B5C()
{
  sub_21FA2A08C(&qword_25553EA98, type metadata accessor for PBTypedData, (uint64_t)&protocol conformance descriptor for PBTypedData);
  return sub_21FC5AD70();
}

uint64_t sub_21FA40BAC@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA40BC8(&qword_25553D588, (uint64_t)qword_25553E438, a1);
}

uint64_t sub_21FA40BC8@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_21FC5AF74();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t sub_21FA40C34()
{
  sub_21FA2A08C(&qword_25553E518, type metadata accessor for PBTypedData, (uint64_t)&protocol conformance descriptor for PBTypedData);
  return sub_21FC5AE9C();
}

uint64_t sub_21FA40C74()
{
  sub_21FA2A08C(&qword_25553E518, type metadata accessor for PBTypedData, (uint64_t)&protocol conformance descriptor for PBTypedData);
  return sub_21FC5AEA8();
}

uint64_t sub_21FA40CC4(uint64_t a1, uint64_t a2)
{
  return sub_21FA449D4(a1, a2, type metadata accessor for PBTypedData, (uint64_t (*)(uint64_t, uint64_t))sub_21FA40360) & 1;
}

unint64_t static PBReference.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t sub_21FA40D08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;

  v0 = sub_21FC5AF74();
  __swift_allocate_value_buffer(v0, qword_25553E458);
  __swift_project_value_buffer(v0, (uint64_t)qword_25553E458);
  sub_21FA2D1A0(0, (unint64_t *)&qword_25553EAC0, (uint64_t (*)(uint64_t))sub_21FA48EB8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  sub_21FA48EB8();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_21FC5EE20;
  v7 = v6 + v5;
  v8 = v6 + v5 + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + v5) = 1;
  *(_QWORD *)v8 = "dlid";
  *(_QWORD *)(v8 + 8) = 4;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = *MEMORY[0x24BE5C318];
  v10 = sub_21FC5AF5C();
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 2;
  *(_QWORD *)v12 = "aes_gcm_key";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "date_range";
  *((_QWORD *)v14 + 1) = 10;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "type";
  *((_QWORD *)v16 + 1) = 4;
  v16[16] = 2;
  v11();
  v17 = v7 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 4 * v4) = 5;
  *(_QWORD *)v17 = "ecgMeta";
  *(_QWORD *)(v17 + 8) = 7;
  *(_BYTE *)(v17 + 16) = 2;
  v11();
  return sub_21FC5AF68();
}

uint64_t static PBReference._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA3A338(&qword_25553D598, (uint64_t)qword_25553E458, a1);
}

uint64_t sub_21FA40F48()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t result;

  type metadata accessor for PBReference._StorageClass(0);
  v0 = (_QWORD *)swift_allocObject();
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v0[4] = sub_21FC5ACF8();
  v0[5] = v1;
  v2 = (char *)v0
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  v3 = type metadata accessor for PBDateRange(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = (char *)v0
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  v5 = (char *)v0
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
  v6 = type metadata accessor for PBReference.OneOf_Metadata(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  qword_25553E470 = (uint64_t)v0;
  return result;
}

_QWORD *sub_21FA41010(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v2 = v1;
  v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_21FA2D1A0(0, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v32 = (uint64_t)&v31 - v6;
  sub_21FA2D1A0(0, &qword_25553E0F8, type metadata accessor for PBDateRange, v4);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v31 - v8;
  v1[2] = 0;
  v10 = v1 + 2;
  v1[3] = 0xE000000000000000;
  v1[4] = sub_21FC5ACF8();
  v11 = v1 + 4;
  v2[5] = v12;
  v13 = (uint64_t)v2
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  v14 = type metadata accessor for PBDateRange(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = (char *)v2
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
  *(_QWORD *)v15 = 0;
  v15[8] = 1;
  v16 = (char *)v2
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
  v31 = (uint64_t)v2
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
  v17 = type metadata accessor for PBReference.OneOf_Metadata(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  swift_beginAccess();
  v18 = a1[2];
  v19 = a1[3];
  swift_beginAccess();
  *v10 = v18;
  v2[3] = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v20 = a1[4];
  v21 = a1[5];
  swift_beginAccess();
  v22 = *v11;
  v23 = v2[5];
  *v11 = v20;
  v2[5] = v21;
  sub_21FA32314(v20, v21);
  sub_21FA2D770(v22, v23);
  v24 = (uint64_t)a1
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  swift_beginAccess();
  sub_21FA44968(v24, (uint64_t)v9, &qword_25553E0F8, type metadata accessor for PBDateRange);
  swift_beginAccess();
  sub_21FA2D2D8((uint64_t)v9, v13, &qword_25553E0F8, type metadata accessor for PBDateRange);
  swift_endAccess();
  v25 = (char *)a1
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
  swift_beginAccess();
  v26 = *(_QWORD *)v25;
  LOBYTE(v25) = v25[8];
  swift_beginAccess();
  *(_QWORD *)v15 = v26;
  v15[8] = (char)v25;
  v27 = (uint64_t)a1
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
  swift_beginAccess();
  v28 = v32;
  sub_21FA44968(v27, v32, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
  swift_release();
  v29 = v31;
  swift_beginAccess();
  sub_21FA2D2D8(v28, v29, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
  swift_endAccess();
  return v2;
}

uint64_t sub_21FA41370()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_21FA2D770(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_21FA2D1F8(v0+ OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange, &qword_25553E0F8, type metadata accessor for PBDateRange);
  sub_21FA2D1F8(v0+ OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
  return swift_deallocClassInstance();
}

uint64_t PBReference.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21FA41414(a1, a2, a3, type metadata accessor for PBReference, (void (*)(_QWORD))type metadata accessor for PBReference._StorageClass, (uint64_t (*)(uint64_t))sub_21FA41010, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_21FA414F4);
}

uint64_t sub_21FA41414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = *(int *)(a4(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a5(0);
    swift_allocObject();
    v14 = swift_retain();
    *(_QWORD *)(v7 + v13) = a6(v14);
    swift_release();
  }
  v15 = swift_retain();
  a7(v15, a1, a2, a3);
  return swift_release();
}

uint64_t sub_21FA414F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void (*v56)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v7 = type metadata accessor for PBECGMeta(0);
  v71 = *(_QWORD *)(v7 - 8);
  v72 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v64 = (uint64_t)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v66 = (uint64_t)&v52 - v10;
  v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_21FA2D1A0(0, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v63 = (uint64_t)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v62 = (uint64_t)&v52 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v68 = (uint64_t)&v52 - v17;
  v18 = type metadata accessor for PBReference.OneOf_Metadata(0);
  v19 = *(_QWORD *)(v18 - 8);
  v69 = v18;
  v70 = v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v65 = (uint64_t)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v52 - v22;
  sub_21FA2D1A0(0, &qword_25553EAE8, type metadata accessor for PBECGMeta, v11);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v52 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v52 - v28;
  v30 = a1;
  v31 = a1
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
  v67 = OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
  v32 = OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  swift_beginAccess();
  v33 = v73;
  v73 = a3;
  v34 = a4;
  result = sub_21FC5AD88();
  v37 = v33;
  if (!v33)
  {
    v55 = v23;
    v61 = v30 + v67;
    v60 = v30 + v32;
    v58 = v30 + 16;
    v59 = v30 + 32;
    v38 = (uint64_t)v29;
    v39 = (uint64_t)v27;
    v67 = v31;
    v57 = v29;
    while ((v36 & 1) == 0)
    {
      v41 = v72;
      switch(result)
      {
        case 1:
          swift_beginAccess();
          v40 = v37;
          sub_21FC5AE3C();
          goto LABEL_5;
        case 2:
          swift_beginAccess();
          v40 = v37;
          sub_21FC5ADF4();
          goto LABEL_5;
        case 3:
          swift_beginAccess();
          type metadata accessor for PBDateRange(0);
          sub_21FA2A08C(&qword_25553EAE0, type metadata accessor for PBDateRange, (uint64_t)&protocol conformance descriptor for PBDateRange);
          sub_21FC5AE60();
          swift_endAccess();
          break;
        case 4:
          swift_beginAccess();
          sub_21FA48F1C();
          v40 = v37;
          sub_21FC5ADC4();
LABEL_5:
          v37 = v40;
          swift_endAccess();
          break;
        case 5:
          v56 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56);
          v56(v38, 1, 1, v72);
          v42 = v68;
          sub_21FA44968(v67, v68, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v42, 1, v69) == 1)
          {
            sub_21FA2D1F8(v42, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
          }
          else
          {
            v54 = v39;
            v43 = (uint64_t)v55;
            sub_21FA2D23C(v42, (uint64_t)v55, type metadata accessor for PBReference.OneOf_Metadata);
            sub_21FC5AD94();
            v44 = v65;
            sub_21FA2D23C(v43, v65, type metadata accessor for PBReference.OneOf_Metadata);
            sub_21FA2D1F8(v38, &qword_25553EAE8, type metadata accessor for PBECGMeta);
            v53 = v34;
            v45 = v66;
            sub_21FA2D23C(v44, v66, type metadata accessor for PBECGMeta);
            v46 = v45;
            v41 = v72;
            v34 = v53;
            sub_21FA2D23C(v46, v38, type metadata accessor for PBECGMeta);
            v56(v38, 0, 1, v41);
            v39 = v54;
          }
          sub_21FA2A08C(&qword_25553EAD8, type metadata accessor for PBECGMeta, (uint64_t)&protocol conformance descriptor for PBECGMeta);
          sub_21FC5AE60();
          sub_21FA2D280(v38, v39, &qword_25553EAE8, type metadata accessor for PBECGMeta);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v39, 1, v41) == 1)
          {
            sub_21FA2D1F8(v39, &qword_25553EAE8, type metadata accessor for PBECGMeta);
          }
          else
          {
            v47 = v64;
            sub_21FA2D23C(v39, v64, type metadata accessor for PBECGMeta);
            v48 = v47;
            v49 = v62;
            sub_21FA2D23C(v48, v62, type metadata accessor for PBECGMeta);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v70 + 56))(v49, 0, 1, v69);
            v50 = v63;
            sub_21FA2D280(v49, v63, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
            v51 = v67;
            swift_beginAccess();
            sub_21FA2D2D8(v50, v51, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
            swift_endAccess();
          }
          v38 = (uint64_t)v57;
          break;
        default:
          break;
      }
      result = sub_21FC5AD88();
    }
  }
  return result;
}

uint64_t PBReference.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21FA41BCC(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PBReference, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_21FA41C60);
}

uint64_t sub_21FA41BCC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v10;
  uint64_t result;

  a4(0);
  v10 = swift_retain();
  a5(v10, a1, a2, a3);
  result = swift_release();
  if (!v5)
    return sub_21FC5AD04();
  return result;
}

uint64_t sub_21FA41C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD v18[24];

  v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_21FA2D1A0(0, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v9);
  v18[2] = (char *)v18 - v10;
  v18[0] = type metadata accessor for PBECGMeta(0);
  MEMORY[0x24BDAC7A8](v18[0]);
  v18[1] = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D1A0(0, &qword_25553E0F8, type metadata accessor for PBDateRange, v8);
  MEMORY[0x24BDAC7A8](v12);
  v13 = type metadata accessor for PBDateRange(0);
  MEMORY[0x24BDAC7A8](v13);
  v18[3] = (char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v15 = *(_QWORD *)(a1 + 24);
  v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0)
    v16 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL;
  v18[23] = a4;
  v18[4] = v13;
  v18[5] = a3;
  if (!v16 || (swift_bridgeObjectRetain(), sub_21FC5AF2C(), result = swift_bridgeObjectRelease(), !v4))
  {
    swift_beginAccess();
    __asm { BR              X10 }
  }
  return result;
}

uint64_t static PBReference.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_21FA449D4(a1, a2, type metadata accessor for PBReference, (uint64_t (*)(uint64_t, uint64_t))sub_21FA4214C) & 1;
}

BOOL sub_21FA4214C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _BOOL8 result;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char v45;
  char *v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  char v85;

  v4 = type metadata accessor for PBECGMeta(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA48FCC(0, &qword_25553E4C8, (void (*)(uint64_t))type metadata accessor for PBReference.OneOf_Metadata);
  v70 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v71 = (uint64_t)&v67 - v8;
  v76 = type metadata accessor for PBReference.OneOf_Metadata(0);
  v75 = *(_QWORD *)(v76 - 8);
  MEMORY[0x24BDAC7A8](v76);
  v72 = (uint64_t)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA48F60(0, &qword_25553EAA8, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
  v74 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v67 - v11;
  v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_21FA2D1A0(0, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v73 = (uint64_t)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v77 = (uint64_t)&v67 - v17;
  v81 = type metadata accessor for PBDateRange(0);
  v80 = *(_QWORD *)(v81 - 8);
  MEMORY[0x24BDAC7A8](v81);
  v78 = (uint64_t)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA48F60(0, &qword_25553EAB0, &qword_25553E0F8, type metadata accessor for PBDateRange);
  v20 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v67 - v21;
  sub_21FA2D1A0(0, &qword_25553E0F8, type metadata accessor for PBDateRange, v13);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v79 = (uint64_t *)((char *)&v67 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v67 - v26;
  swift_beginAccess();
  v29 = a1[2];
  v28 = a1[3];
  swift_beginAccess();
  if (v29 == a2[2] && v28 == a2[3] || (v30 = sub_21FC5BDF0(), result = 0, (v30 & 1) != 0))
  {
    v68 = v6;
    v69 = v12;
    swift_beginAccess();
    v32 = a1[4];
    v33 = a1[5];
    swift_beginAccess();
    v35 = a2[4];
    v34 = a2[5];
    swift_retain();
    swift_retain();
    sub_21FA32314(v32, v33);
    sub_21FA32314(v35, v34);
    sub_21FB13260(v32, v33);
    v37 = v36;
    sub_21FA2D770(v35, v34);
    sub_21FA2D770(v32, v33);
    if ((v37 & 1) == 0)
      goto LABEL_16;
    v38 = (uint64_t)a1
        + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
    swift_beginAccess();
    sub_21FA44968(v38, (uint64_t)v27, &qword_25553E0F8, type metadata accessor for PBDateRange);
    v39 = (uint64_t)a2
        + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
    swift_beginAccess();
    v40 = (uint64_t)&v22[*(int *)(v20 + 48)];
    sub_21FA44968((uint64_t)v27, (uint64_t)v22, &qword_25553E0F8, type metadata accessor for PBDateRange);
    sub_21FA44968(v39, v40, &qword_25553E0F8, type metadata accessor for PBDateRange);
    v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48);
    v42 = v81;
    if (v41((uint64_t)v22, 1, v81) == 1)
    {
      sub_21FA2D1F8((uint64_t)v27, &qword_25553E0F8, type metadata accessor for PBDateRange);
      if (v41(v40, 1, v42) == 1)
      {
        sub_21FA2D1F8((uint64_t)v22, &qword_25553E0F8, type metadata accessor for PBDateRange);
LABEL_12:
        v46 = (char *)a1
            + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
        swift_beginAccess();
        v47 = *(_QWORD *)v46;
        v48 = v46[8];
        v49 = (char *)a2
            + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
        swift_beginAccess();
        v50 = *(_QWORD *)v49;
        v51 = v49[8];
        v84 = v47;
        v85 = v48;
        v82 = v50;
        v83 = v51;
        v52 = PBDataType.rawValue.getter();
        if (v52 == PBDataType.rawValue.getter())
        {
          v53 = (uint64_t)a1
              + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
          swift_beginAccess();
          v54 = v77;
          sub_21FA44968(v53, v77, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
          v55 = (uint64_t)a2
              + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
          swift_beginAccess();
          v56 = (uint64_t)v69;
          v57 = (uint64_t)&v69[*(int *)(v74 + 48)];
          sub_21FA44968(v54, (uint64_t)v69, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
          sub_21FA44968(v55, v57, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
          v58 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48);
          v59 = v76;
          if (v58(v56, 1, v76) == 1)
          {
            swift_release();
            swift_release();
            sub_21FA2D1F8(v54, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
            if (v58(v57, 1, v59) == 1)
            {
              sub_21FA2D1F8(v56, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
              return 1;
            }
          }
          else
          {
            v60 = v73;
            sub_21FA44968(v56, v73, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
            if (v58(v57, 1, v59) != 1)
            {
              v61 = v72;
              sub_21FA2D23C(v57, v72, type metadata accessor for PBReference.OneOf_Metadata);
              v62 = v71;
              v63 = v71 + *(int *)(v70 + 48);
              sub_21FA2D120(v60, v71, type metadata accessor for PBReference.OneOf_Metadata);
              sub_21FA2D120(v61, v63, type metadata accessor for PBReference.OneOf_Metadata);
              v64 = v62;
              v65 = v54;
              v66 = (uint64_t)v68;
              sub_21FA2D23C(v64, (uint64_t)v68, type metadata accessor for PBECGMeta);
              LODWORD(v81) = _s19HealthRecordsDaemon9PBECGMetaV2eeoiySbAC_ACtFZ_0(v66, v63);
              sub_21FA326EC(v63, type metadata accessor for PBECGMeta);
              sub_21FA326EC(v66, type metadata accessor for PBECGMeta);
              swift_release();
              swift_release();
              sub_21FA326EC(v61, type metadata accessor for PBReference.OneOf_Metadata);
              sub_21FA2D1F8(v65, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
              sub_21FA326EC(v60, type metadata accessor for PBReference.OneOf_Metadata);
              sub_21FA2D1F8(v56, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
              return (v81 & 1) != 0;
            }
            swift_release();
            swift_release();
            sub_21FA2D1F8(v54, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
            sub_21FA326EC(v60, type metadata accessor for PBReference.OneOf_Metadata);
          }
          sub_21FA48E3C(v56, &qword_25553EAA8, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata);
          return 0;
        }
LABEL_16:
        swift_release();
        swift_release();
        return 0;
      }
    }
    else
    {
      v43 = v79;
      sub_21FA44968((uint64_t)v22, (uint64_t)v79, &qword_25553E0F8, type metadata accessor for PBDateRange);
      if (v41(v40, 1, v42) != 1)
      {
        v44 = v78;
        sub_21FA2D23C(v40, v78, type metadata accessor for PBDateRange);
        v45 = static PBDateRange.== infix(_:_:)(v43, v44);
        sub_21FA326EC(v44, type metadata accessor for PBDateRange);
        sub_21FA2D1F8((uint64_t)v27, &qword_25553E0F8, type metadata accessor for PBDateRange);
        sub_21FA326EC((uint64_t)v43, type metadata accessor for PBDateRange);
        sub_21FA2D1F8((uint64_t)v22, &qword_25553E0F8, type metadata accessor for PBDateRange);
        if ((v45 & 1) == 0)
          goto LABEL_16;
        goto LABEL_12;
      }
      sub_21FA2D1F8((uint64_t)v27, &qword_25553E0F8, type metadata accessor for PBDateRange);
      sub_21FA326EC((uint64_t)v43, type metadata accessor for PBDateRange);
    }
    sub_21FA48E3C((uint64_t)v22, &qword_25553EAB0, &qword_25553E0F8, type metadata accessor for PBDateRange);
    goto LABEL_16;
  }
  return result;
}

uint64_t PBReference.hashValue.getter()
{
  return sub_21FA42FDC(type metadata accessor for PBReference, &qword_25553E4E0, (uint64_t)&protocol conformance descriptor for PBReference);
}

uint64_t sub_21FA42AB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21FA42AD4(a1, &qword_25553D5A0, &qword_25553E470, a2);
}

uint64_t sub_21FA42AD4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;

  sub_21FC5AD10();
  v8 = *(int *)(a1 + 20);
  if (*a2 != -1)
    swift_once();
  *(_QWORD *)(a4 + v8) = *a3;
  return swift_retain();
}

unint64_t sub_21FA42B3C()
{
  return 0xD000000000000024;
}

uint64_t sub_21FA42B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PBReference.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_21FA42B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PBReference.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_21FA42B80()
{
  sub_21FA2A08C(&qword_25553EA90, type metadata accessor for PBReference, (uint64_t)&protocol conformance descriptor for PBReference);
  return sub_21FC5AD70();
}

uint64_t sub_21FA42BD0@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA40BC8(&qword_25553D598, (uint64_t)qword_25553E458, a1);
}

uint64_t sub_21FA42BEC()
{
  sub_21FA2A08C(&qword_25553E4E8, type metadata accessor for PBReference, (uint64_t)&protocol conformance descriptor for PBReference);
  return sub_21FC5AE9C();
}

uint64_t sub_21FA42C2C()
{
  sub_21FA2A08C(&qword_25553E4E8, type metadata accessor for PBReference, (uint64_t)&protocol conformance descriptor for PBReference);
  return sub_21FC5AEA8();
}

uint64_t sub_21FA42C7C(uint64_t a1, uint64_t a2)
{
  return sub_21FA449D4(a1, a2, type metadata accessor for PBReference, (uint64_t (*)(uint64_t, uint64_t))sub_21FA4214C) & 1;
}

unint64_t static PBReferences.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t sub_21FA42CC0(uint64_t a1)
{
  return sub_21FA42CD8(a1, qword_25553E478, (uint64_t)"references", 10);
}

uint64_t sub_21FA42CD8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = sub_21FC5AF74();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  sub_21FA2D1A0(0, (unint64_t *)&qword_25553EAC0, (uint64_t (*)(uint64_t))sub_21FA48EB8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  sub_21FA48EB8();
  v9 = v8;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_21FC5EE30;
  v13 = v12 + v11 + *(int *)(v9 + 48);
  *(_QWORD *)(v12 + v11) = 1;
  *(_QWORD *)v13 = a3;
  *(_QWORD *)(v13 + 8) = a4;
  *(_BYTE *)(v13 + 16) = 2;
  v14 = *MEMORY[0x24BE5C318];
  v15 = sub_21FC5AF5C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v13, v14, v15);
  return sub_21FC5AF68();
}

uint64_t static PBReferences._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA3A338(&qword_25553D5A8, (uint64_t)qword_25553E478, a1);
}

uint64_t PBReferences.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_21FC5AD88();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        type metadata accessor for PBReference(0);
        sub_21FA2A08C(&qword_25553E4E8, type metadata accessor for PBReference, (uint64_t)&protocol conformance descriptor for PBReference);
        sub_21FC5AE54();
      }
      result = sub_21FC5AD88();
    }
  }
  return result;
}

uint64_t PBReferences.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for PBReference(0),
        sub_21FA2A08C(&qword_25553E4E8, type metadata accessor for PBReference, (uint64_t)&protocol conformance descriptor for PBReference), result = sub_21FC5AF44(), !v1))
  {
    type metadata accessor for PBReferences(0);
    return sub_21FC5AD04();
  }
  return result;
}

uint64_t PBReferences.hashValue.getter()
{
  return sub_21FA42FDC(type metadata accessor for PBReferences, &qword_25553E4F0, (uint64_t)&protocol conformance descriptor for PBReferences);
}

uint64_t sub_21FA42FDC(uint64_t (*a1)(uint64_t), unint64_t *a2, uint64_t a3)
{
  sub_21FC5BE8C();
  a1(0);
  sub_21FA2A08C(a2, a1, a3);
  sub_21FC5B598();
  return sub_21FC5BEB0();
}

uint64_t sub_21FA43058@<X0>(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
  return sub_21FC5AD10();
}

unint64_t sub_21FA43080()
{
  return 0xD000000000000025;
}

uint64_t sub_21FA4309C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_21FA430DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 20);
  v5 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t sub_21FA4311C()
{
  return PBReferences.decodeMessage<A>(decoder:)();
}

uint64_t sub_21FA43130()
{
  return PBReferences.traverse<A>(visitor:)();
}

uint64_t sub_21FA43144()
{
  sub_21FA2A08C(&qword_25553EA88, type metadata accessor for PBReferences, (uint64_t)&protocol conformance descriptor for PBReferences);
  return sub_21FC5AD70();
}

uint64_t sub_21FA43194@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA40BC8(&qword_25553D5A8, (uint64_t)qword_25553E478, a1);
}

uint64_t sub_21FA431B0()
{
  sub_21FA2A08C(&qword_25553E540, type metadata accessor for PBReferences, (uint64_t)&protocol conformance descriptor for PBReferences);
  return sub_21FC5AE9C();
}

uint64_t sub_21FA431F0()
{
  sub_21FC5BE8C();
  sub_21FC5B598();
  return sub_21FC5BEB0();
}

uint64_t sub_21FA43244()
{
  sub_21FA2A08C(&qword_25553E540, type metadata accessor for PBReferences, (uint64_t)&protocol conformance descriptor for PBReferences);
  return sub_21FC5AEA8();
}

uint64_t sub_21FA43294()
{
  sub_21FC5BE8C();
  sub_21FC5B598();
  return sub_21FC5BEB0();
}

uint64_t _s19HealthRecordsDaemon9PBRawDataV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = sub_21FC5AD1C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v18 - v9;
  sub_21FB13260(*a1, a1[1]);
  if ((v11 & 1) != 0)
  {
    v12 = type metadata accessor for PBRawData(0);
    v13 = (char *)a1 + *(int *)(v12 + 20);
    v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v14(v10, v13, v4);
    v14(v8, (char *)(a2 + *(int *)(v12 + 20)), v4);
    sub_21FA2A08C(&qword_25553EAB8, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v15 = sub_21FC5B5D4();
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t _s19HealthRecordsDaemon12PBReferencesV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = sub_21FC5AD1C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  if ((sub_21FB10860(*a1, *a2) & 1) != 0)
  {
    v11 = type metadata accessor for PBReferences(0);
    v12 = (char *)a1 + *(int *)(v11 + 20);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, (char *)a2 + *(int *)(v11 + 20), v4);
    sub_21FA2A08C(&qword_25553EAB8, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v14 = sub_21FC5B5D4();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t sub_21FA43550(uint64_t a1, uint64_t a2)
{
  return sub_21FA449D4(a1, a2, type metadata accessor for PBTypedData, (uint64_t (*)(uint64_t, uint64_t))sub_21FA40360);
}

void _s19HealthRecordsDaemon11PBTypedDataV9OneOf_RawO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;

  v97 = a2;
  v98 = (char *)a1;
  v68 = type metadata accessor for PBActiveMedications(0);
  MEMORY[0x24BDAC7A8](v68);
  v85 = (char *)&v60 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for PBMedicationTrackingSchedules(0);
  MEMORY[0x24BDAC7A8](v67);
  v84 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for PBMedicationTrackingDoseEvents(0);
  MEMORY[0x24BDAC7A8](v66);
  v83 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for PBMedicationTrackings(0);
  MEMORY[0x24BDAC7A8](v65);
  v81 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for PBHistogramSeries(0);
  MEMORY[0x24BDAC7A8](v61);
  v82 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for PBSleepSeries(0);
  MEMORY[0x24BDAC7A8](v64);
  v80 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for PBSleepSummary(0);
  MEMORY[0x24BDAC7A8](v60);
  v79 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PBPatientMeta(0);
  MEMORY[0x24BDAC7A8](v9);
  v78 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PBActivitySummarySeries(0);
  MEMORY[0x24BDAC7A8](v11);
  v77 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PBECGMeasurement(0);
  MEMORY[0x24BDAC7A8](v13);
  v75 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for PBCycleTracking(0);
  MEMORY[0x24BDAC7A8](v15);
  v73 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for PBECGs(0);
  MEMORY[0x24BDAC7A8](v63);
  v76 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for PBAllClinicalRecords(0);
  MEMORY[0x24BDAC7A8](v62);
  v74 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for PBCharacteristics(0);
  MEMORY[0x24BDAC7A8](v19);
  v72 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for PBWorkout(0);
  MEMORY[0x24BDAC7A8](v21);
  v71 = (char *)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for PBCategorySeries(0);
  MEMORY[0x24BDAC7A8](v23);
  v70 = (char *)&v60 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for PBTimeSeries(0);
  MEMORY[0x24BDAC7A8](v25);
  v69 = (char *)&v60 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  v28 = MEMORY[0x24BDAC7A8](v27);
  v96 = (char *)&v60 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x24BDAC7A8](v28);
  v94 = (char *)&v60 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v93 = (char *)&v60 - v33;
  v34 = MEMORY[0x24BDAC7A8](v32);
  v92 = (char *)&v60 - v35;
  v36 = MEMORY[0x24BDAC7A8](v34);
  v95 = (char *)&v60 - v37;
  v38 = MEMORY[0x24BDAC7A8](v36);
  v91 = (char *)&v60 - v39;
  v40 = MEMORY[0x24BDAC7A8](v38);
  v90 = (char *)&v60 - v41;
  v42 = MEMORY[0x24BDAC7A8](v40);
  v87 = (char *)&v60 - v43;
  v44 = MEMORY[0x24BDAC7A8](v42);
  v86 = (char *)&v60 - v45;
  v46 = MEMORY[0x24BDAC7A8](v44);
  v47 = MEMORY[0x24BDAC7A8](v46);
  v48 = MEMORY[0x24BDAC7A8](v47);
  v89 = (char *)&v60 - v49;
  v50 = MEMORY[0x24BDAC7A8](v48);
  v88 = (char *)&v60 - v51;
  v52 = MEMORY[0x24BDAC7A8](v50);
  v53 = MEMORY[0x24BDAC7A8](v52);
  v54 = MEMORY[0x24BDAC7A8](v53);
  MEMORY[0x24BDAC7A8](v54);
  sub_21FA48FCC(0, &qword_25553EC08, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
  v56 = MEMORY[0x24BDAC7A8](v55);
  v58 = (char *)&v60 + *(int *)(v56 + 48) - v57;
  sub_21FA2D120((uint64_t)v98, (uint64_t)&v60 - v57, type metadata accessor for PBTypedData.OneOf_Raw);
  v98 = v58;
  sub_21FA2D120(v97, (uint64_t)v58, type metadata accessor for PBTypedData.OneOf_Raw);
  v59 = (char *)sub_21FA43C70 + 4 * word_21FC5E600[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21FA43C70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = v0;
  sub_21FA2D120(v0, v1, type metadata accessor for PBTypedData.OneOf_Raw);
  v4 = *(_QWORD *)(v2 - 96);
  if (swift_getEnumCaseMultiPayload())
  {
    sub_21FA326EC(v1, type metadata accessor for PBTimeSeries);
    sub_21FA49024(v0);
    v7 = 0;
  }
  else
  {
    v5 = v4;
    v6 = *(_QWORD *)(v2 - 328);
    sub_21FA2D23C(v5, v6, type metadata accessor for PBTimeSeries);
    v7 = sub_21FB8DA2C(v1, v6);
    sub_21FA326EC(v6, type metadata accessor for PBTimeSeries);
    sub_21FA326EC(v1, type metadata accessor for PBTimeSeries);
    sub_21FA326EC(v3, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  return v7 & 1;
}

uint64_t type metadata accessor for PBReference(uint64_t a1)
{
  return sub_21FA44B58(a1, qword_25553E6E0);
}

uint64_t type metadata accessor for PBReference._StorageClass(uint64_t a1)
{
  return sub_21FA44B58(a1, qword_25553E960);
}

uint64_t sub_21FA44968(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_21FA2D1A0(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t type metadata accessor for PBReference.OneOf_Metadata(uint64_t a1)
{
  return sub_21FA44B58(a1, (uint64_t *)&unk_25553E788);
}

uint64_t sub_21FA449D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v8 = sub_21FC5AD1C();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v23 - v13;
  v15 = *(int *)(a3(0) + 20);
  v16 = *(_QWORD *)(a1 + v15);
  v17 = *(_QWORD *)(a2 + v15);
  if (v16 == v17
    || (swift_retain(), swift_retain(), v18 = a4(v16, v17), swift_release(), swift_release(), (v18 & 1) != 0))
  {
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v19(v14, a1, v8);
    v19(v12, a2, v8);
    sub_21FA2A08C(&qword_25553EAB8, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v20 = sub_21FC5B5D4();
    v21 = *(void (**)(char *, uint64_t))(v9 + 8);
    v21(v12, v8);
    v21(v14, v8);
  }
  else
  {
    v20 = 0;
  }
  return v20 & 1;
}

uint64_t type metadata accessor for PBReferences(uint64_t a1)
{
  return sub_21FA44B58(a1, qword_25553E7F0);
}

uint64_t sub_21FA44B58(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21FA44B8C()
{
  return sub_21FA2A08C(&qword_25553E4F8, type metadata accessor for PBRawData, (uint64_t)&protocol conformance descriptor for PBRawData);
}

uint64_t sub_21FA44BB8()
{
  return sub_21FA2A08C(&qword_25553E500, type metadata accessor for PBRawData, (uint64_t)&protocol conformance descriptor for PBRawData);
}

uint64_t sub_21FA44BE4()
{
  return sub_21FA2A08C(&qword_25553E4D0, type metadata accessor for PBRawData, (uint64_t)&protocol conformance descriptor for PBRawData);
}

uint64_t sub_21FA44C10()
{
  return sub_21FA2A08C(&qword_25553E508, type metadata accessor for PBRawData, (uint64_t)&protocol conformance descriptor for PBRawData);
}

uint64_t sub_21FA44C3C()
{
  return sub_21FA2A08C(&qword_25553E510, type metadata accessor for PBTypedData, (uint64_t)&protocol conformance descriptor for PBTypedData);
}

uint64_t sub_21FA44C68()
{
  return sub_21FA2A08C(&qword_25553E518, type metadata accessor for PBTypedData, (uint64_t)&protocol conformance descriptor for PBTypedData);
}

uint64_t sub_21FA44C94()
{
  return sub_21FA2A08C(&qword_25553E4D8, type metadata accessor for PBTypedData, (uint64_t)&protocol conformance descriptor for PBTypedData);
}

uint64_t sub_21FA44CC0()
{
  return sub_21FA2A08C(&qword_25553E520, type metadata accessor for PBTypedData, (uint64_t)&protocol conformance descriptor for PBTypedData);
}

uint64_t sub_21FA44CEC()
{
  return sub_21FA2A08C(&qword_25553E528, type metadata accessor for PBReference, (uint64_t)&protocol conformance descriptor for PBReference);
}

uint64_t sub_21FA44D18()
{
  return sub_21FA2A08C(&qword_25553E4E8, type metadata accessor for PBReference, (uint64_t)&protocol conformance descriptor for PBReference);
}

uint64_t sub_21FA44D44()
{
  return sub_21FA2A08C(&qword_25553E4E0, type metadata accessor for PBReference, (uint64_t)&protocol conformance descriptor for PBReference);
}

uint64_t sub_21FA44D70()
{
  return sub_21FA2A08C(&qword_25553E530, type metadata accessor for PBReference, (uint64_t)&protocol conformance descriptor for PBReference);
}

uint64_t sub_21FA44D9C()
{
  return sub_21FA2A08C(&qword_25553E538, type metadata accessor for PBReferences, (uint64_t)&protocol conformance descriptor for PBReferences);
}

uint64_t sub_21FA44DC8()
{
  return sub_21FA2A08C(&qword_25553E540, type metadata accessor for PBReferences, (uint64_t)&protocol conformance descriptor for PBReferences);
}

uint64_t sub_21FA44DF4()
{
  return sub_21FA2A08C(&qword_25553E4F0, type metadata accessor for PBReferences, (uint64_t)&protocol conformance descriptor for PBReferences);
}

uint64_t sub_21FA44E20()
{
  return sub_21FA2A08C(&qword_25553E548, type metadata accessor for PBReferences, (uint64_t)&protocol conformance descriptor for PBReferences);
}

uint64_t sub_21FA44E4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PBTypedData(0) + 20));
  result = swift_beginAccess();
  v5 = *(_BYTE *)(v3 + 24);
  *(_QWORD *)a2 = *(_QWORD *)(v3 + 16);
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_21FA44EAC@<X0>(uint64_t a1@<X8>)
{
  return PBTypedData.dateRange.getter(a1);
}

uint64_t sub_21FA44ECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA392DC(a1, a2, a3, a4, type metadata accessor for PBDateRange, (uint64_t (*)(char *))PBTypedData.dateRange.setter);
}

uint64_t sub_21FA44EF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21FA38BE4(a1, type metadata accessor for PBTypedData, &OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, a2);
}

uint64_t sub_21FA44F28@<X0>(uint64_t a1@<X8>)
{
  return PBTypedData.timeSeries.getter(a1);
}

uint64_t sub_21FA44F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA392DC(a1, a2, a3, a4, type metadata accessor for PBTimeSeries, (uint64_t (*)(char *))PBTypedData.timeSeries.setter);
}

uint64_t sub_21FA44F6C@<X0>(uint64_t a1@<X8>)
{
  return PBTypedData.categorySeries.getter(a1);
}

uint64_t sub_21FA44F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA392DC(a1, a2, a3, a4, type metadata accessor for PBCategorySeries, (uint64_t (*)(char *))PBTypedData.categorySeries.setter);
}

uint64_t sub_21FA44FB0@<X0>(uint64_t a1@<X8>)
{
  return PBTypedData.workout.getter(a1);
}

uint64_t sub_21FA44FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA392DC(a1, a2, a3, a4, type metadata accessor for PBWorkout, (uint64_t (*)(char *))PBTypedData.workout.setter);
}

uint64_t sub_21FA44FF4@<X0>(_QWORD *a1@<X8>)
{
  return PBTypedData.characteristics.getter(a1);
}

uint64_t sub_21FA45014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA392DC(a1, a2, a3, a4, type metadata accessor for PBCharacteristics, (uint64_t (*)(char *))PBTypedData.characteristics.setter);
}

uint64_t sub_21FA45038@<X0>(_QWORD *a1@<X8>)
{
  return PBTypedData.record.getter(a1);
}

uint64_t sub_21FA45058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA392DC(a1, a2, a3, a4, type metadata accessor for PBAllClinicalRecords, (uint64_t (*)(char *))PBTypedData.record.setter);
}

uint64_t sub_21FA4507C@<X0>(_QWORD *a1@<X8>)
{
  return PBTypedData.ecgs.getter(a1);
}

uint64_t sub_21FA4509C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA392DC(a1, a2, a3, a4, type metadata accessor for PBECGs, (uint64_t (*)(char *))PBTypedData.ecgs.setter);
}

uint64_t sub_21FA450C0@<X0>(uint64_t a1@<X8>)
{
  return PBTypedData.cycleTracking.getter(a1);
}

uint64_t sub_21FA450E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA392DC(a1, a2, a3, a4, type metadata accessor for PBCycleTracking, (uint64_t (*)(char *))PBTypedData.cycleTracking.setter);
}

uint64_t sub_21FA45104@<X0>(uint64_t a1@<X8>)
{
  return PBTypedData.ecg.getter(a1);
}

uint64_t sub_21FA45124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA392DC(a1, a2, a3, a4, type metadata accessor for PBECGMeasurement, (uint64_t (*)(char *))PBTypedData.ecg.setter);
}

uint64_t sub_21FA45148@<X0>(uint64_t a1@<X8>)
{
  return PBTypedData.activitySummaries.getter(a1);
}

uint64_t sub_21FA45168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA392DC(a1, a2, a3, a4, type metadata accessor for PBActivitySummarySeries, (uint64_t (*)(char *))PBTypedData.activitySummaries.setter);
}

uint64_t sub_21FA4518C@<X0>(uint64_t a1@<X8>)
{
  return PBTypedData.patientMeta.getter(a1);
}

uint64_t sub_21FA451AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA392DC(a1, a2, a3, a4, type metadata accessor for PBPatientMeta, (uint64_t (*)(char *))PBTypedData.patientMeta.setter);
}

uint64_t sub_21FA451D0@<X0>(uint64_t a1@<X8>)
{
  return PBTypedData.sleepSummary.getter(a1);
}

uint64_t sub_21FA451F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA392DC(a1, a2, a3, a4, type metadata accessor for PBSleepSummary, (uint64_t (*)(char *))PBTypedData.sleepSummary.setter);
}

uint64_t sub_21FA45214@<X0>(_QWORD *a1@<X8>)
{
  return PBTypedData.sleepSeries.getter(a1);
}

uint64_t sub_21FA45234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA392DC(a1, a2, a3, a4, type metadata accessor for PBSleepSeries, (uint64_t (*)(char *))PBTypedData.sleepSeries.setter);
}

uint64_t sub_21FA45258@<X0>(_QWORD *a1@<X8>)
{
  return PBTypedData.histogramSeries.getter(a1);
}

uint64_t sub_21FA45278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA392DC(a1, a2, a3, a4, type metadata accessor for PBHistogramSeries, (uint64_t (*)(char *))PBTypedData.histogramSeries.setter);
}

uint64_t sub_21FA4529C@<X0>(_QWORD *a1@<X8>)
{
  return PBTypedData.medicationTrackings.getter(a1);
}

uint64_t sub_21FA452BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA392DC(a1, a2, a3, a4, type metadata accessor for PBMedicationTrackings, (uint64_t (*)(char *))PBTypedData.medicationTrackings.setter);
}

uint64_t sub_21FA452E0@<X0>(_QWORD *a1@<X8>)
{
  return PBTypedData.medicationTrackingDoseEvents.getter(a1);
}

uint64_t sub_21FA45300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA392DC(a1, a2, a3, a4, type metadata accessor for PBMedicationTrackingDoseEvents, (uint64_t (*)(char *))PBTypedData.medicationTrackingDoseEvents.setter);
}

uint64_t sub_21FA45324@<X0>(_QWORD *a1@<X8>)
{
  return PBTypedData.medicationTrackingSchedules.getter(a1);
}

uint64_t sub_21FA45344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA392DC(a1, a2, a3, a4, type metadata accessor for PBMedicationTrackingSchedules, (uint64_t (*)(char *))PBTypedData.medicationTrackingSchedules.setter);
}

uint64_t sub_21FA45368@<X0>(_QWORD *a1@<X8>)
{
  return PBTypedData.activeMedications.getter(a1);
}

uint64_t sub_21FA45388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA392DC(a1, a2, a3, a4, type metadata accessor for PBActiveMedications, (uint64_t (*)(char *))PBTypedData.activeMedications.setter);
}

uint64_t sub_21FA453BC@<X0>(uint64_t a1@<X8>)
{
  return PBReference.dateRange.getter(a1);
}

uint64_t sub_21FA453DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA392DC(a1, a2, a3, a4, type metadata accessor for PBDateRange, (uint64_t (*)(char *))PBReference.dateRange.setter);
}

uint64_t sub_21FA45408@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21FA38BE4(a1, type metadata accessor for PBReference, &OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata, a2);
}

uint64_t sub_21FA45440@<X0>(uint64_t a1@<X8>)
{
  return PBReference.ecgMeta.getter(a1);
}

uint64_t sub_21FA45460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA392DC(a1, a2, a3, a4, type metadata accessor for PBECGMeta, (uint64_t (*)(char *))PBReference.ecgMeta.setter);
}

uint64_t *initializeBufferWithCopyOfBuffer for PBRawData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_21FA32314(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_21FC5AD1C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t destroy for PBRawData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_21FA2D770(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *initializeWithCopy for PBRawData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = a2[1];
  sub_21FA32314(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_21FC5AD1C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *assignWithCopy for PBRawData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  sub_21FA32314(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_21FA2D770(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_21FC5AD1C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *initializeWithTake for PBRawData(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_21FC5AD1C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *assignWithTake for PBRawData(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_21FA2D770(v6, v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_21FC5AD1C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PBRawData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA45744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_21FC5AD1C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PBRawData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_21FA457D8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_21FC5AD1C();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_21FA45854()
{
  return sub_21FA48C30();
}

uint64_t getEnumTagSinglePayload for PBTypedData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PBTypedData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t initializeBufferWithCopyOfBuffer for PBTypedData.OneOf_Raw(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_21FA458FC + 4 * word_21FC5E622[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for PBTypedData.OneOf_Raw(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      v3 = sub_21FC5AD1C();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      type metadata accessor for PBTimeSeries(0);
      return swift_release();
    case 1:
      v4 = sub_21FC5AD1C();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      type metadata accessor for PBCategorySeries(0);
      return swift_release();
    case 2:
      v5 = sub_21FC5AD1C();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      type metadata accessor for PBWorkout(0);
      return swift_release();
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = *(int *)(type metadata accessor for PBCharacteristics(0) + 28);
      goto LABEL_21;
    case 4:
      swift_bridgeObjectRelease();
      v7 = type metadata accessor for PBAllClinicalRecords(0);
      goto LABEL_20;
    case 5:
      swift_bridgeObjectRelease();
      v7 = type metadata accessor for PBECGs(0);
      goto LABEL_20;
    case 6:
      v8 = sub_21FC5AD1C();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
      type metadata accessor for PBCycleTracking(0);
      return swift_release();
    case 7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = *(int *)(type metadata accessor for PBECGMeasurement(0) + 56);
      goto LABEL_21;
    case 8:
      v9 = sub_21FC5AD1C();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
      type metadata accessor for PBActivitySummarySeries(0);
      return swift_release();
    case 9:
      v10 = sub_21FC5AD1C();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
      type metadata accessor for PBPatientMeta(0);
      return swift_release();
    case 10:
      swift_bridgeObjectRelease();
      v6 = *(int *)(type metadata accessor for PBSleepSummary(0) + 24);
      goto LABEL_21;
    case 11:
      swift_bridgeObjectRelease();
      v7 = type metadata accessor for PBSleepSeries(0);
      goto LABEL_20;
    case 12:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = *(int *)(type metadata accessor for PBHistogramSeries(0) + 24);
      goto LABEL_21;
    case 13:
      swift_bridgeObjectRelease();
      v7 = type metadata accessor for PBMedicationTrackings(0);
      goto LABEL_20;
    case 14:
      swift_bridgeObjectRelease();
      v7 = type metadata accessor for PBMedicationTrackingDoseEvents(0);
      goto LABEL_20;
    case 15:
      swift_bridgeObjectRelease();
      v7 = type metadata accessor for PBMedicationTrackingSchedules(0);
      goto LABEL_20;
    case 16:
      swift_bridgeObjectRelease();
      v7 = type metadata accessor for PBActiveMedications(0);
LABEL_20:
      v6 = *(int *)(v7 + 20);
LABEL_21:
      v11 = a1 + v6;
      v12 = sub_21FC5AD1C();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
      break;
    default:
      return result;
  }
  return result;
}

void initializeWithCopy for PBTypedData.OneOf_Raw()
{
  char *v0;

  v0 = (char *)sub_21FA46264 + 4 * word_21FC5E656[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21FA46264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = sub_21FC5AD1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v0, v1, v2);
  v3 = type metadata accessor for PBTimeSeries(0);
  *(_QWORD *)(v0 + *(int *)(v3 + 20)) = *(_QWORD *)(v1 + *(int *)(v3 + 20));
  swift_retain();
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for PBTypedData.OneOf_Raw(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_21FA326EC(result, type metadata accessor for PBTypedData.OneOf_Raw);
    v2 = (char *)&loc_21FA46924 + 4 * word_21FC5E678[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

void initializeWithTake for PBTypedData.OneOf_Raw()
{
  char *v0;

  v0 = (char *)sub_21FA4700C + 4 * word_21FC5E69A[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21FA4700C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = sub_21FC5AD1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v0, v1, v2);
  v3 = type metadata accessor for PBTimeSeries(0);
  *(_QWORD *)(v0 + *(int *)(v3 + 20)) = *(_QWORD *)(v1 + *(int *)(v3 + 20));
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithTake for PBTypedData.OneOf_Raw(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_21FA326EC(result, type metadata accessor for PBTypedData.OneOf_Raw);
    v2 = (char *)&loc_21FA475B8 + 4 * word_21FC5E6BC[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PBCategorySeries.Event.OneOf_AdditionalData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for PBCategorySeries.Event.OneOf_AdditionalData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_21FA47B24()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_21FA47B34()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  result = type metadata accessor for PBTimeSeries(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for PBCategorySeries(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for PBWorkout(319);
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for PBCharacteristics(319);
        if (v4 <= 0x3F)
        {
          result = type metadata accessor for PBAllClinicalRecords(319);
          if (v5 <= 0x3F)
          {
            result = type metadata accessor for PBECGs(319);
            if (v6 <= 0x3F)
            {
              result = type metadata accessor for PBCycleTracking(319);
              if (v7 <= 0x3F)
              {
                result = type metadata accessor for PBECGMeasurement(319);
                if (v8 <= 0x3F)
                {
                  result = type metadata accessor for PBActivitySummarySeries(319);
                  if (v9 <= 0x3F)
                  {
                    result = type metadata accessor for PBPatientMeta(319);
                    if (v10 <= 0x3F)
                    {
                      result = type metadata accessor for PBSleepSummary(319);
                      if (v11 <= 0x3F)
                      {
                        result = type metadata accessor for PBSleepSeries(319);
                        if (v12 <= 0x3F)
                        {
                          result = type metadata accessor for PBHistogramSeries(319);
                          if (v13 <= 0x3F)
                          {
                            result = type metadata accessor for PBMedicationTrackings(319);
                            if (v14 <= 0x3F)
                            {
                              result = type metadata accessor for PBMedicationTrackingDoseEvents(319);
                              if (v15 <= 0x3F)
                              {
                                result = type metadata accessor for PBMedicationTrackingSchedules(319);
                                if (v16 <= 0x3F)
                                {
                                  result = type metadata accessor for PBActiveMedications(319);
                                  if (v17 <= 0x3F)
                                  {
                                    swift_initEnumMetadataMultiPayload();
                                    return 0;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PBPlainText(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_21FC5AD1C();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for PBPlainText(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_21FC5AD1C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t initializeWithCopy for PBPlainText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_21FC5AD1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PBPlainText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_21FC5AD1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for PBPlainText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_21FC5AD1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for PBPlainText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_21FC5AD1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PBReference()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_51Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_21FC5AD1C();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for PBReference()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_52Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_21FC5AD1C();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_21FA480C4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_21FC5AD1C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for PBReference.OneOf_Metadata(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v17;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    v7 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v7;
    v8 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v8;
    v9 = a2[8];
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v9;
    v10 = a2[10];
    *(_QWORD *)(a1 + 72) = a2[9];
    *(_QWORD *)(a1 + 80) = v10;
    *(_QWORD *)(a1 + 88) = a2[11];
    *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
    *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
    *(_QWORD *)(a1 + 104) = a2[13];
    v11 = *(int *)(type metadata accessor for PBECGMeta(0) + 52);
    v12 = (char *)v4 + v11;
    v17 = (uint64_t)a2 + v11;
    v13 = sub_21FC5AD1C();
    v14 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v12, v17, v13);
  }
  return v4;
}

uint64_t destroy for PBReference.OneOf_Metadata(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = a1 + *(int *)(type metadata accessor for PBECGMeta(0) + 52);
  v3 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t initializeWithCopy for PBReference.OneOf_Metadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v9 = *(int *)(type metadata accessor for PBECGMeta(0) + 52);
  v10 = a1 + v9;
  v14 = a2 + v9;
  v11 = sub_21FC5AD1C();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v10, v14, v11);
  return a1;
}

uint64_t assignWithCopy for PBReference.OneOf_Metadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  v4 = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v4;
  v5 = *(int *)(type metadata accessor for PBECGMeta(0) + 52);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_21FC5AD1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t initializeWithTake for PBReference.OneOf_Metadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  v4 = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v4;
  v5 = *(int *)(type metadata accessor for PBECGMeta(0) + 52);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_21FC5AD1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PBReference.OneOf_Metadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v9 = *(int *)(type metadata accessor for PBECGMeta(0) + 52);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_21FC5AD1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for PBReference.OneOf_Metadata()
{
  type metadata accessor for PBECGMeta(0);
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA486EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_21FC5AD1C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 52), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PBReference.OneOf_Metadata()
{
  type metadata accessor for PBECGMeta(0);
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA487B4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_21FC5AD1C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 52), a2, a2, v7);
  }
  return result;
}

uint64_t sub_21FA48828()
{
  return 0;
}

uint64_t sub_21FA48830(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for PBECGMeta(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8);
    swift_initEnumMetadataSingleCase();
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = *(_DWORD *)(v4 + 84);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PBReferences(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_21FC5AD1C();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for PBReferences(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for PBReferences(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_21FC5AD1C();
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for PBReferences(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21FC5AD1C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *initializeWithTake for PBReferences(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_21FC5AD1C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for PBReferences(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21FC5AD1C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PBReferences()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA48B24(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_21FC5AD1C();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PBReferences()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_21FA48BAC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_21FC5AD1C();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_21FA48C20()
{
  return sub_21FA48C30();
}

uint64_t sub_21FA48C30()
{
  uint64_t result;
  unint64_t v1;

  result = sub_21FC5AD1C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21FA48C9C()
{
  return type metadata accessor for PBTypedData._StorageClass(0);
}

void sub_21FA48CA4()
{
  unint64_t v0;
  unint64_t v1;

  sub_21FA2D1A0(319, &qword_25553E0F8, type metadata accessor for PBDateRange, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
  {
    sub_21FA2D1A0(319, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t sub_21FA48D64()
{
  return type metadata accessor for PBReference._StorageClass(0);
}

void sub_21FA48D6C()
{
  unint64_t v0;
  unint64_t v1;

  sub_21FA2D1A0(319, &qword_25553E0F8, type metadata accessor for PBDateRange, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
  {
    sub_21FA2D1A0(319, &qword_25553E4C0, type metadata accessor for PBReference.OneOf_Metadata, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t sub_21FA48E3C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  sub_21FA48F60(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void sub_21FA48EB8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25553EAC8)
  {
    sub_21FC5AF5C();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25553EAC8);
  }
}

unint64_t sub_21FA48F1C()
{
  unint64_t result;

  result = qword_25553EAD0;
  if (!qword_25553EAD0)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBDataType, &type metadata for PBDataType);
    atomic_store(result, (unint64_t *)&qword_25553EAD0);
  }
  return result;
}

void sub_21FA48F60(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!*a2)
  {
    sub_21FA2D1A0(255, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_21FA48FCC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t sub_21FA49024(uint64_t a1)
{
  uint64_t v2;

  sub_21FA48FCC(0, &qword_25553EC08, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21FA49070(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  v17 = sub_21FC5AAF4();
  v4 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
    goto LABEL_15;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v8 = MEMORY[0x24BEE4AF8];
    if (!v7)
      return v8;
    v18 = MEMORY[0x24BEE4AF8];
    result = sub_21FC01898(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0)
      break;
    v16 = v2;
    v10 = 0;
    v8 = v18;
    v2 = a1 & 0xC000000000000001;
    while (v7 != v10)
    {
      if (v2)
        v11 = (id)MEMORY[0x2207D057C](v10, a1);
      else
        v11 = *(id *)(a1 + 8 * v10 + 32);
      v12 = v11;
      v13 = objc_msgSend(v11, sel_identifier, v16);
      sub_21FC5AADC();

      v18 = v8;
      v15 = *(_QWORD *)(v8 + 16);
      v14 = *(_QWORD *)(v8 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_21FC01898(v14 > 1, v15 + 1, 1);
        v8 = v18;
      }
      ++v10;
      *(_QWORD *)(v8 + 16) = v15 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v15, v6, v17);
      if (v7 == v10)
        return v8;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v7 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_21FA4923C@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  int *DiagnosticsTask;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSString *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a2;
  v29 = a3;
  v27 = a1;
  v5 = sub_21FC5A98C();
  v25 = *(_QWORD *)(v5 - 8);
  v26 = v5;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v23 - v9;
  v11 = sub_21FC5A62C();
  v12 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCB2A8];
  MEMORY[0x24BDAC7A8](v11);
  sub_21FC5AAE8();
  DiagnosticsTask = (int *)type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0);
  v14 = DiagnosticsTask[5];
  *(_QWORD *)(a4 + v14) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1580]), sel_init);
  v24 = DiagnosticsTask[6];
  sub_21FC5A65C();
  swift_allocObject();
  v15 = sub_21FC5A650();
  sub_21FA2D1A0(0, &qword_25553ECF8, v12, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_21FC5EE30;
  sub_21FC5A620();
  v30 = v16;
  sub_21FA2A08C(&qword_25553ED00, v12, MEMORY[0x24BDCB2C8]);
  sub_21FA2D1A0(0, &qword_25553ED08, v12, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_21FA51364();
  sub_21FC5BB08();
  sub_21FC5A638();
  *(_QWORD *)(a4 + v24) = v15;
  v17 = NSTemporaryDirectory();
  sub_21FC5B604();

  sub_21FC5A914();
  swift_bridgeObjectRelease();
  sub_21FC5AAB8();
  sub_21FC5A92C();
  swift_bridgeObjectRelease();
  v19 = v25;
  v18 = v26;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v26);
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(a4 + DiagnosticsTask[7], v8, v18);
  sub_21FA3175C(v27, a4 + DiagnosticsTask[8]);
  *(_QWORD *)(a4 + DiagnosticsTask[9]) = v28;
  v20 = a4 + DiagnosticsTask[10];
  v21 = sub_21FC5AAAC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20, v29, v21);
}

uint64_t sub_21FA49510()
{
  uint64_t v0;
  uint64_t DiagnosticsTask;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void (*v37)(unint64_t, char *, uint64_t);
  void (*v38)(unint64_t, char *, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  _QWORD v93[5];

  DiagnosticsTask = type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0);
  v2 = *(_QWORD *)(*(_QWORD *)(DiagnosticsTask - 8) + 64);
  v87 = *(_QWORD *)(DiagnosticsTask - 8);
  v88 = v2;
  MEMORY[0x24BDAC7A8](DiagnosticsTask);
  v86 = (uint64_t)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA50550(0, &qword_25553EC10, (void (*)(uint64_t))sub_21FA49CD4, (void (*)(void))sub_21FA49D48);
  v75 = v4;
  v77 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v73 = (char *)&v59 - v5;
  v6 = sub_21FC5AC08();
  v89 = *(_QWORD *)(v6 - 8);
  v90 = v6;
  v67 = *(_QWORD *)(v89 + 64);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v66 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v59 - v9;
  sub_21FA502FC(0, &qword_25553EC18, type metadata accessor for QueryOutput, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB96B0]);
  v78 = v11;
  v79 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v76 = (char *)&v59 - v12;
  sub_21FA49D78();
  v83 = v13;
  v85 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v74 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = MEMORY[0x24BEE4AE0] + 8;
  sub_21FA328AC(0, &qword_25553EC30, v15, (void (*)(void))sub_21FA49E50);
  v82 = v16;
  v84 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v80 = (char *)&v59 - v17;
  v18 = sub_21FC5AAAC();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = v21;
  MEMORY[0x24BDAC7A8](v20);
  v72 = (char *)&v59 - v23;
  sub_21FC5AAA0();
  v24 = sub_21FA49E6C();
  v61 = v24;
  v65 = DiagnosticsTask;
  v25 = (_QWORD *)(v0 + *(int *)(DiagnosticsTask + 32));
  v63 = v0;
  v26 = __swift_project_boxed_opaque_existential_1(v25, v25[3]) + 3;
  v93[3] = &type metadata for ClinicalSharingQueryDefaultDataProvider;
  v93[4] = &off_24E48F518;
  v93[0] = swift_allocObject();
  sub_21FA4A2CC((uint64_t)v26, v93[0] + 16);
  v60 = v10;
  sub_21FC5ABC0();
  v27 = v0 + *(int *)(DiagnosticsTask + 40);
  v92 = v24;
  sub_21FA2CEA0((uint64_t)v93, (uint64_t)&v91);
  v28 = v89;
  v29 = v66;
  v30 = v10;
  v31 = v90;
  (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v66, v30, v90);
  v32 = v19;
  v70 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v62 = v22;
  v64 = v18;
  v70(v22, v27, v18);
  v33 = v28;
  v34 = (*(unsigned __int8 *)(v28 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  v68 = *(unsigned __int8 *)(v32 + 80);
  v71 = v32;
  v35 = (v67 + v68 + v34) & ~v68;
  v36 = swift_allocObject();
  sub_21FA3175C(&v91, v36 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v33 + 32))(v36 + v34, v29, v31);
  v37 = *(void (**)(unint64_t, char *, uint64_t))(v32 + 32);
  v37(v36 + v35, v22, v18);
  v38 = v37;
  sub_21FC5B184();
  sub_21FA49CD4();
  type metadata accessor for ClinicalSharingQueryOutput(0);
  sub_21FA49C58();
  sub_21FA49D48();
  sub_21FA2A08C(&qword_25406CA08, (uint64_t (*)(uint64_t))sub_21FA49C58, MEMORY[0x24BDB9AF8]);
  v39 = v73;
  sub_21FC5B34C();
  swift_release();
  sub_21FA4B764();
  v40 = v75;
  v41 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v77 + 8))(v39, v40);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v60, v90);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
  swift_release();
  v42 = v63;
  v43 = sub_21FA4A308(v63 + *(int *)(v65 + 28), *(_QWORD *)(v63 + *(int *)(v65 + 36)), v41);
  swift_release();
  v93[0] = v43;
  type metadata accessor for QueryOutput(0);
  v44 = v76;
  sub_21FC5B2C8();
  swift_release();
  sub_21FA49DF0();
  v45 = v74;
  v46 = v78;
  sub_21FC5B328();
  (*(void (**)(char *, uint64_t))(v79 + 8))(v44, v46);
  v47 = v86;
  sub_21FA2D120(v42, v86, type metadata accessor for ClinicalSharingQueryDiagnosticsTask);
  v48 = v62;
  v49 = v72;
  v50 = v64;
  v70(v62, (uint64_t)v72, v64);
  v51 = (*(unsigned __int8 *)(v87 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80);
  v52 = (v88 + v68 + v51) & ~v68;
  v53 = swift_allocObject();
  sub_21FA2D23C(v47, v53 + v51, type metadata accessor for ClinicalSharingQueryDiagnosticsTask);
  v38(v53 + v52, v48, v50);
  sub_21FA49E50();
  v54 = v80;
  v55 = v83;
  sub_21FC5B31C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v85 + 8))(v45, v55);
  sub_21FA4B964();
  v56 = v82;
  v57 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v84 + 8))(v54, v56);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v49, v50);
  return v57;
}

uint64_t type metadata accessor for ClinicalSharingQueryDiagnosticsTask(uint64_t a1)
{
  return sub_21FA44B58(a1, qword_25553EEB0);
}

void sub_21FA49C58()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406CA10)
  {
    type metadata accessor for ClinicalSharingQueryOutput(255);
    sub_21FA50724(255, (unint64_t *)&qword_25406BB50);
    v0 = sub_21FC5B190();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406CA10);
  }
}

void sub_21FA49CD4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406B938)
  {
    sub_21FA50724(255, (unint64_t *)&qword_25406BB50);
    v0 = sub_21FC5B190();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406B938);
  }
}

uint64_t sub_21FA49D48()
{
  return sub_21FA2A08C(&qword_25406B930, (uint64_t (*)(uint64_t))sub_21FA49CD4, MEMORY[0x24BDB9AF8]);
}

uint64_t type metadata accessor for QueryOutput(uint64_t a1)
{
  return sub_21FA44B58(a1, qword_25553EE20);
}

void sub_21FA49D78()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553EC20)
  {
    sub_21FA502FC(255, &qword_25553EC18, type metadata accessor for QueryOutput, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB96B0]);
    sub_21FA49DF0();
    v0 = sub_21FC5B0F4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553EC20);
  }
}

unint64_t sub_21FA49DF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25553EC28;
  if (!qword_25553EC28)
  {
    sub_21FA502FC(255, &qword_25553EC18, type metadata accessor for QueryOutput, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB96B0]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB96C0], v1);
    atomic_store(result, (unint64_t *)&qword_25553EC28);
  }
  return result;
}

uint64_t sub_21FA49E50()
{
  return sub_21FA2A08C(&qword_25553EC38, (uint64_t (*)(uint64_t))sub_21FA49D78, MEMORY[0x24BDB98D8]);
}

uint64_t sub_21FA49E6C()
{
  uint64_t v0;
  uint64_t DiagnosticsTask;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t (*v17)(void);
  id v18;
  id v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[5];

  DiagnosticsTask = type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0);
  v2 = *(_QWORD *)(*(_QWORD *)(DiagnosticsTask - 8) + 64);
  v36 = *(_QWORD *)(DiagnosticsTask - 8);
  v37 = v2;
  MEMORY[0x24BDAC7A8](DiagnosticsTask);
  v34 = (uint64_t)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA50814();
  v5 = v4;
  v31[0] = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA50928();
  v9 = *(_QWORD *)(v8 - 8);
  v32 = v8;
  v33 = v9;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA50A88();
  v13 = *(_QWORD *)(v12 - 8);
  v38 = v12;
  v39 = v13;
  MEMORY[0x24BDAC7A8](v12);
  v35 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (void *)__swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + *(int *)(DiagnosticsTask + 32)), *(_QWORD *)(v0 + *(int *)(DiagnosticsTask + 32) + 24))[2];
  v41[3] = &type metadata for ClinicalSharingAccountStore;
  v41[4] = &off_24E484B78;
  v41[0] = v15;
  v16 = (void *)*__swift_project_boxed_opaque_existential_1(v41, (uint64_t)&type metadata for ClinicalSharingAccountStore);
  *(_QWORD *)(swift_allocObject() + 16) = v16;
  v17 = MEMORY[0x24BDB9E38];
  sub_21FA509F0(0, (unint64_t *)&qword_25406B9B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9E38]);
  sub_21FA508E8((unint64_t *)&qword_25406B9B0, (unint64_t *)&qword_25406B9B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v17, MEMORY[0x24BDB9E58]);
  v18 = v15;
  v19 = v16;
  sub_21FC5B268();
  sub_21FA2A08C(&qword_25406B9D0, (uint64_t (*)(uint64_t))sub_21FA50814, MEMORY[0x24BDB9E90]);
  v20 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v31[0] + 8))(v7, v5);
  v40 = v20;
  v21 = MEMORY[0x24BDB9AE0];
  sub_21FA509F0(0, &qword_25406B968, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA2D1A0(0, (unint64_t *)&qword_25406BA70, (uint64_t (*)(uint64_t))sub_21FA508AC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_21FA508E8((unint64_t *)&qword_25406B960, &qword_25406B968, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v21, MEMORY[0x24BDB9AF8]);
  sub_21FC5B2C8();
  swift_release();
  sub_21FA2A08C(&qword_25406B848, (uint64_t (*)(uint64_t))sub_21FA50928, MEMORY[0x24BDB96C0]);
  v22 = v32;
  v23 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v22);
  v40 = v23;
  v24 = v34;
  sub_21FA2D120(v31[1], v34, type metadata accessor for ClinicalSharingQueryDiagnosticsTask);
  v25 = (*(unsigned __int8 *)(v36 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  v26 = swift_allocObject();
  sub_21FA2D23C(v24, v26 + v25, type metadata accessor for ClinicalSharingQueryDiagnosticsTask);
  sub_21FC5B184();
  sub_21FA49CD4();
  sub_21FA49D48();
  v27 = v35;
  sub_21FC5B34C();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  sub_21FA2A08C(&qword_25553ECB8, (uint64_t (*)(uint64_t))sub_21FA50A88, MEMORY[0x24BDB98F0]);
  v28 = v38;
  v29 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v27, v28);
  return v29;
}

uint64_t sub_21FA4A290()
{
  id *v0;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 5));
  return swift_deallocObject();
}

uint64_t sub_21FA4A2CC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ClinicalSharingQueryDefaultDataProvider(a2, a1);
  return a2;
}

id sub_21FA4A308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id result;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  id v24;
  id v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v48 = a2;
  sub_21FA502FC(0, &qword_25553EC58, type metadata accessor for ClinicalSharingQueryOutput, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB98B8]);
  v44 = *(_QWORD *)(v5 - 8);
  v45 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v43 = (char *)&v41 - v6;
  v7 = sub_21FC5A98C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PublisherOutputWriter();
  v42 = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(v42 + 64);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v46 = (uint64_t)&v41 - v15;
  v50 = a3;
  result = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (result)
  {
    v17 = result;
    v18 = objc_msgSend(result, sel_isAppleInternalInstall);

    sub_21FA49C58();
    v20 = v19;
    v21 = sub_21FA2A08C(&qword_25406CA08, (uint64_t (*)(uint64_t))sub_21FA49C58, MEMORY[0x24BDB9AF8]);
    v41 = v20;
    v47 = v21;
    v22 = sub_21FC5B280();
    if (!v18)
      return (id)v22;
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v23(v10, a1, v7);
    v23(v14, (uint64_t)v10, v7);
    v24 = objc_allocWithZone(MEMORY[0x24BDD1580]);
    swift_retain();
    v25 = objc_msgSend(v24, sel_init);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    *(_QWORD *)&v14[*(int *)(v11 + 20)] = v25;
    v26 = v46;
    sub_21FA2D23C((uint64_t)v14, v46, (uint64_t (*)(_QWORD))type metadata accessor for PublisherOutputWriter);
    v27 = v48;
    if ((v48 & 1) != 0)
    {
      v28 = swift_allocObject();
      *(_QWORD *)(v28 + 16) = sub_21FAAD254;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 1852797802;
      *(_QWORD *)(v28 + 40) = 0xE400000000000000;
      v49 = v22;
      sub_21FA2D120(v26, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for PublisherOutputWriter);
      v29 = (*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
      v30 = swift_allocObject();
      *(_QWORD *)(v30 + 16) = sub_21FA53EC0;
      *(_QWORD *)(v30 + 24) = v28;
      sub_21FA2D23C((uint64_t)v14, v30 + v29, (uint64_t (*)(_QWORD))type metadata accessor for PublisherOutputWriter);
      type metadata accessor for ClinicalSharingQueryOutput(0);
      swift_retain();
      v31 = v43;
      sub_21FC5B31C();
      swift_release();
      sub_21FA503D0();
      v32 = v45;
      v33 = sub_21FC5B280();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v31, v32);
      swift_release_n();
      LOBYTE(v28) = v48;
      swift_release();
      v22 = v33;
      if ((v28 & 2) == 0)
      {
LABEL_8:
        v49 = v22;
        v40 = sub_21FC5B280();
        swift_release();
        sub_21FA326EC(v26, (uint64_t (*)(_QWORD))type metadata accessor for PublisherOutputWriter);
        return (id)v40;
      }
    }
    else
    {
      swift_release();
      if ((v27 & 2) == 0)
        goto LABEL_8;
    }
    v34 = (_QWORD *)swift_allocObject();
    v34[2] = sub_21FAAD32C;
    v34[3] = 0;
    v34[4] = 25200;
    v34[5] = 0xE200000000000000;
    v49 = v22;
    sub_21FA2D120(v26, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for PublisherOutputWriter);
    v35 = (*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
    v36 = swift_allocObject();
    *(_QWORD *)(v36 + 16) = sub_21FA5039C;
    *(_QWORD *)(v36 + 24) = v34;
    sub_21FA2D23C((uint64_t)v14, v36 + v35, (uint64_t (*)(_QWORD))type metadata accessor for PublisherOutputWriter);
    type metadata accessor for ClinicalSharingQueryOutput(0);
    swift_retain();
    swift_retain();
    v37 = v43;
    sub_21FC5B31C();
    swift_release();
    sub_21FA503D0();
    v38 = v45;
    v39 = sub_21FC5B280();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v37, v38);
    swift_release_n();
    swift_release();
    v22 = v39;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_21FA4A7F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t Output;
  uint64_t v12;
  _BYTE *v13;
  uint64_t (*v14)(_QWORD);
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[24];

  sub_21FA2D1A0(0, &qword_25553E0F8, type metadata accessor for PBDateRange, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v20[-v5];
  v7 = type metadata accessor for PBDateRange(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Output = type metadata accessor for ClinicalSharingQueryOutput(0);
  MEMORY[0x24BDAC7A8](Output);
  v13 = &v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_21FA2D120(a1, (uint64_t)v13, v14);
  v15 = *(_QWORD *)&v13[*(int *)(type metadata accessor for PBTypedData(0) + 20)];
  swift_beginAccess();
  v16 = *(_BYTE *)(v15 + 24);
  *(_QWORD *)a2 = *(_QWORD *)(v15 + 16);
  *(_BYTE *)(a2 + 8) = v16;
  v17 = v15
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  swift_beginAccess();
  sub_21FA44968(v17, (uint64_t)v6, &qword_25553E0F8, type metadata accessor for PBDateRange);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0xE000000000000000;
    *((_QWORD *)v10 + 2) = 0;
    *((_QWORD *)v10 + 3) = 0xE000000000000000;
    *((_QWORD *)v10 + 4) = 0;
    v10[40] = 1;
    sub_21FC5AD10();
    sub_21FA2D1F8((uint64_t)v6, &qword_25553E0F8, type metadata accessor for PBDateRange);
  }
  else
  {
    sub_21FA2D23C((uint64_t)v6, (uint64_t)v10, type metadata accessor for PBDateRange);
  }
  sub_21FA326EC((uint64_t)v13, type metadata accessor for ClinicalSharingQueryOutput);
  v18 = type metadata accessor for QueryOutput(0);
  return sub_21FA2D23C((uint64_t)v10, a2 + *(int *)(v18 + 20), type metadata accessor for PBDateRange);
}

uint64_t sub_21FA4AA14(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t DiagnosticsTask;
  double v13;
  double v14;
  uint64_t v15;
  __int128 v17[5];

  v4 = sub_21FC5AAAC();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v17 - v9;
  v11 = *a1;
  DiagnosticsTask = type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, a2 + *(int *)(DiagnosticsTask + 40), v4);
  sub_21FC5AAA0();
  sub_21FC5AA4C();
  v14 = v13;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v15 = *(_QWORD *)(a2 + *(int *)(DiagnosticsTask + 36));
  swift_bridgeObjectRetain();
  sub_21FA4FC68((uint64_t)v10, v15, v11, (uint64_t *)v17, v14);
  swift_bridgeObjectRelease();
  sub_21FA4AB7C(v17, 0x2E7972616D6D7573, 0xEC0000006E6F736ALL);
  return sub_21FA501F0((uint64_t)v17);
}

uint64_t sub_21FA4AB7C(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v5 = v3;
  v21 = a2;
  v22 = a3;
  v30 = *MEMORY[0x24BDAC8D0];
  v23 = sub_21FC5A98C();
  v7 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v27 = a1[2];
  v28 = v10;
  v29 = a1[4];
  v11 = a1[1];
  v25 = *a1;
  v26 = v11;
  v12 = *(void **)(v5 + *(int *)(type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0) + 20));
  v13 = (void *)sub_21FC5A920();
  v24 = 0;
  LODWORD(v12) = objc_msgSend(v12, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v13, 1, 0, &v24, v21, v22);

  v14 = v24;
  if ((_DWORD)v12)
  {
    sub_21FA50254();
    v15 = v14;
    result = sub_21FC5A644();
    if (!v4)
    {
      v18 = result;
      v19 = v17;
      sub_21FC5A938();
      sub_21FC5AA04();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v23);
      return sub_21FA2D770(v18, v19);
    }
  }
  else
  {
    v20 = v24;
    sub_21FC5A8E4();

    return swift_willThrow();
  }
  return result;
}

uint64_t sub_21FA4AD50(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22[3];

  v5 = v3;
  v19 = a2;
  v20 = a3;
  v22[2] = *(id *)MEMORY[0x24BDAC8D0];
  v21 = sub_21FC5A98C();
  v7 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = a1;
  v10 = *(void **)(v5 + *(int *)(type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0) + 20));
  v11 = (void *)sub_21FC5A920();
  v22[0] = 0;
  LODWORD(v10) = objc_msgSend(v10, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v11, 1, 0, v22, v19, v20);

  v12 = v22[0];
  if ((_DWORD)v10)
  {
    sub_21FA2D1A0(0, &qword_25553ECE0, type metadata accessor for AccountSummary, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FA512C8();
    v13 = v12;
    result = sub_21FC5A644();
    if (!v4)
    {
      v16 = result;
      v17 = v15;
      sub_21FC5A938();
      sub_21FC5AA04();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v21);
      return sub_21FA2D770(v16, v17);
    }
  }
  else
  {
    v18 = v22[0];
    sub_21FC5A8E4();

    return swift_willThrow();
  }
  return result;
}

uint64_t sub_21FA4AF30@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t DiagnosticsTask;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  v22 = a3;
  DiagnosticsTask = type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0);
  v6 = *(_QWORD *)(DiagnosticsTask - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](DiagnosticsTask);
  sub_21FA328AC(0, &qword_25553ECC0, (void (*)(uint64_t))sub_21FA49CD4, (void (*)(void))sub_21FA49D48);
  v9 = v8;
  v21 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v20 - v10;
  v12 = *a1;
  v13 = (id)*__swift_project_boxed_opaque_existential_1((_QWORD *)(a2 + *(int *)(DiagnosticsTask + 32)), *(_QWORD *)(a2 + *(int *)(DiagnosticsTask + 32) + 24));
  v14 = sub_21FA49070(v12);
  v15 = sub_21FC4BAC4(v14);

  swift_bridgeObjectRelease();
  v23 = v15;
  sub_21FA2D120(a2, (uint64_t)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ClinicalSharingQueryDiagnosticsTask);
  v16 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v12;
  sub_21FA2D23C((uint64_t)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, type metadata accessor for ClinicalSharingQueryDiagnosticsTask);
  sub_21FA49CD4();
  sub_21FA49D48();
  swift_bridgeObjectRetain();
  sub_21FC5B31C();
  swift_release();
  swift_release();
  sub_21FA50DF4();
  v18 = sub_21FC5B280();
  result = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v11, v9);
  *v22 = v18;
  return result;
}

uint64_t sub_21FA4B130@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v7 = *a1;
  if (a2 < 0 || (a2 & 0x4000000000000000) != 0)
  {
    v17 = swift_bridgeObjectRetain();
    v8 = (uint64_t)sub_21FBFF6A0(v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  v18 = v8;
  sub_21FA4CF90((uint64_t *)&v18);
  if (v4)
  {
    result = swift_release();
    __break(1u);
  }
  else
  {
    v9 = v18;
    swift_bridgeObjectRetain();
    v10 = (void *)sub_21FA4F9F8(v9, v7);
    swift_release();
    swift_bridgeObjectRelease();
    sub_21FA4AD50(v10, 0x73746E756F636361, 0xED00006E6F736A2ELL);
    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(a3 + *(int *)(type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0) + 36)) & 4) != 0)
    {
      sub_21FA2D1A0(0, &qword_25553ECD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      sub_21FC5AAF4();
      v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = xmmword_21FC5EE30;
      sub_21FC5AAE8();
      v13 = sub_21FC5ACC8();
      v14 = (_QWORD *)sub_21FA7BE00(MEMORY[0x24BEE4AF8]);
      swift_bridgeObjectRetain();
      v15 = sub_21FA50E5C(v14, v12, v13);
      swift_bridgeObjectRelease_n();
      v16 = sub_21FA4ED60(v15);
      swift_bridgeObjectRelease();
      swift_setDeallocating();
      swift_arrayDestroy();
      result = swift_deallocClassInstance();
      *a4 = v16;
    }
    else
    {
      *a4 = v7;
      return swift_bridgeObjectRetain();
    }
  }
  return result;
}

uint64_t sub_21FA4B368@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD v35[5];

  v33 = a4;
  v34 = a3;
  sub_21FA50550(0, (unint64_t *)&qword_25553EC68, (void (*)(uint64_t))sub_21FA505FC, (void (*)(void))sub_21FA50770);
  v31 = *(_QWORD *)(v6 - 8);
  v32 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v30 - v7;
  v9 = sub_21FC5AAAC();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_21FC5AC08();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2CEA0(a1, (uint64_t)v35);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v34, v9);
  v17 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v35, v35[3]);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (_OWORD *)((char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_OWORD *))(v20 + 16))(v19);
  v21 = swift_bridgeObjectRetain();
  v22 = sub_21FA4F5F8(v21, v19, (uint64_t)v16, (uint64_t)v12);
  v24 = v23;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  result = sub_21FBF622C(v22, v24);
  v35[0] = result;
  if (v24 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_21FA506B0();
    sub_21FA49C58();
    v26 = MEMORY[0x24BDB9AF8];
    sub_21FA2A08C(&qword_25553EC88, (uint64_t (*)(uint64_t))sub_21FA506B0, MEMORY[0x24BDB9AF8]);
    sub_21FA2A08C(&qword_25406CA08, (uint64_t (*)(uint64_t))sub_21FA49C58, v26);
    sub_21FC5B388();
    swift_release();
    sub_21FA507B4();
    v27 = v32;
    v28 = sub_21FC5B280();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v27);
    v29 = sub_21FBF6918(v28, v22, v24);
    swift_release();
    result = swift_release();
    *v33 = v29;
  }
  return result;
}

uint64_t sub_21FA4B62C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = sub_21FC5AC08();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = sub_21FC5AAAC();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t sub_21FA4B6E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(sub_21FC5AC08() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(sub_21FC5AAAC() - 8) + 80);
  return sub_21FA4B368(v1 + 16, v1 + v4, v1 + ((v4 + v5 + v6) & ~v6), a1);
}

unint64_t sub_21FA4B764()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25553EC40;
  if (!qword_25553EC40)
  {
    sub_21FA50550(255, &qword_25553EC10, (void (*)(uint64_t))sub_21FA49CD4, (void (*)(void))sub_21FA49D48);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB98F0], v1);
    atomic_store(result, (unint64_t *)&qword_25553EC40);
  }
  return result;
}

uint64_t sub_21FA4B7C4()
{
  uint64_t v0;
  int *DiagnosticsTask;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(unint64_t, uint64_t);

  DiagnosticsTask = (int *)type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0);
  v2 = *((_QWORD *)DiagnosticsTask - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = sub_21FC5AAAC();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v0 + v3;
  v9 = sub_21FC5AAF4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);

  swift_release();
  v10 = v8 + DiagnosticsTask[7];
  v11 = sub_21FC5A98C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  __swift_destroy_boxed_opaque_existential_1(v8 + DiagnosticsTask[8]);
  v12 = v8 + DiagnosticsTask[10];
  v13 = *(void (**)(unint64_t, uint64_t))(v6 + 8);
  v13(v12, v5);
  v13(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t sub_21FA4B8E0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t DiagnosticsTask;
  unint64_t v4;

  DiagnosticsTask = type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0);
  v4 = (*(unsigned __int8 *)(*(_QWORD *)(DiagnosticsTask - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(DiagnosticsTask - 8) + 80);
  sub_21FC5AAAC();
  return sub_21FA4AA14(a1, v1 + v4);
}

unint64_t sub_21FA4B964()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25553EC48;
  if (!qword_25553EC48)
  {
    sub_21FA328AC(255, &qword_25553EC30, (void (*)(uint64_t))sub_21FA49D78, (void (*)(void))sub_21FA49E50);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB98C8], v1);
    atomic_store(result, (unint64_t *)&qword_25553EC48);
  }
  return result;
}

uint64_t sub_21FA4B9D0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v13[4];
  char v14;
  char v15;

  v13[2] = a5;
  v13[1] = a4;
  sub_21FA530F8(0, &qword_25553EF60, (void (*)(void))sub_21FA53150);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v13 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_21FA53150();
  sub_21FC5BEEC();
  v15 = 0;
  v11 = v13[3];
  sub_21FC5BD78();
  if (!v11)
  {
    v14 = 1;
    sub_21FC5BD78();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_21FA4BB08()
{
  _BYTE *v0;

  if (*v0)
    return 6581861;
  else
    return 0x7472617473;
}

uint64_t sub_21FA4BB38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_21FA537A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_21FA4BB5C()
{
  sub_21FA53150();
  return sub_21FC5BF10();
}

uint64_t sub_21FA4BB84()
{
  sub_21FA53150();
  return sub_21FC5BF1C();
}

uint64_t sub_21FA4BBAC(_QWORD *a1)
{
  uint64_t *v1;

  return sub_21FA4B9D0(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_21FA4BBC8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v3 = v1;
  sub_21FA530F8(0, &qword_25553EF00, (void (*)(void))sub_21FA52DB0);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v11 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_21FA52DB0();
  sub_21FC5BEEC();
  v17 = 0;
  sub_21FC5BD78();
  if (!v2)
  {
    v16 = 1;
    sub_21FC5BD78();
    v15 = 2;
    sub_21FC5BD84();
    v14 = 3;
    sub_21FC5BD78();
    v13 = 4;
    sub_21FC5BD78();
    v11[1] = *(_QWORD *)(v3 + 72);
    v12 = 5;
    sub_21FA52DF4();
    sub_21FA52EE8(&qword_25553EF28, (uint64_t (*)(uint64_t))sub_21FA52DF4, sub_21FA52ECC);
    sub_21FC5BD9C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_21FA4BDD4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21FA4BDFC + 4 * byte_21FC5EE40[*v0]))(1702125924, 0xE400000000000000);
}

uint64_t sub_21FA4BDFC()
{
  return 0x736E6F6974706FLL;
}

uint64_t sub_21FA4BE14()
{
  return 0x64657370616C65;
}

uint64_t sub_21FA4BE2C()
{
  return 0x646C697562;
}

uint64_t sub_21FA4BE40()
{
  return 0x656369766564;
}

uint64_t sub_21FA4BE54()
{
  return 0x74757074756FLL;
}

uint64_t sub_21FA4BE68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_21FA53878(a1, a2);
  *a3 = result;
  return result;
}

void sub_21FA4BE8C(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_21FA4BE98()
{
  sub_21FA52DB0();
  return sub_21FC5BF10();
}

uint64_t sub_21FA4BEC0()
{
  sub_21FA52DB0();
  return sub_21FC5BF1C();
}

uint64_t sub_21FA4BEE8(_QWORD *a1)
{
  return sub_21FA4BBC8(a1);
}

void sub_21FA4BF28(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t *v35;
  char *v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void (*v65)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  id v74;
  void *v75;
  id v76;
  uint64_t v77;
  char *v78;
  id *v79;
  uint64_t *v80;
  id v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  char *v88;
  id v89;
  void *v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  int64_t v97;
  char *v98;
  int64_t v99;
  int v100;
  int v101;
  char v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  void (*v107)(char *, uint64_t, uint64_t);
  int v108;
  id v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(id *, uint64_t);
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  int64_t v119;
  uint64_t v120;
  char v121;
  void *v122;
  id v123;
  void (*v124)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v125;
  char *v126;
  id v127;
  int *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  id *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;

  v137 = a2;
  v5 = sub_21FC5ACD4();
  v134 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v130 = (char *)&v123 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v136 = (id *)((char *)&v123 - v9);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v135 = (char *)&v123 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v133 = (char *)&v123 - v12;
  v13 = sub_21FC5AAAC();
  v139 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v131 = (char *)&v123 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, v15, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v126 = (char *)&v123 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v138 = (uint64_t)&v123 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v125 = (char *)&v123 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v132 = (char *)&v123 - v23;
  v24 = sub_21FC5AC5C();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v123 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = objc_msgSend(a1, sel_identifier);
  sub_21FC5AADC();

  v29 = objc_msgSend(a1, sel_provenance);
  v30 = objc_msgSend(v29, sel_title);

  v31 = sub_21FC5B604();
  v33 = v32;

  v34 = (int *)type metadata accessor for AccountSummary(0);
  v35 = (uint64_t *)(a3 + v34[5]);
  *v35 = v31;
  v35[1] = v33;
  v123 = a1;
  v36 = (char *)objc_msgSend(a1, sel_clinicalSharingStatus);
  v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD15D0]), sel_init);
  sub_21FC5AC50();
  v38 = (void *)sub_21FC5AC38();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  v127 = v37;
  objc_msgSend(v37, sel_setTimeZone_, v38);

  objc_msgSend(v36, sel_featureStatus);
  v39 = (id)HKClinicalSharingFeatureStatusToString();
  v40 = sub_21FC5B604();
  v42 = v41;

  v43 = (uint64_t *)(a3 + v34[6]);
  *v43 = v40;
  v43[1] = v42;
  objc_msgSend(v36, sel_userStatus);
  v44 = (id)HKClinicalSharingUserStatusToString();
  v45 = sub_21FC5B604();
  v47 = v46;

  v48 = (uint64_t *)(a3 + v34[7]);
  *v48 = v45;
  v48[1] = v47;
  objc_msgSend(v36, sel_multiDeviceStatus);
  v49 = (id)HKClinicalSharingMultiDeviceStatusToString();
  v50 = sub_21FC5B604();
  v52 = v51;

  v128 = v34;
  v129 = a3;
  v53 = (uint64_t *)(a3 + v34[8]);
  *v53 = v50;
  v53[1] = v52;
  v54 = objc_msgSend(v36, sel_primaryDeviceName);
  if (v54)
  {
    v55 = v54;
    v56 = sub_21FC5B604();
    v58 = v57;

  }
  else
  {
    v56 = 0;
    v58 = 0;
  }
  v59 = (uint64_t *)(v129 + v128[9]);
  *v59 = v56;
  v59[1] = v58;
  v60 = objc_msgSend(v36, sel_firstSharedDate);
  v61 = v137;
  v62 = v139;
  v63 = (uint64_t)v132;
  if (v60)
  {
    v64 = v60;
    sub_21FC5AA94();

    v65 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56);
    v66 = (char *)v63;
    v67 = 0;
  }
  else
  {
    v65 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 56);
    v66 = v132;
    v67 = 1;
  }
  v124 = v65;
  v65((uint64_t)v66, v67, 1, v13);
  v68 = (uint64_t)v125;
  sub_21FA44968(v63, (uint64_t)v125, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  v69 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
  if (v69(v68, 1, v13) == 1)
  {
    v70 = 0;
    v71 = 0;
  }
  else
  {
    v72 = v13;
    v73 = v131;
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 32))(v131, v68, v72);
    v74 = v127;
    v75 = (void *)sub_21FC5AA64();
    v76 = objc_msgSend(v74, sel_stringFromDate_, v75);

    v70 = sub_21FC5B604();
    v71 = v77;

    v78 = v73;
    v13 = v72;
    v63 = (uint64_t)v132;
    (*(void (**)(char *, uint64_t))(v139 + 8))(v78, v13);

    v62 = v139;
  }
  v79 = v136;
  sub_21FA2D1F8(v63, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  v80 = (uint64_t *)(v129 + v128[10]);
  *v80 = v70;
  v80[1] = v71;
  v125 = v36;
  v81 = objc_msgSend(v36, sel_lastSharedDate);
  if (v81)
  {
    v82 = v81;
    v83 = v138;
    sub_21FC5AA94();

    v84 = 0;
  }
  else
  {
    v84 = 1;
    v83 = v138;
  }
  v85 = (uint64_t)v126;
  v124(v83, v84, 1, v13);
  sub_21FA44968(v83, v85, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  if (v69(v85, 1, v13) == 1)
  {
    sub_21FA2D1F8(v83, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
    v86 = (_QWORD *)(v129 + v128[11]);
    *v86 = 0;
    v86[1] = 0;
  }
  else
  {
    v87 = v13;
    v88 = v131;
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 32))(v131, v85, v87);
    v89 = v127;
    v90 = (void *)sub_21FC5AA64();
    v91 = objc_msgSend(v89, sel_stringFromDate_, v90);

    v92 = sub_21FC5B604();
    v93 = v62;
    v95 = v94;

    (*(void (**)(char *, uint64_t))(v93 + 8))(v88, v87);
    sub_21FA2D1F8(v138, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
    v96 = (uint64_t *)(v129 + v128[11]);
    *v96 = v92;
    v96[1] = v95;
  }
  v97 = *(_QWORD *)(v61 + 16);
  v98 = v135;
  if (v97)
  {
    v140 = MEMORY[0x24BEE4AF8];
    sub_21FC01924(0, v97, 0);
    v99 = sub_21FA4F874(v61);
    v101 = v100;
    v103 = v102 & 1;
    v132 = (char *)(v61 + 56);
    LODWORD(v131) = *MEMORY[0x24BE458E8];
    while ((v99 & 0x8000000000000000) == 0 && v99 < 1 << *(_BYTE *)(v61 + 32))
    {
      if (((*(_QWORD *)&v132[((unint64_t)v99 >> 3) & 0xFFFFFFFFFFFFF8] >> v99) & 1) == 0)
        goto LABEL_34;
      if (*(_DWORD *)(v61 + 36) != v101)
        goto LABEL_35;
      LODWORD(v139) = v103;
      v104 = *(_QWORD *)(v61 + 48);
      v106 = v133;
      v105 = v134;
      v107 = *(void (**)(char *, uint64_t, uint64_t))(v134 + 16);
      v107(v133, v104 + *(_QWORD *)(v134 + 72) * v99, v5);
      (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v98, v106, v5);
      v107((char *)v79, (uint64_t)v98, v5);
      v108 = (*(uint64_t (**)(id *, uint64_t))(v105 + 88))(v79, v5);
      if (v108 == (_DWORD)v131)
      {
        (*(void (**)(id *, uint64_t))(v105 + 96))(v79, v5);
        v109 = *v79;
        v110 = objc_msgSend(*v79, sel_identifier);
        v138 = sub_21FC5B604();
        v112 = v111;

        (*(void (**)(char *, uint64_t))(v105 + 8))(v98, v5);
      }
      else
      {
        v107(v130, (uint64_t)v98, v5);
        v138 = sub_21FC5B64C();
        v112 = v113;
        v114 = *(void (**)(id *, uint64_t))(v105 + 8);
        v114(v79, v5);
        v114((id *)v98, v5);
      }
      v115 = v140;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21FC01924(0, *(_QWORD *)(v115 + 16) + 1, 1);
        v115 = v140;
      }
      v117 = *(_QWORD *)(v115 + 16);
      v116 = *(_QWORD *)(v115 + 24);
      if (v117 >= v116 >> 1)
      {
        sub_21FC01924(v116 > 1, v117 + 1, 1);
        v115 = v140;
      }
      *(_QWORD *)(v115 + 16) = v117 + 1;
      v118 = v115 + 16 * v117;
      v61 = v137;
      *(_QWORD *)(v118 + 32) = v138;
      *(_QWORD *)(v118 + 40) = v112;
      v119 = sub_21FA4F914(v99, v101, v139 & 1, v61);
      v99 = v119;
      v101 = v120;
      v103 = v121 & 1;
      --v97;
      v98 = v135;
      v79 = v136;
      if (!v97)
      {
        sub_21FA51358(v119, v120, v103);
        swift_bridgeObjectRelease();
        goto LABEL_32;
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v115 = MEMORY[0x24BEE4AF8];
LABEL_32:
    v140 = v115;
    swift_bridgeObjectRetain();
    sub_21FA4D008(&v140);
    v122 = v125;
    swift_bridgeObjectRelease();

    *(_QWORD *)(v129 + v128[12]) = v140;
  }
}

uint64_t sub_21FA4C8D0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21FA4C8FC + 4 * byte_21FC5EE46[a1]))(1684632949, 0xE400000000000000);
}

uint64_t sub_21FA4C8FC()
{
  return 0x656C746974;
}

uint64_t sub_21FA4C910()
{
  return 0x5365727574616566;
}

uint64_t sub_21FA4C934()
{
  return 0x7461745372657375;
}

unint64_t sub_21FA4C954()
{
  return 0xD000000000000011;
}

uint64_t sub_21FA4C97C()
{
  return 0x6168537473726966;
}

uint64_t sub_21FA4C99C()
{
  return 0x726168537473616CLL;
}

uint64_t sub_21FA4C9B8()
{
  return 0x7A69726F68747561;
}

uint64_t sub_21FA4C9DC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;

  v3 = v1;
  sub_21FA530F8(0, &qword_25553EF48, (void (*)(void))sub_21FA53008);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v12[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_21FA53008();
  sub_21FC5BEEC();
  LOBYTE(v13) = 0;
  sub_21FC5AAF4();
  sub_21FA2A08C(&qword_25406BE70, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  sub_21FC5BD9C();
  if (!v2)
  {
    v10 = type metadata accessor for AccountSummary(0);
    LOBYTE(v13) = 1;
    sub_21FC5BD78();
    LOBYTE(v13) = 2;
    sub_21FC5BD78();
    LOBYTE(v13) = 3;
    sub_21FC5BD78();
    LOBYTE(v13) = 4;
    sub_21FC5BD78();
    LOBYTE(v13) = 5;
    sub_21FC5BD48();
    LOBYTE(v13) = 6;
    sub_21FC5BD48();
    LOBYTE(v13) = 7;
    sub_21FC5BD48();
    v13 = *(_QWORD *)(v3 + *(int *)(v10 + 48));
    v12[15] = 8;
    sub_21FA5304C(0, (unint64_t *)&qword_25406BA60);
    sub_21FA53090();
    sub_21FC5BD9C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_21FA4CCC8()
{
  unsigned __int8 *v0;

  return sub_21FA4C8D0(*v0);
}

uint64_t sub_21FA4CCD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_21FA53AD0(a1, a2);
  *a3 = result;
  return result;
}

void sub_21FA4CCF4(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_21FA4CD00()
{
  sub_21FA53008();
  return sub_21FC5BF10();
}

uint64_t sub_21FA4CD28()
{
  sub_21FA53008();
  return sub_21FC5BF1C();
}

uint64_t sub_21FA4CD50(_QWORD *a1)
{
  return sub_21FA4C9DC(a1);
}

uint64_t sub_21FA4CD64@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  id v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  id v37[2];

  v36 = a3;
  v37[1] = *(id *)MEMORY[0x24BDAC8D0];
  v8 = sub_21FC5A98C();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v29 - v13;
  result = a2(a1);
  if (!v4)
  {
    v32 = v8;
    v33 = v9;
    v30 = a1;
    v31 = a4;
    v18 = result;
    v34 = v17;
    v35 = v16;
    v19 = v36;
    sub_21FC5A92C();
    sub_21FC5A944();
    v20 = *(void **)(v19 + *(int *)(type metadata accessor for PublisherOutputWriter() + 20));
    v21 = (void *)sub_21FC5A920();
    v37[0] = 0;
    LODWORD(v20) = objc_msgSend(v20, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v21, 1, 0, v37);

    if ((_DWORD)v20)
    {
      v22 = v37[0];
      v23 = v35;
      sub_21FC5AA04();
      v24 = v32;
      v25 = *(void (**)(char *, uint64_t))(v33 + 8);
      v25(v12, v32);
      v25(v14, v24);
      sub_21FA2D120(v30, v31, type metadata accessor for ClinicalSharingQueryOutput);
    }
    else
    {
      v26 = v37[0];
      sub_21FC5A8E4();

      swift_willThrow();
      v23 = v35;
      v27 = v32;
      v28 = *(void (**)(char *, uint64_t))(v33 + 8);
      v28(v12, v32);
      v28(v14, v27);
    }
    swift_bridgeObjectRelease();
    return sub_21FA2D770(v18, v23);
  }
  return result;
}

uint64_t sub_21FA4CF90(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    sub_21FBF2778();
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_21FA4D070(v6);
  return sub_21FC5BBEC();
}

uint64_t sub_21FA4D008(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21FBF278C(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_21FA4DB34(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_21FA4D070(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  void *v25;
  id v26;
  char *v27;
  id v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  id v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id *v40;
  int v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  id v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  char *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  char *v62;
  void (*v63)(char *, uint64_t);
  char *v64;
  void *v65;
  void *v66;
  id v67;
  id v68;
  id v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  id v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  void *v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  uint64_t v109;
  char v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  unint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  void (*v152)(char *, uint64_t);
  void **v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  id v161;
  id v162;
  uint64_t v163;

  v159 = sub_21FC5AAF4();
  v157 = *(_QWORD *)(v159 - 8);
  v3 = MEMORY[0x24BDAC7A8](v159);
  v156 = (char *)&v140 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v155 = (char *)&v140 - v6;
  v7 = MEMORY[0x24BDAC7A8](v5);
  v149 = (char *)&v140 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v148 = (char *)&v140 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v146 = (char *)&v140 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v145 = (char *)&v140 - v13;
  v14 = a1[1];
  result = sub_21FC5BDC0();
  if (result >= v14)
  {
    if (v14 < 0)
      goto LABEL_142;
    if (v14)
      return sub_21FA4E21C(0, v14, 1, a1);
    return result;
  }
  if (v14 >= 0)
    v16 = v14;
  else
    v16 = v14 + 1;
  if (v14 < -1)
    goto LABEL_150;
  v144 = result;
  v151 = (char *)v14;
  v154 = v1;
  v140 = a1;
  if (v14 < 2)
  {
    v19 = (char *)MEMORY[0x24BEE4AF8];
    v163 = MEMORY[0x24BEE4AF8];
    v153 = (void **)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v14 != 1)
    {
      v23 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_108:
      if (v23 >= 2)
      {
        v133 = *v140;
        do
        {
          v134 = v23 - 2;
          if (v23 < 2)
            goto LABEL_137;
          if (!v133)
            goto LABEL_149;
          v135 = *(_QWORD *)&v19[16 * v134 + 32];
          v136 = *(_QWORD *)&v19[16 * v23 + 24];
          v137 = v154;
          sub_21FA4E534((void **)(v133 + 8 * v135), (void **)(v133 + 8 * *(_QWORD *)&v19[16 * v23 + 16]), (id *)(v133 + 8 * v136), v153);
          v154 = v137;
          if (v137)
            break;
          if (v136 < v135)
            goto LABEL_138;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v19 = sub_21FBF2764((uint64_t)v19);
          if (v134 >= *((_QWORD *)v19 + 2))
            goto LABEL_139;
          v138 = &v19[16 * v134 + 32];
          *(_QWORD *)v138 = v135;
          *((_QWORD *)v138 + 1) = v136;
          v139 = *((_QWORD *)v19 + 2);
          if (v23 > v139)
            goto LABEL_140;
          memmove(&v19[16 * v23 + 16], &v19[16 * v23 + 32], 16 * (v139 - v23));
          *((_QWORD *)v19 + 2) = v139 - 1;
          v23 = v139 - 1;
        }
        while (v139 > 2);
      }
LABEL_119:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v163 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      sub_21FC5B7C0();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v17 = v16 >> 1;
    sub_21FA508AC();
    v18 = sub_21FC5B7D8();
    *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) = v17;
    v153 = (void **)((v18 & 0xFFFFFFFFFFFFFF8) + 32);
    v163 = v18;
  }
  v20 = 0;
  v21 = *a1;
  v141 = *a1 + 16;
  v142 = v21 - 8;
  v19 = (char *)MEMORY[0x24BEE4AF8];
  v22 = v151;
  v158 = v21;
  while (2)
  {
    v24 = (char *)(v20 + 1);
    v150 = (char *)v20;
    if (v20 + 1 >= (uint64_t)v22)
      goto LABEL_40;
    v25 = *(void **)(v21 + 8 * v20);
    v26 = *(id *)(v21 + 8 * (_QWORD)v24);
    v27 = v25;
    v162 = v26;
    v28 = objc_msgSend(v26, sel_identifier);
    v29 = v145;
    sub_21FC5AADC();

    v30 = sub_21FC5AAB8();
    v32 = v31;
    v33 = *(void (**)(char *, uint64_t))(v157 + 8);
    v34 = v159;
    v33(v29, v159);
    v160 = v27;
    v35 = objc_msgSend(v27, sel_identifier);
    v36 = v146;
    sub_21FC5AADC();

    v37 = sub_21FC5AAB8();
    v39 = v38;
    v152 = v33;
    v33(v36, v34);
    if (v30 == v37 && v32 == v39)
      LODWORD(v161) = 0;
    else
      LODWORD(v161) = sub_21FC5BDF0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v24 = (char *)(v20 + 2);
    v21 = v158;
    if (v20 + 2 >= (uint64_t)v151)
      goto LABEL_31;
    v143 = v19;
    v40 = (id *)(v141 + 8 * v20);
    while (1)
    {
      v160 = v24;
      v42 = *(v40 - 1);
      v43 = *v40;
      v44 = v42;
      v45 = objc_msgSend(v43, sel_identifier);
      v46 = v148;
      sub_21FC5AADC();

      v47 = sub_21FC5AAB8();
      v49 = v48;
      v50 = v159;
      v51 = v152;
      v152(v46, v159);
      v162 = v44;
      v52 = objc_msgSend(v44, sel_identifier);
      v53 = v149;
      sub_21FC5AADC();

      v54 = sub_21FC5AAB8();
      v56 = v55;
      v51(v53, v50);
      if (v47 == v54 && v49 == v56)
      {

        swift_bridgeObjectRelease_n();
        v21 = v158;
        if ((v161 & 1) != 0)
        {
          v19 = v143;
          v24 = v160;
          v20 = (uint64_t)v150;
          goto LABEL_32;
        }
        goto LABEL_23;
      }
      v41 = sub_21FC5BDF0();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v21 = v158;
      if (((v161 ^ v41) & 1) != 0)
        break;
LABEL_23:
      v24 = v160 + 1;
      ++v40;
      if (v151 == v160 + 1)
      {
        v24 = v151;
        v19 = v143;
        goto LABEL_30;
      }
    }
    v19 = v143;
    v24 = v160;
LABEL_30:
    v20 = (uint64_t)v150;
LABEL_31:
    if ((v161 & 1) != 0)
    {
LABEL_32:
      if ((uint64_t)v24 < v20)
        goto LABEL_143;
      if (v20 < (uint64_t)v24)
      {
        v57 = (uint64_t *)(v142 + 8 * (_QWORD)v24);
        v58 = v24;
        v59 = v20;
        v60 = (uint64_t *)(v21 + 8 * v20);
        do
        {
          if ((char *)v59 != --v58)
          {
            if (!v21)
              goto LABEL_148;
            v61 = *v60;
            *v60 = *v57;
            *v57 = v61;
          }
          ++v59;
          --v57;
          ++v60;
        }
        while (v59 < (uint64_t)v58);
      }
    }
LABEL_40:
    if ((uint64_t)v24 >= (uint64_t)v151)
      goto LABEL_60;
    if (__OFSUB__(v24, v20))
      goto LABEL_141;
    if ((uint64_t)&v24[-v20] >= v144)
    {
LABEL_60:
      if ((uint64_t)v24 < v20)
        goto LABEL_136;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v19 = sub_21FBF2344(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
      v84 = *((_QWORD *)v19 + 2);
      v83 = *((_QWORD *)v19 + 3);
      v23 = v84 + 1;
      if (v84 >= v83 >> 1)
        v19 = sub_21FBF2344((char *)(v83 > 1), v84 + 1, 1, v19);
      *((_QWORD *)v19 + 2) = v23;
      v85 = v19 + 32;
      v86 = &v19[16 * v84 + 32];
      *(_QWORD *)v86 = v20;
      *((_QWORD *)v86 + 1) = v24;
      v160 = v24;
      if (!v84)
      {
        v23 = 1;
LABEL_14:
        v22 = v151;
        v20 = (uint64_t)v160;
        if ((uint64_t)v160 >= (uint64_t)v151)
          goto LABEL_108;
        continue;
      }
      while (1)
      {
        v87 = v23 - 1;
        if (v23 >= 4)
        {
          v92 = &v85[16 * v23];
          v93 = *((_QWORD *)v92 - 8);
          v94 = *((_QWORD *)v92 - 7);
          v98 = __OFSUB__(v94, v93);
          v95 = v94 - v93;
          if (v98)
            goto LABEL_125;
          v97 = *((_QWORD *)v92 - 6);
          v96 = *((_QWORD *)v92 - 5);
          v98 = __OFSUB__(v96, v97);
          v90 = v96 - v97;
          v91 = v98;
          if (v98)
            goto LABEL_126;
          v99 = v23 - 2;
          v100 = &v85[16 * v23 - 32];
          v102 = *(_QWORD *)v100;
          v101 = *((_QWORD *)v100 + 1);
          v98 = __OFSUB__(v101, v102);
          v103 = v101 - v102;
          if (v98)
            goto LABEL_128;
          v98 = __OFADD__(v90, v103);
          v104 = v90 + v103;
          if (v98)
            goto LABEL_131;
          if (v104 >= v95)
          {
            v122 = &v85[16 * v87];
            v124 = *(_QWORD *)v122;
            v123 = *((_QWORD *)v122 + 1);
            v98 = __OFSUB__(v123, v124);
            v125 = v123 - v124;
            if (v98)
              goto LABEL_135;
            v115 = v90 < v125;
            goto LABEL_97;
          }
        }
        else
        {
          if (v23 != 3)
          {
            v116 = *((_QWORD *)v19 + 4);
            v117 = *((_QWORD *)v19 + 5);
            v98 = __OFSUB__(v117, v116);
            v109 = v117 - v116;
            v110 = v98;
            goto LABEL_91;
          }
          v89 = *((_QWORD *)v19 + 4);
          v88 = *((_QWORD *)v19 + 5);
          v98 = __OFSUB__(v88, v89);
          v90 = v88 - v89;
          v91 = v98;
        }
        if ((v91 & 1) != 0)
          goto LABEL_127;
        v99 = v23 - 2;
        v105 = &v85[16 * v23 - 32];
        v107 = *(_QWORD *)v105;
        v106 = *((_QWORD *)v105 + 1);
        v108 = __OFSUB__(v106, v107);
        v109 = v106 - v107;
        v110 = v108;
        if (v108)
          goto LABEL_130;
        v111 = &v85[16 * v87];
        v113 = *(_QWORD *)v111;
        v112 = *((_QWORD *)v111 + 1);
        v98 = __OFSUB__(v112, v113);
        v114 = v112 - v113;
        if (v98)
          goto LABEL_133;
        if (__OFADD__(v109, v114))
          goto LABEL_134;
        if (v109 + v114 >= v90)
        {
          v115 = v90 < v114;
LABEL_97:
          if (v115)
            v87 = v99;
          goto LABEL_99;
        }
LABEL_91:
        if ((v110 & 1) != 0)
          goto LABEL_129;
        v118 = &v85[16 * v87];
        v120 = *(_QWORD *)v118;
        v119 = *((_QWORD *)v118 + 1);
        v98 = __OFSUB__(v119, v120);
        v121 = v119 - v120;
        if (v98)
          goto LABEL_132;
        if (v121 < v109)
          goto LABEL_14;
LABEL_99:
        v126 = v87 - 1;
        if (v87 - 1 >= v23)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        if (!v21)
          goto LABEL_147;
        v127 = &v85[16 * v126];
        v128 = *(_QWORD *)v127;
        v129 = &v85[16 * v87];
        v130 = *((_QWORD *)v129 + 1);
        v131 = v154;
        sub_21FA4E534((void **)(v21 + 8 * *(_QWORD *)v127), (void **)(v21 + 8 * *(_QWORD *)v129), (id *)(v21 + 8 * v130), v153);
        v154 = v131;
        if (v131)
          goto LABEL_119;
        if (v130 < v128)
          goto LABEL_122;
        if (v87 > *((_QWORD *)v19 + 2))
          goto LABEL_123;
        *(_QWORD *)v127 = v128;
        *(_QWORD *)&v85[16 * v126 + 8] = v130;
        v132 = *((_QWORD *)v19 + 2);
        if (v87 >= v132)
          goto LABEL_124;
        v23 = v132 - 1;
        memmove(&v85[16 * v87], v129 + 16, 16 * (v132 - 1 - v87));
        *((_QWORD *)v19 + 2) = v132 - 1;
        if (v132 <= 2)
          goto LABEL_14;
      }
    }
    break;
  }
  if (__OFADD__(v20, v144))
    goto LABEL_144;
  v62 = v151;
  if (v20 + v144 < (uint64_t)v151)
    v62 = (char *)(v20 + v144);
  if ((uint64_t)v62 >= v20)
  {
    if (v24 != v62)
    {
      v143 = v19;
      v63 = (void (*)(char *, uint64_t))(v142 + 8 * (_QWORD)v24);
      v147 = v62;
      do
      {
        v65 = *(void **)(v21 + 8 * (_QWORD)v24);
        v152 = v63;
        v160 = v24;
        while (1)
        {
          v66 = *(void **)v63;
          v67 = v65;
          v68 = v66;
          v161 = v67;
          v69 = objc_msgSend(v67, sel_identifier);
          v70 = v155;
          sub_21FC5AADC();

          v71 = sub_21FC5AAB8();
          v73 = v72;
          v74 = *(void (**)(char *, uint64_t))(v157 + 8);
          v75 = v159;
          v74(v70, v159);
          v162 = v68;
          v76 = objc_msgSend(v68, sel_identifier);
          v77 = v156;
          sub_21FC5AADC();

          v78 = sub_21FC5AAB8();
          v80 = v79;
          v74(v77, v75);
          if (v71 == v78 && v73 == v80)
            break;
          v81 = sub_21FC5BDF0();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v21 = v158;
          if ((v81 & 1) == 0)
            goto LABEL_50;
          v64 = v160;
          if (!v158)
            goto LABEL_146;
          v82 = *(void **)v63;
          v65 = (void *)*((_QWORD *)v63 + 1);
          *(_QWORD *)v63 = v65;
          *((_QWORD *)v63 + 1) = v82;
          v63 = (void (*)(char *, uint64_t))((char *)v63 - 8);
          if (v64 == (char *)++v20)
            goto LABEL_51;
        }

        swift_bridgeObjectRelease_n();
        v21 = v158;
LABEL_50:
        v64 = v160;
LABEL_51:
        v24 = v64 + 1;
        v63 = (void (*)(char *, uint64_t))((char *)v152 + 8);
        v20 = (uint64_t)v150;
      }
      while (v24 != v147);
      v24 = v147;
      v19 = v143;
    }
    goto LABEL_60;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  result = sub_21FC5BC64();
  __break(1u);
  return result;
}

uint64_t sub_21FA4DB34(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = sub_21FC5BDC0();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_21FA4E468(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v105 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_118:
      v94 = v11;
      v104 = v8;
      if (v12 >= 2)
      {
        v95 = *v102;
        do
        {
          v96 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v95)
            goto LABEL_159;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v12 + 24];
          sub_21FA4EAC8((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(_QWORD *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = sub_21FBF2764((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_149;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v12 > v101)
            goto LABEL_150;
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_21FC5B7D8();
    *(_QWORD *)(v7 + 16) = v6;
    v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v103 = v10 + 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v106 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = sub_21FC5BDF0();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v103 + 16 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ sub_21FC5BDF0()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 2;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 16 * v20;
        v26 = 16 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = v10 + v25;
            v30 = *(_QWORD *)(v10 + v26);
            v31 = *(_QWORD *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(_QWORD *)(v29 - 16) = v30;
            *(_QWORD *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v105)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_21FBF2344(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v41 = *((_QWORD *)v11 + 2);
    v40 = *((_QWORD *)v11 + 3);
    v12 = v41 + 1;
    if (v41 >= v40 >> 1)
      v11 = sub_21FBF2344((char *)(v40 > 1), v41 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v42 = v11 + 32;
    v43 = &v11[16 * v41 + 32];
    *(_QWORD *)v43 = v13;
    *((_QWORD *)v43 + 1) = v9;
    if (v41)
    {
      v107 = v9;
      while (1)
      {
        v44 = v12 - 1;
        if (v12 >= 4)
        {
          v49 = &v42[16 * v12];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_135;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_136;
          v56 = v12 - 2;
          v57 = &v42[16 * v12 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_138;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_141;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_145;
            v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v73 = *((_QWORD *)v11 + 4);
            v74 = *((_QWORD *)v11 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_99;
          }
          v46 = *((_QWORD *)v11 + 4);
          v45 = *((_QWORD *)v11 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_137;
        v56 = v12 - 2;
        v62 = &v42[16 * v12 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_140;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_143;
        if (__OFADD__(v66, v71))
          goto LABEL_144;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_105:
          if (v72)
            v44 = v56;
          goto LABEL_107;
        }
LABEL_99:
        if ((v67 & 1) != 0)
          goto LABEL_139;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_142;
        if (v78 < v66)
          goto LABEL_15;
LABEL_107:
        v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        v84 = v10;
        if (!v10)
          goto LABEL_157;
        v85 = v11;
        v86 = &v42[16 * v83];
        v87 = *(_QWORD *)v86;
        v88 = v42;
        v89 = v44;
        v90 = &v42[16 * v44];
        v91 = *((_QWORD *)v90 + 1);
        v92 = v84;
        sub_21FA4EAC8((char *)(v84 + 16 * *(_QWORD *)v86), (char *)(v84 + 16 * *(_QWORD *)v90), v84 + 16 * v91, __dst);
        if (v1)
          goto LABEL_115;
        if (v91 < v87)
          goto LABEL_132;
        if (v89 > *((_QWORD *)v85 + 2))
          goto LABEL_133;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v88[16 * v83 + 8] = v91;
        v93 = *((_QWORD *)v85 + 2);
        if (v89 >= v93)
          goto LABEL_134;
        v11 = v85;
        v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        v42 = v88;
        *((_QWORD *)v85 + 2) = v93 - 1;
        v10 = v92;
        v9 = v107;
        if (v93 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v106;
    if (v9 >= v106)
    {
      v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105))
    goto LABEL_153;
  if (v13 + v105 >= v3)
    v32 = v3;
  else
    v32 = v13 + v105;
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      v33 = (_QWORD *)(v10 + 16 * v9);
      do
      {
        v34 = (uint64_t *)(v10 + 16 * v9);
        v35 = *v34;
        v36 = v34[1];
        v37 = v13;
        v38 = v33;
        do
        {
          v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (sub_21FC5BDF0() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v35 = *v38;
          v36 = v38[1];
          *(_OWORD *)v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = sub_21FC5BC64();
  __break(1u);
  return result;
}

uint64_t sub_21FA4E21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  id v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;

  v35 = a1;
  v7 = sub_21FC5AAF4();
  v39 = *(_QWORD *)(v7 - 8);
  v40 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v38 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v8);
  v37 = (char *)&v33 - v11;
  v34 = a2;
  if (a3 != a2)
  {
    v41 = *a4;
    v12 = v41 + 8 * a3 - 8;
    v13 = v40;
LABEL_6:
    v15 = *(void **)(v41 + 8 * a3);
    v16 = v35;
    v36 = v12;
    v42 = a3;
    while (1)
    {
      v17 = *(void **)v12;
      v18 = v15;
      v19 = v17;
      v43 = v18;
      v20 = objc_msgSend(v18, sel_identifier);
      v21 = v37;
      sub_21FC5AADC();

      v22 = sub_21FC5AAB8();
      v24 = v23;
      v25 = *(void (**)(char *, uint64_t))(v39 + 8);
      v25(v21, v13);
      v44 = v19;
      v26 = objc_msgSend(v19, sel_identifier);
      v27 = v38;
      sub_21FC5AADC();

      v28 = sub_21FC5AAB8();
      v30 = v29;
      v25(v27, v13);
      if (v22 == v28 && v24 == v30)
      {

        result = swift_bridgeObjectRelease_n();
        v14 = v42;
LABEL_5:
        a3 = v14 + 1;
        v12 = v36 + 8;
        if (a3 == v34)
          return result;
        goto LABEL_6;
      }
      v31 = sub_21FC5BDF0();

      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v14 = v42;
      if ((v31 & 1) == 0)
        goto LABEL_5;
      if (!v41)
        break;
      v32 = *(void **)v12;
      v15 = *(void **)(v12 + 8);
      *(_QWORD *)v12 = v15;
      *(_QWORD *)(v12 + 8) = v32;
      v12 -= 8;
      if (v14 == ++v16)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_21FA4E468(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (result = sub_21FC5BDF0(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_21FA4E534(void **a1, void **a2, id *a3, void **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  id *v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  id v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  id *v40;
  void **v41;
  id *v42;
  void **v43;
  id *v44;
  void **v45;
  void **v46;
  char *v47;
  id *v48;
  void *v49;
  void *v50;
  void *v51;
  void **v52;
  char *v53;
  id v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  char *v60;
  uint64_t v61;
  id v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char v68;
  void **v69;
  id *v70;
  void **v71;
  uint64_t result;
  uint64_t v73;
  char *v74;
  char *v75;
  void **v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  id *v81;
  void **v82;
  void **v83;
  id *v84;
  void **v85;
  void **v86;
  void **v87;

  v8 = sub_21FC5AAF4();
  v79 = *(_QWORD *)(v8 - 8);
  v80 = v8;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v75 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v74 = (char *)&v73 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v78 = (char *)&v73 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v77 = (char *)&v73 - v15;
  v16 = (char *)a2 - (char *)a1;
  v17 = (char *)a2 - (char *)a1 + 7;
  if ((char *)a2 - (char *)a1 >= 0)
    v17 = (char *)a2 - (char *)a1;
  v18 = v17 >> 3;
  v19 = a2;
  v20 = (char *)a3 - (char *)a2;
  v21 = v20 / 8;
  v87 = a1;
  v83 = a4;
  v86 = a4;
  if (v17 >> 3 >= v20 / 8)
  {
    if (v20 < -7)
      goto LABEL_49;
    v45 = v83;
    v46 = v19;
    if (v83 != v19 || &v19[v21] <= v83)
      memmove(v83, v19, 8 * v21);
    v47 = (char *)&v45[v21];
    v85 = (void **)v47;
    v87 = v46;
    if (v20 < 8 || a1 >= v46)
    {
LABEL_48:
      sub_21FBF2438(&v87, &v86, &v85);
      return 1;
    }
    v48 = v46;
    v82 = a1;
    while (1)
    {
      v84 = v46;
      v81 = a3;
      v78 = v47;
      v50 = (void *)*((_QWORD *)v47 - 1);
      v47 -= 8;
      v49 = v50;
      v51 = *--v48;
      v52 = v49;
      v53 = v51;
      v76 = v52;
      v54 = objc_msgSend(v52, sel_identifier);
      v55 = v74;
      sub_21FC5AADC();

      v56 = sub_21FC5AAB8();
      v58 = v57;
      v59 = *(void (**)(char *, uint64_t))(v79 + 8);
      v60 = v55;
      v61 = v80;
      v59(v60, v80);
      v77 = v53;
      v62 = objc_msgSend(v53, sel_identifier);
      v63 = v75;
      sub_21FC5AADC();

      v64 = sub_21FC5AAB8();
      v66 = v65;
      v59(v63, v61);
      if (v56 == v64 && v58 == v66)
        break;
      v68 = sub_21FC5BDF0();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v67 = (char *)v81;
      a3 = v81 - 1;
      if ((v68 & 1) == 0)
        goto LABEL_44;
      v69 = v83;
      v70 = v82;
      v47 = v78;
      if (v81 != v84 || a3 >= v84)
        *a3 = *v48;
      v87 = v48;
      if (v47 <= (char *)v69)
        goto LABEL_48;
LABEL_34:
      v46 = v48;
      if (v48 <= v70)
        goto LABEL_48;
    }

    swift_bridgeObjectRelease_n();
    v67 = (char *)v81;
    a3 = v81 - 1;
LABEL_44:
    v70 = v82;
    v71 = v83;
    v85 = (void **)v47;
    if (v67 < v78 || a3 >= (id *)v78 || v67 != v78)
      *a3 = *(id *)v47;
    v48 = v84;
    if (v47 <= (char *)v71)
      goto LABEL_48;
    goto LABEL_34;
  }
  if (v16 >= -7)
  {
    v22 = v83;
    v23 = v19;
    if (v83 != a1 || &a1[v18] <= v83)
      memmove(v83, a1, 8 * v18);
    v76 = &v22[v18];
    v85 = v76;
    if (v16 >= 8 && v23 < a3)
    {
      v81 = a3;
      v24 = v80;
      while (1)
      {
        v82 = a1;
        v83 = v22;
        v84 = v23;
        v25 = *v22;
        v26 = *v23;
        v27 = v25;
        v28 = objc_msgSend(v26, sel_identifier);
        v29 = v77;
        sub_21FC5AADC();

        v30 = sub_21FC5AAB8();
        v32 = v31;
        v33 = *(void (**)(char *, uint64_t))(v79 + 8);
        v33(v29, v24);
        v34 = objc_msgSend(v27, sel_identifier);
        v35 = v78;
        sub_21FC5AADC();

        v36 = sub_21FC5AAB8();
        v38 = v37;
        v33(v35, v24);
        if (v30 == v36 && v32 == v38)
        {

          swift_bridgeObjectRelease_n();
        }
        else
        {
          v39 = sub_21FC5BDF0();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v39 & 1) != 0)
          {
            v22 = v83;
            v40 = v84 + 1;
            v42 = v81;
            v41 = v82;
            if (v82 < v84 || v82 >= v40 || v82 != v84)
              *v82 = *v84;
            goto LABEL_22;
          }
        }
        v41 = v82;
        v43 = v83;
        v42 = v81;
        v44 = v84;
        if (v82 != v83)
          *v82 = *v83;
        v22 = v43 + 1;
        v86 = v22;
        v40 = v44;
LABEL_22:
        a1 = v41 + 1;
        v87 = a1;
        if (v22 < v76)
        {
          v23 = v40;
          if (v40 < v42)
            continue;
        }
        goto LABEL_48;
      }
    }
    goto LABEL_48;
  }
LABEL_49:
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

uint64_t sub_21FA4EAC8(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v17 = &v4[16 * v13];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (char *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 16;
          v21 = *((_QWORD *)v19 - 2);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 16;
          v23 = *((_QWORD *)v17 - 2) == v21 && *((_QWORD *)v17 - 1) == v22;
          if (v23 || (sub_21FC5BDF0() & 1) == 0)
          {
            v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            v19 = v6;
            v17 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_OWORD *)v18 = *(_OWORD *)v19;
            v27 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 16;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (sub_21FC5BDF0() & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_50:
    sub_21FBF243C((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

uint64_t sub_21FA4ED60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t, uint64_t);
  uint64_t v72;

  v2 = sub_21FC5ACD4();
  v69 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v49 - v6;
  v8 = sub_21FC5AAF4();
  v56 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v54 = (char *)&v49 - v12;
  sub_21FA511A8();
  result = sub_21FC5BC88();
  v14 = (_QWORD *)result;
  v15 = 0;
  v58 = a1;
  v16 = *(_QWORD *)(a1 + 64);
  v50 = a1 + 64;
  v17 = 1 << *(_BYTE *)(a1 + 32);
  if (v17 < 64)
    v18 = ~(-1 << v17);
  else
    v18 = -1;
  v19 = v18 & v16;
  v51 = (unint64_t)(v17 + 63) >> 6;
  v52 = result + 64;
  v57 = v8;
  v55 = v11;
  v53 = (_QWORD *)result;
  if (!v19)
    goto LABEL_6;
LABEL_5:
  v59 = (v19 - 1) & v19;
  v60 = v15;
  for (i = __clz(__rbit64(v19)) | (v15 << 6); ; i = __clz(__rbit64(v22)) + (v23 << 6))
  {
    v25 = v58;
    v26 = *(_QWORD *)(v58 + 48);
    v27 = v56;
    v63 = *(_QWORD *)(v56 + 72) * i;
    v28 = v54;
    (*(void (**)(char *, unint64_t, uint64_t))(v56 + 16))(v54, v26 + v63, v8);
    v29 = *(_QWORD *)(v25 + 56);
    v64 = i;
    v30 = *(_QWORD *)(v29 + 8 * i);
    v62 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    v62(v11, v28, v8);
    v31 = *(_QWORD *)(v30 + 16);
    v32 = sub_21FA2A08C(&qword_25406BC08, (uint64_t (*)(uint64_t))MEMORY[0x24BE45940], MEMORY[0x24BE45950]);
    swift_bridgeObjectRetain();
    v66 = v32;
    v33 = sub_21FC5B898();
    v67 = v31;
    v61 = v30;
    if (v31)
    {
      v34 = 0;
      v65 = v30 + ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80));
      v35 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 16);
      v70 = *(_QWORD *)(v69 + 72);
      v71 = v35;
      do
      {
        v68 = v34;
        v71(v7, v65 + v70 * v34, v2);
        swift_bridgeObjectRetain();
        v39 = v7;
        v40 = sub_21FC5B58C();
        v41 = -1 << *(_BYTE *)(v33 + 32);
        v42 = v40 & ~v41;
        if (((*(_QWORD *)(v33 + 56 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) != 0)
        {
          v43 = ~v41;
          while (1)
          {
            v71(v5, *(_QWORD *)(v33 + 48) + v42 * v70, v2);
            sub_21FA2A08C(&qword_25553ECD8, (uint64_t (*)(uint64_t))MEMORY[0x24BE45940], MEMORY[0x24BE45958]);
            v44 = sub_21FC5B5D4();
            v37 = *(void (**)(char *, uint64_t))(v69 + 8);
            v37(v5, v2);
            if ((v44 & 1) != 0)
              break;
            v42 = (v42 + 1) & v43;
            if (((*(_QWORD *)(v33 + 56 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) == 0)
              goto LABEL_22;
          }
          swift_bridgeObjectRelease();
          v7 = v39;
        }
        else
        {
LABEL_22:
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v7 = v39;
          v71(v5, (uint64_t)v39, v2);
          v72 = v33;
          sub_21FBEEDD4((uint64_t)v5, v42, isUniquelyReferenced_nonNull_native);
          v33 = v72;
          swift_bridgeObjectRelease();
          v37 = *(void (**)(char *, uint64_t))(v69 + 8);
        }
        v38 = v68;
        v37(v7, v2);
        v34 = v38 + 1;
      }
      while (v34 != v67);
    }
    swift_bridgeObjectRelease();
    v45 = v64;
    v14 = v53;
    *(_QWORD *)(v52 + ((v64 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v64;
    v11 = v55;
    v8 = v57;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v62)(v14[6] + v63, v55, v57);
    *(_QWORD *)(v14[7] + 8 * v45) = v33;
    v46 = v14[2];
    v47 = __OFADD__(v46, 1);
    v48 = v46 + 1;
    if (v47)
    {
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    v14[2] = v48;
    v19 = v59;
    v15 = v60;
    if (v59)
      goto LABEL_5;
LABEL_6:
    v21 = v15 + 1;
    if (__OFADD__(v15, 1))
      goto LABEL_35;
    if (v21 >= v51)
      return (uint64_t)v14;
    v22 = *(_QWORD *)(v50 + 8 * v21);
    v23 = v15 + 1;
    if (!v22)
    {
      v23 = v15 + 2;
      if (v15 + 2 >= v51)
        return (uint64_t)v14;
      v22 = *(_QWORD *)(v50 + 8 * v23);
      if (!v22)
      {
        v23 = v15 + 3;
        if (v15 + 3 >= v51)
          return (uint64_t)v14;
        v22 = *(_QWORD *)(v50 + 8 * v23);
        if (!v22)
          break;
      }
    }
LABEL_19:
    v59 = (v22 - 1) & v22;
    v60 = v23;
  }
  v24 = v15 + 4;
  if (v15 + 4 >= v51)
    return (uint64_t)v14;
  v22 = *(_QWORD *)(v50 + 8 * v24);
  if (v22)
  {
    v23 = v15 + 4;
    goto LABEL_19;
  }
  while (1)
  {
    v23 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v23 >= v51)
      return (uint64_t)v14;
    v22 = *(_QWORD *)(v50 + 8 * v23);
    ++v24;
    if (v22)
      goto LABEL_19;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_21FA4F298(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[5];

  sub_21FA2D1A0(0, &qword_25553ECA0, MEMORY[0x24BDCEEA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v37[2] = (char *)v37 - v11;
  v12 = sub_21FC5AC5C();
  MEMORY[0x24BDAC7A8](v12);
  v37[1] = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_21FC5AB0C();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)v37 - v19;
  v38 = sub_21FC5AC08();
  v41 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v22 = (char *)v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42[3] = &type metadata for ClinicalSharingQueryDefaultDataProvider;
  v42[4] = &off_24E48F518;
  v23 = (_OWORD *)swift_allocObject();
  v42[0] = v23;
  v24 = a1[1];
  v23[1] = *a1;
  v23[2] = v24;
  v25 = a1[3];
  v23[3] = a1[2];
  v23[4] = v25;
  v26 = OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_isoDateFormatter;
  *(_QWORD *)(a5 + v26) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD15D0]), sel_init);
  *(_QWORD *)(a5 + 56) = a2;
  sub_21FA2CEA0((uint64_t)v42, a5 + 16);
  v39 = a5;
  v27 = a5 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_date;
  v28 = sub_21FC5AAAC();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
  v40 = a4;
  v30(v27, a4, v28);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v20, *MEMORY[0x24BDCEF70], v14);
  sub_21FC5AB24();
  sub_21FA2A08C(&qword_25553ECA8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEF80], MEMORY[0x24BDCEF98]);
  LOBYTE(v27) = sub_21FC5B5D4();
  v31 = *(void (**)(char *, uint64_t))(v15 + 8);
  v31(v18, v14);
  if ((v27 & 1) != 0)
  {
    v32 = a3;
    v33 = v38;
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v22, a3, v38);
  }
  else
  {
    sub_21FC5AB18();
    v32 = a3;
    sub_21FC5ABD8();
    sub_21FC5ABE4();
    sub_21FC5ABA8();
    sub_21FC5ABB4();
    v33 = v38;
  }
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v40, v28);
  v34 = v41;
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v32, v33);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
  v31(v20, v14);
  v35 = v39;
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v39 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_gregorianCalendar, v22, v33);
  return v35;
}

uint64_t sub_21FA4F5F8(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[5];
  _BYTE v36[24];
  uint64_t v37;
  _QWORD v38[5];

  v32 = a4;
  v33 = a3;
  v34 = a1;
  v7 = sub_21FC5AAAC();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_21FC5AC08();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38[3] = &type metadata for ClinicalSharingQueryDefaultDataProvider;
  v38[4] = &off_24E48F518;
  v15 = (_OWORD *)swift_allocObject();
  v38[0] = v15;
  v16 = a2[1];
  v15[1] = *a2;
  v15[2] = v16;
  v17 = a2[3];
  v15[3] = a2[2];
  v15[4] = v17;
  sub_21FA2CEA0((uint64_t)v38, (uint64_t)v36);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a4, v7);
  v18 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v36, v37);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (_OWORD *)((char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_OWORD *))(v21 + 16))(v20);
  v35[3] = &type metadata for ClinicalSharingQueryDefaultDataProvider;
  v35[4] = &off_24E48F518;
  v22 = (_OWORD *)swift_allocObject();
  v35[0] = v22;
  v23 = v20[1];
  v22[1] = *v20;
  v22[2] = v23;
  v24 = v20[3];
  v22[3] = v20[2];
  v22[4] = v24;
  type metadata accessor for ClinicalSharingQueryContext(0);
  v25 = swift_allocObject();
  v26 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v35, (uint64_t)&type metadata for ClinicalSharingQueryDefaultDataProvider);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (_OWORD *)((char *)&v32 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_OWORD *))(v29 + 16))(v28);
  v30 = sub_21FA4F298(v28, v34, (uint64_t)v14, (uint64_t)v10, v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v32, v7);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v33, v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  return v30;
}

uint64_t sub_21FA4F874(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_21FA4F914(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_21FA4F9F8(unint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = v2;
  v27 = a2;
  v5 = sub_21FC5AAF4();
  v28 = *(_QWORD *)(v5 - 8);
  v29 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AccountSummary(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
    goto LABEL_19;
  v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v13 = MEMORY[0x24BEE4AF8];
    if (!v12)
      return v13;
    v30 = MEMORY[0x24BEE4AF8];
    result = sub_21FC018C4(0, v12 & ~(v12 >> 63), 0);
    if (v12 < 0)
      break;
    v15 = 0;
    v13 = v30;
    v24 = v3;
    v25 = a1 & 0xC000000000000001;
    v26 = a1;
    while (v12 != v15)
    {
      if (v25)
        v16 = (id)MEMORY[0x2207D057C](v15, a1);
      else
        v16 = *(id *)(a1 + 8 * v15 + 32);
      v17 = v27;
      v18 = v16;
      v19 = objc_msgSend(v18, sel_identifier);
      sub_21FC5AADC();

      if (*(_QWORD *)(v17 + 16))
      {
        v20 = sub_21FA73E18((uint64_t)v7);
        v21 = MEMORY[0x24BEE4B08];
        if ((v22 & 1) != 0)
        {
          v21 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v20);
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        v21 = MEMORY[0x24BEE4B08];
      }
      (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v29);
      sub_21FA4BF28(v18, v21, (uint64_t)v11);

      v30 = v13;
      v3 = *(_QWORD *)(v13 + 16);
      v23 = *(_QWORD *)(v13 + 24);
      if (v3 >= v23 >> 1)
      {
        sub_21FC018C4(v23 > 1, v3 + 1, 1);
        v13 = v30;
      }
      ++v15;
      *(_QWORD *)(v13 + 16) = v3 + 1;
      sub_21FA2D23C((uint64_t)v11, v13+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v3, type metadata accessor for AccountSummary);
      a1 = v26;
      if (v12 == v15)
        return v13;
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
    v12 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

id sub_21FA4FC68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, double a5@<D0>)
{
  uint64_t Output;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id result;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  char v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  double *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char v96;

  v85 = a4;
  Output = type metadata accessor for QueryOutput(0);
  v10 = *(_QWORD *)(Output - 8);
  v11 = MEMORY[0x24BDAC7A8](Output);
  v88 = (uint64_t)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v89 = (uint64_t)&v74 - v13;
  v14 = sub_21FC5AC5C();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD15D0]), sel_init);
  sub_21FC5AC50();
  v19 = (void *)sub_21FC5AC38();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  objc_msgSend(v18, sel_setTimeZone_, v19);

  v84 = a1;
  v20 = (void *)sub_21FC5AA64();
  v21 = objc_msgSend(v18, sel_stringFromDate_, v20);

  v22 = sub_21FC5B604();
  v24 = v23;

  v25 = sub_21FACFFF4(&unk_24E4804E8, a2);
  v82 = v26;
  v83 = v25;
  sub_21FA50298();
  swift_arrayDestroy();
  result = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (!result)
  {
    __break(1u);
    goto LABEL_22;
  }
  v28 = result;
  v80 = v24;
  v81 = v22;
  result = objc_msgSend(result, sel_currentOSBuild);
  if (!result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v29 = result;
  v30 = sub_21FC5B604();
  v78 = v31;
  v79 = v30;

  result = objc_msgSend(v28, sel_currentInternalDeviceModel);
  v32 = v89;
  if (!result)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  v33 = result;
  v77 = v28;
  v76 = sub_21FC5B604();
  v75 = v34;

  v35 = sub_21FA7BBC8(MEMORY[0x24BEE4AF8]);
  v36 = *(_QWORD *)(a3 + 16);
  if (v36)
  {
    v37 = a3 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v86 = *(_QWORD *)(v10 + 72);
    v87 = Output;
    do
    {
      sub_21FA2D120(v37, v32, type metadata accessor for QueryOutput);
      v38 = *(_BYTE *)(v32 + 8);
      v95 = *(_QWORD *)v32;
      v96 = v38;
      v39 = sub_21FC5B64C();
      v41 = v40;
      v42 = *(_QWORD *)(v35 + 16);
      swift_bridgeObjectRetain();
      v92 = v39;
      if (v42 && (v43 = sub_21FA73F34(v39, v41), (v44 & 1) != 0))
      {
        v45 = *(_QWORD *)(*(_QWORD *)(v35 + 56) + 8 * v43);
        swift_bridgeObjectRetain();
      }
      else
      {
        v45 = sub_21FA7BCDC(MEMORY[0x24BEE4AF8]);
      }
      swift_bridgeObjectRelease();
      v46 = v32 + *(int *)(Output + 20);
      v47 = *(_QWORD *)(v46 + 32);
      LOBYTE(v46) = *(_BYTE *)(v46 + 40);
      v95 = v47;
      v96 = v46;
      v48 = sub_21FC5B64C();
      v50 = v49;
      v51 = *(_QWORD *)(v45 + 16);
      v93 = v36;
      v94 = v35;
      v91 = v48;
      if (v51)
      {
        v52 = v48;
        swift_bridgeObjectRetain();
        v53 = sub_21FA73F34(v52, v50);
        v54 = (_QWORD *)MEMORY[0x24BEE4AF8];
        if ((v55 & 1) != 0)
        {
          v54 = *(_QWORD **)(*(_QWORD *)(v45 + 56) + 8 * v53);
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        v54 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      v56 = v88;
      sub_21FA2D120(v32, v88, type metadata accessor for QueryOutput);
      v57 = (uint64_t *)(v56 + *(int *)(Output + 20));
      v58 = v57[1];
      v90 = *v57;
      v59 = v57[2];
      v60 = v57[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_21FA326EC((uint64_t)v57, type metadata accessor for PBDateRange);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v54 = sub_21FA7DE2C(0, v54[2] + 1, 1, v54);
      v62 = v54[2];
      v61 = v54[3];
      if (v62 >= v61 >> 1)
        v54 = sub_21FA7DE2C((_QWORD *)(v61 > 1), v62 + 1, 1, v54);
      v54[2] = v62 + 1;
      v63 = &v54[4 * v62];
      v63[4] = v90;
      v63[5] = v58;
      v63[6] = v59;
      v63[7] = v60;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v95 = v45;
      sub_21FA78408((uint64_t)v54, v91, v50, isUniquelyReferenced_nonNull_native);
      v65 = v95;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v66 = v94;
      v67 = swift_isUniquelyReferenced_nonNull_native();
      v95 = v66;
      sub_21FA783F4(v65, v92, v41, v67);
      v35 = v95;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v32 = v89;
      sub_21FA326EC(v89, type metadata accessor for QueryOutput);
      swift_bridgeObjectRelease();
      Output = v87;
      v37 += v86;
      v36 = v93 - 1;
    }
    while (v93 != 1);
  }

  v68 = sub_21FC5AAAC();
  result = (id)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 8))(v84, v68);
  v69 = (double *)v85;
  v70 = v80;
  *v85 = v81;
  *((_QWORD *)v69 + 1) = v70;
  v71 = v82;
  *((_QWORD *)v69 + 2) = v83;
  *((_QWORD *)v69 + 3) = v71;
  v69[4] = a5;
  v72 = v78;
  *((_QWORD *)v69 + 5) = v79;
  *((_QWORD *)v69 + 6) = v72;
  v73 = v75;
  *((_QWORD *)v69 + 7) = v76;
  *((_QWORD *)v69 + 8) = v73;
  *((_QWORD *)v69 + 9) = v35;
  return result;
}

uint64_t sub_21FA501F0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_21FA50254()
{
  unint64_t result;

  result = qword_25553EC50;
  if (!qword_25553EC50)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC5EFA0, &type metadata for QuerySummary);
    atomic_store(result, (unint64_t *)&qword_25553EC50);
  }
  return result;
}

void sub_21FA50298()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_255541770)
  {
    type metadata accessor for HKClinicalSharingQueryDiagnosticOptions(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_255541770);
  }
}

void sub_21FA502FC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (!*a2)
  {
    sub_21FA49C58();
    v9 = v8;
    v10 = a3(255);
    v11 = sub_21FA2A08C(&qword_25406CA08, (uint64_t (*)(uint64_t))sub_21FA49C58, MEMORY[0x24BDB9AF8]);
    v12 = a4(a1, v9, v10, v11);
    if (!v13)
      atomic_store(v12, a2);
  }
}

uint64_t (*sub_21FA5039C(uint64_t a1))(char *)
{
  uint64_t v1;

  return sub_21FAAD390(a1, *(uint64_t (**)(char *))(v1 + 16));
}

uint64_t sub_21FA503BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21FA504F4(a1, a2);
}

unint64_t sub_21FA503D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25553EC60;
  if (!qword_25553EC60)
  {
    sub_21FA502FC(255, &qword_25553EC58, type metadata accessor for ClinicalSharingQueryOutput, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB98B8]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB98C8], v1);
    atomic_store(result, (unint64_t *)&qword_25553EC60);
  }
  return result;
}

uint64_t objectdestroy_8Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_11Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for PublisherOutputWriter();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  swift_release();
  v4 = v0 + v3;
  v5 = sub_21FC5A98C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

  return swift_deallocObject();
}

uint64_t sub_21FA504F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PublisherOutputWriter() - 8) + 80);
  return sub_21FA4CD64(a1, *(uint64_t (**)(uint64_t))(v2 + 16), v2 + ((v5 + 32) & ~v5), a2);
}

void sub_21FA50550(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_21FA49C58();
    a3(255);
    sub_21FA2A08C(&qword_25406CA08, (uint64_t (*)(uint64_t))sub_21FA49C58, MEMORY[0x24BDB9AF8]);
    a4();
    v7 = sub_21FC5B100();
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_21FA505FC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553EC70)
  {
    sub_21FA506B0();
    sub_21FA50724(255, (unint64_t *)&qword_25406BB50);
    sub_21FA2A08C(&qword_25553EC88, (uint64_t (*)(uint64_t))sub_21FA506B0, MEMORY[0x24BDB9AF8]);
    v0 = sub_21FC5B04C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553EC70);
  }
}

void sub_21FA506B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553EC78)
  {
    sub_21FA50724(255, (unint64_t *)&qword_25553EC80);
    v0 = sub_21FC5B190();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553EC78);
  }
}

uint64_t sub_21FA50724(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_21FA50770()
{
  return sub_21FA2A08C(&qword_25553EC90, (uint64_t (*)(uint64_t))sub_21FA505FC, MEMORY[0x24BDB95F8]);
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t sub_21FA507B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25553EC98;
  if (!qword_25553EC98)
  {
    sub_21FA50550(255, (unint64_t *)&qword_25553EC68, (void (*)(uint64_t))sub_21FA505FC, (void (*)(void))sub_21FA50770);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB98F0], v1);
    atomic_store(result, (unint64_t *)&qword_25553EC98);
  }
  return result;
}

void sub_21FA50814()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25406AA50)
  {
    v0 = MEMORY[0x24BDB9E38];
    sub_21FA509F0(255, (unint64_t *)&qword_25406B9B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9E38]);
    sub_21FA508E8((unint64_t *)&qword_25406B9B0, (unint64_t *)&qword_25406B9B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v0, MEMORY[0x24BDB9E58]);
    v1 = sub_21FC5B274();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25406AA50);
  }
}

unint64_t sub_21FA508AC()
{
  unint64_t result;

  result = qword_25406BA88;
  if (!qword_25406BA88)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25406BA88);
  }
  return result;
}

uint64_t sub_21FA508E8(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FA509F0(255, a2, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_21FA50928()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25406B850)
  {
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FA509F0(255, &qword_25406B968, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA2D1A0(255, (unint64_t *)&qword_25406BA70, (uint64_t (*)(uint64_t))sub_21FA508AC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FA508E8((unint64_t *)&qword_25406B960, &qword_25406B968, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    v1 = sub_21FC5B064();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25406B850);
  }
}

void sub_21FA509F0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_21FA2D1A0(255, (unint64_t *)&qword_25406BA70, (uint64_t (*)(uint64_t))sub_21FA508AC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v7 = v6;
    v8 = sub_21FA50724(255, (unint64_t *)&qword_25406BB50);
    v9 = a3(a1, v7, v8, MEMORY[0x24BEE3F20]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_21FA50A88()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25553ECB0)
  {
    sub_21FA49CD4();
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FA509F0(255, &qword_25406B968, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA49D48();
    sub_21FA508E8((unint64_t *)&qword_25406B960, &qword_25406B968, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    v1 = sub_21FC5B100();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25553ECB0);
  }
}

uint64_t sub_21FA50B48()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_21FA50B6C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_21FC2EFF0(*(void **)(v1 + 16), a1);
}

uint64_t sub_21FA50B74()
{
  uint64_t v0;
  int *DiagnosticsTask;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  DiagnosticsTask = (int *)type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0);
  v2 = *(unsigned __int8 *)(*((_QWORD *)DiagnosticsTask - 1) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = sub_21FC5AAF4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);

  swift_release();
  v5 = v3 + DiagnosticsTask[7];
  v6 = sub_21FC5A98C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1(v3 + DiagnosticsTask[8]);
  v7 = v3 + DiagnosticsTask[10];
  v8 = sub_21FC5AAAC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return swift_deallocObject();
}

uint64_t sub_21FA50C5C@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0) - 8) + 80);
  return sub_21FA4AF30(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_21FA50CA8()
{
  uint64_t v0;
  int *DiagnosticsTask;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  DiagnosticsTask = (int *)type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0);
  v2 = *(unsigned __int8 *)(*((_QWORD *)DiagnosticsTask - 1) + 80);
  v3 = (v2 + 24) & ~v2;
  swift_bridgeObjectRelease();
  v4 = v0 + v3;
  v5 = sub_21FC5AAF4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

  swift_release();
  v6 = v4 + DiagnosticsTask[7];
  v7 = sub_21FC5A98C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  __swift_destroy_boxed_opaque_existential_1(v4 + DiagnosticsTask[8]);
  v8 = v4 + DiagnosticsTask[10];
  v9 = sub_21FC5AAAC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return swift_deallocObject();
}

uint64_t sub_21FA50D98@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0) - 8) + 80);
  return sub_21FA4B130(a1, *(_QWORD *)(v2 + 16), v2 + ((v5 + 24) & ~v5), a2);
}

unint64_t sub_21FA50DF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25553ECC8;
  if (!qword_25553ECC8)
  {
    sub_21FA328AC(255, &qword_25553ECC0, (void (*)(uint64_t))sub_21FA49CD4, (void (*)(void))sub_21FA49D48);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB98C8], v1);
    atomic_store(result, (unint64_t *)&qword_25553ECC8);
  }
  return result;
}

uint64_t sub_21FA50E5C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int isUniquelyReferenced_nonNull_native;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  _QWORD v41[3];
  void (*v42)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  _QWORD *v49;

  v7 = sub_21FC5AAF4();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v48 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v47 = (char *)v41 - v11;
  sub_21FA2D1A0(0, &qword_25406BE78, v12, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v13);
  v44 = (char *)v41 - v14;
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
  {
    v16 = a2;
    v17 = a2 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v45 = *(_QWORD *)(v8 + 72);
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v41[1] = v16;
    v41[2] = v3;
    swift_bridgeObjectRetain();
    v43 = v7;
    while (1)
    {
      v21 = v44;
      v18(v44, v17, v7);
      v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v42(v21, 0, 1, v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v21, 1, v7) == 1)
        break;
      v46 = v17;
      v22 = v7;
      v23 = v8;
      v24 = v47;
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v47, v21, v22);
      v25 = (uint64_t)v48;
      v18(v48, (uint64_t)v24, v22);
      v26 = a3;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v49 = a1;
      v29 = sub_21FA73E18(v25);
      v30 = a1[2];
      v31 = (v28 & 1) == 0;
      v32 = v30 + v31;
      if (__OFADD__(v30, v31))
      {
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        result = sub_21FC5BE20();
        __break(1u);
        return result;
      }
      v33 = v28;
      if (a1[3] >= v32)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_21FA7B24C();
      }
      else
      {
        sub_21FA78014(v32, isUniquelyReferenced_nonNull_native);
        v34 = sub_21FA73E18((uint64_t)v48);
        if ((v33 & 1) != (v35 & 1))
          goto LABEL_21;
        v29 = v34;
      }
      a3 = v26;
      a1 = v49;
      v8 = v23;
      if ((v33 & 1) != 0)
      {
        v19 = v49[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v19 + 8 * v29) = a3;
        v7 = v43;
      }
      else
      {
        v49[(v29 >> 6) + 8] |= 1 << v29;
        v7 = v43;
        v18((char *)(a1[6] + v29 * v45), (uint64_t)v48, v43);
        *(_QWORD *)(a1[7] + 8 * v29) = a3;
        v36 = a1[2];
        v37 = __OFADD__(v36, 1);
        v38 = v36 + 1;
        if (v37)
          goto LABEL_20;
        a1[2] = v38;
      }
      swift_bridgeObjectRelease();
      v20 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
      v20((uint64_t)v48, v7);
      v20((uint64_t)v47, v7);
      v17 = v46 + v45;
      if (!--v15)
      {
        v42(v44, 1, 1, v7);
        break;
      }
    }
  }
  else
  {
    v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    swift_bridgeObjectRetain();
    v39(v44, 1, 1, v7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)a1;
}

void sub_21FA511A8()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25406BE38)
  {
    sub_21FC5AAF4();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
    sub_21FA5123C();
    sub_21FA2A08C((unint64_t *)&qword_25406AAF0, v0, MEMORY[0x24BDCEA88]);
    v1 = sub_21FC5BCAC();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25406BE38);
  }
}

void sub_21FA5123C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406BE18)
  {
    sub_21FC5ACD4();
    sub_21FA2A08C(&qword_25406BC08, (uint64_t (*)(uint64_t))MEMORY[0x24BE45940], MEMORY[0x24BE45950]);
    v0 = sub_21FC5B8A4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406BE18);
  }
}

uint64_t type metadata accessor for AccountSummary(uint64_t a1)
{
  return sub_21FA44B58(a1, qword_25553ED70);
}

unint64_t sub_21FA512C8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_25553ECE8;
  if (!qword_25553ECE8)
  {
    sub_21FA2D1A0(255, &qword_25553ECE0, type metadata accessor for AccountSummary, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_21FA2A08C(&qword_25553ECF0, type metadata accessor for AccountSummary, (uint64_t)&unk_21FC5EF78);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BEE12A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_25553ECE8);
  }
  return result;
}

uint64_t sub_21FA51358(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t sub_21FA51364()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25553ED10;
  if (!qword_25553ED10)
  {
    sub_21FA2D1A0(255, &qword_25553ED08, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB2A8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_25553ED10);
  }
  return result;
}

uint64_t *sub_21FA513C4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v37 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v37 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_21FC5AAF4();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[7];
    v17 = a3[8];
    v18 = (uint64_t *)((char *)a1 + v16);
    v19 = (uint64_t *)((char *)a2 + v16);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = (uint64_t *)((char *)a1 + v17);
    v22 = (uint64_t *)((char *)a2 + v17);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = a3[9];
    v25 = a3[10];
    v26 = (uint64_t *)((char *)a1 + v24);
    v27 = (uint64_t *)((char *)a2 + v24);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    v29 = (uint64_t *)((char *)a1 + v25);
    v30 = (uint64_t *)((char *)a2 + v25);
    v31 = v30[1];
    *v29 = *v30;
    v29[1] = v31;
    v32 = a3[11];
    v33 = a3[12];
    v34 = (uint64_t *)((char *)a1 + v32);
    v35 = (uint64_t *)((char *)a2 + v32);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    *(uint64_t *)((char *)a1 + v33) = *(uint64_t *)((char *)a2 + v33);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_21FA51514(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_21FC5AAF4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21FA515C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;

  v6 = sub_21FC5AAF4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[7];
  v16 = a3[8];
  v17 = (_QWORD *)(a1 + v15);
  v18 = (_QWORD *)(a2 + v15);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = (_QWORD *)(a1 + v16);
  v21 = (_QWORD *)(a2 + v16);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = a3[9];
  v24 = a3[10];
  v25 = (_QWORD *)(a1 + v23);
  v26 = (_QWORD *)(a2 + v23);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = (_QWORD *)(a1 + v24);
  v29 = (_QWORD *)(a2 + v24);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  v31 = a3[11];
  v32 = a3[12];
  v33 = (_QWORD *)(a1 + v31);
  v34 = (_QWORD *)(a2 + v31);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  *(_QWORD *)(a1 + v32) = *(_QWORD *)(a2 + v32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21FA516EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;

  v6 = sub_21FC5AAF4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = a3[8];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = a3[9];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = a3[10];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  *v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25 = a3[11];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (_QWORD *)(a2 + v25);
  *v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21FA5188C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_21FC5AAF4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  v10 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);
  return a1;
}

uint64_t sub_21FA5192C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;

  v6 = sub_21FC5AAF4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  v22 = a3[8];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  v27 = a3[9];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (uint64_t *)(a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  v32 = a3[10];
  v33 = (_QWORD *)(a1 + v32);
  v34 = (uint64_t *)(a2 + v32);
  v36 = *v34;
  v35 = v34[1];
  *v33 = v36;
  v33[1] = v35;
  swift_bridgeObjectRelease();
  v37 = a3[11];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (uint64_t *)(a2 + v37);
  v41 = *v39;
  v40 = v39[1];
  *v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21FA51A54()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA51A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_21FC5AAF4();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_21FA51AE0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA51AEC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_21FC5AAF4();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_21FA51B68()
{
  uint64_t result;
  unint64_t v1;

  result = sub_21FC5AAF4();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for QuerySummary.QueryOutputDescription()
{
  return &type metadata for QuerySummary.QueryOutputDescription;
}

uint64_t destroy for QuerySummary()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for QuerySummary(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for QuerySummary(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for QuerySummary(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for QuerySummary(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QuerySummary(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for QuerySummary()
{
  return &type metadata for QuerySummary;
}

_QWORD *sub_21FA51ED8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v15 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v5 = *(int *)(a3 + 20);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = *(uint64_t *)((char *)a2 + v5 + 8);
    *(_QWORD *)v6 = *(uint64_t *)((char *)a2 + v5);
    *(_QWORD *)(v6 + 8) = v8;
    v9 = *(uint64_t *)((char *)a2 + v5 + 24);
    *(_QWORD *)(v6 + 16) = *(uint64_t *)((char *)a2 + v5 + 16);
    *(_QWORD *)(v6 + 24) = v9;
    *(_QWORD *)(v6 + 32) = *(uint64_t *)((char *)a2 + v5 + 32);
    *(_BYTE *)(v6 + 40) = *((_BYTE *)a2 + v5 + 40);
    v10 = *(int *)(type metadata accessor for PBDateRange(0) + 28);
    v11 = v6 + v10;
    v12 = v7 + v10;
    v13 = sub_21FC5AD1C();
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
  }
  return v3;
}

uint64_t sub_21FA51FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = v2 + *(int *)(type metadata accessor for PBDateRange(0) + 28);
  v4 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
}

uint64_t sub_21FA52018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = *(_QWORD *)(a2 + v4 + 8);
  *(_QWORD *)v5 = *(_QWORD *)(a2 + v4);
  *(_QWORD *)(v5 + 8) = v7;
  v8 = *(_QWORD *)(a2 + v4 + 24);
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + v4 + 16);
  *(_QWORD *)(v5 + 24) = v8;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + v4 + 32);
  *(_BYTE *)(v5 + 40) = *(_BYTE *)(a2 + v4 + 40);
  v9 = *(int *)(type metadata accessor for PBDateRange(0) + 28);
  v10 = v5 + v9;
  v11 = v6 + v9;
  v12 = sub_21FC5AD1C();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  return a1;
}

uint64_t sub_21FA520D4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = *(int *)(a3 + 20);
  v6 = a1 + v5;
  v7 = (uint64_t)a2 + v5;
  *(_QWORD *)v6 = *(uint64_t *)((char *)a2 + v5);
  *(_QWORD *)(v6 + 8) = *(uint64_t *)((char *)a2 + v5 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v7 + 16);
  *(_QWORD *)(v6 + 24) = *(_QWORD *)(v7 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v7 + 32);
  *(_BYTE *)(v6 + 40) = *(_BYTE *)(v7 + 40);
  *(_QWORD *)(v6 + 32) = v8;
  v9 = *(int *)(type metadata accessor for PBDateRange(0) + 28);
  v10 = v6 + v9;
  v11 = v7 + v9;
  v12 = sub_21FC5AD1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

uint64_t sub_21FA5219C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = *(_OWORD *)(a2 + v4 + 16);
  *(_OWORD *)v5 = *(_OWORD *)(a2 + v4);
  *(_OWORD *)(v5 + 16) = v7;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + v4 + 32);
  *(_BYTE *)(v5 + 40) = *(_BYTE *)(a2 + v4 + 40);
  v8 = *(int *)(type metadata accessor for PBDateRange(0) + 28);
  v9 = v5 + v8;
  v10 = v6 + v8;
  v11 = sub_21FC5AD1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

uint64_t sub_21FA5222C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = *(_QWORD *)(a2 + v4 + 8);
  *(_QWORD *)v5 = *(_QWORD *)(a2 + v4);
  *(_QWORD *)(v5 + 8) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v6 + 24);
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(v5 + 24) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(v6 + 32);
  *(_BYTE *)(v5 + 40) = *(_BYTE *)(v6 + 40);
  v9 = *(int *)(type metadata accessor for PBDateRange(0) + 28);
  v10 = v5 + v9;
  v11 = v6 + v9;
  v12 = sub_21FC5AD1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t sub_21FA522D4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA522E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = type metadata accessor for PBDateRange(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_21FA52320()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA5232C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = type metadata accessor for PBDateRange(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_21FA52370()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PBDateRange(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21FA523E4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  id v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_21FC5AAF4();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v10;
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    v11 = a3[7];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = sub_21FC5A98C();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    v16 = v10;
    swift_retain();
    v15(v12, v13, v14);
    v17 = a3[8];
    v18 = *(_OWORD *)((char *)a2 + v17 + 24);
    *(_OWORD *)((char *)a1 + v17 + 24) = v18;
    (**(void (***)(void))(v18 - 8))();
    v19 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = sub_21FC5AAAC();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  }
  return a1;
}

uint64_t sub_21FA52520(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_21FC5AAF4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

  swift_release();
  v5 = a1 + a2[7];
  v6 = sub_21FC5A98C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1(a1 + a2[8]);
  v7 = a1 + a2[10];
  v8 = sub_21FC5AAAC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t sub_21FA525CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  id v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_21FC5AAF4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v10 = a3[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_21FC5A98C();
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  v15 = v9;
  swift_retain();
  v14(v11, v12, v13);
  v16 = a3[8];
  v17 = *(_OWORD *)(a2 + v16 + 24);
  *(_OWORD *)(a1 + v16 + 24) = v17;
  (**(void (***)(void))(v17 - 8))();
  v18 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = sub_21FC5AAAC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  return a1;
}

uint64_t sub_21FA526DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_21FC5AAF4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_retain();
  swift_release();
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_21FC5A98C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + a3[8]), (uint64_t *)(a2 + a3[8]));
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v15 = a3[10];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_21FC5AAAC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t sub_21FA52944(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_21FC5AAF4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_21FC5A98C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[8];
  v13 = a3[9];
  v14 = a1 + v12;
  v15 = (__int128 *)(a2 + v12);
  v16 = *v15;
  v17 = v15[1];
  *(_QWORD *)(v14 + 32) = *((_QWORD *)v15 + 4);
  v18 = *(_QWORD *)(a2 + v13);
  *(_OWORD *)v14 = v16;
  *(_OWORD *)(v14 + 16) = v17;
  *(_QWORD *)(a1 + v13) = v18;
  v19 = a3[10];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_21FC5AAAC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

uint64_t sub_21FA52A2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = sub_21FC5AAF4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_release();
  v9 = a3[7];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_21FC5A98C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = a3[8];
  v14 = a1 + v13;
  v15 = a2 + v13;
  __swift_destroy_boxed_opaque_existential_1(a1 + v13);
  v16 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v16;
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
  v17 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = sub_21FC5AAAC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  return a1;
}

uint64_t sub_21FA52B30()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA52B3C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_21FC5AAF4();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v13 = sub_21FC5A98C();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[7];
    }
    else
    {
      v8 = sub_21FC5AAAC();
      v14 = *(_QWORD *)(v8 - 8);
      v15 = a3[10];
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[5]);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_21FA52C08()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA52C14(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_21FC5AAF4();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[5]) = (a2 - 1);
      return result;
    }
    v13 = sub_21FC5A98C();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[7];
    }
    else
    {
      v10 = sub_21FC5AAAC();
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[10];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_21FA52CDC()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = sub_21FC5AAF4();
  if (v1 <= 0x3F)
  {
    result = sub_21FC5A98C();
    if (v2 <= 0x3F)
    {
      result = sub_21FC5AAAC();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

unint64_t sub_21FA52DB0()
{
  unint64_t result;

  result = qword_25553EF08;
  if (!qword_25553EF08)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC5F29C, &type metadata for QuerySummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25553EF08);
  }
  return result;
}

void sub_21FA52DF4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553EF10)
  {
    sub_21FA52E58();
    v0 = sub_21FC5B580();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553EF10);
  }
}

void sub_21FA52E58()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553EF18)
  {
    sub_21FA5304C(255, &qword_25553EF20);
    v0 = sub_21FC5B580();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553EF18);
  }
}

uint64_t sub_21FA52ECC()
{
  return sub_21FA52EE8(&qword_25553EF30, (uint64_t (*)(uint64_t))sub_21FA52E58, (uint64_t (*)(void))sub_21FA52F54);
}

uint64_t sub_21FA52EE8(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7 = a3();
    v8[0] = MEMORY[0x24BEE0D08];
    v8[1] = v7;
    result = MEMORY[0x2207D0F78](MEMORY[0x24BEE04C0], v6, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_21FA52F54()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_25553EF38;
  if (!qword_25553EF38)
  {
    sub_21FA5304C(255, &qword_25553EF20);
    v2 = v1;
    v3 = sub_21FA52FC4();
    result = MEMORY[0x2207D0F78](MEMORY[0x24BEE12A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_25553EF38);
  }
  return result;
}

unint64_t sub_21FA52FC4()
{
  unint64_t result;

  result = qword_25553EF40;
  if (!qword_25553EF40)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC5EF50, &type metadata for QuerySummary.QueryOutputDescription);
    atomic_store(result, (unint64_t *)&qword_25553EF40);
  }
  return result;
}

unint64_t sub_21FA53008()
{
  unint64_t result;

  result = qword_25553EF50;
  if (!qword_25553EF50)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC5F24C, &type metadata for AccountSummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25553EF50);
  }
  return result;
}

void sub_21FA5304C(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_21FC5B7F0();
    if (!v4)
      atomic_store(v3, a2);
  }
}

unint64_t sub_21FA53090()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_25553EF58;
  if (!qword_25553EF58)
  {
    sub_21FA5304C(255, (unint64_t *)&qword_25406BA60);
    v2 = MEMORY[0x24BEE0D08];
    result = MEMORY[0x2207D0F78](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_25553EF58);
  }
  return result;
}

void sub_21FA530F8(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3();
    v4 = sub_21FC5BDA8();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_21FA53150()
{
  unint64_t result;

  result = qword_25553EF68;
  if (!qword_25553EF68)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC5F1FC, &type metadata for QuerySummary.QueryOutputDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25553EF68);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for QuerySummary.QueryOutputDescription.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21FA531E0 + 4 * byte_21FC5EE54[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21FA53214 + 4 * byte_21FC5EE4F[v4]))();
}

uint64_t sub_21FA53214(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FA5321C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FA53224);
  return result;
}

uint64_t sub_21FA53230(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FA53238);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21FA5323C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FA53244(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for QuerySummary.QueryOutputDescription.CodingKeys()
{
  return &type metadata for QuerySummary.QueryOutputDescription.CodingKeys;
}

uint64_t getEnumTagSinglePayload for AccountSummary.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AccountSummary.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_21FA5333C + 4 * byte_21FC5EE5E[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_21FA53370 + 4 * byte_21FC5EE59[v4]))();
}

uint64_t sub_21FA53370(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FA53378(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FA53380);
  return result;
}

uint64_t sub_21FA5338C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FA53394);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_21FA53398(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FA533A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccountSummary.CodingKeys()
{
  return &type metadata for AccountSummary.CodingKeys;
}

uint64_t getEnumTagSinglePayload for QuerySummary.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for QuerySummary.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_21FA53498 + 4 * byte_21FC5EE68[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_21FA534CC + 4 * byte_21FC5EE63[v4]))();
}

uint64_t sub_21FA534CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FA534D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FA534DCLL);
  return result;
}

uint64_t sub_21FA534E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FA534F0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_21FA534F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FA534FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for QuerySummary.CodingKeys()
{
  return &type metadata for QuerySummary.CodingKeys;
}

unint64_t sub_21FA5351C()
{
  unint64_t result;

  result = qword_25553EF70;
  if (!qword_25553EF70)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC5F064, &type metadata for QuerySummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25553EF70);
  }
  return result;
}

unint64_t sub_21FA53564()
{
  unint64_t result;

  result = qword_25553EF78;
  if (!qword_25553EF78)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC5F11C, &type metadata for AccountSummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25553EF78);
  }
  return result;
}

unint64_t sub_21FA535AC()
{
  unint64_t result;

  result = qword_25553EF80;
  if (!qword_25553EF80)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC5F1D4, &type metadata for QuerySummary.QueryOutputDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25553EF80);
  }
  return result;
}

unint64_t sub_21FA535F4()
{
  unint64_t result;

  result = qword_25553EF88;
  if (!qword_25553EF88)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC5F144, &type metadata for QuerySummary.QueryOutputDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25553EF88);
  }
  return result;
}

unint64_t sub_21FA5363C()
{
  unint64_t result;

  result = qword_25553EF90;
  if (!qword_25553EF90)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC5F16C, &type metadata for QuerySummary.QueryOutputDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25553EF90);
  }
  return result;
}

unint64_t sub_21FA53684()
{
  unint64_t result;

  result = qword_25553EF98;
  if (!qword_25553EF98)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC5F08C, &type metadata for AccountSummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25553EF98);
  }
  return result;
}

unint64_t sub_21FA536CC()
{
  unint64_t result;

  result = qword_25553EFA0;
  if (!qword_25553EFA0)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC5F0B4, &type metadata for AccountSummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25553EFA0);
  }
  return result;
}

unint64_t sub_21FA53714()
{
  unint64_t result;

  result = qword_25553EFA8;
  if (!qword_25553EFA8)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC5EFD4, &type metadata for QuerySummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25553EFA8);
  }
  return result;
}

unint64_t sub_21FA5375C()
{
  unint64_t result;

  result = qword_25553EFB0;
  if (!qword_25553EFB0)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC5EFFC, &type metadata for QuerySummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25553EFB0);
  }
  return result;
}

uint64_t sub_21FA537A0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7472617473 && a2 == 0xE500000000000000;
  if (v2 || (sub_21FC5BDF0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6581861 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_21FC5BDF0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_21FA53878(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1702125924 && a2 == 0xE400000000000000;
  if (v2 || (sub_21FC5BDF0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000 || (sub_21FC5BDF0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64657370616C65 && a2 == 0xE700000000000000 || (sub_21FC5BDF0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x646C697562 && a2 == 0xE500000000000000 || (sub_21FC5BDF0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656369766564 && a2 == 0xE600000000000000 || (sub_21FC5BDF0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x74757074756FLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_21FC5BDF0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_21FA53AD0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1684632949 && a2 == 0xE400000000000000;
  if (v2 || (sub_21FC5BDF0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 || (sub_21FC5BDF0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x5365727574616566 && a2 == 0xED00007375746174 || (sub_21FC5BDF0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7461745372657375 && a2 == 0xEA00000000007375 || (sub_21FC5BDF0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000021FC75170 || (sub_21FC5BDF0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000021FC75190 || (sub_21FC5BDF0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6168537473726966 && a2 == 0xEB00000000646572 || (sub_21FC5BDF0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x726168537473616CLL && a2 == 0xEA00000000006465 || (sub_21FC5BDF0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7A69726F68747561 && a2 == 0xEE00736E6F697461)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v6 = sub_21FC5BDF0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t (*sub_21FA53EC0(uint64_t a1))(char *)
{
  return sub_21FA5039C(a1);
}

_QWORD *sub_21FA53EE4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  id v19;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_21FC5A6C8();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_retain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = *(void **)((char *)a2 + v13);
    *(_QWORD *)((char *)v7 + v13) = v15;
    *(_QWORD *)((char *)v7 + v14) = *(_QWORD *)((char *)a2 + v14);
    v16 = a3[9];
    *((_BYTE *)v7 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    v17 = (char *)v7 + v16;
    v18 = (char *)a2 + v16;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = v18[8];
    v19 = v15;
  }
  return v7;
}

_QWORD *sub_21FA53FC8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  id v17;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21FC5A6C8();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_retain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = a3[7];
  v13 = *(void **)((char *)a2 + v11);
  *(_QWORD *)((char *)a1 + v11) = v13;
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  v14 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = v13;
  return a1;
}

_QWORD *sub_21FA54084(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21FC5A6C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = *(void **)((char *)a2 + v10);
  v12 = *(void **)((char *)a1 + v10);
  *(_QWORD *)((char *)a1 + v10) = v11;
  v13 = v11;

  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v14 = a3[9];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(_QWORD *)v16;
  v15[8] = v16[8];
  *(_QWORD *)v15 = v17;
  return a1;
}

_QWORD *sub_21FA5414C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21FC5A6C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  v11 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  return a1;
}

_QWORD *sub_21FA541F0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  *a1 = *a2;
  swift_release();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21FC5A6C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = *(void **)((char *)a1 + v10);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);

  v12 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  v13 = a3[9];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  return a1;
}

uint64_t sub_21FA542A8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA542B4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_21FC5A6C8();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_21FA54330()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_21FA5433C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_21FC5A6C8();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ClinicalSharingSampleQuery()
{
  uint64_t result;

  result = qword_25553F010;
  if (!qword_25553F010)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21FA543EC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_21FC5A6C8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21FA54494()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void (*v26)(char *, uint64_t);
  void *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[7];

  v1 = v0;
  v2 = type metadata accessor for ClinicalSharingSampleQuery();
  v62 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v63 = v3;
  v64 = (uint64_t)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB96B0];
  sub_21FA57658(0, &qword_25553F058, (uint64_t (*)(uint64_t))sub_21FA2CCF4, sub_21FA5751C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB96B0]);
  v66 = *(_QWORD *)(v5 - 8);
  v67 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v65 = (char *)&v51 - v6;
  sub_21FA57538();
  v69 = *(_QWORD *)(v7 - 8);
  v70 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v68 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA575F8();
  v54 = v9;
  v52 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v51 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA57658(0, &qword_25553F078, v11, sub_21FA576F0, v4);
  v56 = v12;
  v55 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v53 = (char *)&v51 - v13;
  v14 = sub_21FC5B8F8();
  v15 = *(_QWORD *)(v14 - 8);
  v59 = v14;
  v60 = v15;
  MEMORY[0x24BDAC7A8](v14);
  v58 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_21FC5AAAC();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = v2;
  v21 = *(int *)(v2 + 24);
  v22 = *(void **)((char *)v0 + v21);
  v23 = (void *)objc_opt_self();
  v24 = v22;
  sub_21FC5A6A4();
  v25 = (void *)sub_21FC5AA64();
  v26 = *(void (**)(char *, uint64_t))(v18 + 8);
  v26(v20, v17);
  sub_21FC5A680();
  v27 = (void *)sub_21FC5AA64();
  v26(v20, v17);
  v28 = objc_msgSend(v23, sel_predicateForSamplesWithStartDate_endDate_options_, v25, v27, 0);

  v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3E98]), sel_initWithSampleType_predicate_, v24, v28);
  v30 = *(void **)((char *)v1 + v21);
  v31 = v30;
  sub_21FBE6F50(0x73656C706D6173, 0xE700000000000000, v30, 5, 1);

  sub_21FA2CEA0(*v1 + 16, (uint64_t)v72);
  __swift_project_boxed_opaque_existential_1(v72, v72[3]);
  sub_21FA597BC(0, (unint64_t *)&qword_25554BAF0);
  v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_21FC5E070;
  *(_QWORD *)(v32 + 32) = v29;
  v71 = v32;
  sub_21FC5B7C0();
  v61 = v29;
  sub_21FAADEE8();
  v33 = v57;
  v34 = v58;
  sub_21FC5B91C();
  sub_21FA2A08C(&qword_25553F088, (uint64_t (*)(uint64_t))MEMORY[0x24BE45A48], MEMORY[0x24BE45A40]);
  v35 = v59;
  v36 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v34, v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
  if (*((_BYTE *)v1 + *(int *)(v33 + 36) + 8) == 1)
  {
    swift_retain();
    v37 = v36;
  }
  else
  {
    v72[0] = v36;
    sub_21FA2CCF4();
    sub_21FA5751C();
    swift_retain();
    v38 = v51;
    sub_21FC5B328();
    sub_21FA2D1A0(0, (unint64_t *)&qword_25553E0B8, (uint64_t (*)(uint64_t))sub_21FA2CD78, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FA576F0();
    v39 = v53;
    v40 = v54;
    sub_21FC5B2C8();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v38, v40);
    sub_21FA58F7C(&qword_25553F098, &qword_25553F078, (uint64_t (*)(uint64_t))sub_21FA575F8, sub_21FA576F0);
    v41 = v56;
    v37 = sub_21FC5B280();
    swift_release();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v39, v41);
  }
  v72[0] = v37;
  sub_21FA2CCF4();
  sub_21FA2D1A0(0, (unint64_t *)&qword_25553E0B8, (uint64_t (*)(uint64_t))sub_21FA2CD78, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_21FA5751C();
  swift_retain();
  v42 = v65;
  sub_21FC5B2C8();
  swift_release();
  v43 = v64;
  sub_21FA2D120((uint64_t)v1, v64, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSampleQuery);
  v44 = (*(unsigned __int8 *)(v62 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
  v45 = swift_allocObject();
  sub_21FA2D23C(v43, v45 + v44, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSampleQuery);
  type metadata accessor for ClinicalSharingQueryOutput(0);
  sub_21FA58F7C(&qword_25553F068, &qword_25553F058, (uint64_t (*)(uint64_t))sub_21FA2CCF4, sub_21FA5751C);
  v46 = v67;
  v47 = v68;
  sub_21FC5B28C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v42, v46);
  sub_21FA2A08C(&qword_25553F090, (uint64_t (*)(uint64_t))sub_21FA57538, MEMORY[0x24BDB94C8]);
  v48 = v70;
  v49 = sub_21FC5B280();
  swift_release();
  swift_release();

  (*(void (**)(char *, uint64_t))(v69 + 8))(v47, v48);
  return v49;
}

uint64_t sub_21FA54BDC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  unint64_t v6;
  uint64_t v7;

  v3 = MEMORY[0x24BEE4AF8];
  v7 = MEMORY[0x24BEE4AF8];
  v4 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v4; ++i)
    {
      v6 = swift_bridgeObjectRetain();
      sub_21FBDFBD0(v6);
    }
    result = swift_bridgeObjectRelease();
    v3 = v7;
  }
  *a2 = v3;
  return result;
}

uint64_t sub_21FA54C64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  void (*v27)(char *, uint64_t);
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;

  sub_21FA59800();
  v38 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v37 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v35 = (char *)&v32 - v6;
  MEMORY[0x24BDAC7A8](v5);
  v36 = (char *)&v32 - v7;
  v42 = MEMORY[0x24BEE4AF8];
  v8 = *(_QWORD *)(a1 + 64);
  v33 = a1 + 64;
  v9 = 1 << *(_BYTE *)(a1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v34 = (unint64_t)(v9 + 63) >> 6;
  v39 = a1;
  result = swift_bridgeObjectRetain();
  v13 = 0;
  v14 = (uint64_t)v35;
  while (1)
  {
    if (v11)
    {
      v40 = (v11 - 1) & v11;
      v41 = v13;
      v15 = __clz(__rbit64(v11)) | (v13 << 6);
      goto LABEL_5;
    }
    v28 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v28 >= v34)
      goto LABEL_23;
    v29 = *(_QWORD *)(v33 + 8 * v28);
    v30 = v13 + 1;
    if (!v29)
    {
      v30 = v13 + 2;
      if (v13 + 2 >= v34)
        goto LABEL_23;
      v29 = *(_QWORD *)(v33 + 8 * v30);
      if (!v29)
      {
        v30 = v13 + 3;
        if (v13 + 3 >= v34)
          goto LABEL_23;
        v29 = *(_QWORD *)(v33 + 8 * v30);
        if (!v29)
        {
          v30 = v13 + 4;
          if (v13 + 4 >= v34)
            goto LABEL_23;
          v29 = *(_QWORD *)(v33 + 8 * v30);
          if (!v29)
            break;
        }
      }
    }
LABEL_22:
    v40 = (v29 - 1) & v29;
    v41 = v30;
    v15 = __clz(__rbit64(v29)) + (v30 << 6);
LABEL_5:
    v16 = v39;
    v17 = *(_QWORD *)(v39 + 48);
    v18 = sub_21FC5A6C8();
    v19 = *(_QWORD **)(v18 - 8);
    v20 = (void (*)(char *, unint64_t, uint64_t))v19[2];
    v21 = (uint64_t)v36;
    v20(v36, v17 + v19[9] * v15, v18);
    v22 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v15);
    v23 = v38;
    *(_QWORD *)(v21 + *(int *)(v38 + 48)) = v22;
    sub_21FA2D23C(v21, v14, (uint64_t (*)(_QWORD))sub_21FA59800);
    v24 = *(int *)(v23 + 48);
    v25 = v37;
    v20(v37, v14, v18);
    v26 = *(_QWORD *)(v14 + v24);
    *(_QWORD *)&v25[v24] = v26;
    v27 = (void (*)(char *, uint64_t))v19[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v27(v25, v18);
    sub_21FA326EC(v14, (uint64_t (*)(_QWORD))sub_21FA59800);
    result = sub_21FBDFBD0(v26);
    v11 = v40;
    v13 = v41;
  }
  v31 = v13 + 5;
  if (v13 + 5 >= v34)
  {
LABEL_23:
    swift_release();
    return v42;
  }
  v29 = *(_QWORD *)(v33 + 8 * v31);
  if (v29)
  {
    v30 = v13 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v30 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v30 >= v34)
      goto LABEL_23;
    v29 = *(_QWORD *)(v33 + 8 * v30);
    ++v31;
    if (v29)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t sub_21FA54F50@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v2;
  unint64_t result;

  v2 = swift_bridgeObjectRetain();
  result = sub_21FA54F7C(v2);
  *a1 = result;
  return result;
}

unint64_t sub_21FA54F7C(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;

  v1 = a1;
  if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0)
    goto LABEL_39;
  v2 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v15 = v1 & 0xFFFFFFFFFFFFFF8;
LABEL_4:
  if ((v2 & 0x4000000000000000) == 0)
  {
    v3 = *(_QWORD *)(v2 + 16);
    swift_bridgeObjectRelease();
    v4 = (unint64_t)v3 >> 1;
    goto LABEL_6;
  }
  while (1)
  {
    swift_retain();
    v3 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
    swift_release();
    v14 = v3 >= 0 ? v3 : v3 + 1;
    if (v3 < -1)
      __break(1u);
    v4 = v14 >> 1;
LABEL_6:
    if ((unint64_t)(v3 + 1) < 3)
      return v2;
    v5 = 0;
    while (1)
    {
      v6 = v5 + 1;
      v1 = v3 - (v5 + 1);
      if (__OFSUB__(v3, v5 + 1))
        break;
      if (v5 != v1)
      {
        if ((v15 & 0xC000000000000001) != 0)
        {
          v9 = MEMORY[0x2207D057C](v5, v15);
          v10 = (id)MEMORY[0x2207D057C](v3 - (v5 + 1), v15);
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0)
            goto LABEL_33;
          v7 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v5 >= v7)
            goto LABEL_34;
          v8 = *(id *)(v15 + 8 * v5 + 32);
          if ((v1 & 0x8000000000000000) != 0)
            goto LABEL_35;
          if (v1 >= v7)
            goto LABEL_37;
          v9 = (uint64_t)v8;
          v10 = *(id *)(v15 + 32 + 8 * v1);
        }
        v11 = v10;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || (v15 & 0x8000000000000000) != 0
          || (v15 & 0x4000000000000000) != 0)
        {
          sub_21FC0A940(v15);
        }
        v12 = (v15 & 0xFFFFFFFFFFFFFF8) + 8 * v5;

        *(_QWORD *)(v12 + 32) = v11;
        sub_21FC5B7C0();
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || (v15 & 0x8000000000000000) != 0
          || (v15 & 0x4000000000000000) != 0)
        {
          sub_21FC0A940(v15);
        }
        if ((v1 & 0x8000000000000000) != 0)
          goto LABEL_36;
        if (v1 >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_38;

        *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 8 * v1 + 0x20) = v9;
        sub_21FC5B7C0();
      }
      v5 = v6;
      if (v4 == v6)
        return v15;
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    v2 = (uint64_t)sub_21FBFF7B8(v1);
    v15 = v2;
    if ((v2 & 0x8000000000000000) == 0)
      goto LABEL_4;
  }
}

uint64_t sub_21FA55194@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t Output;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v34 = a2;
  v4 = sub_21FC5AAAC();
  v5 = MEMORY[0x24BDAC7A8](v4);
  MEMORY[0x24BDAC7A8](v5);
  v37 = sub_21FC5A6C8();
  v6 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D1A0(0, &qword_25553F0A0, type metadata accessor for PBTypedData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v31 - v10;
  v12 = type metadata accessor for PBTypedData(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA558B4(a1, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_21FA2D1F8((uint64_t)v11, &qword_25553F0A0, type metadata accessor for PBTypedData);
    Output = type metadata accessor for ClinicalSharingQueryOutput(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Output - 8) + 56))(v34, 1, 1, Output);
  }
  sub_21FA2D23C((uint64_t)v11, (uint64_t)v15, type metadata accessor for PBTypedData);
  v18 = type metadata accessor for ClinicalSharingSampleQuery();
  v19 = 0;
  v20 = v34;
  v21 = (uint64_t)v15;
  if (*(_BYTE *)(v2 + *(int *)(v18 + 32)) != 1)
    goto LABEL_16;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v22 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v22 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v19 = MEMORY[0x24BEE4AF8];
  if (!v22)
    goto LABEL_16;
  v32 = v21;
  v33 = v2;
  v38 = MEMORY[0x24BEE4AF8];
  result = sub_21FC0196C(0, v22 & ~(v22 >> 63), 0);
  if ((v22 & 0x8000000000000000) == 0)
  {
    v23 = 0;
    v19 = v38;
    v35 = a1 & 0xC000000000000001;
    v36 = a1;
    v24 = v22;
    do
    {
      if (v35)
        v25 = (id)MEMORY[0x2207D057C](v23, a1);
      else
        v25 = *(id *)(a1 + 8 * v23 + 32);
      v26 = v25;
      v27 = objc_msgSend(v25, sel_startDate);
      sub_21FC5AA94();

      v28 = objc_msgSend(v26, sel_endDate);
      sub_21FC5AA94();

      sub_21FC5A68C();
      v38 = v19;
      v30 = *(_QWORD *)(v19 + 16);
      v29 = *(_QWORD *)(v19 + 24);
      if (v30 >= v29 >> 1)
      {
        sub_21FC0196C(v29 > 1, v30 + 1, 1);
        v19 = v38;
      }
      ++v23;
      *(_QWORD *)(v19 + 16) = v30 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v19+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v30, v8, v37);
      a1 = v36;
    }
    while (v24 != v23);
    v20 = v34;
    v21 = v32;
LABEL_16:
    sub_21FBE70C8(v21, v19, v20);
    swift_bridgeObjectRelease();
    return sub_21FA326EC(v21, type metadata accessor for PBTypedData);
  }
  __break(1u);
  return result;
}

uint64_t sub_21FA55534(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_21FA2D1A0(0, (unint64_t *)&qword_25553F0B0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v33 - v5;
  sub_21FA2D1A0(0, &qword_25553F0B8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], v3);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v33 - v8;
  v10 = sub_21FC5A83C();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_21FC5AAAC();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v1 + *(int *)(type metadata accessor for ClinicalSharingSampleQuery() + 36);
  if ((*(_BYTE *)(v18 + 8) & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v34 = *(_QWORD *)v18;
    sub_21FC5A6A4();
    sub_21FC5ABC0();
    v19 = sub_21FC5AC08();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v9, 0, 1, v19);
    v20 = sub_21FC5AC5C();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v6, 1, 1, v20);
    sub_21FC5A824();
    v21 = objc_allocWithZone(MEMORY[0x24BDD41C0]);
    v22 = (void *)sub_21FC5AA64();
    v23 = (void *)sub_21FC5A7A0();
    v24 = objc_msgSend(v21, sel_initWithAnchorDate_intervalComponents_, v22, v23);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v25 = v24;
    v26 = swift_bridgeObjectRetain();
    v27 = sub_21FA58FE8(v26, v25);
    swift_bridgeObjectRelease();

    v28 = sub_21FA58690(v27, v34);
    swift_bridgeObjectRelease();
    v29 = sub_21FA54C64(v28);
    swift_release();
    if (v29 < 0 || (v29 & 0x4000000000000000) != 0)
    {
      v32 = swift_bridgeObjectRetain();
      v30 = (uint64_t)sub_21FBFF7B8(v32);
      swift_bridgeObjectRelease();
    }
    else
    {
      v30 = v29 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
    }
    v35 = v30;
    sub_21FA5770C(&v35);
    swift_bridgeObjectRelease();

    return v35;
  }
  return a1;
}

uint64_t sub_21FA558B4@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  id v48;
  id v49;
  id v50;
  char *v51;
  unsigned int (*v52)(char *, uint64_t, uint64_t);
  void (*v53)(char *, char *, uint64_t);
  _QWORD *v54;
  char *v55;
  char *v56;
  char *v57;
  void (*v58)(char *, uint64_t);
  uint64_t (*v59)(uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  id v74;
  id v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  unint64_t *v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  id v113;
  id v114;
  uint64_t v115;
  id v116;
  id v117;
  uint64_t v118;
  id v119;
  id v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  _QWORD *v146;
  unint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  void (*v155)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v156;
  unint64_t v157;
  char v158[8];

  v127 = type metadata accessor for PBCategorySeries(0);
  MEMORY[0x24BDAC7A8](v127);
  v128 = (char *)&v123 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = type metadata accessor for ClinicalSharingSampleQuery();
  v5 = MEMORY[0x24BDAC7A8](v138);
  v7 = (uint64_t)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v125 = (uint64_t)&v123 - v9;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v126 = (uint64_t)&v123 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v124 = (uint64_t)&v123 - v12;
  v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v137 = (uint64_t)&v123 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v136 = (uint64_t)&v123 - v17;
  v18 = type metadata accessor for PBTimeSeries(0);
  MEMORY[0x24BDAC7A8](v18);
  v131 = (uint64_t)&v123 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_21FC5A6C8();
  v21 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878];
  v22 = *(_QWORD **)(v20 - 8);
  v23 = MEMORY[0x24BDAC7A8](v20);
  v145 = (char *)&v123 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v148 = (char *)&v123 - v25;
  v26 = sub_21FC5AAAC();
  v27 = MEMORY[0x24BDAC7A8](v26);
  v150 = (char *)&v123 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v149 = (char *)&v123 - v29;
  sub_21FA2D1A0(0, &qword_25553E0F8, type metadata accessor for PBDateRange, v13);
  MEMORY[0x24BDAC7A8](v30);
  v135 = (uint64_t)&v123 - v31;
  v139 = type metadata accessor for PBTypedData(0);
  v32 = *(unint64_t **)(v139 - 8);
  MEMORY[0x24BDAC7A8](v139);
  v142 = (uint64_t)&v123 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for PBDateRange(0);
  v133 = *(_QWORD *)(v134 - 8);
  MEMORY[0x24BDAC7A8](v134);
  v141 = (uint64_t)&v123 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D1A0(0, &qword_25553E0E8, v21, v13);
  v36 = MEMORY[0x24BDAC7A8](v35);
  v144 = (char *)&v123 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = MEMORY[0x24BDAC7A8](v36);
  v154 = (char *)&v123 - v39;
  v40 = MEMORY[0x24BDAC7A8](v38);
  v42 = (char *)&v123 - v41;
  v43 = MEMORY[0x24BDAC7A8](v40);
  v45 = (char *)&v123 - v44;
  MEMORY[0x24BDAC7A8](v43);
  v140 = (uint64_t)&v123 - v46;
  if (a1 >> 62)
    goto LABEL_16;
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v32[7])(a2, 1, 1, v139);
  while (1)
  {
    v151 = v42;
    v132 = v32;
    v47 = sub_21FA55534(a1);
    v155 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v22[7];
    v155(v45, 1, 1, v20);
    v130 = a2;
    v129 = v7;
    if (v47 >> 62)
      break;
    a2 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    v152 = v47;
    if (!a2)
      goto LABEL_19;
LABEL_5:
    v146 = v22;
    v147 = v47 & 0xC000000000000001;
    v7 = 4;
    while (1)
    {
      v48 = v147 ? (id)MEMORY[0x2207D057C](v7 - 4, v47) : *(id *)(v47 + 8 * v7);
      a1 = (unint64_t)v48;
      if (__OFADD__(v7 - 4, 1))
        break;
      v153 = v7 - 3;
      v49 = objc_msgSend(v48, sel_startDate);
      sub_21FC5AA94();

      v50 = objc_msgSend((id)a1, sel_endDate);
      sub_21FC5AA94();

      v51 = v151;
      v47 = v152;
      sub_21FC5A68C();

      v155(v51, 0, 1, v20);
      v52 = (unsigned int (*)(char *, uint64_t, uint64_t))v22[6];
      if (v52(v51, 1, v20) == 1)
        goto LABEL_20;
      v53 = (void (*)(char *, char *, uint64_t))v22[4];
      v54 = v22;
      v55 = v148;
      v53(v148, v51, v20);
      v42 = v154;
      sub_21FA59738((uint64_t)v45, (uint64_t)v154);
      if (v52(v42, 1, v20) == 1)
      {
        v32 = (unint64_t *)MEMORY[0x24BDCB878];
        sub_21FA2D1F8((uint64_t)v45, &qword_25553E0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878]);
        sub_21FA2D1F8((uint64_t)v154, &qword_25553E0E8, (uint64_t (*)(uint64_t))v32);
        v53(v45, v55, v20);
        v155(v45, 0, 1, v20);
      }
      else
      {
        v56 = v145;
        v53(v145, v154, v20);
        v42 = v45;
        v57 = v144;
        sub_21FC5A6BC();
        v58 = (void (*)(char *, uint64_t))v54[1];
        v58(v56, v20);
        v58(v55, v20);
        v32 = &qword_25553E0E8;
        v59 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878];
        sub_21FA2D1F8((uint64_t)v42, &qword_25553E0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878]);
        v155(v57, 0, 1, v20);
        v60 = (uint64_t)v57;
        v45 = v42;
        sub_21FA2D280(v60, (uint64_t)v42, &qword_25553E0E8, v59);
      }
      ++v7;
      v22 = v146;
      if (v153 == a2)
        goto LABEL_19;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    v61 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
    if (!v61)
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v32[7])(a2, 1, 1, v139);
  }
  swift_bridgeObjectRetain_n();
  a2 = sub_21FC5BC7C();
  v152 = v47;
  if (a2)
    goto LABEL_5;
LABEL_19:
  v155(v151, 1, 1, v20);
LABEL_20:
  swift_bridgeObjectRelease();
  v63 = v140;
  sub_21FA2D280((uint64_t)v45, v140, &qword_25553E0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878]);
  swift_bridgeObjectRelease();
  v64 = v141;
  v65 = v143;
  sub_21FBE7E8C(5, 1, v63);
  v66 = v64;
  v67 = v135;
  sub_21FA2D120(v66, v135, type metadata accessor for PBDateRange);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v133 + 56))(v67, 0, 1, v134);
  v68 = v142;
  sub_21FBE8D18(v67, v142);
  sub_21FA2D1F8(v67, &qword_25553E0F8, type metadata accessor for PBDateRange);
  v69 = v138;
  v70 = *(int *)(v138 + 24);
  v71 = *(void **)(v65 + v70);
  objc_opt_self();
  v72 = swift_dynamicCastObjCClass();
  if (v72)
  {
    v73 = (void *)v72;
    v74 = v71;
    v75 = sub_21FC20F30();
    v76 = v139;
    if (v75)
    {
      v77 = v75;
      v78 = sub_21FAC1B2C(v152);
      swift_bridgeObjectRelease();
      v79 = v131;
      if (v78)
      {
        sub_21FA569C0(v78, v77, v131);
        swift_bridgeObjectRelease();
        v80 = *(int *)(v76 + 20);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for PBTypedData._StorageClass(0);
          swift_allocObject();
          v81 = swift_retain();
          *(_QWORD *)(v68 + v80) = sub_21FA3A458(v81);
          swift_release();
        }
        v82 = *(_QWORD *)(v68 + v80);
        v83 = v136;
        sub_21FA2D23C(v79, v136, type metadata accessor for PBTimeSeries);
        v84 = type metadata accessor for PBTypedData.OneOf_Raw(0);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v83, 0, 1, v84);
        v85 = v137;
        sub_21FA2D280(v83, v137, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
        v86 = v82
            + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
        swift_beginAccess();
        swift_retain();
        sub_21FA2D2D8(v85, v86, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
        swift_endAccess();

        goto LABEL_35;
      }
      v156 = 0;
      v157 = 0xE000000000000000;
      sub_21FC5BB74();
      swift_bridgeObjectRelease();
      v156 = 0xD000000000000023;
      v157 = 0x800000021FC74BF0;
      v114 = objc_msgSend(v73, sel_description);
      sub_21FC5B604();

      sub_21FC5B6AC();
      swift_bridgeObjectRelease();
      v122 = 0;
    }
    else
    {
      v111 = v124;
      sub_21FA2D120(v65, v124, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSampleQuery);
      v156 = 0;
      v157 = 0xE000000000000000;
      sub_21FC5BB74();
      swift_bridgeObjectRelease();
      v156 = 0xD00000000000001ALL;
      v157 = 0x800000021FC75210;
      v112 = *(id *)(v111 + *(int *)(v138 + 24));
      v113 = objc_msgSend(v112, sel_description);
      sub_21FC5B604();

      sub_21FC5B6AC();
      swift_bridgeObjectRelease();
      v122 = 0;
    }
LABEL_46:
    result = sub_21FC5BC70();
    __break(1u);
  }
  else
  {
    objc_opt_self();
    v87 = swift_dynamicCastObjCClass();
    v76 = v139;
    if (!v87)
    {
      v115 = v125;
      sub_21FA2D120(v65, v125, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSampleQuery);
      v156 = 0;
      v157 = 0xE000000000000000;
      sub_21FC5BB74();
      swift_bridgeObjectRelease();
      v156 = 0xD000000000000016;
      v157 = 0x800000021FC751F0;
      v116 = *(id *)(v115 + *(int *)(v69 + 24));
      v117 = objc_msgSend(v116, sel_description);
      sub_21FC5B604();

      sub_21FC5B6AC();
      swift_bridgeObjectRelease();
      v122 = 0;
      goto LABEL_46;
    }
    v88 = sub_21FAC1B38(v152);
    swift_bridgeObjectRelease();
    v89 = (uint64_t)v128;
    if (!v88)
    {
      v118 = v126;
      sub_21FA2D120(v65, v126, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSampleQuery);
      v156 = 0;
      v157 = 0xE000000000000000;
      sub_21FC5BB74();
      swift_bridgeObjectRelease();
      v156 = 0xD000000000000023;
      v157 = 0x800000021FC74BF0;
      v119 = *(id *)(v118 + *(int *)(v69 + 24));
      v120 = objc_msgSend(v119, sel_description);
      sub_21FC5B604();

      sub_21FC5B6AC();
      swift_bridgeObjectRelease();
      v122 = 0;
      goto LABEL_46;
    }
    sub_21FC5AD10();
    v90 = *(int *)(v127 + 20);
    if (qword_25553D868 != -1)
      swift_once();
    v91 = qword_255543A10;
    *(_QWORD *)(v89 + v90) = qword_255543A10;
    MEMORY[0x24BDAC7A8](v91);
    v121 = v65;
    swift_retain();
    v92 = sub_21FA5936C(v88, (void (*)(unint64_t *))sub_21FA58FC4, (uint64_t)(&v123 - 4), (uint64_t)v158, type metadata accessor for PBCategorySeries.Event, (uint64_t)sub_21FC0186C);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBCategorySeries._StorageClass(0);
      swift_allocObject();
      v93 = swift_retain();
      *(_QWORD *)(v89 + v90) = sub_21FB4D47C(v93);
      swift_release();
    }
    v94 = (uint64_t *)(*(_QWORD *)(v89 + v90)
                    + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBCategorySeriesP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__events);
    swift_beginAccess();
    *v94 = v92;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v95 = *(int *)(v76 + 20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBTypedData._StorageClass(0);
      swift_allocObject();
      v96 = swift_retain();
      *(_QWORD *)(v68 + v95) = sub_21FA3A458(v96);
      swift_release();
    }
    v97 = *(_QWORD *)(v68 + v95);
    v98 = v136;
    sub_21FA2D23C(v89, v136, type metadata accessor for PBCategorySeries);
    v99 = type metadata accessor for PBTypedData.OneOf_Raw(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 56))(v98, 0, 1, v99);
    v100 = v137;
    sub_21FA2D280(v98, v137, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
    v101 = v97
         + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
    swift_beginAccess();
    swift_retain();
    sub_21FA2D2D8(v100, v101, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
    swift_endAccess();
LABEL_35:
    v102 = v130;
    v103 = v129;
    swift_release();
    v104 = objc_msgSend(*(id *)(v65 + v70), sel_code);
    sub_21FA2D120(v65, v103, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSampleQuery);
    v105 = v132;
    if (v104 == (id)15)
    {
      v106 = *(_BYTE *)(v103 + *(int *)(v138 + 36) + 8);
      sub_21FA326EC(v103, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSampleQuery);
      v107 = v142;
      if ((v106 & 1) == 0)
      {
        v108 = *(int *)(v76 + 20);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for PBTypedData._StorageClass(0);
          swift_allocObject();
          v109 = swift_retain();
          *(_QWORD *)(v107 + v108) = sub_21FA3A458(v109);
          swift_release();
        }
        v110 = *(_QWORD *)(v107 + v108);
        swift_beginAccess();
        *(_QWORD *)(v110 + 16) = 131;
        *(_BYTE *)(v110 + 24) = 1;
        v105 = v132;
      }
    }
    else
    {
      sub_21FA326EC(v103, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSampleQuery);
      v107 = v142;
    }
    sub_21FA326EC(v141, type metadata accessor for PBDateRange);
    sub_21FA2D1F8(v140, &qword_25553E0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878]);
    sub_21FA2D23C(v107, v102, type metadata accessor for PBTypedData);
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v105[7])(v102, 0, 1, v76);
  }
  return result;
}

uint64_t sub_21FA569C0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD v20[4];
  char v21[16];

  v4 = v3;
  sub_21FC5AD10();
  v8 = *(int *)(type metadata accessor for PBTimeSeries(0) + 20);
  if (qword_25553D7F8 != -1)
    swift_once();
  *(_QWORD *)(a3 + v8) = qword_2555438F0;
  swift_retain();
  v9 = objc_msgSend(a2, sel_unitString);
  v10 = sub_21FC5B604();
  v12 = v11;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBTimeSeries._StorageClass(0);
    swift_allocObject();
    v13 = swift_retain();
    *(_QWORD *)(a3 + v8) = sub_21FB49070(v13);
    swift_release();
  }
  v14 = (uint64_t *)(*(_QWORD *)(a3 + v8)
                  + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBTimeSeriesP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__unit);
  swift_beginAccess();
  *v14 = v10;
  v14[1] = v12;
  v15 = swift_bridgeObjectRelease();
  MEMORY[0x24BDAC7A8](v15);
  v20[2] = v4;
  v20[3] = a2;
  v16 = sub_21FA5936C(a1, (void (*)(unint64_t *))sub_21FA59794, (uint64_t)v20, (uint64_t)v21, type metadata accessor for PBTimeSeries.Value, (uint64_t)sub_21FC01940);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBTimeSeries._StorageClass(0);
    swift_allocObject();
    v17 = swift_retain();
    *(_QWORD *)(a3 + v8) = sub_21FB49070(v17);
    swift_release();
  }
  v18 = (uint64_t *)(*(_QWORD *)(a3 + v8)
                  + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBTimeSeriesP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__values);
  swift_beginAccess();
  *v18 = v16;
  return swift_bridgeObjectRelease();
}

void sub_21FA56BC8(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  void (*v26)(char *, _QWORD, uint64_t, uint64_t);
  id v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;

  v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_21FA2D1A0(0, &qword_25553E0F0, type metadata accessor for PBCategorySeries.Event.OneOf_AdditionalData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v59 = (uint64_t)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v58 = (uint64_t *)((char *)&v57 - v8);
  sub_21FA2D1A0(0, &qword_25553E0F8, type metadata accessor for PBDateRange, v4);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v62 = (uint64_t)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v57 - v12;
  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], v4);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v57 - v18;
  v20 = type metadata accessor for PBDateRange(0);
  v60 = *(_QWORD *)(v20 - 8);
  v61 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC5AD10();
  v23 = *(int *)(type metadata accessor for PBCategorySeries.Event(0) + 20);
  if (qword_25553D890 != -1)
    swift_once();
  *(_QWORD *)(a2 + v23) = qword_255543A68;
  swift_retain();
  v24 = objc_msgSend(a1, sel_startDate);
  sub_21FC5AA94();

  v25 = sub_21FC5AAAC();
  v26 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v26(v19, 0, 1, v25);
  v63 = a1;
  v27 = objc_msgSend(a1, sel_endDate);
  sub_21FC5AA94();

  v26(v17, 0, 1, v25);
  sub_21FC0329C(v19, v17);
  v28 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
  sub_21FA2D1F8((uint64_t)v17, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  sub_21FA2D1F8((uint64_t)v19, (unint64_t *)&qword_25406AAE8, v28);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBCategorySeries.Event._StorageClass(0);
    swift_allocObject();
    v29 = swift_retain();
    *(_QWORD *)(a2 + v23) = sub_21FB4E9EC(v29);
    swift_release();
  }
  v30 = *(_QWORD *)(a2 + v23);
  sub_21FA2D23C((uint64_t)v22, (uint64_t)v13, type metadata accessor for PBDateRange);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v13, 0, 1, v61);
  v31 = (uint64_t)v13;
  v32 = v62;
  sub_21FA2D280(v31, v62, &qword_25553E0F8, type metadata accessor for PBDateRange);
  v33 = v30
      + OBJC_IVAR____TtCVV19HealthRecordsDaemon16PBCategorySeries5EventP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__recordedTime;
  swift_beginAccess();
  swift_retain();
  sub_21FA2D2D8(v32, v33, &qword_25553E0F8, type metadata accessor for PBDateRange);
  swift_endAccess();
  swift_release();
  v34 = v63;
  v35 = objc_msgSend(v63, sel_sourceRevision);
  v36 = objc_msgSend(v35, sel_source);

  v37 = objc_msgSend(v36, sel_name);
  v38 = sub_21FC5B604();
  v40 = v39;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBCategorySeries.Event._StorageClass(0);
    swift_allocObject();
    v41 = swift_retain();
    *(_QWORD *)(a2 + v23) = sub_21FB4E9EC(v41);
    swift_release();
  }
  v42 = (uint64_t *)(*(_QWORD *)(a2 + v23)
                  + OBJC_IVAR____TtCVV19HealthRecordsDaemon16PBCategorySeries5EventP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__source);
  swift_beginAccess();
  *v42 = v38;
  v42[1] = v40;
  swift_bridgeObjectRelease();
  v43 = (uint64_t)objc_msgSend(v34, sel_value);
  if (v43 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_17;
  }
  v44 = v43;
  if (v43 > 0x7FFFFFFF)
  {
LABEL_17:
    __break(1u);
    return;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBCategorySeries.Event._StorageClass(0);
    swift_allocObject();
    v45 = swift_retain();
    *(_QWORD *)(a2 + v23) = sub_21FB4E9EC(v45);
    swift_release();
  }
  v46 = *(_QWORD *)(a2 + v23);
  swift_beginAccess();
  *(_DWORD *)(v46 + 16) = v44;
  sub_21FA2D880();
  if (v48)
  {
    v49 = v47;
    v50 = v48;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBCategorySeries.Event._StorageClass(0);
      swift_allocObject();
      v51 = swift_retain();
      *(_QWORD *)(a2 + v23) = sub_21FB4E9EC(v51);
      swift_release();
    }
    v52 = *(_QWORD *)(a2 + v23);
    v53 = (uint64_t)v58;
    *v58 = v49;
    *(_QWORD *)(v53 + 8) = v50;
    v54 = type metadata accessor for PBCategorySeries.Event.OneOf_AdditionalData(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v53, 0, 1, v54);
    v55 = v59;
    sub_21FA2D280(v53, v59, &qword_25553E0F0, type metadata accessor for PBCategorySeries.Event.OneOf_AdditionalData);
    v56 = v52
        + OBJC_IVAR____TtCVV19HealthRecordsDaemon16PBCategorySeries5EventP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__additionalData;
    swift_beginAccess();
    swift_retain();
    sub_21FA2D2D8(v55, v56, &qword_25553E0F0, type metadata accessor for PBCategorySeries.Event.OneOf_AdditionalData);
    swift_endAccess();
    swift_release();
  }
}

id sub_21FA57218@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id result;
  char v36;
  uint64_t v37;
  uint64_t v38;

  v7 = sub_21FC5AAAC();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0xE000000000000000;
  *(_DWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0xE000000000000000;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0xE000000000000000;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_QWORD *)(a3 + 120) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a3 + 128) = 0;
  *(_WORD *)(a3 + 136) = 256;
  type metadata accessor for PBTimeSeries.Value(0);
  sub_21FC5AD10();
  v11 = objc_msgSend(a1, sel_quantity);
  objc_msgSend(v11, sel_doubleValueForUnit_, a2);
  v13 = v12;

  *(_QWORD *)(a3 + 112) = v13;
  v14 = objc_msgSend(a1, sel_startDate);
  sub_21FC5AA94();

  v15 = *(id *)(*v3 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_isoDateFormatter);
  v16 = (void *)sub_21FC5AA64();
  v17 = objc_msgSend(v15, sel_stringFromDate_, v16);

  v18 = sub_21FC5B604();
  v20 = v19;

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a3 + 24) = v18;
  *(_QWORD *)(a3 + 32) = v20;
  v21 = objc_msgSend(a1, sel_sourceRevision);
  v22 = objc_msgSend(v21, sel_source);

  v23 = objc_msgSend(v22, sel_name);
  v24 = sub_21FC5B604();
  v26 = v25;

  swift_bridgeObjectRelease();
  v27 = HIBYTE(v26) & 0xF;
  if ((v26 & 0x2000000000000000) == 0)
    v27 = v24 & 0xFFFFFFFFFFFFLL;
  if (v27)
  {
    sub_21FA597BC(0, &qword_25553F0A8);
    v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_21FC5EE30;
    v29 = objc_msgSend(a1, sel_sourceRevision);
    v30 = objc_msgSend(v29, sel_source);

    v31 = objc_msgSend(v30, sel_name);
    v32 = sub_21FC5B604();
    v34 = v33;

    *(_QWORD *)(v28 + 32) = v32;
    *(_QWORD *)(v28 + 40) = v34;
    swift_bridgeObjectRelease();
    *(_QWORD *)(a3 + 120) = v28;
  }
  result = sub_21FC3E1FC();
  if ((v36 & 1) == 0)
  {
    v37 = result == (id)1;
    if (result == (id)2)
      v37 = 2;
    *(_QWORD *)(a3 + 128) = v37;
    *(_WORD *)(a3 + 136) = 1;
  }
  return result;
}

uint64_t sub_21FA5751C()
{
  return sub_21FA2A08C(&qword_25553E0C8, (uint64_t (*)(uint64_t))sub_21FA2CCF4, MEMORY[0x24BDB9AF8]);
}

void sub_21FA57538()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553F060)
  {
    sub_21FA57658(255, &qword_25553F058, (uint64_t (*)(uint64_t))sub_21FA2CCF4, sub_21FA5751C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB96B0]);
    type metadata accessor for ClinicalSharingQueryOutput(255);
    sub_21FA58F7C(&qword_25553F068, &qword_25553F058, (uint64_t (*)(uint64_t))sub_21FA2CCF4, sub_21FA5751C);
    v0 = sub_21FC5B004();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553F060);
  }
}

void sub_21FA575F8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553F070)
  {
    sub_21FA2CCF4();
    sub_21FA5751C();
    v0 = sub_21FC5B0F4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553F070);
  }
}

void sub_21FA57658(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if (!*a2)
  {
    v9 = a3(255);
    sub_21FA2D1A0(255, (unint64_t *)&qword_25553E0B8, (uint64_t (*)(uint64_t))sub_21FA2CD78, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v11 = v10;
    v12 = a4();
    v13 = a5(a1, v9, v11, v12);
    if (!v14)
      atomic_store(v13, a2);
  }
}

uint64_t sub_21FA576F0()
{
  return sub_21FA2A08C(&qword_25553F080, (uint64_t (*)(uint64_t))sub_21FA575F8, MEMORY[0x24BDB98D8]);
}

uint64_t sub_21FA5770C(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    sub_21FBF402C();
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_21FA57784(v6);
  return sub_21FC5BBEC();
}

void sub_21FA57784(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  id *v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  id v49;
  id v50;
  char *v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  uint64_t v54;
  void *v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  char v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  id *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;

  v131 = sub_21FC5AAAC();
  v129 = *(_QWORD *)(v131 - 8);
  v2 = MEMORY[0x24BDAC7A8](v131);
  v130 = (char *)&v117 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v117 - v4;
  v6 = a1[1];
  v7 = sub_21FC5BDC0();
  if (v7 >= v6)
  {
    if (v6 < 0)
      goto LABEL_134;
    if (v6)
      sub_21FA58060(0, v6, 1, a1);
    return;
  }
  if (v6 >= 0)
    v8 = v6;
  else
    v8 = v6 + 1;
  if (v6 < -1)
    goto LABEL_142;
  v122 = v7;
  v119 = a1;
  if (v6 < 2)
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
    v133 = MEMORY[0x24BEE4AF8];
    v127 = (id *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v6 != 1)
    {
      v15 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_101:
      v109 = v128;
      if (v15 >= 2)
      {
        v110 = *v119;
        do
        {
          v111 = v15 - 2;
          if (v15 < 2)
            goto LABEL_129;
          if (!v110)
            goto LABEL_141;
          v112 = v11;
          v113 = *(_QWORD *)&v11[16 * v111 + 32];
          v114 = *(_QWORD *)&v11[16 * v15 + 24];
          sub_21FA58228((void **)(v110 + 8 * v113), (id *)(v110 + 8 * *(_QWORD *)&v11[16 * v15 + 16]), (id *)(v110 + 8 * v114), v127);
          if (v109)
            break;
          if (v114 < v113)
            goto LABEL_130;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v112 = sub_21FBF2764((uint64_t)v112);
          if (v111 >= *((_QWORD *)v112 + 2))
            goto LABEL_131;
          v115 = &v112[16 * v111 + 32];
          *(_QWORD *)v115 = v113;
          *((_QWORD *)v115 + 1) = v114;
          v116 = *((_QWORD *)v112 + 2);
          if (v15 > v116)
            goto LABEL_132;
          memmove(&v112[16 * v15 + 16], &v112[16 * v15 + 32], 16 * (v116 - v15));
          v11 = v112;
          *((_QWORD *)v112 + 2) = v116 - 1;
          v15 = v116 - 1;
        }
        while (v116 > 2);
      }
LABEL_112:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v133 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      sub_21FC5B7C0();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v9 = v8 >> 1;
    sub_21FA2CD78();
    v10 = sub_21FC5B7D8();
    *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) = v9;
    v127 = (id *)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
    v133 = v10;
  }
  v12 = 0;
  v13 = *a1;
  v14 = *a1 + 16;
  v120 = *a1 - 8;
  v121 = v14;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v125 = v6;
  v132 = v13;
  while (1)
  {
    v16 = v12 + 1;
    v124 = v12;
    if (v12 + 1 < v6)
    {
      v17 = v11;
      v18 = *(void **)(v13 + 8 * v12);
      v19 = *(id *)(v13 + 8 * v16);
      v20 = v18;
      v21 = objc_msgSend(v19, sel_startDate);
      sub_21FC5AA94();

      v22 = objc_msgSend(v20, sel_startDate);
      v23 = v130;
      sub_21FC5AA94();

      LODWORD(v126) = sub_21FC5AA70();
      v24 = *(void (**)(char *, uint64_t))(v129 + 8);
      v25 = v23;
      v26 = v131;
      v24(v25, v131);
      v24(v5, v26);

      v6 = v125;
      v16 = v12 + 2;
      if (v12 + 2 < v6)
      {
        v27 = (id *)(v121 + 8 * v12);
        while (1)
        {
          v28 = v16;
          v29 = *(v27 - 1);
          v30 = *v27;
          v31 = v29;
          v32 = objc_msgSend(v30, sel_startDate);
          sub_21FC5AA94();

          v33 = objc_msgSend(v31, sel_startDate);
          v34 = v130;
          sub_21FC5AA94();

          LODWORD(v33) = sub_21FC5AA70();
          v35 = v34;
          v36 = v131;
          v24(v35, v131);
          v24(v5, v36);

          if (((v126 ^ v33) & 1) != 0)
            break;
          v16 = v28 + 1;
          ++v27;
          v6 = v125;
          if (v125 == v28 + 1)
          {
            v16 = v125;
            goto LABEL_22;
          }
        }
        v6 = v125;
        v16 = v28;
LABEL_22:
        v12 = v124;
      }
      v11 = v17;
      v13 = v132;
      if ((v126 & 1) != 0)
      {
        if (v16 < v12)
          goto LABEL_135;
        if (v12 < v16)
        {
          v37 = (uint64_t *)(v120 + 8 * v16);
          v38 = v16;
          v39 = v12;
          v40 = (uint64_t *)(v132 + 8 * v12);
          do
          {
            if (v39 != --v38)
            {
              if (!v13)
                goto LABEL_140;
              v41 = *v40;
              *v40 = *v37;
              *v37 = v41;
            }
            ++v39;
            --v37;
            ++v40;
          }
          while (v39 < v38);
        }
      }
    }
    if (v16 < v6)
    {
      if (__OFSUB__(v16, v12))
        goto LABEL_133;
      if (v16 - v12 < v122)
        break;
    }
LABEL_50:
    if (v16 < v12)
      goto LABEL_128;
    v56 = v11;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v11 = v56;
    else
      v11 = sub_21FBF2344(0, *((_QWORD *)v56 + 2) + 1, 1, v56);
    v58 = *((_QWORD *)v11 + 2);
    v57 = *((_QWORD *)v11 + 3);
    v15 = v58 + 1;
    v13 = v132;
    if (v58 >= v57 >> 1)
    {
      v108 = sub_21FBF2344((char *)(v57 > 1), v58 + 1, 1, v11);
      v13 = v132;
      v11 = v108;
    }
    *((_QWORD *)v11 + 2) = v15;
    v59 = v11 + 32;
    v60 = &v11[16 * v58 + 32];
    *(_QWORD *)v60 = v12;
    *((_QWORD *)v60 + 1) = v16;
    v126 = v16;
    if (v58)
    {
      while (1)
      {
        v61 = v15 - 1;
        if (v15 >= 4)
        {
          v66 = &v59[16 * v15];
          v67 = *((_QWORD *)v66 - 8);
          v68 = *((_QWORD *)v66 - 7);
          v72 = __OFSUB__(v68, v67);
          v69 = v68 - v67;
          if (v72)
            goto LABEL_117;
          v71 = *((_QWORD *)v66 - 6);
          v70 = *((_QWORD *)v66 - 5);
          v72 = __OFSUB__(v70, v71);
          v64 = v70 - v71;
          v65 = v72;
          if (v72)
            goto LABEL_118;
          v73 = v15 - 2;
          v74 = &v59[16 * v15 - 32];
          v76 = *(_QWORD *)v74;
          v75 = *((_QWORD *)v74 + 1);
          v72 = __OFSUB__(v75, v76);
          v77 = v75 - v76;
          if (v72)
            goto LABEL_120;
          v72 = __OFADD__(v64, v77);
          v78 = v64 + v77;
          if (v72)
            goto LABEL_123;
          if (v78 >= v69)
          {
            v96 = &v59[16 * v61];
            v98 = *(_QWORD *)v96;
            v97 = *((_QWORD *)v96 + 1);
            v72 = __OFSUB__(v97, v98);
            v99 = v97 - v98;
            if (v72)
              goto LABEL_127;
            v89 = v64 < v99;
            goto LABEL_87;
          }
        }
        else
        {
          if (v15 != 3)
          {
            v90 = *((_QWORD *)v11 + 4);
            v91 = *((_QWORD *)v11 + 5);
            v72 = __OFSUB__(v91, v90);
            v83 = v91 - v90;
            v84 = v72;
            goto LABEL_81;
          }
          v63 = *((_QWORD *)v11 + 4);
          v62 = *((_QWORD *)v11 + 5);
          v72 = __OFSUB__(v62, v63);
          v64 = v62 - v63;
          v65 = v72;
        }
        if ((v65 & 1) != 0)
          goto LABEL_119;
        v73 = v15 - 2;
        v79 = &v59[16 * v15 - 32];
        v81 = *(_QWORD *)v79;
        v80 = *((_QWORD *)v79 + 1);
        v82 = __OFSUB__(v80, v81);
        v83 = v80 - v81;
        v84 = v82;
        if (v82)
          goto LABEL_122;
        v85 = &v59[16 * v61];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v72 = __OFSUB__(v86, v87);
        v88 = v86 - v87;
        if (v72)
          goto LABEL_125;
        if (__OFADD__(v83, v88))
          goto LABEL_126;
        if (v83 + v88 >= v64)
        {
          v89 = v64 < v88;
LABEL_87:
          if (v89)
            v61 = v73;
          goto LABEL_89;
        }
LABEL_81:
        if ((v84 & 1) != 0)
          goto LABEL_121;
        v92 = &v59[16 * v61];
        v94 = *(_QWORD *)v92;
        v93 = *((_QWORD *)v92 + 1);
        v72 = __OFSUB__(v93, v94);
        v95 = v93 - v94;
        if (v72)
          goto LABEL_124;
        if (v95 < v83)
          goto LABEL_14;
LABEL_89:
        v100 = v61 - 1;
        if (v61 - 1 >= v15)
        {
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        if (!v13)
          goto LABEL_139;
        v101 = v11;
        v102 = &v59[16 * v100];
        v103 = *(_QWORD *)v102;
        v104 = &v59[16 * v61];
        v105 = *((_QWORD *)v104 + 1);
        v106 = v128;
        sub_21FA58228((void **)(v13 + 8 * *(_QWORD *)v102), (id *)(v13 + 8 * *(_QWORD *)v104), (id *)(v13 + 8 * v105), v127);
        v128 = v106;
        if (v106)
          goto LABEL_112;
        if (v105 < v103)
          goto LABEL_114;
        if (v61 > *((_QWORD *)v101 + 2))
          goto LABEL_115;
        *(_QWORD *)v102 = v103;
        *(_QWORD *)&v59[16 * v100 + 8] = v105;
        v107 = *((_QWORD *)v101 + 2);
        if (v61 >= v107)
          goto LABEL_116;
        v15 = v107 - 1;
        memmove(&v59[16 * v61], v104 + 16, 16 * (v107 - 1 - v61));
        v11 = v101;
        *((_QWORD *)v101 + 2) = v107 - 1;
        v13 = v132;
        if (v107 <= 2)
          goto LABEL_14;
      }
    }
    v15 = 1;
LABEL_14:
    v6 = v125;
    v12 = v126;
    if (v126 >= v125)
      goto LABEL_101;
  }
  if (__OFADD__(v12, v122))
    goto LABEL_136;
  if (v12 + v122 >= v6)
    v42 = v6;
  else
    v42 = v12 + v122;
  if (v42 >= v12)
  {
    if (v16 != v42)
    {
      v118 = v11;
      v43 = v120 + 8 * v16;
      v123 = v42;
      do
      {
        v44 = v16;
        v45 = *(void **)(v13 + 8 * v16);
        v126 = v43;
        while (1)
        {
          v46 = *(void **)v43;
          v47 = v45;
          v48 = v46;
          v49 = objc_msgSend(v47, sel_startDate);
          sub_21FC5AA94();

          v50 = objc_msgSend(v48, sel_startDate);
          v51 = v130;
          sub_21FC5AA94();

          LOBYTE(v50) = sub_21FC5AA70();
          v52 = *(void (**)(char *, uint64_t))(v129 + 8);
          v53 = v51;
          v54 = v131;
          v52(v53, v131);
          v52(v5, v54);

          if ((v50 & 1) == 0)
            break;
          v13 = v132;
          if (!v132)
            goto LABEL_138;
          v55 = *(void **)v43;
          v45 = *(void **)(v43 + 8);
          *(_QWORD *)v43 = v45;
          *(_QWORD *)(v43 + 8) = v55;
          v43 -= 8;
          if (v44 == ++v12)
            goto LABEL_43;
        }
        v13 = v132;
LABEL_43:
        v16 = v44 + 1;
        v43 = v126 + 8;
        v12 = v124;
      }
      while (v44 + 1 != v123);
      v16 = v123;
      v11 = v118;
    }
    goto LABEL_50;
  }
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  sub_21FC5BC64();
  __break(1u);
}

void sub_21FA58060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v28 = a1;
  v7 = sub_21FC5AAAC();
  v31 = *(_QWORD *)(v7 - 8);
  v32 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v30 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v26 - v10;
  v27 = a2;
  if (a3 != a2)
  {
    v33 = *a4;
    v12 = v33 + 8 * a3 - 8;
LABEL_5:
    v13 = *(void **)(v33 + 8 * a3);
    v14 = v28;
    v29 = v12;
    while (1)
    {
      v15 = *(void **)v12;
      v16 = v13;
      v17 = v15;
      v18 = objc_msgSend(v16, sel_startDate);
      sub_21FC5AA94();

      v19 = objc_msgSend(v17, sel_startDate);
      v20 = v30;
      sub_21FC5AA94();

      LOBYTE(v19) = sub_21FC5AA70();
      v21 = a3;
      v22 = *(void (**)(char *, uint64_t))(v31 + 8);
      v23 = v20;
      v24 = v32;
      v22(v23, v32);
      v22(v11, v24);
      a3 = v21;

      if ((v19 & 1) == 0)
      {
LABEL_4:
        a3 = v21 + 1;
        v12 = v29 + 8;
        if (v21 + 1 == v27)
          return;
        goto LABEL_5;
      }
      if (!v33)
        break;
      v25 = *(void **)v12;
      v13 = *(void **)(v12 + 8);
      *(_QWORD *)v12 = v13;
      *(_QWORD *)(v12 + 8) = v25;
      v12 -= 8;
      if (v21 == ++v14)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t sub_21FA58228(void **a1, id *a2, id *a3, id *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  char *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  char *v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  id *v28;
  id *v29;
  unint64_t v30;
  id *v31;
  id *v32;
  unint64_t v33;
  id *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  char *v39;
  id v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  uint64_t v44;
  id *v45;
  uint64_t result;
  uint64_t v47;
  void **v48;
  id *v49;
  unint64_t v50;
  void **v51;
  id *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  void **v58;
  id *v59;

  v8 = sub_21FC5AAAC();
  v55 = *(_QWORD *)(v8 - 8);
  v56 = v8;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v54 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v52 = a3;
  v53 = (char *)&v47 - v11;
  v12 = (char *)a2 - (char *)a1;
  v13 = (char *)a2 - (char *)a1 + 7;
  if ((char *)a2 - (char *)a1 >= 0)
    v13 = (char *)a2 - (char *)a1;
  v14 = v13 >> 3;
  v15 = (char *)a3 - (char *)a2;
  v16 = v15 / 8;
  v59 = a1;
  v49 = a4;
  v58 = a4;
  if (v13 >> 3 >= v15 / 8)
  {
    if (v15 < -7)
      goto LABEL_43;
    v29 = v49;
    if (v49 != a2 || &a2[v16] <= v49)
      memmove(v49, a2, 8 * v16);
    v30 = (unint64_t)&v29[v16];
    v57 = (_QWORD *)v30;
    v59 = a2;
    if (v15 < 8 || a1 >= a2)
      goto LABEL_42;
    v31 = v52 - 1;
    v32 = a2;
    v48 = a1;
    while (1)
    {
      v52 = a2;
      v50 = v30;
      v51 = v31 + 1;
      v34 = (id *)(v30 - 8);
      v35 = *--v32;
      v36 = *(id *)(v30 - 8);
      v37 = v35;
      v38 = objc_msgSend(v36, sel_startDate);
      v39 = v53;
      sub_21FC5AA94();

      v40 = objc_msgSend(v37, sel_startDate);
      v41 = v54;
      sub_21FC5AA94();

      LOBYTE(v40) = sub_21FC5AA70();
      v42 = *(void (**)(char *, uint64_t))(v55 + 8);
      v43 = v41;
      v44 = v56;
      v42(v43, v56);
      v42(v39, v44);

      if ((v40 & 1) != 0)
        break;
      v57 = v34;
      v32 = v52;
      if ((unint64_t)v51 < v50 || (unint64_t)v31 >= v50)
      {
        *v31 = *v34;
        v30 = (unint64_t)v34;
        goto LABEL_30;
      }
      v33 = (unint64_t)v48;
      v45 = v49;
      if (v51 != (void **)v50)
        *v31 = *v34;
      v30 = (unint64_t)v34;
      if (v34 <= v45)
        goto LABEL_42;
LABEL_31:
      --v31;
      a2 = v32;
      if ((unint64_t)v32 <= v33)
        goto LABEL_42;
    }
    v30 = v50;
    if (v51 != v52 || v31 >= v52)
      *v31 = *v32;
    v59 = v32;
LABEL_30:
    v33 = (unint64_t)v48;
    if (v30 <= (unint64_t)v49)
      goto LABEL_42;
    goto LABEL_31;
  }
  if (v12 >= -7)
  {
    v17 = v49;
    if (v49 != a1 || &a1[v14] <= v49)
      memmove(v49, a1, 8 * v14);
    v51 = &v17[v14];
    v57 = v51;
    if (v12 >= 8 && a2 < v52)
    {
      v18 = v53;
      do
      {
        v19 = *v17;
        v20 = *a2;
        v21 = v19;
        v22 = objc_msgSend(v20, sel_startDate);
        sub_21FC5AA94();

        v23 = objc_msgSend(v21, sel_startDate);
        v24 = v54;
        sub_21FC5AA94();

        LOBYTE(v23) = sub_21FC5AA70();
        v25 = *(void (**)(char *, uint64_t))(v55 + 8);
        v26 = v24;
        v27 = v56;
        v25(v26, v56);
        v25(v18, v27);

        if ((v23 & 1) != 0)
        {
          v28 = a2 + 1;
          if (a1 < a2 || a1 >= v28 || a1 != a2)
            *a1 = *a2;
        }
        else
        {
          if (a1 != v17)
            *a1 = *v17;
          v58 = ++v17;
          v28 = a2;
        }
        v59 = ++a1;
        if (v17 >= v51)
          break;
        a2 = v28;
      }
      while (v28 < v52);
    }
LABEL_42:
    sub_21FBF2438(&v59, &v58, &v57);
    return 1;
  }
LABEL_43:
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

uint64_t sub_21FA58690(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  _QWORD v11[2];

  v4 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x24BDAC8D0];
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = (unint64_t)((1 << v5) + 63) >> 6;
  v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_21FA587F4((_QWORD *)((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v4, a2);
    if (v2)
      swift_willThrow();
    else
      return v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    a2 = sub_21FA587F4((unint64_t *)v9, v6, v4, a2);
    MEMORY[0x2207D105C](v9, -1, -1);
  }
  return a2;
}

uint64_t sub_21FA587F4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int64_t v46;
  char *v47;
  char *v48;
  char *v49;

  v38 = a2;
  v44 = a4;
  v39 = a1;
  sub_21FA59800();
  v43 = v5;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v49 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v48 = (char *)&v38 - v8;
  v9 = sub_21FC5A6C8();
  v10 = *(_QWORD *)(v9 - 8);
  result = MEMORY[0x24BDAC7A8](v9);
  v47 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = 0;
  v45 = (_QWORD *)a3;
  v14 = *(_QWORD *)(a3 + 64);
  v40 = 0;
  v41 = a3 + 64;
  v15 = 1 << *(_BYTE *)(a3 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v42 = (unint64_t)(v15 + 63) >> 6;
  while (v17)
  {
    v18 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    v46 = v13;
    v19 = v18 | (v13 << 6);
LABEL_17:
    v24 = v45;
    v25 = v45[6] + *(_QWORD *)(v10 + 72) * v19;
    v26 = v10;
    v27 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
    v28 = v47;
    v27(v47, v25, v9);
    v29 = *(_QWORD *)(v24[7] + 8 * v19);
    v30 = v9;
    v31 = (uint64_t)v48;
    v27(v48, (unint64_t)v28, v30);
    v32 = v43;
    *(_QWORD *)(v31 + *(int *)(v43 + 48)) = v29;
    v33 = *(int *)(v32 + 48);
    v34 = v49;
    v35 = v31;
    v9 = v30;
    v27(v49, v35, v30);
    *(_QWORD *)&v34[v33] = v29;
    if (v29 >> 62)
    {
      swift_bridgeObjectRetain_n();
      v36 = sub_21FC5BC7C();
    }
    else
    {
      v36 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
    }
    v10 = v26;
    v13 = v46;
    sub_21FA326EC((uint64_t)v48, (uint64_t (*)(_QWORD))sub_21FA59800);
    v37 = *(void (**)(char *, uint64_t))(v26 + 8);
    v37(v49, v9);
    swift_bridgeObjectRelease();
    result = ((uint64_t (*)(char *, uint64_t))v37)(v47, v9);
    if (v36 <= v44)
    {
      *(unint64_t *)((char *)v39 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = __OFADD__(v40++, 1);
      if (v20)
        goto LABEL_31;
    }
  }
  v20 = __OFADD__(v13, 1);
  v21 = v13 + 1;
  if (v20)
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v21 >= v42)
    return sub_21FA58B44(v39, v38, v40, v45);
  v22 = *(_QWORD *)(v41 + 8 * v21);
  if (v22)
  {
LABEL_16:
    v17 = (v22 - 1) & v22;
    v46 = v21;
    v19 = __clz(__rbit64(v22)) + (v21 << 6);
    goto LABEL_17;
  }
  v23 = v21 + 1;
  if (v21 + 1 >= v42)
    return sub_21FA58B44(v39, v38, v40, v45);
  v22 = *(_QWORD *)(v41 + 8 * v23);
  if (v22)
    goto LABEL_15;
  v23 = v21 + 2;
  if (v21 + 2 >= v42)
    return sub_21FA58B44(v39, v38, v40, v45);
  v22 = *(_QWORD *)(v41 + 8 * v23);
  if (v22)
    goto LABEL_15;
  v23 = v21 + 3;
  if (v21 + 3 >= v42)
    return sub_21FA58B44(v39, v38, v40, v45);
  v22 = *(_QWORD *)(v41 + 8 * v23);
  if (v22)
  {
LABEL_15:
    v21 = v23;
    goto LABEL_16;
  }
  while (1)
  {
    v21 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v21 >= v42)
      return sub_21FA58B44(v39, v38, v40, v45);
    v22 = *(_QWORD *)(v41 + 8 * v21);
    ++v23;
    if (v22)
      goto LABEL_16;
  }
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_21FA58B44(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;

  v45 = sub_21FC5A6C8();
  v41 = *(_QWORD *)(v45 - 8);
  v8 = MEMORY[0x24BDAC7A8](v45);
  v44 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v40 = (char *)&v36 - v10;
  if (!a3)
    return MEMORY[0x24BEE4B00];
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_21FA57658(0, (unint64_t *)&qword_25553F0C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], sub_21FA59888, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE30A0]);
  result = sub_21FC5BCA0();
  v12 = result;
  v37 = a1;
  v38 = a2;
  if (a2 < 1)
    v13 = 0;
  else
    v13 = *a1;
  v14 = 0;
  v15 = result + 64;
  v39 = a4;
  v16 = v45;
  while (1)
  {
    if (v13)
    {
      v42 = (v13 - 1) & v13;
      v43 = v14;
      v17 = __clz(__rbit64(v13)) | (v14 << 6);
    }
    else
    {
      v18 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_40;
      if (v18 >= v38)
        return v12;
      v19 = v37[v18];
      v20 = v14 + 1;
      if (!v19)
      {
        v20 = v14 + 2;
        if (v14 + 2 >= v38)
          return v12;
        v19 = v37[v20];
        if (!v19)
        {
          v20 = v14 + 3;
          if (v14 + 3 >= v38)
            return v12;
          v19 = v37[v20];
          if (!v19)
          {
            v21 = v14 + 4;
            if (v14 + 4 >= v38)
              return v12;
            v19 = v37[v21];
            if (!v19)
            {
              while (1)
              {
                v20 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_41;
                if (v20 >= v38)
                  return v12;
                v19 = v37[v20];
                ++v21;
                if (v19)
                  goto LABEL_24;
              }
            }
            v20 = v14 + 4;
          }
        }
      }
LABEL_24:
      v42 = (v19 - 1) & v19;
      v43 = v20;
      v17 = __clz(__rbit64(v19)) + (v20 << 6);
    }
    v22 = v40;
    v23 = v41;
    v24 = *(_QWORD *)(v41 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v41 + 16))(v40, a4[6] + v24 * v17, v16);
    v25 = *(_QWORD *)(a4[7] + 8 * v17);
    v26 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v26(v44, v22, v16);
    sub_21FA59888();
    swift_bridgeObjectRetain();
    result = sub_21FC5B58C();
    v27 = -1 << *(_BYTE *)(v12 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      v30 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v33 = v29 == v32;
        if (v29 == v32)
          v29 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v15 + 8 * v29);
      }
      while (v34 == -1);
      v30 = __clz(__rbit64(~v34)) + (v29 << 6);
    }
    *(_QWORD *)(v15 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(_QWORD *)(v12 + 48) + v30 * v24, v44, v45);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v30) = v25;
    ++*(_QWORD *)(v12 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v39;
    v13 = v42;
    v14 = v43;
    if (!a3)
      return v12;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_21FA58E94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for ClinicalSharingSampleQuery();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  v4 = v3 + *(int *)(v1 + 20);
  v5 = sub_21FC5A6C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

  return swift_deallocObject();
}

uint64_t sub_21FA58F2C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for ClinicalSharingSampleQuery();
  return sub_21FA55194(*a1, a2);
}

uint64_t sub_21FA58F7C(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    sub_21FA57658(255, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB96B0]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB96C0], v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_21FA58FC4(void **a1@<X0>, uint64_t a2@<X8>)
{
  sub_21FA56BC8(*a1, a2);
}

uint64_t sub_21FA58FE8(unint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char *v17;
  void *v18;
  id v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;

  v44 = a2;
  v3 = sub_21FC5AAAC();
  v42 = *(_QWORD *)(v3 - 8);
  v43 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v41 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_21FC5A6C8();
  v39 = *(_QWORD *)(v5 - 8);
  v40 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v45 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = (_QWORD *)MEMORY[0x24BEE4B00];
  if (a1 >> 62)
  {
LABEL_24:
    swift_bridgeObjectRetain();
    v7 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v8 = (_QWORD *)MEMORY[0x24BEE4B00];
  if (!v7)
    return (uint64_t)v8;
  v38 = a1 & 0xC000000000000001;
  v9 = 4;
  v37 = MEMORY[0x24BEE4AD0] + 8;
  v36 = xmmword_21FC5E070;
  while (1)
  {
    if (v38)
      v12 = (id)MEMORY[0x2207D057C](v9 - 4, a1);
    else
      v12 = *(id *)(a1 + 8 * v9);
    v13 = v12;
    v14 = v9 - 3;
    if (__OFADD__(v9 - 4, 1))
    {
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    v15 = a1;
    v16 = objc_msgSend(v12, sel_startDate);
    v17 = v41;
    sub_21FC5AA94();

    v18 = (void *)sub_21FC5AA64();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v17, v43);
    v19 = objc_msgSend(v44, sel_dateIntervalContainingDate_index_, v18, 0);

    v20 = v45;
    sub_21FC5A674();

    a1 = sub_21FA73FC8(v20);
    v22 = v8[2];
    v23 = (v21 & 1) == 0;
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
      goto LABEL_22;
    v25 = v21;
    if (v8[3] < v24)
      break;
LABEL_17:
    if ((v25 & 1) != 0)
    {
      v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v45, v40);
      v8 = v47;
      v11 = (_QWORD *)(v47[7] + 8 * a1);
      MEMORY[0x2207D0180](v10);
      if (*(_QWORD *)((*v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_21FC5B7CC();
      sub_21FC5B7E4();
      sub_21FC5B7C0();
    }
    else
    {
      sub_21FA597BC(0, (unint64_t *)&qword_25554BAF0);
      v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = v36;
      *(_QWORD *)(v28 + 32) = v13;
      v46 = v28;
      sub_21FC5B7C0();
      v29 = v45;
      v30 = v46;
      v8[(a1 >> 6) + 8] |= 1 << a1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v8[6] + *(_QWORD *)(v39 + 72) * a1, v29, v40);
      *(_QWORD *)(v8[7] + 8 * a1) = v30;
      v31 = v8[2];
      v32 = __OFADD__(v31, 1);
      v33 = v31 + 1;
      if (v32)
        goto LABEL_23;
      v8[2] = v33;
    }
    a1 = v15;
    ++v9;
    if (v14 == v7)
      return (uint64_t)v8;
  }
  sub_21FA753C4(v24, 1);
  v8 = v47;
  v26 = sub_21FA73FC8(v45);
  if ((v25 & 1) == (v27 & 1))
  {
    a1 = v26;
    goto LABEL_17;
  }

  result = sub_21FC5BE20();
  __break(1u);
  return result;
}

uint64_t sub_21FA5936C(uint64_t a1, void (*a2)(unint64_t *), uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t a6)
{
  unint64_t v6;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  id v20;
  void *v21;
  void *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(unint64_t *);
  uint64_t v37;
  uint64_t (*v38)(_QWORD);
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;

  v8 = v6;
  v36 = a2;
  v37 = a3;
  v38 = a5;
  v10 = a5(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v30 - v15;
  v35 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
    goto LABEL_44;
  v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v41 = MEMORY[0x24BEE4AF8];
    v34 = v17 & ~(v17 >> 63);
    result = ((uint64_t (*)(_QWORD))a6)(0);
    if (v17 < 0)
    {
      __break(1u);
      return result;
    }
    v30[0] = a6;
    v30[1] = v8;
    a6 = v41;
    if (!v17)
      break;
    v31 = a1 & 0xFFFFFFFFFFFFFF8;
    if (v35)
    {
      swift_bridgeObjectRetain();
      v33 = sub_21FC5BC7C();
    }
    else
    {
      v33 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    v19 = 0;
    v39 = a1 & 0xC000000000000001;
    v32 = v16;
    while (v34 != v19)
    {
      if (v33 == v19)
        goto LABEL_42;
      if (v39)
      {
        v20 = (id)MEMORY[0x2207D057C](v19, a1);
      }
      else
      {
        if (v19 >= *(_QWORD *)(v31 + 16))
          goto LABEL_43;
        v20 = *(id *)(a1 + 8 * v19 + 32);
      }
      v21 = v20;
      v22 = (void *)MEMORY[0x2207D0ABC]();
      v40 = (unint64_t)v21;
      v36(&v40);
      objc_autoreleasePoolPop(v22);

      v41 = a6;
      v8 = *(_QWORD *)(a6 + 16);
      v23 = *(_QWORD *)(a6 + 24);
      if (v8 >= v23 >> 1)
      {
        ((void (*)(BOOL, unint64_t, uint64_t))v30[0])(v23 > 1, v8 + 1, 1);
        a6 = v41;
      }
      ++v19;
      *(_QWORD *)(a6 + 16) = v8 + 1;
      sub_21FA2D23C((uint64_t)v14, a6+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v8, v38);
      v16 = v32;
      if (v17 == v19)
      {
        v14 = (char *)v31;
        goto LABEL_20;
      }
    }
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    swift_bridgeObjectRetain();
    v17 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
  }
  v14 = (char *)(a1 & 0xFFFFFFFFFFFFFF8);
  v39 = a1 & 0xC000000000000001;
  swift_bridgeObjectRetain();
LABEL_20:
  if (a1 < 0)
    v24 = (char *)a1;
  else
    v24 = v14;
  v34 = (uint64_t)v24;
  if (v35)
  {
    while (1)
    {
      swift_bridgeObjectRetain();
      v25 = sub_21FC5BC7C();
      swift_bridgeObjectRelease();
      if (v17 == v25)
        break;
LABEL_27:
      if (v39)
      {
        v26 = (id)MEMORY[0x2207D057C](v17, a1);
      }
      else
      {
        if (v17 < 0)
        {
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        if ((unint64_t)v17 >= *((_QWORD *)v14 + 2))
          goto LABEL_39;
        v26 = *(id *)(a1 + 8 * v17 + 32);
      }
      v8 = (unint64_t)v26;
      if (__OFADD__(v17, 1))
        goto LABEL_40;
      v27 = (uint64_t)v16;
      v28 = (void *)MEMORY[0x2207D0ABC]();
      v40 = v8;
      v36(&v40);
      objc_autoreleasePoolPop(v28);

      v41 = a6;
      v8 = *(_QWORD *)(a6 + 16);
      v29 = *(_QWORD *)(a6 + 24);
      if (v8 >= v29 >> 1)
      {
        ((void (*)(BOOL, unint64_t, uint64_t))v30[0])(v29 > 1, v8 + 1, 1);
        a6 = v41;
      }
      *(_QWORD *)(a6 + 16) = v8 + 1;
      sub_21FA2D23C(v27, a6+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v8, v38);
      ++v17;
      v16 = (char *)v27;
      if (!v35)
        goto LABEL_24;
    }
  }
  else
  {
LABEL_24:
    if (v17 != *((_QWORD *)v14 + 2))
      goto LABEL_27;
  }
  swift_bridgeObjectRelease();
  return a6;
}

uint64_t sub_21FA59738(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FA2D1A0(0, &qword_25553E0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_21FA59794@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21FA57218(*a1, *(_QWORD *)(v2 + 24), a2);
}

void sub_21FA597BC(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_21FC5BDD8();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void sub_21FA59800()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25553F0C0)
  {
    sub_21FC5A6C8();
    sub_21FA2D1A0(255, (unint64_t *)&qword_25553E0B8, (uint64_t (*)(uint64_t))sub_21FA2CD78, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25553F0C0);
  }
}

uint64_t sub_21FA59888()
{
  return sub_21FA2A08C(&qword_25553F0D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], MEMORY[0x24BDCB890]);
}

uint64_t sub_21FA598A4@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t (*v33)(void);
  uint64_t v34;
  uint64_t result;
  void *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40[3];
  uint64_t v41;
  uint64_t v42;

  v36 = a2;
  v37 = a3;
  v38 = a4;
  sub_21FA59CF0();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDBA1B0];
  sub_21FA5B0CC(0, (unint64_t *)&qword_25553F0E0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v36 - v14;
  v16 = *a1;
  v40[0] = v16;
  type metadata accessor for ClinicalSharingSyncContext();
  swift_retain();
  sub_21FC5B22C();
  sub_21FA2CDB4();
  sub_21FC5B208();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_21FA5B13C((unint64_t *)&qword_25553F0E8, (unint64_t *)&qword_25553F0E0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v10, MEMORY[0x24BDBA1D0]);
  v17 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v18 = v16 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_docRefInfo;
  swift_beginAccess();
  sub_21FA2CEA0(v18, (uint64_t)v40);
  v19 = v41;
  v20 = v42;
  __swift_project_boxed_opaque_existential_1(v40, v41);
  (*(void (**)(uint64_t, uint64_t))(v20 + 16))(v19, v20);
  v22 = v21;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  swift_bridgeObjectRelease();
  if (v22)
  {
    if ((sub_21FADCE5C() & 1) != 0)
    {
LABEL_6:
      v25 = sub_21FA5B17C(v36, v16, v37, 0);
      goto LABEL_13;
    }
    v23 = objc_retain(*(id *)(v16
                            + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_clinicalSharingStatus));
    if (objc_msgSend(v23, sel_userStatus, v36, v37) == (id)4)
    {

      goto LABEL_6;
    }
    v24 = objc_msgSend(v23, sel_userStatus);

    if (v24 == (id)5)
      goto LABEL_6;
  }
  if (qword_25406B7F8 != -1)
    swift_once();
  v26 = sub_21FC5AFD4();
  __swift_project_value_buffer(v26, (uint64_t)qword_25406D830);
  swift_retain_n();
  v27 = sub_21FC5AFC8();
  v28 = sub_21FC5B970();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc();
    v30 = swift_slowAlloc();
    *(_DWORD *)v29 = 136315138;
    v40[0] = v30;
    sub_21FC5AAF4();
    sub_21FA2A08C((unint64_t *)&qword_25553F0F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v31 = sub_21FC5BDCC();
    v39 = sub_21FABDCF8(v31, v32, v40);
    sub_21FC5BAC0();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v27, v28, "No DocRef exists to update. Account: %s", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v30, -1, -1);
    MEMORY[0x2207D105C](v29, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v40[0] = v17;
  v33 = MEMORY[0x24BDB9AE0];
  sub_21FA5B0CC(0, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA5B13C((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v33, MEMORY[0x24BDB9AF8]);
  v25 = sub_21FC5B280();
LABEL_13:
  v34 = v25;
  result = swift_release();
  *v38 = v34;
  return result;
}

void sub_21FA59CF0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553F0D8)
  {
    type metadata accessor for ClinicalSharingSyncContext();
    v0 = sub_21FC5B220();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553F0D8);
  }
}

uint64_t sub_21FA59D44(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v58[3];
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  LODWORD(v61) = a4;
  v76 = a3;
  sub_21FA5B750();
  v63 = v6;
  v66 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA5B848();
  v10 = *(_QWORD *)(v9 - 8);
  v70 = v9;
  v71 = v10;
  MEMORY[0x24BDAC7A8](v9);
  v64 = (char *)v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA5B964();
  v73 = v12;
  v75 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v69 = (char *)v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA5BA40();
  v74 = v14;
  v77 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v72 = (char *)v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA59CF0();
  v17 = v16;
  v18 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA5B0CC(0, (unint64_t *)&qword_25553F0E0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
  v59 = v21;
  v67 = *(_QWORD *)(v21 - 8);
  v62 = *(_QWORD *)(v67 + 64);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v65 = (char *)v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)v58 - v24;
  v68 = a2;
  v78 = a2;
  v26 = type metadata accessor for ClinicalSharingSyncContext();
  swift_retain();
  v58[2] = v26;
  sub_21FC5B22C();
  sub_21FA2CDB4();
  v60 = v25;
  sub_21FC5B208();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  v27 = swift_allocObject();
  *(_BYTE *)(v27 + 16) = v61;
  *(_QWORD *)(v27 + 24) = a1;
  v28 = a1;
  sub_21FC5B184();
  v29 = MEMORY[0x24BDB9AE0];
  sub_21FA5B0CC(0, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  v31 = v30;
  sub_21FA5B13C((unint64_t *)&qword_25553F0E8, (unint64_t *)&qword_25553F0E0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0], MEMORY[0x24BDBA1D0]);
  v32 = sub_21FA5B13C((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v29, MEMORY[0x24BDB9AF8]);
  v33 = v59;
  v34 = v31;
  v35 = v32;
  sub_21FC5B34C();
  swift_release();
  sub_21FA2A08C(&qword_25553F130, (uint64_t (*)(uint64_t))sub_21FA5B750, MEMORY[0x24BDB98F0]);
  v36 = v63;
  v37 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v8, v36);
  v78 = v37;
  sub_21FA5B8F8();
  v38 = v64;
  v58[1] = v34;
  v61 = v35;
  sub_21FC5B31C();
  swift_release();
  v39 = swift_allocObject();
  *(_QWORD *)(v39 + 16) = v28;
  v40 = swift_allocObject();
  *(_QWORD *)(v40 + 16) = sub_21FA5C388;
  *(_QWORD *)(v40 + 24) = v39;
  v41 = v28;
  sub_21FC5B184();
  sub_21FA2A08C(&qword_25553F118, (uint64_t (*)(uint64_t))sub_21FA5B848, MEMORY[0x24BDB98C8]);
  v42 = v69;
  v43 = v70;
  sub_21FC5B34C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v71 + 8))(v38, v43);
  v44 = v67;
  v45 = v65;
  v46 = v60;
  v47 = v33;
  (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v65, v60, v33);
  v48 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  v49 = (v62 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
  v50 = swift_allocObject();
  v51 = v68;
  *(_QWORD *)(v50 + 16) = v76;
  *(_QWORD *)(v50 + 24) = v51;
  (*(void (**)(unint64_t, char *, uint64_t))(v44 + 32))(v50 + v48, v45, v47);
  *(_QWORD *)(v50 + v49) = v41;
  sub_21FA2A08C(&qword_25553F128, (uint64_t (*)(uint64_t))sub_21FA5B964, MEMORY[0x24BDB98F0]);
  swift_retain();
  v52 = v41;
  v54 = v72;
  v53 = v73;
  sub_21FC5B364();
  swift_release();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v42, v53);
  sub_21FA2A08C(&qword_25553F138, (uint64_t (*)(uint64_t))sub_21FA5BA40, MEMORY[0x24BDB9998]);
  v55 = v74;
  v56 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v77 + 8))(v54, v55);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v47);
  return v56;
}

uint64_t sub_21FA5A318@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  v5 = *a1;
  if (qword_25406B7F8 != -1)
    swift_once();
  v6 = sub_21FC5AFD4();
  __swift_project_value_buffer(v6, (uint64_t)qword_25406D830);
  swift_retain_n();
  v7 = sub_21FC5AFC8();
  v8 = sub_21FC5B970();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    *(_DWORD *)v9 = 136315138;
    v19[0] = v10;
    v22 = a2;
    sub_21FC5AAF4();
    sub_21FA2A08C((unint64_t *)&qword_25553F0F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v11 = sub_21FC5BDCC();
    sub_21FABDCF8(v11, v12, v19);
    a2 = v22;
    sub_21FC5BAC0();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v7, v8, "Preparing update request. Account: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v10, -1, -1);
    v13 = v9;
    v3 = v2;
    MEMORY[0x2207D105C](v13, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v14 = v5 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_docRefInfo;
  swift_beginAccess();
  sub_21FA2CEA0(v14, (uint64_t)v19);
  v15 = v20;
  v16 = v21;
  __swift_project_boxed_opaque_existential_1(v19, v20);
  sub_21FBA5F90(v15, v16, a2);
  if (!v3)
  {
    sub_21FA5B8F8();
    *(_QWORD *)(a2 + *(int *)(v17 + 48)) = v5;
    swift_retain();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
}

uint64_t sub_21FA5A598(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = sub_21FC5A5D8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  sub_21FA5BD2C();
  v10 = v9;
  v25 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA5BEF8();
  v14 = *(_QWORD *)(v13 - 8);
  v26 = v13;
  v27 = v14;
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_21FC531A8(a1, a2, 3, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v17 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v18 + v17, (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = sub_21FA5C118;
  *(_QWORD *)(v19 + 24) = v18;
  sub_21FA5BFD8(0, (unint64_t *)&qword_25553F148, (unint64_t *)&qword_25553F150, (unint64_t *)&qword_25553F158);
  sub_21FA5BDDC(0, &qword_25553F160, (unint64_t *)&qword_25553F168);
  sub_21FA5BE90();
  sub_21FC5B31C();
  swift_release();
  swift_release();
  sub_21FA2A08C(&qword_25553F190, (uint64_t (*)(uint64_t))sub_21FA5BD2C, MEMORY[0x24BDB98C8]);
  v20 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v10);
  v28 = v20;
  sub_21FC5B184();
  sub_21FA5BFD8(0, &qword_25553F180, &qword_25553F160, (unint64_t *)&qword_25553F168);
  type metadata accessor for ClinicalSharingSyncContext();
  v21 = MEMORY[0x24BDB9AE0];
  sub_21FA5B0CC(0, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA5C050();
  sub_21FA5B13C((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v21, MEMORY[0x24BDB9AF8]);
  sub_21FC5B34C();
  swift_release();
  sub_21FA2A08C(&qword_25553F198, (uint64_t (*)(uint64_t))sub_21FA5BEF8, MEMORY[0x24BDB98F0]);
  v22 = v26;
  v23 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v16, v22);
  return v23;
}

uint64_t sub_21FA5A8F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_21FA5C1A0();
  *a1 = result;
  return result;
}

void sub_21FA5A91C(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X4>, uint64_t *a5@<X8>)
{
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t *v48;
  os_log_type_t type;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  char v55;
  id v56;

  v56 = *a1;
  v9 = v56;
  v10 = v56;
  sub_21FA2CDB4();
  if (swift_dynamicCast())
  {
    if (v55 == 2)
    {
      sub_21FA5BB74(v52, v53, v54, v55);
      if (a2 < 1)
      {
        if (qword_25406B7F8 != -1)
          swift_once();
        v35 = sub_21FC5AFD4();
        __swift_project_value_buffer(v35, (uint64_t)qword_25406D830);
        v36 = v56;
        swift_retain();
        v37 = v56;
        swift_retain();
        v38 = sub_21FC5AFC8();
        v39 = sub_21FC5B97C();
        if (os_log_type_enabled(v38, v39))
        {
          v40 = swift_slowAlloc();
          v50 = swift_slowAlloc();
          v51 = v50;
          *(_DWORD *)v40 = 136315394;
          sub_21FC5AAF4();
          sub_21FA2A08C((unint64_t *)&qword_25553F0F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
          v41 = sub_21FC5BDCC();
          sub_21FABDCF8(v41, v42, &v51);
          sub_21FC5BAC0();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v40 + 12) = 2080;
          v43 = v9;
          v44 = sub_21FC5B64C();
          sub_21FABDCF8(v44, v45, &v51);
          sub_21FC5BAC0();
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_21FA27000, v38, v39, "Could not update DocRef because of conflictResponseError. Account: %s. No retries left. Error: %s", (uint8_t *)v40, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x2207D105C](v50, -1, -1);
          MEMORY[0x2207D105C](v40, -1, -1);
        }
        else
        {
          swift_release_n();

        }
        v46 = v9;
        swift_willThrow();

      }
      else
      {
        if (qword_25406B7F8 != -1)
          swift_once();
        v11 = sub_21FC5AFD4();
        __swift_project_value_buffer(v11, (uint64_t)qword_25406D830);
        v12 = v56;
        swift_retain();
        v13 = v56;
        swift_retain();
        v14 = sub_21FC5AFC8();
        type = sub_21FC5B970();
        if (os_log_type_enabled(v14, type))
        {
          v48 = a5;
          v15 = swift_slowAlloc();
          v47 = swift_slowAlloc();
          v51 = v47;
          *(_DWORD *)v15 = 136315650;
          sub_21FC5AAF4();
          sub_21FA2A08C((unint64_t *)&qword_25553F0F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
          v16 = sub_21FC5BDCC();
          sub_21FABDCF8(v16, v17, &v51);
          sub_21FC5BAC0();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v15 + 12) = 2048;
          sub_21FC5BAC0();
          *(_WORD *)(v15 + 22) = 2080;
          v18 = v9;
          v19 = sub_21FC5B64C();
          sub_21FABDCF8(v19, v20, &v51);
          sub_21FC5BAC0();
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_21FA27000, v14, type, "Could not update DocRef because of conflictResponseError. Retrying with no-cache header. Account: %s. Retries left: %ld. Error: %s", (uint8_t *)v15, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x2207D105C](v47, -1, -1);
          v21 = v15;
          a5 = v48;
          MEMORY[0x2207D105C](v21, -1, -1);

        }
        else
        {
          swift_release_n();

        }
        *a5 = sub_21FA59D44(a4, a3, a2 - 1, 1);

      }
      return;
    }
    sub_21FA5BB74(v52, v53, v54, v55);
  }

  if (qword_25406B7F8 != -1)
    swift_once();
  v22 = sub_21FC5AFD4();
  __swift_project_value_buffer(v22, (uint64_t)qword_25406D830);
  v23 = v56;
  swift_retain();
  v24 = v56;
  swift_retain();
  v25 = sub_21FC5AFC8();
  v26 = sub_21FC5B97C();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = swift_slowAlloc();
    v28 = swift_slowAlloc();
    v52 = v28;
    *(_DWORD *)v27 = 136315394;
    sub_21FC5AAF4();
    sub_21FA2A08C((unint64_t *)&qword_25553F0F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v29 = sub_21FC5BDCC();
    v56 = (id)sub_21FABDCF8(v29, v30, &v52);
    sub_21FC5BAC0();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    v56 = v9;
    v31 = v9;
    v32 = sub_21FC5B64C();
    v56 = (id)sub_21FABDCF8(v32, v33, &v52);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_21FA27000, v25, v26, "Could not update DocRef due to unknown error. Account: %s. Error: %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v28, -1, -1);
    MEMORY[0x2207D105C](v27, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  v34 = v9;
  swift_willThrow();
}

void sub_21FA5B0CC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = type metadata accessor for ClinicalSharingSyncContext();
    v7 = sub_21FA2CDB4();
    v8 = a3(a1, v6, v7, MEMORY[0x24BEE3F20]);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_21FA5B13C(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FA5B0CC(255, a2, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FA5B17C(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v58[3];
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  LODWORD(v61) = a4;
  v76 = a3;
  sub_21FA5B750();
  v63 = v6;
  v66 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA5B848();
  v10 = *(_QWORD *)(v9 - 8);
  v70 = v9;
  v71 = v10;
  MEMORY[0x24BDAC7A8](v9);
  v64 = (char *)v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA5B964();
  v73 = v12;
  v75 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v69 = (char *)v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA5BA40();
  v74 = v14;
  v77 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v72 = (char *)v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA59CF0();
  v17 = v16;
  v18 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA5B0CC(0, (unint64_t *)&qword_25553F0E0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
  v59 = v21;
  v67 = *(_QWORD *)(v21 - 8);
  v62 = *(_QWORD *)(v67 + 64);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v65 = (char *)v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)v58 - v24;
  v68 = a2;
  v78 = a2;
  v26 = type metadata accessor for ClinicalSharingSyncContext();
  swift_retain();
  v58[2] = v26;
  sub_21FC5B22C();
  sub_21FA2CDB4();
  v60 = v25;
  sub_21FC5B208();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  v27 = swift_allocObject();
  *(_BYTE *)(v27 + 16) = v61;
  *(_QWORD *)(v27 + 24) = a1;
  v28 = a1;
  sub_21FC5B184();
  v29 = MEMORY[0x24BDB9AE0];
  sub_21FA5B0CC(0, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  v31 = v30;
  sub_21FA5B13C((unint64_t *)&qword_25553F0E8, (unint64_t *)&qword_25553F0E0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0], MEMORY[0x24BDBA1D0]);
  v32 = sub_21FA5B13C((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v29, MEMORY[0x24BDB9AF8]);
  v33 = v59;
  v34 = v31;
  v35 = v32;
  sub_21FC5B34C();
  swift_release();
  sub_21FA2A08C(&qword_25553F130, (uint64_t (*)(uint64_t))sub_21FA5B750, MEMORY[0x24BDB98F0]);
  v36 = v63;
  v37 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v8, v36);
  v78 = v37;
  sub_21FA5B8F8();
  v38 = v64;
  v58[1] = v34;
  v61 = v35;
  sub_21FC5B31C();
  swift_release();
  v39 = swift_allocObject();
  *(_QWORD *)(v39 + 16) = v28;
  v40 = swift_allocObject();
  *(_QWORD *)(v40 + 16) = sub_21FA5BB4C;
  *(_QWORD *)(v40 + 24) = v39;
  v41 = v28;
  sub_21FC5B184();
  sub_21FA2A08C(&qword_25553F118, (uint64_t (*)(uint64_t))sub_21FA5B848, MEMORY[0x24BDB98C8]);
  v42 = v69;
  v43 = v70;
  sub_21FC5B34C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v71 + 8))(v38, v43);
  v44 = v67;
  v45 = v65;
  v46 = v60;
  v47 = v33;
  (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v65, v60, v33);
  v48 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  v49 = (v62 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
  v50 = swift_allocObject();
  v51 = v68;
  *(_QWORD *)(v50 + 16) = v76;
  *(_QWORD *)(v50 + 24) = v51;
  (*(void (**)(unint64_t, char *, uint64_t))(v44 + 32))(v50 + v48, v45, v47);
  *(_QWORD *)(v50 + v49) = v41;
  sub_21FA2A08C(&qword_25553F128, (uint64_t (*)(uint64_t))sub_21FA5B964, MEMORY[0x24BDB98F0]);
  swift_retain();
  v52 = v41;
  v54 = v72;
  v53 = v73;
  sub_21FC5B364();
  swift_release();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v42, v53);
  sub_21FA2A08C(&qword_25553F138, (uint64_t (*)(uint64_t))sub_21FA5BA40, MEMORY[0x24BDB9998]);
  v55 = v74;
  v56 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v77 + 8))(v54, v55);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v47);
  return v56;
}

void sub_21FA5B750()
{
  uint64_t (*v0)(void);
  uint64_t (*v1)(void);
  unint64_t v2;
  uint64_t v3;

  if (!qword_25553F0F8)
  {
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FA5B0CC(255, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    v1 = MEMORY[0x24BDBA1B0];
    sub_21FA5B0CC(255, (unint64_t *)&qword_25553F0E0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
    sub_21FA5B13C((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    sub_21FA5B13C((unint64_t *)&qword_25553F0E8, (unint64_t *)&qword_25553F0E0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v1, MEMORY[0x24BDBA1D0]);
    v2 = sub_21FC5B100();
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_25553F0F8);
  }
}

void sub_21FA5B848()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25553F100)
  {
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FA5B0CC(255, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA5B8F8();
    sub_21FA5B13C((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    v1 = sub_21FC5B0E8();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25553F100);
  }
}

void sub_21FA5B8F8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25553F108)
  {
    sub_21FC5A5D8();
    type metadata accessor for ClinicalSharingSyncContext();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25553F108);
  }
}

void sub_21FA5B964()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25553F110)
  {
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FA5B0CC(255, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA5B848();
    sub_21FA5B13C((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    sub_21FA2A08C(&qword_25553F118, (uint64_t (*)(uint64_t))sub_21FA5B848, MEMORY[0x24BDB98C8]);
    v1 = sub_21FC5B100();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25553F110);
  }
}

void sub_21FA5BA40()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25553F120)
  {
    sub_21FA5B964();
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FA5B0CC(255, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA2A08C(&qword_25553F128, (uint64_t (*)(uint64_t))sub_21FA5B964, MEMORY[0x24BDB98F0]);
    sub_21FA5B13C((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    v1 = sub_21FC5B13C();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25553F120);
  }
}

uint64_t sub_21FA5BB1C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_21FA5BB40@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FC51C3C(a1, *(unsigned __int8 *)(v2 + 16), *(void **)(v2 + 24), a2);
}

uint64_t sub_21FA5BB4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_21FA5A598(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_21FA5BB54@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FAD0418(a1, *(uint64_t (**)(uint64_t, _QWORD))(v2 + 16), a2);
}

void sub_21FA5BB60(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_21FA5BCAC(a1, a2);
}

void sub_21FA5BB74(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  if (a4 == 2)
  {
LABEL_4:
    swift_bridgeObjectRelease();
    return;
  }
  if (a4 != 1)
  {
    if (a4)
      return;
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();

}

uint64_t sub_21FA5BBC0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_21FA5BBE4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_8Tm_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  sub_21FA5B0CC(0, (unint64_t *)&qword_25553F0E0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v2);

  return swift_deallocObject();
}

void sub_21FA5BCAC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  sub_21FA5B0CC(0, (unint64_t *)&qword_25553F0E0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
  sub_21FA5A91C(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2+ ((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64)+ ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))+ 7) & 0xFFFFFFFFFFFFF8)), a2);
}

void sub_21FA5BD2C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553F140)
  {
    sub_21FA5BFD8(255, (unint64_t *)&qword_25553F148, (unint64_t *)&qword_25553F150, (unint64_t *)&qword_25553F158);
    sub_21FA5BDDC(255, &qword_25553F160, (unint64_t *)&qword_25553F168);
    sub_21FA5BE90();
    v0 = sub_21FC5B0E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553F140);
  }
}

void sub_21FA5BDDC(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t TupleTypeMetadata3;
  uint64_t v5;

  if (!*a2)
  {
    sub_21FA5BE58(255, a3);
    type metadata accessor for ClinicalSharingSyncContext();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v5)
      atomic_store(TupleTypeMetadata3, a2);
  }
}

uint64_t sub_21FA5BE58(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_21FA5BE90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25553F170;
  if (!qword_25553F170)
  {
    sub_21FA5BFD8(255, (unint64_t *)&qword_25553F148, (unint64_t *)&qword_25553F150, (unint64_t *)&qword_25553F158);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9AF8], v1);
    atomic_store(result, (unint64_t *)&qword_25553F170);
  }
  return result;
}

void sub_21FA5BEF8()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25553F178)
  {
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FA5B0CC(255, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA5BFD8(255, &qword_25553F180, &qword_25553F160, (unint64_t *)&qword_25553F168);
    sub_21FA5B13C((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    sub_21FA5C050();
    v1 = sub_21FC5B100();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25553F178);
  }
}

void sub_21FA5BFD8(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_21FA5BDDC(255, a3, a4);
    sub_21FA2CDB4();
    v5 = sub_21FC5B190();
    if (!v6)
      atomic_store(v5, a2);
  }
}

unint64_t sub_21FA5C050()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25553F188;
  if (!qword_25553F188)
  {
    sub_21FA5BFD8(255, &qword_25553F180, &qword_25553F160, (unint64_t *)&qword_25553F168);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9AF8], v1);
    atomic_store(result, (unint64_t *)&qword_25553F188);
  }
  return result;
}

uint64_t sub_21FA5C0B8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_21FC5A5D8();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_21FA5C118(uint64_t a1, unint64_t a2, void *a3)
{
  sub_21FC5A5D8();
  return sub_21FC5364C(a1, a2, a3);
}

uint64_t sub_21FA5C188@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FAD1174(a1, *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v2 + 16), a2);
}

uint64_t sub_21FA5C1A0()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;

  if (qword_25406B7F8 != -1)
    swift_once();
  v0 = sub_21FC5AFD4();
  __swift_project_value_buffer(v0, (uint64_t)qword_25406D830);
  swift_retain_n();
  v1 = sub_21FC5AFC8();
  v2 = sub_21FC5B970();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    *(_DWORD *)v3 = 136315138;
    v8 = v4;
    sub_21FC5AAF4();
    sub_21FA2A08C((unint64_t *)&qword_25553F0F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v5 = sub_21FC5BDCC();
    sub_21FABDCF8(v5, v6, &v8);
    sub_21FC5BAC0();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v1, v2, "Successfully updated DocRef. Account: %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v4, -1, -1);
    MEMORY[0x2207D105C](v3, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  return sub_21FAD1C28();
}

void destroy for IssuerDirectoryDownloadTask(uint64_t a1)
{
  swift_release();

  if (*(_QWORD *)(a1 + 48))
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
}

uint64_t initializeWithCopy for IssuerDirectoryDownloadTask(uint64_t a1, uint64_t a2)
{
  void *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = (_OWORD *)(a1 + 24);
  v6 = a2 + 24;
  v7 = *(_QWORD *)(a2 + 48);
  swift_retain();
  v8 = v4;
  if (v7)
  {
    v9 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = v9;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8))(a1 + 24, v6, v7);
  }
  else
  {
    v10 = *(_OWORD *)(v6 + 16);
    *v5 = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v6 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for IssuerDirectoryDownloadTask(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v4 = *(void **)(a2 + 16);
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 48);
  if (!*(_QWORD *)(a1 + 48))
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 24, a2 + 24);
      return a1;
    }
LABEL_7:
    v8 = *(_OWORD *)(a2 + 24);
    v9 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 24) = v8;
    *(_OWORD *)(a1 + 40) = v9;
    return a1;
  }
  if (!v7)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for IssuerDirectoryDownloadTask(uint64_t a1, uint64_t a2)
{
  void *v4;
  __int128 v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v4 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  if (*(_QWORD *)(a1 + 48))
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for IssuerDirectoryDownloadTask(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IssuerDirectoryDownloadTask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IssuerDirectoryDownloadTask()
{
  return &type metadata for IssuerDirectoryDownloadTask;
}

uint64_t sub_21FA5C678()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  _OWORD *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD v58[7];
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;

  v1 = v0;
  sub_21FA5D0E8();
  v74 = *(_QWORD *)(v2 - 8);
  v75 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v73 = (char *)v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA5D76C();
  v77 = *(_QWORD *)(v4 - 8);
  v78 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v76 = (char *)v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA5D5EC(0, &qword_25553F228, &qword_25553F230, (uint64_t)&type metadata for EUDCCPublicKeys, &qword_25553F238);
  v67 = v6;
  v66 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v65 = (char *)v58 - v7;
  sub_21FA5D518();
  v72 = v8;
  v71 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v70 = (char *)v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA5D284();
  v64 = v10;
  v60 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA5D5EC(0, &qword_25553F1B0, &qword_25553F1B8, (uint64_t)&type metadata for VHRDirectory, &qword_25553F1F8);
  v63 = v13;
  v62 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v61 = (char *)v58 - v14;
  sub_21FA5D1B0();
  v69 = v15;
  v68 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v81 = (char *)v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA5D3F8(0, &qword_25553F278, (uint64_t)&type metadata for CatalogDownloadResult, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9DA0]);
  v18 = v17;
  v19 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)v58 - v20;
  v22 = *(_QWORD *)(v0 + 8);
  v23 = *(_BYTE *)v0;
  swift_retain();
  v79 = v22;
  *(_QWORD *)&v82 = sub_21FA2F080(v23, v22);
  sub_21FA5D3F8(0, &qword_25553F1D8, (uint64_t)&type metadata for Catalog, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA5E65C(&qword_25553F1E0, &qword_25553F1D8, (uint64_t)&type metadata for Catalog);
  v24 = sub_21FC5B2F8();
  swift_release();
  sub_21FA2D120(v1 + 24, (uint64_t)&v86, (uint64_t (*)(_QWORD))sub_21FA5D7EC);
  if (!v87)
  {
    sub_21FA326EC((uint64_t)&v86, (uint64_t (*)(_QWORD))sub_21FA5D7EC);
LABEL_6:
    *(_QWORD *)&v86 = v24;
    v59 = v1;
    sub_21FA5D850(v1, (uint64_t)&v82);
    v28 = (_OWORD *)swift_allocObject();
    v29 = v83;
    v28[1] = v82;
    v28[2] = v29;
    v30 = v85;
    v28[3] = v84;
    v28[4] = v30;
    v31 = swift_allocObject();
    *(_QWORD *)(v31 + 16) = sub_21FA5D888;
    *(_QWORD *)(v31 + 24) = v28;
    sub_21FC5B184();
    sub_21FA5D360();
    v58[6] = v32;
    v58[5] = type metadata accessor for CatalogEntry();
    v80 = v24;
    v33 = MEMORY[0x24BDB9AE0];
    sub_21FA5E52C(0, &qword_25553F1C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    v58[4] = v34;
    v58[3] = sub_21FA2A08C(&qword_25553F1F0, (uint64_t (*)(uint64_t))sub_21FA5D360, MEMORY[0x24BDB97C8]);
    v58[2] = sub_21FA5E6F0(&qword_25553F1E8, &qword_25553F1C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v33, MEMORY[0x24BDB9AF8]);
    sub_21FC5B34C();
    swift_release();
    v35 = swift_allocObject();
    v36 = v79;
    *(_QWORD *)(v35 + 16) = sub_21FA5DD88;
    *(_QWORD *)(v35 + 24) = v36;
    swift_retain();
    sub_21FC5B184();
    sub_21FA5D3F8(0, &qword_25553F1B8, (uint64_t)&type metadata for VHRDirectory, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v33);
    v58[1] = sub_21FA2A08C(&qword_25553F200, (uint64_t (*)(uint64_t))sub_21FA5D284, MEMORY[0x24BDB98F0]);
    sub_21FA5E65C(&qword_25553F1F8, &qword_25553F1B8, (uint64_t)&type metadata for VHRDirectory);
    v37 = v61;
    v38 = v64;
    sub_21FC5B34C();
    swift_release();
    v39 = *(void (**)(char *, uint64_t))(v60 + 8);
    v39(v12, v38);
    sub_21FA5D6C0(0, &qword_25553F208);
    sub_21FA5D470();
    sub_21FA5D4D8(&qword_25553F218, &qword_25553F208);
    v40 = v63;
    sub_21FC5B364();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v37, v40);
    *(_QWORD *)&v86 = v80;
    sub_21FA5D850(v59, (uint64_t)&v82);
    v41 = (_OWORD *)swift_allocObject();
    v42 = v83;
    v41[1] = v82;
    v41[2] = v42;
    v43 = v85;
    v41[3] = v84;
    v41[4] = v43;
    v44 = swift_allocObject();
    *(_QWORD *)(v44 + 16) = sub_21FA5DE58;
    *(_QWORD *)(v44 + 24) = v41;
    sub_21FC5B184();
    sub_21FC5B34C();
    swift_release();
    v45 = swift_allocObject();
    *(_QWORD *)(v45 + 16) = sub_21FA5E388;
    *(_QWORD *)(v45 + 24) = v36;
    swift_retain();
    sub_21FC5B184();
    sub_21FA5D3F8(0, &qword_25553F230, (uint64_t)&type metadata for EUDCCPublicKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA5E65C(&qword_25553F238, &qword_25553F230, (uint64_t)&type metadata for EUDCCPublicKeys);
    v46 = v65;
    sub_21FC5B34C();
    swift_release();
    v39(v12, v38);
    sub_21FA5D6C0(0, &qword_25553F240);
    sub_21FA5D704();
    sub_21FA5D4D8(&qword_25553F250, &qword_25553F240);
    v47 = v70;
    v48 = v67;
    sub_21FC5B364();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v46, v48);
    v49 = MEMORY[0x24BDB9998];
    sub_21FA2A08C(&qword_25553F258, (uint64_t (*)(uint64_t))sub_21FA5D1B0, MEMORY[0x24BDB9998]);
    sub_21FA2A08C(&qword_25553F260, (uint64_t (*)(uint64_t))sub_21FA5D518, v49);
    v50 = v73;
    v51 = v69;
    v52 = v72;
    v53 = v81;
    sub_21FC5B2BC();
    sub_21FA2A08C(&qword_25553F270, (uint64_t (*)(uint64_t))sub_21FA5D0E8, MEMORY[0x24BDB9450]);
    v54 = v75;
    v55 = v76;
    sub_21FC5B2C8();
    (*(void (**)(char *, uint64_t))(v74 + 8))(v50, v54);
    sub_21FA2A08C(&qword_25553F290, (uint64_t (*)(uint64_t))sub_21FA5D76C, MEMORY[0x24BDB96C0]);
    v56 = v78;
    v27 = sub_21FC5B280();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v77 + 8))(v55, v56);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v47, v52);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v53, v51);
    return v27;
  }
  sub_21FA3175C(&v86, (uint64_t)&v82);
  v25 = *((_QWORD *)&v83 + 1);
  v26 = v84;
  __swift_project_boxed_opaque_existential_1(&v82, *((uint64_t *)&v83 + 1));
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v26 + 24))(v25, v26) & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v82);
    goto LABEL_6;
  }
  sub_21FA5E488();
  *(_QWORD *)&v86 = swift_allocError();
  sub_21FA50724(0, (unint64_t *)&qword_25406BB50);
  sub_21FC5B1E4();
  sub_21FA5E4CC();
  v27 = sub_21FC5B280();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v82);
  return v27;
}

void sub_21FA5D0E8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  if (!qword_25553F1A0)
  {
    sub_21FA5D1B0();
    sub_21FA5D518();
    v0 = MEMORY[0x24BDB9998];
    sub_21FA2A08C(&qword_25553F258, (uint64_t (*)(uint64_t))sub_21FA5D1B0, MEMORY[0x24BDB9998]);
    sub_21FA2A08C(&qword_25553F260, (uint64_t (*)(uint64_t))sub_21FA5D518, v0);
    v1 = sub_21FC5AFEC();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25553F1A0);
  }
}

void sub_21FA5D1B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553F1A8)
  {
    sub_21FA5D5EC(255, &qword_25553F1B0, &qword_25553F1B8, (uint64_t)&type metadata for VHRDirectory, &qword_25553F1F8);
    sub_21FA5D6C0(255, &qword_25553F208);
    sub_21FA5D470();
    sub_21FA5D4D8(&qword_25553F218, &qword_25553F208);
    v0 = sub_21FC5B13C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553F1A8);
  }
}

void sub_21FA5D284()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25553F1C0)
  {
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FA5E52C(255, &qword_25553F1C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA5D360();
    sub_21FA5E6F0(&qword_25553F1E8, &qword_25553F1C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    sub_21FA2A08C(&qword_25553F1F0, (uint64_t (*)(uint64_t))sub_21FA5D360, MEMORY[0x24BDB97C8]);
    v1 = sub_21FC5B100();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25553F1C0);
  }
}

void sub_21FA5D360()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553F1D0)
  {
    sub_21FA5D3F8(255, &qword_25553F1D8, (uint64_t)&type metadata for Catalog, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA5E65C(&qword_25553F1E0, &qword_25553F1D8, (uint64_t)&type metadata for Catalog);
    v0 = sub_21FC5B0D0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553F1D0);
  }
}

void sub_21FA5D3F8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = sub_21FA50724(255, (unint64_t *)&qword_25406BB50);
    v9 = a4(a1, a3, v8, MEMORY[0x24BEE3F20]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t sub_21FA5D470()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25553F210;
  if (!qword_25553F210)
  {
    sub_21FA5D5EC(255, &qword_25553F1B0, &qword_25553F1B8, (uint64_t)&type metadata for VHRDirectory, &qword_25553F1F8);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB98F0], v1);
    atomic_store(result, (unint64_t *)&qword_25553F210);
  }
  return result;
}

uint64_t sub_21FA5D4D8(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    sub_21FA5D6C0(255, a2);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9DF8], v4);
    atomic_store(result, a1);
  }
  return result;
}

void sub_21FA5D518()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553F220)
  {
    sub_21FA5D5EC(255, &qword_25553F228, &qword_25553F230, (uint64_t)&type metadata for EUDCCPublicKeys, &qword_25553F238);
    sub_21FA5D6C0(255, &qword_25553F240);
    sub_21FA5D704();
    sub_21FA5D4D8(&qword_25553F250, &qword_25553F240);
    v0 = sub_21FC5B13C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553F220);
  }
}

void sub_21FA5D5EC(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_21FA5D3F8(255, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA5D284();
    sub_21FA5E65C(a5, a3, a4);
    sub_21FA2A08C(&qword_25553F200, (uint64_t (*)(uint64_t))sub_21FA5D284, MEMORY[0x24BDB98F0]);
    v9 = sub_21FC5B100();
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_21FA5D6C0(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_21FC5B220();
    if (!v4)
      atomic_store(v3, a2);
  }
}

unint64_t sub_21FA5D704()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25553F248;
  if (!qword_25553F248)
  {
    sub_21FA5D5EC(255, &qword_25553F228, &qword_25553F230, (uint64_t)&type metadata for EUDCCPublicKeys, &qword_25553F238);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB98F0], v1);
    atomic_store(result, (unint64_t *)&qword_25553F248);
  }
  return result;
}

void sub_21FA5D76C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553F268)
  {
    sub_21FA5D0E8();
    sub_21FA2A08C(&qword_25553F270, (uint64_t (*)(uint64_t))sub_21FA5D0E8, MEMORY[0x24BDB9450]);
    v0 = sub_21FC5B064();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553F268);
  }
}

void sub_21FA5D7EC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553F280)
  {
    sub_21FA50724(255, &qword_25553F288);
    v0 = sub_21FC5BAA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553F280);
  }
}

uint64_t sub_21FA5D850(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for IssuerDirectoryDownloadTask(a2, a1);
  return a2;
}

uint64_t sub_21FA5D888(uint64_t *a1)
{
  return sub_21FA5DE64(a1, sub_21FA5D894);
}

uint64_t sub_21FA5D894(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD v56[4];
  uint64_t v57;

  sub_21FA5E52C(0, &qword_25553F2A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9DA0]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v53 = (char *)&v44 - v5;
  sub_21FA5E5AC();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2ED54(0, &qword_25553F2B8, (void (*)(uint64_t))type metadata accessor for CatalogEntry);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v44 - v12;
  v14 = type metadata accessor for CatalogEntry();
  v15 = MEMORY[0x24BDAC7A8](v14);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (uint64_t *)((char *)&v44 - v17);
  MEMORY[0x24BDAC7A8](v16);
  v20 = *a1;
  v21 = *(_QWORD *)(v20 + 16);
  v54 = v8;
  v55 = v19;
  v52 = (uint64_t)&v44 - v22;
  v49 = v24;
  v50 = v23;
  if (v21)
  {
    v44 = v4;
    v45 = v3;
    v46 = v14;
    v47 = v10;
    v48 = v7;
    v25 = v20 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    v26 = *(_QWORD *)(v19 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_21FA2D120(v25, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for CatalogEntry);
      if (*v18 == 0xD000000000000014 && v18[1] == 0x800000021FC75270)
        break;
      if ((sub_21FC5BDF0() & 1) != 0)
        break;
      sub_21FA326EC((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for CatalogEntry);
      v25 += v26;
      if (!--v21)
      {
        v27 = 1;
        goto LABEL_9;
      }
    }
    sub_21FA5E730((uint64_t)v18, (uint64_t)v13);
    v27 = 0;
LABEL_9:
    v10 = v47;
    v7 = v48;
    v3 = v45;
    v14 = v46;
    v4 = v44;
  }
  else
  {
    swift_bridgeObjectRetain();
    v27 = 1;
  }
  v28 = v55;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v13, v27, 1, v14);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v13, 1, v14) == 1)
  {
    sub_21FA5E6A4((uint64_t)v13);
    sub_21FA322D0();
    v29 = swift_allocError();
    *v30 = 3;
    *(_QWORD *)&v56[0] = v29;
    sub_21FA50724(0, (unint64_t *)&qword_25406BB50);
    v31 = v53;
    sub_21FC5B1E4();
    sub_21FA5E6F0(&qword_25553F2C0, &qword_25553F2A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9DA0], MEMORY[0x24BDB9DB0]);
    v32 = sub_21FC5B280();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v31, v3);
  }
  else
  {
    v33 = v52;
    sub_21FA5E730((uint64_t)v13, v52);
    v34 = v51;
    v57 = sub_21FA5E878("%s - fetchCurrentRegistryIssuerContentVersion starting");
    v35 = v50;
    sub_21FA2D120(v33, v50, (uint64_t (*)(_QWORD))type metadata accessor for CatalogEntry);
    sub_21FA5D850(v34, (uint64_t)v56);
    v36 = (*(unsigned __int8 *)(v28 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
    v37 = (v49 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
    v38 = swift_allocObject();
    sub_21FA5E730(v35, v38 + v36);
    v39 = (_OWORD *)(v38 + v37);
    v40 = v56[1];
    *v39 = v56[0];
    v39[1] = v40;
    v41 = v56[3];
    v39[2] = v56[2];
    v39[3] = v41;
    v42 = MEMORY[0x24BEE1768];
    sub_21FA5D3F8(0, &qword_25406BDB8, MEMORY[0x24BEE1768], (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA5E65C((unint64_t *)&qword_25406BDB0, &qword_25406BDB8, v42);
    sub_21FC5B31C();
    swift_release();
    swift_release();
    sub_21FA2A08C(&qword_25553F2C8, (uint64_t (*)(uint64_t))sub_21FA5E5AC, MEMORY[0x24BDB98C8]);
    v32 = sub_21FC5B280();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v10, v7);
    sub_21FA326EC(v33, (uint64_t (*)(_QWORD))type metadata accessor for CatalogEntry);
  }
  return v32;
}

uint64_t sub_21FA5DD60@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_21FA5DD88(uint64_t a1)
{
  uint64_t v1;

  return sub_21FA2FA40(a1, v1);
}

uint64_t sub_21FA5DD90(id *a1)
{
  id v1;
  id v2;
  id v4;
  char v5;

  v1 = *a1;
  v2 = *a1;
  sub_21FA50724(0, (unint64_t *)&qword_25406BB50);
  if (swift_dynamicCast() && v5 == 4)
    return sub_21FC5B22C();
  v4 = v1;
  return swift_willThrow();
}

uint64_t sub_21FA5DE58(uint64_t *a1)
{
  return sub_21FA5DE64(a1, sub_21FA5DEBC);
}

uint64_t sub_21FA5DE64(uint64_t *a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v3;

  v3 = *a1;
  return a2(&v3);
}

uint64_t sub_21FA5DE98()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FA5DEBC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD v56[4];
  uint64_t v57;

  sub_21FA5E52C(0, &qword_25553F2A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9DA0]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v53 = (char *)&v44 - v5;
  sub_21FA5E5AC();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2ED54(0, &qword_25553F2B8, (void (*)(uint64_t))type metadata accessor for CatalogEntry);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v44 - v12;
  v14 = type metadata accessor for CatalogEntry();
  v15 = MEMORY[0x24BDAC7A8](v14);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (uint64_t *)((char *)&v44 - v17);
  MEMORY[0x24BDAC7A8](v16);
  v20 = *a1;
  v21 = *(_QWORD *)(v20 + 16);
  v54 = v8;
  v55 = v19;
  v52 = (uint64_t)&v44 - v22;
  v49 = v24;
  v50 = v23;
  if (v21)
  {
    v44 = v4;
    v45 = v3;
    v46 = v14;
    v47 = v10;
    v48 = v7;
    v25 = v20 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    v26 = *(_QWORD *)(v19 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_21FA2D120(v25, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for CatalogEntry);
      if (*v18 == 0xD000000000000012 && v18[1] == 0x800000021FC75230)
        break;
      if ((sub_21FC5BDF0() & 1) != 0)
        break;
      sub_21FA326EC((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for CatalogEntry);
      v25 += v26;
      if (!--v21)
      {
        v27 = 1;
        goto LABEL_9;
      }
    }
    sub_21FA5E730((uint64_t)v18, (uint64_t)v13);
    v27 = 0;
LABEL_9:
    v10 = v47;
    v7 = v48;
    v3 = v45;
    v14 = v46;
    v4 = v44;
  }
  else
  {
    swift_bridgeObjectRetain();
    v27 = 1;
  }
  v28 = v55;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v13, v27, 1, v14);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v13, 1, v14) == 1)
  {
    sub_21FA5E6A4((uint64_t)v13);
    sub_21FA322D0();
    v29 = swift_allocError();
    *v30 = 6;
    *(_QWORD *)&v56[0] = v29;
    sub_21FA50724(0, (unint64_t *)&qword_25406BB50);
    v31 = v53;
    sub_21FC5B1E4();
    sub_21FA5E6F0(&qword_25553F2C0, &qword_25553F2A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9DA0], MEMORY[0x24BDB9DB0]);
    v32 = sub_21FC5B280();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v31, v3);
  }
  else
  {
    v33 = v52;
    sub_21FA5E730((uint64_t)v13, v52);
    v34 = v51;
    v57 = sub_21FA5E878("%s - fetchCurrentRegistryPublicKeyContentVersion starting");
    v35 = v50;
    sub_21FA2D120(v33, v50, (uint64_t (*)(_QWORD))type metadata accessor for CatalogEntry);
    sub_21FA5D850(v34, (uint64_t)v56);
    v36 = (*(unsigned __int8 *)(v28 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
    v37 = (v49 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
    v38 = swift_allocObject();
    sub_21FA5E730(v35, v38 + v36);
    v39 = (_OWORD *)(v38 + v37);
    v40 = v56[1];
    *v39 = v56[0];
    v39[1] = v40;
    v41 = v56[3];
    v39[2] = v56[2];
    v39[3] = v41;
    v42 = MEMORY[0x24BEE1768];
    sub_21FA5D3F8(0, &qword_25406BDB8, MEMORY[0x24BEE1768], (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA5E65C((unint64_t *)&qword_25406BDB0, &qword_25406BDB8, v42);
    sub_21FC5B31C();
    swift_release();
    swift_release();
    sub_21FA2A08C(&qword_25553F2C8, (uint64_t (*)(uint64_t))sub_21FA5E5AC, MEMORY[0x24BDB98C8]);
    v32 = sub_21FC5B280();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v10, v7);
    sub_21FA326EC(v33, (uint64_t (*)(_QWORD))type metadata accessor for CatalogEntry);
  }
  return v32;
}

uint64_t sub_21FA5E388(uint64_t a1)
{
  uint64_t v1;

  return sub_21FA30638(a1, v1);
}

uint64_t sub_21FA5E390(id *a1)
{
  id v1;
  id v2;
  id v4;
  char v5;

  v1 = *a1;
  v2 = *a1;
  sub_21FA50724(0, (unint64_t *)&qword_25406BB50);
  if (swift_dynamicCast() && v5 == 7)
    return sub_21FC5B22C();
  v4 = v1;
  return swift_willThrow();
}

uint64_t sub_21FA5E454@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

unint64_t sub_21FA5E488()
{
  unint64_t result;

  result = qword_25553F298;
  if (!qword_25553F298)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for IssuerDirectoryDownloadTaskSchedulerError, &type metadata for IssuerDirectoryDownloadTaskSchedulerError);
    atomic_store(result, (unint64_t *)&qword_25553F298);
  }
  return result;
}

unint64_t sub_21FA5E4CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25553F2A0;
  if (!qword_25553F2A0)
  {
    sub_21FA5D3F8(255, &qword_25553F278, (uint64_t)&type metadata for CatalogDownloadResult, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9DA0]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9DB0], v1);
    atomic_store(result, (unint64_t *)&qword_25553F2A0);
  }
  return result;
}

void sub_21FA5E52C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = type metadata accessor for CatalogEntry();
    v7 = sub_21FA50724(255, (unint64_t *)&qword_25406BB50);
    v8 = a3(a1, v6, v7, MEMORY[0x24BEE3F20]);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_21FA5E5AC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  if (!qword_25553F2B0)
  {
    v0 = MEMORY[0x24BEE1768];
    sub_21FA5D3F8(255, &qword_25406BDB8, MEMORY[0x24BEE1768], (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    type metadata accessor for CatalogEntry();
    sub_21FA5E65C((unint64_t *)&qword_25406BDB0, &qword_25406BDB8, v0);
    v1 = sub_21FC5B0E8();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25553F2B0);
  }
}

uint64_t sub_21FA5E65C(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_21FA5D3F8(255, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9AF8], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FA5E6A4(uint64_t a1)
{
  uint64_t v2;

  sub_21FA2ED54(0, &qword_25553F2B8, (void (*)(uint64_t))type metadata accessor for CatalogEntry);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21FA5E6F0(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FA5E52C(255, a2, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FA5E730(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CatalogEntry();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_21FA5E774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  _QWORD v12[6];
  _OWORD v13[4];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = *(void **)(a3 + 16);
  sub_21FA5D850(a3, (uint64_t)v13);
  v8 = swift_allocObject();
  v9 = v13[1];
  *(_OWORD *)(v8 + 16) = v13[0];
  *(_OWORD *)(v8 + 32) = v9;
  v10 = v13[3];
  *(_OWORD *)(v8 + 48) = v13[2];
  *(_OWORD *)(v8 + 64) = v10;
  *(_QWORD *)(v8 + 80) = sub_21FA5F648;
  *(_QWORD *)(v8 + 88) = v6;
  v12[4] = sub_21FA5F8EC;
  v12[5] = v8;
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 1107296256;
  v12[2] = sub_21FA89518;
  v12[3] = &block_descriptor_44;
  v11 = _Block_copy(v12);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_fetchCurrentRegistryIssuerContentVersionWithCompletion_, v11);
  _Block_release(v11);
}

uint64_t sub_21FA5E878(const char *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v16[4];

  v3 = v1;
  if (qword_25406B7F8 != -1)
    swift_once();
  v4 = sub_21FC5AFD4();
  __swift_project_value_buffer(v4, (uint64_t)qword_25406D830);
  v5 = sub_21FC5AFC8();
  v6 = sub_21FC5B994();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    *(_DWORD *)v7 = 136315138;
    *(_QWORD *)&v16[0] = v8;
    sub_21FA5F5A4();
    v9 = sub_21FC5B64C();
    sub_21FABDCF8(v9, v10, (uint64_t *)v16);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v5, v6, a1, v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v8, -1, -1);
    MEMORY[0x2207D105C](v7, -1, -1);
  }

  sub_21FA5D850(v3, (uint64_t)v16);
  v11 = (_OWORD *)swift_allocObject();
  v12 = v16[1];
  v11[1] = v16[0];
  v11[2] = v12;
  v13 = v16[3];
  v11[3] = v16[2];
  v11[4] = v13;
  sub_21FA5D3F8(0, &qword_25553F2D8, MEMORY[0x24BEE1768], (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9E38]);
  swift_allocObject();
  *(_QWORD *)&v16[0] = sub_21FC5B25C();
  sub_21FA5F5E8();
  v14 = sub_21FC5B280();
  swift_release();
  return v14;
}

uint64_t sub_21FA5EAB8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const char *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  const char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37[3];
  uint64_t v38;
  uint64_t v39;
  int v40;

  v12 = type metadata accessor for CatalogEntry();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v16 = *(_QWORD *)(a2 + 16);
  if (v15 >= v16)
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v20 = sub_21FC5AFD4();
    __swift_project_value_buffer(v20, (uint64_t)qword_25406D830);
    sub_21FA2D120(a2, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for CatalogEntry);
    v21 = sub_21FC5AFC8();
    v22 = sub_21FC5B994();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc();
      v34 = swift_slowAlloc();
      v37[0] = v34;
      *(_DWORD *)v23 = 136315906;
      *(_QWORD *)&v35 = &type metadata for IssuerDirectoryDownloadTask;
      sub_21FA5F5A4();
      v40 = a5;
      v24 = sub_21FC5B64C();
      v33 = a4;
      *(_QWORD *)&v35 = sub_21FABDCF8(v24, v25, v37);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      *(_QWORD *)&v35 = v15;
      v26 = sub_21FC5BDCC();
      *(_QWORD *)&v35 = sub_21FABDCF8(v26, v27, v37);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 22) = 2080;
      if (v16 == v15)
        v28 = 0x6F74206C61757165;
      else
        v28 = 0x2072657461657267;
      if (v16 == v15)
        v29 = 0xE800000000000000;
      else
        v29 = 0xEC0000006E616874;
      *(_QWORD *)&v35 = sub_21FABDCF8(v28, v29, v37);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 32) = 2048;
      v30 = *((_QWORD *)v14 + 2);
      sub_21FA326EC((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for CatalogEntry);
      *(_QWORD *)&v35 = v30;
      LOBYTE(a5) = v40;
      sub_21FC5BAC0();
      _os_log_impl(&dword_21FA27000, v21, v22, v33, (uint8_t *)v23, 0x2Au);
      v31 = v34;
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v31, -1, -1);
      MEMORY[0x2207D105C](v23, -1, -1);
    }
    else
    {
      sub_21FA326EC((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for CatalogEntry);
    }

    sub_21FA322D0();
    swift_allocError();
    *v32 = a5;
    return swift_willThrow();
  }
  else
  {
    sub_21FA2D120(a3 + 24, (uint64_t)&v35, (uint64_t (*)(_QWORD))sub_21FA5D7EC);
    if (v36)
    {
      sub_21FA3175C(&v35, (uint64_t)v37);
      v17 = v38;
      v18 = v39;
      __swift_project_boxed_opaque_existential_1(v37, v38);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v18 + 24))(v17, v18) & 1) != 0)
      {
        sub_21FA5E488();
        swift_allocError();
        swift_willThrow();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    }
    else
    {
      sub_21FA326EC((uint64_t)&v35, (uint64_t (*)(_QWORD))sub_21FA5D7EC);
    }
    return sub_21FA2D120(a2, a6, (uint64_t (*)(_QWORD))type metadata accessor for CatalogEntry);
  }
}

uint64_t sub_21FA5EEC0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21FA5F7A0(a1, "%s - current public key registry content version (%s) is %s the latest catalog version (%ld). SKIPPING Download", 7, a2);
}

void sub_21FA5EEE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  _QWORD v12[6];
  _OWORD v13[4];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = *(void **)(a3 + 16);
  sub_21FA5D850(a3, (uint64_t)v13);
  v8 = swift_allocObject();
  v9 = v13[1];
  *(_OWORD *)(v8 + 16) = v13[0];
  *(_OWORD *)(v8 + 32) = v9;
  v10 = v13[3];
  *(_OWORD *)(v8 + 48) = v13[2];
  *(_OWORD *)(v8 + 64) = v10;
  *(_QWORD *)(v8 + 80) = sub_21FA5F648;
  *(_QWORD *)(v8 + 88) = v6;
  v12[4] = sub_21FA5F650;
  v12[5] = v8;
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 1107296256;
  v12[2] = sub_21FA89518;
  v12[3] = &block_descriptor;
  v11 = _Block_copy(v12);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_fetchCurrentRegistryPublicKeyContentVersionWithCompletion_, v11);
  _Block_release(v11);
}

void sub_21FA5EFE4(void *a1, void *a2, uint64_t a3, void (*a4)(id, _QWORD), uint64_t a5, const char *a6)
{
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  id v43;
  id v44;
  void (*v45)(id, _QWORD);
  uint64_t v46;
  uint64_t v47;

  if (qword_25406B7F8 != -1)
    swift_once();
  v10 = sub_21FC5AFD4();
  __swift_project_value_buffer(v10, (uint64_t)qword_25406D830);
  v11 = a1;
  v12 = sub_21FC5AFC8();
  v13 = sub_21FC5B994();
  if (!os_log_type_enabled(v12, v13))
  {

    if (a2)
      goto LABEL_5;
LABEL_8:
    v33 = v11;
    v34 = sub_21FC5AFC8();
    v35 = sub_21FC5B994();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc();
      v37 = swift_slowAlloc();
      *(_DWORD *)v36 = 136315394;
      v47 = v37;
      sub_21FA5F5A4();
      v38 = sub_21FC5B64C();
      sub_21FABDCF8(v38, v39, &v47);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 12) = 2080;
      sub_21FA2ED54(0, (unint64_t *)&qword_25554BAA0, (void (*)(uint64_t))sub_21FA5F68C);
      v40 = v33;
      v41 = sub_21FC5B64C();
      sub_21FABDCF8(v41, v42, &v47);
      sub_21FC5BAC0();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21FA27000, v34, v35, "%s - FINISHED: Success with currentVersion: %s", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v37, -1, -1);
      MEMORY[0x2207D105C](v36, -1, -1);

      if (a1)
      {
LABEL_10:
        v43 = objc_msgSend(v33, sel_integerValue);
LABEL_15:
        a4(v43, 0);
        return;
      }
    }
    else
    {

      if (a1)
        goto LABEL_10;
    }
    v43 = 0;
    goto LABEL_15;
  }
  v45 = a4;
  v14 = swift_slowAlloc();
  v15 = swift_slowAlloc();
  *(_DWORD *)v14 = 136315394;
  v47 = v15;
  sub_21FA5F5A4();
  v16 = sub_21FC5B64C();
  sub_21FABDCF8(v16, v17, &v47);
  sub_21FC5BAC0();
  swift_bridgeObjectRelease();
  *(_WORD *)(v14 + 12) = 2080;
  sub_21FA2ED54(0, (unint64_t *)&qword_25554BAA0, (void (*)(uint64_t))sub_21FA5F68C);
  v18 = v11;
  v19 = sub_21FC5B64C();
  sub_21FABDCF8(v19, v20, &v47);
  sub_21FC5BAC0();

  swift_bridgeObjectRelease();
  _os_log_impl(&dword_21FA27000, v12, v13, a6, (uint8_t *)v14, 0x16u);
  swift_arrayDestroy();
  MEMORY[0x2207D105C](v15, -1, -1);
  v21 = v14;
  a4 = v45;
  MEMORY[0x2207D105C](v21, -1, -1);

  if (!a2)
    goto LABEL_8;
LABEL_5:
  v22 = a2;
  v23 = a2;
  v24 = a2;
  v25 = sub_21FC5AFC8();
  v26 = sub_21FC5B97C();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = swift_slowAlloc();
    v28 = swift_slowAlloc();
    *(_DWORD *)v27 = 136315394;
    v47 = v28;
    sub_21FA5F5A4();
    v29 = sub_21FC5B64C();
    sub_21FABDCF8(v29, v30, &v47);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    swift_getErrorValue();
    v31 = sub_21FBADBB8(v46);
    sub_21FABDCF8(v31, v32, &v47);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_21FA27000, v25, v26, "%s - ERROR: %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v28, -1, -1);
    MEMORY[0x2207D105C](v27, -1, -1);
  }
  else
  {

  }
  v44 = a2;
  a4(a2, 1);

}

unint64_t sub_21FA5F5A4()
{
  unint64_t result;

  result = qword_25553F2D0;
  if (!qword_25553F2D0)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_25553F2D0);
  }
  return result;
}

void sub_21FA5F5E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_21FA5EEE0(a1, a2, v2 + 16);
}

unint64_t sub_21FA5F5E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25553F2E0;
  if (!qword_25553F2E0)
  {
    sub_21FA5D3F8(255, &qword_25553F2D8, MEMORY[0x24BEE1768], (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9E38]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9E58], v1);
    atomic_store(result, (unint64_t *)&qword_25553F2E0);
  }
  return result;
}

void sub_21FA5F650(void *a1, void *a2)
{
  uint64_t v2;

  sub_21FA5EFE4(a1, a2, v2 + 16, *(void (**)(id, _QWORD))(v2 + 80), *(_QWORD *)(v2 + 88), "%s - fetchCurrentRegistryPublicKeyContentVersion finished with version %s");
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

unint64_t sub_21FA5F68C()
{
  unint64_t result;

  result = qword_25406BAC8;
  if (!qword_25406BAC8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25406BAC8);
  }
  return result;
}

uint64_t objectdestroy_18Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for CatalogEntry();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = v0 + v3;
  swift_bridgeObjectRelease();
  v6 = v5 + *(int *)(v1 + 24);
  v7 = sub_21FC5A98C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_release();

  if (*(_QWORD *)(v0 + v4 + 48))
    __swift_destroy_boxed_opaque_existential_1(v0 + v4 + 24);
  return swift_deallocObject();
}

uint64_t sub_21FA5F780@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21FA5F7A0(a1, "%s - current issuer registry content version (%s) is %s the latest catalog version (%ld). SKIPPING Download", 4, a2);
}

uint64_t sub_21FA5F7A0@<X0>(uint64_t *a1@<X0>, const char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;

  v9 = *(_QWORD *)(type metadata accessor for CatalogEntry() - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  return sub_21FA5EAB8(a1, v4 + v10, v4 + ((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8), a2, a3, a4);
}

uint64_t objectdestroyTm_1()
{
  uint64_t v0;

  swift_release();

  if (*(_QWORD *)(v0 + 64))
    __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  return swift_deallocObject();
}

void sub_21FA5F864(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_21FA5E774(a1, a2, v2 + 16);
}

uint64_t sub_21FA5F86C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 1;
  return v3(&v5);
}

uint64_t objectdestroy_27Tm()
{
  uint64_t v0;

  swift_release();

  if (*(_QWORD *)(v0 + 64))
    __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  swift_release();
  return swift_deallocObject();
}

void sub_21FA5F8EC(void *a1, void *a2)
{
  uint64_t v2;

  sub_21FA5EFE4(a1, a2, v2 + 16, *(void (**)(id, _QWORD))(v2 + 80), *(_QWORD *)(v2 + 88), "%s - fetchCurrentRegistryIssuerContentVersion finished with version %s");
}

uint64_t PBPlainText.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBPlainText(0) + 20));
  result = swift_beginAccess();
  v5 = *(_BYTE *)(v3 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v3 + 16);
  *(_BYTE *)(a1 + 8) = v5;
  return result;
}

uint64_t type metadata accessor for PBPlainText(uint64_t a1)
{
  return sub_21FA44B58(a1, qword_25553F390);
}

uint64_t sub_21FA5F99C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = sub_21FA61D10(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 16) = v3;
  *(_BYTE *)(v7 + 24) = v4;
  return result;
}

uint64_t PBPlainText.type.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(v1 + v4) = sub_21FA61D10(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 16) = v2;
  *(_BYTE *)(v6 + 24) = v3;
  return result;
}

uint64_t type metadata accessor for PBPlainText._StorageClass(uint64_t a1)
{
  return sub_21FA44B58(a1, qword_25553F498);
}

void (*PBPlainText.type.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_BYTE *)(v5 + 24);
  v3[9] = *(_QWORD *)(v5 + 16);
  *((_BYTE *)v3 + 80) = v6;
  return sub_21FA5FB8C;
}

void sub_21FA5FB8C(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  v5 = *(_BYTE *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 88);
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    v9 = swift_retain();
    *(_QWORD *)(v8 + v7) = sub_21FA61D10(v9);
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_QWORD *)(v10 + 16) = v4;
  *(_BYTE *)(v10 + 24) = v5;
  free((void *)v3);
}

uint64_t PBPlainText.healthInstituteID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PBPlainText(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 32);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_21FA5FCC0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PBPlainText(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 40);
  *a2 = *(_QWORD *)(v3 + 32);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_21FA5FD18(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = sub_21FA61D10(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 32) = v4;
  *(_QWORD *)(v7 + 40) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t PBPlainText.healthInstituteID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = sub_21FA61D10(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 32) = a1;
  *(_QWORD *)(v7 + 40) = a2;
  return swift_bridgeObjectRelease();
}

void (*PBPlainText.healthInstituteID.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 40);
  v3[9] = *(_QWORD *)(v5 + 32);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_21FA5FF00;
}

void sub_21FA5FF00(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBPlainText._StorageClass(0);
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = sub_21FA61D10(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 32) = v3;
    *(_QWORD *)(v8 + 40) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBPlainText._StorageClass(0);
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = sub_21FA61D10(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 32) = v3;
    *(_QWORD *)(v12 + 40) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t PBPlainText.patientID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PBPlainText(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 48);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_21FA600B4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PBPlainText(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 56);
  *a2 = *(_QWORD *)(v3 + 48);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_21FA6010C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = sub_21FA61D10(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 48) = v4;
  *(_QWORD *)(v7 + 56) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t PBPlainText.patientID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = sub_21FA61D10(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 48) = a1;
  *(_QWORD *)(v7 + 56) = a2;
  return swift_bridgeObjectRelease();
}

void (*PBPlainText.patientID.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 56);
  v3[9] = *(_QWORD *)(v5 + 48);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_21FA602F4;
}

void sub_21FA602F4(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBPlainText._StorageClass(0);
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = sub_21FA61D10(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 48) = v3;
    *(_QWORD *)(v8 + 56) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBPlainText._StorageClass(0);
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = sub_21FA61D10(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 48) = v3;
    *(_QWORD *)(v12 + 56) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t PBPlainText.dateLastModified.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PBPlainText(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 64);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_21FA604A8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PBPlainText(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 72);
  *a2 = *(_QWORD *)(v3 + 64);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_21FA60500(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = sub_21FA61D10(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t PBPlainText.dateLastModified.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = sub_21FA61D10(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 64) = a1;
  *(_QWORD *)(v7 + 72) = a2;
  return swift_bridgeObjectRelease();
}

void (*PBPlainText.dateLastModified.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 72);
  v3[9] = *(_QWORD *)(v5 + 64);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_21FA606E8;
}

void sub_21FA606E8(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBPlainText._StorageClass(0);
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = sub_21FA61D10(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 64) = v3;
    *(_QWORD *)(v8 + 72) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBPlainText._StorageClass(0);
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = sub_21FA61D10(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 64) = v3;
    *(_QWORD *)(v12 + 72) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t PBPlainText.plaintext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBPlainText(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  return sub_21FA61F74(v3, a1);
}

uint64_t sub_21FA608A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PBPlainText(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  return sub_21FA61F74(v3, a2);
}

uint64_t sub_21FA60908(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  sub_21FA2D1A0(0, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - v5;
  sub_21FA61F74(a1, (uint64_t)&v11 - v5);
  v7 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(a2 + v7) = sub_21FA61D10(v8);
    swift_release();
  }
  v9 = *(_QWORD *)(a2 + v7)
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  swift_retain();
  sub_21FA61FE4((uint64_t)v6, v9);
  swift_endAccess();
  return swift_release();
}

uint64_t PBPlainText.plaintext.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = sub_21FA61D10(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3)
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  swift_retain();
  sub_21FA61FE4(a1, v5);
  swift_endAccess();
  return swift_release();
}

void (*PBPlainText.plaintext.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[9] = v1;
  sub_21FA2D1A0(0, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v3[10] = malloc(v5);
  v6 = malloc(v5);
  v3[11] = v6;
  v7 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  *((_DWORD *)v3 + 24) = v7;
  v8 = *(_QWORD *)(v1 + v7)
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  sub_21FA61F74(v8, (uint64_t)v6);
  return sub_21FA60BCC;
}

void sub_21FA60BCC(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    sub_21FA61F74(*(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 80));
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v3 = *(int *)(v2 + 96);
      v4 = *(_QWORD *)(v2 + 72);
      type metadata accessor for PBPlainText._StorageClass(0);
      swift_allocObject();
      v5 = swift_retain();
      *(_QWORD *)(v4 + v3) = sub_21FA61D10(v5);
      swift_release();
    }
    v7 = *(void **)(v2 + 80);
    v6 = *(void **)(v2 + 88);
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 72) + *(int *)(v2 + 96))
       + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
    swift_beginAccess();
    swift_retain();
    sub_21FA61FE4((uint64_t)v7, v8);
    swift_endAccess();
    swift_release();
    sub_21FA2D1F8((uint64_t)v6, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 72);
      type metadata accessor for PBPlainText._StorageClass(0);
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = sub_21FA61D10(v11);
      swift_release();
    }
    v7 = *(void **)(v2 + 80);
    v6 = *(void **)(v2 + 88);
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 72) + *(int *)(v2 + 96))
        + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
    swift_beginAccess();
    swift_retain();
    sub_21FA61FE4((uint64_t)v6, v12);
    swift_endAccess();
    swift_release();
  }
  free(v6);
  free(v7);
  free((void *)v2);
}

uint64_t PBPlainText.references.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  sub_21FA2D1A0(0, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - v4;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBPlainText(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  sub_21FA61F74(v6, (uint64_t)v5);
  v7 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext);
LABEL_5:
    *a1 = MEMORY[0x24BEE4AF8];
    type metadata accessor for PBReferences(0);
    return sub_21FC5AD10();
  }
  if (swift_getEnumCaseMultiPayload())
  {
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBPlainText.OneOf_Plaintext);
    goto LABEL_5;
  }
  return sub_21FA2D23C((uint64_t)v5, (uint64_t)a1, type metadata accessor for PBReferences);
}

uint64_t PBPlainText.references.setter(uint64_t a1)
{
  return sub_21FA61218(a1, type metadata accessor for PBReferences);
}

void (*PBPlainText.references.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_21FA2D1A0(0, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for PBReferences(0) - 8) + 64);
  v3[5] = malloc(v6);
  v7 = malloc(v6);
  v3[6] = v7;
  v8 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBPlainText(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  sub_21FA61F74(v8, (uint64_t)v5);
  v9 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      sub_21FA2D23C((uint64_t)v5, (uint64_t)v7, type metadata accessor for PBReferences);
      return sub_21FA61074;
    }
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBPlainText.OneOf_Plaintext);
  }
  *v7 = MEMORY[0x24BEE4AF8];
  sub_21FC5AD10();
  return sub_21FA61074;
}

void sub_21FA61074(uint64_t a1, char a2)
{
  sub_21FA38454(a1, a2, (void (*)(void *))PBPlainText.references.setter, type metadata accessor for PBReferences);
}

uint64_t PBPlainText.data.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_21FA2D1A0(0, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - v4;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBPlainText(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  sub_21FA61F74(v6, (uint64_t)v5);
  v7 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return sub_21FA2D23C((uint64_t)v5, a1, type metadata accessor for PBTypedData);
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBPlainText.OneOf_Plaintext);
  }
  sub_21FC5AD10();
  v9 = *(int *)(type metadata accessor for PBTypedData(0) + 20);
  if (qword_25553D590 != -1)
    swift_once();
  *(_QWORD *)(a1 + v9) = qword_25553E450;
  return swift_retain();
}

uint64_t PBPlainText.data.setter(uint64_t a1)
{
  return sub_21FA61218(a1, type metadata accessor for PBTypedData);
}

uint64_t sub_21FA61218(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  sub_21FA2D1A0(0, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  v11 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    v12 = swift_retain();
    *(_QWORD *)(v2 + v11) = sub_21FA61D10(v12);
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v11);
  sub_21FA2D23C(a1, (uint64_t)v10, a2);
  v14 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v10, 0, 1, v14);
  sub_21FA2D280((uint64_t)v10, (uint64_t)v8, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext);
  v15 = v13
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  swift_retain();
  sub_21FA61FE4((uint64_t)v8, v15);
  swift_endAccess();
  return swift_release();
}

void (*PBPlainText.data.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_21FA2D1A0(0, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for PBTypedData(0);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v3[5] = malloc(v7);
  v8 = (char *)malloc(v7);
  v3[6] = v8;
  v9 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBPlainText(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  sub_21FA61F74(v9, (uint64_t)v5);
  v10 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v5, 1, v10) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_21FA2D23C((uint64_t)v5, (uint64_t)v8, type metadata accessor for PBTypedData);
      return sub_21FA61588;
    }
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBPlainText.OneOf_Plaintext);
  }
  sub_21FC5AD10();
  v11 = *(int *)(v6 + 20);
  if (qword_25553D590 != -1)
    swift_once();
  *(_QWORD *)&v8[v11] = qword_25553E450;
  swift_retain();
  return sub_21FA61588;
}

void sub_21FA61588(uint64_t a1, char a2)
{
  sub_21FA38454(a1, a2, (void (*)(void *))PBPlainText.data.setter, type metadata accessor for PBTypedData);
}

uint64_t PBPlainText.rawData.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_21FA2D1A0(0, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - v4;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBPlainText(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  sub_21FA61F74(v6, (uint64_t)v5);
  v7 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
      return sub_21FA2D23C((uint64_t)v5, (uint64_t)a1, type metadata accessor for PBRawData);
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBPlainText.OneOf_Plaintext);
  }
  *a1 = sub_21FC5ACF8();
  a1[1] = v9;
  type metadata accessor for PBRawData(0);
  return sub_21FC5AD10();
}

uint64_t PBPlainText.rawData.setter(uint64_t a1)
{
  return sub_21FA61218(a1, type metadata accessor for PBRawData);
}

void (*PBPlainText.rawData.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_21FA2D1A0(0, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for PBRawData(0) - 8) + 64);
  v3[5] = malloc(v6);
  v7 = malloc(v6);
  v3[6] = v7;
  v8 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBPlainText(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  sub_21FA61F74(v8, (uint64_t)v5);
  v9 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_21FA2D1F8((uint64_t)v5, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext);
LABEL_6:
    *v7 = sub_21FC5ACF8();
    v7[1] = v10;
    sub_21FC5AD10();
    return sub_21FA61880;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBPlainText.OneOf_Plaintext);
    goto LABEL_6;
  }
  sub_21FA2D23C((uint64_t)v5, (uint64_t)v7, type metadata accessor for PBRawData);
  return sub_21FA61880;
}

void sub_21FA61880(uint64_t a1, char a2)
{
  sub_21FA38454(a1, a2, (void (*)(void *))PBPlainText.rawData.setter, type metadata accessor for PBRawData);
}

uint64_t PBPlainText.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t PBPlainText.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*PBPlainText.unknownFields.modify())()
{
  return nullsub_1;
}

uint64_t PBPlainText.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  sub_21FC5AD10();
  v2 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  if (qword_25553D5B8 != -1)
    swift_once();
  *(_QWORD *)(a1 + v2) = qword_25553F300;
  return swift_retain();
}

unint64_t static PBPlainText.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t sub_21FA61998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v22;

  v0 = sub_21FC5AF74();
  __swift_allocate_value_buffer(v0, qword_25553F2E8);
  __swift_project_value_buffer(v0, (uint64_t)qword_25553F2E8);
  sub_21FA2D1A0(0, (unint64_t *)&qword_25553EAC0, (uint64_t (*)(uint64_t))sub_21FA48EB8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  sub_21FA48EB8();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_21FC5F3A0;
  v6 = v22 + v5 + *(int *)(v2 + 48);
  *(_QWORD *)(v22 + v5) = 1;
  *(_QWORD *)v6 = "type";
  *(_QWORD *)(v6 + 8) = 4;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = sub_21FC5AF5C();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v22 + v5 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v22 + v5 + v4) = 2;
  *(_QWORD *)v10 = "health_institute_id";
  *(_QWORD *)(v10 + 8) = 19;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v22 + v5 + 2 * v4);
  v12 = (char *)v11 + *(int *)(v2 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "patient_id";
  *((_QWORD *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v22 + v5 + 3 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "date_last_modified";
  *((_QWORD *)v14 + 1) = 18;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v22 + v5 + 4 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "references";
  *((_QWORD *)v16 + 1) = 10;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v22 + v5 + 5 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "data";
  *((_QWORD *)v18 + 1) = 4;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v22 + v5 + 6 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "raw_data";
  *((_QWORD *)v20 + 1) = 8;
  v20[16] = 2;
  v9();
  return sub_21FC5AF68();
}

uint64_t static PBPlainText._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_25553D5B0 != -1)
    swift_once();
  v2 = sub_21FC5AF74();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_25553F2E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_21FA61C8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  type metadata accessor for PBPlainText._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0xE000000000000000;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0xE000000000000000;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0xE000000000000000;
  v1 = v0
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  v2 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  qword_25553F300 = v0;
  return result;
}

uint64_t sub_21FA61D10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  sub_21FA2D1A0(0, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v18 - v4;
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0xE000000000000000;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0xE000000000000000;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0xE000000000000000;
  v6 = v1
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  v7 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  swift_beginAccess();
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_BYTE *)(a1 + 24);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v8;
  *(_BYTE *)(v1 + 24) = v9;
  swift_beginAccess();
  v11 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = v11;
  *(_QWORD *)(v1 + 40) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v13 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = v13;
  *(_QWORD *)(v1 + 56) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v15 = *(_QWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 72);
  swift_beginAccess();
  *(_QWORD *)(v1 + 64) = v15;
  *(_QWORD *)(v1 + 72) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = a1
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  sub_21FA61F74(v16, (uint64_t)v5);
  swift_release();
  swift_beginAccess();
  sub_21FA61FE4((uint64_t)v5, v6);
  swift_endAccess();
  return v1;
}

uint64_t sub_21FA61F74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FA2D1A0(0, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for PBPlainText.OneOf_Plaintext(uint64_t a1)
{
  return sub_21FA44B58(a1, qword_25553F438);
}

uint64_t sub_21FA61FE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FA2D1A0(0, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FA62040()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21FA2D1F8(v0+ OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext);
  return swift_deallocClassInstance();
}

uint64_t PBPlainText.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v3 + v7) = sub_21FA61D10(v8);
    swift_release();
  }
  v9 = swift_retain();
  sub_21FA62160(v9, a1, a2, a3);
  return swift_release();
}

uint64_t sub_21FA62160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  char v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;

  v142 = a4;
  v147 = a3;
  v140 = type metadata accessor for PBRawData(0);
  v134 = *(_QWORD *)(v140 - 8);
  v6 = MEMORY[0x24BDAC7A8](v140);
  v122 = (uint64_t)&v109 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v121 = (uint64_t)&v109 - v8;
  v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_21FA2D1A0(0, &qword_25553F5D8, v10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v127 = (uint64_t)&v109 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v138 = (uint64_t)&v109 - v14;
  v133 = type metadata accessor for PBTypedData(0);
  v136 = *(_QWORD *)(v133 - 8);
  v15 = MEMORY[0x24BDAC7A8](v133);
  v124 = (uint64_t)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v120 = (uint64_t)&v109 - v17;
  sub_21FA2D1A0(0, &qword_25553F0A0, v18, v9);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v131 = (char *)&v109 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v141 = (uint64_t)&v109 - v22;
  v137 = type metadata accessor for PBReferences(0);
  v135 = *(_QWORD *)(v137 - 8);
  v23 = MEMORY[0x24BDAC7A8](v137);
  v123 = (uint64_t)&v109 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v119 = (uint64_t)&v109 - v25;
  sub_21FA2D1A0(0, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext, v9);
  v27 = MEMORY[0x24BDAC7A8](v26);
  v130 = (uint64_t)&v109 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x24BDAC7A8](v27);
  v129 = (uint64_t)&v109 - v30;
  v31 = MEMORY[0x24BDAC7A8](v29);
  v132 = (uint64_t)&v109 - v32;
  v33 = MEMORY[0x24BDAC7A8](v31);
  v144 = (char *)&v109 - v34;
  MEMORY[0x24BDAC7A8](v33);
  v128 = (uint64_t)&v109 - v35;
  v36 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  v145 = *(_QWORD *)(v36 - 8);
  v146 = v36;
  v37 = MEMORY[0x24BDAC7A8](v36);
  v125 = (uint64_t)&v109 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = MEMORY[0x24BDAC7A8](v37);
  v41 = (char *)&v109 - v40;
  v42 = MEMORY[0x24BDAC7A8](v39);
  v44 = (char *)&v109 - v43;
  v45 = MEMORY[0x24BDAC7A8](v42);
  v47 = (char *)&v109 - v46;
  v48 = MEMORY[0x24BDAC7A8](v45);
  v50 = (char *)&v109 - v49;
  MEMORY[0x24BDAC7A8](v48);
  v52 = (char *)&v109 - v51;
  sub_21FA2D1A0(0, &qword_25553F5E0, type metadata accessor for PBReferences, v9);
  v54 = MEMORY[0x24BDAC7A8](v53);
  v56 = (char *)&v109 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v54);
  v139 = (uint64_t)&v109 - v57;
  v126 = a1;
  v143 = a1
       + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  v58 = v148;
  result = sub_21FC5AD88();
  v61 = v58;
  if (!v58)
  {
    v148 = a2;
    v115 = v56;
    v112 = v52;
    v110 = v50;
    v113 = v47;
    v111 = v44;
    v114 = v41;
    v118 = v126 + 64;
    v117 = v126 + 48;
    v116 = v126 + 32;
    v126 += 16;
    v62 = type metadata accessor for PBRawData;
    v63 = (uint64_t)v131;
    v64 = v143;
    while (1)
    {
      if ((v60 & 1) != 0)
        return result;
      switch(result)
      {
        case 1:
          swift_beginAccess();
          sub_21FA64E10();
          v65 = v61;
          sub_21FC5ADC4();
          goto LABEL_5;
        case 2:
        case 3:
        case 4:
          swift_beginAccess();
          v65 = v61;
          sub_21FC5AE3C();
LABEL_5:
          v61 = v65;
          swift_endAccess();
          goto LABEL_6;
        case 5:
          v66 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v135 + 56);
          v66(v139, 1, 1, v137);
          v67 = v128;
          sub_21FA61F74(v64, v128);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v145 + 48))(v67, 1, v146) == 1)
          {
            sub_21FA2D1F8(v67, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext);
LABEL_18:
            v76 = (uint64_t)v144;
            v77 = v139;
            v78 = v137;
            goto LABEL_19;
          }
          v73 = v67;
          v74 = (uint64_t)v112;
          sub_21FA2D23C(v73, (uint64_t)v112, type metadata accessor for PBPlainText.OneOf_Plaintext);
          sub_21FC5AD94();
          v75 = (uint64_t)v110;
          sub_21FA2D23C(v74, (uint64_t)v110, type metadata accessor for PBPlainText.OneOf_Plaintext);
          if (swift_getEnumCaseMultiPayload())
          {
            sub_21FA326EC(v75, type metadata accessor for PBPlainText.OneOf_Plaintext);
            goto LABEL_18;
          }
          v77 = v139;
          sub_21FA2D1F8(v139, &qword_25553F5E0, type metadata accessor for PBReferences);
          v107 = v75;
          v108 = v119;
          sub_21FA2D23C(v107, v119, type metadata accessor for PBReferences);
          sub_21FA2D23C(v108, v77, type metadata accessor for PBReferences);
          v78 = v137;
          v66(v77, 0, 1, v137);
          v76 = (uint64_t)v144;
LABEL_19:
          sub_21FA2A08C(&qword_25553E540, type metadata accessor for PBReferences, (uint64_t)&protocol conformance descriptor for PBReferences);
          sub_21FC5AE60();
          v79 = (uint64_t)v115;
          sub_21FA2D280(v77, (uint64_t)v115, &qword_25553F5E0, type metadata accessor for PBReferences);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v79, 1, v78) == 1)
          {
            sub_21FA2D1F8(v79, &qword_25553F5E0, type metadata accessor for PBReferences);
            v64 = v143;
          }
          else
          {
            v94 = v123;
            sub_21FA2D23C(v79, v123, type metadata accessor for PBReferences);
            sub_21FA2D23C(v94, v76, type metadata accessor for PBReferences);
            v95 = v146;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v145 + 56))(v76, 0, 1, v95);
            v96 = v132;
            sub_21FA2D280(v76, v132, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext);
            v64 = v143;
            swift_beginAccess();
            sub_21FA61FE4(v96, v64);
            swift_endAccess();
          }
          v62 = type metadata accessor for PBRawData;
LABEL_6:
          result = sub_21FC5AD88();
          break;
        case 6:
          v68 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v136 + 56);
          v69 = v133;
          v68(v141, 1, 1, v133);
          v70 = v129;
          sub_21FA61F74(v64, v129);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v145 + 48))(v70, 1, v146) == 1)
          {
            sub_21FA2D1F8(v70, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext);
LABEL_23:
            v85 = (uint64_t)v144;
            goto LABEL_29;
          }
          v80 = (uint64_t)v113;
          sub_21FA2D23C(v70, (uint64_t)v113, type metadata accessor for PBPlainText.OneOf_Plaintext);
          sub_21FC5AD94();
          v81 = (uint64_t)v111;
          sub_21FA2D23C(v80, (uint64_t)v111, type metadata accessor for PBPlainText.OneOf_Plaintext);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            v82 = v141;
            sub_21FA2D1F8(v141, &qword_25553F0A0, type metadata accessor for PBTypedData);
            v83 = v81;
            v84 = v120;
            sub_21FA2D23C(v83, v120, type metadata accessor for PBTypedData);
            sub_21FA2D23C(v84, v82, type metadata accessor for PBTypedData);
            v69 = v133;
            v68(v82, 0, 1, v133);
            goto LABEL_23;
          }
          sub_21FA326EC(v81, type metadata accessor for PBPlainText.OneOf_Plaintext);
          v85 = (uint64_t)v144;
          v69 = v133;
LABEL_29:
          sub_21FA2A08C(&qword_25553E518, type metadata accessor for PBTypedData, (uint64_t)&protocol conformance descriptor for PBTypedData);
          v97 = v141;
          sub_21FC5AE60();
          sub_21FA2D280(v97, v63, &qword_25553F0A0, type metadata accessor for PBTypedData);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v136 + 48))(v63, 1, v69) == 1)
          {
            sub_21FA2D1F8(v63, &qword_25553F0A0, type metadata accessor for PBTypedData);
            v64 = v143;
          }
          else
          {
            v98 = v124;
            sub_21FA2D23C(v63, v124, type metadata accessor for PBTypedData);
            sub_21FA2D23C(v98, v85, type metadata accessor for PBTypedData);
            v99 = v146;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v145 + 56))(v85, 0, 1, v99);
            v100 = v132;
            sub_21FA2D280(v85, v132, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext);
            v64 = v143;
            swift_beginAccess();
            sub_21FA61FE4(v100, v64);
            swift_endAccess();
          }
          v62 = type metadata accessor for PBRawData;
          goto LABEL_6;
        case 7:
          v71 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v134 + 56);
          v71(v138, 1, 1, v140);
          v72 = v130;
          sub_21FA61F74(v64, v130);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v145 + 48))(v72, 1, v146) == 1)
          {
            sub_21FA2D1F8(v72, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext);
          }
          else
          {
            v86 = v72;
            v87 = (uint64_t)v114;
            sub_21FA2D23C(v86, (uint64_t)v114, type metadata accessor for PBPlainText.OneOf_Plaintext);
            sub_21FC5AD94();
            v88 = v87;
            v89 = v125;
            sub_21FA2D23C(v88, v125, type metadata accessor for PBPlainText.OneOf_Plaintext);
            if (swift_getEnumCaseMultiPayload() == 2)
            {
              v90 = v138;
              sub_21FA2D1F8(v138, &qword_25553F5D8, v62);
              v91 = v121;
              sub_21FA2D23C(v89, v121, type metadata accessor for PBRawData);
              v92 = v91;
              v64 = v143;
              v62 = type metadata accessor for PBRawData;
              v63 = (uint64_t)v131;
              sub_21FA2D23C(v92, v90, type metadata accessor for PBRawData);
              v71(v90, 0, 1, v140);
              v93 = (uint64_t)v144;
              goto LABEL_35;
            }
            sub_21FA326EC(v89, type metadata accessor for PBPlainText.OneOf_Plaintext);
          }
          v93 = (uint64_t)v144;
          v90 = v138;
LABEL_35:
          sub_21FA2A08C(&qword_25553E500, v62, (uint64_t)&protocol conformance descriptor for PBRawData);
          v101 = v140;
          sub_21FC5AE60();
          v102 = v62;
          v103 = v127;
          sub_21FA2D280(v90, v127, &qword_25553F5D8, v102);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v134 + 48))(v103, 1, v101) == 1)
          {
            sub_21FA2D1F8(v103, &qword_25553F5D8, v102);
          }
          else
          {
            v104 = v122;
            sub_21FA2D23C(v103, v122, v102);
            sub_21FA2D23C(v104, v93, v102);
            v105 = v146;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v145 + 56))(v93, 0, 1, v105);
            v106 = v132;
            sub_21FA2D280(v93, v132, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext);
            swift_beginAccess();
            sub_21FA61FE4(v106, v64);
            swift_endAccess();
          }
          v62 = v102;
          goto LABEL_6;
        default:
          goto LABEL_6;
      }
    }
  }
  return result;
}

uint64_t PBPlainText.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  type metadata accessor for PBPlainText(0);
  v5 = swift_retain();
  sub_21FA63104(v5, a1, a2);
  result = swift_release();
  if (!v2)
    return sub_21FC5AD04();
  return result;
}

uint64_t sub_21FA63104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int EnumCaseMultiPayload;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;

  v31 = type metadata accessor for PBRawData(0);
  MEMORY[0x24BDAC7A8](v31);
  v32 = (uint64_t)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for PBTypedData(0);
  MEMORY[0x24BDAC7A8](v30);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PBReferences(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D1A0(0, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v30 - v13;
  swift_beginAccess();
  v15 = *(_QWORD *)(a1 + 16);
  v35 = a3;
  if (!v15 || (v16 = *(_BYTE *)(a1 + 24), v33 = v15, v34 = v16, sub_21FA64E10(), result = sub_21FC5AED8(), !v3))
  {
    swift_beginAccess();
    v18 = *(_QWORD *)(a1 + 40);
    v19 = HIBYTE(v18) & 0xF;
    if ((v18 & 0x2000000000000000) == 0)
      v19 = *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFLL;
    if (!v19 || (swift_bridgeObjectRetain(), sub_21FC5AF2C(), result = swift_bridgeObjectRelease(), !v3))
    {
      swift_beginAccess();
      v20 = *(_QWORD *)(a1 + 56);
      v21 = HIBYTE(v20) & 0xF;
      if ((v20 & 0x2000000000000000) == 0)
        v21 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFLL;
      if (!v21 || (swift_bridgeObjectRetain(), sub_21FC5AF2C(), result = swift_bridgeObjectRelease(), !v3))
      {
        swift_beginAccess();
        v22 = *(_QWORD *)(a1 + 72);
        v23 = HIBYTE(v22) & 0xF;
        if ((v22 & 0x2000000000000000) == 0)
          v23 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
        if (!v23 || (swift_bridgeObjectRetain(), sub_21FC5AF2C(), result = swift_bridgeObjectRelease(), !v3))
        {
          v24 = a1
              + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
          swift_beginAccess();
          sub_21FA61F74(v24, (uint64_t)v14);
          v25 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
          result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v14, 1, v25);
          if ((_DWORD)result != 1)
          {
            EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            if (EnumCaseMultiPayload)
            {
              if (EnumCaseMultiPayload == 1)
              {
                v27 = type metadata accessor for PBTypedData;
                sub_21FA2D23C((uint64_t)v14, (uint64_t)v8, type metadata accessor for PBTypedData);
                sub_21FA2A08C(&qword_25553E518, type metadata accessor for PBTypedData, (uint64_t)&protocol conformance descriptor for PBTypedData);
                sub_21FC5AF50();
                v28 = (uint64_t)v8;
              }
              else
              {
                v27 = type metadata accessor for PBRawData;
                v29 = v32;
                sub_21FA2D23C((uint64_t)v14, v32, type metadata accessor for PBRawData);
                sub_21FA2A08C(&qword_25553E500, type metadata accessor for PBRawData, (uint64_t)&protocol conformance descriptor for PBRawData);
                sub_21FC5AF50();
                v28 = v29;
              }
            }
            else
            {
              v27 = type metadata accessor for PBReferences;
              sub_21FA2D23C((uint64_t)v14, (uint64_t)v11, type metadata accessor for PBReferences);
              sub_21FA2A08C(&qword_25553E540, type metadata accessor for PBReferences, (uint64_t)&protocol conformance descriptor for PBReferences);
              sub_21FC5AF50();
              v28 = (uint64_t)v11;
            }
            return sub_21FA326EC(v28, v27);
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_21FA63568(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BOOL8 result;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  uint64_t v35;
  char v36;
  char *v37;

  v4 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA64D98();
  v9 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D1A0(0, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v37 - v16;
  swift_beginAccess();
  v18 = a1[2];
  swift_beginAccess();
  v19 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 24) == 1)
    __asm { BR              X10 }
  if (v18 != v19)
    return 0;
  v37 = v7;
  swift_beginAccess();
  v20 = a1[4];
  v21 = a1[5];
  swift_beginAccess();
  if (v20 == *(_QWORD *)(a2 + 32) && v21 == *(_QWORD *)(a2 + 40)
    || (v22 = sub_21FC5BDF0(), result = 0, (v22 & 1) != 0))
  {
    if ((swift_beginAccess(), v24 = a1[6], v25 = a1[7], swift_beginAccess(), v24 == *(_QWORD *)(a2 + 48))
      && v25 == *(_QWORD *)(a2 + 56)
      || (v26 = sub_21FC5BDF0(), result = 0, (v26 & 1) != 0))
    {
      if ((swift_beginAccess(), v27 = a1[8], v28 = a1[9], swift_beginAccess(), v27 == *(_QWORD *)(a2 + 64))
        && v28 == *(_QWORD *)(a2 + 72)
        || (v29 = sub_21FC5BDF0(), result = 0, (v29 & 1) != 0))
      {
        v30 = (uint64_t)a1
            + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
        swift_beginAccess();
        sub_21FA61F74(v30, (uint64_t)v17);
        v31 = a2
            + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
        swift_beginAccess();
        v32 = (uint64_t)&v11[*(int *)(v9 + 48)];
        sub_21FA61F74((uint64_t)v17, (uint64_t)v11);
        sub_21FA61F74(v31, v32);
        v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
        v34 = v33(v11, 1, v4);
        v35 = (uint64_t)v37;
        if (v34 == 1)
        {
          sub_21FA2D1F8((uint64_t)v17, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext);
          if (v33((char *)v32, 1, v4) == 1)
          {
            sub_21FA2D1F8((uint64_t)v11, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext);
            return 1;
          }
        }
        else
        {
          sub_21FA61F74((uint64_t)v11, (uint64_t)v15);
          if (v33((char *)v32, 1, v4) != 1)
          {
            sub_21FA2D23C(v32, v35, type metadata accessor for PBPlainText.OneOf_Plaintext);
            v36 = _s19HealthRecordsDaemon11PBPlainTextV15OneOf_PlaintextO2eeoiySbAE_AEtFZ_0((uint64_t)v15, v35);
            sub_21FA326EC(v35, type metadata accessor for PBPlainText.OneOf_Plaintext);
            sub_21FA2D1F8((uint64_t)v17, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext);
            sub_21FA326EC((uint64_t)v15, type metadata accessor for PBPlainText.OneOf_Plaintext);
            sub_21FA2D1F8((uint64_t)v11, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext);
            return (v36 & 1) != 0;
          }
          sub_21FA2D1F8((uint64_t)v17, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext);
          sub_21FA326EC((uint64_t)v15, type metadata accessor for PBPlainText.OneOf_Plaintext);
        }
        sub_21FA326EC((uint64_t)v11, (uint64_t (*)(_QWORD))sub_21FA64D98);
        return 0;
      }
    }
  }
  return result;
}

uint64_t PBPlainText.hashValue.getter()
{
  sub_21FC5BE8C();
  type metadata accessor for PBPlainText(0);
  sub_21FA2A08C(&qword_25553F318, type metadata accessor for PBPlainText, (uint64_t)&protocol conformance descriptor for PBPlainText);
  sub_21FC5B598();
  return sub_21FC5BEB0();
}

uint64_t sub_21FA63A48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  sub_21FC5AD10();
  v4 = *(int *)(a1 + 20);
  if (qword_25553D5B8 != -1)
    swift_once();
  *(_QWORD *)(a2 + v4) = qword_25553F300;
  return swift_retain();
}

unint64_t sub_21FA63AA4()
{
  return 0xD000000000000024;
}

uint64_t sub_21FA63AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PBPlainText.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_21FA63AD4(uint64_t a1, uint64_t a2)
{
  return PBPlainText.traverse<A>(visitor:)(a1, a2);
}

uint64_t sub_21FA63AE8()
{
  sub_21FA2A08C(&qword_25553F5C0, type metadata accessor for PBPlainText, (uint64_t)&protocol conformance descriptor for PBPlainText);
  return sub_21FC5AD70();
}

uint64_t sub_21FA63B38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_25553D5B0 != -1)
    swift_once();
  v2 = sub_21FC5AF74();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_25553F2E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_21FA63BA8()
{
  sub_21FA2A08C(&qword_25553F328, type metadata accessor for PBPlainText, (uint64_t)&protocol conformance descriptor for PBPlainText);
  return sub_21FC5AE9C();
}

uint64_t sub_21FA63BE8()
{
  sub_21FA2A08C(&qword_25553F328, type metadata accessor for PBPlainText, (uint64_t)&protocol conformance descriptor for PBPlainText);
  return sub_21FC5AEA8();
}

uint64_t _s19HealthRecordsDaemon11PBPlainTextV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = sub_21FC5AD1C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  v11 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  v12 = *(_QWORD **)(a1 + v11);
  v13 = *(_QWORD *)(a2 + v11);
  if (v12 == (_QWORD *)v13
    || (swift_retain(), swift_retain(), v14 = sub_21FA63568(v12, v13), swift_release(), swift_release(), v14))
  {
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    sub_21FA2A08C(&qword_25553EAB8, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = sub_21FC5B5D4();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t _s19HealthRecordsDaemon11PBPlainTextV15OneOf_PlaintextO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int EnumCaseMultiPayload;
  char v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  uint64_t (*v31)(_QWORD);
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v37 = a1;
  v38 = a2;
  v35 = type metadata accessor for PBRawData(0);
  MEMORY[0x24BDAC7A8](v35);
  v36 = (uint64_t)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for PBTypedData(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PBReferences(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (uint64_t *)((char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (uint64_t *)((char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v35 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (uint64_t *)((char *)&v35 - v16);
  sub_21FA64E54();
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (uint64_t)&v21[*(int *)(v19 + 48)];
  sub_21FA2D120(v37, (uint64_t)v21, type metadata accessor for PBPlainText.OneOf_Plaintext);
  sub_21FA2D120(v38, v22, type metadata accessor for PBPlainText.OneOf_Plaintext);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_21FA2D120((uint64_t)v21, (uint64_t)v17, type metadata accessor for PBPlainText.OneOf_Plaintext);
    if (swift_getEnumCaseMultiPayload())
    {
      v25 = type metadata accessor for PBReferences;
      v26 = (uint64_t)v17;
      goto LABEL_13;
    }
    sub_21FA2D23C(v22, (uint64_t)v8, type metadata accessor for PBReferences);
    if ((sub_21FB10860(*v17, *v8) & 1) != 0)
    {
      sub_21FC5AD1C();
      sub_21FA2A08C(&qword_25553EAB8, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      if ((sub_21FC5B5D4() & 1) != 0)
      {
        v29 = type metadata accessor for PBReferences;
        sub_21FA326EC((uint64_t)v8, type metadata accessor for PBReferences);
        v30 = (uint64_t)v17;
        goto LABEL_17;
      }
    }
    v32 = type metadata accessor for PBReferences;
    sub_21FA326EC((uint64_t)v8, type metadata accessor for PBReferences);
    v33 = (uint64_t)v17;
LABEL_20:
    sub_21FA326EC(v33, v32);
    v24 = 0;
    goto LABEL_21;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_21FA2D120((uint64_t)v21, (uint64_t)v12, type metadata accessor for PBPlainText.OneOf_Plaintext);
    if (swift_getEnumCaseMultiPayload() != 2)
    {
      v25 = type metadata accessor for PBRawData;
      v26 = (uint64_t)v12;
      goto LABEL_13;
    }
    v27 = v36;
    sub_21FA2D23C(v22, v36, type metadata accessor for PBRawData);
    sub_21FB13260(*v12, v12[1]);
    if ((v28 & 1) != 0)
    {
      sub_21FC5AD1C();
      sub_21FA2A08C(&qword_25553EAB8, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      if ((sub_21FC5B5D4() & 1) != 0)
      {
        v29 = type metadata accessor for PBRawData;
        sub_21FA326EC(v27, type metadata accessor for PBRawData);
        v30 = (uint64_t)v12;
LABEL_17:
        sub_21FA326EC(v30, v29);
        v24 = 1;
        goto LABEL_21;
      }
    }
    v32 = type metadata accessor for PBRawData;
    sub_21FA326EC(v27, type metadata accessor for PBRawData);
    v33 = (uint64_t)v12;
    goto LABEL_20;
  }
  sub_21FA2D120((uint64_t)v21, (uint64_t)v15, type metadata accessor for PBPlainText.OneOf_Plaintext);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_21FA2D23C(v22, (uint64_t)v5, type metadata accessor for PBTypedData);
    v24 = sub_21FA43550((uint64_t)v15, (uint64_t)v5);
    sub_21FA326EC((uint64_t)v5, type metadata accessor for PBTypedData);
    sub_21FA326EC((uint64_t)v15, type metadata accessor for PBTypedData);
LABEL_21:
    v31 = type metadata accessor for PBPlainText.OneOf_Plaintext;
    goto LABEL_22;
  }
  v25 = type metadata accessor for PBTypedData;
  v26 = (uint64_t)v15;
LABEL_13:
  sub_21FA326EC(v26, v25);
  v24 = 0;
  v31 = (uint64_t (*)(_QWORD))sub_21FA64E54;
LABEL_22:
  sub_21FA326EC((uint64_t)v21, v31);
  return v24 & 1;
}

uint64_t sub_21FA641EC()
{
  return sub_21FA2A08C(&qword_25553F320, type metadata accessor for PBPlainText, (uint64_t)&protocol conformance descriptor for PBPlainText);
}

uint64_t sub_21FA64218()
{
  return sub_21FA2A08C(&qword_25553F328, type metadata accessor for PBPlainText, (uint64_t)&protocol conformance descriptor for PBPlainText);
}

uint64_t sub_21FA64244()
{
  return sub_21FA2A08C(&qword_25553F318, type metadata accessor for PBPlainText, (uint64_t)&protocol conformance descriptor for PBPlainText);
}

uint64_t sub_21FA64270()
{
  return sub_21FA2A08C(&qword_25553F330, type metadata accessor for PBPlainText, (uint64_t)&protocol conformance descriptor for PBPlainText);
}

uint64_t sub_21FA6429C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PBPlainText(0) + 20));
  result = swift_beginAccess();
  v5 = *(_BYTE *)(v3 + 24);
  *(_QWORD *)a2 = *(_QWORD *)(v3 + 16);
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_21FA6431C@<X0>(_QWORD *a1@<X8>)
{
  return PBPlainText.references.getter(a1);
}

uint64_t sub_21FA6433C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA392DC(a1, a2, a3, a4, type metadata accessor for PBReferences, (uint64_t (*)(char *))PBPlainText.references.setter);
}

uint64_t sub_21FA64360@<X0>(uint64_t a1@<X8>)
{
  return PBPlainText.data.getter(a1);
}

uint64_t sub_21FA64380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA392DC(a1, a2, a3, a4, type metadata accessor for PBTypedData, (uint64_t (*)(char *))PBPlainText.data.setter);
}

uint64_t sub_21FA643A4@<X0>(uint64_t *a1@<X8>)
{
  return PBPlainText.rawData.getter(a1);
}

uint64_t sub_21FA643C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA392DC(a1, a2, a3, a4, type metadata accessor for PBRawData, (uint64_t (*)(char *))PBPlainText.rawData.setter);
}

uint64_t getEnumTagSinglePayload for PBPlainText()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA643F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_21FC5AD1C();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for PBPlainText()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA6447C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_21FC5AD1C();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PBPlainText.OneOf_Plaintext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v10 = *a2;
      v11 = a2[1];
      sub_21FA32314(*a2, v11);
      *a1 = v10;
      a1[1] = v11;
      v12 = *(int *)(type metadata accessor for PBRawData(0) + 20);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = sub_21FC5AD1C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = sub_21FC5AD1C();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = type metadata accessor for PBTypedData(0);
      *(uint64_t *)((char *)a1 + *(int *)(v8 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v8 + 20));
      swift_retain();
    }
    else
    {
      *a1 = *a2;
      v16 = *(int *)(type metadata accessor for PBReferences(0) + 20);
      v17 = (char *)a1 + v16;
      v18 = (char *)a2 + v16;
      v19 = sub_21FC5AD1C();
      v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
      swift_bridgeObjectRetain();
      v20(v17, v18, v19);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for PBPlainText.OneOf_Plaintext(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    sub_21FA2D770(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    v3 = type metadata accessor for PBRawData(0);
LABEL_6:
    v4 = a1 + *(int *)(v3 + 20);
    v5 = sub_21FC5AD1C();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    swift_bridgeObjectRelease();
    v3 = type metadata accessor for PBReferences(0);
    goto LABEL_6;
  }
  v6 = sub_21FC5AD1C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  type metadata accessor for PBTypedData(0);
  return swift_release();
}

uint64_t *initializeWithCopy for PBPlainText.OneOf_Plaintext(uint64_t *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v7 = *a2;
    v8 = a2[1];
    sub_21FA32314(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = *(int *)(type metadata accessor for PBRawData(0) + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_21FC5AD1C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v5 = sub_21FC5AD1C();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    v6 = type metadata accessor for PBTypedData(0);
    *(uint64_t *)((char *)a1 + *(int *)(v6 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 20));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v13 = *(int *)(type metadata accessor for PBReferences(0) + 20);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = sub_21FC5AD1C();
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    swift_bridgeObjectRetain();
    v17(v14, v15, v16);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for PBPlainText.OneOf_Plaintext(uint64_t *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);

  if (a1 != a2)
  {
    sub_21FA326EC((uint64_t)a1, type metadata accessor for PBPlainText.OneOf_Plaintext);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v7 = *a2;
      v8 = a2[1];
      sub_21FA32314(*a2, v8);
      *a1 = v7;
      a1[1] = v8;
      v9 = *(int *)(type metadata accessor for PBRawData(0) + 20);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = sub_21FC5AD1C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v5 = sub_21FC5AD1C();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = type metadata accessor for PBTypedData(0);
      *(uint64_t *)((char *)a1 + *(int *)(v6 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 20));
      swift_retain();
    }
    else
    {
      *a1 = *a2;
      v13 = *(int *)(type metadata accessor for PBReferences(0) + 20);
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = sub_21FC5AD1C();
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      swift_bridgeObjectRetain();
      v17(v14, v15, v16);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for PBPlainText.OneOf_Plaintext(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    v7 = *(int *)(type metadata accessor for PBRawData(0) + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_21FC5AD1C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v5 = sub_21FC5AD1C();
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    v6 = type metadata accessor for PBTypedData(0);
    *(_QWORD *)((char *)a1 + *(int *)(v6 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v6 + 20));
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v11 = *(int *)(type metadata accessor for PBReferences(0) + 20);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = sub_21FC5AD1C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for PBPlainText.OneOf_Plaintext(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sub_21FA326EC((uint64_t)a1, type metadata accessor for PBPlainText.OneOf_Plaintext);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      v7 = *(int *)(type metadata accessor for PBRawData(0) + 20);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = sub_21FC5AD1C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v5 = sub_21FC5AD1C();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
      v6 = type metadata accessor for PBTypedData(0);
      *(_QWORD *)((char *)a1 + *(int *)(v6 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v6 + 20));
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v11 = *(int *)(type metadata accessor for PBReferences(0) + 20);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = sub_21FC5AD1C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_21FA64C58()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for PBReferences(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for PBTypedData(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for PBRawData(319);
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_21FA64CF4()
{
  return type metadata accessor for PBPlainText._StorageClass(0);
}

void sub_21FA64CFC()
{
  unint64_t v0;

  sub_21FA2D1A0(319, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void sub_21FA64D98()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25553F5C8)
  {
    sub_21FA2D1A0(255, &qword_25553F310, type metadata accessor for PBPlainText.OneOf_Plaintext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25553F5C8);
  }
}

unint64_t sub_21FA64E10()
{
  unint64_t result;

  result = qword_25553F5D0;
  if (!qword_25553F5D0)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBNodeType, &type metadata for PBNodeType);
    atomic_store(result, (unint64_t *)&qword_25553F5D0);
  }
  return result;
}

void sub_21FA64E54()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25553F5E8)
  {
    type metadata accessor for PBPlainText.OneOf_Plaintext(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25553F5E8);
  }
}

uint64_t sub_21FA64EB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t *a11)
{
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v33[4];
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v41 = a7;
  v42 = a8;
  v40 = a6;
  v39 = type metadata accessor for PBDateRange(0);
  v17 = MEMORY[0x24BDAC7A8](v39);
  v19 = &v33[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v17);
  v21 = &v33[-v20];
  v37 = *a5;
  v36 = *((unsigned __int8 *)a5 + 8);
  v35 = *a11;
  v34 = *((unsigned __int8 *)a11 + 8);
  v38 = *((unsigned __int8 *)a11 + 9);
  sub_21FC5AD10();
  v22 = *(int *)(type metadata accessor for PBReference(0) + 20);
  if (qword_25553D5A0 != -1)
    swift_once();
  *(_QWORD *)(a9 + v22) = qword_25553E470;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    v23 = (_QWORD *)swift_retain();
    *(_QWORD *)(a9 + v22) = sub_21FA41010(v23);
    swift_release();
  }
  v24 = *(_QWORD *)(a9 + v22);
  swift_beginAccess();
  *(_QWORD *)(v24 + 16) = a1;
  *(_QWORD *)(v24 + 24) = a2;
  swift_bridgeObjectRelease();
  sub_21FA32314(a3, a4);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    v25 = (_QWORD *)swift_retain();
    *(_QWORD *)(a9 + v22) = sub_21FA41010(v25);
    swift_release();
  }
  v26 = *(_QWORD *)(a9 + v22);
  swift_beginAccess();
  v27 = *(_QWORD *)(v26 + 32);
  v28 = *(_QWORD *)(v26 + 40);
  *(_QWORD *)(v26 + 32) = a3;
  *(_QWORD *)(v26 + 40) = a4;
  sub_21FA2D770(v27, v28);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    v29 = (_QWORD *)swift_retain();
    *(_QWORD *)(a9 + v22) = sub_21FA41010(v29);
    swift_release();
  }
  v30 = *(_QWORD *)(a9 + v22)
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
  swift_beginAccess();
  *(_QWORD *)v30 = v37;
  *(_BYTE *)(v30 + 8) = v36;
  *((_QWORD *)v19 + 4) = 0;
  v19[40] = 1;
  sub_21FC5AD10();
  v31 = v41;
  *(_QWORD *)v19 = v40;
  *((_QWORD *)v19 + 1) = v31;
  *((_QWORD *)v19 + 2) = v42;
  *((_QWORD *)v19 + 3) = a10;
  if ((v38 & 1) == 0)
  {
    *((_QWORD *)v19 + 4) = v35;
    v19[40] = v34 & 1;
  }
  sub_21FA651B0((uint64_t)v19, (uint64_t)v21);
  PBReference.dateRange.setter((uint64_t)v21);
  return sub_21FA2D770(a3, a4);
}

uint64_t sub_21FA651B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PBDateRange(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FA651F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  unint64_t v57;

  v46 = sub_21FC5AAAC();
  v43 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = *(_QWORD *)a7;
  v18 = *(_BYTE *)(a7 + 8);
  *a8 = a1;
  v19 = type metadata accessor for ClinicalSharingCategoryNodeInfo();
  v47 = a2;
  v48 = v19;
  v20 = *(int *)(v19 + 24);
  v52 = a8;
  v21 = (uint64_t *)((char *)a8 + v20);
  *v21 = a2;
  v21[1] = a3;
  v21[2] = a4;
  v21[3] = a5;
  swift_bridgeObjectRetain();
  v49 = a3;
  swift_bridgeObjectRetain();
  v50 = a4;
  v51 = a5;
  sub_21FA32314(a4, a5);
  v53 = a6;
  sub_21FC5B400();
  v44 = v57;
  v45 = v56;
  v54 = v42;
  v55 = v18;
  v56 = 0;
  LOWORD(v57) = 256;
  sub_21FC5AA34();
  if (qword_25553DC90 != -1)
    swift_once();
  v22 = (void *)qword_255572F60;
  v23 = (void *)sub_21FC5AA64();
  v24 = objc_msgSend(v22, sel_stringFromDate_, v23);

  v25 = sub_21FC5B604();
  v27 = v26;

  v28 = *(void (**)(char *, uint64_t))(v43 + 8);
  v29 = v46;
  v28(v17, v46);
  sub_21FC5AA40();
  v30 = (void *)qword_255572F60;
  v31 = (void *)sub_21FC5AA64();
  v32 = objc_msgSend(v30, sel_stringFromDate_, v31);

  v33 = sub_21FC5B604();
  v35 = v34;

  v28(v17, v29);
  v36 = v48;
  v37 = v52;
  sub_21FA64EB4(v47, v49, v45, v44, &v54, v25, v27, v33, (uint64_t)v52 + *(int *)(v48 + 20), v35, &v56);
  v38 = sub_21FAC6A5C(a1);
  swift_bridgeObjectRelease();
  sub_21FA2D770(v50, v51);
  v39 = sub_21FC5B418();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v53, v39);
  *(uint64_t *)((char *)v37 + *(int *)(v36 + 28)) = v38;
  return result;
}

uint64_t type metadata accessor for ClinicalSharingCategoryNodeInfo()
{
  uint64_t result;

  result = qword_25553F648;
  if (!qword_25553F648)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t *sub_21FA654D4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_21FC5AD1C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = type metadata accessor for PBReference(0);
    *(_QWORD *)&v9[*(int *)(v13 + 20)] = *(_QWORD *)&v10[*(int *)(v13 + 20)];
    v14 = a3[6];
    v15 = (uint64_t *)((char *)v7 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = v16[2];
    v19 = v16[3];
    swift_retain();
    swift_bridgeObjectRetain();
    sub_21FA32314(v18, v19);
    v15[2] = v18;
    v15[3] = v19;
    *(uint64_t *)((char *)v7 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_21FA655D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_21FC5AD1C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  type metadata accessor for PBReference(0);
  swift_release();
  v6 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  sub_21FA2D770(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
  return swift_bridgeObjectRelease();
}

_QWORD *sub_21FA6565C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21FC5AD1C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = type metadata accessor for PBReference(0);
  *(_QWORD *)&v7[*(int *)(v11 + 20)] = *(_QWORD *)&v8[*(int *)(v11 + 20)];
  v12 = a3[6];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = v14[2];
  v17 = v14[3];
  swift_retain();
  swift_bridgeObjectRetain();
  sub_21FA32314(v16, v17);
  v13[2] = v16;
  v13[3] = v17;
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_21FA65734(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21FC5AD1C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = type metadata accessor for PBReference(0);
  *(_QWORD *)&v7[*(int *)(v10 + 20)] = *(_QWORD *)&v8[*(int *)(v10 + 20)];
  swift_retain();
  swift_release();
  v11 = a3[6];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (char *)a2 + v11;
  *v12 = *(_QWORD *)((char *)a2 + v11);
  v12[1] = *(_QWORD *)((char *)a2 + v11 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = *((_QWORD *)v13 + 2);
  v15 = *((_QWORD *)v13 + 3);
  sub_21FA32314(v14, v15);
  v16 = v12[2];
  v17 = v12[3];
  v12[2] = v14;
  v12[3] = v15;
  sub_21FA2D770(v16, v17);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *sub_21FA65838(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21FC5AD1C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = type metadata accessor for PBReference(0);
  *(_QWORD *)&v7[*(int *)(v10 + 20)] = *(_QWORD *)&v8[*(int *)(v10 + 20)];
  v11 = a3[6];
  v12 = a3[7];
  v13 = (_OWORD *)((char *)a1 + v11);
  v14 = (_OWORD *)((char *)a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  return a1;
}

_QWORD *sub_21FA658D4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21FC5AD1C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = type metadata accessor for PBReference(0);
  *(_QWORD *)&v7[*(int *)(v10 + 20)] = *(_QWORD *)&v8[*(int *)(v10 + 20)];
  swift_release();
  v11 = a3[6];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (char *)a2 + v11;
  v14 = *(_QWORD *)((char *)a2 + v11 + 8);
  *v12 = *(_QWORD *)((char *)a2 + v11);
  v12[1] = v14;
  swift_bridgeObjectRelease();
  v15 = v12[2];
  v16 = v12[3];
  *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
  sub_21FA2D770(v15, v16);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21FA659A4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA659B0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for PBReference(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_21FA65A2C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_21FA65A38(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for PBReference(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_21FA65AAC()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PBReference(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21FA65B30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(char *, uint64_t, uint64_t);
  uint64_t v66;
  char *v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;

  v119 = a1;
  v84 = type metadata accessor for PBActiveMedications(0);
  MEMORY[0x24BDAC7A8](v84);
  v114 = (char *)v69 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for PBMedicationTrackingSchedules(0);
  MEMORY[0x24BDAC7A8](v83);
  v113 = (char *)v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for PBMedicationTrackingDoseEvents(0);
  MEMORY[0x24BDAC7A8](v82);
  v112 = (char *)v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for PBMedicationTracking(0);
  v69[4] = *(_QWORD *)(v118 - 8);
  MEMORY[0x24BDAC7A8](v118);
  v117 = (char *)v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for PBMedicationTrackings(0);
  MEMORY[0x24BDAC7A8](v81);
  v115 = (char *)v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for PBHistogramSeries(0);
  MEMORY[0x24BDAC7A8](v80);
  v111 = (char *)v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for PBSleepSeries(0);
  MEMORY[0x24BDAC7A8](v79);
  v109 = (char *)v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for PBSleepSummary(0);
  MEMORY[0x24BDAC7A8](v78);
  v108 = (char *)v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for PBPatientMeta(0);
  MEMORY[0x24BDAC7A8](v77);
  v110 = (char *)v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for PBActivitySummarySeries(0);
  MEMORY[0x24BDAC7A8](v76);
  v107 = (char *)v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2ED54(0, (unint64_t *)&qword_25406AAE8, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v12);
  v86 = (char *)v69 - v13;
  v14 = type metadata accessor for PBECGMeasurement(0);
  MEMORY[0x24BDAC7A8](v14);
  v106 = (char *)v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for PBCycleTracking(0);
  MEMORY[0x24BDAC7A8](v75);
  v105 = (char *)v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for PBECGs(0);
  MEMORY[0x24BDAC7A8](v74);
  v103 = (char *)v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for PBAllClinicalRecords(0);
  MEMORY[0x24BDAC7A8](v73);
  v104 = (char *)v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for PBCharacteristics(0);
  MEMORY[0x24BDAC7A8](v72);
  v102 = (char *)v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for PBWorkout(0);
  MEMORY[0x24BDAC7A8](v71);
  v101 = (char *)v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for PBCategorySeries(0);
  MEMORY[0x24BDAC7A8](v70);
  v100 = (char *)v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for PBTimeSeries(0);
  MEMORY[0x24BDAC7A8](v85);
  v99 = (char *)v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2ED54(0, &qword_25553E498, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v98 = (char *)v69 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v97 = (char *)v69 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v96 = (char *)v69 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v95 = (char *)v69 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v94 = (char *)v69 - v33;
  v34 = MEMORY[0x24BDAC7A8](v32);
  v93 = (char *)v69 - v35;
  v36 = MEMORY[0x24BDAC7A8](v34);
  v92 = (char *)v69 - v37;
  v38 = MEMORY[0x24BDAC7A8](v36);
  v91 = (char *)v69 - v39;
  v40 = MEMORY[0x24BDAC7A8](v38);
  v90 = (char *)v69 - v41;
  v42 = MEMORY[0x24BDAC7A8](v40);
  v89 = (char *)v69 - v43;
  v44 = MEMORY[0x24BDAC7A8](v42);
  v88 = (char *)v69 - v45;
  v46 = MEMORY[0x24BDAC7A8](v44);
  v87 = (char *)v69 - v47;
  v48 = MEMORY[0x24BDAC7A8](v46);
  v49 = MEMORY[0x24BDAC7A8](v48);
  v50 = MEMORY[0x24BDAC7A8](v49);
  v51 = MEMORY[0x24BDAC7A8](v50);
  MEMORY[0x24BDAC7A8](v51);
  v53 = (char *)v69 - v52;
  v54 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  v55 = *(_QWORD *)(v54 - 8);
  v56 = MEMORY[0x24BDAC7A8](v54);
  v58 = (char *)v69 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v56);
  v60 = (char *)v69 - v59;
  v61 = *(int *)(type metadata accessor for PBTypedData(0) + 20);
  v116 = v1;
  v62 = *(_QWORD *)(v1 + v61);
  v63 = v54;
  v64 = v62
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_21FA6A498(v64, (uint64_t)v53, &qword_25553E498, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
  v65 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
  if (v65(v53, 1, v63) != 1)
  {
    v69[3] = v65;
    sub_21FA2D23C((uint64_t)v53, (uint64_t)v60, type metadata accessor for PBTypedData.OneOf_Raw);
    sub_21FA2D120((uint64_t)v60, (uint64_t)v58, type metadata accessor for PBTypedData.OneOf_Raw);
    v68 = (char *)&loc_21FA663F0 + *((int *)qword_21FA67780 + swift_getEnumCaseMultiPayload());
    __asm { BR              X10 }
  }
  sub_21FA2EDA0((uint64_t)v53, &qword_25553E498, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
  v66 = sub_21FC5AAAC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v119, 1, 1, v66);
}

uint64_t sub_21FA677C4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_21FA2ED54(0, &qword_25553E0F8, (void (*)(uint64_t))type metadata accessor for PBDateRange);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v26 - v5;
  v7 = type metadata accessor for PBDateRange(0);
  v31 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for PBCategorySeries.Event(0);
  v10 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (uint64_t *)(*(_QWORD *)(a1 + *(int *)(type metadata accessor for PBCategorySeries(0) + 20))
                  + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBCategorySeriesP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__events);
  swift_beginAccess();
  v14 = *v13;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = MEMORY[0x24BEE4AF8];
  if (v15)
  {
    v27 = a2;
    v32 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_21FC01924(0, v15, 0);
    v17 = *(unsigned __int8 *)(v10 + 80);
    v26[1] = v14;
    v18 = v14 + ((v17 + 32) & ~v17);
    v28 = *(_QWORD *)(v10 + 72);
    v29 = v7;
    do
    {
      sub_21FA2D120(v18, (uint64_t)v12, type metadata accessor for PBCategorySeries.Event);
      v19 = *(_QWORD *)&v12[*(int *)(v30 + 20)]
          + OBJC_IVAR____TtCVV19HealthRecordsDaemon16PBCategorySeries5EventP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__recordedTime;
      swift_beginAccess();
      sub_21FA6A498(v19, (uint64_t)v6, &qword_25553E0F8, (void (*)(uint64_t))type metadata accessor for PBDateRange);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v6, 1, v7) == 1)
      {
        *(_QWORD *)v9 = 0;
        *((_QWORD *)v9 + 1) = 0xE000000000000000;
        *((_QWORD *)v9 + 2) = 0;
        *((_QWORD *)v9 + 3) = 0xE000000000000000;
        *((_QWORD *)v9 + 4) = 0;
        v9[40] = 1;
        sub_21FC5AD10();
        sub_21FA2EDA0((uint64_t)v6, &qword_25553E0F8, (void (*)(uint64_t))type metadata accessor for PBDateRange);
      }
      else
      {
        sub_21FA2D23C((uint64_t)v6, (uint64_t)v9, type metadata accessor for PBDateRange);
      }
      v20 = *((_QWORD *)v9 + 2);
      v21 = *((_QWORD *)v9 + 3);
      swift_bridgeObjectRetain();
      sub_21FA326EC((uint64_t)v9, type metadata accessor for PBDateRange);
      sub_21FA326EC((uint64_t)v12, type metadata accessor for PBCategorySeries.Event);
      v16 = v32;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21FC01924(0, *(_QWORD *)(v16 + 16) + 1, 1);
        v16 = v32;
      }
      v23 = *(_QWORD *)(v16 + 16);
      v22 = *(_QWORD *)(v16 + 24);
      if (v23 >= v22 >> 1)
      {
        sub_21FC01924(v22 > 1, v23 + 1, 1);
        v16 = v32;
      }
      *(_QWORD *)(v16 + 16) = v23 + 1;
      v24 = v16 + 16 * v23;
      *(_QWORD *)(v24 + 32) = v20;
      *(_QWORD *)(v24 + 40) = v21;
      v7 = v29;
      v18 += v28;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    a2 = v27;
  }
  sub_21FA68258(v16, a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_21FA67ADC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  sub_21FA2ED54(0, (unint64_t *)&qword_25406AAE8, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v21 - v5;
  sub_21FA2ED54(0, &qword_25553E0F8, (void (*)(uint64_t))type metadata accessor for PBDateRange);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v21 - v8;
  v10 = type metadata accessor for PBDateRange(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PBWorkout(0) + 20))
      + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBWorkoutP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__dateRange;
  swift_beginAccess();
  sub_21FA6A498(v14, (uint64_t)v9, &qword_25553E0F8, (void (*)(uint64_t))type metadata accessor for PBDateRange);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0xE000000000000000;
    *((_QWORD *)v13 + 2) = 0;
    *((_QWORD *)v13 + 3) = 0xE000000000000000;
    *((_QWORD *)v13 + 4) = 0;
    v13[40] = 1;
    sub_21FC5AD10();
    sub_21FA2EDA0((uint64_t)v9, &qword_25553E0F8, (void (*)(uint64_t))type metadata accessor for PBDateRange);
  }
  else
  {
    sub_21FA2D23C((uint64_t)v9, (uint64_t)v13, type metadata accessor for PBDateRange);
  }
  swift_bridgeObjectRetain();
  sub_21FA326EC((uint64_t)v13, type metadata accessor for PBDateRange);
  if (qword_25553DC90 != -1)
    swift_once();
  v15 = (void *)qword_255572F60;
  v16 = (void *)sub_21FC5B5E0();
  v17 = objc_msgSend(v15, sel_dateFromString_, v16);

  if (v17)
  {
    sub_21FC5AA94();

    v18 = sub_21FC5AAAC();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v6, 0, 1, v18);
  }
  else
  {
    v19 = sub_21FC5AAAC();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v6, 1, 1, v19);
  }
  sub_21FA6A41C((uint64_t)v6, a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_21FA67D84@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t (*a3)(_QWORD)@<X2>, _QWORD *a4@<X3>, char *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v10 = a2(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v27 - v12;
  v14 = (uint64_t *)(*(_QWORD *)(a1 + *(int *)(a3(0) + 20)) + *a4);
  swift_beginAccess();
  v15 = *v14;
  v16 = *(_QWORD *)(*v14 + 16);
  v17 = MEMORY[0x24BEE4AF8];
  if (v16)
  {
    v28 = a5;
    v29 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_21FC01924(0, v16, 0);
    v18 = *(unsigned __int8 *)(v11 + 80);
    v27 = v15;
    v19 = v15 + ((v18 + 32) & ~v18);
    v20 = *(_QWORD *)(v11 + 72);
    v17 = v29;
    do
    {
      sub_21FA2D120(v19, (uint64_t)v13, a2);
      v21 = *((_QWORD *)v13 + 3);
      v22 = *((_QWORD *)v13 + 4);
      swift_bridgeObjectRetain();
      sub_21FA326EC((uint64_t)v13, a2);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21FC01924(0, *(_QWORD *)(v17 + 16) + 1, 1);
        v17 = v29;
      }
      v24 = *(_QWORD *)(v17 + 16);
      v23 = *(_QWORD *)(v17 + 24);
      if (v24 >= v23 >> 1)
      {
        sub_21FC01924(v23 > 1, v24 + 1, 1);
        v17 = v29;
      }
      *(_QWORD *)(v17 + 16) = v24 + 1;
      v25 = v17 + 16 * v24;
      *(_QWORD *)(v25 + 32) = v21;
      *(_QWORD *)(v25 + 40) = v22;
      v19 += v20;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
    a5 = v28;
  }
  sub_21FA68258(v17, a5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_21FA67F40@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  char *v23;
  uint64_t v24;

  v6 = a2(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (_QWORD *)((char *)v22 - v8);
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 16);
  v12 = MEMORY[0x24BEE4AF8];
  if (v11)
  {
    v23 = a3;
    v24 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_21FC01924(0, v11, 0);
    v13 = *(unsigned __int8 *)(v7 + 80);
    v22[1] = v10;
    v14 = v10 + ((v13 + 32) & ~v13);
    v15 = *(_QWORD *)(v7 + 72);
    v12 = v24;
    do
    {
      sub_21FA2D120(v14, (uint64_t)v9, a2);
      v16 = *v9;
      v17 = v9[1];
      swift_bridgeObjectRetain();
      sub_21FA326EC((uint64_t)v9, a2);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21FC01924(0, *(_QWORD *)(v12 + 16) + 1, 1);
        v12 = v24;
      }
      v19 = *(_QWORD *)(v12 + 16);
      v18 = *(_QWORD *)(v12 + 24);
      if (v19 >= v18 >> 1)
      {
        sub_21FC01924(v18 > 1, v19 + 1, 1);
        v12 = v24;
      }
      *(_QWORD *)(v12 + 16) = v19 + 1;
      v20 = v12 + 16 * v19;
      *(_QWORD *)(v20 + 32) = v16;
      *(_QWORD *)(v20 + 40) = v17;
      v14 += v15;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
    a3 = v23;
  }
  sub_21FA68258(v12, a3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_21FA680C8@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  char *v21;
  uint64_t v22;

  v4 = type metadata accessor for PBMedicationTrackingDoseEvent(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v9 = *(_QWORD *)(*a1 + 16);
  v10 = MEMORY[0x24BEE4AF8];
  if (v9)
  {
    v21 = a2;
    v22 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_21FC01924(0, v9, 0);
    v11 = *(unsigned __int8 *)(v5 + 80);
    v20[1] = v8;
    v12 = v8 + ((v11 + 32) & ~v11);
    v13 = *(_QWORD *)(v5 + 72);
    v10 = v22;
    do
    {
      sub_21FA2D120(v12, (uint64_t)v7, type metadata accessor for PBMedicationTrackingDoseEvent);
      v14 = *((_QWORD *)v7 + 11);
      v15 = *((_QWORD *)v7 + 12);
      swift_bridgeObjectRetain();
      sub_21FA326EC((uint64_t)v7, type metadata accessor for PBMedicationTrackingDoseEvent);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21FC01924(0, *(_QWORD *)(v10 + 16) + 1, 1);
        v10 = v22;
      }
      v17 = *(_QWORD *)(v10 + 16);
      v16 = *(_QWORD *)(v10 + 24);
      if (v17 >= v16 >> 1)
      {
        sub_21FC01924(v16 > 1, v17 + 1, 1);
        v10 = v22;
      }
      *(_QWORD *)(v10 + 16) = v17 + 1;
      v18 = v10 + 16 * v17;
      *(_QWORD *)(v18 + 32) = v14;
      *(_QWORD *)(v18 + 40) = v15;
      v12 += v13;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
    a2 = v21;
  }
  sub_21FA68258(v10, a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_21FA68258@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void (*v43)(uint64_t);
  uint64_t v44;
  char *v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void (*v55)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v56)(uint64_t, uint64_t, uint64_t);
  void (*v57)(char *, uint64_t, uint64_t);
  uint64_t result;
  char *v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  void (*v79)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;

  v69 = a2;
  v3 = sub_21FC5AAAC();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v72 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v77 = (char *)&v68 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v74 = (char *)&v68 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v73 = (char *)&v68 - v11;
  sub_21FA2ED54(0, (unint64_t *)&qword_25406AAE8, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v68 - v17;
  v19 = MEMORY[0x24BDAC7A8](v16);
  v76 = (char *)&v68 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v70 = (char *)&v68 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v68 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v68 - v26;
  v28 = *(_QWORD *)(a1 + 16);
  v29 = MEMORY[0x24BEE4AF8];
  v79 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3;
  v80 = v4;
  v78 = v18;
  v71 = v30;
  if (v28)
  {
    v81 = MEMORY[0x24BEE4AF8];
    sub_21FC01998(0, v28, 0);
    v29 = v81;
    v31 = a1 + 40;
    do
    {
      v32 = qword_25553DC90;
      swift_bridgeObjectRetain();
      if (v32 != -1)
        swift_once();
      v33 = (void *)qword_255572F60;
      v34 = (void *)sub_21FC5B5E0();
      v35 = objc_msgSend(v33, sel_dateFromString_, v34);

      if (v35)
      {
        sub_21FC5AA94();

        v36 = 0;
      }
      else
      {
        v36 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, _QWORD))(v80 + 56))(v25, v36, 1, v79);
      sub_21FA6A41C((uint64_t)v25, (uint64_t)v27);
      swift_bridgeObjectRelease();
      v81 = v29;
      v38 = *(_QWORD *)(v29 + 16);
      v37 = *(_QWORD *)(v29 + 24);
      v18 = v78;
      if (v38 >= v37 >> 1)
      {
        sub_21FC01998(v37 > 1, v38 + 1, 1);
        v29 = v81;
      }
      v31 += 16;
      *(_QWORD *)(v29 + 16) = v38 + 1;
      sub_21FA6A41C((uint64_t)v27, v29+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v38);
      --v28;
    }
    while (v28);
    v3 = (uint64_t)v79;
    v4 = v80;
  }
  v39 = v72;
  v40 = *(_QWORD *)(v29 + 16);
  if (v40)
  {
    v41 = v29 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v75 = *(_QWORD *)(v14 + 72);
    swift_bridgeObjectRetain();
    v42 = MEMORY[0x24BEE4AF8];
    v43 = (void (*)(uint64_t))MEMORY[0x24BDCE900];
    v44 = (uint64_t)v76;
    do
    {
      sub_21FA6A498(v41, v44, (unint64_t *)&qword_25406AAE8, v43);
      sub_21FA6A41C(v44, (uint64_t)v18);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v18, 1, v3) == 1)
      {
        sub_21FA2EDA0((uint64_t)v18, (unint64_t *)&qword_25406AAE8, v43);
      }
      else
      {
        v45 = v18;
        v46 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
        v47 = v74;
        v46(v74, v45, v3);
        v46(v77, v47, v3);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v42 = sub_21FA7DE84(0, *(_QWORD *)(v42 + 16) + 1, 1, v42);
        v49 = *(_QWORD *)(v42 + 16);
        v48 = *(_QWORD *)(v42 + 24);
        if (v49 >= v48 >> 1)
          v42 = sub_21FA7DE84(v48 > 1, v49 + 1, 1, v42);
        *(_QWORD *)(v42 + 16) = v49 + 1;
        v4 = v80;
        v50 = v42
            + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
            + *(_QWORD *)(v80 + 72) * v49;
        v3 = (uint64_t)v79;
        v46((char *)v50, v77, (uint64_t)v79);
        v18 = v78;
      }
      v41 += v75;
      --v40;
      v43 = (void (*)(uint64_t))MEMORY[0x24BDCE900];
    }
    while (v40);
    swift_bridgeObjectRelease_n();
    v39 = v72;
  }
  else
  {
    swift_bridgeObjectRelease();
    v42 = MEMORY[0x24BEE4AF8];
  }
  v51 = (uint64_t)v70;
  v52 = v71;
  v53 = *(_QWORD *)(v42 + 16);
  if (!v53)
  {
    v55 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v55(v70, 1, 1, v3);
    goto LABEL_30;
  }
  v54 = *(char **)(v4 + 16);
  v78 = (char *)(v42 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
  ((void (*)(char *))v54)(v70);
  v55 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v55((char *)v51, 0, 1, v3);
  v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v56(v51, 1, v3) == 1)
  {
LABEL_30:
    v60 = v69;
    sub_21FA2EDA0(v51, (unint64_t *)&qword_25406AAE8, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    v55(v60, 1, 1, v3);
    return swift_bridgeObjectRelease();
  }
  v77 = v54;
  v79 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v55;
  v57 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
  v57(v73, v51, v3);
  result = swift_bridgeObjectRetain();
  if (v53 == 1)
  {
LABEL_27:
    v79(v52, 1, 1, v3);
LABEL_28:
    swift_bridgeObjectRelease();
    sub_21FA2EDA0(v52, (unint64_t *)&qword_25406AAE8, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    v59 = v69;
    v57(v69, (uint64_t)v73, v3);
    v79((uint64_t)v59, 0, 1, v3);
    return swift_bridgeObjectRelease();
  }
  v61 = 1;
  v62 = v80;
  while (v61 < *(_QWORD *)(v42 + 16))
  {
    ((void (*)(uint64_t, char *, uint64_t))v77)(v52, &v78[*(_QWORD *)(v62 + 72) * v61], v3);
    v79(v52, 0, 1, v3);
    if (v56(v52, 1, v3) == 1)
      goto LABEL_28;
    v63 = v52;
    v57(v39, v52, v3);
    v64 = v39;
    v65 = v73;
    v66 = sub_21FC5AA70();
    v67 = *(void (**)(char *, uint64_t))(v62 + 8);
    if ((v66 & 1) != 0)
    {
      v67(v65, v3);
      result = ((uint64_t (*)(char *, char *, uint64_t))v57)(v65, v64, v3);
    }
    else
    {
      result = ((uint64_t (*)(char *, uint64_t))v67)(v64, v3);
    }
    v39 = v64;
    ++v61;
    v52 = v63;
    if (v53 == v61)
      goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t sub_21FA68930@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v61;
  _QWORD v62[8];
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;

  v91 = a2;
  v82 = type metadata accessor for PBHKMedicationRecord(0);
  MEMORY[0x24BDAC7A8](v82);
  v89 = (char *)v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for PBHKProcedureRecord(0);
  MEMORY[0x24BDAC7A8](v80);
  v88 = (char *)v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62[0] = type metadata accessor for PBHKAccountOwner(0);
  MEMORY[0x24BDAC7A8](v62[0]);
  v79 = (char *)v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for PBHKDiagnosticTestReport(0);
  MEMORY[0x24BDAC7A8](v77);
  v87 = (char *)v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for PBHKDiagnosticTestResult(0);
  MEMORY[0x24BDAC7A8](v74);
  v86 = (char *)v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for PBHKMedicationOrder(0);
  MEMORY[0x24BDAC7A8](v70);
  v85 = (char *)v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for PBHKMedicationDispenseRecord(0);
  MEMORY[0x24BDAC7A8](v67);
  v84 = (char *)v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for PBHKVaccinationRecord(0);
  MEMORY[0x24BDAC7A8](v64);
  v83 = (char *)v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for PBHKConditionRecord(0);
  MEMORY[0x24BDAC7A8](v90);
  v81 = (char *)v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2ED54(0, (unint64_t *)&qword_25406AAE8, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v78 = (char *)v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v76 = (char *)v62 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v75 = (char *)v62 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v73 = (char *)v62 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v72 = (char *)v62 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v71 = (char *)v62 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v69 = (char *)v62 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v68 = (char *)v62 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v66 = (char *)v62 - v29;
  v63 = type metadata accessor for PBHKAllergyRecord(0);
  MEMORY[0x24BDAC7A8](v63);
  v65 = (char *)v62 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2ED54(0, &qword_25553F688, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
  v32 = MEMORY[0x24BDAC7A8](v31);
  v62[7] = (char *)v62 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x24BDAC7A8](v32);
  v62[6] = (char *)v62 - v35;
  v36 = MEMORY[0x24BDAC7A8](v34);
  v62[5] = (char *)v62 - v37;
  v38 = MEMORY[0x24BDAC7A8](v36);
  v62[4] = (char *)v62 - v39;
  v40 = MEMORY[0x24BDAC7A8](v38);
  v62[3] = (char *)v62 - v41;
  v42 = MEMORY[0x24BDAC7A8](v40);
  v62[2] = (char *)v62 - v43;
  v44 = MEMORY[0x24BDAC7A8](v42);
  v62[1] = (char *)v62 - v45;
  v46 = MEMORY[0x24BDAC7A8](v44);
  v47 = MEMORY[0x24BDAC7A8](v46);
  v48 = MEMORY[0x24BDAC7A8](v47);
  MEMORY[0x24BDAC7A8](v48);
  v50 = (char *)v62 - v49;
  v51 = type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord(0);
  v52 = *(_QWORD *)(v51 - 8);
  v53 = MEMORY[0x24BDAC7A8](v51);
  v55 = (char *)v62 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v53);
  v57 = (char *)v62 - v56;
  v58 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PBClinicalRecord(0) + 20))
      + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBClinicalRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__medicalRecord;
  swift_beginAccess();
  sub_21FA6A498(v58, (uint64_t)v50, &qword_25553F688, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51) != 1)
  {
    sub_21FA2D23C((uint64_t)v50, (uint64_t)v57, type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
    sub_21FA2D120((uint64_t)v57, (uint64_t)v55, type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
    v61 = (char *)&loc_21FA69004 + dword_21FA6A3F4[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  sub_21FA2EDA0((uint64_t)v50, &qword_25553F688, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
  v59 = sub_21FC5AAAC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v91, 1, 1, v59);
}

uint64_t sub_21FA6A41C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FA2ED54(0, (unint64_t *)&qword_25406AAE8, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FA6A470@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21FA68930(a1, a2);
}

uint64_t sub_21FA6A498(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_21FA2ED54(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

unint64_t sub_21FA6A4E8()
{
  unint64_t result;

  result = qword_25553F690;
  if (!qword_25553F690)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC5F688, &type metadata for ClinicalSharingCloudSyncError);
    atomic_store(result, (unint64_t *)&qword_25553F690);
  }
  return result;
}

uint64_t sub_21FA6A52C(__int128 *a1, __int128 *a2)
{
  char v3;
  __int128 v5[2];
  _BYTE v6[40];

  sub_21FA6A830(a1, (uint64_t)v5);
  sub_21FA6A830(a2, (uint64_t)v6);
  sub_21FA6AB04(v5);
  return v3 & 1;
}

void sub_21FA6A574()
{
  __int128 *v0;
  _QWORD v1[4];

  sub_21FA6A830(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

unint64_t sub_21FA6A5B8()
{
  sub_21FC5BB74();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  return 0xD00000000000001ALL;
}

void sub_21FA6A798()
{
  JUMPOUT(0x21FA6A780);
}

void sub_21FA6A7F0()
{
  __int128 *v0;
  _BYTE v1[40];

  sub_21FA6A830(v0, (uint64_t)v1);
  sub_21FA6A574();
}

uint64_t sub_21FA6A830(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_21FA6A848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (a5 && a5 != 5)
  {
    if (a5 != 4)
      return result;
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t destroy for ClinicalSharingCloudSyncError(uint64_t a1)
{
  return sub_21FA6A8B0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t sub_21FA6A8B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (a5 && a5 != 5)
  {
    if (a5 != 4)
      return result;
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ClinicalSharingCloudSyncError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_21FA6A848(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for ClinicalSharingCloudSyncError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_21FA6A848(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_21FA6A8B0(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ClinicalSharingCloudSyncError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_21FA6A8B0(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClinicalSharingCloudSyncError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 6)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ClinicalSharingCloudSyncError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 250;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_21FA6AAC0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 5u)
    return *(unsigned __int8 *)(a1 + 32);
  else
    return (*(_DWORD *)a1 + 6);
}

uint64_t sub_21FA6AAD8(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(_QWORD *)result = a2 - 6;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 6;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingCloudSyncError()
{
  return &type metadata for ClinicalSharingCloudSyncError;
}

void sub_21FA6AB04(__int128 *a1)
{
  _QWORD v1[4];

  sub_21FA6A830(a1, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_21FA6AB48()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  char v4;
  _QWORD v6[4];
  char v7;
  uint64_t v8;

  v2 = v8;
  sub_21FA6A830(v1, (uint64_t)v6);
  if (v7)
  {
    v4 = 0;
  }
  else if (v0 == v6[0] && v2 == v6[1])
  {
    v4 = 1;
  }
  else
  {
    v4 = sub_21FC5BDF0();
  }
  return v4 & 1;
}

uint64_t PBTestFlowData.testGatewayID.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PBTestFlowData.testGatewayID.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PBTestFlowData.testGatewayID.modify())()
{
  return nullsub_1;
}

uint64_t PBTestFlowData.testMcVersion.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PBTestFlowData.testMcVersion.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*PBTestFlowData.testMcVersion.modify())()
{
  return nullsub_1;
}

uint64_t PBTestFlowData.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PBTestFlowData(0) + 24);
  v4 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for PBTestFlowData(uint64_t a1)
{
  return sub_21FA44B58(a1, qword_25553F778);
}

uint64_t PBTestFlowData.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PBTestFlowData(0) + 24);
  v4 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PBTestFlowData.unknownFields.modify())()
{
  type metadata accessor for PBTestFlowData(0);
  return nullsub_1;
}

uint64_t PBTestFlowData.init()@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  type metadata accessor for PBTestFlowData(0);
  return sub_21FC5AD10();
}

uint64_t PBLookupInfo.dlid.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for PBLookupInfo(uint64_t a1)
{
  return sub_21FA44B58(a1, qword_25553F810);
}

uint64_t sub_21FA6AF6C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 24);
  *a2 = *(_QWORD *)(v3 + 16);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_21FA6AFC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = sub_21FA6E3AC(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t PBLookupInfo.dlid.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = sub_21FA6E3AC(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for PBLookupInfo._StorageClass(uint64_t a1)
{
  return sub_21FA44B58(a1, qword_25553F870);
}

void (*PBLookupInfo.dlid.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 24);
  v3[9] = *(_QWORD *)(v5 + 16);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_21FA6B1C0;
}

void sub_21FA6B1C0(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = sub_21FA6E3AC(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 16) = v3;
    *(_QWORD *)(v8 + 24) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = sub_21FA6E3AC(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 16) = v3;
    *(_QWORD *)(v12 + 24) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t PBLookupInfo.key.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 32);
  sub_21FA32314(v2, *(_QWORD *)(v1 + 40));
  return v2;
}

uint64_t sub_21FA6B378@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 32);
  v5 = *(_QWORD *)(v3 + 40);
  *a2 = v4;
  a2[1] = v5;
  return sub_21FA32314(v4, v5);
}

uint64_t sub_21FA6B3D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = *a1;
  v4 = a1[1];
  v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  sub_21FA32314(v3, v4);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = sub_21FA6E3AC(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v7 + 32) = v3;
  *(_QWORD *)(v7 + 40) = v4;
  return sub_21FA2D770(v8, v9);
}

uint64_t PBLookupInfo.key.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = sub_21FA6E3AC(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v7 + 32) = a1;
  *(_QWORD *)(v7 + 40) = a2;
  return sub_21FA2D770(v8, v9);
}

void (*PBLookupInfo.key.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 32);
  v7 = *(_QWORD *)(v5 + 40);
  v3[9] = v6;
  v3[10] = v7;
  sub_21FA32314(v6, v7);
  return sub_21FA6B5B8;
}

void sub_21FA6B5B8(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    sub_21FA32314(*(_QWORD *)(*a1 + 72), v4);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = sub_21FA6E3AC(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    v9 = *(_QWORD *)(v8 + 32);
    v10 = *(_QWORD *)(v8 + 40);
    *(_QWORD *)(v8 + 32) = v3;
    *(_QWORD *)(v8 + 40) = v4;
    sub_21FA2D770(v9, v10);
    v11 = *(_QWORD *)(v2 + 72);
    v12 = *(_QWORD *)(v2 + 80);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v13 = *(int *)(v2 + 96);
      v14 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      v15 = swift_retain();
      *(_QWORD *)(v14 + v13) = sub_21FA6E3AC(v15);
      swift_release();
    }
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    v11 = *(_QWORD *)(v16 + 32);
    v12 = *(_QWORD *)(v16 + 40);
    *(_QWORD *)(v16 + 32) = v3;
    *(_QWORD *)(v16 + 40) = v4;
  }
  sub_21FA2D770(v11, v12);
  free((void *)v2);
}

uint64_t PBLookupInfo.vkHr.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 48);
  sub_21FA32314(v2, *(_QWORD *)(v1 + 56));
  return v2;
}

uint64_t sub_21FA6B774@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(_QWORD *)(v3 + 56);
  *a2 = v4;
  a2[1] = v5;
  return sub_21FA32314(v4, v5);
}

uint64_t sub_21FA6B7CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = *a1;
  v4 = a1[1];
  v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  sub_21FA32314(v3, v4);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = sub_21FA6E3AC(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  v8 = *(_QWORD *)(v7 + 48);
  v9 = *(_QWORD *)(v7 + 56);
  *(_QWORD *)(v7 + 48) = v3;
  *(_QWORD *)(v7 + 56) = v4;
  return sub_21FA2D770(v8, v9);
}

uint64_t PBLookupInfo.vkHr.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = sub_21FA6E3AC(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  v8 = *(_QWORD *)(v7 + 48);
  v9 = *(_QWORD *)(v7 + 56);
  *(_QWORD *)(v7 + 48) = a1;
  *(_QWORD *)(v7 + 56) = a2;
  return sub_21FA2D770(v8, v9);
}

void (*PBLookupInfo.vkHr.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 48);
  v7 = *(_QWORD *)(v5 + 56);
  v3[9] = v6;
  v3[10] = v7;
  sub_21FA32314(v6, v7);
  return sub_21FA6B9B4;
}

void sub_21FA6B9B4(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    sub_21FA32314(*(_QWORD *)(*a1 + 72), v4);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = sub_21FA6E3AC(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    v9 = *(_QWORD *)(v8 + 48);
    v10 = *(_QWORD *)(v8 + 56);
    *(_QWORD *)(v8 + 48) = v3;
    *(_QWORD *)(v8 + 56) = v4;
    sub_21FA2D770(v9, v10);
    v11 = *(_QWORD *)(v2 + 72);
    v12 = *(_QWORD *)(v2 + 80);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v13 = *(int *)(v2 + 96);
      v14 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      v15 = swift_retain();
      *(_QWORD *)(v14 + v13) = sub_21FA6E3AC(v15);
      swift_release();
    }
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    v11 = *(_QWORD *)(v16 + 48);
    v12 = *(_QWORD *)(v16 + 56);
    *(_QWORD *)(v16 + 48) = v3;
    *(_QWORD *)(v16 + 56) = v4;
  }
  sub_21FA2D770(v11, v12);
  free((void *)v2);
}

uint64_t PBLookupInfo.lastSyncTime.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 64);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_21FA6BB6C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 72);
  *a2 = *(_QWORD *)(v3 + 64);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_21FA6BBC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = sub_21FA6E3AC(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t PBLookupInfo.lastSyncTime.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = sub_21FA6E3AC(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 64) = a1;
  *(_QWORD *)(v7 + 72) = a2;
  return swift_bridgeObjectRelease();
}

void (*PBLookupInfo.lastSyncTime.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 72);
  v3[9] = *(_QWORD *)(v5 + 64);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_21FA6BDAC;
}

void sub_21FA6BDAC(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = sub_21FA6E3AC(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 64) = v3;
    *(_QWORD *)(v8 + 72) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = sub_21FA6E3AC(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 64) = v3;
    *(_QWORD *)(v12 + 72) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t PBLookupInfo.deviceID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 80);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_21FA6BF60@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 88);
  *a2 = *(_QWORD *)(v3 + 80);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_21FA6BFB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = sub_21FA6E3AC(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 80) = v4;
  *(_QWORD *)(v7 + 88) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t PBLookupInfo.deviceID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = sub_21FA6E3AC(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 80) = a1;
  *(_QWORD *)(v7 + 88) = a2;
  return swift_bridgeObjectRelease();
}

void (*PBLookupInfo.deviceID.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 88);
  v3[9] = *(_QWORD *)(v5 + 80);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_21FA6C1A0;
}

void sub_21FA6C1A0(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = sub_21FA6E3AC(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 80) = v3;
    *(_QWORD *)(v8 + 88) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = sub_21FA6E3AC(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 80) = v3;
    *(_QWORD *)(v12 + 88) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t PBLookupInfo.deviceName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 96);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_21FA6C354@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 104);
  *a2 = *(_QWORD *)(v3 + 96);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_21FA6C3AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = sub_21FA6E3AC(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 96) = v4;
  *(_QWORD *)(v7 + 104) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t PBLookupInfo.deviceName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = sub_21FA6E3AC(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 96) = a1;
  *(_QWORD *)(v7 + 104) = a2;
  return swift_bridgeObjectRelease();
}

void (*PBLookupInfo.deviceName.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 104);
  v3[9] = *(_QWORD *)(v5 + 96);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_21FA6C594;
}

void sub_21FA6C594(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = sub_21FA6E3AC(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 96) = v3;
    *(_QWORD *)(v8 + 104) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = sub_21FA6E3AC(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 96) = v3;
    *(_QWORD *)(v12 + 104) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t PBLookupInfo.timesShared.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  return *(unsigned int *)(v1 + 112);
}

uint64_t sub_21FA6C738(int *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = sub_21FA6E3AC(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_DWORD *)(v6 + 112) = v3;
  return result;
}

uint64_t PBLookupInfo.timesShared.setter(int a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = sub_21FA6E3AC(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_DWORD *)(v5 + 112) = a1;
  return result;
}

void (*PBLookupInfo.timesShared.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  *((_DWORD *)v3 + 20) = *(_DWORD *)(v5 + 112);
  return sub_21FA6C8FC;
}

void sub_21FA6C8FC(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 84);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = sub_21FA6E3AC(v8);
    swift_release();
  }
LABEL_4:
  v9 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84)) + 112);
  swift_beginAccess();
  *v9 = v4;
  free((void *)v3);
}

uint64_t PBLookupInfo.expiresAt.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 120);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_21FA6CA2C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 128);
  *a2 = *(_QWORD *)(v3 + 120);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_21FA6CA84(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = sub_21FA6E3AC(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 120) = v4;
  *(_QWORD *)(v7 + 128) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t PBLookupInfo.expiresAt.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = sub_21FA6E3AC(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 120) = a1;
  *(_QWORD *)(v7 + 128) = a2;
  return swift_bridgeObjectRelease();
}

void (*PBLookupInfo.expiresAt.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 128);
  v3[9] = *(_QWORD *)(v5 + 120);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_21FA6CC6C;
}

void sub_21FA6CC6C(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = sub_21FA6E3AC(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 120) = v3;
    *(_QWORD *)(v8 + 128) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = sub_21FA6E3AC(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 120) = v3;
    *(_QWORD *)(v12 + 128) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t PBLookupInfo.healthInstituteID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 136);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_21FA6CE20@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 144);
  *a2 = *(_QWORD *)(v3 + 136);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_21FA6CE78(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = sub_21FA6E3AC(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 136) = v4;
  *(_QWORD *)(v7 + 144) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t PBLookupInfo.healthInstituteID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = sub_21FA6E3AC(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 136) = a1;
  *(_QWORD *)(v7 + 144) = a2;
  return swift_bridgeObjectRelease();
}

void (*PBLookupInfo.healthInstituteID.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 144);
  v3[9] = *(_QWORD *)(v5 + 136);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_21FA6D060;
}

void sub_21FA6D060(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = sub_21FA6E3AC(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 136) = v3;
    *(_QWORD *)(v8 + 144) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = sub_21FA6E3AC(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 136) = v3;
    *(_QWORD *)(v12 + 144) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t PBLookupInfo.testFlowData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  sub_21FA2D1A0(0, &qword_25553F6D0, type metadata accessor for PBTestFlowData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - v4;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBLookupInfoP33_7F26719F6460C689CB3D83DDA4DE2FF013_StorageClass__testFlowData;
  swift_beginAccess();
  sub_21FA6E7FC(v6, (uint64_t)v5);
  v7 = type metadata accessor for PBTestFlowData(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_21FA6E8AC((uint64_t)v5, (uint64_t)a1);
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  sub_21FC5AD10();
  return sub_21FA6E858((uint64_t)v5);
}

uint64_t sub_21FA6D2C8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  sub_21FA2D1A0(0, &qword_25553F6D0, type metadata accessor for PBTestFlowData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - v5;
  v7 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBLookupInfoP33_7F26719F6460C689CB3D83DDA4DE2FF013_StorageClass__testFlowData;
  swift_beginAccess();
  sub_21FA6E7FC(v7, (uint64_t)v6);
  v8 = type metadata accessor for PBTestFlowData(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return sub_21FA6E8AC((uint64_t)v6, (uint64_t)a2);
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0xE000000000000000;
  sub_21FC5AD10();
  return sub_21FA6E858((uint64_t)v6);
}

uint64_t sub_21FA6D3D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for PBTestFlowData(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA6E9A8(a1, (uint64_t)v4);
  return PBLookupInfo.testFlowData.setter((uint64_t)v4);
}

uint64_t PBLookupInfo.testFlowData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  sub_21FA2D1A0(0, &qword_25553F6D0, type metadata accessor for PBTestFlowData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v15 - v7;
  v9 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    v10 = swift_retain();
    *(_QWORD *)(v1 + v9) = sub_21FA6E3AC(v10);
    swift_release();
  }
  v11 = *(_QWORD *)(v1 + v9);
  sub_21FA6E8AC(a1, (uint64_t)v8);
  v12 = type metadata accessor for PBTestFlowData(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v8, 0, 1, v12);
  sub_21FA6E8F0((uint64_t)v8, (uint64_t)v6);
  v13 = v11
      + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBLookupInfoP33_7F26719F6460C689CB3D83DDA4DE2FF013_StorageClass__testFlowData;
  swift_beginAccess();
  swift_retain();
  sub_21FA6E94C((uint64_t)v6, v13);
  swift_endAccess();
  return swift_release();
}

void (*PBLookupInfo.testFlowData.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_21FA2D1A0(0, &qword_25553F6D0, type metadata accessor for PBTestFlowData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for PBTestFlowData(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20))
      + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBLookupInfoP33_7F26719F6460C689CB3D83DDA4DE2FF013_StorageClass__testFlowData;
  swift_beginAccess();
  sub_21FA6E7FC(v10, (uint64_t)v5);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    v9[2] = 0;
    v9[3] = 0xE000000000000000;
    sub_21FC5AD10();
    sub_21FA6E858((uint64_t)v5);
  }
  else
  {
    sub_21FA6E8AC((uint64_t)v5, (uint64_t)v9);
  }
  return sub_21FA6D704;
}

void sub_21FA6D704(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 40);
  v4 = *(void **)(*(_QWORD *)a1 + 48);
  v5 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    sub_21FA6E9A8((uint64_t)v4, (uint64_t)v3);
    PBLookupInfo.testFlowData.setter((uint64_t)v3);
    sub_21FA326EC((uint64_t)v4, type metadata accessor for PBTestFlowData);
  }
  else
  {
    PBLookupInfo.testFlowData.setter((uint64_t)v4);
  }
  free(v4);
  free(v3);
  free(v5);
  free(v2);
}

BOOL PBLookupInfo.hasTestFlowData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  sub_21FA2D1A0(0, &qword_25553F6D0, type metadata accessor for PBTestFlowData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - v2;
  v4 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBLookupInfoP33_7F26719F6460C689CB3D83DDA4DE2FF013_StorageClass__testFlowData;
  swift_beginAccess();
  sub_21FA6E7FC(v4, (uint64_t)v3);
  v5 = type metadata accessor for PBTestFlowData(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_21FA6E858((uint64_t)v3);
  return v6;
}

Swift::Void __swiftcall PBLookupInfo.clearTestFlowData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_21FA2D1A0(0, &qword_25553F6D0, type metadata accessor for PBTestFlowData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v9 - v2;
  v4 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(v0 + v4) = sub_21FA6E3AC(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(v0 + v4);
  v7 = type metadata accessor for PBTestFlowData(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v3, 1, 1, v7);
  v8 = v6
     + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBLookupInfoP33_7F26719F6460C689CB3D83DDA4DE2FF013_StorageClass__testFlowData;
  swift_beginAccess();
  swift_retain();
  sub_21FA6E94C((uint64_t)v3, v8);
  swift_endAccess();
  swift_release();
}

uint64_t PBLookupInfo.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t PBLookupInfo.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*PBLookupInfo.unknownFields.modify())()
{
  return nullsub_1;
}

uint64_t PBLookupInfo.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  sub_21FC5AD10();
  v2 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if (qword_25553D5D0 != -1)
    swift_once();
  *(_QWORD *)(a1 + v2) = qword_25553F6C8;
  return swift_retain();
}

unint64_t static PBTestFlowData.protoMessageName.getter()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_21FA6DA94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  char *v12;

  v0 = sub_21FC5AF74();
  __swift_allocate_value_buffer(v0, qword_25553F698);
  __swift_project_value_buffer(v0, (uint64_t)qword_25553F698);
  sub_21FA2D1A0(0, (unint64_t *)&qword_25553EAC0, (uint64_t (*)(uint64_t))sub_21FA48EB8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  sub_21FA48EB8();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_21FC5F720;
  v7 = (_QWORD *)(v6 + v5);
  v8 = v6 + v5 + *(int *)(v2 + 48);
  *v7 = 1;
  *(_QWORD *)v8 = "test_gateway_id";
  *(_QWORD *)(v8 + 8) = 15;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = *MEMORY[0x24BE5C328];
  v10 = sub_21FC5AF5C();
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = (char *)v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v7 + v4) = 2;
  *(_QWORD *)v12 = "test_mc_version";
  *((_QWORD *)v12 + 1) = 15;
  v12[16] = 2;
  v11();
  return sub_21FC5AF68();
}

uint64_t static PBTestFlowData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA3A338(&qword_25553D5C0, (uint64_t)qword_25553F698, a1);
}

uint64_t PBTestFlowData.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_21FC5AD88();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1)
        sub_21FC5AE3C();
      result = sub_21FC5AD88();
    }
  }
  return result;
}

uint64_t PBTestFlowData.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = sub_21FC5AF2C(), !v1))
  {
    v5 = v0[3];
    v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v6 = v0[2] & 0xFFFFFFFFFFFFLL;
    if (!v6 || (result = sub_21FC5AF2C(), !v1))
    {
      type metadata accessor for PBTestFlowData(0);
      return sub_21FC5AD04();
    }
  }
  return result;
}

uint64_t PBTestFlowData.hashValue.getter()
{
  return sub_21FA42FDC(type metadata accessor for PBTestFlowData, &qword_25553F6E0, (uint64_t)&protocol conformance descriptor for PBTestFlowData);
}

uint64_t sub_21FA6DD9C@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  return sub_21FC5AD10();
}

unint64_t sub_21FA6DDC4()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_21FA6DDE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_21FA6DE20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 24);
  v5 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_21FA6DE60())()
{
  return nullsub_1;
}

uint64_t sub_21FA6DE74()
{
  return PBTestFlowData.decodeMessage<A>(decoder:)();
}

uint64_t sub_21FA6DE88()
{
  return PBTestFlowData.traverse<A>(visitor:)();
}

uint64_t sub_21FA6DE9C()
{
  sub_21FA2A08C(&qword_25553FA40, type metadata accessor for PBTestFlowData, (uint64_t)&protocol conformance descriptor for PBTestFlowData);
  return sub_21FC5AD70();
}

uint64_t sub_21FA6DEEC@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA40BC8(&qword_25553D5C0, (uint64_t)qword_25553F698, a1);
}

uint64_t sub_21FA6DF08()
{
  sub_21FA2A08C(&qword_25553F6F8, type metadata accessor for PBTestFlowData, (uint64_t)&protocol conformance descriptor for PBTestFlowData);
  return sub_21FC5AE9C();
}

uint64_t sub_21FA6DF48()
{
  sub_21FA2A08C(&qword_25553F6F8, type metadata accessor for PBTestFlowData, (uint64_t)&protocol conformance descriptor for PBTestFlowData);
  return sub_21FC5AEA8();
}

unint64_t static PBLookupInfo.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_21FA6DFB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v28;

  v0 = sub_21FC5AF74();
  __swift_allocate_value_buffer(v0, qword_25553F6B0);
  __swift_project_value_buffer(v0, (uint64_t)qword_25553F6B0);
  sub_21FA2D1A0(0, (unint64_t *)&qword_25553EAC0, (uint64_t (*)(uint64_t))sub_21FA48EB8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  sub_21FA48EB8();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_21FC5F730;
  v6 = v28 + v5;
  v7 = v28 + v5 + *(int *)(v2 + 48);
  *(_QWORD *)(v28 + v5) = 2;
  *(_QWORD *)v7 = "dlid";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_21FC5AF5C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + v4) = 3;
  *(_QWORD *)v11 = "key";
  *(_QWORD *)(v11 + 8) = 3;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v4);
  v13 = (char *)v12 + *(int *)(v2 + 48);
  *v12 = 4;
  *(_QWORD *)v13 = "vk_hr";
  *((_QWORD *)v13 + 1) = 5;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 5;
  *(_QWORD *)v15 = "last_sync_time";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 6;
  *(_QWORD *)v17 = "device_id";
  *((_QWORD *)v17 + 1) = 9;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 7;
  *(_QWORD *)v19 = "device_name";
  *((_QWORD *)v19 + 1) = 11;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 8;
  *(_QWORD *)v21 = "times_shared";
  *((_QWORD *)v21 + 1) = 12;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 9;
  *(_QWORD *)v23 = "expires_at";
  *((_QWORD *)v23 + 1) = 10;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + 8 * v4) = 10;
  *(_QWORD *)v24 = "health_institute_id";
  *(_QWORD *)(v24 + 8) = 19;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v4);
  v26 = (char *)v25 + *(int *)(v2 + 48);
  *v25 = 11;
  *(_QWORD *)v26 = "test_flow_data";
  *((_QWORD *)v26 + 1) = 14;
  v26[16] = 2;
  v10();
  return sub_21FC5AF68();
}

uint64_t static PBLookupInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA3A338(&qword_25553D5C8, (uint64_t)qword_25553F6B0, a1);
}

uint64_t sub_21FA6E2EC()
{
  uint64_t result;

  type metadata accessor for PBLookupInfo._StorageClass(0);
  swift_allocObject();
  result = sub_21FA6E328();
  qword_25553F6C8 = result;
  return result;
}

uint64_t sub_21FA6E328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  *(_QWORD *)(v0 + 32) = sub_21FC5ACF8();
  *(_QWORD *)(v0 + 40) = v1;
  *(_QWORD *)(v0 + 48) = sub_21FC5ACF8();
  *(_QWORD *)(v0 + 56) = v2;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0xE000000000000000;
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 88) = 0xE000000000000000;
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = 0xE000000000000000;
  *(_DWORD *)(v0 + 112) = 0;
  *(_QWORD *)(v0 + 120) = 0;
  *(_QWORD *)(v0 + 128) = 0xE000000000000000;
  v3 = v0
     + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBLookupInfoP33_7F26719F6460C689CB3D83DDA4DE2FF013_StorageClass__testFlowData;
  *(_QWORD *)(v0 + 136) = 0;
  *(_QWORD *)(v0 + 144) = 0xE000000000000000;
  v4 = type metadata accessor for PBTestFlowData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  return v0;
}

uint64_t sub_21FA6E3AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v39;
  _QWORD *v40;
  _DWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;

  sub_21FA2D1A0(0, &qword_25553F6D0, type metadata accessor for PBTestFlowData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v45 = (uint64_t)&v39 - v4;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0xE000000000000000;
  *(_QWORD *)(v1 + 32) = sub_21FC5ACF8();
  *(_QWORD *)(v1 + 40) = v5;
  *(_QWORD *)(v1 + 48) = sub_21FC5ACF8();
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 56) = v6;
  *(_QWORD *)(v1 + 72) = 0xE000000000000000;
  *(_QWORD *)(v1 + 80) = 0;
  v39 = (_QWORD *)(v1 + 80);
  *(_QWORD *)(v1 + 88) = 0xE000000000000000;
  *(_QWORD *)(v1 + 96) = 0;
  v40 = (_QWORD *)(v1 + 96);
  *(_DWORD *)(v1 + 112) = 0;
  v41 = (_DWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 104) = 0xE000000000000000;
  *(_QWORD *)(v1 + 120) = 0;
  v42 = (_QWORD *)(v1 + 120);
  *(_QWORD *)(v1 + 128) = 0xE000000000000000;
  *(_QWORD *)(v1 + 144) = 0xE000000000000000;
  v7 = v1
     + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBLookupInfoP33_7F26719F6460C689CB3D83DDA4DE2FF013_StorageClass__testFlowData;
  *(_QWORD *)(v1 + 136) = 0;
  v43 = (_QWORD *)(v1 + 136);
  v44 = v7;
  v8 = type metadata accessor for PBTestFlowData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  swift_beginAccess();
  v10 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v10;
  *(_QWORD *)(v1 + 24) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  swift_beginAccess();
  v13 = *(_QWORD *)(v1 + 32);
  v14 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 32) = v11;
  *(_QWORD *)(v1 + 40) = v12;
  sub_21FA32314(v11, v12);
  sub_21FA2D770(v13, v14);
  swift_beginAccess();
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 56);
  swift_beginAccess();
  v17 = *(_QWORD *)(v1 + 48);
  v18 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 48) = v15;
  *(_QWORD *)(v1 + 56) = v16;
  sub_21FA32314(v15, v16);
  sub_21FA2D770(v17, v18);
  swift_beginAccess();
  v20 = *(_QWORD *)(a1 + 64);
  v19 = *(_QWORD *)(a1 + 72);
  swift_beginAccess();
  *(_QWORD *)(v1 + 64) = v20;
  *(_QWORD *)(v1 + 72) = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v22 = *(_QWORD *)(a1 + 80);
  v21 = *(_QWORD *)(a1 + 88);
  v23 = v39;
  swift_beginAccess();
  *v23 = v22;
  *(_QWORD *)(v1 + 88) = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v25 = *(_QWORD *)(a1 + 96);
  v24 = *(_QWORD *)(a1 + 104);
  v26 = v40;
  swift_beginAccess();
  *v26 = v25;
  *(_QWORD *)(v1 + 104) = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  LODWORD(v24) = *(_DWORD *)(a1 + 112);
  v27 = v41;
  swift_beginAccess();
  *v27 = v24;
  swift_beginAccess();
  v29 = *(_QWORD *)(a1 + 120);
  v28 = *(_QWORD *)(a1 + 128);
  v30 = v42;
  swift_beginAccess();
  *v30 = v29;
  *(_QWORD *)(v1 + 128) = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v32 = *(_QWORD *)(a1 + 136);
  v31 = *(_QWORD *)(a1 + 144);
  v33 = v43;
  swift_beginAccess();
  *v33 = v32;
  *(_QWORD *)(v1 + 144) = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v34 = a1
      + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBLookupInfoP33_7F26719F6460C689CB3D83DDA4DE2FF013_StorageClass__testFlowData;
  swift_beginAccess();
  v35 = v34;
  v36 = v45;
  sub_21FA6E7FC(v35, v45);
  swift_release();
  v37 = v44;
  swift_beginAccess();
  sub_21FA6E94C(v36, v37);
  swift_endAccess();
  return v1;
}

uint64_t sub_21FA6E7FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FA2D1A0(0, &qword_25553F6D0, type metadata accessor for PBTestFlowData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FA6E858(uint64_t a1)
{
  uint64_t v2;

  sub_21FA2D1A0(0, &qword_25553F6D0, type metadata accessor for PBTestFlowData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21FA6E8AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PBTestFlowData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FA6E8F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FA2D1A0(0, &qword_25553F6D0, type metadata accessor for PBTestFlowData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FA6E94C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FA2D1A0(0, &qword_25553F6D0, type metadata accessor for PBTestFlowData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FA6E9A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PBTestFlowData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FA6E9EC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_21FA2D770(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_21FA2D770(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21FA6E858(v0+ OBJC_IVAR____TtCV19HealthRecordsDaemon12PBLookupInfoP33_7F26719F6460C689CB3D83DDA4DE2FF013_StorageClass__testFlowData);
  return v0;
}

uint64_t sub_21FA6EA50()
{
  sub_21FA6E9EC();
  return swift_deallocClassInstance();
}

uint64_t PBLookupInfo.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = sub_21FA6E3AC(v2);
    swift_release();
  }
  swift_retain();
  sub_21FA6EB38();
  return swift_release();
}

uint64_t sub_21FA6EB38()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_21FC5AD88();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 2:
        case 5:
        case 6:
          swift_beginAccess();
          v4 = v3;
          sub_21FC5AE3C();
          goto LABEL_5;
        case 3:
        case 4:
          swift_beginAccess();
          v4 = v3;
          sub_21FC5ADF4();
          goto LABEL_5;
        case 7:
        case 9:
        case 10:
          swift_beginAccess();
          v4 = v3;
          sub_21FC5AE3C();
          goto LABEL_5;
        case 8:
          swift_beginAccess();
          v4 = v3;
          sub_21FC5AE0C();
LABEL_5:
          v3 = v4;
          swift_endAccess();
          break;
        case 11:
          swift_beginAccess();
          type metadata accessor for PBTestFlowData(0);
          sub_21FA2A08C(&qword_25553F6F8, type metadata accessor for PBTestFlowData, (uint64_t)&protocol conformance descriptor for PBTestFlowData);
          sub_21FC5AE60();
          swift_endAccess();
          break;
        default:
          break;
      }
      result = sub_21FC5AD88();
    }
  }
  return result;
}

uint64_t PBLookupInfo.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  type metadata accessor for PBLookupInfo(0);
  v1 = swift_retain();
  sub_21FA6EE68(v1);
  result = swift_release();
  if (!v0)
    return sub_21FC5AD04();
  return result;
}

uint64_t sub_21FA6EE68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  char *v9;
  uint64_t v10;

  sub_21FA2D1A0(0, &qword_25553F6D0, type metadata accessor for PBTestFlowData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v10 = type metadata accessor for PBTestFlowData(0);
  MEMORY[0x24BDAC7A8](v10);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v6 = *(_QWORD *)(a1 + 24);
  v7 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v7 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL;
  if (!v7)
  {
    v9 = v5;
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  sub_21FC5AF2C();
  if (!v1)
  {
    v9 = v5;
    swift_bridgeObjectRelease();
LABEL_8:
    swift_beginAccess();
    __asm { BR              X10 }
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_21FA6F3D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  char v53;
  _QWORD *v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;

  v57 = type metadata accessor for PBTestFlowData(0);
  v4 = *(_QWORD *)(v57 - 8);
  MEMORY[0x24BDAC7A8](v57);
  v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA70794();
  v8 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D1A0(0, &qword_25553F6D0, type metadata accessor for PBTestFlowData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v58 = (uint64_t)&v54 - v15;
  swift_beginAccess();
  v17 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  if (v17 == *(_QWORD *)(a2 + 16) && v16 == *(_QWORD *)(a2 + 24)
    || (v18 = sub_21FC5BDF0(), result = 0, (v18 & 1) != 0))
  {
    v54 = v6;
    v55 = v14;
    v56 = v10;
    swift_beginAccess();
    v20 = *(_QWORD *)(a1 + 32);
    v21 = *(_QWORD *)(a1 + 40);
    swift_beginAccess();
    v22 = *(_QWORD *)(a2 + 32);
    v23 = *(_QWORD *)(a2 + 40);
    swift_retain();
    swift_retain();
    sub_21FA32314(v20, v21);
    sub_21FA32314(v22, v23);
    sub_21FB13260(v20, v21);
    v25 = v24;
    sub_21FA2D770(v22, v23);
    sub_21FA2D770(v20, v21);
    if ((v25 & 1) == 0)
      goto LABEL_25;
    swift_beginAccess();
    v26 = *(_QWORD *)(a1 + 48);
    v27 = *(_QWORD *)(a1 + 56);
    swift_beginAccess();
    v28 = *(_QWORD *)(a2 + 48);
    v29 = *(_QWORD *)(a2 + 56);
    sub_21FA32314(v26, v27);
    sub_21FA32314(v28, v29);
    sub_21FB13260(v26, v27);
    v31 = v30;
    sub_21FA2D770(v28, v29);
    sub_21FA2D770(v26, v27);
    if ((v31 & 1) == 0)
      goto LABEL_25;
    swift_beginAccess();
    v32 = *(_QWORD *)(a1 + 64);
    v33 = *(_QWORD *)(a1 + 72);
    swift_beginAccess();
    if ((v32 != *(_QWORD *)(a2 + 64) || v33 != *(_QWORD *)(a2 + 72)) && (sub_21FC5BDF0() & 1) == 0)
      goto LABEL_25;
    swift_beginAccess();
    v34 = *(_QWORD *)(a1 + 80);
    v35 = *(_QWORD *)(a1 + 88);
    swift_beginAccess();
    if ((v34 != *(_QWORD *)(a2 + 80) || v35 != *(_QWORD *)(a2 + 88)) && (sub_21FC5BDF0() & 1) == 0)
      goto LABEL_25;
    swift_beginAccess();
    v36 = *(_QWORD *)(a1 + 96);
    v37 = *(_QWORD *)(a1 + 104);
    swift_beginAccess();
    if ((v36 != *(_QWORD *)(a2 + 96) || v37 != *(_QWORD *)(a2 + 104)) && (sub_21FC5BDF0() & 1) == 0)
      goto LABEL_25;
    swift_beginAccess();
    v38 = *(_DWORD *)(a1 + 112);
    swift_beginAccess();
    if (v38 != *(_DWORD *)(a2 + 112))
      goto LABEL_25;
    swift_beginAccess();
    v39 = *(_QWORD *)(a1 + 120);
    v40 = *(_QWORD *)(a1 + 128);
    swift_beginAccess();
    if ((v39 != *(_QWORD *)(a2 + 120) || v40 != *(_QWORD *)(a2 + 128)) && (sub_21FC5BDF0() & 1) == 0)
      goto LABEL_25;
    if ((swift_beginAccess(),
          v41 = *(_QWORD *)(a1 + 136),
          v42 = *(_QWORD *)(a1 + 144),
          swift_beginAccess(),
          v41 == *(_QWORD *)(a2 + 136))
      && v42 == *(_QWORD *)(a2 + 144)
      || (sub_21FC5BDF0() & 1) != 0)
    {
      v43 = a1
          + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBLookupInfoP33_7F26719F6460C689CB3D83DDA4DE2FF013_StorageClass__testFlowData;
      swift_beginAccess();
      v44 = v58;
      sub_21FA6E7FC(v43, v58);
      v45 = a2
          + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBLookupInfoP33_7F26719F6460C689CB3D83DDA4DE2FF013_StorageClass__testFlowData;
      swift_beginAccess();
      v46 = (uint64_t)v56;
      v47 = (uint64_t)&v56[*(int *)(v8 + 48)];
      sub_21FA6E7FC(v44, (uint64_t)v56);
      sub_21FA6E7FC(v45, v47);
      v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
      v49 = v57;
      if (v48(v46, 1, v57) == 1)
      {
        swift_release();
        swift_release();
        sub_21FA6E858(v44);
        if (v48(v47, 1, v49) == 1)
        {
          sub_21FA6E858(v46);
          return 1;
        }
      }
      else
      {
        v50 = v55;
        sub_21FA6E7FC(v46, (uint64_t)v55);
        if (v48(v47, 1, v49) != 1)
        {
          v51 = v54;
          sub_21FA6E8AC(v47, (uint64_t)v54);
          if ((*v50 == *v51 && v50[1] == v51[1] || (sub_21FC5BDF0() & 1) != 0)
            && (v55[2] == v51[2] && v55[3] == v51[3] || (sub_21FC5BDF0() & 1) != 0))
          {
            v52 = (uint64_t)v55;
            sub_21FC5AD1C();
            sub_21FA2A08C(&qword_25553EAB8, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
            v53 = sub_21FC5B5D4();
            swift_release();
            swift_release();
            sub_21FA326EC((uint64_t)v51, type metadata accessor for PBTestFlowData);
            sub_21FA6E858(v44);
            sub_21FA326EC(v52, type metadata accessor for PBTestFlowData);
            sub_21FA6E858(v46);
            if ((v53 & 1) != 0)
              return 1;
          }
          else
          {
            swift_release();
            swift_release();
            sub_21FA326EC((uint64_t)v51, type metadata accessor for PBTestFlowData);
            sub_21FA6E858(v44);
            sub_21FA326EC((uint64_t)v55, type metadata accessor for PBTestFlowData);
            sub_21FA6E858(v46);
          }
          return 0;
        }
        swift_release();
        swift_release();
        sub_21FA6E858(v44);
        sub_21FA326EC((uint64_t)v50, type metadata accessor for PBTestFlowData);
      }
      sub_21FA326EC(v46, (uint64_t (*)(_QWORD))sub_21FA70794);
    }
    else
    {
LABEL_25:
      swift_release();
      swift_release();
    }
    return 0;
  }
  return result;
}

uint64_t PBLookupInfo.hashValue.getter()
{
  return sub_21FA42FDC(type metadata accessor for PBLookupInfo, &qword_25553F6E8, (uint64_t)&protocol conformance descriptor for PBLookupInfo);
}

uint64_t sub_21FA6FAE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  sub_21FC5AD10();
  v4 = *(int *)(a1 + 20);
  if (qword_25553D5D0 != -1)
    swift_once();
  *(_QWORD *)(a2 + v4) = qword_25553F6C8;
  return swift_retain();
}

unint64_t sub_21FA6FB40()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_21FA6FB5C()
{
  return PBLookupInfo.decodeMessage<A>(decoder:)();
}

uint64_t sub_21FA6FB70()
{
  return PBLookupInfo.traverse<A>(visitor:)();
}

uint64_t sub_21FA6FB84()
{
  sub_21FA2A08C(&qword_25553FA38, type metadata accessor for PBLookupInfo, (uint64_t)&protocol conformance descriptor for PBLookupInfo);
  return sub_21FC5AD70();
}

uint64_t sub_21FA6FBD4@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA40BC8(&qword_25553D5C8, (uint64_t)qword_25553F6B0, a1);
}

uint64_t sub_21FA6FBF0()
{
  sub_21FA2A08C((unint64_t *)&qword_25553F710, type metadata accessor for PBLookupInfo, (uint64_t)&protocol conformance descriptor for PBLookupInfo);
  return sub_21FC5AE9C();
}

uint64_t sub_21FA6FC30()
{
  sub_21FA2A08C((unint64_t *)&qword_25553F710, type metadata accessor for PBLookupInfo, (uint64_t)&protocol conformance descriptor for PBLookupInfo);
  return sub_21FC5AEA8();
}

uint64_t _s19HealthRecordsDaemon14PBTestFlowDataV2eeoiySbAC_ACtFZ_0(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = sub_21FC5AD1C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  v11 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v11 || (v12 = 0, (sub_21FC5BDF0() & 1) != 0))
  {
    v13 = a1[2] == *((_QWORD *)a2 + 2) && a1[3] == *((_QWORD *)a2 + 3);
    if (v13 || (v12 = 0, (sub_21FC5BDF0() & 1) != 0))
    {
      v14 = type metadata accessor for PBTestFlowData(0);
      v15 = (char *)a1 + *(int *)(v14 + 24);
      v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v16(v10, v15, v4);
      v16(v8, &a2[*(int *)(v14 + 24)], v4);
      sub_21FA2A08C(&qword_25553EAB8, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v12 = sub_21FC5B5D4();
      v17 = *(void (**)(char *, uint64_t))(v5 + 8);
      v17(v8, v4);
      v17(v10, v4);
    }
  }
  return v12 & 1;
}

uint64_t _s19HealthRecordsDaemon12PBLookupInfoV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = sub_21FC5AD1C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  v11 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a2 + v11);
  if (v12 == v13
    || (swift_retain(), swift_retain(), v14 = sub_21FA6F3D0(v12, v13), swift_release(), swift_release(), (v14 & 1) != 0))
  {
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    sub_21FA2A08C(&qword_25553EAB8, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = sub_21FC5B5D4();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_21FA6FF50()
{
  return sub_21FA2A08C(&qword_25553F6F0, type metadata accessor for PBTestFlowData, (uint64_t)&protocol conformance descriptor for PBTestFlowData);
}

uint64_t sub_21FA6FF7C()
{
  return sub_21FA2A08C(&qword_25553F6F8, type metadata accessor for PBTestFlowData, (uint64_t)&protocol conformance descriptor for PBTestFlowData);
}

uint64_t sub_21FA6FFA8()
{
  return sub_21FA2A08C(&qword_25553F6E0, type metadata accessor for PBTestFlowData, (uint64_t)&protocol conformance descriptor for PBTestFlowData);
}

uint64_t sub_21FA6FFD4()
{
  return sub_21FA2A08C(&qword_25553F700, type metadata accessor for PBTestFlowData, (uint64_t)&protocol conformance descriptor for PBTestFlowData);
}

uint64_t sub_21FA70000()
{
  return sub_21FA2A08C(&qword_25553F708, type metadata accessor for PBLookupInfo, (uint64_t)&protocol conformance descriptor for PBLookupInfo);
}

uint64_t sub_21FA7002C()
{
  return sub_21FA2A08C((unint64_t *)&qword_25553F710, type metadata accessor for PBLookupInfo, (uint64_t)&protocol conformance descriptor for PBLookupInfo);
}

uint64_t sub_21FA70058()
{
  return sub_21FA2A08C(&qword_25553F6E8, type metadata accessor for PBLookupInfo, (uint64_t)&protocol conformance descriptor for PBLookupInfo);
}

uint64_t sub_21FA70084()
{
  return sub_21FA2A08C(&qword_25553F718, type metadata accessor for PBLookupInfo, (uint64_t)&protocol conformance descriptor for PBLookupInfo);
}

uint64_t sub_21FA700E0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  result = swift_beginAccess();
  *a2 = *(_DWORD *)(v3 + 112);
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PBTestFlowData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_21FC5AD1C();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t destroy for PBTestFlowData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for PBTestFlowData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21FC5AD1C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

_QWORD *assignWithCopy for PBTestFlowData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21FC5AD1C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for PBTestFlowData(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_21FC5AD1C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *assignWithTake for PBTestFlowData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_21FC5AD1C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PBTestFlowData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA7045C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_21FC5AD1C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PBTestFlowData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA704E4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_21FC5AD1C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_21FA70558()
{
  uint64_t result;
  unint64_t v1;

  result = sub_21FC5AD1C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PBLookupInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA705D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_21FC5AD1C();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for PBLookupInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA70660(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_21FC5AD1C();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_21FA706D8()
{
  return type metadata accessor for PBLookupInfo._StorageClass(0);
}

void sub_21FA706E0()
{
  unint64_t v0;

  sub_21FA2D1A0(319, &qword_25553F6D0, type metadata accessor for PBTestFlowData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void sub_21FA70794()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25553FA48)
  {
    sub_21FA2D1A0(255, &qword_25553F6D0, type metadata accessor for PBTestFlowData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25553FA48);
  }
}

uint64_t sub_21FA7080C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t i;
  id v7;
  void *v8;
  id v9;
  void *v10;
  char v11;
  id v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v3 = *a1;
  v16 = MEMORY[0x24BEE4AF8];
  if (!((unint64_t)*a1 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_16:
    result = swift_bridgeObjectRelease();
    v14 = MEMORY[0x24BEE4AF8];
LABEL_17:
    *a2 = v14;
    return result;
  }
  swift_bridgeObjectRetain();
  result = sub_21FC5BC7C();
  v4 = result;
  if (!result)
    goto LABEL_16;
LABEL_3:
  if (v4 >= 1)
  {
    v15 = a2;
    for (i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x2207D057C](i, v3);
      else
        v7 = *(id *)(v3 + 8 * i + 32);
      v8 = v7;
      v9 = objc_msgSend(v7, sel_gateway, v15);
      if (v9
        && (v10 = v9, v11 = sub_21FC5B9E8(), v10, (v11 & 1) != 0)
        && (v12 = objc_msgSend(v8, sel_clinicalSharingStatus),
            v13 = objc_msgSend(v12, sel_userStatus),
            v12,
            v13))
      {
        sub_21FC5BBE0();
        sub_21FC5BC10();
        sub_21FC5BC1C();
        sub_21FC5BBEC();
      }
      else
      {

      }
    }
    result = swift_bridgeObjectRelease();
    a2 = v15;
    v14 = v16;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_21FA709AC(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  _QWORD v27[2];
  uint64_t v28;
  char *v29;
  void *v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;

  v4 = sub_21FC5AAF4();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v27 - v9;
  if (qword_25406B7F8 != -1)
    swift_once();
  v11 = sub_21FC5AFD4();
  __swift_project_value_buffer(v11, (uint64_t)qword_25406D830);
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v31(v10, a1, v4);
  v12 = sub_21FC5AFC8();
  v13 = sub_21FC5B994();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    v30 = a2;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc();
    v28 = a1;
    v17 = v16;
    v33 = v16;
    v29 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    *(_DWORD *)v15 = 136315138;
    v27[1] = v15 + 4;
    sub_21FA2A08C((unint64_t *)&qword_25553F0F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v18 = sub_21FC5BDCC();
    v32 = sub_21FABDCF8(v18, v19, &v33);
    v8 = v29;
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    _os_log_impl(&dword_21FA27000, v12, v13, "ClinicalSharingAccountStore: refreshing access token for %s", v15, 0xCu);
    swift_arrayDestroy();
    v20 = v17;
    a1 = v28;
    MEMORY[0x2207D105C](v20, -1, -1);
    v21 = v15;
    a2 = v30;
    MEMORY[0x2207D105C](v21, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }

  v31(v8, a1, v4);
  v22 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v23 + v22, v8, v4);
  sub_21FA7199C();
  swift_allocObject();
  v24 = a2;
  v33 = sub_21FC5B25C();
  sub_21FA2A08C(&qword_25406CC10, (uint64_t (*)(uint64_t))sub_21FA7199C, MEMORY[0x24BDB9E58]);
  v25 = sub_21FC5B280();
  swift_release();
  return v25;
}

uint64_t sub_21FA70CC0(unint64_t a1, void *a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;

  if (qword_25406B7F8 != -1)
    swift_once();
  v4 = sub_21FC5AFD4();
  __swift_project_value_buffer(v4, (uint64_t)qword_25406D830);
  swift_bridgeObjectRetain_n();
  v5 = sub_21FC5AFC8();
  v6 = sub_21FC5B994();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v7 = 134217984;
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      sub_21FC5BC7C();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v5, v6, "ClinicalSharingAccountStore: refreshing connection info for %ld accounts", v7, 0xCu);
    MEMORY[0x2207D105C](v7, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  sub_21FA71A34();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v9 = a2;
  sub_21FC5B25C();
  sub_21FA2A08C(&qword_25406CAE0, (uint64_t (*)(uint64_t))sub_21FA71A34, MEMORY[0x24BDB9E58]);
  v10 = sub_21FC5B280();
  swift_release();
  return v10;
}

uint64_t sub_21FA70ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  NSObject *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  unint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  id v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v60 = (uint64_t)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v59 = (uint64_t)&v53 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v53 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v53 - v16;
  v18 = sub_21FC5AAF4();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_25406B7F8 != -1)
    swift_once();
  v22 = sub_21FC5AFD4();
  __swift_project_value_buffer(v22, (uint64_t)qword_25406D830);
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v61 = a1;
  v23(v21, a1, v18);
  v62 = a2;
  sub_21FA7187C(a2, (uint64_t)v17);
  sub_21FA7187C(a3, (uint64_t)v15);
  v24 = sub_21FC5AFC8();
  v25 = sub_21FC5B994();
  v26 = a3;
  if (os_log_type_enabled(v24, (os_log_type_t)v25))
  {
    v56 = v25;
    v57 = a3;
    v58 = a4;
    v27 = swift_slowAlloc();
    v55 = swift_slowAlloc();
    v64 = v55;
    *(_DWORD *)v27 = 136315650;
    sub_21FA2A08C((unint64_t *)&qword_25553F0F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v28 = sub_21FC5BDCC();
    v63 = sub_21FABDCF8(v28, v29, &v64);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    *(_WORD *)(v27 + 12) = 2080;
    v30 = v59;
    sub_21FA7187C((uint64_t)v17, v59);
    v31 = sub_21FC5AAAC();
    v54 = *(_QWORD *)(v31 - 8);
    v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48);
    if (v32(v30, 1, v31) == 1)
    {
      sub_21FA71828(v30);
      v33 = 0xE500000000000000;
      v34 = 0x7D6C696E7BLL;
    }
    else
    {
      if (qword_25553DC90 != -1)
        swift_once();
      v35 = (void *)qword_255572F60;
      v36 = (void *)sub_21FC5AA64();
      v37 = objc_msgSend(v35, sel_stringFromDate_, v36);

      v34 = sub_21FC5B604();
      v33 = v38;

      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v30, v31);
    }
    v63 = sub_21FABDCF8(v34, v33, &v64);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    sub_21FA71828((uint64_t)v17);
    *(_WORD *)(v27 + 22) = 2080;
    v39 = v60;
    sub_21FA7187C((uint64_t)v15, v60);
    v40 = v32(v39, 1, v31);
    v26 = v57;
    if (v40 == 1)
    {
      sub_21FA71828(v39);
      v41 = 0xE500000000000000;
      v42 = 0x7D6C696E7BLL;
    }
    else
    {
      if (qword_25553DC90 != -1)
        swift_once();
      v43 = (void *)qword_255572F60;
      v44 = (void *)sub_21FC5AA64();
      v45 = objc_msgSend(v43, sel_stringFromDate_, v44);

      v42 = sub_21FC5B604();
      v41 = v46;

      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v39, v31);
    }
    v63 = sub_21FABDCF8(v42, v41, &v64);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    sub_21FA71828((uint64_t)v15);
    _os_log_impl(&dword_21FA27000, v24, (os_log_type_t)v56, "ClinicalSharingAccountStore: updating clinical sharing dates for account %s. First shared: %s, last shared: %s", (uint8_t *)v27, 0x20u);
    v47 = v55;
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v47, -1, -1);
    MEMORY[0x2207D105C](v27, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    sub_21FA71828((uint64_t)v17);
    sub_21FA71828((uint64_t)v15);

  }
  v49 = v61;
  v48 = v62;
  v50 = (void *)sub_21FC5B8B0();
  v51 = sub_21FBB9444(v49, v48, v26, 0, v50, 0, 0);

  return v51;
}

uint64_t sub_21FA7145C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v38 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v37 = (char *)&v33 - v9;
  v10 = sub_21FC5AAF4();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_25406B7F8 != -1)
    swift_once();
  v14 = sub_21FC5AFD4();
  __swift_project_value_buffer(v14, (uint64_t)qword_25406D830);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  v15 = a2;
  v16 = sub_21FC5AFC8();
  v17 = sub_21FC5B994();
  if (os_log_type_enabled(v16, (os_log_type_t)v17))
  {
    v35 = v17;
    v36 = a1;
    v33 = a3;
    v18 = a2;
    v19 = swift_slowAlloc();
    v34 = swift_slowAlloc();
    v40 = v34;
    *(_DWORD *)v19 = 136315394;
    sub_21FA2A08C((unint64_t *)&qword_25553F0F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v20 = sub_21FC5BDCC();
    v39 = sub_21FABDCF8(v20, v21, &v40);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    *(_WORD *)(v19 + 12) = 2080;
    if (v18)
    {
      objc_msgSend(v15, sel_integerValue);
      v22 = (id)HKClinicalSharingUserStatusToString();
      v23 = sub_21FC5B604();
      v25 = v24;

    }
    else
    {
      v25 = 0xE500000000000000;
      v23 = 0x7D6C696E7BLL;
    }
    v39 = sub_21FABDCF8(v23, v25, &v40);
    sub_21FC5BAC0();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v16, (os_log_type_t)v35, "ClinicalSharingAccountStore: updating clinical sharing user status for account %s: %s", (uint8_t *)v19, 0x16u);
    v26 = v34;
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v26, -1, -1);
    MEMORY[0x2207D105C](v19, -1, -1);

    a2 = v18;
    a1 = v36;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);

  }
  v27 = sub_21FC5AAAC();
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = (uint64_t)v37;
  v28(v37, 1, 1, v27);
  v30 = (uint64_t)v38;
  v28(v38, 1, 1, v27);
  v31 = sub_21FBB9444(a1, v29, v30, a2, 0, 0, 0);
  sub_21FA71828(v30);
  sub_21FA71828(v29);
  return v31;
}

uint64_t sub_21FA71828(uint64_t a1)
{
  uint64_t v2;

  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21FA7187C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FA718D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_21FC5AAF4();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void sub_21FA7194C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_21FC5AAF4() - 8) + 80);
  sub_21FC2FBA0(a1, a2, *(void **)(v2 + 16), v2 + ((v5 + 24) & ~v5));
}

void sub_21FA7199C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406CC18)
  {
    sub_21FA2CDB4();
    v0 = sub_21FC5B250();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406CC18);
  }
}

uint64_t sub_21FA71A00()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void sub_21FA71A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_21FC2F2D4(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24));
}

void sub_21FA71A34()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406CAE8)
  {
    sub_21FA2D1A0(255, &qword_25406CB20, (uint64_t (*)(uint64_t))sub_21FA71AB8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FA2CDB4();
    v0 = sub_21FC5B250();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406CAE8);
  }
}

void sub_21FA71AB8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25406CB50)
  {
    sub_21FA5BE58(255, (unint64_t *)&qword_25406BA88);
    sub_21FA5BE58(255, (unint64_t *)&qword_25406CB48);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25406CB50);
  }
}

ValueMetadata *type metadata accessor for ClinicalSharingAccountStore()
{
  return &type metadata for ClinicalSharingAccountStore;
}

uint64_t sub_21FA71B54@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  uint64_t result;

  v5 = *a1;
  v6 = a1[1];
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v5;
  v7[3] = v6;
  v7[4] = a2;
  sub_21FA71E70();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = a2;
  sub_21FC5B25C();
  sub_21FA71ED4();
  v9 = sub_21FC5B280();
  result = swift_release();
  *a3 = v9;
  return result;
}

uint64_t sub_21FA71C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  _QWORD aBlock[7];

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  sub_21FC5A65C();
  swift_allocObject();
  swift_retain();
  sub_21FC5A650();
  sub_21FA71F78();
  v11 = sub_21FC5A644();
  v13 = v12;
  swift_release();
  v14 = (void *)sub_21FC5A9D4();
  v15 = (void *)sub_21FC5B5E0();
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = sub_21FA71F40;
  v16[3] = v10;
  v16[4] = a3;
  v16[5] = a4;
  aBlock[4] = sub_21FA72094;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_21FBB5FDC;
  aBlock[3] = &block_descriptor_0;
  v17 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  objc_msgSend(a5, sel_setData_forKey_completion_, v14, v15, v17);
  _Block_release(v17);

  return sub_21FA2D770(v11, v13);
}

uint64_t sub_21FA71E30()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_21FA71E64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_21FA71C28(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32));
}

void sub_21FA71E70()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406CAD8)
  {
    sub_21FA2CDB4();
    v0 = sub_21FC5B250();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406CAD8);
  }
}

unint64_t sub_21FA71ED4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25406CAD0;
  if (!qword_25406CAD0)
  {
    sub_21FA71E70();
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9E58], v1);
    atomic_store(result, (unint64_t *)&qword_25406CAD0);
  }
  return result;
}

uint64_t sub_21FA71F1C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FA71F40(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *);
  _QWORD v6[2];
  char v7;

  v4 = *(uint64_t (**)(_QWORD *))(v3 + 16);
  v6[0] = a1;
  v6[1] = a2;
  v7 = a3 & 1;
  return v4(v6);
}

unint64_t sub_21FA71F78()
{
  unint64_t result;

  result = qword_25406B288;
  if (!qword_25406B288)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC6013C, &type metadata for ClinicalSharingGraphMetadata);
    atomic_store(result, (unint64_t *)&qword_25406B288);
  }
  return result;
}

void sub_21FA71FBC(char a1, id a2, void (*a3)(id, uint64_t, uint64_t), uint64_t a4, void *a5, uint64_t a6)
{
  id v8;
  uint64_t v9;
  id v10;

  if ((a1 & 1) != 0)
  {
    a3(a5, a6, 0);
  }
  else
  {
    if (a2)
    {
      v8 = a2;
    }
    else
    {
      sub_21FA720B8();
      v8 = (id)swift_allocError();
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_BYTE *)(v9 + 16) = 2;
    }
    v10 = a2;
    a3(v8, 0, 1);

  }
}

uint64_t sub_21FA72060()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_21FA72094(char a1, void *a2)
{
  uint64_t v2;

  sub_21FA71FBC(a1, a2, *(void (**)(id, uint64_t, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

unint64_t sub_21FA720B8()
{
  unint64_t result;

  result = qword_255540D20;
  if (!qword_255540D20)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC74948, &type metadata for DaemonError);
    atomic_store(result, (unint64_t *)&qword_255540D20);
  }
  return result;
}

HealthRecordsDaemon::HTTPHeader_optional __swiftcall HKFHIRCredential.asAuthorizationHeader()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  HealthRecordsDaemon::HTTPHeader_optional result;

  v2 = v0;
  v3 = objc_msgSend(v1, sel_accessToken);
  if (v3)
  {
    v4 = v3;
    sub_21FC5B604();

    sub_21FC5B6AC();
    v5 = swift_bridgeObjectRelease();
    *(_OWORD *)v2 = xmmword_21FC5FB50;
    *(_QWORD *)(v2 + 16) = 0x20726572616542;
    *(_QWORD *)(v2 + 24) = 0xE700000000000000;
  }
  else
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v9 = sub_21FC5AFD4();
    __swift_project_value_buffer(v9, (uint64_t)qword_25406D830);
    v10 = sub_21FC5AFC8();
    v11 = sub_21FC5B97C();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_21FA27000, v10, v11, "HKFHIRCredential.asAuthorizationHeader: No accessToken", v12, 2u);
      MEMORY[0x2207D105C](v12, -1, -1);
    }

    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  result.value.value._object = v8;
  result.value.value._countAndFlagsBits = v7;
  result.value.name._object = v6;
  result.value.name._countAndFlagsBits = v5;
  return result;
}

HealthRecordsDaemon::HTTPHeader __swiftcall HTTPHeader.init(name:value:)(Swift::String name, Swift::String value)
{
  Swift::String *v2;
  HealthRecordsDaemon::HTTPHeader result;

  *v2 = name;
  v2[1] = value;
  result.value = value;
  result.name = name;
  return result;
}

uint64_t HTTPHeader.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HTTPHeader.value.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HTTPHeader.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_21FC5B67C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_21FC5B67C();
  return swift_bridgeObjectRelease();
}

uint64_t HTTPHeader.hashValue.getter()
{
  sub_21FC5BE8C();
  swift_bridgeObjectRetain();
  sub_21FC5B67C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_21FC5B67C();
  swift_bridgeObjectRelease();
  return sub_21FC5BEB0();
}

uint64_t sub_21FA723B4()
{
  sub_21FC5BE8C();
  swift_bridgeObjectRetain();
  sub_21FC5B67C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_21FC5B67C();
  swift_bridgeObjectRelease();
  return sub_21FC5BEB0();
}

uint64_t sub_21FA72438()
{
  swift_bridgeObjectRetain();
  sub_21FC5B67C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_21FC5B67C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21FA724A8()
{
  sub_21FC5BE8C();
  swift_bridgeObjectRetain();
  sub_21FC5B67C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_21FC5B67C();
  swift_bridgeObjectRelease();
  return sub_21FC5BEB0();
}

Swift::Void __swiftcall URLRequest.add(header:)(HealthRecordsDaemon::HTTPHeader header)
{
  sub_21FC5A5B4();
}

uint64_t _s19HealthRecordsDaemon10HTTPHeaderV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t result;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a2[2];
  v5 = a2[3];
  v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = sub_21FC5BDF0(), result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
      return 1;
    else
      return sub_21FC5BDF0();
  }
  return result;
}

unint64_t sub_21FA725CC()
{
  unint64_t result;

  result = qword_25553FA50;
  if (!qword_25553FA50)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for HTTPHeader, &type metadata for HTTPHeader);
    atomic_store(result, (unint64_t *)&qword_25553FA50);
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPHeader()
{
  return &type metadata for HTTPHeader;
}

_QWORD *initializeBufferWithCopyOfBuffer for SexMetricField(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for SexMetricField()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for SexMetricField(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for SexMetricField(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SexMetricField(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SexMetricField(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SexMetricField()
{
  return &type metadata for SexMetricField;
}

ValueMetadata *type metadata accessor for IHAMetricField()
{
  return &type metadata for IHAMetricField;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for PBDataType(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PBTimeSeries.Value.OneOf_AdditionalData(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AgeMetricField()
{
  return &type metadata for AgeMetricField;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for ErrorMessageMetricField()
{
  return &type metadata for ErrorMessageMetricField;
}

_QWORD *initializeBufferWithCopyOfBuffer for ErrorDomainMetricField(_QWORD *a1, id *a2)
{
  id v3;
  id v4;

  v3 = *a2;
  v4 = *a2;
  *a1 = v3;
  return a1;
}

void destroy for ErrorDomainMetricField(id *a1)
{

}

void **assignWithCopy for ErrorDomainMetricField(void **a1, id *a2)
{
  void *v3;
  id v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  v5 = *a2;
  *a1 = v4;

  return a1;
}

void **assignWithTake for ErrorDomainMetricField(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for ClinicalSharingFHIRSearchResult(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ClinicalSharingFHIRSearchResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ErrorDomainMetricField()
{
  return &type metadata for ErrorDomainMetricField;
}

uint64_t getEnumTagSinglePayload for SyncSuccessMetricField(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s19HealthRecordsDaemon14IHAMetricFieldVwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21FA72A80 + 4 * byte_21FC5FBF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21FA72AB4 + 4 * asc_21FC5FBF0[v4]))();
}

uint64_t sub_21FA72AB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FA72ABC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FA72AC4);
  return result;
}

uint64_t sub_21FA72AD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FA72AD8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21FA72ADC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FA72AE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IHRMetricField()
{
  return &type metadata for IHRMetricField;
}

_UNKNOWN **sub_21FA72B00()
{
  return &off_24E485AD0;
}

_UNKNOWN **sub_21FA72B0C()
{
  return &off_24E485B18;
}

_UNKNOWN **sub_21FA72B18()
{
  return &off_24E485B00;
}

uint64_t sub_21FA72B24()
{
  return 1;
}

void static ContentVariables.asValueMap(substituting:)()
{
  JUMPOUT(0x21FA72D00);
}

{
  JUMPOUT(0x21FA732F0);
}

void *static ContentVariables.allCases.getter()
{
  return &unk_24E480770;
}

uint64_t ContentVariables.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21FA7302C + 4 * byte_21FC5FD50[*v0]))(0x4449746E65696C63, 0xE800000000000000);
}

uint64_t sub_21FA7302C()
{
  return 0x6553746E65696C63;
}

uint64_t sub_21FA7304C()
{
  return 1701080931;
}

unint64_t sub_21FA7305C()
{
  return 0xD000000000000015;
}

uint64_t sub_21FA730B4()
{
  return 0x746E6569746170;
}

uint64_t sub_21FA730CC()
{
  return 0x5468736572666572;
}

uint64_t sub_21FA730EC()
{
  return 0x656372756F736572;
}

uint64_t sub_21FA73108()
{
  return 0x44494C44746F6F72;
}

uint64_t sub_21FA7311C()
{
  return 0x6574617473;
}

HealthRecordsDaemon::ContentVariables_optional __swiftcall ContentVariables.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  HealthRecordsDaemon::ContentVariables_optional result;
  char v5;

  v2 = v1;
  v3 = sub_21FC5BCD0();
  result.value = swift_bridgeObjectRelease();
  v5 = 12;
  if (v3 < 0xC)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t sub_21FA73630()
{
  return sub_21FA2E070();
}

uint64_t sub_21FA7363C()
{
  sub_21FC5BE8C();
  ContentVariables.rawValue.getter();
  sub_21FC5B67C();
  swift_bridgeObjectRelease();
  return sub_21FC5BEB0();
}

uint64_t sub_21FA736A0()
{
  ContentVariables.rawValue.getter();
  sub_21FC5B67C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21FA736F0()
{
  sub_21FC5BE8C();
  ContentVariables.rawValue.getter();
  sub_21FC5B67C();
  swift_bridgeObjectRelease();
  return sub_21FC5BEB0();
}

HealthRecordsDaemon::ContentVariables_optional sub_21FA73750(Swift::String *a1)
{
  return ContentVariables.init(rawValue:)(*a1);
}

uint64_t sub_21FA7375C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ContentVariables.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_21FA73780(_QWORD *a1@<X8>)
{
  *a1 = &unk_24E480770;
}

uint64_t static SchemaSubstitutions.geLastFetchedDate(_:)(char *a1)
{
  return sub_21FA73A84(a1, 275);
}

uint64_t static SchemaSubstitutions.determineSinceDate(lastFetchDate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = a2;
  v3 = sub_21FC5ABF0();
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v31 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_21FC5AB0C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_21FC5AC08();
  v29 = *(_QWORD *)(v9 - 8);
  v30 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v27 - v16;
  v18 = sub_21FC5AAAC();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA7187C(a1, (uint64_t)v17);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v22(v17, 1, v18) == 1)
  {
    sub_21FA71828((uint64_t)v17);
    return sub_21FC5AA34();
  }
  else
  {
    v28 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
    v28(v21, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BDCEF70], v5);
    sub_21FC5AB18();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v25 = v31;
    v24 = v32;
    v26 = v33;
    (*(void (**)(char *, _QWORD, uint64_t))(v32 + 104))(v31, *MEMORY[0x24BDCF250], v33);
    sub_21FC5AB9C();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v26);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v30);
    if (v22(v15, 1, v18) == 1)
    {
      sub_21FC5AA34();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
      return sub_21FA71828((uint64_t)v15);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v28)(v34, v15, v18);
    }
  }
}

uint64_t static SchemaSubstitutions.lastFetchedDate(_:)(uint64_t a1)
{
  return sub_21FA73C9C(a1, 275);
}

uint64_t static SchemaSubstitutions.geLastFetchedDateTime(_:)(char *a1)
{
  return sub_21FA73A84(a1, 1907);
}

uint64_t sub_21FA73A84(char *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  void (*v15)(char *, _QWORD, uint64_t, uint64_t);
  id v16;
  void *v17;
  id v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  _QWORD v22[2];

  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v22 - v5;
  v7 = sub_21FC5AAAC();
  v8 = *(_QWORD **)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v22 - v12;
  v14 = (void (*)(char *, char *, uint64_t))v8[2];
  v14(v6, a1, v7);
  v15 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v8[7];
  v15(v6, 0, 1, v7);
  static SchemaSubstitutions.determineSinceDate(lastFetchDate:)((uint64_t)v6, (uint64_t)v13);
  sub_21FA71828((uint64_t)v6);
  v22[0] = 25959;
  v22[1] = 0xE200000000000000;
  v14(v6, v13, v7);
  v15(v6, 0, 1, v7);
  static SchemaSubstitutions.determineSinceDate(lastFetchDate:)((uint64_t)v6, (uint64_t)v11);
  sub_21FA71828((uint64_t)v6);
  v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD15D0]), sel_init);
  objc_msgSend(v16, sel_setFormatOptions_, a2);
  v17 = (void *)sub_21FC5AA64();
  v18 = objc_msgSend(v16, sel_stringFromDate_, v17);

  sub_21FC5B604();
  v19 = (void (*)(char *, uint64_t))v8[1];
  v19(v11, v7);
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  v20 = v22[0];
  v19(v13, v7);
  return v20;
}

uint64_t static SchemaSubstitutions.lastFetchedDateTime(_:)(uint64_t a1)
{
  return sub_21FA73C9C(a1, 1907);
}

uint64_t sub_21FA73C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v16;

  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v16 - v5;
  v7 = sub_21FC5AAAC();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  static SchemaSubstitutions.determineSinceDate(lastFetchDate:)((uint64_t)v6, (uint64_t)v10);
  sub_21FA71828((uint64_t)v6);
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD15D0]), sel_init);
  objc_msgSend(v11, sel_setFormatOptions_, a2);
  v12 = (void *)sub_21FC5AA64();
  v13 = objc_msgSend(v11, sel_stringFromDate_, v12);

  v14 = sub_21FC5B604();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v14;
}

unint64_t sub_21FA73E18(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  sub_21FC5AAF4();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
  sub_21FA2A08C((unint64_t *)&qword_25406AAF0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  v3 = sub_21FC5B58C();
  return sub_21FA74C44(a1, v3, v2, &qword_25553FB98, MEMORY[0x24BDCEA98]);
}

unint64_t sub_21FA73EB0(uint64_t a1, char a2)
{
  char v3;
  uint64_t v4;

  v3 = a2 & 1;
  sub_21FC5BE8C();
  sub_21FA79AF8();
  sub_21FC5B598();
  v4 = sub_21FC5BEB0();
  return sub_21FA74280(a1, v3, v4);
}

unint64_t sub_21FA73F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FC5BE8C();
  sub_21FC5B67C();
  v4 = sub_21FC5BEB0();
  return sub_21FA74368(a1, a2, v4);
}

unint64_t sub_21FA73F98(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_21FC5BA54();
  return sub_21FA74448(a1, v2);
}

unint64_t sub_21FA73FC8(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  sub_21FC5A6C8();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878];
  sub_21FA2A08C(&qword_25553F0D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], MEMORY[0x24BDCB890]);
  v3 = sub_21FC5B58C();
  return sub_21FA74C44(a1, v3, v2, &qword_25553FC40, MEMORY[0x24BDCB8A0]);
}

uint64_t sub_21FA74060(uint64_t a1)
{
  uint64_t v2;

  sub_21FC5BE8C();
  ContentVariables.rawValue.getter();
  sub_21FC5B67C();
  swift_bridgeObjectRelease();
  v2 = sub_21FC5BEB0();
  return sub_21FA74560(a1, v2);
}

unint64_t sub_21FA740D8(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[72];

  sub_21FC5BE8C();
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 136))(v4);
  v2 = sub_21FC5BEB0();
  return sub_21FA748F4(a1, v2);
}

unint64_t sub_21FA74138(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_21FC5BB20();
  return sub_21FA74A0C(a1, v2);
}

unint64_t sub_21FA74168(uint64_t a1)
{
  uint64_t v2;

  sub_21FC5B604();
  sub_21FC5BE8C();
  sub_21FC5B67C();
  v2 = sub_21FC5BEB0();
  swift_bridgeObjectRelease();
  return sub_21FA74AD0(a1, v2);
}

unint64_t sub_21FA741E8(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  sub_21FC5AAAC();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
  sub_21FA2A08C(&qword_25553FC30, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  v3 = sub_21FC5B58C();
  return sub_21FA74C44(a1, v3, v2, &qword_25553FC38, MEMORY[0x24BDCE958]);
}

unint64_t sub_21FA74280(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    while ((a2 & 1) == 0)
    {
      if (*(_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * result) != a1)
      {
        result = (result + 1) & v7;
        if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
          continue;
      }
      return result;
    }
    return ((uint64_t (*)(void))((char *)&loc_21FA74300 + 4 * byte_21FC5FD5C[a1]))();
  }
  return result;
}

unint64_t sub_21FA74368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_21FC5BDF0() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_21FC5BDF0() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_21FA74448(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_21FA5BE58(0, (unint64_t *)&qword_25553FB78);
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = sub_21FC5BA60();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = sub_21FC5BA60();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

uint64_t sub_21FA74560(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_21FA748F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v6 = v2;
    v8 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v2 + 48) + 8 * i) + 128);
    swift_retain();
    LOBYTE(v8) = v8(a1);
    swift_release();
    if ((v8 & 1) == 0)
    {
      v9 = ~v4;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 48) + 8 * i) + 128);
        swift_retain();
        v11 = v10(a1);
        swift_release();
        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_21FA74A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_21FA7B700(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x2207D051C](v9, a1);
      sub_21FA7B74C((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_21FA74AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_21FC5B604();
    v8 = v7;
    if (v6 == sub_21FC5B604() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_21FC5BDF0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_21FC5B604();
          v15 = v14;
          if (v13 == sub_21FC5B604() && v15 == v16)
            break;
          v18 = sub_21FC5BDF0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_21FA74C44(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  char v17;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  unint64_t *v21;
  uint64_t v22;

  v21 = a4;
  v22 = a5;
  v6 = v5;
  v19 = a1;
  v20 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v19 - v10;
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = a2 & ~v12;
  if (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v6 + 48) + v15 * v13, v8);
      sub_21FA2A08C(v21, v20, v22);
      v17 = sub_21FC5B5D4();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v17 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

uint64_t sub_21FA74D74(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  sub_21FA7B780(0, (unint64_t *)&qword_25553FB68, (void (*)(uint64_t))sub_21FA52E58);
  v36 = a2;
  v6 = sub_21FC5BC94();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_21FC5BE8C();
    sub_21FC5B67C();
    result = sub_21FC5BEB0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21FA75094(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  sub_21FA79B3C(0, &qword_25553FB70, (uint64_t)&qword_25553EF20, (uint64_t)&type metadata for QuerySummary.QueryOutputDescription, (void (*)(uint64_t, uint64_t, uint64_t))sub_21FA5304C);
  v36 = a2;
  v6 = sub_21FC5BC94();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_21FC5BE8C();
    sub_21FC5B67C();
    result = sub_21FC5BEB0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21FA753C4(uint64_t a1, int a2)
{
  return sub_21FA78068(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (void (*)(_QWORD))sub_21FA7BB1C, &qword_25553F0D0, MEMORY[0x24BDCB890]);
}

uint64_t sub_21FA753E8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  sub_21FA7B954(0, &qword_25553FC08);
  v42 = a2;
  v6 = sub_21FC5BC94();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_21FC5BE8C();
    sub_21FC5B67C();
    result = sub_21FC5BEB0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21FA75724(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;

  v3 = v2;
  v46 = sub_21FC5AAAC();
  v5 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v45 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  sub_21FA7B578();
  v8 = sub_21FC5BC94();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_40;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 64);
  v43 = (_QWORD *)(v7 + 64);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v41 = v2;
  v42 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 64;
  result = swift_retain();
  v16 = 0;
  HIDWORD(v40) = a2;
  v17 = 16;
  if ((a2 & 1) != 0)
    v17 = 32;
  v44 = v17;
  while (1)
  {
    if (v13)
    {
      v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v21 = v20 | (v16 << 6);
      goto LABEL_24;
    }
    v22 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v42)
      break;
    v23 = v43;
    v24 = v43[v22];
    ++v16;
    if (!v24)
    {
      v16 = v22 + 1;
      if (v22 + 1 >= v42)
        goto LABEL_33;
      v24 = v43[v16];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v42)
        {
LABEL_33:
          swift_release();
          v3 = v41;
          if ((v40 & 0x100000000) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = v43[v25];
        if (!v24)
        {
          while (1)
          {
            v16 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v16 >= v42)
              goto LABEL_33;
            v24 = v43[v16];
            ++v25;
            if (v24)
              goto LABEL_23;
          }
        }
        v16 = v25;
      }
    }
LABEL_23:
    v13 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v16 << 6);
LABEL_24:
    v26 = *(_QWORD *)(v7 + 56);
    v27 = v7;
    v28 = *(_QWORD *)(v7 + 48) + 16 * v21;
    v29 = *(_QWORD *)v28;
    v30 = *(_BYTE *)(v28 + 8);
    v31 = *(_QWORD *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + v44))(v45, v26 + v31 * v21, v46);
    v47 = v29;
    v48 = v30;
    sub_21FC5BE8C();
    sub_21FA79AF8();
    sub_21FC5B598();
    result = sub_21FC5BEB0();
    v32 = -1 << *(_BYTE *)(v9 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v14 + 8 * (v33 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v14 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v14 + 8 * v34);
      }
      while (v38 == -1);
      v18 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = *(_QWORD *)(v9 + 48) + 16 * v18;
    *(_QWORD *)v19 = v29;
    *(_BYTE *)(v19 + 8) = v30;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v9 + 56) + v31 * v18, v45, v46);
    ++*(_QWORD *)(v9 + 16);
    v7 = v27;
  }
  swift_release();
  v3 = v41;
  v23 = v43;
  if ((v40 & 0x100000000) == 0)
    goto LABEL_40;
LABEL_36:
  v39 = 1 << *(_BYTE *)(v7 + 32);
  if (v39 >= 64)
    bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v39;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v9;
  return result;
}

uint64_t sub_21FA75AB0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char v36;
  char v37[72];

  v3 = v2;
  v5 = *v2;
  sub_21FA7B8D4(0, &qword_25553FC00);
  v36 = a2;
  v6 = sub_21FC5BC94();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v2;
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v35 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v35 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v35 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v35 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = 8 * v21;
    v31 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v30);
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v30);
    if ((v36 & 1) == 0)
      swift_retain();
    sub_21FC5BE8C();
    (*(void (**)(char *))(*(_QWORD *)v31 + 136))(v37);
    result = sub_21FC5BEB0();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v23 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v23, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21FA75DBC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v3 = v2;
  v5 = *v2;
  sub_21FA7B954(0, (unint64_t *)&qword_25406BB00);
  v6 = sub_21FC5BC94();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v11)
        goto LABEL_34;
      v23 = *(_QWORD *)(v36 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v14 >= v11)
              goto LABEL_34;
            v23 = *(_QWORD *)(v36 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v14 = v24;
      }
    }
LABEL_21:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v40 = *(_QWORD *)(v25 + 32);
      v38 = v26;
      v39 = v27;
      sub_21FA7B73C((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_21FA7B700(v25, (uint64_t)&v38);
      sub_21FA2DB6C(*(_QWORD *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    result = sub_21FC5BB20();
    v28 = -1 << *(_BYTE *)(v7 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v7 + 48) + 40 * v15;
    v17 = v38;
    v18 = v39;
    *(_QWORD *)(v16 + 32) = v40;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    result = (uint64_t)sub_21FA7B73C(v37, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v15));
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21FA760F0(uint64_t a1, char a2)
{
  return sub_21FA760FC(a1, a2, (void (*)(_QWORD))sub_21FA7B5E0);
}

uint64_t sub_21FA760FC(uint64_t a1, char a2, void (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v4 = v3;
  v6 = *v3;
  a3(0);
  v37 = a2;
  v7 = sub_21FC5BC94();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v36 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v35)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_21FC5BE8C();
    sub_21FC5B67C();
    result = sub_21FC5BEB0();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v6 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t sub_21FA7640C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  _OWORD v36[2];

  v3 = v2;
  v5 = *v2;
  sub_21FA7B954(0, &qword_25406BAF8);
  v6 = a2;
  v7 = sub_21FC5BC94();
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v35 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v19 >= v34)
          goto LABEL_34;
        v20 = v35[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v34)
            goto LABEL_34;
          v20 = v35[v14];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v34)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((v6 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v35[v21];
            if (!v20)
            {
              while (1)
              {
                v14 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_41;
                if (v14 >= v34)
                  goto LABEL_34;
                v20 = v35[v14];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v14 = v21;
          }
        }
LABEL_21:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v24 = *v22;
      v23 = v22[1];
      v25 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      if ((v6 & 1) != 0)
      {
        sub_21FA7B73C(v25, v36);
      }
      else
      {
        sub_21FA2DB6C((uint64_t)v25, (uint64_t)v36);
        swift_bridgeObjectRetain();
      }
      sub_21FC5BE8C();
      sub_21FC5B67C();
      result = sub_21FC5BEB0();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
      *v16 = v24;
      v16[1] = v23;
      result = (uint64_t)sub_21FA7B73C(v36, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_21FA7672C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  char v19;

  v3 = v2;
  v5 = *v2;
  sub_21FA7B874(0, &qword_25553FBF8);
  v19 = a2;
  v6 = sub_21FC5BC94();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_28;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v18 = (unint64_t)(v7 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v10 = __clz(__rbit64(v9));
    goto LABEL_18;
  }
  if (v18 <= 1)
  {
    swift_release();
    v11 = (_QWORD *)(v5 + 64);
    if ((v19 & 1) == 0)
      goto LABEL_28;
    goto LABEL_24;
  }
  v11 = (_QWORD *)(v5 + 64);
  v12 = *(_QWORD *)(v5 + 72);
  v13 = 1;
  if (v12)
    goto LABEL_17;
  v13 = 2;
  if (v18 <= 2)
    goto LABEL_21;
  v12 = *(_QWORD *)(v5 + 80);
  if (v12)
  {
LABEL_17:
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_18:
    v15 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v10);
    if ((v19 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_21FC5BE8C();
    __asm { BR              X8 }
  }
  v14 = 3;
  if (v18 > 3)
  {
    v12 = *(_QWORD *)(v5 + 88);
    if (v12)
    {
      v13 = 3;
      goto LABEL_17;
    }
    while (1)
    {
      v13 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        JUMPOUT(0x21FA76B88);
      }
      if (v13 >= v18)
        break;
      v12 = *(_QWORD *)(v5 + 64 + 8 * v13);
      ++v14;
      if (v12)
        goto LABEL_17;
    }
  }
LABEL_21:
  swift_release();
  if ((v19 & 1) == 0)
    goto LABEL_28;
LABEL_24:
  v16 = 1 << *(_BYTE *)(v5 + 32);
  if (v16 >= 64)
    bzero(v11, ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v11 = -1 << v16;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_28:
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t sub_21FA76BB8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t result;
  _QWORD *v19;
  _OWORD v20[2];

  v3 = v2;
  v5 = *v2;
  sub_21FA7B874(0, (unint64_t *)&qword_25553FBE8);
  v6 = sub_21FC5BC94();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_27;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  v19 = (_QWORD *)(v5 + 64);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v11 = __clz(__rbit64(v9));
    goto LABEL_18;
  }
  if (v10 > 1)
  {
    v12 = *(_QWORD *)(v5 + 72);
    v13 = 1;
    if (v12)
      goto LABEL_17;
    v13 = 2;
    if (v10 > 2)
    {
      v12 = *(_QWORD *)(v5 + 80);
      if (!v12)
      {
        v14 = 3;
        if (v10 > 3)
        {
          v12 = *(_QWORD *)(v5 + 88);
          if (v12)
          {
            v13 = 3;
            goto LABEL_17;
          }
          while (1)
          {
            v13 = v14 + 1;
            if (__OFADD__(v14, 1))
            {
              __break(1u);
              JUMPOUT(0x21FA76FF4);
            }
            if (v13 >= v10)
              break;
            v12 = v19[v13];
            ++v14;
            if (v12)
              goto LABEL_17;
          }
        }
        goto LABEL_22;
      }
LABEL_17:
      v11 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_18:
      v15 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v11);
      v16 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v11);
      if ((a2 & 1) != 0)
        sub_21FA7B73C(v16, v20);
      else
        sub_21FA2DB6C((uint64_t)v16, (uint64_t)v20);
      sub_21FC5BE8C();
      __asm { BR              X8 }
    }
  }
LABEL_22:
  swift_release();
  v3 = v2;
  if ((a2 & 1) != 0)
  {
    v17 = 1 << *(_BYTE *)(v5 + 32);
    if (v17 >= 64)
      bzero(v19, ((unint64_t)(v17 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v19 = -1 << v17;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_27:
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t sub_21FA77024(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char v36;
  char v37[72];

  v3 = v2;
  v5 = *v2;
  sub_21FA7B8D4(0, (unint64_t *)&qword_25553FBD8);
  v36 = a2;
  v6 = sub_21FC5BC94();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v2;
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v35 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v35 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v35 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v35 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = 8 * v21;
    v31 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v30);
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v30);
    if ((v36 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
    }
    sub_21FC5BE8C();
    (*(void (**)(char *))(*(_QWORD *)v31 + 136))(v37);
    result = sub_21FC5BEB0();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v23 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v23, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21FA77338(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  char v35;
  __int128 v36[2];

  v3 = v2;
  v5 = *v2;
  sub_21FA7B780(0, &qword_25406BAE8, (void (*)(uint64_t))sub_21FA7B7DC);
  v35 = a2;
  v6 = sub_21FC5BC94();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((v35 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v17);
      if ((v35 & 1) != 0)
      {
        sub_21FA3175C(v24, (uint64_t)v36);
      }
      else
      {
        sub_21FA2CEA0((uint64_t)v24, (uint64_t)v36);
        swift_bridgeObjectRetain();
      }
      sub_21FC5BE8C();
      sub_21FC5B67C();
      result = sub_21FC5BEB0();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = sub_21FA3175C(v36, *(_QWORD *)(v7 + 56) + 40 * v14);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21FA77654(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;

  v3 = v2;
  v5 = *v2;
  sub_21FA79BA0();
  v6 = sub_21FC5BC94();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = 8 * v21;
    v31 = *(void **)(*(_QWORD *)(v5 + 48) + v30);
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      v33 = v31;
      swift_bridgeObjectRetain();
    }
    result = sub_21FC5BA54();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21FA77924(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  sub_21FA79B3C(0, (unint64_t *)&qword_25406BAF0, (uint64_t)&qword_25406BAD0, 0x24BEDCDF0, (void (*)(uint64_t, uint64_t, uint64_t))sub_21FA5BE58);
  v38 = a2;
  v6 = sub_21FC5BC94();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    sub_21FC5BE8C();
    sub_21FC5B67C();
    result = sub_21FC5BEB0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21FA77C4C(uint64_t a1, int a2)
{
  return sub_21FA77C68(a1, a2, (unint64_t *)&qword_25553FBC8, (unint64_t *)&qword_25406CB68);
}

uint64_t sub_21FA77C68(uint64_t a1, int a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t i;
  int v46;

  v7 = v4;
  v9 = sub_21FC5AAF4();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v4;
  sub_21FA7B65C(0, a3, a4);
  v46 = a2;
  v14 = sub_21FC5BC94();
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_41;
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 64);
  v44 = (_QWORD *)(v13 + 64);
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v42 = v4;
  v43 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 64;
  result = swift_retain();
  v22 = 0;
  for (i = v13; ; v13 = i)
  {
    if (v19)
    {
      v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v25 = v24 | (v22 << 6);
      goto LABEL_22;
    }
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v43)
      break;
    v27 = v44;
    v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      v22 = v26 + 1;
      if (v26 + 1 >= v43)
        goto LABEL_34;
      v28 = v44[v22];
      if (!v28)
      {
        v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_34:
          swift_release();
          v7 = v42;
          if ((v46 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            v22 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_43;
            if (v22 >= v43)
              goto LABEL_34;
            v28 = v44[v22];
            ++v29;
            if (v28)
              goto LABEL_21;
          }
        }
        v22 = v29;
      }
    }
LABEL_21:
    v19 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_22:
    v30 = *(_QWORD *)(v10 + 72);
    v31 = *(_QWORD *)(v13 + 48) + v30 * v25;
    if ((v46 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))(v12, v31, v9);
      v32 = *(id *)(*(_QWORD *)(v13 + 56) + 8 * v25);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, v31, v9);
      v32 = *(id *)(*(_QWORD *)(v13 + 56) + 8 * v25);
    }
    sub_21FA2A08C((unint64_t *)&qword_25406AAF0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    result = sub_21FC5B58C();
    v33 = -1 << *(_BYTE *)(v15 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v20 + 8 * (v34 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v20 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v20 + 8 * v35);
      }
      while (v39 == -1);
      v23 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v10 + 32))(*(_QWORD *)(v15 + 48) + v30 * v23, v12, v9);
    *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v23) = v32;
    ++*(_QWORD *)(v15 + 16);
  }
  swift_release();
  v7 = v42;
  v27 = v44;
  if ((v46 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v40 = 1 << *(_BYTE *)(v13 + 32);
  if (v40 >= 64)
    bzero(v27, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v40;
  *(_QWORD *)(v13 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v7 = v15;
  return result;
}

uint64_t sub_21FA78014(uint64_t a1, int a2)
{
  return sub_21FA78068(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (void (*)(_QWORD))sub_21FA7AD78, (unint64_t *)&qword_25406AAF0, MEMORY[0x24BDCEA88]);
}

uint64_t sub_21FA78038(uint64_t a1, char a2)
{
  return sub_21FA760FC(a1, a2, (void (*)(_QWORD))sub_21FA7B9A0);
}

uint64_t sub_21FA78044(uint64_t a1, int a2)
{
  return sub_21FA78068(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (void (*)(_QWORD))sub_21FA7BA70, &qword_25553FC30, MEMORY[0x24BDCE930]);
}

uint64_t sub_21FA78068(uint64_t a1, int a2, uint64_t (*a3)(uint64_t), void (*a4)(_QWORD), unint64_t *a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  _QWORD *v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t i;
  uint64_t (*v46)(uint64_t);
  unint64_t *v47;
  uint64_t v48;
  int v49;

  v47 = a5;
  v48 = a6;
  v8 = v6;
  v46 = a3;
  v10 = a3(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v42 - v12;
  v14 = *v6;
  a4(0);
  v49 = a2;
  v15 = sub_21FC5BC94();
  v16 = v15;
  if (!*(_QWORD *)(v14 + 16))
    goto LABEL_41;
  v17 = 1 << *(_BYTE *)(v14 + 32);
  v18 = *(_QWORD *)(v14 + 64);
  v44 = (_QWORD *)(v14 + 64);
  if (v17 < 64)
    v19 = ~(-1 << v17);
  else
    v19 = -1;
  v20 = v19 & v18;
  v42 = v6;
  v43 = (unint64_t)(v17 + 63) >> 6;
  v21 = v15 + 64;
  result = swift_retain();
  v23 = 0;
  for (i = v14; ; v14 = i)
  {
    if (v20)
    {
      v25 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v26 = v25 | (v23 << 6);
      goto LABEL_22;
    }
    v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v27 >= v43)
      break;
    v28 = v44;
    v29 = v44[v27];
    ++v23;
    if (!v29)
    {
      v23 = v27 + 1;
      if (v27 + 1 >= v43)
        goto LABEL_34;
      v29 = v44[v23];
      if (!v29)
      {
        v30 = v27 + 2;
        if (v30 >= v43)
        {
LABEL_34:
          swift_release();
          v8 = v42;
          if ((v49 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v29 = v44[v30];
        if (!v29)
        {
          while (1)
          {
            v23 = v30 + 1;
            if (__OFADD__(v30, 1))
              goto LABEL_43;
            if (v23 >= v43)
              goto LABEL_34;
            v29 = v44[v23];
            ++v30;
            if (v29)
              goto LABEL_21;
          }
        }
        v23 = v30;
      }
    }
LABEL_21:
    v20 = (v29 - 1) & v29;
    v26 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_22:
    v31 = *(_QWORD *)(v11 + 72);
    v32 = *(_QWORD *)(v14 + 48) + v31 * v26;
    if ((v49 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v11 + 32))(v13, v32, v10);
      v33 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v26);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v13, v32, v10);
      v33 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v26);
      swift_bridgeObjectRetain();
    }
    sub_21FA2A08C(v47, v46, v48);
    result = sub_21FC5B58C();
    v34 = -1 << *(_BYTE *)(v16 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v21 + 8 * (v35 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v21 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v21 + 8 * v36);
      }
      while (v40 == -1);
      v24 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v21 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 32))(*(_QWORD *)(v16 + 48) + v31 * v24, v13, v10);
    *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v24) = v33;
    ++*(_QWORD *)(v16 + 16);
  }
  swift_release();
  v8 = v42;
  v28 = v44;
  if ((v49 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v41 = 1 << *(_BYTE *)(v14 + 32);
  if (v41 >= 64)
    bzero(v28, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v28 = -1 << v41;
  *(_QWORD *)(v14 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v8 = v16;
  return result;
}

uint64_t sub_21FA783F4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_21FA7841C(a1, a2, a3, a4, (void (*)(void))sub_21FA79384, (void (*)(void))sub_21FA74D74);
}

uint64_t sub_21FA78408(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_21FA7841C(a1, a2, a3, a4, (void (*)(void))sub_21FA79544, (void (*)(void))sub_21FA75094);
}

uint64_t sub_21FA7841C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void))
{
  _QWORD *v6;
  _QWORD *v9;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;

  v9 = v6;
  v14 = *v6;
  v16 = sub_21FA73F34(a2, a3);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v20 = v15;
  v21 = *(_QWORD *)(v14 + 24);
  if (v21 >= v19 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    a5();
LABEL_7:
    v22 = (_QWORD *)*v9;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v23 + 8 * v16) = a1;
      return result;
    }
LABEL_11:
    v22[(v16 >> 6) + 8] |= 1 << v16;
    v27 = (uint64_t *)(v22[6] + 16 * v16);
    *v27 = a2;
    v27[1] = a3;
    *(_QWORD *)(v22[7] + 8 * v16) = a1;
    v28 = v22[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (!v29)
    {
      v22[2] = v30;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  a6();
  v25 = sub_21FA73F34(a2, a3);
  if ((v20 & 1) == (v26 & 1))
  {
    v16 = v25;
    v22 = (_QWORD *)*v9;
    if ((v20 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_21FC5BE20();
  __break(1u);
  return result;
}

uint64_t sub_21FA7858C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v6 = v5;
  v12 = *v5;
  v14 = sub_21FA73F34(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_21FA79718();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      result = swift_bridgeObjectRelease();
      *v21 = a1;
      v21[1] = a2;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 16 * v14);
    *v25 = a3;
    v25[1] = a4;
    v26 = (_QWORD *)(v20[7] + 16 * v14);
    *v26 = a1;
    v26[1] = a2;
    v27 = v20[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_21FA753E8(v17, a5 & 1);
  v23 = sub_21FA73F34(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_21FC5BE20();
  __break(1u);
  return result;
}

uint64_t sub_21FA78700(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v3;
  v10 = sub_21FA740D8(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_21FA79EEC();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v16[7] + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v18 = 8 * v10;
    *(_QWORD *)(v16[6] + v18) = a2;
    *(_QWORD *)(v16[7] + v18) = a1;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return swift_retain();
    }
    goto LABEL_14;
  }
  sub_21FA75AB0(result, a3 & 1);
  result = sub_21FA740D8(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  type metadata accessor for ClinicalIngestionAnalyticsMetricKey();
  result = sub_21FC5BE20();
  __break(1u);
  return result;
}

uint64_t sub_21FA78844(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = sub_21FC5AAF4();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_21FA73E18(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_21FA7B258((void (*)(_QWORD))sub_21FA7B488);
    goto LABEL_7;
  }
  sub_21FA78068(v17, a3 & 1, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (void (*)(_QWORD))sub_21FA7B488, (unint64_t *)&qword_25406AAF0, MEMORY[0x24BDCEA88]);
  v23 = sub_21FA73E18(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = sub_21FC5BE20();
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_21FA79160(v14, (uint64_t)v11, a1, v20);
}

_OWORD *sub_21FA789C8(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_21FA74138(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_OWORD *)(v16[7] + 32 * v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
        return sub_21FA7B73C(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_21FA7A0A4();
      goto LABEL_7;
    }
    sub_21FA75DBC(v13, a3 & 1);
    v19 = sub_21FA74138(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_21FA7B700(a2, (uint64_t)v21);
      return sub_21FA791F8(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)sub_21FC5BE20();
  __break(1u);
  return result;
}

_OWORD *sub_21FA78B00(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_21FA73F34(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
        return sub_21FA7B73C(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_21FA7A2A8();
      goto LABEL_7;
    }
    sub_21FA7640C(v15, a4 & 1);
    v21 = sub_21FA73F34(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_21FA79270(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)sub_21FC5BE20();
  __break(1u);
  return result;
}

uint64_t sub_21FA78C30(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v10 = *v4;
  v12 = sub_21FA74060(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_21FA7A4AC();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (_QWORD *)(v18[7] + 16 * v12);
      result = swift_bridgeObjectRelease();
      *v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_BYTE *)(v18[6] + v12) = a3;
    v21 = (_QWORD *)(v18[7] + 16 * v12);
    *v21 = a1;
    v21[1] = a2;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_21FA7672C(result, a4 & 1);
  result = sub_21FA74060(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_21FC5BE20();
  __break(1u);
  return result;
}

_OWORD *sub_21FA78D6C(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  _OWORD *result;
  uint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_21FA74060(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_OWORD *)(v16[7] + 32 * v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
        return sub_21FA7B73C(a1, v17);
      }
      return sub_21FA792D8(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_21FA7A660();
      goto LABEL_7;
    }
    sub_21FA76BB8(v13, a3 & 1);
    v19 = sub_21FA74060(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_21FA792D8(v10, a2, a1, v16);
    }
  }
  result = (_OWORD *)sub_21FC5BE20();
  __break(1u);
  return result;
}

uint64_t sub_21FA78E84(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v4 = v3;
  v8 = *v3;
  v10 = sub_21FA740D8(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_21FA7A82C();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v21 = 8 * v10;
    *(_QWORD *)(v16[6] + v21) = a2;
    *(_QWORD *)(v16[7] + v21) = a1;
    v22 = v16[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v16[2] = v24;
      return swift_retain();
    }
    goto LABEL_14;
  }
  sub_21FA77024(v13, a3 & 1);
  v19 = sub_21FA740D8(a2);
  if ((v14 & 1) == (v20 & 1))
  {
    v10 = v19;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  type metadata accessor for ClinicalIngestionAnalyticsMetricKey();
  result = sub_21FC5BE20();
  __break(1u);
  return result;
}

void sub_21FA78FD4(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = sub_21FC5AAF4();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_21FA73E18(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];

      *(_QWORD *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_21FA7B010(&qword_25553FBD0, (unint64_t *)&qword_25406CB48);
    goto LABEL_7;
  }
  sub_21FA77C68(v17, a3 & 1, &qword_25553FBD0, (unint64_t *)&qword_25406CB48);
  v22 = sub_21FA73E18(a2);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_14:
    sub_21FC5BE20();
    __break(1u);
    return;
  }
  v14 = v22;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  sub_21FA79160(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_21FA79160(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_21FC5AAF4();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

_OWORD *sub_21FA791F8(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_21FA7B73C(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

_OWORD *sub_21FA79270(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_21FA7B73C(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

_OWORD *sub_21FA792D8(unint64_t a1, char a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2;
  result = sub_21FA7B73C(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t sub_21FA7933C(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(_QWORD *)(a4[6] + v4) = a2;
  *(_QWORD *)(a4[7] + v4) = a3;
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
  return result;
}

void *sub_21FA79384()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_21FA7B780(0, (unint64_t *)&qword_25553FB68, (void (*)(uint64_t))sub_21FA52E58);
  v2 = *v0;
  v3 = sub_21FC5BC88();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21FA79544()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v1 = v0;
  sub_21FA79B3C(0, &qword_25553FB70, (uint64_t)&qword_25553EF20, (uint64_t)&type metadata for QuerySummary.QueryOutputDescription, (void (*)(uint64_t, uint64_t, uint64_t))sub_21FA5304C);
  v2 = *v0;
  v3 = sub_21FC5BC88();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_23:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v6 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v8 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v9 = 1 << *(_BYTE *)(v2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v2 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_9;
    }
    v21 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v12)
      goto LABEL_23;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v8;
    if (!v22)
    {
      v8 = v21 + 1;
      if (v21 + 1 >= v12)
        goto LABEL_23;
      v22 = *(_QWORD *)(v6 + 8 * v8);
      if (!v22)
        break;
    }
LABEL_22:
    v11 = (v22 - 1) & v22;
    v14 = __clz(__rbit64(v22)) + (v8 << 6);
LABEL_9:
    v15 = 16 * v14;
    v16 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v14);
    v17 = v16[1];
    v18 = 8 * v14;
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v18);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v15);
    *v20 = *v16;
    v20[1] = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v23 = v21 + 2;
  if (v23 >= v12)
    goto LABEL_23;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v8 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v8 >= v12)
      goto LABEL_23;
    v22 = *(_QWORD *)(v6 + 8 * v8);
    ++v23;
    if (v22)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_21FA79718()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_21FA7B954(0, &qword_25553FC08);
  v2 = *v0;
  v3 = sub_21FC5BC88();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_21FA798EC()
{
  unint64_t result;

  result = qword_25553FB48;
  if (!qword_25553FB48)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for ContentVariables, &type metadata for ContentVariables);
    atomic_store(result, (unint64_t *)&qword_25553FB48);
  }
  return result;
}

unint64_t sub_21FA79934()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25553FB50;
  if (!qword_25553FB50)
  {
    sub_21FA5304C(255, &qword_25553FB58);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_25553FB50);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ContentVariables(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentVariables(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_21FA79A68 + 4 * byte_21FC5FD81[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_21FA79A9C + 4 * byte_21FC5FD7C[v4]))();
}

uint64_t sub_21FA79A9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FA79AA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FA79AACLL);
  return result;
}

uint64_t sub_21FA79AB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FA79AC0);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_21FA79AC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FA79ACC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentVariables()
{
  return &type metadata for ContentVariables;
}

ValueMetadata *type metadata accessor for SchemaSubstitutions()
{
  return &type metadata for SchemaSubstitutions;
}

unint64_t sub_21FA79AF8()
{
  unint64_t result;

  result = qword_25553FB60;
  if (!qword_25553FB60)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBDaiDataCategory, &type metadata for PBDaiDataCategory);
    atomic_store(result, (unint64_t *)&qword_25553FB60);
  }
  return result;
}

void sub_21FA79B3C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a5(255, a3, a4);
    v6 = sub_21FC5BCAC();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_21FA79BA0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553FB80)
  {
    sub_21FA5BE58(255, (unint64_t *)&qword_25553FB78);
    sub_21FA2D1A0(255, &qword_25553FB88, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FA79C40();
    v0 = sub_21FC5BCAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553FB80);
  }
}

unint64_t sub_21FA79C40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25553FB90;
  if (!qword_25553FB90)
  {
    v1 = sub_21FA5BE58(255, (unint64_t *)&qword_25553FB78);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BEE5BD8], v1);
    atomic_store(result, (unint64_t *)&qword_25553FB90);
  }
  return result;
}

void *sub_21FA79C98()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t i;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = sub_21FC5AAAC();
  v1 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA7B578();
  v31 = v0;
  v4 = *v0;
  v5 = sub_21FC5BC88();
  v6 = *(_QWORD *)(v4 + 16);
  v35 = v5;
  if (!v6)
  {
    result = (void *)swift_release();
    v29 = v35;
    v28 = v31;
LABEL_28:
    *v28 = v29;
    return result;
  }
  v7 = v5;
  result = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    v7 = v35;
  }
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v32 = v4 + 64;
  v33 = (unint64_t)(v12 + 63) >> 6;
  for (i = v34;
        ;
        result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v23 + 56) + v22, v3, i))
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v25 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v25);
    ++v11;
    if (!v26)
    {
      v11 = v25 + 1;
      if (v25 + 1 >= v33)
        goto LABEL_26;
      v26 = *(_QWORD *)(v32 + 8 * v11);
      if (!v26)
        break;
    }
LABEL_25:
    v14 = (v26 - 1) & v26;
    v17 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = *(_QWORD *)(v4 + 48) + 16 * v17;
    v20 = *(_QWORD *)v19;
    v21 = *(_BYTE *)(v19 + 8);
    v22 = *(_QWORD *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(_QWORD *)(v4 + 56) + v22, i);
    v23 = v35;
    v24 = *(_QWORD *)(v35 + 48) + v18;
    *(_QWORD *)v24 = v20;
    *(_BYTE *)(v24 + 8) = v21;
  }
  v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_26:
    result = (void *)swift_release();
    v28 = v31;
    v29 = v35;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v32 + 8 * v27);
  if (v26)
  {
    v11 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v11 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v11);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_21FA79EEC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_21FA7B8D4(0, &qword_25553FC00);
  v2 = *v0;
  v3 = sub_21FC5BC88();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_retain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21FA7A098()
{
  return sub_21FA7B258((void (*)(_QWORD))sub_21FA7B488);
}

void *sub_21FA7A0A4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  sub_21FA7B954(0, (unint64_t *)&qword_25406BB00);
  v2 = *v0;
  v3 = sub_21FC5BC88();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_21FA7B700(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_21FA2DB6C(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    result = sub_21FA7B73C(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21FA7A2A8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_21FA7B954(0, &qword_25406BAF8);
  v2 = *v0;
  v3 = sub_21FC5BC88();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_21FA2DB6C(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_21FA7B73C(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_21FA7A4AC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_21FA7B874(0, &qword_25553FBF8);
  v2 = *v0;
  v3 = sub_21FC5BC88();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v15);
    v18 = *v16;
    v17 = v16[1];
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 56) + 16 * v15);
    *v19 = v18;
    v19[1] = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21FA7A660()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _OWORD v20[2];

  v1 = v0;
  sub_21FA7B874(0, (unint64_t *)&qword_25553FBE8);
  v2 = *v0;
  v3 = sub_21FC5BC88();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    sub_21FA2DB6C(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v20);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = v16;
    result = sub_21FA7B73C(v20, (_OWORD *)(*(_QWORD *)(v4 + 56) + 32 * v15));
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21FA7A82C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_21FA7B8D4(0, (unint64_t *)&qword_25553FBD8);
  v2 = *v0;
  v3 = sub_21FC5BC88();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    swift_retain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21FA7A9E0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  __int128 v26[2];

  v1 = v0;
  sub_21FA7B780(0, &qword_25406BAE8, (void (*)(uint64_t))sub_21FA7B7DC);
  v2 = *v0;
  v3 = sub_21FC5BC88();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    sub_21FA2CEA0(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_21FA3175C(v26, *(_QWORD *)(v4 + 56) + v20);
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_21FA7ABD4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_21FA79BA0();
  v2 = *v0;
  v3 = sub_21FC5BC88();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_21FA7AD78()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25553FBA0)
  {
    sub_21FC5AAF4();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
    sub_21FA2D1A0(255, &qword_25406BE08, (uint64_t (*)(uint64_t))MEMORY[0x24BE45940], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FA2A08C((unint64_t *)&qword_25406AAF0, v0, MEMORY[0x24BDCEA88]);
    v1 = sub_21FC5BCAC();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25553FBA0);
  }
}

id sub_21FA7AE24()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v1 = v0;
  sub_21FA79B3C(0, (unint64_t *)&qword_25406BAF0, (uint64_t)&qword_25406BAD0, 0x24BEDCDF0, (void (*)(uint64_t, uint64_t, uint64_t))sub_21FA5BE58);
  v2 = *v0;
  v3 = sub_21FC5BC88();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_23:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v6 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v8 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v9 = 1 << *(_BYTE *)(v2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v2 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_9;
    }
    v21 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v12)
      goto LABEL_23;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v8;
    if (!v22)
    {
      v8 = v21 + 1;
      if (v21 + 1 >= v12)
        goto LABEL_23;
      v22 = *(_QWORD *)(v6 + 8 * v8);
      if (!v22)
        break;
    }
LABEL_22:
    v11 = (v22 - 1) & v22;
    v14 = __clz(__rbit64(v22)) + (v8 << 6);
LABEL_9:
    v15 = 16 * v14;
    v16 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v14);
    v17 = v16[1];
    v18 = 8 * v14;
    v19 = *(void **)(*(_QWORD *)(v2 + 56) + v18);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v15);
    *v20 = *v16;
    v20[1] = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    swift_bridgeObjectRetain();
    result = v19;
  }
  v23 = v21 + 2;
  if (v23 >= v12)
    goto LABEL_23;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v8 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v8 >= v12)
      goto LABEL_23;
    v22 = *(_QWORD *)(v6 + 8 * v8);
    ++v23;
    if (v22)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_21FA7AFF4()
{
  return sub_21FA7B010((unint64_t *)&qword_25553FBC8, (unint64_t *)&qword_25406CB68);
}

id sub_21FA7B010(unint64_t *a1, unint64_t *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id result;
  unint64_t v13;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int64_t v30;

  v5 = sub_21FC5AAF4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA7B65C(0, a1, a2);
  v28 = v2;
  v9 = *v2;
  v10 = sub_21FC5BC88();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v28 = v11;
    return result;
  }
  result = (id)(v10 + 64);
  v13 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 64 + 8 * v13)
    result = memmove(result, (const void *)(v9 + 64), 8 * v13);
  v15 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v16 = 1 << *(_BYTE *)(v9 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v9 + 64);
  v29 = v9 + 64;
  v30 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v30)
      goto LABEL_26;
    v25 = *(_QWORD *)(v29 + 8 * v24);
    ++v15;
    if (!v25)
    {
      v15 = v24 + 1;
      if (v24 + 1 >= v30)
        goto LABEL_26;
      v25 = *(_QWORD *)(v29 + 8 * v15);
      if (!v25)
        break;
    }
LABEL_25:
    v18 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_12:
    v21 = *(_QWORD *)(v6 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(_QWORD *)(v9 + 48) + v21, v5);
    v22 = 8 * v20;
    v23 = *(void **)(*(_QWORD *)(v9 + 56) + v22);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v21, v8, v5);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + v22) = v23;
    result = v23;
  }
  v26 = v24 + 2;
  if (v26 >= v30)
    goto LABEL_26;
  v25 = *(_QWORD *)(v29 + 8 * v26);
  if (v25)
  {
    v15 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v15 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v15 >= v30)
      goto LABEL_26;
    v25 = *(_QWORD *)(v29 + 8 * v15);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21FA7B24C()
{
  return sub_21FA7B258((void (*)(_QWORD))sub_21FA7AD78);
}

void *sub_21FA7B258(void (*a1)(_QWORD))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;

  v3 = sub_21FC5AAF4();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(0);
  v26 = v1;
  v7 = *v1;
  v8 = sub_21FC5BC88();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v26 = v9;
    return result;
  }
  result = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v27 = v7 + 64;
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v28)
        goto LABEL_26;
      v23 = *(_QWORD *)(v27 + 8 * v13);
      if (!v23)
        break;
    }
LABEL_25:
    v16 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 48) + v19, v3);
    v20 = 8 * v18;
    v21 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v9 + 48) + v19, v6, v3);
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v28)
    goto LABEL_26;
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_21FA7B488()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25553FBA8)
  {
    sub_21FC5AAF4();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
    sub_21FA7B51C();
    sub_21FA2A08C((unint64_t *)&qword_25406AAF0, v0, MEMORY[0x24BDCEA88]);
    v1 = sub_21FC5BCAC();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25553FBA8);
  }
}

void sub_21FA7B51C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406CB38)
  {
    v0 = sub_21FC5B8A4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406CB38);
  }
}

void sub_21FA7B578()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553FBB0)
  {
    sub_21FC5AAAC();
    sub_21FA79AF8();
    v0 = sub_21FC5BCAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553FBB0);
  }
}

void sub_21FA7B5E0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553FBB8)
  {
    sub_21FA2D1A0(255, &qword_25553FBC0, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingDataNodeInfo, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v0 = sub_21FC5BCAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553FBB8);
  }
}

void sub_21FA7B65C(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t (*v5)(uint64_t);
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    sub_21FC5AAF4();
    v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
    sub_21FA5BE58(255, a3);
    sub_21FA2A08C((unint64_t *)&qword_25406AAF0, v5, MEMORY[0x24BDCEA88]);
    v6 = sub_21FC5BCAC();
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_21FA7B700(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

_OWORD *sub_21FA7B73C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_21FA7B74C(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

void sub_21FA7B780(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_21FC5BCAC();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_21FA7B7DC()
{
  unint64_t result;

  result = qword_25406ACD0;
  if (!qword_25406ACD0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_25406ACD0);
  }
  return result;
}

unint64_t sub_21FA7B830()
{
  unint64_t result;

  result = qword_25553FBF0;
  if (!qword_25553FBF0)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for ContentVariables, &type metadata for ContentVariables);
    atomic_store(result, (unint64_t *)&qword_25553FBF0);
  }
  return result;
}

void sub_21FA7B874(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    sub_21FA7B830();
    v3 = sub_21FC5BCAC();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void sub_21FA7B8D4(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    type metadata accessor for ClinicalIngestionAnalyticsMetricKey();
    sub_21FA2A08C(&qword_25553FBE0, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalIngestionAnalyticsMetricKey, (uint64_t)&protocol conformance descriptor for ClinicalIngestionAnalyticsMetricKey);
    v3 = sub_21FC5BCAC();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void sub_21FA7B954(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_21FC5BCAC();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void sub_21FA7B9A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553FC10)
  {
    sub_21FA7BA1C(255, &qword_25553FC18, &qword_25553FC20);
    v0 = sub_21FC5BCAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553FC10);
  }
}

void sub_21FA7BA1C(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_21FA5BE58(255, a3);
    v4 = sub_21FC5B7F0();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_21FA7BA70()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25553FC28)
  {
    sub_21FC5AAAC();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
    sub_21FA7BA1C(255, &qword_25553FC18, &qword_25553FC20);
    sub_21FA2A08C(&qword_25553FC30, v0, MEMORY[0x24BDCE930]);
    v1 = sub_21FC5BCAC();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25553FC28);
  }
}

void sub_21FA7BB1C()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25553F0C8)
  {
    sub_21FC5A6C8();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878];
    sub_21FA7BA1C(255, (unint64_t *)&qword_25553E0B8, (unint64_t *)&qword_25553E0C0);
    sub_21FA2A08C(&qword_25553F0D0, v0, MEMORY[0x24BDCB890]);
    v1 = sub_21FC5BCAC();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25553F0C8);
  }
}

unint64_t sub_21FA7BBC8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_21FA7FCDC();
  v2 = (_QWORD *)sub_21FC5BCA0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_21FA73F34(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_21FA7BCDC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_21FA7FD50(0, &qword_25553FB70, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  v2 = (_QWORD *)sub_21FC5BCA0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_21FA73F34(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_21FA7BE00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[2];

  sub_21FA7FE24();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_21FA7AD78();
  v7 = sub_21FC5BCA0();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = *(int *)(v3 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v23[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v4 + 72);
  swift_retain();
  while (1)
  {
    sub_21FA2D120(v13, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_21FA7FE24);
    result = sub_21FA73E18((uint64_t)v6);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = sub_21FC5AAF4();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v6, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v6[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_21FA7BF8C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_21FA79BA0();
  v2 = (_QWORD *)sub_21FC5BCA0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    swift_bridgeObjectRetain();
    result = sub_21FA73F98((uint64_t)v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_21FA7C090(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_21FA80798(0, &qword_25553FC08, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  v2 = (_QWORD *)sub_21FC5BCA0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_21FA73F34(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_21FA7C1C4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_21FA806C4();
  v2 = (_QWORD *)sub_21FC5BCA0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = sub_21FA73F34(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_21FA7C2D8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_21FA80520();
  v2 = sub_21FC5BCA0();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_21FA7FEA8(v6, (uint64_t)v15, (unint64_t *)&qword_25406CB78);
    result = sub_21FA74138((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)sub_21FA7B73C(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_21FA7C420(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_21FA80798(0, &qword_25406BAF8, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  v2 = sub_21FC5BCA0();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_21FA7FEA8(v6, (uint64_t)&v15, (unint64_t *)&qword_25406BA08);
    v7 = v15;
    v8 = v16;
    result = sub_21FA73F34(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_21FA7B73C(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_21FA7C580(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_21FA803F4(0, &qword_25406BE40, (unint64_t *)&qword_25406BC20);
  v2 = sub_21FC5BCA0();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_21FA807EC(v6, (uint64_t)&v15, (unint64_t *)&qword_25406BE00, (uint64_t)&qword_25406BC20, (uint64_t)&protocol descriptor for ClinicalSharingMetricPayloadProviding);
    v7 = v15;
    v8 = v16;
    result = sub_21FA73F34(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = sub_21FA3175C(&v17, v3[7] + 40 * result);
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_21FA7C6E4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_21FA800C4();
  v2 = sub_21FC5BCA0();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_21FA2D120(v6, (uint64_t)&v13, (uint64_t (*)(_QWORD))sub_21FA80148);
    v7 = v13;
    result = sub_21FA74168(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)sub_21FA7B73C(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_21FA7C80C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _BYTE v13[8];
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_21FA804BC();
  v2 = sub_21FC5BCA0();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_21FA7FEA8(v6, (uint64_t)v13, (unint64_t *)&qword_25553FE40);
    v7 = v13[0];
    result = sub_21FA74060(v13[0]);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v7;
    result = (unint64_t)sub_21FA7B73C(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_21FA7C940(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_21FA803F4(0, &qword_25406BAE8, (unint64_t *)&qword_25406ACD0);
  v2 = sub_21FC5BCA0();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_21FA807EC(v6, (uint64_t)&v15, &qword_25553FE28, (uint64_t)&qword_25406ACD0, (uint64_t)&protocol descriptor for DaemonXPCService);
    v7 = v15;
    v8 = v16;
    result = sub_21FA73F34(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = sub_21FA3175C(&v17, v3[7] + 40 * result);
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_21FA7CAA4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_21FA80374();
  v2 = (_QWORD *)sub_21FC5BCA0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v6 = *(v4 - 1);
    v5 = *v4;
    swift_retain();
    swift_bridgeObjectRetain();
    result = sub_21FA740D8(v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_21FA7CBA8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;

  v1 = *v0;
  if (!*(_QWORD *)(*v0 + 16))
    return 0xD000000000000030;
  v2 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    while (v5)
    {
      v14 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v15 = v14 | (v8 << 6);
      if (*(_QWORD *)(v1 + 16))
        goto LABEL_5;
    }
    v16 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v6)
      goto LABEL_34;
    v17 = *(_QWORD *)(v2 + 8 * v16);
    ++v8;
    if (!v17)
    {
      v8 = v16 + 1;
      if (v16 + 1 >= v6)
        goto LABEL_34;
      v17 = *(_QWORD *)(v2 + 8 * v8);
      if (!v17)
      {
        v8 = v16 + 2;
        if (v16 + 2 >= v6)
          goto LABEL_34;
        v17 = *(_QWORD *)(v2 + 8 * v8);
        if (!v17)
        {
          v8 = v16 + 3;
          if (v16 + 3 >= v6)
            goto LABEL_34;
          v17 = *(_QWORD *)(v2 + 8 * v8);
          if (!v17)
          {
            v8 = v16 + 4;
            if (v16 + 4 >= v6)
              goto LABEL_34;
            v17 = *(_QWORD *)(v2 + 8 * v8);
            if (!v17)
              break;
          }
        }
      }
    }
LABEL_32:
    v5 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v8 << 6);
    if (*(_QWORD *)(v1 + 16))
    {
LABEL_5:
      v10 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v15);
      v11 = swift_retain();
      v12 = sub_21FA740D8(v11);
      if ((v13 & 1) != 0)
      {
        v33 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v12);
        sub_21FA7FDD0(0, (unint64_t *)&qword_25553FE08, (unint64_t *)&qword_25553FE10);
        v19 = swift_allocObject();
        *(_OWORD *)(v19 + 16) = xmmword_21FC5F720;
        v20 = (*(uint64_t (**)(void))(*(_QWORD *)v10 + 104))();
        v21 = v9;
        v23 = v22;
        *(_QWORD *)(v19 + 56) = MEMORY[0x24BEE0D00];
        v24 = sub_21FA802D0();
        *(_QWORD *)(v19 + 32) = v20;
        *(_QWORD *)(v19 + 40) = v23;
        v25 = v21;
        *(_QWORD *)(v19 + 96) = MEMORY[0x24BEE1768];
        *(_QWORD *)(v19 + 104) = MEMORY[0x24BEE17F0];
        *(_QWORD *)(v19 + 64) = v24;
        *(_QWORD *)(v19 + 72) = v33;
        v26 = sub_21FC5B628();
        v28 = v27;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v25 = sub_21FA7DD0C(0, v21[2] + 1, 1, v21);
        v30 = v25[2];
        v29 = v25[3];
        v31 = v25;
        if (v30 >= v29 >> 1)
          v31 = sub_21FA7DD0C((_QWORD *)(v29 > 1), v30 + 1, 1, v25);
        v31[2] = v30 + 1;
        v9 = v31;
        v32 = &v31[2 * v30];
        v32[4] = v26;
        v32[5] = v28;
      }
      result = swift_release();
    }
  }
  v18 = v16 + 5;
  if (v18 >= v6)
  {
LABEL_34:
    swift_release();
    sub_21FC5BB74();
    sub_21FC5B6AC();
    sub_21FC5BDCC();
    sub_21FC5B6AC();
    swift_bridgeObjectRelease();
    sub_21FC5B6AC();
    sub_21FA80754(0, (unint64_t *)&qword_25406BA60, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FA80314();
    sub_21FC5B5B0();
    swift_bridgeObjectRelease();
    sub_21FC5B6AC();
    swift_bridgeObjectRelease();
    return 0;
  }
  v17 = *(_QWORD *)(v2 + 8 * v18);
  if (v17)
  {
    v8 = v18;
    goto LABEL_32;
  }
  while (1)
  {
    v8 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v8 >= v6)
      goto LABEL_34;
    v17 = *(_QWORD *)(v2 + 8 * v8);
    ++v18;
    if (v17)
      goto LABEL_32;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t ClinicalIngestionRequestFailureMetric.enumerateElementsAsCoreAnalyticsPayload()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t inited;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void *v24;
  char *v25;
  id v26;
  char *v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  _QWORD *v46;
  char *v47;
  char *v48;

  sub_21FA2D1A0(0, (unint64_t *)&qword_25553F0B0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v1);
  v47 = (char *)&v36 - v2;
  v44 = sub_21FC5AAAC();
  v43 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v48 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)v0 + 64;
  v5 = 1 << *(_BYTE *)(*(_QWORD *)v0 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(*(_QWORD *)v0 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v40 = xmmword_21FC5FEE0;
  v39 = 0x800000021FC756C0;
  v38 = 0x800000021FC756E0;
  v37 = 0x800000021FC75700;
  v36 = 0x800000021FC74B10;
  v42 = v4;
  v41 = v8;
  if (!v7)
    goto LABEL_7;
LABEL_4:
  for (v7 &= v7 - 1; ; v7 = (v13 - 1) & v13)
  {
    type metadata accessor for ClinicalIngestionRequestFailureMetricElement();
    result = swift_dynamicCastClass();
    if (result)
    {
      v46 = v11;
      sub_21FA7F4F8();
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v40;
      *(_QWORD *)(inited + 32) = 1953722216;
      *(_QWORD *)(inited + 40) = 0xE400000000000000;
      swift_retain_n();
      swift_bridgeObjectRetain();
      v16 = sub_21FC5B5E0();
      swift_bridgeObjectRelease();
      *(_QWORD *)(inited + 48) = v16;
      *(_QWORD *)(inited + 56) = 0xD00000000000001ALL;
      *(_QWORD *)(inited + 64) = v39;
      *(_QWORD *)(inited + 72) = sub_21FC5B8B0();
      *(_QWORD *)(inited + 80) = 0xD000000000000012;
      *(_QWORD *)(inited + 88) = v38;
      sub_21FC5AA1C();
      sub_21FC5AA10();
      v17 = objc_allocWithZone(MEMORY[0x24BDD1500]);
      v18 = objc_msgSend(v17, sel_init, v36, v37);
      v19 = (void *)sub_21FC5B5E0();
      v45 = v18;
      objc_msgSend(v18, sel_setDateFormat_, v19);

      v20 = v47;
      sub_21FC5AC2C();
      v21 = sub_21FC5AC5C();
      v22 = *(_QWORD *)(v21 - 8);
      v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21);
      v24 = 0;
      if (v23 != 1)
      {
        v25 = v47;
        v24 = (void *)sub_21FC5AC38();
        (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v21);
      }
      v26 = v45;
      objc_msgSend(v45, sel_setTimeZone_, v24);

      v27 = v48;
      v28 = (void *)sub_21FC5AA64();
      v29 = objc_msgSend(v26, sel_stringFromDate_, v28);

      sub_21FC5B604();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v27, v44);
      v30 = sub_21FC5B5E0();
      swift_bridgeObjectRelease();
      *(_QWORD *)(inited + 96) = v30;
      *(_QWORD *)(inited + 104) = 0x7463617265746E69;
      *(_QWORD *)(inited + 112) = 0xEF657079546E6F69;
      v31 = sub_21FC5B5E0();
      swift_bridgeObjectRelease();
      *(_QWORD *)(inited + 120) = v31;
      strcpy((char *)(inited + 128), "resourceType");
      *(_BYTE *)(inited + 141) = 0;
      *(_WORD *)(inited + 142) = -5120;
      swift_bridgeObjectRetain();
      v32 = sub_21FC5B5E0();
      swift_bridgeObjectRelease();
      *(_QWORD *)(inited + 144) = v32;
      *(_QWORD *)(inited + 152) = 0x6F43737574617473;
      *(_QWORD *)(inited + 160) = 0xEA00000000006564;
      *(_QWORD *)(inited + 168) = sub_21FC5B8B0();
      v33 = sub_21FA7C1C4(inited);
      v11 = v46;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v11 = sub_21FA7DE98(0, v11[2] + 1, 1, v11);
      v35 = v11[2];
      v34 = v11[3];
      v4 = v42;
      if (v35 >= v34 >> 1)
        v11 = sub_21FA7DE98((_QWORD *)(v34 > 1), v35 + 1, 1, v11);
      v11[2] = v35 + 1;
      v11[v35 + 4] = v33;
      result = swift_release_n();
      v8 = v41;
      if (v7)
        goto LABEL_4;
    }
    else if (v7)
    {
      goto LABEL_4;
    }
LABEL_7:
    v12 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v12 >= v8)
      goto LABEL_29;
    v13 = *(_QWORD *)(v4 + 8 * v12);
    ++v10;
    if (!v13)
    {
      v10 = v12 + 1;
      if (v12 + 1 >= v8)
        goto LABEL_29;
      v13 = *(_QWORD *)(v4 + 8 * v10);
      if (!v13)
      {
        v10 = v12 + 2;
        if (v12 + 2 >= v8)
          goto LABEL_29;
        v13 = *(_QWORD *)(v4 + 8 * v10);
        if (!v13)
          break;
      }
    }
LABEL_20:
    ;
  }
  v14 = v12 + 3;
  if (v14 >= v8)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v11;
  }
  v13 = *(_QWORD *)(v4 + 8 * v14);
  if (v13)
  {
    v10 = v14;
    goto LABEL_20;
  }
  while (1)
  {
    v10 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v10 >= v8)
      goto LABEL_29;
    v13 = *(_QWORD *)(v4 + 8 * v10);
    ++v14;
    if (v13)
      goto LABEL_20;
  }
LABEL_31:
  __break(1u);
  return result;
}

HealthRecordsDaemon::ClinicalIngestionRequestFailureMetric __swiftcall ClinicalIngestionRequestFailureMetric.init()()
{
  _QWORD *v0;
  HealthRecordsDaemon::ClinicalIngestionRequestFailureMetric result;

  *v0 = MEMORY[0x24BEE4B00];
  return result;
}

uint64_t ClinicalIngestionRequestFailureMetric.addRequestFailure(metricElement:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;

  v2 = v1;
  v4 = *v1;
  v5 = *(_QWORD *)(v4 + 16);
  swift_retain();
  if (v5)
  {
    v6 = sub_21FA740D8(a1);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v6);
      v9 = v8 + 1;
      if (!__OFADD__(v8, 1))
        goto LABEL_7;
      __break(1u);
    }
  }
  v9 = 1;
LABEL_7:
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12 = *v2;
  *v2 = 0x8000000000000000;
  sub_21FA78700(v9, a1, isUniquelyReferenced_nonNull_native);
  *v2 = v12;
  swift_release_n();
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall ClinicalIngestionRequestFailureMetric.resetMetric()()
{
  _QWORD *v0;

  swift_bridgeObjectRelease();
  *v0 = MEMORY[0x24BEE4B00];
}

uint64_t sub_21FA7D6F4()
{
  return swift_retain();
}

uint64_t sub_21FA7D6FC()
{
  id v0;

  sub_21FC5BB74();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  sub_21FC5BDCC();
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  swift_bridgeObjectRetain_n();
  sub_21FC5BE08();
  v0 = (id)HKSensitiveLogItem();
  swift_unknownObjectRelease();
  sub_21FC5BAF0();
  swift_unknownObjectRelease();
  sub_21FC5B64C();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  return 40;
}

uint64_t ClinicalIngestionRequestFailureMetricElement.__allocating_init(operationURL:interactionType:statusCode:observedDate:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  ClinicalIngestionRequestFailureMetricElement.init(operationURL:interactionType:statusCode:observedDate:)(a1, a2, a3, a4);
  return v8;
}

uint64_t ClinicalIngestionRequestFailureMetricElement.init(operationURL:interactionType:statusCode:observedDate:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned __int8 v20;

  v8 = *a2;
  v9 = v4 + OBJC_IVAR____TtC19HealthRecordsDaemon44ClinicalIngestionRequestFailureMetricElement_observedDate;
  v10 = sub_21FC5AAAC();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, a4, v10);
  *(_QWORD *)(v4 + 56) = a3;
  v20 = v8;
  v12 = _s19HealthRecordsDaemon35ClinicalIngestionAnalyticsMetricKeyC09analyticsgH04with15interactionTypeAC10Foundation3URLV_AA0def11InteractionL0OtFZ_0(a1, &v20);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a4, v10);
  v13 = sub_21FC5A98C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
  v15 = *(_QWORD *)(v12 + 16);
  v14 = *(_QWORD *)(v12 + 24);
  v17 = *(_QWORD *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 40);
  v18 = *(_BYTE *)(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  *(_QWORD *)(v4 + 16) = v15;
  *(_QWORD *)(v4 + 24) = v14;
  *(_QWORD *)(v4 + 32) = v17;
  *(_QWORD *)(v4 + 40) = v16;
  *(_BYTE *)(v4 + 48) = v18;
  return v4;
}

uint64_t sub_21FA7DA20()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for ClinicalIngestionRequestFailureMetricElement();
  result = swift_dynamicCastClass();
  if (result)
  {
    v2 = result;
    swift_retain();
    if ((sub_21FA2E608(v2) & 1) != 0)
    {
      v3 = *(_QWORD *)(v0 + 56);
      v4 = *(_QWORD *)(v2 + 56);
      swift_release();
      return v3 == v4;
    }
    else
    {
      swift_release();
      return 0;
    }
  }
  return result;
}

uint64_t sub_21FA7DA9C()
{
  swift_bridgeObjectRetain();
  sub_21FC5B67C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_21FC5B67C();
  swift_bridgeObjectRelease();
  sub_21FC5B67C();
  swift_bridgeObjectRelease();
  return sub_21FC5BE98();
}

void ClinicalIngestionRequestFailureMetricElement.__allocating_init(reportedHost:resourceType:interactionType:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void ClinicalIngestionRequestFailureMetricElement.init(reportedHost:resourceType:interactionType:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void ClinicalIngestionRequestFailureMetricElement.__allocating_init(with:interactionType:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void ClinicalIngestionRequestFailureMetricElement.init(with:interactionType:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_21FA7DC14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC19HealthRecordsDaemon44ClinicalIngestionRequestFailureMetricElement_observedDate;
  v2 = sub_21FC5AAAC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t ClinicalIngestionRequestFailureMetricElement.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC19HealthRecordsDaemon44ClinicalIngestionRequestFailureMetricElement_observedDate;
  v2 = sub_21FC5AAAC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t ClinicalIngestionRequestFailureMetricElement.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC19HealthRecordsDaemon44ClinicalIngestionRequestFailureMetricElement_observedDate;
  v2 = sub_21FC5AAAC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_21FA7DD04()
{
  return swift_retain();
}

_QWORD *sub_21FA7DD0C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_21FA80754(0, &qword_25553F0A8, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_21FA7EE98(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_21FA7DE2C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_21FA7E114(a1, a2, a3, a4, &qword_25553FD70, (uint64_t)&type metadata for QuerySummary.QueryOutputDescription);
}

uint64_t sub_21FA7DE40(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_21FA7EC7C(a1, a2, a3, a4, &qword_25553FD88, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingCycleTrackingQuery);
}

_QWORD *sub_21FA7DE54(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_21FA7E630(a1, a2, a3, a4, &qword_25553FD80, (unint64_t *)&qword_25553EC80);
}

uint64_t sub_21FA7DE70(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_21FA7EC7C(a1, a2, a3, a4, &qword_25553FD98, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB988]);
}

uint64_t sub_21FA7DE84(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_21FA7EC7C(a1, a2, a3, a4, (unint64_t *)&unk_25406AA58, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
}

_QWORD *sub_21FA7DE98(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_21FA2D1A0(0, &qword_25553FE60, (uint64_t (*)(uint64_t))sub_21FA80650, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_21FA7F620(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_21FA7DFB8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_21FA80754(0, &qword_25553FD90, (uint64_t)&type metadata for ClinicalSharingNodeMetadata, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_21FA7F724(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_21FA7E0D8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_21FA7EC7C(a1, a2, a3, a4, &qword_25553FE80, type metadata accessor for ClinicalSharingQueryOutput);
}

uint64_t sub_21FA7E0EC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_21FA7EC7C(a1, a2, a3, a4, &qword_25553FEA0, type metadata accessor for PBTimeSeries.Value);
}

_QWORD *sub_21FA7E100(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_21FA7E114(a1, a2, a3, a4, (unint64_t *)&qword_25553FE48, (uint64_t)&type metadata for HTTPHeader);
}

_QWORD *sub_21FA7E114(_QWORD *result, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, uint64_t a6)
{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    v9 = a2;
    goto LABEL_8;
  }
  v8 = a4[3];
  v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2)
    goto LABEL_8;
  if (v9 + 0x4000000000000000 >= 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v9 = a2;
LABEL_8:
    v10 = a4[2];
    if (v9 <= v10)
      v11 = a4[2];
    else
      v11 = v9;
    if (v11)
    {
      sub_21FA80754(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v12 = (_QWORD *)swift_allocObject();
      v13 = _swift_stdlib_malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 1;
      v12[2] = v10;
      v12[3] = 2 * (v14 >> 5);
      v15 = v12 + 4;
      if ((v7 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v15 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[4 * v10 + 4])
          memmove(v15, a4 + 4, 32 * v10);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_21FA7EF88(0, v10, (unint64_t)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_21FA7E23C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_21FA7EC7C(a1, a2, a3, a4, &qword_25553FDA8, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingDataNodeInfo);
}

uint64_t sub_21FA7E250(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_21FA7EC7C(a1, a2, a3, a4, &qword_25553FDA0, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingCategoryNodeInfo);
}

uint64_t sub_21FA7E264(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_21FA7EC7C(a1, a2, a3, a4, &qword_25553FEA8, type metadata accessor for PBSleepSeries.Value);
}

_QWORD *sub_21FA7E278(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_21FA805E4();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_21FA7F18C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_21FA7E380(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_21FA2D1A0(0, &qword_25553FDE0, (uint64_t (*)(uint64_t))sub_21FA801B0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 80);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[10 * v8 + 4])
          memmove(v12, a4 + 4, 80 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_21FA7F918(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_21FA7E4B4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_21FA7E500(a1, a2, a3, a4, &qword_25553FDF0, &qword_25553FDF8, (void (*)(uint64_t))sub_21FA8025C);
}

uint64_t sub_21FA7E4D0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_21FA7EC7C(a1, a2, a3, a4, &qword_25406BB38, (uint64_t (*)(uint64_t))sub_21FA7FEF4);
}

_QWORD *sub_21FA7E4E4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_21FA7E500(a1, a2, a3, a4, &qword_25553FDB8, &qword_25553FDC0, (void (*)(uint64_t))sub_21FA7FFA4);
}

_QWORD *sub_21FA7E500(_QWORD *result, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, unint64_t *a6, void (*a7)(uint64_t))
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      sub_21FA7FF50(0, a5, a6, a7);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 17;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 4);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v16 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[2 * v11 + 4])
          memmove(v16, a4 + 4, 16 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_21FA7F814(0, v11, (unint64_t)v16, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

_QWORD *sub_21FA7E614(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_21FA7E630(a1, a2, a3, a4, &qword_25553FE30, (unint64_t *)&qword_25553FE38);
}

_QWORD *sub_21FA7E630(_QWORD *result, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, unint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      sub_21FA7FDD0(0, a5, a6);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      v15 = v13 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4])
          memmove(v15, a4 + 4, 40 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v15 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_21FA7F2A8(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

_QWORD *sub_21FA7E770(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_21FA80754(0, &qword_25553FE20, MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_21FA7FB08(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_21FA7E890(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      sub_21FA80754(0, &qword_25553FD68, MEMORY[0x24BEE14E8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_21FA7FA20(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_21FA7E9B0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_21FA7EC7C(a1, a2, a3, a4, &qword_25553FEB0, type metadata accessor for PBSleepSummary.Schedule);
}

uint64_t sub_21FA7E9C4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_21FA7EC7C(a1, a2, a3, a4, &qword_25553FD78, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878]);
}

uint64_t sub_21FA7E9D8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_21FA7EC7C(a1, a2, a3, a4, &qword_25553FE88, type metadata accessor for PBCategorySeries.Event);
}

uint64_t sub_21FA7E9EC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_21FA7EC7C(a1, a2, a3, a4, &qword_25553FE90, type metadata accessor for PBCycleTracking.Event);
}

_QWORD *sub_21FA7EA00(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_21FA80754(0, &qword_25553FE98, (uint64_t)&type metadata for PBCycleSymptoms, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_21FA7FBF0(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_21FA7EB20(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_21FA2D1A0(0, &qword_25553FDB0, (uint64_t (*)(uint64_t))sub_21FA71AB8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_21FA7F3B8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_21FA7EC40(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_21FA7EC7C(a1, a2, a3, a4, &qword_25553ECD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58]);
}

uint64_t sub_21FA7EC54(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_21FA7EC7C(a1, a2, a3, a4, &qword_25553FE70, type metadata accessor for PBTypedData);
}

uint64_t sub_21FA7EC68(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_21FA7EC7C(a1, a2, a3, a4, &qword_25553FE78, (uint64_t (*)(uint64_t))sub_21FA80738);
}

uint64_t sub_21FA7EC7C(char a1, int64_t a2, char a3, unint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  sub_21FA2D1A0(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_21FC5BC64();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_21FA7F074(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t sub_21FA7EE98(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

uint64_t sub_21FA7EF88(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

uint64_t sub_21FA7F074(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

uint64_t sub_21FA7F18C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_21FA80798(0, (unint64_t *)&qword_25553FE58, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE0460]);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

uint64_t sub_21FA7F2A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 40 * a1 + 32;
    v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      sub_21FA50724(0, a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

uint64_t sub_21FA7F3B8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_21FA71AB8();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ClinicalIngestionRequestFailureMetricElement()
{
  uint64_t result;

  result = qword_25553FC80;
  if (!qword_25553FC80)
    return swift_getSingletonMetadata();
  return result;
}

void sub_21FA7F4F8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553FC48)
  {
    sub_21FA80458(255, &qword_25553FC50, (uint64_t)&qword_25406BAD0, 0x24BEDCDF0, (void (*)(uint64_t, uint64_t, uint64_t))sub_21FA5BE58);
    v0 = sub_21FC5BDD8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553FC48);
  }
}

ValueMetadata *type metadata accessor for ClinicalIngestionRequestFailureMetric()
{
  return &type metadata for ClinicalIngestionRequestFailureMetric;
}

uint64_t sub_21FA7F57C()
{
  return type metadata accessor for ClinicalIngestionRequestFailureMetricElement();
}

uint64_t sub_21FA7F584()
{
  uint64_t result;
  unint64_t v1;

  result = sub_21FC5AAAC();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ClinicalIngestionRequestFailureMetricElement()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ClinicalIngestionRequestFailureMetricElement.keyElement.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of ClinicalIngestionRequestFailureMetricElement.__allocating_init(operationURL:interactionType:statusCode:observedDate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t sub_21FA7F620(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_21FA80650();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

uint64_t sub_21FA7F724(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

uint64_t sub_21FA7F814(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_21FA80084();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

uint64_t sub_21FA7F918(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 80 * a1 + 32;
    v6 = a3 + 80 * v4;
    if (v5 >= v6 || v5 + 80 * v4 <= a3)
    {
      sub_21FA801B0(0, a2, a3, a4);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

char *sub_21FA7FA20(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_21FC5BCB8();
  __break(1u);
  return result;
}

char *sub_21FA7FB08(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_21FC5BCB8();
  __break(1u);
  return result;
}

char *sub_21FA7FBF0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_21FC5BCB8();
  __break(1u);
  return result;
}

void sub_21FA7FCDC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553FB68)
  {
    sub_21FA7FD50(255, (unint64_t *)&qword_25553EF18, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE0460]);
    v0 = sub_21FC5BCAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553FB68);
  }
}

void sub_21FA7FD50(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD, uint64_t, _QWORD))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_21FA80754(255, &qword_25553EF20, (uint64_t)&type metadata for QuerySummary.QueryOutputDescription, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v7 = a3(a1, MEMORY[0x24BEE0D00], v6, MEMORY[0x24BEE0D10]);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_21FA7FDD0(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_21FA50724(255, a3);
    v4 = sub_21FC5BDD8();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_21FA7FE24()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25406BC00)
  {
    sub_21FC5AAF4();
    sub_21FA2D1A0(255, &qword_25406BE08, (uint64_t (*)(uint64_t))MEMORY[0x24BE45940], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25406BC00);
  }
}

uint64_t sub_21FA7FEA8(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;

  sub_21FA80588(0, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_21FA7FEF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_25406B3A8)
  {
    v2 = type metadata accessor for ClinicalSharingSyncTask();
    v4 = type metadata accessor for SingleValuePublisherTaskQueue.PendingTaskWrapper(a1, v2, (uint64_t)&off_25554E600, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_25406B3A8);
  }
}

void sub_21FA7FF50(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_21FA8020C(255, a3, a4);
    v5 = sub_21FC5BDD8();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_21FA7FFA4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553FDC8)
  {
    sub_21FA80020();
    sub_21FA50724(255, (unint64_t *)&qword_25406BB50);
    v0 = sub_21FC5BED4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553FDC8);
  }
}

void sub_21FA80020()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406CB30)
  {
    sub_21FA5BE58(255, &qword_25406CB60);
    v0 = sub_21FC5B7F0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406CB30);
  }
}

unint64_t sub_21FA80084()
{
  unint64_t result;

  result = qword_25406BE68;
  if (!qword_25406BE68)
  {
    result = swift_getFunctionTypeMetadata0();
    atomic_store(result, (unint64_t *)&qword_25406BE68);
  }
  return result;
}

void sub_21FA800C4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553FDD0)
  {
    type metadata accessor for FileAttributeKey(255);
    sub_21FA2A08C((unint64_t *)&qword_25553DF30, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_21FC5DBE0);
    v0 = sub_21FC5BCAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553FDD0);
  }
}

void sub_21FA80148()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25553FDD8)
  {
    type metadata accessor for FileAttributeKey(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25553FDD8);
  }
}

void sub_21FA801B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!qword_25553FDE8)
  {
    v4 = type metadata accessor for SingleValuePublisherTaskQueue.PendingTaskWrapper(0, (uint64_t)&type metadata for IssuerDirectoryDownloadTask, (uint64_t)&off_255540CC0, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_25553FDE8);
  }
}

uint64_t sub_21FA8020C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    a3(255);
    result = swift_getFunctionTypeMetadata1();
    atomic_store(result, a2);
  }
  return result;
}

void sub_21FA8025C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553FE00)
  {
    sub_21FA50724(255, (unint64_t *)&qword_25406BB50);
    v0 = sub_21FC5BED4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553FE00);
  }
}

unint64_t sub_21FA802D0()
{
  unint64_t result;

  result = qword_25553FE18;
  if (!qword_25553FE18)
  {
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_25553FE18);
  }
  return result;
}

unint64_t sub_21FA80314()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25406BA68;
  if (!qword_25406BA68)
  {
    sub_21FA80754(255, (unint64_t *)&qword_25406BA60, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&qword_25406BA68);
  }
  return result;
}

void sub_21FA80374()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553FBD8)
  {
    type metadata accessor for ClinicalIngestionAnalyticsMetricKey();
    sub_21FA2A08C(&qword_25553FBE0, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalIngestionAnalyticsMetricKey, (uint64_t)&protocol conformance descriptor for ClinicalIngestionAnalyticsMetricKey);
    v0 = sub_21FC5BCAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553FBD8);
  }
}

void sub_21FA803F4(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_21FA50724(255, a3);
    v4 = sub_21FC5BCAC();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_21FA80458(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v7;

  if (!*a2)
  {
    a5(255, a3, a4);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v7)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_21FA804BC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553FBE8)
  {
    sub_21FA7B830();
    v0 = sub_21FC5BCAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553FBE8);
  }
}

void sub_21FA80520()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406BB00)
  {
    v0 = sub_21FC5BCAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406BB00);
  }
}

void sub_21FA80588(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_21FA805E4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553FE50)
  {
    sub_21FA80798(255, (unint64_t *)&qword_25553FE58, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE0460]);
    v0 = sub_21FC5BDD8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553FE50);
  }
}

void sub_21FA80650()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553FE68)
  {
    sub_21FA5BE58(255, (unint64_t *)&qword_25406BAD0);
    v0 = sub_21FC5B580();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553FE68);
  }
}

void sub_21FA806C4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406BAF0)
  {
    sub_21FA5BE58(255, (unint64_t *)&qword_25406BAD0);
    v0 = sub_21FC5BCAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406BAF0);
  }
}

void sub_21FA80738(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25553F0A0, type metadata accessor for PBTypedData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_21FA80754(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, a3);
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_21FA80798(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD, uint64_t, _QWORD))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, MEMORY[0x24BEE0D00], a3, MEMORY[0x24BEE0D10]);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t sub_21FA807EC(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  sub_21FA80458(0, a3, a4, a5, (void (*)(uint64_t, uint64_t, uint64_t))sub_21FA50724);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

unint64_t sub_21FA8084C()
{
  unint64_t result;

  result = qword_25406CC08;
  if (!qword_25406CC08)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC5FFFC, &type metadata for ClinicalSharingGraphMetadataError);
    atomic_store(result, (unint64_t *)&qword_25406CC08);
  }
  return result;
}

uint64_t sub_21FA80890(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __objc2_ivar_list **p_ivars;
  BOOL v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  BOOL v22;
  id v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;

  v6 = sub_21FC5AAF4();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = a3;
  if (a1 >> 62)
    goto LABEL_56;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  while (v10)
  {
    v11 = 0;
    v81 = v10;
    v82 = a1 & 0xC000000000000001;
    v79 = a1 + 32;
    v80 = a1 & 0xFFFFFFFFFFFFFF8;
    v64 = a1;
    v63 = v6;
    v62 = v7;
    v74 = v9;
    while (v82)
    {
      v12 = MEMORY[0x2207D057C](v11, a1);
      p_ivars = (__objc2_ivar_list **)(&PBUpdateStateRequest._StorageClass + 48);
      v14 = __OFADD__(v11++, 1);
      if (v14)
        goto LABEL_54;
LABEL_12:
      v15 = OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_clinicalSharingStatus;
      if (objc_msgSend(*(id *)(v12 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_clinicalSharingStatus), sel_featureStatus, v62) == (id)1&& objc_msgSend(*(id *)(v12 + v15), (SEL)p_ivars[459]) == (id)2)
      {
        if (objc_msgSend(*(id *)(v12 + v15), sel_multiDeviceStatus) != (id)2
          && objc_msgSend(*(id *)(v12 + v15), sel_multiDeviceStatus) != (id)4
          && ((v21 = *(_QWORD *)(v12
                               + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_existingMultiDeviceInfo
                               + 8)) == 0
           || (*(_QWORD *)(v12
                         + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_existingMultiDeviceInfo) == *(_QWORD *)(v12 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_deviceID)
             ? (v22 = v21 == *(_QWORD *)(v12
                                       + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_deviceID
                                       + 8))
             : (v22 = 0),
               v22 || (sub_21FC5BDF0() & 1) != 0))
          || objc_msgSend(*(id *)(v12 + v15), sel_multiDeviceStatus) == (id)3)
        {
          if (!*(_QWORD *)(v12 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_error))
          {
            v24 = (_QWORD *)(v12 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_rootNode);
            v25 = *(_QWORD *)(v12 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_rootNode);
            if (v25)
            {
              v27 = v24[1];
              v26 = v24[2];
              v28 = v24[3];
              v29 = v24[4];
              v31 = v24[5];
              v30 = v24[6];
              v32 = v24[7];
              v33 = v24[8];
              v35 = v24[9];
              v34 = v24[10];
              v83 = *(_QWORD **)(v12 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_rootNode);
              v66 = v34;
              v67 = v35;
              v68 = v33;
              v78 = v26;
              v69 = v32;
              v70 = v30;
              sub_21FA81324(v25, v27, v26, v28, v29, v31);
              v72 = v25;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v71 = v27;
              sub_21FBDFBDC(v27);
              v36 = v83;
              swift_bridgeObjectRetain();
              sub_21FA32314(v29, v31);
              v77 = v28;
              swift_bridgeObjectRetain();
              v75 = v31;
              v76 = v29;
              sub_21FA32314(v29, v31);
              swift_bridgeObjectRetain();
              v37 = v36;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v37 = sub_21FA7DFB8(0, v36[2] + 1, 1, v36);
              v39 = v37[2];
              v38 = v37[3];
              v40 = (uint64_t)v74;
              if (v39 >= v38 >> 1)
                v37 = sub_21FA7DFB8((_QWORD *)(v38 > 1), v39 + 1, 1, v37);
              v37[2] = v39 + 1;
              v41 = &v37[4 * v39];
              v42 = v77;
              v41[4] = v78;
              v41[5] = v42;
              v44 = v75;
              v43 = v76;
              v41[6] = v76;
              v41[7] = v44;
              swift_bridgeObjectRelease();
              sub_21FA2D770(v43, v44);
              swift_bridgeObjectRelease();
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v40, v12 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_accountID, v6);
              v45 = v37[2];
              v73 = a2;
              v65 = v37;
              if (v45)
              {
                v83 = (_QWORD *)MEMORY[0x24BEE4AF8];
                sub_21FC01924(0, v45, 0);
                v46 = (uint64_t)v83;
                v47 = v37 + 5;
                do
                {
                  v49 = *(v47 - 1);
                  v48 = *v47;
                  v83 = (_QWORD *)v46;
                  v51 = *(_QWORD *)(v46 + 16);
                  v50 = *(_QWORD *)(v46 + 24);
                  swift_bridgeObjectRetain();
                  if (v51 >= v50 >> 1)
                  {
                    sub_21FC01924(v50 > 1, v51 + 1, 1);
                    v46 = (uint64_t)v83;
                  }
                  v47 += 4;
                  *(_QWORD *)(v46 + 16) = v51 + 1;
                  v52 = v46 + 16 * v51;
                  *(_QWORD *)(v52 + 32) = v49;
                  *(_QWORD *)(v52 + 40) = v48;
                  --v45;
                }
                while (v45);
              }
              else
              {
                v46 = MEMORY[0x24BEE4AF8];
              }
              v84 = sub_21FC5B898();
              v53 = *(_QWORD *)(v46 + 16);
              a1 = v64;
              v7 = v62;
              if (v53)
              {
                v54 = (uint64_t *)(v46 + 40);
                do
                {
                  v55 = *(v54 - 1);
                  v56 = *v54;
                  swift_bridgeObjectRetain();
                  sub_21FBED280((uint64_t *)&v83, v55, v56);
                  swift_bridgeObjectRelease();
                  v54 += 2;
                  --v53;
                }
                while (v53);
              }
              swift_bridgeObjectRelease();
              v57 = v84;
              v58 = v73;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v83 = (_QWORD *)v58;
              v9 = v74;
              sub_21FA78844(v57, (uint64_t)v74, isUniquelyReferenced_nonNull_native);
              a2 = (uint64_t)v83;
              swift_bridgeObjectRelease();
              v6 = v63;
              (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v63);
              v60 = swift_bridgeObjectRetain();
              sub_21FBDFBDC(v60);
              swift_bridgeObjectRelease();
              swift_release();
              sub_21FA813A8(v72, v71, v78, v77, v76, v75);
              goto LABEL_5;
            }
          }
        }
      }
      v16 = *(id *)(v12 + v15);
      if (objc_msgSend(v16, (SEL)p_ivars[459]) == (id)3
        || objc_msgSend(v16, (SEL)p_ivars[459]) == (id)4
        || objc_msgSend(v16, (SEL)p_ivars[459]) == (id)5
        || objc_msgSend(v16, sel_featureStatus) == (id)4)
      {

LABEL_23:
        v17 = v12 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_accountID;
        swift_bridgeObjectRetain();
        v18 = sub_21FA73E18(v17);
        LOBYTE(v17) = v19;
        swift_bridgeObjectRelease();
        if ((v17 & 1) != 0)
        {
          v20 = swift_isUniquelyReferenced_nonNull_native();
          v83 = (_QWORD *)a2;
          if ((v20 & 1) == 0)
          {
            sub_21FA7A098();
            a2 = (uint64_t)v83;
          }
          (*(void (**)(unint64_t, uint64_t))(v7 + 8))(*(_QWORD *)(a2 + 48) + *(_QWORD *)(v7 + 72) * v18, v6);
          a2 = (uint64_t)v83;
          sub_21FBAEA98(v18, (uint64_t)v83);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_5;
        }
        goto LABEL_4;
      }
      v23 = objc_msgSend(v16, sel_featureStatus);

      if (v23 == (id)2 || objc_msgSend(*(id *)(v12 + v15), sel_multiDeviceStatus) == (id)2)
        goto LABEL_23;
LABEL_4:
      swift_release();
LABEL_5:
      if (v11 == v81)
        goto LABEL_57;
    }
    p_ivars = &PBUpdateStateRequest._StorageClass.ivars;
    if (v11 >= *(_QWORD *)(v80 + 16))
      goto LABEL_55;
    v12 = *(_QWORD *)(v79 + 8 * v11);
    swift_retain();
    v14 = __OFADD__(v11++, 1);
    if (!v14)
      goto LABEL_12;
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = sub_21FC5BC7C();
  }
LABEL_57:
  swift_bridgeObjectRelease();
  return a2;
}

uint64_t sub_21FA80FA8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  char v14;
  uint64_t v15;

  sub_21FA821E4(0, &qword_25406BB18, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v13 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_21FA81CE4();
  sub_21FC5BEEC();
  v15 = a2;
  v14 = 0;
  sub_21FA81D28();
  sub_21FA81DB0();
  sub_21FC5BD9C();
  if (!v3)
  {
    v15 = a3;
    v14 = 1;
    sub_21FA81E40();
    sub_21FA8236C(&qword_25406BA50, (uint64_t (*)(void))sub_21FA81E94, MEMORY[0x24BEE12A0]);
    sub_21FC5BD9C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_21FA81120()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000014;
  else
    return 0x5079427365646F6ELL;
}

uint64_t sub_21FA8116C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_21FA81ED8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_21FA81190()
{
  sub_21FA81CE4();
  return sub_21FC5BF10();
}

uint64_t sub_21FA811B8()
{
  sub_21FA81CE4();
  return sub_21FC5BF1C();
}

uint64_t sub_21FA811E0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_21FA81FE8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_21FA81208(_QWORD *a1)
{
  uint64_t *v1;

  return sub_21FA80FA8(a1, *v1, v1[1]);
}

uint64_t sub_21FA81220(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a2[1];
  if ((sub_21FB0D51C(*a1, *a2) & 1) != 0)
    return sub_21FB0E430(v2, v3);
  else
    return 0;
}

uint64_t sub_21FA81268()
{
  sub_21FC5BE8C();
  sub_21FC5BE98();
  return sub_21FC5BEB0();
}

uint64_t sub_21FA812A8()
{
  return sub_21FC5BE98();
}

uint64_t sub_21FA812CC()
{
  sub_21FC5BE8C();
  sub_21FC5BE98();
  return sub_21FC5BEB0();
}

unint64_t sub_21FA81308()
{
  return 0xD000000000000030;
}

uint64_t sub_21FA81324(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_21FA32314(a5, a6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_21FA813A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_21FA2D770(a5, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21FA8142C(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t i;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;

  v2 = sub_21FC5AAF4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_44;
  for (i = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = sub_21FC5BC7C())
  {
    v7 = 0;
    v8 = a1 & 0xC000000000000001;
    v77 = a1 & 0xFFFFFFFFFFFFFF8;
    v9 = MEMORY[0x24BEE4B00];
    v76 = a1 + 32;
    v70 = v2;
    v71 = v3;
    v60 = v5;
    v59 = i;
    v58 = a1 & 0xC000000000000001;
    while (v8)
    {
      v10 = MEMORY[0x2207D057C](v7, a1);
      v11 = __OFADD__(v7++, 1);
      if (v11)
        goto LABEL_42;
LABEL_10:
      v12 = OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_clinicalSharingStatus;
      if (objc_msgSend(*(id *)(v10 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_clinicalSharingStatus), sel_featureStatus) == (id)1&& objc_msgSend(*(id *)(v10 + v12), sel_userStatus) == (id)2&& (objc_msgSend(*(id *)(v10 + v12), sel_multiDeviceStatus) != (id)2&& objc_msgSend(*(id *)(v10 + v12), sel_multiDeviceStatus) != (id)4&& ((v13 = *(_QWORD *)(v10+ OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_existingMultiDeviceInfo+ 8)) == 0|| (*(_QWORD *)(v10 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_existingMultiDeviceInfo) == *(_QWORD *)(v10 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_deviceID)? (v14 = v13 == *(_QWORD *)(v10+ OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_deviceID+ 8)): (v14 = 0), v14 || (sub_21FC5BDF0() & 1) != 0))|| objc_msgSend(*(id *)(v10 + v12), sel_multiDeviceStatus) == (id)3)&& !*(_QWORD *)(v10 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_error)&& (v15 = (_QWORD *)(v10 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_rootNode), (v16 = *(_QWORD *)(v10 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_rootNode)) != 0))
      {
        v69 = v9;
        v18 = v15[1];
        v17 = v15[2];
        v19 = v15[3];
        v20 = v15[4];
        v22 = v15[5];
        v21 = v15[6];
        v23 = v15[7];
        v24 = v15[8];
        v26 = v15[9];
        v25 = v15[10];
        v78 = (_QWORD *)v16;
        v62 = v25;
        v63 = v26;
        v64 = v24;
        v75 = v17;
        v65 = v23;
        v66 = v21;
        sub_21FA81324(v16, v18, v17, v19, v20, v22);
        v68 = v16;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v67 = v18;
        sub_21FBDFBDC(v18);
        v27 = v78;
        swift_bridgeObjectRetain();
        sub_21FA32314(v20, v22);
        v74 = v19;
        swift_bridgeObjectRetain();
        v72 = v22;
        v73 = v20;
        sub_21FA32314(v20, v22);
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v29 = v27;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v29 = sub_21FA7DFB8(0, v27[2] + 1, 1, v27);
        v31 = v29[2];
        v30 = v29[3];
        v2 = v70;
        if (v31 >= v30 >> 1)
          v29 = sub_21FA7DFB8((_QWORD *)(v30 > 1), v31 + 1, 1, v29);
        v29[2] = v31 + 1;
        v32 = &v29[4 * v31];
        v33 = v74;
        v32[4] = v75;
        v32[5] = v33;
        v34 = v73;
        v36 = v71;
        v35 = v72;
        v32[6] = v73;
        v32[7] = v35;
        v37 = v29;
        swift_bridgeObjectRelease();
        sub_21FA2D770(v34, v35);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v5, v10 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_accountID, v2);
        v38 = v37[2];
        v61 = v37;
        if (v38)
        {
          v57 = a1;
          v78 = (_QWORD *)MEMORY[0x24BEE4AF8];
          sub_21FC01924(0, v38, 0);
          v39 = (uint64_t)v78;
          v40 = v37 + 5;
          do
          {
            v42 = *(v40 - 1);
            v41 = *v40;
            v78 = (_QWORD *)v39;
            v44 = *(_QWORD *)(v39 + 16);
            v43 = *(_QWORD *)(v39 + 24);
            swift_bridgeObjectRetain();
            if (v44 >= v43 >> 1)
            {
              sub_21FC01924(v43 > 1, v44 + 1, 1);
              v39 = (uint64_t)v78;
            }
            v40 += 4;
            *(_QWORD *)(v39 + 16) = v44 + 1;
            v45 = v39 + 16 * v44;
            *(_QWORD *)(v45 + 32) = v42;
            *(_QWORD *)(v45 + 40) = v41;
            --v38;
          }
          while (v38);
          a1 = v57;
          v2 = v70;
        }
        else
        {
          v39 = MEMORY[0x24BEE4AF8];
        }
        v79 = sub_21FC5B898();
        v46 = *(_QWORD *)(v39 + 16);
        if (v46)
        {
          v47 = (uint64_t *)(v39 + 40);
          do
          {
            v48 = *(v47 - 1);
            v49 = *v47;
            swift_bridgeObjectRetain();
            sub_21FBED280((uint64_t *)&v78, v48, v49);
            swift_bridgeObjectRelease();
            v47 += 2;
            --v46;
          }
          while (v46);
        }
        swift_bridgeObjectRelease();
        v50 = v79;
        v51 = v69;
        v52 = swift_isUniquelyReferenced_nonNull_native();
        v78 = (_QWORD *)v51;
        v5 = v60;
        sub_21FA78844(v50, (uint64_t)v60, v52);
        v9 = (uint64_t)v78;
        swift_bridgeObjectRelease();
        v3 = v71;
        (*(void (**)(char *, uint64_t))(v71 + 8))(v5, v2);
        v53 = swift_bridgeObjectRetain();
        sub_21FBDFBDC(v53);
        swift_bridgeObjectRelease();
        swift_release();
        sub_21FA813A8(v68, v67, v75, v74, v73, v72);
        i = v59;
        v8 = v58;
        if (v7 == v59)
        {
LABEL_41:
          swift_bridgeObjectRelease();
          v54 = v80;
          goto LABEL_46;
        }
      }
      else
      {
        swift_release();
        if (v7 == i)
          goto LABEL_41;
      }
    }
    if (v7 >= *(_QWORD *)(v77 + 16))
      goto LABEL_43;
    v10 = *(_QWORD *)(v76 + 8 * v7);
    swift_retain();
    v11 = __OFADD__(v7++, 1);
    if (!v11)
      goto LABEL_10;
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    ;
  }
  swift_bridgeObjectRelease();
  v9 = MEMORY[0x24BEE4B00];
  v54 = MEMORY[0x24BEE4AF8];
LABEL_46:
  v55 = sub_21FBF3444(v54);
  swift_bridgeObjectRelease();
  sub_21FBFF8D4(v55);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t destroy for ClinicalSharingGraphMetadata()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s19HealthRecordsDaemon28ClinicalSharingGraphMetadataVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ClinicalSharingGraphMetadata(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for ClinicalSharingGraphMetadata(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClinicalSharingGraphMetadata(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClinicalSharingGraphMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingGraphMetadata()
{
  return &type metadata for ClinicalSharingGraphMetadata;
}

uint64_t getEnumTagSinglePayload for ClinicalSharingGraphMetadataError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for ClinicalSharingGraphMetadataError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21FA81C40 + 4 * byte_21FC5FFA0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21FA81C60 + 4 * byte_21FC5FFA5[v4]))();
}

_BYTE *sub_21FA81C40(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21FA81C60(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21FA81C68(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21FA81C70(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21FA81C78(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21FA81C80(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingGraphMetadataError()
{
  return &type metadata for ClinicalSharingGraphMetadataError;
}

unint64_t sub_21FA81CA0()
{
  unint64_t result;

  result = qword_25553FEB8;
  if (!qword_25553FEB8)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC60084, &type metadata for ClinicalSharingGraphMetadataError);
    atomic_store(result, (unint64_t *)&qword_25553FEB8);
  }
  return result;
}

unint64_t sub_21FA81CE4()
{
  unint64_t result;

  result = qword_25406B270;
  if (!qword_25406B270)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC60228, &type metadata for ClinicalSharingGraphMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25406B270);
  }
  return result;
}

void sub_21FA81D28()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406CAF0)
  {
    sub_21FC5AAF4();
    sub_21FA7B51C();
    sub_21FA822D0((unint64_t *)&qword_25406AAF0, MEMORY[0x24BDCEA88]);
    v0 = sub_21FC5B580();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406CAF0);
  }
}

unint64_t sub_21FA81DB0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25406CAF8;
  if (!qword_25406CAF8)
  {
    sub_21FA81D28();
    v2 = v1;
    v3[0] = sub_21FA822D0(&qword_25406BE70, MEMORY[0x24BDCEA70]);
    v3[1] = sub_21FA82310(&qword_25406CB40, MEMORY[0x24BEE0D08], MEMORY[0x24BEE1700]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BEE04C0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25406CAF8);
  }
  return result;
}

void sub_21FA81E40()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406BA48)
  {
    v0 = sub_21FC5B7F0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406BA48);
  }
}

unint64_t sub_21FA81E94()
{
  unint64_t result;

  result = qword_25406B260;
  if (!qword_25406B260)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC61924, &type metadata for ClinicalSharingNodeMetadata);
    atomic_store(result, (unint64_t *)&qword_25406B260);
  }
  return result;
}

uint64_t sub_21FA81ED8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x5079427365646F6ELL && a2 == 0xEF72656469766F72;
  if (v2 || (sub_21FC5BDF0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000021FC759E0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_21FC5BDF0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_21FA81FE8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  sub_21FA821E4(0, &qword_25406BB08, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v10 - v6;
  v8 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  sub_21FA81CE4();
  sub_21FC5BEE0();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    sub_21FA81D28();
    HIBYTE(v10) = 0;
    sub_21FA82240();
    sub_21FC5BD30();
    v8 = v11;
    sub_21FA81E40();
    HIBYTE(v10) = 1;
    sub_21FA8236C(&qword_25406BA58, (uint64_t (*)(void))sub_21FA823D0, MEMORY[0x24BEE12D0]);
    swift_bridgeObjectRetain();
    sub_21FC5BD30();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v8;
}

void sub_21FA821E4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_21FA81CE4();
    v7 = a3(a1, &type metadata for ClinicalSharingGraphMetadata.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_21FA82240()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25406BDE8;
  if (!qword_25406BDE8)
  {
    sub_21FA81D28();
    v2 = v1;
    v3[0] = sub_21FA822D0(&qword_25406BBF8, MEMORY[0x24BDCEAA8]);
    v3[1] = sub_21FA82310(&qword_25406BE20, MEMORY[0x24BEE0D38], MEMORY[0x24BEE1720]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BEE04E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25406BDE8);
  }
  return result;
}

uint64_t sub_21FA822D0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_21FC5AAF4();
    result = MEMORY[0x2207D0F78](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FA82310(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_21FA7B51C();
    v8 = a2;
    result = MEMORY[0x2207D0F78](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FA8236C(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_21FA81E40();
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x2207D0F78](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_21FA823D0()
{
  unint64_t result;

  result = qword_25406B268;
  if (!qword_25406B268)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC6194C, &type metadata for ClinicalSharingNodeMetadata);
    atomic_store(result, (unint64_t *)&qword_25406B268);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ClinicalSharingGraphMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21FA82460 + 4 * byte_21FC5FFAF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21FA82494 + 4 * byte_21FC5FFAA[v4]))();
}

uint64_t sub_21FA82494(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FA8249C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FA824A4);
  return result;
}

uint64_t sub_21FA824B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FA824B8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21FA824BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FA824C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingGraphMetadata.CodingKeys()
{
  return &type metadata for ClinicalSharingGraphMetadata.CodingKeys;
}

unint64_t sub_21FA824E4()
{
  unint64_t result;

  result = qword_25553FEC0;
  if (!qword_25553FEC0)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC60200, &type metadata for ClinicalSharingGraphMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25553FEC0);
  }
  return result;
}

unint64_t sub_21FA8252C()
{
  unint64_t result;

  result = qword_25406B280;
  if (!qword_25406B280)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC60170, &type metadata for ClinicalSharingGraphMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25406B280);
  }
  return result;
}

unint64_t sub_21FA82574()
{
  unint64_t result;

  result = qword_25406B278;
  if (!qword_25406B278)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC60198, &type metadata for ClinicalSharingGraphMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25406B278);
  }
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingPatientMetadataQuery()
{
  return &type metadata for ClinicalSharingPatientMetadataQuery;
}

uint64_t sub_21FA825C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(void);
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[3];
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[3];
  uint64_t v38;

  v27 = a1;
  sub_21FA848B8();
  v30 = v2;
  v32 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v28 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA84BB8();
  v31 = v4;
  v33 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v29 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA50814();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDB9E38];
  sub_21FA84E60(0, &qword_25553FF38, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
  swift_allocObject();
  v37[0] = sub_21FC5B25C();
  sub_21FA84B30(&qword_25553FF40, &qword_25553FF38, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))v11, MEMORY[0x24BDB9E58]);
  v34 = sub_21FC5B280();
  swift_release();
  sub_21FA2CEA0(a1 + 16, (uint64_t)v37);
  v12 = __swift_project_boxed_opaque_existential_1(v37, v38);
  v13 = (void *)*__swift_project_boxed_opaque_existential_1(v12 + 3, v12[6]);
  *(_QWORD *)(swift_allocObject() + 16) = v13;
  sub_21FA84A5C(0, (unint64_t *)&qword_25406B9B8, (uint64_t (*)(uint64_t))sub_21FA849F8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v11);
  sub_21FA84E18((unint64_t *)&qword_25406B9B0, (unint64_t *)&qword_25406B9B8, (uint64_t (*)(uint64_t))sub_21FA849F8);
  v14 = v13;
  sub_21FC5B268();
  sub_21FA2A08C(&qword_25406B9D0, (uint64_t (*)(uint64_t))sub_21FA50814, MEMORY[0x24BDB9E90]);
  v15 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  sub_21FA2CEA0(a1 + 16, (uint64_t)v37);
  __swift_project_boxed_opaque_existential_1(v37, v38);
  v36 = sub_21FC5B9B8();
  sub_21FA84A5C(0, &qword_25553FF48, (uint64_t (*)(uint64_t))sub_21FA84ACC, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v11);
  sub_21FA84E18(&qword_25553FF50, &qword_25553FF48, (uint64_t (*)(uint64_t))sub_21FA84ACC);
  v16 = sub_21FC5B280();
  v26[0] = v16;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  v26[2] = v15;
  v36 = v34;
  v37[0] = v15;
  v35 = v16;
  v17 = MEMORY[0x24BDB9AE0];
  sub_21FA84A5C(0, &qword_25406B968, (uint64_t (*)(uint64_t))sub_21FA849F8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  v26[1] = v18;
  sub_21FA84E60(0, &qword_25553FED0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))v17);
  sub_21FA84A5C(0, &qword_25553FED8, (uint64_t (*)(uint64_t))sub_21FA84ACC, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v17);
  sub_21FA84B70((unint64_t *)&qword_25406B960, &qword_25406B968, (uint64_t (*)(uint64_t))sub_21FA849F8);
  sub_21FA84B30(&qword_25553FEE8, &qword_25553FED0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))v17, MEMORY[0x24BDB9AF8]);
  sub_21FA84B70(&qword_25553FEF0, &qword_25553FED8, (uint64_t (*)(uint64_t))sub_21FA84ACC);
  swift_retain();
  swift_retain();
  swift_retain();
  v19 = v28;
  sub_21FC5B094();
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = sub_21FA84EEC;
  *(_QWORD *)(v20 + 24) = v27;
  swift_retain();
  sub_21FC5B184();
  sub_21FA84D24();
  sub_21FA2A08C(&qword_25553FF30, (uint64_t (*)(uint64_t))sub_21FA848B8, MEMORY[0x24BDB9728]);
  sub_21FA2A08C(&qword_25553FF20, (uint64_t (*)(uint64_t))sub_21FA84D24, MEMORY[0x24BDB9970]);
  v21 = v29;
  v22 = v30;
  sub_21FC5B340();
  swift_release();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v22);
  sub_21FA2A08C(&qword_25553FF58, (uint64_t (*)(uint64_t))sub_21FA84BB8, MEMORY[0x24BDB98F0]);
  v23 = v31;
  v24 = sub_21FC5B280();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v21, v23);
  return v24;
}

uint64_t sub_21FA82B1C(unint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_21FA82B9C(a1, a2 & 1, a3, a4, a5, a6, a7);
  sub_21FA2D1A0(0, &qword_25553FF10, type metadata accessor for ClinicalSharingQueryOutput, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_21FA84DB8();
  sub_21FC5B748();
  return swift_bridgeObjectRelease();
}

unint64_t sub_21FA82B9C(unint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  size_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(uint64_t, uint64_t, uint64_t);
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  size_t v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t Output;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, size_t, uint64_t);
  uint64_t v91;
  uint64_t v92;

  v75 = a5;
  v76 = a6;
  v73 = a3;
  v74 = a4;
  v72 = a1;
  v71 = a2 & 1;
  Output = type metadata accessor for ClinicalSharingQueryOutput(0);
  v80 = *(_QWORD *)(Output - 8);
  v8 = MEMORY[0x24BDAC7A8](Output);
  v79 = (uint64_t)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v78 = (uint64_t)&v69 - v10;
  sub_21FA84F50(0);
  v81 = v11;
  v70 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v82 = (uint64_t)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v83 = (uint64_t)&v69 - v14;
  v15 = sub_21FC5AAF4();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v87 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v86 = (uint64_t)&v69 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v69 - v21;
  sub_21FA2D1A0(0, &qword_25406BE78, v23, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v69 - v25;
  v77 = a7;
  v27 = *(_QWORD *)(a7 + 56);
  v28 = sub_21FC4BF3C(v27);
  v89 = sub_21FA84F6C(v28);
  v91 = MEMORY[0x24BEE4B08];
  v92 = MEMORY[0x24BEE4B08];
  v29 = swift_bridgeObjectRetain();
  v30 = sub_21FBFF6AC(v29);
  swift_bridgeObjectRelease();
  v31 = *(_QWORD *)(v30 + 16);
  v69 = v30;
  if (v31)
  {
    v32 = v30 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    v88 = *(_QWORD *)(v16 + 72);
    v90 = *(void (**)(char *, size_t, uint64_t))(v16 + 16);
    v85 = v27;
    v90(v26, v32, v15);
    while (1)
    {
      v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
      v36(v26, 0, 1, v15);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v26, 1, v15) == 1)
        goto LABEL_18;
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v22, v26, v15);
      if (*(_QWORD *)(v27 + 16))
      {
        v37 = sub_21FA73E18((uint64_t)v22);
        v38 = MEMORY[0x24BEE4B08];
        if ((v39 & 1) != 0)
        {
          v38 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v37);
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        v38 = MEMORY[0x24BEE4B08];
      }
      if ((sub_21FA832D0(v89, v38) & 1) != 0)
        break;
      v40 = *(_QWORD *)(v38 + 16);
      swift_bridgeObjectRelease();
      if (v40)
      {
        v33 = v87;
        v90(v87, (size_t)v22, v15);
        goto LABEL_4;
      }
      (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
LABEL_5:
      v32 += v88;
      if (!--v31)
        goto LABEL_17;
      v90(v26, v32, v15);
    }
    swift_bridgeObjectRelease();
    v33 = v87;
    v90(v87, (size_t)v22, v15);
LABEL_4:
    v34 = v86;
    sub_21FBECDF8(v86, v33);
    v35 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v27 = v85;
    v35(v34, v15);
    v35((uint64_t)v22, v15);
    goto LABEL_5;
  }
  v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
LABEL_17:
  v36(v26, 1, 1, v15);
LABEL_18:
  swift_release();
  swift_release();
  sub_21FA2D1A0(0, &qword_25553FF68, (uint64_t (*)(uint64_t))sub_21FA84F50, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v41 = *(_QWORD *)(v70 + 72);
  v42 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
  v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_21FC5F720;
  v90 = (void (*)(char *, size_t, uint64_t))v43;
  v44 = v43 + v42;
  v45 = v92;
  swift_bridgeObjectRetain();
  v46 = v71;
  v48 = v73;
  v47 = v74;
  v50 = v75;
  v49 = v76;
  v51 = v77;
  sub_21FA83688(MEMORY[0x24BEE4AF8], v71, v73, v74, v75, v76, v45, v77, v44);
  swift_bridgeObjectRelease();
  v52 = v44 + v41;
  v53 = v91;
  swift_bridgeObjectRetain();
  sub_21FA83688(v72, v46, v48, v47, v50, v49, v53, v51, v52);
  swift_bridgeObjectRelease();
  v54 = v83;
  sub_21FA2D120(v44, v83, (uint64_t (*)(_QWORD))sub_21FA84F50);
  v55 = v82;
  sub_21FA2D23C(v54, v82, (uint64_t (*)(_QWORD))sub_21FA84F50);
  v56 = v80;
  v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48);
  if (v57(v55, 1, Output) == 1)
  {
    sub_21FA326EC(v55, (uint64_t (*)(_QWORD))sub_21FA84F50);
    v58 = MEMORY[0x24BEE4AF8];
    v59 = v79;
  }
  else
  {
    v60 = v78;
    sub_21FA2D23C(v55, v78, type metadata accessor for ClinicalSharingQueryOutput);
    v59 = v79;
    sub_21FA2D23C(v60, v79, type metadata accessor for ClinicalSharingQueryOutput);
    v58 = MEMORY[0x24BEE4AF8];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v58 = sub_21FA7E0D8(0, *(_QWORD *)(v58 + 16) + 1, 1, v58);
    v62 = *(_QWORD *)(v58 + 16);
    v61 = *(_QWORD *)(v58 + 24);
    if (v62 >= v61 >> 1)
      v58 = sub_21FA7E0D8(v61 > 1, v62 + 1, 1, v58);
    *(_QWORD *)(v58 + 16) = v62 + 1;
    sub_21FA2D23C(v59, v58+ ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(_QWORD *)(v56 + 72) * v62, type metadata accessor for ClinicalSharingQueryOutput);
    v55 = v82;
  }
  v63 = v52;
  v64 = v83;
  sub_21FA2D120(v63, v83, (uint64_t (*)(_QWORD))sub_21FA84F50);
  sub_21FA2D23C(v64, v55, (uint64_t (*)(_QWORD))sub_21FA84F50);
  if (v57(v55, 1, Output) == 1)
  {
    sub_21FA326EC(v55, (uint64_t (*)(_QWORD))sub_21FA84F50);
  }
  else
  {
    v65 = v78;
    sub_21FA2D23C(v55, v78, type metadata accessor for ClinicalSharingQueryOutput);
    sub_21FA2D23C(v65, v59, type metadata accessor for ClinicalSharingQueryOutput);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v58 = sub_21FA7E0D8(0, *(_QWORD *)(v58 + 16) + 1, 1, v58);
    v67 = *(_QWORD *)(v58 + 16);
    v66 = *(_QWORD *)(v58 + 24);
    if (v67 >= v66 >> 1)
      v58 = sub_21FA7E0D8(v66 > 1, v67 + 1, 1, v58);
    *(_QWORD *)(v58 + 16) = v67 + 1;
    sub_21FA2D23C(v59, v58+ ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(_QWORD *)(v56 + 72) * v67, type metadata accessor for ClinicalSharingQueryOutput);
  }
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v58;
}

uint64_t sub_21FA832D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  int64_t i;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  _QWORD v38[2];
  int64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = sub_21FC5ACD4();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)v38 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v44 = (char *)v38 - v12;
  v13 = *(_QWORD *)(a2 + 16);
  if (!v13)
    return 1;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    return 1;
  if (v13 >= v14)
    v15 = a1;
  else
    v15 = a2;
  if (v13 >= v14)
    a1 = a2;
  v16 = *(_QWORD *)(v15 + 56);
  v40 = v15 + 56;
  v17 = -1 << *(_BYTE *)(v15 + 32);
  v38[1] = ~v17;
  if (-v17 < 64)
    v18 = ~(-1 << -(char)v17);
  else
    v18 = -1;
  v19 = v18 & v16;
  v39 = (unint64_t)(63 - v17) >> 6;
  v47 = a1 + 56;
  v43 = v15;
  swift_bridgeObjectRetain();
  v48 = a1;
  result = swift_bridgeObjectRetain();
  for (i = 0; ; i = v46)
  {
    v41 = v19;
    v42 = i;
    if (!v19)
      break;
    v45 = (v19 - 1) & v19;
    v46 = i;
    v22 = __clz(__rbit64(v19)) | (i << 6);
LABEL_29:
    v27 = v44;
    v28 = *(_QWORD *)(v5 + 72);
    v29 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    v29(v44, *(_QWORD *)(v43 + 48) + v28 * v22, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v11, v27, v4);
    if (*(_QWORD *)(v48 + 16))
    {
      v30 = v48;
      sub_21FA2A08C(&qword_25406BC08, (uint64_t (*)(uint64_t))MEMORY[0x24BE45940], MEMORY[0x24BE45950]);
      v31 = sub_21FC5B58C();
      v32 = -1 << *(_BYTE *)(v30 + 32);
      v33 = v31 & ~v32;
      if (((*(_QWORD *)(v47 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) != 0)
      {
        v34 = ~v32;
        while (1)
        {
          v29(v8, *(_QWORD *)(v48 + 48) + v33 * v28, v4);
          sub_21FA2A08C(&qword_25553ECD8, (uint64_t (*)(uint64_t))MEMORY[0x24BE45940], MEMORY[0x24BE45958]);
          v35 = sub_21FC5B5D4();
          v36 = *(void (**)(char *, uint64_t))(v5 + 8);
          v36(v8, v4);
          if ((v35 & 1) != 0)
            break;
          v33 = (v33 + 1) & v34;
          if (((*(_QWORD *)(v47 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) == 0)
            goto LABEL_12;
        }
        swift_bridgeObjectRelease();
        v36(v11, v4);
        v37 = 0;
        goto LABEL_37;
      }
    }
LABEL_12:
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    v19 = v45;
  }
  v23 = i + 1;
  if (__OFADD__(i, 1))
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v23 >= v39)
    goto LABEL_39;
  v24 = *(_QWORD *)(v40 + 8 * v23);
  v25 = i + 1;
  if (v24)
    goto LABEL_28;
  v25 = i + 2;
  if (i + 2 >= v39)
    goto LABEL_39;
  v24 = *(_QWORD *)(v40 + 8 * v25);
  if (v24)
    goto LABEL_28;
  v25 = i + 3;
  if (i + 3 >= v39)
    goto LABEL_39;
  v24 = *(_QWORD *)(v40 + 8 * v25);
  if (v24)
  {
LABEL_28:
    v45 = (v24 - 1) & v24;
    v46 = v25;
    v22 = __clz(__rbit64(v24)) + (v25 << 6);
    goto LABEL_29;
  }
  v26 = i + 4;
  if (i + 4 >= v39)
  {
LABEL_39:
    swift_bridgeObjectRelease();
    v37 = 1;
LABEL_37:
    sub_21FA850C8();
    return v37;
  }
  v24 = *(_QWORD *)(v40 + 8 * v26);
  if (v24)
  {
    v25 = i + 4;
    goto LABEL_28;
  }
  while (1)
  {
    v25 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v25 >= v39)
      goto LABEL_39;
    v24 = *(_QWORD *)(v40 + 8 * v25);
    ++v26;
    if (v24)
      goto LABEL_28;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_21FA83688@<X0>(unint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t (*v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t Output;
  _QWORD *v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v77 = a6;
  v78 = a8;
  v75 = a4;
  v76 = a5;
  v73 = a1;
  v74 = a3;
  v68 = a2;
  sub_21FA850D0(0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v81 = (uint64_t)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v80 = (uint64_t)&v65 - v14;
  v15 = type metadata accessor for PBPatientMeta(0);
  MEMORY[0x24BDAC7A8](v15);
  v79 = (uint64_t)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA850EC(0);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v72 = (uint64_t)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v71 = (uint64_t)&v65 - v20;
  v21 = sub_21FC5AAAC();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v65 - v26;
  sub_21FA2D1A0(0, &qword_25553E0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v65 - v29;
  v31 = type metadata accessor for PBDateRange(0);
  v69 = *(_QWORD *)(v31 - 8);
  v70 = v31;
  MEMORY[0x24BDAC7A8](v31);
  v33 = (char *)&v65 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for PBTypedData(0);
  MEMORY[0x24BDAC7A8](v34);
  v36 = (char *)&v65 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a7 + 16))
  {
    v66 = a9;
    sub_21FC5AD10();
    v37 = *(int *)(v34 + 20);
    if (qword_25553D590 != -1)
      swift_once();
    v67 = a7;
    v68 &= 1u;
    *(_QWORD *)&v36[v37] = qword_25553E450;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBTypedData._StorageClass(0);
      swift_allocObject();
      v38 = swift_retain();
      *(_QWORD *)&v36[v37] = sub_21FA3A458(v38);
      swift_release();
    }
    v39 = *(_QWORD *)&v36[v37];
    swift_beginAccess();
    *(_QWORD *)(v39 + 16) = 112;
    *(_BYTE *)(v39 + 24) = 1;
    v40 = v78;
    v41 = v78 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_date;
    v42 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
    v42(v27, v78 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_date, v21);
    v42(v25, v41, v21);
    sub_21FC5A68C();
    v43 = sub_21FC5A6C8();
    v44 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v30, 0, 1, v43);
    sub_21FBE816C(5, 1, v30, v40);
    sub_21FA2D1F8((uint64_t)v30, &qword_25553E0E8, v44);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBTypedData._StorageClass(0);
      swift_allocObject();
      v45 = swift_retain();
      *(_QWORD *)&v36[v37] = sub_21FA3A458(v45);
      swift_release();
    }
    v46 = *(_QWORD *)&v36[v37];
    v47 = v71;
    sub_21FA2D23C((uint64_t)v33, v71, type metadata accessor for PBDateRange);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v69 + 56))(v47, 0, 1, v70);
    v48 = v72;
    sub_21FA2D23C(v47, v72, (uint64_t (*)(_QWORD))sub_21FA850EC);
    v49 = v46
        + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
    swift_beginAccess();
    swift_retain();
    sub_21FA85108(v48, v49, (uint64_t (*)(_QWORD))sub_21FA850EC);
    swift_endAccess();
    swift_release();
    v50 = v79;
    sub_21FA83CDC(v73, v68, v74, v75, v76, v77, v40, v79);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v52 = v67;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      type metadata accessor for PBTypedData._StorageClass(0);
      swift_allocObject();
      v53 = swift_retain();
      *(_QWORD *)&v36[v37] = sub_21FA3A458(v53);
      swift_release();
    }
    v54 = *(_QWORD *)&v36[v37];
    v55 = v50;
    v56 = v80;
    sub_21FA2D23C(v55, v80, type metadata accessor for PBPatientMeta);
    v57 = type metadata accessor for PBTypedData.OneOf_Raw(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v56, 0, 1, v57);
    v58 = v81;
    sub_21FA2D23C(v56, v81, (uint64_t (*)(_QWORD))sub_21FA850D0);
    v59 = v54
        + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
    swift_beginAccess();
    swift_retain();
    sub_21FA85108(v58, v59, (uint64_t (*)(_QWORD))sub_21FA850D0);
    swift_endAccess();
    swift_release();
    v60 = v66;
    sub_21FA2D23C((uint64_t)v36, v66, type metadata accessor for PBTypedData);
    Output = type metadata accessor for ClinicalSharingQueryOutput(0);
    *(_QWORD *)(v60 + *(int *)(Output + 20)) = v52;
    v62 = (_QWORD *)(v60 + *(int *)(Output + 24));
    *v62 = 0;
    v62[1] = 0;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(Output - 8) + 56))(v60, 0, 1, Output);
    return swift_bridgeObjectRetain();
  }
  else
  {
    v64 = type metadata accessor for ClinicalSharingQueryOutput(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(a9, 1, 1, v64);
  }
}

uint64_t sub_21FA83CDC@<X0>(unint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;

  v81 = a6;
  v77 = a5;
  v80 = a4;
  v76 = a3;
  v92 = a1;
  sub_21FA8514C(0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v87 = (uint64_t)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v85 = (uint64_t)&v76 - v14;
  v84 = type metadata accessor for PBPatientMeta.HumanName(0);
  v83 = *(_QWORD *)(v84 - 8);
  v15 = MEMORY[0x24BDAC7A8](v84);
  v82 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v86 = (char *)&v76 - v17;
  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v18);
  v78 = (uint64_t)&v76 - v19;
  v89 = sub_21FC5AAAC();
  v88 = *(_QWORD *)(v89 - 8);
  MEMORY[0x24BDAC7A8](v89);
  v79 = (char *)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_21FC5ACD4();
  v21 = *(_QWORD *)(v91 - 8);
  MEMORY[0x24BDAC7A8](v91);
  v23 = (uint64_t *)((char *)&v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = sub_21FC5AC5C();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC5AD10();
  v28 = *(int *)(type metadata accessor for PBPatientMeta(0) + 20);
  if (qword_25553DAC0 != -1)
    swift_once();
  v90 = a2 & 1;
  *(_QWORD *)(a8 + v28) = qword_255543F60;
  v93 = a7;
  swift_retain();
  sub_21FC5ABD8();
  v29 = sub_21FC5AC14();
  v31 = v30;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPatientMeta._StorageClass(0);
    swift_allocObject();
    v32 = swift_retain();
    *(_QWORD *)(a8 + v28) = sub_21FB808CC(v32);
    swift_release();
  }
  v33 = *(_QWORD *)(a8 + v28);
  swift_beginAccess();
  *(_QWORD *)(v33 + 32) = v29;
  *(_QWORD *)(v33 + 40) = v31;
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPatientMeta._StorageClass(0);
    swift_allocObject();
    v34 = swift_retain();
    *(_QWORD *)(a8 + v28) = sub_21FB808CC(v34);
    swift_release();
  }
  v35 = *(_QWORD *)(a8 + v28);
  swift_beginAccess();
  *(_BYTE *)(v35 + 16) = v90;
  v36 = v93;
  v37 = *(_QWORD *)(v93 + 56);
  sub_21FA5BE58(0, &qword_25553FF78);
  *v23 = MEMORY[0x2207D03B4]((id)*MEMORY[0x24BDD36A0]);
  v38 = v91;
  v39 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v21 + 104))(v23, *MEMORY[0x24BE458E8], v91);
  MEMORY[0x24BDAC7A8](v39);
  *(&v76 - 2) = (uint64_t)v23;
  swift_bridgeObjectRetain();
  v40 = sub_21FBE9FC4(MEMORY[0x24BEE4AF8], (void (*)(uint64_t *, char *))sub_21FA85168, (uint64_t)(&v76 - 4), v37);
  swift_bridgeObjectRelease();
  v41 = *(_QWORD *)(v40 + 16);
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v21 + 8))(v23, v38);
  if (v41)
  {
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v36 + 16), *(_QWORD *)(v36 + 40));
    v43 = v78;
    sub_21FC208F4(v78);
    v44 = v88;
    v45 = v89;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v43, 1, v89) == 1)
    {
      sub_21FA2D1F8(v43, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
      v46 = v80;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v79, v43, v45);
      v46 = v80;
      if (qword_25553DC90 != -1)
        swift_once();
      v47 = (void *)qword_255572F60;
      v48 = (void *)sub_21FC5AA64();
      v49 = objc_msgSend(v47, sel_stringFromDate_, v48);

      v50 = sub_21FC5B604();
      v52 = v51;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for PBPatientMeta._StorageClass(0);
        swift_allocObject();
        v53 = swift_retain();
        *(_QWORD *)(a8 + v28) = sub_21FB808CC(v53);
        swift_release();
      }
      v54 = (uint64_t *)(*(_QWORD *)(a8 + v28)
                      + OBJC_IVAR____TtCV19HealthRecordsDaemon13PBPatientMetaP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__dob);
      swift_beginAccess();
      *v54 = v50;
      v54[1] = v52;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v88 + 8))(v79, v89);
    }
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v36 + 16), *(_QWORD *)(v36 + 40));
    v55 = sub_21FC2065C();
    v57 = v86;
    if (v56)
    {
      v58 = v55;
      v59 = v56;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for PBPatientMeta._StorageClass(0);
        swift_allocObject();
        v60 = swift_retain();
        *(_QWORD *)(a8 + v28) = sub_21FB808CC(v60);
        swift_release();
      }
      v61 = *(_QWORD *)(a8 + v28);
      swift_beginAccess();
      *(_QWORD *)(v61 + 48) = v58;
      *(_QWORD *)(v61 + 56) = v59;
      swift_bridgeObjectRelease();
    }
    *v57 = 0;
    v57[1] = 0xE000000000000000;
    v57[2] = 0;
    v57[3] = 0xE000000000000000;
    v62 = v84;
    sub_21FC5AD10();
    if (v46)
    {
      *v57 = v76;
      v57[1] = v46;
    }
    v63 = (uint64_t)v82;
    v64 = v81;
    if (v81)
    {
      v57[2] = v77;
      v57[3] = v64;
    }
    sub_21FA2D120((uint64_t)v57, v63, type metadata accessor for PBPatientMeta.HumanName);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBPatientMeta._StorageClass(0);
      swift_allocObject();
      v65 = swift_retain();
      *(_QWORD *)(a8 + v28) = sub_21FB808CC(v65);
      swift_release();
    }
    v66 = *(_QWORD *)(a8 + v28);
    v67 = v63;
    v68 = v85;
    sub_21FA2D23C(v67, v85, type metadata accessor for PBPatientMeta.HumanName);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v83 + 56))(v68, 0, 1, v62);
    v69 = v87;
    sub_21FA2D23C(v68, v87, (uint64_t (*)(_QWORD))sub_21FA8514C);
    v70 = v66
        + OBJC_IVAR____TtCV19HealthRecordsDaemon13PBPatientMetaP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__name;
    swift_beginAccess();
    swift_retain();
    sub_21FA85108(v69, v70, (uint64_t (*)(_QWORD))sub_21FA8514C);
    swift_endAccess();
    swift_release();
    result = sub_21FA326EC((uint64_t)v57, type metadata accessor for PBPatientMeta.HumanName);
  }
  v71 = v92;
  if (v92 >> 62)
  {
    swift_bridgeObjectRetain();
    v75 = sub_21FC5BC7C();
    result = swift_bridgeObjectRelease();
    if (!v75)
      return result;
  }
  else if (!*(_QWORD *)((v92 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  swift_retain();
  v72 = sub_21FA8574C(v71, v36);
  swift_release();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPatientMeta._StorageClass(0);
    swift_allocObject();
    v73 = swift_retain();
    *(_QWORD *)(a8 + v28) = sub_21FB808CC(v73);
    swift_release();
  }
  v74 = *(_QWORD *)(a8 + v28);
  swift_beginAccess();
  *(_QWORD *)(v74 + 24) = v72;
  return swift_bridgeObjectRelease();
}

uint64_t sub_21FA845E8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;

  v37 = a2;
  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v36 - v6;
  v8 = sub_21FC5AAAC();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v36 - v13;
  a3[2] = 0;
  a3[3] = 0xE000000000000000;
  a3[4] = 0;
  a3[5] = 0xE000000000000000;
  type metadata accessor for PBPatientMeta.CHRMeta(0);
  sub_21FC5AD10();
  v15 = objc_msgSend(a1, sel_title);
  v16 = sub_21FC5B604();
  v18 = v17;

  *a3 = v16;
  a3[1] = v18;
  v19 = objc_msgSend(a1, sel_gateway);
  if (v19)
  {
    v20 = v19;
    v21 = objc_msgSend(v19, sel_externalID);

    v22 = sub_21FC5B604();
    v24 = v23;

    a3[4] = v22;
    a3[5] = v24;
  }
  v25 = objc_msgSend(a1, sel_lastFetchDate);
  if (v25)
  {
    v26 = v25;
    sub_21FC5AA94();

    v27 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v27(v7, v12, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
    {
      v28 = v14;
      v27(v14, v7, v8);
      v29 = *(id *)(v37 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_isoDateFormatter);
      v30 = (void *)sub_21FC5AA64();
      v31 = objc_msgSend(v29, sel_stringFromDate_, v30);

      v32 = sub_21FC5B604();
      v34 = v33;

      (*(void (**)(char *, uint64_t))(v9 + 8))(v28, v8);
      result = swift_bridgeObjectRelease();
      a3[2] = v32;
      a3[3] = v34;
      return result;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  }
  return sub_21FA2D1F8((uint64_t)v7, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
}

uint64_t sub_21FA848B0()
{
  uint64_t *v0;

  return sub_21FA825C8(*v0);
}

void sub_21FA848B8()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25553FEC8)
  {
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FA84A5C(255, &qword_25406B968, (uint64_t (*)(uint64_t))sub_21FA849F8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA84E60(255, &qword_25553FED0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))v0);
    sub_21FA84A5C(255, &qword_25553FED8, (uint64_t (*)(uint64_t))sub_21FA84ACC, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v0);
    sub_21FA84B70((unint64_t *)&qword_25406B960, &qword_25406B968, (uint64_t (*)(uint64_t))sub_21FA849F8);
    sub_21FA84B30(&qword_25553FEE8, &qword_25553FED0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    sub_21FA84B70(&qword_25553FEF0, &qword_25553FED8, (uint64_t (*)(uint64_t))sub_21FA84ACC);
    v1 = sub_21FC5B088();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25553FEC8);
  }
}

void sub_21FA849F8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406BA70)
  {
    sub_21FA5BE58(255, (unint64_t *)&qword_25406BA88);
    v0 = sub_21FC5B7F0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406BA70);
  }
}

void sub_21FA84A5C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = sub_21FA2CDB4();
    v9 = a4(a1, v7, v8, MEMORY[0x24BEE3F20]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_21FA84ACC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25553FEE0)
  {
    sub_21FA32728();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25553FEE0);
  }
}

uint64_t sub_21FA84B30(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FA84E60(255, a2, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FA84B70(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_21FA84A5C(255, a2, a3, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9AF8], v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_21FA84BB8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553FEF8)
  {
    sub_21FA84C80();
    sub_21FA848B8();
    sub_21FA2A08C(&qword_25553FF28, (uint64_t (*)(uint64_t))sub_21FA84C80, MEMORY[0x24BDB95F8]);
    sub_21FA2A08C(&qword_25553FF30, (uint64_t (*)(uint64_t))sub_21FA848B8, MEMORY[0x24BDB9728]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553FEF8);
  }
}

void sub_21FA84C80()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553FF00)
  {
    sub_21FA84D24();
    sub_21FA2CDB4();
    sub_21FA2A08C(&qword_25553FF20, (uint64_t (*)(uint64_t))sub_21FA84D24, MEMORY[0x24BDB9970]);
    v0 = sub_21FC5B04C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553FF00);
  }
}

void sub_21FA84D24()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553FF08)
  {
    sub_21FA2D1A0(255, &qword_25553FF10, type metadata accessor for ClinicalSharingQueryOutput, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FA84DB8();
    v0 = sub_21FC5B130();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553FF08);
  }
}

unint64_t sub_21FA84DB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25553FF18;
  if (!qword_25553FF18)
  {
    sub_21FA2D1A0(255, &qword_25553FF10, type metadata accessor for ClinicalSharingQueryOutput, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_25553FF18);
  }
  return result;
}

uint64_t sub_21FA84E18(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_21FA84A5C(255, a2, a3, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9E58], v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_21FA84E60(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t, _QWORD))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_21FA2CDB4();
    v7 = a3(a1, &type metadata for PairedWatchStatus, v6, MEMORY[0x24BEE3F20]);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_21FA84EC8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_21FA84EEC(unint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  return sub_21FA82B1C(a1, a2 & 1, a3, a4, a5, a6, v6);
}

uint64_t sub_21FA84EF8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FA84F1C(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v1 + 16))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_21FA84F50(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25553FF60, type metadata accessor for ClinicalSharingQueryOutput, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t sub_21FA84F6C(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  size_t v5;
  uint64_t v6;
  void *v7;
  _QWORD v9[2];

  v2 = isStackAllocationSafe;
  v9[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = (unint64_t)((1 << v3) + 63) >> 6;
  v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    v6 = sub_21FA85180((_QWORD *)((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    swift_release();
    if (v1)
      swift_willThrow();
  }
  else
  {
    v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    v6 = sub_21FA85180((unint64_t *)v7, v4, v2);
    swift_release();
    MEMORY[0x2207D105C](v7, -1, -1);
  }
  return v6;
}

uint64_t sub_21FA850C8()
{
  return swift_release();
}

void sub_21FA850D0(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_21FA850EC(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25553E0F8, type metadata accessor for PBDateRange, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t sub_21FA85108(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

void sub_21FA8514C(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25553FF70, type metadata accessor for PBPatientMeta.HumanName, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t sub_21FA85168(unint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_21FC4C2E4(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_21FA85180(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(void **, uint64_t);
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  void (*v23)(char *, unint64_t, uint64_t);
  int v24;
  void *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  int v35;
  uint64_t v36;

  v30 = a2;
  v31 = a1;
  v4 = sub_21FC5ACD4();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (void **)((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v29 - v10;
  v12 = 0;
  v36 = a3;
  v13 = *(_QWORD *)(a3 + 56);
  v32 = 0;
  v33 = a3 + 56;
  v14 = 1 << *(_BYTE *)(a3 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v34 = (unint64_t)(v14 + 63) >> 6;
  v35 = *MEMORY[0x24BE458E8];
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v12 << 6);
      goto LABEL_22;
    }
    v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v20 >= v34)
      goto LABEL_27;
    v21 = *(_QWORD *)(v33 + 8 * v20);
    ++v12;
    if (!v21)
    {
      v12 = v20 + 1;
      if (v20 + 1 >= v34)
        goto LABEL_27;
      v21 = *(_QWORD *)(v33 + 8 * v12);
      if (!v21)
      {
        v12 = v20 + 2;
        if (v20 + 2 >= v34)
          goto LABEL_27;
        v21 = *(_QWORD *)(v33 + 8 * v12);
        if (!v21)
          break;
      }
    }
LABEL_21:
    v16 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_22:
    v23 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    v23(v11, *(_QWORD *)(v36 + 48) + *(_QWORD *)(v5 + 72) * v19, v4);
    v23((char *)v8, (unint64_t)v11, v4);
    v24 = (*(uint64_t (**)(void **, uint64_t))(v5 + 88))(v8, v4);
    if (v24 != v35)
    {
      v17 = *(void (**)(void **, uint64_t))(v5 + 8);
      v17(v8, v4);
      goto LABEL_5;
    }
    (*(void (**)(void **, uint64_t))(v5 + 96))(v8, v4);
    v25 = *v8;
    objc_opt_self();
    v26 = swift_dynamicCastObjCClass();

    v17 = *(void (**)(void **, uint64_t))(v5 + 8);
    if (v26)
    {
      result = ((uint64_t (*)(char *, uint64_t))v17)(v11, v4);
      *(unint64_t *)((char *)v31 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      if (__OFADD__(v32++, 1))
      {
        __break(1u);
LABEL_27:
        v28 = v36;
        swift_retain();
        return sub_21FA85450(v31, v30, v32, v28);
      }
    }
    else
    {
LABEL_5:
      result = ((uint64_t (*)(char *, uint64_t))v17)(v11, v4);
    }
  }
  v22 = v20 + 3;
  if (v22 >= v34)
    goto LABEL_27;
  v21 = *(_QWORD *)(v33 + 8 * v22);
  if (v21)
  {
    v12 = v22;
    goto LABEL_21;
  }
  while (1)
  {
    v12 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v12 >= v34)
      goto LABEL_27;
    v21 = *(_QWORD *)(v33 + 8 * v12);
    ++v22;
    if (v21)
      goto LABEL_21;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_21FA85450(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;

  v8 = sub_21FC5ACD4();
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  v38 = v9;
  sub_21FA85900();
  result = sub_21FC5BB5C();
  v12 = result;
  v36 = a1;
  v37 = a2;
  if (a2 < 1)
    v14 = 0;
  else
    v14 = *a1;
  v15 = 0;
  v16 = result + 56;
  v17 = v38;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v15 << 6);
    }
    else
    {
      v20 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_40;
      if (v20 >= v37)
      {
LABEL_37:
        swift_release();
        return v12;
      }
      v21 = v36[v20];
      ++v15;
      if (!v21)
      {
        v15 = v20 + 1;
        if (v20 + 1 >= v37)
          goto LABEL_37;
        v21 = v36[v15];
        if (!v21)
        {
          v15 = v20 + 2;
          if (v20 + 2 >= v37)
            goto LABEL_37;
          v21 = v36[v15];
          if (!v21)
          {
            v22 = v20 + 3;
            if (v22 >= v37)
              goto LABEL_37;
            v21 = v36[v22];
            if (!v21)
            {
              while (1)
              {
                v15 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_41;
                if (v15 >= v37)
                  goto LABEL_37;
                v21 = v36[v15];
                ++v22;
                if (v21)
                  goto LABEL_24;
              }
            }
            v15 = v22;
          }
        }
      }
LABEL_24:
      v14 = (v21 - 1) & v21;
      v19 = __clz(__rbit64(v21)) + (v15 << 6);
    }
    v23 = a4;
    v24 = *(_QWORD *)(a4 + 48);
    v25 = *(_QWORD *)(v17 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v11, v24 + v25 * v19, v8);
    sub_21FA2A08C(&qword_25406BC08, (uint64_t (*)(uint64_t))MEMORY[0x24BE45940], MEMORY[0x24BE45950]);
    result = sub_21FC5B58C();
    v26 = -1 << *(_BYTE *)(v12 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6))) != 0)
    {
      v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      v17 = v38;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v26) >> 6;
      v17 = v38;
      do
      {
        if (++v28 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v32 = v28 == v31;
        if (v28 == v31)
          v28 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v16 + 8 * v28);
      }
      while (v33 == -1);
      v29 = __clz(__rbit64(~v33)) + (v28 << 6);
    }
    *(_QWORD *)(v16 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(_QWORD *)(v12 + 48) + v29 * v25, v11, v8);
    ++*(_QWORD *)(v12 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v23;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_21FA8574C(unint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  id v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v17 = a2;
  v5 = type metadata accessor for PBPatientMeta.CHRMeta(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (uint64_t *)((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1 >> 62)
    goto LABEL_15;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v10 = MEMORY[0x24BEE4AF8];
    if (!v9)
      return v10;
    v18 = MEMORY[0x24BEE4AF8];
    result = sub_21FC01A28(0, v9 & ~(v9 >> 63), 0);
    if (v9 < 0)
      break;
    v16 = v3;
    v12 = 0;
    v10 = v18;
    while (v9 != v12)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v13 = (id)MEMORY[0x2207D057C](v12, a1);
      else
        v13 = *(id *)(a1 + 8 * v12 + 32);
      v14 = v13;
      sub_21FA845E8(v13, v17, v8);

      v18 = v10;
      v3 = *(_QWORD *)(v10 + 16);
      v15 = *(_QWORD *)(v10 + 24);
      if (v3 >= v15 >> 1)
      {
        sub_21FC01A28(v15 > 1, v3 + 1, 1);
        v10 = v18;
      }
      ++v12;
      *(_QWORD *)(v10 + 16) = v3 + 1;
      sub_21FA2D23C((uint64_t)v8, v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v3, type metadata accessor for PBPatientMeta.CHRMeta);
      if (v9 == v12)
        return v10;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v9 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void sub_21FA85900()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553FF80)
  {
    sub_21FC5ACD4();
    sub_21FA2A08C(&qword_25406BC08, (uint64_t (*)(uint64_t))MEMORY[0x24BE45940], MEMORY[0x24BE45950]);
    v0 = sub_21FC5BB68();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553FF80);
  }
}

void destroy for ClinicalSharingMedicationScheduleQuery(uint64_t a1)
{
  swift_release();

}

_QWORD *initializeWithCopy for ClinicalSharingMedicationScheduleQuery(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  v5 = v3;
  v6 = v4;
  return a1;
}

_QWORD *assignWithCopy for ClinicalSharingMedicationScheduleQuery(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  a1[2] = a2[2];
  v7 = (void *)a2[3];
  v8 = (void *)a1[3];
  a1[3] = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for ClinicalSharingMedicationScheduleQuery(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;

  swift_release();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;

  return a1;
}

uint64_t getEnumTagSinglePayload for ClinicalSharingMedicationScheduleQuery(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClinicalSharingMedicationScheduleQuery(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingMedicationScheduleQuery()
{
  return &type metadata for ClinicalSharingMedicationScheduleQuery;
}

uint64_t sub_21FA85B44(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t (*v13)(void);
  id v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  id v21;
  id v22;
  char *v23;
  _QWORD *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[5];

  v32 = a3;
  v33 = a4;
  sub_21FA8790C(0, &qword_25553FF88, (void (*)(uint64_t))type metadata accessor for PBTypedData);
  v36 = v7;
  v38 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v34 = (char *)&v31 - v8;
  sub_21FA8790C(0, &qword_25553FFB0, (void (*)(uint64_t))type metadata accessor for ClinicalSharingQueryOutput);
  v35 = v9;
  v37 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v31 - v10;
  sub_21FA2CEA0(a1 + 16, (uint64_t)v40);
  v12 = (void *)*__swift_project_boxed_opaque_existential_1(v40, v40[3]);
  *(_QWORD *)(swift_allocObject() + 16) = v12;
  v13 = MEMORY[0x24BDB9E38];
  sub_21FA879E4(0, &qword_25553FFB8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
  swift_allocObject();
  v14 = v12;
  v39 = sub_21FC5B25C();
  sub_21FA87A54(&qword_25553FFC0, &qword_25553FFB8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v13, MEMORY[0x24BDB9E58]);
  v15 = sub_21FC5B280();
  swift_release();
  v39 = v15;
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a1;
  v16[3] = a2;
  v17 = a2;
  v18 = v33;
  v16[4] = a3;
  v16[5] = v18;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = sub_21FA87A98;
  *(_QWORD *)(v19 + 24) = v16;
  v20 = MEMORY[0x24BDB9AE0];
  sub_21FA879E4(0, &qword_25553FF90, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  type metadata accessor for PBTypedData(0);
  sub_21FA87A54(&qword_25553FFA8, &qword_25553FF90, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v20, MEMORY[0x24BDB9AF8]);
  swift_retain();
  v21 = v17;
  v22 = v18;
  v23 = v34;
  sub_21FC5B28C();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  v24 = (_QWORD *)swift_allocObject();
  v24[2] = a1;
  v24[3] = v21;
  v24[4] = v32;
  v24[5] = v22;
  type metadata accessor for ClinicalSharingQueryOutput(0);
  swift_retain();
  v25 = v21;
  v26 = v22;
  v27 = v36;
  sub_21FC5AFF8();
  swift_release();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v23, v27);
  sub_21FA87B2C();
  v28 = v35;
  v29 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v28);
  return v29;
}

uint64_t sub_21FA85E94@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  id v41;
  uint64_t v42;
  _BYTE v43[16];

  v41 = a5;
  v42 = a4;
  sub_21FA2ED54(0, &qword_25553E0E8, (void (*)(uint64_t))MEMORY[0x24BDCB878]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v38 - v11;
  v13 = type metadata accessor for PBDateRange(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for PBMedicationTrackingSchedules(0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (uint64_t *)((char *)&v38 - v20);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v36 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
    if (v36)
      goto LABEL_3;
LABEL_9:
    v37 = type metadata accessor for PBTypedData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(a6, 1, 1, v37);
  }
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_9;
LABEL_3:
  v39 = v15;
  v40 = v19;
  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1500]), sel_init);
  v23 = (void *)sub_21FC5B5E0();
  objc_msgSend(v22, sel_setDateFormat_, v23);

  swift_retain();
  v24 = a3;
  v25 = v41;
  v26 = v22;
  v27 = sub_21FA87B84(a1, a2, (uint64_t)v24, v42, (uint64_t)v25, (uint64_t)v26, (uint64_t)v43, type metadata accessor for PBMedicationTrackingSchedule, (void (*)(BOOL, unint64_t, uint64_t))sub_21FC01A54, (void (*)(id *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_21FA86424);

  swift_release();
  v41 = v26;

  sub_21FC5AD10();
  *v21 = v27;
  sub_21FC5AD10();
  v28 = type metadata accessor for PBTypedData(0);
  v29 = *(int *)(v28 + 20);
  if (qword_25553D590 != -1)
    swift_once();
  *(_QWORD *)(a6 + v29) = qword_25553E450;
  v30 = sub_21FC5A6C8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v12, 1, 1, v30);
  swift_retain();
  v31 = (uint64_t)v39;
  sub_21FBE816C(5, 1, v12, a2);
  sub_21FA2EDA0((uint64_t)v12, &qword_25553E0E8, (void (*)(uint64_t))MEMORY[0x24BDCB878]);
  PBTypedData.dateRange.setter(v31);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBTypedData._StorageClass(0);
    swift_allocObject();
    v32 = swift_retain();
    *(_QWORD *)(a6 + v29) = sub_21FA3A458(v32);
    swift_release();
  }
  v33 = *(_QWORD *)(a6 + v29);
  swift_beginAccess();
  *(_QWORD *)(v33 + 16) = 129;
  *(_BYTE *)(v33 + 24) = 1;
  v34 = (uint64_t)v40;
  sub_21FA2D120((uint64_t)v21, (uint64_t)v40, type metadata accessor for PBMedicationTrackingSchedules);
  PBTypedData.medicationTrackingSchedules.setter(v34);

  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a6, 0, 1, v28);
  return sub_21FA326EC((uint64_t)v21, type metadata accessor for PBMedicationTrackingSchedules);
}

uint64_t sub_21FA862A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Output;
  _QWORD *v14;
  uint64_t v16;
  _BYTE v17[16];
  _BYTE *v18;

  v6 = sub_21FC5ACD4();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *(_QWORD *)(a2 + 56);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BE45938], v6);
  v18 = v9;
  swift_bridgeObjectRetain();
  v11 = sub_21FBE9FC4(MEMORY[0x24BEE4AF8], (void (*)(uint64_t *, char *))sub_21FA85168, (uint64_t)v17, v10);
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  if (*(_QWORD *)(v11 + 16))
  {
    sub_21FA2D120(a1, a3, type metadata accessor for PBTypedData);
    v12 = sub_21FBF27F0(v11);
    swift_bridgeObjectRelease();
    Output = type metadata accessor for ClinicalSharingQueryOutput(0);
    *(_QWORD *)(a3 + *(int *)(Output + 20)) = v12;
    v14 = (_QWORD *)(a3 + *(int *)(Output + 24));
    *v14 = 0;
    v14[1] = 0;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(Output - 8) + 56))(a3, 0, 1, Output);
  }
  else
  {
    v16 = type metadata accessor for ClinicalSharingQueryOutput(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 1, 1, v16);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_21FA86424@<X0>(void **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  id v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  id v80;
  void *v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  char *v85;
  id v86;
  void *v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  unint64_t v95;
  uint64_t v96;
  id v97;
  id v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int8 v104;
  char isUniquelyReferenced_nonNull_native;
  _DWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t result;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  void (*v126)(char *, uint64_t);
  char *v127;
  id v128;
  id v129;
  id v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146[8];

  v130 = a6;
  v129 = a5;
  v131 = a4;
  v128 = a3;
  v137 = a2;
  sub_21FA2ED54(0, &qword_25553FFD0, (void (*)(uint64_t))type metadata accessor for PBMedicationTrackingScheduleCompatibilityVersionRange);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v123 = (uint64_t)&v119 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v122 = (uint64_t)&v119 - v12;
  v134 = type metadata accessor for PBMedicationTrackingScheduleCompatibilityVersionRange(0);
  v121 = *(_QWORD *)(v134 - 8);
  v13 = MEMORY[0x24BDAC7A8](v134);
  v133 = (char *)&v119 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v135 = (char *)&v119 - v15;
  sub_21FA2ED54(0, (unint64_t *)&qword_25406AAE8, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v16);
  v127 = (char *)&v119 - v17;
  v139 = sub_21FC5AAAC();
  v136 = *(_QWORD *)(v139 - 8);
  v18 = MEMORY[0x24BDAC7A8](v139);
  v120 = (char *)&v119 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v119 - v20;
  v126 = (void (*)(char *, uint64_t))sub_21FC5AC5C();
  v125 = *((_QWORD *)v126 - 1);
  MEMORY[0x24BDAC7A8](v126);
  v124 = (char *)&v119 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_21FC5AAF4();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v119 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *a1;
  sub_21FC5AD10();
  v28 = *(int *)(type metadata accessor for PBMedicationTrackingSchedule(0) + 20);
  if (qword_25553DB50 != -1)
    swift_once();
  *(_QWORD *)(a7 + v28) = qword_2555440D8;
  swift_retain();
  v138 = v27;
  v29 = objc_msgSend(v27, sel_UUID);
  sub_21FC5AADC();

  v30 = sub_21FC5AAB8();
  v32 = v31;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTrackingSchedule._StorageClass(0);
    swift_allocObject();
    v33 = swift_retain();
    *(_QWORD *)(a7 + v28) = sub_21FB87320(v33);
    swift_release();
  }
  v34 = *(_QWORD *)(a7 + v28);
  swift_beginAccess();
  *(_QWORD *)(v34 + 16) = v30;
  *(_QWORD *)(v34 + 24) = v32;
  swift_bridgeObjectRelease();
  v35 = v138;
  v36 = objc_msgSend(v138, sel_medicationIdentifier);
  if (v36)
  {
    v37 = v36;
    v38 = sub_21FC5B604();
    v40 = v39;

    v144 = v38;
    v145 = v40;
    v142 = sub_21FC5B604();
    v143 = v41;
    v140 = 124;
    v141 = 0xE100000000000000;
    sub_21FA87D78();
    v42 = sub_21FC5BAD8();
    v44 = v43;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v42 = 0;
    v44 = 0xE000000000000000;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTrackingSchedule._StorageClass(0);
    swift_allocObject();
    v45 = swift_retain();
    *(_QWORD *)(a7 + v28) = sub_21FB87320(v45);
    swift_release();
  }
  v46 = *(_QWORD *)(a7 + v28);
  swift_beginAccess();
  *(_QWORD *)(v46 + 32) = v42;
  *(_QWORD *)(v46 + 40) = v44;
  swift_bridgeObjectRelease();
  v47 = objc_msgSend(v35, sel_note);
  if (v47)
  {
    v48 = v47;
    v49 = sub_21FC5B604();
    v51 = v50;

  }
  else
  {
    v49 = 0;
    v51 = 0xE000000000000000;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTrackingSchedule._StorageClass(0);
    swift_allocObject();
    v52 = swift_retain();
    *(_QWORD *)(a7 + v28) = sub_21FB87320(v52);
    swift_release();
  }
  v53 = *(_QWORD *)(a7 + v28);
  swift_beginAccess();
  *(_QWORD *)(v53 + 96) = v49;
  *(_QWORD *)(v53 + 104) = v51;
  swift_bridgeObjectRelease();
  v54 = objc_msgSend(v35, sel_frequencyType);
  if ((unint64_t)v54 >= 5)
    v55 = 0;
  else
    v55 = v54;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTrackingSchedule._StorageClass(0);
    swift_allocObject();
    v56 = swift_retain();
    *(_QWORD *)(a7 + v28) = sub_21FB87320(v56);
    swift_release();
  }
  v57 = *(_QWORD *)(a7 + v28);
  swift_beginAccess();
  *(_QWORD *)(v57 + 120) = v55;
  *(_BYTE *)(v57 + 128) = 1;
  v58 = objc_msgSend(v35, sel_createdUTCOffset);
  v59 = v124;
  sub_21FC5AC44();

  sub_21FC5AAA0();
  v60 = sub_21FC5AC20();
  v62 = v61;
  v63 = *(void (**)(char *, uint64_t))(v136 + 8);
  v63(v21, v139);
  (*(void (**)(char *, _QWORD *))(v125 + 8))(v59, v126);
  if (v62)
    v64 = v60;
  else
    v64 = 0;
  if (v62)
    v65 = v62;
  else
    v65 = 0xE000000000000000;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTrackingSchedule._StorageClass(0);
    swift_allocObject();
    v66 = swift_retain();
    *(_QWORD *)(a7 + v28) = sub_21FB87320(v66);
    swift_release();
  }
  v67 = *(_QWORD *)(a7 + v28);
  swift_beginAccess();
  *(_QWORD *)(v67 + 48) = v64;
  *(_QWORD *)(v67 + 56) = v65;
  swift_bridgeObjectRelease();
  v68 = objc_msgSend(v35, sel_startDateTime);
  sub_21FC5AA94();

  v69 = *(id *)(v137 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_isoDateFormatter);
  v70 = (void *)sub_21FC5AA64();
  v71 = objc_msgSend(v69, sel_stringFromDate_, v70);

  v72 = sub_21FC5B604();
  v74 = v73;

  v75 = v139;
  v63(v21, v139);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTrackingSchedule._StorageClass(0);
    swift_allocObject();
    v76 = swift_retain();
    v77 = sub_21FB87320(v76);
    v75 = v139;
    *(_QWORD *)(a7 + v28) = v77;
    swift_release();
  }
  v78 = *(_QWORD *)(a7 + v28);
  swift_beginAccess();
  *(_QWORD *)(v78 + 64) = v72;
  *(_QWORD *)(v78 + 72) = v74;
  swift_bridgeObjectRelease();
  v79 = v138;
  v80 = objc_msgSend(v138, sel_endDateTime);
  if (!v80)
  {
    v84 = (uint64_t)v127;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v136 + 56))(v127, 1, 1, v75);
    goto LABEL_36;
  }
  v81 = v80;
  v126 = v63;
  sub_21FC5AA94();

  v82 = v136;
  v83 = *(void (**)(char *, char *, uint64_t))(v136 + 32);
  v84 = (uint64_t)v127;
  v83(v127, v21, v75);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v82 + 56))(v84, 0, 1, v75);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v84, 1, v75) == 1)
  {
LABEL_36:
    sub_21FA2EDA0(v84, (unint64_t *)&qword_25406AAE8, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    goto LABEL_37;
  }
  v85 = v120;
  v83(v120, (char *)v84, v75);
  v86 = v69;
  v87 = (void *)sub_21FC5AA64();
  v88 = objc_msgSend(v86, sel_stringFromDate_, v87);

  v89 = sub_21FC5B604();
  v91 = v90;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTrackingSchedule._StorageClass(0);
    swift_allocObject();
    v92 = swift_retain();
    *(_QWORD *)(a7 + v28) = sub_21FB87320(v92);
    swift_release();
  }
  v93 = *(_QWORD *)(a7 + v28);
  swift_beginAccess();
  *(_QWORD *)(v93 + 80) = v89;
  *(_QWORD *)(v93 + 88) = v91;
  swift_bridgeObjectRelease();
  v126(v85, v139);
LABEL_37:
  v94 = objc_msgSend(v79, sel_timeIntervals);
  sub_21FA5BE58(0, &qword_25553FFD8);
  v95 = sub_21FC5B7A8();

  v96 = v137;
  swift_retain();
  v97 = v128;
  v98 = v129;
  v99 = v130;
  v100 = v132;
  v101 = sub_21FA87B84(v95, v96, (uint64_t)v97, v131, (uint64_t)v98, (uint64_t)v99, (uint64_t)v146, type metadata accessor for PBHKMedicationScheduleIntervalData, (void (*)(BOOL, unint64_t, uint64_t))sub_21FC01A80, (void (*)(id *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_21FA8716C);
  v139 = v100;
  swift_bridgeObjectRelease();

  swift_release();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTrackingSchedule._StorageClass(0);
    swift_allocObject();
    v102 = swift_retain();
    *(_QWORD *)(a7 + v28) = sub_21FB87320(v102);
    swift_release();
  }
  v103 = *(_QWORD *)(a7 + v28);
  swift_beginAccess();
  *(_QWORD *)(v103 + 112) = v101;
  swift_bridgeObjectRelease();
  v104 = objc_msgSend(v79, sel_isUnavailable);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v106 = v135;
  v107 = v134;
  v108 = (uint64_t)v133;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    type metadata accessor for PBMedicationTrackingSchedule._StorageClass(0);
    swift_allocObject();
    v109 = swift_retain();
    *(_QWORD *)(a7 + v28) = sub_21FB87320(v109);
    swift_release();
  }
  v110 = *(_QWORD *)(a7 + v28);
  swift_beginAccess();
  *(_BYTE *)(v110 + 129) = v104;
  sub_21FC5AD10();
  result = (uint64_t)objc_msgSend(v79, sel_compatibilityRange);
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_49;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  *v106 = result;
  result = (uint64_t)objc_msgSend(v79, sel_compatibilityRange);
  if (v112 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v112 > 0x7FFFFFFF)
  {
LABEL_51:
    __break(1u);
    return result;
  }
  v106[1] = v112;
  sub_21FA2D120((uint64_t)v106, v108, type metadata accessor for PBMedicationTrackingScheduleCompatibilityVersionRange);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTrackingSchedule._StorageClass(0);
    swift_allocObject();
    v113 = swift_retain();
    *(_QWORD *)(a7 + v28) = sub_21FB87320(v113);
    swift_release();
  }
  v114 = *(_QWORD *)(a7 + v28);
  v115 = v108;
  v116 = v122;
  sub_21FA2D23C(v115, v122, type metadata accessor for PBMedicationTrackingScheduleCompatibilityVersionRange);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v121 + 56))(v116, 0, 1, v107);
  v117 = v123;
  sub_21FA87DBC(v116, v123, &qword_25553FFD0, (void (*)(uint64_t))type metadata accessor for PBMedicationTrackingScheduleCompatibilityVersionRange);
  v118 = v114
       + OBJC_IVAR____TtCV19HealthRecordsDaemon28PBMedicationTrackingScheduleP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__compatibilityVersionRange;
  swift_beginAccess();
  swift_retain();
  sub_21FA87E08(v117, v118, &qword_25553FFD0, (void (*)(uint64_t))type metadata accessor for PBMedicationTrackingScheduleCompatibilityVersionRange);
  swift_endAccess();
  swift_release();
  return sub_21FA326EC((uint64_t)v106, type metadata accessor for PBMedicationTrackingScheduleCompatibilityVersionRange);
}

uint64_t sub_21FA8716C@<X0>(void **a1@<X0>, uint64_t a2@<X1>, void *a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  int v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  id v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  _DWORD *v44;
  id v45;
  int v46;
  uint64_t v47;
  _DWORD *v48;
  id v49;
  char *v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  id v59;
  id v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;

  v59 = a3;
  v62 = a2;
  v6 = sub_21FC5AAAC();
  v7 = (void (*)(uint64_t))MEMORY[0x24BDCE900];
  v69 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v67 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_21FC5A83C();
  v63 = *(_QWORD *)(v10 - 8);
  v64 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v61 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2ED54(0, (unint64_t *)&qword_25406AAE8, v7);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v65 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v66 = (char *)&v59 - v15;
  sub_21FA2ED54(0, &qword_25553FFE0, (void (*)(uint64_t))type metadata accessor for PBHKMedicationScheduleIntervalData.HKReminderWeekdayOptions);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v59 - v20;
  v22 = type metadata accessor for PBHKMedicationScheduleIntervalData.HKReminderWeekdayOptions(0);
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v59 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *a1;
  sub_21FC5AD10();
  v27 = *(int *)(type metadata accessor for PBHKMedicationScheduleIntervalData(0) + 20);
  if (qword_25553DB78 != -1)
    swift_once();
  v68 = v8;
  *(_QWORD *)(a4 + v27) = qword_255544140;
  swift_retain();
  v60 = v26;
  sub_21FC2C4C0((char)objc_msgSend(v26, sel_daysOfWeek), (uint64_t)v25);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKMedicationScheduleIntervalData._StorageClass(0);
    swift_allocObject();
    v28 = swift_retain();
    *(_QWORD *)(a4 + v27) = sub_21FB89538(v28);
    swift_release();
  }
  v29 = *(_QWORD *)(a4 + v27);
  sub_21FA2D23C((uint64_t)v25, (uint64_t)v21, type metadata accessor for PBHKMedicationScheduleIntervalData.HKReminderWeekdayOptions);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v21, 0, 1, v22);
  sub_21FA87DBC((uint64_t)v21, (uint64_t)v19, &qword_25553FFE0, (void (*)(uint64_t))type metadata accessor for PBHKMedicationScheduleIntervalData.HKReminderWeekdayOptions);
  v30 = v29
      + OBJC_IVAR____TtCV19HealthRecordsDaemon34PBHKMedicationScheduleIntervalDataP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__daysOfWeek;
  swift_beginAccess();
  swift_retain();
  sub_21FA87E08((uint64_t)v19, v30, &qword_25553FFE0, (void (*)(uint64_t))type metadata accessor for PBHKMedicationScheduleIntervalData.HKReminderWeekdayOptions);
  swift_endAccess();
  swift_release();
  v31 = v60;
  v32 = objc_msgSend(v60, sel_cycleIndex);
  if (!v32)
  {
    sub_21FA5BE58(0, (unint64_t *)&qword_25406BAC8);
    v32 = (id)sub_21FC5BA48();
  }
  v33 = sub_21FC5BE80();

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v35 = v69;
  v36 = (uint64_t)v65;
  v37 = (uint64_t)v66;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    type metadata accessor for PBHKMedicationScheduleIntervalData._StorageClass(0);
    swift_allocObject();
    v38 = swift_retain();
    *(_QWORD *)(a4 + v27) = sub_21FB89538(v38);
    swift_release();
  }
  v39 = (_DWORD *)(*(_QWORD *)(a4 + v27)
                 + OBJC_IVAR____TtCV19HealthRecordsDaemon34PBHKMedicationScheduleIntervalDataP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__cycleIndex);
  swift_beginAccess();
  *v39 = v33;
  v40 = objc_msgSend(v31, sel_cycleIntervalDays);
  v41 = v68;
  if (!v40)
  {
    sub_21FA5BE58(0, (unint64_t *)&qword_25406BAC8);
    v40 = (id)sub_21FC5BA48();
  }
  v42 = sub_21FC5BE80();

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKMedicationScheduleIntervalData._StorageClass(0);
    swift_allocObject();
    v43 = swift_retain();
    *(_QWORD *)(a4 + v27) = sub_21FB89538(v43);
    swift_release();
  }
  v44 = (_DWORD *)(*(_QWORD *)(a4 + v27)
                 + OBJC_IVAR____TtCV19HealthRecordsDaemon34PBHKMedicationScheduleIntervalDataP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__cycleIntervalDays);
  swift_beginAccess();
  *v44 = v42;
  v45 = objc_msgSend(v31, sel_dose);
  if (!v45)
  {
    sub_21FA5BE58(0, (unint64_t *)&qword_25406BAC8);
    v45 = (id)sub_21FC5BA48();
  }
  v46 = sub_21FC5BE80();

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKMedicationScheduleIntervalData._StorageClass(0);
    swift_allocObject();
    v47 = swift_retain();
    *(_QWORD *)(a4 + v27) = sub_21FB89538(v47);
    swift_release();
  }
  v48 = (_DWORD *)(*(_QWORD *)(a4 + v27)
                 + OBJC_IVAR____TtCV19HealthRecordsDaemon34PBHKMedicationScheduleIntervalDataP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__dose);
  swift_beginAccess();
  *v48 = v46;
  v49 = objc_msgSend(v31, sel_startTimeComponent);
  v50 = v61;
  sub_21FC5A7AC();

  sub_21FC5AB84();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v50, v64);
  sub_21FA7187C(v37, v36);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v36, 1, v35) == 1)
  {
    sub_21FA2EDA0(v37, (unint64_t *)&qword_25406AAE8, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    v37 = v36;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v67, v36, v35);
    v51 = (void *)sub_21FC5AA64();
    v52 = objc_msgSend(v59, sel_stringFromDate_, v51);

    v53 = sub_21FC5B604();
    v55 = v54;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKMedicationScheduleIntervalData._StorageClass(0);
      swift_allocObject();
      v56 = swift_retain();
      *(_QWORD *)(a4 + v27) = sub_21FB89538(v56);
      swift_release();
    }
    v57 = (uint64_t *)(*(_QWORD *)(a4 + v27)
                    + OBJC_IVAR____TtCV19HealthRecordsDaemon34PBHKMedicationScheduleIntervalDataP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__startTime);
    swift_beginAccess();
    *v57 = v53;
    v57[1] = v55;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v67, v35);
  }
  return sub_21FA2EDA0(v37, (unint64_t *)&qword_25406AAE8, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
}

uint64_t sub_21FA8789C()
{
  uint64_t v0;

  return sub_21FA85B44(*(_QWORD *)v0, *(void **)(v0 + 8), *(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

void sub_21FA878A8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553FF98)
  {
    sub_21FA5BE58(255, (unint64_t *)&qword_25553FFA0);
    v0 = sub_21FC5B7F0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553FF98);
  }
}

void sub_21FA8790C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t (*v5)(void);
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = MEMORY[0x24BDB9AE0];
    sub_21FA879E4(255, &qword_25553FF90, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    a3(255);
    sub_21FA87A54(&qword_25553FFA8, &qword_25553FF90, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v5, MEMORY[0x24BDB9AF8]);
    v6 = sub_21FC5B004();
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_21FA879B8()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_21FA879DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_21FC5A2B4(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_21FA879E4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_21FA878A8();
    v7 = v6;
    v8 = sub_21FA2CDB4();
    v9 = a3(a1, v7, v8, MEMORY[0x24BEE3F20]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_21FA87A54(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FA879E4(255, a2, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FA87A98@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21FA85E94(a1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(void **)(v2 + 40), a2);
}

uint64_t sub_21FA87AA4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FA87AC8(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t objectdestroy_2Tm()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_21FA87B24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21FA862A8(a1, *(_QWORD *)(v2 + 16), a2);
}

unint64_t sub_21FA87B2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25553FFC8;
  if (!qword_25553FFC8)
  {
    sub_21FA8790C(255, &qword_25553FFB0, (void (*)(uint64_t))type metadata accessor for ClinicalSharingQueryOutput);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB94C8], v1);
    atomic_store(result, (unint64_t *)&qword_25553FFC8);
  }
  return result;
}

uint64_t sub_21FA87B84(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD), void (*a9)(BOOL, unint64_t, uint64_t), void (*a10)(id *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  id v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  void (*v25)(BOOL, unint64_t, uint64_t);
  unint64_t v26;
  void (*v27)(id *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v28)(_QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;

  v11 = v10;
  v32 = a5;
  v33 = a6;
  v30 = a3;
  v31 = a4;
  v28 = a8;
  v29 = a2;
  v13 = a8(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v25 - v15;
  if (a1 >> 62)
    goto LABEL_18;
  v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v18 = MEMORY[0x24BEE4AF8];
    if (!v17)
      return v18;
    v35 = MEMORY[0x24BEE4AF8];
    v25 = a9;
    result = ((uint64_t (*)(_QWORD, uint64_t, _QWORD))a9)(0, v17 & ~(v17 >> 63), 0);
    if (v17 < 0)
      break;
    v20 = 0;
    v18 = v35;
    v26 = a1 & 0xC000000000000001;
    v27 = a10;
    while (v17 != v20)
    {
      if (v26)
        v21 = (id)MEMORY[0x2207D057C](v20, a1);
      else
        v21 = *(id *)(a1 + 8 * v20 + 32);
      v22 = v21;
      v34 = v21;
      v27(&v34, v29, v30, v31, v32, v33);
      if (v11)
      {
        swift_release();

        return v18;
      }
      v11 = 0;

      v35 = v18;
      v24 = *(_QWORD *)(v18 + 16);
      v23 = *(_QWORD *)(v18 + 24);
      if (v24 >= v23 >> 1)
      {
        v25(v23 > 1, v24 + 1, 1);
        v18 = v35;
      }
      ++v20;
      *(_QWORD *)(v18 + 16) = v24 + 1;
      sub_21FA2D23C((uint64_t)v16, v18+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v24, v28);
      if (v17 == v20)
        return v18;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    v17 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

unint64_t sub_21FA87D78()
{
  unint64_t result;

  result = qword_25406AAC0;
  if (!qword_25406AAC0)
  {
    result = MEMORY[0x2207D0F78](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_25406AAC0);
  }
  return result;
}

uint64_t sub_21FA87DBC(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_21FA2ED54(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_21FA87E08(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_21FA2ED54(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

unint64_t sub_21FA87E54()
{
  sub_21FC5BB74();
  swift_bridgeObjectRelease();
  sub_21FC5BDCC();
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  return 0xD000000000000020;
}

unint64_t sub_21FA87EE4()
{
  return sub_21FA87E54();
}

void sub_21FA87EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;

  v3 = sub_21FC5B514();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8];
  MEMORY[0x24BDAC7A8](v3);
  v5 = sub_21FC5B3F4();
  MEMORY[0x24BDAC7A8](v5);
  sub_21FA2A08C(&qword_25553FFE8, v4, MEMORY[0x24BDC6AE8]);
  sub_21FC5B3E8();
  __asm { BR              X10 }
}

uint64_t sub_21FA87FE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  *(_QWORD *)(v8 - 112) = v6;
  *(_WORD *)(v8 - 104) = v5;
  *(_BYTE *)(v8 - 102) = BYTE2(v5);
  *(_BYTE *)(v8 - 101) = BYTE3(v5);
  *(_BYTE *)(v8 - 100) = BYTE4(v5);
  *(_BYTE *)(v8 - 99) = BYTE5(v5);
  sub_21FC5B3D0();
  sub_21FA2D770(v6, v5);
  sub_21FC5B3DC();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v2);
  sub_21FA2A08C(&qword_25553FFF0, (uint64_t (*)(uint64_t))MEMORY[0x24BDC62F0], MEMORY[0x24BDC62E8]);
  v9 = sub_21FC5B508();
  v11 = v10;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v3, v0);
  return sub_21FA88208(v9, v11);
}

uint64_t sub_21FA88208(uint64_t a1, unint64_t a2)
{
  _BYTE *v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  __int128 v13[2];
  uint64_t v14;
  __int128 v15;
  _QWORD v16[6];

  v16[5] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v15 = a1;
  *((_QWORD *)&v15 + 1) = a2;
  sub_21FA884EC();
  sub_21FA885B8();
  swift_bridgeObjectRetain();
  if (swift_dynamicCast())
  {
    sub_21FA3175C(v13, (uint64_t)v16);
    __swift_project_boxed_opaque_existential_1(v16, v16[3]);
    sub_21FC5A878();
    swift_bridgeObjectRelease();
    v13[0] = v15;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    return *(_QWORD *)&v13[0];
  }
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  sub_21FA8860C((uint64_t)v13);
  v13[0] = xmmword_21FC5E0E0;
  memset(v16, 0, 15);
  v4 = sub_21FA884A4(v16, 0, a1, a2);
  v7 = v4;
  if (v6)
  {
    if (v6 <= 0)
    {
      sub_21FC5A9BC();
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
    goto LABEL_22;
  }
  v8 = v5;
  memset(v16, 0, 15);
  v9 = *((_QWORD *)v4 + 2);
  if (v5 == v9)
    goto LABEL_17;
  if ((v5 & 0x8000000000000000) != 0)
LABEL_23:
    __break(1u);
  if (v5 >= *((_QWORD *)v4 + 2))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  LOBYTE(v10) = 0;
  v11 = v9 - 1;
  while (1)
  {
    *((_BYTE *)v16 + v10) = v7[v8 + 32];
    v10 = v10 + 1;
    if ((v10 & 0x100) != 0)
      goto LABEL_21;
    if (v10 != 14)
      break;
    *(_QWORD *)&v15 = v16[0];
    DWORD2(v15) = v16[1];
    WORD6(v15) = WORD2(v16[1]);
    sub_21FC5A9C8();
    if (v11 == v8)
      goto LABEL_17;
    LOBYTE(v10) = 0;
LABEL_11:
    if (++v8 >= *((_QWORD *)v7 + 2))
      goto LABEL_20;
  }
  if (v11 != v8)
    goto LABEL_11;
  *(_QWORD *)&v15 = v16[0];
  DWORD2(v15) = v16[1];
  WORD6(v15) = WORD2(v16[1]);
  sub_21FC5A9C8();
LABEL_17:
  swift_bridgeObjectRelease();
LABEL_18:
  swift_bridgeObjectRelease();
  return *(_QWORD *)&v13[0];
}

_BYTE *sub_21FA884A4(_BYTE *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  _BYTE *result;

  result = sub_21FA88748(a1, a2, a3, a4);
  if (!v4)
    return (_BYTE *)swift_bridgeObjectRetain();
  return result;
}

void sub_21FA884EC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553FFF8)
  {
    sub_21FA88564();
    sub_21FA2A08C(&qword_255540008, (uint64_t (*)(uint64_t))sub_21FA88564, MEMORY[0x24BEE12E0]);
    v0 = sub_21FC5BC58();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553FFF8);
  }
}

void sub_21FA88564()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255540000)
  {
    v0 = sub_21FC5B7F0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255540000);
  }
}

unint64_t sub_21FA885B8()
{
  unint64_t result;

  result = qword_255540010;
  if (!qword_255540010)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_255540010);
  }
  return result;
}

uint64_t sub_21FA8860C(uint64_t a1)
{
  uint64_t v2;

  sub_21FA88648();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_21FA88648()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255540018)
  {
    sub_21FA885B8();
    v0 = sub_21FC5BAA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255540018);
  }
}

uint64_t sub_21FA8869C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD v10[5];

  sub_21FA88564();
  v3 = v2;
  v10[3] = v2;
  v10[4] = sub_21FA2A08C(&qword_255540020, (uint64_t (*)(uint64_t))sub_21FA88564, MEMORY[0x24BDCFBE0]);
  v10[0] = a1;
  v4 = __swift_project_boxed_opaque_existential_1(v10, v3);
  v5 = (_BYTE *)(*v4 + 32);
  v6 = &v5[*(_QWORD *)(*v4 + 16)];
  swift_bridgeObjectRetain();
  sub_21FBF6000(v5, v6, &v9);
  v7 = v9;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  return v7;
}

_BYTE *sub_21FA88748(_BYTE *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _OWORD *v16;
  __int128 *v17;
  __int128 v18;
  _BYTE *v19;

  if (!result || !a2)
    return (_BYTE *)a3;
  if (a2 < 0)
  {
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v4 = *(_QWORD *)(a3 + 16);
  if (v4 == a4)
    return (_BYTE *)a3;
  if (v4 <= a4)
    goto LABEL_32;
  v5 = a3 + 32;
  v6 = a4 + 1;
  *result = *(_BYTE *)(a3 + 32 + a4);
  if (a2 == 1 || v6 == v4)
    return (_BYTE *)a3;
  if (v6 >= v4)
    goto LABEL_33;
  v7 = a4 + 2;
  result[1] = *(_BYTE *)(v5 + v6);
  if (a2 == 2 || v7 == v4)
    return (_BYTE *)a3;
  if (v7 < v4)
  {
    result[2] = *(_BYTE *)(v5 + v7);
    v8 = result + 2;
    v9 = a4 + 3;
    if (a2 != 3)
    {
      v10 = a2 - 4;
      if (a2 - 4 >= v4 - a4 - 3)
        v10 = v4 - a4 - 3;
      v11 = v10 + 1;
      if (v11 < 0x11 || ((unint64_t)&result[-a3 - a4] & 0xFFFFFFFFFFFFFFF0) == 0x20)
      {
        v12 = 3;
      }
      else
      {
        v13 = v11 & 0xF;
        if ((v11 & 0xF) == 0)
          v13 = 16;
        v14 = v11 - v13;
        v9 += v14;
        v15 = &v8[v14];
        v12 = v14 + 3;
        v16 = result + 3;
        v17 = (__int128 *)(a4 + a3 + 35);
        do
        {
          v18 = *v17++;
          *v16++ = v18;
          v14 -= 16;
        }
        while (v14);
        v8 = v15;
      }
      v19 = v8 + 1;
      do
      {
        if (v4 == v9)
          break;
        ++v12;
        *v19++ = *(_BYTE *)(v5 + v9++);
      }
      while (a2 != v12);
    }
    return (_BYTE *)a3;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for DataError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DataError(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DataError()
{
  return &type metadata for DataError;
}

uint64_t sub_21FA88908@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v30 = a2;
  v31 = a4;
  v10 = sub_21FC5AAAC();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  v15 = *((_BYTE *)a1 + 8);
  sub_21FC5AD10();
  v16 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  if (qword_25553D5B8 != -1)
    swift_once();
  *(_QWORD *)(a6 + v16) = qword_25553F300;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    v29 = v13;
    v17 = swift_retain();
    v13 = v29;
    *(_QWORD *)(a6 + v16) = sub_21FA61D10(v17);
    swift_release();
  }
  v18 = *(_QWORD *)(a6 + v16);
  swift_beginAccess();
  *(_QWORD *)(v18 + 16) = v14;
  *(_BYTE *)(v18 + 24) = v15;
  if (a3)
  {
    v19 = v30;
  }
  else
  {
    if (qword_25553DC90 != -1)
      swift_once();
    v20 = (void *)qword_255572F60;
    sub_21FC5AAA0();
    v21 = (void *)sub_21FC5AA64();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v22 = objc_msgSend(v20, sel_stringFromDate_, v21);

    v19 = sub_21FC5B604();
    a3 = v23;

  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    v24 = swift_retain();
    *(_QWORD *)(a6 + v16) = sub_21FA61D10(v24);
    swift_release();
  }
  v25 = *(_QWORD *)(a6 + v16);
  swift_beginAccess();
  *(_QWORD *)(v25 + 64) = v19;
  *(_QWORD *)(v25 + 72) = a3;
  result = swift_bridgeObjectRelease();
  if (a5)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBPlainText._StorageClass(0);
      swift_allocObject();
      v27 = swift_retain();
      *(_QWORD *)(a6 + v16) = sub_21FA61D10(v27);
      swift_release();
    }
    v28 = *(_QWORD *)(a6 + v16);
    swift_beginAccess();
    *(_QWORD *)(v28 + 48) = v31;
    *(_QWORD *)(v28 + 56) = a5;
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t HKHealthRecordsEnvironment.clinicalSharingEndpoint.getter(unint64_t a1)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  result = 0xD000000000000023;
  if (a1 <= 0xD)
  {
    v3 = 1 << a1;
    v4 = 1 << a1;
    if (((1 << a1) & 0x820) != 0)
      v5 = 0xD000000000000022;
    else
      v5 = 0xD000000000000023;
    if ((v4 & 3) != 0)
      v5 = 0xD00000000000001FLL;
    if ((v3 & 0x2184) != 0)
      return 0xD000000000000027;
    else
      return v5;
  }
  return result;
}

id sub_21FA88CA4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id result;
  void *v12;
  unsigned int v13;
  uint64_t (*v14)(void);
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_21FA2D1A0(0, &qword_255540028, (uint64_t (*)(uint64_t))sub_21FA88F00, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDB9DE0]);
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v17 - v4;
  sub_21FA89214(0, &qword_255540040, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  result = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (result)
  {
    v12 = result;
    v13 = objc_msgSend(result, sel_hksp_supportsSleepDaemon);

    if (v13)
    {
      *(_QWORD *)(swift_allocObject() + 16) = v0;
      v14 = MEMORY[0x24BDB9E38];
      sub_21FA89214(0, &qword_255540050, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
      swift_allocObject();
      v15 = v0;
      v18 = sub_21FC5B25C();
      sub_21FA89284(&qword_255540058, &qword_255540050, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v14, MEMORY[0x24BDB9E58]);
      v16 = sub_21FC5B280();
      swift_release();
    }
    else
    {
      v18 = 0;
      sub_21FA88F00(0);
      sub_21FC5B22C();
      sub_21FA2CDB4();
      sub_21FC5B208();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      sub_21FA89284(&qword_255540048, &qword_255540040, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0], MEMORY[0x24BDBA1D0]);
      v16 = sub_21FC5B280();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    return (id)v16;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_21FA88F00(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_255540030, (uint64_t (*)(uint64_t))sub_21FA88F1C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

unint64_t sub_21FA88F1C()
{
  unint64_t result;

  result = qword_255540038;
  if (!qword_255540038)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_255540038);
  }
  return result;
}

void sub_21FA88F58(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t aBlock[6];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = qword_25406B7F8;
  swift_retain();
  if (v7 != -1)
    swift_once();
  v8 = sub_21FC5AFD4();
  __swift_project_value_buffer(v8, (uint64_t)qword_25406D830);
  v9 = a3;
  v10 = sub_21FC5AFC8();
  v11 = sub_21FC5B994();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    aBlock[0] = v13;
    *(_DWORD *)v12 = 136315138;
    v14 = objc_msgSend(v9, sel_description);
    v15 = sub_21FC5B604();
    v17 = v16;

    sub_21FABDCF8(v15, v17, aBlock);
    sub_21FC5BAC0();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v10, v11, "Requesting sleep schedule from %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v13, -1, -1);
    MEMORY[0x2207D105C](v12, -1, -1);

  }
  else
  {

  }
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = v9;
  v18[3] = sub_21FA5F86C;
  v18[4] = v6;
  aBlock[4] = (uint64_t)sub_21FA895B8;
  aBlock[5] = (uint64_t)v18;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_21FA89518;
  aBlock[3] = (uint64_t)&block_descriptor_1;
  v19 = _Block_copy(aBlock);
  v20 = v9;
  swift_release();
  objc_msgSend(v20, sel_currentSleepScheduleWithCompletion_, v19);
  _Block_release(v19);
}

uint64_t sub_21FA891E8()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_21FA8920C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_21FA88F58(a1, a2, *(void **)(v2 + 16));
}

void sub_21FA89214(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_21FA88F00(255);
    v7 = v6;
    v8 = sub_21FA2CDB4();
    v9 = a3(a1, v7, v8, MEMORY[0x24BEE3F20]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_21FA89284(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FA89214(255, a2, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FA892C4()
{
  swift_release();
  return swift_deallocObject();
}

void sub_21FA892E8(uint64_t a1, void *a2, void *a3, void (*a4)(_QWORD, _QWORD))
{
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD);
  uint64_t v21;

  if (qword_25406B7F8 != -1)
    swift_once();
  v8 = sub_21FC5AFD4();
  __swift_project_value_buffer(v8, (uint64_t)qword_25406D830);
  v9 = a3;
  v10 = sub_21FC5AFC8();
  v11 = sub_21FC5B994();
  if (os_log_type_enabled(v10, v11))
  {
    v20 = a4;
    v12 = (uint8_t *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    v21 = v18;
    *(_DWORD *)v12 = 136315138;
    v13 = objc_msgSend(v9, sel_description);
    v14 = sub_21FC5B604();
    v19 = a1;
    v16 = v15;

    a4 = v20;
    sub_21FABDCF8(v14, v16, &v21);
    sub_21FC5BAC0();

    a1 = v19;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v10, v11, "Done with sleep schedule from %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v18, -1, -1);
    MEMORY[0x2207D105C](v12, -1, -1);

    if (a2)
    {
LABEL_5:
      v17 = a2;
      a4(a2, 1);

      return;
    }
  }
  else
  {

    if (a2)
      goto LABEL_5;
  }
  a4(a1, 0);
}

void sub_21FA89518(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(void *, void *);
  id v6;
  id v7;

  v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

uint64_t sub_21FA8958C()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void sub_21FA895B8(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_21FA892E8(a1, a2, *(void **)(v2 + 16), *(void (**)(_QWORD, _QWORD))(v2 + 24));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

void PBRevocationVersion.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

unint64_t PBRevocationVersion.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 2;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t PBRevocationVersion.rawValue.getter()
{
  _BYTE *v0;

  if (v0[8])
    return *(_QWORD *)v0 != 0;
  else
    return *(_QWORD *)v0;
}

void sub_21FA89620(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

unint64_t sub_21FA89630@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 2;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_21FA89648()
{
  _BYTE *v0;

  if (v0[8])
    return *(_QWORD *)v0 != 0;
  else
    return *(_QWORD *)v0;
}

_QWORD *sub_21FA89664@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;
  char v3;

  v2 = *result >= 2uLL;
  *(_QWORD *)a2 = *result;
  v3 = !v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

void sub_21FA89680(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*((_BYTE *)v1 + 8))
    v2 = *v1 != 0;
  *a1 = v2;
}

uint64_t sub_21FA896A0()
{
  sub_21FC5BE8C();
  sub_21FC5B598();
  return sub_21FC5BEB0();
}

uint64_t sub_21FA89708()
{
  sub_21FA8A0F4();
  return sub_21FC5AD7C();
}

uint64_t sub_21FA89740()
{
  sub_21FC5BE8C();
  sub_21FC5B598();
  return sub_21FC5BEB0();
}

BOOL sub_21FA897A4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (*((_BYTE *)a1 + 8))
    v2 = *a1 != 0;
  v3 = *a2 != 0;
  if (!*((_BYTE *)a2 + 8))
    v3 = *a2;
  return v2 == v3;
}

void sub_21FA897E0()
{
  qword_255540060 = (uint64_t)&unk_24E4807A0;
}

uint64_t static PBRevocationVersion.allCases.getter()
{
  if (qword_25553D5D8 != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static PBRevocationVersion.allCases.setter(uint64_t a1)
{
  if (qword_25553D5D8 != -1)
    swift_once();
  swift_beginAccess();
  qword_255540060 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static PBRevocationVersion.allCases.modify())()
{
  if (qword_25553D5D8 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_21FA89944@<X0>(_QWORD *a1@<X8>)
{
  if (qword_25553D5D8 != -1)
    swift_once();
  swift_beginAccess();
  *a1 = qword_255540060;
  return swift_bridgeObjectRetain();
}

uint64_t PBRevocationAuthorization.rv.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_21FA32314(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t PBRevocationAuthorization.rv.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_21FA2D770(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t (*PBRevocationAuthorization.rv.modify())()
{
  return nullsub_1;
}

void PBRevocationAuthorization.rvVersion.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t PBRevocationAuthorization.rvVersion.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 24) = v2;
  return result;
}

uint64_t (*PBRevocationAuthorization.rvVersion.modify())()
{
  return nullsub_1;
}

void PBRevocationAuthorization.type.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t PBRevocationAuthorization.type.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 32) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 40) = v2;
  return result;
}

uint64_t (*PBRevocationAuthorization.type.modify())()
{
  return nullsub_1;
}

uint64_t PBRevocationAuthorization.healthInstituteID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PBRevocationAuthorization.healthInstituteID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*PBRevocationAuthorization.healthInstituteID.modify())()
{
  return nullsub_1;
}

uint64_t PBRevocationAuthorization.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PBRevocationAuthorization() + 32);
  v4 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for PBRevocationAuthorization()
{
  uint64_t result;

  result = qword_255540140;
  if (!qword_255540140)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t PBRevocationAuthorization.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PBRevocationAuthorization() + 32);
  v4 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PBRevocationAuthorization.unknownFields.modify())()
{
  type metadata accessor for PBRevocationAuthorization();
  return nullsub_1;
}

uint64_t PBRevocationAuthorization.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  *(_QWORD *)a1 = sub_21FC5ACF8();
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0xE000000000000000;
  type metadata accessor for PBRevocationAuthorization();
  return sub_21FC5AD10();
}

uint64_t sub_21FA89C54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  char *v12;

  v0 = sub_21FC5AF74();
  __swift_allocate_value_buffer(v0, qword_255540068);
  __swift_project_value_buffer(v0, (uint64_t)qword_255540068);
  sub_21FA8AF38();
  sub_21FA48EB8();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_21FC5F720;
  v7 = (_QWORD *)(v6 + v5);
  v8 = v6 + v5 + *(int *)(v2 + 48);
  *v7 = 0;
  *(_QWORD *)v8 = "RV_VERSION_X";
  *(_QWORD *)(v8 + 8) = 12;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = *MEMORY[0x24BE5C318];
  v10 = sub_21FC5AF5C();
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = (char *)v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v7 + v4) = 1;
  *(_QWORD *)v12 = "RV_VERSION_1";
  *((_QWORD *)v12 + 1) = 12;
  v12[16] = 2;
  v11();
  return sub_21FC5AF68();
}

uint64_t static PBRevocationVersion._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA3A338(&qword_25553D5E0, (uint64_t)qword_255540068, a1);
}

uint64_t sub_21FA89DBC@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA40BC8(&qword_25553D5E0, (uint64_t)qword_255540068, a1);
}

unint64_t static PBRevocationAuthorization.protoMessageName.getter()
{
  return 0xD000000000000037;
}

uint64_t sub_21FA89DF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v16;

  v0 = sub_21FC5AF74();
  __swift_allocate_value_buffer(v0, qword_255540080);
  __swift_project_value_buffer(v0, (uint64_t)qword_255540080);
  sub_21FA8AF38();
  sub_21FA48EB8();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_21FC603D0;
  v6 = v16 + v5 + *(int *)(v2 + 48);
  *(_QWORD *)(v16 + v5) = 1;
  *(_QWORD *)v6 = "rv";
  *(_QWORD *)(v6 + 8) = 2;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = sub_21FC5AF5C();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v16 + v5 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v16 + v5 + v4) = 2;
  *(_QWORD *)v10 = "rv_version";
  *(_QWORD *)(v10 + 8) = 10;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v16 + v5 + 2 * v4);
  v12 = (char *)v11 + *(int *)(v2 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "type";
  *((_QWORD *)v12 + 1) = 4;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v16 + v5 + 3 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "health_institute_id";
  *((_QWORD *)v14 + 1) = 19;
  v14[16] = 2;
  v9();
  return sub_21FC5AF68();
}

uint64_t static PBRevocationAuthorization._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA3A338(qword_25553D5E8, (uint64_t)qword_255540080, a1);
}

uint64_t PBRevocationAuthorization.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_21FC5AD88();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v4 = v3;
          sub_21FC5ADF4();
          goto LABEL_5;
        case 2:
          sub_21FA8A0F4();
          goto LABEL_11;
        case 3:
          sub_21FA64E10();
LABEL_11:
          v4 = v3;
          sub_21FC5ADC4();
          goto LABEL_5;
        case 4:
          v4 = v3;
          sub_21FC5AE3C();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = sub_21FC5AD88();
    }
  }
  return result;
}

unint64_t sub_21FA8A0F4()
{
  unint64_t result;

  result = qword_255540098;
  if (!qword_255540098)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBRevocationVersion, &type metadata for PBRevocationVersion);
    atomic_store(result, (unint64_t *)&qword_255540098);
  }
  return result;
}

void PBRevocationAuthorization.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_21FA8A184(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;

  if ((a2 & 0xFF000000000000) == 0 || (result = sub_21FC5AEF0(), !v2))
  {
    if (!v3[2] || (sub_21FA8A0F4(), result = sub_21FC5AED8(), !v2))
    {
      if (!v3[4] || (sub_21FA64E10(), result = sub_21FC5AED8(), !v2))
      {
        v5 = v3[7];
        v6 = HIBYTE(v5) & 0xF;
        if ((v5 & 0x2000000000000000) == 0)
          v6 = v3[6] & 0xFFFFFFFFFFFFLL;
        if (!v6 || (result = sub_21FC5AF2C(), !v2))
        {
          type metadata accessor for PBRevocationAuthorization();
          return sub_21FC5AD04();
        }
      }
    }
  }
  return result;
}

uint64_t PBRevocationAuthorization.hashValue.getter()
{
  sub_21FC5BE8C();
  type metadata accessor for PBRevocationAuthorization();
  sub_21FA2A08C(&qword_2555400A0, (uint64_t (*)(uint64_t))type metadata accessor for PBRevocationAuthorization, (uint64_t)&protocol conformance descriptor for PBRevocationAuthorization);
  sub_21FC5B598();
  return sub_21FC5BEB0();
}

uint64_t sub_21FA8A340@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  *(_QWORD *)a1 = sub_21FC5ACF8();
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0xE000000000000000;
  return sub_21FC5AD10();
}

unint64_t sub_21FA8A390()
{
  return 0xD000000000000037;
}

uint64_t sub_21FA8A3AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 32);
  v5 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_21FA8A3EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 32);
  v5 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_21FA8A42C())()
{
  return nullsub_1;
}

uint64_t sub_21FA8A440()
{
  return PBRevocationAuthorization.decodeMessage<A>(decoder:)();
}

void sub_21FA8A454()
{
  PBRevocationAuthorization.traverse<A>(visitor:)();
}

uint64_t sub_21FA8A468()
{
  sub_21FA2A08C(&qword_255540188, (uint64_t (*)(uint64_t))type metadata accessor for PBRevocationAuthorization, (uint64_t)&protocol conformance descriptor for PBRevocationAuthorization);
  return sub_21FC5AD70();
}

uint64_t sub_21FA8A4B8@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA40BC8(qword_25553D5E8, (uint64_t)qword_255540080, a1);
}

uint64_t sub_21FA8A4D4()
{
  sub_21FA2A08C((unint64_t *)&qword_2555400D8, (uint64_t (*)(uint64_t))type metadata accessor for PBRevocationAuthorization, (uint64_t)&protocol conformance descriptor for PBRevocationAuthorization);
  return sub_21FC5AE9C();
}

uint64_t sub_21FA8A514()
{
  sub_21FA2A08C((unint64_t *)&qword_2555400D8, (uint64_t (*)(uint64_t))type metadata accessor for PBRevocationAuthorization, (uint64_t)&protocol conformance descriptor for PBRevocationAuthorization);
  return sub_21FC5AEA8();
}

uint64_t _s19HealthRecordsDaemon25PBRevocationAuthorizationV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  void (*v20)(char *, uint64_t);
  uint64_t v21;

  v4 = sub_21FC5AD1C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v21 - v9;
  sub_21FB13260(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if ((v11 & 1) == 0)
    goto LABEL_13;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a1 + 24))
    v12 = v12 != 0;
  if (*(_BYTE *)(a2 + 24) != 1)
  {
    if (v12 == v13)
      goto LABEL_11;
LABEL_13:
    v15 = 0;
    return v15 & 1;
  }
  if (!v13)
  {
    if (!v12)
      goto LABEL_11;
    goto LABEL_13;
  }
  if (v12 != 1)
    goto LABEL_13;
LABEL_11:
  v14 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(a2 + 40) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(a1 + 32) != v14)
    goto LABEL_13;
  if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48) && *(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56)
    || (v15 = 0, (sub_21FC5BDF0() & 1) != 0))
  {
    v17 = type metadata accessor for PBRevocationAuthorization();
    v18 = a1 + *(int *)(v17 + 32);
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v19(v10, v18, v4);
    v19(v8, a2 + *(int *)(v17 + 32), v4);
    sub_21FA2A08C(&qword_25553EAB8, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v15 = sub_21FC5B5D4();
    v20 = *(void (**)(char *, uint64_t))(v5 + 8);
    v20(v8, v4);
    v20(v10, v4);
  }
  return v15 & 1;
}

unint64_t sub_21FA8A76C()
{
  unint64_t result;

  result = qword_2555400A8;
  if (!qword_2555400A8)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBRevocationVersion, &type metadata for PBRevocationVersion);
    atomic_store(result, (unint64_t *)&qword_2555400A8);
  }
  return result;
}

unint64_t sub_21FA8A7B4()
{
  unint64_t result;

  result = qword_2555400B0;
  if (!qword_2555400B0)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBRevocationVersion, &type metadata for PBRevocationVersion);
    atomic_store(result, (unint64_t *)&qword_2555400B0);
  }
  return result;
}

unint64_t sub_21FA8A7FC()
{
  unint64_t result;

  result = qword_2555400B8;
  if (!qword_2555400B8)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBRevocationVersion, &type metadata for PBRevocationVersion);
    atomic_store(result, (unint64_t *)&qword_2555400B8);
  }
  return result;
}

uint64_t sub_21FA8A840()
{
  return sub_21FA2A08C(&qword_2555400C0, (uint64_t (*)(uint64_t))sub_21FA8A86C, MEMORY[0x24BEE12E0]);
}

void sub_21FA8A86C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2555400C8)
  {
    v0 = sub_21FC5B7F0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2555400C8);
  }
}

uint64_t sub_21FA8A8C0()
{
  return sub_21FA2A08C(&qword_2555400D0, (uint64_t (*)(uint64_t))type metadata accessor for PBRevocationAuthorization, (uint64_t)&protocol conformance descriptor for PBRevocationAuthorization);
}

uint64_t sub_21FA8A8EC()
{
  return sub_21FA2A08C((unint64_t *)&qword_2555400D8, (uint64_t (*)(uint64_t))type metadata accessor for PBRevocationAuthorization, (uint64_t)&protocol conformance descriptor for PBRevocationAuthorization);
}

uint64_t sub_21FA8A918()
{
  return sub_21FA2A08C(&qword_2555400A0, (uint64_t (*)(uint64_t))type metadata accessor for PBRevocationAuthorization, (uint64_t)&protocol conformance descriptor for PBRevocationAuthorization);
}

uint64_t sub_21FA8A944()
{
  return sub_21FA2A08C(&qword_2555400E0, (uint64_t (*)(uint64_t))type metadata accessor for PBRevocationAuthorization, (uint64_t)&protocol conformance descriptor for PBRevocationAuthorization);
}

uint64_t storeEnumTagSinglePayload for PBDataType(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_21FA8A9A0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_21FA8A9BC(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PBRevocationVersion()
{
  return &type metadata for PBRevocationVersion;
}

unint64_t initializeBufferWithCopyOfBuffer for PBRevocationAuthorization(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    sub_21FA32314(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 48);
    v10 = *(_QWORD *)(a2 + 56);
    v11 = *(int *)(a3 + 32);
    v12 = a2 + v11;
    v13 = a1 + v11;
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v10;
    v14 = sub_21FC5AD1C();
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    v15(v13, v12, v14);
  }
  return a1;
}

uint64_t destroy for PBRevocationAuthorization(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_21FA2D770(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PBRevocationAuthorization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_21FA32314(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(int *)(a3 + 32);
  v11 = a2 + v10;
  v12 = a1 + v10;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  v13 = sub_21FC5AD1C();
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  v14(v12, v11, v13);
  return a1;
}

uint64_t assignWithCopy for PBRevocationAuthorization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_21FA32314(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  sub_21FA2D770(v8, v9);
  v10 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  v11 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = *(int *)(a3 + 32);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_21FC5AD1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

uint64_t initializeWithTake for PBRevocationAuthorization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v7 = sub_21FC5AD1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PBRevocationAuthorization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_21FA2D770(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 32);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_21FC5AD1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for PBRevocationAuthorization()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA8ADB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 56);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_21FC5AD1C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PBRevocationAuthorization()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA8AE3C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 56) = (a2 - 1);
  }
  else
  {
    v7 = sub_21FC5AD1C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t sub_21FA8AEB0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_21FC5AD1C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_21FA8AF38()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553EAC0)
  {
    sub_21FA48EB8();
    v0 = sub_21FC5BDD8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553EAC0);
  }
}

uint64_t WebRequestResponse.request.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_21FA2CEA0(v1, a1);
}

id WebRequestResponse.response.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  id v5;

  v2 = v1[5];
  v3 = v1[6];
  v5 = (id)v1[7];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = (uint64_t)v5;
  sub_21FA3277C(v2, v3);
  return v5;
}

uint64_t WebRequestResponseError.request.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_21FA2CEA0(v1, a1);
}

uint64_t WebRequestResponseError.error.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for WebRequestResponseError(0) + 20);
  return sub_21FA8B01C(v3, a1);
}

uint64_t type metadata accessor for WebRequestResponseError(uint64_t a1)
{
  return sub_21FA44B58(a1, qword_2555401F8);
}

uint64_t sub_21FA8B01C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WebRequestResponseError.ErrorType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for WebRequestResponseError.ErrorType(uint64_t a1)
{
  return sub_21FA44B58(a1, qword_2555402A0);
}

uint64_t WebRequestResponseError.completeDescription.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v13;
  unint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for WebRequestResponseError.ErrorType(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = 0;
  v14 = 0xE000000000000000;
  sub_21FC5BB74();
  swift_bridgeObjectRelease();
  v13 = 0x2074736575716572;
  v14 = 0xE800000000000000;
  v5 = v0[3];
  v6 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_21FC2D468(v5, v6);
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  v7 = type metadata accessor for WebRequestResponseError(0);
  sub_21FA8B01C((uint64_t)v1 + *(int *)(v7 + 20), (uint64_t)v4);
  sub_21FA8B218();
  v8 = (void *)swift_allocError();
  sub_21FA2D23C((uint64_t)v4, v9, type metadata accessor for WebRequestResponseError.ErrorType);
  v10 = (void *)sub_21FC5A8D8();
  v11 = objc_msgSend(v10, sel_hrs_completeDescription);

  sub_21FC5B604();
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  return v13;
}

unint64_t sub_21FA8B218()
{
  unint64_t result;
  uint64_t v1;

  result = qword_255540190;
  if (!qword_255540190)
  {
    v1 = type metadata accessor for WebRequestResponseError.ErrorType(255);
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for WebRequestResponseError.ErrorType, v1);
    atomic_store(result, (unint64_t *)&qword_255540190);
  }
  return result;
}

uint64_t WebRequestResponseError.safelyLoggableDescription.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  sub_21FC5BB74();
  swift_bridgeObjectRelease();
  v2 = v0[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_21FC2D6D0(v2, v3);
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  type metadata accessor for WebRequestResponseError(0);
  WebRequestResponseError.ErrorType.safelyLoggableDescription.getter();
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  return 0x2074736575716572;
}

void WebRequestResponseError.ErrorType.safelyLoggableDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for HTTPError();
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for WebRequestResponseError.ErrorType(0);
  MEMORY[0x24BDAC7A8](v2);
  sub_21FA8B01C(v0, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = (char *)sub_21FA8B420 + 4 * byte_21FC60750[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21FA8B420()
{
  void **v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v3 = *v0;
  *(_QWORD *)(v2 - 64) = 0;
  *(_QWORD *)(v2 - 56) = 0xE000000000000000;
  sub_21FC5BB74();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 - 64) = v1 + 28;
  *(_QWORD *)(v2 - 56) = 0x800000021FC75BC0;
  *(_QWORD *)(v2 - 104) = swift_getObjectType();
  sub_21FA8B818();
  sub_21FC5B64C();
  sub_21FC5B6AC();

  swift_bridgeObjectRelease();
  return *(_QWORD *)(v2 - 64);
}

void WebRequestResponseError.ErrorType.errorDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for HTTPError();
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for WebRequestResponseError.ErrorType(0);
  MEMORY[0x24BDAC7A8](v2);
  sub_21FA8B01C(v0, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = (char *)&loc_21FA8B64C + *((int *)qword_21FA8B808 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

uint64_t sub_21FA8B65C()
{
  void **v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;

  v3 = *v0;
  *(_QWORD *)(v2 - 64) = 0;
  *(_QWORD *)(v2 - 56) = 0xE000000000000000;
  sub_21FC5BB74();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 - 64) = v1 + 27;
  *(_QWORD *)(v2 - 56) = 0x800000021FC75C10;
  v4 = v3;
  v5 = objc_msgSend(v4, sel_description);
  sub_21FC5B604();

  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  return *(_QWORD *)(v2 - 64);
}

unint64_t sub_21FA8B818()
{
  unint64_t result;

  result = qword_255540198;
  if (!qword_255540198)
  {
    sub_21FA8B850();
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_255540198);
  }
  return result;
}

unint64_t sub_21FA8B850()
{
  unint64_t result;

  result = qword_25553F158;
  if (!qword_25553F158)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25553F158);
  }
  return result;
}

void destroy for WebRequestResponse(uint64_t a1)
{
  unint64_t v2;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >> 60 != 15)
    sub_21FA2D770(*(_QWORD *)(a1 + 40), v2);

}

uint64_t initializeWithCopy for WebRequestResponse(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = (uint64_t *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v5;
  }
  else
  {
    v7 = *v5;
    sub_21FA32314(*v5, *(_QWORD *)(a2 + 48));
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = v6;
  }
  v8 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = v8;
  return a1;
}

uint64_t *assignWithCopy for WebRequestResponse(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  id v12;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  v4 = a2 + 5;
  v5 = a2[6];
  if ((unint64_t)a1[6] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      v7 = *v4;
      sub_21FA32314(*v4, a2[6]);
      v8 = a1[5];
      v9 = a1[6];
      a1[5] = v7;
      a1[6] = v5;
      sub_21FA2D770(v8, v9);
      goto LABEL_8;
    }
    sub_21FA32D54((uint64_t)(a1 + 5));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 5) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  v6 = *v4;
  sub_21FA32314(*v4, a2[6]);
  a1[5] = v6;
  a1[6] = v5;
LABEL_8:
  v10 = (void *)a1[7];
  v11 = (void *)a2[7];
  a1[7] = (uint64_t)v11;
  v12 = v11;

  return a1;
}

uint64_t assignWithTake for WebRequestResponse(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = (_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  if (v6 >> 60 != 15)
  {
    v7 = *(_QWORD *)(a2 + 48);
    if (v7 >> 60 != 15)
    {
      v8 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = *v5;
      *(_QWORD *)(a1 + 48) = v7;
      sub_21FA2D770(v8, v6);
      goto LABEL_6;
    }
    sub_21FA32D54(a1 + 40);
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)v5;
LABEL_6:
  v9 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);

  return a1;
}

uint64_t getEnumTagSinglePayload for WebRequestResponse(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WebRequestResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WebRequestResponse()
{
  return &type metadata for WebRequestResponse;
}

_QWORD *initializeBufferWithCopyOfBuffer for WebRequestResponseError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  void **v9;
  void **v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v8 = *(int *)(a3 + 20);
    v9 = (void **)((char *)v4 + v8);
    v10 = (void **)((char *)a2 + v8);
    v11 = type metadata accessor for WebRequestResponseError.ErrorType(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        v19 = *v10;
        v20 = v19;
        *v9 = v19;
        goto LABEL_16;
      case 1:
        v16 = type metadata accessor for HTTPError();
        v17 = swift_getEnumCaseMultiPayload();
        if (v17 == 3 || v17 == 2)
        {
          v21 = v10[1];
          *v9 = *v10;
          v9[1] = v21;
          swift_bridgeObjectRetain();
          swift_storeEnumTagMultiPayload();
        }
        else if (v17)
        {
          memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
        }
        else
        {
          v18 = sub_21FC5ACA4();
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v9, v10, v18);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_16;
      case 0:
        v13 = *v10;
        *v9 = *v10;
        v14 = v13;
LABEL_16:
        swift_storeEnumTagMultiPayload();
        return v4;
    }
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  return v4;
}

void destroy for WebRequestResponseError(uint64_t a1, uint64_t a2)
{
  id *v4;
  int EnumCaseMultiPayload;
  int v6;
  uint64_t v7;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = (id *)(a1 + *(int *)(a2 + 20));
  type metadata accessor for WebRequestResponseError.ErrorType(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      goto LABEL_4;
    case 1:
      type metadata accessor for HTTPError();
      v6 = swift_getEnumCaseMultiPayload();
      if (v6 == 3 || v6 == 2)
      {
        swift_bridgeObjectRelease();
      }
      else if (!v6)
      {
        v7 = sub_21FC5ACA4();
        (*(void (**)(id *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
      }
      break;
    case 0:
LABEL_4:

      break;
  }
}

uint64_t initializeWithCopy for WebRequestResponseError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  void **v8;
  void **v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  void *v12;
  id v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = *(int *)(a3 + 20);
  v8 = (void **)(a1 + v7);
  v9 = (void **)(a2 + v7);
  v10 = type metadata accessor for WebRequestResponseError.ErrorType(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v17 = *v9;
      v18 = v17;
      *v8 = v17;
      goto LABEL_14;
    case 1:
      v14 = type metadata accessor for HTTPError();
      v15 = swift_getEnumCaseMultiPayload();
      if (v15 == 3 || v15 == 2)
      {
        v19 = v9[1];
        *v8 = *v9;
        v8[1] = v19;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
      }
      else if (v15)
      {
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        v16 = sub_21FC5ACA4();
        (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v8, v9, v16);
        swift_storeEnumTagMultiPayload();
      }
      goto LABEL_14;
    case 0:
      v12 = *v9;
      *v8 = *v9;
      v13 = v12;
LABEL_14:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  return a1;
}

uint64_t *assignWithCopy for WebRequestResponseError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  void **v7;
  void **v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  void *v11;
  id v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void *v16;
  id v17;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 20);
    v7 = (void **)((char *)a1 + v6);
    v8 = (void **)((char *)a2 + v6);
    sub_21FA326EC((uint64_t)a1 + v6, type metadata accessor for WebRequestResponseError.ErrorType);
    v9 = type metadata accessor for WebRequestResponseError.ErrorType(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        v16 = *v8;
        v17 = v16;
        *v7 = v16;
        goto LABEL_15;
      case 1:
        v13 = type metadata accessor for HTTPError();
        v14 = swift_getEnumCaseMultiPayload();
        if (v14 == 3 || v14 == 2)
        {
          *v7 = *v8;
          v7[1] = v8[1];
          swift_bridgeObjectRetain();
          swift_storeEnumTagMultiPayload();
        }
        else if (v14)
        {
          memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
        }
        else
        {
          v15 = sub_21FC5ACA4();
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v7, v8, v15);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_15;
      case 0:
        v11 = *v8;
        *v7 = *v8;
        v12 = v11;
LABEL_15:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  return a1;
}

uint64_t initializeWithTake for WebRequestResponseError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 20);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = type metadata accessor for WebRequestResponseError.ErrorType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = type metadata accessor for HTTPError();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v10 = sub_21FC5ACA4();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v6, v7, v10);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  return a1;
}

uint64_t assignWithTake for WebRequestResponseError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 20);
    v8 = (void *)(a1 + v7);
    v9 = (const void *)(a2 + v7);
    sub_21FA326EC(a1 + v7, type metadata accessor for WebRequestResponseError.ErrorType);
    v10 = type metadata accessor for WebRequestResponseError.ErrorType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = type metadata accessor for HTTPError();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        v12 = sub_21FC5ACA4();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v8, v9, v12);
        swift_storeEnumTagMultiPayload();
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for WebRequestResponseError()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA8C37C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for WebRequestResponseError.ErrorType(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for WebRequestResponseError()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA8C404(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for WebRequestResponseError.ErrorType(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_21FA8C478()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for WebRequestResponseError.ErrorType(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for WebRequestResponseError.ErrorType(char *a1, char **a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v10[(v6 + 16) & ~(unint64_t)v6];
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        v14 = *a2;
        v15 = v14;
        *(_QWORD *)a1 = v14;
        goto LABEL_16;
      case 1:
        v11 = type metadata accessor for HTTPError();
        v12 = swift_getEnumCaseMultiPayload();
        if (v12 == 3 || v12 == 2)
        {
          v16 = a2[1];
          *(_QWORD *)a1 = *a2;
          *((_QWORD *)a1 + 1) = v16;
          swift_bridgeObjectRetain();
          swift_storeEnumTagMultiPayload();
        }
        else if (v12)
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
        }
        else
        {
          v13 = sub_21FC5ACA4();
          (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_16;
      case 0:
        v8 = *a2;
        *(_QWORD *)a1 = *a2;
        v9 = v8;
LABEL_16:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

void destroy for WebRequestResponseError.ErrorType(id *a1)
{
  int EnumCaseMultiPayload;
  int v3;
  uint64_t v4;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      goto LABEL_4;
    case 1:
      type metadata accessor for HTTPError();
      v3 = swift_getEnumCaseMultiPayload();
      if (v3 == 3 || v3 == 2)
      {
        swift_bridgeObjectRelease();
      }
      else if (!v3)
      {
        v4 = sub_21FC5ACA4();
        (*(void (**)(id *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      }
      break;
    case 0:
LABEL_4:

      break;
  }
}

void **initializeWithCopy for WebRequestResponseError.ErrorType(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  void *v7;
  id v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v12 = *a2;
      v13 = v12;
      *a1 = v12;
      goto LABEL_14;
    case 1:
      v9 = type metadata accessor for HTTPError();
      v10 = swift_getEnumCaseMultiPayload();
      if (v10 == 3 || v10 == 2)
      {
        v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
      }
      else if (v10)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        v11 = sub_21FC5ACA4();
        (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        swift_storeEnumTagMultiPayload();
      }
      goto LABEL_14;
    case 0:
      v7 = *a2;
      *a1 = *a2;
      v8 = v7;
LABEL_14:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

void **assignWithCopy for WebRequestResponseError.ErrorType(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  void *v7;
  id v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  id v13;

  if (a1 != a2)
  {
    sub_21FA326EC((uint64_t)a1, type metadata accessor for WebRequestResponseError.ErrorType);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        v12 = *a2;
        v13 = v12;
        *a1 = v12;
        goto LABEL_15;
      case 1:
        v9 = type metadata accessor for HTTPError();
        v10 = swift_getEnumCaseMultiPayload();
        if (v10 == 3 || v10 == 2)
        {
          *a1 = *a2;
          a1[1] = a2[1];
          swift_bridgeObjectRetain();
          swift_storeEnumTagMultiPayload();
        }
        else if (v10)
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
        }
        else
        {
          v11 = sub_21FC5ACA4();
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_15;
      case 0:
        v7 = *a2;
        *a1 = *a2;
        v8 = v7;
LABEL_15:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *initializeWithTake for WebRequestResponseError.ErrorType(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for HTTPError();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v7 = sub_21FC5ACA4();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for WebRequestResponseError.ErrorType(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_21FA326EC((uint64_t)a1, type metadata accessor for WebRequestResponseError.ErrorType);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for HTTPError();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      }
      else
      {
        v7 = sub_21FC5ACA4();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_21FA8CBDC()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for HTTPError();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_21FA8CC58(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    return sub_21FC5B8B0();
  sub_21FA5BE58(0, (unint64_t *)&qword_25406BAC8);
  return sub_21FC5BA48();
}

uint64_t sub_21FA8CCE8(uint64_t a1)
{
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  if (!a1)
    goto LABEL_8;
  v2 = swift_bridgeObjectRetain();
  v3 = sub_21FBFF6AC(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v4 = sub_21FA8D7C4(v3, a1);
  swift_release();
  result = swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v4 + 16);
  if (!v6)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    sub_21FA5BE58(0, (unint64_t *)&qword_25406BAC8);
    return sub_21FC5BA48();
  }
  v7 = 0;
  v8 = 0;
  while (1)
  {
    v9 = *(_QWORD *)(v4 + 8 * v7 + 32);
    v10 = __OFADD__(v8, v9);
    v8 += v9;
    if (v10)
      break;
    if (v6 == ++v7)
    {
      swift_bridgeObjectRelease();
      return sub_21FC5B8B0();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_21FA8CDCC(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;

  if (a1)
  {
    v1 = swift_bridgeObjectRetain();
    v2 = sub_21FA8D8EC(v1);
    swift_bridgeObjectRelease();
    if (v2 >> 62)
    {
      swift_bridgeObjectRetain();
      sub_21FC5BC7C();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return sub_21FC5B8B0();
  }
  else
  {
    sub_21FA5BE58(0, (unint64_t *)&qword_25406BAC8);
    return sub_21FC5BA48();
  }
}

uint64_t sub_21FA8CE90(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;

  if (a1)
  {
    v1 = swift_bridgeObjectRetain();
    v2 = sub_21FA8D8EC(v1);
    swift_bridgeObjectRelease();
    if (v2 >> 62)
    {
      swift_bridgeObjectRetain();
      sub_21FC5BC7C();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return sub_21FC5B7FC();
  }
  else
  {
    sub_21FA5BE58(0, (unint64_t *)&qword_25406BAC8);
    return sub_21FC5BA48();
  }
}

uint64_t sub_21FA8CF58()
{
  uint64_t v0;

  v0 = sub_21FC5B5E0();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_21FA8D06C(unint64_t a1)
{
  if (a1)
  {
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      sub_21FC5BC7C();
      swift_bridgeObjectRelease();
    }
    return sub_21FC5B7FC();
  }
  else
  {
    sub_21FA5BE58(0, (unint64_t *)&qword_25406BAC8);
    return sub_21FC5BA48();
  }
}

uint64_t sub_21FA8D0FC(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;

  if (a1)
  {
    v1 = swift_bridgeObjectRetain();
    v2 = sub_21FA8D8EC(v1);
    swift_bridgeObjectRelease();
    if (v2 >> 62)
    {
      swift_bridgeObjectRetain();
      sub_21FC5BC7C();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return sub_21FC5B8B0();
  }
  else
  {
    sub_21FA5BE58(0, (unint64_t *)&qword_25406BAC8);
    return sub_21FC5BA48();
  }
}

uint64_t sub_21FA8D1C4()
{
  return sub_21FC5B7FC();
}

uint64_t sub_21FA8D1CC()
{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;

  if (*v0)
  {
    v1 = (void *)sub_21FC5A8D8();
    v2 = objc_msgSend(v1, sel_domain);

    sub_21FC5B604();
    v3 = sub_21FC5B5E0();
    swift_bridgeObjectRelease();
    return v3;
  }
  else
  {
    sub_21FA5BE58(0, &qword_25406BE30);
    return sub_21FC5BA78();
  }
}

uint64_t sub_21FA8D278()
{
  _QWORD *v0;
  uint64_t v1;

  if (*v0)
  {
    swift_getErrorValue();
    sub_21FC5BE44();
    v1 = sub_21FC5B5E0();
    swift_bridgeObjectRelease();
    return v1;
  }
  else
  {
    sub_21FA5BE58(0, &qword_25406BE30);
    return sub_21FC5BA78();
  }
}

uint64_t sub_21FA8D300()
{
  uint64_t v0;

  return sub_21FA8CC58(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t sub_21FA8D30C()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 8))
  {
    swift_bridgeObjectRetain();
    v1 = sub_21FC5B5E0();
    swift_bridgeObjectRelease();
    return v1;
  }
  else
  {
    sub_21FA5BE58(0, &qword_25406BE30);
    return sub_21FC5BA78();
  }
}

uint64_t sub_21FA8D388()
{
  uint64_t *v0;

  return sub_21FA8CCE8(*v0);
}

uint64_t sub_21FA8D390()
{
  uint64_t *v0;

  return sub_21FA8CDCC(*v0);
}

uint64_t sub_21FA8D398()
{
  uint64_t *v0;

  return sub_21FA8CE90(*v0);
}

uint64_t sub_21FA8D3A0(uint64_t a1, uint64_t a2)
{
  return sub_21FA8D3B8(a1, a2, (void (*)(uint64_t))sub_21FBDF4DC);
}

uint64_t sub_21FA8D3AC(uint64_t a1, uint64_t a2)
{
  return sub_21FA8D3B8(a1, a2, (void (*)(uint64_t))sub_21FC03D58);
}

uint64_t sub_21FA8D3B8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  char v9;
  char v10;

  v4 = *v3;
  if (v4)
  {
    v6 = swift_bridgeObjectRetain();
    v7 = sub_21FBFF6AC(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v8 = sub_21FA8D7C4(v7, v4);
    swift_release();
    swift_bridgeObjectRelease();
    a3(v8);
    v10 = v9;
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
      return sub_21FC5B8B0();
  }
  sub_21FA5BE58(0, (unint64_t *)&qword_25406BAC8);
  return sub_21FC5BA48();
}

uint64_t sub_21FA8D480()
{
  unint64_t *v0;
  char v1;

  sub_21FAD547C(*v0);
  if ((v1 & 1) == 0)
    return sub_21FC5B8B0();
  sub_21FA5BE58(0, (unint64_t *)&qword_25406BAC8);
  return sub_21FC5BA48();
}

uint64_t sub_21FA8D4D4()
{
  uint64_t *v0;

  if (*v0)
  {
    sub_21FAB6FE8(*v0);
    swift_bridgeObjectRelease();
  }
  return sub_21FC5B8B0();
}

uint64_t sub_21FA8D524(uint64_t a1, uint64_t a2)
{
  return sub_21FA8D758(a1, a2, (void (*)(void))sub_21FAD58D0);
}

uint64_t sub_21FA8D530()
{
  return sub_21FA8CF58();
}

uint64_t sub_21FA8D538(uint64_t a1, uint64_t a2)
{
  return sub_21FA8D5C0(a1, a2, (void (*)(_QWORD *__return_ptr, char *))sub_21FA8D598);
}

void sub_21FA8D544()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406AAE8)
  {
    sub_21FC5AAAC();
    v0 = sub_21FC5BAA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406AAE8);
  }
}

uint64_t sub_21FA8D598@<X0>(_QWORD *a1@<X8>)
{
  return sub_21FBC0DF8(a1);
}

uint64_t sub_21FA8D5B4(uint64_t a1, uint64_t a2)
{
  return sub_21FA8D5C0(a1, a2, (void (*)(_QWORD *__return_ptr, char *))sub_21FA8D68C);
}

uint64_t sub_21FA8D5C0(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, char *))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  char v8;
  char v9;
  _BYTE v11[16];
  uint64_t v12;

  sub_21FA8D544();
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_21FA7187C(v3, (uint64_t)v7);
  v12 = v3;
  sub_21FC15D90(a3);
  v9 = v8;
  sub_21FA71828((uint64_t)v7);
  if ((v9 & 1) == 0)
    return sub_21FC5B8B0();
  sub_21FA5BE58(0, (unint64_t *)&qword_25406BAC8);
  return sub_21FC5BA48();
}

uint64_t sub_21FA8D68C@<X0>(_QWORD *a1@<X8>)
{
  return sub_21FBC0E14(a1);
}

uint64_t sub_21FA8D6A8()
{
  uint64_t result;
  double v1;

  result = sub_21FC5AA4C();
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 9.22337204e18)
    return sub_21FC5B8B0();
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_21FA8D728()
{
  return sub_21FC5B5E0();
}

uint64_t sub_21FA8D738()
{
  uint64_t *v0;

  return sub_21FA8D0FC(*v0);
}

uint64_t sub_21FA8D740()
{
  unint64_t *v0;

  return sub_21FA8D06C(*v0);
}

uint64_t sub_21FA8D758(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v3;
  uint64_t v4;

  a3();
  if (v3)
  {
    v4 = sub_21FC5B5E0();
    swift_bridgeObjectRelease();
    return v4;
  }
  else
  {
    sub_21FA5BE58(0, &qword_25406BE30);
    return sub_21FC5BA78();
  }
}

uint64_t sub_21FA8D7C4(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v15 = MEMORY[0x24BEE4AF8];
    sub_21FC019F0(0, v2, 0);
    v3 = v15;
    v6 = 0;
    v14 = *(_QWORD *)(sub_21FC5AAF4() - 8);
    v7 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    do
    {
      if (*(_QWORD *)(a2 + 16) && (v8 = sub_21FA73E18(v7 + *(_QWORD *)(v14 + 72) * v6), (v9 & 1) != 0))
        v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v8) + 16);
      else
        v10 = 0;
      v12 = *(_QWORD *)(v15 + 16);
      v11 = *(_QWORD *)(v15 + 24);
      if (v12 >= v11 >> 1)
        sub_21FC019F0(v11 > 1, v12 + 1, 1);
      ++v6;
      *(_QWORD *)(v15 + 16) = v12 + 1;
      *(_QWORD *)(v15 + 8 * v12 + 32) = v10;
    }
    while (v2 != v6);
  }
  return v3;
}

uint64_t sub_21FA8D8EC(unint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  id v4;
  void *v5;
  unint64_t v6;
  id v7;
  void *v8;
  char v9;
  id v10;
  id v11;
  uint64_t v13;

  v13 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_18;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      v3 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v4 = (id)MEMORY[0x2207D057C](v3, a1);
LABEL_9:
        v5 = v4;
        v6 = v3 + 1;
        if (__OFADD__(v3, 1))
          goto LABEL_17;
        v7 = objc_msgSend(v4, sel_gateway);
        if (v7
          && (v8 = v7, v9 = sub_21FC5B9E8(), v8, (v9 & 1) != 0)
          && (v10 = objc_msgSend(v5, sel_clinicalSharingStatus),
              v11 = objc_msgSend(v10, sel_userStatus),
              v10,
              v11 == (id)2))
        {
          sub_21FC5BBE0();
          sub_21FC5BC10();
          sub_21FC5BC1C();
          sub_21FC5BBEC();
        }
        else
        {

        }
        ++v3;
        if (v6 == v2)
          return v13;
      }
      if (v3 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      v2 = sub_21FC5BC7C();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    v4 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t *sub_21FA8DA90(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  id v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  int *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  char *v62;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v60 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v60 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = a3[6];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_21FC5AAAC();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[7];
    v12 = *(_OWORD *)((char *)a2 + v11 + 24);
    *(_OWORD *)((char *)v4 + v11 + 24) = v12;
    (**(void (***)(void))(v12 - 8))();
    v13 = a3[8];
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    v16 = sub_21FC5AAF4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = a3[9];
    v18 = a3[10];
    v19 = (uint64_t *)((char *)v4 + v17);
    v20 = (uint64_t *)((char *)a2 + v17);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = *(void **)((char *)a2 + v18);
    *(uint64_t *)((char *)v4 + v18) = (uint64_t)v22;
    v23 = a3[11];
    v24 = (char *)v4 + v23;
    v25 = (char *)a2 + v23;
    v26 = *((_QWORD *)v25 + 1);
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *((_QWORD *)v24 + 1) = v26;
    v27 = *((_QWORD *)v25 + 3);
    *((_QWORD *)v24 + 2) = *((_QWORD *)v25 + 2);
    *((_QWORD *)v24 + 3) = v27;
    v28 = *((_QWORD *)v25 + 5);
    *((_QWORD *)v24 + 4) = *((_QWORD *)v25 + 4);
    *((_QWORD *)v24 + 5) = v28;
    v62 = v24 + 48;
    v29 = v25 + 48;
    v30 = *(_OWORD *)(v25 + 72);
    *(_OWORD *)(v24 + 72) = v30;
    v31 = v30;
    v32 = **(void (***)(char *, char *, uint64_t))(v30 - 8);
    swift_bridgeObjectRetain();
    v33 = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v32(v62, v29, v31);
    v34 = a3[12];
    v35 = (char *)v4 + v34;
    v36 = (char *)a2 + v34;
    v37 = sub_21FC5A98C();
    v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
    v38(v35, v36, v37);
    v39 = (int *)type metadata accessor for ClinicalSharingCloudStandardAPI();
    v38(&v35[v39[5]], &v36[v39[5]], v37);
    v40 = v39[6];
    v41 = *(void **)&v36[v40];
    *(_QWORD *)&v35[v40] = v41;
    *(_QWORD *)&v35[v39[7]] = *(_QWORD *)&v36[v39[7]];
    v42 = v39[8];
    v43 = &v35[v42];
    v44 = &v36[v42];
    v45 = *((_QWORD *)v44 + 1);
    *(_QWORD *)v43 = *(_QWORD *)v44;
    *((_QWORD *)v43 + 1) = v45;
    v46 = v39[9];
    v47 = &v35[v46];
    v48 = &v36[v46];
    v49 = *((_QWORD *)v48 + 1);
    *(_QWORD *)v47 = *(_QWORD *)v48;
    *((_QWORD *)v47 + 1) = v49;
    v50 = a3[13];
    v51 = a3[14];
    v52 = *(void **)((char *)a2 + v50);
    *(uint64_t *)((char *)v4 + v50) = (uint64_t)v52;
    *(uint64_t *)((char *)v4 + v51) = *(uint64_t *)((char *)a2 + v51);
    v53 = a3[15];
    v54 = (uint64_t *)((char *)v4 + v53);
    v55 = (uint64_t *)((char *)a2 + v53);
    v56 = *v55;
    v57 = v41;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v58 = v52;
    swift_retain();
    if (v56)
    {
      v59 = v55[1];
      *v54 = v56;
      v54[1] = v59;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v54 = *(_OWORD *)v55;
    }
  }
  return v4;
}

uint64_t sub_21FA8DD10(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;

  v4 = a1 + a2[6];
  v5 = sub_21FC5AAAC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  __swift_destroy_boxed_opaque_existential_1(a1 + a2[7]);
  v6 = a1 + a2[8];
  v7 = sub_21FC5AAF4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();

  v8 = a1 + a2[11];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v8 + 48);
  v9 = a1 + a2[12];
  v10 = sub_21FC5A98C();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v12 = type metadata accessor for ClinicalSharingCloudStandardAPI();
  v11(v9 + *(int *)(v12 + 20), v10);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  result = swift_release();
  if (*(_QWORD *)(a1 + a2[15]))
    return swift_release();
  return result;
}

_OWORD *sub_21FA8DE88(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  id v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  int *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  id v56;
  id v57;
  uint64_t v58;
  char *v60;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21FC5AAAC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[7];
  v11 = *(_OWORD *)((char *)a2 + v10 + 24);
  *(_OWORD *)((char *)a1 + v10 + 24) = v11;
  (**(void (***)(void))(v11 - 8))();
  v12 = a3[8];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_21FC5AAF4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = a3[9];
  v17 = a3[10];
  v18 = (_QWORD *)((char *)a1 + v16);
  v19 = (_QWORD *)((char *)a2 + v16);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = *(void **)((char *)a2 + v17);
  *(_QWORD *)((char *)a1 + v17) = v21;
  v22 = a3[11];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = *((_QWORD *)v24 + 1);
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *((_QWORD *)v23 + 1) = v25;
  v26 = *((_QWORD *)v24 + 3);
  *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
  *((_QWORD *)v23 + 3) = v26;
  v27 = *((_QWORD *)v24 + 5);
  *((_QWORD *)v23 + 4) = *((_QWORD *)v24 + 4);
  *((_QWORD *)v23 + 5) = v27;
  v60 = v23 + 48;
  v28 = v24 + 48;
  v29 = *(_OWORD *)(v24 + 72);
  *(_OWORD *)(v23 + 72) = v29;
  v30 = v29;
  v31 = **(void (***)(char *, char *, uint64_t))(v29 - 8);
  swift_bridgeObjectRetain();
  v32 = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v31(v60, v28, v30);
  v33 = a3[12];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = sub_21FC5A98C();
  v37 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16);
  v37(v34, v35, v36);
  v38 = (int *)type metadata accessor for ClinicalSharingCloudStandardAPI();
  v37(&v34[v38[5]], &v35[v38[5]], v36);
  v39 = v38[6];
  v40 = *(void **)&v35[v39];
  *(_QWORD *)&v34[v39] = v40;
  *(_QWORD *)&v34[v38[7]] = *(_QWORD *)&v35[v38[7]];
  v41 = v38[8];
  v42 = &v34[v41];
  v43 = &v35[v41];
  v44 = *((_QWORD *)v43 + 1);
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *((_QWORD *)v42 + 1) = v44;
  v45 = v38[9];
  v46 = &v34[v45];
  v47 = &v35[v45];
  v48 = *((_QWORD *)v47 + 1);
  *(_QWORD *)v46 = *(_QWORD *)v47;
  *((_QWORD *)v46 + 1) = v48;
  v49 = a3[13];
  v50 = a3[14];
  v51 = *(void **)((char *)a2 + v49);
  *(_QWORD *)((char *)a1 + v49) = v51;
  *(_QWORD *)((char *)a1 + v50) = *(_QWORD *)((char *)a2 + v50);
  v52 = a3[15];
  v53 = (_QWORD *)((char *)a1 + v52);
  v54 = (uint64_t *)((char *)a2 + v52);
  v55 = *v54;
  v56 = v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v57 = v51;
  swift_retain();
  if (v55)
  {
    v58 = v54[1];
    *v53 = v55;
    v53[1] = v58;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v53 = *(_OWORD *)v54;
  }
  return a1;
}

_QWORD *sub_21FA8E0DC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  int *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21FC5AAAC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  __swift_assign_boxed_opaque_existential_1((_QWORD *)((char *)a1 + a3[7]), (_QWORD *)((char *)a2 + a3[7]));
  v10 = a3[8];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_21FC5AAF4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[9];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = a3[10];
  v18 = *(void **)((char *)a2 + v17);
  v19 = *(void **)((char *)a1 + v17);
  *(_QWORD *)((char *)a1 + v17) = v18;
  v20 = v18;

  v21 = a3[11];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  *v22 = *(_QWORD *)((char *)a2 + v21);
  v22[1] = *(_QWORD *)((char *)a2 + v21 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22[2] = v23[2];
  v22[3] = v23[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22[4] = v23[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22[5] = v23[5];
  __swift_assign_boxed_opaque_existential_1(v22 + 6, v23 + 6);
  v24 = a3[12];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = sub_21FC5A98C();
  v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 24);
  v28(v25, v26, v27);
  v29 = (int *)type metadata accessor for ClinicalSharingCloudStandardAPI();
  v28(&v25[v29[5]], &v26[v29[5]], v27);
  v30 = v29[6];
  v31 = *(void **)&v26[v30];
  v32 = *(void **)&v25[v30];
  *(_QWORD *)&v25[v30] = v31;
  v33 = v31;

  *(_QWORD *)&v25[v29[7]] = *(_QWORD *)&v26[v29[7]];
  v34 = v29[8];
  v35 = &v25[v34];
  v36 = &v26[v34];
  *(_QWORD *)v35 = *(_QWORD *)v36;
  *((_QWORD *)v35 + 1) = *((_QWORD *)v36 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v37 = v29[9];
  v38 = &v25[v37];
  v39 = &v26[v37];
  *(_QWORD *)v38 = *(_QWORD *)v39;
  *((_QWORD *)v38 + 1) = *((_QWORD *)v39 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v40 = a3[13];
  v41 = *(void **)((char *)a2 + v40);
  v42 = *(void **)((char *)a1 + v40);
  *(_QWORD *)((char *)a1 + v40) = v41;
  v43 = v41;

  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  swift_retain();
  swift_release();
  v44 = a3[15];
  v45 = (_QWORD *)((char *)a1 + v44);
  v46 = (_QWORD *)((char *)a2 + v44);
  v47 = *(_QWORD *)((char *)a1 + v44);
  v48 = *v46;
  if (!v47)
  {
    if (v48)
    {
      v50 = v46[1];
      *v45 = v48;
      v45[1] = v50;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)v45 = *(_OWORD *)v46;
    return a1;
  }
  if (!v48)
  {
    swift_release();
    goto LABEL_7;
  }
  v49 = v46[1];
  *v45 = v48;
  v45[1] = v49;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_21FA8E3AC(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  int *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21FC5AAAC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  v11 = a3[8];
  v12 = (char *)a1 + v10;
  v13 = (char *)a2 + v10;
  v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
  v15 = (char *)a1 + v11;
  v16 = (char *)a2 + v11;
  v17 = sub_21FC5AAF4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  v18 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  v19 = a3[11];
  v20 = a3[12];
  v21 = (char *)a1 + v19;
  v22 = (char *)a2 + v19;
  *((_QWORD *)v21 + 10) = *((_QWORD *)v22 + 10);
  v23 = *((_OWORD *)v22 + 3);
  *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
  *((_OWORD *)v21 + 3) = v23;
  *((_OWORD *)v21 + 4) = *((_OWORD *)v22 + 4);
  v24 = *((_OWORD *)v22 + 1);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v24;
  v25 = (char *)a1 + v20;
  v26 = (char *)a2 + v20;
  v27 = sub_21FC5A98C();
  v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32);
  v28(v25, v26, v27);
  v29 = (int *)type metadata accessor for ClinicalSharingCloudStandardAPI();
  v28(&v25[v29[5]], &v26[v29[5]], v27);
  *(_QWORD *)&v25[v29[6]] = *(_QWORD *)&v26[v29[6]];
  *(_QWORD *)&v25[v29[7]] = *(_QWORD *)&v26[v29[7]];
  *(_OWORD *)&v25[v29[8]] = *(_OWORD *)&v26[v29[8]];
  *(_OWORD *)&v25[v29[9]] = *(_OWORD *)&v26[v29[9]];
  v30 = a3[14];
  *(_QWORD *)((char *)a1 + a3[13]) = *(_QWORD *)((char *)a2 + a3[13]);
  *(_QWORD *)((char *)a1 + v30) = *(_QWORD *)((char *)a2 + v30);
  v31 = a3[15];
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = (uint64_t *)((char *)a2 + v31);
  v34 = *v33;
  if (*v33)
  {
    v35 = v33[1];
    *v32 = v34;
    v32[1] = v35;
  }
  else
  {
    *(_OWORD *)v32 = *(_OWORD *)v33;
  }
  return a1;
}

_OWORD *sub_21FA8E55C(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  int *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21FC5AAAC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[7];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1 + v10);
  v13 = *((_OWORD *)v12 + 1);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v13;
  *((_QWORD *)v11 + 4) = *((_QWORD *)v12 + 4);
  v14 = a3[8];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_21FC5AAF4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  v18 = a3[9];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (uint64_t *)((char *)a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  v23 = a3[10];
  v24 = *(void **)((char *)a1 + v23);
  *(_QWORD *)((char *)a1 + v23) = *(_QWORD *)((char *)a2 + v23);

  v25 = a3[11];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = *(_QWORD *)((char *)a2 + v25 + 8);
  *(_QWORD *)v26 = *(_QWORD *)((char *)a2 + v25);
  *((_QWORD *)v26 + 1) = v28;
  swift_bridgeObjectRelease();
  v29 = *((_QWORD *)v27 + 3);
  *((_QWORD *)v26 + 2) = *((_QWORD *)v27 + 2);
  *((_QWORD *)v26 + 3) = v29;
  swift_bridgeObjectRelease();
  *((_QWORD *)v26 + 4) = *((_QWORD *)v27 + 4);
  swift_bridgeObjectRelease();
  *((_QWORD *)v26 + 5) = *((_QWORD *)v27 + 5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v26 + 48));
  v30 = *((_OWORD *)v27 + 4);
  *((_OWORD *)v26 + 3) = *((_OWORD *)v27 + 3);
  *((_OWORD *)v26 + 4) = v30;
  *((_QWORD *)v26 + 10) = *((_QWORD *)v27 + 10);
  v31 = a3[12];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = sub_21FC5A98C();
  v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 40);
  v35(v32, v33, v34);
  v36 = (int *)type metadata accessor for ClinicalSharingCloudStandardAPI();
  v35(&v32[v36[5]], &v33[v36[5]], v34);
  v37 = v36[6];
  v38 = *(void **)&v32[v37];
  *(_QWORD *)&v32[v37] = *(_QWORD *)&v33[v37];

  *(_QWORD *)&v32[v36[7]] = *(_QWORD *)&v33[v36[7]];
  v39 = v36[8];
  v40 = &v32[v39];
  v41 = &v33[v39];
  v43 = *(_QWORD *)v41;
  v42 = *((_QWORD *)v41 + 1);
  *(_QWORD *)v40 = v43;
  *((_QWORD *)v40 + 1) = v42;
  swift_bridgeObjectRelease();
  v44 = v36[9];
  v45 = &v32[v44];
  v46 = &v33[v44];
  v48 = *(_QWORD *)v46;
  v47 = *((_QWORD *)v46 + 1);
  *(_QWORD *)v45 = v48;
  *((_QWORD *)v45 + 1) = v47;
  swift_bridgeObjectRelease();
  v49 = a3[13];
  v50 = *(void **)((char *)a1 + v49);
  *(_QWORD *)((char *)a1 + v49) = *(_QWORD *)((char *)a2 + v49);

  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  swift_release();
  v51 = a3[15];
  v52 = (_QWORD *)((char *)a1 + v51);
  v53 = (uint64_t *)((char *)a2 + v51);
  v54 = *(_QWORD *)((char *)a1 + v51);
  v55 = *v53;
  if (!v54)
  {
    if (v55)
    {
      v57 = v53[1];
      *v52 = v55;
      v52[1] = v57;
      return a1;
    }
LABEL_7:
    *(_OWORD *)v52 = *(_OWORD *)v53;
    return a1;
  }
  if (!v55)
  {
    swift_release();
    goto LABEL_7;
  }
  v56 = v53[1];
  *v52 = v55;
  v52[1] = v56;
  swift_release();
  return a1;
}

uint64_t sub_21FA8E7CC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA8E7D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v6 = sub_21FC5AAAC();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v12 = sub_21FC5AAF4();
    v7 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    {
      v8 = v12;
      v9 = a3[8];
    }
    else
    {
      v8 = type metadata accessor for ClinicalSharingCloudStandardAPI();
      v7 = *(_QWORD *)(v8 - 8);
      v9 = a3[12];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[7] + 24);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t sub_21FA8E8A4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FA8E8B0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = sub_21FC5AAAC();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[6];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[7] + 24) = (a2 - 1);
      return result;
    }
    v12 = sub_21FC5AAF4();
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[8];
    }
    else
    {
      v10 = type metadata accessor for ClinicalSharingCloudStandardAPI();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = a4[12];
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t type metadata accessor for ClinicalSharingSyncTask()
{
  uint64_t result;

  result = qword_25406AEA8;
  if (!qword_25406AEA8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21FA8E9B4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = sub_21FC5AAAC();
  if (v1 <= 0x3F)
  {
    result = sub_21FC5AAF4();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for ClinicalSharingCloudStandardAPI();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_21FA8EAA4(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v2 = v1;
  v4 = sub_21FC5AAF4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
    goto LABEL_15;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v9 = MEMORY[0x24BEE4AF8];
    if (!v8)
      return v9;
    v17 = MEMORY[0x24BEE4AF8];
    result = sub_21FC01898(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0)
      break;
    v11 = 0;
    v9 = v17;
    v15 = v2;
    v16 = a1 & 0xC000000000000001;
    v2 = a1;
    while (v8 != v11)
    {
      if (v16)
      {
        v12 = MEMORY[0x2207D057C](v11, a1);
      }
      else
      {
        v12 = *(_QWORD *)(a1 + 8 * v11 + 32);
        swift_retain();
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v12 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_accountID, v4);
      swift_release();
      v17 = v9;
      v14 = *(_QWORD *)(v9 + 16);
      v13 = *(_QWORD *)(v9 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_21FC01898(v13 > 1, v14 + 1, 1);
        v9 = v17;
      }
      ++v11;
      *(_QWORD *)(v9 + 16) = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v14, v7, v4);
      a1 = v2;
      if (v8 == v11)
        return v9;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v8 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_21FA8EC80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  char *v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  id v46;
  id v47;
  void *v48;
  id v49;
  char *v50;
  uint64_t v51;
  id v53;
  id v54;
  id v55;
  _QWORD *v56;
  void *v57;
  id v58;
  id v59;
  void *v60;
  id v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD v74[5];
  uint64_t v75;
  _QWORD *v76;

  v72 = a4;
  v65 = a6;
  v10 = type metadata accessor for ClinicalSharingCloudStandardAPI();
  MEMORY[0x24BDAC7A8](v10);
  v66 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for ClinicalSharingSyncTask();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (_QWORD **)((char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = (_QWORD *)((char *)v15 + *(int *)(v13 + 60));
  *v16 = 0;
  v16[1] = 0;
  v70 = v16;
  *v15 = a1;
  v15[1] = a2;
  v17 = (char *)v15 + *(int *)(v13 + 24);
  v18 = sub_21FC5AAAC();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v69 = v17;
  v73 = a3;
  v20(v17, a3, v18);
  v21 = (uint64_t)v15 + v12[7];
  v76 = a5;
  v67 = v21;
  sub_21FA2CEA0((uint64_t)a5, v21);
  v22 = (char *)v15 + v12[8];
  sub_21FC5AAE8();
  *(_QWORD *)&v74[0] = v12;
  sub_21FA93184();
  *(_QWORD *)&v74[0] = sub_21FC5B64C();
  *((_QWORD *)&v74[0] + 1) = v23;
  sub_21FC5B6AC();
  v68 = v22;
  sub_21FC5AAB8();
  v24 = sub_21FA94BEC(8);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  swift_bridgeObjectRelease();
  MEMORY[0x2207D0054](v24, v26, v28, v30);
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  v31 = *((_QWORD *)&v74[0] + 1);
  v32 = (_QWORD *)((char *)v15 + v12[9]);
  *v32 = *(_QWORD *)&v74[0];
  v32[1] = v31;
  v33 = v71;
  sub_21FBA5388(0xD000000000000018, 0x800000021FC75C80, (uint64_t)v74);
  if (v33)
  {
    swift_release();
    v34 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v34(v73, v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
    v34((uint64_t)v69, v18);
    __swift_destroy_boxed_opaque_existential_1(v67);
    v51 = sub_21FC5AAF4();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(v68, v51);
    swift_bridgeObjectRelease();
    return sub_21FA97DF0(*v70);
  }
  else
  {
    v62 = v32;
    v71 = v18;
    v35 = (char *)v15 + v12[11];
    v36 = v74[3];
    *((_OWORD *)v35 + 2) = v74[2];
    *((_OWORD *)v35 + 3) = v36;
    *((_OWORD *)v35 + 4) = v74[4];
    *((_QWORD *)v35 + 10) = v75;
    v37 = v74[1];
    *(_OWORD *)v35 = v74[0];
    *((_OWORD *)v35 + 1) = v37;
    v38 = HKHealthRecordsCurrentEnvironment();
    v39 = 0xD000000000000023;
    v63 = v19;
    if (v38 > 0xD)
    {
      v64 = 0x800000021FC75A50;
    }
    else
    {
      v40 = 1 << v38;
      if (((1 << v38) & 0x820) != 0)
        v41 = 0xD000000000000022;
      else
        v41 = 0xD000000000000023;
      if (((1 << v38) & 0x820) != 0)
        v42 = 0x800000021FC75AD0;
      else
        v42 = 0x800000021FC75A50;
      if (((1 << v38) & 3) != 0)
        v43 = 0xD00000000000001FLL;
      else
        v43 = v41;
      if (((1 << v38) & 3) != 0)
        v44 = 0x800000021FC75A80;
      else
        v44 = v42;
      if ((v40 & 0x2184) != 0)
        v39 = 0xD000000000000027;
      else
        v39 = v43;
      if ((v40 & 0x2184) != 0)
        v45 = 0x800000021FC75AA0;
      else
        v45 = v44;
      v64 = v45;
    }
    sub_21FA5BE58(0, (unint64_t *)&qword_25406CB58);
    v46 = static NSURLSessionConfiguration.defaultPublicSessionConfiguration.getter();
    v47 = (id)HKSecPolicyNameAppleHealthProviderService();
    if (!v47)
    {
      sub_21FC5B604();
      v47 = (id)sub_21FC5B5E0();
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v46, sel_set_tlsTrustPinningPolicyName_, v47);

    v48 = (void *)objc_opt_self();
    v49 = objc_msgSend(v48, sel_sessionWithConfiguration_, v46);

    v50 = v66;
    sub_21FAAA0A4(v39, v64, v49, 3, v66);
    sub_21FA2D23C((uint64_t)v50, (uint64_t)v15 + v12[12], (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCloudStandardAPI);
    v53 = static NSURLSessionConfiguration.defaultPublicSessionConfiguration.getter();
    v54 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for URLSessionCertVerificationDelegate()), sel_init);
    v55 = objc_msgSend(v48, sel_sessionWithConfiguration_delegate_delegateQueue_, v53, v54, 0);

    *(_QWORD *)((char *)v15 + v12[13]) = v55;
    v56 = v76;
    v57 = (void *)*__swift_project_boxed_opaque_existential_1(v76, v76[3]);
    v58 = objc_allocWithZone(MEMORY[0x24BDD3C98]);
    v59 = v57;
    v60 = (void *)sub_21FC5B5E0();
    v61 = objc_msgSend(v58, sel_initWithCategory_domainName_healthStore_, 3, v60, v59);

    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v73, v71);
    *(_QWORD *)((char *)v15 + v12[10]) = v61;
    *(_QWORD *)((char *)v15 + v12[14]) = v72;
    sub_21FA2D120((uint64_t)v15, v65, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
    return sub_21FA326EC((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
  }
}

uint64_t sub_21FA8F234()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[5];

  v1 = v0;
  v2 = (int *)type metadata accessor for ClinicalSharingSyncTask();
  v3 = *(_QWORD *)(*((_QWORD *)v2 - 1) + 64);
  v39 = *((_QWORD *)v2 - 1);
  v40 = v3;
  MEMORY[0x24BDAC7A8](v2);
  v38 = (uint64_t)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA94C74();
  v6 = *(_QWORD *)(v5 - 8);
  v43 = v5;
  v44 = v6;
  MEMORY[0x24BDAC7A8](v5);
  v42 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_21FC5AAAC();
  v45 = *(_QWORD *)(v37 - 8);
  v8 = *(_QWORD *)(v45 + 64);
  v9 = MEMORY[0x24BDAC7A8](v37);
  v36 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v35 - v10;
  v41 = (char *)&v35 - v10;
  sub_21FC5AAA0();
  v12 = type metadata accessor for ClinicalSharingSyncContext();
  v13 = (void *)__swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + v2[7]), *(_QWORD *)(v1 + v2[7] + 24))[2];
  v46[3] = &type metadata for ClinicalSharingAccountStore;
  v46[4] = &off_24E484B78;
  v46[0] = v13;
  v14 = *(void **)(v1 + v2[13]);
  v15 = *(void **)(v1 + v2[10]);
  v16 = (uint64_t *)(v1 + v2[15]);
  v17 = *v16;
  v18 = v16[1];
  v19 = (void *)*__swift_project_boxed_opaque_existential_1(v46, (uint64_t)&type metadata for ClinicalSharingAccountStore);
  v20 = v13;
  v21 = sub_21FA931BC(v19, v14, v15, v17, v18, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  v46[0] = v21;
  v22 = v38;
  sub_21FA2D120(v1, v38, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
  v23 = v45;
  v24 = v36;
  v25 = v11;
  v26 = v37;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v36, v25, v37);
  v27 = (*(unsigned __int8 *)(v39 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  v28 = v23;
  v29 = (v40 + *(unsigned __int8 *)(v23 + 80) + v27) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  v30 = swift_allocObject();
  sub_21FA2D23C(v22, v30 + v27, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
  (*(void (**)(unint64_t, char *, uint64_t))(v28 + 32))(v30 + v29, v24, v26);
  sub_21FC5B184();
  sub_21FA97980(0, &qword_25406B958, (uint64_t (*)(uint64_t))sub_21FA94D54, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA7BA1C(0, (unint64_t *)&qword_25406CB30, &qword_25406CB60);
  sub_21FA97A80(0, (unint64_t *)&unk_25406CA90, (unint64_t *)&qword_25406CB30, &qword_25406CB60);
  sub_21FA97B70((unint64_t *)&qword_25406B950, &qword_25406B958, (uint64_t (*)(uint64_t))sub_21FA94D54);
  sub_21FA94D70();
  v31 = v42;
  sub_21FC5B34C();
  swift_release();
  swift_release();
  sub_21FA2A08C(&qword_25406C9E8, (uint64_t (*)(uint64_t))sub_21FA94C74, MEMORY[0x24BDB98F0]);
  v32 = v43;
  v33 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v31, v32);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v41, v26);
  return v33;
}

uint64_t sub_21FA8F5D0@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(void);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t result;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v96 = a3;
  v107 = a4;
  v93 = sub_21FC5AAAC();
  v92 = *(_QWORD *)(v93 - 8);
  v94 = *(_QWORD *)(v92 + 64);
  MEMORY[0x24BDAC7A8](v93);
  v91 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA94E54();
  v83 = v7;
  v84 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ClinicalSharingSyncTask();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v10);
  sub_21FA97C4C(0, &qword_25406B800, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB9558]);
  v14 = v13;
  v81 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v79 - v15;
  sub_21FA964D0(0, &qword_25406B880, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BDB98E0]);
  v85 = v17;
  v86 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v82 = (char *)&v79 - v18;
  sub_21FA94F8C();
  v87 = v19;
  v88 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v110 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA95064();
  v89 = v21;
  v90 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v109 = (char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA951B0();
  v97 = v23;
  v99 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v111 = (char *)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA9528C();
  v26 = *(_QWORD *)(v25 - 8);
  v101 = v25;
  v102 = v26;
  MEMORY[0x24BDAC7A8](v25);
  v95 = (char *)&v79 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA953E8();
  v103 = v28;
  v105 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v98 = (char *)&v79 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA954C4();
  v104 = v30;
  v106 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v100 = (char *)&v79 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_21FA90184(*a1);
  v112 = (uint64_t)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D120(a2, v112, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
  v32 = *(unsigned __int8 *)(v11 + 80);
  v108 = ((v32 + 16) & ~v32) + v12;
  v33 = (v32 + 16) & ~v32;
  v113 = v32 | 7;
  v114 = v33;
  v34 = swift_allocObject();
  sub_21FA2D23C((uint64_t)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v34 + v33, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
  sub_21FA97980(0, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA97B70((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
  sub_21FC5B298();
  swift_release();
  swift_release();
  v35 = *(void **)(a2 + *(int *)(v10 + 52));
  *(_QWORD *)(swift_allocObject() + 16) = v35;
  v36 = v35;
  sub_21FC5B184();
  type metadata accessor for ClinicalSharingSyncContext();
  sub_21FA94F4C(&qword_25406C7A8, &qword_25406B800, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB9558], MEMORY[0x24BDB9568]);
  sub_21FC5B34C();
  swift_release();
  sub_21FA2A08C(&qword_25406C918, (uint64_t (*)(uint64_t))sub_21FA94E54, MEMORY[0x24BDB98F0]);
  v37 = v83;
  v38 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v84 + 8))(v9, v37);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v16, v14);
  v115 = v38;
  v39 = *(_QWORD *)(a2 + *(int *)(v10 + 56));
  v40 = swift_allocObject();
  *(_QWORD *)(v40 + 16) = sub_21FA955AC;
  *(_QWORD *)(v40 + 24) = v39;
  swift_retain();
  sub_21FC5B184();
  v41 = v82;
  sub_21FC5B34C();
  swift_release();
  swift_release();
  sub_21FA95024(&qword_25406B878, &qword_25406B880, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BDB98E0], MEMORY[0x24BDB98F0]);
  v42 = v85;
  sub_21FC5B328();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v41, v42);
  v43 = a2;
  v80 = a2;
  v44 = v112;
  sub_21FA2D120(a2, v112, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
  v45 = v108;
  v46 = swift_allocObject();
  sub_21FA2D23C(v44, v46 + v114, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = sub_21FA955E0;
  *(_QWORD *)(v47 + 24) = v46;
  sub_21FC5B184();
  sub_21FA95140(0);
  v48 = MEMORY[0x24BDB9AE0];
  sub_21FA97980(0, &qword_25406CA50, (uint64_t (*)(uint64_t))sub_21FA95140, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA2A08C(&qword_25406C8C8, (uint64_t (*)(uint64_t))sub_21FA94F8C, MEMORY[0x24BDB98D8]);
  sub_21FA97B70(&qword_25406CA48, &qword_25406CA50, (uint64_t (*)(uint64_t))sub_21FA95140);
  v49 = v87;
  v50 = v110;
  sub_21FC5B34C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v88 + 8))(v50, v49);
  v51 = v112;
  sub_21FA2D120(v43, v112, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
  v52 = v92;
  v53 = v91;
  v54 = v93;
  (*(void (**)(char *, uint64_t, uint64_t))(v92 + 16))(v91, v96, v93);
  v55 = v52;
  v56 = (v45 + *(unsigned __int8 *)(v52 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
  v57 = swift_allocObject();
  v58 = v114;
  sub_21FA2D23C(v51, v57 + v114, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
  (*(void (**)(unint64_t, char *, uint64_t))(v55 + 32))(v57 + v56, v53, v54);
  sub_21FC5B184();
  sub_21FA94D54(0);
  v96 = v59;
  sub_21FA97980(0, &qword_25406B958, (uint64_t (*)(uint64_t))sub_21FA94D54, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v48);
  v94 = v60;
  sub_21FA2A08C(&qword_25406C998, (uint64_t (*)(uint64_t))sub_21FA95064, MEMORY[0x24BDB98F0]);
  v110 = (char *)sub_21FA97B70((unint64_t *)&qword_25406B950, &qword_25406B958, (uint64_t (*)(uint64_t))sub_21FA94D54);
  v61 = v89;
  v62 = v109;
  sub_21FC5B34C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v90 + 8))(v62, v61);
  v63 = v80;
  v64 = v112;
  sub_21FA2D120(v80, v112, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
  v65 = swift_allocObject();
  sub_21FA2D23C(v64, v65 + v58, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
  v66 = swift_allocObject();
  *(_QWORD *)(v66 + 16) = sub_21FA958B4;
  *(_QWORD *)(v66 + 24) = v65;
  sub_21FC5B184();
  sub_21FA95368(0);
  sub_21FA97980(0, &qword_25406CA40, (uint64_t (*)(uint64_t))sub_21FA95368, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA2A08C(&qword_25406C9B8, (uint64_t (*)(uint64_t))sub_21FA951B0, MEMORY[0x24BDB98F0]);
  sub_21FA97B70(&qword_25406CA38, &qword_25406CA40, (uint64_t (*)(uint64_t))sub_21FA95368);
  v67 = v95;
  v68 = v97;
  v69 = v111;
  sub_21FC5B34C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v99 + 8))(v69, v68);
  sub_21FA2D120(v63, v64, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
  v70 = swift_allocObject();
  sub_21FA2D23C(v64, v70 + v114, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
  sub_21FC5B184();
  v71 = MEMORY[0x24BDB98F0];
  sub_21FA2A08C(&qword_25406C988, (uint64_t (*)(uint64_t))sub_21FA9528C, MEMORY[0x24BDB98F0]);
  v72 = v98;
  v73 = v101;
  sub_21FC5B34C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v102 + 8))(v67, v73);
  sub_21FA7BA1C(0, (unint64_t *)&qword_25406CB30, &qword_25406CB60);
  sub_21FA2A08C(&qword_25406C9A8, (uint64_t (*)(uint64_t))sub_21FA953E8, v71);
  v74 = v100;
  v75 = v103;
  sub_21FC5B31C();
  (*(void (**)(char *, uint64_t))(v105 + 8))(v72, v75);
  sub_21FA2A08C(&qword_25406C888, (uint64_t (*)(uint64_t))sub_21FA954C4, MEMORY[0x24BDB98C8]);
  v76 = v104;
  v77 = sub_21FC5B280();
  result = (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v74, v76);
  *v107 = v77;
  return result;
}

uint64_t sub_21FA90184(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __objc2_ivar_list **p_ivars;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  _BOOL4 v39;
  uint64_t i;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;

  sub_21FA9594C();
  v3 = v2;
  v134 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v133 = (char *)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA973D4(0, (unint64_t *)&qword_25406B8B0, (uint64_t (*)(uint64_t))sub_21FA94D54, sub_21FA959C8, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BDB9960]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v135 = (char *)&v105 - v8;
  sub_21FA2D1A0(0, &qword_25406CAA8, (uint64_t (*)(uint64_t))sub_21FA94D54, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDB9DE0]);
  v116 = v9;
  v114 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v112 = (char *)&v105 - v10;
  v11 = MEMORY[0x24BDBA1B0];
  sub_21FA97980(0, &qword_25406CBB8, (uint64_t (*)(uint64_t))sub_21FA94D54, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
  v132 = v12;
  v115 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v113 = (char *)&v105 - v13;
  sub_21FA97980(0, &qword_25406CBA8, (uint64_t (*)(uint64_t))sub_21FA96230, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v11);
  v120 = v14;
  v119 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v118 = (char *)&v105 - v15;
  sub_21FA9624C();
  v123 = v16;
  v122 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v121 = (char *)&v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA9637C();
  v127 = v18;
  v125 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v140 = (char *)&v105 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA963F4();
  v128 = v20;
  v126 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v124 = (char *)&v105 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA964D0(0, &qword_25406C7A0, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BDB9520]);
  v130 = *(_QWORD *)(v22 - 8);
  v131 = v22;
  MEMORY[0x24BDAC7A8](v22);
  v129 = (char *)&v105 - v23;
  v139 = (int *)type metadata accessor for ClinicalSharingSyncTask();
  v110 = *((_QWORD *)v139 - 1);
  v24 = MEMORY[0x24BDAC7A8](v139);
  v26 = (char *)&v105 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v24);
  v117 = (uint64_t)&v105 - v28;
  v111 = v29;
  MEMORY[0x24BDAC7A8](v27);
  v30 = MEMORY[0x24BEE4AF8];
  v143 = MEMORY[0x24BEE4AF8];
  v109 = (char *)&v105 - v31;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v32 = sub_21FC5BC7C();
  }
  else
  {
    v32 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v137 = v7;
  v138 = v6;
  v136 = v3;
  if (v32)
  {
    if (v32 < 1)
    {
      __break(1u);
LABEL_73:
      swift_once();
LABEL_53:
      v45 = sub_21FC5AFD4();
      __swift_project_value_buffer(v45, (uint64_t)qword_25406D830);
      sub_21FA2D120(v141, v6, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
      swift_retain_n();
      swift_retain_n();
      v46 = sub_21FC5AFC8();
      v47 = sub_21FC5B994();
      v48 = os_log_type_enabled(v46, v47);
      v108 = v30;
      if (v48)
      {
        v49 = swift_slowAlloc();
        v106 = swift_slowAlloc();
        v143 = v106;
        *(_DWORD *)v49 = 136315650;
        v50 = (uint64_t *)(v6 + v139[9]);
        v52 = *v50;
        v51 = v50[1];
        swift_bridgeObjectRetain();
        v142 = sub_21FABDCF8(v52, v51, &v143);
        sub_21FC5BAC0();
        swift_bridgeObjectRelease();
        sub_21FA326EC(v6, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
        *(_WORD *)(v49 + 12) = 2048;
        if ((_DWORD)v107)
        {
          swift_bridgeObjectRetain();
          v53 = sub_21FC5BC7C();
          swift_release();
        }
        else
        {
          v53 = *(_QWORD *)(v3 + 16);
        }
        swift_release();
        v142 = v53;
        sub_21FC5BAC0();
        swift_release();
        *(_WORD *)(v49 + 22) = 2048;
        if (v30 < 0 || (v30 & 0x4000000000000000) != 0)
        {
          swift_bridgeObjectRetain();
          v54 = sub_21FC5BC7C();
          swift_release();
        }
        else
        {
          v54 = *(_QWORD *)(v30 + 16);
        }
        swift_release();
        v142 = v54;
        sub_21FC5BAC0();
        swift_release();
        _os_log_impl(&dword_21FA27000, v46, v47, "%s Starting data collection and node upload for %ld accounts. %ld accounts should not sync.", (uint8_t *)v49, 0x20u);
        v55 = v106;
        swift_arrayDestroy();
        MEMORY[0x2207D105C](v55, -1, -1);
        MEMORY[0x2207D105C](v49, -1, -1);

      }
      else
      {
        swift_release();
        swift_release();
        sub_21FA326EC(v6, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);

        swift_release();
        swift_release();
      }
      v143 = v3;
      sub_21FA94D54(0);
      v109 = v56;
      v57 = v112;
      sub_21FC5B22C();
      v107 = sub_21FA50724(0, (unint64_t *)&qword_25406BB50);
      v58 = v113;
      v59 = v116;
      sub_21FC5B208();
      (*(void (**)(char *, uint64_t))(v114 + 8))(v57, v59);
      sub_21FA96230(0);
      v60 = v118;
      v61 = v132;
      sub_21FC5BEBC();
      (*(void (**)(char *, uint64_t))(v115 + 8))(v58, v61);
      v62 = v117;
      sub_21FA2D120(v141, v117, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
      v63 = *(unsigned __int8 *)(v110 + 80);
      v115 = ((v63 + 16) & ~v63) + v111;
      v64 = (v63 + 16) & ~v63;
      v116 = v64;
      v132 = v63 | 7;
      v65 = swift_allocObject();
      sub_21FA2D23C(v62, v65 + v64, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
      sub_21FC5B184();
      sub_21FA96040(0, (unint64_t *)&qword_25406B938);
      sub_21FA95CF0(&qword_25406CBA0, &qword_25406CBA8, (uint64_t (*)(uint64_t))sub_21FA96230);
      sub_21FA9633C(&qword_25406B930, (unint64_t *)&qword_25406B938);
      v66 = v121;
      v67 = v120;
      sub_21FC5B34C();
      swift_release();
      (*(void (**)(char *, uint64_t))(v119 + 8))(v60, v67);
      v68 = v141;
      sub_21FA2D120(v141, v62, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
      v69 = swift_allocObject();
      v70 = v116;
      sub_21FA2D23C(v62, v69 + v116, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
      sub_21FA2A08C(&qword_25406C978, (uint64_t (*)(uint64_t))sub_21FA9624C, MEMORY[0x24BDB98F0]);
      v71 = v123;
      sub_21FC5B298();
      swift_release();
      (*(void (**)(char *, uint64_t))(v122 + 8))(v66, v71);
      sub_21FA2D120(v68, v62, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
      v72 = swift_allocObject();
      sub_21FA2D23C(v62, v72 + v70, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
      sub_21FC5B184();
      type metadata accessor for ClinicalSharingQueryOutput(0);
      sub_21FA97980(0, (unint64_t *)&qword_25406CA10, type metadata accessor for ClinicalSharingQueryOutput, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
      sub_21FA2A08C(&qword_25406C7C8, (uint64_t (*)(uint64_t))sub_21FA9637C, MEMORY[0x24BDB9568]);
      sub_21FA97B70(&qword_25406CA08, (unint64_t *)&qword_25406CA10, type metadata accessor for ClinicalSharingQueryOutput);
      v73 = (uint64_t)v124;
      v74 = v127;
      v75 = v140;
      sub_21FC5B34C();
      swift_release();
      (*(void (**)(char *, uint64_t))(v125 + 8))(v75, v74);
      v76 = v68 + v139[12];
      v77 = v68 + v139[11];
      v78 = sub_21FA93CF0(v76, v77, v73);
      (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v73, v128);
      v79 = sub_21FA942B8(v76, v77, v78);
      swift_release();
      v80 = sub_21FA94818(v76, v77, a1, v79);
      swift_release();
      v143 = v80;
      v142 = v108;
      sub_21FA959C8();
      v81 = v133;
      sub_21FC5B748();
      swift_release();
      v83 = v135;
      v82 = v136;
      sub_21FC5B118();
      (*(void (**)(char *, uint64_t))(v134 + 8))(v81, v82);
      sub_21FA95AC4();
      v84 = v138;
      v85 = sub_21FC5B280();
      (*(void (**)(char *, uint64_t))(v137 + 8))(v83, v84);
      v142 = v85;
      sub_21FA97980(0, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
      sub_21FA97B70((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
      v86 = v129;
      sub_21FC5B310();
      swift_release();
      swift_release();
      sub_21FA95024(&qword_2555402D8, &qword_25406C7A0, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BDB9520], MEMORY[0x24BDB9530]);
      v87 = v131;
      v88 = sub_21FC5B280();
      (*(void (**)(char *, uint64_t))(v130 + 8))(v86, v87);
      return v88;
    }
    v33 = 0;
    p_ivars = &PBUpdateStateRequest._StorageClass.ivars;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v35 = MEMORY[0x2207D057C](v33, a1);
      }
      else
      {
        v35 = *(_QWORD *)(a1 + 8 * v33 + 32);
        swift_retain();
      }
      v36 = OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_clinicalSharingStatus;
      if (objc_msgSend(*(id *)(v35 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_clinicalSharingStatus), sel_featureStatus) == (id)1&& objc_msgSend(*(id *)(v35 + v36), sel_userStatus) == (id)2&& (objc_msgSend(*(id *)(v35 + v36), (SEL)p_ivars[460]) != (id)2&& objc_msgSend(*(id *)(v35 + v36), (SEL)p_ivars[460]) != (id)4&& ((v37 = *(_QWORD *)(v35+ OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_existingMultiDeviceInfo+ 8)) == 0|| (*(_QWORD *)(v35 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_existingMultiDeviceInfo) == *(_QWORD *)(v35 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_deviceID)? (v38 = v37 == *(_QWORD *)(v35+ OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_deviceID+ 8)): (v38 = 0), v38 || (sub_21FC5BDF0() & 1) != 0))|| objc_msgSend(*(id *)(v35 + v36), (SEL)p_ivars[460]) == (id)3))
      {
        sub_21FC5BBE0();
        sub_21FC5BC10();
        p_ivars = (__objc2_ivar_list **)(&PBUpdateStateRequest._StorageClass + 48);
        sub_21FC5BC1C();
        sub_21FC5BBEC();
      }
      else
      {
        swift_release();
      }
      ++v33;
    }
    while (v32 != v33);
    swift_bridgeObjectRelease();
    v3 = v143;
    v30 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = MEMORY[0x24BEE4AF8];
  }
  v39 = v3 < 0 || (v3 & 0x4000000000000000) != 0;
  if (v39)
  {
    swift_retain();
    v89 = sub_21FC5BC7C();
    swift_release();
    v39 = 1;
    if (v89)
    {
LABEL_31:
      v143 = v30;
      LODWORD(v107) = v39;
      if (v32)
      {
        swift_bridgeObjectRetain();
        for (i = 0; i != v32; ++i)
        {
          if ((a1 & 0xC000000000000001) != 0)
          {
            v41 = MEMORY[0x2207D057C](i, a1);
          }
          else
          {
            v41 = *(_QWORD *)(a1 + 8 * i + 32);
            swift_retain();
          }
          v42 = OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_clinicalSharingStatus;
          if (objc_msgSend(*(id *)(v41 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_clinicalSharingStatus), sel_featureStatus) == (id)1&& objc_msgSend(*(id *)(v41 + v42), sel_userStatus) == (id)2&& (objc_msgSend(*(id *)(v41 + v42), sel_multiDeviceStatus) != (id)2&& objc_msgSend(*(id *)(v41 + v42), sel_multiDeviceStatus) != (id)4&& ((v43 = *(_QWORD *)(v41+ OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_existingMultiDeviceInfo+ 8)) == 0|| (*(_QWORD *)(v41+ OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_existingMultiDeviceInfo) == *(_QWORD *)(v41 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_deviceID)? (v44 = v43 == *(_QWORD *)(v41+ OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_deviceID+ 8)): (v44 = 0), v44 || (sub_21FC5BDF0() & 1) != 0))|| objc_msgSend(*(id *)(v41 + v42), sel_multiDeviceStatus) == (id)3))
          {
            swift_release();
          }
          else
          {
            sub_21FC5BBE0();
            sub_21FC5BC10();
            sub_21FC5BC1C();
            sub_21FC5BBEC();
          }
        }
        swift_bridgeObjectRelease();
        v30 = v143;
      }
      v6 = (uint64_t)v109;
      if (qword_25406B7F8 == -1)
        goto LABEL_53;
      goto LABEL_73;
    }
  }
  else if (*(_QWORD *)(v3 + 16))
  {
    goto LABEL_31;
  }
  swift_release();
  if (qword_25406B7F8 != -1)
    swift_once();
  v90 = sub_21FC5AFD4();
  __swift_project_value_buffer(v90, (uint64_t)qword_25406D830);
  sub_21FA2D120(v141, (uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
  v91 = sub_21FC5AFC8();
  v92 = sub_21FC5B994();
  if (os_log_type_enabled(v91, v92))
  {
    v93 = (uint8_t *)swift_slowAlloc();
    v94 = swift_slowAlloc();
    *(_DWORD *)v93 = 136315138;
    v143 = v94;
    v95 = (uint64_t *)&v26[v139[9]];
    v96 = *v95;
    v97 = v95[1];
    swift_bridgeObjectRetain();
    v142 = sub_21FABDCF8(v96, v97, &v143);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    sub_21FA326EC((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
    _os_log_impl(&dword_21FA27000, v91, v92, "%s No accounts available to sync for", v93, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v94, -1, -1);
    MEMORY[0x2207D105C](v93, -1, -1);
  }
  else
  {
    sub_21FA326EC((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
  }

  v99 = v137;
  v98 = v138;
  v101 = v135;
  v100 = v136;
  v103 = v133;
  v102 = v134;
  v143 = a1;
  sub_21FA94D54(0);
  sub_21FA959C8();
  sub_21FC5B748();
  sub_21FA50724(0, (unint64_t *)&qword_25406BB50);
  sub_21FC5B118();
  (*(void (**)(char *, uint64_t))(v102 + 8))(v103, v100);
  sub_21FA95AC4();
  v88 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v99 + 8))(v101, v98);
  return v88;
}

void sub_21FA91308(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = type metadata accessor for ClinicalSharingSyncTask();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_25406B7F8 != -1)
    swift_once();
  v6 = sub_21FC5AFD4();
  __swift_project_value_buffer(v6, (uint64_t)qword_25406D830);
  sub_21FA2D120(a2, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
  swift_retain_n();
  v7 = sub_21FC5AFC8();
  v8 = sub_21FC5B994();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v17 = v10;
    *(_DWORD *)v9 = 136315394;
    v11 = (uint64_t *)&v5[*(int *)(v3 + 36)];
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    v16 = sub_21FABDCF8(v12, v13, &v17);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    sub_21FA326EC((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
    *(_WORD *)(v9 + 12) = 2080;
    sub_21FC5AAF4();
    sub_21FA2A08C((unint64_t *)&qword_25553F0F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v14 = sub_21FC5BDCC();
    v16 = sub_21FABDCF8(v14, v15, &v17);
    sub_21FC5BAC0();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v7, v8, "%s will now attempt to update DocumentReference for account %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v10, -1, -1);
    MEMORY[0x2207D105C](v9, -1, -1);

  }
  else
  {
    sub_21FA326EC((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);

    swift_release_n();
  }
}

uint64_t sub_21FA915AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v2 = sub_21FC5AAAC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA96154();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClinicalSharingSyncTask();
  sub_21FC5AAA0();
  v11 = sub_21FC30A38((uint64_t)v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v14[1] = v11;
  *(_QWORD *)(swift_allocObject() + 16) = a1;
  sub_21FA97980(0, &qword_25406CA20, (uint64_t (*)(uint64_t))sub_21FA9515C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA95140(0);
  sub_21FA97B70((unint64_t *)&qword_25406CA18, &qword_25406CA20, (uint64_t (*)(uint64_t))sub_21FA9515C);
  swift_bridgeObjectRetain();
  sub_21FC5B2C8();
  swift_release();
  swift_release();
  sub_21FA2A08C(&qword_25406C7E8, (uint64_t (*)(uint64_t))sub_21FA96154, MEMORY[0x24BDB96C0]);
  v12 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v12;
}

uint64_t sub_21FA9178C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;

  v4 = v3;
  v52 = a3;
  sub_21FA95EA4();
  v57 = v7;
  v55 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v53 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA8D544();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_21FC5AAAC();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v49 - v17;
  v19 = (int *)type metadata accessor for ClinicalSharingOperationalAnalyticsSubmissionTask();
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA95FB0();
  v60 = v22;
  v58 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v54 = (char *)&v49 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA960B4();
  v61 = v24;
  v59 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v56 = (char *)&v49 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for ClinicalSharingSyncTask();
  sub_21FA2CEA0(v4 + *(int *)(v26 + 28), (uint64_t)&v62);
  v50 = *(_QWORD *)(v4 + 8);
  v51 = v18;
  sub_21FC5AAA0();
  if (a2 && (v27 = *(_QWORD *)(a2 + 16), v28 = v27 >= 2, v29 = v27 - 2, v28))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v11, a2+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v29, v12);
    v30 = 0;
  }
  else
  {
    v30 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v30, 1, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v52, v12);
  v31 = (void *)*__swift_project_boxed_opaque_existential_1(&v62, v63);
  v32 = objc_allocWithZone(MEMORY[0x24BDD3C98]);
  swift_bridgeObjectRetain();
  v33 = v31;
  v34 = (uint64_t)v11;
  v35 = a1;
  v36 = (void *)sub_21FC5B5E0();
  v37 = objc_msgSend(v32, sel_initWithCategory_domainName_healthStore_, 3, v36, v33);

  *(_QWORD *)&v21[v19[6]] = v37;
  v38 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v38(&v21[v19[5]], v51, v12);
  *(_QWORD *)&v21[v19[7]] = v35;
  sub_21FA2D23C(v34, (uint64_t)&v21[v19[9]], (uint64_t (*)(_QWORD))sub_21FA8D544);
  v38(&v21[v19[10]], v16, v12);
  *(_QWORD *)&v21[v19[8]] = v50;
  sub_21FA3175C(&v62, (uint64_t)v21);
  *(_QWORD *)&v62 = sub_21FAC44D0();
  sub_21FA95F24();
  sub_21FA2A08C(&qword_25406B8F0, (uint64_t (*)(uint64_t))sub_21FA95F24, MEMORY[0x24BDB9AF8]);
  v39 = v53;
  sub_21FC5B2C8();
  swift_release();
  v40 = MEMORY[0x24BDB96C0];
  sub_21FA2A08C((unint64_t *)&unk_25406B830, (uint64_t (*)(uint64_t))sub_21FA95EA4, MEMORY[0x24BDB96C0]);
  v41 = v57;
  v42 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v39, v41);
  sub_21FA326EC((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingOperationalAnalyticsSubmissionTask);
  *(_QWORD *)&v62 = v42;
  sub_21FA96040(0, (unint64_t *)&qword_25406B980);
  sub_21FA9633C((unint64_t *)&qword_25406B970, (unint64_t *)&qword_25406B980);
  v43 = v54;
  sub_21FC5B328();
  swift_release();
  *(_QWORD *)(swift_allocObject() + 16) = v35;
  sub_21FA94D54(0);
  sub_21FA2A08C(&qword_25406C8A8, (uint64_t (*)(uint64_t))sub_21FA95FB0, MEMORY[0x24BDB98D8]);
  swift_bridgeObjectRetain();
  v44 = v56;
  v45 = v60;
  sub_21FC5B2C8();
  swift_release();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v43, v45);
  sub_21FA2A08C(&qword_25406C858, (uint64_t (*)(uint64_t))sub_21FA960B4, v40);
  v46 = v61;
  v47 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v44, v46);
  return v47;
}

uint64_t sub_21FA91CDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  void *v20;
  uint64_t v21;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[5];
  uint64_t v40;
  __int128 v41[2];
  uint64_t v42[6];

  v2 = v1;
  sub_21FA95C00();
  v35 = v4;
  v36 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D1A0(0, &qword_25406CAA8, (uint64_t (*)(uint64_t))sub_21FA94D54, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDB9DE0]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v33 - v10;
  sub_21FA97980(0, &qword_25406CBB8, (uint64_t (*)(uint64_t))sub_21FA94D54, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
  v13 = v12;
  v34 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v33 - v14;
  sub_21FA95D38();
  v37 = v16;
  v38 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = a1;
  *(_QWORD *)&v39[0] = a1;
  sub_21FA94D54(0);
  swift_bridgeObjectRetain();
  sub_21FC5B22C();
  sub_21FA50724(0, (unint64_t *)&qword_25406BB50);
  sub_21FC5B208();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v19 = (int *)type metadata accessor for ClinicalSharingSyncTask();
  v20 = *(void **)(v2 + v19[10]);
  v21 = v2 + v19[12];
  v42[3] = type metadata accessor for ClinicalSharingCloudStandardAPI();
  v42[4] = (uint64_t)&off_24E486A00;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v42);
  sub_21FA2D120(v21, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCloudStandardAPI);
  v23 = v2 + v19[11];
  sub_21FA2CEA0((uint64_t)v42, (uint64_t)v41);
  sub_21FA95DE0(v23, (uint64_t)v39);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = v20;
  sub_21FA3175C(v41, v24 + 24);
  v25 = v39[3];
  *(_OWORD *)(v24 + 96) = v39[2];
  *(_OWORD *)(v24 + 112) = v25;
  *(_OWORD *)(v24 + 128) = v39[4];
  *(_QWORD *)(v24 + 144) = v40;
  v26 = v39[1];
  *(_OWORD *)(v24 + 64) = v39[0];
  *(_OWORD *)(v24 + 80) = v26;
  v27 = v20;
  sub_21FC5B184();
  sub_21FA96040(0, &qword_25406CA30);
  sub_21FA95CF0((unint64_t *)&qword_25406CBB0, &qword_25406CBB8, (uint64_t (*)(uint64_t))sub_21FA94D54);
  sub_21FA9633C((unint64_t *)&qword_25406CA28, &qword_25406CA30);
  sub_21FC5B34C();
  swift_release();
  sub_21FA2A08C(&qword_25406C968, (uint64_t (*)(uint64_t))sub_21FA95C00, MEMORY[0x24BDB98F0]);
  v28 = v35;
  v29 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v6, v28);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v13);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
  *(_QWORD *)&v39[0] = v29;
  *(_QWORD *)(swift_allocObject() + 16) = v33;
  sub_21FA95368(0);
  swift_bridgeObjectRetain();
  sub_21FC5B2C8();
  swift_release();
  swift_release();
  sub_21FA2A08C(&qword_25406C808, (uint64_t (*)(uint64_t))sub_21FA95D38, MEMORY[0x24BDB96C0]);
  v30 = v37;
  v31 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v18, v30);
  return v31;
}

uint64_t sub_21FA92148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_21FA9594C();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA973D4(0, (unint64_t *)&qword_25406B8B0, (uint64_t (*)(uint64_t))sub_21FA94D54, sub_21FA959C8, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BDB9960]);
  v12 = *(_QWORD *)(v11 - 8);
  v28 = v11;
  v29 = v12;
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v27 - v13;
  sub_21FA959E4();
  v30 = v15;
  v32 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA95B2C();
  v31 = v18;
  v33 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = a1;
  sub_21FA94D54(0);
  sub_21FA959C8();
  sub_21FC5B748();
  sub_21FA50724(0, (unint64_t *)&qword_25406BB50);
  sub_21FC5B118();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = a2;
  *(_QWORD *)(v21 + 24) = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_21FC5B184();
  type metadata accessor for ClinicalSharingSyncContext();
  sub_21FA97980(0, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA95AC4();
  sub_21FA97B70((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
  v22 = v28;
  sub_21FC5B34C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v22);
  sub_21FA2A08C(&qword_25406C928, (uint64_t (*)(uint64_t))sub_21FA959E4, MEMORY[0x24BDB98F0]);
  v23 = v30;
  sub_21FC5B328();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v17, v23);
  sub_21FA2A08C(&qword_25406C8B8, (uint64_t (*)(uint64_t))sub_21FA95B2C, MEMORY[0x24BDB98D8]);
  v24 = v31;
  v25 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v20, v24);
  return v25;
}

uint64_t sub_21FA92470@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v5 = sub_21FC5AAF4();
  v38 = *(_QWORD *)(v5 - 8);
  result = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v10 = sub_21FC5BC7C();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v11 = MEMORY[0x24BEE4AF8];
  if (!v10)
  {
LABEL_20:
    *a2 = v11;
    return result;
  }
  v44 = MEMORY[0x24BEE4AF8];
  result = sub_21FC5BC04();
  if ((v10 & 0x8000000000000000) == 0)
  {
    v32[0] = a2;
    v32[1] = v2;
    v12 = 0;
    v40 = v8;
    v41 = v9 & 0xC000000000000001;
    v39 = v9;
    v42 = v10;
    v33 = v5;
    do
    {
      if (v41)
      {
        v20 = MEMORY[0x2207D057C](v12, v9);
      }
      else
      {
        v20 = *(_QWORD *)(v9 + 8 * v12 + 32);
        swift_retain();
      }
      v21 = *(void **)(v20 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_error);
      if (v21)
      {
        swift_getErrorValue();
        v13 = v43;
        v14 = v21;
        v15 = sub_21FBADCD8(v13);
        v16 = objc_allocWithZone(MEMORY[0x24BE48A30]);
        v17 = (void *)sub_21FC5AAC4();
        v18 = (void *)sub_21FC5A8D8();
        v19 = v16;
        v9 = v39;
        objc_msgSend(v19, sel_initWithAccountID_error_, v17, v18);

        v8 = v40;
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v8, v20 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_accountID, v5);
        v22 = (_QWORD *)(v20 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_rootNode);
        v23 = *(_QWORD *)(v20 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_rootNode);
        if (v23)
        {
          v24 = v22[10];
          v25 = v22[7];
          v34 = v22[8];
          v35 = v24;
          v26 = v22[5];
          v27 = v22[3];
          v36 = v22[4];
          v37 = v26;
          v28 = v22[1];
          v29 = v22[2];
          sub_21FA81324(v23, v28, v29, v27, v36, v26);
          swift_bridgeObjectRetain();
          v8 = v40;
          sub_21FA813A8(v23, v28, v29, v27, v36, v37);
          v30 = (void *)sub_21FC5AAC4();
          if (v25)
          {
            v31 = (void *)sub_21FC5B5E0();
            swift_bridgeObjectRelease();
          }
          else
          {
            v31 = 0;
          }
          v5 = v33;
          v9 = v39;
        }
        else
        {
          v30 = (void *)sub_21FC5AAC4();
          v31 = 0;
        }
        objc_msgSend(objc_allocWithZone(MEMORY[0x24BE48A30]), sel_initWithAccountID_lookupInfo_, v30, v31);

        (*(void (**)(char *, uint64_t))(v38 + 8))(v8, v5);
      }
      swift_release();
      ++v12;
      sub_21FC5BBE0();
      sub_21FC5BC10();
      sub_21FC5BC1C();
      result = sub_21FC5BBEC();
    }
    while (v42 != v12);
    v11 = v44;
    a2 = (_QWORD *)v32[0];
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_21FA92804@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *a3 = a2;
  a3[1] = v3;
  a3[2] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_21FA9283C@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_21FA8EAA4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_21FA9287C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t result;

  v5 = *a1;
  v6 = type metadata accessor for ClinicalSharingSyncTask();
  v7 = (id)*__swift_project_boxed_opaque_existential_1((_QWORD *)(a2 + *(int *)(v6 + 28)), *(_QWORD *)(a2 + *(int *)(v6 + 28) + 24));
  sub_21FC4BAC4(v5);

  sub_21FA96040(0, (unint64_t *)&qword_25406B938);
  sub_21FA9633C(&qword_25406B930, (unint64_t *)&qword_25406B938);
  v8 = sub_21FC5B280();
  result = swift_release();
  *a3 = v8;
  return result;
}

void sub_21FA92948(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = type metadata accessor for ClinicalSharingSyncTask();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  if (qword_25406B7F8 != -1)
    swift_once();
  v8 = sub_21FC5AFD4();
  __swift_project_value_buffer(v8, (uint64_t)qword_25406D830);
  sub_21FA2D120(a2, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
  swift_bridgeObjectRetain_n();
  v9 = sub_21FC5AFC8();
  v10 = sub_21FC5B994();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc();
    v12 = swift_slowAlloc();
    v18 = v12;
    *(_DWORD *)v11 = 136315394;
    v13 = (uint64_t *)&v6[*(int *)(v4 + 36)];
    v14 = *v13;
    v15 = v13[1];
    swift_bridgeObjectRetain();
    v17 = sub_21FABDCF8(v14, v15, &v18);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    sub_21FA326EC((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
    *(_WORD *)(v11 + 12) = 2048;
    v16 = *(_QWORD *)(sub_21FC4BF3C(v7) + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = v16;
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v9, v10, "%s %ld authorized sharing identifiers", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v12, -1, -1);
    MEMORY[0x2207D105C](v11, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease();
    sub_21FA326EC((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);

    swift_bridgeObjectRelease();
  }
}

uint64_t sub_21FA92BB4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD v32[3];
  ValueMetadata *v33;
  _UNKNOWN **v34;

  v31 = a3;
  sub_21FA972F4();
  v6 = v5;
  v30 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_21FC5AC08();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_21FC5AAAC();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  v17 = type metadata accessor for ClinicalSharingSyncTask();
  v18 = __swift_project_boxed_opaque_existential_1((_QWORD *)(a2 + *(int *)(v17 + 28)), *(_QWORD *)(a2 + *(int *)(v17 + 28) + 24))+ 3;
  v33 = &type metadata for ClinicalSharingQueryDefaultDataProvider;
  v34 = &off_24E48F518;
  v32[0] = swift_allocObject();
  sub_21FA4A2CC((uint64_t)v18, v32[0] + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2 + *(int *)(v17 + 24), v12);
  swift_bridgeObjectRetain();
  sub_21FC5ABC0();
  v19 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v32, (uint64_t)v33);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (_OWORD *)((char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_OWORD *))(v22 + 16))(v21);
  v23 = sub_21FA4F5F8(v16, v21, (uint64_t)v11, (uint64_t)v15);
  v25 = v24;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  result = sub_21FBF622C(v23, v25);
  v32[0] = result;
  if (v25 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_21FA506B0();
    sub_21FA97980(0, (unint64_t *)&qword_25406CA10, type metadata accessor for ClinicalSharingQueryOutput, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA97474();
    sub_21FA97B70(&qword_25406CA08, (unint64_t *)&qword_25406CA10, type metadata accessor for ClinicalSharingQueryOutput);
    sub_21FC5B388();
    swift_release();
    sub_21FA2A08C((unint64_t *)&qword_25553EC98, (uint64_t (*)(uint64_t))sub_21FA972F4, MEMORY[0x24BDB98F0]);
    v27 = sub_21FC5B280();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v6);
    v28 = sub_21FBF6918(v27, v23, v25);
    swift_release();
    result = swift_release();
    *v31 = v28;
  }
  return result;
}

uint64_t sub_21FA92EB4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_21FC5BB74();
  swift_bridgeObjectRelease();
  type metadata accessor for ClinicalSharingSyncTask();
  sub_21FA93184();
  sub_21FC5B64C();
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  sub_21FC5AAB8();
  v1 = sub_21FA94BEC(8);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  swift_bridgeObjectRelease();
  MEMORY[0x2207D0054](v1, v3, v5, v7);
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  sub_21FACFFF4(&unk_24E480410, *v0);
  sub_21FA95384(0, &qword_25406BAC0, type metadata accessor for HKClinicalSharingOptions);
  swift_arrayDestroy();
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  return 60;
}

unint64_t sub_21FA93184()
{
  unint64_t result;

  result = qword_25406AF60;
  if (!qword_25406AF60)
  {
    type metadata accessor for ClinicalSharingSyncTask();
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_25406AF60);
  }
  return result;
}

uint64_t sub_21FA931BC(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void *v64;
  id v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  _QWORD v106[5];

  v78 = a5;
  v77 = a4;
  v86 = a3;
  v100 = a2;
  sub_21FA974CC();
  v9 = *(_QWORD *)(v8 - 8);
  v102 = v8;
  v103 = v9;
  MEMORY[0x24BDAC7A8](v8);
  v101 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA50814();
  v12 = v11;
  v74 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA50928();
  v16 = v15;
  v75 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA97A00();
  v80 = v19;
  v81 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA978A4();
  v83 = v22;
  v84 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v79 = (char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA97790();
  v87 = v24;
  v88 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v82 = (char *)&v74 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA976FC();
  v91 = v26;
  v92 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v85 = (char *)&v74 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA97620();
  v93 = v28;
  v94 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v89 = (char *)&v74 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA975A8();
  v95 = v30;
  v97 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v90 = (char *)&v74 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA97C4C(0, &qword_25406B860, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB98D0]);
  v33 = *(_QWORD *)(v32 - 8);
  v98 = v32;
  v99 = v33;
  MEMORY[0x24BDAC7A8](v32);
  v96 = (char *)&v74 - v34;
  v106[3] = &type metadata for ClinicalSharingAccountStore;
  v106[4] = &off_24E484B78;
  v106[0] = a1;
  *(_QWORD *)&v105 = a6;
  swift_getMetatypeMetadata();
  v35 = a1;
  v36 = sub_21FC5B64C();
  v76 = v36;
  v104 = v37;
  v38 = (void *)*__swift_project_boxed_opaque_existential_1(v106, (uint64_t)&type metadata for ClinicalSharingAccountStore);
  *(_QWORD *)(swift_allocObject() + 16) = v38;
  sub_21FA97BB8();
  sub_21FA2A08C((unint64_t *)&qword_25406B9B0, (uint64_t (*)(uint64_t))sub_21FA97BB8, MEMORY[0x24BDB9E58]);
  v39 = v38;
  sub_21FC5B268();
  sub_21FA2A08C(&qword_25406B9D0, (uint64_t (*)(uint64_t))sub_21FA50814, MEMORY[0x24BDB9E90]);
  v40 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v74 + 8))(v14, v12);
  *(_QWORD *)&v105 = v40;
  sub_21FA97A80(0, &qword_25406B968, (unint64_t *)&qword_25406BA70, (unint64_t *)&qword_25406BA88);
  sub_21FA7BA1C(0, (unint64_t *)&qword_25406BA70, (unint64_t *)&qword_25406BA88);
  sub_21FA97B08();
  sub_21FC5B2C8();
  swift_release();
  sub_21FA2A08C(&qword_25406B848, (uint64_t (*)(uint64_t))sub_21FA50928, MEMORY[0x24BDB96C0]);
  v41 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v18, v16);
  *(_QWORD *)&v105 = v41;
  v42 = (_QWORD *)swift_allocObject();
  v42[2] = v36;
  v43 = v77;
  v42[3] = v104;
  v42[4] = v43;
  v42[5] = v78;
  swift_bridgeObjectRetain();
  sub_21FA97D28(v43);
  sub_21FC5B298();
  swift_release();
  swift_release();
  sub_21FA2CEA0((uint64_t)v106, (uint64_t)&v105);
  v44 = swift_allocObject();
  sub_21FA3175C(&v105, v44 + 16);
  sub_21FC5B184();
  sub_21FA97888(0);
  sub_21FA97980(0, &qword_25406CA80, (uint64_t (*)(uint64_t))sub_21FA97888, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA2A08C(&qword_25406B808, (uint64_t (*)(uint64_t))sub_21FA97A00, MEMORY[0x24BDB9568]);
  sub_21FA97B70(&qword_25406CA78, &qword_25406CA80, (uint64_t (*)(uint64_t))sub_21FA97888);
  v45 = v79;
  v46 = v80;
  sub_21FC5B34C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v21, v46);
  v47 = swift_allocObject();
  v48 = v86;
  *(_QWORD *)(v47 + 16) = v86;
  v49 = v48;
  sub_21FC5B184();
  sub_21FA9786C(0);
  sub_21FA97980(0, &qword_25406CA70, (uint64_t (*)(uint64_t))sub_21FA9786C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  v50 = MEMORY[0x24BDB98F0];
  sub_21FA2A08C(&qword_25406C9D8, (uint64_t (*)(uint64_t))sub_21FA978A4, MEMORY[0x24BDB98F0]);
  sub_21FA97B70(&qword_25406CA68, &qword_25406CA70, (uint64_t (*)(uint64_t))sub_21FA9786C);
  v51 = v82;
  v52 = v83;
  sub_21FC5B34C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v84 + 8))(v45, v52);
  sub_21FA2CEA0((uint64_t)v106, (uint64_t)&v105);
  v53 = swift_allocObject();
  sub_21FA3175C(&v105, v53 + 16);
  v54 = swift_allocObject();
  *(_QWORD *)(v54 + 16) = sub_21FA97D6C;
  *(_QWORD *)(v54 + 24) = v53;
  sub_21FA94D54(0);
  sub_21FA2A08C(&qword_25406C9C8, (uint64_t (*)(uint64_t))sub_21FA97790, v50);
  v55 = v85;
  v56 = v87;
  sub_21FC5B31C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v88 + 8))(v51, v56);
  sub_21FC5B184();
  type metadata accessor for ClinicalSharingSyncContext();
  sub_21FA97980(0, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA2A08C(&qword_25406C898, (uint64_t (*)(uint64_t))sub_21FA976FC, MEMORY[0x24BDB98C8]);
  sub_21FA97B70((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
  v57 = v89;
  v58 = v91;
  sub_21FC5B34C();
  (*(void (**)(char *, uint64_t))(v92 + 8))(v55, v58);
  v59 = swift_allocObject();
  v60 = v104;
  *(_QWORD *)(v59 + 16) = v76;
  *(_QWORD *)(v59 + 24) = v60;
  sub_21FA2A08C(&qword_25406C8F8, (uint64_t (*)(uint64_t))sub_21FA97620, v50);
  v61 = v93;
  v62 = v90;
  sub_21FC5B298();
  swift_release();
  (*(void (**)(char *, uint64_t))(v94 + 8))(v57, v61);
  v63 = swift_allocObject();
  v64 = v100;
  *(_QWORD *)(v63 + 16) = v100;
  v65 = v64;
  sub_21FC5B184();
  sub_21FA2A08C(&qword_25406C7B8, (uint64_t (*)(uint64_t))sub_21FA975A8, MEMORY[0x24BDB9568]);
  v66 = v101;
  v67 = v95;
  sub_21FC5B34C();
  swift_release();
  sub_21FA2A08C(&qword_25406C908, (uint64_t (*)(uint64_t))sub_21FA974CC, v50);
  v68 = v102;
  v69 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v103 + 8))(v66, v68);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v62, v67);
  *(_QWORD *)&v105 = v69;
  v70 = v96;
  sub_21FC5B328();
  swift_release();
  sub_21FA94F4C(&qword_25406B858, &qword_25406B860, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB98D0], MEMORY[0x24BDB98D8]);
  v71 = v98;
  v72 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v99 + 8))(v70, v71);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v106);
  return v72;
}

uint64_t sub_21FA93CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38[2];
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56[3];
  uint64_t v57;
  _UNKNOWN **v58;

  v38[1] = a3;
  v38[0] = a2;
  sub_21FA96E70();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA96F20(0, &qword_2555403D0, &qword_2555403D8, (uint64_t (*)(uint64_t))sub_21FA96F04, &qword_2555403E0);
  v41 = v10;
  v43 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v38 - v11;
  sub_21FA96FB0();
  v42 = v13;
  v44 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA970F8();
  v45 = v16;
  v47 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v39 = (char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA97170();
  v46 = v18;
  v48 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v40 = (char *)v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for ClinicalSharingCloudStandardAPI();
  v58 = &off_24E486A00;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v56);
  sub_21FA2D120(a1, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCloudStandardAPI);
  sub_21FA95DE0(a2, (uint64_t)&v50);
  v21 = swift_allocObject();
  v22 = v53;
  *(_OWORD *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 64) = v22;
  *(_OWORD *)(v21 + 80) = v54;
  *(_QWORD *)(v21 + 96) = v55;
  v23 = v51;
  *(_OWORD *)(v21 + 16) = v50;
  *(_OWORD *)(v21 + 32) = v23;
  sub_21FA963F4();
  sub_21FA96F04(0);
  sub_21FA2A08C(&qword_2555403C8, (uint64_t (*)(uint64_t))sub_21FA963F4, MEMORY[0x24BDB98F0]);
  sub_21FC5B31C();
  swift_release();
  sub_21FA2A08C(&qword_255540418, (uint64_t (*)(uint64_t))sub_21FA96E70, MEMORY[0x24BDB98C8]);
  v24 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *(_QWORD *)&v50 = v24;
  __swift_project_boxed_opaque_existential_1(v56, v57);
  v25 = MEMORY[0x24BDB9AE0];
  sub_21FA97980(0, &qword_2555403D8, (uint64_t (*)(uint64_t))sub_21FA96F04, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA97B70(&qword_2555403E0, &qword_2555403D8, (uint64_t (*)(uint64_t))sub_21FA96F04);
  sub_21FC5B334();
  swift_release();
  sub_21FA2CEA0((uint64_t)v56, (uint64_t)v49);
  sub_21FA95DE0(v38[0], (uint64_t)&v50);
  v26 = swift_allocObject();
  sub_21FA3175C(v49, v26 + 16);
  v27 = v53;
  *(_OWORD *)(v26 + 88) = v52;
  *(_OWORD *)(v26 + 104) = v27;
  *(_OWORD *)(v26 + 120) = v54;
  *(_QWORD *)(v26 + 136) = v55;
  v28 = v51;
  *(_OWORD *)(v26 + 56) = v50;
  *(_OWORD *)(v26 + 72) = v28;
  sub_21FC5B184();
  sub_21FA96B64(0);
  sub_21FA97980(0, &qword_255540348, (uint64_t (*)(uint64_t))sub_21FA96B64, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v25);
  sub_21FA97090();
  sub_21FA97B70(&qword_255540358, &qword_255540348, (uint64_t (*)(uint64_t))sub_21FA96B64);
  v29 = v41;
  sub_21FC5B34C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v29);
  v30 = MEMORY[0x24BDB98F0];
  sub_21FA2A08C(&qword_255540400, (uint64_t (*)(uint64_t))sub_21FA96FB0, MEMORY[0x24BDB98F0]);
  v31 = v39;
  v32 = v42;
  sub_21FC5B328();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v15, v32);
  sub_21FC5B184();
  sub_21FA2A08C(&qword_255540410, (uint64_t (*)(uint64_t))sub_21FA970F8, MEMORY[0x24BDB98D8]);
  v33 = v40;
  v34 = v45;
  sub_21FC5B34C();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v31, v34);
  sub_21FA2A08C(&qword_255540420, (uint64_t (*)(uint64_t))sub_21FA97170, v30);
  v35 = v46;
  v36 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v33, v35);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
  return v36;
}

uint64_t sub_21FA942B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[5];
  uint64_t v46;
  __int128 v47[2];
  uint64_t v48[3];
  uint64_t v49;
  _UNKNOWN **v50;

  v35 = a2;
  sub_21FA96AB4();
  v6 = v5;
  v34 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA96F20(0, &qword_255540360, &qword_255540368, (uint64_t (*)(uint64_t))sub_21FA96B80, &qword_255540370);
  v37 = v9;
  v38 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v33 - v10;
  sub_21FA96C0C();
  v39 = v12;
  v40 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA96D54();
  v41 = v15;
  v43 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA96DCC();
  v42 = v18;
  v44 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v36 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for ClinicalSharingCloudStandardAPI();
  v50 = &off_24E486A00;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v48);
  sub_21FA2D120(a1, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCloudStandardAPI);
  *(_QWORD *)&v45[0] = a3;
  sub_21FA97980(0, &qword_255540348, (uint64_t (*)(uint64_t))sub_21FA96B64, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA96B80(0);
  sub_21FA97B70(&qword_255540358, &qword_255540348, (uint64_t (*)(uint64_t))sub_21FA96B64);
  sub_21FC5B31C();
  sub_21FA2A08C(&qword_2555403A8, (uint64_t (*)(uint64_t))sub_21FA96AB4, MEMORY[0x24BDB98C8]);
  v21 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v6);
  *(_QWORD *)&v45[0] = v21;
  __swift_project_boxed_opaque_existential_1(v48, v49);
  v22 = MEMORY[0x24BDB9AE0];
  sub_21FA97980(0, &qword_255540368, (uint64_t (*)(uint64_t))sub_21FA96B80, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA97B70(&qword_255540370, &qword_255540368, (uint64_t (*)(uint64_t))sub_21FA96B80);
  sub_21FC5B334();
  swift_release();
  sub_21FA2CEA0((uint64_t)v48, (uint64_t)v47);
  sub_21FA95DE0(v35, (uint64_t)v45);
  v23 = swift_allocObject();
  sub_21FA3175C(v47, v23 + 16);
  v24 = v45[3];
  *(_OWORD *)(v23 + 88) = v45[2];
  *(_OWORD *)(v23 + 104) = v24;
  *(_OWORD *)(v23 + 120) = v45[4];
  *(_QWORD *)(v23 + 136) = v46;
  v25 = v45[1];
  *(_OWORD *)(v23 + 56) = v45[0];
  *(_OWORD *)(v23 + 72) = v25;
  sub_21FC5B184();
  sub_21FA968A0(0);
  sub_21FA97980(0, &qword_2555402E8, (uint64_t (*)(uint64_t))sub_21FA968A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v22);
  sub_21FA96CEC();
  sub_21FA97B70(&qword_255540310, &qword_2555402E8, (uint64_t (*)(uint64_t))sub_21FA968A0);
  v26 = v37;
  sub_21FC5B34C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v26);
  sub_21FA2A08C(&qword_255540390, (uint64_t (*)(uint64_t))sub_21FA96C0C, MEMORY[0x24BDB98F0]);
  v27 = v39;
  sub_21FC5B328();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v14, v27);
  sub_21FA2A08C(&qword_2555403A0, (uint64_t (*)(uint64_t))sub_21FA96D54, MEMORY[0x24BDB98D8]);
  v28 = v36;
  v29 = v41;
  sub_21FC5B2C8();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v17, v29);
  sub_21FA2A08C(&qword_2555403B0, (uint64_t (*)(uint64_t))sub_21FA96DCC, MEMORY[0x24BDB96C0]);
  v30 = v42;
  v31 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v28, v30);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
  return v31;
}

uint64_t sub_21FA94818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31[2];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39[6];

  v28 = a2;
  sub_21FA967F0();
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA9695C();
  v29 = v13;
  v30 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39[3] = type metadata accessor for ClinicalSharingCloudStandardAPI();
  v39[4] = (uint64_t)&off_24E486A00;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v39);
  sub_21FA2D120(a1, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCloudStandardAPI);
  *(_QWORD *)&v31[0] = a4;
  sub_21FA95DE0(a2, (uint64_t)&v33);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a3;
  v18 = v36;
  *(_OWORD *)(v17 + 56) = v35;
  *(_OWORD *)(v17 + 72) = v18;
  *(_OWORD *)(v17 + 88) = v37;
  *(_QWORD *)(v17 + 104) = v38;
  v19 = v34;
  *(_OWORD *)(v17 + 24) = v33;
  *(_OWORD *)(v17 + 40) = v19;
  sub_21FA97980(0, &qword_2555402E8, (uint64_t (*)(uint64_t))sub_21FA968A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA968BC(0);
  sub_21FA97B70(&qword_255540310, &qword_2555402E8, (uint64_t (*)(uint64_t))sub_21FA968A0);
  swift_bridgeObjectRetain();
  sub_21FC5B2C8();
  swift_release();
  sub_21FA2A08C(&qword_255540330, (uint64_t (*)(uint64_t))sub_21FA967F0, MEMORY[0x24BDB96C0]);
  v20 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v32 = v20;
  sub_21FA2CEA0((uint64_t)v39, (uint64_t)v31);
  sub_21FA95DE0(v28, (uint64_t)&v33);
  v21 = swift_allocObject();
  sub_21FA3175C(v31, v21 + 16);
  v22 = v36;
  *(_OWORD *)(v21 + 88) = v35;
  *(_OWORD *)(v21 + 104) = v22;
  *(_OWORD *)(v21 + 120) = v37;
  *(_QWORD *)(v21 + 136) = v38;
  v23 = v34;
  *(_OWORD *)(v21 + 56) = v33;
  *(_OWORD *)(v21 + 72) = v23;
  sub_21FC5B184();
  v24 = MEMORY[0x24BDB9AE0];
  sub_21FA97980(0, &qword_255540320, (uint64_t (*)(uint64_t))sub_21FA968BC, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  type metadata accessor for ClinicalSharingSyncContext();
  sub_21FA97980(0, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v24);
  sub_21FA97B70(&qword_255540328, &qword_255540320, (uint64_t (*)(uint64_t))sub_21FA968BC);
  sub_21FA97B70((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
  sub_21FC5B34C();
  swift_release();
  swift_release();
  sub_21FA2A08C(&qword_255540338, (uint64_t (*)(uint64_t))sub_21FA9695C, MEMORY[0x24BDB98F0]);
  v25 = v29;
  v26 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  return v26;
}

uint64_t sub_21FA94BEC(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    sub_21FC5B694();
    return sub_21FC5B724();
  }
  return result;
}

void sub_21FA94C74()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C9F0)
  {
    sub_21FA97A80(255, (unint64_t *)&unk_25406CA90, (unint64_t *)&qword_25406CB30, &qword_25406CB60);
    sub_21FA97980(255, &qword_25406B958, (uint64_t (*)(uint64_t))sub_21FA94D54, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA94D70();
    sub_21FA97B70((unint64_t *)&qword_25406B950, &qword_25406B958, (uint64_t (*)(uint64_t))sub_21FA94D54);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C9F0);
  }
}

void sub_21FA94D54(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25406BA38, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

unint64_t sub_21FA94D70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25406CA88;
  if (!qword_25406CA88)
  {
    sub_21FA97A80(255, (unint64_t *)&unk_25406CA90, (unint64_t *)&qword_25406CB30, &qword_25406CB60);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9AF8], v1);
    atomic_store(result, (unint64_t *)&qword_25406CA88);
  }
  return result;
}

uint64_t sub_21FA94DDC@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for ClinicalSharingSyncTask() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(sub_21FC5AAAC() - 8) + 80);
  return sub_21FA8F5D0(a1, v2 + v6, v2 + ((v6 + v7 + v8) & ~v8), a2);
}

void sub_21FA94E54()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25406C920)
  {
    sub_21FA97980(255, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    v0 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB9558];
    sub_21FA97C4C(255, &qword_25406B800, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB9558]);
    sub_21FA97B70((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
    sub_21FA94F4C(&qword_25406C7A8, &qword_25406B800, v0, MEMORY[0x24BDB9568]);
    v1 = sub_21FC5B100();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25406C920);
  }
}

uint64_t sub_21FA94F4C(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FA97C4C(255, a2, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_21FA94F8C()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25406C8D0)
  {
    v0 = MEMORY[0x24BDB98E0];
    sub_21FA964D0(255, &qword_25406B880, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BDB98E0]);
    sub_21FA95024(&qword_25406B878, &qword_25406B880, (uint64_t (*)(uint64_t, _QWORD *))v0, MEMORY[0x24BDB98F0]);
    v1 = sub_21FC5B0F4();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25406C8D0);
  }
}

uint64_t sub_21FA95024(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FA964D0(255, a2, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_21FA95064()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C9A0)
  {
    sub_21FA97980(255, &qword_25406CA50, (uint64_t (*)(uint64_t))sub_21FA95140, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA94F8C();
    sub_21FA97B70(&qword_25406CA48, &qword_25406CA50, (uint64_t (*)(uint64_t))sub_21FA95140);
    sub_21FA2A08C(&qword_25406C8C8, (uint64_t (*)(uint64_t))sub_21FA94F8C, MEMORY[0x24BDB98D8]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C9A0);
  }
}

void sub_21FA95140(uint64_t a1)
{
  sub_21FA96B9C(a1, &qword_25406CB18, sub_21FA94D54, (void (*)(uint64_t))sub_21FA9515C);
}

void sub_21FA9515C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C420)
  {
    v0 = sub_21FC5BAA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C420);
  }
}

void sub_21FA951B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C9C0)
  {
    sub_21FA97980(255, &qword_25406B958, (uint64_t (*)(uint64_t))sub_21FA94D54, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA95064();
    sub_21FA97B70((unint64_t *)&qword_25406B950, &qword_25406B958, (uint64_t (*)(uint64_t))sub_21FA94D54);
    sub_21FA2A08C(&qword_25406C998, (uint64_t (*)(uint64_t))sub_21FA95064, MEMORY[0x24BDB98F0]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C9C0);
  }
}

void sub_21FA9528C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C990)
  {
    sub_21FA97980(255, &qword_25406CA40, (uint64_t (*)(uint64_t))sub_21FA95368, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA951B0();
    sub_21FA97B70(&qword_25406CA38, &qword_25406CA40, (uint64_t (*)(uint64_t))sub_21FA95368);
    sub_21FA2A08C(&qword_25406C9B8, (uint64_t (*)(uint64_t))sub_21FA951B0, MEMORY[0x24BDB98F0]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C990);
  }
}

void sub_21FA95368(uint64_t a1)
{
  sub_21FA95384(a1, &qword_25406CB10, sub_21FA94D54);
}

void sub_21FA95384(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_21FA953E8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C9B0)
  {
    sub_21FA97980(255, &qword_25406B958, (uint64_t (*)(uint64_t))sub_21FA94D54, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA9528C();
    sub_21FA97B70((unint64_t *)&qword_25406B950, &qword_25406B958, (uint64_t (*)(uint64_t))sub_21FA94D54);
    sub_21FA2A08C(&qword_25406C988, (uint64_t (*)(uint64_t))sub_21FA9528C, MEMORY[0x24BDB98F0]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C9B0);
  }
}

void sub_21FA954C4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C890)
  {
    sub_21FA953E8();
    sub_21FA7BA1C(255, (unint64_t *)&qword_25406CB30, &qword_25406CB60);
    sub_21FA2A08C(&qword_25406C9A8, (uint64_t (*)(uint64_t))sub_21FA953E8, MEMORY[0x24BDB98F0]);
    v0 = sub_21FC5B0E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C890);
  }
}

uint64_t sub_21FA95574(uint64_t a1)
{
  return sub_21FA96598(a1, (uint64_t (*)(uint64_t, uint64_t))sub_21FA91308);
}

uint64_t sub_21FA95580()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_21FA955A4(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  sub_21FAF3DC0(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_21FA955B0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_21FA955E0(uint64_t a1)
{
  type metadata accessor for ClinicalSharingSyncTask();
  return sub_21FA915AC(a1);
}

uint64_t sub_21FA9561C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_2()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  void (*v16)(unint64_t, uint64_t);
  uint64_t v17;
  unint64_t v18;

  v1 = (int *)type metadata accessor for ClinicalSharingSyncTask();
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v17 = *(_QWORD *)(v2 + 64);
  v4 = sub_21FC5AAAC();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v18 = v3;
  v7 = v0 + v3;
  v16 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
  v16(v0 + v3 + v1[6], v4);
  __swift_destroy_boxed_opaque_existential_1(v0 + v3 + v1[7]);
  v8 = v0 + v3 + v1[8];
  v9 = sub_21FC5AAF4();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();

  v10 = v7 + v1[11];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v10 + 48);
  v11 = v7 + v1[12];
  v12 = sub_21FC5A98C();
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  v14 = type metadata accessor for ClinicalSharingCloudStandardAPI();
  v13(v11 + *(int *)(v14 + 20), v12);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  if (*(_QWORD *)(v7 + v1[15]))
    swift_release();
  v16(v0 + ((v18 + v17 + v6) & ~v6), v4);
  return swift_deallocObject();
}

uint64_t sub_21FA95830@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v5 = *(_QWORD *)(type metadata accessor for ClinicalSharingSyncTask() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(sub_21FC5AAAC() - 8) + 80);
  result = sub_21FA9178C(*a1, a1[1], v2 + ((v6 + v7 + v8) & ~v8));
  *a2 = result;
  return result;
}

uint64_t sub_21FA958B4(uint64_t a1)
{
  type metadata accessor for ClinicalSharingSyncTask();
  return sub_21FA91CDC(a1);
}

uint64_t sub_21FA958F8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  type metadata accessor for ClinicalSharingSyncTask();
  result = sub_21FA92148(*a1, a1[1], a1[2]);
  *a2 = result;
  return result;
}

void sub_21FA9594C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406AA48)
  {
    sub_21FA94D54(255);
    sub_21FA959C8();
    v0 = sub_21FC5B130();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406AA48);
  }
}

uint64_t sub_21FA959C8()
{
  return sub_21FA2A08C(&qword_25406BA40, (uint64_t (*)(uint64_t))sub_21FA94D54, MEMORY[0x24BEE12C8]);
}

void sub_21FA959E4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C930)
  {
    sub_21FA97980(255, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA973D4(255, (unint64_t *)&qword_25406B8B0, (uint64_t (*)(uint64_t))sub_21FA94D54, sub_21FA959C8, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BDB9960]);
    sub_21FA97B70((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
    sub_21FA95AC4();
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C930);
  }
}

unint64_t sub_21FA95AC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25406B8A8;
  if (!qword_25406B8A8)
  {
    sub_21FA973D4(255, (unint64_t *)&qword_25406B8B0, (uint64_t (*)(uint64_t))sub_21FA94D54, sub_21FA959C8, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BDB9960]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9970], v1);
    atomic_store(result, (unint64_t *)&qword_25406B8A8);
  }
  return result;
}

void sub_21FA95B2C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C8C0)
  {
    sub_21FA959E4();
    sub_21FA2A08C(&qword_25406C928, (uint64_t (*)(uint64_t))sub_21FA959E4, MEMORY[0x24BDB98F0]);
    v0 = sub_21FC5B0F4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C8C0);
  }
}

uint64_t sub_21FA95BA4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21FA95BD0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_21FAD3BDC(*(_QWORD *)(v1 + 16));
  *a1 = result;
  return result;
}

void sub_21FA95C00()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C970)
  {
    sub_21FA96040(255, &qword_25406CA30);
    sub_21FA97980(255, &qword_25406CBB8, (uint64_t (*)(uint64_t))sub_21FA94D54, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
    sub_21FA9633C((unint64_t *)&qword_25406CA28, &qword_25406CA30);
    sub_21FA95CF0((unint64_t *)&qword_25406CBB0, &qword_25406CBB8, (uint64_t (*)(uint64_t))sub_21FA94D54);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C970);
  }
}

uint64_t sub_21FA95CF0(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_21FA97980(255, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDBA1D0], v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_21FA95D38()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C810)
  {
    sub_21FA96040(255, &qword_25406CA30);
    sub_21FA95368(255);
    sub_21FA9633C((unint64_t *)&qword_25406CA28, &qword_25406CA30);
    v0 = sub_21FC5B064();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C810);
  }
}

uint64_t sub_21FA95DE0(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ClinicalSharingEncryption(a2, a1);
  return a2;
}

uint64_t sub_21FA95E1C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 112);
  return swift_deallocObject();
}

uint64_t sub_21FA95E68@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FA98160(a1, *(void **)(v2 + 16), v2 + 24, v2 + 64, a2);
}

uint64_t sub_21FA95E78()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21FA95E9C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_21FA92804(a1, *(_QWORD *)(v2 + 16), a2);
}

void sub_21FA95EA4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406B840)
  {
    sub_21FA95F24();
    sub_21FA2A08C(&qword_25406B8F0, (uint64_t (*)(uint64_t))sub_21FA95F24, MEMORY[0x24BDB9AF8]);
    v0 = sub_21FC5B064();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406B840);
  }
}

void sub_21FA95F24()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406B8F8)
  {
    sub_21FA50724(255, &qword_25406AE10);
    sub_21FA50724(255, (unint64_t *)&qword_25406BB50);
    v0 = sub_21FC5B190();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406B8F8);
  }
}

void sub_21FA95FB0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C8B0)
  {
    sub_21FA96040(255, (unint64_t *)&qword_25406B980);
    sub_21FA9633C((unint64_t *)&qword_25406B970, (unint64_t *)&qword_25406B980);
    v0 = sub_21FC5B0F4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C8B0);
  }
}

void sub_21FA96040(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    sub_21FA50724(255, (unint64_t *)&qword_25406BB50);
    v3 = sub_21FC5B190();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void sub_21FA960B4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C860)
  {
    sub_21FA95FB0();
    sub_21FA94D54(255);
    sub_21FA2A08C(&qword_25406C8A8, (uint64_t (*)(uint64_t))sub_21FA95FB0, MEMORY[0x24BDB98D8]);
    v0 = sub_21FC5B064();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C860);
  }
}

uint64_t sub_21FA96148@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

void sub_21FA96154()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C7F0)
  {
    sub_21FA97980(255, &qword_25406CA20, (uint64_t (*)(uint64_t))sub_21FA9515C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA95140(255);
    sub_21FA97B70((unint64_t *)&qword_25406CA18, &qword_25406CA20, (uint64_t (*)(uint64_t))sub_21FA9515C);
    v0 = sub_21FC5B064();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C7F0);
  }
}

uint64_t sub_21FA96204@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  *a2 = *(_QWORD *)(v2 + 16);
  a2[1] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void sub_21FA96230(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25406BA28, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

void sub_21FA9624C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C980)
  {
    sub_21FA96040(255, (unint64_t *)&qword_25406B938);
    sub_21FA97980(255, &qword_25406CBA8, (uint64_t (*)(uint64_t))sub_21FA96230, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
    sub_21FA9633C(&qword_25406B930, (unint64_t *)&qword_25406B938);
    sub_21FA95CF0(&qword_25406CBA0, &qword_25406CBA8, (uint64_t (*)(uint64_t))sub_21FA96230);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C980);
  }
}

uint64_t sub_21FA9633C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    sub_21FA96040(255, a2);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9AF8], v4);
    atomic_store(result, a1);
  }
  return result;
}

void sub_21FA9637C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C7D0)
  {
    sub_21FA9624C();
    sub_21FA2A08C(&qword_25406C978, (uint64_t (*)(uint64_t))sub_21FA9624C, MEMORY[0x24BDB98F0]);
    v0 = sub_21FC5B01C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C7D0);
  }
}

void sub_21FA963F4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C8F0)
  {
    sub_21FA97980(255, (unint64_t *)&qword_25406CA10, type metadata accessor for ClinicalSharingQueryOutput, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA9637C();
    sub_21FA97B70(&qword_25406CA08, (unint64_t *)&qword_25406CA10, type metadata accessor for ClinicalSharingQueryOutput);
    sub_21FA2A08C(&qword_25406C7C8, (uint64_t (*)(uint64_t))sub_21FA9637C, MEMORY[0x24BDB9568]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C8F0);
  }
}

void sub_21FA964D0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    sub_21FA97980(255, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    v9[0] = v6;
    v9[1] = v6;
    v10 = sub_21FA97B70((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
    v11 = v10;
    v7 = a3(a1, v9);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_21FA9657C(uint64_t a1)
{
  return sub_21FA96794(a1, (uint64_t (*)(uint64_t, uint64_t))sub_21FA9287C);
}

uint64_t sub_21FA9658C(uint64_t a1)
{
  return sub_21FA96598(a1, (uint64_t (*)(uint64_t, uint64_t))sub_21FA92948);
}

uint64_t sub_21FA96598(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ClinicalSharingSyncTask() - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

uint64_t objectdestroy_2Tm_0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  v1 = (int *)type metadata accessor for ClinicalSharingSyncTask();
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = v3 + v1[6];
  v5 = sub_21FC5AAAC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  __swift_destroy_boxed_opaque_existential_1(v3 + v1[7]);
  v6 = v3 + v1[8];
  v7 = sub_21FC5AAF4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();

  v8 = v3 + v1[11];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v8 + 48);
  v9 = v3 + v1[12];
  v10 = sub_21FC5A98C();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v12 = type metadata accessor for ClinicalSharingCloudStandardAPI();
  v11(v9 + *(int *)(v12 + 20), v10);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  if (*(_QWORD *)(v3 + v1[15]))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FA96788(uint64_t a1)
{
  return sub_21FA96794(a1, (uint64_t (*)(uint64_t, uint64_t))sub_21FA92BB4);
}

uint64_t sub_21FA96794(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ClinicalSharingSyncTask() - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

void sub_21FA967F0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2555402E0)
  {
    sub_21FA97980(255, &qword_2555402E8, (uint64_t (*)(uint64_t))sub_21FA968A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA968BC(255);
    sub_21FA97B70(&qword_255540310, &qword_2555402E8, (uint64_t (*)(uint64_t))sub_21FA968A0);
    v0 = sub_21FC5B064();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2555402E0);
  }
}

void sub_21FA968A0(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_2555402F0, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingCategoryNodeInfo, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

void sub_21FA968BC(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_2555402F8, (uint64_t (*)(uint64_t))sub_21FA968D8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

void sub_21FA968D8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_255540300)
  {
    sub_21FA2D1A0(255, &qword_255540308, type metadata accessor for PBNode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    type metadata accessor for ClinicalSharingSyncContext();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_255540300);
  }
}

void sub_21FA9695C()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_255540318)
  {
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FA97980(255, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA97980(255, &qword_255540320, (uint64_t (*)(uint64_t))sub_21FA968BC, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v0);
    sub_21FA97B70((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
    sub_21FA97B70(&qword_255540328, &qword_255540320, (uint64_t (*)(uint64_t))sub_21FA968BC);
    v1 = sub_21FC5B100();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_255540318);
  }
}

uint64_t sub_21FA96A54()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  return swift_deallocObject();
}

uint64_t sub_21FA96A98@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FC43118(a1, *(_QWORD *)(v2 + 16), v2 + 24, a2);
}

uint64_t sub_21FA96AA8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FAB2618(a1, (_QWORD *)(v2 + 16), v2 + 56, a2);
}

void sub_21FA96AB4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255540340)
  {
    sub_21FA97980(255, &qword_255540348, (uint64_t (*)(uint64_t))sub_21FA96B64, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA96B80(255);
    sub_21FA97B70(&qword_255540358, &qword_255540348, (uint64_t (*)(uint64_t))sub_21FA96B64);
    v0 = sub_21FC5B0E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255540340);
  }
}

void sub_21FA96B64(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25553FBC0, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingDataNodeInfo, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

void sub_21FA96B80(uint64_t a1)
{
  sub_21FA96B9C(a1, &qword_255540350, (void (*)(uint64_t))type metadata accessor for PBNode, (void (*)(uint64_t))type metadata accessor for ClinicalSharingCategoryNodeInfo);
}

void sub_21FA96B9C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v7)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_21FA96C0C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255540378)
  {
    sub_21FA97980(255, &qword_2555402E8, (uint64_t (*)(uint64_t))sub_21FA968A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA96F20(255, &qword_255540360, &qword_255540368, (uint64_t (*)(uint64_t))sub_21FA96B80, &qword_255540370);
    sub_21FA97B70(&qword_255540310, &qword_2555402E8, (uint64_t (*)(uint64_t))sub_21FA968A0);
    sub_21FA96CEC();
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255540378);
  }
}

unint64_t sub_21FA96CEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_255540380;
  if (!qword_255540380)
  {
    sub_21FA96F20(255, &qword_255540360, &qword_255540368, (uint64_t (*)(uint64_t))sub_21FA96B80, &qword_255540370);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB95E0], v1);
    atomic_store(result, (unint64_t *)&qword_255540380);
  }
  return result;
}

void sub_21FA96D54()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255540388)
  {
    sub_21FA96C0C();
    sub_21FA2A08C(&qword_255540390, (uint64_t (*)(uint64_t))sub_21FA96C0C, MEMORY[0x24BDB98F0]);
    v0 = sub_21FC5B0F4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255540388);
  }
}

void sub_21FA96DCC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255540398)
  {
    sub_21FA96D54();
    sub_21FA968A0(255);
    sub_21FA2A08C(&qword_2555403A0, (uint64_t (*)(uint64_t))sub_21FA96D54, MEMORY[0x24BDB98D8]);
    v0 = sub_21FC5B064();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255540398);
  }
}

uint64_t sub_21FA96E64@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FAB1CAC(a1, (_QWORD *)(v2 + 16), v2 + 56, a2);
}

void sub_21FA96E70()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2555403B8)
  {
    sub_21FA963F4();
    sub_21FA96F04(255);
    sub_21FA2A08C(&qword_2555403C8, (uint64_t (*)(uint64_t))sub_21FA963F4, MEMORY[0x24BDB98F0]);
    v0 = sub_21FC5B0E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2555403B8);
  }
}

void sub_21FA96F04(uint64_t a1)
{
  sub_21FA96B9C(a1, &qword_2555403C0, (void (*)(uint64_t))type metadata accessor for PBNode, (void (*)(uint64_t))type metadata accessor for ClinicalSharingDataNodeInfo);
}

void sub_21FA96F20(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t), unint64_t *a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_21FA97980(255, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA97B70(a5, a3, a4);
    v9 = sub_21FC5B040();
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_21FA96FB0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2555403E8)
  {
    sub_21FA97980(255, &qword_255540348, (uint64_t (*)(uint64_t))sub_21FA96B64, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA96F20(255, &qword_2555403D0, &qword_2555403D8, (uint64_t (*)(uint64_t))sub_21FA96F04, &qword_2555403E0);
    sub_21FA97B70(&qword_255540358, &qword_255540348, (uint64_t (*)(uint64_t))sub_21FA96B64);
    sub_21FA97090();
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2555403E8);
  }
}

unint64_t sub_21FA97090()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2555403F0;
  if (!qword_2555403F0)
  {
    sub_21FA96F20(255, &qword_2555403D0, &qword_2555403D8, (uint64_t (*)(uint64_t))sub_21FA96F04, &qword_2555403E0);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB95E0], v1);
    atomic_store(result, (unint64_t *)&qword_2555403F0);
  }
  return result;
}

void sub_21FA970F8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2555403F8)
  {
    sub_21FA96FB0();
    sub_21FA2A08C(&qword_255540400, (uint64_t (*)(uint64_t))sub_21FA96FB0, MEMORY[0x24BDB98F0]);
    v0 = sub_21FC5B0F4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2555403F8);
  }
}

void sub_21FA97170()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255540408)
  {
    sub_21FA97980(255, &qword_255540348, (uint64_t (*)(uint64_t))sub_21FA96B64, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA970F8();
    sub_21FA97B70(&qword_255540358, &qword_255540348, (uint64_t (*)(uint64_t))sub_21FA96B64);
    sub_21FA2A08C(&qword_255540410, (uint64_t (*)(uint64_t))sub_21FA970F8, MEMORY[0x24BDB98D8]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255540408);
  }
}

uint64_t sub_21FA9724C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  return swift_deallocObject();
}

uint64_t sub_21FA97288@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_21FC4220C(a1, v2 + 16, a2);
}

uint64_t objectdestroy_56Tm()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 104);
  return swift_deallocObject();
}

uint64_t sub_21FA972E8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FAB0E60(a1, (_QWORD *)(v2 + 16), v2 + 56, a2);
}

void sub_21FA972F4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553EC68)
  {
    sub_21FA97980(255, (unint64_t *)&qword_25406CA10, type metadata accessor for ClinicalSharingQueryOutput, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA973D4(255, (unint64_t *)&qword_25553EC70, (uint64_t (*)(uint64_t))sub_21FA506B0, sub_21FA97474, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BDB95E8]);
    sub_21FA97B70(&qword_25406CA08, (unint64_t *)&qword_25406CA10, type metadata accessor for ClinicalSharingQueryOutput);
    sub_21FA50770();
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553EC68);
  }
}

void sub_21FA973D4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, _QWORD *))
{
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[4];

  if (!*a2)
  {
    v11[0] = a3(255);
    v11[1] = sub_21FA50724(255, (unint64_t *)&qword_25406BB50);
    v11[2] = a4();
    v11[3] = MEMORY[0x24BEE3F20];
    v9 = a5(a1, v11);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_21FA97474()
{
  return sub_21FA2A08C(&qword_25553EC88, (uint64_t (*)(uint64_t))sub_21FA506B0, MEMORY[0x24BDB9AF8]);
}

uint64_t sub_21FA97490()
{
  id *v0;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 5));
  return swift_deallocObject();
}

void sub_21FA974CC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C910)
  {
    sub_21FA97980(255, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA975A8();
    sub_21FA97B70((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
    sub_21FA2A08C(&qword_25406C7B8, (uint64_t (*)(uint64_t))sub_21FA975A8, MEMORY[0x24BDB9568]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C910);
  }
}

void sub_21FA975A8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C7C0)
  {
    sub_21FA97620();
    sub_21FA2A08C(&qword_25406C8F8, (uint64_t (*)(uint64_t))sub_21FA97620, MEMORY[0x24BDB98F0]);
    v0 = sub_21FC5B01C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C7C0);
  }
}

void sub_21FA97620()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C900)
  {
    sub_21FA97980(255, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA976FC();
    sub_21FA97B70((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
    sub_21FA2A08C(&qword_25406C898, (uint64_t (*)(uint64_t))sub_21FA976FC, MEMORY[0x24BDB98C8]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C900);
  }
}

void sub_21FA976FC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C8A0)
  {
    sub_21FA97790();
    sub_21FA94D54(255);
    sub_21FA2A08C(&qword_25406C9C8, (uint64_t (*)(uint64_t))sub_21FA97790, MEMORY[0x24BDB98F0]);
    v0 = sub_21FC5B0E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C8A0);
  }
}

void sub_21FA97790()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C9D0)
  {
    sub_21FA97980(255, &qword_25406CA70, (uint64_t (*)(uint64_t))sub_21FA9786C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA978A4();
    sub_21FA97B70(&qword_25406CA68, &qword_25406CA70, (uint64_t (*)(uint64_t))sub_21FA9786C);
    sub_21FA2A08C(&qword_25406C9D8, (uint64_t (*)(uint64_t))sub_21FA978A4, MEMORY[0x24BDB98F0]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C9D0);
  }
}

void sub_21FA9786C(uint64_t a1)
{
  sub_21FA95384(a1, &qword_25406CB28, sub_21FA97888);
}

void sub_21FA97888(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25406CB20, (uint64_t (*)(uint64_t))sub_21FA71AB8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

void sub_21FA978A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C9E0)
  {
    sub_21FA97980(255, &qword_25406CA80, (uint64_t (*)(uint64_t))sub_21FA97888, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA97A00();
    sub_21FA97B70(&qword_25406CA78, &qword_25406CA80, (uint64_t (*)(uint64_t))sub_21FA97888);
    sub_21FA2A08C(&qword_25406B808, (uint64_t (*)(uint64_t))sub_21FA97A00, MEMORY[0x24BDB9568]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C9E0);
  }
}

void sub_21FA97980(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = sub_21FA50724(255, (unint64_t *)&qword_25406BB50);
    v9 = a4(a1, v7, v8, MEMORY[0x24BEE3F20]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_21FA97A00()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406B810)
  {
    sub_21FA97A80(255, &qword_25406B968, (unint64_t *)&qword_25406BA70, (unint64_t *)&qword_25406BA88);
    sub_21FA97B08();
    v0 = sub_21FC5B01C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406B810);
  }
}

void sub_21FA97A80(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_21FA7BA1C(255, a3, a4);
    sub_21FA50724(255, (unint64_t *)&qword_25406BB50);
    v5 = sub_21FC5B190();
    if (!v6)
      atomic_store(v5, a2);
  }
}

unint64_t sub_21FA97B08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25406B960;
  if (!qword_25406B960)
  {
    sub_21FA97A80(255, &qword_25406B968, (unint64_t *)&qword_25406BA70, (unint64_t *)&qword_25406BA88);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9AF8], v1);
    atomic_store(result, (unint64_t *)&qword_25406B960);
  }
  return result;
}

uint64_t sub_21FA97B70(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_21FA97980(255, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9AF8], v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_21FA97BB8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406B9B8)
  {
    sub_21FA7BA1C(255, (unint64_t *)&qword_25406BA70, (unint64_t *)&qword_25406BA88);
    sub_21FA50724(255, (unint64_t *)&qword_25406BB50);
    v0 = sub_21FC5B250();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406B9B8);
  }
}

void sub_21FA97C4C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_21FA97980(255, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    v7 = v6;
    v8 = sub_21FA97B70((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_21FA97CE8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 32))
    swift_release();
  return swift_deallocObject();
}

void sub_21FA97D1C(unint64_t *a1)
{
  uint64_t v1;

  sub_21FC57F98(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(unint64_t))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_21FA97D28(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t sub_21FA97D38()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_21FA97D5C@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FC58388(a1, (_QWORD *)(v2 + 16), a2);
}

uint64_t sub_21FA97D64@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FC583C8(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_21FA97D6C(uint64_t a1)
{
  return sub_21FC58534(a1);
}

uint64_t sub_21FA97D84@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v2 + 16))(*a1, a1[1], a1[2]);
  if (!v3)
    *a2 = result;
  return result;
}

uint64_t sub_21FA97DBC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_21FA97DE0(uint64_t a1)
{
  uint64_t v1;

  sub_21FC58774(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_21FA97DE8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FAAE450(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_21FA97DF0(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_21FA97E00(uint64_t a1)
{
  destroy for ClinicalSharingEncryption(a1);
  return a1;
}

uint64_t WebResponse.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_21FA3277C(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

void *WebResponse.response.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

uint64_t WebResponse.init(data:response:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

void destroy for WebResponse(uint64_t a1)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >> 60 != 15)
    sub_21FA2D770(*(_QWORD *)a1, v2);

}

uint64_t _s19HealthRecordsDaemon11WebResponseVwCP_0(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v5 = *a2;
    sub_21FA32314(*a2, a2[1]);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
  }
  v6 = (void *)a2[2];
  *(_QWORD *)(a1 + 16) = v6;
  v7 = v6;
  return a1;
}

uint64_t *assignWithCopy for WebResponse(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  id v11;

  v4 = a2[1];
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      v6 = *a2;
      sub_21FA32314(*a2, a2[1]);
      v7 = *a1;
      v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      sub_21FA2D770(v7, v8);
      goto LABEL_8;
    }
    sub_21FA32D54((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  v5 = *a2;
  sub_21FA32314(*a2, a2[1]);
  *a1 = v5;
  a1[1] = v4;
LABEL_8:
  v9 = (void *)a1[2];
  v10 = (void *)a2[2];
  a1[2] = (uint64_t)v10;
  v11 = v10;

  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t *assignWithTake for WebResponse(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_21FA2D770(v6, v4);
      goto LABEL_6;
    }
    sub_21FA32D54((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  v7 = (void *)a1[2];
  a1[2] = a2[2];

  return a1;
}

uint64_t getEnumTagSinglePayload for WebResponse(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for WebResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for WebResponse()
{
  return &type metadata for WebResponse;
}

uint64_t sub_21FA98160@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  id v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  _OWORD v46[5];
  uint64_t v47;
  __int128 v48[3];

  v38 = a4;
  v37 = a3;
  v45 = a5;
  sub_21FA99CFC();
  v8 = v7;
  v36 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA99E14();
  v43 = v11;
  v41 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v39 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA99F90(0, &qword_25406C950, v13, (void (*)(void))sub_21FA9A098);
  v44 = v14;
  v42 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v40 = (char *)&v35 - v15;
  v16 = *a1;
  if (qword_25406B7F8 != -1)
    swift_once();
  v17 = sub_21FC5AFD4();
  __swift_project_value_buffer(v17, (uint64_t)qword_25406D830);
  swift_bridgeObjectRetain_n();
  v18 = sub_21FC5AFC8();
  v19 = sub_21FC5B970();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v20 = 134217984;
    if (v16 >> 62)
    {
      swift_bridgeObjectRetain();
      v21 = sub_21FC5BC7C();
      swift_bridgeObjectRelease();
    }
    else
    {
      v21 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)&v46[0] = v21;
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v18, v19, "Updating ClinicalSharingGraphMetadata. No of Accounts: %ld", v20, 0xCu);
    MEMORY[0x2207D105C](v20, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  *(_QWORD *)&v46[0] = sub_21FC5B9D0();
  sub_21FA99EA4(0, &qword_25406B998, &qword_25406AAD0, MEMORY[0x24BDCDDE8], (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
  sub_21FA80754(0, qword_25406B298, (uint64_t)&type metadata for ClinicalSharingGraphMetadata, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  sub_21FA99DAC();
  sub_21FC5B2C8();
  swift_release();
  sub_21FA2A08C(&qword_25406C848, (uint64_t (*)(uint64_t))sub_21FA99CFC, MEMORY[0x24BDB96C0]);
  v22 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v8);
  *(_QWORD *)&v46[0] = v22;
  *(_QWORD *)(swift_allocObject() + 16) = v16;
  v23 = MEMORY[0x24BDB9AE0];
  sub_21FA99EA4(0, &qword_25406B928, qword_25406B298, (uint64_t)&type metadata for ClinicalSharingGraphMetadata, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA99F28();
  swift_bridgeObjectRetain();
  v24 = v39;
  sub_21FC5B2C8();
  swift_release();
  swift_release();
  sub_21FA2CEA0(v37, (uint64_t)v48);
  sub_21FA95DE0(v38, (uint64_t)v46);
  v25 = swift_allocObject();
  sub_21FA3175C(v48, v25 + 16);
  v26 = v46[3];
  *(_OWORD *)(v25 + 88) = v46[2];
  *(_OWORD *)(v25 + 104) = v26;
  *(_OWORD *)(v25 + 120) = v46[4];
  v27 = v47;
  v28 = v46[1];
  *(_OWORD *)(v25 + 56) = v46[0];
  *(_OWORD *)(v25 + 72) = v28;
  *(_QWORD *)(v25 + 136) = v27;
  *(_QWORD *)(v25 + 144) = a2;
  v29 = a2;
  sub_21FC5B184();
  sub_21FA9B05C(0, &qword_25406CA30, (uint64_t)&type metadata for ClinicalSharingGraphMetadata, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v23);
  sub_21FA9A098();
  sub_21FA9A038();
  v30 = v40;
  v31 = v43;
  sub_21FC5B34C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v24, v31);
  sub_21FA9A5F8(&qword_25406C948, &qword_25406C950, (void (*)(uint64_t))sub_21FA99E14, (void (*)(void))sub_21FA9A098);
  v32 = v44;
  v33 = sub_21FC5B280();
  result = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v30, v32);
  *v45 = v33;
  return result;
}

uint64_t sub_21FA986C8@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;

  if (*a1)
  {
    result = sub_21FA80890(a2, *a1, a1[1]);
  }
  else
  {
    v6 = swift_bridgeObjectRetain();
    result = sub_21FA8142C(v6);
  }
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_21FA98710@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);
  char *v34;
  uint64_t v35;
  void *v36;
  id v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v48 = a3;
  v49 = a4;
  v56 = a5;
  sub_21FA99F90(0, &qword_25406C960, (void (*)(uint64_t))sub_21FA9A13C, (void (*)(void))sub_21FA9A1DC);
  v54 = *(_QWORD *)(v7 - 8);
  v55 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v53 = (char *)&v43 - v8;
  sub_21FA9A13C();
  v51 = *(_QWORD *)(v9 - 8);
  v52 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v50 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  v11 = a1[1];
  v46 = __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  v13 = *(_QWORD *)(v11 + 16);
  swift_bridgeObjectRetain_n();
  result = swift_bridgeObjectRetain();
  v47 = v11;
  if (v13)
  {
    v15 = 0;
    v58 = -(uint64_t)v13;
    v16 = v11 + 56;
    v17 = MEMORY[0x24BEE4AF8];
    v44 = v11 + 56;
    v45 = v13;
    do
    {
      v57 = v17;
      if (v15 <= v13)
        v18 = v13;
      else
        v18 = v15;
      v19 = -(uint64_t)v18;
      v20 = (unint64_t *)(v16 + 32 * v15++);
      while (1)
      {
        if (v19 + v15 == 1)
        {
          __break(1u);
          return result;
        }
        v21 = *(v20 - 3);
        v22 = *(v20 - 2);
        v24 = *(v20 - 1);
        v23 = *v20;
        swift_bridgeObjectRetain();
        sub_21FA32314(v24, v23);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_21FA32314(v24, v23);
        v25 = sub_21FA9A1F8(v12, v21, v22);
        swift_bridgeObjectRelease();
        sub_21FA2D770(v24, v23);
        swift_bridgeObjectRelease();
        if ((v25 & 1) == 0)
          break;
        swift_bridgeObjectRelease();
        result = sub_21FA2D770(v24, v23);
        ++v15;
        v20 += 4;
        if (v58 + v15 == 1)
        {
          v17 = v57;
          goto LABEL_18;
        }
      }
      v17 = v57;
      result = swift_isUniquelyReferenced_nonNull_native();
      v59 = v17;
      if ((result & 1) == 0)
      {
        result = sub_21FC01A0C(0, *(_QWORD *)(v17 + 16) + 1, 1);
        v17 = v59;
      }
      v13 = v45;
      v27 = *(_QWORD *)(v17 + 16);
      v26 = *(_QWORD *)(v17 + 24);
      v28 = v27 + 1;
      if (v27 >= v26 >> 1)
      {
        v57 = v27 + 1;
        result = sub_21FC01A0C(v26 > 1, v27 + 1, 1);
        v28 = v57;
        v17 = v59;
      }
      *(_QWORD *)(v17 + 16) = v28;
      v29 = (_QWORD *)(v17 + 32 * v27);
      v29[4] = v21;
      v29[5] = v22;
      v29[6] = v24;
      v29[7] = v23;
      v16 = v44;
    }
    while (v58 + v15);
  }
  else
  {
    v17 = MEMORY[0x24BEE4AF8];
  }
LABEL_18:
  v30 = v47;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  v31 = sub_21FA98BBC(v17, v48);
  swift_release();
  v59 = v31;
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = v12;
  *(_QWORD *)(v32 + 24) = v30;
  v33 = MEMORY[0x24BDB9AE0];
  sub_21FA9AD54(0, &qword_25406CA60, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA9AED4(&qword_25406CA58, &qword_25406CA60, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v33, MEMORY[0x24BDB9AF8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v34 = v50;
  sub_21FC5B2C8();
  swift_release();
  swift_release();
  v35 = swift_allocObject();
  v36 = v49;
  *(_QWORD *)(v35 + 16) = v49;
  v37 = v36;
  sub_21FC5B184();
  sub_21FA9B05C(0, &qword_25406CA30, (uint64_t)&type metadata for ClinicalSharingGraphMetadata, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v33);
  sub_21FA9A1DC();
  sub_21FA9A038();
  v39 = v52;
  v38 = v53;
  sub_21FC5B34C();
  swift_release();
  sub_21FA9A5F8(&qword_25406C958, &qword_25406C960, (void (*)(uint64_t))sub_21FA9A13C, (void (*)(void))sub_21FA9A1DC);
  v40 = v55;
  v41 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v38, v40);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v34, v39);
  v59 = v41;
  v42 = sub_21FC5B280();
  result = swift_release();
  *v56 = v42;
  return result;
}

uint64_t sub_21FA98BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  __int128 v72[2];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;

  v53 = a2;
  sub_21FA9A8A8();
  v64 = v3;
  v61 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v58 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA9AAD8();
  v68 = v5;
  v66 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v60 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA9ACF4(0, &qword_25406CAB0, (unint64_t *)&qword_25406BA48, (uint64_t)&type metadata for ClinicalSharingNodeMetadata);
  v8 = v7;
  v52 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v51 - v9;
  v11 = MEMORY[0x24BDBA1B0];
  sub_21FA84A5C(0, &qword_25406CB98, (uint64_t (*)(uint64_t))sub_21FA9AA14, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
  v55 = v12;
  v54 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v51 - v13;
  sub_21FA9A93C();
  v71 = v15;
  v57 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v70 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA9ABB4();
  v65 = v17;
  v62 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v59 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA9AC7C();
  v69 = v19;
  v67 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v63 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA9ACF4(0, &qword_25406CAB8, (unint64_t *)&qword_25406BA60, MEMORY[0x24BEE0D00]);
  v22 = v21;
  v23 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v51 - v24;
  sub_21FA9AD54(0, &qword_25406CBC8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v11);
  v27 = v26;
  v28 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v51 - v29;
  if (*(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)&v73 = a1;
    sub_21FA80754(0, (unint64_t *)&qword_25406BA48, (uint64_t)&type metadata for ClinicalSharingNodeMetadata, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    swift_bridgeObjectRetain();
    sub_21FC5B22C();
    sub_21FA9AA14();
    sub_21FC5B214();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v10, v8);
    sub_21FA95DE0(v53, (uint64_t)&v73);
    v31 = swift_allocObject();
    v32 = v76;
    *(_OWORD *)(v31 + 48) = v75;
    *(_OWORD *)(v31 + 64) = v32;
    *(_OWORD *)(v31 + 80) = v77;
    *(_QWORD *)(v31 + 96) = v78;
    v33 = v74;
    *(_OWORD *)(v31 + 16) = v73;
    *(_OWORD *)(v31 + 32) = v33;
    v34 = swift_allocObject();
    *(_QWORD *)(v34 + 16) = sub_21FA9AE18;
    *(_QWORD *)(v34 + 24) = v31;
    sub_21FC5B184();
    type metadata accessor for PBDeleteBlobsRequest(0);
    sub_21FA84A5C(0, (unint64_t *)&unk_25406B8E0, type metadata accessor for PBDeleteBlobsRequest, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA9AA78();
    sub_21FA84B70(&qword_25406B8D8, (unint64_t *)&unk_25406B8E0, type metadata accessor for PBDeleteBlobsRequest);
    v35 = v55;
    sub_21FC5B34C();
    swift_release();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v14, v35);
    *((_QWORD *)&v74 + 1) = type metadata accessor for ClinicalSharingCloudStandardAPI();
    *(_QWORD *)&v75 = &off_24E486A00;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v73);
    sub_21FA2D120(v56, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCloudStandardAPI);
    sub_21FA2CEA0((uint64_t)&v73, (uint64_t)v72);
    v37 = swift_allocObject();
    sub_21FA3175C(v72, v37 + 16);
    sub_21FC5A5D8();
    v38 = MEMORY[0x24BDB98F0];
    sub_21FA2A08C(&qword_25406C8D8, (uint64_t (*)(uint64_t))sub_21FA9A93C, MEMORY[0x24BDB98F0]);
    v39 = v58;
    sub_21FC5B31C();
    swift_release();
    sub_21FA2CEA0((uint64_t)&v73, (uint64_t)v72);
    v40 = swift_allocObject();
    sub_21FA3175C(v72, v40 + 16);
    sub_21FC5B184();
    type metadata accessor for PBDeleteBlobsResponse(0);
    sub_21FA84A5C(0, &qword_25406B908, type metadata accessor for PBDeleteBlobsResponse, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA2A08C(&qword_25406C878, (uint64_t (*)(uint64_t))sub_21FA9A8A8, MEMORY[0x24BDB98C8]);
    sub_21FA84B70(&qword_25406B900, &qword_25406B908, type metadata accessor for PBDeleteBlobsResponse);
    v41 = v60;
    v42 = v64;
    sub_21FC5B34C();
    swift_release();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v39, v42);
    sub_21FA2A08C(&qword_255540428, (uint64_t (*)(uint64_t))sub_21FA9AAD8, v38);
    v43 = v68;
    v44 = sub_21FC5B280();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v41, v43);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v70, v71);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
    *(_QWORD *)&v73 = v44;
    sub_21FA80754(0, (unint64_t *)&qword_25406BA60, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v45 = v59;
    sub_21FC5B2C8();
    swift_release();
    sub_21FA2A08C(&qword_25406C7D8, (uint64_t (*)(uint64_t))sub_21FA9ABB4, MEMORY[0x24BDB96C0]);
    v46 = v65;
    v47 = v63;
    sub_21FC5B298();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v45, v46);
    sub_21FA2A08C(&qword_255540430, (uint64_t (*)(uint64_t))sub_21FA9AC7C, MEMORY[0x24BDB9568]);
    v48 = v69;
    v49 = sub_21FC5B280();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v47, v48);
  }
  else
  {
    *(_QWORD *)&v73 = MEMORY[0x24BEE4AF8];
    sub_21FA80754(0, (unint64_t *)&qword_25406BA60, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FC5B22C();
    sub_21FA2CDB4();
    sub_21FC5B208();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    sub_21FA9AED4(&qword_25406CBC0, &qword_25406CBC8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0], MEMORY[0x24BDBA1D0]);
    v49 = sub_21FC5B280();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  }
  return v49;
}

uint64_t sub_21FA99470@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = swift_bridgeObjectRetain();
  v5 = sub_21FBF3508(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v6 = swift_bridgeObjectRetain();
  v7 = sub_21FA9A638(v6, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease_n();
  *a2 = a1;
  a2[1] = v7;
  return result;
}

uint64_t sub_21FA99508@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v3 = type metadata accessor for PBDeleteBlobs(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = swift_bridgeObjectRetain();
  result = sub_21FA9B700(v6, v5);
  if (!v1)
  {
    sub_21FA2A08C(&qword_255540468, type metadata accessor for PBDeleteBlobs, (uint64_t)&protocol conformance descriptor for PBDeleteBlobs);
    v8 = sub_21FC5AE90();
    v10 = v9;
    sub_21FA9AA14();
    v12 = (uint64_t *)(a1 + *(int *)(v11 + 48));
    result = sub_21FA2D23C((uint64_t)v5, a1, type metadata accessor for PBDeleteBlobs);
    *v12 = v8;
    v12[1] = v10;
  }
  return result;
}

uint64_t sub_21FA99614(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v15)(void);
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27[2];
  _QWORD v28[5];

  v24 = a1;
  v7 = type metadata accessor for PBDeleteBlobs(0);
  v23 = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(v23 + 64);
  MEMORY[0x24BDAC7A8](v7);
  sub_21FA9AF14();
  v10 = *(_QWORD *)(v9 - 8);
  v25 = v9;
  v26 = v10;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2CEA0(a4 + 48, (uint64_t)v28);
  v13 = *(_QWORD *)(a4 + 32);
  sub_21FA2CEA0((uint64_t)v28, (uint64_t)v27);
  v14 = (_QWORD *)swift_allocObject();
  sub_21FA3175C(v27, (uint64_t)(v14 + 2));
  v14[7] = a2;
  v14[8] = a3;
  v14[9] = 3;
  v14[10] = v13;
  v15 = MEMORY[0x24BDB9E38];
  sub_21FA9B05C(0, &qword_255540450, (uint64_t)&type metadata for ClinicalSharingEncryption.BAACertSignature, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
  swift_allocObject();
  swift_bridgeObjectRetain();
  sub_21FA32314(a2, a3);
  *(_QWORD *)&v27[0] = sub_21FC5B25C();
  sub_21FA9AFCC(&qword_255540458, &qword_255540450, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v15, MEMORY[0x24BDB9E58]);
  v16 = sub_21FC5B280();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  v28[0] = v16;
  sub_21FA2D120(v24, (uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PBDeleteBlobs);
  v17 = (*(unsigned __int8 *)(v23 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  v18 = swift_allocObject();
  sub_21FA2D23C((uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, type metadata accessor for PBDeleteBlobs);
  v19 = MEMORY[0x24BDB9AE0];
  sub_21FA9B05C(0, &qword_255540440, (uint64_t)&type metadata for ClinicalSharingEncryption.BAACertSignature, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  type metadata accessor for PBDeleteBlobsRequest(0);
  sub_21FA9AFCC(&qword_255540448, &qword_255540440, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v19, MEMORY[0x24BDB9AF8]);
  sub_21FC5B31C();
  swift_release();
  swift_release();
  sub_21FA2A08C(&qword_255540460, (uint64_t (*)(uint64_t))sub_21FA9AF14, MEMORY[0x24BDB98C8]);
  v20 = v25;
  v21 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v20);
  return v21;
}

uint64_t sub_21FA998F0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v14;

  v6 = type metadata accessor for PBDeleteBlobs(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  v10 = a1[1];
  v11 = a1[2];
  sub_21FA2D120(a2, (uint64_t)v8, v12);
  swift_bridgeObjectRetain();
  sub_21FA32314(v10, v11);
  return sub_21FC19530((uint64_t)v8, v9, v10, v11, a3);
}

uint64_t sub_21FA999B4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD v23[2];
  _QWORD *v24;
  uint64_t v25;

  v4 = type metadata accessor for PBBlobDeleteResult(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (_QWORD *)((char *)v23 - v9);
  result = *a1;
  v12 = *(_QWORD *)(*a1 + 16);
  if (!v12)
  {
    v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_18;
  }
  v13 = result + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v14 = *(_QWORD *)(v8 + 72);
  v24 = a2;
  v25 = v14;
  v23[1] = result;
  swift_bridgeObjectRetain_n();
  v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    sub_21FA2D120(v13, (uint64_t)v10, type metadata accessor for PBBlobDeleteResult);
    v16 = v10[4];
    sub_21FA2D120((uint64_t)v10, (uint64_t)v7, type metadata accessor for PBBlobDeleteResult);
    if (!v16)
      goto LABEL_9;
    v17 = *((_QWORD *)v7 + 4);
    if (v7[40] == 1)
    {
      if (v17 != 3)
      {
        sub_21FA326EC((uint64_t)v7, type metadata accessor for PBBlobDeleteResult);
LABEL_4:
        sub_21FA326EC((uint64_t)v10, type metadata accessor for PBBlobDeleteResult);
        goto LABEL_5;
      }
LABEL_9:
      sub_21FA326EC((uint64_t)v7, type metadata accessor for PBBlobDeleteResult);
      goto LABEL_11;
    }
    sub_21FA326EC((uint64_t)v7, type metadata accessor for PBBlobDeleteResult);
    if (v17 != 4)
      goto LABEL_4;
LABEL_11:
    v18 = *v10;
    v19 = v10[1];
    swift_bridgeObjectRetain();
    sub_21FA326EC((uint64_t)v10, type metadata accessor for PBBlobDeleteResult);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v15 = sub_21FA7DD0C(0, v15[2] + 1, 1, v15);
    v21 = v15[2];
    v20 = v15[3];
    if (v21 >= v20 >> 1)
      v15 = sub_21FA7DD0C((_QWORD *)(v20 > 1), v21 + 1, 1, v15);
    v15[2] = v21 + 1;
    v22 = &v15[2 * v21];
    v22[4] = v18;
    v22[5] = v19;
LABEL_5:
    v13 += v25;
    --v12;
  }
  while (v12);
  result = swift_bridgeObjectRelease_n();
  a2 = v24;
LABEL_18:
  *a2 = v15;
  return result;
}

void sub_21FA99BC0()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;

  if (qword_25406B7F8 != -1)
    swift_once();
  v0 = sub_21FC5AFD4();
  __swift_project_value_buffer(v0, (uint64_t)qword_25406D830);
  swift_bridgeObjectRetain();
  v1 = sub_21FC5AFC8();
  v2 = sub_21FC5B994();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v3 = 134217984;
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v1, v2, "Number of deleted nodes: %ld", v3, 0xCu);
    MEMORY[0x2207D105C](v3, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
}

void sub_21FA99CFC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C850)
  {
    sub_21FA99EA4(255, &qword_25406B998, &qword_25406AAD0, MEMORY[0x24BDCDDE8], (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
    sub_21FA80754(255, qword_25406B298, (uint64_t)&type metadata for ClinicalSharingGraphMetadata, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    sub_21FA99DAC();
    v0 = sub_21FC5B064();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C850);
  }
}

unint64_t sub_21FA99DAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25406B990;
  if (!qword_25406B990)
  {
    sub_21FA99EA4(255, &qword_25406B998, &qword_25406AAD0, MEMORY[0x24BDCDDE8], (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9E58], v1);
    atomic_store(result, (unint64_t *)&qword_25406B990);
  }
  return result;
}

void sub_21FA99E14()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C800)
  {
    sub_21FA99EA4(255, &qword_25406B928, qword_25406B298, (uint64_t)&type metadata for ClinicalSharingGraphMetadata, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA99F28();
    v0 = sub_21FC5B064();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C800);
  }
}

void sub_21FA99EA4(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    sub_21FA80754(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = v8;
    v10 = sub_21FA2CDB4();
    v11 = a5(a1, v9, v10, MEMORY[0x24BEE3F20]);
    if (!v12)
      atomic_store(v11, a2);
  }
}

unint64_t sub_21FA99F28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25406B920;
  if (!qword_25406B920)
  {
    sub_21FA99EA4(255, &qword_25406B928, qword_25406B298, (uint64_t)&type metadata for ClinicalSharingGraphMetadata, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9AF8], v1);
    atomic_store(result, (unint64_t *)&qword_25406B920);
  }
  return result;
}

void sub_21FA99F90(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_21FA9B05C(255, &qword_25406CA30, (uint64_t)&type metadata for ClinicalSharingGraphMetadata, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    a3(255);
    sub_21FA9A038();
    a4();
    v7 = sub_21FC5B100();
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_21FA9A038()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25406CA28;
  if (!qword_25406CA28)
  {
    sub_21FA9B05C(255, &qword_25406CA30, (uint64_t)&type metadata for ClinicalSharingGraphMetadata, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9AF8], v1);
    atomic_store(result, (unint64_t *)&qword_25406CA28);
  }
  return result;
}

uint64_t sub_21FA9A098()
{
  return sub_21FA2A08C(&qword_25406C7F8, (uint64_t (*)(uint64_t))sub_21FA99E14, MEMORY[0x24BDB96C0]);
}

uint64_t sub_21FA9A0B4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21FA9A0D8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FA986C8(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_21FA9A0E0()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 104);

  return swift_deallocObject();
}

uint64_t sub_21FA9A12C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FA98710(a1, (_QWORD *)(v2 + 16), v2 + 56, *(void **)(v2 + 144), a2);
}

void sub_21FA9A13C()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25406C830)
  {
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FA9AD54(255, &qword_25406CA60, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA9AED4(&qword_25406CA58, &qword_25406CA60, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    v1 = sub_21FC5B064();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25406C830);
  }
}

uint64_t sub_21FA9A1DC()
{
  return sub_21FA2A08C(&qword_25406C828, (uint64_t (*)(uint64_t))sub_21FA9A13C, MEMORY[0x24BDB96C0]);
}

uint64_t sub_21FA9A1F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  BOOL v34;
  _QWORD *v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  int64_t v42;
  int64_t v43;

  sub_21FA9B1A8();
  v7 = v6;
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v37 - v11;
  v13 = *(_QWORD *)(a1 + 64);
  v40 = a1 + 64;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  if (v14 < 64)
    v15 = ~(-1 << v14);
  else
    v15 = -1;
  v16 = v15 & v13;
  v42 = (unint64_t)(v14 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v18 = 0;
  v38 = v7;
  v39 = v12;
  v41 = v10;
  while (1)
  {
    if (v16)
    {
      v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v43 = v18;
      v20 = v19 | (v18 << 6);
      goto LABEL_24;
    }
    v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v21 >= v42)
      goto LABEL_43;
    v22 = *(_QWORD *)(v40 + 8 * v21);
    v23 = v18 + 1;
    if (!v22)
    {
      v23 = v18 + 2;
      if (v18 + 2 >= v42)
        goto LABEL_43;
      v22 = *(_QWORD *)(v40 + 8 * v23);
      if (!v22)
      {
        v23 = v18 + 3;
        if (v18 + 3 >= v42)
          goto LABEL_43;
        v22 = *(_QWORD *)(v40 + 8 * v23);
        if (!v22)
        {
          v23 = v18 + 4;
          if (v18 + 4 >= v42)
            goto LABEL_43;
          v22 = *(_QWORD *)(v40 + 8 * v23);
          if (!v22)
          {
            v24 = v18 + 5;
            if (v18 + 5 >= v42)
            {
LABEL_43:
              swift_release();
              return 0;
            }
            v22 = *(_QWORD *)(v40 + 8 * v24);
            v23 = v18 + 5;
            if (!v22)
              break;
          }
        }
      }
    }
LABEL_23:
    v16 = (v22 - 1) & v22;
    v43 = v23;
    v20 = __clz(__rbit64(v22)) + (v23 << 6);
LABEL_24:
    v25 = *(_QWORD *)(a1 + 48);
    v26 = sub_21FC5AAF4();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v12, v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v20, v26);
    *(_QWORD *)&v12[*(int *)(v7 + 48)] = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v20);
    sub_21FA2D23C((uint64_t)v12, (uint64_t)v10, (uint64_t (*)(_QWORD))sub_21FA9B1A8);
    v27 = *(_QWORD *)&v10[*(int *)(v7 + 48)];
    if (*(_QWORD *)(v27 + 16))
    {
      sub_21FC5BE8C();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_21FC5B67C();
      v28 = sub_21FC5BEB0();
      v29 = -1 << *(_BYTE *)(v27 + 32);
      v30 = v28 & ~v29;
      if (((*(_QWORD *)(v27 + 56 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) != 0)
      {
        v31 = a1;
        v32 = *(_QWORD *)(v27 + 48);
        v33 = (_QWORD *)(v32 + 16 * v30);
        v34 = *v33 == a2 && v33[1] == a3;
        if (v34 || (sub_21FC5BDF0() & 1) != 0)
        {
LABEL_41:
          swift_bridgeObjectRelease();
          sub_21FA326EC((uint64_t)v41, (uint64_t (*)(_QWORD))sub_21FA9B1A8);
          swift_release();
          return 1;
        }
        while (1)
        {
          v30 = (v30 + 1) & ~v29;
          if (((*(_QWORD *)(v27 + 56 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
            break;
          v35 = (_QWORD *)(v32 + 16 * v30);
          v36 = *v35 == a2 && v35[1] == a3;
          if (v36 || (sub_21FC5BDF0() & 1) != 0)
            goto LABEL_41;
        }
        swift_bridgeObjectRelease();
        a1 = v31;
        v7 = v38;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v10 = v41;
      v12 = v39;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    result = sub_21FA326EC((uint64_t)v10, (uint64_t (*)(_QWORD))sub_21FA9B1A8);
    v18 = v43;
  }
  while (1)
  {
    v23 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v23 >= v42)
      goto LABEL_43;
    v22 = *(_QWORD *)(v40 + 8 * v23);
    ++v24;
    if (v22)
      goto LABEL_23;
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_21FA9A598()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21FA9A5C4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_21FA99470(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_21FA9A5CC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_21FA9A5F0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FA71B54(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_21FA9A5F8(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    sub_21FA99F90(255, a2, a3, a4);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB98F0], v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FA9A638(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  unint64_t i;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v30;
  uint64_t v31;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  v3 = a2;
  v4 = 0;
  v27 = result + 32;
  v31 = a2 + 56;
  v26 = MEMORY[0x24BEE4AF8];
  v28 = *(_QWORD *)(result + 16);
  do
  {
    if (v4 <= v2)
      v5 = v2;
    else
      v5 = v4;
    v30 = v5;
    while (1)
    {
      if (v4 == v30)
      {
        __break(1u);
        return result;
      }
      v6 = (uint64_t *)(v27 + 32 * v4);
      v8 = *v6;
      v7 = v6[1];
      v10 = v6[2];
      v9 = v6[3];
      ++v4;
      if (!*(_QWORD *)(v3 + 16))
        break;
      sub_21FC5BE8C();
      swift_bridgeObjectRetain();
      sub_21FA32314(v10, v9);
      swift_bridgeObjectRetain();
      sub_21FC5B67C();
      v11 = sub_21FC5BEB0();
      v12 = -1 << *(_BYTE *)(v3 + 32);
      v13 = v11 & ~v12;
      if (((*(_QWORD *)(v31 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
        goto LABEL_24;
      v14 = *(_QWORD *)(v3 + 48);
      v15 = (_QWORD *)(v14 + 16 * v13);
      v16 = *v15 == v8 && v15[1] == v7;
      if (!v16 && (sub_21FC5BDF0() & 1) == 0)
      {
        v17 = ~v12;
        for (i = v13 + 1; ; i = v19 + 1)
        {
          v19 = i & v17;
          if (((*(_QWORD *)(v31 + (((i & v17) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v17)) & 1) == 0)
            break;
          v20 = (_QWORD *)(v14 + 16 * v19);
          v21 = *v20 == v8 && v20[1] == v7;
          if (v21 || (sub_21FC5BDF0() & 1) != 0)
            goto LABEL_7;
        }
LABEL_24:
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
LABEL_7:
      swift_bridgeObjectRelease_n();
      result = sub_21FA2D770(v10, v9);
      v3 = a2;
      if (v4 == v28)
        return v26;
    }
    swift_bridgeObjectRetain();
    sub_21FA32314(v10, v9);
LABEL_26:
    v22 = v26;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_21FC01A0C(0, *(_QWORD *)(v26 + 16) + 1, 1);
      v22 = v26;
    }
    v24 = *(_QWORD *)(v22 + 16);
    v23 = *(_QWORD *)(v22 + 24);
    if (v24 >= v23 >> 1)
    {
      result = sub_21FC01A0C(v23 > 1, v24 + 1, 1);
      v22 = v26;
    }
    *(_QWORD *)(v22 + 16) = v24 + 1;
    v26 = v22;
    v25 = (_QWORD *)(v22 + 32 * v24);
    v25[4] = v8;
    v25[5] = v7;
    v25[6] = v10;
    v25[7] = v9;
    v2 = v28;
    v3 = a2;
  }
  while (v4 != v28);
  return v26;
}

void sub_21FA9A8A8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C880)
  {
    sub_21FA9A93C();
    sub_21FC5A5D8();
    sub_21FA2A08C(&qword_25406C8D8, (uint64_t (*)(uint64_t))sub_21FA9A93C, MEMORY[0x24BDB98F0]);
    v0 = sub_21FC5B0E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C880);
  }
}

void sub_21FA9A93C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C8E0)
  {
    sub_21FA84A5C(255, (unint64_t *)&unk_25406B8E0, type metadata accessor for PBDeleteBlobsRequest, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA84A5C(255, &qword_25406CB98, (uint64_t (*)(uint64_t))sub_21FA9AA14, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
    sub_21FA84B70(&qword_25406B8D8, (unint64_t *)&unk_25406B8E0, type metadata accessor for PBDeleteBlobsRequest);
    sub_21FA9AA78();
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C8E0);
  }
}

void sub_21FA9AA14()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25406AD70)
  {
    type metadata accessor for PBDeleteBlobs(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25406AD70);
  }
}

unint64_t sub_21FA9AA78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25406CB90;
  if (!qword_25406CB90)
  {
    sub_21FA84A5C(255, &qword_25406CB98, (uint64_t (*)(uint64_t))sub_21FA9AA14, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDBA1D0], v1);
    atomic_store(result, (unint64_t *)&qword_25406CB90);
  }
  return result;
}

void sub_21FA9AAD8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C8E8)
  {
    sub_21FA84A5C(255, &qword_25406B908, type metadata accessor for PBDeleteBlobsResponse, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA9A8A8();
    sub_21FA84B70(&qword_25406B900, &qword_25406B908, type metadata accessor for PBDeleteBlobsResponse);
    sub_21FA2A08C(&qword_25406C878, (uint64_t (*)(uint64_t))sub_21FA9A8A8, MEMORY[0x24BDB98C8]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C8E8);
  }
}

void sub_21FA9ABB4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C7E0)
  {
    sub_21FA84A5C(255, &qword_25406B908, type metadata accessor for PBDeleteBlobsResponse, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA80754(255, (unint64_t *)&qword_25406BA60, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FA84B70(&qword_25406B900, &qword_25406B908, type metadata accessor for PBDeleteBlobsResponse);
    v0 = sub_21FC5B064();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C7E0);
  }
}

void sub_21FA9AC7C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C7B0)
  {
    sub_21FA9ABB4();
    sub_21FA2A08C(&qword_25406C7D8, (uint64_t (*)(uint64_t))sub_21FA9ABB4, MEMORY[0x24BDB96C0]);
    v0 = sub_21FC5B01C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C7B0);
  }
}

void sub_21FA9ACF4(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_21FA80754(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v5 = sub_21FC5B220();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_21FA9AD54(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_21FA80754(255, (unint64_t *)&qword_25406BA60, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v7 = v6;
    v8 = sub_21FA2CDB4();
    v9 = a3(a1, v7, v8, MEMORY[0x24BEE3F20]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_21FA9ADDC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  return swift_deallocObject();
}

uint64_t sub_21FA9AE18(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  return sub_21FA99614(a1, a2, a3, v3 + 16);
}

uint64_t sub_21FA9AE20()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FA9AE44@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v2 + 16);
  sub_21FA9AA14();
  result = v5(a1, *(_QWORD *)(a1 + *(int *)(v6 + 48)), *(_QWORD *)(a1 + *(int *)(v6 + 48) + 8));
  *a2 = result;
  return result;
}

uint64_t sub_21FA9AE90()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_21FA9AEB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21FBE186C(a1, (_QWORD *)(v2 + 16), a2);
}

uint64_t sub_21FA9AECC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FBE1CCC(a1, (_QWORD *)(v2 + 16), a2);
}

uint64_t sub_21FA9AED4(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FA9AD54(255, a2, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_21FA9AF14()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_255540438)
  {
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FA9B05C(255, &qword_255540440, (uint64_t)&type metadata for ClinicalSharingEncryption.BAACertSignature, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    type metadata accessor for PBDeleteBlobsRequest(255);
    sub_21FA9AFCC(&qword_255540448, &qword_255540440, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    v1 = sub_21FC5B0E8();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_255540438);
  }
}

uint64_t sub_21FA9AFCC(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FA9B05C(255, a2, (uint64_t)&type metadata for ClinicalSharingEncryption.BAACertSignature, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FA9B018()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  sub_21FA2D770(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21FA9B04C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  return sub_21FAC1E88(a1, a2, v2 + 2, v2[7], v2[8], v2[9], v2[10]);
}

void sub_21FA9B05C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = sub_21FA2CDB4();
    v9 = a4(a1, a3, v8, MEMORY[0x24BEE3F20]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_21FA9B0C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for PBDeleteBlobs(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_bridgeObjectRelease();
  v4 = v3 + *(int *)(v1 + 20);
  v5 = sub_21FC5AD1C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocObject();
}

uint64_t sub_21FA9B150@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PBDeleteBlobs(0) - 8) + 80);
  return sub_21FA998F0(a1, v2 + ((v5 + 16) & ~v5), a2);
}

void sub_21FA9B1A8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_255540470)
  {
    sub_21FC5AAF4();
    sub_21FA7B51C();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_255540470);
  }
}

void sub_21FA9B21C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, char a5, uint64_t a6, void *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  id v19;

  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = MEMORY[0x24BEE4AF8];
  if ((a5 & 1) != 0)
    v16 = 0;
  else
    v16 = a4;
  sub_21FA5BE58(0, &qword_255540478);
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = sub_21FA5F86C;
  v17[3] = v14;
  v17[4] = v15;
  swift_bridgeObjectRetain();
  swift_retain();
  v18 = a3;
  swift_retain();
  v19 = sub_21FA9B510(a3, 0, v16, a6, (uint64_t)sub_21FA9B504, (uint64_t)v17);
  objc_msgSend(a7, sel_executeQuery_, v19);
  swift_release();

}

uint64_t sub_21FA9B368()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FA9B38C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_21FA9B3B0(int a1, void *a2, int a3, char a4, id a5, void (*a6)(id, uint64_t), uint64_t a7, uint64_t a8)
{
  id v10;
  _QWORD *v13;
  id v14;
  uint64_t v15;

  if (a5)
  {
    v10 = a5;
    a6(a5, 1);

  }
  else
  {
    v13 = (_QWORD *)(a8 + 16);
    if (a2)
    {
      swift_beginAccess();
      v14 = a2;
      MEMORY[0x2207D0180]();
      if (*(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_21FC5B7CC();
      sub_21FC5B7E4();
      sub_21FC5B7C0();
      swift_endAccess();
    }
    if ((a4 & 1) != 0)
    {
      swift_beginAccess();
      v15 = swift_bridgeObjectRetain();
      a6((id)v15, 0);
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_21FA9B4D8()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_21FA9B504(int a1, void *a2, int a3, char a4, void *a5)
{
  uint64_t v5;

  sub_21FA9B3B0(a1, a2, a3, a4, a5, *(void (**)(id, uint64_t))(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32));
}

id sub_21FA9B510(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v11;
  id v12;
  void *v13;
  id v14;
  _QWORD v16[6];

  if (a4)
  {
    sub_21FA5BE58(0, &qword_255540480);
    v11 = (void *)sub_21FC5B79C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0;
  }
  v12 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v16[4] = a5;
  v16[5] = a6;
  v16[0] = MEMORY[0x24BDAC760];
  v16[1] = 1107296256;
  v16[2] = sub_21FA9B634;
  v16[3] = &block_descriptor_2;
  v13 = _Block_copy(v16);
  v14 = objc_msgSend(v12, sel_initWithPredicate_anchor_limit_sortDescriptors_resultsHandler_, a1, a2, a3, v11, v13);

  _Block_release(v13);
  swift_release();
  return v14;
}

void sub_21FA9B634(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  void (*v11)(id, void *, void *, uint64_t, void *);
  id v12;
  id v13;
  id v14;
  id v15;

  v11 = *(void (**)(id, void *, void *, uint64_t, void *))(a1 + 32);
  swift_retain();
  v15 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a6;
  v11(v15, a3, a4, a5, a6);
  swift_release();

}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t sub_21FA9B700@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t result;
  _QWORD *v71;
  _QWORD v72[2];
  _QWORD *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t *v82;
  uint64_t v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;

  v3 = v2;
  v6 = sub_21FC5AD58();
  MEMORY[0x24BDAC7A8](v6);
  v81 = (char *)v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PBRevocationAuthorization();
  v87 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v88 = (uint64_t)v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA9BF2C();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v79 = (uint64_t)v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v86 = (uint64_t)v72 - v13;
  v80 = type metadata accessor for PBDeleteBlob(0);
  v78 = *(_QWORD *)(v80 - 8);
  v14 = MEMORY[0x24BDAC7A8](v80);
  v91 = (uint64_t)v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v72 - v16;
  v18 = MEMORY[0x24BEE4AF8];
  *a2 = MEMORY[0x24BEE4AF8];
  type metadata accessor for PBDeleteBlobs(0);
  v73 = a2;
  sub_21FC5AD10();
  v19 = *(_QWORD *)(a1 + 16);
  if (v19)
  {
    v95 = v18;
    v84 = v19;
    sub_21FC01AAC(0, v19, 0);
    v72[1] = a1;
    v20 = (unint64_t *)(a1 + 56);
    v76 = v17;
    v77 = v8;
    while (1)
    {
      v21 = *(v20 - 2);
      v85 = *(v20 - 3);
      v82 = v20;
      v22 = *(v20 - 1);
      v23 = *v20;
      swift_bridgeObjectRetain();
      sub_21FA32314(v22, v23);
      v24 = v91;
      sub_21FC5AD10();
      v25 = *(int *)(v80 + 20);
      if (qword_25553D710 != -1)
        swift_once();
      *(_QWORD *)(v24 + v25) = qword_255541F58;
      swift_retain();
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v89 = v21;
      v90 = v25;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v27 = *(_QWORD **)(v91 + v25);
        type metadata accessor for PBDeleteBlob._StorageClass(0);
        v28 = (_QWORD *)swift_allocObject();
        v83 = v3;
        v28[2] = 0;
        v28[3] = 0xE000000000000000;
        swift_retain();
        v28[4] = sub_21FC5ACF8();
        v28[5] = v29;
        v74 = (char *)v28
            + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBDeleteBlobP33_10BC46EBE4B3F8F600539A521FA688DE13_StorageClass__revocationAuthorization;
        (*(void (**)(void))(v87 + 56))();
        swift_beginAccess();
        v75 = (char *)v23;
        v30 = v27[2];
        v31 = v27[3];
        swift_beginAccess();
        v28[2] = v30;
        v28[3] = v31;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        v32 = v27[4];
        v33 = v27[5];
        swift_beginAccess();
        v34 = v28[4];
        v35 = v28[5];
        v28[4] = v32;
        v28[5] = v33;
        v36 = v32;
        v3 = v83;
        v37 = v33;
        v23 = (unint64_t)v75;
        sub_21FA32314(v36, v37);
        v38 = v34;
        v8 = v77;
        sub_21FA2D770(v38, v35);
        v39 = (char *)v27
            + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBDeleteBlobP33_10BC46EBE4B3F8F600539A521FA688DE13_StorageClass__revocationAuthorization;
        swift_beginAccess();
        v40 = (uint64_t)v39;
        v41 = v86;
        sub_21FA2D120(v40, v86, (uint64_t (*)(_QWORD))sub_21FA9BF2C);
        v24 = v91;
        swift_release();
        v42 = (uint64_t)v74;
        swift_beginAccess();
        v43 = v41;
        v21 = v89;
        sub_21FA9BF80(v43, v42);
        swift_endAccess();
        *(_QWORD *)(v24 + v90) = v28;
        v25 = v90;
        swift_release();
      }
      v44 = *(_QWORD *)(v24 + v25);
      swift_beginAccess();
      *(_QWORD *)(v44 + 16) = v85;
      *(_QWORD *)(v44 + 24) = v21;
      swift_bridgeObjectRelease();
      v94 = 0;
      v92 = 0u;
      v93 = 0u;
      sub_21FA32314(v22, v23);
      sub_21FC5AD4C();
      sub_21FA9BFC4();
      sub_21FC5AE84();
      if (v3)
        break;
      v85 = v22;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v45 = *(_QWORD **)(v91 + v25);
        type metadata accessor for PBDeleteBlob._StorageClass(0);
        v46 = (_QWORD *)swift_allocObject();
        v46[2] = 0;
        v46[3] = 0xE000000000000000;
        swift_retain();
        v46[4] = sub_21FC5ACF8();
        v46[5] = v47;
        v75 = (char *)v46
            + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBDeleteBlobP33_10BC46EBE4B3F8F600539A521FA688DE13_StorageClass__revocationAuthorization;
        (*(void (**)(void))(v87 + 56))();
        swift_beginAccess();
        v83 = 0;
        v49 = v45[2];
        v48 = v45[3];
        swift_beginAccess();
        v46[2] = v49;
        v46[3] = v48;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        v50 = v45[4];
        v51 = v45[5];
        swift_beginAccess();
        v52 = v46[4];
        v53 = v23;
        v54 = v46[5];
        v46[4] = v50;
        v46[5] = v51;
        v55 = v51;
        v3 = v83;
        sub_21FA32314(v50, v55);
        v56 = v52;
        v8 = v77;
        v57 = v54;
        v23 = v53;
        sub_21FA2D770(v56, v57);
        v58 = (char *)v45
            + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBDeleteBlobP33_10BC46EBE4B3F8F600539A521FA688DE13_StorageClass__revocationAuthorization;
        swift_beginAccess();
        v59 = (uint64_t)v58;
        v60 = v86;
        sub_21FA2D120(v59, v86, (uint64_t (*)(_QWORD))sub_21FA9BF2C);
        v24 = v91;
        swift_release();
        v61 = (uint64_t)v75;
        swift_beginAccess();
        sub_21FA9BF80(v60, v61);
        swift_endAccess();
        *(_QWORD *)(v24 + v90) = v46;
        v25 = v90;
        swift_release();
      }
      v62 = *(_QWORD *)(v24 + v25);
      v63 = v88;
      v64 = v86;
      sub_21FA2D120(v88, v86, (uint64_t (*)(_QWORD))type metadata accessor for PBRevocationAuthorization);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v87 + 56))(v64, 0, 1, v8);
      v65 = v79;
      sub_21FA2D23C(v64, v79, (uint64_t (*)(_QWORD))sub_21FA9BF2C);
      v66 = v62
          + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBDeleteBlobP33_10BC46EBE4B3F8F600539A521FA688DE13_StorageClass__revocationAuthorization;
      swift_beginAccess();
      swift_retain();
      sub_21FA9BF80(v65, v66);
      swift_endAccess();
      swift_release();
      sub_21FA326EC(v63, (uint64_t (*)(_QWORD))type metadata accessor for PBRevocationAuthorization);
      v67 = (uint64_t)v76;
      sub_21FA2D23C(v91, (uint64_t)v76, type metadata accessor for PBDeleteBlob);
      swift_bridgeObjectRelease();
      sub_21FA2D770(v85, v23);
      v18 = v95;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21FC01AAC(0, *(_QWORD *)(v18 + 16) + 1, 1);
        v18 = v95;
      }
      v69 = *(_QWORD *)(v18 + 16);
      v68 = *(_QWORD *)(v18 + 24);
      if (v69 >= v68 >> 1)
      {
        sub_21FC01AAC(v68 > 1, v69 + 1, 1);
        v18 = v95;
      }
      v20 = v82 + 4;
      *(_QWORD *)(v18 + 16) = v69 + 1;
      sub_21FA2D23C(v67, v18+ ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80))+ *(_QWORD *)(v78 + 72) * v69, type metadata accessor for PBDeleteBlob);
      if (!--v84)
        goto LABEL_18;
    }
    sub_21FA326EC(v24, type metadata accessor for PBDeleteBlob);
    swift_bridgeObjectRelease();
    sub_21FA2D770(v22, v23);
    swift_bridgeObjectRelease();
    swift_release();
    return sub_21FA326EC((uint64_t)v73, type metadata accessor for PBDeleteBlobs);
  }
  else
  {
LABEL_18:
    swift_bridgeObjectRelease();
    v71 = v73;
    result = swift_bridgeObjectRelease();
    *v71 = v18;
  }
  return result;
}

void sub_21FA9BF2C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255540488)
  {
    type metadata accessor for PBRevocationAuthorization();
    v0 = sub_21FC5BAA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255540488);
  }
}

uint64_t sub_21FA9BF80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FA9BF2C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_21FA9BFC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2555400D8;
  if (!qword_2555400D8)
  {
    v1 = type metadata accessor for PBRevocationAuthorization();
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBRevocationAuthorization, v1);
    atomic_store(result, (unint64_t *)&qword_2555400D8);
  }
  return result;
}

uint64_t sub_21FA9C00C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  uint64_t (*v33)(void);
  id v34;
  uint64_t v35;
  _QWORD *v36;
  int *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  void *v62;
  void *v63;
  void *v64;
  int *v65;
  uint64_t v66;
  int *v67;
  int *v68;
  int *v69;
  void *v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  id v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(void);
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v92;
  int *v93;
  void (*v94)(char *, uint64_t);
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  int *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;

  v1 = v0;
  sub_21FAA3A14();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = (int *)type metadata accessor for ClinicalSharingMedicalRecordsQuery();
  v117 = *((_QWORD *)v127 - 1);
  MEMORY[0x24BDAC7A8](v127);
  v118 = v7;
  v119 = (uint64_t)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FAA3A80();
  v121 = *(_QWORD *)(v8 - 8);
  v122 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v120 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FAA3B64();
  v11 = v10;
  v124 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v123 = (char *)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_21FC5B8E0();
  v115 = *(_QWORD *)(v116 - 8);
  MEMORY[0x24BDAC7A8](v116);
  v114 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_21FC5AAAC();
  v107 = *(_QWORD *)(v110 - 8);
  MEMORY[0x24BDAC7A8](v110);
  v109 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_21FC5AC08();
  v125 = *(_QWORD **)(v15 - 8);
  v126 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v108 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_21FC5A83C();
  v112 = *(_QWORD *)(v113 - 8);
  v17 = MEMORY[0x24BDAC7A8](v113);
  v111 = (char *)&v92 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v130 = (char *)&v92 - v19;
  sub_21FAA333C(0);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v92 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_21FC5A6C8();
  v128 = *(_QWORD *)(v23 - 8);
  v129 = v23;
  MEMORY[0x24BDAC7A8](v23);
  v131 = (char *)&v92 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA50814();
  v26 = v25;
  v27 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v92 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_21FA9CD7C();
  if (!*(_QWORD *)(v30 + 16))
  {
    swift_bridgeObjectRelease();
    type metadata accessor for ClinicalSharingQueryOutput(0);
    sub_21FA2CDB4();
    sub_21FC5B238();
    sub_21FA2A08C((unint64_t *)&qword_255540568, (uint64_t (*)(uint64_t))sub_21FAA3A14, MEMORY[0x24BDB9E20]);
    v40 = sub_21FC5B280();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return v40;
  }
  v105 = v30;
  v106 = v11;
  sub_21FA2CEA0(*v0 + 16, (uint64_t)&v133);
  v31 = __swift_project_boxed_opaque_existential_1(&v133, v134);
  v32 = (void *)*__swift_project_boxed_opaque_existential_1(v31 + 3, v31[6]);
  *(_QWORD *)(swift_allocObject() + 16) = v32;
  v33 = MEMORY[0x24BDB9E38];
  sub_21FAA3BF8(0, (unint64_t *)&qword_25406B9B8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
  sub_21FAA3C80((unint64_t *)&qword_25406B9B0, (unint64_t *)&qword_25406B9B8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v33, MEMORY[0x24BDB9E58]);
  v34 = v32;
  sub_21FC5B268();
  sub_21FA2A08C(&qword_25406B9D0, (uint64_t (*)(uint64_t))sub_21FA50814, MEMORY[0x24BDB9E90]);
  v104 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v133);
  v35 = v0[2];
  v36 = v0;
  if (v35 == 2)
  {
    v39 = (_QWORD *)MEMORY[0x24BDD2BA0];
    v38 = v128;
    goto LABEL_7;
  }
  v37 = 0;
  v38 = v128;
  if (v35 == 3)
  {
    v39 = (_QWORD *)MEMORY[0x24BDD2BA8];
LABEL_7:
    v37 = (int *)objc_msgSend((id)objc_opt_self(), sel_predicateForDiagnosticTestResultCategory_, *v39);
  }
  sub_21FA2D120((uint64_t)v1 + v127[7], (uint64_t)v22, (uint64_t (*)(_QWORD))sub_21FAA333C);
  v41 = v129;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v22, 1, v129) == 1)
  {
    sub_21FA326EC((uint64_t)v22, (uint64_t (*)(_QWORD))sub_21FAA333C);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v131, v22, v41);
    v42 = *v1 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_gregorianCalendar;
    v103 = (void (*)(char *, uint64_t, uint64_t))v125[2];
    v43 = v108;
    v103(v108, v42, v126);
    sub_21FA2D1A0(0, qword_255540490, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v102 = v44;
    v45 = sub_21FC5ABF0();
    v46 = *(_QWORD *)(v45 - 8);
    v47 = *(_QWORD *)(v46 + 72);
    v48 = *(unsigned __int8 *)(v46 + 80);
    v96 = 2 * v47;
    v101 = ((v48 + 32) & ~v48) + 3 * v47;
    v49 = (v48 + 32) & ~v48;
    v99 = v49;
    v100 = v48 | 7;
    v50 = swift_allocObject();
    v98 = xmmword_21FC60A70;
    *(_OWORD *)(v50 + 16) = xmmword_21FC60A70;
    v51 = v50 + v49;
    v97 = *MEMORY[0x24BDCF240];
    v52 = *(void (**)(uint64_t))(v46 + 104);
    v52(v51);
    v95 = *MEMORY[0x24BDCF250];
    v52(v51 + v47);
    v53 = *MEMORY[0x24BDCF220];
    ((void (*)(uint64_t, uint64_t, uint64_t))v52)(v51 + 2 * v47, v53, v45);
    v93 = v37;
    sub_21FAC98F8(v50);
    v127 = v37;
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    v54 = v109;
    sub_21FC5A6A4();
    sub_21FC5AB48();
    swift_bridgeObjectRelease();
    v107 = *(_QWORD *)(v107 + 8);
    v55 = v110;
    ((void (*)(char *, uint64_t))v107)(v54, v110);
    v94 = (void (*)(char *, uint64_t))v125[1];
    v56 = v126;
    v94(v43, v126);
    v125 = v36;
    v57 = *v36 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_gregorianCalendar;
    v58 = v56;
    v103(v43, v57, v56);
    v59 = swift_allocObject();
    *(_OWORD *)(v59 + 16) = v98;
    v60 = v59 + v99;
    ((void (*)(uint64_t, _QWORD, uint64_t))v52)(v59 + v99, v97, v45);
    ((void (*)(uint64_t, _QWORD, uint64_t))v52)(v60 + v47, v95, v45);
    ((void (*)(uint64_t, uint64_t, uint64_t))v52)(v60 + v96, v53, v45);
    sub_21FAC98F8(v59);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    sub_21FC5A680();
    v61 = v111;
    sub_21FC5AB48();
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v107)(v54, v55);
    v94(v43, v58);
    v62 = (void *)objc_opt_self();
    v63 = (void *)sub_21FC5A7A0();
    v64 = (void *)sub_21FC5A7A0();
    v65 = (int *)objc_msgSend(v62, sel_predicateForRecordsWithSortDateFromStartDateComponents_endDateComponents_, v63, v64);

    if (v127)
    {
      sub_21FA2CEE4();
      v66 = swift_allocObject();
      *(_OWORD *)(v66 + 16) = xmmword_21FC60A80;
      v67 = v93;
      *(_QWORD *)(v66 + 32) = v93;
      *(_QWORD *)(v66 + 40) = v65;
      v133 = v66;
      sub_21FC5B7C0();
      sub_21FA5BE58(0, &qword_255540560);
      v68 = v67;
      v69 = v65;
      v70 = (void *)sub_21FC5B79C();
      swift_bridgeObjectRelease();
      v65 = (int *)objc_msgSend((id)objc_opt_self(), sel_andPredicateWithSubpredicates_, v70);

    }
    v71 = *(void (**)(char *, uint64_t))(v112 + 8);
    v72 = v113;
    v71(v61, v113);
    v71(v130, v72);
    (*(void (**)(char *, uint64_t))(v128 + 8))(v131, v129);
    v37 = v65;
    v36 = v125;
  }
  v127 = v37;
  v73 = v36[1];
  v74 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3E98]), sel_initWithSampleType_predicate_, v73, v37);
  sub_21FBE6F50(0xD000000000000016, 0x800000021FC75D00, v73, 5, 1);
  sub_21FA2CEA0(*v36 + 16, (uint64_t)&v133);
  __swift_project_boxed_opaque_existential_1(&v133, v134);
  sub_21FA2CEE4();
  v75 = swift_allocObject();
  *(_OWORD *)(v75 + 16) = xmmword_21FC5E070;
  *(_QWORD *)(v75 + 32) = v74;
  v132 = v75;
  sub_21FC5B7C0();
  v76 = v74;
  v77 = v114;
  sub_21FC5B8EC();
  sub_21FA2A08C(&qword_25553E0D8, (uint64_t (*)(uint64_t))MEMORY[0x24BE459E0], MEMORY[0x24BE459D8]);
  v78 = v116;
  v79 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v115 + 8))(v77, v78);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v133);
  v133 = v104;
  v132 = v79;
  v80 = MEMORY[0x24BDB9AE0];
  sub_21FAA3BF8(0, &qword_25406B968, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA2CCF4();
  v81 = MEMORY[0x24BDB9AF8];
  sub_21FAA3C80((unint64_t *)&qword_25406B960, &qword_25406B968, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v80, MEMORY[0x24BDB9AF8]);
  sub_21FA2A08C(&qword_25553E0C8, (uint64_t (*)(uint64_t))sub_21FA2CCF4, v81);
  swift_retain();
  swift_retain();
  v82 = v120;
  sub_21FC5B07C();
  v83 = v119;
  sub_21FA2D120((uint64_t)v36, v119, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingMedicalRecordsQuery);
  v84 = (*(unsigned __int8 *)(v117 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80);
  v85 = (v118 + v84 + 7) & 0xFFFFFFFFFFFFFFF8;
  v86 = swift_allocObject();
  sub_21FA2D23C(v83, v86 + v84, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingMedicalRecordsQuery);
  *(_QWORD *)(v86 + v85) = v105;
  v87 = swift_allocObject();
  *(_QWORD *)(v87 + 16) = sub_21FAA3DB0;
  *(_QWORD *)(v87 + 24) = v86;
  type metadata accessor for ClinicalSharingQueryOutput(0);
  sub_21FA2A08C(&qword_255540550, (uint64_t (*)(uint64_t))sub_21FAA3A80, MEMORY[0x24BDB96E0]);
  v88 = v122;
  v89 = v123;
  sub_21FC5B28C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v121 + 8))(v82, v88);
  sub_21FA2A08C(&qword_255540558, (uint64_t (*)(uint64_t))sub_21FAA3B64, MEMORY[0x24BDB94C8]);
  v90 = v106;
  v40 = sub_21FC5B280();

  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v124 + 8))(v89, v90);
  return v40;
}

uint64_t sub_21FA9CD7C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  sub_21FA2D1A0(0, &qword_2555405D8, (uint64_t (*)(uint64_t))MEMORY[0x24BE45940], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = &v13[-v2];
  v4 = sub_21FC5ACD4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_21FBA61A4(v0[2], v3);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_21FA2D1F8((uint64_t)v3, &qword_2555405D8, (uint64_t (*)(uint64_t))MEMORY[0x24BE45940]);
    return MEMORY[0x24BEE4B08];
  }
  else
  {
    v9 = (*(uint64_t (**)(_BYTE *, _QWORD *, uint64_t))(v5 + 32))(v7, v3, v4);
    v10 = *(_QWORD *)(*v0 + 56);
    MEMORY[0x24BDAC7A8](v9);
    *(_QWORD *)&v13[-16] = v7;
    swift_bridgeObjectRetain();
    v11 = sub_21FBE9FC4(MEMORY[0x24BEE4AF8], (void (*)(uint64_t *, char *))sub_21FA85168, (uint64_t)&v13[-32], v10);
    swift_bridgeObjectRelease();
    v8 = sub_21FBF27F0(v11);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v8;
}

uint64_t sub_21FA9CF18@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t Output;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  sub_21FA2D1A0(0, &qword_25553F0A0, type metadata accessor for PBTypedData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v19 - v9;
  v11 = type metadata accessor for PBTypedData(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA9D0BC(a2, a1, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_21FA2D1F8((uint64_t)v10, &qword_25553F0A0, type metadata accessor for PBTypedData);
    Output = type metadata accessor for ClinicalSharingQueryOutput(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Output - 8) + 56))(a4, 1, 1, Output);
  }
  else
  {
    sub_21FA2D23C((uint64_t)v10, (uint64_t)v14, type metadata accessor for PBTypedData);
    sub_21FA2D23C((uint64_t)v14, a4, type metadata accessor for PBTypedData);
    v17 = type metadata accessor for ClinicalSharingQueryOutput(0);
    *(_QWORD *)(a4 + *(int *)(v17 + 20)) = a3;
    v18 = (_QWORD *)(a4 + *(int *)(v17 + 24));
    *v18 = 0;
    v18[1] = 0;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a4, 0, 1, v17);
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_21FA9D0BC@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)();
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (*v112)(unint64_t, uint64_t);
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  void *v118;
  id v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  BOOL v123;
  uint64_t (*v124)(_QWORD, _QWORD, _QWORD);
  uint64_t v125;
  char *v126;
  uint64_t v127;
  void (*v128)(void);
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)();
  void (*v139)(void);
  uint64_t v140;
  uint64_t v141;
  id v142;
  id v143;
  id v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char v158;
  void (*v159)(char *, char *);
  uint64_t v160;
  uint64_t v161;
  id v162;
  id v163;
  id v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  id v185;
  id v186;
  id v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void (*v191)();
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void (*v196)(unint64_t, uint64_t, uint64_t);
  char v197;
  void (*v198)(unint64_t, uint64_t);
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t result;
  uint64_t v227;
  uint64_t v228;
  id v229;
  id v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  char *v239;
  char *v240;
  char *v241;
  _QWORD *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  char *v246;
  void (*v247)();
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  void (*v264)();
  uint64_t v265;
  char *v266;
  void (*v267)(void);
  char *v268;
  void (*v269)();
  char *v270;
  char *v271;
  void (*v272)();
  uint64_t v273;
  char *v274;
  uint64_t *v275;
  uint64_t v276;
  char *v277;
  _QWORD *v278;
  void (*v279)(uint64_t (*)(_QWORD, _QWORD, _QWORD), uint64_t, uint64_t, uint64_t);
  uint64_t v280;
  uint64_t v281;
  char *v282;
  char *v283;
  char *v284;
  char *v285;
  unint64_t v286;
  unint64_t v287;
  void (*v288)(char *, uint64_t, uint64_t);
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  void (*v292)(void (*)(), uint64_t, uint64_t, uint64_t);
  char *v293;
  uint64_t v294;
  unint64_t v295;
  unint64_t v296;

  v243 = a2;
  v257 = a3;
  v4 = type metadata accessor for PBAllClinicalRecords(0);
  MEMORY[0x24BDAC7A8](v4);
  v250 = (uint64_t)&v231 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA850D0(0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v253 = (uint64_t)&v231 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v251 = (uint64_t)&v231 - v9;
  v10 = type metadata accessor for PBTimeSeries(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v231 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA850EC(0);
  MEMORY[0x24BDAC7A8](v13);
  v249 = (uint64_t)&v231 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v256 = type metadata accessor for PBTypedData(0);
  v255 = *(_QWORD *)(v256 - 8);
  MEMORY[0x24BDAC7A8](v256);
  v252 = (uint64_t)&v231 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v248 = type metadata accessor for PBDateRange(0);
  v16 = *(_QWORD *)(v248 - 8);
  MEMORY[0x24BDAC7A8](v248);
  v260 = (uint64_t)&v231 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v280 = type metadata accessor for ClinicalSharingMedicalRecordsQuery();
  v18 = MEMORY[0x24BDAC7A8](v280);
  v20 = (unint64_t)&v231 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v242 = (uint64_t *)((char *)&v231 - v21);
  sub_21FAA3E64(0);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v270 = (char *)&v231 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v286 = (unint64_t)&v231 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v288 = (void (*)(char *, uint64_t, uint64_t))((char *)&v231 - v28);
  v29 = MEMORY[0x24BDAC7A8](v27);
  v245 = (uint64_t *)((char *)&v231 - v30);
  v31 = MEMORY[0x24BDAC7A8](v29);
  v276 = (uint64_t)&v231 - v32;
  v33 = MEMORY[0x24BDAC7A8](v31);
  v275 = (uint64_t *)((char *)&v231 - v34);
  v35 = MEMORY[0x24BDAC7A8](v33);
  v267 = (void (*)(void))((char *)&v231 - v36);
  MEMORY[0x24BDAC7A8](v35);
  v278 = (uint64_t *)((char *)&v231 - v37);
  v294 = sub_21FC5AAAC();
  v282 = *(char **)(v294 - 8);
  v38 = MEMORY[0x24BDAC7A8](v294);
  v241 = (char *)&v231 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = MEMORY[0x24BDAC7A8](v38);
  v240 = (char *)&v231 - v41;
  v42 = MEMORY[0x24BDAC7A8](v40);
  v268 = (char *)&v231 - v43;
  v44 = MEMORY[0x24BDAC7A8](v42);
  v285 = (char *)&v231 - v45;
  v46 = MEMORY[0x24BDAC7A8](v44);
  v274 = (char *)&v231 - v47;
  MEMORY[0x24BDAC7A8](v46);
  v277 = (char *)&v231 - v48;
  sub_21FA8D544();
  v281 = v49;
  v293 = *(char **)(v49 - 8);
  v50 = MEMORY[0x24BDAC7A8](v49);
  v239 = (char *)&v231 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = MEMORY[0x24BDAC7A8](v50);
  v271 = (char *)&v231 - v53;
  v54 = MEMORY[0x24BDAC7A8](v52);
  v262 = (uint64_t)&v231 - v55;
  v56 = MEMORY[0x24BDAC7A8](v54);
  v58 = (unint64_t)&v231 - v57;
  v59 = MEMORY[0x24BDAC7A8](v56);
  v284 = (char *)&v231 - v60;
  v61 = MEMORY[0x24BDAC7A8](v59);
  v283 = (char *)&v231 - v62;
  v63 = MEMORY[0x24BDAC7A8](v61);
  v269 = (void (*)())((char *)&v231 - v64);
  v65 = MEMORY[0x24BDAC7A8](v63);
  v235 = (uint64_t)&v231 - v66;
  v67 = MEMORY[0x24BDAC7A8](v65);
  v234 = (uint64_t)&v231 - v68;
  v69 = MEMORY[0x24BDAC7A8](v67);
  v266 = (char *)&v231 - v70;
  v71 = MEMORY[0x24BDAC7A8](v69);
  v265 = (uint64_t)&v231 - v72;
  v73 = MEMORY[0x24BDAC7A8](v71);
  v246 = (char *)&v231 - v74;
  v75 = MEMORY[0x24BDAC7A8](v73);
  v254 = (char *)&v231 - v76;
  v77 = MEMORY[0x24BDAC7A8](v75);
  v263 = (uint64_t)&v231 - v78;
  v79 = MEMORY[0x24BDAC7A8](v77);
  v273 = (uint64_t)&v231 - v80;
  v81 = MEMORY[0x24BDAC7A8](v79);
  v83 = (void (*)())((char *)&v231 - v82);
  v84 = MEMORY[0x24BDAC7A8](v81);
  v86 = (unint64_t)&v231 - v85;
  v87 = MEMORY[0x24BDAC7A8](v84);
  v272 = (void (*)())((char *)&v231 - v88);
  v89 = MEMORY[0x24BDAC7A8](v87);
  v236 = (uint64_t)&v231 - v90;
  v91 = MEMORY[0x24BDAC7A8](v89);
  v244 = (uint64_t)&v231 - v92;
  v93 = MEMORY[0x24BDAC7A8](v91);
  v292 = (void (*)(void (*)(), uint64_t, uint64_t, uint64_t))((char *)&v231 - v94);
  v95 = MEMORY[0x24BDAC7A8](v93);
  v287 = (unint64_t)&v231 - v96;
  v97 = MEMORY[0x24BDAC7A8](v95);
  v264 = (void (*)())((char *)&v231 - v98);
  MEMORY[0x24BDAC7A8](v97);
  v247 = (void (*)())((char *)&v231 - v99);
  sub_21FAA333C(0);
  v101 = MEMORY[0x24BDAC7A8](v100);
  v102 = MEMORY[0x24BDAC7A8](v101);
  v104 = (unint64_t)&v231 - v103;
  MEMORY[0x24BDAC7A8](v102);
  v107 = (char *)&v231 - v106;
  if (a1 >> 62)
    goto LABEL_115;
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v255 + 56))(v257, 1, 1, v256);
LABEL_3:
  v261 = v58;
  v233 = v105;
  v258 = v107;
  v237 = v16;
  v238 = v12;
  v108 = sub_21FAC1B80(a1);
  if (!v108)
    goto LABEL_122;
  v58 = v108;
  v16 = v280;
  v109 = v259;
  v110 = (uint64_t)v258;
  sub_21FA2D120(v259 + *(int *)(v280 + 28), (uint64_t)v258, (uint64_t (*)(_QWORD))sub_21FAA333C);
  sub_21FA2D120(v110, v104, (uint64_t (*)(_QWORD))sub_21FAA333C);
  v111 = sub_21FC5A6C8();
  v231 = *(_QWORD *)(v111 - 8);
  v112 = *(uint64_t (**)(unint64_t, uint64_t))(v231 + 48);
  v232 = v111;
  v113 = v112(v104, 1);
  sub_21FA326EC(v104, (uint64_t (*)(_QWORD))sub_21FAA333C);
  if (v113 != 1)
    goto LABEL_97;
  v20 = v58 & 0xFFFFFFFFFFFFFF8;
  if (v58 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v114 = sub_21FC5BC7C();
  }
  else
  {
    v114 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
  }
  v12 = v282;
  v115 = (uint64_t)v283;
  v289 = v58;
  v290 = v58 & 0xFFFFFFFFFFFFFF8;
  v291 = v114;
  v107 = v293;
  if (v114)
  {
    v104 = 0;
    a1 = v58 & 0xC000000000000001;
    v116 = v294;
    while (1)
    {
      if (a1)
      {
        v117 = (id)MEMORY[0x2207D057C](v104, v58);
      }
      else
      {
        if (v104 >= *(_QWORD *)(v20 + 16))
          goto LABEL_112;
        v117 = *(id *)(v58 + 8 * v104 + 32);
      }
      v118 = v117;
      v20 = v104 + 1;
      if (__OFADD__(v104, 1))
        goto LABEL_111;
      v119 = objc_msgSend(v117, sel_sortDate);
      v120 = objc_msgSend(v119, sel_date);

      v121 = (uint64_t)v292;
      sub_21FC5AA94();

      (*((void (**)(uint64_t, _QWORD, uint64_t, uint64_t))v12 + 7))(v121, 0, 1, v116);
      v122 = v287;
      sub_21FA2D23C(v121, v287, (uint64_t (*)(_QWORD))sub_21FA8D544);
      if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v12 + 6))(v122, 1, v116) != 1)
        break;
      sub_21FA326EC(v122, (uint64_t (*)(_QWORD))sub_21FA8D544);
      ++v104;
      v123 = v20 == v291;
      v16 = v280;
      v58 = v289;
      v20 = v290;
      v115 = (uint64_t)v283;
      v107 = v293;
      if (v123)
        goto LABEL_18;
    }
    v124 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v278;
    sub_21FA2D23C(v122, (uint64_t)v278, (uint64_t (*)(_QWORD))sub_21FA8D544);
    v126 = v293;
    v125 = v281;
    v279 = (void (*)(uint64_t (*)(_QWORD, _QWORD, _QWORD), uint64_t, uint64_t, uint64_t))*((_QWORD *)v293 + 7);
    v279(v124, 0, 1, v281);
    v16 = v280;
    v58 = v289;
    v115 = (uint64_t)v283;
  }
  else
  {
LABEL_18:
    v124 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v278;
    v125 = v281;
    v279 = (void (*)(uint64_t (*)(_QWORD, _QWORD, _QWORD), uint64_t, uint64_t, uint64_t))*((_QWORD *)v107 + 7);
    v126 = v107;
    v279((uint64_t (*)(_QWORD, _QWORD, _QWORD))v278, 1, 1, v281);
    v20 = v291;
  }
  v127 = (uint64_t)v124;
  v128 = v267;
  sub_21FA2D23C(v127, (uint64_t)v267, (uint64_t (*)(_QWORD))sub_21FAA3E64);
  v278 = (_QWORD *)*((_QWORD *)v126 + 6);
  v129 = ((uint64_t (*)(void (*)(void), uint64_t, uint64_t))v278)(v128, 1, v125);
  a1 = (unint64_t)v288;
  if (v129 == 1)
  {
    v130 = (uint64_t)v264;
    v292 = (void (*)(void (*)(), uint64_t, uint64_t, uint64_t))*((_QWORD *)v12 + 7);
    v292(v264, 1, 1, v294);
    v104 = *((_QWORD *)v12 + 6);
  }
  else
  {
    v131 = (uint64_t)v128;
    v132 = v244;
    sub_21FA2D23C(v131, v244, (uint64_t (*)(_QWORD))sub_21FA8D544);
    v133 = v132;
    v134 = v236;
    sub_21FA2D120(v133, v236, (uint64_t (*)(_QWORD))sub_21FA8D544);
    v293 = (char *)*((_QWORD *)v12 + 6);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v293)(v134, 1, v294) == 1)
    {
LABEL_120:
      __break(1u);
      goto LABEL_121;
    }
    v130 = (uint64_t)v264;
    v135 = v134;
    v136 = v294;
    (*((void (**)(void (*)(), uint64_t, uint64_t))v12 + 4))(v264, v135, v294);
    sub_21FA326EC(v244, (uint64_t (*)(_QWORD))sub_21FA8D544);
    v292 = (void (*)(void (*)(), uint64_t, uint64_t, uint64_t))*((_QWORD *)v12 + 7);
    v292((void (*)())v130, 0, 1, v136);
    v104 = (unint64_t)v293;
  }
  v293 = (char *)v104;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v104)(v130, 1, v294) != 1)
  {
    v139 = (void (*)(void))*((_QWORD *)v12 + 4);
    ((void (*)(char *, uint64_t, uint64_t))v139)(v277, v130, v294);
    v287 = v58 & 0xC000000000000001;
    v16 = v291;
    v267 = v139;
    v264 = v83;
    while (v20 == v16)
    {
LABEL_30:
      v140 = (uint64_t)v275;
      v141 = v281;
      v279((uint64_t (*)(_QWORD, _QWORD, _QWORD))v275, 1, 1, v281);
      v20 = v16;
LABEL_42:
      v146 = v140;
      v147 = v276;
      sub_21FA2D23C(v146, v276, (uint64_t (*)(_QWORD))sub_21FAA3E64);
      v148 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v278)(v147, 1, v141);
      v149 = v273;
      if (v148 == 1)
      {
        v150 = (uint64_t)v272;
        v292(v272, 1, 1, v294);
        v151 = v277;
        v152 = v274;
      }
      else
      {
        sub_21FA2D23C(v147, v273, (uint64_t (*)(_QWORD))sub_21FA8D544);
        v153 = v263;
        sub_21FA2D120(v149, v263, (uint64_t (*)(_QWORD))sub_21FA8D544);
        v154 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v293)(v153, 1, v294);
        v152 = v274;
        if (v154 == 1)
        {
          __break(1u);
LABEL_119:
          __break(1u);
          goto LABEL_120;
        }
        v150 = (uint64_t)v272;
        v155 = v294;
        v139();
        sub_21FA326EC(v149, (uint64_t (*)(_QWORD))sub_21FA8D544);
        v292((void (*)())v150, 0, 1, v155);
        v151 = v277;
      }
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v293)(v150, 1, v294) == 1)
      {
        swift_bridgeObjectRelease();
        sub_21FA326EC(v150, (uint64_t (*)(_QWORD))sub_21FA8D544);
        v138 = v247;
        ((void (*)(void (*)(), char *, uint64_t))v267)(v247, v151, v294);
        v137 = 0;
        v16 = v280;
        v12 = v282;
        v115 = (uint64_t)v283;
        goto LABEL_50;
      }
      v156 = v150;
      v12 = (char *)v294;
      v139 = v267;
      ((void (*)(char *, uint64_t, uint64_t))v267)(v152, v156, v294);
      sub_21FA2A08C((unint64_t *)&qword_255540578, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
      v157 = v152;
      v104 = (unint64_t)v151;
      v158 = sub_21FC5B5BC();
      v159 = (void (*)(char *, char *))*((_QWORD *)v282 + 1);
      if ((v158 & 1) != 0)
      {
        v159(v151, v12);
        ((void (*)(char *, char *, char *))v139)(v151, v157, v12);
      }
      else
      {
        v159(v157, v12);
      }
      v83 = v264;
    }
    while (1)
    {
      if (v287)
      {
        v142 = (id)MEMORY[0x2207D057C](v20, v58);
      }
      else
      {
        if ((v20 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_106:
          __break(1u);
LABEL_107:
          __break(1u);
LABEL_108:
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          v258 = v107;
          v261 = v58;
          v227 = v105;
          swift_bridgeObjectRetain();
          v228 = sub_21FC5BC7C();
          swift_bridgeObjectRelease();
          v105 = v227;
          v58 = v261;
          v107 = v258;
          if (!v228)
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v255 + 56))(v257, 1, 1, v256);
          goto LABEL_3;
        }
        if (v20 >= *(_QWORD *)(v290 + 16))
          goto LABEL_107;
        v142 = *(id *)(v58 + 8 * v20 + 32);
      }
      v104 = (unint64_t)v142;
      a1 = v20 + 1;
      if (__OFADD__(v20, 1))
        goto LABEL_106;
      v143 = objc_msgSend(v142, sel_sortDate);
      v144 = objc_msgSend(v143, sel_date);

      sub_21FC5AA94();
      v145 = v294;
      v292(v83, 0, 1, v294);

      v104 = (unint64_t)sub_21FA8D544;
      sub_21FA2D23C((uint64_t)v83, v86, (uint64_t (*)(_QWORD))sub_21FA8D544);
      if (((unsigned int (*)(unint64_t, uint64_t, uint64_t))v293)(v86, 1, v145) != 1)
      {
        v140 = (uint64_t)v275;
        sub_21FA2D23C(v86, (uint64_t)v275, (uint64_t (*)(_QWORD))sub_21FA8D544);
        v141 = v281;
        v279((uint64_t (*)(_QWORD, _QWORD, _QWORD))v140, 0, 1, v281);
        ++v20;
        a1 = (unint64_t)v288;
        v58 = v289;
        v16 = v291;
        goto LABEL_42;
      }
      sub_21FA326EC(v86, (uint64_t (*)(_QWORD))sub_21FA8D544);
      ++v20;
      v16 = v291;
      v123 = a1 == v291;
      a1 = (unint64_t)v288;
      v58 = v289;
      if (v123)
        goto LABEL_30;
    }
  }
  swift_bridgeObjectRelease();
  sub_21FA326EC(v130, (uint64_t (*)(_QWORD))sub_21FA8D544);
  v137 = 1;
  v138 = v247;
LABEL_50:
  v160 = 1;
  v292(v138, v137, 1, v294);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  v86 = v291;
  v20 = (unint64_t)v293;
  if (v291)
  {
    v104 = 0;
    v12 = (char *)(v58 & 0xC000000000000001);
    v83 = sub_21FA8D544;
    v161 = v294;
    while (1)
    {
      if (v12)
      {
        v162 = (id)MEMORY[0x2207D057C](v104, v58);
      }
      else
      {
        if (v104 >= *(_QWORD *)(v290 + 16))
          goto LABEL_114;
        v162 = *(id *)(v58 + 8 * v104 + 32);
      }
      a1 = (unint64_t)v162;
      v86 = v104 + 1;
      if (__OFADD__(v104, 1))
        goto LABEL_113;
      v163 = objc_msgSend(v162, sel_sortDate);
      v164 = objc_msgSend(v163, sel_date);

      v165 = (uint64_t)v266;
      sub_21FC5AA94();

      v292((void (*)())v165, 0, 1, v161);
      v166 = v265;
      sub_21FA2D23C(v165, v265, (uint64_t (*)(_QWORD))sub_21FA8D544);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v20)(v166, 1, v161) != 1)
      {
        sub_21FA2D23C(v166, (uint64_t)v245, (uint64_t (*)(_QWORD))sub_21FA8D544);
        v160 = 0;
        v16 = v280;
        v12 = v282;
        v115 = (uint64_t)v283;
        a1 = (unint64_t)v288;
        break;
      }
      sub_21FA326EC(v166, (uint64_t (*)(_QWORD))sub_21FA8D544);
      ++v104;
      v16 = v280;
      v115 = (uint64_t)v283;
      a1 = (unint64_t)v288;
      if (v86 == v291)
      {
        v160 = 1;
        v86 = v291;
        v12 = v282;
        break;
      }
    }
  }
  v167 = 1;
  v168 = (uint64_t)v245;
  v169 = v160;
  v170 = v281;
  v279((uint64_t (*)(_QWORD, _QWORD, _QWORD))v245, v169, 1, v281);
  sub_21FA2D23C(v168, a1, (uint64_t (*)(_QWORD))sub_21FAA3E64);
  v171 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v278)(a1, 1, v170);
  v20 = (unint64_t)v293;
  if (v171 == 1)
    goto LABEL_64;
  v172 = a1;
  v173 = v234;
  sub_21FA2D23C(v172, v234, (uint64_t (*)(_QWORD))sub_21FA8D544);
  v174 = v235;
  sub_21FA2D120(v173, v235, (uint64_t (*)(_QWORD))sub_21FA8D544);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v20)(v174, 1, v294) == 1)
  {
LABEL_121:
    __break(1u);
LABEL_122:
    sub_21FA2D120(v259, v20, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingMedicalRecordsQuery);
    v295 = 0;
    v296 = 0xE000000000000000;
    sub_21FC5BB74();
    swift_bridgeObjectRelease();
    v295 = 0xD000000000000023;
    v296 = 0x800000021FC74BF0;
    v229 = *(id *)(v20 + 8);
    v230 = objc_msgSend(v229, sel_description);
    sub_21FC5B604();

    sub_21FC5B6AC();
    swift_bridgeObjectRelease();
    result = sub_21FC5BC70();
    __break(1u);
    return result;
  }
  (*((void (**)(char *, uint64_t, uint64_t))v12 + 4))(v246, v174, v294);
  sub_21FA326EC(v173, (uint64_t (*)(_QWORD))sub_21FA8D544);
  v167 = 0;
LABEL_64:
  v175 = (uint64_t)v246;
  v176 = v167;
  v177 = v294;
  v292((void (*)())v246, v176, 1, v294);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v20)(v175, 1, v177) == 1)
  {
    swift_bridgeObjectRelease();
    sub_21FA326EC(v175, (uint64_t (*)(_QWORD))sub_21FA8D544);
    v178 = 1;
    v179 = (uint64_t)v254;
    v180 = (uint64_t)v271;
    v181 = (uint64_t)v247;
  }
  else
  {
    v288 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v12 + 4);
    v20 = (unint64_t)v285;
    v288(v285, v175, v294);
    v104 = v58 & 0xC000000000000001;
    v83 = sub_21FA8D544;
    v12 = v270;
    a1 = v286;
    v287 = v58 & 0xC000000000000001;
    v182 = v294;
    while (1)
    {
      v183 = v291;
      if (v86 == v291)
      {
LABEL_70:
        v86 = v183;
        v184 = v281;
        v279((uint64_t (*)(_QWORD, _QWORD, _QWORD))a1, 1, 1, v281);
      }
      else
      {
        while (1)
        {
          if (v104)
          {
            v185 = (id)MEMORY[0x2207D057C](v86, v58);
          }
          else
          {
            if ((v86 & 0x8000000000000000) != 0)
              goto LABEL_108;
            if (v86 >= *(_QWORD *)(v290 + 16))
              goto LABEL_110;
            v185 = *(id *)(v58 + 8 * v86 + 32);
          }
          a1 = (unint64_t)v185;
          v20 = v86 + 1;
          if (__OFADD__(v86, 1))
            goto LABEL_109;
          v186 = objc_msgSend(v185, sel_sortDate);
          v187 = objc_msgSend(v186, sel_date);

          v16 = (uint64_t)v284;
          sub_21FC5AA94();

          v292((void (*)())v16, 0, 1, v182);
          sub_21FA2D23C(v16, v115, (uint64_t (*)(_QWORD))sub_21FA8D544);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v293)(v115, 1, v182) != 1)
            break;
          sub_21FA326EC(v115, (uint64_t (*)(_QWORD))sub_21FA8D544);
          ++v86;
          v183 = v291;
          v123 = v20 == v291;
          v20 = (unint64_t)v285;
          a1 = v286;
          v58 = v289;
          if (v123)
            goto LABEL_70;
        }
        a1 = v286;
        sub_21FA2D23C(v115, v286, (uint64_t (*)(_QWORD))sub_21FA8D544);
        v184 = v281;
        v279((uint64_t (*)(_QWORD, _QWORD, _QWORD))a1, 0, 1, v281);
        ++v86;
        v20 = (unint64_t)v285;
        v58 = v289;
      }
      sub_21FA2D23C(a1, (uint64_t)v12, (uint64_t (*)(_QWORD))sub_21FAA3E64);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v278)(v12, 1, v184) == 1)
      {
        v188 = (uint64_t)v269;
        v292(v269, 1, 1, v294);
        v180 = (uint64_t)v271;
      }
      else
      {
        v189 = v261;
        sub_21FA2D23C((uint64_t)v12, v261, (uint64_t (*)(_QWORD))sub_21FA8D544);
        v190 = v262;
        sub_21FA2D120(v189, v262, (uint64_t (*)(_QWORD))sub_21FA8D544);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v293)(v190, 1, v294) == 1)
          goto LABEL_119;
        v191 = v269;
        v192 = v190;
        v193 = v294;
        v288((char *)v269, v192, v294);
        v194 = v189;
        v188 = (uint64_t)v191;
        sub_21FA326EC(v194, (uint64_t (*)(_QWORD))sub_21FA8D544);
        v292(v191, 0, 1, v193);
        v180 = (uint64_t)v271;
        v115 = (uint64_t)v283;
      }
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v293)(v188, 1, v294) == 1)
        break;
      v195 = v188;
      v16 = (uint64_t)v268;
      v196 = (void (*)(unint64_t, uint64_t, uint64_t))v288;
      v288(v268, v195, v294);
      sub_21FA2A08C((unint64_t *)&qword_255540578, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
      v197 = sub_21FC5B5BC();
      v198 = (void (*)(unint64_t, uint64_t))*((_QWORD *)v282 + 1);
      if ((v197 & 1) != 0)
      {
        v199 = v294;
        v198(v20, v294);
        v196(v20, v16, v199);
      }
      else
      {
        v198(v16, v294);
      }
      v12 = v270;
      v104 = v287;
    }
    swift_bridgeObjectRelease();
    sub_21FA326EC(v188, (uint64_t (*)(_QWORD))sub_21FA8D544);
    v179 = (uint64_t)v254;
    v288(v254, v20, v294);
    v178 = 0;
    v16 = v280;
    v181 = (uint64_t)v247;
    v20 = (unint64_t)v293;
  }
  v200 = v179;
  v201 = v294;
  v292((void (*)())v200, v178, 1, v294);
  swift_bridgeObjectRelease();
  sub_21FA2D120(v181, v180, (uint64_t (*)(_QWORD))sub_21FA8D544);
  v202 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v20)(v180, 1, v201);
  v203 = v259;
  v204 = v180;
  v205 = v241;
  v206 = (uint64_t)v239;
  if (v202 == 1)
  {
    sub_21FC5AA10();
    sub_21FA326EC(v204, (uint64_t (*)(_QWORD))sub_21FA8D544);
  }
  else
  {
    (*((void (**)(char *, uint64_t, uint64_t))v282 + 4))(v240, v204, v294);
  }
  sub_21FA2D120((uint64_t)v254, v206, (uint64_t (*)(_QWORD))sub_21FA8D544);
  v207 = v203;
  v208 = v242;
  sub_21FA2D120(v207, (uint64_t)v242, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingMedicalRecordsQuery);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v20)(v206, 1, v294) == 1)
  {
    (*((void (**)(char *, uint64_t, uint64_t))v282 + 2))(v205, *v208 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_date, v294);
    sub_21FA326EC(v206, (uint64_t (*)(_QWORD))sub_21FA8D544);
  }
  else
  {
    (*((void (**)(char *, uint64_t, uint64_t))v282 + 4))(v205, v206, v294);
  }
  sub_21FA326EC((uint64_t)v208, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingMedicalRecordsQuery);
  v209 = v233;
  sub_21FC5A68C();
  sub_21FA326EC((uint64_t)v254, (uint64_t (*)(_QWORD))sub_21FA8D544);
  sub_21FA326EC(v181, (uint64_t (*)(_QWORD))sub_21FA8D544);
  v110 = (uint64_t)v258;
  sub_21FA326EC((uint64_t)v258, (uint64_t (*)(_QWORD))sub_21FAA333C);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v231 + 56))(v209, 0, 1, v232);
  sub_21FA2D23C(v209, v110, (uint64_t (*)(_QWORD))sub_21FAA333C);
  v109 = v259;
LABEL_97:
  v210 = v260;
  sub_21FBE7E8C(5, 1, v110);
  v211 = v210;
  v212 = v249;
  sub_21FA2D120(v211, v249, type metadata accessor for PBDateRange);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v237 + 56))(v212, 0, 1, v248);
  v213 = v252;
  sub_21FA9ED90(v212, v252);
  sub_21FA326EC(v212, (uint64_t (*)(_QWORD))sub_21FA850EC);
  v214 = *(unsigned __int8 *)(v109 + *(int *)(v16 + 32));
  if (v214 == 4)
  {
    sub_21FA9F118(v58, v243, *(void **)(v109 + 8), v250);
    swift_bridgeObjectRelease();
    v215 = v256;
    v216 = *(int *)(v256 + 20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBTypedData._StorageClass(0);
      swift_allocObject();
      v217 = swift_retain();
      *(_QWORD *)(v213 + v216) = sub_21FA3A458(v217);
      swift_release();
    }
    v218 = *(_QWORD *)(v213 + v216);
    v219 = v251;
    sub_21FA2D23C(v250, v251, type metadata accessor for PBAllClinicalRecords);
    v220 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  }
  else
  {
    sub_21FAD5A04(v58, *(void **)(v109 + 8), v214, (uint64_t)v238);
    swift_bridgeObjectRelease();
    v215 = v256;
    v221 = *(int *)(v256 + 20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBTypedData._StorageClass(0);
      swift_allocObject();
      v222 = swift_retain();
      *(_QWORD *)(v213 + v221) = sub_21FA3A458(v222);
      swift_release();
    }
    v218 = *(_QWORD *)(v213 + v221);
    v219 = v251;
    sub_21FA2D23C((uint64_t)v238, v251, type metadata accessor for PBTimeSeries);
    v220 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  }
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v220 - 8) + 56))(v219, 0, 1, v220);
  v223 = v253;
  sub_21FA2D23C(v219, v253, (uint64_t (*)(_QWORD))sub_21FA850D0);
  v224 = v218
       + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  swift_retain();
  sub_21FA85108(v223, v224, (uint64_t (*)(_QWORD))sub_21FA850D0);
  swift_endAccess();
  swift_release();
  sub_21FA326EC(v260, type metadata accessor for PBDateRange);
  sub_21FA326EC((uint64_t)v258, (uint64_t (*)(_QWORD))sub_21FAA333C);
  v225 = v257;
  sub_21FA2D23C(v213, v257, type metadata accessor for PBTypedData);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v255 + 56))(v225, 0, 1, v215);
}

void sub_21FA9ED90(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD v13[4];

  v13[3] = a1;
  sub_21FA850EC(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v13[2] = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  MEMORY[0x24BDAC7A8](v7);
  v8 = type metadata accessor for PBDateRange(0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v13[1] = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  sub_21FC5AD10();
  v11 = *(int *)(type metadata accessor for PBTypedData(0) + 20);
  if (qword_25553D590 != -1)
    swift_once();
  *(_QWORD *)(a2 + v11) = qword_25553E450;
  v12 = (char *)&loc_21FA9EEDC
      + 4
      * byte_21FC60A90[*(unsigned __int8 *)(v2
                                          + *(int *)(type metadata accessor for ClinicalSharingMedicalRecordsQuery() + 32))];
  __asm { BR              X10 }
}

uint64_t sub_21FA9F118@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  void (*v16)(char **);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  id v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[8];
  unint64_t v31;
  unint64_t v32;

  v9 = type metadata accessor for PBAllClinicalRecords(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (uint64_t *)&v30[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v12 = sub_21FAC1B44(a1);
    if (v12)
      v13 = v12;
    else
      v13 = MEMORY[0x24BEE4AF8];
    *v11 = MEMORY[0x24BEE4AF8];
    v14 = sub_21FC5AD10();
    MEMORY[0x24BDAC7A8](v14);
    v15 = &v30[-32];
    v28 = v4;
    v29 = a2;
    v16 = (void (*)(char **))sub_21FAA425C;
LABEL_26:
    v25 = sub_21FAA3E88(v13, v16, (uint64_t)v15);
    swift_bridgeObjectRelease();
    *v11 = v25;
    sub_21FA2D23C((uint64_t)v11, a4, type metadata accessor for PBAllClinicalRecords);
    return swift_bridgeObjectRelease();
  }
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v17 = sub_21FAC1B50(a1);
    if (v17)
      v13 = v17;
    else
      v13 = MEMORY[0x24BEE4AF8];
    *v11 = MEMORY[0x24BEE4AF8];
    v18 = sub_21FC5AD10();
    MEMORY[0x24BDAC7A8](v18);
    v15 = &v30[-32];
    v28 = v4;
    v29 = a2;
    v16 = (void (*)(char **))sub_21FAA4254;
    goto LABEL_26;
  }
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v19 = sub_21FAC1B5C(a1);
    if (v19)
      v13 = v19;
    else
      v13 = MEMORY[0x24BEE4AF8];
    *v11 = MEMORY[0x24BEE4AF8];
    v20 = sub_21FC5AD10();
    MEMORY[0x24BDAC7A8](v20);
    v15 = &v30[-32];
    v28 = v4;
    v29 = a2;
    v16 = (void (*)(char **))sub_21FAA424C;
    goto LABEL_26;
  }
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v21 = sub_21FAC1B68(a1);
    if (v21)
      v13 = v21;
    else
      v13 = MEMORY[0x24BEE4AF8];
    *v11 = MEMORY[0x24BEE4AF8];
    v22 = sub_21FC5AD10();
    MEMORY[0x24BDAC7A8](v22);
    v15 = &v30[-32];
    v28 = v4;
    v29 = a2;
    v16 = (void (*)(char **))sub_21FAA4244;
    goto LABEL_26;
  }
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v23 = sub_21FAC1B74(a1);
    if (v23)
      v13 = v23;
    else
      v13 = MEMORY[0x24BEE4AF8];
    *v11 = MEMORY[0x24BEE4AF8];
    v24 = sub_21FC5AD10();
    MEMORY[0x24BDAC7A8](v24);
    v15 = &v30[-32];
    v28 = v4;
    v29 = a2;
    v16 = (void (*)(char **))sub_21FAA3E80;
    goto LABEL_26;
  }
  v31 = 0;
  v32 = 0xE000000000000000;
  sub_21FC5BB74();
  swift_bridgeObjectRelease();
  v31 = 0xD000000000000019;
  v32 = 0x800000021FC75D60;
  v27 = objc_msgSend(a3, sel_description);
  sub_21FC5B604();

  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  result = sub_21FC5BC70();
  __break(1u);
  return result;
}

uint64_t sub_21FA9F4E0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59[16];
  uint64_t v60;
  char v61;

  sub_21FAA4264(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v54 - v8;
  v10 = type metadata accessor for PBHKInspectableValue(0);
  v57 = *(_QWORD *)(v10 - 8);
  v58 = v10;
  v11 = MEMORY[0x24BDAC7A8](v10);
  v55 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v54 = (uint64_t)&v54 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v54 - v15;
  sub_21FC5AD10();
  v17 = *(int *)(type metadata accessor for PBHKInspectableValueCollection(0) + 20);
  if (qword_25553D9B8 != -1)
    swift_once();
  *(_QWORD *)(a2 + v17) = qword_255543CF0;
  swift_retain();
  sub_21FAC5AE8((uint64_t)&v60);
  v18 = v60;
  v19 = v61;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKInspectableValueCollection._StorageClass(0);
    swift_allocObject();
    v20 = swift_retain();
    *(_QWORD *)(a2 + v17) = sub_21FB6DBA8(v20);
    swift_release();
  }
  v21 = *(_QWORD *)(a2 + v17);
  swift_beginAccess();
  *(_QWORD *)(v21 + 16) = v18;
  *(_BYTE *)(v21 + 24) = v19;
  v22 = objc_msgSend(a1, sel_inspectableValue);
  v23 = v56;
  if (v22)
  {
    v24 = v22;
    sub_21FA9FB9C(v22, (uint64_t)v16);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKInspectableValueCollection._StorageClass(0);
      swift_allocObject();
      v25 = swift_retain();
      *(_QWORD *)(a2 + v17) = sub_21FB6DBA8(v25);
      swift_release();
    }
    v26 = *(_QWORD *)(a2 + v17);
    sub_21FA2D23C((uint64_t)v16, (uint64_t)v9, type metadata accessor for PBHKInspectableValue);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v9, 0, 1, v58);
    sub_21FA2D23C((uint64_t)v9, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_21FAA4264);
    v27 = v26
        + OBJC_IVAR____TtCV19HealthRecordsDaemon30PBHKInspectableValueCollectionP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__value;
    swift_beginAccess();
    swift_retain();
    sub_21FA85108((uint64_t)v7, v27, (uint64_t (*)(_QWORD))sub_21FAA4264);
    swift_endAccess();

    swift_release();
  }
  v28 = objc_msgSend(a1, sel_min);
  v29 = (uint64_t)v55;
  if (v28)
  {
    v30 = v28;
    v31 = v54;
    sub_21FA9FB9C(v28, v54);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKInspectableValueCollection._StorageClass(0);
      swift_allocObject();
      v32 = swift_retain();
      v31 = v54;
      *(_QWORD *)(a2 + v17) = sub_21FB6DBA8(v32);
      swift_release();
    }
    v33 = *(_QWORD *)(a2 + v17);
    sub_21FA2D23C(v31, (uint64_t)v9, type metadata accessor for PBHKInspectableValue);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v9, 0, 1, v58);
    sub_21FA2D23C((uint64_t)v9, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_21FAA4264);
    v34 = v33
        + OBJC_IVAR____TtCV19HealthRecordsDaemon30PBHKInspectableValueCollectionP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__min;
    swift_beginAccess();
    swift_retain();
    sub_21FA85108((uint64_t)v7, v34, (uint64_t (*)(_QWORD))sub_21FAA4264);
    swift_endAccess();

    swift_release();
    v23 = v56;
  }
  v35 = objc_msgSend(a1, sel_max);
  if (v35)
  {
    v36 = v35;
    sub_21FA9FB9C(v35, v29);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKInspectableValueCollection._StorageClass(0);
      swift_allocObject();
      v37 = swift_retain();
      *(_QWORD *)(a2 + v17) = sub_21FB6DBA8(v37);
      swift_release();
    }
    v38 = *(_QWORD *)(a2 + v17);
    sub_21FA2D23C(v29, (uint64_t)v9, type metadata accessor for PBHKInspectableValue);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v9, 0, 1, v58);
    sub_21FA2D23C((uint64_t)v9, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_21FAA4264);
    v39 = v38
        + OBJC_IVAR____TtCV19HealthRecordsDaemon30PBHKInspectableValueCollectionP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__max;
    swift_beginAccess();
    swift_retain();
    sub_21FA85108((uint64_t)v7, v39, (uint64_t (*)(_QWORD))sub_21FAA4264);
    swift_endAccess();

    swift_release();
  }
  v40 = objc_msgSend(a1, sel_inspectableValues);
  if (v40)
  {
    v41 = v40;
    sub_21FA5BE58(0, &qword_255540588);
    v42 = sub_21FC5B7A8();

    MEMORY[0x24BDAC7A8](v43);
    *(&v54 - 2) = v23;
    v44 = sub_21FC41D58((void (*)(id *))sub_21FAA4280, (uint64_t)(&v54 - 4), v42, (uint64_t)v59);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKInspectableValueCollection._StorageClass(0);
      swift_allocObject();
      v45 = swift_retain();
      *(_QWORD *)(a2 + v17) = sub_21FB6DBA8(v45);
      swift_release();
    }
    v46 = (uint64_t *)(*(_QWORD *)(a2 + v17)
                    + OBJC_IVAR____TtCV19HealthRecordsDaemon30PBHKInspectableValueCollectionP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__inspectableValues);
    swift_beginAccess();
    *v46 = v44;
    swift_bridgeObjectRelease();
  }
  v47 = objc_msgSend(a1, sel_unitString);
  v48 = sub_21FC5B604();
  v50 = v49;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKInspectableValueCollection._StorageClass(0);
    swift_allocObject();
    v51 = swift_retain();
    *(_QWORD *)(a2 + v17) = sub_21FB6DBA8(v51);
    swift_release();
  }
  v52 = (uint64_t *)(*(_QWORD *)(a2 + v17)
                  + OBJC_IVAR____TtCV19HealthRecordsDaemon30PBHKInspectableValueCollectionP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__unitString);
  swift_beginAccess();
  *v52 = v48;
  v52[1] = v50;
  return swift_bridgeObjectRelease();
}

uint64_t sub_21FA9FB9C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  id v89;
  uint64_t v90;
  char *v91;
  id v92;
  void *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  id v102;
  uint64_t v103;
  void *v104;
  id v105;
  id v106;
  void *v107;
  _QWORD *v108;
  void *v109;
  id v110;
  uint64_t v111;
  void (*v112)(uint64_t, _QWORD, uint64_t, uint64_t);
  void *v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  void *v125;
  char *v126;
  void (*v127)(char *, char *, uint64_t);
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  id v133;
  void *v134;
  id v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  id v141;
  void *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t result;
  uint64_t v146;
  _QWORD *v147;
  id v148;
  void *v149;
  id v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  id v158;
  void *v159;
  id v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  _QWORD *v167;
  id v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  id v178;
  void *v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  id v184;
  void *v185;
  id v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  _QWORD *v195;
  id v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  id v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  char *v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  char *v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  uint64_t *v243;
  void *v244;
  uint64_t v245;
  char v246[8];
  uint64_t v247;
  char v248;

  sub_21FAA42AC(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v240 = (uint64_t)&v213 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v239 = (uint64_t)&v213 - v7;
  v238 = type metadata accessor for PBHKConcept(0);
  v237 = *(_QWORD *)(v238 - 8);
  v8 = MEMORY[0x24BDAC7A8](v238);
  v223 = (uint64_t)&v213 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v224 = (uint64_t)&v213 - v10;
  sub_21FA2D1A0(0, &qword_255540598, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v11);
  v232 = (char *)&v213 - v12;
  v233 = sub_21FC5A83C();
  v242 = *(_QWORD *)(v233 - 8);
  v13 = MEMORY[0x24BDAC7A8](v233);
  v231 = (char *)&v213 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v222 = (char *)&v213 - v15;
  sub_21FA850EC(0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v220 = (uint64_t)&v213 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v219 = (uint64_t)&v213 - v19;
  sub_21FA8D544();
  v21 = MEMORY[0x24BDAC7A8](v20);
  v234 = (char *)&v213 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v215 = (char *)&v213 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v214 = (char *)&v213 - v25;
  v218 = type metadata accessor for PBDateRange(0);
  v217 = *(_QWORD *)(v218 - 8);
  MEMORY[0x24BDAC7A8](v218);
  v216 = (char *)&v213 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v235 = sub_21FC5AAAC();
  v236 = *(_QWORD *)(v235 - 8);
  v27 = MEMORY[0x24BDAC7A8](v235);
  v221 = (char *)&v213 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v230 = (char *)&v213 - v29;
  sub_21FAA42C8(0);
  v31 = MEMORY[0x24BDAC7A8](v30);
  v229 = (uint64_t)&v213 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v228 = (uint64_t)&v213 - v33;
  v241 = (_QWORD *)type metadata accessor for PBHKRatioValue(0);
  v227 = *(v241 - 1);
  MEMORY[0x24BDAC7A8](v241);
  v35 = (uint64_t *)((char *)&v213 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_21FAA42E4(0);
  v37 = MEMORY[0x24BDAC7A8](v36);
  v245 = (uint64_t)&v213 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v37);
  v40 = (char *)&v213 - v39;
  v226 = type metadata accessor for PBHKCodedQuantity(0);
  v225 = *(_QWORD *)(v226 - 8);
  MEMORY[0x24BDAC7A8](v226);
  v42 = (char *)&v213 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC5AD10();
  v43 = *(int *)(type metadata accessor for PBHKInspectableValue(0) + 20);
  if (qword_25553D9C8 != -1)
    swift_once();
  *(_QWORD *)(a2 + v43) = qword_255543D10;
  swift_retain();
  sub_21FADC41C((uint64_t)&v247);
  v44 = v247;
  v45 = v248;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKInspectableValue._StorageClass(0);
    swift_allocObject();
    v46 = swift_retain();
    *(_QWORD *)(a2 + v43) = sub_21FB6F994(v46);
    swift_release();
  }
  v47 = *(_QWORD *)(a2 + v43);
  swift_beginAccess();
  *(_QWORD *)(v47 + 16) = v44;
  *(_BYTE *)(v47 + 24) = v45;
  v48 = objc_msgSend(a1, sel_stringValue);
  v244 = a1;
  if (v48)
  {
    v49 = v48;
    v50 = sub_21FC5B604();
    v52 = v51;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKInspectableValue._StorageClass(0);
      swift_allocObject();
      v53 = swift_retain();
      *(_QWORD *)(a2 + v43) = sub_21FB6F994(v53);
      swift_release();
    }
    v54 = *(_QWORD *)(a2 + v43);
    swift_beginAccess();
    *(_QWORD *)(v54 + 32) = v50;
    *(_QWORD *)(v54 + 40) = v52;
    swift_bridgeObjectRelease();
    a1 = v244;
  }
  v55 = objc_msgSend(a1, sel_codedQuantityValue);
  v56 = v43;
  if (v55)
  {
    v57 = v55;
    sub_21FAA1474(v55, (uint64_t)v42);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKInspectableValue._StorageClass(0);
      swift_allocObject();
      v58 = swift_retain();
      *(_QWORD *)(a2 + v43) = sub_21FB6F994(v58);
      swift_release();
    }
    v59 = *(_QWORD *)(a2 + v43);
    sub_21FA2D23C((uint64_t)v42, (uint64_t)v40, type metadata accessor for PBHKCodedQuantity);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v225 + 56))(v40, 0, 1, v226);
    v60 = v245;
    sub_21FA2D23C((uint64_t)v40, v245, (uint64_t (*)(_QWORD))sub_21FAA42E4);
    v61 = v59
        + OBJC_IVAR____TtCV19HealthRecordsDaemon20PBHKInspectableValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__codedQuantity;
    swift_beginAccess();
    swift_retain();
    sub_21FA85108(v60, v61, (uint64_t (*)(_QWORD))sub_21FAA42E4);
    swift_endAccess();

    swift_release();
    a1 = v244;
  }
  v62 = objc_msgSend(a1, sel_ratioValue);
  v245 = v56;
  v63 = v242;
  v64 = v235;
  if (v62)
  {
    v65 = v62;
    sub_21FC5AD10();
    v66 = objc_msgSend(v65, sel_numerator);
    v67 = objc_msgSend(v66, sel_localizedValue);

    v68 = sub_21FC5B604();
    v70 = v69;

    *v35 = v68;
    v35[1] = v70;
    v71 = objc_msgSend(v65, sel_denominator);
    v72 = v245;
    v73 = objc_msgSend(v71, sel_localizedValue);

    v74 = sub_21FC5B604();
    v76 = v75;

    v35[2] = v74;
    v35[3] = v76;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKInspectableValue._StorageClass(0);
      swift_allocObject();
      v77 = swift_retain();
      *(_QWORD *)(a2 + v72) = sub_21FB6F994(v77);
      swift_release();
    }
    v78 = *(_QWORD *)(a2 + v72);
    v79 = v228;
    sub_21FA2D23C((uint64_t)v35, v228, type metadata accessor for PBHKRatioValue);
    (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD *))(v227 + 56))(v79, 0, 1, v241);
    v80 = v79;
    v81 = v229;
    sub_21FA2D23C(v80, v229, (uint64_t (*)(_QWORD))sub_21FAA42C8);
    v82 = v78
        + OBJC_IVAR____TtCV19HealthRecordsDaemon20PBHKInspectableValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__ratioValue;
    swift_beginAccess();
    swift_retain();
    sub_21FA85108(v81, v82, (uint64_t (*)(_QWORD))sub_21FAA42C8);
    swift_endAccess();

    swift_release();
  }
  v83 = objc_msgSend(a1, sel_medicalDateValue);
  v84 = v233;
  if (v83)
  {
    v85 = v83;
    v86 = v233;
    v87 = *v243;
    v88 = (void *)sub_21FC5AB6C();
    v89 = objc_msgSend(v85, sel_adjustedDateForCalendar_, v88);

    v90 = v64;
    v91 = v230;
    sub_21FC5AA94();

    v92 = *(id *)(v87 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_isoDateFormatter);
    v93 = (void *)sub_21FC5AA64();
    v94 = objc_msgSend(v92, sel_stringFromDate_, v93);

    v95 = sub_21FC5B604();
    v97 = v96;

    v98 = v91;
    v64 = v90;
    (*(void (**)(char *, uint64_t))(v236 + 8))(v98, v90);
    v99 = v245;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKInspectableValue._StorageClass(0);
      swift_allocObject();
      v100 = swift_retain();
      *(_QWORD *)(a2 + v99) = sub_21FB6F994(v100);
      swift_release();
    }
    v101 = (uint64_t *)(*(_QWORD *)(a2 + v99)
                     + OBJC_IVAR____TtCV19HealthRecordsDaemon20PBHKInspectableValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__medicalDateString);
    swift_beginAccess();
    *v101 = v95;
    v101[1] = v97;

    swift_bridgeObjectRelease();
    a1 = v244;
    v84 = v86;
    v63 = v242;
  }
  v102 = objc_msgSend(a1, sel_medicalDateIntervalValue);
  v103 = (uint64_t)v234;
  if (v102)
  {
    v104 = v102;
    v105 = objc_msgSend(v102, sel_startDate);

    if (v105)
    {
      v106 = objc_msgSend(a1, sel_medicalDateIntervalValue);
      if (v106
        && (v107 = v106,
            v108 = objc_msgSend(v106, sel_endDate),
            v107,
            v108))
      {
        v109 = (void *)sub_21FC5AB6C();
        v110 = objc_msgSend(v105, sel_adjustedDateForCalendar_, v109);

        v111 = (uint64_t)v214;
        sub_21FC5AA94();

        v112 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v236 + 56);
        v112(v111, 0, 1, v64);
        v113 = (void *)sub_21FC5AB6C();
        v241 = v108;
        v114 = objc_msgSend(v108, sel_adjustedDateForCalendar_, v113);

        v115 = (uint64_t)v215;
        sub_21FC5AA94();

        v112(v115, 0, 1, v64);
        v116 = (uint64_t)v216;
        sub_21FC0329C(v111, v115);
        sub_21FA326EC(v115, (uint64_t (*)(_QWORD))sub_21FA8D544);
        sub_21FA326EC(v111, (uint64_t (*)(_QWORD))sub_21FA8D544);
        v117 = v245;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for PBHKInspectableValue._StorageClass(0);
          swift_allocObject();
          v118 = swift_retain();
          *(_QWORD *)(a2 + v117) = sub_21FB6F994(v118);
          swift_release();
        }
        v119 = *(_QWORD *)(a2 + v117);
        v120 = v219;
        sub_21FA2D23C(v116, v219, type metadata accessor for PBDateRange);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v217 + 56))(v120, 0, 1, v218);
        v121 = v120;
        v122 = v220;
        sub_21FA2D23C(v121, v220, (uint64_t (*)(_QWORD))sub_21FA850EC);
        v123 = v119
             + OBJC_IVAR____TtCV19HealthRecordsDaemon20PBHKInspectableValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__medicalDateIntervalString;
        swift_beginAccess();
        swift_retain();
        sub_21FA85108(v122, v123, (uint64_t (*)(_QWORD))sub_21FA850EC);
        swift_endAccess();

        swift_release();
        a1 = v244;
        v64 = v235;
        v103 = (uint64_t)v234;
        v63 = v242;
      }
      else
      {

      }
    }
  }
  v124 = objc_msgSend(a1, sel_dateComponentsValue);
  if (!v124)
  {
    v128 = (uint64_t)v232;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v63 + 56))(v232, 1, 1, v84);
    goto LABEL_34;
  }
  v125 = v124;
  v126 = v231;
  sub_21FC5A7AC();

  v127 = *(void (**)(char *, char *, uint64_t))(v63 + 32);
  v128 = (uint64_t)v232;
  v127(v232, v126, v84);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v63 + 56))(v128, 0, 1, v84);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v128, 1, v84) == 1)
  {
LABEL_34:
    sub_21FA2D1F8(v128, &qword_255540598, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE0]);
    goto LABEL_35;
  }
  v129 = v222;
  v127(v222, (char *)v128, v84);
  v130 = *v243;
  sub_21FC5AB84();
  v131 = v236;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v236 + 48))(v103, 1, v64) == 1)
  {
    (*(void (**)(char *, uint64_t))(v63 + 8))(v129, v84);
    sub_21FA326EC(v103, (uint64_t (*)(_QWORD))sub_21FA8D544);
LABEL_35:
    v132 = v245;
    goto LABEL_36;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v131 + 32))(v221, v103, v64);
  v158 = *(id *)(v130 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_isoDateFormatter);
  v159 = (void *)sub_21FC5AA64();
  v160 = objc_msgSend(v158, sel_stringFromDate_, v159);

  v161 = sub_21FC5B604();
  v163 = v162;

  v132 = v245;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKInspectableValue._StorageClass(0);
    swift_allocObject();
    v164 = swift_retain();
    *(_QWORD *)(a2 + v132) = sub_21FB6F994(v164);
    swift_release();
  }
  v165 = (uint64_t *)(*(_QWORD *)(a2 + v132)
                   + OBJC_IVAR____TtCV19HealthRecordsDaemon20PBHKInspectableValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__dateFromDateComponents);
  swift_beginAccess();
  *v165 = v161;
  v165[1] = v163;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v236 + 8))(v221, v64);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v222, v84);
LABEL_36:
  v133 = objc_msgSend(a1, sel_codedValueCollection);
  if (v133)
  {
    v134 = v133;
    v135 = objc_msgSend(v133, sel_codedValues);
    sub_21FA5BE58(0, &qword_2555405B8);
    v136 = sub_21FC5B7A8();

    MEMORY[0x24BDAC7A8](v137);
    *(&v213 - 2) = (uint64_t)v243;
    v138 = sub_21FC41D34((void (*)(id *))sub_21FAA4300, (uint64_t)(&v213 - 4), v136, (uint64_t)v246);
    swift_bridgeObjectRelease();
    v132 = v245;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKInspectableValue._StorageClass(0);
      swift_allocObject();
      v139 = swift_retain();
      *(_QWORD *)(a2 + v132) = sub_21FB6F994(v139);
      swift_release();
    }
    v140 = (uint64_t *)(*(_QWORD *)(a2 + v132)
                     + OBJC_IVAR____TtCV19HealthRecordsDaemon20PBHKInspectableValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__codedValueCollectionValues);
    swift_beginAccess();
    *v140 = v138;

    swift_bridgeObjectRelease();
  }
  v141 = objc_msgSend(a1, sel_medicalCodings);
  v242 = a2;
  if (v141)
  {
    v142 = v141;
    sub_21FA5BE58(0, &qword_2555405B0);
    v143 = sub_21FC5B7A8();

    if (v143 >> 62)
    {
      swift_bridgeObjectRetain();
      result = sub_21FC5BC7C();
      v144 = result;
      if (result)
        goto LABEL_43;
    }
    else
    {
      v144 = *(_QWORD *)((v143 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v144)
      {
LABEL_43:
        if (v144 < 1)
        {
          __break(1u);
          goto LABEL_97;
        }
        v146 = 0;
        v147 = (_QWORD *)MEMORY[0x24BEE4AF8];
        do
        {
          if ((v143 & 0xC000000000000001) != 0)
            v148 = (id)MEMORY[0x2207D057C](v146, v143);
          else
            v148 = *(id *)(v143 + 8 * v146 + 32);
          v149 = v148;
          v150 = objc_msgSend(v148, sel_displayString);
          if (v150)
          {
            v151 = v150;
            v152 = sub_21FC5B604();
            v154 = v153;

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v147 = sub_21FA7DD0C(0, v147[2] + 1, 1, v147);
            v156 = v147[2];
            v155 = v147[3];
            if (v156 >= v155 >> 1)
              v147 = sub_21FA7DD0C((_QWORD *)(v155 > 1), v156 + 1, 1, v147);
            v147[2] = v156 + 1;
            v157 = &v147[2 * v156];
            v157[4] = v152;
            v157[5] = v154;
          }
          else
          {

          }
          ++v146;
        }
        while (v144 != v146);
        goto LABEL_61;
      }
    }
    v147 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_61:
    swift_bridgeObjectRelease_n();
    a2 = v242;
    v132 = v245;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKInspectableValue._StorageClass(0);
      swift_allocObject();
      v166 = swift_retain();
      *(_QWORD *)(a2 + v132) = sub_21FB6F994(v166);
      swift_release();
    }
    v167 = (_QWORD *)(*(_QWORD *)(a2 + v132)
                    + OBJC_IVAR____TtCV19HealthRecordsDaemon20PBHKInspectableValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__medicalCodingsDisplayStrings);
    swift_beginAccess();
    *v167 = v147;
    swift_bridgeObjectRelease();
    a1 = v244;
  }
  v168 = objc_msgSend(a1, sel_ontologyConcept);
  if (v168)
  {
    v169 = v168;
    v170 = v224;
    sub_21FAA1BD0(v168, 1, v224);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKInspectableValue._StorageClass(0);
      swift_allocObject();
      v171 = swift_retain();
      *(_QWORD *)(a2 + v132) = sub_21FB6F994(v171);
      swift_release();
    }
    v172 = *(_QWORD *)(a2 + v132);
    v173 = v239;
    sub_21FA2D23C(v170, v239, type metadata accessor for PBHKConcept);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v237 + 56))(v173, 0, 1, v238);
    v174 = v173;
    v175 = v240;
    sub_21FA2D23C(v174, v240, (uint64_t (*)(_QWORD))sub_21FAA42AC);
    v176 = v172
         + OBJC_IVAR____TtCV19HealthRecordsDaemon20PBHKInspectableValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__concept;
    swift_beginAccess();
    swift_retain();
    v177 = v175;
    v132 = v245;
    sub_21FA85108(v177, v176, (uint64_t (*)(_QWORD))sub_21FAA42AC);
    swift_endAccess();

    swift_release();
  }
  v178 = objc_msgSend(a1, sel_dataAbsentReasonCodings);
  if (!v178)
    goto LABEL_89;
  v179 = v178;
  sub_21FA5BE58(0, &qword_2555405B0);
  v180 = sub_21FC5B7A8();

  if (v180 >> 62)
  {
    swift_bridgeObjectRetain();
    result = sub_21FC5BC7C();
    v181 = result;
    if (result)
    {
LABEL_71:
      if (v181 >= 1)
      {
        v182 = 0;
        v183 = (_QWORD *)MEMORY[0x24BEE4AF8];
        do
        {
          if ((v180 & 0xC000000000000001) != 0)
            v184 = (id)MEMORY[0x2207D057C](v182, v180);
          else
            v184 = *(id *)(v180 + 8 * v182 + 32);
          v185 = v184;
          v186 = objc_msgSend(v184, sel_displayString);
          if (v186)
          {
            v187 = v186;
            v188 = sub_21FC5B604();
            v190 = v189;

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v183 = sub_21FA7DD0C(0, v183[2] + 1, 1, v183);
            v192 = v183[2];
            v191 = v183[3];
            if (v192 >= v191 >> 1)
              v183 = sub_21FA7DD0C((_QWORD *)(v191 > 1), v192 + 1, 1, v183);
            v183[2] = v192 + 1;
            v193 = &v183[2 * v192];
            v193[4] = v188;
            v193[5] = v190;
          }
          else
          {

          }
          ++v182;
        }
        while (v181 != v182);
        goto LABEL_86;
      }
LABEL_97:
      __break(1u);
      return result;
    }
  }
  else
  {
    v181 = *(_QWORD *)((v180 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v181)
      goto LABEL_71;
  }
  v183 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_86:
  swift_bridgeObjectRelease_n();
  a2 = v242;
  v132 = v245;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKInspectableValue._StorageClass(0);
    swift_allocObject();
    v194 = swift_retain();
    *(_QWORD *)(a2 + v132) = sub_21FB6F994(v194);
    swift_release();
  }
  v195 = (_QWORD *)(*(_QWORD *)(a2 + v132)
                  + OBJC_IVAR____TtCV19HealthRecordsDaemon20PBHKInspectableValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__dataAbsentReasonCodingsDisplayStrings);
  swift_beginAccess();
  *v195 = v183;
  swift_bridgeObjectRelease();
  a1 = v244;
LABEL_89:
  v196 = objc_msgSend(a1, sel_dataAbsentReason);
  if (v196)
  {
    v197 = v196;
    v198 = v132;
    v199 = v223;
    sub_21FAA1BD0(v196, 1, v223);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKInspectableValue._StorageClass(0);
      swift_allocObject();
      v200 = swift_retain();
      *(_QWORD *)(a2 + v198) = sub_21FB6F994(v200);
      swift_release();
    }
    v201 = *(_QWORD *)(a2 + v198);
    v202 = v199;
    v203 = v239;
    sub_21FA2D23C(v202, v239, type metadata accessor for PBHKConcept);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v237 + 56))(v203, 0, 1, v238);
    v204 = v203;
    v205 = v240;
    sub_21FA2D23C(v204, v240, (uint64_t (*)(_QWORD))sub_21FAA42AC);
    v206 = v201
         + OBJC_IVAR____TtCV19HealthRecordsDaemon20PBHKInspectableValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__dataAbsentReasonConcept;
    swift_beginAccess();
    swift_retain();
    sub_21FA85108(v205, v206, (uint64_t (*)(_QWORD))sub_21FAA42AC);
    swift_endAccess();

    swift_release();
    v132 = v198;
  }
  v207 = objc_msgSend(a1, sel_unitString);
  v208 = sub_21FC5B604();
  v210 = v209;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKInspectableValue._StorageClass(0);
    swift_allocObject();
    v211 = swift_retain();
    *(_QWORD *)(a2 + v132) = sub_21FB6F994(v211);
    swift_release();
  }
  v212 = (uint64_t *)(*(_QWORD *)(a2 + v132)
                   + OBJC_IVAR____TtCV19HealthRecordsDaemon20PBHKInspectableValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__unitString);
  swift_beginAccess();
  *v212 = v208;
  v212[1] = v210;
  return swift_bridgeObjectRelease();
}

void sub_21FAA1474(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0xE000000000000000;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0xE000000000000000;
  type metadata accessor for PBHKCodedQuantity(0);
  sub_21FC5AD10();
  v4 = objc_msgSend(a1, sel_localizedValue);
  v5 = sub_21FC5B604();
  v7 = v6;

  v8 = objc_msgSend(a1, sel_rawValue);
  v9 = sub_21FC5B604();
  v11 = v10;

  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v7;
  swift_bridgeObjectRetain();
  objc_msgSend(a1, sel_doubleValue);
  *(float *)&v12 = v12;
  *(_DWORD *)(a2 + 32) = LODWORD(v12);
  v13 = objc_msgSend(a1, sel_comparatorCoding);
  if (v13)
  {
    v14 = v13;
    v15 = objc_msgSend(v13, sel_displayString);

    if (v15)
    {
      v16 = sub_21FC5B604();
      v18 = v17;

      v19 = objc_msgSend(a1, sel_comparatorCoding);
      if (v19
        && (v20 = v19, v21 = objc_msgSend(v19, sel_code), v20, v21))
      {
        v22 = sub_21FC5B604();
        v24 = v23;

        *(_QWORD *)(a2 + 40) = v16;
        *(_QWORD *)(a2 + 48) = v18;
        v32 = 0;
        v33 = 0xE000000000000000;
        if (*(_QWORD *)(sub_21FA7C090((uint64_t)&unk_24E4807E0) + 16))
        {
          sub_21FA73F34(v22, v24);
          if ((v25 & 1) != 0)
            swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_21FC5B6AC();
        swift_bridgeObjectRelease();
        sub_21FC5B6AC();
        swift_bridgeObjectRelease();
        v5 = 0;
        v7 = 0xE000000000000000;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
  *(_QWORD *)(a2 + 72) = v5;
  *(_QWORD *)(a2 + 80) = v7;
  v26 = objc_msgSend(a1, sel_unitCoding, v32, v33);
  if (v26)
  {
    v27 = v26;
    v28 = objc_msgSend(v26, sel_displayString);

    if (v28)
    {
      v29 = sub_21FC5B604();
      v31 = v30;

      *(_QWORD *)(a2 + 56) = v29;
      *(_QWORD *)(a2 + 64) = v31;
    }
  }
}

id sub_21FAA16F8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id result;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  _BYTE v48[16];

  sub_21FAA4264(0);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v45 = (uint64_t)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v41 - v8;
  v10 = type metadata accessor for PBHKInspectableValue(0);
  v43 = *(_QWORD *)(v10 - 8);
  v44 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v42 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FAA42AC(0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v41 - v16;
  v18 = type metadata accessor for PBHKConcept(0);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC5AD10();
  v22 = *(int *)(type metadata accessor for PBHKCodedValue(0) + 20);
  if (qword_25553D9D8 != -1)
    swift_once();
  *(_QWORD *)(a2 + v22) = qword_255543D30;
  swift_retain();
  v47 = a1;
  v23 = objc_msgSend(a1, sel_ontologyConcept);
  v46 = v2;
  sub_21FAA1BD0(v23, 1, (uint64_t)v21);

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKCodedValue._StorageClass(0);
    swift_allocObject();
    v24 = swift_retain();
    *(_QWORD *)(a2 + v22) = sub_21FB72C34(v24);
    swift_release();
  }
  v25 = *(_QWORD *)(a2 + v22);
  sub_21FA2D23C((uint64_t)v21, (uint64_t)v17, type metadata accessor for PBHKConcept);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
  sub_21FA2D23C((uint64_t)v17, (uint64_t)v15, (uint64_t (*)(_QWORD))sub_21FAA42AC);
  v26 = v25
      + OBJC_IVAR____TtCV19HealthRecordsDaemon14PBHKCodedValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__concept;
  swift_beginAccess();
  swift_retain();
  sub_21FA85108((uint64_t)v15, v26, (uint64_t (*)(_QWORD))sub_21FAA42AC);
  swift_endAccess();
  swift_release();
  v27 = objc_msgSend(v47, sel_value);
  v28 = (uint64_t)v42;
  sub_21FA9FB9C();

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKCodedValue._StorageClass(0);
    swift_allocObject();
    v29 = swift_retain();
    *(_QWORD *)(a2 + v22) = sub_21FB72C34(v29);
    swift_release();
  }
  v30 = *(_QWORD *)(a2 + v22);
  sub_21FA2D23C(v28, (uint64_t)v9, type metadata accessor for PBHKInspectableValue);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v9, 0, 1, v44);
  v31 = (uint64_t)v9;
  v32 = v45;
  sub_21FA2D23C(v31, v45, (uint64_t (*)(_QWORD))sub_21FAA4264);
  v33 = v30
      + OBJC_IVAR____TtCV19HealthRecordsDaemon14PBHKCodedValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_21FA85108(v32, v33, (uint64_t (*)(_QWORD))sub_21FAA4264);
  swift_endAccess();
  swift_release();
  result = objc_msgSend(v47, sel_referenceRanges);
  if (result)
  {
    v35 = result;
    sub_21FA5BE58(0, &qword_2555405C0);
    v36 = sub_21FC5B7A8();

    MEMORY[0x24BDAC7A8](v37);
    *(&v41 - 2) = v46;
    v38 = sub_21FC41D7C((void (*)(id *))sub_21FAA432C, (uint64_t)(&v41 - 4), v36, (uint64_t)v48);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKCodedValue._StorageClass(0);
      swift_allocObject();
      v39 = swift_retain();
      *(_QWORD *)(a2 + v22) = sub_21FB72C34(v39);
      swift_release();
    }
    v40 = (uint64_t *)(*(_QWORD *)(a2 + v22)
                    + OBJC_IVAR____TtCV19HealthRecordsDaemon14PBHKCodedValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__referenceRanges);
    swift_beginAccess();
    *v40 = v38;
    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

id sub_21FAA1BD0@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned __int8 v38;
  _QWORD *v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  id result;
  id v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  id v54;

  v53 = a2;
  sub_21FAA42AC(0);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v52 = (uint64_t)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v50 - v8;
  v10 = type metadata accessor for PBHKConcept(0);
  v51 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC5AD10();
  v13 = *(int *)(v10 + 20);
  if (qword_25553D8E0 != -1)
    swift_once();
  *(_QWORD *)(a3 + v13) = qword_255543B28;
  swift_retain();
  v14 = objc_msgSend(a1, sel_preferredName);
  if (v14)
  {
    v15 = v14;
    v16 = sub_21FC5B604();
    v18 = v17;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKConcept._StorageClass(0);
      swift_allocObject();
      v19 = (_QWORD *)swift_retain();
      v20 = sub_21FB8E248(v19);
      swift_release();
      *(_QWORD *)(a3 + v13) = v20;
      swift_release();
    }
    v21 = *(_QWORD *)(a3 + v13);
    swift_beginAccess();
    *(_QWORD *)(v21 + 16) = v16;
    *(_QWORD *)(v21 + 24) = v18;
    swift_bridgeObjectRelease();
  }
  v22 = objc_msgSend(a1, sel_localizedPreferredName);
  if (v22)
  {
    v23 = v22;
    v24 = sub_21FC5B604();
    v26 = v25;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKConcept._StorageClass(0);
      swift_allocObject();
      v27 = (_QWORD *)swift_retain();
      v28 = sub_21FB8E248(v27);
      swift_release();
      *(_QWORD *)(a3 + v13) = v28;
      swift_release();
    }
    v29 = *(_QWORD *)(a3 + v13);
    swift_beginAccess();
    *(_QWORD *)(v29 + 32) = v24;
    *(_QWORD *)(v29 + 40) = v26;
    swift_bridgeObjectRelease();
  }
  v30 = objc_msgSend(a1, sel_identifier);
  v31 = objc_msgSend(v30, sel_rawIdentifier);

  v54 = v31;
  v32 = sub_21FC5BDCC();
  v34 = v33;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKConcept._StorageClass(0);
    swift_allocObject();
    v35 = (_QWORD *)swift_retain();
    v36 = sub_21FB8E248(v35);
    swift_release();
    *(_QWORD *)(a3 + v13) = v36;
    swift_release();
  }
  v37 = *(_QWORD *)(a3 + v13);
  swift_beginAccess();
  *(_QWORD *)(v37 + 48) = v32;
  *(_QWORD *)(v37 + 56) = v34;
  swift_bridgeObjectRelease();
  v38 = objc_msgSend(a1, sel_isInMemory);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKConcept._StorageClass(0);
    swift_allocObject();
    v39 = (_QWORD *)swift_retain();
    v40 = sub_21FB8E248(v39);
    swift_release();
    *(_QWORD *)(a3 + v13) = v40;
    swift_release();
  }
  v41 = (unsigned __int8 *)(*(_QWORD *)(a3 + v13)
                          + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBHKConceptP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__isInMemory);
  result = (id)swift_beginAccess();
  *v41 = v38;
  if ((v53 & 1) != 0)
  {
    result = objc_msgSend(a1, sel_relationshipsAreLoaded);
    if ((_DWORD)result)
    {
      v43 = objc_msgSend(a1, sel_groupByConcept);
      sub_21FAA1BD0();

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for PBHKConcept._StorageClass(0);
        swift_allocObject();
        v44 = (_QWORD *)swift_retain();
        v45 = sub_21FB8E248(v44);
        swift_release();
        *(_QWORD *)(a3 + v13) = v45;
        swift_release();
      }
      v46 = *(_QWORD *)(a3 + v13);
      sub_21FA2D23C((uint64_t)v12, (uint64_t)v9, type metadata accessor for PBHKConcept);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v9, 0, 1, v10);
      v47 = (uint64_t)v9;
      v48 = v52;
      sub_21FA2D23C(v47, v52, (uint64_t (*)(_QWORD))sub_21FAA42AC);
      v49 = v46
          + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBHKConceptP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__groupBy;
      swift_beginAccess();
      swift_retain();
      sub_21FA85108(v48, v49, (uint64_t (*)(_QWORD))sub_21FAA42AC);
      swift_endAccess();
      return (id)swift_release();
    }
  }
  return result;
}

id sub_21FAA20B0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id result;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;

  sub_21FAA4358(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v27 - v8;
  v10 = type metadata accessor for PBHKInspectableValueCollection(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC5AD10();
  v14 = *(int *)(type metadata accessor for PBHKReferenceRange(0) + 20);
  if (qword_25553D9A0 != -1)
    swift_once();
  *(_QWORD *)(a2 + v14) = qword_255543CB8;
  swift_retain();
  v15 = objc_msgSend(a1, sel_referenceRangeIdentifier);
  if (v15)
  {
    v16 = v15;
    v17 = sub_21FC5B604();
    v29 = v18;
    v30 = v17;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKReferenceRange._StorageClass(0);
      swift_allocObject();
      v28 = a1;
      v19 = swift_retain();
      a1 = v28;
      *(_QWORD *)(a2 + v14) = sub_21FB6C814(v19);
      swift_release();
    }
    v20 = *(_QWORD *)(a2 + v14);
    swift_beginAccess();
    v21 = v29;
    *(_QWORD *)(v20 + 16) = v30;
    *(_QWORD *)(v20 + 24) = v21;
    swift_bridgeObjectRelease();
  }
  result = objc_msgSend(a1, sel_valueRange);
  if (result)
  {
    v23 = result;
    sub_21FA9F4E0();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKReferenceRange._StorageClass(0);
      swift_allocObject();
      v24 = swift_retain();
      *(_QWORD *)(a2 + v14) = sub_21FB6C814(v24);
      swift_release();
    }
    v25 = *(_QWORD *)(a2 + v14);
    sub_21FA2D23C((uint64_t)v13, (uint64_t)v9, type metadata accessor for PBHKInspectableValueCollection);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    sub_21FA2D23C((uint64_t)v9, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_21FAA4358);
    v26 = v25
        + OBJC_IVAR____TtCV19HealthRecordsDaemon18PBHKReferenceRangeP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__valueRange;
    swift_beginAccess();
    swift_retain();
    sub_21FA85108((uint64_t)v7, v26, (uint64_t (*)(_QWORD))sub_21FAA4358);
    swift_endAccess();

    return (id)swift_release();
  }
  return result;
}

uint64_t sub_21FAA23C8@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t *v37;
  id v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t result;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t *v56;
  unint64_t v57;

  v57 = a2;
  sub_21FAA42AC(0);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v57 - v9;
  v11 = type metadata accessor for PBHKConcept(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC5AD10();
  v15 = *(int *)(type metadata accessor for PBClinicalRecord(0) + 20);
  if (qword_25553D8C0 != -1)
    swift_once();
  *(_QWORD *)(a3 + v15) = qword_255543AD8;
  swift_retain();
  v16 = objc_msgSend(a1, sel_primaryConcept);
  sub_21FAA1BD0(v16, 1, (uint64_t)v14);

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBClinicalRecord._StorageClass(0);
    swift_allocObject();
    v17 = (_QWORD *)swift_retain();
    v18 = sub_21FB8E53C(v17);
    swift_release();
    *(_QWORD *)(a3 + v15) = v18;
    swift_release();
  }
  v19 = *(_QWORD *)(a3 + v15);
  sub_21FA2D23C((uint64_t)v14, (uint64_t)v10, type metadata accessor for PBHKConcept);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  sub_21FA2D23C((uint64_t)v10, (uint64_t)v8, (uint64_t (*)(_QWORD))sub_21FAA42AC);
  v20 = v19
      + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBClinicalRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__primaryConcept;
  swift_beginAccess();
  swift_retain();
  sub_21FA85108((uint64_t)v8, v20, (uint64_t (*)(_QWORD))sub_21FAA42AC);
  swift_endAccess();
  swift_release();
  v21 = a1;
  v22 = sub_21FAA3104(v57, v21);

  if (v22)
  {
    v23 = objc_msgSend(v22, sel_gateway);

    if (v23)
    {
      v24 = objc_msgSend(v23, sel_title);
      v25 = sub_21FC5B604();
      v27 = v26;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for PBClinicalRecord._StorageClass(0);
        swift_allocObject();
        v28 = (_QWORD *)swift_retain();
        v29 = sub_21FB8E53C(v28);
        swift_release();
        *(_QWORD *)(a3 + v15) = v29;
        swift_release();
      }
      v30 = (uint64_t *)(*(_QWORD *)(a3 + v15)
                      + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBClinicalRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__source);
      swift_beginAccess();
      *v30 = v25;
      v30[1] = v27;
      swift_bridgeObjectRelease();
      v31 = objc_msgSend(v23, sel_externalID);
      v32 = sub_21FC5B604();
      v34 = v33;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for PBClinicalRecord._StorageClass(0);
        swift_allocObject();
        v35 = (_QWORD *)swift_retain();
        v36 = sub_21FB8E53C(v35);
        swift_release();
        *(_QWORD *)(a3 + v15) = v36;
        swift_release();
      }
      v37 = (uint64_t *)(*(_QWORD *)(a3 + v15)
                      + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBClinicalRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__gatewayID);
      swift_beginAccess();
      *v37 = v32;
      v37[1] = v34;

      swift_bridgeObjectRelease();
    }
  }
  v38 = objc_msgSend(v21, sel_medicalRecordOriginType, v57);
  if (v38 == (id)3)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBClinicalRecord._StorageClass(0);
      swift_allocObject();
      v45 = (_QWORD *)swift_retain();
      v46 = sub_21FB8E53C(v45);
      swift_release();
      *(_QWORD *)(a3 + v15) = v46;
      swift_release();
    }
    v47 = *(_QWORD *)(a3 + v15)
        + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBClinicalRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__medicalRecordOriginType;
    swift_beginAccess();
    *(_QWORD *)v47 = 2;
    *(_BYTE *)(v47 + 8) = 1;
    v48 = objc_msgSend(v21, sel_sourceRevision);
    v49 = objc_msgSend(v48, sel_source);

    v50 = objc_msgSend(v49, sel_name);
    v51 = sub_21FC5B604();
    v53 = v52;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBClinicalRecord._StorageClass(0);
      swift_allocObject();
      v54 = (_QWORD *)swift_retain();
      v55 = sub_21FB8E53C(v54);
      swift_release();
      *(_QWORD *)(a3 + v15) = v55;
      swift_release();
    }
    v56 = (uint64_t *)(*(_QWORD *)(a3 + v15)
                    + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBClinicalRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__source);
    swift_beginAccess();
    *v56 = v51;
    v56[1] = v53;
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (v38 == (id)1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for PBClinicalRecord._StorageClass(0);
        swift_allocObject();
        v39 = (_QWORD *)swift_retain();
        v40 = sub_21FB8E53C(v39);
        swift_release();
        *(_QWORD *)(a3 + v15) = v40;
        swift_release();
      }
      v41 = *(_QWORD *)(a3 + v15)
          + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBClinicalRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__medicalRecordOriginType;
      result = swift_beginAccess();
      *(_QWORD *)v41 = 1;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for PBClinicalRecord._StorageClass(0);
        swift_allocObject();
        v43 = (_QWORD *)swift_retain();
        v44 = sub_21FB8E53C(v43);
        swift_release();
        *(_QWORD *)(a3 + v15) = v44;
        swift_release();
      }
      v41 = *(_QWORD *)(a3 + v15)
          + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBClinicalRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__medicalRecordOriginType;
      result = swift_beginAccess();
      *(_QWORD *)v41 = 0;
    }
    *(_BYTE *)(v41 + 8) = 1;
  }
  return result;
}

uint64_t sub_21FAA2A1C(void **a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  id v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  int v27;
  uint64_t (*v28)(_QWORD);
  char v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, uint64_t);
  char *v34;
  uint64_t v35;

  v4 = sub_21FC5AAF4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v34 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FAA4374();
  v8 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FAA43D4(0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v35 = (uint64_t)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v34 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v34 - v17;
  v19 = *a1;
  v20 = objc_msgSend(a2, sel_sourceRevision);
  v21 = objc_msgSend(v20, sel_source);

  v22 = objc_msgSend(v21, sel__deducedClinicalAccountIdentifier);
  if (v22)
  {
    sub_21FC5AADC();

    v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v23(v18, 0, 1, v4);
  }
  else
  {
    v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v23(v18, 1, 1, v4);
  }
  v24 = objc_msgSend(v19, sel_identifier);
  sub_21FC5AADC();

  v23(v16, 0, 1, v4);
  v25 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_21FA2D120((uint64_t)v18, (uint64_t)v10, (uint64_t (*)(_QWORD))sub_21FAA43D4);
  sub_21FA2D120((uint64_t)v16, v25, (uint64_t (*)(_QWORD))sub_21FAA43D4);
  v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v26((uint64_t)v10, 1, v4) == 1)
  {
    sub_21FA326EC((uint64_t)v16, (uint64_t (*)(_QWORD))sub_21FAA43D4);
    sub_21FA326EC((uint64_t)v18, (uint64_t (*)(_QWORD))sub_21FAA43D4);
    v27 = v26(v25, 1, v4);
    if (v27 == 1)
      v28 = (uint64_t (*)(_QWORD))sub_21FAA43D4;
    else
      v28 = (uint64_t (*)(_QWORD))sub_21FAA4374;
    if (v27 == 1)
      v29 = -1;
    else
      v29 = 0;
  }
  else
  {
    v30 = v35;
    sub_21FA2D120((uint64_t)v10, v35, (uint64_t (*)(_QWORD))sub_21FAA43D4);
    if (v26(v25, 1, v4) == 1)
    {
      sub_21FA326EC((uint64_t)v16, (uint64_t (*)(_QWORD))sub_21FAA43D4);
      sub_21FA326EC((uint64_t)v18, (uint64_t (*)(_QWORD))sub_21FAA43D4);
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v30, v4);
      v29 = 0;
      v28 = (uint64_t (*)(_QWORD))sub_21FAA4374;
    }
    else
    {
      v31 = v34;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v34, v25, v4);
      sub_21FA2A08C(&qword_25553FB98, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v29 = sub_21FC5B5D4();
      v32 = *(void (**)(char *, uint64_t))(v5 + 8);
      v32(v31, v4);
      v28 = (uint64_t (*)(_QWORD))sub_21FAA43D4;
      sub_21FA326EC((uint64_t)v16, (uint64_t (*)(_QWORD))sub_21FAA43D4);
      sub_21FA326EC((uint64_t)v18, (uint64_t (*)(_QWORD))sub_21FAA43D4);
      v32((char *)v30, v4);
    }
  }
  sub_21FA326EC((uint64_t)v10, v28);
  return v29 & 1;
}

uint64_t sub_21FAA2DB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(unint64_t, _QWORD, uint64_t);
  char *v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v27 = a1;
  sub_21FA8D544();
  MEMORY[0x24BDAC7A8](v1);
  v28 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_21FC5A83C();
  v25 = *(_QWORD *)(v3 - 8);
  v26 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_21FC5AC08();
  v29 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v25 - v10;
  v12 = objc_msgSend((id)objc_opt_self(), sel_referenceCalendar);
  sub_21FC5AB78();

  sub_21FA2D1A0(0, qword_255540490, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v13 = sub_21FC5ABF0();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_21FC5F3A0;
  v18 = v17 + v16;
  v19 = *(void (**)(unint64_t, _QWORD, uint64_t))(v14 + 104);
  v19(v17 + v16, *MEMORY[0x24BDCF228], v13);
  v19(v17 + v16 + v15, *MEMORY[0x24BDCF240], v13);
  v19(v17 + v16 + 2 * v15, *MEMORY[0x24BDCF250], v13);
  v19(v17 + v16 + 3 * v15, *MEMORY[0x24BDCF220], v13);
  v19(v17 + v16 + 4 * v15, *MEMORY[0x24BDCF230], v13);
  v20 = v28;
  v19(v18 + 5 * v15, *MEMORY[0x24BDCF258], v13);
  v19(v18 + 6 * v15, *MEMORY[0x24BDCF260], v13);
  sub_21FBF3680(v17);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_21FC5AB48();
  swift_bridgeObjectRelease();
  sub_21FC5ABC0();
  sub_21FC5AB84();
  v21 = *(void (**)(char *, uint64_t))(v29 + 8);
  v21(v9, v6);
  v22 = sub_21FC5AAAC();
  v23 = *(_QWORD *)(v22 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v26);
    v21(v11, v6);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v23 + 32))(v27, v20, v22);
  }
  return result;
}

void *sub_21FAA3104(unint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  char v10;
  void *v12;

  if (a1 >> 62)
    goto LABEL_16;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; v5 = sub_21FC5BC7C())
  {
    v6 = 4;
    while (1)
    {
      v7 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x2207D057C](v6 - 4, a1) : *(id *)(a1 + 8 * v6);
      v8 = v7;
      v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
        break;
      v12 = v7;
      v10 = sub_21FAA2A1C(&v12, a2);
      if (v2)
      {
        swift_bridgeObjectRelease();

        return v8;
      }
      if ((v10 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return v8;
      }

      ++v6;
      if (v9 == v5)
        goto LABEL_11;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return 0;
}

_QWORD *sub_21FAA3224(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  id v16;
  uint64_t v17;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v9 = (void *)a2[1];
    v8 = a2[2];
    a1[1] = v9;
    a1[2] = v8;
    v10 = *(int *)(a3 + 28);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = sub_21FC5A6C8();
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    swift_retain();
    v16 = v9;
    if (v15(v12, 1, v13))
    {
      sub_21FAA333C(0);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    *((_BYTE *)v7 + *(int *)(a3 + 32)) = *((_BYTE *)a2 + *(int *)(a3 + 32));
  }
  return v7;
}

void sub_21FAA333C(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25553E0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t sub_21FAA3358(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_release();

  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_21FC5A6C8();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

_QWORD *sub_21FAA33DC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  id v13;
  uint64_t v14;

  v6 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_21FC5A6C8();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_retain();
  v13 = v6;
  if (v12(v9, 1, v10))
  {
    sub_21FAA333C(0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 32)) = *((_BYTE *)a2 + *(int *)(a3 + 32));
  return a1;
}

_QWORD *sub_21FAA34CC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = (void *)a2[1];
  v7 = (void *)a1[1];
  a1[1] = v6;
  v8 = v6;

  a1[2] = a2[2];
  v9 = *(int *)(a3 + 28);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_21FC5A6C8();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    sub_21FAA333C(0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 32)) = *((_BYTE *)a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t sub_21FAA3618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 28);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_21FC5A6C8();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_21FAA333C(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_BYTE *)(a1 + *(int *)(a3 + 32)) = *(_BYTE *)(a2 + *(int *)(a3 + 32));
  return a1;
}

_QWORD *sub_21FAA36F4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  *a1 = *a2;
  swift_release();
  v6 = (void *)a1[1];
  a1[1] = a2[1];

  a1[2] = a2[2];
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_21FC5A6C8();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    sub_21FAA333C(0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 32)) = *((_BYTE *)a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t sub_21FAA3834()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FAA3840(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_21FAA333C(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t sub_21FAA38BC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_21FAA38C8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    sub_21FAA333C(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ClinicalSharingMedicalRecordsQuery()
{
  uint64_t result;

  result = qword_2555404F0;
  if (!qword_2555404F0)
    return swift_getSingletonMetadata();
  return result;
}

void sub_21FAA3978()
{
  unint64_t v0;

  sub_21FAA333C(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_21FAA3A14()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255540538)
  {
    type metadata accessor for ClinicalSharingQueryOutput(255);
    sub_21FA2CDB4();
    v0 = sub_21FC5B244();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255540538);
  }
}

void sub_21FAA3A80()
{
  uint64_t (*v0)(void);
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (!qword_255540540)
  {
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FAA3BF8(255, &qword_25406B968, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA2CCF4();
    v1 = MEMORY[0x24BDB9AF8];
    sub_21FAA3C80((unint64_t *)&qword_25406B960, &qword_25406B968, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    sub_21FA2A08C(&qword_25553E0C8, (uint64_t (*)(uint64_t))sub_21FA2CCF4, v1);
    v2 = sub_21FC5B070();
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_255540540);
  }
}

void sub_21FAA3B64()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255540548)
  {
    sub_21FAA3A80();
    type metadata accessor for ClinicalSharingQueryOutput(255);
    sub_21FA2A08C(&qword_255540550, (uint64_t (*)(uint64_t))sub_21FAA3A80, MEMORY[0x24BDB96E0]);
    v0 = sub_21FC5B004();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255540548);
  }
}

void sub_21FAA3BF8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_21FA7BA1C(255, (unint64_t *)&qword_25406BA70, (unint64_t *)&qword_25406BA88);
    v7 = v6;
    v8 = sub_21FA2CDB4();
    v9 = a3(a1, v7, v8, MEMORY[0x24BEE3F20]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_21FAA3C80(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FAA3BF8(255, a2, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FAA3CC0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_21FAA3CE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for ClinicalSharingMedicalRecordsQuery();
  v2 = v0
     + ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80));
  swift_release();

  v3 = v2 + *(int *)(v1 + 28);
  v4 = sub_21FC5A6C8();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21FAA3DB0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;

  v7 = type metadata accessor for ClinicalSharingMedicalRecordsQuery();
  return sub_21FA9CF18(a1, a2, *(_QWORD *)(v3+ ((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64)+ ((*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80))+ 7) & 0xFFFFFFFFFFFFF8)), a3);
}

uint64_t sub_21FAA3E18()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FAA3E3C(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*a1, a1[1]);
}

void sub_21FAA3E64(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_255540570, (uint64_t (*)(uint64_t))sub_21FA8D544, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t sub_21FAA3E80@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21FC0E944(a1, *(uint64_t **)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_21FAA3E88(uint64_t a1, void (*a2)(char **), uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  void (*v32)(char **);
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;

  v4 = v3;
  v32 = a2;
  v33 = a3;
  v6 = type metadata accessor for PBClinicalRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v26 - v11;
  v31 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
    goto LABEL_44;
  v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v36 = MEMORY[0x24BEE4AF8];
    v29 = (char *)(v13 & ~(v13 >> 63));
    result = sub_21FC01AD8(0, (int64_t)v29, 0);
    if (v13 < 0)
    {
      __break(1u);
      return result;
    }
    v30 = v12;
    v15 = v36;
    v26 = v4;
    if (!v13)
      break;
    v27 = a1 & 0xFFFFFFFFFFFFFF8;
    if (v31)
    {
      swift_bridgeObjectRetain();
      v28 = sub_21FC5BC7C();
    }
    else
    {
      v28 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    v12 = 0;
    v34 = a1 & 0xC000000000000001;
    while (v29 != v12)
    {
      if ((char *)v28 == v12)
        goto LABEL_42;
      if (v34)
      {
        v16 = (char *)MEMORY[0x2207D057C](v12, a1);
      }
      else
      {
        if ((unint64_t)v12 >= *(_QWORD *)(v27 + 16))
          goto LABEL_43;
        v16 = (char *)*(id *)(a1 + 8 * (_QWORD)v12 + 32);
      }
      v17 = v16;
      v18 = (void *)MEMORY[0x2207D0ABC]();
      v35 = v17;
      v32(&v35);
      objc_autoreleasePoolPop(v18);

      v36 = v15;
      v4 = *(_QWORD *)(v15 + 16);
      v19 = *(_QWORD *)(v15 + 24);
      if (v4 >= v19 >> 1)
      {
        sub_21FC01AD8(v19 > 1, v4 + 1, 1);
        v15 = v36;
      }
      ++v12;
      *(_QWORD *)(v15 + 16) = v4 + 1;
      sub_21FA2D23C((uint64_t)v10, v15+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v4, type metadata accessor for PBClinicalRecord);
      if ((char *)v13 == v12)
      {
        v4 = v27;
        goto LABEL_20;
      }
    }
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    swift_bridgeObjectRetain();
    v13 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
  }
  v4 = a1 & 0xFFFFFFFFFFFFFF8;
  v34 = a1 & 0xC000000000000001;
  swift_bridgeObjectRetain();
LABEL_20:
  if (a1 < 0)
    v20 = a1;
  else
    v20 = v4;
  v29 = (char *)v20;
  v10 = v30;
  if (v31)
  {
    while (1)
    {
      swift_bridgeObjectRetain();
      v21 = sub_21FC5BC7C();
      swift_bridgeObjectRelease();
      if (v13 == v21)
        break;
LABEL_27:
      if (v34)
      {
        v22 = (char *)MEMORY[0x2207D057C](v13, a1);
      }
      else
      {
        if (v13 < 0)
        {
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        if ((unint64_t)v13 >= *(_QWORD *)(v4 + 16))
          goto LABEL_39;
        v22 = (char *)*(id *)(a1 + 8 * v13 + 32);
      }
      v12 = v22;
      if (__OFADD__(v13, 1))
        goto LABEL_40;
      v23 = (void *)MEMORY[0x2207D0ABC]();
      v35 = v12;
      v32(&v35);
      objc_autoreleasePoolPop(v23);

      v36 = v15;
      v25 = *(_QWORD *)(v15 + 16);
      v24 = *(_QWORD *)(v15 + 24);
      v12 = (char *)(v25 + 1);
      if (v25 >= v24 >> 1)
      {
        sub_21FC01AD8(v24 > 1, v25 + 1, 1);
        v15 = v36;
      }
      *(_QWORD *)(v15 + 16) = v12;
      sub_21FA2D23C((uint64_t)v10, v15+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v25, type metadata accessor for PBClinicalRecord);
      ++v13;
      if (!v31)
        goto LABEL_24;
    }
  }
  else
  {
LABEL_24:
    if (v13 != *(_QWORD *)(v4 + 16))
      goto LABEL_27;
  }
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_21FAA4244@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21FAE53E0(a1, *(uint64_t **)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_21FAA424C@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21FAE47D8(a1, *(uint64_t **)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_21FAA4254@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21FAE32F8(a1, *(uint64_t **)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_21FAA425C@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21FAC329C(a1, *(uint64_t **)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void sub_21FAA4264(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_255540580, type metadata accessor for PBHKInspectableValue, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t sub_21FAA4280@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21FA9FB9C(*a1, a2);
}

void sub_21FAA42AC(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_255540590, type metadata accessor for PBHKConcept, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_21FAA42C8(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_2555405A0, type metadata accessor for PBHKRatioValue, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_21FAA42E4(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_2555405A8, type metadata accessor for PBHKCodedQuantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

id sub_21FAA4300@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21FAA16F8(*a1, a2);
}

id sub_21FAA432C@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21FAA20B0(*a1, a2);
}

void sub_21FAA4358(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_2555405C8, type metadata accessor for PBHKInspectableValueCollection, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_21FAA4374()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_2555405D0)
  {
    sub_21FAA43D4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_2555405D0);
  }
}

void sub_21FAA43D4(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25406BE78, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t getEnumTagSinglePayload for ClinicalSharingMedicalRecordsQuery.ChartablePointType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ClinicalSharingMedicalRecordsQuery.ChartablePointType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21FAA44CC + 4 * byte_21FC60A9A[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21FAA4500 + 4 * byte_21FC60A95[v4]))();
}

uint64_t sub_21FAA4500(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FAA4508(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FAA4510);
  return result;
}

uint64_t sub_21FAA451C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FAA4524);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21FAA4528(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FAA4530(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingMedicalRecordsQuery.ChartablePointType()
{
  return &type metadata for ClinicalSharingMedicalRecordsQuery.ChartablePointType;
}

unint64_t sub_21FAA4550()
{
  unint64_t result;

  result = qword_2555405E0;
  if (!qword_2555405E0)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC60B44, &type metadata for ClinicalSharingMedicalRecordsQuery.ChartablePointType);
    atomic_store(result, (unint64_t *)&qword_2555405E0);
  }
  return result;
}

id HKMedicationUserDomainConcept.freeTextMedicationForm.getter()
{
  return sub_21FAA45AC((SEL *)&selRef_freeTextMedicationFormCode);
}

id HKMedicationUserDomainConcept.freeTextMedicationLoggingUnit.getter()
{
  return sub_21FAA45AC((SEL *)&selRef_freeTextMedicationLoggingUnitCode);
}

id sub_21FAA45AC(SEL *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;

  v2 = objc_msgSend(v1, *a1);
  v3 = v2;
  if (!v2)
    return 0;
  v4 = objc_msgSend(v2, sel_longLongValue);

  return v4;
}

uint64_t sub_21FAA460C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  char v13;
  uint64_t v15;

  v7 = sub_21FC5AB00();
  v8 = v3;
  swift_retain();
  v9 = sub_21FAA4BEC(v7, v8, a1);
  swift_bridgeObjectRelease();

  swift_release();
  if (v9[2])
  {
    v10 = v9[4];
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRelease();
    v11 = v8;
    swift_getAtKeyPath();

    if (*(_QWORD *)(v15 + 16))
    {
      swift_bridgeObjectRetain();
      v12 = sub_21FA73F34(a2, a3);
      if ((v13 & 1) != 0)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 16 * v12);
        swift_bridgeObjectRetain();
      }
      else
      {
        v10 = 0;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v10 = 0;
    }
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_21FAA4740@<X0>(void *a1@<X1>, _QWORD *a2@<X8>)
{
  id v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;

  v4 = objc_allocWithZone(MEMORY[0x24BDBCEA0]);
  swift_bridgeObjectRetain();
  v5 = (void *)sub_21FC5B5E0();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel_initWithLocaleIdentifier_, v5);

  v7 = objc_msgSend(v6, sel_languageCode);
  v8 = sub_21FC5B604();
  v10 = v9;

  v11 = objc_msgSend(v6, sel_regionCode);
  if (v11)
  {
    v12 = v11;
    v13 = sub_21FC5B604();
    v15 = v14;

  }
  else
  {
    v15 = 0xE200000000000000;
    v13 = 21333;
  }
  sub_21FAA4D44(0, &qword_25553F0A8, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE3598]);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_21FC5F720;
  *(_QWORD *)(v16 + 32) = v8;
  *(_QWORD *)(v16 + 40) = v10;
  *(_QWORD *)(v16 + 48) = v13;
  *(_QWORD *)(v16 + 56) = v15;
  sub_21FAA4D44(0, (unint64_t *)&qword_25406BA60, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1250]);
  sub_21FA80314();
  v17 = sub_21FC5B5B0();
  v19 = v18;
  swift_bridgeObjectRelease();

  v20 = a1;
  swift_getAtKeyPath();

  if (*(_QWORD *)(v27 + 16) && (v21 = sub_21FA73F34(v17, v19), (v22 & 1) != 0))
  {
    v23 = (uint64_t *)(*(_QWORD *)(v27 + 56) + 16 * v21);
    v24 = *v23;
    v25 = v23[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    v24 = 0;
    v25 = 0;
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v24;
  a2[1] = v25;
  return result;
}

uint64_t HKMedicationUserDomainConcept.brandName.getter()
{
  return sub_21FAA4A14();
}

char *keypath_get_selector_localizedOntologyBrandNames()
{
  return sel_localizedOntologyBrandNames;
}

void sub_21FAA4960(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_21FAA4B70(a1, (SEL *)&selRef_localizedOntologyBrandNames, a2);
}

void sub_21FAA496C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_21FAA4B70(a1, (SEL *)&selRef_localizedOntologyBrandNames, a2);
}

uint64_t HKMedicationUserDomainConcept.preferredName.getter()
{
  return sub_21FAA4A14();
}

char *keypath_get_selector_localizedOntologyPreferredNames()
{
  return sel_localizedOntologyPreferredNames;
}

void sub_21FAA49A0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_21FAA4B70(a1, (SEL *)&selRef_localizedOntologyPreferredNames, a2);
}

void sub_21FAA49AC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_21FAA4B70(a1, (SEL *)&selRef_localizedOntologyPreferredNames, a2);
}

uint64_t HKMedicationUserDomainConcept.genericName.getter()
{
  return sub_21FAA4A14();
}

char *keypath_get_selector_localizedOntologyGenericNames()
{
  return sel_localizedOntologyGenericNames;
}

void sub_21FAA49E0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_21FAA4B70(a1, (SEL *)&selRef_localizedOntologyGenericNames, a2);
}

void sub_21FAA49EC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_21FAA4B70(a1, (SEL *)&selRef_localizedOntologyGenericNames, a2);
}

uint64_t HKMedicationUserDomainConcept.basicDoseForm.getter()
{
  return sub_21FAA4A14();
}

uint64_t sub_21FAA4A14()
{
  uint64_t KeyPath;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  KeyPath = swift_getKeyPath();
  v1 = sub_21FC5B604();
  v3 = sub_21FAA460C(KeyPath, v1, v2);
  swift_release();
  swift_bridgeObjectRelease();
  return v3;
}

char *keypath_get_selector_localizedOntologyBasicDoseForms()
{
  return sel_localizedOntologyBasicDoseForms;
}

void sub_21FAA4A90(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_21FAA4B70(a1, (SEL *)&selRef_localizedOntologyBasicDoseForms, a2);
}

void sub_21FAA4A9C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_21FAA4B70(a1, (SEL *)&selRef_localizedOntologyBasicDoseForms, a2);
}

uint64_t HKMedicationUserDomainConcept.loggingUnitSingular.getter()
{
  return sub_21FAA4B04();
}

char *keypath_get_selector_localizedOntologyLoggingUnitSingular()
{
  return sel_localizedOntologyLoggingUnitSingular;
}

void sub_21FAA4AD0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_21FAA4B70(a1, (SEL *)&selRef_localizedOntologyLoggingUnitSingular, a2);
}

void sub_21FAA4ADC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_21FAA4B70(a1, (SEL *)&selRef_localizedOntologyLoggingUnitSingular, a2);
}

uint64_t HKMedicationUserDomainConcept.loggingUnitPlural.getter()
{
  return sub_21FAA4B04();
}

uint64_t sub_21FAA4B04()
{
  uint64_t KeyPath;
  uint64_t v1;

  KeyPath = swift_getKeyPath();
  v1 = sub_21FAA460C(KeyPath, 0x53552D6E65, 0xE500000000000000);
  swift_release();
  return v1;
}

char *keypath_get_selector_localizedOntologyLoggingUnitPlural()
{
  return sel_localizedOntologyLoggingUnitPlural;
}

void sub_21FAA4B64(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_21FAA4B70(a1, (SEL *)&selRef_localizedOntologyLoggingUnitPlural, a2);
}

void sub_21FAA4B70(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  id v4;
  uint64_t v5;

  v4 = objc_msgSend(*a1, *a2);
  v5 = sub_21FC5B568();

  *a3 = v5;
}

void sub_21FAA4BD0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_21FAA4B70(a1, (SEL *)&selRef_localizedOntologyLoggingUnitPlural, a2);
}

_QWORD *sub_21FAA4BEC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = a3;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v6 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    v9 = *v6;
    v17 = *(v6 - 1);
    v18 = v9;
    swift_bridgeObjectRetain();
    sub_21FAA4740(a2, &v15);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7;
    }
    swift_bridgeObjectRelease();
    v10 = v16;
    if (v16)
    {
      v11 = v15;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = sub_21FA7DD0C(0, v7[2] + 1, 1, v7);
      v13 = v7[2];
      v12 = v7[3];
      if (v13 >= v12 >> 1)
        v7 = sub_21FA7DD0C((_QWORD *)(v12 > 1), v13 + 1, 1, v7);
      v7[2] = v13 + 1;
      v8 = &v7[2 * v13];
      v8[4] = v11;
      v8[5] = v10;
    }
    v6 += 2;
    --v4;
  }
  while (v4);
  swift_bridgeObjectRelease();
  return v7;
}

void sub_21FAA4D44(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x24BEE0D00]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t static WellKnownJWKSRequest.wellKnownJWKsPath.getter()
{
  return 0xD000000000000015;
}

void WellKnownJWKSRequest.method.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t WellKnownJWKSRequest.headers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t WellKnownJWKSRequest.headers.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*WellKnownJWKSRequest.headers.modify())()
{
  return nullsub_1;
}

uint64_t WellKnownJWKSRequest.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WellKnownJWKSRequest() + 24);
  v4 = sub_21FC5A98C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for WellKnownJWKSRequest()
{
  uint64_t result;

  result = qword_255540648;
  if (!qword_255540648)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t WellKnownJWKSRequest.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for WellKnownJWKSRequest() + 28);
  v2 = *(_QWORD *)v1;
  sub_21FA3277C(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t WellKnownJWKSRequest.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for WellKnownJWKSRequest() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WellKnownJWKSRequest.init(baseURLString:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  void (*v21)(char *, char *, uint64_t);
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_21FA32580();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_21FC5A98C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)a3 = 2;
  *(_QWORD *)(a3 + 8) = 0;
  v13 = (int *)type metadata accessor for WellKnownJWKSRequest();
  v24 = a3 + v13[7];
  v25 = a1;
  *(_OWORD *)v24 = xmmword_21FC5E350;
  v26 = a2;
  swift_bridgeObjectRetain();
  sub_21FC5B688();
  v14 = sub_21FC5B70C();
  v16 = v15;
  swift_bridgeObjectRelease();
  if (v14 == 47 && v16 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v17 = sub_21FC5BDF0();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
      sub_21FC5B6AC();
  }
  sub_21FC5B6AC();
  swift_bridgeObjectRetain();
  sub_21FC0A3DC(v8);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_21FAA51C8((uint64_t)v8);
    type metadata accessor for WebRequestError();
    sub_21FAA5204();
    swift_allocError();
    v18 = v26;
    *v19 = v25;
    v19[1] = v18;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_bridgeObjectRelease();
    return sub_21FA3239C(*(_QWORD *)v24, *(_QWORD *)(v24 + 8));
  }
  else
  {
    swift_bridgeObjectRelease();
    v21 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v21(v12, v8, v9);
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v21)(a3 + v13[6], v12, v9);
    v22 = (_QWORD *)(a3 + v13[8]);
    *v22 = 0x6F6E4B2D6C6C6557;
    v22[1] = 0xEF534B574A206E77;
  }
  return result;
}

uint64_t sub_21FAA51C8(uint64_t a1)
{
  uint64_t v2;

  sub_21FA32580();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_21FAA5204()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2555405E8;
  if (!qword_2555405E8)
  {
    v1 = type metadata accessor for WebRequestError();
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for WebRequestError, v1);
    atomic_store(result, (unint64_t *)&qword_2555405E8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for WellKnownJWKSRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FAA5258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_21FC5A98C();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for WellKnownJWKSRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FAA52E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_21FC5A98C();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 24), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_21FAA5368()
{
  uint64_t result;
  unint64_t v1;

  result = sub_21FC5A98C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21FAA53F8()
{
  swift_getMetatypeMetadata();
  return sub_21FC5B64C();
}

uint64_t sub_21FAA5428()
{
  uint64_t v0;

  MEMORY[0x2207D105C](*(_QWORD *)(v0 + 40), -1, -1);

  sub_21FA97DF0(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance();
}

uint64_t sub_21FAA5464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  _QWORD v15[6];

  v6 = objc_allocWithZone(MEMORY[0x24BDD1470]);
  v7 = (void *)sub_21FC5B5E0();
  v8 = objc_msgSend(v6, sel_initWithIdentifier_, v7);

  objc_msgSend(v8, sel_setPreregistered_, 1);
  v9 = swift_allocObject();
  swift_weakInit();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  v15[4] = sub_21FAA68E0;
  v15[5] = v10;
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 1107296256;
  v15[2] = sub_21FAA5654;
  v15[3] = &block_descriptor_3;
  v11 = _Block_copy(v15);
  v12 = v8;
  swift_release();
  objc_msgSend(v12, sel_scheduleWithBlock_, v11);

  _Block_release(v11);
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  swift_retain();
  return sub_21FA97DF0(v13);
}

uint64_t sub_21FAA55D0(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, void *a4)
{
  swift_beginAccess();
  if (!swift_weakLoadStrong())
    return a1(1);
  sub_21FAA5908(a4, a1, a2);
  return swift_release();
}

uint64_t sub_21FAA5654(uint64_t a1, void *aBlock)
{
  void (*v2)(uint64_t (*)(), uint64_t);
  void *v3;
  uint64_t v4;

  v2 = *(void (**)(uint64_t (*)(), uint64_t))(a1 + 32);
  v3 = _Block_copy(aBlock);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  swift_retain();
  v2(sub_21FAA6924, v4);
  swift_release();
  return swift_release();
}

uint64_t sub_21FAA56C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v1 = v0;
  if (qword_25406B7F8 != -1)
    swift_once();
  v2 = sub_21FC5AFD4();
  __swift_project_value_buffer(v2, (uint64_t)qword_25406D830);
  swift_retain_n();
  v3 = sub_21FC5AFC8();
  v4 = sub_21FC5B964();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v10 = v6;
    *(_DWORD *)v5 = 136315138;
    swift_getMetatypeMetadata();
    v7 = sub_21FC5B64C();
    sub_21FABDCF8(v7, v8, &v10);
    sub_21FC5BAC0();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v3, v4, "%s: invalidated", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v6, -1, -1);
    MEMORY[0x2207D105C](v5, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v10 = *(_QWORD *)(v1 + 40);
  sub_21FA2D1A0(0, &qword_25406BAE0, (uint64_t (*)(uint64_t))type metadata accessor for os_unfair_lock_s, MEMORY[0x24BEE1C28]);
  sub_21FAA6830();
  return sub_21FC5ACBC();
}

void sub_21FAA58C4(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_21FA97DF0(v2);
  objc_msgSend(*(id *)(a1 + 16), sel_invalidate);
  v3 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;

}

uint64_t sub_21FAA5908(void *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t *);
  _QWORD *v28;
  uint64_t v29;
  id v30;
  os_log_type_t type;
  uint64_t v33;
  uint64_t v35[2];

  v4 = v3;
  if (qword_25406B7F8 != -1)
    swift_once();
  v7 = sub_21FC5AFD4();
  __swift_project_value_buffer(v7, (uint64_t)qword_25406D830);
  swift_retain_n();
  v8 = a1;
  v9 = sub_21FC5AFC8();
  v10 = sub_21FC5B994();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc();
    v33 = swift_slowAlloc();
    v35[0] = v33;
    *(_DWORD *)v11 = 136315394;
    type = v10;
    swift_getMetatypeMetadata();
    v12 = sub_21FC5B64C();
    sub_21FABDCF8(v12, v13, v35);
    sub_21FC5BAC0();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    v14 = objc_msgSend(v8, sel_identifier);
    v15 = a3;
    v16 = sub_21FC5B604();
    v18 = v17;

    v19 = v16;
    a3 = v15;
    v4 = v3;
    sub_21FABDCF8(v19, v18, v35);
    sub_21FC5BAC0();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v9, type, "%s: activity \"%s\" fired", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v33, -1, -1);
    MEMORY[0x2207D105C](v11, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  if (objc_msgSend(v8, sel_shouldDefer))
  {
    swift_retain_n();
    v20 = sub_21FC5AFC8();
    v21 = sub_21FC5B964();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      v23 = swift_slowAlloc();
      v35[0] = v23;
      *(_DWORD *)v22 = 136315138;
      swift_getMetatypeMetadata();
      v24 = sub_21FC5B64C();
      sub_21FABDCF8(v24, v25, v35);
      sub_21FC5BAC0();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21FA27000, v20, v21, "%s: shouldDefer is true. Deferring!", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v23, -1, -1);
      MEMORY[0x2207D105C](v22, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v26 = 2;
  }
  else
  {
    sub_21FA2D1A0(0, &qword_25406BAE0, (uint64_t (*)(uint64_t))type metadata accessor for os_unfair_lock_s, MEMORY[0x24BEE1C28]);
    sub_21FAA693C();
    sub_21FAA6830();
    sub_21FC5ACB0();
    v27 = (void (*)(uint64_t *))v35[0];
    if (v35[0])
    {
      v28 = (_QWORD *)swift_allocObject();
      v28[2] = v4;
      v28[3] = a2;
      v28[4] = a3;
      v28[5] = v8;
      v29 = swift_allocObject();
      *(_QWORD *)(v29 + 16) = sub_21FAA6A04;
      *(_QWORD *)(v29 + 24) = v28;
      v35[0] = (uint64_t)sub_21FA2CFB4;
      v35[1] = v29;
      swift_retain();
      v30 = v8;
      swift_retain();
      swift_retain();
      v27(v35);
      swift_release();
      swift_release();
      return sub_21FA97DF0((uint64_t)v27);
    }
    objc_msgSend(v8, sel_setInterval_, 86400.0);
    objc_msgSend(v8, sel_setTolerance_, 43200.0);
    v26 = 1;
  }
  return a2(v26);
}

uint64_t sub_21FAA5E0C@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t *a1)@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t *);

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_21FAA6A34;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)(uint64_t *))v5;
  return sub_21FA97D28(v3);
}

uint64_t sub_21FAA5E70(uint64_t *a1, void (*a2)(uint64_t (*)(uint64_t a1), uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  a2(sub_21FAA6A3C, v5);
  return swift_release();
}

void sub_21FAA5EDC(void *a1, uint64_t *a2, void (*a3)(_QWORD), uint64_t a4, void *a5)
{
  id v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(_QWORD);
  void (*v50)(_QWORD);
  uint64_t v51;
  uint64_t v52;

  if (a1)
  {
    v52 = (uint64_t)a1;
    v9 = a1;
    v10 = a1;
    sub_21FA2CDB4();
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (qword_25406B7F8 != -1)
        swift_once();
      v11 = sub_21FC5AFD4();
      __swift_project_value_buffer(v11, (uint64_t)qword_25406D830);
      swift_retain_n();
      v12 = sub_21FC5AFC8();
      v13 = sub_21FC5B964();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc();
        v51 = swift_slowAlloc();
        v15 = v51;
        *(_DWORD *)v14 = 136315138;
        v52 = *a2;
        swift_getMetatypeMetadata();
        v16 = sub_21FC5B64C();
        v52 = sub_21FABDCF8(v16, v17, &v51);
        sub_21FC5BAC0();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_21FA27000, v12, v13, "%s: shouldDefer returned from handler. Deferring!", v14, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2207D105C](v15, -1, -1);
        MEMORY[0x2207D105C](v14, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      v47 = 2;
    }
    else
    {
      if (qword_25406B7F8 != -1)
        swift_once();
      v30 = sub_21FC5AFD4();
      __swift_project_value_buffer(v30, (uint64_t)qword_25406D830);
      swift_retain();
      v31 = a5;
      v32 = a1;
      swift_retain();
      v33 = v31;
      v34 = a1;
      v35 = sub_21FC5AFC8();
      v36 = sub_21FC5B97C();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = swift_slowAlloc();
        v48 = swift_slowAlloc();
        v51 = v48;
        *(_DWORD *)v37 = 136315650;
        v52 = *a2;
        swift_getMetatypeMetadata();
        v38 = sub_21FC5B64C();
        v50 = a3;
        v52 = sub_21FABDCF8(v38, v39, &v51);
        sub_21FC5BAC0();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v37 + 12) = 2080;
        v40 = objc_msgSend(v33, sel_identifier);
        v41 = sub_21FC5B604();
        v43 = v42;

        v52 = sub_21FABDCF8(v41, v43, &v51);
        sub_21FC5BAC0();

        swift_bridgeObjectRelease();
        *(_WORD *)(v37 + 22) = 2080;
        v52 = (uint64_t)a1;
        v44 = a1;
        v45 = sub_21FC5B64C();
        v52 = sub_21FABDCF8(v45, v46, &v51);
        sub_21FC5BAC0();
        a3 = v50;
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_21FA27000, v35, v36, "%s: activity \"%s\" failed: %s", (uint8_t *)v37, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x2207D105C](v48, -1, -1);
        MEMORY[0x2207D105C](v37, -1, -1);
      }
      else
      {

        swift_release_n();
      }

      objc_msgSend(v33, sel_setInterval_, 86400.0);
      objc_msgSend(v33, sel_setTolerance_, 43200.0);
      v47 = 1;
    }
    a3(v47);

  }
  else
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v18 = sub_21FC5AFD4();
    __swift_project_value_buffer(v18, (uint64_t)qword_25406D830);
    swift_retain_n();
    v19 = a5;
    v20 = sub_21FC5AFC8();
    v21 = sub_21FC5B994();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc();
      v51 = swift_slowAlloc();
      v23 = v51;
      *(_DWORD *)v22 = 136315394;
      v52 = *a2;
      swift_getMetatypeMetadata();
      v24 = sub_21FC5B64C();
      v49 = a3;
      v52 = sub_21FABDCF8(v24, v25, &v51);
      sub_21FC5BAC0();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      v26 = objc_msgSend(v19, sel_identifier);
      v27 = sub_21FC5B604();
      v29 = v28;

      a3 = v49;
      v52 = sub_21FABDCF8(v27, v29, &v51);
      sub_21FC5BAC0();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21FA27000, v20, v21, "%s: activity \"%s\" succeeded", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v23, -1, -1);
      MEMORY[0x2207D105C](v22, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    objc_msgSend(v19, sel_setInterval_, 604800.0);
    objc_msgSend(v19, sel_setTolerance_, 302400.0);
    a3(1);
  }
}

uint64_t sub_21FAA6604()
{
  sub_21FA2D1A0(0, &qword_25406BAE0, (uint64_t (*)(uint64_t))type metadata accessor for os_unfair_lock_s, MEMORY[0x24BEE1C28]);
  sub_21FAA6830();
  return sub_21FC5ACBC();
}

uint64_t sub_21FAA667C()
{
  return sub_21FAA56C4();
}

uint64_t static IssuerDirectoryDownloadTaskSchedulerError.== infix(_:_:)()
{
  return 1;
}

uint64_t IssuerDirectoryDownloadTaskSchedulerError.hash(into:)()
{
  return sub_21FC5BE98();
}

uint64_t IssuerDirectoryDownloadTaskSchedulerError.hashValue.getter()
{
  sub_21FC5BE8C();
  sub_21FC5BE98();
  return sub_21FC5BEB0();
}

unint64_t sub_21FAA670C()
{
  unint64_t result;

  result = qword_255540690;
  if (!qword_255540690)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for IssuerDirectoryDownloadTaskSchedulerError, &type metadata for IssuerDirectoryDownloadTaskSchedulerError);
    atomic_store(result, (unint64_t *)&qword_255540690);
  }
  return result;
}

uint64_t dispatch thunk of IssuerDirectoryDownloadTaskScheduling.activate(handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of IssuerDirectoryDownloadTaskScheduling.invalidate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of IssuerDirectoryDownloadTaskScheduling.shouldDefer()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t type metadata accessor for IssuerDirectoryDownloadTaskScheduler()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for IssuerDirectoryDownloadTaskSchedulerError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21FAA67C8 + 4 * byte_21FC60E30[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21FAA67E8 + 4 * byte_21FC60E35[v4]))();
}

_BYTE *sub_21FAA67C8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21FAA67E8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21FAA67F0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21FAA67F8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21FAA6800(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21FAA6808(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for IssuerDirectoryDownloadTaskSchedulerError()
{
  return &type metadata for IssuerDirectoryDownloadTaskSchedulerError;
}

uint64_t sub_21FAA6824()
{
  uint64_t *v0;

  return sub_21FAA5464(v0[2], v0[3], v0[4]);
}

unint64_t sub_21FAA6830()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25406CB70;
  if (!qword_25406CB70)
  {
    sub_21FA2D1A0(255, &qword_25406BAE0, (uint64_t (*)(uint64_t))type metadata accessor for os_unfair_lock_s, MEMORY[0x24BEE1C28]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BE45C08], v1);
    atomic_store(result, (unint64_t *)&qword_25406CB70);
  }
  return result;
}

uint64_t sub_21FAA6890()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_21FAA68B4()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_21FAA68E0(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;

  return sub_21FAA55D0(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t sub_21FAA6900()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_21FAA6924()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_21FAA6934@<X0>(uint64_t (**a1)(uint64_t *a1)@<X8>)
{
  uint64_t v1;

  return sub_21FAA5E0C(v1, a1);
}

void sub_21FAA693C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255540698)
  {
    sub_21FA8020C(255, &qword_2555406A0, (void (*)(uint64_t))sub_21FAA69A0);
    v0 = sub_21FC5BAA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255540698);
  }
}

uint64_t sub_21FAA69A0(uint64_t a1)
{
  return sub_21FA8020C(a1, &qword_25406BB98, sub_21FAA69B4);
}

void sub_21FAA69B4(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25406BB60, (uint64_t (*)(uint64_t))sub_21FA2CDB4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t sub_21FAA69D0()
{
  uint64_t v0;

  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_21FAA6A04(void *a1)
{
  uint64_t v1;

  sub_21FAA5EDC(a1, *(uint64_t **)(v1 + 16), *(void (**)(_QWORD))(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_21FAA6A10()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FAA6A34(uint64_t *a1)
{
  uint64_t v1;

  return sub_21FAA5E70(a1, *(void (**)(uint64_t (*)(uint64_t), uint64_t))(v1 + 16));
}

uint64_t sub_21FAA6A3C(uint64_t a1)
{
  uint64_t v1;

  return sub_21FBB4AD8(a1, *(uint64_t (**)(uint64_t *))(v1 + 16));
}

void sub_21FAA6A44()
{
  uint64_t v0;

  sub_21FAA58C4(v0);
}

uint64_t sub_21FAA6A54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a2 + 16);
  swift_getMetatypeMetadata();
  *(_QWORD *)(v2 + 16) = sub_21FC5B64C();
  *(_QWORD *)(v2 + 24) = v6;
  *(_QWORD *)(v2 + 32) = a1;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)a2;
  *(_QWORD *)(v2 + 56) = v5;
  return v2;
}

uint64_t sub_21FAA6AB8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[51] = a1;
  v2[52] = v1;
  v3 = sub_21FC5AAF4();
  v2[53] = v3;
  v2[54] = *(_QWORD *)(v3 - 8);
  v2[55] = swift_task_alloc();
  v4 = sub_21FC5A98C();
  v2[56] = v4;
  v2[57] = *(_QWORD *)(v4 - 8);
  v2[58] = swift_task_alloc();
  sub_21FA32580();
  v2[59] = swift_task_alloc();
  v2[60] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_21FAA6B70()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  id v33;
  id v34;
  _QWORD *v35;
  uint64_t v37;
  uint64_t v38;

  if (qword_25406B7F8 != -1)
    swift_once();
  v1 = sub_21FC5AFD4();
  v0[61] = __swift_project_value_buffer(v1, (uint64_t)qword_25406D830);
  swift_retain_n();
  v2 = sub_21FC5AFC8();
  v3 = sub_21FC5B970();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[52];
  if (v4)
  {
    v6 = swift_slowAlloc();
    v7 = swift_slowAlloc();
    v38 = v7;
    *(_DWORD *)v6 = 136315394;
    v9 = *(_QWORD *)(v5 + 16);
    v8 = *(_QWORD *)(v5 + 24);
    swift_bridgeObjectRetain();
    v0[47] = sub_21FABDCF8(v9, v8, &v38);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    v10 = objc_msgSend(*(id *)(v5 + 32), sel_webURL);
    v37 = v7;
    if (v10)
    {
      v11 = v10;
      sub_21FC5A950();

      v12 = 0;
    }
    else
    {
      v12 = 1;
    }
    v14 = v0[59];
    v13 = v0[60];
    v16 = v0[56];
    v15 = v0[57];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v14, v12, 1, v16);
    sub_21FAA95B4(v14, v13);
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v16);
    v18 = v0[60];
    if (v17 == 1)
    {
      sub_21FAA51C8(v0[60]);
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v22 = v0[56];
      v21 = v0[57];
      v19 = sub_21FC5A8FC();
      v20 = v23;
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v18, v22);
    }
    v0[42] = v19;
    v0[43] = v20;
    sub_21FA32728();
    swift_bridgeObjectRetain();
    sub_21FC5BE08();
    v24 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_21FC5BAF0();
    swift_unknownObjectRelease();
    v25 = sub_21FC5B64C();
    v27 = v26;
    swift_bridgeObjectRelease();
    v0[50] = sub_21FABDCF8(v25, v27, &v38);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_21FA27000, v2, v3, "%s) Calling downloadDocument for %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v37, -1, -1);
    MEMORY[0x2207D105C](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v28 = (_QWORD *)v0[52];
  v29 = v28[5];
  v0[62] = v29;
  v30 = (void *)v28[6];
  v0[63] = v30;
  v31 = (void *)v28[7];
  v0[64] = v31;
  v0[39] = v29;
  v0[40] = v30;
  v0[41] = v31;
  v32 = v28[4];
  v0[65] = v32;
  swift_retain();
  v33 = v30;
  v34 = v31;
  v35 = (_QWORD *)swift_task_alloc();
  v0[66] = v35;
  *v35 = v0;
  v35[1] = sub_21FAA6F18;
  return sub_21FAC9EA8(v0[58], v32, 0);
}

uint64_t sub_21FAA6F18()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = *v1;
  *(_QWORD *)(*v1 + 536) = v0;
  swift_task_dealloc();
  v4 = *(void **)(v2 + 504);
  v3 = *(void **)(v2 + 512);
  swift_release();

  return swift_task_switch();
}

uint64_t sub_21FAA6FAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 432);
  v1 = *(_QWORD *)(v0 + 440);
  v3 = *(_QWORD *)(v0 + 424);
  v4 = *(void **)(v0 + 408);
  v5 = objc_msgSend(*(id *)(v0 + 520), sel_identifier);
  sub_21FC5AADC();

  v6 = sub_21FC5AAC4();
  *(_QWORD *)(v0 + 544) = v6;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7 = sub_21FC5A920();
  *(_QWORD *)(v0 + 552) = v7;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_21FAA70BC;
  v8 = swift_continuation_init();
  *(_QWORD *)(v0 + 184) = MEMORY[0x24BDAC760];
  *(_QWORD *)(v0 + 192) = 0x40000000;
  *(_QWORD *)(v0 + 200) = sub_21FBA132C;
  *(_QWORD *)(v0 + 208) = &block_descriptor_7;
  *(_QWORD *)(v0 + 216) = v8;
  objc_msgSend(v4, sel_markDownloadCompleteForAttachmentWithIdentifier_fileURL_completion_, v6, v7, v0 + 184);
  return swift_continuation_await();
}

uint64_t sub_21FAA70BC()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 560) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_21FAA711C()
{
  uint64_t v0;
  void *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(void **)(v0 + 544);

  swift_retain_n();
  v2 = sub_21FC5AFC8();
  v3 = sub_21FC5B970();
  if (os_log_type_enabled(v2, v3))
  {
    v13 = *(_QWORD *)(v0 + 456);
    v14 = *(_QWORD *)(v0 + 448);
    v15 = *(_QWORD *)(v0 + 464);
    v4 = *(_QWORD *)(v0 + 416);
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v16 = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 368) = sub_21FABDCF8(v7, v8, &v16);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_21FA27000, v2, v3, "%s Successfully completed downloadDocument", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v6, -1, -1);
    MEMORY[0x2207D105C](v5, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v15, v14);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 456);
    v9 = *(_QWORD *)(v0 + 464);
    v11 = *(_QWORD *)(v0 + 448);

    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21FAA7310()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 592) = *(_QWORD *)(*(_QWORD *)v0 + 112);
  return swift_task_switch();
}

uint64_t sub_21FAA7370()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 576);

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

char *sub_21FAA73EC()
{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  char *result;
  char *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  os_log_type_t type;
  uint64_t v30;
  uint64_t v31;

  v1 = (void *)v0[67];
  v0[71] = v1;
  swift_retain();
  v2 = v1;
  swift_retain();
  v3 = v1;
  v4 = sub_21FC5AFC8();
  v5 = sub_21FC5B97C();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = v0[52];
    v7 = swift_slowAlloc();
    v30 = swift_slowAlloc();
    *(_DWORD *)v7 = 136315394;
    type = v5;
    v31 = v30;
    v8 = *(_QWORD *)(v6 + 16);
    v9 = *(_QWORD *)(v6 + 24);
    swift_bridgeObjectRetain();
    v0[48] = sub_21FABDCF8(v8, v9, &v31);
    sub_21FC5BAC0();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    v0[45] = v1;
    v10 = v1;
    v11 = v1;
    sub_21FA2CDB4();
    sub_21FC5BE08();
    v12 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_21FC5BAF0();
    swift_unknownObjectRelease();
    v13 = sub_21FC5B64C();
    v15 = v14;

    v0[44] = sub_21FABDCF8(v13, v15, &v31);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_21FA27000, v4, type, "%s Error in downloadDocument: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v30, -1, -1);
    MEMORY[0x2207D105C](v7, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  v16 = (void *)v0[65];
  v18 = v0[54];
  v17 = v0[55];
  v19 = v0[53];
  v20 = objc_msgSend(v16, sel_identifier);
  sub_21FC5AADC();

  v21 = sub_21FC5AAC4();
  v0[72] = v21;
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  swift_getErrorValue();
  v22 = sub_21FBADCD8(v0[37]);
  v23 = sub_21FC5A8D8();
  v0[73] = v23;

  result = (char *)objc_msgSend(v16, sel_retryCount);
  v25 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    v26 = (void *)v0[51];
    v0[10] = v0;
    v0[11] = sub_21FAA7310;
    v27 = swift_continuation_init();
    v0[18] = MEMORY[0x24BDAC760];
    v28 = v0 + 18;
    v28[1] = 0x40000000;
    v28[2] = sub_21FBA132C;
    v28[3] = &block_descriptor_5;
    v28[4] = v27;
    objc_msgSend(v26, sel_updateErrorStatusAndRetryCountForAttachmentWithIdentifier_errorStatus_lastError_retryCount_completion_, v21, 1, v23, v25, v28);
    return (char *)swift_continuation_await();
  }
  return result;
}

char *sub_21FAA778C()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  char *result;
  char *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  os_log_type_t type;
  uint64_t v35;
  uint64_t v36[2];

  v1 = (void *)v0[69];
  v2 = (void *)v0[68];
  v4 = v0[57];
  v3 = v0[58];
  v5 = v0[56];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);

  v6 = (void *)v0[70];
  v0[71] = v6;
  swift_retain();
  v7 = v6;
  swift_retain();
  v8 = v6;
  v9 = sub_21FC5AFC8();
  v10 = sub_21FC5B97C();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = v0[52];
    v12 = swift_slowAlloc();
    v35 = swift_slowAlloc();
    *(_DWORD *)v12 = 136315394;
    type = v10;
    v36[0] = v35;
    v13 = *(_QWORD *)(v11 + 16);
    v14 = *(_QWORD *)(v11 + 24);
    swift_bridgeObjectRetain();
    v0[48] = sub_21FABDCF8(v13, v14, v36);
    sub_21FC5BAC0();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    v0[45] = v6;
    v15 = v6;
    v16 = v6;
    sub_21FA2CDB4();
    sub_21FC5BE08();
    v17 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_21FC5BAF0();
    swift_unknownObjectRelease();
    v18 = sub_21FC5B64C();
    v20 = v19;

    v0[44] = sub_21FABDCF8(v18, v20, v36);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_21FA27000, v9, type, "%s Error in downloadDocument: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v35, -1, -1);
    MEMORY[0x2207D105C](v12, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  v21 = (void *)v0[65];
  v23 = v0[54];
  v22 = v0[55];
  v24 = v0[53];
  v25 = objc_msgSend(v21, sel_identifier);
  sub_21FC5AADC();

  v26 = sub_21FC5AAC4();
  v0[72] = v26;
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  swift_getErrorValue();
  v27 = sub_21FBADCD8(v0[37]);
  v28 = sub_21FC5A8D8();
  v0[73] = v28;

  result = (char *)objc_msgSend(v21, sel_retryCount);
  v30 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    v31 = (void *)v0[51];
    v0[10] = v0;
    v0[11] = sub_21FAA7310;
    v32 = swift_continuation_init();
    v0[18] = MEMORY[0x24BDAC760];
    v33 = v0 + 18;
    v33[1] = 0x40000000;
    v33[2] = sub_21FBA132C;
    v33[3] = &block_descriptor_5;
    v33[4] = v32;
    objc_msgSend(v31, sel_updateErrorStatusAndRetryCountForAttachmentWithIdentifier_errorStatus_lastError_retryCount_completion_, v26, 1, v28, v30, v33);
    return (char *)swift_continuation_await();
  }
  return result;
}

uint64_t sub_21FAA7B5C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;

  v1 = *(void **)(v0 + 584);
  v2 = *(void **)(v0 + 576);
  v3 = *(void **)(v0 + 568);
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21FAA7BE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[68] = v3;
  v4[67] = a3;
  v4[66] = a2;
  v4[65] = a1;
  v5 = sub_21FC5AAF4();
  v4[69] = v5;
  v4[70] = *(_QWORD *)(v5 - 8);
  v4[71] = swift_task_alloc();
  sub_21FA32580();
  v4[72] = swift_task_alloc();
  v4[73] = swift_task_alloc();
  v4[74] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_21FAA7C8C()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;

  if (qword_25406B7F8 != -1)
    swift_once();
  v1 = sub_21FC5AFD4();
  v0[75] = __swift_project_value_buffer(v1, (uint64_t)qword_25406D830);
  swift_retain_n();
  v2 = sub_21FC5AFC8();
  v3 = sub_21FC5B970();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[68];
  if (v4)
  {
    v6 = swift_slowAlloc();
    v7 = swift_slowAlloc();
    v35 = v7;
    *(_DWORD *)v6 = 136315394;
    v9 = *(_QWORD *)(v5 + 16);
    v8 = *(_QWORD *)(v5 + 24);
    swift_bridgeObjectRetain();
    v0[61] = sub_21FABDCF8(v9, v8, &v35);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    v10 = objc_msgSend(*(id *)(v5 + 32), sel_webURL);
    v11 = v0[73];
    v34 = v7;
    if (v10)
    {
      v12 = v10;
      sub_21FC5A950();

      v13 = sub_21FC5A98C();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v11, 0, 1, v13);
    }
    else
    {
      v13 = sub_21FC5A98C();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v11, 1, 1, v13);
    }
    v14 = v0[74];
    sub_21FAA95B4(v0[73], v14);
    sub_21FC5A98C();
    v15 = *(_QWORD *)(v13 - 8);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v14, 1, v13);
    v17 = v0[74];
    if (v16 == 1)
    {
      sub_21FAA51C8(v0[74]);
      v18 = 0;
      v19 = 0;
    }
    else
    {
      v18 = sub_21FC5A8FC();
      v19 = v20;
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v13);
    }
    v0[55] = v18;
    v0[56] = v19;
    sub_21FA32728();
    swift_bridgeObjectRetain();
    sub_21FC5BE08();
    v21 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_21FC5BAF0();
    swift_unknownObjectRelease();
    v22 = sub_21FC5B64C();
    v24 = v23;
    swift_bridgeObjectRelease();
    v0[64] = sub_21FABDCF8(v22, v24, &v35);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_21FA27000, v2, v3, "%s Calling queryFHIRServer for %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v34, -1, -1);
    MEMORY[0x2207D105C](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v25 = (_QWORD *)v0[68];
  v26 = v25[5];
  v0[76] = v26;
  v27 = (void *)v25[6];
  v0[77] = v27;
  v28 = (void *)v25[7];
  v0[78] = v28;
  v0[49] = v26;
  v0[50] = v27;
  v0[51] = v28;
  v29 = v25[4];
  v0[79] = v29;
  swift_retain();
  v30 = v27;
  v31 = v28;
  v32 = (_QWORD *)swift_task_alloc();
  v0[80] = v32;
  *v32 = v0;
  v32[1] = sub_21FAA8058;
  return sub_21FACAB14(v29, 0);
}

uint64_t sub_21FAA8058(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;

  v4 = (_QWORD *)*v3;
  v4[81] = a1;
  v4[82] = a2;
  v4[83] = v2;
  swift_task_dealloc();
  v5 = (void *)v4[78];
  v6 = (void *)v4[77];
  swift_release();

  return swift_task_switch();
}

uint64_t sub_21FAA8104()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;

  v1 = v0[82];
  v2 = v0[81];
  v3 = v0[72];
  v4 = (void *)v0[66];
  v5 = sub_21FC5A98C();
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v3, 1, 1, v5);
  sub_21FA32314(v2, v1);
  v7 = v4;
  v8 = (void *)sub_21FC5A9D4();
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v3, 1, v5);
  v10 = 0;
  if (v9 != 1)
  {
    v11 = v0[72];
    v10 = (void *)sub_21FC5A920();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v11, v5);
  }
  v12 = v0[82];
  v13 = v0[81];
  v14 = (void *)v0[67];
  v15 = (void *)v0[66];
  v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE48970]), sel_initWithData_sourceURL_FHIRVersion_, v8, v10, v15);
  v0[84] = v16;

  sub_21FA2D770(v13, v12);
  v0[7] = v0 + 57;
  v0[2] = v0;
  v0[3] = sub_21FAA82A0;
  v17 = swift_continuation_init();
  v0[26] = MEMORY[0x24BDAC760];
  v18 = v0 + 26;
  v18[1] = 0x40000000;
  v18[2] = sub_21FAA9320;
  v18[3] = &block_descriptor_2;
  v18[4] = v17;
  objc_msgSend(v14, sel_extractAttachmentContentFromFHIRResource_completion_, v16, v18);
  return swift_continuation_await();
}

uint64_t sub_21FAA82A0()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 680) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_21FAA8300()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;

  v1 = (void *)v0[79];
  v2 = v0[71];
  v3 = v0[70];
  v4 = v0[69];
  v5 = (void *)v0[65];
  v6 = v0[57];
  v0[86] = v6;
  v7 = objc_msgSend(v1, sel_identifier);
  sub_21FC5AADC();

  v8 = sub_21FC5AAC4();
  v0[87] = v8;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v0[10] = v0;
  v0[11] = sub_21FAA8408;
  v0[40] = swift_continuation_init();
  v0[36] = MEMORY[0x24BDAC760];
  v0[37] = 0x40000000;
  v0[38] = sub_21FBA132C;
  v0[39] = &block_descriptor_3;
  objc_msgSend(v5, sel_markDataAvailableForAttachmentWithIdentifier_attachmentContent_completion_, v8, v6, v0 + 36);
  return swift_continuation_await();
}

uint64_t sub_21FAA8408()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 704) = *(_QWORD *)(*(_QWORD *)v0 + 112);
  return swift_task_switch();
}

uint64_t sub_21FAA8468()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  swift_retain_n();
  v1 = sub_21FC5AFC8();
  v2 = sub_21FC5B970();
  if (os_log_type_enabled(v1, v2))
  {
    v11 = *(void **)(v0 + 688);
    v14 = *(_QWORD *)(v0 + 656);
    v12 = *(void **)(v0 + 672);
    v13 = *(_QWORD *)(v0 + 648);
    v3 = *(_QWORD *)(v0 + 544);
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v15 = v5;
    *(_DWORD *)v4 = 136315138;
    v6 = *(_QWORD *)(v3 + 16);
    v7 = *(_QWORD *)(v3 + 24);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 480) = sub_21FABDCF8(v6, v7, &v15);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_21FA27000, v1, v2, "%s Successfully completed queryFHIRServer", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v5, -1, -1);
    MEMORY[0x2207D105C](v4, -1, -1);

    sub_21FA2D770(v13, v14);
  }
  else
  {
    v8 = *(void **)(v0 + 688);
    v9 = *(void **)(v0 + 672);
    sub_21FA2D770(*(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 656));
    swift_release_n();

  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21FAA8670()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 736) = *(_QWORD *)(*(_QWORD *)v0 + 176);
  return swift_task_switch();
}

uint64_t sub_21FAA86D0()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 720);

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

char *sub_21FAA8750()
{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  char *result;
  char *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  os_log_type_t type;
  uint64_t v30;
  uint64_t v31;

  v1 = (void *)v0[83];
  v0[89] = v1;
  swift_retain();
  v2 = v1;
  swift_retain();
  v3 = v1;
  v4 = sub_21FC5AFC8();
  v5 = sub_21FC5B97C();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = v0[68];
    v7 = swift_slowAlloc();
    v30 = swift_slowAlloc();
    *(_DWORD *)v7 = 136315394;
    type = v5;
    v31 = v30;
    v8 = *(_QWORD *)(v6 + 16);
    v9 = *(_QWORD *)(v6 + 24);
    swift_bridgeObjectRetain();
    v0[62] = sub_21FABDCF8(v8, v9, &v31);
    sub_21FC5BAC0();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    v0[59] = v1;
    v10 = v1;
    v11 = v1;
    sub_21FA2CDB4();
    sub_21FC5BE08();
    v12 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_21FC5BAF0();
    swift_unknownObjectRelease();
    v13 = sub_21FC5B64C();
    v15 = v14;

    v0[58] = sub_21FABDCF8(v13, v15, &v31);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_21FA27000, v4, type, "%s Error in queryFHIRServer: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v30, -1, -1);
    MEMORY[0x2207D105C](v7, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  v16 = (void *)v0[79];
  v17 = v0[71];
  v18 = v0[70];
  v19 = v0[69];
  v20 = objc_msgSend(v16, sel_identifier);
  sub_21FC5AADC();

  v21 = sub_21FC5AAC4();
  v0[90] = v21;
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  swift_getErrorValue();
  v22 = sub_21FBADCD8(v0[53]);
  v23 = sub_21FC5A8D8();
  v0[91] = v23;

  result = (char *)objc_msgSend(v16, sel_retryCount);
  v25 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    v26 = (void *)v0[65];
    v0[18] = v0;
    v0[19] = sub_21FAA8670;
    v27 = swift_continuation_init();
    v0[31] = MEMORY[0x24BDAC760];
    v28 = v0 + 31;
    v28[1] = 0x40000000;
    v28[2] = sub_21FBA132C;
    v28[3] = &block_descriptor_4;
    v28[4] = v27;
    objc_msgSend(v26, sel_updateErrorStatusAndRetryCountForAttachmentWithIdentifier_errorStatus_lastError_retryCount_completion_, v21, 1, v23, v25, v28);
    return (char *)swift_continuation_await();
  }
  return result;
}

char *sub_21FAA8AF4()
{
  _QWORD *v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  char *result;
  char *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  os_log_type_t type;
  uint64_t v33;
  uint64_t v34[2];

  v1 = (void *)v0[84];
  v2 = v0[82];
  v3 = v0[81];
  swift_willThrow();
  sub_21FA2D770(v3, v2);

  v4 = (void *)v0[85];
  v0[89] = v4;
  swift_retain();
  v5 = v4;
  swift_retain();
  v6 = v4;
  v7 = sub_21FC5AFC8();
  v8 = sub_21FC5B97C();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = v0[68];
    v10 = swift_slowAlloc();
    v33 = swift_slowAlloc();
    *(_DWORD *)v10 = 136315394;
    type = v8;
    v34[0] = v33;
    v11 = *(_QWORD *)(v9 + 16);
    v12 = *(_QWORD *)(v9 + 24);
    swift_bridgeObjectRetain();
    v0[62] = sub_21FABDCF8(v11, v12, v34);
    sub_21FC5BAC0();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    v0[59] = v4;
    v13 = v4;
    v14 = v4;
    sub_21FA2CDB4();
    sub_21FC5BE08();
    v15 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_21FC5BAF0();
    swift_unknownObjectRelease();
    v16 = sub_21FC5B64C();
    v18 = v17;

    v0[58] = sub_21FABDCF8(v16, v18, v34);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_21FA27000, v7, type, "%s Error in queryFHIRServer: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v33, -1, -1);
    MEMORY[0x2207D105C](v10, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  v19 = (void *)v0[79];
  v20 = v0[71];
  v21 = v0[70];
  v22 = v0[69];
  v23 = objc_msgSend(v19, sel_identifier);
  sub_21FC5AADC();

  v24 = sub_21FC5AAC4();
  v0[90] = v24;
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  swift_getErrorValue();
  v25 = sub_21FBADCD8(v0[53]);
  v26 = sub_21FC5A8D8();
  v0[91] = v26;

  result = (char *)objc_msgSend(v19, sel_retryCount);
  v28 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    v29 = (void *)v0[65];
    v0[18] = v0;
    v0[19] = sub_21FAA8670;
    v30 = swift_continuation_init();
    v0[31] = MEMORY[0x24BDAC760];
    v31 = v0 + 31;
    v31[1] = 0x40000000;
    v31[2] = sub_21FBA132C;
    v31[3] = &block_descriptor_4;
    v31[4] = v30;
    objc_msgSend(v29, sel_updateErrorStatusAndRetryCountForAttachmentWithIdentifier_errorStatus_lastError_retryCount_completion_, v24, 1, v26, v28, v31);
    return (char *)swift_continuation_await();
  }
  return result;
}

char *sub_21FAA8EBC()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  char *result;
  char *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  os_log_type_t type;
  uint64_t v35;
  uint64_t v36[2];

  v1 = (void *)v0[87];
  v2 = (void *)v0[86];
  v3 = (void *)v0[84];
  v4 = v0[82];
  v5 = v0[81];
  swift_willThrow();
  sub_21FA2D770(v5, v4);

  v6 = (void *)v0[88];
  v0[89] = v6;
  swift_retain();
  v7 = v6;
  swift_retain();
  v8 = v6;
  v9 = sub_21FC5AFC8();
  v10 = sub_21FC5B97C();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = v0[68];
    v12 = swift_slowAlloc();
    v35 = swift_slowAlloc();
    *(_DWORD *)v12 = 136315394;
    type = v10;
    v36[0] = v35;
    v13 = *(_QWORD *)(v11 + 16);
    v14 = *(_QWORD *)(v11 + 24);
    swift_bridgeObjectRetain();
    v0[62] = sub_21FABDCF8(v13, v14, v36);
    sub_21FC5BAC0();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    v0[59] = v6;
    v15 = v6;
    v16 = v6;
    sub_21FA2CDB4();
    sub_21FC5BE08();
    v17 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_21FC5BAF0();
    swift_unknownObjectRelease();
    v18 = sub_21FC5B64C();
    v20 = v19;

    v0[58] = sub_21FABDCF8(v18, v20, v36);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_21FA27000, v9, type, "%s Error in queryFHIRServer: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v35, -1, -1);
    MEMORY[0x2207D105C](v12, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  v21 = (void *)v0[79];
  v22 = v0[71];
  v23 = v0[70];
  v24 = v0[69];
  v25 = objc_msgSend(v21, sel_identifier);
  sub_21FC5AADC();

  v26 = sub_21FC5AAC4();
  v0[90] = v26;
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  swift_getErrorValue();
  v27 = sub_21FBADCD8(v0[53]);
  v28 = sub_21FC5A8D8();
  v0[91] = v28;

  result = (char *)objc_msgSend(v21, sel_retryCount);
  v30 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    v31 = (void *)v0[65];
    v0[18] = v0;
    v0[19] = sub_21FAA8670;
    v32 = swift_continuation_init();
    v0[31] = MEMORY[0x24BDAC760];
    v33 = v0 + 31;
    v33[1] = 0x40000000;
    v33[2] = sub_21FBA132C;
    v33[3] = &block_descriptor_4;
    v33[4] = v32;
    objc_msgSend(v31, sel_updateErrorStatusAndRetryCountForAttachmentWithIdentifier_errorStatus_lastError_retryCount_completion_, v26, 1, v28, v30, v33);
    return (char *)swift_continuation_await();
  }
  return result;
}

uint64_t sub_21FAA9294()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;

  v1 = *(void **)(v0 + 728);
  v2 = *(void **)(v0 + 720);
  v3 = *(void **)(v0 + 712);
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21FAA9320(uint64_t result, void *a2, void *a3)
{
  _QWORD *v4;
  id v5;
  id v6;

  if (a3)
  {
    sub_21FA2CDB4();
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 64) + 40) = a2;
    v6 = a2;
    return swift_continuation_throwingResume();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_21FAA93A8()
{
  uint64_t v0;
  void *v1;

  swift_bridgeObjectRelease();

  v1 = *(void **)(v0 + 48);
  swift_release();
  return swift_deallocClassInstance();
}

BOOL static ClinicalDocumentDownloadTaskError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t ClinicalDocumentDownloadTaskError.hash(into:)()
{
  return sub_21FC5BE98();
}

uint64_t ClinicalDocumentDownloadTaskError.hashValue.getter()
{
  sub_21FC5BE8C();
  sub_21FC5BE98();
  return sub_21FC5BEB0();
}

unint64_t sub_21FAA9484()
{
  unint64_t result;

  result = qword_2555406A8;
  if (!qword_2555406A8)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for ClinicalDocumentDownloadTaskError, &type metadata for ClinicalDocumentDownloadTaskError);
    atomic_store(result, (unint64_t *)&qword_2555406A8);
  }
  return result;
}

uint64_t type metadata accessor for ClinicalDocumentDownloadTask()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for ClinicalDocumentDownloadTaskError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21FAA9534 + 4 * byte_21FC60FC5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21FAA9568 + 4 * byte_21FC60FC0[v4]))();
}

uint64_t sub_21FAA9568(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FAA9570(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FAA9578);
  return result;
}

uint64_t sub_21FAA9584(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FAA958CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21FAA9590(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FAA9598(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClinicalDocumentDownloadTaskError()
{
  return &type metadata for ClinicalDocumentDownloadTaskError;
}

uint64_t sub_21FAA95B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FA32580();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for ClinicalSharingFHIRMeta()
{
  return &type metadata for ClinicalSharingFHIRMeta;
}

uint64_t sub_21FAA9608()
{
  return 0x616470557473616CLL;
}

uint64_t sub_21FAA9628@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x616470557473616CLL && a2 == 0xEB00000000646574)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_21FC5BDF0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void sub_21FAA96D4(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_21FAA96E0()
{
  sub_21FAA98A8();
  return sub_21FC5BF10();
}

uint64_t sub_21FAA9708()
{
  sub_21FAA98A8();
  return sub_21FC5BF1C();
}

uint64_t sub_21FAA9730@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  sub_21FAA9850();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_21FAA98A8();
  sub_21FC5BEE0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v10 = sub_21FC5BCE8();
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *a2 = v10;
  a2[1] = v12;
  return result;
}

void sub_21FAA9850()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255540780)
  {
    sub_21FAA98A8();
    v0 = sub_21FC5BD3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255540780);
  }
}

unint64_t sub_21FAA98A8()
{
  unint64_t result;

  result = qword_255540788;
  if (!qword_255540788)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC611F4, &type metadata for ClinicalSharingFHIRMeta.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255540788);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ClinicalSharingFHIRMeta.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21FAA992C + 4 * byte_21FC610E0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21FAA994C + 4 * byte_21FC610E5[v4]))();
}

_BYTE *sub_21FAA992C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21FAA994C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21FAA9954(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21FAA995C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21FAA9964(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21FAA996C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingFHIRMeta.CodingKeys()
{
  return &type metadata for ClinicalSharingFHIRMeta.CodingKeys;
}

unint64_t sub_21FAA998C()
{
  unint64_t result;

  result = qword_255540790;
  if (!qword_255540790)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC611CC, &type metadata for ClinicalSharingFHIRMeta.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255540790);
  }
  return result;
}

unint64_t sub_21FAA99D4()
{
  unint64_t result;

  result = qword_255540798;
  if (!qword_255540798)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC6113C, &type metadata for ClinicalSharingFHIRMeta.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255540798);
  }
  return result;
}

unint64_t sub_21FAA9A1C()
{
  unint64_t result;

  result = qword_2555407A0;
  if (!qword_2555407A0)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC61164, &type metadata for ClinicalSharingFHIRMeta.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2555407A0);
  }
  return result;
}

uint64_t *sub_21FAA9A60(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_21FC5A98C();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v9 = a3[6];
    v10 = a3[7];
    v11 = *(void **)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = (uint64_t)v11;
    *(uint64_t *)((char *)a1 + v10) = *(uint64_t *)((char *)a2 + v10);
    v12 = a3[8];
    v13 = a3[9];
    v14 = (uint64_t *)((char *)a1 + v12);
    v15 = (uint64_t *)((char *)a2 + v12);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = (uint64_t *)((char *)a1 + v13);
    v18 = (uint64_t *)((char *)a2 + v13);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_21FAA9B48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v4 = sub_21FC5A98C();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21FAA9BC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;

  v6 = sub_21FC5A98C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a3[7];
  v10 = *(void **)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v10;
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  v11 = a3[8];
  v12 = a3[9];
  v13 = (_QWORD *)(a1 + v11);
  v14 = (_QWORD *)(a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = (_QWORD *)(a1 + v12);
  v17 = (_QWORD *)(a2 + v12);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21FAA9C84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  v6 = sub_21FC5A98C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = *(void **)(a2 + v8);
  v10 = *(void **)(a1 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  v11 = v9;

  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v12 = a3[8];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = a3[9];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21FAA9D70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v6 = sub_21FC5A98C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  return a1;
}

uint64_t sub_21FAA9E08(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = sub_21FC5A98C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = *(void **)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);

  v10 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v11 = (_QWORD *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  v15 = a3[9];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21FAA9ECC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FAA9ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_21FC5A98C();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_21FAA9F54()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FAA9F60(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_21FC5A98C();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for ClinicalSharingCloudStandardAPI()
{
  uint64_t result;

  result = qword_25406B440;
  if (!qword_25406B440)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21FAAA014()
{
  uint64_t result;
  unint64_t v1;

  result = sub_21FC5A98C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21FAAA0A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t result;
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;

  v33 = a4;
  v39 = a3;
  sub_21FA32580();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v30 - v12;
  v14 = sub_21FC5A98C();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v31 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v36 = (char *)&v30 - v18;
  v19 = (int *)type metadata accessor for ClinicalSharingCloudStandardAPI();
  v20 = &a5[v19[8]];
  *(_QWORD *)v20 = 1414745936;
  *((_QWORD *)v20 + 1) = 0xE400000000000000;
  v35 = v20;
  v21 = v19[9];
  v32 = a5;
  v22 = &a5[v21];
  *(_QWORD *)v22 = 0xD000000000000016;
  *((_QWORD *)v22 + 1) = 0x800000021FC75F20;
  v34 = &a5[v21];
  v23 = a1;
  v37 = a1;
  v38 = a2;
  swift_bridgeObjectRetain();
  sub_21FC5B6AC();
  sub_21FC5A980();
  swift_bridgeObjectRelease();
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v24(v13, 1, v14) == 1)
  {
    v11 = v13;
LABEL_5:
    sub_21FA326EC((uint64_t)v11, (uint64_t (*)(_QWORD))sub_21FA32580);
    sub_21FA6A4E8();
    swift_allocError();
    *(_QWORD *)v25 = v23;
    *(_QWORD *)(v25 + 8) = a2;
    *(_QWORD *)(v25 + 16) = 0;
    *(_QWORD *)(v25 + 24) = 0;
    *(_BYTE *)(v25 + 32) = 0;
    swift_willThrow();

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v30 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v30(v36, v13, v14);
  v37 = v23;
  v38 = a2;
  swift_bridgeObjectRetain();
  sub_21FC5B6AC();
  sub_21FC5A980();
  swift_bridgeObjectRelease();
  if (v24(v11, 1, v14) == 1)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v36, v14);
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  v28 = v30;
  v27 = v31;
  v30(v31, v11, v14);
  v29 = v32;
  v28(v32, v36, v14);
  result = ((uint64_t (*)(char *, char *, uint64_t))v28)(&v29[v19[5]], v27, v14);
  *(_QWORD *)&v29[v19[6]] = v39;
  *(_QWORD *)&v29[v19[7]] = v33;
  return result;
}

uint64_t sub_21FAAA3B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v26 = a2;
  v4 = type metadata accessor for ClinicalSharingCloudStandardAPI();
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v30 = *(_QWORD *)(v4 - 8);
  v31 = v5;
  MEMORY[0x24BDAC7A8](v4);
  v29 = (uint64_t)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_21FC5A5D8();
  v7 = *(_QWORD *)(v28 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v28);
  v27 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FAAC7EC(0, &qword_255540800, (void (*)(uint64_t))type metadata accessor for PBPushBlobsResponse);
  v32 = v9;
  v34 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v25 - v10;
  sub_21FAAC890();
  v33 = v12;
  v35 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_21FAAA700(a1, a2);
  sub_21FAAC968(0, &qword_2555407B0, (void (*)(uint64_t))sub_21FAAB210);
  type metadata accessor for PBPushBlobsResponse(0);
  sub_21FAAB3C8(&qword_2555407C0, &qword_2555407B0, (void (*)(uint64_t))sub_21FAAB210);
  sub_21FC5B31C();
  swift_release();
  v16 = v27;
  v15 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v27, a1, v28);
  v17 = v29;
  sub_21FA2D120(v25, v29, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCloudStandardAPI);
  v18 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v19 = (v8 + *(unsigned __int8 *)(v30 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v26;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v20 + v18, v16, v15);
  sub_21FAABB3C(v17, v20 + v19);
  sub_21FAAC968(0, &qword_255540810, (void (*)(uint64_t))type metadata accessor for PBPushBlobsResponse);
  sub_21FAAB388(&qword_255540818, &qword_255540800, (void (*)(uint64_t))type metadata accessor for PBPushBlobsResponse);
  sub_21FAAB3C8((unint64_t *)&qword_255540820, &qword_255540810, (void (*)(uint64_t))type metadata accessor for PBPushBlobsResponse);
  v21 = v32;
  sub_21FC5B364();
  swift_release();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v21);
  sub_21FA2A08C(&qword_255540828, (uint64_t (*)(uint64_t))sub_21FAAC890, MEMORY[0x24BDB9998]);
  v22 = v33;
  v23 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v22);
  return v23;
}

uint64_t sub_21FAAA700(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v42 = a2;
  v4 = type metadata accessor for ClinicalSharingCloudStandardAPI();
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v37 = *(_QWORD *)(v4 - 8);
  v38 = v5;
  MEMORY[0x24BDAC7A8](v4);
  v36 = (uint64_t)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_21FC5A5D8();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v34 = v7;
  v35 = v9;
  MEMORY[0x24BDAC7A8](v7);
  v33 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_21FC5B8BC();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FAAC5F8();
  v39 = v15;
  v41 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FAAC68C();
  v40 = v18;
  v43 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC5B8C8();
  sub_21FAAB210();
  sub_21FA2A08C(&qword_25553E2F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCFEB8], MEMORY[0x24BDCFEB0]);
  sub_21FC5B31C();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v21 = v33;
  v22 = a1;
  v23 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v33, v22, v34);
  v24 = v36;
  sub_21FA2D120(v2, v36, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCloudStandardAPI);
  v25 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v26 = (v35 + *(unsigned __int8 *)(v37 + 80) + v25) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = v42;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v27 + v25, v21, v23);
  sub_21FAABB3C(v24, v27 + v26);
  sub_21FAAC968(0, &qword_2555407B0, (void (*)(uint64_t))sub_21FAAB210);
  sub_21FA2A08C(&qword_2555407F0, (uint64_t (*)(uint64_t))sub_21FAAC5F8, MEMORY[0x24BDB98C8]);
  sub_21FAAB3C8(&qword_2555407C0, &qword_2555407B0, (void (*)(uint64_t))sub_21FAAB210);
  v28 = v39;
  sub_21FC5B364();
  swift_release();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v17, v28);
  sub_21FA2A08C(&qword_2555407F8, (uint64_t (*)(uint64_t))sub_21FAAC68C, MEMORY[0x24BDB9998]);
  v29 = v40;
  v30 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v20, v29);
  return v30;
}

void sub_21FAAAA74(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  id v25;
  uint64_t v26;
  char *v27;
  id v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  id v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  id v44;

  v37 = a1;
  v7 = type metadata accessor for PBBlobPushResult(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_21FC5AD28();
  v36 = *(_QWORD *)(v39 - 8);
  v11 = MEMORY[0x24BDAC7A8](v39);
  v35 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v38 = (char *)&v35 - v13;
  v14 = sub_21FC5AD58();
  MEMORY[0x24BDAC7A8](v14);
  type metadata accessor for PBPushBlobsResponse(0);
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  sub_21FA32314(a2, a3);
  sub_21FC5AD4C();
  sub_21FA2A08C(&qword_255540830, type metadata accessor for PBPushBlobsResponse, (uint64_t)&protocol conformance descriptor for PBPushBlobsResponse);
  v15 = v40;
  sub_21FC5AE84();
  v16 = (void *)v15;
  if (!v15)
  {
    v17 = v37;
    if (objc_msgSend(v37, sel_statusCode) != (id)207)
      return;
    v40 = a4;
    v18 = *(_QWORD *)(*(_QWORD *)a4 + 16);
    if (v18)
    {
      v19 = *(_QWORD *)a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
      v20 = *(_QWORD *)(v8 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_21FA2D120(v19, (uint64_t)v10, type metadata accessor for PBBlobPushResult);
        v21 = *(_QWORD *)&v10[*(int *)(v7 + 20)];
        swift_beginAccess();
        v22 = *(_QWORD *)(v21 + 48);
        LODWORD(v21) = *(unsigned __int8 *)(v21 + 56);
        sub_21FA326EC((uint64_t)v10, type metadata accessor for PBBlobPushResult);
        if ((_DWORD)v21 == 1)
        {
          if (v22 == 4)
          {
LABEL_9:
            swift_bridgeObjectRelease();
            sub_21FA6A4E8();
            v16 = (void *)swift_allocError();
            *(_QWORD *)v23 = 1;
            *(_QWORD *)(v23 + 8) = 0;
            *(_QWORD *)(v23 + 16) = 0;
            *(_QWORD *)(v23 + 24) = 0;
            v24 = 6;
            goto LABEL_12;
          }
        }
        else if (v22 == 5)
        {
          goto LABEL_9;
        }
        v19 += v20;
        --v18;
      }
      while (v18);
      swift_bridgeObjectRelease();
      v17 = v37;
    }
    v25 = objc_msgSend(v17, sel_statusCode);
    sub_21FA6A4E8();
    v16 = (void *)swift_allocError();
    *(_QWORD *)v23 = v25;
    *(_QWORD *)(v23 + 8) = 0;
    *(_QWORD *)(v23 + 16) = 0;
    *(_QWORD *)(v23 + 24) = 0;
    v24 = 1;
LABEL_12:
    *(_BYTE *)(v23 + 32) = v24;
    swift_willThrow();
    sub_21FA326EC(v40, type metadata accessor for PBPushBlobsResponse);
  }
  v27 = v38;
  v26 = v39;
  v44 = v16;
  v28 = v16;
  sub_21FA2CDB4();
  if (swift_dynamicCast())
  {

    v30 = v35;
    v29 = v36;
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v35, v27, v26);
    sub_21FA2A08C(&qword_255540838, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF78], MEMORY[0x24BE5BF80]);
    v31 = sub_21FC5BE44();
    v33 = v32;
    sub_21FA6A4E8();
    swift_allocError();
    *(_QWORD *)v34 = v31;
    *(_QWORD *)(v34 + 8) = v33;
    *(_QWORD *)(v34 + 16) = 0xD000000000000013;
    *(_QWORD *)(v34 + 24) = 0x800000021FC75F00;
    *(_BYTE *)(v34 + 32) = 4;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v26);
  }

}

void sub_21FAAAE60(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_21FAAAA74(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_21FAAAE80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v28 = a2;
  v27[0] = a1;
  v4 = type metadata accessor for ClinicalSharingCloudStandardAPI();
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v31 = *(_QWORD *)(v4 - 8);
  v32 = v5;
  MEMORY[0x24BDAC7A8](v4);
  v30 = (uint64_t)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_21FC5A5D8();
  v7 = *(_QWORD *)(v29 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v29);
  v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FAAC7EC(0, &qword_2555407A8, (void (*)(uint64_t))type metadata accessor for PBDeleteBlobsResponse);
  v33 = v10;
  v35 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v27 - v11;
  sub_21FAAB2B0();
  v34 = v13;
  v36 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_21FAAA700(a1, a2);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a2;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = sub_21FAAB418;
  *(_QWORD *)(v17 + 24) = v16;
  sub_21FAAC968(0, &qword_2555407B0, (void (*)(uint64_t))sub_21FAAB210);
  type metadata accessor for PBDeleteBlobsResponse(0);
  sub_21FAAB3C8(&qword_2555407C0, &qword_2555407B0, (void (*)(uint64_t))sub_21FAAB210);
  sub_21FC5B31C();
  swift_release();
  swift_release();
  v18 = v29;
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 16))(v9, v27[0], v29);
  v19 = v30;
  sub_21FA2D120(v27[1], v30, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCloudStandardAPI);
  v20 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v21 = (v8 + *(unsigned __int8 *)(v31 + 80) + v20) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v28;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v22 + v20, v9, v18);
  sub_21FAABB3C(v19, v22 + v21);
  sub_21FAAC968(0, &qword_25406B908, (void (*)(uint64_t))type metadata accessor for PBDeleteBlobsResponse);
  sub_21FAAB388(&qword_2555407D0, &qword_2555407A8, (void (*)(uint64_t))type metadata accessor for PBDeleteBlobsResponse);
  sub_21FAAB3C8(&qword_25406B900, &qword_25406B908, (void (*)(uint64_t))type metadata accessor for PBDeleteBlobsResponse);
  v23 = v33;
  sub_21FC5B364();
  swift_release();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v23);
  sub_21FA2A08C(&qword_2555407D8, (uint64_t (*)(uint64_t))sub_21FAAB2B0, MEMORY[0x24BDB9998]);
  v24 = v34;
  v25 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v24);
  return v25;
}

void sub_21FAAB210()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_2555407B8)
  {
    sub_21FAAB274();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_2555407B8);
  }
}

unint64_t sub_21FAAB274()
{
  unint64_t result;

  result = qword_25553F168;
  if (!qword_25553F168)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25553F168);
  }
  return result;
}

void sub_21FAAB2B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2555407C8)
  {
    sub_21FAAC7EC(255, &qword_2555407A8, (void (*)(uint64_t))type metadata accessor for PBDeleteBlobsResponse);
    sub_21FAAC968(255, &qword_25406B908, (void (*)(uint64_t))type metadata accessor for PBDeleteBlobsResponse);
    sub_21FAAB388(&qword_2555407D0, &qword_2555407A8, (void (*)(uint64_t))type metadata accessor for PBDeleteBlobsResponse);
    sub_21FAAB3C8(&qword_25406B900, &qword_25406B908, (void (*)(uint64_t))type metadata accessor for PBDeleteBlobsResponse);
    v0 = sub_21FC5B13C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2555407C8);
  }
}

uint64_t sub_21FAAB388(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_21FAAC7EC(255, a2, a3);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB98C8], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FAAB3C8(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_21FAAC968(255, a2, a3);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9AF8], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FAAB408()
{
  return swift_deallocObject();
}

void sub_21FAAB418(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;

  sub_21FC157D4(a1, a2, *(_QWORD *)(v3 + 16) > 0, a3);
}

uint64_t sub_21FAAB454()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FAAB478(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 16))(*a1, a1[1], a1[2]);
}

uint64_t sub_21FAAB4A4@<X0>(void **a1@<X0>, uint64_t a2@<X1>, NSObject *a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, uint64_t (*a6)(NSObject *, uint64_t)@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, NSObject *, uint64_t);
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, NSObject *, uint64_t);
  id v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void (*v54)(char *, uint64_t);
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  NSObject *v61;
  _QWORD *v62;
  id v63;
  uint64_t result;
  uint64_t v65;
  os_log_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t (*v73)(NSObject *, uint64_t);
  NSObject *v74;
  NSObject *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  _QWORD *v81;

  v72 = a7;
  v73 = a6;
  v70 = a5;
  v71 = a4;
  v75 = a3;
  v9 = sub_21FC5A5D8();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v65 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v74 = ((char *)&v65 - v18);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v65 - v19;
  v21 = *a1;
  if (a2 >= 1)
  {
    v81 = *a1;
    v22 = v21;
    sub_21FA2CDB4();
    if (swift_dynamicCast())
    {
      if (v80 == 6 && v76 == (void *)1 && !(v78 | v77 | v79))
      {
        v69 = a2 - 1;
        if (qword_25406B7F8 != -1)
          swift_once();
        v23 = sub_21FC5AFD4();
        __swift_project_value_buffer(v23, (uint64_t)qword_25406D830);
        v24 = v10;
        v25 = *(void (**)(char *, NSObject *, uint64_t))(v10 + 16);
        v25(v20, v75, v9);
        v26 = sub_21FC5AFC8();
        v27 = sub_21FC5B994();
        v28 = v27;
        if (os_log_type_enabled(v26, v27))
        {
          v29 = swift_slowAlloc();
          v68 = v28;
          v30 = v29;
          v67 = swift_slowAlloc();
          v81 = (_QWORD *)v67;
          *(_DWORD *)v30 = 134218242;
          v76 = (void *)a2;
          sub_21FC5BAC0();
          *(_WORD *)(v30 + 12) = 2080;
          v65 = v30 + 14;
          v66 = v26;
          v31 = v74;
          v25((char *)v74, v20, v9);
          v25(v16, v31, v9);
          sub_21FC5BE08();
          v32 = (id)HKSensitiveLogItem();
          swift_unknownObjectRelease();
          sub_21FC5BAF0();
          swift_unknownObjectRelease();
          v33 = sub_21FC5B64C();
          v34 = v24;
          v36 = v35;
          v37 = *(void (**)(char *, uint64_t))(v34 + 8);
          v37((char *)v31, v9);
          v76 = (void *)sub_21FABDCF8(v33, v36, (uint64_t *)&v81);
          sub_21FC5BAC0();
          swift_bridgeObjectRelease();
          v37(v20, v9);
          v26 = v66;
          _os_log_impl(&dword_21FA27000, v66, (os_log_type_t)v68, v70, (uint8_t *)v30, 0x16u);
          v38 = v67;
          swift_arrayDestroy();
          MEMORY[0x2207D105C](v38, -1, -1);
          MEMORY[0x2207D105C](v30, -1, -1);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v24 + 8))(v20, v9);
        }

        result = v73(v75, v69);
        *v72 = result;
        return result;
      }
      sub_21FA6A8B0((uint64_t)v76, v77, v78, v79, v80);
    }
  }
  if (qword_25406B7F8 != -1)
    swift_once();
  v39 = sub_21FC5AFD4();
  __swift_project_value_buffer(v39, (uint64_t)qword_25406D830);
  v40 = v10;
  v41 = *(void (**)(char *, NSObject *, uint64_t))(v10 + 16);
  v41(v13, v75, v9);
  v42 = v21;
  v43 = v21;
  v44 = sub_21FC5AFC8();
  v45 = sub_21FC5B97C();
  v46 = v45;
  v75 = v44;
  if (os_log_type_enabled(v44, v45))
  {
    v47 = swift_slowAlloc();
    LODWORD(v73) = v46;
    v48 = v47;
    v72 = (_QWORD *)swift_slowAlloc();
    v81 = v72;
    *(_DWORD *)v48 = 136315394;
    v71 = v48 + 4;
    v49 = v74;
    v41((char *)v74, v13, v9);
    v41(v16, v49, v9);
    sub_21FC5BE08();
    v50 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_21FC5BAF0();
    swift_unknownObjectRelease();
    v51 = sub_21FC5B64C();
    v53 = v52;
    v54 = *(void (**)(char *, uint64_t))(v40 + 8);
    v54((char *)v49, v9);
    v76 = (void *)sub_21FABDCF8(v51, v53, (uint64_t *)&v81);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    v54(v13, v9);
    *(_WORD *)(v48 + 12) = 2080;
    v76 = v21;
    v55 = v21;
    v56 = v21;
    sub_21FA2CDB4();
    sub_21FC5BE08();
    v57 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_21FC5BAF0();
    swift_unknownObjectRelease();
    v58 = sub_21FC5B64C();
    v60 = v59;

    v76 = (void *)sub_21FABDCF8(v58, v60, (uint64_t *)&v81);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();

    v61 = v75;
    _os_log_impl(&dword_21FA27000, v75, (os_log_type_t)v73, "Error received for request. Request: %s. Error: %s", (uint8_t *)v48, 0x16u);
    v62 = v72;
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v62, -1, -1);
    MEMORY[0x2207D105C](v48, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v9);

  }
  v63 = v21;
  return swift_willThrow();
}

uint64_t sub_21FAABB3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ClinicalSharingCloudStandardAPI();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FAABB80@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_21FAACAF8(a1, "Partial Server Side Error from Oslo Cloud while deleting. Trying again. Retries left: %ld. Request: %s", (uint64_t (*)(NSObject *, uint64_t))sub_21FAAAE80, a2);
}

void sub_21FAABBA4(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  char **v13;
  uint8_t *v14;
  uint8_t *v15;
  uint64_t v16;
  char *v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;

  v3 = *a1;
  v4 = a1[1];
  v5 = (void *)a1[2];
  sub_21FA32314(*a1, v4);
  v6 = v5;
  sub_21FA2D770(v3, v4);
  objc_opt_self();
  v7 = swift_dynamicCastObjCClass();
  if (v7)
  {
    v8 = (void *)v7;
    if (qword_25406B7F8 != -1)
      swift_once();
    v9 = sub_21FC5AFD4();
    __swift_project_value_buffer(v9, (uint64_t)qword_25406D830);
    v10 = v6;
    v11 = sub_21FC5AFC8();
    v12 = sub_21FC5B970();
    v13 = &selRef_predicateForDiagnosticTestResultCategory_;
    if (os_log_type_enabled(v11, v12))
    {
      v25 = a2;
      v14 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v14 = 134217984;
      objc_msgSend(v8, sel_statusCode);
      v13 = &selRef_predicateForDiagnosticTestResultCategory_;
      sub_21FC5BAC0();

      _os_log_impl(&dword_21FA27000, v11, v12, "Received Response from Oslo Cloud: %ld", v14, 0xCu);
      v15 = v14;
      a2 = v25;
      MEMORY[0x2207D105C](v15, -1, -1);

    }
    else
    {

    }
    if ((char *)objc_msgSend(v8, v13[66]) - 200 >= (char *)0x64)
    {
      v17 = (char *)objc_msgSend(v8, v13[66]) - 500;
      v18 = objc_msgSend(v8, v13[66]);
      v19 = v18;
      if ((unint64_t)v17 > 0x63)
      {
        v21 = (unint64_t)v18 - 400;
        v22 = objc_msgSend(v8, v13[66]);
        sub_21FA6A4E8();
        swift_allocError();
        *(_QWORD *)v23 = v22;
        *(_QWORD *)(v23 + 8) = 0;
        *(_QWORD *)(v23 + 16) = 0;
        *(_QWORD *)(v23 + 24) = 0;
        if (v21 > 0x63)
          v24 = 3;
        else
          v24 = 1;
        *(_BYTE *)(v23 + 32) = v24;
      }
      else
      {
        sub_21FA6A4E8();
        swift_allocError();
        *(_QWORD *)v20 = v19;
        *(_QWORD *)(v20 + 8) = 0;
        *(_QWORD *)(v20 + 16) = 0;
        *(_QWORD *)(v20 + 24) = 0;
        *(_BYTE *)(v20 + 32) = 2;
      }
      swift_willThrow();

    }
    else
    {
      *a2 = v8;
      sub_21FA32314(v3, v4);
      a2[1] = v3;
      a2[2] = v4;
    }
  }
  else
  {

    sub_21FA6A4E8();
    swift_allocError();
    *(_OWORD *)v16 = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_BYTE *)(v16 + 32) = 6;
    swift_willThrow();
  }
}

uint64_t sub_21FAABE90@<X0>(void **a1@<X0>, uint64_t a2@<X1>, NSObject *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  char v22;
  id v23;
  uint64_t v24;
  void (*v25)(char *, NSObject *, uint64_t);
  char *v26;
  id v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  NSObject *v35;
  char *v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void (*v41)(char *, uint64_t);
  os_log_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, NSObject *, uint64_t);
  NSObject *v47;
  uint64_t v48;
  id v49;
  id v50;
  NSObject *v51;
  os_log_type_t v52;
  int v53;
  uint64_t v54;
  NSObject *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void (*v61)(char *, uint64_t);
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  NSObject *v68;
  uint64_t v69;
  id v70;
  uint64_t result;
  uint64_t v72;
  os_log_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  NSObject *v81;
  NSObject *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;

  v80 = a4;
  v9 = sub_21FC5A5D8();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v72 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v81 = ((char *)&v72 - v18);
  MEMORY[0x24BDAC7A8](v17);
  v20 = *a1;
  if (a2 < 1)
    goto LABEL_12;
  v78 = a2 - 1;
  v79 = (char *)&v72 - v19;
  v82 = a3;
  v88 = (uint64_t)v20;
  v21 = v20;
  sub_21FA2CDB4();
  if (swift_dynamicCast())
  {
    v22 = v87;
    if (v87 != 2)
    {
LABEL_10:
      sub_21FA6A8B0(v83, v84, v85, v86, v22);
      goto LABEL_11;
    }
    v88 = (uint64_t)v20;
    v23 = v20;
    if (swift_dynamicCast())
    {
      v22 = v87;
      if (v87 == 3)
      {
        v77 = a5;
        if (qword_25406B7F8 != -1)
          swift_once();
        v24 = sub_21FC5AFD4();
        __swift_project_value_buffer(v24, (uint64_t)qword_25406D830);
        v76 = v10;
        v25 = *(void (**)(char *, NSObject *, uint64_t))(v10 + 16);
        v26 = v79;
        v25(v79, v82, v9);
        v27 = v20;
        v28 = v20;
        v29 = sub_21FC5AFC8();
        v30 = sub_21FC5B994();
        v75 = v30;
        if (os_log_type_enabled(v29, v30))
        {
          v31 = swift_slowAlloc();
          v74 = swift_slowAlloc();
          v88 = v74;
          *(_DWORD *)v31 = 136315650;
          v72 = v31 + 4;
          v83 = (uint64_t)v20;
          v32 = v20;
          v73 = v29;
          v33 = sub_21FC5B64C();
          v83 = sub_21FABDCF8(v33, v34, &v88);
          sub_21FC5BAC0();
          swift_bridgeObjectRelease();

          *(_WORD *)(v31 + 12) = 2048;
          v83 = a2;
          sub_21FC5BAC0();
          *(_WORD *)(v31 + 22) = 2080;
          v72 = v31 + 24;
          v35 = v81;
          v36 = v79;
          v25((char *)v81, v79, v9);
          v25(v16, v35, v9);
          sub_21FC5BE08();
          v37 = (id)HKSensitiveLogItem();
          swift_unknownObjectRelease();
          sub_21FC5BAF0();
          swift_unknownObjectRelease();
          v38 = sub_21FC5B64C();
          v40 = v39;
          v41 = *(void (**)(char *, uint64_t))(v76 + 8);
          v41((char *)v35, v9);
          v83 = sub_21FABDCF8(v38, v40, &v88);
          sub_21FC5BAC0();
          swift_bridgeObjectRelease();
          v41(v36, v9);
          v42 = v73;
          _os_log_impl(&dword_21FA27000, v73, (os_log_type_t)v75, "Server Side Error from Oslo Cloud: %s. Trying again. Retries left: %ld. Request: %s", (uint8_t *)v31, 0x20u);
          v43 = v74;
          swift_arrayDestroy();
          MEMORY[0x2207D105C](v43, -1, -1);
          MEMORY[0x2207D105C](v31, -1, -1);

        }
        else
        {

          (*(void (**)(char *, uint64_t))(v76 + 8))(v26, v9);
        }
        result = sub_21FAAA700(v82, v78);
        *v77 = result;
        return result;
      }
      goto LABEL_10;
    }
  }
LABEL_11:
  a3 = v82;
LABEL_12:
  if (qword_25406B7F8 != -1)
    swift_once();
  v44 = sub_21FC5AFD4();
  __swift_project_value_buffer(v44, (uint64_t)qword_25406D830);
  v45 = v10;
  v46 = *(void (**)(char *, NSObject *, uint64_t))(v10 + 16);
  v47 = a3;
  v48 = v9;
  v46(v13, v47, v9);
  v49 = v20;
  v50 = v20;
  v51 = sub_21FC5AFC8();
  v52 = sub_21FC5B97C();
  v53 = v52;
  v82 = v51;
  if (os_log_type_enabled(v51, v52))
  {
    v54 = swift_slowAlloc();
    v80 = swift_slowAlloc();
    v88 = v80;
    *(_DWORD *)v54 = 136315394;
    v78 = v54 + 4;
    LODWORD(v79) = v53;
    v55 = v81;
    v46((char *)v81, v13, v48);
    v46(v16, v55, v48);
    sub_21FC5BE08();
    v56 = (id)HKSensitiveLogItem();
    v57 = v48;
    swift_unknownObjectRelease();
    sub_21FC5BAF0();
    swift_unknownObjectRelease();
    v58 = sub_21FC5B64C();
    v60 = v59;
    v61 = *(void (**)(char *, uint64_t))(v45 + 8);
    v61((char *)v55, v57);
    v83 = sub_21FABDCF8(v58, v60, &v88);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    v61(v13, v57);
    *(_WORD *)(v54 + 12) = 2080;
    v83 = (uint64_t)v20;
    v62 = v20;
    v63 = v20;
    sub_21FA2CDB4();
    sub_21FC5BE08();
    v64 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_21FC5BAF0();
    swift_unknownObjectRelease();
    v65 = sub_21FC5B64C();
    v67 = v66;

    v83 = sub_21FABDCF8(v65, v67, &v88);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();

    v68 = v82;
    _os_log_impl(&dword_21FA27000, v82, (os_log_type_t)v79, "Error received for request. Request: %s. Error: %s", (uint8_t *)v54, 0x16u);
    v69 = v80;
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v69, -1, -1);
    MEMORY[0x2207D105C](v54, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v48);

  }
  v70 = v20;
  return swift_willThrow();
}

void sub_21FAAC5F8()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_2555407E0)
  {
    sub_21FC5B8BC();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCFEB8];
    sub_21FAAB210();
    sub_21FA2A08C(&qword_25553E2F0, v0, MEMORY[0x24BDCFEB0]);
    v1 = sub_21FC5B0E8();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_2555407E0);
  }
}

void sub_21FAAC68C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2555407E8)
  {
    sub_21FAAC5F8();
    sub_21FAAC968(255, &qword_2555407B0, (void (*)(uint64_t))sub_21FAAB210);
    sub_21FA2A08C(&qword_2555407F0, (uint64_t (*)(uint64_t))sub_21FAAC5F8, MEMORY[0x24BDB98C8]);
    sub_21FAAB3C8(&qword_2555407C0, &qword_2555407B0, (void (*)(uint64_t))sub_21FAAB210);
    v0 = sub_21FC5B13C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2555407E8);
  }
}

uint64_t sub_21FAAC764@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(sub_21FC5A5D8() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ClinicalSharingCloudStandardAPI() - 8) + 80);
  return sub_21FAABE90(a1, *(_QWORD *)(v2 + 16), (v2 + v6), v2 + ((v6 + v7 + v8) & ~v8), a2);
}

void sub_21FAAC7EC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_21FAAC968(255, &qword_2555407B0, (void (*)(uint64_t))sub_21FAAB210);
    a3(255);
    sub_21FAAB3C8(&qword_2555407C0, &qword_2555407B0, (void (*)(uint64_t))sub_21FAAB210);
    v5 = sub_21FC5B0E8();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_21FAAC890()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255540808)
  {
    sub_21FAAC7EC(255, &qword_255540800, (void (*)(uint64_t))type metadata accessor for PBPushBlobsResponse);
    sub_21FAAC968(255, &qword_255540810, (void (*)(uint64_t))type metadata accessor for PBPushBlobsResponse);
    sub_21FAAB388(&qword_255540818, &qword_255540800, (void (*)(uint64_t))type metadata accessor for PBPushBlobsResponse);
    sub_21FAAB3C8((unint64_t *)&qword_255540820, &qword_255540810, (void (*)(uint64_t))type metadata accessor for PBPushBlobsResponse);
    v0 = sub_21FC5B13C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255540808);
  }
}

void sub_21FAAC968(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    sub_21FA2CDB4();
    v4 = sub_21FC5B190();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t objectdestroy_5Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void (*v9)(unint64_t, uint64_t);

  v1 = sub_21FC5A5D8();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for ClinicalSharingCloudStandardAPI();
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  v7 = (v3 + v4 + v6) & ~v6;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  v8 = sub_21FC5A98C();
  v9 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v0 + v7, v8);
  v9(v0 + v7 + *(int *)(v5 + 20), v8);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21FAACAD4@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_21FAACAF8(a1, "Partial Server Side Error from Oslo Cloud while pushing. Trying again. Retries left: %ld. Request: %s", (uint64_t (*)(NSObject *, uint64_t))sub_21FAAA3B4, a2);
}

uint64_t sub_21FAACAF8@<X0>(void **a1@<X0>, const char *a2@<X1>, uint64_t (*a3)(NSObject *, uint64_t)@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = *(_QWORD *)(sub_21FC5A5D8() - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ClinicalSharingCloudStandardAPI() - 8) + 80);
  return sub_21FAAB4A4(a1, *(_QWORD *)(v4 + 16), (v4 + v10), v4 + ((v10 + v11 + v12) & ~v12), a2, a3, a4);
}

uint64_t sub_21FAACB98@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, _QWORD, uint64_t (*)(char *, uint64_t, uint64_t));
  void (*v37)(char *, uint64_t (*)(char *, uint64_t, uint64_t));
  BOOL v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void (*v43)(uint64_t);
  int v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  int v55;
  char *v56;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v5 = v4;
  v68 = a2;
  v66 = a4;
  v67 = a1;
  v7 = sub_21FC5AAAC();
  v8 = (void (*)(uint64_t))MEMORY[0x24BDCE900];
  v72 = *(_QWORD *)(v7 - 8);
  v73 = v7;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v65 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v60 = (char *)&v58 - v11;
  v12 = sub_21FC5AC08();
  v75 = *(_QWORD *)(v12 - 8);
  v76 = v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v64 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v71 = (char *)&v58 - v15;
  v16 = (uint64_t (*)(char *, uint64_t, uint64_t))sub_21FC5ABF0();
  v17 = *((_QWORD *)v16 - 1);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v70 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v58 - v20;
  sub_21FA2ED54(0, (unint64_t *)&qword_25406AAE8, v8);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v63 = (uint64_t)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v58 - v26;
  v28 = MEMORY[0x24BDAC7A8](v25);
  v30 = (char *)&v58 - v29;
  v31 = MEMORY[0x24BDAC7A8](v28);
  v61 = (char *)&v58 - v32;
  MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)&v58 - v33;
  v35 = OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_gregorianCalendar;
  v36 = *(void (**)(char *, _QWORD, uint64_t (*)(char *, uint64_t, uint64_t)))(v17 + 104);
  v36(v21, *MEMORY[0x24BDCF240], v16);
  if (__OFSUB__(0, a3))
  {
    __break(1u);
LABEL_17:
    swift_once();
LABEL_9:
    v45 = sub_21FC5AFD4();
    __swift_project_value_buffer(v45, (uint64_t)qword_25406D830);
    swift_retain_n();
    v46 = sub_21FC5AFC8();
    v47 = sub_21FC5B988();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = swift_slowAlloc();
      v49 = swift_slowAlloc();
      v78 = v49;
      *(_DWORD *)v48 = 136315394;
      sub_21FA2A08C(&qword_255540840, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE988]);
      v50 = sub_21FC5BDCC();
      v77 = sub_21FABDCF8(v50, v51, &v78);
      sub_21FC5BAC0();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 12) = 2048;
      v77 = v59;
      sub_21FC5BAC0();
      _os_log_impl(&dword_21FA27000, v46, v47, "Unable to create end date from %s, offset by %ld years", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v49, -1, -1);
      v52 = v48;
      a3 = v72;
      v5 = v73;
      MEMORY[0x2207D105C](v52, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    goto LABEL_12;
  }
  v62 = v5;
  v69 = v5 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_date;
  v74 = v5 + v35;
  sub_21FC5AB9C();
  v37 = *(void (**)(char *, uint64_t (*)(char *, uint64_t, uint64_t)))(v17 + 8);
  v37(v21, v16);
  v59 = a3;
  v38 = a3 < 1;
  a3 = v72;
  v5 = v73;
  if (!v38)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v71, v74, v76);
    v36(v70, *MEMORY[0x24BDCF220], v16);
    v58 = v34;
    sub_21FA6A498((uint64_t)v34, (uint64_t)v30, (unint64_t *)&qword_25406AAE8, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(a3 + 48))(v30, 1, v5) == 1)
    {
      v39 = v60;
      (*(void (**)(char *, uint64_t, uint64_t))(a3 + 16))(v60, v69, v5);
      sub_21FA2EDA0((uint64_t)v30, (unint64_t *)&qword_25406AAE8, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    }
    else
    {
      v39 = v60;
      (*(void (**)(char *, char *, uint64_t))(a3 + 32))(v60, v30, v5);
    }
    v40 = (uint64_t)v61;
    v42 = v70;
    v41 = v71;
    sub_21FC5AB9C();
    (*(void (**)(char *, uint64_t))(a3 + 8))(v39, v5);
    v37(v42, v16);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v41, v76);
    v34 = v58;
    sub_21FA2EDA0((uint64_t)v58, (unint64_t *)&qword_25406AAE8, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    sub_21FA6A41C(v40, (uint64_t)v34);
  }
  v43 = (void (*)(uint64_t))MEMORY[0x24BDCE900];
  sub_21FA6A498((uint64_t)v34, (uint64_t)v27, (unint64_t *)&qword_25406AAE8, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48);
  v44 = v16(v27, 1, v5);
  sub_21FA2EDA0((uint64_t)v27, (unint64_t *)&qword_25406AAE8, v43);
  if (v44 == 1)
  {
    if (qword_25406B7F8 == -1)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_12:
  v53 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v64, v74, v76);
  v54 = v63;
  sub_21FA6A498((uint64_t)v34, v63, (unint64_t *)&qword_25406AAE8, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v55 = v16((char *)v54, 1, v5);
  v56 = v65;
  if (v55 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(a3 + 16))(v65, v69, v5);
    sub_21FA2EDA0(v54, (unint64_t *)&qword_25406AAE8, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(a3 + 32))(v65, v54, v5);
  }
  sub_21FAC8DF8(v68, v66);
  (*(void (**)(char *, uint64_t))(a3 + 8))(v56, v5);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v53, v76);
  return sub_21FA2EDA0((uint64_t)v34, (unint64_t *)&qword_25406AAE8, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
}

uint64_t sub_21FAAD254()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = sub_21FC5AD40();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC5AD34();
  type metadata accessor for PBTypedData(0);
  sub_21FA2A08C(&qword_25553E518, type metadata accessor for PBTypedData, (uint64_t)&protocol conformance descriptor for PBTypedData);
  v4 = sub_21FC5AE6C();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t sub_21FAAD32C()
{
  type metadata accessor for PBTypedData(0);
  sub_21FA2A08C(&qword_25553E518, type metadata accessor for PBTypedData, (uint64_t)&protocol conformance descriptor for PBTypedData);
  return sub_21FC5AE90();
}

uint64_t (*sub_21FAAD390(uint64_t a1, uint64_t (*a2)(char *)))(char *)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v5 = type metadata accessor for PBTypedData(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FAAE00C(a1, (uint64_t)v7);
  v8 = a2(v7);
  if (!v2)
  {
    a2 = (uint64_t (*)(char *))v8;
    v11[0] = sub_21FAAD4A0();
    v11[1] = v9;
    sub_21FC5B6AC();
    sub_21FC5B6AC();
  }
  sub_21FA326EC((uint64_t)v7, type metadata accessor for PBTypedData);
  return a2;
}

uint64_t sub_21FAAD4A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  sub_21FA2ED54(0, &qword_25553E0F8, (void (*)(uint64_t))type metadata accessor for PBDateRange);
  v2 = MEMORY[0x24BDAC7A8](v1);
  v37 = (uint64_t)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v33 - v5;
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v33 - v7;
  v9 = type metadata accessor for PBDateRange(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v33 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v33 - v17;
  v19 = *(int *)(type metadata accessor for PBTypedData(0) + 20);
  v36 = v0;
  v20 = *(_QWORD *)(v0 + v19);
  swift_beginAccess();
  v21 = *(_BYTE *)(v20 + 24);
  v42 = *(_QWORD *)(v20 + 16);
  v43 = v21;
  v22 = sub_21FC5B64C();
  v33 = v23;
  v34 = v22;
  v24 = v20
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  swift_beginAccess();
  sub_21FA6A498(v24, (uint64_t)v8, &qword_25553E0F8, (void (*)(uint64_t))type metadata accessor for PBDateRange);
  v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v35(v8, 1, v9) == 1)
  {
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = 0xE000000000000000;
    *((_QWORD *)v18 + 2) = 0;
    *((_QWORD *)v18 + 3) = 0xE000000000000000;
    *((_QWORD *)v18 + 4) = 0;
    v18[40] = 1;
    sub_21FC5AD10();
    sub_21FA2EDA0((uint64_t)v8, &qword_25553E0F8, (void (*)(uint64_t))type metadata accessor for PBDateRange);
  }
  else
  {
    sub_21FA651B0((uint64_t)v8, (uint64_t)v18);
  }
  v25 = *((_QWORD *)v18 + 4);
  v26 = v18[40];
  sub_21FA326EC((uint64_t)v18, type metadata accessor for PBDateRange);
  v38 = v25;
  v39 = v26;
  sub_21FC5B64C();
  v40 = v34;
  v41 = v33;
  sub_21FC5B6AC();
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  v27 = *(_QWORD *)(v36 + v19);
  v28 = v27
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  swift_beginAccess();
  sub_21FA6A498(v28, (uint64_t)v6, &qword_25553E0F8, (void (*)(uint64_t))type metadata accessor for PBDateRange);
  v29 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v35;
  if (v35(v6, 1, v9) == 1)
  {
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0xE000000000000000;
    *((_QWORD *)v16 + 2) = 0;
    *((_QWORD *)v16 + 3) = 0xE000000000000000;
    *((_QWORD *)v16 + 4) = 0;
    v16[40] = 1;
    sub_21FC5AD10();
    sub_21FA2EDA0((uint64_t)v6, &qword_25553E0F8, (void (*)(uint64_t))type metadata accessor for PBDateRange);
  }
  else
  {
    sub_21FA651B0((uint64_t)v6, (uint64_t)v16);
  }
  swift_bridgeObjectRetain();
  sub_21FA326EC((uint64_t)v16, type metadata accessor for PBDateRange);
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  v30 = v27
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  swift_beginAccess();
  v31 = v37;
  sub_21FA6A498(v30, v37, &qword_25553E0F8, (void (*)(uint64_t))type metadata accessor for PBDateRange);
  if (v29(v31, 1, v9) == 1)
  {
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0xE000000000000000;
    *((_QWORD *)v13 + 2) = 0;
    *((_QWORD *)v13 + 3) = 0xE000000000000000;
    *((_QWORD *)v13 + 4) = 0;
    v13[40] = 1;
    sub_21FC5AD10();
    sub_21FA2EDA0(v31, &qword_25553E0F8, (void (*)(uint64_t))type metadata accessor for PBDateRange);
  }
  else
  {
    sub_21FA651B0(v31, (uint64_t)v13);
  }
  swift_bridgeObjectRetain();
  sub_21FA326EC((uint64_t)v13, type metadata accessor for PBDateRange);
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  return v40;
}

uint64_t sub_21FAAD8F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  sub_21FA2ED54(0, (unint64_t *)&qword_25553F0B0, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  MEMORY[0x24BDAC7A8](v1);
  sub_21FA2ED54(0, &qword_25553F0B8, (void (*)(uint64_t))MEMORY[0x24BDCF2D8]);
  MEMORY[0x24BDAC7A8](v2);
  if (*(_BYTE *)(v0 + 8) == 1)
    __asm { BR              X11 }
  sub_21FC5BB74();
  sub_21FC5B6AC();
  sub_21FC5BC4C();
  result = sub_21FC5BC70();
  __break(1u);
  return result;
}

uint64_t sub_21FAADEE8()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  sub_21FA2CEE4();
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_21FC60A80;
  sub_21FC5B604();
  v1 = objc_allocWithZone(MEMORY[0x24BDD17C0]);
  v2 = (void *)sub_21FC5B5E0();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, sel_initWithKey_ascending_, v2, 0);

  *(_QWORD *)(v0 + 32) = v3;
  sub_21FC5B604();
  v4 = objc_allocWithZone(MEMORY[0x24BDD17C0]);
  v5 = (void *)sub_21FC5B5E0();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel_initWithKey_ascending_, v5, 0);

  *(_QWORD *)(v0 + 40) = v6;
  sub_21FC5B7C0();
  return v0;
}

uint64_t sub_21FAAE00C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PBTypedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static VHRDirectory.simpleVHRDirectory()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t result;
  unint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  void (*v23)(unint64_t, char *, uint64_t);
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;

  v32 = a1;
  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v2 = MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v2);
  v7 = (char *)&v29 - v6;
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v29 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v29 - v11;
  sub_21FA2D1A0(0, &qword_255540848, (uint64_t (*)(uint64_t))type metadata accessor for VHRDirectoryIssuer, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v13 = (int *)type metadata accessor for VHRDirectoryIssuer();
  v14 = *((_QWORD *)v13 - 1);
  v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v31 = *(_QWORD *)(v14 + 72);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_21FC5F720;
  sub_21FC5A980();
  v17 = sub_21FC5A98C();
  v18 = *(_QWORD **)(v17 - 8);
  v19 = (uint64_t (*)(char *, uint64_t, uint64_t))v18[6];
  result = v19(v12, 1, v17);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v30 = v16;
    v21 = v16 + v15;
    v22 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v18[7];
    v22(v10, 1, 1, v17);
    v22(v7, 1, 1, v17);
    v23 = (void (*)(unint64_t, char *, uint64_t))v18[4];
    v23(v21, v12, v17);
    v24 = (_QWORD *)(v21 + v13[5]);
    *v24 = 0xD000000000000017;
    v24[1] = 0x800000021FC75FE0;
    sub_21FAA95B4((uint64_t)v10, v21 + v13[6]);
    sub_21FAA95B4((uint64_t)v7, v21 + v13[7]);
    sub_21FC5A980();
    result = v19(v4, 1, v17);
    if ((_DWORD)result != 1)
    {
      v25 = v21 + v31;
      v22(v10, 1, 1, v17);
      v22(v7, 1, 1, v17);
      v23(v25, v4, v17);
      v26 = (_QWORD *)(v25 + v13[5]);
      *v26 = 0xD000000000000021;
      v26[1] = 0x800000021FC76030;
      sub_21FAA95B4((uint64_t)v10, v25 + v13[6]);
      result = sub_21FAA95B4((uint64_t)v7, v25 + v13[7]);
      v27 = v32;
      v28 = v30;
      *v32 = 1;
      v27[1] = v28;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t static VHRDirectory.simpleVHRDirectoryData()()
{
  uint64_t v0;
  uint64_t v2;

  sub_21FC5A65C();
  swift_allocObject();
  sub_21FC5A650();
  static VHRDirectory.simpleVHRDirectory()(&v2);
  sub_21FAAE40C();
  v0 = sub_21FC5A644();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

unint64_t sub_21FAAE40C()
{
  unint64_t result;

  result = qword_255540850;
  if (!qword_255540850)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for VHRDirectory, &type metadata for VHRDirectory);
    atomic_store(result, (unint64_t *)&qword_255540850);
  }
  return result;
}

uint64_t sub_21FAAE450@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  void *v24;
  uint64_t (*v25)(void);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;

  v38 = a2;
  v46 = a3;
  sub_21FAAE8A8(0, &qword_25406B880, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BDB98E0]);
  v41 = v4;
  v39 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v40 = (char *)&v36 - v5;
  sub_21FAAE8A8(0, &qword_255540858, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BDB9730]);
  v43 = *(_QWORD *)(v6 - 8);
  v44 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v42 = (char *)&v36 - v7;
  sub_21FA59CF0();
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDBA1B0];
  sub_21FA5B0CC(0, (unint64_t *)&qword_25553F0E0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v36 - v17;
  v47 = *a1;
  v19 = v47;
  v20 = type metadata accessor for ClinicalSharingSyncContext();
  swift_retain();
  v45 = v20;
  sub_21FC5B22C();
  sub_21FA2CDB4();
  sub_21FC5B208();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_21FA5B13C((unint64_t *)&qword_25553F0E8, (unint64_t *)&qword_25553F0E0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v13, MEMORY[0x24BDBA1D0]);
  v21 = sub_21FC5B280();
  result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (!*(_QWORD *)(v19 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_error))
  {
    v47 = v21;
    v23 = swift_allocObject();
    v24 = v38;
    *(_QWORD *)(v23 + 16) = v38;
    v37 = v24;
    sub_21FC5B184();
    v38 = (void *)v21;
    v25 = MEMORY[0x24BDB9AE0];
    sub_21FA5B0CC(0, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA5B13C((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v25, MEMORY[0x24BDB9AF8]);
    v26 = v40;
    sub_21FC5B34C();
    swift_release();
    sub_21FAAEAF8(&qword_25406B878, &qword_25406B880, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BDB98E0], MEMORY[0x24BDB98F0]);
    v27 = v41;
    v28 = sub_21FC5B280();
    v29 = *(void (**)(char *, uint64_t))(v39 + 8);
    v29(v26, v27);
    v47 = v28;
    v30 = swift_allocObject();
    *(_BYTE *)(v30 + 16) = 0;
    v31 = v37;
    *(_QWORD *)(v30 + 24) = v37;
    v32 = v31;
    sub_21FC5B184();
    sub_21FC5B34C();
    swift_release();
    v33 = sub_21FC5B280();
    v29(v26, v27);
    swift_release();
    v47 = v33;
    swift_retain();
    v34 = v42;
    sub_21FC5B2E0();
    swift_release();
    swift_release();
    sub_21FAAEAF8(&qword_255540860, &qword_255540858, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x24BDB9730], MEMORY[0x24BDB9740]);
    v35 = v44;
    v21 = sub_21FC5B280();
    swift_release();
    result = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v34, v35);
  }
  *v46 = v21;
  return result;
}

void sub_21FAAE8A8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  uint64_t (*v6)(void);
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  uint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    v6 = MEMORY[0x24BDB9AE0];
    sub_21FA5B0CC(255, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    v10[0] = v7;
    v10[1] = v7;
    v11 = sub_21FA5B13C((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v6, MEMORY[0x24BDB9AF8]);
    v12 = v11;
    v8 = a3(a1, v10);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_21FAAE950@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  _QWORD v18[2];

  v18[0] = a3;
  sub_21FA59CF0();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDBA1B0];
  sub_21FA5B0CC(0, (unint64_t *)&qword_25553F0E0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v18 - v14;
  sub_21FAD2198(*a1);
  v18[1] = a2;
  type metadata accessor for ClinicalSharingSyncContext();
  swift_retain();
  sub_21FC5B22C();
  sub_21FA2CDB4();
  sub_21FC5B208();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_21FA5B13C((unint64_t *)&qword_25553F0E8, (unint64_t *)&qword_25553F0E0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v10, MEMORY[0x24BDBA1D0]);
  v16 = sub_21FC5B280();
  result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  *(_QWORD *)v18[0] = v16;
  return result;
}

uint64_t sub_21FAAEACC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_21FAAEAF0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FAD9164(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_21FAAEAF8(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FAAE8A8(255, a2, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FAAEB38()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_21FAAEB5C@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21FAAE950(a1, v2, a2);
}

void sub_21FAAEB64()
{
  uint64_t *v0;
  uint64_t inited;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  const __CFDictionary *v17;
  OSStatus v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_21FA2D1A0(0, (unint64_t *)&qword_25406BB40, (uint64_t (*)(uint64_t))sub_21FAAF640, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21FC5EE20;
  *(_QWORD *)(inited + 32) = sub_21FC5B604();
  *(_QWORD *)(inited + 40) = v2;
  v3 = (void *)*MEMORY[0x24BDE9230];
  type metadata accessor for CFString(0);
  v5 = v4;
  *(_QWORD *)(inited + 72) = v4;
  *(_QWORD *)(inited + 48) = v3;
  *(_QWORD *)(inited + 80) = sub_21FC5B604();
  *(_QWORD *)(inited + 88) = v6;
  v7 = *v0;
  v8 = v0[1];
  *(_QWORD *)(inited + 120) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 96) = v7;
  *(_QWORD *)(inited + 104) = v8;
  *(_QWORD *)(inited + 128) = sub_21FC5B604();
  *(_QWORD *)(inited + 136) = v9;
  v10 = (void *)*MEMORY[0x24BDE8FA0];
  *(_QWORD *)(inited + 168) = v5;
  *(_QWORD *)(inited + 144) = v10;
  *(_QWORD *)(inited + 176) = sub_21FC5B604();
  *(_QWORD *)(inited + 184) = v11;
  *(_QWORD *)(inited + 216) = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 192) = 1;
  *(_QWORD *)(inited + 224) = sub_21FC5B604();
  *(_QWORD *)(inited + 232) = v12;
  v13 = v3;
  swift_bridgeObjectRetain();
  v14 = v10;
  v15 = sub_21FC5B430();
  *(_QWORD *)(inited + 264) = MEMORY[0x24BDCDDE8];
  *(_QWORD *)(inited + 240) = v15;
  *(_QWORD *)(inited + 248) = v16;
  sub_21FA7C420(inited);
  v17 = (const __CFDictionary *)sub_21FC5B55C();
  swift_bridgeObjectRelease();
  v18 = SecItemAdd(v17, 0);

  if (!v18)
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v24 = sub_21FC5AFD4();
    __swift_project_value_buffer(v24, (uint64_t)qword_25406D830);
    v20 = sub_21FC5AFC8();
    v21 = sub_21FC5B970();
    if (!os_log_type_enabled(v20, v21))
      goto LABEL_12;
    v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v22 = 0;
    v23 = "Successfully added the private key to keychain";
    goto LABEL_11;
  }
  if (v18 == -25299)
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v19 = sub_21FC5AFD4();
    __swift_project_value_buffer(v19, (uint64_t)qword_25406D830);
    v20 = sub_21FC5AFC8();
    v21 = sub_21FC5B970();
    if (!os_log_type_enabled(v20, v21))
      goto LABEL_12;
    v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v22 = 0;
    v23 = "Private key already exists in keychain";
LABEL_11:
    _os_log_impl(&dword_21FA27000, v20, v21, v23, v22, 2u);
    MEMORY[0x2207D105C](v22, -1, -1);
LABEL_12:

    return;
  }
  sub_21FAAF6A8();
  v25 = sub_21FC5BAE4();
  v27 = v26;
  sub_21FAAF6EC();
  swift_allocError();
  *(_QWORD *)v28 = v25;
  *(_QWORD *)(v28 + 8) = v27;
  *(_BYTE *)(v28 + 16) = 4;
  swift_willThrow();
}

SecAccessControlRef sub_21FAAEEB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t inited;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  const __CFDictionary *v30;
  OSStatus v31;
  uint64_t v32;
  void *v33;
  SecAccessControlRef result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  double *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  double v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  unint64_t v50;
  uint8_t *v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  id v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  double *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _OWORD v68[2];
  __int128 v69;
  uint64_t v70;
  CFTypeRef v71[37];

  v59 = a2;
  v60 = a1;
  v71[35] = *(CFTypeRef *)MEMORY[0x24BDAC8D0];
  v65 = sub_21FC5AAAC();
  v3 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65);
  v62 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v61 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v58 = (char *)&v54 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v54 - v11;
  sub_21FA2D1A0(0, (unint64_t *)&qword_25406BB40, (uint64_t (*)(uint64_t))sub_21FAAF640, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21FC5EE20;
  *(_QWORD *)(inited + 32) = sub_21FC5B604();
  *(_QWORD *)(inited + 40) = v14;
  v15 = (void *)*MEMORY[0x24BDE9230];
  type metadata accessor for CFString(0);
  *(_QWORD *)(inited + 72) = v16;
  *(_QWORD *)(inited + 48) = v15;
  *(_QWORD *)(inited + 80) = sub_21FC5B604();
  *(_QWORD *)(inited + 88) = v17;
  v18 = *v2;
  v19 = *((_QWORD *)v2 + 1);
  v63 = v2;
  *(_QWORD *)(inited + 120) = MEMORY[0x24BEE0D00];
  *(double *)(inited + 96) = v18;
  *(_QWORD *)(inited + 104) = v19;
  *(_QWORD *)(inited + 128) = sub_21FC5B604();
  *(_QWORD *)(inited + 136) = v20;
  v21 = MEMORY[0x24BEE1328];
  *(_QWORD *)(inited + 168) = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 144) = 1;
  *(_QWORD *)(inited + 176) = sub_21FC5B604();
  *(_QWORD *)(inited + 184) = v22;
  *(_QWORD *)(inited + 216) = v21;
  *(_BYTE *)(inited + 192) = 1;
  *(_QWORD *)(inited + 224) = sub_21FC5B604();
  *(_QWORD *)(inited + 232) = v23;
  *(_QWORD *)(inited + 264) = v21;
  v24 = (uint64_t)v12;
  v25 = v3;
  *(_BYTE *)(inited + 240) = 1;
  v26 = v15;
  swift_bridgeObjectRetain();
  v27 = inited;
  v28 = v65;
  sub_21FA7C420(v27);
  v71[0] = 0;
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  v29(v24, 1, 1, v28);
  v30 = (const __CFDictionary *)sub_21FC5B55C();
  swift_bridgeObjectRelease();
  v31 = SecItemCopyMatching(v30, v71);

  if (v31 == -25300)
  {
    sub_21FAAF6EC();
    swift_allocError();
    *(_QWORD *)v35 = 0xD000000000000014;
    *(_QWORD *)(v35 + 8) = 0x800000021FC76060;
LABEL_10:
    *(_BYTE *)(v35 + 16) = 5;
    swift_willThrow();
    goto LABEL_11;
  }
  if (v31)
  {
    LODWORD(v69) = v31;
    sub_21FAAF6A8();
    v36 = sub_21FC5BAE4();
    v38 = v37;
    sub_21FAAF6EC();
    swift_allocError();
    *(_QWORD *)v35 = v36;
    *(_QWORD *)(v35 + 8) = v38;
    goto LABEL_10;
  }
  if (!v71[0])
  {
LABEL_13:
    v57 = 0;
    v39 = 0xF000000000000000;
    v41 = v63;
    v40 = v64;
    v42 = (uint64_t)v61;
    v43 = v62;
    goto LABEL_19;
  }
  swift_unknownObjectRetain();
  objc_opt_self();
  v32 = swift_dynamicCastObjCClass();
  if (!v32)
  {
    swift_unknownObjectRelease();
    goto LABEL_13;
  }
  v33 = (void *)v32;
  v56 = (id)*MEMORY[0x24BDE9550];
  result = (SecAccessControlRef)objc_msgSend(v33, sel___swift_objectForKeyedSubscript_);
  if (!result)
  {
    __break(1u);
    goto LABEL_38;
  }
  sub_21FC5BAF0();
  swift_unknownObjectRelease();
  sub_21FA7B73C(v68, &v69);
  swift_dynamicCast();
  v57 = v66;
  v55 = v67;

  v56 = (id)*MEMORY[0x24BDE90A8];
  if (objc_msgSend(v33, sel___swift_objectForKeyedSubscript_))
  {
    sub_21FC5BAF0();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_21FA71828(v24);
  }
  else
  {
    sub_21FA71828(v24);
    swift_unknownObjectRelease();
    memset(v68, 0, sizeof(v68));
  }
  v41 = v63;
  v40 = v64;
  v42 = (uint64_t)v61;
  sub_21FAAF8D8((uint64_t)v68, (uint64_t)&v69);
  v44 = (uint64_t)v58;
  if (v70)
  {
    v45 = swift_dynamicCast();
    v29(v44, v45 ^ 1u, 1, v28);

  }
  else
  {

    sub_21FA2DA9C((uint64_t)&v69);
    v29(v44, 1, 1, v28);
  }
  sub_21FA6A41C(v44, v24);
  v43 = v62;
  v39 = v55;
LABEL_19:
  sub_21FA7187C(v24, v42);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v42, 1, v28) != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 32))(v43, v42, v28);
    sub_21FC5AA4C();
    if (v46 > v41[5])
    {
      (*(void (**)(char *, uint64_t))(v25 + 8))(v43, v28);
      goto LABEL_23;
    }
    if (v39 >> 60 == 15)
    {
      sub_21FAAF730();
      if (!v40)
      {
        sub_21FAAF6EC();
        swift_allocError();
        *(_QWORD *)v53 = 0xD000000000000021;
        *(_QWORD *)(v53 + 8) = 0x800000021FC76080;
        *(_BYTE *)(v53 + 16) = 5;
        swift_willThrow();
      }
    }
    else
    {
      sub_21FC5B43C();
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v43, v28);
LABEL_11:
    sub_21FA71828(v24);
    return (SecAccessControlRef)swift_unknownObjectRelease();
  }
  sub_21FA71828(v42);
LABEL_23:
  if (qword_25406B7F8 != -1)
    swift_once();
  v47 = sub_21FC5AFD4();
  __swift_project_value_buffer(v47, (uint64_t)qword_25406D830);
  v48 = sub_21FC5AFC8();
  v49 = sub_21FC5B970();
  if (os_log_type_enabled(v48, v49))
  {
    v50 = v39;
    v51 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v51 = 0;
    _os_log_impl(&dword_21FA27000, v48, v49, "Verification Key expired. Creating and storing a new verification key", v51, 2u);
    v52 = v51;
    v39 = v50;
    MEMORY[0x2207D105C](v52, -1, -1);
  }

  sub_21FAAF730();
  if (v40)
    goto LABEL_30;
  result = SecAccessControlCreateWithFlags(0, (CFTypeRef)*MEMORY[0x24BDE8F70], 0, 0);
  if (result)
  {
    sub_21FC5B448();
LABEL_30:
    sub_21FA71828(v24);
    sub_21FA3239C(v57, v39);
    return (SecAccessControlRef)swift_unknownObjectRelease();
  }
LABEL_38:
  __break(1u);
  return result;
}

void sub_21FAAF640()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25406BA08)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25406BA08);
  }
}

unint64_t sub_21FAAF6A8()
{
  unint64_t result;

  result = qword_255540868;
  if (!qword_255540868)
  {
    result = MEMORY[0x2207D0F78](MEMORY[0x24BEE3FC8], MEMORY[0x24BEE3F88]);
    atomic_store(result, (unint64_t *)&qword_255540868);
  }
  return result;
}

unint64_t sub_21FAAF6EC()
{
  unint64_t result;

  result = qword_255540870;
  if (!qword_255540870)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC6F250, &_s11CryptoErrorON);
    atomic_store(result, (unint64_t *)&qword_255540870);
  }
  return result;
}

void sub_21FAAF730()
{
  uint64_t *v0;
  uint64_t inited;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  const __CFDictionary *v10;
  OSStatus v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_21FA2D1A0(0, (unint64_t *)&qword_25406BB40, (uint64_t (*)(uint64_t))sub_21FAAF640, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21FC60A70;
  *(_QWORD *)(inited + 32) = sub_21FC5B604();
  *(_QWORD *)(inited + 40) = v2;
  v3 = (void *)*MEMORY[0x24BDE9230];
  type metadata accessor for CFString(0);
  *(_QWORD *)(inited + 72) = v4;
  *(_QWORD *)(inited + 48) = v3;
  *(_QWORD *)(inited + 80) = sub_21FC5B604();
  *(_QWORD *)(inited + 88) = v5;
  *(_QWORD *)(inited + 120) = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 96) = 1;
  *(_QWORD *)(inited + 128) = sub_21FC5B604();
  *(_QWORD *)(inited + 136) = v6;
  v7 = *v0;
  v8 = v0[1];
  *(_QWORD *)(inited + 168) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 144) = v7;
  *(_QWORD *)(inited + 152) = v8;
  v9 = v3;
  swift_bridgeObjectRetain();
  sub_21FA7C420(inited);
  v10 = (const __CFDictionary *)sub_21FC5B55C();
  swift_bridgeObjectRelease();
  v11 = SecItemDelete(v10);

  if (v11)
  {
    if (v11 != -25300)
    {
      sub_21FAAF6A8();
      v12 = sub_21FC5BAE4();
      v14 = v13;
      sub_21FAAF6EC();
      swift_allocError();
      *(_QWORD *)v15 = v12;
      *(_QWORD *)(v15 + 8) = v14;
      *(_BYTE *)(v15 + 16) = 6;
      swift_willThrow();
    }
  }
}

uint64_t sub_21FAAF8D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FA2DAD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t Error.hdhr_friendlyDescription.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  int v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[4];

  sub_21FA2ED54(0, &qword_255540878, (void (*)(uint64_t))MEMORY[0x24BEE2710]);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v24 - v5;
  v7 = *(_QWORD *)(a1 - 8);
  v8 = MEMORY[0x24BDAC7A8](v4);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v24 - v11;
  v13 = sub_21FC5BBC8();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v17(v12, v1, a1);
  v18 = swift_dynamicCast();
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (v18)
  {
    v19(v6, 0, 1, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v6, v13);
    v20 = DecodingError.hdhr_friendlyDescription.getter();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  else
  {
    v19(v6, 1, 1, v13);
    sub_21FA2EDA0((uint64_t)v6, &qword_255540878, (void (*)(uint64_t))MEMORY[0x24BEE2710]);
    v17(v10, v1, a1);
    sub_21FAAFBC4();
    if (swift_dynamicCast())
    {
      sub_21FA3175C(&v24, (uint64_t)v27);
      __swift_project_boxed_opaque_existential_1(v27, v27[3]);
      v20 = sub_21FC5A848();
      v22 = v21;
      sub_21FA2CEA0((uint64_t)v27, (uint64_t)&v24);
      if (!v22)
      {
        __swift_project_boxed_opaque_existential_1(&v24, *((uint64_t *)&v25 + 1));
        v20 = sub_21FC5BE44();
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    }
    else
    {
      v26 = 0;
      v24 = 0u;
      v25 = 0u;
      sub_21FA2EDA0((uint64_t)&v24, &qword_255540888, (void (*)(uint64_t))sub_21FAAFBC4);
      return sub_21FC5BE44();
    }
  }
  return v20;
}

unint64_t sub_21FAAFBC4()
{
  unint64_t result;

  result = qword_255540880;
  if (!qword_255540880)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_255540880);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ClinicalSharingFHIRSearchResult(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ClinicalSharingFHIRSearchResult()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for ClinicalSharingFHIRSearchResult(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for ClinicalSharingFHIRSearchResult(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ClinicalSharingFHIRSearchResult()
{
  return &type metadata for ClinicalSharingFHIRSearchResult;
}

uint64_t sub_21FAAFCC4()
{
  return 0x7972746E65;
}

uint64_t sub_21FAAFCD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x7972746E65 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_21FC5BDF0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_21FAAFD64()
{
  sub_21FAAFF68();
  return sub_21FC5BF10();
}

uint64_t sub_21FAAFD8C()
{
  sub_21FAAFF68();
  return sub_21FC5BF1C();
}

_QWORD *sub_21FAAFDB4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_21FAAFDDC(a1);
  if (!v2)
    *a2 = result;
  return result;
}

_QWORD *sub_21FAAFDDC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  _QWORD v10[2];

  sub_21FAAFF10();
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_21FAAFF68();
  sub_21FC5BEE0();
  if (!v1)
  {
    sub_21FAAFFAC();
    sub_21FAB0000();
    sub_21FC5BD0C();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v8 = (_QWORD *)v10[1];
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v8;
}

void sub_21FAAFF10()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255540890)
  {
    sub_21FAAFF68();
    v0 = sub_21FC5BD3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255540890);
  }
}

unint64_t sub_21FAAFF68()
{
  unint64_t result;

  result = qword_255540898;
  if (!qword_255540898)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC613EC, &type metadata for ClinicalSharingFHIRSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255540898);
  }
  return result;
}

void sub_21FAAFFAC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2555408A0)
  {
    v0 = sub_21FC5B7F0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2555408A0);
  }
}

unint64_t sub_21FAB0000()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_2555408A8;
  if (!qword_2555408A8)
  {
    sub_21FAAFFAC();
    v2 = v1;
    v3 = sub_21FAB0060();
    result = MEMORY[0x2207D0F78](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2555408A8);
  }
  return result;
}

unint64_t sub_21FAB0060()
{
  unint64_t result;

  result = qword_2555408B0;
  if (!qword_2555408B0)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC73D40, &type metadata for ClinicalSharingFHIRSearchEntry);
    atomic_store(result, (unint64_t *)&qword_2555408B0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ClinicalSharingFHIRSearchResult.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21FAB00E4 + 4 * byte_21FC612D0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21FAB0104 + 4 * byte_21FC612D5[v4]))();
}

_BYTE *sub_21FAB00E4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21FAB0104(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21FAB010C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21FAB0114(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21FAB011C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21FAB0124(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingFHIRSearchResult.CodingKeys()
{
  return &type metadata for ClinicalSharingFHIRSearchResult.CodingKeys;
}

unint64_t sub_21FAB0144()
{
  unint64_t result;

  result = qword_2555408B8;
  if (!qword_2555408B8)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC613C4, &type metadata for ClinicalSharingFHIRSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2555408B8);
  }
  return result;
}

unint64_t sub_21FAB018C()
{
  unint64_t result;

  result = qword_2555408C0;
  if (!qword_2555408C0)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC61334, &type metadata for ClinicalSharingFHIRSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2555408C0);
  }
  return result;
}

unint64_t sub_21FAB01D4()
{
  unint64_t result;

  result = qword_2555408C8;
  if (!qword_2555408C8)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC6135C, &type metadata for ClinicalSharingFHIRSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2555408C8);
  }
  return result;
}

uint64_t sub_21FAB021C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  _QWORD v14[2];

  sub_21FAB048C();
  v3 = v2;
  v14[0] = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_25406B7F8 != -1)
    swift_once();
  v6 = sub_21FC5AFD4();
  __swift_project_value_buffer(v6, (uint64_t)qword_25406D830);
  v7 = sub_21FC5AFC8();
  v8 = sub_21FC5B970();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_21FA27000, v7, v8, "Retrieving multi device ID.", v9, 2u);
    MEMORY[0x2207D105C](v9, -1, -1);
  }

  v14[1] = sub_21FC5B9DC();
  *(_QWORD *)(swift_allocObject() + 16) = a1;
  v10 = a1;
  sub_21FC5B184();
  sub_21FAB0568();
  v11 = MEMORY[0x24BDB9AE0];
  sub_21FAB0D84(0, (unint64_t *)&qword_25406B948, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA2A08C(&qword_25406B9A0, (uint64_t (*)(uint64_t))sub_21FAB0568, MEMORY[0x24BDB9E58]);
  sub_21FAB0D0C((unint64_t *)&qword_25406B940, (unint64_t *)&qword_25406B948, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))v11, MEMORY[0x24BDB9AF8]);
  sub_21FC5B34C();
  swift_release();
  swift_release();
  sub_21FA2A08C(&qword_25406B888, (uint64_t (*)(uint64_t))sub_21FAB048C, MEMORY[0x24BDB98F0]);
  v12 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v14[0] + 8))(v5, v3);
  return v12;
}

void sub_21FAB048C()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25406B890)
  {
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FAB0D84(255, (unint64_t *)&qword_25406B948, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FAB0568();
    sub_21FAB0D0C((unint64_t *)&qword_25406B940, (unint64_t *)&qword_25406B948, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    sub_21FA2A08C(&qword_25406B9A0, (uint64_t (*)(uint64_t))sub_21FAB0568, MEMORY[0x24BDB9E58]);
    v1 = sub_21FC5B100();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25406B890);
  }
}

void sub_21FAB0568()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406B9A8)
  {
    sub_21FAA4D44(255, (unint64_t *)&qword_25406BA00, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1C68]);
    sub_21FA2CDB4();
    v0 = sub_21FC5B250();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406B9A8);
  }
}

uint64_t sub_21FAB05E4@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[2];

  sub_21FAA4D44(0, &qword_25406B988, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BDB9DE0]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v29 - v9;
  sub_21FAB0D84(0, &qword_25406BB70, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v29 - v14;
  v16 = a1[1];
  if (v16)
  {
    v32 = v8;
    v33 = v7;
    v17 = *a1;
    v18 = qword_25406B7F8;
    swift_bridgeObjectRetain();
    if (v18 != -1)
      swift_once();
    v19 = sub_21FC5AFD4();
    __swift_project_value_buffer(v19, (uint64_t)qword_25406D830);
    swift_bridgeObjectRetain_n();
    v20 = sub_21FC5AFC8();
    v21 = sub_21FC5B970();
    if (os_log_type_enabled(v20, v21))
    {
      v30 = a3;
      v22 = swift_slowAlloc();
      v31 = v17;
      v23 = (uint8_t *)v22;
      v24 = swift_slowAlloc();
      v35[0] = v24;
      v29 = v13;
      *(_DWORD *)v23 = 136315138;
      swift_bridgeObjectRetain();
      v34 = sub_21FABDCF8(v31, v16, v35);
      v13 = v29;
      a3 = v30;
      sub_21FC5BAC0();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_21FA27000, v20, v21, "Multi device ID found. Device ID: %s", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v24, -1, -1);
      v25 = v23;
      v17 = v31;
      MEMORY[0x2207D105C](v25, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v28 = v33;
    v35[0] = v17;
    v35[1] = v16;
    sub_21FC5B22C();
    sub_21FA2CDB4();
    sub_21FC5B208();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v28);
    sub_21FAB0D0C(&qword_25406BB68, &qword_25406BB70, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x24BDBA1B0], MEMORY[0x24BDBA1D0]);
    v27 = sub_21FC5B280();
    result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  else
  {
    result = sub_21FAB0A60(a2);
    v27 = result;
  }
  *a3 = v27;
  return result;
}

void sub_21FAB08F8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  _QWORD v15[6];

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  swift_retain();
  v11 = (void *)sub_21FC5B5E0();
  v12 = (void *)sub_21FC5B5E0();
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = sub_21FAB0E10;
  v13[3] = v10;
  v13[4] = a4;
  v13[5] = a5;
  v15[4] = sub_21FA72094;
  v15[5] = v13;
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 1107296256;
  v15[2] = sub_21FBB5FDC;
  v15[3] = &block_descriptor_5;
  v14 = _Block_copy(v15);
  swift_bridgeObjectRetain();
  swift_release();
  objc_msgSend(a3, sel_setString_forKey_completion_, v11, v12, v14);
  _Block_release(v14);

}

uint64_t sub_21FAB0A34()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_21FAB0A58@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FAB05E4(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_21FAB0A60(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v15)(void);
  id v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v2 = sub_21FC5AAF4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC5AAE8();
  v6 = sub_21FC5AAB8();
  v8 = v7;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (qword_25406B7F8 != -1)
    swift_once();
  v9 = sub_21FC5AFD4();
  __swift_project_value_buffer(v9, (uint64_t)qword_25406D830);
  swift_bridgeObjectRetain_n();
  v10 = sub_21FC5AFC8();
  v11 = sub_21FC5B970();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v20 = v13;
    *(_DWORD *)v12 = 136315138;
    swift_bridgeObjectRetain();
    v19 = sub_21FABDCF8(v6, v8, &v20);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_21FA27000, v10, v11, "Creating and storing a new multi device ID. Device ID: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v13, -1, -1);
    MEMORY[0x2207D105C](v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a1;
  v14[3] = v6;
  v14[4] = v8;
  v15 = MEMORY[0x24BDB9E38];
  sub_21FAB0D84(0, (unint64_t *)&qword_25406CC18, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
  swift_allocObject();
  v16 = a1;
  v20 = sub_21FC5B25C();
  sub_21FAB0D0C(&qword_25406CC10, (unint64_t *)&qword_25406CC18, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))v15, MEMORY[0x24BDB9E58]);
  v17 = sub_21FC5B280();
  swift_release();
  return v17;
}

uint64_t sub_21FAB0D0C(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD, unint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FAB0D84(255, a2, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FAB0D4C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_21FAB0D78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_21FAB08F8(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

void sub_21FAB0D84(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD, unint64_t, _QWORD))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_21FA2CDB4();
    v7 = a3(a1, MEMORY[0x24BEE0D00], v6, MEMORY[0x24BEE3F20]);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_21FAB0DEC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FAB0E10(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_21FC2EFA4(a1, a2, a3 & 1, *(uint64_t (**)(_QWORD *))(v3 + 16));
}

uint64_t sub_21FAB0E1C()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t sub_21FAB0E60@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  int64_t v85;
  uint64_t v86;

  v72 = a2;
  v74 = a4;
  v6 = type metadata accessor for ClinicalSharingDataNodeInfo();
  v78 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v80 = (uint64_t)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D1A0(0, &qword_255540940, (uint64_t (*)(uint64_t))sub_21FAB4918, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDB9DE0]);
  v71 = v8;
  v69 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v67 = (char *)&v62 - v9;
  sub_21FA84A5C(0, &qword_255540950, (uint64_t (*)(uint64_t))sub_21FAB4918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
  v70 = v10;
  v68 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v66 = (char *)&v62 - v11;
  sub_21FAB6B44(0, &qword_255540A18, sub_21FA96B64);
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v73 = (char *)&v62 - v15;
  sub_21FA96F04(0);
  v84 = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v83 = (char *)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v82 = (uint64_t)&v62 - v20;
  v21 = type metadata accessor for PBNode(0);
  v77 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v79 = (uint64_t)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *a1;
  v24 = *(_QWORD *)(*a1 + 16);
  v25 = MEMORY[0x24BEE4AF8];
  if (v24)
  {
    v63 = a3;
    v64 = v14;
    v65 = v13;
    v86 = MEMORY[0x24BEE4AF8];
    sub_21FC01BD0(0, v24, 0);
    v26 = *(unsigned __int8 *)(v17 + 80);
    v81 = *(_QWORD *)(v17 + 72);
    v27 = v86;
    v28 = v23 + ((v26 + 32) & ~v26);
    v29 = v24;
    v30 = v79;
    v85 = v24;
    v75 = v28;
    v31 = (uint64_t)v83;
    do
    {
      v32 = v82;
      sub_21FA2D120(v28, v82, (uint64_t (*)(_QWORD))sub_21FA96F04);
      v33 = *(int *)(v84 + 48);
      v34 = v31 + v33;
      v35 = v32 + v33;
      sub_21FA2D120(v32, v31, type metadata accessor for PBNode);
      sub_21FA2D120(v35, v34, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingDataNodeInfo);
      sub_21FA2D23C(v31, v30, type metadata accessor for PBNode);
      sub_21FA326EC(v34, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingDataNodeInfo);
      sub_21FA326EC(v32, (uint64_t (*)(_QWORD))sub_21FA96F04);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21FC01BD0(0, *(_QWORD *)(v27 + 16) + 1, 1);
        v27 = v86;
      }
      v37 = *(_QWORD *)(v27 + 16);
      v36 = *(_QWORD *)(v27 + 24);
      v38 = v85;
      v39 = v75;
      if (v37 >= v36 >> 1)
      {
        sub_21FC01BD0(v36 > 1, v37 + 1, 1);
        v27 = v86;
      }
      *(_QWORD *)(v27 + 16) = v37 + 1;
      v40 = v27
          + ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80))
          + *(_QWORD *)(v77 + 72) * v37;
      v30 = v79;
      sub_21FA2D23C(v79, v40, type metadata accessor for PBNode);
      v28 += v81;
      --v29;
    }
    while (v29);
    v86 = MEMORY[0x24BEE4AF8];
    sub_21FC01BA4(0, v38, 0);
    v25 = v86;
    v41 = v80;
    v76 = v27;
    v42 = (uint64_t)v83;
    do
    {
      v85 = v38;
      v43 = v25;
      v44 = v82;
      sub_21FA2D120(v39, v82, (uint64_t (*)(_QWORD))sub_21FA96F04);
      v45 = *(int *)(v84 + 48);
      v46 = v42 + v45;
      v47 = v44 + v45;
      sub_21FA2D120(v44, v42, type metadata accessor for PBNode);
      sub_21FA2D120(v47, v46, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingDataNodeInfo);
      sub_21FA2D23C(v46, v41, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingDataNodeInfo);
      sub_21FA326EC(v42, type metadata accessor for PBNode);
      sub_21FA326EC(v44, (uint64_t (*)(_QWORD))sub_21FA96F04);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21FC01BA4(0, *(_QWORD *)(v43 + 16) + 1, 1);
        v43 = v86;
      }
      v49 = *(_QWORD *)(v43 + 16);
      v48 = *(_QWORD *)(v43 + 24);
      v50 = v76;
      v51 = v85;
      if (v49 >= v48 >> 1)
      {
        sub_21FC01BA4(v48 > 1, v49 + 1, 1);
        v43 = v86;
      }
      *(_QWORD *)(v43 + 16) = v49 + 1;
      v52 = v43
          + ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80))
          + *(_QWORD *)(v78 + 72) * v49;
      v41 = v80;
      sub_21FA2D23C(v80, v52, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingDataNodeInfo);
      v39 += v81;
      v38 = v51 - 1;
      v25 = v43;
    }
    while (v38);
    v53 = v74;
    v13 = v65;
    v14 = v64;
    a3 = v63;
  }
  else
  {
    v50 = MEMORY[0x24BEE4AF8];
    v53 = v74;
  }
  v86 = v50;
  sub_21FAB4918(0);
  v54 = v67;
  sub_21FC5B22C();
  sub_21FA2CDB4();
  v55 = v66;
  v56 = v71;
  sub_21FC5B208();
  (*(void (**)(char *, uint64_t))(v69 + 8))(v54, v56);
  v57 = __swift_project_boxed_opaque_existential_1(v72, v72[3]);
  v58 = sub_21FAB5F04((uint64_t)v57, a3);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v55, v70);
  v86 = v58;
  *(_QWORD *)(swift_allocObject() + 16) = v25;
  sub_21FA84A5C(0, &qword_255540810, type metadata accessor for PBPushBlobsResponse, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA96B64(0);
  sub_21FAB4934();
  v59 = v73;
  sub_21FC5B2C8();
  swift_release();
  swift_release();
  sub_21FAB6CB0(&qword_255540A20, &qword_255540A18, sub_21FA96B64);
  v60 = sub_21FC5B280();
  result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v59, v13);
  *v53 = v60;
  return result;
}

uint64_t sub_21FAB1508@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  size_t v33;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  unint64_t v49;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t result;
  _QWORD *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;

  v75 = a2;
  sub_21FAB480C(0, &qword_2555409F0, (void (*)(uint64_t))sub_21FAB6BD0, (void (*)(void))sub_21FAB6C34);
  v74 = v3;
  v72 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v70 = (char *)&v68 - v4;
  sub_21FAB488C(0, &qword_255540A08, (void (*)(uint64_t))sub_21FAB6BD0, (void (*)(void))sub_21FAB6C34);
  v73 = v5;
  v71 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v69 = (char *)&v68 - v6;
  v82 = type metadata accessor for ClinicalSharingDataNodeInfo();
  v7 = *(_QWORD *)(v82 - 8);
  v8 = MEMORY[0x24BDAC7A8](v82);
  v81 = (uint64_t)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v68 - v10;
  v12 = *a1;
  v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v83 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v14 = *(_QWORD *)(v12 + 16);
  if (v14)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v14; ++i)
    {
      v16 = swift_bridgeObjectRetain();
      sub_21FBDFD2C(v16);
    }
    swift_bridgeObjectRelease();
    v13 = v83;
  }
  v87 = (_QWORD *)MEMORY[0x24BEE4B00];
  v17 = v13[2];
  if (v17)
  {
    v18 = *(unsigned __int8 *)(v7 + 80);
    v19 = (v18 + 32) & ~v18;
    v68 = v13;
    v20 = (uint64_t)v13 + v19;
    v21 = *(_QWORD *)(v7 + 72);
    v80 = v19;
    v77 = v18 | 7;
    v78 = v21 + v19;
    v22 = (_QWORD *)MEMORY[0x24BEE4B00];
    v76 = xmmword_21FC5EE30;
    v79 = v21;
    while (1)
    {
      sub_21FA2D120(v20, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingDataNodeInfo);
      v85 = 0;
      v86 = 0xE000000000000000;
      v24 = &v11[*(int *)(v82 + 20)];
      v25 = *(_QWORD *)&v24[*(int *)(type metadata accessor for PBReference(0) + 20)]
          + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
      swift_beginAccess();
      v26 = *(_BYTE *)(v25 + 8);
      v83 = *(_QWORD **)v25;
      LOBYTE(v84) = v26;
      sub_21FC5BC4C();
      v27 = *(_QWORD *)v11;
      v28 = *(_QWORD *)(*(_QWORD *)v11 + 16);
      if (v28)
      {
        sub_21FA2D1A0(0, &qword_25553ECD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
        v29 = *(_QWORD *)(sub_21FC5AAF4() - 8);
        v30 = *(_QWORD *)(v29 + 72);
        v31 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
        v32 = (_QWORD *)swift_allocObject();
        v33 = _swift_stdlib_malloc_size(v32);
        if (!v30)
          goto LABEL_37;
        if (v33 - v31 == 0x8000000000000000 && v30 == -1)
          goto LABEL_40;
        v32[2] = v28;
        v32[3] = 2 * ((uint64_t)(v33 - v31) / v30);
        swift_bridgeObjectRetain_n();
        v35 = sub_21FC00A38(&v83, (uint64_t)v32 + v31, v28, v27);
        sub_21FA850C8();
        if (v35 != v28)
          goto LABEL_38;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        v32 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      v83 = v32;
      sub_21FAB4A60(&v83);
      swift_bridgeObjectRelease();
      v36 = v83;
      v37 = sub_21FC5AAF4();
      MEMORY[0x2207D01A4](v36, v37);
      sub_21FC5B6AC();
      swift_release();
      swift_bridgeObjectRelease();
      v38 = v85;
      v39 = v86;
      v41 = sub_21FA73F34(v85, v86);
      v42 = v22[2];
      v43 = (v40 & 1) == 0;
      v44 = v42 + v43;
      if (__OFADD__(v42, v43))
      {
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      v45 = v40;
      if (v22[3] < v44)
      {
        sub_21FA760F0(v44, 1);
        v22 = v87;
        v46 = sub_21FA73F34(v38, v39);
        if ((v45 & 1) != (v47 & 1))
        {
          result = sub_21FC5BE20();
          __break(1u);
          return result;
        }
        v41 = v46;
      }
      if ((v45 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v48 = v22[7];
        sub_21FA2D23C((uint64_t)v11, v81, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingDataNodeInfo);
        v49 = *(_QWORD *)(v48 + 8 * v41);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v48 + 8 * v41) = v49;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v49 = sub_21FA7E23C(0, *(_QWORD *)(v49 + 16) + 1, 1, v49);
          *(_QWORD *)(v48 + 8 * v41) = v49;
        }
        v52 = *(_QWORD *)(v49 + 16);
        v51 = *(_QWORD *)(v49 + 24);
        if (v52 >= v51 >> 1)
        {
          v49 = sub_21FA7E23C(v51 > 1, v52 + 1, 1, v49);
          *(_QWORD *)(v48 + 8 * v41) = v49;
        }
        *(_QWORD *)(v49 + 16) = v52 + 1;
        v23 = v79;
        sub_21FA2D23C(v81, v49 + v80 + v52 * v79, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingDataNodeInfo);
      }
      else
      {
        sub_21FA2D1A0(0, &qword_25553FDA8, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingDataNodeInfo, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
        v53 = swift_allocObject();
        *(_OWORD *)(v53 + 16) = v76;
        sub_21FA2D23C((uint64_t)v11, v53 + v80, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingDataNodeInfo);
        v22[(v41 >> 6) + 8] |= 1 << v41;
        v54 = (uint64_t *)(v22[6] + 16 * v41);
        *v54 = v38;
        v54[1] = v39;
        *(_QWORD *)(v22[7] + 8 * v41) = v53;
        v55 = v22[2];
        v56 = __OFADD__(v55, 1);
        v57 = v55 + 1;
        if (v56)
          goto LABEL_39;
        v22[2] = v57;
        v23 = v79;
      }
      v20 += v23;
      if (!--v17)
      {
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
    }
  }
  swift_bridgeObjectRelease();
  v22 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_31:
  if (qword_25406B7F8 != -1)
LABEL_41:
    swift_once();
  v58 = sub_21FC5AFD4();
  __swift_project_value_buffer(v58, (uint64_t)qword_25406D830);
  swift_retain();
  v59 = sub_21FC5AFC8();
  v60 = sub_21FC5B970();
  if (os_log_type_enabled(v59, v60))
  {
    v61 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v61 = 134217984;
    v83 = (_QWORD *)v22[2];
    sub_21FC5BAC0();
    swift_release();
    _os_log_impl(&dword_21FA27000, v59, v60, "Data nodes uploaded. Category Count: %ld", v61, 0xCu);
    MEMORY[0x2207D105C](v61, -1, -1);

  }
  else
  {

    swift_release();
  }
  v83 = v22;
  sub_21FAB6BD0();
  sub_21FAB6C34();
  v62 = v70;
  sub_21FC5B748();
  swift_release();
  sub_21FA2CDB4();
  v63 = v69;
  v64 = v74;
  sub_21FC5B118();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v62, v64);
  sub_21FAB6C50();
  v65 = v73;
  v66 = sub_21FC5B280();
  result = (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v63, v65);
  *v75 = v66;
  return result;
}

uint64_t sub_21FAB1CAC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  int64_t v85;
  uint64_t v86;

  v72 = a2;
  v74 = a4;
  v6 = type metadata accessor for ClinicalSharingCategoryNodeInfo();
  v78 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v80 = (uint64_t)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D1A0(0, &qword_255540940, (uint64_t (*)(uint64_t))sub_21FAB4918, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDB9DE0]);
  v71 = v8;
  v69 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v67 = (char *)&v62 - v9;
  sub_21FA84A5C(0, &qword_255540950, (uint64_t (*)(uint64_t))sub_21FAB4918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
  v70 = v10;
  v68 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v66 = (char *)&v62 - v11;
  sub_21FAB6B44(0, &qword_2555409E0, sub_21FA968A0);
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v73 = (char *)&v62 - v15;
  sub_21FA96B80(0);
  v84 = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v83 = (char *)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v82 = (uint64_t)&v62 - v20;
  v21 = type metadata accessor for PBNode(0);
  v77 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v79 = (uint64_t)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *a1;
  v24 = *(_QWORD *)(*a1 + 16);
  v25 = MEMORY[0x24BEE4AF8];
  if (v24)
  {
    v63 = a3;
    v64 = v14;
    v65 = v13;
    v86 = MEMORY[0x24BEE4AF8];
    sub_21FC01BD0(0, v24, 0);
    v26 = *(unsigned __int8 *)(v17 + 80);
    v81 = *(_QWORD *)(v17 + 72);
    v27 = v86;
    v28 = v23 + ((v26 + 32) & ~v26);
    v29 = v24;
    v30 = v79;
    v85 = v24;
    v75 = v28;
    v31 = (uint64_t)v83;
    do
    {
      v32 = v82;
      sub_21FA2D120(v28, v82, (uint64_t (*)(_QWORD))sub_21FA96B80);
      v33 = *(int *)(v84 + 48);
      v34 = v31 + v33;
      v35 = v32 + v33;
      sub_21FA2D120(v32, v31, type metadata accessor for PBNode);
      sub_21FA2D120(v35, v34, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCategoryNodeInfo);
      sub_21FA2D23C(v31, v30, type metadata accessor for PBNode);
      sub_21FA326EC(v34, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCategoryNodeInfo);
      sub_21FA326EC(v32, (uint64_t (*)(_QWORD))sub_21FA96B80);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21FC01BD0(0, *(_QWORD *)(v27 + 16) + 1, 1);
        v27 = v86;
      }
      v37 = *(_QWORD *)(v27 + 16);
      v36 = *(_QWORD *)(v27 + 24);
      v38 = v85;
      v39 = v75;
      if (v37 >= v36 >> 1)
      {
        sub_21FC01BD0(v36 > 1, v37 + 1, 1);
        v27 = v86;
      }
      *(_QWORD *)(v27 + 16) = v37 + 1;
      v40 = v27
          + ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80))
          + *(_QWORD *)(v77 + 72) * v37;
      v30 = v79;
      sub_21FA2D23C(v79, v40, type metadata accessor for PBNode);
      v28 += v81;
      --v29;
    }
    while (v29);
    v86 = MEMORY[0x24BEE4AF8];
    sub_21FC01BFC(0, v38, 0);
    v25 = v86;
    v41 = v80;
    v76 = v27;
    v42 = (uint64_t)v83;
    do
    {
      v85 = v38;
      v43 = v25;
      v44 = v82;
      sub_21FA2D120(v39, v82, (uint64_t (*)(_QWORD))sub_21FA96B80);
      v45 = *(int *)(v84 + 48);
      v46 = v42 + v45;
      v47 = v44 + v45;
      sub_21FA2D120(v44, v42, type metadata accessor for PBNode);
      sub_21FA2D120(v47, v46, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCategoryNodeInfo);
      sub_21FA2D23C(v46, v41, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCategoryNodeInfo);
      sub_21FA326EC(v42, type metadata accessor for PBNode);
      sub_21FA326EC(v44, (uint64_t (*)(_QWORD))sub_21FA96B80);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21FC01BFC(0, *(_QWORD *)(v43 + 16) + 1, 1);
        v43 = v86;
      }
      v49 = *(_QWORD *)(v43 + 16);
      v48 = *(_QWORD *)(v43 + 24);
      v50 = v76;
      v51 = v85;
      if (v49 >= v48 >> 1)
      {
        sub_21FC01BFC(v48 > 1, v49 + 1, 1);
        v43 = v86;
      }
      *(_QWORD *)(v43 + 16) = v49 + 1;
      v52 = v43
          + ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80))
          + *(_QWORD *)(v78 + 72) * v49;
      v41 = v80;
      sub_21FA2D23C(v80, v52, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCategoryNodeInfo);
      v39 += v81;
      v38 = v51 - 1;
      v25 = v43;
    }
    while (v38);
    v53 = v74;
    v13 = v65;
    v14 = v64;
    a3 = v63;
  }
  else
  {
    v50 = MEMORY[0x24BEE4AF8];
    v53 = v74;
  }
  v86 = v50;
  sub_21FAB4918(0);
  v54 = v67;
  sub_21FC5B22C();
  sub_21FA2CDB4();
  v55 = v66;
  v56 = v71;
  sub_21FC5B208();
  (*(void (**)(char *, uint64_t))(v69 + 8))(v54, v56);
  v57 = __swift_project_boxed_opaque_existential_1(v72, v72[3]);
  v58 = sub_21FAB5F04((uint64_t)v57, a3);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v55, v70);
  v86 = v58;
  *(_QWORD *)(swift_allocObject() + 16) = v25;
  sub_21FA84A5C(0, &qword_255540810, type metadata accessor for PBPushBlobsResponse, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA968A0(0);
  sub_21FAB4934();
  v59 = v73;
  sub_21FC5B2C8();
  swift_release();
  swift_release();
  sub_21FAB6CB0(&qword_2555409E8, &qword_2555409E0, sub_21FA968A0);
  v60 = sub_21FC5B280();
  result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v59, v13);
  *v53 = v60;
  return result;
}

void sub_21FAB2354(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  int isUniquelyReferenced_nonNull_native;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 16);
  if (!v4)
  {
    v6 = MEMORY[0x24BEE4AF8];
LABEL_25:
    if (qword_25406B7F8 != -1)
      goto LABEL_34;
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  v5 = 0;
  v6 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    v7 = *(_QWORD *)(v3 + 8 * v5 + 32);
    v8 = *(_QWORD *)(v7 + 16);
    v9 = *(_QWORD *)(v6 + 16);
    v10 = v9 + v8;
    if (__OFADD__(v9, v8))
      break;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v10 <= *(_QWORD *)(v6 + 24) >> 1)
    {
      if (*(_QWORD *)(v7 + 16))
        goto LABEL_14;
    }
    else
    {
      if (v9 <= v10)
        v12 = v9 + v8;
      else
        v12 = v9;
      v6 = sub_21FA7E250(isUniquelyReferenced_nonNull_native, v12, 1, v6);
      if (*(_QWORD *)(v7 + 16))
      {
LABEL_14:
        v13 = *(_QWORD *)(v6 + 16);
        v14 = (*(_QWORD *)(v6 + 24) >> 1) - v13;
        v15 = type metadata accessor for ClinicalSharingCategoryNodeInfo();
        if (v14 < v8)
          goto LABEL_32;
        v16 = *(_QWORD *)(v15 - 8);
        v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
        v18 = *(_QWORD *)(v16 + 72);
        v19 = v6 + v17 + v18 * v13;
        v20 = v7 + v17;
        v21 = v18 * v8;
        v22 = v19 + v21;
        v23 = v20 + v21;
        if (v20 < v22 && v19 < v23)
        {
          sub_21FC5BCB8();
          __break(1u);
          return;
        }
        swift_arrayInitWithCopy();
        if (v8)
        {
          v25 = *(_QWORD *)(v6 + 16);
          v26 = __OFADD__(v25, v8);
          v27 = v25 + v8;
          if (v26)
            goto LABEL_33;
          *(_QWORD *)(v6 + 16) = v27;
        }
        goto LABEL_4;
      }
    }
    if (v8)
      goto LABEL_31;
LABEL_4:
    ++v5;
    swift_bridgeObjectRelease();
    if (v4 == v5)
    {
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  swift_once();
LABEL_26:
  v28 = sub_21FC5AFD4();
  __swift_project_value_buffer(v28, (uint64_t)qword_25406D830);
  swift_bridgeObjectRetain();
  v29 = sub_21FC5AFC8();
  v30 = sub_21FC5B970();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v31 = 134217984;
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v29, v30, "Category nodes uploaded. Count: %ld", v31, 0xCu);
    MEMORY[0x2207D105C](v31, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  *a2 = v6;
}

uint64_t sub_21FAB2618@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t result;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  _QWORD *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t (*v93)(void);
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[2];
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _OWORD v137[5];
  uint64_t v138;
  __int128 v139;

  v111 = a3;
  v110 = a2;
  v124 = a4;
  sub_21FAB3348(0);
  v129 = v5;
  v128 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v134 = (uint64_t)v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FAB480C(0, &qword_2555408D8, sub_21FAB3364, (void (*)(void))sub_21FAB3380);
  v106 = v7;
  v105 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v104 = (char *)v103 - v8;
  sub_21FAB488C(0, &qword_2555408F0, sub_21FAB3364, (void (*)(void))sub_21FAB3380);
  v109 = v9;
  v108 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v107 = (char *)v103 - v10;
  sub_21FAB339C();
  v115 = v11;
  v113 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v112 = (char *)v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FAB3474();
  v117 = v13;
  v116 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v114 = (char *)v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FAB3598();
  v121 = v15;
  v120 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v118 = (char *)v103 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FAB3610();
  v123 = v17;
  v122 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v119 = (char *)v103 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA968D8();
  v132 = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v133 = (char *)v103 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v130 = (char *)v103 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v127 = (uint64_t)v103 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v125 = (char *)v103 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)v103 - v30;
  v32 = MEMORY[0x24BDAC7A8](v29);
  v34 = (char *)v103 - v33;
  v35 = MEMORY[0x24BDAC7A8](v32);
  v131 = (uint64_t)v103 - v36;
  MEMORY[0x24BDAC7A8](v35);
  v38 = (char *)v103 - v37;
  v39 = *a1;
  v40 = MEMORY[0x24BEE4AF8];
  v136 = v39;
  *(_QWORD *)&v137[0] = MEMORY[0x24BEE4AF8];
  v41 = *(_QWORD *)(v39 + 16);
  swift_bridgeObjectRetain();
  v126 = v20;
  v135 = v41;
  if (v41)
  {
    v42 = 0;
    result = v136;
    while (v42 < *(_QWORD *)(result + 16))
    {
      v44 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
      v45 = *(_QWORD *)(v20 + 72);
      sub_21FA2D120(result + v44 + v45 * v42, (uint64_t)v38, (uint64_t (*)(_QWORD))sub_21FA968D8);
      v46 = type metadata accessor for PBNode(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v38, 1, v46) == 1)
      {
        v47 = v31;
        sub_21FA2D23C((uint64_t)v38, v131, (uint64_t (*)(_QWORD))sub_21FA968D8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_21FC01C54(0, *(_QWORD *)(v40 + 16) + 1, 1);
        v40 = *(_QWORD *)&v137[0];
        v49 = *(_QWORD *)(*(_QWORD *)&v137[0] + 16);
        v48 = *(_QWORD *)(*(_QWORD *)&v137[0] + 24);
        if (v49 >= v48 >> 1)
        {
          sub_21FC01C54(v48 > 1, v49 + 1, 1);
          v40 = *(_QWORD *)&v137[0];
        }
        *(_QWORD *)(v40 + 16) = v49 + 1;
        sub_21FA2D23C(v131, v40 + v44 + v49 * v45, (uint64_t (*)(_QWORD))sub_21FA968D8);
        v20 = v126;
        v31 = v47;
      }
      else
      {
        sub_21FA326EC((uint64_t)v38, (uint64_t (*)(_QWORD))sub_21FA968D8);
      }
      ++v42;
      result = v136;
      if (v135 == v42)
      {
        v50 = *(_QWORD *)&v137[0];
        v40 = MEMORY[0x24BEE4AF8];
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_44;
  }
  v50 = v40;
LABEL_14:
  swift_bridgeObjectRelease();
  v51 = *(_QWORD *)(v50 + 16);
  if (v51)
  {
    *(_QWORD *)&v137[0] = v40;
    sub_21FC5BC04();
    v52 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
    v103[1] = v50;
    v53 = v50 + v52;
    v131 = *(_QWORD *)(v20 + 72);
    v54 = v132;
    do
    {
      sub_21FA2D120(v53, (uint64_t)v34, (uint64_t (*)(_QWORD))sub_21FA968D8);
      v55 = *(int *)(v54 + 48);
      sub_21FA2D120((uint64_t)v34, (uint64_t)v31, (uint64_t (*)(_QWORD))sub_21FAB3734);
      *(_QWORD *)&v31[v55] = *(_QWORD *)&v34[v55];
      swift_retain();
      sub_21FA326EC((uint64_t)v31, (uint64_t (*)(_QWORD))sub_21FAB3734);
      sub_21FA326EC((uint64_t)v34, (uint64_t (*)(_QWORD))sub_21FA968D8);
      sub_21FC5BBE0();
      sub_21FC5BC10();
      sub_21FC5BC1C();
      sub_21FC5BBEC();
      v53 += v131;
      --v51;
    }
    while (v51);
    v56 = *(_QWORD *)&v137[0];
    swift_release();
    v40 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    swift_release();
    v56 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)&v137[0] = v40;
  swift_bridgeObjectRetain();
  v57 = (uint64_t)v133;
  v58 = (uint64_t)v125;
  if (v135)
  {
    v59 = 0;
    v60 = v126;
    result = v136;
    while (v59 < *(_QWORD *)(result + 16))
    {
      v61 = (*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
      v62 = *(_QWORD *)(v60 + 72);
      sub_21FA2D120(result + v61 + v62 * v59, v58, (uint64_t (*)(_QWORD))sub_21FA968D8);
      v63 = type metadata accessor for PBNode(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 48))(v58, 1, v63) == 1)
      {
        sub_21FA326EC(v58, (uint64_t (*)(_QWORD))sub_21FA968D8);
      }
      else
      {
        sub_21FA2D23C(v58, v127, (uint64_t (*)(_QWORD))sub_21FA968D8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_21FC01C54(0, *(_QWORD *)(v40 + 16) + 1, 1);
        v40 = *(_QWORD *)&v137[0];
        v65 = *(_QWORD *)(*(_QWORD *)&v137[0] + 16);
        v64 = *(_QWORD *)(*(_QWORD *)&v137[0] + 24);
        if (v65 >= v64 >> 1)
        {
          sub_21FC01C54(v64 > 1, v65 + 1, 1);
          v40 = *(_QWORD *)&v137[0];
        }
        *(_QWORD *)(v40 + 16) = v65 + 1;
        sub_21FA2D23C(v127, v40 + v61 + v65 * v62, (uint64_t (*)(_QWORD))sub_21FA968D8);
        v57 = (uint64_t)v133;
        v58 = (uint64_t)v125;
      }
      ++v59;
      result = v136;
      if (v135 == v59)
      {
        v66 = *(_QWORD *)&v137[0];
        v40 = MEMORY[0x24BEE4AF8];
        goto LABEL_32;
      }
    }
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    return result;
  }
  v66 = v40;
  v60 = v126;
LABEL_32:
  swift_bridgeObjectRelease();
  v67 = *(_QWORD *)(v66 + 16);
  if (v67)
  {
    v135 = v56;
    *(_QWORD *)&v137[0] = v40;
    sub_21FC01C28(0, v67, 0);
    v68 = (*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
    v69 = v60;
    v131 = v66;
    v70 = v66 + v68;
    v136 = *(_QWORD *)(v69 + 72);
    v71 = v132;
    v72 = (uint64_t)v130;
    while (1)
    {
      sub_21FA2D120(v70, v72, (uint64_t (*)(_QWORD))sub_21FA968D8);
      v73 = *(int *)(v71 + 48);
      sub_21FA2D120(v72, v57, (uint64_t (*)(_QWORD))sub_21FAB3734);
      v74 = v71;
      v75 = *(_QWORD *)(v72 + v73);
      *(_QWORD *)(v57 + v73) = v75;
      v76 = type metadata accessor for PBNode(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 48))(v57, 1, v76);
      if ((_DWORD)result == 1)
        goto LABEL_45;
      v77 = *(int *)(v129 + 48);
      v78 = v57;
      v79 = v134;
      sub_21FA2D23C(v78, v134, type metadata accessor for PBNode);
      v80 = *(int *)(v74 + 48);
      sub_21FA2D120(v72, (uint64_t)v34, (uint64_t (*)(_QWORD))sub_21FAB3734);
      *(_QWORD *)&v34[v80] = v75;
      *(_QWORD *)(v79 + v77) = v75;
      swift_retain();
      sub_21FA326EC((uint64_t)v34, (uint64_t (*)(_QWORD))sub_21FAB3734);
      sub_21FA326EC(v72, (uint64_t (*)(_QWORD))sub_21FA968D8);
      v81 = *(_QWORD *)&v137[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21FC01C28(0, *(_QWORD *)(v81 + 16) + 1, 1);
        v81 = *(_QWORD *)&v137[0];
      }
      v83 = *(_QWORD *)(v81 + 16);
      v82 = *(_QWORD *)(v81 + 24);
      v71 = v132;
      if (v83 >= v82 >> 1)
      {
        sub_21FC01C28(v82 > 1, v83 + 1, 1);
        v71 = v132;
        v81 = *(_QWORD *)&v137[0];
      }
      *(_QWORD *)(v81 + 16) = v83 + 1;
      sub_21FA2D23C(v134, v81+ ((*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80))+ *(_QWORD *)(v128 + 72) * v83, (uint64_t (*)(_QWORD))sub_21FAB3348);
      v70 += v136;
      --v67;
      v57 = (uint64_t)v133;
      if (!v67)
      {
        swift_release();
        v56 = v135;
        goto LABEL_42;
      }
    }
  }
  swift_release();
  v81 = MEMORY[0x24BEE4AF8];
LABEL_42:
  *(_QWORD *)&v137[0] = v81;
  sub_21FAB3364(0);
  sub_21FAB3380();
  v84 = v104;
  sub_21FC5B748();
  swift_bridgeObjectRelease();
  sub_21FA2CDB4();
  v85 = v107;
  v86 = v106;
  sub_21FC5B118();
  (*(void (**)(char *, uint64_t))(v105 + 8))(v84, v86);
  v87 = v110;
  __swift_project_boxed_opaque_existential_1(v110, v110[3]);
  type metadata accessor for ClinicalSharingCloudStandardAPI();
  sub_21FAB3414();
  v88 = v112;
  v89 = v109;
  sub_21FC5B334();
  (*(void (**)(char *, uint64_t))(v108 + 8))(v85, v89);
  sub_21FA2CEA0((uint64_t)v87, (uint64_t)&v139);
  sub_21FA95DE0(v111, (uint64_t)v137);
  v90 = swift_allocObject();
  sub_21FA3175C(&v139, v90 + 16);
  v91 = v137[3];
  *(_OWORD *)(v90 + 88) = v137[2];
  *(_OWORD *)(v90 + 104) = v91;
  *(_OWORD *)(v90 + 120) = v137[4];
  *(_QWORD *)(v90 + 136) = v138;
  v92 = v137[1];
  *(_OWORD *)(v90 + 56) = v137[0];
  *(_OWORD *)(v90 + 72) = v92;
  sub_21FC5B184();
  sub_21FA94D54(0);
  v93 = MEMORY[0x24BDB9AE0];
  sub_21FA84A5C(0, &qword_25406B958, (uint64_t (*)(uint64_t))sub_21FA94D54, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA2A08C(&qword_255540910, (uint64_t (*)(uint64_t))sub_21FAB339C, MEMORY[0x24BDB95E0]);
  sub_21FAB3538();
  v94 = v114;
  v95 = v115;
  sub_21FC5B34C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v113 + 8))(v88, v95);
  v96 = MEMORY[0x24BDB98F0];
  sub_21FA2A08C(&qword_255540920, (uint64_t (*)(uint64_t))sub_21FAB3474, MEMORY[0x24BDB98F0]);
  v97 = v118;
  v98 = v117;
  sub_21FC5B328();
  (*(void (**)(char *, uint64_t))(v116 + 8))(v94, v98);
  *(_QWORD *)(swift_allocObject() + 16) = v56;
  sub_21FC5B184();
  type metadata accessor for ClinicalSharingSyncContext();
  sub_21FA84A5C(0, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v93);
  sub_21FA2A08C(&qword_255540930, (uint64_t (*)(uint64_t))sub_21FAB3598, MEMORY[0x24BDB98D8]);
  sub_21FAB36D4();
  v99 = v119;
  v100 = v121;
  sub_21FC5B34C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v120 + 8))(v97, v100);
  sub_21FA2A08C(&qword_255540938, (uint64_t (*)(uint64_t))sub_21FAB3610, v96);
  v101 = v123;
  v102 = sub_21FC5B280();
  result = (*(uint64_t (**)(char *, uint64_t))(v122 + 8))(v99, v101);
  *v124 = v102;
  return result;
}

void sub_21FAB3348(uint64_t a1)
{
  sub_21FA96B9C(a1, &qword_2555408D0, (void (*)(uint64_t))type metadata accessor for PBNode, (void (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
}

void sub_21FAB3364(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_2555408E0, (uint64_t (*)(uint64_t))sub_21FAB3348, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

uint64_t sub_21FAB3380()
{
  return sub_21FA2A08C(&qword_2555408E8, (uint64_t (*)(uint64_t))sub_21FAB3364, MEMORY[0x24BEE12C8]);
}

void sub_21FAB339C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2555408F8)
  {
    sub_21FAB488C(255, &qword_2555408F0, sub_21FAB3364, (void (*)(void))sub_21FAB3380);
    sub_21FAB3414();
    v0 = sub_21FC5B040();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2555408F8);
  }
}

unint64_t sub_21FAB3414()
{
  unint64_t result;
  uint64_t v1;

  result = qword_255540900;
  if (!qword_255540900)
  {
    sub_21FAB488C(255, &qword_2555408F0, sub_21FAB3364, (void (*)(void))sub_21FAB3380);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9970], v1);
    atomic_store(result, (unint64_t *)&qword_255540900);
  }
  return result;
}

void sub_21FAB3474()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255540908)
  {
    sub_21FA84A5C(255, &qword_25406B958, (uint64_t (*)(uint64_t))sub_21FA94D54, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FAB339C();
    sub_21FAB3538();
    sub_21FA2A08C(&qword_255540910, (uint64_t (*)(uint64_t))sub_21FAB339C, MEMORY[0x24BDB95E0]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255540908);
  }
}

unint64_t sub_21FAB3538()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25406B950;
  if (!qword_25406B950)
  {
    sub_21FA84A5C(255, &qword_25406B958, (uint64_t (*)(uint64_t))sub_21FA94D54, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9AF8], v1);
    atomic_store(result, (unint64_t *)&qword_25406B950);
  }
  return result;
}

void sub_21FAB3598()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255540918)
  {
    sub_21FAB3474();
    sub_21FA2A08C(&qword_255540920, (uint64_t (*)(uint64_t))sub_21FAB3474, MEMORY[0x24BDB98F0]);
    v0 = sub_21FC5B0F4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255540918);
  }
}

void sub_21FAB3610()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255540928)
  {
    sub_21FA84A5C(255, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FAB3598();
    sub_21FAB36D4();
    sub_21FA2A08C(&qword_255540930, (uint64_t (*)(uint64_t))sub_21FAB3598, MEMORY[0x24BDB98D8]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255540928);
  }
}

unint64_t sub_21FAB36D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25406B910;
  if (!qword_25406B910)
  {
    sub_21FA84A5C(255, &qword_25406B918, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9AF8], v1);
    atomic_store(result, (unint64_t *)&qword_25406B910);
  }
  return result;
}

void sub_21FAB3734(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_255540308, type metadata accessor for PBNode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t sub_21FAB3750@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t (*v45)(void);
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v60 = a2;
  sub_21FA2D1A0(0, &qword_255540940, (uint64_t (*)(uint64_t))sub_21FAB4918, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDB9DE0]);
  v59 = v7;
  v57 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v55 = (char *)&v51 - v8;
  sub_21FA84A5C(0, &qword_255540950, (uint64_t (*)(uint64_t))sub_21FAB4918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
  v58 = v9;
  v56 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v54 = (char *)&v51 - v10;
  sub_21FAB6B44(0, &qword_255540958, sub_21FA94D54);
  v65 = v11;
  v63 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v61 = (char *)&v51 - v12;
  sub_21FAB4994();
  v14 = v13;
  v64 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v62 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FAB3348(0);
  v53 = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v51 - v21;
  v23 = type metadata accessor for PBNode(0);
  v68 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v69 = (uint64_t)&v51 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *a1;
  v26 = *(_QWORD *)(*a1 + 16);
  v27 = MEMORY[0x24BEE4AF8];
  v66 = a4;
  if (v26)
  {
    v51 = a3;
    v52 = v14;
    v71 = MEMORY[0x24BEE4AF8];
    sub_21FC01BD0(0, v26, 0);
    v28 = v25 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
    v29 = *(_QWORD *)(v17 + 72);
    v30 = v71;
    v31 = v28;
    v32 = v26;
    v70 = v29;
    v33 = v69;
    v67 = v20;
    do
    {
      sub_21FA2D120(v31, (uint64_t)v22, (uint64_t (*)(_QWORD))sub_21FAB3348);
      sub_21FA2D120((uint64_t)v22, (uint64_t)v20, type metadata accessor for PBNode);
      sub_21FA2D23C((uint64_t)v20, v33, type metadata accessor for PBNode);
      sub_21FA326EC((uint64_t)v22, (uint64_t (*)(_QWORD))sub_21FAB3348);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v34 = v70;
      }
      else
      {
        sub_21FC01BD0(0, *(_QWORD *)(v30 + 16) + 1, 1);
        v34 = v70;
        v30 = v71;
      }
      v36 = *(_QWORD *)(v30 + 16);
      v35 = *(_QWORD *)(v30 + 24);
      if (v36 >= v35 >> 1)
      {
        sub_21FC01BD0(v35 > 1, v36 + 1, 1);
        v34 = v70;
        v30 = v71;
      }
      *(_QWORD *)(v30 + 16) = v36 + 1;
      v37 = v30
          + ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80))
          + *(_QWORD *)(v68 + 72) * v36;
      v33 = v69;
      sub_21FA2D23C(v69, v37, type metadata accessor for PBNode);
      v31 += v34;
      --v32;
      v20 = v67;
    }
    while (v32);
    v71 = MEMORY[0x24BEE4AF8];
    sub_21FC5BC04();
    v38 = v53;
    do
    {
      sub_21FA2D120(v28, (uint64_t)v22, (uint64_t (*)(_QWORD))sub_21FAB3348);
      v39 = *(int *)(v38 + 48);
      sub_21FA2D120((uint64_t)v22, (uint64_t)v20, type metadata accessor for PBNode);
      *(_QWORD *)&v20[v39] = *(_QWORD *)&v22[v39];
      swift_retain();
      sub_21FA326EC((uint64_t)v20, type metadata accessor for PBNode);
      sub_21FA326EC((uint64_t)v22, (uint64_t (*)(_QWORD))sub_21FAB3348);
      sub_21FC5BBE0();
      sub_21FC5BC10();
      sub_21FC5BC1C();
      sub_21FC5BBEC();
      v28 += v70;
      --v26;
    }
    while (v26);
    v27 = v71;
    a3 = v51;
    v14 = v52;
  }
  else
  {
    v30 = MEMORY[0x24BEE4AF8];
  }
  v71 = v30;
  sub_21FAB4918(0);
  v40 = v55;
  sub_21FC5B22C();
  sub_21FA2CDB4();
  v41 = v54;
  v42 = v59;
  sub_21FC5B208();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v40, v42);
  v43 = __swift_project_boxed_opaque_existential_1(v60, v60[3]);
  v44 = sub_21FAB5F04((uint64_t)v43, a3);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v41, v58);
  v71 = v44;
  *(_QWORD *)(swift_allocObject() + 16) = v27;
  v45 = MEMORY[0x24BDB9AE0];
  sub_21FA84A5C(0, &qword_255540810, type metadata accessor for PBPushBlobsResponse, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA94D54(0);
  sub_21FAB4934();
  swift_bridgeObjectRetain();
  v46 = v61;
  sub_21FC5B2C8();
  swift_release();
  swift_release();
  *(_QWORD *)(swift_allocObject() + 16) = v27;
  sub_21FA84A5C(0, &qword_25406B958, (uint64_t (*)(uint64_t))sub_21FA94D54, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v45);
  sub_21FAB6CB0(&qword_255540968, &qword_255540958, sub_21FA94D54);
  sub_21FAB3538();
  v47 = v62;
  v48 = v65;
  sub_21FC5B2E0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v46, v48);
  sub_21FA2A08C(&qword_255540970, (uint64_t (*)(uint64_t))sub_21FAB4994, MEMORY[0x24BDB9740]);
  v49 = sub_21FC5B280();
  result = (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v47, v14);
  *v66 = v49;
  return result;
}

uint64_t sub_21FAB3DA0@<X0>(void **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t result;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;

  v38 = a3;
  sub_21FA2D1A0(0, &qword_25406CAA8, (uint64_t (*)(uint64_t))sub_21FA94D54, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDB9DE0]);
  v36 = *(_QWORD *)(v5 - 8);
  v37 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v33 = (char *)&v32 - v6;
  sub_21FA84A5C(0, &qword_25406CBB8, (uint64_t (*)(uint64_t))sub_21FA94D54, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
  v34 = *(_QWORD *)(v7 - 8);
  v35 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v32 = (char *)&v32 - v8;
  v9 = *a1;
  if (!(a2 >> 62))
  {
    v10 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v10)
      goto LABEL_3;
LABEL_15:
    swift_bridgeObjectRelease();
    v44 = a2;
    sub_21FA94D54(0);
    swift_bridgeObjectRetain();
    v27 = v33;
    sub_21FC5B22C();
    sub_21FA2CDB4();
    v28 = v32;
    v29 = v37;
    sub_21FC5B208();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v27, v29);
    sub_21FAB6414();
    v30 = v35;
    v31 = sub_21FC5B280();
    result = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v28, v30);
    *v38 = v31;
    return result;
  }
  swift_bridgeObjectRetain();
  result = sub_21FC5BC7C();
  v10 = result;
  if (!result)
    goto LABEL_15;
LABEL_3:
  if (v10 >= 1)
  {
    v13 = 0;
    v14 = a2 & 0xC000000000000001;
    *(_QWORD *)&v12 = 136315138;
    v40 = v12;
    v39 = MEMORY[0x24BEE4AD8] + 8;
    v42 = a2 & 0xC000000000000001;
    v43 = a2;
    v41 = v10;
    do
    {
      if (v14)
      {
        v17 = MEMORY[0x2207D057C](v13, a2);
      }
      else
      {
        v17 = *(_QWORD *)(a2 + 8 * v13 + 32);
        swift_retain();
      }
      if (qword_25406B7F8 != -1)
        swift_once();
      v18 = sub_21FC5AFD4();
      __swift_project_value_buffer(v18, (uint64_t)qword_25406D830);
      swift_retain_n();
      v19 = sub_21FC5AFC8();
      v20 = sub_21FC5B970();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = swift_slowAlloc();
        v22 = swift_slowAlloc();
        v44 = v22;
        *(_DWORD *)v21 = v40;
        sub_21FC5AAF4();
        sub_21FA2A08C((unint64_t *)&qword_25553F0F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
        v23 = sub_21FC5BDCC();
        *(_QWORD *)(v21 + 4) = sub_21FABDCF8(v23, v24, (uint64_t *)&v44);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_21FA27000, v19, v20, "Updating error info. Account: %s", (uint8_t *)v21, 0xCu);
        swift_arrayDestroy();
        v25 = v22;
        v10 = v41;
        v14 = v42;
        MEMORY[0x2207D105C](v25, -1, -1);
        v26 = v21;
        a2 = v43;
        MEMORY[0x2207D105C](v26, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      ++v13;
      v15 = *(void **)(v17 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_error);
      *(_QWORD *)(v17 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_error) = v9;
      v16 = v9;

      swift_release();
    }
    while (v10 != v13);
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t sub_21FAB419C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  sub_21FAB480C(0, (unint64_t *)&qword_25406AA48, sub_21FA94D54, (void (*)(void))sub_21FA959C8);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v22 - v7;
  sub_21FAB488C(0, (unint64_t *)&qword_25406B8B0, sub_21FA94D54, (void (*)(void))sub_21FA959C8);
  v10 = v9;
  v24 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v22 - v11;
  v13 = *a1;
  v14 = MEMORY[0x24BEE4AF8];
  v25 = MEMORY[0x24BEE4AF8];
  v15 = *(_QWORD *)(v13 + 16);
  if (v15)
  {
    v23 = v6;
    v16 = a2;
    swift_bridgeObjectRetain();
    for (i = 0; i != v15; ++i)
    {
      v18 = swift_bridgeObjectRetain();
      sub_21FBDFD40(v18);
    }
    swift_bridgeObjectRelease();
    v14 = v25;
    a2 = v16;
    v6 = v23;
  }
  v25 = v14;
  v19 = swift_bridgeObjectRetain();
  sub_21FBDFD40(v19);
  sub_21FA94D54(0);
  sub_21FA959C8();
  sub_21FC5B748();
  swift_bridgeObjectRelease();
  sub_21FA2CDB4();
  sub_21FC5B118();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_21FA95AC4();
  v20 = sub_21FC5B280();
  result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v12, v10);
  *a2 = v20;
  return result;
}

uint64_t sub_21FAB4388@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v3 = type metadata accessor for PBBlobs(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = swift_bridgeObjectRetain();
  result = sub_21FC0D66C(v6, v5);
  if (!v1)
  {
    sub_21FA2A08C(&qword_2555409D8, type metadata accessor for PBBlobs, (uint64_t)&protocol conformance descriptor for PBBlobs);
    v8 = sub_21FC5AE90();
    v10 = v9;
    sub_21FAB6750();
    v12 = (uint64_t *)(a1 + *(int *)(v11 + 48));
    result = sub_21FA2D23C((uint64_t)v5, a1, type metadata accessor for PBBlobs);
    *v12 = v8;
    v12[1] = v10;
  }
  return result;
}

uint64_t sub_21FAB4494@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22[2];
  _QWORD v23[5];

  v20 = a1;
  v21 = a5;
  v8 = type metadata accessor for PBBlobs(0);
  v19 = *(_QWORD *)(v8 - 8);
  v9 = *(_QWORD *)(v19 + 64);
  MEMORY[0x24BDAC7A8](v8);
  sub_21FA2CEA0(a4 + 48, (uint64_t)v23);
  v10 = *(_QWORD *)(a4 + 32);
  sub_21FA2CEA0((uint64_t)v23, (uint64_t)v22);
  v11 = (_QWORD *)swift_allocObject();
  sub_21FA3175C(v22, (uint64_t)(v11 + 2));
  v11[7] = a2;
  v11[8] = a3;
  v11[9] = 3;
  v11[10] = v10;
  v12 = MEMORY[0x24BDB9E38];
  sub_21FAB6A04(0, &qword_255540450, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
  swift_allocObject();
  swift_bridgeObjectRetain();
  sub_21FA32314(a2, a3);
  *(_QWORD *)&v22[0] = sub_21FC5B25C();
  sub_21FAB6680(&qword_255540458, &qword_255540450, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))v12, MEMORY[0x24BDB9E58]);
  v13 = sub_21FC5B280();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  v23[0] = v13;
  sub_21FA2D120(v20, (uint64_t)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PBBlobs);
  v14 = (*(unsigned __int8 *)(v19 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v15 = swift_allocObject();
  sub_21FA2D23C((uint64_t)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, type metadata accessor for PBBlobs);
  v16 = MEMORY[0x24BDB9AE0];
  sub_21FAB6A04(0, &qword_255540440, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  type metadata accessor for PBPushBlobsRequest(0);
  sub_21FAB6680(&qword_255540448, &qword_255540440, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))v16, MEMORY[0x24BDB9AF8]);
  sub_21FC5B2C8();
  swift_release();
  return swift_release();
}

uint64_t sub_21FAB46DC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v14;

  v6 = type metadata accessor for PBBlobs(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  v10 = a1[1];
  v11 = a1[2];
  sub_21FA2D120(a2, (uint64_t)v8, v12);
  swift_bridgeObjectRetain();
  sub_21FA32314(v10, v11);
  return sub_21FC2E9D0((uint64_t)v8, v9, v10, v11, a3);
}

uint64_t sub_21FAB4790()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 104);
  return swift_deallocObject();
}

uint64_t sub_21FAB47D4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FAB3750(a1, (_QWORD *)(v2 + 16), v2 + 56, a2);
}

uint64_t sub_21FAB47E0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21FAB4804@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_21FAB419C(a1, a2);
}

void sub_21FAB480C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4();
    v6 = sub_21FC5B130();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_21FAB488C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    sub_21FA2CDB4();
    a4();
    v6 = sub_21FC5B130();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_21FAB4918(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_255540948, type metadata accessor for PBNode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

unint64_t sub_21FAB4934()
{
  unint64_t result;
  uint64_t v1;

  result = qword_255540820;
  if (!qword_255540820)
  {
    sub_21FA84A5C(255, &qword_255540810, type metadata accessor for PBPushBlobsResponse, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9AF8], v1);
    atomic_store(result, (unint64_t *)&qword_255540820);
  }
  return result;
}

void sub_21FAB4994()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255540960)
  {
    sub_21FAB6B44(255, &qword_255540958, sub_21FA94D54);
    sub_21FA84A5C(255, &qword_25406B958, (uint64_t (*)(uint64_t))sub_21FA94D54, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FAB6CB0(&qword_255540968, &qword_255540958, sub_21FA94D54);
    sub_21FAB3538();
    v0 = sub_21FC5B0A0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255540960);
  }
}

uint64_t sub_21FAB4A60(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(sub_21FC5AAF4() - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)sub_21FBF27B4(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_21FAB4AE0(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_21FAB4AE0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  char *v77;
  void (*v78)(char *, uint64_t, uint64_t);
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  char v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;

  v2 = v1;
  v4 = sub_21FC5AAF4();
  v159 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v146 = (char *)&v138 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v153 = (char *)&v138 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v155 = (char *)&v138 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v154 = (char *)&v138 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v142 = (char *)&v138 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v149 = (char *)&v138 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v144 = (char *)&v138 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v143 = (char *)&v138 - v19;
  v158 = a1;
  v20 = a1[1];
  result = sub_21FC5BDC0();
  if (result >= v20)
  {
    if (v20 < 0)
      goto LABEL_150;
    if (v20)
      return sub_21FAB566C(0, v20, 1, v158);
    return result;
  }
  if (v20 >= 0)
    v22 = v20;
  else
    v22 = v20 + 1;
  if (v20 < -1)
    goto LABEL_158;
  v139 = result;
  if (v20 < 2)
  {
    v27 = (char *)MEMORY[0x24BEE4AF8];
    v26 = MEMORY[0x24BEE4AF8]
        + ((*(unsigned __int8 *)(v159 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80));
    v138 = MEMORY[0x24BEE4AF8];
    if (v20 != 1)
    {
      v29 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_116:
      if (v29 >= 2)
      {
        v131 = *v158;
        do
        {
          v132 = v29 - 2;
          if (v29 < 2)
            goto LABEL_145;
          if (!v131)
            goto LABEL_157;
          v133 = *(_QWORD *)&v27[16 * v132 + 32];
          v134 = *(_QWORD *)&v27[16 * v29 + 24];
          v135 = v26;
          sub_21FAB5930(v131 + *(_QWORD *)(v159 + 72) * v133, v131 + *(_QWORD *)(v159 + 72) * *(_QWORD *)&v27[16 * v29 + 16], v131 + *(_QWORD *)(v159 + 72) * v134, v26);
          if (v2)
            break;
          if (v134 < v133)
            goto LABEL_146;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v27 = sub_21FBF2764((uint64_t)v27);
          if (v132 >= *((_QWORD *)v27 + 2))
            goto LABEL_147;
          v136 = &v27[16 * v132 + 32];
          *(_QWORD *)v136 = v133;
          *((_QWORD *)v136 + 1) = v134;
          v137 = *((_QWORD *)v27 + 2);
          if (v29 > v137)
            goto LABEL_148;
          memmove(&v27[16 * v29 + 16], &v27[16 * v29 + 32], 16 * (v137 - v29));
          *((_QWORD *)v27 + 2) = v137 - 1;
          v29 = v137 - 1;
          v26 = v135;
        }
        while (v137 > 2);
      }
LABEL_127:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v138 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v23 = v22 >> 1;
    v24 = sub_21FC5B7D8();
    *(_QWORD *)(v24 + 16) = v23;
    v25 = *(unsigned __int8 *)(v159 + 80);
    v138 = v24;
    v26 = v24 + ((v25 + 32) & ~v25);
  }
  v28 = 0;
  v27 = (char *)MEMORY[0x24BEE4AF8];
  v148 = v26;
  v152 = v4;
  while (1)
  {
    v30 = v28;
    v31 = v28 + 1;
    if (v28 + 1 >= v20)
    {
      v39 = v28 + 1;
      goto LABEL_67;
    }
    v156 = v20;
    v32 = *v158;
    v33 = *(_QWORD *)(v159 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v159 + 16);
    v34(v143, *v158 + v33 * v31, v4);
    v147 = v30;
    v145 = v32;
    v157 = v33;
    v34(v144, v32 + v33 * v30, v4);
    v35 = sub_21FC5AAB8();
    v37 = v36;
    if (sub_21FC5AAB8() == v35 && v38 == v37)
      LODWORD(v151) = 0;
    else
      LODWORD(v151) = sub_21FC5BDF0();
    v40 = v142;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v41 = *(void (**)(char *, uint64_t))(v159 + 8);
    v42 = v152;
    v41(v144, v152);
    v41(v143, v42);
    v39 = v147 + 2;
    if (v147 + 2 < v156)
    {
      v140 = v27;
      v141 = v2;
      v150 = v157 * v31;
      v43 = v145;
      v44 = v157 * v39;
      while (1)
      {
        v45 = v152;
        v34(v149, v43 + v44, v152);
        v34(v40, v43 + v150, v45);
        v46 = sub_21FC5AAB8();
        v48 = v47;
        if (sub_21FC5AAB8() == v46 && v49 == v48)
          v50 = 0;
        else
          v50 = sub_21FC5BDF0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v51 = v152;
        v41(v40, v152);
        v41(v149, v51);
        if (((v151 ^ v50) & 1) != 0)
          break;
        ++v39;
        v43 += v157;
        if (v156 == v39)
        {
          v52 = v156;
          v39 = v156;
          v27 = v140;
          v2 = v141;
          goto LABEL_32;
        }
      }
      v27 = v140;
      v2 = v141;
    }
    v52 = v156;
LABEL_32:
    v30 = v147;
    v53 = v145;
    if ((v151 & 1) == 0)
      break;
    if (v39 < v147)
      goto LABEL_151;
    if (v147 >= v39)
      break;
    v140 = v27;
    v141 = v2;
    v54 = 0;
    v55 = v157 * (v39 - 1);
    v56 = v39 * v157;
    v57 = v147;
    v58 = v147 * v157;
    do
    {
      if (v57 != v39 + v54 - 1)
      {
        if (!v53)
          goto LABEL_156;
        v60 = v39;
        v61 = v53 + v55;
        v151 = *(_QWORD *)(v159 + 32);
        ((void (*)(char *, uint64_t, uint64_t))v151)(v146, v53 + v58, v152);
        if (v58 < v55 || v53 + v58 >= (unint64_t)(v53 + v56))
        {
          v59 = v152;
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v59 = v152;
          if (v58 != v55)
            swift_arrayInitWithTakeBackToFront();
        }
        ((void (*)(uint64_t, char *, uint64_t))v151)(v61, v146, v59);
        v39 = v60;
        v53 = v145;
      }
      ++v57;
      --v54;
      v55 -= v157;
      v56 -= v157;
      v58 += v157;
    }
    while (v57 < v39 + v54);
    v27 = v140;
    v2 = v141;
    v62 = v152;
    v30 = v147;
    v52 = v156;
    if (v39 < v156)
      goto LABEL_48;
LABEL_67:
    if (v39 < v30)
      goto LABEL_144;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v27 = sub_21FBF2344(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
    v80 = *((_QWORD *)v27 + 2);
    v79 = *((_QWORD *)v27 + 3);
    v29 = v80 + 1;
    v26 = v148;
    v157 = v39;
    if (v80 >= v79 >> 1)
    {
      v130 = sub_21FBF2344((char *)(v79 > 1), v80 + 1, 1, v27);
      v26 = v148;
      v27 = v130;
    }
    *((_QWORD *)v27 + 2) = v29;
    v81 = v27 + 32;
    v82 = &v27[16 * v80 + 32];
    v83 = v157;
    *(_QWORD *)v82 = v30;
    *((_QWORD *)v82 + 1) = v83;
    if (v80)
    {
      while (1)
      {
        v84 = v29 - 1;
        if (v29 >= 4)
        {
          v89 = &v81[16 * v29];
          v90 = *((_QWORD *)v89 - 8);
          v91 = *((_QWORD *)v89 - 7);
          v95 = __OFSUB__(v91, v90);
          v92 = v91 - v90;
          if (v95)
            goto LABEL_133;
          v94 = *((_QWORD *)v89 - 6);
          v93 = *((_QWORD *)v89 - 5);
          v95 = __OFSUB__(v93, v94);
          v87 = v93 - v94;
          v88 = v95;
          if (v95)
            goto LABEL_134;
          v96 = v29 - 2;
          v97 = &v81[16 * v29 - 32];
          v99 = *(_QWORD *)v97;
          v98 = *((_QWORD *)v97 + 1);
          v95 = __OFSUB__(v98, v99);
          v100 = v98 - v99;
          if (v95)
            goto LABEL_136;
          v95 = __OFADD__(v87, v100);
          v101 = v87 + v100;
          if (v95)
            goto LABEL_139;
          if (v101 >= v92)
          {
            v119 = &v81[16 * v84];
            v121 = *(_QWORD *)v119;
            v120 = *((_QWORD *)v119 + 1);
            v95 = __OFSUB__(v120, v121);
            v122 = v120 - v121;
            if (v95)
              goto LABEL_143;
            v112 = v87 < v122;
            goto LABEL_104;
          }
        }
        else
        {
          if (v29 != 3)
          {
            v113 = *((_QWORD *)v27 + 4);
            v114 = *((_QWORD *)v27 + 5);
            v95 = __OFSUB__(v114, v113);
            v106 = v114 - v113;
            v107 = v95;
            goto LABEL_98;
          }
          v86 = *((_QWORD *)v27 + 4);
          v85 = *((_QWORD *)v27 + 5);
          v95 = __OFSUB__(v85, v86);
          v87 = v85 - v86;
          v88 = v95;
        }
        if ((v88 & 1) != 0)
          goto LABEL_135;
        v96 = v29 - 2;
        v102 = &v81[16 * v29 - 32];
        v104 = *(_QWORD *)v102;
        v103 = *((_QWORD *)v102 + 1);
        v105 = __OFSUB__(v103, v104);
        v106 = v103 - v104;
        v107 = v105;
        if (v105)
          goto LABEL_138;
        v108 = &v81[16 * v84];
        v110 = *(_QWORD *)v108;
        v109 = *((_QWORD *)v108 + 1);
        v95 = __OFSUB__(v109, v110);
        v111 = v109 - v110;
        if (v95)
          goto LABEL_141;
        if (__OFADD__(v106, v111))
          goto LABEL_142;
        if (v106 + v111 >= v87)
        {
          v112 = v87 < v111;
LABEL_104:
          if (v112)
            v84 = v96;
          goto LABEL_106;
        }
LABEL_98:
        if ((v107 & 1) != 0)
          goto LABEL_137;
        v115 = &v81[16 * v84];
        v117 = *(_QWORD *)v115;
        v116 = *((_QWORD *)v115 + 1);
        v95 = __OFSUB__(v116, v117);
        v118 = v116 - v117;
        if (v95)
          goto LABEL_140;
        if (v118 < v106)
          goto LABEL_14;
LABEL_106:
        v123 = v84 - 1;
        if (v84 - 1 >= v29)
        {
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
          goto LABEL_153;
        }
        if (!*v158)
          goto LABEL_155;
        v124 = v27;
        v125 = &v81[16 * v123];
        v126 = *(_QWORD *)v125;
        v127 = &v81[16 * v84];
        v128 = *((_QWORD *)v127 + 1);
        sub_21FAB5930(*v158 + *(_QWORD *)(v159 + 72) * *(_QWORD *)v125, *v158 + *(_QWORD *)(v159 + 72) * *(_QWORD *)v127, *v158 + *(_QWORD *)(v159 + 72) * v128, v26);
        if (v2)
          goto LABEL_127;
        if (v128 < v126)
          goto LABEL_130;
        if (v84 > *((_QWORD *)v124 + 2))
          goto LABEL_131;
        *(_QWORD *)v125 = v126;
        *(_QWORD *)&v81[16 * v123 + 8] = v128;
        v129 = *((_QWORD *)v124 + 2);
        if (v84 >= v129)
          goto LABEL_132;
        v27 = v124;
        v29 = v129 - 1;
        memmove(&v81[16 * v84], v127 + 16, 16 * (v129 - 1 - v84));
        *((_QWORD *)v124 + 2) = v129 - 1;
        v26 = v148;
        if (v129 <= 2)
          goto LABEL_14;
      }
    }
    v29 = 1;
LABEL_14:
    v20 = v158[1];
    v28 = v157;
    v4 = v152;
    if (v157 >= v20)
      goto LABEL_116;
  }
  v62 = v152;
  if (v39 >= v52)
    goto LABEL_67;
LABEL_48:
  if (__OFSUB__(v39, v30))
    goto LABEL_149;
  if (v39 - v30 >= v139)
    goto LABEL_67;
  if (__OFADD__(v30, v139))
    goto LABEL_152;
  if (v30 + v139 >= v52)
    v63 = v52;
  else
    v63 = v30 + v139;
  if (v63 >= v30)
  {
    if (v39 != v63)
    {
      v147 = v30;
      v140 = v27;
      v141 = v2;
      v64 = *(_QWORD *)(v159 + 72);
      v150 = *(_QWORD *)(v159 + 16);
      v151 = v64;
      v156 = v39 * v64;
      v157 = v64 * (v39 - 1);
      v145 = v63;
      do
      {
        v66 = 0;
        v67 = v147;
        while (1)
        {
          v68 = *v158;
          v69 = (void (*)(char *, uint64_t, uint64_t))v150;
          ((void (*)(char *, uint64_t, uint64_t))v150)(v154, v156 + v66 + *v158, v62);
          v69(v155, v157 + v66 + v68, v62);
          v70 = sub_21FC5AAB8();
          v72 = v71;
          if (sub_21FC5AAB8() == v70 && v73 == v72)
            break;
          v74 = sub_21FC5BDF0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v75 = *(void (**)(char *, uint64_t))(v159 + 8);
          v62 = v152;
          v75(v155, v152);
          v75(v154, v62);
          if ((v74 & 1) == 0)
            goto LABEL_58;
          v76 = *v158;
          if (!*v158)
            goto LABEL_154;
          v77 = (char *)(v76 + v157 + v66);
          v78 = *(void (**)(char *, uint64_t, uint64_t))(v159 + 32);
          v78(v153, v76 + v156 + v66, v62);
          swift_arrayInitWithTakeFrontToBack();
          v78(v77, (uint64_t)v153, v62);
          v66 -= v151;
          if (v39 == ++v67)
            goto LABEL_58;
        }
        swift_bridgeObjectRelease_n();
        v65 = *(void (**)(char *, uint64_t))(v159 + 8);
        v62 = v152;
        v65(v155, v152);
        v65(v154, v62);
LABEL_58:
        ++v39;
        v157 += v151;
        v156 += v151;
      }
      while (v39 != v145);
      v39 = v145;
      v27 = v140;
      v2 = v141;
      v30 = v147;
    }
    goto LABEL_67;
  }
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  result = sub_21FC5BC64();
  __break(1u);
  return result;
}

uint64_t sub_21FAB566C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  _QWORD *v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v37 = a4;
  v31 = a1;
  v6 = sub_21FC5AAF4();
  v38 = *(_QWORD **)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v36 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v40 = (char *)&v29 - v10;
  result = MEMORY[0x24BDAC7A8](v9);
  v39 = (char *)&v29 - v12;
  v35 = a3;
  v30 = a2;
  if (a3 != a2)
  {
    v13 = v38[9];
    v32 = (void (*)(char *, uint64_t, uint64_t))v38[2];
    v33 = v13;
    v14 = v13 * (v35 - 1);
    v41 = v13 * v35;
LABEL_6:
    v16 = 0;
    v17 = v31;
    v34 = v14;
    while (1)
    {
      v18 = *v37;
      v19 = v32;
      v32(v39, v41 + v16 + *v37, v6);
      v19(v40, v14 + v16 + v18, v6);
      v20 = sub_21FC5AAB8();
      v22 = v21;
      if (sub_21FC5AAB8() == v20 && v23 == v22)
      {
        swift_bridgeObjectRelease_n();
        v15 = (void (*)(char *, uint64_t))v38[1];
        v15(v40, v6);
        result = ((uint64_t (*)(char *, uint64_t))v15)(v39, v6);
        v14 = v34;
LABEL_5:
        v14 += v33;
        v41 += v33;
        if (++v35 == v30)
          return result;
        goto LABEL_6;
      }
      v24 = sub_21FC5BDF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v25 = (void (*)(char *, uint64_t))v38[1];
      v25(v40, v6);
      result = ((uint64_t (*)(char *, uint64_t))v25)(v39, v6);
      v14 = v34;
      if ((v24 & 1) == 0)
        goto LABEL_5;
      v26 = *v37;
      if (!*v37)
        break;
      v27 = v26 + v34 + v16;
      v28 = (void (*)(char *, uint64_t, uint64_t))v38[4];
      v28(v36, v26 + v41 + v16, v6);
      swift_arrayInitWithTakeFrontToBack();
      result = ((uint64_t (*)(uint64_t, char *, uint64_t))v28)(v27, v36, v6);
      v16 -= v33;
      if (v35 == ++v17)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_21FAB5930(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  char v32;
  void (*v33)(char *, uint64_t);
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  unint64_t v40;
  void (*v41)(char *, unint64_t, uint64_t);
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  void (*v48)(char *, uint64_t);
  BOOL v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t result;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;

  v8 = sub_21FC5AAF4();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v58 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v57 = (char *)&v54 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v54 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v54 - v16;
  v19 = *(_QWORD *)(v18 + 72);
  v59 = v18;
  v60 = v19;
  if (!v19)
  {
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  if (a2 - a1 == 0x8000000000000000 && v60 == -1)
    goto LABEL_69;
  v20 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v60 == -1)
    goto LABEL_70;
  v21 = (uint64_t)(a2 - a1) / v60;
  v63 = a1;
  v62 = a4;
  v22 = v20 / v60;
  if (v21 >= v20 / v60)
  {
    if ((v22 & 0x8000000000000000) == 0)
    {
      v24 = v22 * v60;
      if (a4 < a2 || a2 + v24 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v37 = a4 + v24;
      v61 = a4 + v24;
      v63 = a2;
      if (v24 >= 1 && a1 < a2)
      {
        v39 = -v60;
        v60 = *(_QWORD *)(v59 + 16);
        v55 = a4;
        v56 = a1;
        do
        {
          v40 = a3;
          v41 = (void (*)(char *, unint64_t, uint64_t))v60;
          ((void (*)(char *, unint64_t, uint64_t))v60)(v57, v37 + v39, v8);
          v42 = a2 + v39;
          v41(v58, a2 + v39, v8);
          v43 = sub_21FC5AAB8();
          v45 = v44;
          if (sub_21FC5AAB8() == v43 && v46 == v45)
            v47 = 0;
          else
            v47 = sub_21FC5BDF0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a3 += v39;
          v48 = *(void (**)(char *, uint64_t))(v59 + 8);
          v48(v58, v8);
          v48(v57, v8);
          if ((v47 & 1) != 0)
          {
            if (v40 < a2 || a3 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              v50 = v55;
              v51 = v56;
            }
            else
            {
              v49 = v40 == a2;
              v50 = v55;
              v51 = v56;
              if (!v49)
                swift_arrayInitWithTakeBackToFront();
            }
            v63 += v39;
          }
          else
          {
            v52 = v61;
            v61 += v39;
            if (v40 < v52 || a3 >= v52)
            {
              swift_arrayInitWithTakeFrontToBack();
              v42 = a2;
              v50 = v55;
              v51 = v56;
            }
            else
            {
              v51 = v56;
              if (v40 != v52)
                swift_arrayInitWithTakeBackToFront();
              v42 = a2;
              v50 = v55;
            }
          }
          v37 = v61;
          if (v61 <= v50)
            break;
          a2 = v42;
        }
        while (v42 > v51);
      }
LABEL_67:
      sub_21FBF264C(&v63, &v62, (uint64_t *)&v61);
      return 1;
    }
  }
  else if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = v21 * v60;
    if (a4 < a1 || a1 + v23 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v58 = (char *)(a4 + v23);
    v61 = a4 + v23;
    if (v23 >= 1 && a2 < a3)
    {
      v26 = *(void (**)(char *, unint64_t, uint64_t))(v59 + 16);
      while (1)
      {
        v26(v17, a2, v8);
        v26(v15, a4, v8);
        v27 = sub_21FC5AAB8();
        v29 = v28;
        if (sub_21FC5AAB8() == v27 && v30 == v29)
          break;
        v32 = sub_21FC5BDF0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v33 = *(void (**)(char *, uint64_t))(v59 + 8);
        v33(v15, v8);
        v33(v17, v8);
        if ((v32 & 1) == 0)
          goto LABEL_31;
        v34 = v63;
        v35 = a2 + v60;
        if (v63 < a2 || v63 >= v35)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v63 == a2)
        {
          v34 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront();
        }
LABEL_37:
        v63 = v34 + v60;
        a4 = v62;
        if (v62 < (unint64_t)v58)
        {
          a2 = v35;
          if (v35 < a3)
            continue;
        }
        goto LABEL_67;
      }
      swift_bridgeObjectRelease_n();
      v31 = *(void (**)(char *, uint64_t))(v59 + 8);
      v31(v15, v8);
      v31(v17, v8);
LABEL_31:
      v34 = v63;
      v36 = v62 + v60;
      if (v63 < v62 || v63 >= v36)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v63 != v62)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v62 = v36;
      v35 = a2;
      goto LABEL_37;
    }
    goto LABEL_67;
  }
LABEL_71:
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

uint64_t sub_21FAB5F04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40[5];
  uint64_t v41;
  uint64_t v42[6];

  sub_21FAB6474();
  v36 = v4;
  v38 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v33 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FAB6814();
  v37 = v6;
  v39 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v34 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FAB66C0();
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FAB6508();
  v32 = v13;
  v35 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42[3] = type metadata accessor for ClinicalSharingCloudStandardAPI();
  v42[4] = (uint64_t)&off_24E486A00;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v42);
  sub_21FA2D120(a1, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCloudStandardAPI);
  sub_21FA84A5C(0, &qword_255540950, (uint64_t (*)(uint64_t))sub_21FAB4918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
  sub_21FAB6750();
  sub_21FAB67B4();
  sub_21FC5B31C();
  sub_21FA95DE0(a2, (uint64_t)v40);
  v17 = swift_allocObject();
  v18 = v40[3];
  *(_OWORD *)(v17 + 48) = v40[2];
  *(_OWORD *)(v17 + 64) = v18;
  *(_OWORD *)(v17 + 80) = v40[4];
  *(_QWORD *)(v17 + 96) = v41;
  v19 = v40[1];
  *(_OWORD *)(v17 + 16) = v40[0];
  *(_OWORD *)(v17 + 32) = v19;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = sub_21FAB6914;
  *(_QWORD *)(v20 + 24) = v17;
  sub_21FC5B184();
  type metadata accessor for PBPushBlobsRequest(0);
  sub_21FAB65D0();
  sub_21FA2A08C(&qword_2555409B0, (uint64_t (*)(uint64_t))sub_21FAB66C0, MEMORY[0x24BDB98C8]);
  sub_21FA2A08C(&qword_2555409A8, (uint64_t (*)(uint64_t))sub_21FAB65D0, MEMORY[0x24BDB96C0]);
  v31 = v15;
  sub_21FC5B34C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_21FA2CEA0((uint64_t)v42, (uint64_t)v40);
  v21 = swift_allocObject();
  sub_21FA3175C(v40, v21 + 16);
  sub_21FC5A5D8();
  sub_21FA2A08C(&qword_2555409B8, (uint64_t (*)(uint64_t))sub_21FAB6508, MEMORY[0x24BDB98F0]);
  v22 = v33;
  v23 = v32;
  sub_21FC5B31C();
  swift_release();
  sub_21FA2CEA0((uint64_t)v42, (uint64_t)v40);
  v24 = swift_allocObject();
  sub_21FA3175C(v40, v24 + 16);
  sub_21FC5B184();
  type metadata accessor for PBPushBlobsResponse(0);
  sub_21FA84A5C(0, &qword_255540810, type metadata accessor for PBPushBlobsResponse, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA2A08C(&qword_2555409C8, (uint64_t (*)(uint64_t))sub_21FAB6474, MEMORY[0x24BDB98C8]);
  sub_21FAB4934();
  v25 = v34;
  v26 = v36;
  sub_21FC5B34C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v22, v26);
  sub_21FA2A08C(&qword_2555409D0, (uint64_t (*)(uint64_t))sub_21FAB6814, MEMORY[0x24BDB98F0]);
  v27 = v37;
  v28 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v25, v27);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v31, v23);
  *(_QWORD *)&v40[0] = v28;
  v29 = sub_21FC5B280();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
  return v29;
}

uint64_t sub_21FAB640C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FAB3DA0(a1, *(_QWORD *)(v2 + 16), a2);
}

unint64_t sub_21FAB6414()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25406CBB0;
  if (!qword_25406CBB0)
  {
    sub_21FA84A5C(255, &qword_25406CBB8, (uint64_t (*)(uint64_t))sub_21FA94D54, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDBA1D0], v1);
    atomic_store(result, (unint64_t *)&qword_25406CBB0);
  }
  return result;
}

void sub_21FAB6474()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255540978)
  {
    sub_21FAB6508();
    sub_21FC5A5D8();
    sub_21FA2A08C(&qword_2555409B8, (uint64_t (*)(uint64_t))sub_21FAB6508, MEMORY[0x24BDB98F0]);
    v0 = sub_21FC5B0E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255540978);
  }
}

void sub_21FAB6508()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255540980)
  {
    sub_21FAB65D0();
    sub_21FAB66C0();
    sub_21FA2A08C(&qword_2555409A8, (uint64_t (*)(uint64_t))sub_21FAB65D0, MEMORY[0x24BDB96C0]);
    sub_21FA2A08C(&qword_2555409B0, (uint64_t (*)(uint64_t))sub_21FAB66C0, MEMORY[0x24BDB98C8]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255540980);
  }
}

void sub_21FAB65D0()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_255540988)
  {
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FAB6A04(255, &qword_255540440, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    type metadata accessor for PBPushBlobsRequest(255);
    sub_21FAB6680(&qword_255540448, &qword_255540440, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    v1 = sub_21FC5B064();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_255540988);
  }
}

uint64_t sub_21FAB6680(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FAB6A04(255, a2, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_21FAB66C0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255540990)
  {
    sub_21FA84A5C(255, &qword_255540950, (uint64_t (*)(uint64_t))sub_21FAB4918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
    sub_21FAB6750();
    sub_21FAB67B4();
    v0 = sub_21FC5B0E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255540990);
  }
}

void sub_21FAB6750()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_255540998)
  {
    type metadata accessor for PBBlobs(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_255540998);
  }
}

unint64_t sub_21FAB67B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2555409A0;
  if (!qword_2555409A0)
  {
    sub_21FA84A5C(255, &qword_255540950, (uint64_t (*)(uint64_t))sub_21FAB4918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDBA1D0], v1);
    atomic_store(result, (unint64_t *)&qword_2555409A0);
  }
  return result;
}

void sub_21FAB6814()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2555409C0)
  {
    sub_21FA84A5C(255, &qword_255540810, type metadata accessor for PBPushBlobsResponse, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FAB6474();
    sub_21FAB4934();
    sub_21FA2A08C(&qword_2555409C8, (uint64_t (*)(uint64_t))sub_21FAB6474, MEMORY[0x24BDB98C8]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2555409C0);
  }
}

uint64_t sub_21FAB68D8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  return swift_deallocObject();
}

uint64_t sub_21FAB6914@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  return sub_21FAB4494(a1, a2, a3, v4 + 16, a4);
}

uint64_t sub_21FAB691C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FAB6940(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, _QWORD, _QWORD);
  uint64_t v4;

  v3 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v1 + 16);
  sub_21FAB6750();
  return v3(a1, *(_QWORD *)(a1 + *(int *)(v4 + 48)), *(_QWORD *)(a1 + *(int *)(v4 + 48) + 8));
}

uint64_t sub_21FAB698C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_21FAB69B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21FBE13FC(a1, (_QWORD *)(v2 + 16), a2);
}

uint64_t sub_21FAB69C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FBE1860(a1, (_QWORD *)(v2 + 16), a2);
}

uint64_t sub_21FAB69D0()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  sub_21FA2D770(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_21FAB6A04(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t, _QWORD))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_21FA2CDB4();
    v7 = a3(a1, &type metadata for ClinicalSharingEncryption.BAACertSignature, v6, MEMORY[0x24BEE3F20]);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_21FAB6A6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for PBBlobs(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_bridgeObjectRelease();
  v4 = v3 + *(int *)(v1 + 20);
  v5 = sub_21FC5AD1C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocObject();
}

uint64_t sub_21FAB6AF8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PBBlobs(0) - 8) + 80);
  return sub_21FAB46DC(a1, v2 + ((v5 + 16) & ~v5), a2);
}

void sub_21FAB6B44(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_21FA84A5C(255, &qword_255540810, type metadata accessor for PBPushBlobsResponse, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    a3(255);
    sub_21FAB4934();
    v5 = sub_21FC5B064();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_21FAB6BD0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2555409F8)
  {
    sub_21FA96B64(255);
    v0 = sub_21FC5B574();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2555409F8);
  }
}

uint64_t sub_21FAB6C34()
{
  return sub_21FA2A08C(&qword_255540A00, (uint64_t (*)(uint64_t))sub_21FAB6BD0, MEMORY[0x24BEE03C0]);
}

unint64_t sub_21FAB6C50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_255540A10;
  if (!qword_255540A10)
  {
    sub_21FAB488C(255, &qword_255540A08, (void (*)(uint64_t))sub_21FAB6BD0, (void (*)(void))sub_21FAB6C34);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9970], v1);
    atomic_store(result, (unint64_t *)&qword_255540A10);
  }
  return result;
}

uint64_t sub_21FAB6CB0(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_21FAB6B44(255, a2, a3);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB96C0], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FAB6D08(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  char v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t (*v33)(char *);
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v4 = v3;
  v33 = a1;
  v34 = a2;
  sub_21FAB7558(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v26 - v7;
  v9 = sub_21FC5AAAC();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v31 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v11);
  v35 = (char *)&v26 - v14;
  v36 = MEMORY[0x24BEE4AF8];
  v32 = *(_QWORD *)(a3 + 16);
  if (v32)
  {
    v15 = 0;
    v30 = a3;
    while (v15 < *(_QWORD *)(a3 + 16))
    {
      v16 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v17 = *(_QWORD *)(v10 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v8, a3 + v16 + v17 * v15, v9);
      v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
      v29(v8, 0, 1, v9);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
        goto LABEL_17;
      v18 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v19 = v35;
      v18(v35, v8, v9);
      v20 = v33(v19);
      if (v4)
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v35, v9);
        swift_bridgeObjectRelease();
        return swift_release();
      }
      if ((v20 & 1) != 0)
      {
        v18(v31, v35, v9);
        v21 = v36;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v28 = 0;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_21FC019C4(0, *(_QWORD *)(v21 + 16) + 1, 1);
          v21 = v36;
        }
        v24 = *(_QWORD *)(v21 + 16);
        v23 = *(_QWORD *)(v21 + 24);
        v25 = v24 + 1;
        if (v24 >= v23 >> 1)
        {
          v27 = v24 + 1;
          sub_21FC019C4(v23 > 1, v24 + 1, 1);
          v25 = v27;
          v21 = v36;
        }
        *(_QWORD *)(v21 + 16) = v25;
        result = ((uint64_t (*)(unint64_t, char *, uint64_t))v18)(v21 + v16 + v24 * v17, v31, v9);
        v36 = v21;
        v4 = v28;
      }
      else
      {
        result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v35, v9);
      }
      a3 = v30;
      if (v32 == ++v15)
      {
        v29(v8, 1, 1, v9);
        goto LABEL_17;
      }
    }
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
LABEL_17:
    swift_bridgeObjectRelease();
    sub_21FA71828((uint64_t)v8);
    return v36;
  }
  return result;
}

void sub_21FAB6FD4()
{
  qword_25406D888 = 0x40F5180000000000;
}

uint64_t sub_21FAB6FE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  void (*v17)(char *, char *, uint64_t);
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  sub_21FAB7558(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v26 - v3;
  v5 = sub_21FC5AAAC();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v26 - v10;
  v32 = MEMORY[0x24BEE4AF8];
  v12 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v26[1] = a1;
  if (v12)
  {
    v28 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v29 = v11;
    v13 = a1 + v28;
    v14 = *(_QWORD *)(v6 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v30 = v9;
    v31 = v15;
    v27 = v14;
    v15(v4, a1 + v28, v5);
    while (1)
    {
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
      v16(v4, 0, 1, v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
        break;
      v17 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v17(v11, v4, v5);
      sub_21FC5AA88();
      v19 = v18;
      if (qword_25406BC10 != -1)
        swift_once();
      v20 = -v19;
      if (*(double *)&qword_25406D888 <= -v19)
      {
        (*(void (**)(char *, uint64_t, double, double))(v6 + 8))(v11, v5, v20, *(double *)&qword_25406D888);
      }
      else
      {
        ((void (*)(char *, char *, uint64_t, double, double))v17)(v9, v11, v5, v20, *(double *)&qword_25406D888);
        v21 = v32;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_21FC019C4(0, *(_QWORD *)(v21 + 16) + 1, 1);
          v21 = v32;
        }
        v23 = *(_QWORD *)(v21 + 16);
        v22 = *(_QWORD *)(v21 + 24);
        if (v23 >= v22 >> 1)
        {
          sub_21FC019C4(v22 > 1, v23 + 1, 1);
          v21 = v32;
        }
        *(_QWORD *)(v21 + 16) = v23 + 1;
        v14 = v27;
        v24 = v21 + v28 + v23 * v27;
        v9 = v30;
        v17((char *)v24, v30, v5);
        v32 = v21;
        v11 = v29;
      }
      v13 += v14;
      if (!--v12)
        goto LABEL_16;
      v31(v4, v13, v5);
    }
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
LABEL_16:
    v16(v4, 1, 1, v5);
  }
  swift_bridgeObjectRelease();
  sub_21FA71828((uint64_t)v4);
  return v32;
}

uint64_t sub_21FAB7290(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  sub_21FAB7720(0, &qword_25406CB80, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v10 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_21FAB7514();
  sub_21FC5BEEC();
  v10[1] = a2;
  sub_21FAB7558(0, &qword_25406BA10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_21FAB777C(&qword_25406BA18, &qword_25406AAD8, MEMORY[0x24BDCE920], MEMORY[0x24BEE12A0]);
  sub_21FC5BD9C();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_21FAB73C8()
{
  return 0x73636E7973;
}

uint64_t sub_21FAB73DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x73636E7973 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_21FC5BDF0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_21FAB7468()
{
  sub_21FAB7514();
  return sub_21FC5BF10();
}

uint64_t sub_21FAB7490()
{
  sub_21FAB7514();
  return sub_21FC5BF1C();
}

_QWORD *sub_21FAB74B8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_21FAB75B0(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_21FAB74E0(_QWORD *a1)
{
  uint64_t *v1;

  return sub_21FAB7290(a1, *v1);
}

uint64_t sub_21FAB74F8(uint64_t *a1, uint64_t *a2)
{
  return sub_21FB0E21C(*a1, *a2);
}

ValueMetadata *type metadata accessor for ClinicalSharingSyncHistory()
{
  return &type metadata for ClinicalSharingSyncHistory;
}

unint64_t sub_21FAB7514()
{
  unint64_t result;

  result = qword_25406C400;
  if (!qword_25406C400)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC615A8, &type metadata for ClinicalSharingSyncHistory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25406C400);
  }
  return result;
}

void sub_21FAB7558(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_21FC5AAAC();
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

_QWORD *sub_21FAB75B0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  _QWORD v10[2];

  sub_21FAB7720(0, &qword_25406BE48, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v10 - v6;
  v8 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_21FAB7514();
  sub_21FC5BEE0();
  if (!v1)
  {
    sub_21FAB7558(0, &qword_25406BA10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FAB777C(&qword_25406BA20, &qword_25406AAE0, MEMORY[0x24BDCE960], MEMORY[0x24BEE12D0]);
    sub_21FC5BD30();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v8 = (_QWORD *)v10[1];
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v8;
}

void sub_21FAB7720(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_21FAB7514();
    v7 = a3(a1, &type metadata for ClinicalSharingSyncHistory.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_21FAB777C(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_21FAB7558(255, &qword_25406BA10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v10 = v9;
    v11 = sub_21FAB7804(a2, a3);
    result = MEMORY[0x2207D0F78](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FAB7804(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_21FC5AAAC();
    result = MEMORY[0x2207D0F78](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ClinicalSharingSyncHistory.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21FAB7884 + 4 * byte_21FC61440[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21FAB78A4 + 4 * byte_21FC61445[v4]))();
}

_BYTE *sub_21FAB7884(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21FAB78A4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21FAB78AC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21FAB78B4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21FAB78BC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21FAB78C4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingSyncHistory.CodingKeys()
{
  return &type metadata for ClinicalSharingSyncHistory.CodingKeys;
}

unint64_t sub_21FAB78E4()
{
  unint64_t result;

  result = qword_255540A28;
  if (!qword_255540A28)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC61580, &type metadata for ClinicalSharingSyncHistory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255540A28);
  }
  return result;
}

unint64_t sub_21FAB792C()
{
  unint64_t result;

  result = qword_25406C410;
  if (!qword_25406C410)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC614F0, &type metadata for ClinicalSharingSyncHistory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25406C410);
  }
  return result;
}

unint64_t sub_21FAB7974()
{
  unint64_t result;

  result = qword_25406C408;
  if (!qword_25406C408)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC61518, &type metadata for ClinicalSharingSyncHistory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25406C408);
  }
  return result;
}

void sub_21FAB79B8(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;

  v8 = *(int *)(type metadata accessor for ClinicalSharingSleepStatisticsQuery(0) + 32);
  sub_21FA5BE58(0, (unint64_t *)&qword_255540A30);
  *(_QWORD *)(a4 + v8) = MEMORY[0x2207D0390]((id)*MEMORY[0x24BDD2A28]);
  v9 = sub_21FAB7B00(a1 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_date, a2, a3);
  v11 = v10;
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = a3;
  *(_QWORD *)(a4 + 24) = v9;
  *(_QWORD *)(a4 + 32) = v10;
  v12 = (void *)objc_opt_self();
  swift_retain();
  v13 = (void *)sub_21FC5AB6C();
  v14 = objc_msgSend(v12, sel_hk_sleepDayIntervalForMorningIndexRange_calendar_, v9, v11, v13);

  sub_21FC5A674();
  swift_release();

}

uint64_t type metadata accessor for ClinicalSharingSleepStatisticsQuery(uint64_t a1)
{
  return sub_21FA44B58(a1, qword_255540A90);
}

uint64_t sub_21FAB7B00(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  void *v16;
  _BYTE *v17;
  void (*v18)(char *, uint64_t);
  void *v19;
  void *v20;
  _BYTE *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = sub_21FC5AAAC();
  v26 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_21FC5A83C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_21FC5A6C8();
  v24 = *(_QWORD *)(v12 - 8);
  v25 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FABA2F8(a2, a2, a3);
  sub_21FAC8DF8(0x90008u >> (8 * a3), (uint64_t)v14);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_21FC5A6A4();
  v15 = (void *)sub_21FC5AA64();
  v16 = (void *)sub_21FC5AB6C();
  v17 = objc_msgSend(v15, sel_hk_morningIndexWithCalendar_, v16);

  v18 = *(void (**)(char *, uint64_t))(v26 + 8);
  v18(v7, v5);
  sub_21FC5A680();
  v19 = (void *)sub_21FC5AA64();
  v20 = (void *)sub_21FC5AB6C();
  v21 = objc_msgSend(v19, sel_hk_morningIndexWithCalendar_, v20);

  result = ((uint64_t (*)(char *, uint64_t))v18)(v7, v5);
  if ((uint64_t)v21 < (uint64_t)v17)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (__OFSUB__(v21, v17))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (!__OFADD__(v21 - v17, 1))
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v25);
    return (uint64_t)v17;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_21FAB7D24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = type metadata accessor for ClinicalSharingSleepStatisticsQuery(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FABABBC();
  v6 = *(_QWORD *)(v5 - 8);
  v29 = v5;
  v30 = v6;
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FABACBC(0, &qword_255540AF8, (void (*)(uint64_t))type metadata accessor for PBTypedData);
  v31 = v9;
  v33 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v27 - v10;
  sub_21FABACBC(0, &qword_255540B08, (void (*)(uint64_t))type metadata accessor for ClinicalSharingQueryOutput);
  v32 = v12;
  v34 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v28 = (char *)&v27 - v13;
  v14 = sub_21FC5BA24();
  v15 = sub_21FBFF9C4(v14);
  swift_bridgeObjectRelease();
  v16 = sub_21FAB8084((uint64_t)v15);
  swift_release();
  v27 = v16;
  swift_retain();
  v17 = sub_21FAB8084((uint64_t)&unk_24E480880);
  v35 = v16;
  v36 = v17;
  sub_21FABAC40();
  sub_21FA2A08C(&qword_255540AF0, (uint64_t (*)(uint64_t))sub_21FABAC40, MEMORY[0x24BDB9AF8]);
  sub_21FC5B07C();
  sub_21FA2D120(v0, (uint64_t)v4, type metadata accessor for ClinicalSharingSleepStatisticsQuery);
  v18 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v19 = swift_allocObject();
  sub_21FA2D23C((uint64_t)v4, v19 + v18, type metadata accessor for ClinicalSharingSleepStatisticsQuery);
  type metadata accessor for PBTypedData(0);
  sub_21FA2A08C(&qword_255540B00, (uint64_t (*)(uint64_t))sub_21FABABBC, MEMORY[0x24BDB96E0]);
  v20 = v29;
  sub_21FC5B28C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v20);
  sub_21FA2D120(v0, (uint64_t)v4, type metadata accessor for ClinicalSharingSleepStatisticsQuery);
  v21 = swift_allocObject();
  sub_21FA2D23C((uint64_t)v4, v21 + v18, type metadata accessor for ClinicalSharingSleepStatisticsQuery);
  type metadata accessor for ClinicalSharingQueryOutput(0);
  v22 = v28;
  v23 = v31;
  sub_21FC5AFF8();
  swift_release();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v23);
  sub_21FABAE98();
  v24 = v32;
  v25 = sub_21FC5B280();
  swift_release();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v22, v24);
  return v25;
}

uint64_t sub_21FAB8084(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void *v21;
  void *v22;
  void (*v23)(char *, uint64_t);
  void *v24;
  id v25;
  uint64_t v26;
  int64_t v27;
  uint64_t *v28;
  int64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  id v48;
  uint64_t v49;
  id v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v2 = v1;
  v80 = sub_21FC5B94C();
  v78 = *(_QWORD *)(v80 - 8);
  MEMORY[0x24BDAC7A8](v80);
  v76 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FABB1D4();
  v81 = *(_QWORD *)(v5 - 8);
  v82 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v79 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2ED54(0, &qword_25553E0E8, (void (*)(uint64_t))MEMORY[0x24BDCB878]);
  MEMORY[0x24BDAC7A8](v7);
  v77 = (char *)&v64 - v8;
  sub_21FA2ED54(0, (unint64_t *)&qword_25553F0B0, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  MEMORY[0x24BDAC7A8](v9);
  v70 = (char *)&v64 - v10;
  sub_21FA2ED54(0, &qword_25553F0B8, (void (*)(uint64_t))MEMORY[0x24BDCF2D8]);
  MEMORY[0x24BDAC7A8](v11);
  v69 = (char *)&v64 - v12;
  v13 = sub_21FC5A83C();
  v74 = *(_QWORD *)(v13 - 8);
  v75 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v73 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_21FC5AAAC();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA80754(0, (unint64_t *)&qword_25554BAF0, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_21FC60A80;
  v67 = type metadata accessor for ClinicalSharingSleepStatisticsQuery(0);
  v20 = (char *)v1 + *(int *)(v67 + 28);
  v21 = (void *)objc_opt_self();
  sub_21FC5A6A4();
  v22 = (void *)sub_21FC5AA64();
  v23 = *(void (**)(char *, uint64_t))(v16 + 8);
  v23(v18, v15);
  v68 = v20;
  sub_21FC5A680();
  v24 = (void *)sub_21FC5AA64();
  v71 = v23;
  v72 = v15;
  v23(v18, v15);
  v25 = objc_msgSend(v21, sel_predicateForSamplesWithStartDate_endDate_options_, v22, v24, 0);

  *(_QWORD *)(v19 + 32) = v25;
  v26 = a1;
  v27 = *(_QWORD *)(a1 + 16);
  v83 = v2;
  v65 = v26;
  if (v27)
  {
    v84 = MEMORY[0x24BEE4AF8];
    sub_21FC5BC04();
    v28 = (uint64_t *)(v26 + 32);
    v29 = v27;
    do
    {
      v30 = *v28++;
      v31 = objc_msgSend(v21, sel_predicateForCategorySamplesWithOperatorType_value_, 4, v30);
      sub_21FC5BBE0();
      sub_21FC5BC10();
      sub_21FC5BC1C();
      sub_21FC5BBEC();
      --v29;
    }
    while (v29);
    v2 = v83;
  }
  sub_21FA5BE58(0, &qword_255540560);
  v32 = (void *)sub_21FC5B79C();
  swift_bridgeObjectRelease();
  v33 = (void *)objc_opt_self();
  v34 = objc_msgSend(v33, sel_orPredicateWithSubpredicates_, v32);

  *(_QWORD *)(v19 + 40) = v34;
  v84 = v19;
  sub_21FC5B7C0();
  v35 = (void *)sub_21FC5B79C();
  swift_bridgeObjectRelease();
  v36 = objc_msgSend(v33, sel_andPredicateWithSubpredicates_, v35);

  v84 = 0;
  v85 = 0xE000000000000000;
  v66 = v36;
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  v37 = MEMORY[0x24BEE4AF8];
  if (v27)
  {
    v87 = MEMORY[0x24BEE4AF8];
    sub_21FC01924(0, v27, 0);
    v37 = v87;
    v38 = (uint64_t *)(v65 + 32);
    do
    {
      v39 = *v38++;
      v40 = 0xE600000000000000;
      v41 = 0x6465622D6E69;
      switch(v39)
      {
        case 0:
          break;
        case 1:
          v41 = 0x7065656C7361;
          break;
        case 2:
          v40 = 0xE500000000000000;
          v41 = 0x656B617761;
          break;
        case 3:
          v40 = 0xEC00000074686769;
          v41 = 0x6C2D7065656C7361;
          break;
        case 4:
          v40 = 0xEB00000000706565;
          v41 = 0x642D7065656C7361;
          break;
        case 5:
          v40 = 0xEA00000000006D65;
          v41 = 0x722D7065656C7361;
          break;
        default:
          sub_21FC5BC70();
          __break(1u);
          JUMPOUT(0x21FAB8A50);
      }
      v87 = v37;
      v43 = *(_QWORD *)(v37 + 16);
      v42 = *(_QWORD *)(v37 + 24);
      if (v43 >= v42 >> 1)
      {
        sub_21FC01924(v42 > 1, v43 + 1, 1);
        v37 = v87;
      }
      *(_QWORD *)(v37 + 16) = v43 + 1;
      v44 = v37 + 16 * v43;
      *(_QWORD *)(v44 + 32) = v41;
      *(_QWORD *)(v44 + 40) = v40;
      --v27;
    }
    while (v27);
    v2 = v83;
  }
  v87 = v37;
  sub_21FA80754(0, (unint64_t *)&qword_25406BA60, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_21FA80314();
  sub_21FC5B5B0();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  v45 = v84;
  v46 = v85;
  v47 = *(void **)((char *)v2 + *(int *)(v67 + 32));
  v48 = v47;
  v67 = sub_21FBE6F50(v45, v46, v47, 2, 1);
  v65 = v49;
  swift_bridgeObjectRelease();

  sub_21FA2CEA0(*v2 + 16, (uint64_t)&v84);
  __swift_project_boxed_opaque_existential_1(&v84, v86);
  v50 = v66;
  v51 = v68;
  sub_21FC5A6A4();
  v52 = sub_21FC5AC08();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v69, 1, 1, v52);
  v53 = sub_21FC5AC5C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v70, 1, 1, v53);
  v54 = v73;
  sub_21FC5A824();
  sub_21FC5A7B8();
  v55 = sub_21FC5A6C8();
  v56 = *(_QWORD *)(v55 - 8);
  v57 = (uint64_t)v77;
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v77, v51, v55);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v56 + 56))(v57, 0, 1, v55);
  v58 = v76;
  sub_21FC5B958();
  sub_21FA5BE58(0, &qword_255540AE8);
  sub_21FA2A08C(&qword_255540B58, (uint64_t (*)(uint64_t))MEMORY[0x24BE45AF0], MEMORY[0x24BE45AE8]);
  v60 = v79;
  v59 = v80;
  sub_21FC5B2C8();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v58, v59);
  sub_21FA2A08C(qword_255540B60, (uint64_t (*)(uint64_t))sub_21FABB1D4, MEMORY[0x24BDB96C0]);
  v61 = v82;
  v62 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v60, v61);

  swift_bridgeObjectRelease();
  sub_21FA2EDA0(v57, &qword_25553E0E8, (void (*)(uint64_t))MEMORY[0x24BDCB878]);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v54, v75);
  v71(v18, v72);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v84);
  return v62;
}

uint64_t sub_21FAB8A68@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t inited;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  int *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  unsigned int (*v59)(char *, uint64_t, uint64_t);
  _QWORD *v60;
  unint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  uint64_t v74;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  int v84;
  id v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  id v91;
  id v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;

  v4 = v3;
  v91 = a1;
  v92 = a2;
  v95 = a3;
  sub_21FA2ED54(0, &qword_25553E0E8, (void (*)(uint64_t))MEMORY[0x24BDCB878]);
  MEMORY[0x24BDAC7A8](v5);
  v82 = (char *)&v79 - v6;
  v7 = type metadata accessor for PBDateRange(0);
  MEMORY[0x24BDAC7A8](v7);
  v81 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for PBSleepSeries.Value(0);
  v9 = *(_QWORD *)(v94 - 8);
  MEMORY[0x24BDAC7A8](v94);
  v11 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2ED54(0, &qword_255540B18, v12);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v79 - v14;
  sub_21FA2ED54(0, (unint64_t *)&qword_25553F0B0, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  MEMORY[0x24BDAC7A8](v16);
  v93 = (char *)&v79 - v17;
  sub_21FA2ED54(0, &qword_25553F0B8, (void (*)(uint64_t))MEMORY[0x24BDCF2D8]);
  MEMORY[0x24BDAC7A8](v18);
  v90 = (char *)&v79 - v19;
  v96 = type metadata accessor for SleepSeriesValueIterator(0);
  MEMORY[0x24BDAC7A8](v96);
  v21 = (uint64_t *)((char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v79 = type metadata accessor for ClinicalSharingSleepStatisticsQuery(0);
  v22 = *(_QWORD *)(v79 - 8);
  v23 = *(_QWORD *)(v22 + 64);
  v24 = MEMORY[0x24BDAC7A8](v79);
  v25 = (char *)&v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v79 - v26;
  v28 = type metadata accessor for PBSleepSeries(0);
  v29 = MEMORY[0x24BDAC7A8](v28);
  v80 = (uint64_t)&v79 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v98 = (unint64_t *)((char *)&v79 - v31);
  *(uint64_t *)((char *)&v79 - v31) = MEMORY[0x24BEE4AF8];
  sub_21FC5AD10();
  v83 = v4;
  sub_21FA2D120(v4, (uint64_t)v27, type metadata accessor for ClinicalSharingSleepStatisticsQuery);
  sub_21FA2D120((uint64_t)v27, (uint64_t)v25, type metadata accessor for ClinicalSharingSleepStatisticsQuery);
  v32 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v33 = swift_allocObject();
  v34 = v91;
  v35 = v92;
  *(_QWORD *)(v33 + 16) = v91;
  *(_QWORD *)(v33 + 24) = v35;
  v36 = v33 + v32;
  v37 = v33;
  sub_21FA2D23C((uint64_t)v27, v36, type metadata accessor for ClinicalSharingSleepStatisticsQuery);
  sub_21FABB048(0, &qword_255540B20, (uint64_t (*)(uint64_t))sub_21FABAFEC, sub_21FABB02C, MEMORY[0x24BEE2690]);
  inited = swift_initStackObject();
  v97 = inited;
  *(_QWORD *)(inited + 16) = sub_21FABAFAC;
  *(_QWORD *)(inited + 24) = v37;
  v39 = *((_QWORD *)v25 + 3);
  v87 = v37;
  v88 = v39;
  v89 = *((_QWORD *)v25 + 4);
  v85 = (id)*((_QWORD *)v25 + 1);
  v40 = v96;
  v84 = v25[16];
  v86 = v25;
  v41 = v34;
  v42 = v35;
  v92 = v41;
  v91 = v42;
  swift_retain();
  sub_21FABA2F8(1, (uint64_t)v85, v84);
  v43 = *(_QWORD *)v25;
  v85 = *(id *)(*(_QWORD *)v25 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_isoDateFormatter);
  v44 = v43 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_gregorianCalendar;
  v45 = (char *)v21 + *(int *)(v40 + 36);
  v46 = sub_21FC5AC08();
  v47 = *(_QWORD *)(v46 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v45, v44, v46);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v90, 1, 1, v46);
  v48 = sub_21FC5AC5C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v93, 1, 1, v48);
  v49 = v85;
  sub_21FC5A824();
  sub_21FC5A7B8();
  v50 = (int *)v96;
  v51 = *(int *)(v96 + 48);
  *(_QWORD *)((char *)v21 + v51) = objc_msgSend((id)objc_opt_self(), sel_secondUnit);
  v52 = (char *)v21 + v50[13];
  *(_QWORD *)v52 = 0;
  *((_QWORD *)v52 + 1) = 0xE000000000000000;
  *((_QWORD *)v52 + 2) = 0;
  *((_DWORD *)v52 + 6) = 0;
  v53 = v94;
  sub_21FC5AD10();
  v54 = v91;
  *v21 = v92;
  v21[1] = v54;
  v56 = v88;
  v55 = v89;
  v21[2] = v88;
  v21[3] = v55;
  *(_QWORD *)((char *)v21 + v50[8]) = v49;
  *(_QWORD *)((char *)v21 + v50[10]) = v56;
  swift_retain();
  swift_release();
  sub_21FA326EC((uint64_t)v86, type metadata accessor for ClinicalSharingSleepStatisticsQuery);
  sub_21FABB048(0, &qword_255540B40, type metadata accessor for SleepSeriesValueIterator, sub_21FABB010, MEMORY[0x24BEE2678]);
  v57 = (_QWORD *)swift_allocObject();
  sub_21FA2D23C((uint64_t)v21, (uint64_t)v57 + *(_QWORD *)(*MEMORY[0x24BEE2688] + *v57 + 16), type metadata accessor for SleepSeriesValueIterator);
  swift_release();
  v96 = (uint64_t)v57;
  v58 = *v98;
  sub_21FAB97EC((uint64_t)v15);
  v59 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  while (v59(v15, 1, v53) != 1)
  {
    sub_21FA2D23C((uint64_t)v15, (uint64_t)v11, type metadata accessor for PBSleepSeries.Value);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v58 = sub_21FA7E264(0, *(_QWORD *)(v58 + 16) + 1, 1, v58);
    v77 = *(_QWORD *)(v58 + 16);
    v76 = *(_QWORD *)(v58 + 24);
    if (v77 >= v76 >> 1)
      v58 = sub_21FA7E264(v76 > 1, v77 + 1, 1, v58);
    *(_QWORD *)(v58 + 16) = v77 + 1;
    sub_21FA2D23C((uint64_t)v11, v58+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v77, type metadata accessor for PBSleepSeries.Value);
    sub_21FAB97EC((uint64_t)v15);
  }
  v60 = (_QWORD *)v96;
  swift_setDeallocating();
  sub_21FA326EC((uint64_t)v60 + *(_QWORD *)(*MEMORY[0x24BEE2688] + *v60 + 16), type metadata accessor for SleepSeriesValueIterator);
  swift_deallocClassInstance();
  v61 = v98;
  *v98 = v58;
  if (*(_QWORD *)(v58 + 16))
  {
    v62 = v95;
    sub_21FC5AD10();
    v63 = type metadata accessor for PBTypedData(0);
    v64 = *(int *)(v63 + 20);
    if (qword_25553D590 != -1)
      swift_once();
    *(_QWORD *)(v62 + v64) = qword_25553E450;
    v65 = *(unsigned __int8 *)(v83 + 16) + 2;
    v66 = v83 + *(int *)(v79 + 28);
    v67 = sub_21FC5A6C8();
    v68 = *(_QWORD *)(v67 - 8);
    v69 = (uint64_t)v82;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v82, v66, v67);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v68 + 56))(v69, 0, 1, v67);
    swift_retain();
    v70 = (uint64_t)v81;
    sub_21FBE7E8C(v65, 1, v69);
    sub_21FA2EDA0(v69, &qword_25553E0E8, (void (*)(uint64_t))MEMORY[0x24BDCB878]);
    PBTypedData.dateRange.setter(v70);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBTypedData._StorageClass(0);
      swift_allocObject();
      v71 = swift_retain();
      *(_QWORD *)(v62 + v64) = sub_21FA3A458(v71);
      swift_release();
    }
    v72 = *(_QWORD *)(v62 + v64);
    swift_beginAccess();
    *(_QWORD *)(v72 + 16) = 114;
    *(_BYTE *)(v72 + 24) = 1;
    v73 = v98;
    v74 = v80;
    sub_21FA2D120((uint64_t)v98, v80, type metadata accessor for PBSleepSeries);
    PBTypedData.sleepSeries.setter(v74);
    swift_release();
    sub_21FA326EC((uint64_t)v73, type metadata accessor for PBSleepSeries);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v62, 0, 1, v63);
  }
  else
  {
    sub_21FA326EC((uint64_t)v61, type metadata accessor for PBSleepSeries);
    swift_setDeallocating();
    swift_release();
    v78 = type metadata accessor for PBTypedData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v95, 1, 1, v78);
  }
}

uint64_t sub_21FAB9418@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v22;
  char *v23;

  v23 = a4;
  v7 = sub_21FC5AC08();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_21FC5A83C();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a3 + 32);
  v22 = *(_QWORD *)(a3 + 24);
  v15 = *(_QWORD *)(a3 + 8);
  v16 = *(_BYTE *)(a3 + 16);
  v17 = a1;
  v18 = a2;
  sub_21FABA2F8(1, v15, v16);
  v19 = *(void **)(*(_QWORD *)a3 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_isoDateFormatter);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, *(_QWORD *)a3 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_gregorianCalendar, v7);
  v20 = v19;
  return sub_21FAB9560((uint64_t)v17, (uint64_t)v18, v22, v14, (uint64_t)v13, (uint64_t)v20, (uint64_t)v10, v23);
}

uint64_t sub_21FAB9560@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v33 = a6;
  v34 = a7;
  v31 = a4;
  v32 = a5;
  v30 = a2;
  sub_21FA2ED54(0, (unint64_t *)&qword_25553F0B0, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v29 - v12;
  sub_21FA2ED54(0, &qword_25553F0B8, (void (*)(uint64_t))MEMORY[0x24BDCF2D8]);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v29 - v15;
  v17 = (int *)type metadata accessor for SleepSeriesValueIterator(0);
  v18 = sub_21FC5AC08();
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v16, 1, 1, v18);
  v20 = sub_21FC5AC5C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v13, 1, 1, v20);
  sub_21FC5A824();
  sub_21FC5A7B8();
  v21 = v17[12];
  *(_QWORD *)&a8[v21] = objc_msgSend((id)objc_opt_self(), sel_secondUnit);
  v22 = &a8[v17[13]];
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = 0xE000000000000000;
  *((_QWORD *)v22 + 2) = 0;
  *((_DWORD *)v22 + 6) = 0;
  type metadata accessor for PBSleepSeries.Value(0);
  sub_21FC5AD10();
  v23 = v30;
  *(_QWORD *)a8 = a1;
  *((_QWORD *)a8 + 1) = v23;
  v24 = v31;
  *((_QWORD *)a8 + 2) = a3;
  *((_QWORD *)a8 + 3) = v24;
  v25 = &a8[v17[7]];
  v26 = sub_21FC5A83C();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v25, v32, v26);
  v27 = v34;
  *(_QWORD *)&a8[v17[8]] = v33;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 32))(&a8[v17[9]], v27, v18);
  *(_QWORD *)&a8[v17[10]] = a3;
  return result;
}

uint64_t sub_21FAB97EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;

  v22 = a1;
  sub_21FABB0B8();
  v23 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2ED54(0, &qword_255540B18, (void (*)(uint64_t))type metadata accessor for PBSleepSeries.Value);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v20 - v8;
  v10 = type metadata accessor for PBSleepSeries.Value(0);
  v11 = *(_QWORD *)(v10 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v12 = v21(v9, 1, 1, v10);
  while (1)
  {
    v13 = (void *)MEMORY[0x2207D0ABC](v12);
    v14 = (uint64_t)&v3[*(int *)(v23 + 48)];
    sub_21FAB99F0(v14);
    *v3 = v15 & 1;
    objc_autoreleasePoolPop(v13);
    sub_21FA2EDA0((uint64_t)v9, &qword_255540B18, (void (*)(uint64_t))type metadata accessor for PBSleepSeries.Value);
    v16 = *v3;
    sub_21FABB12C(v14, (uint64_t)v9);
    sub_21FABB180((uint64_t)v9, (uint64_t)v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10) != 1)
      break;
    v12 = sub_21FA2EDA0((uint64_t)v7, &qword_255540B18, (void (*)(uint64_t))type metadata accessor for PBSleepSeries.Value);
    if (v16)
    {
      sub_21FA2EDA0((uint64_t)v9, &qword_255540B18, (void (*)(uint64_t))type metadata accessor for PBSleepSeries.Value);
      v17 = 1;
      v18 = v22;
      return v21((char *)v18, v17, 1, v10);
    }
  }
  sub_21FA2EDA0((uint64_t)v9, &qword_255540B18, (void (*)(uint64_t))type metadata accessor for PBSleepSeries.Value);
  v18 = v22;
  sub_21FA2D23C((uint64_t)v7, v22, type metadata accessor for PBSleepSeries.Value);
  v17 = 0;
  return v21((char *)v18, v17, 1, v10);
}

void sub_21FAB99F0(uint64_t a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  void *v25;
  id v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  BOOL v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  void **v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  double v49;
  double v50;
  BOOL v51;
  void *v52;
  void *v53;
  id v54;
  id v55;
  double v56;
  double v57;
  int *v58;
  uint64_t v59;
  char *v60;
  double v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  void **v66;
  uint64_t v67;
  char v68;
  void (*v69)(char *, uint64_t);
  void *v70;
  void *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  char *v79;
  int v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  void **v92;

  v87 = a1;
  v2 = type metadata accessor for PBSleepSeries.Value(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v85 = (uint64_t)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v86 = (char **)((char *)&v79 - v6);
  sub_21FA2ED54(0, (unint64_t *)&qword_25406AAE8, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v79 - v8;
  v10 = sub_21FC5AAAC();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v79 - v15;
  sub_21FABA048();
  if ((v19 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v87, 1, 1, v2);
    return;
  }
  v20 = v17;
  v80 = v19;
  v81 = v3;
  v21 = v18;
  v84 = (int *)type metadata accessor for SleepSeriesValueIterator(0);
  v22 = v84[9];
  v92 = v1;
  v23 = (char *)v1 + v22;
  v24 = (void *)objc_opt_self();
  v91 = v23;
  v25 = (void *)sub_21FC5AB6C();
  v26 = objc_msgSend(v24, sel_hk_sleepDayStartForMorningIndex_calendar_, v20, v25);

  sub_21FC5AA94();
  v27 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v82 = v16;
  v27(v14, v16, v10);
  v28 = &v20[v21];
  v29 = __OFADD__(v20, v21);
  v30 = (uint64_t)(v28 - 1);
  v31 = __OFSUB__(v28, 1);
  if (v29)
    goto LABEL_41;
  if (v31)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v32 = v21;
  v33 = v10;
  v34 = v11;
  v83 = v2;
  if ((uint64_t)v20 < v30)
  {
    v79 = (char *)v30;
    v35 = 0;
    v36 = 0;
    v37 = v84[11];
    v38 = v84[12];
    v89 = v10;
    v90 = v38;
    v88 = (char *)v92 + v37;
    v39 = v32 - 1;
    v40 = 0.0;
    v41 = 0.0;
    while (1)
    {
      v42 = v34;
      v43 = v92;
      v44 = *v92;
      v45 = (void *)sub_21FC5AA64();
      v46 = objc_msgSend(v44, sel_statisticsForDate_, v45);

      v47 = objc_msgSend(v46, sel_duration);
      v48 = *(uint64_t *)((char *)v43 + v90);
      if (v47)
      {
        objc_msgSend(v47, sel_doubleValueForUnit_, v48);
        v50 = v49;

        v51 = __OFADD__(v36++, 1);
        if (v51)
        {
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        v41 = v41 + v50;
      }
      v52 = v43[1];
      v53 = (void *)sub_21FC5AA64();
      v54 = objc_msgSend(v52, sel_statisticsForDate_, v53);

      v55 = objc_msgSend(v54, sel_duration);
      if (v55)
      {
        objc_msgSend(v55, sel_doubleValueForUnit_, v48);
        v57 = v56;

        v51 = __OFADD__(v35++, 1);
        v33 = v89;
        if (v51)
          goto LABEL_40;
        v40 = v40 + v57;
      }
      else
      {
        v33 = v89;
      }
      sub_21FC5AB90();
      v34 = v42;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v9, 1, v33) == 1)
      {
        sub_21FA2EDA0((uint64_t)v9, (unint64_t *)&qword_25406AAE8, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
        goto LABEL_25;
      }
      (*(void (**)(char *, uint64_t))(v42 + 8))(v14, v33);
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v14, v9, v33);
      ++v20;
      if (!--v39)
      {
        v20 = v79;
        goto LABEL_25;
      }
    }
  }
  v35 = 0;
  v36 = 0;
  v40 = 0.0;
  v41 = 0.0;
LABEL_25:
  v58 = v84;
  *(void **)((char *)v92 + v84[10]) = v20;
  v59 = (uint64_t)v86;
  *v86 = 0;
  *(_QWORD *)(v59 + 8) = 0xE000000000000000;
  *(_QWORD *)(v59 + 16) = 0;
  *(_DWORD *)(v59 + 24) = 0;
  sub_21FC5AD10();
  v60 = v82;
  if (v36 >= 1)
  {
    v61 = v41 / (double)v36;
    if ((~*(_QWORD *)&v61 & 0x7FF0000000000000) != 0)
    {
      if (v61 > -1.0)
      {
        if (v61 < 4294967300.0)
        {
          *(_DWORD *)(v59 + 20) = v61;
          goto LABEL_30;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
LABEL_30:
  if (v35 >= 1)
  {
    v62 = v40 / (double)v35;
    if ((~*(_QWORD *)&v62 & 0x7FF0000000000000) != 0)
    {
      if (v62 > -1.0)
      {
        if (v62 < 4294967300.0)
        {
          *(_DWORD *)(v59 + 16) = v62;
          goto LABEL_35;
        }
LABEL_48:
        __break(1u);
        return;
      }
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_35:
  v63 = v34;
  v64 = v58[13];
  v65 = v58;
  v66 = v92;
  v67 = v85;
  sub_21FA2D120((uint64_t)v92 + v64, v85, type metadata accessor for PBSleepSeries.Value);
  v68 = _s19HealthRecordsDaemon13PBSleepSeriesV5ValueV2eeoiySbAE_AEtFZ_0(v59, v67);
  sub_21FA326EC(v67, type metadata accessor for PBSleepSeries.Value);
  if ((v68 & 1) != 0)
  {
    v69 = *(void (**)(char *, uint64_t))(v63 + 8);
    v69(v14, v33);
    v69(v60, v33);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56))(v87, 1, 1, v83);
  }
  else
  {
    v70 = *(void **)((char *)v66 + v65[8]);
    v71 = (void *)sub_21FC5AA64();
    v72 = objc_msgSend(v70, sel_stringFromDate_, v71);

    v73 = sub_21FC5B604();
    v74 = v33;
    v76 = v75;

    v77 = *(void (**)(char *, uint64_t))(v63 + 8);
    v77(v14, v74);
    v77(v60, v74);
    swift_bridgeObjectRelease();
    *(_QWORD *)v59 = v73;
    *(_QWORD *)(v59 + 8) = v76;
    v78 = v87;
    sub_21FA2D120(v59, v87, type metadata accessor for PBSleepSeries.Value);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v83);
  }
  sub_21FA326EC(v59, type metadata accessor for PBSleepSeries.Value);
}

void sub_21FABA048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  BOOL v29;
  BOOL v30;
  char *v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;

  v1 = v0;
  sub_21FA2ED54(0, (unint64_t *)&qword_25406AAE8, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v33 - v3;
  v5 = sub_21FC5B550();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_21FC5AAAC();
  v34 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v33 - v13;
  v15 = type metadata accessor for SleepSeriesValueIterator(0);
  v16 = *(_QWORD *)(v1 + 16);
  v17 = *(_QWORD *)(v1 + 24);
  v29 = __OFADD__(v16, v17);
  v18 = v16 + v17;
  if (v29)
  {
    __break(1u);
    goto LABEL_16;
  }
  v29 = __OFSUB__(v18, 1);
  v19 = v18 - 1;
  if (v29)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20 = *(_QWORD *)(v1 + *(int *)(v15 + 40));
  if (v20 >= v19)
    return;
  v33 = v12;
  sub_21FC5B52C();
  sub_21FC5B544();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_21FC5AB90();
  v21 = v34;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v4, 1, v9) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v33, v4, v9);
    v22 = (void *)sub_21FC5AA64();
    v23 = (void *)sub_21FC5AB6C();
    v24 = (char *)objc_msgSend(v22, sel_hk_morningIndexWithCalendar_, v23);

    v25 = *(_QWORD *)(v1 + 16);
    v26 = *(_QWORD *)(v1 + 24);
    v29 = __OFADD__(v25, v26);
    v27 = v25 + v26;
    if (!v29)
    {
      v29 = __OFSUB__(v27, 1);
      v28 = (char *)(v27 - 1);
      if (!v29)
      {
        if ((uint64_t)v28 >= (uint64_t)v24)
          v28 = v24;
        v29 = __OFSUB__(v28, v20);
        v30 = (uint64_t)v28 < v20;
        v31 = &v28[-v20];
        if (!v30)
        {
          if (!v29)
          {
            if (!__OFADD__(v31, 1))
            {
              v32 = *(void (**)(char *, uint64_t))(v21 + 8);
              v32(v33, v9);
              v32(v14, v9);
              return;
            }
            goto LABEL_21;
          }
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
          return;
        }
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  (*(void (**)(char *, uint64_t))(v21 + 8))(v14, v9);
  sub_21FA2EDA0((uint64_t)v4, (unint64_t *)&qword_25406AAE8, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
}

uint64_t sub_21FABA2F8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_21FA2ED54(0, (unint64_t *)&qword_25553F0B0, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v18 - v6;
  sub_21FA2ED54(0, &qword_25553F0B8, (void (*)(uint64_t))MEMORY[0x24BDCF2D8]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v18 - v9;
  if (!a3)
    goto LABEL_5;
  if (a3 == 1)
  {
    v11 = sub_21FC5AC08();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
    v12 = sub_21FC5AC5C();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v7, 1, 1, v12);
    sub_21FC5A824();
    if ((unsigned __int128)(a1 * (__int128)7) >> 64 == (7 * a1) >> 63)
      return sub_21FC5A7B8();
    __break(1u);
LABEL_5:
    v13 = sub_21FC5AC08();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v10, 1, 1, v13);
    v14 = sub_21FC5AC5C();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v7, 1, 1, v14);
    sub_21FC5A824();
    return sub_21FC5A7B8();
  }
  v16 = sub_21FC5AC08();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v10, 1, 1, v16);
  v17 = sub_21FC5AC5C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v7, 1, 1, v17);
  sub_21FC5A824();
  return sub_21FC5A7F4();
}

uint64_t sub_21FABA674(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  void *v14;
  id v15;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v7 = a1;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    v8 = *(int *)(a3 + 28);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = sub_21FC5A6C8();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_retain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 32);
    v14 = *(void **)((char *)a2 + v13);
    *(_QWORD *)(v7 + v13) = v14;
    v15 = v14;
  }
  return v7;
}

void sub_21FABA744(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_21FC5A6C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

}

uint64_t sub_21FABA7A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  void *v13;
  id v14;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_21FC5A6C8();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_retain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 32);
  v13 = *(void **)(a2 + v12);
  *(_QWORD *)(a1 + v12) = v13;
  v14 = v13;
  return a1;
}

uint64_t sub_21FABA840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_21FC5A6C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 32);
  v12 = *(void **)(a2 + v11);
  v13 = *(void **)(a1 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  v14 = v12;

  return a1;
}

uint64_t sub_21FABA8F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_21FC5A6C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t sub_21FABA97C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_21FC5A6C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 32);
  v11 = *(void **)(a1 + v10);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);

  return a1;
}

uint64_t sub_21FABAA1C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FABAA28(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_21FC5A6C8();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t sub_21FABAAA4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_21FABAAB0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_21FC5A6C8();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_21FABAB24()
{
  uint64_t result;
  unint64_t v1;

  result = sub_21FC5A6C8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_21FABABBC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255540AD8)
  {
    sub_21FABAC40();
    sub_21FA2A08C(&qword_255540AF0, (uint64_t (*)(uint64_t))sub_21FABAC40, MEMORY[0x24BDB9AF8]);
    v0 = sub_21FC5B070();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255540AD8);
  }
}

void sub_21FABAC40()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255540AE0)
  {
    sub_21FA5BE58(255, &qword_255540AE8);
    sub_21FA2CDB4();
    v0 = sub_21FC5B190();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255540AE0);
  }
}

void sub_21FABACBC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_21FABABBC();
    a3(255);
    sub_21FA2A08C(&qword_255540B00, (uint64_t (*)(uint64_t))sub_21FABABBC, MEMORY[0x24BDB96E0]);
    v5 = sub_21FC5B004();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t sub_21FABAD58@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for ClinicalSharingSleepStatisticsQuery(0);
  return sub_21FAB8A68(*a1, a1[1], a2);
}

uint64_t objectdestroyTm_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for ClinicalSharingSleepStatisticsQuery(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  v4 = v3 + *(int *)(v1 + 28);
  v5 = sub_21FC5A6C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

  return swift_deallocObject();
}

uint64_t sub_21FABAE44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for ClinicalSharingSleepStatisticsQuery(0);
  return sub_21FBE70DC(a1, 0, a2);
}

unint64_t sub_21FABAE98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_255540B10;
  if (!qword_255540B10)
  {
    sub_21FABACBC(255, &qword_255540B08, (void (*)(uint64_t))type metadata accessor for ClinicalSharingQueryOutput);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB94C8], v1);
    atomic_store(result, (unint64_t *)&qword_255540B10);
  }
  return result;
}

uint64_t type metadata accessor for SleepSeriesValueIterator(uint64_t a1)
{
  return sub_21FA44B58(a1, qword_255540BC0);
}

uint64_t sub_21FABAF04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for ClinicalSharingSleepStatisticsQuery(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;

  v4 = v0 + v3;
  swift_release();
  v5 = v0 + v3 + *(int *)(v1 + 28);
  v6 = sub_21FC5A6C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);

  return swift_deallocObject();
}

uint64_t sub_21FABAFAC@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ClinicalSharingSleepStatisticsQuery(0) - 8) + 80);
  return sub_21FAB9418(*(void **)(v1 + 16), *(void **)(v1 + 24), v1 + ((v3 + 32) & ~v3), a1);
}

void sub_21FABAFEC(uint64_t a1)
{
  sub_21FABB048(a1, &qword_255540B28, type metadata accessor for SleepSeriesValueIterator, sub_21FABB010, MEMORY[0x24BEE3258]);
}

uint64_t sub_21FABB010()
{
  return sub_21FA2A08C(&qword_255540B30, type metadata accessor for SleepSeriesValueIterator, (uint64_t)&unk_21FC6173C);
}

uint64_t sub_21FABB02C()
{
  return sub_21FA2A08C(&qword_255540B38, (uint64_t (*)(uint64_t))sub_21FABAFEC, MEMORY[0x24BEE3268]);
}

void sub_21FABB048(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a4();
    v11 = a5(a1, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

void sub_21FABB0B8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_255540B48)
  {
    sub_21FA2ED54(255, &qword_255540B18, (void (*)(uint64_t))type metadata accessor for PBSleepSeries.Value);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_255540B48);
  }
}

uint64_t sub_21FABB12C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FA2ED54(0, &qword_255540B18, (void (*)(uint64_t))type metadata accessor for PBSleepSeries.Value);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FABB180(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FA2ED54(0, &qword_255540B18, (void (*)(uint64_t))type metadata accessor for PBSleepSeries.Value);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_21FABB1D4()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_255540B50)
  {
    sub_21FC5B94C();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BE45AF0];
    sub_21FA5BE58(255, &qword_255540AE8);
    sub_21FA2A08C(&qword_255540B58, v0, MEMORY[0x24BE45AE8]);
    v1 = sub_21FC5B064();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_255540B50);
  }
}

uint64_t storeEnumTagSinglePayload for SleepSeriesValueIterator.EnumerationStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21FABB2C4 + 4 * byte_21FC61605[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21FABB2F8 + 4 * byte_21FC61600[v4]))();
}

uint64_t sub_21FABB2F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FABB300(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FABB308);
  return result;
}

uint64_t sub_21FABB314(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FABB31CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21FABB320(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FABB328(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepSeriesValueIterator.EnumerationStatus()
{
  return &type metadata for SleepSeriesValueIterator.EnumerationStatus;
}

char *sub_21FABB344(char *a1, char **a2, int *a3)
{
  int v3;
  char *v4;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  id v37;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a2[1];
    *((_QWORD *)a1 + 1) = v8;
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    v9 = a3[7];
    v10 = &a1[v9];
    v11 = (uint64_t)a2 + v9;
    v12 = sub_21FC5A83C();
    v13 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v14 = v4;
    v15 = v8;
    v13(v10, v11, v12);
    v16 = a3[8];
    v17 = a3[9];
    v18 = *(char **)((char *)a2 + v16);
    *(_QWORD *)&v7[v16] = v18;
    v19 = &v7[v17];
    v20 = (uint64_t)a2 + v17;
    v21 = sub_21FC5AC08();
    v22 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
    v23 = v18;
    v22(v19, v20, v21);
    v24 = a3[11];
    *(_QWORD *)&v7[a3[10]] = *(char **)((char *)a2 + a3[10]);
    v13(&v7[v24], (uint64_t)a2 + v24, v12);
    v25 = a3[12];
    v26 = a3[13];
    v27 = *(char **)((char *)a2 + v25);
    *(_QWORD *)&v7[v25] = v27;
    v28 = &v7[v26];
    v29 = (uint64_t)a2 + v26;
    v30 = *(uint64_t *)((char *)a2 + v26);
    v31 = *(uint64_t *)((char *)a2 + v26 + 8);
    *(_QWORD *)v28 = v30;
    *((_QWORD *)v28 + 1) = v31;
    *((_QWORD *)v28 + 2) = *(_QWORD *)(v29 + 16);
    *((_DWORD *)v28 + 6) = *(_DWORD *)(v29 + 24);
    v32 = *(int *)(type metadata accessor for PBSleepSeries.Value(0) + 32);
    v33 = &v28[v32];
    v34 = v29 + v32;
    v35 = sub_21FC5AD1C();
    v36 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
    v37 = v27;
    swift_bridgeObjectRetain();
    v36(v33, v34, v35);
  }
  return v7;
}

uint64_t sub_21FABB4CC(id *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t);
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = (char *)a1 + a2[7];
  v5 = sub_21FC5A83C();
  v6 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);

  v7 = (char *)a1 + a2[9];
  v8 = sub_21FC5AC08();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v6((char *)a1 + a2[11], v5);

  v9 = (char *)a1 + a2[13];
  swift_bridgeObjectRelease();
  v10 = &v9[*(int *)(type metadata accessor for PBSleepSeries.Value(0) + 32)];
  v11 = sub_21FC5AD1C();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
}

uint64_t sub_21FABB5B8(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  id v36;

  v6 = *(void **)a2;
  v7 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_21FC5A83C();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v13 = v6;
  v14 = v7;
  v12(v9, v10, v11);
  v15 = a3[8];
  v16 = a3[9];
  v17 = *(void **)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v17;
  v18 = a1 + v16;
  v19 = a2 + v16;
  v20 = sub_21FC5AC08();
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
  v22 = v17;
  v21(v18, v19, v20);
  v23 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v12(a1 + v23, a2 + v23, v11);
  v24 = a3[12];
  v25 = a3[13];
  v26 = *(void **)(a2 + v24);
  *(_QWORD *)(a1 + v24) = v26;
  v27 = a1 + v25;
  v28 = a2 + v25;
  v29 = *(_QWORD *)(a2 + v25);
  v30 = *(_QWORD *)(a2 + v25 + 8);
  *(_QWORD *)v27 = v29;
  *(_QWORD *)(v27 + 8) = v30;
  *(_QWORD *)(v27 + 16) = *(_QWORD *)(v28 + 16);
  *(_DWORD *)(v27 + 24) = *(_DWORD *)(v28 + 24);
  v31 = *(int *)(type metadata accessor for PBSleepSeries.Value(0) + 32);
  v32 = v27 + v31;
  v33 = v28 + v31;
  v34 = sub_21FC5AD1C();
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
  v36 = v26;
  swift_bridgeObjectRetain();
  v35(v32, v33, v34);
  return a1;
}

uint64_t sub_21FABB710(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  v9 = *(void **)(a2 + 8);
  v10 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v9;
  v11 = v9;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_21FC5A83C();
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24);
  v16(v13, v14, v15);
  v17 = a3[8];
  v18 = *(void **)(a2 + v17);
  v19 = *(void **)(a1 + v17);
  *(_QWORD *)(a1 + v17) = v18;
  v20 = v18;

  v21 = a3[9];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = sub_21FC5AC08();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 24))(v22, v23, v24);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v16(a1 + a3[11], a2 + a3[11], v15);
  v25 = a3[12];
  v26 = *(void **)(a2 + v25);
  v27 = *(void **)(a1 + v25);
  *(_QWORD *)(a1 + v25) = v26;
  v28 = v26;

  v29 = a3[13];
  v30 = a1 + v29;
  v31 = (_DWORD *)(a2 + v29);
  *(_QWORD *)v30 = *(_QWORD *)(a2 + v29);
  *(_QWORD *)(v30 + 8) = *(_QWORD *)(a2 + v29 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v30 + 16) = v31[4];
  *(_DWORD *)(v30 + 20) = v31[5];
  *(_DWORD *)(v30 + 24) = v31[6];
  v32 = *(int *)(type metadata accessor for PBSleepSeries.Value(0) + 32);
  v33 = v30 + v32;
  v34 = (char *)v31 + v32;
  v35 = sub_21FC5AD1C();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 24))(v33, v34, v35);
  return a1;
}

char *sub_21FABB8AC(char *a1, char *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v6 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v6;
  v7 = a3[7];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = sub_21FC5A83C();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = sub_21FC5AC08();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v16 = a3[11];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  v11(&a1[v16], &a2[v16], v10);
  v17 = a3[13];
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  v18 = &a1[v17];
  v19 = &a2[v17];
  *(_OWORD *)v18 = *(_OWORD *)&a2[v17];
  *((_QWORD *)v18 + 2) = *(_QWORD *)&a2[v17 + 16];
  *((_DWORD *)v18 + 6) = *(_DWORD *)&a2[v17 + 24];
  v20 = *(int *)(type metadata accessor for PBSleepSeries.Value(0) + 32);
  v21 = &v18[v20];
  v22 = &v19[v20];
  v23 = sub_21FC5AD1C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
  return a1;
}

uint64_t sub_21FABB9D4(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_21FC5A83C();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v13 = a3[8];
  v14 = *(void **)(a1 + v13);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);

  v15 = a3[9];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_21FC5AC08();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v12(a1 + v19, a2 + v19, v11);
  v20 = a3[12];
  v21 = *(void **)(a1 + v20);
  *(_QWORD *)(a1 + v20) = *(_QWORD *)(a2 + v20);

  v22 = a3[13];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = *(_QWORD *)(a2 + v22 + 8);
  *(_QWORD *)v23 = *(_QWORD *)(a2 + v22);
  *(_QWORD *)(v23 + 8) = v25;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
  *(_DWORD *)(v23 + 24) = *(_DWORD *)(v24 + 24);
  v26 = *(int *)(type metadata accessor for PBSleepSeries.Value(0) + 32);
  v27 = v23 + v26;
  v28 = v24 + v26;
  v29 = sub_21FC5AD1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 40))(v27, v28, v29);
  return a1;
}

uint64_t sub_21FABBB3C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FABBB48(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_21FC5A83C();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[7];
    }
    else
    {
      v12 = sub_21FC5AC08();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[9];
      }
      else
      {
        v10 = type metadata accessor for PBSleepSeries.Value(0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[13];
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_21FABBC0C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_21FABBC18(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = sub_21FC5A83C();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[7];
    }
    else
    {
      v12 = sub_21FC5AC08();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[9];
      }
      else
      {
        v10 = type metadata accessor for PBSleepSeries.Value(0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[13];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t sub_21FABBCD8()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = sub_21FC5A83C();
  if (v1 <= 0x3F)
  {
    result = sub_21FC5AC08();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for PBSleepSeries.Value(319);
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ClinicalSharingSleepStatisticsQuery.Duration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ClinicalSharingSleepStatisticsQuery.Duration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_21FABBE3C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_21FABBE44(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingSleepStatisticsQuery.Duration()
{
  return &type metadata for ClinicalSharingSleepStatisticsQuery.Duration;
}

unint64_t sub_21FABBE60()
{
  unint64_t result;

  result = qword_255540C18;
  if (!qword_255540C18)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC61714, &type metadata for SleepSeriesValueIterator.EnumerationStatus);
    atomic_store(result, (unint64_t *)&qword_255540C18);
  }
  return result;
}

uint64_t sub_21FABBEA4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v16;
  int64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v11 = 0;
  while (v8)
  {
    v12 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v13 = v12 | (v11 << 6);
LABEL_5:
    v14 = *(_BYTE *)(*(_QWORD *)(a1 + 48) + v13);
    sub_21FA2DB6C(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)v20 + 8);
    LOBYTE(v20[0]) = v14;
    v18[0] = v20[0];
    v18[1] = v20[1];
    v19 = v21;
    sub_21FABD214(v18, a2);
    result = sub_21FABE4BC((uint64_t)v18);
    if (v2)
      return swift_release();
  }
  if (__OFADD__(v11++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v11 >= v9)
    return swift_release();
  v16 = *(_QWORD *)(v5 + 8 * v11);
  if (v16)
  {
LABEL_19:
    v8 = (v16 - 1) & v16;
    v13 = __clz(__rbit64(v16)) + (v11 << 6);
    goto LABEL_5;
  }
  v17 = v11 + 1;
  if (v11 + 1 >= v9)
    return swift_release();
  v16 = *(_QWORD *)(v5 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v17 = v11 + 2;
  if (v11 + 2 >= v9)
    return swift_release();
  v16 = *(_QWORD *)(v5 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v17 = v11 + 3;
  if (v11 + 3 >= v9)
    return swift_release();
  v16 = *(_QWORD *)(v5 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v17 = v11 + 4;
  if (v11 + 4 >= v9)
    return swift_release();
  v16 = *(_QWORD *)(v5 + 8 * v17);
  if (v16)
  {
LABEL_18:
    v11 = v17;
    goto LABEL_19;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v9)
      return swift_release();
    v16 = *(_QWORD *)(v5 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

void HKClinicalGatewayEndpointSchema.asWebRequest(substitutions:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  void *v21;
  uint64_t *v22;
  uint64_t *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint8_t *v33;
  void *v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint8_t *v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  void *v48;
  uint64_t *v49;
  uint64_t v50;
  uint8_t *v51;
  void *v52;
  void *v53;
  id v54;
  id v55;
  unint64_t v56;
  unint64_t v57;
  uint8_t *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *boxed_opaque_existential_1;
  void *v64;
  void *v65;
  uint64_t v66;
  id v67;
  id v68;
  id v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  void *v73;
  id v74;
  id v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  char *v83;
  uint64_t v84;
  uint8_t *v85;
  uint64_t *v86;
  id v87;
  uint64_t v88;
  id v89[2];

  v89[1] = *(id *)MEMORY[0x24BDAC8D0];
  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v81 - v6;
  v8 = sub_21FC5A98C();
  v9 = *(uint8_t **)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v81 - v13;
  if (objc_msgSend(v2, sel_enabled))
  {
    v83 = v14;
    v84 = v8;
    v85 = v9;
    v86 = a2;
    v15 = v87;
    v16 = objc_msgSend(v2, sel_method);
    v17 = sub_21FC5B604();
    v19 = v18;

    v20._countAndFlagsBits = v17;
    v20._object = v19;
    HTTPMethod.init(rawValue:)(v20);
    if (LOBYTE(v89[0]) == 8)
    {
      type metadata accessor for WebRequestError();
      sub_21FAA5204();
      v21 = (void *)swift_allocError();
      v23 = v22;
      v24 = objc_msgSend(v2, sel_method);
      v25 = sub_21FC5B604();
      v27 = v26;

      *v23 = v25;
      v23[1] = v27;
      swift_storeEnumTagMultiPayload();
      v87 = v21;
      swift_willThrow();
      return;
    }
    v82 = LOBYTE(v89[0]);
    v89[0] = (id)MEMORY[0x24BEE4B00];
    sub_21FABBEA4(a1, v89);
    v87 = v15;
    v40 = v89[0];
    v41 = objc_msgSend(v2, sel_URL);
    v42 = sub_21FC5B604();

    v43 = sub_21FC1C520((uint64_t)v40, v42);
    v45 = v44;
    swift_bridgeObjectRelease();
    sub_21FC0A3DC(v7);
    v46 = v84;
    v47 = v85;
    if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v85 + 6))(v7, 1, v84) == 1)
    {
      swift_bridgeObjectRelease();
      sub_21FABE414((uint64_t)v7, (uint64_t)&qword_25406AAC8, (uint64_t)MEMORY[0x24BDCDAC0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_21FA2D1A0);
      type metadata accessor for WebRequestError();
      sub_21FAA5204();
      v48 = (void *)swift_allocError();
      *v49 = v43;
      v49[1] = v45;
      swift_storeEnumTagMultiPayload();
      v87 = v48;
      swift_willThrow();
      return;
    }
    v81 = (uint64_t)v40;
    swift_bridgeObjectRelease();
    (*((void (**)(char *, char *, uint64_t))v47 + 4))(v83, v7, v46);
    v50 = sub_21FABC824(a1);
    if (!v50)
    {
      v57 = 0xF000000000000000;
      goto LABEL_16;
    }
    v51 = v47;
    v52 = (void *)objc_opt_self();
    v53 = (void *)sub_21FC5B55C();
    swift_bridgeObjectRelease();
    v89[0] = 0;
    v54 = objc_msgSend(v52, sel_dataWithJSONObject_options_error_, v53, 0, v89);

    v55 = v89[0];
    if (v54)
    {
      v50 = sub_21FC5A9EC();
      v57 = v56;

      v46 = v84;
LABEL_16:
      LOBYTE(v89[0]) = v82;
      v58 = v85;
      v59 = v83;
      (*((void (**)(char *, char *, uint64_t))v85 + 2))(v12, v83, v46);
      v60 = sub_21FABCE40(v81);
      swift_bridgeObjectRelease();
      v61 = type metadata accessor for FHIRServerWebRequest();
      v62 = v86;
      v86[3] = v61;
      v62[4] = (uint64_t)&protocol witness table for FHIRServerWebRequest;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v62);
      FHIRServerWebRequest.init(method:url:body:headers:)((unsigned __int8 *)v89, (uint64_t)v12, v50, v57, v60, (uint64_t)boxed_opaque_existential_1);
      (*((void (**)(char *, uint64_t))v58 + 1))(v59, v46);
      return;
    }
    v64 = v55;
    swift_bridgeObjectRelease();
    v65 = (void *)sub_21FC5A8E4();

    v87 = v65;
    swift_willThrow();
    if (qword_25406B7F8 != -1)
      swift_once();
    v66 = sub_21FC5AFD4();
    __swift_project_value_buffer(v66, (uint64_t)qword_25406D830);
    v67 = v87;
    v68 = v87;
    v69 = v67;
    v70 = sub_21FC5AFC8();
    v71 = sub_21FC5B97C();
    if (os_log_type_enabled(v70, v71))
    {
      v72 = (uint8_t *)swift_slowAlloc();
      v73 = (void *)swift_slowAlloc();
      *(_DWORD *)v72 = 136315138;
      v74 = v87;
      v88 = (uint64_t)v87;
      v89[0] = v73;
      v75 = v87;
      sub_21FA2CDB4();
      v76 = sub_21FC5B64C();
      v88 = sub_21FABDCF8(v76, v77, (uint64_t *)v89);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_21FA27000, v70, v71, "Failed to serialize JSON data: %s", v72, 0xCu);
      swift_arrayDestroy();
      v78 = v73;
      v51 = v85;
      MEMORY[0x2207D105C](v78, -1, -1);
      MEMORY[0x2207D105C](v72, -1, -1);
    }
    else
    {
      v79 = v87;

    }
    v80 = v84;
    swift_willThrow();
    (*((void (**)(char *, uint64_t))v51 + 1))(v83, v80);
  }
  else
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v28 = sub_21FC5AFD4();
    __swift_project_value_buffer(v28, (uint64_t)qword_25406D830);
    v29 = v2;
    v30 = sub_21FC5AFC8();
    v31 = sub_21FC5B970();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc();
      v86 = a2;
      v33 = (uint8_t *)v32;
      v34 = (void *)swift_slowAlloc();
      v89[0] = v34;
      *(_DWORD *)v33 = 136315138;
      v85 = v33 + 4;
      v35 = objc_msgSend(v29, sel_name);
      v36 = sub_21FC5B604();
      v38 = v37;

      v88 = sub_21FABDCF8(v36, v38, (uint64_t *)v89);
      sub_21FC5BAC0();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21FA27000, v30, v31, "HKClinicalGatewayEndpointSchema: %s is not enabled.", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v34, -1, -1);
      v39 = v33;
      a2 = v86;
      MEMORY[0x2207D105C](v39, -1, -1);

    }
    else
    {

    }
    a2[4] = 0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
}

uint64_t sub_21FABC824(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  void (*v24)(char *, _QWORD, uint64_t, uint64_t);
  char *v25;
  id v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  char v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _OWORD v58[2];
  __int128 v59;
  __int128 v60;

  v2 = v1;
  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v54 - v8;
  v10 = sub_21FC5AAAC();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v55 = (uint64_t)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v56 = (char *)&v54 - v14;
  v15 = objc_msgSend(v2, sel_name);
  v16 = sub_21FC5B604();
  v18 = v17;

  if (v16 == 0xD000000000000013 && v18 == 0x800000021FC760F0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = sub_21FC5BDF0();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
      goto LABEL_14;
  }
  if (!*(_QWORD *)(a1 + 16) || (v20 = sub_21FA74060(5), (v21 & 1) == 0))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    goto LABEL_13;
  }
  sub_21FA2DB6C(*(_QWORD *)(a1 + 56) + 32 * v20, (uint64_t)&v59);
  v22 = MEMORY[0x24BEE4AD8];
  v23 = swift_dynamicCast();
  v24 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56);
  v24(v9, v23 ^ 1u, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
LABEL_13:
    sub_21FABE414((uint64_t)v9, (uint64_t)&qword_25406AAE8, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_21FA2D1A0);
    goto LABEL_14;
  }
  v25 = v56;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v56, v9, v10);
  v26 = objc_msgSend(v2, sel_body);
  if (!v26)
  {
LABEL_29:
    (*(void (**)(char *, uint64_t))(v11 + 8))(v25, v10);
LABEL_14:
    v31 = objc_msgSend(v2, sel_body);
    if (!v31)
      return 0;
    v32 = v31;
    v33 = sub_21FC5B568();

    return v33;
  }
  v27 = v26;
  v28 = sub_21FC5B568();

  if (!*(_QWORD *)(v28 + 16))
  {
    v59 = 0u;
    v60 = 0u;
LABEL_27:
    sub_21FABE414((uint64_t)&v59, (uint64_t)&qword_25406BB90, v22 + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_21FA80754);
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  v29 = sub_21FA73F34(0x6574656D61726170, 0xE900000000000072);
  if ((v30 & 1) != 0)
  {
    sub_21FA2DB6C(*(_QWORD *)(v28 + 56) + 32 * v29, (uint64_t)&v59);
  }
  else
  {
    v59 = 0u;
    v60 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v60 + 1))
    goto LABEL_27;
  sub_21FA2D1A0(0, &qword_255540C28, (uint64_t (*)(uint64_t))sub_21FABE45C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  v36 = v35;
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_28:
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  v54 = v36;
  v37 = *(_QWORD **)&v58[0];
  v38 = MEMORY[0x24BEE4B00];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v59 = v38;
  sub_21FA7858C(0x65636E69735FLL, 0xE600000000000000, 1701667182, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
  v40 = v59;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v7, v25, v10);
  v24(v7, 0, 1, v10);
  v41 = v55;
  static SchemaSubstitutions.determineSinceDate(lastFetchDate:)((uint64_t)v7, v55);
  sub_21FABE414((uint64_t)v7, (uint64_t)&qword_25406AAE8, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_21FA2D1A0);
  v42 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD15D0]), sel_init);
  objc_msgSend(v42, sel_setFormatOptions_, 275);
  v43 = (void *)sub_21FC5AA64();
  v44 = objc_msgSend(v42, sel_stringFromDate_, v43);

  v45 = sub_21FC5B604();
  v47 = v46;

  v48 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v48(v41, v10);
  v49 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v59 = v40;
  sub_21FA7858C(v45, v47, 0x74614465756C6176, 0xED0000656D695465, v49);
  v50 = v59;
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v37 = sub_21FA7E278(0, v37[2] + 1, 1, v37);
  v52 = v37[2];
  v51 = v37[3];
  if (v52 >= v51 >> 1)
    v37 = sub_21FA7E278((_QWORD *)(v51 > 1), v52 + 1, 1, v37);
  v37[2] = v52 + 1;
  v37[v52 + 4] = v50;
  *((_QWORD *)&v60 + 1) = v54;
  *(_QWORD *)&v59 = v37;
  sub_21FA7B73C(&v59, v58);
  v53 = swift_isUniquelyReferenced_nonNull_native();
  v57 = v28;
  sub_21FA78B00(v58, 0x6574656D61726170, 0xE900000000000072, v53);
  v33 = v57;
  swift_bridgeObjectRelease();
  v48((uint64_t)v56, v10);
  return v33;
}

uint64_t sub_21FABCE40(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  id v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  __int128 v15;

  v2 = v1;
  v4 = MEMORY[0x24BEE4AF8];
  v14 = MEMORY[0x24BEE4AF8];
  v5 = objc_msgSend(v2, sel_headers);
  if (!v5)
    return v4;
  v6 = v5;
  sub_21FABE3D8();
  v7 = sub_21FC5B7A8();

  if (!(v7 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_4;
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  result = sub_21FC5BC7C();
  v8 = result;
  if (!result)
  {
LABEL_12:
    swift_bridgeObjectRelease_n();
    return MEMORY[0x24BEE4AF8];
  }
LABEL_4:
  if (v8 >= 1)
  {
    v10 = 0;
    do
    {
      if ((v7 & 0xC000000000000001) != 0)
        v11 = (id)MEMORY[0x2207D057C](v10, v7);
      else
        v11 = *(id *)(v7 + 8 * v10 + 32);
      v12 = v11;
      ++v10;
      v13 = v11;
      *((_QWORD *)&v15 + 1) = &v14;
      *(_QWORD *)&v15 = a1;
      sub_21FABCF98((int)&v13, v15);

    }
    while (v8 != v10);
    swift_bridgeObjectRelease_n();
    return v14;
  }
  __break(1u);
  return result;
}

void sub_21FABCF98(int a1, __int128 using)
{
  _QWORD **v2;
  void **v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = (_QWORD **)*((_QWORD *)&using + 1);
  v4 = *v3;
  v5 = using;
  HKClinicalGatewayEndpointSchemaParameter.asHTTPHeader(using:)(*(Swift::OpaquePointer_optional *)((char *)&using - 8));
  v6 = v26;
  if (v26)
  {
    v7 = v25;
    v8 = v27;
    v9 = v28;
    v10 = *v2;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v2 = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v10 = sub_21FA7E100(0, v10[2] + 1, 1, v10);
      *v2 = v10;
    }
    v13 = v10[2];
    v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      v10 = sub_21FA7E100((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
      *v2 = v10;
    }
    v10[2] = v13 + 1;
    v14 = &v10[4 * v13];
    v14[4] = v7;
    v14[5] = v6;
    v14[6] = v8;
    v14[7] = v9;
  }
  else
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v15 = sub_21FC5AFD4();
    __swift_project_value_buffer(v15, (uint64_t)qword_25406D830);
    v16 = v4;
    v17 = sub_21FC5AFC8();
    v18 = sub_21FC5B970();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v24 = swift_slowAlloc();
      v25 = v24;
      *(_DWORD *)v19 = 136315138;
      v20 = objc_msgSend(v16, sel_param);
      v21 = sub_21FC5B604();
      v23 = v22;

      v29 = sub_21FABDCF8(v21, v23, &v25);
      sub_21FC5BAC0();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21FA27000, v17, v18, "Unable to create HTTPHeader: %s", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v24, -1, -1);
      MEMORY[0x2207D105C](v19, -1, -1);

    }
    else
    {

    }
  }
}

void sub_21FABD214(_BYTE *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(void);
  uint64_t v37;
  id v38;
  void *v39;
  id v40;
  void (*v41)(uint64_t, uint64_t);
  __int128 v42;
  _QWORD *v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  int v49;
  void (*v50)(char *, uint64_t, uint64_t, uint64_t);
  char *v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(void);
  uint64_t v57;
  id v58;
  void *v59;
  id v60;
  void (*v61)(uint64_t, uint64_t);
  __int128 v62;
  _QWORD *v63;
  char v64;
  uint64_t v65;
  char v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char v86;
  uint64_t v87;
  _BYTE v88[32];
  uint64_t v89;
  _OWORD v90[2];
  uint64_t v91;
  _OWORD v92[2];
  uint64_t v93;
  _OWORD v94[2];
  uint64_t v95;
  _OWORD v96[2];
  uint64_t v97;
  uint64_t v98;

  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v82 = (char *)&v77 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v77 - v11;
  v98 = sub_21FC5AAAC();
  v13 = *(_QWORD *)(v98 - 8);
  v14 = MEMORY[0x24BDAC7A8](v98);
  v81 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v83 = (uint64_t)&v77 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v84 = (uint64_t)&v77 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v85 = (char *)&v77 - v20;
  LOBYTE(v96[0]) = *a1;
  sub_21FA2DB6C((uint64_t)(a1 + 8), (uint64_t)v96 + 8);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v21 = v94[0];
    v22 = *a1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v96[0] = *a2;
    *a2 = 0x8000000000000000;
    sub_21FA78C30(v21, *((uint64_t *)&v21 + 1), v22, isUniquelyReferenced_nonNull_native);
    *a2 = *(_QWORD *)&v96[0];
    swift_bridgeObjectRelease();
    return;
  }
  v79 = a2;
  v80 = v2;
  v24 = *a1;
  LOBYTE(v96[0]) = *a1;
  if (ContentVariables.rawValue.getter() == 0xD000000000000011 && v25 == 0x800000021FC74A60)
  {
    swift_bridgeObjectRelease();
    v26 = v13;
  }
  else
  {
    v27 = sub_21FC5BDF0();
    swift_bridgeObjectRelease();
    v26 = v13;
    if ((v27 & 1) == 0)
      goto LABEL_12;
  }
  LOBYTE(v96[0]) = v24;
  sub_21FA2DB6C((uint64_t)(a1 + 8), (uint64_t)v96 + 8);
  v28 = v98;
  v29 = swift_dynamicCast();
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
  if (v29)
  {
    v30(v12, 0, 1, v28);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v12, 1, v28) != 1)
    {
      v31 = v85;
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v85, v12, v28);
      v32 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
      LODWORD(v81) = *a1;
      v33 = (uint64_t)v82;
      v32(v82, v31, v28);
      v30((char *)v33, 0, 1, v28);
      v34 = v84;
      static SchemaSubstitutions.determineSinceDate(lastFetchDate:)(v33, v84);
      v35 = v28;
      v36 = MEMORY[0x24BDCE900];
      sub_21FABE414(v33, (uint64_t)&qword_25406AAE8, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_21FA2D1A0);
      *(_QWORD *)&v96[0] = 25959;
      *((_QWORD *)&v96[0] + 1) = 0xE200000000000000;
      v32((char *)v33, (char *)v34, v35);
      v30((char *)v33, 0, 1, v35);
      v37 = v83;
      static SchemaSubstitutions.determineSinceDate(lastFetchDate:)(v33, v83);
      sub_21FABE414(v33, (uint64_t)&qword_25406AAE8, (uint64_t)v36, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_21FA2D1A0);
      v38 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD15D0]), sel_init);
      objc_msgSend(v38, sel_setFormatOptions_, 275);
      v39 = (void *)sub_21FC5AA64();
      v40 = objc_msgSend(v38, sel_stringFromDate_, v39);

      sub_21FC5B604();
      v41 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
      v41(v37, v35);
      sub_21FC5B6AC();
      swift_bridgeObjectRelease();
      v42 = v96[0];
      v41(v34, v35);
      v43 = v79;
      v44 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v96[0] = *v43;
      *v43 = 0x8000000000000000;
      sub_21FA78C30(v42, *((uint64_t *)&v42 + 1), v81, v44);
      *v43 = *(_QWORD *)&v96[0];
      swift_bridgeObjectRelease();
      v41((uint64_t)v85, v35);
      return;
    }
  }
  else
  {
    v30(v12, 1, 1, v28);
  }
  sub_21FABE414((uint64_t)v12, (uint64_t)&qword_25406AAE8, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_21FA2D1A0);
LABEL_12:
  v45 = *a1;
  LOBYTE(v96[0]) = *a1;
  if (ContentVariables.rawValue.getter() == 0xD000000000000015 && v46 == 0x800000021FC74A80)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v47 = sub_21FC5BDF0();
    swift_bridgeObjectRelease();
    if ((v47 & 1) == 0)
      goto LABEL_21;
  }
  LOBYTE(v96[0]) = v45;
  sub_21FA2DB6C((uint64_t)(a1 + 8), (uint64_t)v96 + 8);
  v48 = v98;
  v49 = swift_dynamicCast();
  v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
  if (v49)
  {
    v50(v8, 0, 1, v48);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v8, 1, v48) != 1)
    {
      v51 = v81;
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v81, v8, v48);
      v52 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
      LODWORD(v85) = *a1;
      v53 = (uint64_t)v82;
      v52(v82, v51, v48);
      v50((char *)v53, 0, 1, v48);
      v78 = v26;
      v54 = v84;
      static SchemaSubstitutions.determineSinceDate(lastFetchDate:)(v53, v84);
      v55 = v48;
      v56 = MEMORY[0x24BDCE900];
      sub_21FABE414(v53, (uint64_t)&qword_25406AAE8, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_21FA2D1A0);
      *(_QWORD *)&v96[0] = 25959;
      *((_QWORD *)&v96[0] + 1) = 0xE200000000000000;
      v52((char *)v53, (char *)v54, v55);
      v50((char *)v53, 0, 1, v55);
      v57 = v83;
      static SchemaSubstitutions.determineSinceDate(lastFetchDate:)(v53, v83);
      sub_21FABE414(v53, (uint64_t)&qword_25406AAE8, (uint64_t)v56, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_21FA2D1A0);
      v58 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD15D0]), sel_init);
      objc_msgSend(v58, sel_setFormatOptions_, 1907);
      v59 = (void *)sub_21FC5AA64();
      v60 = objc_msgSend(v58, sel_stringFromDate_, v59);

      sub_21FC5B604();
      v61 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
      v61(v57, v55);
      sub_21FC5B6AC();
      swift_bridgeObjectRelease();
      v62 = v96[0];
      v61(v54, v55);
      v63 = v79;
      v64 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v96[0] = *v63;
      *v63 = 0x8000000000000000;
      sub_21FA78C30(v62, *((uint64_t *)&v62 + 1), v85, v64);
      *v63 = *(_QWORD *)&v96[0];
      swift_bridgeObjectRelease();
      v61((uint64_t)v51, v55);
      return;
    }
  }
  else
  {
    v50(v8, 1, 1, v48);
  }
  sub_21FABE414((uint64_t)v8, (uint64_t)&qword_25406AAE8, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_21FA2D1A0);
LABEL_21:
  if (qword_25406B7F8 != -1)
    swift_once();
  v65 = sub_21FC5AFD4();
  __swift_project_value_buffer(v65, (uint64_t)qword_25406D830);
  LOBYTE(v96[0]) = *a1;
  v66 = v96[0];
  sub_21FA2DB6C((uint64_t)(a1 + 8), (uint64_t)v96 + 8);
  v94[0] = v96[0];
  v94[1] = v96[1];
  v95 = v97;
  LOBYTE(v92[0]) = v66;
  sub_21FA2DB6C((uint64_t)(a1 + 8), (uint64_t)v92 + 8);
  v90[0] = v92[0];
  v90[1] = v92[1];
  v91 = v93;
  v67 = sub_21FC5AFC8();
  v68 = sub_21FC5B970();
  if (os_log_type_enabled(v67, v68))
  {
    v69 = swift_slowAlloc();
    v70 = swift_slowAlloc();
    v89 = v70;
    *(_DWORD *)v69 = 136315394;
    v71 = v94[0];
    LOBYTE(v87) = v94[0];
    sub_21FA2DB6C((uint64_t)v94 + 8, (uint64_t)v88);
    v86 = v71;
    v72 = ContentVariables.rawValue.getter();
    v74 = v73;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v88);
    v87 = sub_21FABDCF8(v72, v74, &v89);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    sub_21FABE4BC((uint64_t)v94);
    *(_WORD *)(v69 + 12) = 2080;
    sub_21FA2DB6C((uint64_t)v90 + 8, (uint64_t)v88);
    v75 = sub_21FC5B64C();
    v87 = sub_21FABDCF8(v75, v76, &v89);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    sub_21FABE4BC((uint64_t)v90);
    _os_log_impl(&dword_21FA27000, v67, v68, "Unexpected type for key: %s -- %s", (uint8_t *)v69, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v70, -1, -1);
    MEMORY[0x2207D105C](v69, -1, -1);
  }
  else
  {
    sub_21FABE4BC((uint64_t)v94);
    sub_21FABE4BC((uint64_t)v90);
  }

}

