uint64_t sub_21FBF19CC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  id *v25;
  id *v26;
  id v27;
  id v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id *v56;

  v42 = a1;
  v7 = sub_21FC5AAAC();
  v47 = *(_QWORD *)(v7 - 8);
  v48 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v46 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v45 = (char *)&v40 - v10;
  v43 = type metadata accessor for ClinicalSharingElectrocardiogramQuery.ElectrocardiogramData(0);
  v11 = MEMORY[0x24BDAC7A8](v43);
  v52 = (uint64_t)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v44 = (id *)((char *)&v40 - v14);
  result = MEMORY[0x24BDAC7A8](v13);
  v56 = (id *)((char *)&v40 - v17);
  v51 = a3;
  v41 = a2;
  if (a3 != a2)
  {
    v18 = *(_QWORD *)(v16 + 72);
    v19 = v18 * (v51 - 1);
    v49 = v18;
    v20 = v18 * v51;
    v21 = type metadata accessor for ClinicalSharingElectrocardiogramQuery.ElectrocardiogramData;
    v22 = v45;
LABEL_5:
    v23 = 0;
    v55 = v42;
    v50 = v20;
    while (1)
    {
      v24 = *a4;
      v54 = v20 + v23;
      v25 = v56;
      sub_21FA2D120(v20 + v23 + v24, (uint64_t)v56, v21);
      v53 = v19 + v23;
      v26 = v44;
      sub_21FA2D120(v19 + v23 + v24, (uint64_t)v44, v21);
      v27 = objc_msgSend(*v25, sel_endDate);
      sub_21FC5AA94();

      v28 = objc_msgSend(*v26, sel_endDate);
      v29 = v21;
      v30 = v19;
      v31 = v46;
      sub_21FC5AA94();

      LOBYTE(v28) = sub_21FC5AA7C();
      v32 = a4;
      v33 = *(void (**)(char *, uint64_t))(v47 + 8);
      v34 = v31;
      v35 = v48;
      v33(v34, v48);
      v36 = v35;
      v19 = v30;
      v21 = v29;
      v33(v22, v36);
      a4 = v32;
      v37 = (uint64_t)v26;
      v20 = v50;
      sub_21FA326EC(v37, v29);
      result = sub_21FA326EC((uint64_t)v56, v29);
      if ((v28 & 1) == 0)
      {
LABEL_4:
        v19 += v49;
        v20 += v49;
        if (++v51 == v41)
          return result;
        goto LABEL_5;
      }
      v38 = *v32;
      if (!*v32)
        break;
      v39 = v38 + v19 + v23;
      sub_21FA2D23C(v38 + v20 + v23, v52, v29);
      swift_arrayInitWithTakeFrontToBack();
      result = sub_21FA2D23C(v52, v39, v29);
      v23 -= v49;
      ++v55;
      a4 = v32;
      if (v51 == v55)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_21FBF1CF0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id *v23;
  id *v24;
  id v25;
  char *v26;
  id v27;
  char *v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  id *v40;
  id *v41;
  id v42;
  char *v43;
  id v44;
  uint64_t v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  id *v64;
  id *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;

  v68 = sub_21FC5AAAC();
  v8 = *(_QWORD *)(v68 - 8);
  v9 = MEMORY[0x24BDAC7A8](v68);
  v67 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v66 = (char *)&v56 - v11;
  v61 = type metadata accessor for ClinicalSharingElectrocardiogramQuery.ElectrocardiogramData(0);
  v12 = MEMORY[0x24BDAC7A8](v61);
  v65 = (id *)((char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v12);
  v64 = (id *)((char *)&v56 - v14);
  v16 = *(_QWORD *)(v15 + 72);
  if (!v16)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v16 == -1)
    goto LABEL_62;
  v17 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v16 == -1)
    goto LABEL_63;
  v18 = (uint64_t)(a2 - a1) / v16;
  v71 = a1;
  v70 = a4;
  v19 = v17 / v16;
  if (v18 >= v17 / v16)
  {
    if ((v19 & 0x8000000000000000) == 0)
    {
      v21 = v19 * v16;
      if (a4 < a2 || a2 + v21 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v37 = a4 + v21;
      v69 = a4 + v21;
      v71 = a2;
      if (v21 >= 1 && a1 < a2)
      {
        v39 = -v16;
        v63 = v8;
        v58 = a1;
        v59 = a4;
        v40 = v65;
        do
        {
          v62 = a3 + v39;
          v41 = v64;
          sub_21FA2D120(v37 + v39, (uint64_t)v64, type metadata accessor for ClinicalSharingElectrocardiogramQuery.ElectrocardiogramData);
          v60 = a2 + v39;
          sub_21FA2D120(a2 + v39, (uint64_t)v40, type metadata accessor for ClinicalSharingElectrocardiogramQuery.ElectrocardiogramData);
          v42 = objc_msgSend(*v41, sel_endDate);
          v43 = v66;
          sub_21FC5AA94();

          v44 = objc_msgSend(*v40, sel_endDate);
          v45 = v39;
          v46 = v67;
          sub_21FC5AA94();

          LOBYTE(v44) = sub_21FC5AA7C();
          v47 = *(void (**)(char *, uint64_t))(v8 + 8);
          v48 = v46;
          v49 = v68;
          v47(v48, v68);
          v47(v43, v49);
          sub_21FA326EC((uint64_t)v40, type metadata accessor for ClinicalSharingElectrocardiogramQuery.ElectrocardiogramData);
          sub_21FA326EC((uint64_t)v41, type metadata accessor for ClinicalSharingElectrocardiogramQuery.ElectrocardiogramData);
          if ((v44 & 1) != 0)
          {
            v39 = v45;
            v50 = v62;
            if (a3 < a2 || v62 >= a2)
            {
              v53 = v60;
              swift_arrayInitWithTakeFrontToBack();
              v8 = v63;
              v52 = v58;
              v51 = v59;
            }
            else
            {
              v8 = v63;
              v52 = v58;
              v51 = v59;
              v53 = v60;
              if (a3 != a2)
                swift_arrayInitWithTakeBackToFront();
            }
            v71 += v39;
          }
          else
          {
            v54 = v69;
            v69 += v45;
            v39 = v45;
            v50 = v62;
            if (a3 < v54 || v62 >= v54)
            {
              swift_arrayInitWithTakeFrontToBack();
              v53 = a2;
              v8 = v63;
              v52 = v58;
              v51 = v59;
            }
            else
            {
              v8 = v63;
              v52 = v58;
              v51 = v59;
              if (a3 != v54)
                swift_arrayInitWithTakeBackToFront();
              v53 = a2;
            }
          }
          v37 = v69;
          if (v69 <= v51)
            break;
          a2 = v53;
          a3 = v50;
        }
        while (v53 > v52);
      }
      goto LABEL_60;
    }
  }
  else if ((v18 & 0x8000000000000000) == 0)
  {
    v20 = v18 * v16;
    if (a4 < a1 || a1 + v20 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v62 = a4 + v20;
    v69 = a4 + v20;
    if (v20 >= 1 && a2 < a3)
    {
      v63 = v8;
      v60 = a3;
      v57 = v16;
      v23 = v64;
      v24 = v65;
      do
      {
        sub_21FA2D120(a2, (uint64_t)v23, type metadata accessor for ClinicalSharingElectrocardiogramQuery.ElectrocardiogramData);
        sub_21FA2D120(a4, (uint64_t)v24, type metadata accessor for ClinicalSharingElectrocardiogramQuery.ElectrocardiogramData);
        v25 = objc_msgSend(*v23, sel_endDate);
        v26 = v66;
        sub_21FC5AA94();

        v27 = objc_msgSend(*v24, sel_endDate);
        v28 = v67;
        sub_21FC5AA94();

        v29 = sub_21FC5AA7C();
        v30 = *(void (**)(char *, uint64_t))(v8 + 8);
        v31 = v68;
        v30(v28, v68);
        v30(v26, v31);
        sub_21FA326EC((uint64_t)v24, type metadata accessor for ClinicalSharingElectrocardiogramQuery.ElectrocardiogramData);
        sub_21FA326EC((uint64_t)v23, type metadata accessor for ClinicalSharingElectrocardiogramQuery.ElectrocardiogramData);
        v32 = v71;
        if ((v29 & 1) != 0)
        {
          v33 = v57;
          v34 = a2 + v57;
          if (v71 < a2 || v71 >= v34)
          {
            swift_arrayInitWithTakeFrontToBack();
            v35 = v60;
            v8 = v63;
          }
          else
          {
            v35 = v60;
            v8 = v63;
            if (v71 == a2)
              v32 = a2;
            else
              swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          v33 = v57;
          v36 = v70 + v57;
          if (v71 < v70 || v71 >= v36)
          {
            swift_arrayInitWithTakeFrontToBack();
            v35 = v60;
            v8 = v63;
          }
          else
          {
            v35 = v60;
            v8 = v63;
            if (v71 != v70)
              swift_arrayInitWithTakeBackToFront();
          }
          v70 = v36;
          v34 = a2;
        }
        v71 = v32 + v33;
        a4 = v70;
        if (v70 >= v62)
          break;
        a2 = v34;
      }
      while (v34 < v35);
    }
LABEL_60:
    sub_21FBF2658(&v71, &v70, (uint64_t *)&v69, type metadata accessor for ClinicalSharingElectrocardiogramQuery.ElectrocardiogramData);
    return 1;
  }
LABEL_64:
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

char *sub_21FBF2344(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_21FBF3098();
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21FBF243C(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)sub_21FC5BCB8();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_21FBF24E4(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)sub_21FC5BCB8();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_21FBF258C(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -56)
  {
    result = (char *)sub_21FC5BCB8();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 56;
    if (result != v3 || result >= &v3[56 * v6])
      return (char *)memmove(result, v3, 56 * v6);
  }
  return result;
}

uint64_t sub_21FBF264C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_21FBF2658(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEA58]);
}

uint64_t sub_21FBF2658(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  v6 = *a3;
  result = a4(0);
  v8 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1)
    goto LABEL_14;
  if (v9 / v8 < 0)
  {
LABEL_15:
    result = sub_21FC5BCB8();
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
    return swift_arrayInitWithTakeFrontToBack();
  if (v4 != v5)
    return swift_arrayInitWithTakeBackToFront();
  return result;
}

char *sub_21FBF2764(uint64_t a1)
{
  return sub_21FBF2344(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void sub_21FBF2778()
{
  JUMPOUT(0x2207D07A4);
}

uint64_t sub_21FBF278C(uint64_t a1)
{
  return sub_21FC0210C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_21FBF27A0(uint64_t a1)
{
  return sub_21FC02590(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_21FBF27B4(_QWORD *a1)
{
  return sub_21FC01F18(0, a1[2], 0, a1);
}

uint64_t sub_21FBF27C8(uint64_t a1)
{
  return sub_21FC02C00(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_21FBF27DC(_QWORD *a1)
{
  return sub_21FC02D8C(0, a1[2], 0, a1);
}

uint64_t sub_21FBF27F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v2 = sub_21FC5AAF4();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v18 - v7;
  sub_21FA2D1A0(0, &qword_25406BE78, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v18 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  sub_21FBAF1C0();
  v19 = sub_21FC5B898();
  if (v13)
  {
    v14 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v18 = *(_QWORD *)(v3 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v15(v12, v14, v2);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v16(v12, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v12, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v12, v2);
      sub_21FBECDF8((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v14 += v18;
      if (!--v13)
        goto LABEL_7;
    }
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v16(v12, 1, 1, v2);
  }
  return v19;
}

uint64_t sub_21FBF29B8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = type metadata accessor for ClinicalSharingElectrocardiogramQuery(0);
  result = sub_21FBEB8D4(*a1, *(_QWORD *)(v2+ ((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64)+ ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))+ 7) & 0xFFFFFFFFFFFFF8)));
  *a2 = result;
  return result;
}

void sub_21FBF2A20()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554CE78)
  {
    sub_21FBECD94();
    sub_21FA2A08C(&qword_25554CE80, (uint64_t (*)(uint64_t))sub_21FBECD94, MEMORY[0x24BEE12C8]);
    v0 = sub_21FC5B130();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554CE78);
  }
}

void sub_21FBF2AB4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554CE88)
  {
    sub_21FA84A5C(255, &qword_25554CE90, type metadata accessor for ClinicalSharingElectrocardiogramQuery.ElectrocardiogramData, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FBF2BA4();
    sub_21FA84B70(&qword_25554CEA8, &qword_25554CE90, type metadata accessor for ClinicalSharingElectrocardiogramQuery.ElectrocardiogramData);
    sub_21FA2A08C(&qword_25554CEB0, (uint64_t (*)(uint64_t))sub_21FBF2BA4, MEMORY[0x24BDB95F8]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554CE88);
  }
}

uint64_t type metadata accessor for ClinicalSharingElectrocardiogramQuery.ElectrocardiogramData(uint64_t a1)
{
  return sub_21FA44B58(a1, qword_25554CFB8);
}

void sub_21FBF2BA4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554CE98)
  {
    sub_21FBF2A20();
    sub_21FA2CDB4();
    sub_21FA2A08C(&qword_25554CEA0, (uint64_t (*)(uint64_t))sub_21FBF2A20, MEMORY[0x24BDB9970]);
    v0 = sub_21FC5B04C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554CE98);
  }
}

void sub_21FBF2C48()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554CEB8)
  {
    sub_21FBF2AB4();
    sub_21FA2A08C(&qword_25554CEC0, (uint64_t (*)(uint64_t))sub_21FBF2AB4, MEMORY[0x24BDB98F0]);
    v0 = sub_21FC5B0F4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554CEB8);
  }
}

void sub_21FBF2CC0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554CEC8)
  {
    sub_21FBF2C48();
    type metadata accessor for ClinicalSharingQueryOutput(255);
    sub_21FA2A08C(&qword_25554CED0, (uint64_t (*)(uint64_t))sub_21FBF2C48, MEMORY[0x24BDB98D8]);
    v0 = sub_21FC5B004();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554CEC8);
  }
}

uint64_t objectdestroyTm_10()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (int *)type metadata accessor for ClinicalSharingElectrocardiogramQuery(0);
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  v4 = v3 + v1[5];
  v5 = sub_21FC5A6C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

  swift_release();
  return swift_deallocObject();
}

void sub_21FBF2E18(void **a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for ClinicalSharingElectrocardiogramQuery(0);
  sub_21FBEBCE4(a1, a2);
}

uint64_t sub_21FBF2E78()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (int *)type metadata accessor for ClinicalSharingElectrocardiogramQuery(0);
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  v4 = v3 + v1[5];
  v5 = sub_21FC5A6C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

  return swift_deallocObject();
}

uint64_t sub_21FBF2F1C@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for ClinicalSharingElectrocardiogramQuery(0);
  return sub_21FBEBE24(*a1, a2);
}

void sub_21FBF2F6C(uint64_t a1)
{
  sub_21FABB048(a1, &qword_25554CEE0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(void))sub_21FBAF1C0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE24D8]);
}

void sub_21FBF2F90()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25554CEE8)
  {
    sub_21FC5AAF4();
    sub_21FABB048(255, (unint64_t *)&qword_25406BE18, (uint64_t (*)(uint64_t))MEMORY[0x24BE45940], sub_21FBF3020, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE16D8]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25554CEE8);
  }
}

uint64_t sub_21FBF3020()
{
  return sub_21FA2A08C(&qword_25406BC08, (uint64_t (*)(uint64_t))MEMORY[0x24BE45940], MEMORY[0x24BE45950]);
}

uint64_t sub_21FBF303C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FA2D1A0(0, &qword_25553E0F8, type metadata accessor for PBDateRange, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_21FBF3098()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554CEF0)
  {
    sub_21FBF359C(255, &qword_25554CEF8, MEMORY[0x24BEE1768], MEMORY[0x24BEE1780], MEMORY[0x24BEE1B68]);
    v0 = sub_21FC5BDD8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554CEF0);
  }
}

void sub_21FBF310C()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25554CF10)
  {
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FBF31BC(255, &qword_25554CF18, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    type metadata accessor for ClinicalSharingElectrocardiogramQuery.ElectrocardiogramData(255);
    sub_21FBF32E4(&qword_25554CF28, &qword_25554CF18, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    v1 = sub_21FC5B064();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25554CF10);
  }
}

void sub_21FBF31BC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_21FA80754(255, &qword_25554CF20, MEMORY[0x24BEE14E8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v7 = v6;
    v8 = sub_21FA2CDB4();
    v9 = a3(a1, v7, v8, MEMORY[0x24BEE3F20]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t sub_21FBF3244()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25554CF30;
  if (!qword_25554CF30)
  {
    sub_21FA84A5C(255, &qword_25554CF08, type metadata accessor for ClinicalSharingElectrocardiogramQuery.ElectrocardiogramData, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDBA1D0], v1);
    atomic_store(result, (unint64_t *)&qword_25554CF30);
  }
  return result;
}

uint64_t sub_21FBF32A4()
{
  id *v0;

  return swift_deallocObject();
}

void sub_21FBF32D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_21FBBEE00(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(void **)(v2 + 40));
}

uint64_t sub_21FBF32E4(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FBF31BC(255, a2, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FBF3324()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (int *)type metadata accessor for ClinicalSharingElectrocardiogramQuery(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = v0 + v3;
  swift_release();
  v6 = v5 + v1[5];
  v7 = sub_21FC5A6C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);

  return swift_deallocObject();
}

void sub_21FBF33E4(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for ClinicalSharingElectrocardiogramQuery(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_21FBEC624(a1, v2 + v6, *(void **)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)), a2);
}

uint64_t sub_21FBF3444(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11[4];
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  sub_21FBF35E4();
  result = sub_21FC5B898();
  v12 = result;
  if (v2)
  {
    v4 = (unint64_t *)(a1 + 56);
    do
    {
      v5 = *(v4 - 3);
      v6 = *(v4 - 2);
      v7 = *(v4 - 1);
      v8 = *v4;
      swift_bridgeObjectRetain();
      sub_21FA32314(v7, v8);
      sub_21FBED42C(v11, v5, v6, v7, v8);
      v9 = v11[2];
      v10 = v11[3];
      swift_bridgeObjectRelease();
      sub_21FA2D770(v9, v10);
      v4 += 4;
      --v2;
    }
    while (v2);
    return v12;
  }
  return result;
}

uint64_t sub_21FBF3508(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_21FC5B898();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_21FBED280(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

void sub_21FBF359C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v6 = a5(0, a3, a4);
    if (!v7)
      atomic_store(v6, a2);
  }
}

unint64_t sub_21FBF35E4()
{
  unint64_t result;

  result = qword_25406CBF8;
  if (!qword_25406CBF8)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC61974, &type metadata for ClinicalSharingNodeMetadata);
    atomic_store(result, (unint64_t *)&qword_25406CBF8);
  }
  return result;
}

void sub_21FBF3628()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554CF58)
  {
    sub_21FBF35E4();
    v0 = sub_21FC5BB68();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554CF58);
  }
}

uint64_t sub_21FBF3680(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  v2 = sub_21FC5ABF0();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v14 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  sub_21FBF3790();
  result = sub_21FC5B898();
  v15 = result;
  if (v9)
  {
    v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v12 = *(_QWORD *)(v3 + 72);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v13(v6, v11, v2);
      sub_21FBEDFD8((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v11 += v12;
      --v9;
    }
    while (v9);
    return v15;
  }
  return result;
}

uint64_t sub_21FBF3790()
{
  return sub_21FA2A08C(&qword_255540E08, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], MEMORY[0x24BDCF2A8]);
}

void sub_21FBF37AC(uint64_t a1)
{
  sub_21FABB048(a1, &qword_255540E00, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], sub_21FBF3790, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE24D8]);
}

void **sub_21FBF37D0(void **a1, void **a2, uint64_t a3)
{
  int v3;
  char *v4;
  void **v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  char *v17;
  char *v19;
  char *v20;
  uint64_t v21;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = *(uint64_t *)((char *)a2 + v6 + 8);
    *(_QWORD *)v7 = *(void **)((char *)a2 + v6);
    *((_QWORD *)v7 + 1) = v9;
    *((_DWORD *)v7 + 4) = *(_DWORD *)((char *)a2 + v6 + 16);
    v10 = *(uint64_t *)((char *)a2 + v6 + 32);
    *((_QWORD *)v7 + 3) = *(void **)((char *)a2 + v6 + 24);
    *((_QWORD *)v7 + 4) = v10;
    v11 = *(uint64_t *)((char *)a2 + v6 + 48);
    *((_QWORD *)v7 + 5) = *(void **)((char *)a2 + v6 + 40);
    *((_QWORD *)v7 + 6) = v11;
    v12 = *(uint64_t *)((char *)a2 + v6 + 64);
    *((_QWORD *)v7 + 7) = *(void **)((char *)a2 + v6 + 56);
    *((_QWORD *)v7 + 8) = v12;
    v13 = *(uint64_t *)((char *)a2 + v6 + 80);
    *((_QWORD *)v7 + 9) = *(void **)((char *)a2 + v6 + 72);
    *((_QWORD *)v7 + 10) = v13;
    v21 = *(uint64_t *)((char *)a2 + v6 + 96);
    *((_QWORD *)v7 + 11) = *(void **)((char *)a2 + v6 + 88);
    *((_QWORD *)v7 + 12) = v21;
    *((_DWORD *)v7 + 26) = *(_DWORD *)((char *)a2 + v6 + 104);
    v7[120] = *((_BYTE *)a2 + v6 + 120);
    *((_QWORD *)v7 + 14) = *(void **)((char *)a2 + v6 + 112);
    v14 = *(int *)(type metadata accessor for PBECGMeasurement(0) + 56);
    v19 = &v8[v14];
    v20 = &v7[v14];
    v15 = sub_21FC5AD1C();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    v17 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16(v20, v19, v15);
  }
  return v5;
}

uint64_t sub_21FBF391C(id *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  v4 = (char *)a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = &v4[*(int *)(type metadata accessor for PBECGMeasurement(0) + 56)];
  v6 = sub_21FC5AD1C();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

void **sub_21FBF39AC(void **a1, void **a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  id v16;
  char *v18;
  char *v19;

  v3 = *a2;
  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = *(uint64_t *)((char *)a2 + v4 + 8);
  *(_QWORD *)v5 = *(void **)((char *)a2 + v4);
  *((_QWORD *)v5 + 1) = v7;
  *((_DWORD *)v5 + 4) = *(_DWORD *)((char *)a2 + v4 + 16);
  v8 = *(uint64_t *)((char *)a2 + v4 + 32);
  *((_QWORD *)v5 + 3) = *(void **)((char *)a2 + v4 + 24);
  *((_QWORD *)v5 + 4) = v8;
  v9 = *(uint64_t *)((char *)a2 + v4 + 48);
  *((_QWORD *)v5 + 5) = *(void **)((char *)a2 + v4 + 40);
  *((_QWORD *)v5 + 6) = v9;
  v10 = *(uint64_t *)((char *)a2 + v4 + 64);
  *((_QWORD *)v5 + 7) = *(void **)((char *)a2 + v4 + 56);
  *((_QWORD *)v5 + 8) = v10;
  v11 = *(uint64_t *)((char *)a2 + v4 + 80);
  *((_QWORD *)v5 + 9) = *(void **)((char *)a2 + v4 + 72);
  *((_QWORD *)v5 + 10) = v11;
  v12 = *(uint64_t *)((char *)a2 + v4 + 96);
  *((_QWORD *)v5 + 11) = *(void **)((char *)a2 + v4 + 88);
  *((_QWORD *)v5 + 12) = v12;
  *((_DWORD *)v5 + 26) = *(_DWORD *)((char *)a2 + v4 + 104);
  v5[120] = *((_BYTE *)a2 + v4 + 120);
  *((_QWORD *)v5 + 14) = *(void **)((char *)a2 + v4 + 112);
  v13 = *(int *)(type metadata accessor for PBECGMeasurement(0) + 56);
  v18 = &v6[v13];
  v19 = &v5[v13];
  v14 = sub_21FC5AD1C();
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  v16 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15(v19, v18, v14);
  return a1;
}

void **sub_21FBF3ACC(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *((_QWORD *)v10 + 1) = *((_QWORD *)v11 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_DWORD *)v10 + 4) = *((_DWORD *)v11 + 4);
  *((_QWORD *)v10 + 3) = *((_QWORD *)v11 + 3);
  *((_QWORD *)v10 + 4) = *((_QWORD *)v11 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v10 + 5) = *((_QWORD *)v11 + 5);
  *((_QWORD *)v10 + 6) = *((_QWORD *)v11 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v10 + 7) = *((_QWORD *)v11 + 7);
  *((_QWORD *)v10 + 8) = *((_QWORD *)v11 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v10 + 9) = *((_QWORD *)v11 + 9);
  *((_QWORD *)v10 + 10) = *((_QWORD *)v11 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v10 + 11) = *((_QWORD *)v11 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v10 + 12) = *((_QWORD *)v11 + 12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_DWORD *)v10 + 26) = *((_DWORD *)v11 + 26);
  v12 = *((_QWORD *)v11 + 14);
  v10[120] = v11[120];
  *((_QWORD *)v10 + 14) = v12;
  v13 = *(int *)(type metadata accessor for PBECGMeasurement(0) + 56);
  v14 = &v10[v13];
  v15 = &v11[v13];
  v16 = sub_21FC5AD1C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  return a1;
}

_QWORD *sub_21FBF3C40(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  *(_OWORD *)v5 = *(_OWORD *)((char *)a2 + v4);
  *((_DWORD *)v5 + 4) = *(_DWORD *)((char *)a2 + v4 + 16);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)((char *)a2 + v4 + 24);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)((char *)a2 + v4 + 40);
  *(_OWORD *)(v5 + 56) = *(_OWORD *)((char *)a2 + v4 + 56);
  *(_OWORD *)(v5 + 72) = *(_OWORD *)((char *)a2 + v4 + 72);
  *(_OWORD *)(v5 + 88) = *(_OWORD *)((char *)a2 + v4 + 88);
  *((_DWORD *)v5 + 26) = *(_DWORD *)((char *)a2 + v4 + 104);
  v5[120] = *((_BYTE *)a2 + v4 + 120);
  *((_QWORD *)v5 + 14) = *(_QWORD *)((char *)a2 + v4 + 112);
  v7 = *(int *)(type metadata accessor for PBECGMeasurement(0) + 56);
  v8 = &v5[v7];
  v9 = &v6[v7];
  v10 = sub_21FC5AD1C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

void **sub_21FBF3D00(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = *((_QWORD *)v9 + 1);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *((_QWORD *)v8 + 1) = v10;
  swift_bridgeObjectRelease();
  *((_DWORD *)v8 + 4) = *((_DWORD *)v9 + 4);
  v11 = *((_QWORD *)v9 + 4);
  *((_QWORD *)v8 + 3) = *((_QWORD *)v9 + 3);
  *((_QWORD *)v8 + 4) = v11;
  swift_bridgeObjectRelease();
  v12 = *((_QWORD *)v9 + 6);
  *((_QWORD *)v8 + 5) = *((_QWORD *)v9 + 5);
  *((_QWORD *)v8 + 6) = v12;
  swift_bridgeObjectRelease();
  v13 = *((_QWORD *)v9 + 8);
  *((_QWORD *)v8 + 7) = *((_QWORD *)v9 + 7);
  *((_QWORD *)v8 + 8) = v13;
  swift_bridgeObjectRelease();
  v14 = *((_QWORD *)v9 + 10);
  *((_QWORD *)v8 + 9) = *((_QWORD *)v9 + 9);
  *((_QWORD *)v8 + 10) = v14;
  swift_bridgeObjectRelease();
  *((_QWORD *)v8 + 11) = *((_QWORD *)v9 + 11);
  swift_bridgeObjectRelease();
  *((_QWORD *)v8 + 12) = *((_QWORD *)v9 + 12);
  swift_bridgeObjectRelease();
  *((_DWORD *)v8 + 26) = *((_DWORD *)v9 + 26);
  *((_QWORD *)v8 + 14) = *((_QWORD *)v9 + 14);
  v8[120] = v9[120];
  v15 = *(int *)(type metadata accessor for PBECGMeasurement(0) + 56);
  v16 = &v8[v15];
  v17 = &v9[v15];
  v18 = sub_21FC5AD1C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t sub_21FBF3E10()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FBF3E1C(char *a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for PBECGMeasurement);
}

uint64_t __swift_get_extra_inhabitant_indexTm(char *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v5 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v5) = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = a4(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v9);
  }
}

uint64_t sub_21FBF3EA4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_21FBF3EB0(char *a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for PBECGMeasurement);
}

char *__swift_store_extra_inhabitant_indexTm(char *result, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  char *v6;
  uint64_t v8;

  v6 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = a5(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(&v6[*(int *)(a4 + 20)], a2, a2, v8);
  }
  return result;
}

uint64_t sub_21FBF3F30()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PBECGMeasurement(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21FBF3FA8(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  v3 = v2;
  return a1;
}

uint64_t sub_21FBF3FE8(uint64_t a1)
{

  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_21FBF4030(unint64_t *a1, uint64_t a2)
{
  return sub_21FA85168(a1, a2);
}

uint64_t sub_21FBF4044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;

  v40 = a4;
  v41 = a5;
  v39 = a2;
  v37 = a1;
  sub_21FA2ED54(0, (unint64_t *)&qword_25554CFF0, (void (*)(uint64_t))MEMORY[0x24BDC64B8]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v37 - v7;
  v9 = type metadata accessor for PBNode(0);
  MEMORY[0x24BDAC7A8](v9);
  v38 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2ED54(0, &qword_25553F310, (void (*)(uint64_t))type metadata accessor for PBPlainText.OneOf_Plaintext);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v37 - v15;
  v17 = type metadata accessor for PBTypedData(0);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v37 - v21;
  v23 = type metadata accessor for PBPlainText(0);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v37 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D120(a3, (uint64_t)v22, type metadata accessor for PBTypedData);
  v42 = 3;
  v43 = 1;
  sub_21FA88908(&v42, 0, 0, 0, 0, (uint64_t)v25);
  sub_21FA2D120((uint64_t)v22, (uint64_t)v20, type metadata accessor for PBTypedData);
  v26 = *(int *)(v23 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    v27 = swift_retain();
    *(_QWORD *)&v25[v26] = sub_21FA61D10(v27);
    swift_release();
  }
  v28 = *(_QWORD *)&v25[v26];
  sub_21FA2D23C((uint64_t)v20, (uint64_t)v16, type metadata accessor for PBTypedData);
  v29 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v16, 0, 1, v29);
  sub_21FA87DBC((uint64_t)v16, (uint64_t)v14, &qword_25553F310, (void (*)(uint64_t))type metadata accessor for PBPlainText.OneOf_Plaintext);
  v30 = v28
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  swift_retain();
  sub_21FA87E08((uint64_t)v14, v30, &qword_25553F310, (void (*)(uint64_t))type metadata accessor for PBPlainText.OneOf_Plaintext);
  swift_endAccess();
  swift_release();
  sub_21FA326EC((uint64_t)v22, type metadata accessor for PBTypedData);
  v42 = 3;
  v43 = 1;
  v31 = sub_21FC5B460();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v8, 1, 1, v31);
  v32 = v38;
  v33 = v44;
  v34 = sub_21FBF4440(v38, v39, (uint64_t)v25, (uint64_t)&v42, (uint64_t)v8, v40, v41, 0, 0);
  if (v33)
  {
    sub_21FA2EDA0((uint64_t)v8, (unint64_t *)&qword_25554CFF0, (void (*)(uint64_t))MEMORY[0x24BDC64B8]);
    return sub_21FA326EC((uint64_t)v25, type metadata accessor for PBPlainText);
  }
  else
  {
    sub_21FA2D770((uint64_t)v34, v35);
    sub_21FA2EDA0((uint64_t)v8, (unint64_t *)&qword_25554CFF0, (void (*)(uint64_t))MEMORY[0x24BDC64B8]);
    sub_21FA326EC((uint64_t)v25, type metadata accessor for PBPlainText);
    return sub_21FA2D23C(v32, v37, type metadata accessor for PBNode);
  }
}

id sub_21FBF4440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  char *v88;
  void (*v89)(char *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id result;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;

  v169 = a8;
  v168 = a7;
  v167 = a6;
  v171 = a5;
  v139 = a2;
  v138 = a1;
  v151 = sub_21FC5B4A8();
  v149 = *(_QWORD *)(v151 - 8);
  v11 = MEMORY[0x24BDAC7A8](v151);
  v140 = (char *)&v138 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v148 = (char *)&v138 - v13;
  v14 = sub_21FC5B478();
  MEMORY[0x24BDAC7A8](v14);
  v147 = (char *)&v138 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_21FC5B418();
  v145 = *(_QWORD *)(v146 - 8);
  MEMORY[0x24BDAC7A8](v146);
  v150 = (char *)&v138 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2ED54(0, &qword_25554AB00, (void (*)(uint64_t))type metadata accessor for PBAssociatedData);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v156 = (uint64_t)&v138 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v155 = (uint64_t)&v138 - v20;
  v163 = type metadata accessor for PBAssociatedData(0);
  v153 = *(_QWORD *)(v163 - 8);
  v21 = MEMORY[0x24BDAC7A8](v163);
  v158 = (uint64_t)&v138 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v162 = (char *)&v138 - v23;
  v161 = type metadata accessor for PBNode(0);
  MEMORY[0x24BDAC7A8](v161);
  v164 = (char *)&v138 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_21FC5B4E4();
  v141 = *(_QWORD *)(v142 - 8);
  MEMORY[0x24BDAC7A8](v142);
  v143 = (char *)&v138 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2ED54(0, (unint64_t *)&qword_25554CFF0, (void (*)(uint64_t))MEMORY[0x24BDC64B8]);
  v27 = MEMORY[0x24BDAC7A8](v26);
  v154 = (uint64_t)&v138 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x24BDAC7A8](v27);
  v160 = (char *)&v138 - v30;
  MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)&v138 - v31;
  v174 = sub_21FC5B460();
  v175 = *(_QWORD *)(v174 - 8);
  MEMORY[0x24BDAC7A8](v174);
  v159 = (char *)&v138 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2ED54(0, &qword_25554CFF8, (void (*)(uint64_t))type metadata accessor for PBPlainText);
  v35 = MEMORY[0x24BDAC7A8](v34);
  v157 = (uint64_t)&v138 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = MEMORY[0x24BDAC7A8](v35);
  v39 = (char *)&v138 - v38;
  MEMORY[0x24BDAC7A8](v37);
  v41 = (char *)&v138 - v40;
  v170 = type metadata accessor for PBPlainText(0);
  v42 = *(_QWORD *)(v170 - 8);
  v43 = MEMORY[0x24BDAC7A8](v170);
  v152 = (uint64_t)&v138 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v43);
  v46 = (char *)&v138 - v45;
  v47 = type metadata accessor for PBPayload(0);
  MEMORY[0x24BDAC7A8](v47);
  v49 = (char *)&v138 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = *(_QWORD *)a4;
  v166 = *(unsigned __int8 *)(a4 + 8);
  sub_21FC5AD10();
  v144 = v47;
  v50 = *(int *)(v47 + 20);
  if (qword_25553DCB0 != -1)
    swift_once();
  *(_QWORD *)&v49[v50] = qword_25554DCA8;
  sub_21FA2D120(a3, (uint64_t)v46, type metadata accessor for PBPlainText);
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPayload._StorageClass(0);
    swift_allocObject();
    v51 = swift_retain();
    *(_QWORD *)&v49[v50] = sub_21FC32E14(v51);
    swift_release();
  }
  v172 = v49;
  v52 = *(_QWORD *)&v49[v50];
  sub_21FA2D23C((uint64_t)v46, (uint64_t)v41, type metadata accessor for PBPlainText);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v41, 0, 1, v170);
  sub_21FA87DBC((uint64_t)v41, (uint64_t)v39, &qword_25554CFF8, (void (*)(uint64_t))type metadata accessor for PBPlainText);
  v53 = v52
      + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__plaintext;
  swift_beginAccess();
  swift_retain();
  sub_21FA87E08((uint64_t)v39, v53, &qword_25554CFF8, (void (*)(uint64_t))type metadata accessor for PBPlainText);
  swift_endAccess();
  swift_release();
  sub_21FA6A498(v171, (uint64_t)v32, (unint64_t *)&qword_25554CFF0, (void (*)(uint64_t))MEMORY[0x24BDC64B8]);
  v54 = v175;
  v55 = v174;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v175 + 48))(v32, 1, v174) == 1)
  {
    sub_21FA2EDA0((uint64_t)v32, (unint64_t *)&qword_25554CFF0, (void (*)(uint64_t))MEMORY[0x24BDC64B8]);
    v56 = (uint64_t)v164;
    v57 = v165;
    v58 = v161;
  }
  else
  {
    v59 = v159;
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v159, v32, v55);
    v60 = v165;
    if (v173 == 1)
    {
      v61 = *(_QWORD *)&v172[v50]
          + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__plaintext;
      swift_beginAccess();
      v62 = v61;
      v63 = v157;
      sub_21FA6A498(v62, v157, &qword_25554CFF8, (void (*)(uint64_t))type metadata accessor for PBPlainText);
      v64 = v170;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v63, 1, v170) == 1)
      {
        v65 = v152;
        sub_21FC5AD10();
        v63 = *(int *)(v64 + 20);
        if (qword_25553D5B8 != -1)
          swift_once();
        *(_QWORD *)(v65 + v63) = qword_25553F300;
        swift_retain();
        sub_21FA2EDA0(v157, &qword_25554CFF8, (void (*)(uint64_t))type metadata accessor for PBPlainText);
      }
      else
      {
        v65 = v152;
        sub_21FA2D23C(v63, v152, type metadata accessor for PBPlainText);
      }
      sub_21FA2A08C(&qword_25553F328, type metadata accessor for PBPlainText, (uint64_t)&protocol conformance descriptor for PBPlainText);
      v82 = sub_21FC5AE90();
      if (v60)
      {
        sub_21FA326EC(v65, type metadata accessor for PBPlainText);
        (*(void (**)(char *, uint64_t))(v54 + 8))(v159, v55);
        goto LABEL_34;
      }
      v107 = v81;
      sub_21FA326EC(v65, type metadata accessor for PBPlainText);
      v180 = v82;
      v181 = v107;
      sub_21FBA5B68();
      v108 = v143;
      sub_21FC5B454();
      v57 = 0;
      v112 = sub_21FC5B4D8();
      v113 = v108;
      v115 = v114;
      (*(void (**)(char *, uint64_t))(v141 + 8))(v113, v142);
      sub_21FA2D770(v82, v107);
      v116 = (uint64_t)v172;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for PBPayload._StorageClass(0);
        swift_allocObject();
        v117 = swift_retain();
        *(_QWORD *)(v116 + v50) = sub_21FC32E14(v117);
        swift_release();
      }
      v118 = (uint64_t *)(*(_QWORD *)(v116 + v50)
                       + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__signature);
      swift_beginAccess();
      v119 = *v118;
      v120 = v118[1];
      *v118 = v112;
      v118[1] = v115;
      sub_21FA2D770(v119, v120);
      (*(void (**)(char *, uint64_t))(v175 + 8))(v159, v55);
      v58 = v161;
      v56 = (uint64_t)v164;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v54 + 8))(v59, v55);
      v58 = v161;
      v57 = v60;
      v56 = (uint64_t)v164;
    }
  }
  sub_21FC5AD10();
  v66 = *(int *)(v58 + 20);
  v67 = v163;
  v68 = v167;
  v69 = (uint64_t)v162;
  v70 = v166;
  if (qword_25553DBE0 != -1)
    swift_once();
  *(_QWORD *)(v56 + v66) = qword_25554AAF8;
  v180 = v173;
  LOBYTE(v181) = v70;
  v71 = (uint64_t)v160;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v175 + 56))(v160, 1, 1, v174);
  swift_retain();
  v63 = v168;
  sub_21FA32314(v68, v168);
  swift_bridgeObjectRetain();
  sub_21FC57C6C(&v180, v68, v63, v71, v169, a9, v69);
  if (v57)
  {
    sub_21FA326EC(v56, type metadata accessor for PBNode);
LABEL_34:
    sub_21FA326EC((uint64_t)v172, type metadata accessor for PBPayload);
    return (id)v63;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBNode._StorageClass(0);
    swift_allocObject();
    v72 = swift_retain();
    *(_QWORD *)(v56 + v66) = sub_21FBA9658(v72);
    swift_release();
  }
  v73 = *(_QWORD *)(v56 + v66);
  v74 = v69;
  v75 = v155;
  sub_21FA2D23C(v74, v155, type metadata accessor for PBAssociatedData);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v153 + 56))(v75, 0, 1, v67);
  v76 = v156;
  sub_21FA87DBC(v75, v156, &qword_25554AB00, (void (*)(uint64_t))type metadata accessor for PBAssociatedData);
  v77 = v73
      + OBJC_IVAR____TtCV19HealthRecordsDaemon6PBNodeP33_A7AC4849202AB7CE22E24A7E30096B6813_StorageClass__associatedData;
  swift_beginAccess();
  swift_retain();
  sub_21FA87E08(v76, v77, &qword_25554AB00, (void (*)(uint64_t))type metadata accessor for PBAssociatedData);
  swift_endAccess();
  swift_release();
  v180 = v173;
  LOBYTE(v181) = v166;
  v78 = v154;
  sub_21FA6A498(v171, v154, (unint64_t *)&qword_25554CFF0, (void (*)(uint64_t))MEMORY[0x24BDC64B8]);
  v79 = v167;
  v80 = v168;
  sub_21FA32314(v167, v168);
  swift_bridgeObjectRetain();
  sub_21FC57C6C(&v180, v79, v80, v78, v169, a9, v158);
  sub_21FC5B46C();
  v83 = (uint64_t)v150;
  sub_21FC5B40C();
  v84 = v148;
  sub_21FC5B49C();
  v85 = v151;
  v182 = v151;
  v183 = sub_21FA2A08C(&qword_25554D000, (uint64_t (*)(uint64_t))MEMORY[0x24BDC65D0], MEMORY[0x24BDC65B0]);
  v86 = __swift_allocate_boxed_opaque_existential_1(&v180);
  v87 = v149;
  (*(void (**)(uint64_t *, char *, uint64_t))(v149 + 16))(v86, v84, v85);
  __swift_project_boxed_opaque_existential_1(&v180, v182);
  sub_21FC5A878();
  v88 = v84;
  v89 = *(void (**)(char *, uint64_t))(v87 + 8);
  v89(v88, v85);
  v90 = v178;
  v91 = v179;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v180);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBNode._StorageClass(0);
    swift_allocObject();
    v92 = swift_retain();
    *(_QWORD *)(v56 + v66) = sub_21FBA9658(v92);
    swift_release();
  }
  v93 = *(_QWORD *)(v56 + v66);
  swift_beginAccess();
  v94 = *(_QWORD *)(v93 + 16);
  v95 = *(_QWORD *)(v93 + 24);
  *(_QWORD *)(v93 + 16) = v90;
  *(_QWORD *)(v93 + 24) = v91;
  sub_21FA2D770(v94, v95);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBNode._StorageClass(0);
    swift_allocObject();
    v96 = swift_retain();
    *(_QWORD *)(v56 + v66) = sub_21FBA9658(v96);
    swift_release();
  }
  v97 = *(_QWORD *)(v56 + v66)
      + OBJC_IVAR____TtCV19HealthRecordsDaemon6PBNodeP33_A7AC4849202AB7CE22E24A7E30096B6813_StorageClass__algorithm;
  swift_beginAccess();
  *(_QWORD *)v97 = 1;
  *(_BYTE *)(v97 + 8) = 1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBNode._StorageClass(0);
    swift_allocObject();
    v98 = swift_retain();
    *(_QWORD *)(v56 + v66) = sub_21FBA9658(v98);
    swift_release();
  }
  v99 = *(_QWORD *)(v56 + v66)
      + OBJC_IVAR____TtCV19HealthRecordsDaemon6PBNodeP33_A7AC4849202AB7CE22E24A7E30096B6813_StorageClass__dataProtocolVersion;
  swift_beginAccess();
  *(_QWORD *)v99 = 2;
  *(_BYTE *)(v99 + 8) = 1;
  result = objc_msgSend((id)objc_opt_self(), sel_currentOSVersion);
  if (result)
  {
    v101 = result;
    v102 = sub_21FC5B604();
    v104 = v103;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBNode._StorageClass(0);
      swift_allocObject();
      v105 = swift_retain();
      *(_QWORD *)(v56 + v66) = sub_21FBA9658(v105);
      swift_release();
    }
    v106 = (uint64_t *)(*(_QWORD *)(v56 + v66)
                     + OBJC_IVAR____TtCV19HealthRecordsDaemon6PBNodeP33_A7AC4849202AB7CE22E24A7E30096B6813_StorageClass__clientVersion);
    swift_beginAccess();
    *v106 = v102;
    v106[1] = v104;
    swift_bridgeObjectRelease();
    sub_21FA2A08C(&qword_25554D008, type metadata accessor for PBPayload, (uint64_t)&protocol conformance descriptor for PBPayload);
    v109 = sub_21FC5AE90();
    v111 = v110;
    sub_21FA2A08C(&qword_25554ABC8, type metadata accessor for PBAssociatedData, (uint64_t)"QՁ.");
    v121 = (void *)sub_21FC5AE90();
    v123 = v122;
    v124 = *(_QWORD *)&v164[v66];
    swift_beginAccess();
    v125 = *(_QWORD *)(v124 + 24);
    v176 = *(_QWORD *)(v124 + 16);
    v177 = v125;
    sub_21FA32314(v176, v125);
    sub_21FBA5B68();
    v126 = (uint64_t)v140;
    sub_21FC5B490();
    sub_21FBA58D0(v109, v111, v121, v123, v83, v126);
    v175 = v127;
    v129 = v128;
    v89((char *)v126, v151);
    sub_21FA2D770((uint64_t)v121, v123);
    sub_21FA2D770(v109, v111);
    v130 = (uint64_t)v164;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      type metadata accessor for PBNode._StorageClass(0);
      swift_allocObject();
      v132 = swift_retain();
      *(_QWORD *)(v130 + v66) = sub_21FBA9658(v132);
      swift_release();
    }
    v133 = (uint64_t *)(*(_QWORD *)(v130 + v66)
                     + OBJC_IVAR____TtCV19HealthRecordsDaemon6PBNodeP33_A7AC4849202AB7CE22E24A7E30096B6813_StorageClass__cyphertext);
    swift_beginAccess();
    v134 = *v133;
    v135 = v133[1];
    v136 = v175;
    *v133 = v129;
    v133[1] = v136;
    sub_21FA2D770(v134, v135);
    sub_21FA326EC((uint64_t)v172, type metadata accessor for PBPayload);
    sub_21FA2D23C(v130, v138, type metadata accessor for PBNode);
    (*(void (**)(uint64_t, char *, uint64_t))(v145 + 32))(v139, v150, v146);
    v137 = v158;
    v63 = *(_QWORD *)(v158 + 32);
    sub_21FA32314(v63, *(_QWORD *)(v158 + 40));
    sub_21FA326EC(v137, type metadata accessor for PBAssociatedData);
    return (id)v63;
  }
  __break(1u);
  return result;
}

uint64_t sub_21FBF5790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;

  v44 = a6;
  v45 = a7;
  v40 = a3;
  v41 = a4;
  v43 = a2;
  v39 = a1;
  sub_21FA2ED54(0, (unint64_t *)&qword_25554CFF0, (void (*)(uint64_t))MEMORY[0x24BDC64B8]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v39 - v9;
  v11 = type metadata accessor for PBNode(0);
  MEMORY[0x24BDAC7A8](v11);
  v42 = (uint64_t)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2ED54(0, &qword_25553F310, (void (*)(uint64_t))type metadata accessor for PBPlainText.OneOf_Plaintext);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v39 - v17;
  v19 = type metadata accessor for PBReferences(0);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v39 - v23;
  v25 = type metadata accessor for PBPlainText(0);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v39 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D120(v40, (uint64_t)v24, type metadata accessor for PBReferences);
  v46 = 2;
  v47 = 1;
  swift_bridgeObjectRetain();
  sub_21FA88908(&v46, v41, a5, 0, 0, (uint64_t)v27);
  sub_21FA2D120((uint64_t)v24, (uint64_t)v22, type metadata accessor for PBReferences);
  v28 = *(int *)(v25 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    v29 = swift_retain();
    *(_QWORD *)&v27[v28] = sub_21FA61D10(v29);
    swift_release();
  }
  v30 = *(_QWORD *)&v27[v28];
  sub_21FA2D23C((uint64_t)v22, (uint64_t)v18, type metadata accessor for PBReferences);
  v31 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v18, 0, 1, v31);
  sub_21FA87DBC((uint64_t)v18, (uint64_t)v16, &qword_25553F310, (void (*)(uint64_t))type metadata accessor for PBPlainText.OneOf_Plaintext);
  v32 = v30
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  swift_retain();
  sub_21FA87E08((uint64_t)v16, v32, &qword_25553F310, (void (*)(uint64_t))type metadata accessor for PBPlainText.OneOf_Plaintext);
  swift_endAccess();
  swift_release();
  sub_21FA326EC((uint64_t)v24, type metadata accessor for PBReferences);
  v46 = 2;
  v47 = 1;
  v33 = sub_21FC5B460();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v10, 1, 1, v33);
  v34 = v42;
  v35 = v48;
  v36 = sub_21FBF4440(v42, v43, (uint64_t)v27, (uint64_t)&v46, (uint64_t)v10, v44, v45, 0, 0);
  if (v35)
  {
    sub_21FA2EDA0((uint64_t)v10, (unint64_t *)&qword_25554CFF0, (void (*)(uint64_t))MEMORY[0x24BDC64B8]);
    return sub_21FA326EC((uint64_t)v27, type metadata accessor for PBPlainText);
  }
  else
  {
    sub_21FA2D770((uint64_t)v36, v37);
    sub_21FA2EDA0((uint64_t)v10, (unint64_t *)&qword_25554CFF0, (void (*)(uint64_t))MEMORY[0x24BDC64B8]);
    sub_21FA326EC((uint64_t)v27, type metadata accessor for PBPlainText);
    return sub_21FA2D23C(v34, v39, type metadata accessor for PBNode);
  }
}

id sub_21FBF5B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;

  v59 = a2;
  v60 = a8;
  v54 = a6;
  v51 = a5;
  v52 = a4;
  v57 = a1;
  v58 = a9;
  sub_21FA2ED54(0, (unint64_t *)&qword_25554CFF0, (void (*)(uint64_t))MEMORY[0x24BDC64B8]);
  MEMORY[0x24BDAC7A8](v11);
  v55 = (char *)&v49 - v12;
  sub_21FA2ED54(0, &qword_25553F310, (void (*)(uint64_t))type metadata accessor for PBPlainText.OneOf_Plaintext);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v53 = (uint64_t)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v49 - v16;
  v18 = type metadata accessor for PBReferences(0);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v49 - v22;
  v50 = type metadata accessor for PBPlainText(0);
  MEMORY[0x24BDAC7A8](v50);
  v25 = (char *)&v49 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D120(a3, (uint64_t)v23, type metadata accessor for PBReferences);
  v56 = a7;
  v26 = (_QWORD *)(a7 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_docRefInfo);
  swift_beginAccess();
  v27 = v26[3];
  v28 = v26[4];
  v29 = __swift_project_boxed_opaque_existential_1(v26, v27);
  v30 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)&v49 - v31;
  (*(void (**)(char *))(v30 + 16))((char *)&v49 - v31);
  v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v27, v28);
  v35 = v34;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v27);
  v61 = 1;
  v62 = 1;
  v36 = v51;
  swift_bridgeObjectRetain();
  sub_21FA88908(&v61, v52, v36, v33, v35, (uint64_t)v25);
  sub_21FA2D120((uint64_t)v23, (uint64_t)v21, type metadata accessor for PBReferences);
  v37 = *(int *)(v50 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    v38 = swift_retain();
    *(_QWORD *)&v25[v37] = sub_21FA61D10(v38);
    swift_release();
  }
  v39 = *(_QWORD *)&v25[v37];
  sub_21FA2D23C((uint64_t)v21, (uint64_t)v17, type metadata accessor for PBReferences);
  v40 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v17, 0, 1, v40);
  v41 = v53;
  sub_21FA87DBC((uint64_t)v17, v53, &qword_25553F310, (void (*)(uint64_t))type metadata accessor for PBPlainText.OneOf_Plaintext);
  v42 = v39
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  swift_retain();
  sub_21FA87E08(v41, v42, &qword_25553F310, (void (*)(uint64_t))type metadata accessor for PBPlainText.OneOf_Plaintext);
  swift_endAccess();
  swift_release();
  sub_21FA326EC((uint64_t)v23, type metadata accessor for PBReferences);
  v61 = 1;
  v62 = 1;
  v43 = sub_21FC5B460();
  v44 = (void (*)(uint64_t))MEMORY[0x24BDC64B8];
  v45 = *(_QWORD *)(v43 - 8);
  v46 = (uint64_t)v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v55, v54, v43);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v46, 0, 1, v43);
  v47 = sub_21FBF4440(v57, v59, (uint64_t)v25, (uint64_t)&v61, v46, v60, v58, *(_QWORD *)(v56 + 40), *(_QWORD *)(v56 + 48));
  sub_21FA2EDA0(v46, (unint64_t *)&qword_25554CFF0, v44);
  sub_21FA326EC((uint64_t)v25, type metadata accessor for PBPlainText);
  return v47;
}

_BYTE *sub_21FBF6000@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_21FBF6074(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_21FBF6134((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_21FBF61AC((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_21FBF6074(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_21FBF6134(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_21FC5A794();
  swift_allocObject();
  result = sub_21FC5A758();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_21FC5A9B0();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_21FBF61AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_21FC5A794();
  swift_allocObject();
  result = sub_21FC5A758();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_21FBF622C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v25 = a2;
  sub_21FAB480C(0, &qword_25554D098, (void (*)(uint64_t))sub_21FA5123C, (void (*)(void))sub_21FBF731C);
  v26 = v4;
  v28 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v25 - v5;
  sub_21FBF7338();
  v8 = *(_QWORD *)(v7 - 8);
  v30 = v7;
  v31 = v8;
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FBF7488();
  v32 = v11;
  v34 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v27 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FBF7574();
  v33 = v13;
  v35 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v29 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_21FC4BF3C(*(_QWORD *)(a1 + 56));
  sub_21FA5123C();
  sub_21FBF731C();
  sub_21FC5B748();
  swift_bridgeObjectRelease();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  swift_retain();
  sub_21FC5B184();
  sub_21FAB480C(0, &qword_25554D040, (void (*)(uint64_t))sub_21FBF7028, (void (*)(void))sub_21FBF708C);
  sub_21FBF7448(&qword_25554D0B8, &qword_25554D098, (void (*)(uint64_t))sub_21FA5123C, (void (*)(void))sub_21FBF731C);
  sub_21FBF7448(&qword_25554D0B0, &qword_25554D040, (void (*)(uint64_t))sub_21FBF7028, (void (*)(void))sub_21FBF708C);
  v16 = v26;
  sub_21FC5B394();
  swift_release();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v16);
  v36 = sub_21FBF8408(a1);
  sub_21FBF7028();
  sub_21FA2A08C(&qword_25554D0C8, (uint64_t (*)(uint64_t))sub_21FBF7338, MEMORY[0x24BDB98F0]);
  sub_21FBF708C();
  v17 = v27;
  v18 = v30;
  sub_21FC5B304();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v18);
  v36 = sub_21FBF8734(a1);
  v19 = MEMORY[0x24BDB9530];
  sub_21FA2A08C(&qword_25554D0D8, (uint64_t (*)(uint64_t))sub_21FBF7488, MEMORY[0x24BDB9530]);
  v20 = v29;
  v21 = v32;
  sub_21FC5B304();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v17, v21);
  sub_21FA2A08C(&qword_25554D0E0, (uint64_t (*)(uint64_t))sub_21FBF7574, v19);
  v22 = v33;
  v23 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v20, v22);
  return v23;
}

uint64_t sub_21FBF65F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_21FBF82B8(a1, a2, a3);
  sub_21FBF7028();
  sub_21FBF708C();
  sub_21FC5B748();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21FBF665C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_21FAB480C(0, &qword_25554D040, (void (*)(uint64_t))sub_21FBF7028, (void (*)(void))sub_21FBF708C);
  v7 = v6;
  v22 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v20 - v8;
  sub_21FAB480C(0, &qword_25554D058, (void (*)(uint64_t))sub_21FBF70A8, (void (*)(void))sub_21FBF70FC);
  v11 = v10;
  v20 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v20 - v12;
  sub_21FBF7118();
  v15 = v14;
  v21 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_21FBFEEB8(a1, a2);
  sub_21FBF7028();
  sub_21FBF708C();
  sub_21FC5B748();
  swift_bridgeObjectRelease();
  sub_21FA49C58();
  sub_21FC5B124();
  result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v9, v7);
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_21FBF7448(&qword_25554D080, &qword_25554D058, (void (*)(uint64_t))sub_21FBF70A8, (void (*)(void))sub_21FBF70FC);
    sub_21FBF6BBC();
    sub_21FC5B388();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v13, v11);
    sub_21FA2A08C(&qword_25554D090, (uint64_t (*)(uint64_t))sub_21FBF7118, MEMORY[0x24BDB98F0]);
    v19 = sub_21FC5B280();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v17, v15);
    return v19;
  }
  return result;
}

uint64_t sub_21FBF68C4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_21FBF690C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_21FBF6918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v23 = a2;
  v24 = a3;
  sub_21FABB048(0, &qword_25554D010, (uint64_t (*)(uint64_t))sub_21FA49C58, sub_21FBF6BBC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB9E80]);
  v5 = *(_QWORD *)(v4 - 8);
  v27 = v4;
  v28 = v5;
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v22 - v6;
  sub_21FBF6BD8();
  v9 = v8;
  v25 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FBF6C50();
  v13 = v12;
  v26 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = sub_21FA7BF8C(MEMORY[0x24BEE4AF8]);
  v29 = a1;
  sub_21FA49C58();
  type metadata accessor for ClinicalSharingQueryOutput(0);
  sub_21FBF6BBC();
  swift_retain();
  sub_21FC5B2C8();
  swift_release();
  v17 = (_QWORD *)swift_allocObject();
  v18 = v24;
  v17[2] = v23;
  v17[3] = v18;
  v17[4] = v16;
  swift_retain();
  swift_retain();
  sub_21FC5B268();
  sub_21FA2A08C(&qword_25554D028, (uint64_t (*)(uint64_t))sub_21FBF6BD8, MEMORY[0x24BDB96C0]);
  sub_21FBF6D14();
  v19 = v27;
  sub_21FC5B310();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v19);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v9);
  sub_21FA2A08C(&qword_25554D038, (uint64_t (*)(uint64_t))sub_21FBF6C50, MEMORY[0x24BDB9530]);
  v20 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v15, v13);
  swift_release();
  return v20;
}

uint64_t sub_21FBF6BBC()
{
  return sub_21FA2A08C(&qword_25406CA08, (uint64_t (*)(uint64_t))sub_21FA49C58, MEMORY[0x24BDB9AF8]);
}

void sub_21FBF6BD8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D018)
  {
    sub_21FA49C58();
    type metadata accessor for ClinicalSharingQueryOutput(255);
    sub_21FBF6BBC();
    v0 = sub_21FC5B064();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D018);
  }
}

void sub_21FBF6C50()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D020)
  {
    sub_21FBF6BD8();
    sub_21FABB048(255, &qword_25554D010, (uint64_t (*)(uint64_t))sub_21FA49C58, sub_21FBF6BBC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB9E80]);
    sub_21FA2A08C(&qword_25554D028, (uint64_t (*)(uint64_t))sub_21FBF6BD8, MEMORY[0x24BDB96C0]);
    sub_21FBF6D14();
    v0 = sub_21FC5B010();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D020);
  }
}

unint64_t sub_21FBF6D14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25554D030;
  if (!qword_25554D030)
  {
    sub_21FABB048(255, &qword_25554D010, (uint64_t (*)(uint64_t))sub_21FA49C58, sub_21FBF6BBC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB9E80]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9E90], v1);
    atomic_store(result, (unint64_t *)&qword_25554D030);
  }
  return result;
}

uint64_t sub_21FBF6D7C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21FBF6DA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v3;
  void (*v7)(_QWORD *@<X8>);
  _QWORD *v8;
  void (*v9)(_QWORD *@<X8>);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  void (*v20)(_QWORD *@<X8>);
  uint64_t v21;
  uint64_t result;

  v7 = *(void (**)(_QWORD *@<X8>))(a1
                                            + *(int *)(type metadata accessor for ClinicalSharingQueryOutput(0) + 24));
  if (!v7)
  {
LABEL_10:
    sub_21FBF729C(a1, a3);
    return sub_21FA97DF0((uint64_t)v7);
  }
  v8 = (_QWORD *)(a2 + 16);
  swift_beginAccess();
  sub_21FBC18EC(v7);
  v9 = v7;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0x8000000000000000;
  v13 = sub_21FA73F98((uint64_t)v9);
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_12;
  }
  v3 = v12;
  if (*(_QWORD *)(v11 + 24) >= v16)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_7;
LABEL_12:
    sub_21FA7ABD4();
    goto LABEL_7;
  }
  sub_21FA77654(v16, isUniquelyReferenced_nonNull_native);
  v17 = sub_21FA73F98((uint64_t)v9);
  if ((v3 & 1) == (v18 & 1))
  {
    v13 = v17;
LABEL_7:
    *v8 = v11;
    swift_bridgeObjectRelease();
    v19 = (_QWORD *)*v8;
    swift_bridgeObjectRetain();
    if ((v3 & 1) == 0)
    {
      sub_21FA7933C(v13, (uint64_t)v9, MEMORY[0x24BEE4AF8], v19);
      v20 = v9;
    }
    swift_bridgeObjectRelease();
    v21 = swift_bridgeObjectRetain();
    sub_21FBE0074(v21);
    swift_endAccess();
    swift_bridgeObjectRelease();

    v7 = sub_21FBF6F6C;
    goto LABEL_10;
  }
  sub_21FBF72E0();
  result = sub_21FC5BE20();
  __break(1u);
  return result;
}

uint64_t sub_21FBF6F64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21FBF6DA0(a1, v2, a2);
}

void sub_21FBF6F6C(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
}

uint64_t sub_21FBF6F7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  swift_beginAccess();
  v6 = swift_bridgeObjectRetain();
  v7 = sub_21FBF665C(v6, a1, a2);
  result = swift_bridgeObjectRelease();
  *a3 = v7;
  return result;
}

uint64_t sub_21FBF6FF0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FBF701C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_21FBF6F7C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void sub_21FBF7028()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D048)
  {
    sub_21FA50724(255, (unint64_t *)&qword_25553EC80);
    v0 = sub_21FC5B7F0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D048);
  }
}

uint64_t sub_21FBF708C()
{
  return sub_21FA2A08C(&qword_25554D050, (uint64_t (*)(uint64_t))sub_21FBF7028, MEMORY[0x24BEE12C8]);
}

void sub_21FBF70A8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D060)
  {
    sub_21FA49C58();
    v0 = sub_21FC5B7F0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D060);
  }
}

uint64_t sub_21FBF70FC()
{
  return sub_21FA2A08C(&qword_25554D068, (uint64_t (*)(uint64_t))sub_21FBF70A8, MEMORY[0x24BEE12C8]);
}

void sub_21FBF7118()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D070)
  {
    sub_21FA49C58();
    sub_21FBF71C4();
    sub_21FBF6BBC();
    sub_21FA2A08C(&qword_25554D088, (uint64_t (*)(uint64_t))sub_21FBF71C4, MEMORY[0x24BDB95F8]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D070);
  }
}

void sub_21FBF71C4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D078)
  {
    sub_21FAB480C(255, &qword_25554D058, (void (*)(uint64_t))sub_21FBF70A8, (void (*)(void))sub_21FBF70FC);
    sub_21FA50724(255, (unint64_t *)&qword_25406BB50);
    sub_21FBF7448(&qword_25554D080, &qword_25554D058, (void (*)(uint64_t))sub_21FBF70A8, (void (*)(void))sub_21FBF70FC);
    v0 = sub_21FC5B04C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D078);
  }
}

uint64_t sub_21FBF729C(uint64_t a1, uint64_t a2)
{
  uint64_t Output;

  Output = type metadata accessor for ClinicalSharingQueryOutput(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Output - 8) + 16))(a2, a1, Output);
  return a2;
}

unint64_t sub_21FBF72E0()
{
  unint64_t result;

  result = qword_25553FB78;
  if (!qword_25553FB78)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25553FB78);
  }
  return result;
}

uint64_t sub_21FBF731C()
{
  return sub_21FA2A08C(&qword_25554D0A0, (uint64_t (*)(uint64_t))sub_21FA5123C, MEMORY[0x24BEE1718]);
}

void sub_21FBF7338()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D0A8)
  {
    sub_21FAB480C(255, &qword_25554D040, (void (*)(uint64_t))sub_21FBF7028, (void (*)(void))sub_21FBF708C);
    sub_21FAB480C(255, &qword_25554D098, (void (*)(uint64_t))sub_21FA5123C, (void (*)(void))sub_21FBF731C);
    sub_21FBF7448(&qword_25554D0B0, &qword_25554D040, (void (*)(uint64_t))sub_21FBF7028, (void (*)(void))sub_21FBF708C);
    sub_21FBF7448(&qword_25554D0B8, &qword_25554D098, (void (*)(uint64_t))sub_21FA5123C, (void (*)(void))sub_21FBF731C);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D0A8);
  }
}

uint64_t sub_21FBF7448(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    sub_21FAB480C(255, a2, a3, a4);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9970], v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_21FBF7488()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D0C0)
  {
    sub_21FBF7338();
    sub_21FAB480C(255, &qword_25554D040, (void (*)(uint64_t))sub_21FBF7028, (void (*)(void))sub_21FBF708C);
    sub_21FA2A08C(&qword_25554D0C8, (uint64_t (*)(uint64_t))sub_21FBF7338, MEMORY[0x24BDB98F0]);
    sub_21FBF7448(&qword_25554D0B0, &qword_25554D040, (void (*)(uint64_t))sub_21FBF7028, (void (*)(void))sub_21FBF708C);
    v0 = sub_21FC5B010();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D0C0);
  }
}

void sub_21FBF7574()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D0D0)
  {
    sub_21FBF7488();
    sub_21FAB480C(255, &qword_25554D040, (void (*)(uint64_t))sub_21FBF7028, (void (*)(void))sub_21FBF708C);
    sub_21FA2A08C(&qword_25554D0D8, (uint64_t (*)(uint64_t))sub_21FBF7488, MEMORY[0x24BDB9530]);
    sub_21FBF7448(&qword_25554D0B0, &qword_25554D040, (void (*)(uint64_t))sub_21FBF7028, (void (*)(void))sub_21FBF708C);
    v0 = sub_21FC5B010();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D0D0);
  }
}

uint64_t sub_21FBF7660()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FBF7684(uint64_t a1)
{
  uint64_t v1;

  return sub_21FBF65F4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_21FBF768C(uint64_t a1, id a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = (uint64_t)a2;
  if (a1)
  {

    return a1;
  }
  else if (!a2)
  {
    sub_21FA720B8();
    v2 = swift_allocError();
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_BYTE *)(v4 + 16) = 2;
  }
  return v2;
}

void sub_21FBF76FC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  _QWORD *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  _QWORD v12[6];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = a3;
  v7[3] = sub_21FA5F86C;
  v7[4] = v6;
  v8 = objc_allocWithZone(MEMORY[0x24BE46B48]);
  v12[4] = sub_21FBF78DC;
  v12[5] = v7;
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 1107296256;
  v12[2] = sub_21FBAD590;
  v12[3] = &block_descriptor_18;
  v9 = _Block_copy(v12);
  swift_retain();
  v10 = a3;
  v11 = objc_msgSend(v8, sel_initWithUpdateHandler_, v9);
  _Block_release(v9);
  swift_release();
  objc_msgSend(v10, sel_executeQuery_, v11);

}

uint64_t sub_21FBF7818()
{
  swift_release();
  return swift_deallocObject();
}

void sub_21FBF783C(uint64_t a1, void *a2, void *a3, id a4, void (*a5)(void *, _QWORD))
{
  id v8;
  id v9;
  void *v10;
  char v11;

  objc_msgSend(a4, sel_stopQuery_, a1);
  v8 = a2;
  v9 = a3;
  v10 = (void *)sub_21FBF768C((uint64_t)a2, a3);
  a5(v10, v11 & 1);
  sub_21FBAD630(v10);
}

uint64_t sub_21FBF78B0()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void sub_21FBF78DC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;

  sub_21FBF783C(a1, a2, a3, *(id *)(v3 + 16), *(void (**)(void *, _QWORD))(v3 + 24));
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

unint64_t sub_21FBF7900(void (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD v34[2];
  void (*v35)(_QWORD);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_21FA2D1A0(0, &qword_25554D0E8, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingCycleTrackingQuery, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v34 - v8;
  v43 = type metadata accessor for ClinicalSharingCycleTrackingQuery();
  v46 = *(_QWORD *)(v43 - 8);
  v10 = MEMORY[0x24BDAC7A8](v43);
  v42 = (uint64_t)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v37 = (uint64_t)v34 - v12;
  v45 = sub_21FC5AAF4();
  v13 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D1A0(0, &qword_25406BE78, v16, v6);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v34 - v18;
  v20 = *(_QWORD *)(a3 + 16);
  if (v20)
  {
    v41 = v9;
    v21 = a3 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v39 = *(_QWORD *)(v13 + 72);
    v44 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v34[1] = a3;
    swift_bridgeObjectRetain();
    v47 = MEMORY[0x24BEE4AF8];
    v35 = a1;
    v36 = a2;
    v22 = v45;
    v40 = v15;
    while (1)
    {
      v44(v19, v21, v22);
      v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
      v38(v19, 0, 1, v22);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v19, 1, v22) == 1)
        break;
      v48 = v21;
      v24 = v19;
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v19, v22);
      v25 = (uint64_t)v41;
      v26 = v49;
      a1(v15);
      if (v26)
      {
        (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v22);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v47;
      }
      v49 = 0;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v22);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v25, 1, v43) == 1)
      {
        sub_21FA2D1F8(v25, &qword_25554D0E8, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingCycleTrackingQuery);
        v19 = v24;
        v22 = v45;
        v23 = v48;
      }
      else
      {
        v27 = v37;
        sub_21FA2D23C(v25, v37, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
        sub_21FA2D23C(v27, v42, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v47 = sub_21FA7DE40(0, *(_QWORD *)(v47 + 16) + 1, 1, v47);
        v19 = v24;
        v23 = v48;
        v29 = *(_QWORD *)(v47 + 16);
        v28 = *(_QWORD *)(v47 + 24);
        if (v29 >= v28 >> 1)
          v47 = sub_21FA7DE40(v28 > 1, v29 + 1, 1, v47);
        v22 = v45;
        v30 = v46;
        v31 = v47;
        *(_QWORD *)(v47 + 16) = v29 + 1;
        sub_21FA2D23C(v42, v31+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(_QWORD *)(v30 + 72) * v29, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
        a1 = v35;
      }
      v15 = v40;
      v21 = v23 + v39;
      if (!--v20)
      {
        v38(v19, 1, 1, v22);
        break;
      }
    }
  }
  else
  {
    v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
    swift_bridgeObjectRetain();
    v47 = MEMORY[0x24BEE4AF8];
    v32(v19, 1, 1, v45);
  }
  swift_bridgeObjectRelease();
  return v47;
}

unint64_t sub_21FBF7D28(void (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  void (*v25)(_QWORD);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;

  v30 = a2;
  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v24 - v7;
  v27 = sub_21FC5AAAC();
  v9 = *(_QWORD *)(v27 - 8);
  v10 = MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v26 = (char *)&v24 - v12;
  v13 = *(_QWORD *)(a3 + 16);
  if (!v13)
    return MEMORY[0x24BEE4AF8];
  v14 = *(_QWORD *)(type metadata accessor for PBClinicalRecord(0) - 8);
  v15 = a3 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v28 = *(_QWORD *)(v14 + 72);
  v24 = a3;
  swift_bridgeObjectRetain();
  v16 = MEMORY[0x24BEE4AF8];
  v25 = a1;
  v17 = v27;
  do
  {
    a1(v15);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v16;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v17) == 1)
    {
      sub_21FA2D1F8((uint64_t)v8, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
    }
    else
    {
      v18 = v9;
      v19 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v20 = v26;
      v19(v26, v8, v17);
      v19(v29, v20, v17);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v16 = sub_21FA7DE84(0, *(_QWORD *)(v16 + 16) + 1, 1, v16);
      v22 = *(_QWORD *)(v16 + 16);
      v21 = *(_QWORD *)(v16 + 24);
      if (v22 >= v21 >> 1)
        v16 = sub_21FA7DE84(v21 > 1, v22 + 1, 1, v16);
      *(_QWORD *)(v16 + 16) = v22 + 1;
      v17 = v27;
      v19((char *)(v16+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(_QWORD *)(v18 + 72) * v22), v29, v27);
      v9 = v18;
      a1 = v25;
    }
    v15 += v28;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v16;
}

unint64_t sub_21FBF7FB8(void (*a1)(id *), uint64_t a2, unint64_t a3)
{
  return sub_21FBF7FCC(a1, a2, a3);
}

unint64_t sub_21FBF7FCC(void (*a1)(id *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(id *);
  uint64_t v28;
  id v29;

  v27 = a1;
  sub_21FA2D1A0(0, &qword_25554D110, type metadata accessor for PBTimeSeries.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v21 - v6;
  v26 = type metadata accessor for PBTimeSeries.Value(0);
  v28 = *(_QWORD *)(v26 - 8);
  v8 = MEMORY[0x24BDAC7A8](v26);
  v25 = (uint64_t)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v23 = (uint64_t)&v21 - v10;
  if (a3 >> 62)
    goto LABEL_20;
  v11 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v11; v11 = sub_21FC5BC7C())
  {
    v12 = MEMORY[0x24BEE4AF8];
    v24 = a3 & 0xC000000000000001;
    v13 = 4;
    v22 = a3;
    while (1)
    {
      v14 = v24 ? (id)MEMORY[0x2207D057C](v13 - 4, a3) : *(id *)(a3 + 8 * v13);
      v15 = v14;
      v16 = v13 - 3;
      if (__OFADD__(v13 - 4, 1))
        break;
      v29 = v14;
      v27(&v29);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v12;
      }

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v7, 1, v26) == 1)
      {
        sub_21FA2D1F8((uint64_t)v7, &qword_25554D110, type metadata accessor for PBTimeSeries.Value);
      }
      else
      {
        v17 = v23;
        sub_21FA2D23C((uint64_t)v7, v23, type metadata accessor for PBTimeSeries.Value);
        sub_21FA2D23C(v17, v25, type metadata accessor for PBTimeSeries.Value);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v12 = sub_21FA7E0EC(0, *(_QWORD *)(v12 + 16) + 1, 1, v12);
        v19 = *(_QWORD *)(v12 + 16);
        v18 = *(_QWORD *)(v12 + 24);
        if (v19 >= v18 >> 1)
          v12 = sub_21FA7E0EC(v18 > 1, v19 + 1, 1, v12);
        *(_QWORD *)(v12 + 16) = v19 + 1;
        sub_21FA2D23C(v25, v12+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(_QWORD *)(v28 + 72) * v19, type metadata accessor for PBTimeSeries.Value);
        a3 = v22;
      }
      ++v13;
      if (v16 == v11)
      {
        swift_bridgeObjectRelease();
        return v12;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

uint64_t *sub_21FBF82B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _BYTE v16[16];
  uint64_t v17;

  v6 = sub_21FC5ACD4();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (void **)&v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *(_QWORD *)(a2 + 56);
  v17 = a1;
  swift_bridgeObjectRetain();
  v11 = (uint64_t *)MEMORY[0x24BEE4AF8];
  v12 = sub_21FBE9FC4(MEMORY[0x24BEE4AF8], (void (*)(uint64_t *, char *))sub_21FBF4030, (uint64_t)v16, v10);
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(v12 + 16);
  swift_bridgeObjectRelease();
  if (v13)
  {
    (*(void (**)(void **, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
    if ((*(unsigned int (**)(void **, uint64_t))(v7 + 88))(v9, v6) == *MEMORY[0x24BE458E8])
    {
      (*(void (**)(void **, uint64_t))(v7 + 96))(v9, v6);
      v14 = *v9;
      v11 = sub_21FBF8D18(*v9, a2, a3);

    }
    else
    {
      (*(void (**)(void **, uint64_t))(v7 + 8))(v9, v6);
    }
  }
  return v11;
}

uint64_t sub_21FBF8408(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[16];
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;

  v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_21FA2D1A0(0, (unint64_t *)&qword_25553F0B0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v26[-v4];
  sub_21FA2D1A0(0, &qword_25553F0B8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], v2);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v26[-v7];
  v9 = sub_21FC5A83C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = &v26[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_21FC5A6C8();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = &v26[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = sub_21FC5AC08();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v8, 1, 1, v17);
  v18 = sub_21FC5AC5C();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v5, 1, 1, v18);
  sub_21FC5A824();
  sub_21FC5A7E8();
  sub_21FAACB98((uint64_t)v12, 8u, 0, (uint64_t)v16);
  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
  v19 = swift_bridgeObjectRetain();
  v20 = sub_21FBFF6AC(v19);
  swift_bridgeObjectRelease();
  v27 = a1;
  v28 = v16;
  v21 = sub_21FBF7900((void (*)(_QWORD))sub_21FBFFAF0, (uint64_t)v26, v20);
  swift_release();
  sub_21FA2D1A0(0, &qword_25553FD80, (uint64_t (*)(uint64_t))sub_21FBFF618, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_21FC5EE30;
  *(_QWORD *)(v22 + 56) = &type metadata for ClinicalSharingPatientMetadataQuery;
  *(_QWORD *)(v22 + 64) = &off_24E4854D0;
  *(_QWORD *)(v22 + 32) = a1;
  swift_retain();
  v23 = sub_21FBFEB80(v21);
  swift_bridgeObjectRelease();
  v29 = v22;
  sub_21FBDFA50(v23);
  v24 = v29;
  (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v16, v13);
  return v24;
}

uint64_t sub_21FBF8734(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  id v44;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v46;
  id v48;
  id v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58[16];
  char *v59;

  v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_21FA2D1A0(0, (unint64_t *)&qword_25553F0B0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v51 = (char *)&v48 - v4;
  sub_21FA2D1A0(0, &qword_25553F0B8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], v2);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v48 - v6;
  v52 = sub_21FC5A83C();
  v50 = *(_QWORD *)(v52 - 8);
  MEMORY[0x24BDAC7A8](v52);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_21FC5A6C8();
  v54 = *(_QWORD *)(v10 - 8);
  v55 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v53 = (uint64_t)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for ClinicalSharingMedicationDoseEventQuery();
  v12 = MEMORY[0x24BDAC7A8](v56);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v57 = (uint64_t)&v48 - v15;
  v16 = sub_21FC5ACD4();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(a1 + 56);
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v19, *MEMORY[0x24BE45938], v16);
  v59 = v19;
  swift_bridgeObjectRetain();
  v21 = MEMORY[0x24BEE4AF8];
  v22 = sub_21FBE9FC4(MEMORY[0x24BEE4AF8], (void (*)(uint64_t *, char *))sub_21FBF4030, (uint64_t)v58, v20);
  swift_bridgeObjectRelease();
  v23 = *(_QWORD *)(v22 + 16);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  if (v23)
  {
    v24 = (void *)objc_opt_self();
    v48 = v24;
    swift_retain();
    v49 = objc_msgSend(v24, sel_medicationUserDomainConceptTypeIdentifier);
    v25 = sub_21FC5AC08();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v7, 1, 1, v25);
    v26 = sub_21FC5AC5C();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v51, 1, 1, v26);
    swift_retain();
    sub_21FC5A824();
    sub_21FC5A7B8();
    v27 = v53;
    sub_21FAACB98((uint64_t)v9, 8u, 0, v53);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v9, v52);
    v28 = (void *)objc_opt_self();
    v29 = objc_msgSend(v28, sel_medicationDoseEventType);
    *(_QWORD *)v14 = a1;
    *((_QWORD *)v14 + 1) = v29;
    v30 = v55;
    v31 = v56;
    v32 = v54;
    (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(&v14[*(int *)(v56 + 28)], v27, v55);
    v33 = &v14[*(int *)(v31 + 32)];
    *(_QWORD *)v33 = 2;
    v33[8] = 1;
    swift_retain();
    v34 = v29;
    v35 = objc_msgSend(v34, sel_code);
    swift_release();

    if (v35 == (id)144)
      v36 = 10;
    else
      v36 = 300;
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v27, v30);
    *((_QWORD *)v14 + 2) = v36;
    v37 = (uint64_t)v14;
    v38 = v57;
    sub_21FA2D23C(v37, v57, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingMedicationDoseEventQuery);
    swift_retain();
    v39 = objc_msgSend(v48, sel_medicationUserDomainConceptTypeIdentifier);
    v40 = objc_msgSend(v28, sel_medicationDoseEventType);
    swift_retain();
    v41 = v40;
    v42 = objc_msgSend(v41, sel_code);

    swift_release();
    if (v42 == (id)144)
      v43 = 10;
    else
      v43 = 300;
    sub_21FA2D1A0(0, &qword_25553FD80, (uint64_t (*)(uint64_t))sub_21FBFF618, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_21FC603D0;
    *(_QWORD *)(v21 + 56) = &type metadata for ClinicalSharingMedicationTrackingQuery;
    *(_QWORD *)(v21 + 64) = &off_24E48FA30;
    v44 = v49;
    *(_QWORD *)(v21 + 32) = a1;
    *(_QWORD *)(v21 + 40) = v44;
    *(_QWORD *)(v21 + 96) = v31;
    *(_QWORD *)(v21 + 104) = &off_24E491998;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v21 + 72));
    sub_21FA2D120(v38, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingMedicationDoseEventQuery);
    *(_QWORD *)(v21 + 136) = &type metadata for ClinicalSharingMedicationScheduleQuery;
    *(_QWORD *)(v21 + 144) = &off_24E4855C8;
    v46 = (_QWORD *)swift_allocObject();
    *(_QWORD *)(v21 + 112) = v46;
    v46[2] = a1;
    v46[3] = v41;
    v46[4] = v43;
    v46[5] = v39;
    *(_QWORD *)(v21 + 176) = &type metadata for ClinicalSharingActiveMedicationQuery;
    *(_QWORD *)(v21 + 184) = &off_24E48CF50;
    *(_QWORD *)(v21 + 152) = a1;
    swift_retain();
    sub_21FA326EC(v38, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingMedicationDoseEventQuery);
  }
  return v21;
}

uint64_t *sub_21FBF8D18(void *a1, uint64_t a2, uint64_t a3)
{
  int *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  void *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  int64x2_t *v52;
  uint64_t v53;
  void *v54;
  id v55;
  uint64_t *v56;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;

  v62 = a2;
  v5 = (int *)type metadata accessor for ClinicalSharingElectrocardiogramQuery(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (uint64_t *)((char *)&boxed_opaque_existential_1 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_21FA2D1A0(0, (unint64_t *)&qword_25553F0B0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&boxed_opaque_existential_1 - v10;
  sub_21FA2D1A0(0, &qword_25553F0B8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], v8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&boxed_opaque_existential_1 - v13;
  v15 = sub_21FC5A83C();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&boxed_opaque_existential_1 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_21FC5A6C8();
  v61 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v60 = (uint64_t)&boxed_opaque_existential_1 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = objc_msgSend(a1, sel_code);
  if (v21 == (id)80)
  {
    sub_21FA5BE58(0, &qword_25553FF78);
    v34 = (void *)MEMORY[0x2207D03B4]((id)*MEMORY[0x24BDD33A8]);
    v35 = v62;
    v36 = sub_21FBF9460(v34, v62, a3);

    v37 = (void *)MEMORY[0x2207D03B4]((id)*MEMORY[0x24BDD33A0]);
    v38 = sub_21FBF9460(v37, v35, a3);

    v63 = v36;
    sub_21FBDFA50((uint64_t)v38);
    return v63;
  }
  else if (v21 == (id)144)
  {
    sub_21FA2D1A0(0, &qword_25553FD80, (uint64_t (*)(uint64_t))sub_21FBFF618, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_21FC5EE30;
    boxed_opaque_existential_1 = (uint64_t *)(v22 + 32);
    v39 = sub_21FC5AC08();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v14, 1, 1, v39);
    v40 = sub_21FC5AC5C();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v11, 1, 1, v40);
    v59 = v19;
    v41 = v62;
    swift_retain();
    sub_21FC5A824();
    sub_21FC5A7E8();
    v42 = v60;
    sub_21FAACB98((uint64_t)v18, 8u, 0, v60);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    *(_QWORD *)(v22 + 56) = v5;
    *(_QWORD *)(v22 + 64) = &off_24E48DFF8;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(boxed_opaque_existential_1);
    v43 = v5[8];
    sub_21FA5BE58(0, &qword_25554D0F0);
    v44 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_electrocardiogramType);
    *(uint64_t *)((char *)v7 + v43) = (uint64_t)v44;
    v45 = v5[9];
    v46 = (void *)objc_opt_self();
    v47 = v44;
    *(uint64_t *)((char *)v7 + v45) = (uint64_t)objc_msgSend(v46, sel_voltUnitWithMetricPrefix_, 4);
    *v7 = v41;
    v48 = v61;
    v49 = v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))((char *)v7 + v5[5], v42, v59);
    swift_retain();
    v50 = objc_msgSend(v47, sel_code);
    swift_release();

    if (v50 == (id)144)
      v51 = 10;
    else
      v51 = 300;
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v42, v49);
    *(uint64_t *)((char *)v7 + v5[6]) = v51;
    v52 = (int64x2_t *)((char *)v7 + v5[7]);
    *v52 = (int64x2_t)xmmword_21FC71220;
    v52[1] = vdupq_n_s64(5uLL);
    sub_21FA2D23C((uint64_t)v7, (uint64_t)boxed_opaque_existential_1, type metadata accessor for ClinicalSharingElectrocardiogramQuery);
  }
  else if (v21 == (id)100)
  {
    sub_21FA2D1A0(0, &qword_25553FD80, (uint64_t (*)(uint64_t))sub_21FBFF618, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_21FC5EE30;
    v23 = sub_21FC5AC08();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v14, 1, 1, v23);
    v24 = sub_21FC5AC5C();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v11, 1, 1, v24);
    v25 = v19;
    v26 = v62;
    swift_retain();
    sub_21FC5A824();
    sub_21FC5A7E8();
    v27 = v60;
    sub_21FAACB98((uint64_t)v18, 8u, 0, v60);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    v28 = (int *)type metadata accessor for ClinicalSharingActivitySummaryQuery();
    *(_QWORD *)(v22 + 56) = v28;
    *(_QWORD *)(v22 + 64) = &off_24E48BC20;
    v29 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v22 + 32));
    *v29 = v26;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))((char *)v29 + v28[5], v27, v25);
    v30 = v28[6];
    v31 = (void *)objc_opt_self();
    *(uint64_t *)((char *)v29 + v30) = (uint64_t)objc_msgSend(v31, sel_countUnit);
    v32 = v28[7];
    *(uint64_t *)((char *)v29 + v32) = (uint64_t)objc_msgSend(v31, sel_kilocalorieUnit);
    v33 = v28[8];
    *(uint64_t *)((char *)v29 + v33) = (uint64_t)objc_msgSend(v31, sel_minuteUnit);
  }
  else
  {
    objc_opt_self();
    v53 = swift_dynamicCastObjCClass();
    if (v53)
    {
      v54 = (void *)v53;
      v55 = a1;
      v56 = sub_21FBF9460(v54, v62, a3);

      return v56;
    }
    return (uint64_t *)MEMORY[0x24BEE4AF8];
  }
  return (uint64_t *)v22;
}

uint64_t *sub_21FBF9460(void *a1, uint64_t a2, uint64_t a3)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void (*v31)(char *, uint64_t);
  int *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  void *v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  char *v59;
  void (*v60)(uint64_t *, uint64_t, uint64_t, _QWORD);
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  char *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void (*v91)(char *, uint64_t);
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  _QWORD *v107;
  void *v108;
  id v109;
  int *v110;
  id v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t (*v116)(uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  void (*v127)(char *, uint64_t);
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(char *, uint64_t, _QWORD *);
  uint64_t v134;
  void (*v135)(char *, uint64_t);
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(char *, uint64_t);
  void (*v142)(char *, uint64_t);
  uint64_t v143;
  void (*v144)(char *, uint64_t);
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(char *, uint64_t);
  uint64_t v149;
  _QWORD *v150;
  void *v151;
  id v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t *v157;
  void (*v158)(char *, uint64_t, uint64_t, _QWORD *);
  uint64_t v159;
  uint64_t v160;
  id v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  id v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t *v171;
  _QWORD *v172;
  uint64_t (*v173)(uint64_t, uint64_t);
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  void *v185;
  void (*v186)(char *, uint64_t);
  id v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void (*v193)(char *, uint64_t, _QWORD *);
  uint64_t v194;
  id v195;
  uint64_t v196;
  void (*v197)(char *, uint64_t);
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  id v201;
  uint64_t (*v202)(uint64_t, uint64_t);
  uint64_t v203;
  uint64_t v204;
  void (*v205)(uint64_t, char *, _QWORD *);
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  void *v212;
  void (*v213)(char *, uint64_t);
  id v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  void *v221;
  void (*v222)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t *v227;
  uint64_t v228;
  void *v229;
  void (*v230)(char *, uint64_t);
  uint64_t v231;
  uint64_t v232;
  void (*v233)(_QWORD, uint64_t, _QWORD *);
  uint64_t v234;
  void *v235;
  void (*v236)(char *, uint64_t, uint64_t, _QWORD);
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  void (*v245)(char *, uint64_t);
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void *v249;
  id v250;
  char *v251;
  uint64_t v252;
  void (*v253)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t *v254;
  char *v255;
  uint64_t v256;
  void (*v257)(char *, uint64_t);
  void (*v258)(uint64_t *, uint64_t, uint64_t, uint64_t);
  void *v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t *v262;
  char *v263;
  void *v264;
  char *v265;
  char *v266;
  void (*v267)(char *, uint64_t, uint64_t, _QWORD);
  char *v268;
  void (*v269)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t *v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  int *v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  void *v281;
  id v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  uint64_t v290;
  _QWORD *v291;
  void *v292;
  int *v293;
  id v294;
  uint64_t v295;
  char *v296;
  void *v297;
  void *v298;
  char *v299;
  char *v300;
  id v301;
  uint64_t v302;
  uint64_t *v303;
  _QWORD *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t *v307;
  uint64_t v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t (*v314)(uint64_t, uint64_t);
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  void *v326;
  void (*v327)(char *, uint64_t);
  uint64_t v328;
  void (*v329)(uint64_t *, uint64_t, uint64_t, uint64_t);
  void (*v330)(char *, uint64_t, uint64_t, _QWORD);
  uint64_t *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  void (*v337)(char *, uint64_t);
  uint64_t v338;
  char *v339;
  uint64_t *v340;
  char *v341;
  uint64_t *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  void (*v346)(char *, uint64_t);
  void (*v347)(char *, uint64_t);
  uint64_t v348;
  void (*v349)(uint64_t *, uint64_t, uint64_t, uint64_t);
  void (*v350)(char *, uint64_t, uint64_t, _QWORD);
  uint64_t *v351;
  void (*v352)(uint64_t *, uint64_t, uint64_t, _QWORD);
  void (*v353)(char *, uint64_t);
  uint64_t v354;
  char *v355;
  uint64_t *v356;
  uint64_t v357;
  void *v358;
  uint64_t v359;
  void (*v360)(char *, uint64_t);
  _QWORD *v361;
  uint64_t (*v362)(uint64_t, uint64_t);
  uint64_t v363;
  uint64_t *v364;
  char *v365;
  uint64_t v366;
  void (*v367)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t *v372;
  _QWORD *v373;
  uint64_t v374;
  void *v375;
  void (*v376)(char *, uint64_t);
  id v377;
  uint64_t v378;
  char *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  _QWORD *v383;
  _QWORD *v384;
  void (*v385)(_QWORD, uint64_t, _QWORD *);
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  void *ObjCClassFromMetadata;
  uint64_t v392;
  id v393;
  uint64_t v394;
  uint64_t *v395;
  uint64_t v396;
  uint64_t *v397;
  uint64_t v398;
  uint64_t v399;
  void *v400;
  uint64_t v401;
  id v402;
  uint64_t v403;
  uint64_t *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  char *v410;
  uint64_t *v411;
  char *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  char *v420;
  uint64_t *v421;
  uint64_t v422;
  _QWORD v424[2];
  void (*v425)(uint64_t, char *, _QWORD *);
  void (*v426)(uint64_t, char *, _QWORD *);
  __int128 v427;
  __int128 v428;
  __int128 v429;
  char *v430;
  __int128 v431;
  void (*v432)(uint64_t *, uint64_t, uint64_t, uint64_t);
  __int128 v433;
  __int128 v434;
  char *v435;
  char *v436;
  char *v437;
  uint64_t *v438;
  id v439;
  void (*v440)(char *, uint64_t);
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  _QWORD *v444;
  uint64_t *v445;
  uint64_t v446;
  char v447;

  *(_QWORD *)&v434 = a3;
  v442 = a2;
  v4 = (int *)type metadata accessor for ClinicalSharingSampleQuery();
  MEMORY[0x24BDAC7A8](v4);
  v435 = (char *)v424 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v444 = (_QWORD *)sub_21FC5A6C8();
  v441 = *(v444 - 1);
  MEMORY[0x24BDAC7A8](v444);
  v7 = (char *)v424 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_21FA2D1A0(0, (unint64_t *)&qword_25553F0B0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (_QWORD *)((char *)v424 - v10);
  sub_21FA2D1A0(0, &qword_25553F0B8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], v8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v424 - v13;
  v15 = sub_21FC5A83C();
  v440 = *(void (**)(char *, uint64_t))(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v424 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v439 = a1;
  v18 = objc_msgSend(a1, sel_code);
  v445 = (uint64_t *)MEMORY[0x24BEE4AF8];
  switch((unint64_t)v18)
  {
    case 0uLL:
    case 3uLL:
    case 0x10uLL:
    case 0x11uLL:
      v443 = v15;
      v19 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598];
      sub_21FA2D1A0(0, &qword_25553FD80, (uint64_t (*)(uint64_t))sub_21FBFF618, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_21FC60A70;
      v445 = (uint64_t *)sub_21FC5AC08();
      *(_QWORD *)&v434 = *(_QWORD *)(*(v445 - 1) + 56);
      ((void (*)(char *, uint64_t, uint64_t, uint64_t *))v434)(v14, 1, 1, v445);
      v21 = sub_21FC5AC5C();
      v432 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
      *(_QWORD *)&v433 = v21;
      v432(v11, 1, 1, v21);
      sub_21FC5A824();
      v437 = v14;
      sub_21FC5A7E8();
      v436 = v7;
      v22 = v442;
      sub_21FAACB98((uint64_t)v17, 0, 0, (uint64_t)v7);
      sub_21FA2D1A0(0, &qword_25553FD78, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], v19);
      *(_QWORD *)&v431 = v23;
      v24 = v441;
      v25 = *(_QWORD *)(v441 + 72);
      v26 = *(unsigned __int8 *)(v441 + 80);
      v438 = v11;
      v27 = (v26 + 32) & ~v26;
      v430 = (char *)(v27 + v25);
      *(_QWORD *)&v429 = v26 | 7;
      v28 = swift_allocObject();
      v428 = xmmword_21FC5EE30;
      *(_OWORD *)(v28 + 16) = xmmword_21FC5EE30;
      *(_QWORD *)&v427 = *(_QWORD *)(v24 + 32);
      ((void (*)(uint64_t, char *, _QWORD *))v427)(v28 + v27, v7, v444);
      *(_QWORD *)(v20 + 56) = &type metadata for ClinicalSharingStatisticsQuery;
      *(_QWORD *)(v20 + 64) = &off_24E48EB08;
      v29 = swift_allocObject();
      *(_QWORD *)(v20 + 32) = v29;
      *(_QWORD *)(v29 + 16) = v22;
      *(_QWORD *)(v29 + 24) = v28;
      v30 = v439;
      *(_QWORD *)(v29 + 32) = v439;
      *(_QWORD *)(v29 + 40) = 3;
      *(_WORD *)(v29 + 48) = 257;
      v440 = (void (*)(char *, uint64_t))*((_QWORD *)v440 + 1);
      v31 = v440;
      swift_retain();
      v32 = v4;
      v33 = v30;
      v34 = v443;
      v31(v17, v443);
      ((void (*)(char *, uint64_t, uint64_t, uint64_t *))v434)(v437, 1, 1, v445);
      v432(v438, 1, 1, v433);
      sub_21FC5A824();
      sub_21FC5A7E8();
      v35 = (uint64_t)v436;
      sub_21FAACB98((uint64_t)v17, 8u, 0, (uint64_t)v436);
      v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = v428;
      ((void (*)(uint64_t, uint64_t, _QWORD *))v427)(v36 + v27, v35, v444);
      *(_QWORD *)(v20 + 96) = &type metadata for ClinicalSharingStatisticsQuery;
      *(_QWORD *)(v20 + 104) = &off_24E48EB08;
      v37 = swift_allocObject();
      *(_QWORD *)(v20 + 72) = v37;
      *(_QWORD *)(v37 + 16) = v22;
      *(_QWORD *)(v37 + 24) = v36;
      *(_QWORD *)(v37 + 32) = v33;
      *(_QWORD *)(v37 + 40) = 2;
      *(_WORD *)(v37 + 48) = 257;
      swift_retain();
      v38 = v33;
      v440(v17, v34);
      ((void (*)(char *, uint64_t, uint64_t, uint64_t *))v434)(v437, 1, 1, v445);
      v432(v438, 1, 1, v433);
      sub_21FC5A824();
      sub_21FC5A7E8();
      swift_retain();
      sub_21FAACB98((uint64_t)v17, 8u, 0, v35);
      *(_QWORD *)(v20 + 136) = v32;
      *(_QWORD *)(v20 + 144) = &off_24E4842D8;
      v445 = (uint64_t *)v20;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v20 + 112));
      v40 = (uint64_t)v435;
      *(_QWORD *)v435 = v22;
      v41 = v441;
      v42 = v444;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v441 + 16))(v40 + v32[5], v35, v444);
      *(_QWORD *)(v40 + v32[6]) = v38;
      *(_BYTE *)(v40 + v32[8]) = 0;
      swift_retain();
      v43 = objc_msgSend(v38, sel_code);
      swift_release();
      if (v43 == (id)144)
        v44 = 10;
      else
        v44 = 300;
      (*(void (**)(uint64_t, _QWORD *))(v41 + 8))(v35, v42);
      *(_QWORD *)(v40 + v32[7]) = v44;
      v45 = v40 + v32[9];
      *(_QWORD *)v45 = 0;
      *(_BYTE *)(v45 + 8) = 1;
      sub_21FA2D23C(v40, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSampleQuery);
      goto LABEL_9;
    case 5uLL:
      v172 = v444;
      v173 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598];
      sub_21FA2D1A0(0, &qword_25553FD80, (uint64_t (*)(uint64_t))sub_21FBFF618, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v174 = swift_allocObject();
      *(_OWORD *)(v174 + 16) = xmmword_21FC60A70;
      v435 = (char *)sub_21FC5AC08();
      v445 = *(uint64_t **)(*((_QWORD *)v435 - 1) + 56);
      ((void (*)(char *, uint64_t, uint64_t, char *))v445)(v14, 1, 1, v435);
      v175 = sub_21FC5AC5C();
      v443 = v15;
      v176 = v175;
      *(_QWORD *)&v434 = *(_QWORD *)(*(_QWORD *)(v175 - 8) + 56);
      v438 = v11;
      *(_QWORD *)&v428 = v175;
      ((void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))v434)(v11, 1, 1, v175);
      sub_21FC5A824();
      v437 = v14;
      sub_21FC5A7E8();
      v436 = v7;
      v177 = v442;
      sub_21FAACB98((uint64_t)v17, 9u, 0, (uint64_t)v7);
      sub_21FA2D1A0(0, &qword_25553FD78, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], v173);
      v178 = v441;
      v179 = *(unsigned __int8 *)(v441 + 80);
      v432 = (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))(((v179 + 32) & ~v179) + *(_QWORD *)(v441 + 72));
      *(_QWORD *)&v433 = v180;
      v181 = (v179 + 32) & ~v179;
      v430 = (char *)v181;
      *(_QWORD *)&v431 = v179 | 7;
      v182 = swift_allocObject();
      v429 = xmmword_21FC5EE30;
      *(_OWORD *)(v182 + 16) = xmmword_21FC5EE30;
      v441 = *(_QWORD *)(v178 + 32);
      v183 = v172;
      ((void (*)(uint64_t, char *, _QWORD *))v441)(v182 + v181, v7, v172);
      *(_QWORD *)(v174 + 56) = &type metadata for ClinicalSharingStatisticsQuery;
      *(_QWORD *)(v174 + 64) = &off_24E48EB08;
      v184 = swift_allocObject();
      *(_QWORD *)(v174 + 32) = v184;
      *(_QWORD *)(v184 + 16) = v177;
      *(_QWORD *)(v184 + 24) = v182;
      v185 = v439;
      *(_QWORD *)(v184 + 32) = v439;
      *(_QWORD *)(v184 + 40) = 4;
      *(_WORD *)(v184 + 48) = 257;
      v440 = (void (*)(char *, uint64_t))*((_QWORD *)v440 + 1);
      v186 = v440;
      swift_retain();
      v187 = v185;
      v188 = v443;
      v186(v17, v443);
      ((void (*)(char *, uint64_t, uint64_t, char *))v445)(v437, 1, 1, v435);
      v189 = v438;
      ((void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))v434)(v438, 1, 1, v176);
      sub_21FC5A824();
      sub_21FC5A7E8();
      v190 = (uint64_t)v436;
      sub_21FAACB98((uint64_t)v17, 0, 0, (uint64_t)v436);
      v191 = swift_allocObject();
      *(_OWORD *)(v191 + 16) = v429;
      v192 = v190;
      v193 = (void (*)(char *, uint64_t, _QWORD *))v441;
      ((void (*)(char *, uint64_t, _QWORD *))v441)(&v430[v191], v192, v183);
      *(_QWORD *)(v174 + 96) = &type metadata for ClinicalSharingStatisticsQuery;
      *(_QWORD *)(v174 + 104) = &off_24E48EB08;
      v194 = swift_allocObject();
      *(_QWORD *)(v174 + 72) = v194;
      *(_QWORD *)(v194 + 16) = v177;
      *(_QWORD *)(v194 + 24) = v191;
      *(_QWORD *)(v194 + 32) = v187;
      *(_QWORD *)(v194 + 40) = 3;
      *(_WORD *)(v194 + 48) = 257;
      swift_retain();
      v195 = v187;
      v196 = v188;
      v197 = v440;
      v440(v17, v196);
      ((void (*)(char *, uint64_t, uint64_t, char *))v445)(v437, 1, 1, v435);
      ((void (*)(uint64_t *, uint64_t, uint64_t, _QWORD))v434)(v189, 1, 1, v428);
      sub_21FC5A824();
      sub_21FC5A7E8();
      v198 = (uint64_t)v436;
      sub_21FAACB98((uint64_t)v17, 8u, 0, (uint64_t)v436);
      v199 = swift_allocObject();
      *(_OWORD *)(v199 + 16) = v429;
      v193(&v430[v199], v198, v183);
      *(_QWORD *)(v174 + 136) = &type metadata for ClinicalSharingStatisticsQuery;
      *(_QWORD *)(v174 + 144) = &off_24E48EB08;
      v200 = swift_allocObject();
      v445 = (uint64_t *)v174;
      *(_QWORD *)(v174 + 112) = v200;
      *(_QWORD *)(v200 + 16) = v177;
      *(_QWORD *)(v200 + 24) = v199;
      *(_QWORD *)(v200 + 32) = v195;
      *(_QWORD *)(v200 + 40) = 2;
      *(_WORD *)(v200 + 48) = 257;
      swift_retain();
      v201 = v195;
      v197(v17, v443);
      return v445;
    case 7uLL:
    case 0xAuLL:
    case 0x4BuLL:
      sub_21FA2D1A0(0, &qword_25553FD80, (uint64_t (*)(uint64_t))sub_21FBFF618, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v77 = swift_allocObject();
      *(_OWORD *)(v77 + 16) = xmmword_21FC5F720;
      v78 = sub_21FC5AC08();
      v79 = v441;
      v80 = v78;
      v445 = *(uint64_t **)(*(_QWORD *)(v78 - 8) + 56);
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v445)(v14, 1, 1, v78);
      v81 = sub_21FC5AC5C();
      v443 = v15;
      v82 = v81;
      v435 = *(char **)(*(_QWORD *)(v81 - 8) + 56);
      v438 = v11;
      ((void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))v435)(v11, 1, 1, v81);
      sub_21FC5A824();
      v437 = v14;
      sub_21FC5A7E8();
      v436 = v7;
      v83 = v442;
      sub_21FAACB98((uint64_t)v17, 0, 0, (uint64_t)v7);
      sub_21FA2D1A0(0, &qword_25553FD78, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      *(_QWORD *)&v434 = v84;
      v85 = *(_QWORD *)(v79 + 72);
      v86 = *(unsigned __int8 *)(v79 + 80);
      v87 = (v86 + 32) & ~v86;
      v432 = (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))(v86 | 7);
      *(_QWORD *)&v433 = v87 + v85;
      v88 = swift_allocObject();
      v431 = xmmword_21FC5EE30;
      *(_OWORD *)(v88 + 16) = xmmword_21FC5EE30;
      v441 = *(_QWORD *)(v79 + 32);
      ((void (*)(uint64_t, char *, _QWORD *))v441)(v88 + v87, v7, v444);
      *(_QWORD *)(v77 + 56) = &type metadata for ClinicalSharingStatisticsQuery;
      *(_QWORD *)(v77 + 64) = &off_24E48EB08;
      v89 = swift_allocObject();
      *(_QWORD *)(v77 + 32) = v89;
      *(_QWORD *)(v89 + 16) = v83;
      *(_QWORD *)(v89 + 24) = v88;
      v90 = v439;
      *(_QWORD *)(v89 + 32) = v439;
      *(_QWORD *)(v89 + 40) = 3;
      *(_WORD *)(v89 + 48) = 257;
      v440 = (void (*)(char *, uint64_t))*((_QWORD *)v440 + 1);
      v91 = v440;
      swift_retain();
      v92 = v90;
      v91(v17, v443);
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v445)(v437, 1, 1, v80);
      ((void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))v435)(v438, 1, 1, v82);
      sub_21FC5A824();
      sub_21FC5A7E8();
      v93 = (uint64_t)v436;
      sub_21FAACB98((uint64_t)v17, 8u, 0, (uint64_t)v436);
      v94 = swift_allocObject();
      *(_OWORD *)(v94 + 16) = v431;
      ((void (*)(uint64_t, uint64_t, _QWORD *))v441)(v94 + v87, v93, v444);
      *(_QWORD *)(v77 + 96) = &type metadata for ClinicalSharingStatisticsQuery;
      *(_QWORD *)(v77 + 104) = &off_24E48EB08;
      v95 = swift_allocObject();
      v445 = (uint64_t *)v77;
      *(_QWORD *)(v77 + 72) = v95;
      *(_QWORD *)(v95 + 16) = v83;
      *(_QWORD *)(v95 + 24) = v94;
      *(_QWORD *)(v95 + 32) = v92;
      *(_QWORD *)(v95 + 40) = 2;
      *(_WORD *)(v95 + 48) = 257;
      swift_retain();
      v96 = v92;
LABEL_9:
      v97 = v17;
      v98 = v443;
      goto LABEL_10;
    case 0xFuLL:
      v443 = v15;
      v202 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598];
      sub_21FA2D1A0(0, &qword_25553FD80, (uint64_t (*)(uint64_t))sub_21FBFF618, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v203 = swift_allocObject();
      *(_OWORD *)(v203 + 16) = xmmword_21FC6FB00;
      *(_QWORD *)&v433 = sub_21FC5AC08();
      *(_QWORD *)&v431 = *(_QWORD *)(*(_QWORD *)(v433 - 8) + 56);
      ((void (*)(char *, uint64_t, uint64_t, _QWORD))v431)(v14, 1, 1, v433);
      v430 = (char *)sub_21FC5AC5C();
      v432 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*((_QWORD *)v430 - 1) + 56);
      v438 = v11;
      v432(v11, 1, 1, (uint64_t)v430);
      sub_21FC5A824();
      v437 = v14;
      sub_21FC5A7E8();
      v204 = v442;
      sub_21FAACB98((uint64_t)v17, 9u, 0, (uint64_t)v7);
      sub_21FA2D1A0(0, &qword_25553FD78, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], v202);
      v426 = v205;
      v206 = *(unsigned __int8 *)(v441 + 80);
      v207 = v441;
      v424[1] = ((v206 + 32) & ~v206) + *(_QWORD *)(v441 + 72);
      v208 = (v206 + 32) & ~v206;
      *(_QWORD *)&v428 = v208;
      *(_QWORD *)&v429 = v206 | 7;
      v209 = swift_allocObject();
      v427 = xmmword_21FC5EE30;
      *(_OWORD *)(v209 + 16) = xmmword_21FC5EE30;
      v436 = v7;
      v425 = *(void (**)(uint64_t, char *, _QWORD *))(v207 + 32);
      v425(v209 + v208, v7, v444);
      *(_QWORD *)(v203 + 56) = &type metadata for ClinicalSharingStatisticsQuery;
      *(_QWORD *)(v203 + 64) = &off_24E48EB08;
      v210 = (uint64_t *)v203;
      v211 = swift_allocObject();
      *(_QWORD *)(v203 + 32) = v211;
      *(_QWORD *)(v211 + 16) = v204;
      *(_QWORD *)(v211 + 24) = v209;
      v212 = v439;
      *(_QWORD *)(v211 + 32) = v439;
      *(_QWORD *)(v211 + 40) = 4;
      *(_WORD *)(v211 + 48) = 257;
      v440 = (void (*)(char *, uint64_t))*((_QWORD *)v440 + 1);
      v213 = v440;
      swift_retain();
      v214 = v212;
      v424[0] = v4;
      v439 = v214;
      v215 = v443;
      v213(v17, v443);
      v216 = v433;
      ((void (*)(char *, uint64_t, uint64_t, _QWORD))v431)(v437, 1, 1, v433);
      v217 = v430;
      v432(v438, 1, 1, (uint64_t)v430);
      sub_21FC5A824();
      sub_21FC5A7E8();
      v218 = (uint64_t)v436;
      sub_21FAACB98((uint64_t)v17, 0, 0, (uint64_t)v436);
      v219 = swift_allocObject();
      *(_OWORD *)(v219 + 16) = v427;
      v425(v219 + v428, (char *)v218, v444);
      v210[12] = (uint64_t)&type metadata for ClinicalSharingStatisticsQuery;
      v210[13] = (uint64_t)&off_24E48EB08;
      v445 = v210;
      v220 = swift_allocObject();
      v210[9] = v220;
      *(_QWORD *)(v220 + 16) = v204;
      *(_QWORD *)(v220 + 24) = v219;
      v221 = v439;
      *(_QWORD *)(v220 + 32) = v439;
      *(_QWORD *)(v220 + 40) = 3;
      *(_WORD *)(v220 + 48) = 257;
      swift_retain();
      v439 = v221;
      v440(v17, v215);
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v431)(v437, 1, 1, v216);
      v222 = v432;
      v432(v438, 1, 1, (uint64_t)v217);
      sub_21FC5A824();
      sub_21FC5A7B8();
      v223 = (uint64_t)v436;
      sub_21FAACB98((uint64_t)v17, 8u, 0, (uint64_t)v436);
      v224 = swift_allocObject();
      *(_OWORD *)(v224 + 16) = v427;
      v225 = v223;
      v226 = v444;
      v425(v224 + v428, (char *)v225, v444);
      v227 = v445;
      v445[17] = (uint64_t)&type metadata for ClinicalSharingStatisticsQuery;
      v227[18] = (uint64_t)&off_24E48EB08;
      v228 = swift_allocObject();
      v227[14] = v228;
      *(_QWORD *)(v228 + 16) = v204;
      *(_QWORD *)(v228 + 24) = v224;
      v229 = v439;
      *(_QWORD *)(v228 + 32) = v439;
      *(_QWORD *)(v228 + 40) = 1;
      *(_WORD *)(v228 + 48) = 257;
      swift_retain();
      v439 = v229;
      v230 = v440;
      v440(v17, v443);
      ((void (*)(char *, uint64_t, uint64_t, _QWORD))v431)(v437, 1, 1, v433);
      v222(v438, 1, 1, (uint64_t)v430);
      sub_21FC5A824();
      sub_21FC5A7E8();
      v231 = (uint64_t)v436;
      sub_21FAACB98((uint64_t)v17, 8u, 0, (uint64_t)v436);
      v232 = swift_allocObject();
      *(_OWORD *)(v232 + 16) = v427;
      v233 = (void (*)(_QWORD, uint64_t, _QWORD *))v425;
      v425(v232 + v428, (char *)v231, v226);
      v227[22] = (uint64_t)&type metadata for ClinicalSharingStatisticsQuery;
      v227[23] = (uint64_t)&off_24E48EB08;
      v234 = swift_allocObject();
      v227[19] = v234;
      *(_QWORD *)(v234 + 16) = v204;
      *(_QWORD *)(v234 + 24) = v232;
      v235 = v439;
      *(_QWORD *)(v234 + 32) = v439;
      *(_QWORD *)(v234 + 40) = 2;
      *(_WORD *)(v234 + 48) = 1;
      swift_retain();
      v439 = v235;
      v230(v17, v443);
      v236 = (void (*)(char *, uint64_t, uint64_t, _QWORD))v431;
      ((void (*)(char *, uint64_t, uint64_t, _QWORD))v431)(v437, 1, 1, v433);
      v237 = v430;
      v432(v438, 1, 1, (uint64_t)v430);
      sub_21FC5A824();
      sub_21FC5A7E8();
      v238 = v442;
      sub_21FAACB98((uint64_t)v17, 8u, 1, v231);
      v239 = swift_allocObject();
      *(_OWORD *)(v239 + 16) = v427;
      v240 = v231;
      v241 = v444;
      v233(v239 + v428, v240, v444);
      v227[27] = (uint64_t)&type metadata for ClinicalSharingStatisticsQuery;
      v227[28] = (uint64_t)&off_24E48EB08;
      v242 = swift_allocObject();
      v227[24] = v242;
      v243 = v238;
      *(_QWORD *)(v242 + 16) = v238;
      *(_QWORD *)(v242 + 24) = v239;
      v244 = v439;
      *(_QWORD *)(v242 + 32) = v439;
      *(_QWORD *)(v242 + 40) = 2;
      *(_WORD *)(v242 + 48) = 1;
      swift_retain();
      v439 = v244;
      v245 = v440;
      v440(v17, v443);
      v236(v437, 1, 1, v433);
      v432(v438, 1, 1, (uint64_t)v237);
      sub_21FC5A824();
      sub_21FC5A7E8();
      v246 = (uint64_t)v436;
      sub_21FAACB98((uint64_t)v17, 8u, 2, (uint64_t)v436);
      v247 = swift_allocObject();
      *(_OWORD *)(v247 + 16) = v427;
      v425(v247 + v428, (char *)v246, v241);
      v227[32] = (uint64_t)&type metadata for ClinicalSharingStatisticsQuery;
      v227[33] = (uint64_t)&off_24E48EB08;
      v248 = swift_allocObject();
      v227[29] = v248;
      *(_QWORD *)(v248 + 16) = v243;
      *(_QWORD *)(v248 + 24) = v247;
      v249 = v439;
      *(_QWORD *)(v248 + 32) = v439;
      *(_QWORD *)(v248 + 40) = 2;
      *(_WORD *)(v248 + 48) = 1;
      swift_retain();
      v250 = v249;
      v439 = v250;
      v245(v17, v443);
      *(_QWORD *)&v429 = v227 + 34;
      v251 = v437;
      v252 = v433;
      v253 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v431;
      ((void (*)(char *, uint64_t, uint64_t, _QWORD))v431)(v437, 1, 1, v433);
      v254 = v438;
      v255 = v430;
      v432(v438, 1, 1, (uint64_t)v430);
      sub_21FC5A824();
      sub_21FC5A7E8();
      v446 = 3;
      v447 = 1;
      v256 = v442;
      sub_21FBFE5E4((uint64_t)v17, &v446, 0, v250, v442, (uint64_t *)v429);
      v257 = v440;
      v440(v17, v443);
      *(_QWORD *)&v429 = v445 + 39;
      v253(v251, 1, 1, v252);
      v258 = v432;
      v432(v254, 1, 1, (uint64_t)v255);
      sub_21FC5A824();
      sub_21FC5A7E8();
      v446 = 4;
      v447 = 1;
      v259 = v439;
      sub_21FBFE5E4((uint64_t)v17, &v446, 0, v439, v256, (uint64_t *)v429);
      v257(v17, v443);
      v260 = v445;
      *(_QWORD *)&v429 = v445 + 44;
      v261 = v433;
      ((void (*)(char *, uint64_t, uint64_t, _QWORD))v431)(v251, 1, 1, v433);
      v262 = v438;
      v258(v438, 1, 1, (uint64_t)v430);
      v263 = v251;
      sub_21FC5A824();
      sub_21FC5A7E8();
      v446 = 2;
      v447 = 1;
      v264 = v259;
      sub_21FBFE5E4((uint64_t)v17, &v446, 0, v259, v442, (uint64_t *)v429);
      v440(v17, v443);
      *(_QWORD *)&v429 = v260 + 49;
      v265 = v263;
      v266 = v263;
      v267 = (void (*)(char *, uint64_t, uint64_t, _QWORD))v431;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v431)(v266, 1, 1, v261);
      v268 = v430;
      v269 = v432;
      v432(v262, 1, 1, (uint64_t)v430);
      v270 = v262;
      sub_21FC5A824();
      sub_21FC5A7E8();
      v446 = 2;
      v447 = 1;
      v271 = v442;
      sub_21FBFE5E4((uint64_t)v17, &v446, 1, v264, v442, (uint64_t *)v429);
      v440(v17, v443);
      *(_QWORD *)&v429 = v445 + 54;
      v267(v265, 1, 1, v433);
      v269(v270, 1, 1, (uint64_t)v268);
      v272 = v265;
      sub_21FC5A824();
      sub_21FC5A7E8();
      v446 = 2;
      v447 = 1;
      sub_21FBFE5E4((uint64_t)v17, &v446, 2, v264, v271, (uint64_t *)v429);
      v273 = v443;
      v440(v17, v443);
      v274 = v445;
      *(_QWORD *)&v434 = v445 + 59;
      v267(v272, 1, 1, v433);
      v269(v270, 1, 1, (uint64_t)v430);
      sub_21FC5A824();
      sub_21FC5A7B8();
      v275 = v271;
      swift_retain();
      v276 = (uint64_t)v436;
      sub_21FAACB98((uint64_t)v17, 8u, 0, (uint64_t)v436);
      v277 = (int *)v424[0];
      v274[62] = v424[0];
      v274[63] = (uint64_t)&off_24E4842D8;
      v438 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v434);
      v278 = (uint64_t)v435;
      *(_QWORD *)v435 = v275;
      v279 = v441;
      v280 = v444;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v441 + 16))(v278 + v277[5], v276, v444);
      v281 = v439;
      *(_QWORD *)(v278 + v277[6]) = v439;
      *(_BYTE *)(v278 + v277[8]) = 1;
      swift_retain();
      v282 = objc_msgSend(v281, sel_code);
      swift_release();
      if (v282 == (id)144)
        v283 = 10;
      else
        v283 = 300;
      (*(void (**)(char *, _QWORD *))(v279 + 8))(v436, v280);
      *(_QWORD *)(v278 + v277[7]) = v283;
      v284 = v278 + v277[9];
      *(_QWORD *)v284 = 40;
      *(_BYTE *)(v284 + 8) = 0;
      sub_21FA2D23C(v278, (uint64_t)v438, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSampleQuery);
      v97 = v17;
      v98 = v273;
LABEL_10:
      v440(v97, v98);
      return v445;
    case 0x39uLL:
      sub_21FA2D1A0(0, &qword_25553FD80, (uint64_t (*)(uint64_t))sub_21FBFF618, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v285 = swift_allocObject();
      *(_OWORD *)(v285 + 16) = xmmword_21FC5EE30;
      v443 = v15;
      v286 = sub_21FC5AC08();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v286 - 8) + 56))(v14, 1, 1, v286);
      v287 = sub_21FC5AC5C();
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v287 - 8) + 56))(v11, 1, 1, v287);
      sub_21FC5A824();
      sub_21FC5A7E8();
      v288 = v442;
      swift_retain();
      sub_21FAACB98((uint64_t)v17, 8u, 0, (uint64_t)v7);
      *(_QWORD *)(v285 + 56) = v4;
      *(_QWORD *)(v285 + 64) = &off_24E4842D8;
      v445 = (uint64_t *)v285;
      v438 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v285 + 32));
      v289 = v435;
      *(_QWORD *)v435 = v288;
      v290 = v441;
      v291 = v444;
      (*(void (**)(char *, char *, _QWORD *))(v441 + 16))(&v289[v4[5]], v7, v444);
      v292 = v439;
      *(_QWORD *)&v289[v4[6]] = v439;
      v289[v4[8]] = 0;
      swift_retain();
      v293 = v4;
      v294 = objc_msgSend(v292, sel_code);
      swift_release();
      if (v294 == (id)144)
        v295 = 10;
      else
        v295 = 300;
      (*(void (**)(char *, _QWORD *))(v290 + 8))(v7, v291);
      *(_QWORD *)&v289[v293[7]] = v295;
      v296 = &v289[v293[9]];
      *(_QWORD *)v296 = 0;
      v296[8] = 1;
      v114 = (uint64_t)v289;
      v115 = v438;
      goto LABEL_29;
    case 0x3FuLL:
      sub_21FA2D1A0(0, &qword_25553FD80, (uint64_t (*)(uint64_t))sub_21FBFF618, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v445 = (uint64_t *)swift_allocObject();
      *((_OWORD *)v445 + 1) = xmmword_21FC5EE20;
      swift_retain();
      v297 = (void *)sub_21FC5AA64();
      v298 = (void *)sub_21FC5AB6C();
      v299 = (char *)objc_msgSend(v297, sel_hk_morningIndexWithCalendar_, v298);

      v300 = v299 - 28;
      if (__OFSUB__(v299, 28))
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        JUMPOUT(0x21FBFE1F8);
      }

      sub_21FA5BE58(0, (unint64_t *)&qword_255540A30);
      v301 = (id)*MEMORY[0x24BDD2A28];
      v302 = MEMORY[0x2207D0390]();
      v303 = v445;
      v445[7] = (uint64_t)&type metadata for ClinicalSharingSleepDaySummaryQuery;
      v303[8] = (uint64_t)&off_24E490AD8;
      v304 = (_QWORD *)swift_allocObject();
      v303[4] = (uint64_t)v304;
      v305 = v442;
      v304[2] = v442;
      v304[3] = v300;
      v304[4] = 28;
      v304[5] = v302;
      v306 = type metadata accessor for ClinicalSharingSleepStatisticsQuery(0);
      v303[12] = v306;
      v303[13] = (uint64_t)&off_24E487128;
      v307 = __swift_allocate_boxed_opaque_existential_1(v303 + 9);
      v308 = swift_retain();
      sub_21FAB79B8(v308, 364, 0, (uint64_t)v307);
      v303[17] = v306;
      v303[18] = (uint64_t)&off_24E487128;
      v309 = __swift_allocate_boxed_opaque_existential_1(v303 + 14);
      v310 = swift_retain();
      sub_21FAB79B8(v310, 156, 1, (uint64_t)v309);
      v303[22] = v306;
      v303[23] = (uint64_t)&off_24E487128;
      v311 = __swift_allocate_boxed_opaque_existential_1(v303 + 19);
      v312 = swift_retain();
      sub_21FAB79B8(v312, 36, 2, (uint64_t)v311);
      swift_retain();
      v313 = MEMORY[0x2207D0390](v301);
      v303[27] = (uint64_t)&type metadata for ClinicalSharingSleepSummaryQuery;
      v303[28] = (uint64_t)&off_24E48DE60;
      v303[24] = v305;
      v303[25] = v313;
      break;
    case 0x76uLL:
      v443 = v15;
      v314 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598];
      sub_21FA2D1A0(0, &qword_25553FD80, (uint64_t (*)(uint64_t))sub_21FBFF618, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v315 = swift_allocObject();
      *(_OWORD *)(v315 + 16) = xmmword_21FC5FEE0;
      v432 = (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))sub_21FC5AC08();
      *(_QWORD *)&v431 = *(_QWORD *)(*((_QWORD *)v432 - 1) + 56);
      v316 = v441;
      ((void (*)(char *, uint64_t, uint64_t, _QWORD))v431)(v14, 1, 1, v432);
      *(_QWORD *)&v433 = sub_21FC5AC5C();
      v435 = *(char **)(*(_QWORD *)(v433 - 8) + 56);
      ((void (*)(uint64_t *, uint64_t, uint64_t, _QWORD))v435)(v11, 1, 1, v433);
      sub_21FC5A824();
      v437 = v14;
      sub_21FC5A7E8();
      v317 = v442;
      sub_21FAACB98((uint64_t)v17, 9u, 0, (uint64_t)v7);
      sub_21FA2D1A0(0, &qword_25553FD78, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], v314);
      v445 = v318;
      v319 = *(_QWORD *)(v316 + 72);
      v320 = *(unsigned __int8 *)(v316 + 80);
      v436 = v7;
      v321 = v11;
      v430 = (char *)(((v320 + 32) & ~v320) + v319);
      v322 = (v320 + 32) & ~v320;
      *(_QWORD *)&v428 = v322;
      v323 = v317;
      *(_QWORD *)&v429 = v320 | 7;
      v324 = swift_allocObject();
      v427 = xmmword_21FC5EE30;
      *(_OWORD *)(v324 + 16) = xmmword_21FC5EE30;
      v426 = *(void (**)(uint64_t, char *, _QWORD *))(v316 + 32);
      v426(v324 + v322, v7, v444);
      *(_QWORD *)(v315 + 56) = &type metadata for ClinicalSharingStatisticsQuery;
      *(_QWORD *)(v315 + 64) = &off_24E48EB08;
      v325 = swift_allocObject();
      *(_QWORD *)(v315 + 32) = v325;
      *(_QWORD *)(v325 + 16) = v323;
      *(_QWORD *)(v325 + 24) = v324;
      v326 = v439;
      *(_QWORD *)(v325 + 32) = v439;
      *(_QWORD *)(v325 + 40) = 4;
      *(_WORD *)(v325 + 48) = 257;
      v441 = *((_QWORD *)v440 + 1);
      v327 = (void (*)(char *, uint64_t))v441;
      swift_retain();
      v440 = v326;
      v328 = v443;
      v327(v17, v443);
      v329 = v432;
      v330 = (void (*)(char *, uint64_t, uint64_t, _QWORD))v431;
      ((void (*)(char *, uint64_t, uint64_t, _QWORD))v431)(v437, 1, 1, v432);
      v438 = v321;
      v331 = v321;
      v332 = v433;
      ((void (*)(uint64_t *, uint64_t, uint64_t, _QWORD))v435)(v331, 1, 1, v433);
      sub_21FC5A824();
      sub_21FC5A7E8();
      v333 = (uint64_t)v436;
      v334 = v442;
      sub_21FAACB98((uint64_t)v17, 0, 0, (uint64_t)v436);
      v335 = swift_allocObject();
      *(_OWORD *)(v335 + 16) = v427;
      v426(v335 + v428, (char *)v333, v444);
      *(_QWORD *)(v315 + 96) = &type metadata for ClinicalSharingStatisticsQuery;
      *(_QWORD *)(v315 + 104) = &off_24E48EB08;
      v336 = swift_allocObject();
      *(_QWORD *)(v315 + 72) = v336;
      *(_QWORD *)(v336 + 16) = v334;
      *(_QWORD *)(v336 + 24) = v335;
      v337 = v440;
      *(_QWORD *)(v336 + 32) = v440;
      *(_QWORD *)(v336 + 40) = 3;
      *(_WORD *)(v336 + 48) = 257;
      v338 = v334;
      swift_retain();
      v440 = v337;
      ((void (*)(char *, uint64_t))v441)(v17, v328);
      v339 = v437;
      v330(v437, 1, 1, v329);
      v340 = v438;
      ((void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))v435)(v438, 1, 1, v332);
      v341 = v339;
      v342 = v340;
      sub_21FC5A824();
      sub_21FC5A7E8();
      v343 = (uint64_t)v436;
      sub_21FAACB98((uint64_t)v17, 8u, 0, (uint64_t)v436);
      v344 = swift_allocObject();
      *(_OWORD *)(v344 + 16) = v427;
      v426(v344 + v428, (char *)v343, v444);
      *(_QWORD *)(v315 + 136) = &type metadata for ClinicalSharingStatisticsQuery;
      *(_QWORD *)(v315 + 144) = &off_24E48EB08;
      v345 = swift_allocObject();
      *(_QWORD *)(v315 + 112) = v345;
      *(_QWORD *)(v345 + 16) = v338;
      *(_QWORD *)(v345 + 24) = v344;
      v346 = v440;
      *(_QWORD *)(v345 + 32) = v440;
      *(_QWORD *)(v345 + 40) = 2;
      *(_WORD *)(v345 + 48) = 257;
      swift_retain();
      v347 = v346;
      v444 = v347;
      v348 = v443;
      ((void (*)(char *, uint64_t))v441)(v17, v443);
      v445 = (uint64_t *)(v315 + 152);
      v349 = v432;
      v350 = (void (*)(char *, uint64_t, uint64_t, _QWORD))v431;
      ((void (*)(char *, uint64_t, uint64_t, _QWORD))v431)(v341, 1, 1, v432);
      v351 = v342;
      v352 = (void (*)(uint64_t *, uint64_t, uint64_t, _QWORD))v435;
      ((void (*)(uint64_t *, uint64_t, uint64_t, _QWORD))v435)(v351, 1, 1, v433);
      sub_21FC5A824();
      sub_21FC5A7E8();
      v446 = 3;
      v447 = 1;
      v353 = v347;
      v354 = v442;
      sub_21FBFE5E4((uint64_t)v17, &v446, 0, v353, v442, v445);
      ((void (*)(char *, uint64_t))v441)(v17, v348);
      v445 = (uint64_t *)(v315 + 192);
      v355 = v341;
      v350(v341, 1, 1, v349);
      v356 = v438;
      v357 = v433;
      v352(v438, 1, 1, v433);
      sub_21FC5A824();
      sub_21FC5A7E8();
      v446 = 4;
      v447 = 1;
      v358 = v444;
      sub_21FBFE5E4((uint64_t)v17, &v446, 0, v444, v354, v445);
      v359 = v443;
      v360 = (void (*)(char *, uint64_t))v441;
      ((void (*)(char *, uint64_t))v441)(v17, v443);
      v445 = (uint64_t *)v315;
      ((void (*)(char *, uint64_t, uint64_t, _QWORD))v431)(v355, 1, 1, v432);
      ((void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))v435)(v356, 1, 1, v357);
      sub_21FC5A824();
      sub_21FC5A7F4();
      v446 = 2;
      v447 = 1;
      sub_21FBFE5E4((uint64_t)v17, &v446, 0, v358, v442, (uint64_t *)(v315 + 232));
      v360(v17, v359);
      return v445;
    case 0x7CuLL:
      v361 = v444;
      v362 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598];
      sub_21FA2D1A0(0, &qword_25553FD80, (uint64_t (*)(uint64_t))sub_21FBFF618, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v363 = swift_allocObject();
      *(_OWORD *)(v363 + 16) = xmmword_21FC60A70;
      *(_QWORD *)&v433 = sub_21FC5AC08();
      v435 = *(char **)(*(_QWORD *)(v433 - 8) + 56);
      ((void (*)(char *, uint64_t, uint64_t, _QWORD))v435)(v14, 1, 1, v433);
      v364 = (uint64_t *)sub_21FC5AC5C();
      v443 = v15;
      v445 = v364;
      *(_QWORD *)&v434 = *(_QWORD *)(*(v364 - 1) + 56);
      v438 = v11;
      ((void (*)(uint64_t *, uint64_t, uint64_t, uint64_t *))v434)(v11, 1, 1, v364);
      sub_21FC5A824();
      v365 = v14;
      sub_21FC5A7E8();
      v436 = v7;
      v366 = v442;
      sub_21FAACB98((uint64_t)v17, 0, 0, (uint64_t)v7);
      sub_21FA2D1A0(0, &qword_25553FD78, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], v362);
      v432 = v367;
      v368 = v441;
      v369 = *(unsigned __int8 *)(v441 + 80);
      *(_QWORD *)&v431 = ((v369 + 32) & ~v369) + *(_QWORD *)(v441 + 72);
      v370 = (v369 + 32) & ~v369;
      *(_QWORD *)&v429 = v370;
      v430 = (char *)(v369 | 7);
      v371 = swift_allocObject();
      v428 = xmmword_21FC5EE30;
      *(_OWORD *)(v371 + 16) = xmmword_21FC5EE30;
      v441 = *(_QWORD *)(v368 + 32);
      v372 = (uint64_t *)v363;
      v373 = v361;
      ((void (*)(uint64_t, char *, _QWORD *))v441)(v371 + v370, v7, v361);
      *(_QWORD *)(v363 + 56) = &type metadata for ClinicalSharingStatisticsQuery;
      *(_QWORD *)(v363 + 64) = &off_24E48EB08;
      v374 = swift_allocObject();
      *(_QWORD *)(v363 + 32) = v374;
      *(_QWORD *)(v374 + 16) = v366;
      *(_QWORD *)(v374 + 24) = v371;
      v375 = v439;
      *(_QWORD *)(v374 + 32) = v439;
      *(_QWORD *)(v374 + 40) = 3;
      *(_WORD *)(v374 + 48) = 257;
      v440 = (void (*)(char *, uint64_t))*((_QWORD *)v440 + 1);
      v376 = v440;
      swift_retain();
      v377 = v375;
      v378 = v443;
      v376(v17, v443);
      ((void (*)(char *, uint64_t, uint64_t, _QWORD))v435)(v365, 1, 1, v433);
      ((void (*)(uint64_t *, uint64_t, uint64_t, uint64_t *))v434)(v438, 1, 1, v445);
      v379 = v365;
      sub_21FC5A824();
      sub_21FC5A7E8();
      v380 = (uint64_t)v436;
      sub_21FAACB98((uint64_t)v17, 9u, 0, (uint64_t)v436);
      v381 = swift_allocObject();
      *(_OWORD *)(v381 + 16) = v428;
      v382 = v380;
      v383 = v373;
      v384 = v373;
      v385 = (void (*)(_QWORD, uint64_t, _QWORD *))v441;
      ((void (*)(_QWORD, uint64_t, _QWORD *))v441)(v381 + v429, v382, v383);
      v372[12] = (uint64_t)&type metadata for ClinicalSharingStatisticsQuery;
      v372[13] = (uint64_t)&off_24E48EB08;
      v386 = swift_allocObject();
      v372[9] = v386;
      *(_QWORD *)(v386 + 16) = v366;
      *(_QWORD *)(v386 + 24) = v381;
      *(_QWORD *)(v386 + 32) = v377;
      *(_QWORD *)(v386 + 40) = 4;
      *(_WORD *)(v386 + 48) = 257;
      swift_retain();
      v73 = v377;
      v387 = v378;
      v65 = v440;
      v440(v17, v387);
      ((void (*)(char *, uint64_t, uint64_t, _QWORD))v435)(v379, 1, 1, v433);
      ((void (*)(uint64_t *, uint64_t, uint64_t, uint64_t *))v434)(v438, 1, 1, v445);
      sub_21FC5A824();
      sub_21FC5A7E8();
      v388 = (uint64_t)v436;
      sub_21FAACB98((uint64_t)v17, 8u, 0, (uint64_t)v436);
      v389 = swift_allocObject();
      *(_OWORD *)(v389 + 16) = v428;
      v385(v389 + v429, v388, v384);
      v372[17] = (uint64_t)&type metadata for ClinicalSharingStatisticsQuery;
      v372[18] = (uint64_t)&off_24E48EB08;
      v75 = swift_allocObject();
      v445 = v372;
      v372[14] = v75;
      *(_QWORD *)(v75 + 16) = v366;
      *(_QWORD *)(v75 + 24) = v389;
      *(_QWORD *)(v75 + 32) = v73;
      *(_QWORD *)(v75 + 40) = 2;
      goto LABEL_7;
    case 0x8CuLL:
    case 0x93uLL:
    case 0x9CuLL:
      sub_21FA2D1A0(0, &qword_25553FD80, (uint64_t (*)(uint64_t))sub_21FBFF618, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v99 = swift_allocObject();
      *(_OWORD *)(v99 + 16) = xmmword_21FC5EE30;
      v443 = v15;
      *(_QWORD *)&v434 = v99 + 32;
      v100 = sub_21FC5AC08();
      v101 = v441;
      v102 = v442;
      v103 = (uint64_t *)v435;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 56))(v14, 1, 1, v100);
      v104 = sub_21FC5AC5C();
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 56))(v11, 1, 1, v104);
      sub_21FC5A824();
      sub_21FC5A7E8();
      swift_retain();
      sub_21FAACB98((uint64_t)v17, 8u, 0, (uint64_t)v7);
      *(_QWORD *)(v99 + 56) = v4;
      *(_QWORD *)(v99 + 64) = &off_24E4842D8;
      v445 = (uint64_t *)v99;
      v105 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v434);
      *v103 = v102;
      v106 = v101;
      v107 = v444;
      (*(void (**)(char *, char *, _QWORD *))(v101 + 16))((char *)v103 + v4[5], v7, v444);
      v108 = v439;
      *(uint64_t *)((char *)v103 + v4[6]) = (uint64_t)v439;
      *((_BYTE *)v103 + v4[8]) = 1;
      swift_retain();
      v109 = objc_msgSend(v108, sel_code);
      v110 = v4;
      v111 = v109;
      swift_release();
      if (v111 == (id)144)
        v112 = 10;
      else
        v112 = 300;
      (*(void (**)(char *, _QWORD *))(v106 + 8))(v7, v107);
      *(uint64_t *)((char *)v103 + v110[7]) = v112;
      v113 = (char *)v103 + v110[9];
      *(_QWORD *)v113 = 0;
      v113[8] = 1;
      v114 = (uint64_t)v103;
      v115 = v105;
LABEL_29:
      sub_21FA2D23C(v114, (uint64_t)v115, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSampleQuery);
      (*((void (**)(char *, uint64_t))v440 + 1))(v17, v443);
      return v445;
    case 0x97uLL:
      v390 = v441;
      sub_21FA2D1A0(0, &qword_25553FD80, (uint64_t (*)(uint64_t))sub_21FBFF618, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v445 = (uint64_t *)swift_allocObject();
      *((_OWORD *)v445 + 1) = xmmword_21FC5EE30;
      sub_21FA5BE58(0, &qword_25554D0F8);
      ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
      v392 = *MEMORY[0x24BDD3848];
      swift_retain();
      v393 = objc_msgSend(ObjCClassFromMetadata, sel_vaccinationRecordTypeForIdentifier_, v392);
      if (!v393)
        goto LABEL_48;
      v394 = (uint64_t)v393;
      v395 = v445;
      v396 = type metadata accessor for ClinicalSharingMedicalRecordsQuery();
      v395[7] = v396;
      v395[8] = (uint64_t)&off_24E4862F0;
      v397 = __swift_allocate_boxed_opaque_existential_1(v395 + 4);
      (*(void (**)(char *, uint64_t, uint64_t, _QWORD *))(v390 + 56))((char *)v397 + *(int *)(v396 + 28), 1, 1, v444);
      *v397 = v442;
      v397[1] = v394;
      v398 = 6;
      goto LABEL_38;
    case 0x98uLL:
      v399 = v441;
      sub_21FA2D1A0(0, &qword_25553FD80, (uint64_t (*)(uint64_t))sub_21FBFF618, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v445 = (uint64_t *)swift_allocObject();
      *((_OWORD *)v445 + 1) = xmmword_21FC5EE30;
      sub_21FA5BE58(0, &qword_25554D0F8);
      v400 = (void *)swift_getObjCClassFromMetadata();
      v401 = *MEMORY[0x24BDD2BB0];
      swift_retain();
      v402 = objc_msgSend(v400, sel_diagnosticTestResultTypeForIdentifier_, v401);
      if (!v402)
        goto LABEL_49;
      v403 = (uint64_t)v402;
      v404 = v445;
      v396 = type metadata accessor for ClinicalSharingMedicalRecordsQuery();
      v404[7] = v396;
      v404[8] = (uint64_t)&off_24E4862F0;
      v397 = __swift_allocate_boxed_opaque_existential_1(v404 + 4);
      (*(void (**)(char *, uint64_t, uint64_t, _QWORD *))(v399 + 56))((char *)v397 + *(int *)(v396 + 28), 1, 1, v444);
      *v397 = v442;
      v397[1] = v403;
      v398 = 2;
LABEL_38:
      v397[2] = v398;
      *((_BYTE *)v397 + *(int *)(v396 + 32)) = 4;
      return v445;
    case 0x99uLL:
      v149 = v441;
      v150 = v444;
      sub_21FA2D1A0(0, &qword_25553FD80, (uint64_t (*)(uint64_t))sub_21FBFF618, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v445 = (uint64_t *)swift_allocObject();
      *((_OWORD *)v445 + 1) = xmmword_21FC60A70;
      sub_21FA5BE58(0, &qword_25554D0F8);
      v151 = (void *)swift_getObjCClassFromMetadata();
      v152 = objc_msgSend(v151, sel_medicationOrderTypeForIdentifier_, *MEMORY[0x24BDD3108]);
      if (!v152)
        goto LABEL_45;
      v153 = (uint64_t)v152;
      v154 = v445;
      v155 = v445 + 4;
      v156 = type metadata accessor for ClinicalSharingMedicalRecordsQuery();
      v154[7] = v156;
      v154[8] = (uint64_t)&off_24E4862F0;
      v157 = __swift_allocate_boxed_opaque_existential_1(v155);
      v158 = *(void (**)(char *, uint64_t, uint64_t, _QWORD *))(v149 + 56);
      v158((char *)v157 + *(int *)(v156 + 28), 1, 1, v150);
      v159 = v442;
      *v157 = v442;
      v157[1] = v153;
      v157[2] = 1;
      *((_BYTE *)v157 + *(int *)(v156 + 32)) = 4;
      v160 = *MEMORY[0x24BDD3110];
      swift_retain();
      v161 = objc_msgSend(v151, sel_medicationRecordTypeForIdentifier_, v160);
      if (!v161)
        goto LABEL_46;
      v162 = (uint64_t)v161;
      v163 = v445;
      v164 = v445 + 9;
      v445[12] = v156;
      v163[13] = (uint64_t)&off_24E4862F0;
      v165 = __swift_allocate_boxed_opaque_existential_1(v164);
      v158((char *)v165 + *(int *)(v156 + 28), 1, 1, v150);
      *v165 = v159;
      v165[1] = v162;
      v165[2] = 1;
      *((_BYTE *)v165 + *(int *)(v156 + 32)) = 4;
      v166 = *MEMORY[0x24BDD30F8];
      swift_retain();
      v167 = objc_msgSend(v151, sel_medicationDispenseRecordTypeForIdentifier_, v166);
      if (!v167)
        goto LABEL_47;
      v168 = (uint64_t)v167;
      v169 = v445;
      v170 = v445 + 14;
      v445[17] = v156;
      v169[18] = (uint64_t)&off_24E4862F0;
      v171 = __swift_allocate_boxed_opaque_existential_1(v170);
      v158((char *)v171 + *(int *)(v156 + 28), 1, 1, v150);
      *v171 = v159;
      v171[1] = v168;
      v171[2] = 1;
      *((_BYTE *)v171 + *(int *)(v156 + 32)) = 4;
      swift_retain();
      break;
    case 0x9BuLL:
      sub_21FA2D1A0(0, &qword_25553FD80, (uint64_t (*)(uint64_t))sub_21FBFF618, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v405 = swift_allocObject();
      *(_OWORD *)(v405 + 16) = xmmword_21FC603D0;
      v406 = v442;
      sub_21FBFE83C(0, v442, (uint64_t *)(v405 + 32));
      sub_21FBFE83C(1, v406, (uint64_t *)(v405 + 72));
      sub_21FBFE83C(2, v406, (uint64_t *)(v405 + 112));
      v445 = (uint64_t *)v405;
      sub_21FBFE83C(3, v406, (uint64_t *)(v405 + 152));
      return v445;
    case 0xB6uLL:
    case 0xBBuLL:
    case 0xBCuLL:
    case 0xC2uLL:
      v443 = v15;
      v46 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598];
      sub_21FA2D1A0(0, &qword_25553FD80, (uint64_t (*)(uint64_t))sub_21FBFF618, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v47 = swift_allocObject();
      *(_OWORD *)(v47 + 16) = xmmword_21FC603D0;
      v432 = (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))sub_21FC5AC08();
      v430 = *(char **)(*((_QWORD *)v432 - 1) + 56);
      v48 = v441;
      ((void (*)(char *, uint64_t, uint64_t, _QWORD))v430)(v14, 1, 1, v432);
      *(_QWORD *)&v431 = sub_21FC5AC5C();
      *(_QWORD *)&v429 = *(_QWORD *)(*(_QWORD *)(v431 - 8) + 56);
      ((void (*)(uint64_t *, uint64_t, uint64_t, _QWORD))v429)(v11, 1, 1, v431);
      sub_21FC5A824();
      v437 = v14;
      sub_21FC5A7E8();
      v49 = v442;
      sub_21FAACB98((uint64_t)v17, 9u, 0, (uint64_t)v7);
      sub_21FA2D1A0(0, &qword_25553FD78, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], v46);
      *(_QWORD *)&v428 = v50;
      v51 = *(unsigned __int8 *)(v48 + 80);
      v445 = (uint64_t *)(((v51 + 32) & ~v51) + *(_QWORD *)(v48 + 72));
      v52 = (v51 + 32) & ~v51;
      *(_QWORD *)&v434 = v52;
      v435 = (char *)(v51 | 7);
      v53 = swift_allocObject();
      v433 = xmmword_21FC5EE30;
      *(_OWORD *)(v53 + 16) = xmmword_21FC5EE30;
      v441 = *(_QWORD *)(v48 + 32);
      v54 = (uint64_t *)v47;
      ((void (*)(uint64_t, char *, _QWORD *))v441)(v53 + v52, v7, v444);
      *(_QWORD *)(v47 + 56) = &type metadata for ClinicalSharingStatisticsQuery;
      *(_QWORD *)(v47 + 64) = &off_24E48EB08;
      v55 = swift_allocObject();
      *(_QWORD *)(v47 + 32) = v55;
      *(_QWORD *)(v55 + 16) = v49;
      *(_QWORD *)(v55 + 24) = v53;
      v56 = v439;
      *(_QWORD *)(v55 + 32) = v439;
      *(_QWORD *)(v55 + 40) = 4;
      *(_WORD *)(v55 + 48) = 257;
      v440 = (void (*)(char *, uint64_t))*((_QWORD *)v440 + 1);
      v57 = v440;
      swift_retain();
      v439 = v56;
      v58 = v443;
      v57(v17, v443);
      v59 = v430;
      ((void (*)(char *, uint64_t, uint64_t, _QWORD))v430)(v437, 1, 1, v432);
      v438 = v11;
      v60 = (void (*)(uint64_t *, uint64_t, uint64_t, _QWORD))v429;
      ((void (*)(uint64_t *, uint64_t, uint64_t, _QWORD))v429)(v11, 1, 1, v431);
      sub_21FC5A824();
      sub_21FC5A7E8();
      v436 = v7;
      sub_21FAACB98((uint64_t)v17, 0, 0, (uint64_t)v7);
      v61 = swift_allocObject();
      *(_OWORD *)(v61 + 16) = v433;
      ((void (*)(_QWORD, char *, _QWORD *))v441)(v61 + v434, v7, v444);
      *(_QWORD *)(v47 + 96) = &type metadata for ClinicalSharingStatisticsQuery;
      *(_QWORD *)(v47 + 104) = &off_24E48EB08;
      v62 = swift_allocObject();
      *(_QWORD *)(v47 + 72) = v62;
      *(_QWORD *)(v62 + 16) = v49;
      *(_QWORD *)(v62 + 24) = v61;
      v63 = v439;
      *(_QWORD *)(v62 + 32) = v439;
      *(_QWORD *)(v62 + 40) = 3;
      *(_WORD *)(v62 + 48) = 257;
      swift_retain();
      v439 = v63;
      v64 = v58;
      v65 = v440;
      v440(v17, v64);
      v66 = v437;
      ((void (*)(char *, uint64_t, uint64_t, _QWORD))v59)(v437, 1, 1, v432);
      v67 = v438;
      v60(v438, 1, 1, v431);
      v68 = v67;
      sub_21FC5A824();
      sub_21FC5A7E8();
      v69 = (uint64_t)v436;
      sub_21FAACB98((uint64_t)v17, 8u, 0, (uint64_t)v436);
      v70 = swift_allocObject();
      *(_OWORD *)(v70 + 16) = v433;
      ((void (*)(_QWORD, uint64_t, _QWORD *))v441)(v70 + v434, v69, v444);
      *(_QWORD *)(v47 + 136) = &type metadata for ClinicalSharingStatisticsQuery;
      *(_QWORD *)(v47 + 144) = &off_24E48EB08;
      v71 = swift_allocObject();
      *(_QWORD *)(v47 + 112) = v71;
      *(_QWORD *)(v71 + 16) = v49;
      *(_QWORD *)(v71 + 24) = v70;
      v72 = v439;
      *(_QWORD *)(v71 + 32) = v439;
      *(_QWORD *)(v71 + 40) = 2;
      *(_WORD *)(v71 + 48) = 257;
      swift_retain();
      v73 = v72;
      v65(v17, v443);
      ((void (*)(char *, uint64_t, uint64_t, _QWORD))v430)(v66, 1, 1, v432);
      ((void (*)(uint64_t *, uint64_t, uint64_t, _QWORD))v429)(v68, 1, 1, v431);
      sub_21FC5A824();
      sub_21FC5A7F4();
      sub_21FAACB98((uint64_t)v17, 8u, 0, v69);
      v74 = swift_allocObject();
      *(_OWORD *)(v74 + 16) = v433;
      ((void (*)(_QWORD, uint64_t, _QWORD *))v441)(v74 + v434, v69, v444);
      v54[22] = (uint64_t)&type metadata for ClinicalSharingStatisticsQuery;
      v54[23] = (uint64_t)&off_24E48EB08;
      v75 = swift_allocObject();
      v445 = v54;
      v54[19] = v75;
      *(_QWORD *)(v75 + 16) = v49;
      *(_QWORD *)(v75 + 24) = v74;
      *(_QWORD *)(v75 + 32) = v73;
      *(_QWORD *)(v75 + 40) = 1;
LABEL_7:
      *(_WORD *)(v75 + 48) = 257;
      swift_retain();
      v76 = v73;
      v65(v17, v443);
      return v445;
    case 0xB7uLL:
    case 0xC3uLL:
    case 0xC4uLL:
      v443 = v15;
      v116 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598];
      sub_21FA2D1A0(0, &qword_25553FD80, (uint64_t (*)(uint64_t))sub_21FBFF618, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v117 = swift_allocObject();
      *(_OWORD *)(v117 + 16) = xmmword_21FC603D0;
      v430 = (char *)sub_21FC5AC08();
      *(_QWORD *)&v433 = *(_QWORD *)(*((_QWORD *)v430 - 1) + 56);
      v118 = v441;
      ((void (*)(char *, uint64_t, uint64_t, char *))v433)(v14, 1, 1, v430);
      *(_QWORD *)&v429 = sub_21FC5AC5C();
      v432 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v429 - 8) + 56);
      v432(v11, 1, 1, v429);
      sub_21FC5A824();
      v119 = v14;
      sub_21FC5A7E8();
      v120 = v442;
      sub_21FAACB98((uint64_t)v17, 9u, 0, (uint64_t)v7);
      sub_21FA2D1A0(0, &qword_25553FD78, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], v116);
      *(_QWORD *)&v428 = v121;
      v122 = *(unsigned __int8 *)(v118 + 80);
      *(_QWORD *)&v431 = ((v122 + 32) & ~v122) + *(_QWORD *)(v118 + 72);
      v123 = (v122 + 32) & ~v122;
      v435 = (char *)v123;
      v445 = (uint64_t *)(v122 | 7);
      v124 = swift_allocObject();
      v434 = xmmword_21FC5EE30;
      *(_OWORD *)(v124 + 16) = xmmword_21FC5EE30;
      *(_QWORD *)&v427 = *(_QWORD *)(v118 + 32);
      ((void (*)(uint64_t, char *, _QWORD *))v427)(v124 + v123, v7, v444);
      *(_QWORD *)(v117 + 56) = &type metadata for ClinicalSharingStatisticsQuery;
      *(_QWORD *)(v117 + 64) = &off_24E48EB08;
      v125 = swift_allocObject();
      *(_QWORD *)(v117 + 32) = v125;
      *(_QWORD *)(v125 + 16) = v120;
      *(_QWORD *)(v125 + 24) = v124;
      v126 = v439;
      *(_QWORD *)(v125 + 32) = v439;
      *(_QWORD *)(v125 + 40) = 4;
      *(_WORD *)(v125 + 48) = 257;
      v441 = *((_QWORD *)v440 + 1);
      v127 = (void (*)(char *, uint64_t))v441;
      swift_retain();
      v440 = v126;
      v128 = v443;
      v127(v17, v443);
      v437 = v119;
      v129 = v119;
      v130 = v430;
      ((void (*)(char *, uint64_t, uint64_t, char *))v433)(v129, 1, 1, v430);
      v438 = v11;
      v131 = v429;
      v432(v11, 1, 1, v429);
      sub_21FC5A824();
      sub_21FC5A7E8();
      v436 = v7;
      sub_21FAACB98((uint64_t)v17, 0, 0, (uint64_t)v7);
      v132 = swift_allocObject();
      *(_OWORD *)(v132 + 16) = v434;
      v133 = (void (*)(char *, uint64_t, _QWORD *))v427;
      ((void (*)(char *, char *, _QWORD *))v427)(&v435[v132], v7, v444);
      *(_QWORD *)(v117 + 96) = &type metadata for ClinicalSharingStatisticsQuery;
      *(_QWORD *)(v117 + 104) = &off_24E48EB08;
      v134 = swift_allocObject();
      *(_QWORD *)(v117 + 72) = v134;
      *(_QWORD *)(v134 + 16) = v120;
      *(_QWORD *)(v134 + 24) = v132;
      v135 = v440;
      *(_QWORD *)(v134 + 32) = v440;
      *(_QWORD *)(v134 + 40) = 3;
      *(_WORD *)(v134 + 48) = 257;
      swift_retain();
      v440 = v135;
      ((void (*)(char *, uint64_t))v441)(v17, v128);
      v136 = v437;
      ((void (*)(char *, uint64_t, uint64_t, char *))v433)(v437, 1, 1, v130);
      v432(v438, 1, 1, v131);
      v137 = v136;
      sub_21FC5A824();
      sub_21FC5A7F4();
      v138 = (uint64_t)v436;
      sub_21FAACB98((uint64_t)v17, 8u, 0, (uint64_t)v436);
      v139 = swift_allocObject();
      *(_OWORD *)(v139 + 16) = v434;
      v133(&v435[v139], v138, v444);
      *(_QWORD *)(v117 + 136) = &type metadata for ClinicalSharingStatisticsQuery;
      *(_QWORD *)(v117 + 144) = &off_24E48EB08;
      v140 = swift_allocObject();
      *(_QWORD *)(v117 + 112) = v140;
      *(_QWORD *)(v140 + 16) = v120;
      *(_QWORD *)(v140 + 24) = v139;
      v141 = v440;
      *(_QWORD *)(v140 + 32) = v440;
      *(_QWORD *)(v140 + 40) = 2;
      *(_WORD *)(v140 + 48) = 257;
      swift_retain();
      v142 = v141;
      v143 = v443;
      v144 = (void (*)(char *, uint64_t))v441;
      ((void (*)(char *, uint64_t))v441)(v17, v443);
      ((void (*)(char *, uint64_t, uint64_t, char *))v433)(v137, 1, 1, v430);
      v432(v438, 1, 1, v429);
      sub_21FC5A824();
      sub_21FC5A7F4();
      v145 = (uint64_t)v436;
      sub_21FAACB98((uint64_t)v17, 8u, 0, (uint64_t)v436);
      v146 = swift_allocObject();
      *(_OWORD *)(v146 + 16) = v434;
      v133(&v435[v146], v145, v444);
      *(_QWORD *)(v117 + 176) = &type metadata for ClinicalSharingStatisticsQuery;
      *(_QWORD *)(v117 + 184) = &off_24E48EB08;
      v147 = swift_allocObject();
      v445 = (uint64_t *)v117;
      *(_QWORD *)(v117 + 152) = v147;
      *(_QWORD *)(v147 + 16) = v120;
      *(_QWORD *)(v147 + 24) = v146;
      *(_QWORD *)(v147 + 32) = v142;
      *(_QWORD *)(v147 + 40) = 1;
      *(_WORD *)(v147 + 48) = 257;
      swift_retain();
      v148 = v142;
      v144(v17, v143);
      return v445;
    case 0xF9uLL:
      sub_21FA2D1A0(0, &qword_25553FD80, (uint64_t (*)(uint64_t))sub_21FBFF618, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v407 = swift_allocObject();
      *(_OWORD *)(v407 + 16) = xmmword_21FC5EE30;
      v408 = sub_21FC5AC08();
      v409 = v442;
      v410 = v14;
      v411 = v11;
      v412 = v7;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v408 - 8) + 56))(v410, 1, 1, v408);
      v413 = sub_21FC5AC5C();
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v413 - 8) + 56))(v411, 1, 1, v413);
      swift_retain();
      sub_21FC5A824();
      sub_21FC5A7E8();
      sub_21FAACB98((uint64_t)v17, 8u, 0, (uint64_t)v7);
      (*((void (**)(char *, uint64_t))v440 + 1))(v17, v15);
      v414 = type metadata accessor for ClinicalSharingWalkingSteadinessClassificationQuery();
      *(_QWORD *)(v407 + 56) = v414;
      *(_QWORD *)(v407 + 64) = &off_24E483808;
      v445 = (uint64_t *)v407;
      v415 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v407 + 32));
      v416 = *(int *)(v414 + 24);
      sub_21FA5BE58(0, &qword_25553FF78);
      v417 = MEMORY[0x2207D03B4]((id)*MEMORY[0x24BDD3370]);
      goto LABEL_42;
    case 0xFAuLL:
      sub_21FA2D1A0(0, &qword_25553FD80, (uint64_t (*)(uint64_t))sub_21FBFF618, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v418 = swift_allocObject();
      *(_OWORD *)(v418 + 16) = xmmword_21FC5EE30;
      v419 = sub_21FC5AC08();
      v409 = v442;
      v420 = v14;
      v421 = v11;
      v412 = v7;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v419 - 8) + 56))(v420, 1, 1, v419);
      v422 = sub_21FC5AC5C();
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v422 - 8) + 56))(v421, 1, 1, v422);
      swift_retain();
      sub_21FC5A824();
      sub_21FC5A7E8();
      sub_21FAACB98((uint64_t)v17, 8u, 0, (uint64_t)v7);
      (*((void (**)(char *, uint64_t))v440 + 1))(v17, v15);
      v414 = type metadata accessor for ClinicalSharingWalkingSteadinessEventQuery();
      *(_QWORD *)(v418 + 56) = v414;
      *(_QWORD *)(v418 + 64) = &off_24E489500;
      v445 = (uint64_t *)v418;
      v415 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v418 + 32));
      v416 = *(int *)(v414 + 24);
      sub_21FA5BE58(0, (unint64_t *)&qword_255540A30);
      v417 = MEMORY[0x2207D0390]((id)*MEMORY[0x24BDD2860]);
LABEL_42:
      *(uint64_t *)((char *)v415 + v416) = v417;
      *v415 = v409;
      (*(void (**)(char *, char *, _QWORD *))(v441 + 32))((char *)v415 + *(int *)(v414 + 20), v412, v444);
      return v445;
    default:
      return v445;
  }
  return v445;
}

uint64_t sub_21FBFE5E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int *v19;
  uint64_t *boxed_opaque_existential_1;
  char *v21;
  uint64_t result;
  id v23;
  id v24;

  v11 = *a2;
  v12 = *((unsigned __int8 *)a2 + 8);
  objc_opt_self();
  v13 = swift_dynamicCastObjCClass();
  if (!v13)
  {
    sub_21FC5BB74();
    v23 = objc_msgSend(a4, sel_description);
    sub_21FC5B604();
    swift_bridgeObjectRelease();

    sub_21FC5B6AC();
LABEL_9:
    result = sub_21FC5BC70();
    __break(1u);
    return result;
  }
  v14 = v13;
  v15 = a4;
  v16 = sub_21FC21B9C();
  if (!v16)
  {
    sub_21FC5BB74();
    v24 = objc_msgSend(v15, sel_description);
    sub_21FC5B604();

    sub_21FC5B6AC();
    swift_bridgeObjectRelease();
    sub_21FC5B6AC();
    goto LABEL_9;
  }
  v17 = v16;
  if (v12)
    v18 = 0x8080900080808uLL >> (8 * v11);
  else
    v18 = 8;
  v19 = (int *)type metadata accessor for ClinicalSharingHistogramQuery();
  a6[3] = (uint64_t)v19;
  a6[4] = (uint64_t)&off_24E488B10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a6);
  sub_21FAACB98(a1, v18, a3, (uint64_t)boxed_opaque_existential_1 + v19[5]);
  *boxed_opaque_existential_1 = a5;
  *(uint64_t *)((char *)boxed_opaque_existential_1 + v19[6]) = v14;
  v21 = (char *)boxed_opaque_existential_1 + v19[7];
  *(_QWORD *)v21 = v11;
  v21[8] = v12;
  *(uint64_t *)((char *)boxed_opaque_existential_1 + v19[8]) = v17;
  return swift_retain();
}

id sub_21FBFE83C@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  void *ObjCClassFromMetadata;
  uint64_t v20;
  id result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t *boxed_opaque_existential_1;
  _BYTE v29[12];
  int v30;

  v30 = a1;
  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_21FA2D1A0(0, (unint64_t *)&qword_25553F0B0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v29[-v7];
  sub_21FA2D1A0(0, &qword_25553F0B8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], v5);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v29[-v10];
  v12 = sub_21FC5A83C();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = &v29[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_21FA2D1A0(0, &qword_25553E0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], v5);
  MEMORY[0x24BDAC7A8](v16);
  v18 = &v29[-v17];
  sub_21FA5BE58(0, &qword_25554D0F8);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v20 = *MEMORY[0x24BDD2BB0];
  swift_retain();
  result = objc_msgSend(ObjCClassFromMetadata, sel_diagnosticTestResultTypeForIdentifier_, v20);
  if (result)
  {
    v22 = (uint64_t)result;
    v23 = sub_21FC5AC08();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v11, 1, 1, v23);
    v24 = sub_21FC5AC5C();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v8, 1, 1, v24);
    sub_21FC5A824();
    sub_21FC5A7E8();
    sub_21FAACB98((uint64_t)v15, 8u, 0, (uint64_t)v18);
    (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
    v25 = sub_21FC5A6C8();
    v26 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v18, 0, 1, v25);
    v27 = type metadata accessor for ClinicalSharingMedicalRecordsQuery();
    a3[3] = v27;
    a3[4] = (uint64_t)&off_24E4862F0;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
    *boxed_opaque_existential_1 = a2;
    boxed_opaque_existential_1[1] = v22;
    boxed_opaque_existential_1[2] = 3;
    result = (id)sub_21FA2D280((uint64_t)v18, (uint64_t)boxed_opaque_existential_1 + *(int *)(v27 + 28), &qword_25553E0E8, v26);
    *((_BYTE *)boxed_opaque_existential_1 + *(int *)(v27 + 32)) = v30;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_21FBFEB80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *boxed_opaque_existential_1;
  __int128 v14;
  uint64_t v15;
  _UNKNOWN **v16;
  uint64_t v17;

  v2 = type metadata accessor for ClinicalSharingCycleTrackingQuery();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v17 = MEMORY[0x24BEE4AF8];
    sub_21FC018F0(0, v6, 0);
    v7 = v17;
    v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v9 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_21FA2D120(v8, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
      v17 = v7;
      v11 = *(_QWORD *)(v7 + 16);
      v10 = *(_QWORD *)(v7 + 24);
      if (v11 >= v10 >> 1)
      {
        sub_21FC018F0(v10 > 1, v11 + 1, 1);
        v7 = v17;
      }
      v15 = v2;
      v16 = &off_24E48E2A0;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v14);
      sub_21FA2D120((uint64_t)v5, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
      *(_QWORD *)(v7 + 16) = v11 + 1;
      sub_21FA3175C(&v14, v7 + 40 * v11 + 32);
      sub_21FA326EC((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t sub_21FBFECE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;

  v18 = type metadata accessor for PBTypedData(0);
  v2 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D1A0(0, &qword_25553F0A0, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v17[1] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v17 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  if (v10)
  {
    v19 = MEMORY[0x24BEE4AF8];
    sub_21FC01EEC(0, v10, 0);
    v12 = a1 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v13 = *(_QWORD *)(v2 + 72);
    do
    {
      sub_21FA2D120(v12, (uint64_t)v4, type metadata accessor for PBTypedData);
      swift_dynamicCast();
      v11 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21FC01EEC(0, *(_QWORD *)(v11 + 16) + 1, 1);
        v11 = v19;
      }
      v15 = *(_QWORD *)(v11 + 16);
      v14 = *(_QWORD *)(v11 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_21FC01EEC(v14 > 1, v15 + 1, 1);
        v11 = v19;
      }
      *(_QWORD *)(v11 + 16) = v15 + 1;
      sub_21FA2D280((uint64_t)v9, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v15, &qword_25553F0A0, type metadata accessor for PBTypedData);
      v12 += v13;
      --v10;
    }
    while (v10);
  }
  return v11;
}

uint64_t sub_21FBFEEB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  unint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[16];
  _QWORD *v26;
  unint64_t v27;

  v24 = a1;
  v3 = sub_21FC5ACD4();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(a2 + 56);
  sub_21FA5BE58(0, &qword_25553FF78);
  v8 = (id)*MEMORY[0x24BDD35B8];
  *v6 = MEMORY[0x2207D03B4]();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BE458E8], v3);
  v26 = v6;
  swift_bridgeObjectRetain();
  v9 = MEMORY[0x24BEE4AF8];
  v10 = sub_21FBE9FC4(MEMORY[0x24BEE4AF8], (void (*)(uint64_t *, char *))sub_21FA85168, (uint64_t)v25, v7);
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v10 + 16);
  swift_bridgeObjectRelease();
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if (v11)
  {
    sub_21FA597BC(0, (unint64_t *)&qword_25554BAF0);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21FC71230;
    *(_QWORD *)(inited + 32) = objc_msgSend((id)objc_opt_self(), sel_electrocardiogramType);
    sub_21FA5BE58(0, (unint64_t *)&qword_255540A30);
    *(_QWORD *)(inited + 40) = MEMORY[0x2207D0390]((id)*MEMORY[0x24BDD2930]);
    *(_QWORD *)(inited + 48) = MEMORY[0x2207D0390]((id)*MEMORY[0x24BDD2980]);
    *(_QWORD *)(inited + 56) = MEMORY[0x2207D0390]((id)*MEMORY[0x24BDD2950]);
    v27 = inited;
    sub_21FC5B7C0();
    v13 = v27;
    v14 = a2 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_gregorianCalendar;
    v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3AE8]), sel_init);
    v16 = (void *)MEMORY[0x24BDAC7A8](v15);
    *(&v23 - 2) = v24;
    *(&v23 - 1) = v14;
    v17 = sub_21FBEA268(v16, sub_21FBFF600, (uint64_t)(&v23 - 4), v13);
    swift_bridgeObjectRelease();
    v18 = MEMORY[0x2207D03B4](v8);
    sub_21FA2D1A0(0, &qword_25553FD80, (uint64_t (*)(uint64_t))sub_21FBFF618, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_21FC5EE30;
    swift_retain();
    v19 = objc_msgSend(v17, sel_mergedIntervals);
    sub_21FC5A6C8();
    v20 = sub_21FC5B7A8();

    *(_QWORD *)(v9 + 56) = &type metadata for ClinicalSharingStatisticsQuery;
    *(_QWORD *)(v9 + 64) = &off_24E48EB08;
    v21 = swift_allocObject();
    *(_QWORD *)(v9 + 32) = v21;
    *(_QWORD *)(v21 + 16) = a2;
    *(_QWORD *)(v21 + 24) = v20;
    *(_QWORD *)(v21 + 32) = v18;
    *(_QWORD *)(v21 + 40) = 6;
    *(_WORD *)(v21 + 48) = 1;

  }
  return v9;
}

void sub_21FBFF200(id *a1, id *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  id v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  char *v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void *v39;
  void (*v40)(char *, uint64_t);
  id v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD v44[3];
  void (*v45)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  char *v47;
  void (*v48)(char *, uint64_t, uint64_t);
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  id *v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  char *v60;

  v56 = a1;
  v57 = a4;
  v7 = sub_21FC5AAAC();
  v54 = *(_QWORD *)(v7 - 8);
  v55 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v53 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v52 = (char *)v44 - v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v51 = (char *)v44 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v50 = (char *)v44 - v14;
  v15 = sub_21FC5A6C8();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v49 = (char *)v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v60 = (char *)v44 - v19;
  sub_21FA2D1A0(0, &qword_25553E0E8, v20, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)v44 - v22;
  if (*(_QWORD *)(a3 + 16))
  {
    v24 = *a2;
    v25 = sub_21FA73F98((uint64_t)v24);
    if ((v26 & 1) != 0)
    {
      v44[2] = v4;
      v27 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v25);
      swift_bridgeObjectRetain();

      v28 = *(_QWORD *)(v27 + 16);
      if (v28)
      {
        v29 = v27 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
        v46 = *(_QWORD *)(v16 + 72);
        v48 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
        v44[1] = v27;
        swift_bridgeObjectRetain();
        v47 = v23;
        v30 = v50;
        while (1)
        {
          v48(v23, v29, v15);
          v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
          v31(v23, 0, 1, v15);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v23, 1, v15) == 1)
            break;
          v45 = v31;
          (*(void (**)(void))(v16 + 32))();
          v58 = *v56;
          v59 = v29;
          sub_21FC5A6A4();
          v32 = v51;
          sub_21FC5AA58();
          v33 = v53;
          sub_21FC5AB30();
          sub_21FC5AA4C();
          sub_21FC5AA58();
          v34 = *(void (**)(char *, uint64_t))(v54 + 8);
          v35 = v33;
          v36 = v55;
          v34(v35, v55);
          v37 = v49;
          sub_21FC5A698();
          v38 = v32;
          v23 = v47;
          v34(v38, v36);
          v34(v30, v36);
          v39 = (void *)sub_21FC5A668();
          v40 = *(void (**)(char *, uint64_t))(v16 + 8);
          v40(v37, v15);
          v41 = v58;
          objc_msgSend(v58, sel_insertInterval_, v39);

          v42 = v59;
          v40(v60, v15);
          v29 = v42 + v46;
          if (!--v28)
          {
            v45(v23, 1, 1, v15);
            break;
          }
        }
      }
      else
      {
        v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
        swift_bridgeObjectRetain();
        v43(v23, 1, 1, v15);
      }
      swift_bridgeObjectRelease_n();
    }
    else
    {

    }
  }
}

void sub_21FBFF600(id *a1, id *a2)
{
  uint64_t v2;

  sub_21FBFF200(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

unint64_t sub_21FBFF618()
{
  unint64_t result;

  result = qword_25553EC80;
  if (!qword_25553EC80)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_25553EC80);
  }
  return result;
}

uint64_t sub_21FBFF66C()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

_QWORD *sub_21FBFF6A0(unint64_t a1)
{
  return sub_21FBFF7C4(a1, (void (*)(_QWORD *, uint64_t, unint64_t))sub_21FBFFB08);
}

size_t sub_21FBFF6AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  size_t result;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  sub_21FA2D1A0(0, &qword_25553ECD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v3 = *(_QWORD *)(sub_21FC5AAF4() - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      swift_bridgeObjectRetain();
      v9 = sub_21FC003C4(&v10, (uint64_t)v6 + v5, v1, a1);
      sub_21FA850C8();
      if (v9 == v1)
        return (size_t)v6;
      __break(1u);
      return MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_21FBFF7B8(unint64_t a1)
{
  return sub_21FBFF7C4(a1, (void (*)(_QWORD *, uint64_t, unint64_t))sub_21FBFFD24);
}

_QWORD *sub_21FBFF7C4(unint64_t a1, void (*a2)(_QWORD *, uint64_t, unint64_t))
{
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD *, uint64_t, unint64_t);

  if (a1 >> 62)
    goto LABEL_10;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v4 <= 0)
    {
      v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      sub_21FA597BC(0, (unint64_t *)&qword_25554BAF0);
      v5 = (_QWORD *)swift_allocObject();
      v6 = _swift_stdlib_malloc_size(v5);
      v7 = v6 - 32;
      if (v6 < 32)
        v7 = v6 - 25;
      v5[2] = v4;
      v5[3] = (2 * (v7 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    a2(v5 + 4, v4, a1);
    a2 = v8;
    swift_bridgeObjectRelease();
    if (a2 == (void (*)(_QWORD *, uint64_t, unint64_t))v4)
      break;
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    v4 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
    if (!v4)
      return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v5;
}

_QWORD *sub_21FBFF8D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_21FA597BC(0, &qword_25553FD90);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 1;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 5);
  v6 = sub_21FC007B8(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_21FA850C8();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

_QWORD *sub_21FBFF9C4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_21FA2D1A0(0, &qword_25554D120, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueSleepAnalysis, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  v6 = sub_21FC00E00(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_21FA850C8();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t sub_21FBFFABC()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_21FBFFAF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21FC04620(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_21FBFFB08(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_21FA7BA1C(0, (unint64_t *)&qword_25406BA70, (unint64_t *)&qword_25406BA88);
        sub_21FC00758();
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          v12 = sub_21FC0014C(v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_21FA5BE58(0, (unint64_t *)&qword_25406BA88);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

uint64_t sub_21FBFFD24(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_21FA7BA1C(0, (unint64_t *)&qword_25553E0B8, (unint64_t *)&qword_25553E0C0);
        sub_21FC00DA0();
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          v12 = sub_21FC001A4(v16, i, a3);
          v14 = *v13;
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_21FA5BE58(0, (unint64_t *)&qword_25553E0C0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

uint64_t sub_21FBFFF40(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_21FA2D1A0(0, &qword_25406BA38, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
        sub_21FC009D8();
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          v12 = sub_21FC001F8(v16, i, a3);
          v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for ClinicalSharingSyncContext();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

uint64_t (*sub_21FC0014C(void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_21FC00278(v6, a2, a3);
  return sub_21FC001A0;
}

uint64_t (*sub_21FC001A4(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_21FC002E4(v6, a2, a3);
  return sub_21FC001A0;
}

uint64_t (*sub_21FC001F8(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_21FC00350(v6, a2, a3);
  return sub_21FC001A0;
}

void sub_21FC0024C(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_21FC00278(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x2207D057C](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return destroy for ClinicalDocumentDownloadRequestError;
  }
  __break(1u);
  return result;
}

uint64_t (*sub_21FC002E4(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v3)();
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x2207D057C](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return j__s19HealthRecordsDaemon36ClinicalDocumentDownloadRequestErrorOwxx;
  }
  __break(1u);
  return result;
}

uint64_t (*sub_21FC00350(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x2207D057C](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return destroy for ClinicalIngestionResponseTimeMetricElement;
  }
  __break(1u);
  return result;
}

uint64_t destroy for ClinicalIngestionResponseTimeMetricElement()
{
  return swift_release();
}

uint64_t sub_21FC003C4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  sub_21FA2D1A0(0, &qword_25406BE78, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v33 - v9;
  v11 = sub_21FC5AAF4();
  v41 = *(_QWORD *)(v11 - 8);
  result = MEMORY[0x24BDAC7A8](v11);
  v40 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a4;
  v15 = a4 + 64;
  v14 = *(_QWORD *)(a4 + 64);
  v16 = -1 << *(_BYTE *)(a4 + 32);
  v35 = a1;
  v36 = v16;
  v17 = -v16;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  else
    v18 = -1;
  v19 = v18 & v14;
  if (!a2)
  {
    v20 = 0;
    v21 = 0;
LABEL_39:
    v31 = v35;
    v32 = ~v36;
    *v35 = v42;
    v31[1] = v15;
    v31[2] = v32;
    v31[3] = v20;
    v31[4] = v19;
    return v21;
  }
  if (!a3)
  {
    v20 = 0;
    v21 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v20 = 0;
  v21 = 0;
  v37 = a4 + 64;
  v38 = (unint64_t)(63 - v36) >> 6;
  v34 = v38 - 1;
  v39 = a3;
  v22 = v40;
  v23 = v41;
  if (!v19)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  v25 = v24 | (v20 << 6);
  while (1)
  {
    v29 = *(_QWORD *)(v23 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))(v10, *(_QWORD *)(v42 + 48) + v29 * v25, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v10, 1, v11) == 1)
    {
      v15 = v37;
      goto LABEL_38;
    }
    ++v21;
    v30 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v30(v22, v10, v11);
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v22, v11);
    if (v21 == v39)
    {
      v21 = v39;
      v15 = v37;
      goto LABEL_39;
    }
    a2 += v29;
    v23 = v41;
    if (v19)
      goto LABEL_8;
LABEL_9:
    v26 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    v15 = v37;
    if (v26 >= v38)
      goto LABEL_37;
    v27 = *(_QWORD *)(v37 + 8 * v26);
    if (!v27)
    {
      v28 = v20 + 2;
      ++v20;
      if (v26 + 1 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * v28);
      if (v27)
        goto LABEL_14;
      v20 = v26 + 1;
      if (v26 + 2 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * (v26 + 2));
      if (v27)
      {
        v26 += 2;
      }
      else
      {
        v20 = v26 + 2;
        if (v26 + 3 >= v38)
          goto LABEL_37;
        v27 = *(_QWORD *)(v37 + 8 * (v26 + 3));
        if (!v27)
        {
          v28 = v26 + 4;
          v20 = v26 + 3;
          if (v26 + 4 < v38)
          {
            v27 = *(_QWORD *)(v37 + 8 * v28);
            if (!v27)
            {
              while (1)
              {
                v26 = v28 + 1;
                if (__OFADD__(v28, 1))
                  goto LABEL_42;
                if (v26 >= v38)
                {
                  v20 = v34;
                  goto LABEL_37;
                }
                v27 = *(_QWORD *)(v37 + 8 * v26);
                ++v28;
                if (v27)
                  goto LABEL_21;
              }
            }
LABEL_14:
            v26 = v28;
            goto LABEL_21;
          }
LABEL_37:
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v10, 1, 1, v11);
          v19 = 0;
LABEL_38:
          sub_21FA2D1F8((uint64_t)v10, &qword_25406BE78, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58]);
          goto LABEL_39;
        }
        v26 += 3;
      }
    }
LABEL_21:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v20 = v26;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_21FC0072C()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

unint64_t sub_21FC00758()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25554D100;
  if (!qword_25554D100)
  {
    sub_21FA7BA1C(255, (unint64_t *)&qword_25406BA70, (unint64_t *)&qword_25406BA88);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_25554D100);
  }
  return result;
}

_QWORD *sub_21FC007B8(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v5 = a4 + 56;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_39:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v10 = a2;
  v23 = -1 << *(_BYTE *)(a4 + 32);
  v24 = result;
  v11 = 0;
  v12 = 0;
  v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v15 = v14 | (v11 << 6);
  while (1)
  {
    ++v12;
    v19 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 32 * v15);
    v20 = v19[1];
    v21 = v19[2];
    v22 = v19[3];
    *v10 = *v19;
    v10[1] = v20;
    v10[2] = v21;
    v10[3] = v22;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain();
      sub_21FA32314(v21, v22);
      goto LABEL_38;
    }
    v10 += 4;
    swift_bridgeObjectRetain();
    result = (_QWORD *)sub_21FA32314(v21, v22);
    if (v8)
      goto LABEL_8;
LABEL_9:
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v16 >= v13)
      goto LABEL_33;
    v17 = *(_QWORD *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        v8 = 0;
        v11 = v16;
      }
      else
      {
        v17 = *(_QWORD *)(v5 + 8 * v11);
        if (v17)
          goto LABEL_14;
        v18 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_33;
        v17 = *(_QWORD *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          v16 = v18;
          goto LABEL_18;
        }
        v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          v17 = *(_QWORD *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            v16 = v11;
            goto LABEL_18;
          }
          v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            v8 = 0;
            goto LABEL_37;
          }
          v17 = *(_QWORD *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              v16 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_42;
              if (v16 >= v13)
              {
                v8 = 0;
                v11 = v13 - 1;
                goto LABEL_37;
              }
              v17 = *(_QWORD *)(v5 + 8 * v16);
              ++v18;
              if (v17)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v8 = 0;
        v11 = v16 + 2;
      }
LABEL_37:
      v9 = v12;
LABEL_38:
      v6 = v23;
      result = v24;
      goto LABEL_39;
    }
LABEL_18:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

unint64_t sub_21FC009D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25554D108;
  if (!qword_25554D108)
  {
    sub_21FA2D1A0(255, &qword_25406BA38, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_25554D108);
  }
  return result;
}

uint64_t sub_21FC00A38(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  sub_21FA2D1A0(0, &qword_25406BE78, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v33 - v9;
  v11 = sub_21FC5AAF4();
  v41 = *(_QWORD *)(v11 - 8);
  result = MEMORY[0x24BDAC7A8](v11);
  v40 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a4;
  v15 = a4 + 56;
  v14 = *(_QWORD *)(a4 + 56);
  v16 = -1 << *(_BYTE *)(a4 + 32);
  v35 = a1;
  v36 = v16;
  v17 = -v16;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  else
    v18 = -1;
  v19 = v18 & v14;
  if (!a2)
  {
    v20 = 0;
    v21 = 0;
LABEL_39:
    v31 = v35;
    v32 = ~v36;
    *v35 = v42;
    v31[1] = v15;
    v31[2] = v32;
    v31[3] = v20;
    v31[4] = v19;
    return v21;
  }
  if (!a3)
  {
    v20 = 0;
    v21 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v20 = 0;
  v21 = 0;
  v37 = a4 + 56;
  v38 = (unint64_t)(63 - v36) >> 6;
  v34 = v38 - 1;
  v39 = a3;
  v22 = v40;
  v23 = v41;
  if (!v19)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  v25 = v24 | (v20 << 6);
  while (1)
  {
    v29 = *(_QWORD *)(v23 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))(v10, *(_QWORD *)(v42 + 48) + v29 * v25, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v10, 1, v11) == 1)
    {
      v15 = v37;
      goto LABEL_38;
    }
    ++v21;
    v30 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v30(v22, v10, v11);
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v22, v11);
    if (v21 == v39)
    {
      v21 = v39;
      v15 = v37;
      goto LABEL_39;
    }
    a2 += v29;
    v23 = v41;
    if (v19)
      goto LABEL_8;
LABEL_9:
    v26 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    v15 = v37;
    if (v26 >= v38)
      goto LABEL_37;
    v27 = *(_QWORD *)(v37 + 8 * v26);
    if (!v27)
    {
      v28 = v20 + 2;
      ++v20;
      if (v26 + 1 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * v28);
      if (v27)
        goto LABEL_14;
      v20 = v26 + 1;
      if (v26 + 2 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * (v26 + 2));
      if (v27)
      {
        v26 += 2;
      }
      else
      {
        v20 = v26 + 2;
        if (v26 + 3 >= v38)
          goto LABEL_37;
        v27 = *(_QWORD *)(v37 + 8 * (v26 + 3));
        if (!v27)
        {
          v28 = v26 + 4;
          v20 = v26 + 3;
          if (v26 + 4 < v38)
          {
            v27 = *(_QWORD *)(v37 + 8 * v28);
            if (!v27)
            {
              while (1)
              {
                v26 = v28 + 1;
                if (__OFADD__(v28, 1))
                  goto LABEL_42;
                if (v26 >= v38)
                {
                  v20 = v34;
                  goto LABEL_37;
                }
                v27 = *(_QWORD *)(v37 + 8 * v26);
                ++v28;
                if (v27)
                  goto LABEL_21;
              }
            }
LABEL_14:
            v26 = v28;
            goto LABEL_21;
          }
LABEL_37:
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v10, 1, 1, v11);
          v19 = 0;
LABEL_38:
          sub_21FA2D1F8((uint64_t)v10, &qword_25406BE78, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58]);
          goto LABEL_39;
        }
        v26 += 3;
      }
    }
LABEL_21:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v20 = v26;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

unint64_t sub_21FC00DA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25554D118;
  if (!qword_25554D118)
  {
    sub_21FA7BA1C(255, (unint64_t *)&qword_25553E0B8, (unint64_t *)&qword_25553E0C0);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_25554D118);
  }
  return result;
}

_QWORD *sub_21FC00E00(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t DecodingError.hdhr_friendlyDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  char *v22;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[4];
  uint64_t v44;
  unint64_t v45;

  v1 = sub_21FC5BBBC();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v40 - v6;
  v8 = sub_21FC5BBC8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (__int128 *)((char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v9 + 16))(v11, v0, v8);
  v12 = (*(uint64_t (**)(__int128 *, uint64_t))(v9 + 88))(v11, v8);
  if (v12 == *MEMORY[0x24BEE26D0])
  {
    (*(void (**)(__int128 *, uint64_t))(v9 + 96))(v11, v8);
    sub_21FA96B9C(0, &qword_25554D128, (void (*)(uint64_t))sub_21FC0159C, (void (*)(uint64_t))MEMORY[0x24BEE2700]);
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, (char *)v11 + *(int *)(v13 + 48), v1);
    v14 = DecodingError.Context.hdhr_keyPathRepresentation.getter();
    v16 = v15;
    v43[0] = 0x20746F6E5B2ELL;
    v43[1] = 0xE600000000000000;
    sub_21FC5BF28();
LABEL_5:
    sub_21FC5B6AC();
    swift_bridgeObjectRelease();
    sub_21FC5B6AC();
    v44 = v14;
    v45 = v16;
    swift_bridgeObjectRetain();
    v44 = sub_21FC5B718();
    v45 = v19;
    sub_21FC5B6A0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20 = v44;
    v21 = *(void (**)(char *, uint64_t))(v2 + 8);
    v22 = v5;
    goto LABEL_6;
  }
  if (v12 == *MEMORY[0x24BEE26E0])
  {
    (*(void (**)(__int128 *, uint64_t))(v9 + 96))(v11, v8);
    sub_21FA96B9C(0, &qword_25554D128, (void (*)(uint64_t))sub_21FC0159C, (void (*)(uint64_t))MEMORY[0x24BEE2700]);
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, (char *)v11 + *(int *)(v17 + 48), v1);
    v14 = DecodingError.Context.hdhr_keyPathRepresentation.getter();
    v16 = v18;
    v43[0] = 0;
    v43[1] = 0xE000000000000000;
    sub_21FC5BB74();
    swift_bridgeObjectRelease();
    strcpy((char *)v43, ".[not found; ");
    HIWORD(v43[1]) = -4864;
    sub_21FC5BF28();
    goto LABEL_5;
  }
  if (v12 == *MEMORY[0x24BEE26C8])
  {
    (*(void (**)(__int128 *, uint64_t))(v9 + 96))(v11, v8);
    sub_21FC017EC();
    v25 = (char *)v11 + *(int *)(v24 + 48);
    sub_21FA3175C(v11, (uint64_t)v43);
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v25, v1);
    v26 = DecodingError.Context.hdhr_keyPathRepresentation.getter();
    v28 = v27;
    v44 = 0;
    v45 = 0xE000000000000000;
    sub_21FC5BB74();
    swift_bridgeObjectRelease();
    v44 = 46;
    v45 = 0xE100000000000000;
    __swift_project_boxed_opaque_existential_1(v43, v43[3]);
    CodingKey.hdhr_keyPathRepresentation.getter();
    sub_21FC5B6AC();
    swift_bridgeObjectRelease();
    sub_21FC5B6AC();
    v41 = v26;
    v42 = v28;
    swift_bridgeObjectRetain();
    v41 = sub_21FC5B718();
    v42 = v29;
    sub_21FC5B6A0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20 = v41;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    return v20;
  }
  if (v12 != *MEMORY[0x24BEE26D8])
  {
    v20 = sub_21FC5BE44();
    (*(void (**)(__int128 *, uint64_t))(v9 + 8))(v11, v8);
    return v20;
  }
  (*(void (**)(__int128 *, uint64_t))(v9 + 96))(v11, v8);
  (*(void (**)(char *, __int128 *, uint64_t))(v2 + 32))(v7, v11, v1);
  v30 = sub_21FC5BBB0();
  v32 = v31;
  swift_bridgeObjectRelease();
  if ((v32 & 0x2000000000000000) != 0)
    v33 = HIBYTE(v32) & 0xF;
  else
    v33 = v30 & 0xFFFFFFFFFFFFLL;
  v34 = DecodingError.Context.hdhr_keyPathRepresentation.getter();
  v36 = v34;
  v37 = v35;
  if (v33)
  {
    v43[0] = 23342;
    v43[1] = 0xE200000000000000;
    sub_21FC5BBB0();
    sub_21FC5B6AC();
    swift_bridgeObjectRelease();
    sub_21FC5B6AC();
    v44 = v36;
    v45 = v37;
    swift_bridgeObjectRetain();
    v44 = sub_21FC5B718();
    v45 = v38;
    sub_21FC5B6A0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v43[0] = 0xD000000000000011;
    v43[1] = 0x800000021FC7DCB0;
    v44 = v34;
    v45 = v35;
    swift_bridgeObjectRetain();
    v44 = sub_21FC5B718();
    v45 = v39;
    sub_21FC5B6A0();
  }
  swift_bridgeObjectRelease();
  v20 = v44;
  v21 = *(void (**)(char *, uint64_t))(v2 + 8);
  v22 = v7;
LABEL_6:
  v21(v22, v1);
  return v20;
}

unint64_t sub_21FC0159C()
{
  unint64_t result;

  result = qword_25554D130;
  if (!qword_25554D130)
  {
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_25554D130);
  }
  return result;
}

uint64_t CodingKey.hdhr_keyPathRepresentation.getter()
{
  char v0;

  sub_21FC5BF04();
  if ((v0 & 1) != 0)
    return sub_21FC5BEF8();
  else
    return sub_21FC5BDCC();
}

uint64_t DecodingError.Context.hdhr_keyPathRepresentation.getter()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  uint64_t v13;

  v0 = sub_21FC5BBA4();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v13 = MEMORY[0x24BEE4AF8];
    sub_21FC01924(0, v1, 0);
    v2 = v0 + 32;
    v3 = v13;
    do
    {
      sub_21FA2CEA0(v2, (uint64_t)v12);
      __swift_project_boxed_opaque_existential_1(v12, v12[3]);
      v4 = CodingKey.hdhr_keyPathRepresentation.getter();
      v6 = v5;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21FC01924(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v13;
      }
      v8 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v3 + 24);
      if (v8 >= v7 >> 1)
      {
        sub_21FC01924(v7 > 1, v8 + 1, 1);
        v3 = v13;
      }
      *(_QWORD *)(v3 + 16) = v8 + 1;
      v9 = v3 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v4;
      *(_QWORD *)(v9 + 40) = v6;
      v2 += 40;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = MEMORY[0x24BEE4AF8];
  }
  v12[0] = v3;
  sub_21FA80754(0, (unint64_t *)&qword_25406BA60, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_21FA80314();
  v10 = sub_21FC5B5B0();
  swift_bridgeObjectRelease();
  return v10;
}

void sub_21FC017EC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25554D138)
  {
    sub_21FA50724(255, &qword_25554D140);
    sub_21FC5BBBC();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25554D138);
  }
}

uint64_t sub_21FC0186C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC03264, type metadata accessor for PBCategorySeries.Event);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01898(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC02DD8, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEA58]);
  *v3 = result;
  return result;
}

uint64_t sub_21FC018C4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC02DBC, type metadata accessor for AccountSummary);
  *v3 = result;
  return result;
}

uint64_t sub_21FC018F0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC028A8(a1, a2, a3, (_QWORD *)*v3, &qword_25553FD80, (unint64_t *)&qword_25553EC80);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01924(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_21FC0210C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_21FC01940(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC030C0, type metadata accessor for PBTimeSeries.Value);
  *v3 = result;
  return result;
}

uint64_t sub_21FC0196C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC02288, (uint64_t (*)(_QWORD))MEMORY[0x24BDCB878]);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01998(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC03050, (uint64_t (*)(_QWORD))sub_21FA8D544);
  *v3 = result;
  return result;
}

uint64_t sub_21FC019C4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC02E10, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
  *v3 = result;
  return result;
}

uint64_t sub_21FC019F0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_21FC022A4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_21FC01A0C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_21FC02414(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_21FC01A28(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC03184, type metadata accessor for PBPatientMeta.CHRMeta);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01A54(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC0314C, type metadata accessor for PBMedicationTrackingSchedule);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01A80(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC03168, type metadata accessor for PBHKMedicationScheduleIntervalData);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01AAC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC02DF4, type metadata accessor for PBDeleteBlob);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01AD8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC031BC, type metadata accessor for PBClinicalRecord);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01B04(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC031F4, type metadata accessor for PBHKCodedValue);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01B30(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC03210, type metadata accessor for PBHKInspectableValue);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01B5C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC0322C, type metadata accessor for PBHKReferenceRange);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01B88(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_21FC02590(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_21FC01BA4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC0306C, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingDataNodeInfo);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01BD0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC02E48, type metadata accessor for PBNode);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01BFC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC03034, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCategoryNodeInfo);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01C28(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC02E64, (uint64_t (*)(_QWORD))sub_21FAB3348);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01C54(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC02E80, (uint64_t (*)(_QWORD))sub_21FA968D8);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01C80(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC02E2C, type metadata accessor for PBBlob);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01CAC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_21FC0272C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_21FC01CC8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC031D8, type metadata accessor for PBHKConcept);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01CF4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC03114, type metadata accessor for PBHistogramSeries.Value);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01D20(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC03280, type metadata accessor for PBBucket);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01D4C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC03248, type metadata accessor for PBMedicationDosage);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01D78(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC028A8(a1, a2, a3, (_QWORD *)*v3, &qword_25553FE30, (unint64_t *)&qword_25553FE38);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01DAC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC031A0, type metadata accessor for PBActivitySummarySeries.ActivitySummary);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01DD8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_21FC02A64(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_21FC01DF4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC02D70, type metadata accessor for PBECGMeasurement);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01E20(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_21FC02E9C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_21FC01E3C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC030DC, type metadata accessor for PBMedicationTracking);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01E68(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC03088, (uint64_t (*)(_QWORD))sub_21FC030A4);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01E94(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC03018, type metadata accessor for PBReference);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01EC0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC03130, type metadata accessor for PBMedicationTrackingDoseEvent);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01EEC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21FC01F2C(a1, a2, a3, (_QWORD *)*v3, sub_21FC030F8, (uint64_t (*)(_QWORD))sub_21FA80738);
  *v3 = result;
  return result;
}

uint64_t sub_21FC01F18(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_21FC01F2C(a1, a2, a3, a4, sub_21FC02DD8, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEA58]);
}

uint64_t sub_21FC01F2C(char a1, int64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  a5(0);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

uint64_t sub_21FC0210C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_21FA80754(0, &qword_25553F0A8, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

void sub_21FC02288(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25553FD78, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

uint64_t sub_21FC022A4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_21FA80754(0, &qword_25554D228, MEMORY[0x24BEE1768], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

uint64_t sub_21FC02414(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_21FA80754(0, &qword_25553FD90, (uint64_t)&type metadata for ClinicalSharingNodeMetadata, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

uint64_t sub_21FC02590(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_21FA80754(0, &qword_25554D170, (uint64_t)&type metadata for ClinicalSharingFHIRSearchEntry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8])
      memmove(v12, v13, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[56 * v8] || v12 >= &v13[56 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

uint64_t sub_21FC0272C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_21FA80754(0, &qword_25554D160, MEMORY[0x24BDCDDE8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

uint64_t sub_21FC028A8(char a1, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    sub_21FA7FDD0(0, a5, a6);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v15 = (unint64_t)(v13 + 4);
  v16 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v15 >= v16 + 40 * v11)
      memmove(v13 + 4, a4 + 4, 40 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 40 * v11 || v15 >= v16 + 40 * v11)
  {
    sub_21FA50724(0, a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

uint64_t sub_21FC02A64(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_21FA80754(0, &qword_25554D1B0, (uint64_t)&type metadata for WellKnownJWKSProcessingContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8])
      memmove(v12, v13, 72 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[72 * v8] || v12 >= &v13[72 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

uint64_t sub_21FC02C00(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_21FA80754(0, &qword_25553FE20, MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

void sub_21FC02D70(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25554D148, type metadata accessor for PBECGMeasurement, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

uint64_t sub_21FC02D8C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_21FC01F2C(a1, a2, a3, a4, sub_21FC02DA0, type metadata accessor for ClinicalSharingElectrocardiogramQuery.ElectrocardiogramData);
}

void sub_21FC02DA0(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25554D150, type metadata accessor for ClinicalSharingElectrocardiogramQuery.ElectrocardiogramData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC02DBC(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25554D158, type metadata accessor for AccountSummary, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC02DD8(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25553ECD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC02DF4(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25554D168, type metadata accessor for PBDeleteBlob, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC02E10(uint64_t a1)
{
  sub_21FA2D1A0(a1, (unint64_t *)&unk_25406AA58, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC02E2C(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25554D178, type metadata accessor for PBBlob, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC02E48(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25554D180, type metadata accessor for PBNode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC02E64(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25554D188, (uint64_t (*)(uint64_t))sub_21FAB3348, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC02E80(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25554D190, (uint64_t (*)(uint64_t))sub_21FA968D8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

uint64_t sub_21FC02E9C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_21FA80754(0, (unint64_t *)&qword_25553FE48, (uint64_t)&type metadata for HTTPHeader, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

void sub_21FC03018(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25554D198, type metadata accessor for PBReference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC03034(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25553FDA0, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingCategoryNodeInfo, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC03050(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25554D1A0, (uint64_t (*)(uint64_t))sub_21FA8D544, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC0306C(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25553FDA8, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingDataNodeInfo, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC03088(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25554D1A8, (uint64_t (*)(uint64_t))sub_21FC030A4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC030A4(uint64_t a1)
{
  sub_21FA96B9C(a1, &qword_25406BE80, (void (*)(uint64_t))MEMORY[0x24BDCEA58], (void (*)(uint64_t))sub_21FBBAAB4);
}

void sub_21FC030C0(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25553FEA0, type metadata accessor for PBTimeSeries.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC030DC(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25554D1B8, type metadata accessor for PBMedicationTracking, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC030F8(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25553FE78, (uint64_t (*)(uint64_t))sub_21FA80738, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC03114(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25554D1C0, type metadata accessor for PBHistogramSeries.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC03130(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25554D1C8, type metadata accessor for PBMedicationTrackingDoseEvent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC0314C(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25554D1D0, type metadata accessor for PBMedicationTrackingSchedule, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC03168(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25554D1D8, type metadata accessor for PBHKMedicationScheduleIntervalData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC03184(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25554D1E0, type metadata accessor for PBPatientMeta.CHRMeta, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC031A0(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25554D1E8, type metadata accessor for PBActivitySummarySeries.ActivitySummary, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC031BC(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25554D1F0, type metadata accessor for PBClinicalRecord, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC031D8(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25554D1F8, type metadata accessor for PBHKConcept, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC031F4(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25554D200, type metadata accessor for PBHKCodedValue, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC03210(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25554D208, type metadata accessor for PBHKInspectableValue, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC0322C(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25554D210, type metadata accessor for PBHKReferenceRange, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC03248(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25554D218, type metadata accessor for PBMedicationDosage, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC03264(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25553FE88, type metadata accessor for PBCategorySeries.Event, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_21FC03280(uint64_t a1)
{
  sub_21FA2D1A0(a1, &qword_25554D220, type metadata accessor for PBBucket, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

uint64_t sub_21FC032A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int v19;
  id v20;
  void *v21;
  char *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;

  v38 = a2;
  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v35 - v10;
  v12 = sub_21FC5AAAC();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v35 - v17;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0xE000000000000000;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0xE000000000000000;
  *(_QWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 40) = 1;
  type metadata accessor for PBDateRange(0);
  sub_21FC5AD10();
  sub_21FA7187C(a1, (uint64_t)v11);
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v19 = v37(v11, 1, v12);
  v36 = v3;
  if (v19 == 1)
  {
    sub_21FA2D1F8((uint64_t)v11, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v11, v12);
    v20 = *(id *)(*v3 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_isoDateFormatter);
    v21 = (void *)sub_21FC5AA64();
    v22 = v16;
    v23 = objc_msgSend(v20, sel_stringFromDate_, v21);

    v24 = sub_21FC5B604();
    v26 = v25;

    v16 = v22;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    swift_bridgeObjectRelease();
    *(_QWORD *)a3 = v24;
    *(_QWORD *)(a3 + 8) = v26;
  }
  v27 = v13;
  sub_21FA7187C(v38, (uint64_t)v9);
  if (v37(v9, 1, v12) == 1)
    return sub_21FA2D1F8((uint64_t)v9, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v9, v12);
  v29 = *(id *)(*v36 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_isoDateFormatter);
  v30 = (void *)sub_21FC5AA64();
  v31 = objc_msgSend(v29, sel_stringFromDate_, v30);

  v32 = sub_21FC5B604();
  v34 = v33;

  (*(void (**)(char *, uint64_t))(v27 + 8))(v16, v12);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a3 + 16) = v32;
  *(_QWORD *)(a3 + 24) = v34;
  return result;
}

uint64_t sub_21FC0359C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  char *v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = a2;
  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v34 - v10;
  v12 = sub_21FC5AAAC();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v35 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v34 - v16;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0xE000000000000000;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0xE000000000000000;
  *(_QWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 40) = 1;
  type metadata accessor for PBDateRange(0);
  sub_21FC5AD10();
  sub_21FA7187C(a1, (uint64_t)v11);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v19 = v18(v11, 1, v12);
  v36 = v3;
  if (v19 == 1)
  {
    sub_21FA2D1F8((uint64_t)v11, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v11, v12);
    v20 = objc_retain(*(id *)(*(_QWORD *)(v3
                                        + *(int *)(type metadata accessor for ClinicalSharingCycleTrackingQuery() + 20))
                            + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_isoDateFormatter));
    v21 = (void *)sub_21FC5AA64();
    v22 = objc_msgSend(v20, sel_stringFromDate_, v21);

    v23 = sub_21FC5B604();
    v25 = v24;

    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
    swift_bridgeObjectRelease();
    *(_QWORD *)a3 = v23;
    *(_QWORD *)(a3 + 8) = v25;
  }
  sub_21FA7187C(v37, (uint64_t)v9);
  if (v18(v9, 1, v12) == 1)
    return sub_21FA2D1F8((uint64_t)v9, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  v27 = v35;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v35, v9, v12);
  v28 = objc_retain(*(id *)(*(_QWORD *)(v36
                                      + *(int *)(type metadata accessor for ClinicalSharingCycleTrackingQuery() + 20))
                          + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_isoDateFormatter));
  v29 = (void *)sub_21FC5AA64();
  v30 = objc_msgSend(v28, sel_stringFromDate_, v29);

  v31 = sub_21FC5B604();
  v33 = v32;

  (*(void (**)(char *, uint64_t))(v13 + 8))(v27, v12);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a3 + 16) = v31;
  *(_QWORD *)(a3 + 24) = v33;
  return result;
}

uint64_t sub_21FC038A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  char *v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;

  v38 = a2;
  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v35 - v11;
  v13 = sub_21FC5AAAC();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v36 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v35 - v17;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0xE000000000000000;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0xE000000000000000;
  *(_QWORD *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 40) = 1;
  type metadata accessor for PBDateRange(0);
  sub_21FC5AD10();
  sub_21FA7187C(a1, (uint64_t)v12);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v20 = v19(v12, 1, v13);
  v37 = a3;
  if (v20 == 1)
  {
    sub_21FA2D1F8((uint64_t)v12, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v12, v13);
    v21 = *(id *)(a3 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_isoDateFormatter);
    v22 = (void *)sub_21FC5AA64();
    v23 = objc_msgSend(v21, sel_stringFromDate_, v22);

    v24 = sub_21FC5B604();
    v26 = v25;

    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
    swift_bridgeObjectRelease();
    *(_QWORD *)a4 = v24;
    *(_QWORD *)(a4 + 8) = v26;
  }
  sub_21FA7187C(v38, (uint64_t)v10);
  if (v19(v10, 1, v13) == 1)
    return sub_21FA2D1F8((uint64_t)v10, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  v28 = v36;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v36, v10, v13);
  v29 = *(id *)(v37 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_isoDateFormatter);
  v30 = (void *)sub_21FC5AA64();
  v31 = objc_msgSend(v29, sel_stringFromDate_, v30);

  v32 = sub_21FC5B604();
  v34 = v33;

  (*(void (**)(char *, uint64_t))(v14 + 8))(v28, v13);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a4 + 16) = v32;
  *(_QWORD *)(a4 + 24) = v34;
  return result;
}

uint64_t sub_21FC03B8C(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  v17 = sub_21FC5AAAC();
  v4 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
    goto LABEL_15;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v8 = MEMORY[0x24BEE4AF8];
    if (!v7)
      return v8;
    v18 = MEMORY[0x24BEE4AF8];
    result = sub_21FC019C4(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0)
      break;
    v16 = v2;
    v10 = 0;
    v8 = v18;
    v2 = a1 & 0xC000000000000001;
    while (v7 != v10)
    {
      if (v2)
        v11 = (id)MEMORY[0x2207D057C](v10, a1);
      else
        v11 = *(id *)(a1 + 8 * v10 + 32);
      v12 = v11;
      v13 = objc_msgSend(v11, sel_startDate, v16);
      sub_21FC5AA94();

      v18 = v8;
      v15 = *(_QWORD *)(v8 + 16);
      v14 = *(_QWORD *)(v8 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_21FC019C4(v14 > 1, v15 + 1, 1);
        v8 = v18;
      }
      ++v10;
      *(_QWORD *)(v8 + 16) = v15 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v15, v6, v17);
      if (v7 == v10)
        return v8;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v7 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

int64_t sub_21FC03D58(uint64_t a1)
{
  unint64_t v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v4;
  int64x2_t v5;
  int64x2_t *v6;
  unint64_t v7;
  int64x2_t v8;
  int8x16_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t *v12;
  int64_t v13;
  int64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    if (v1 >= 5)
    {
      v4 = v3 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v5 = vdupq_n_s64(v2);
      v6 = (int64x2_t *)(a1 + 56);
      v7 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      v8 = v5;
      do
      {
        v5 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v5, v6[-1]), (int8x16_t)v6[-1], (int8x16_t)v5);
        v8 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v8, *v6), *(int8x16_t *)v6, (int8x16_t)v8);
        v6 += 2;
        v7 -= 4;
      }
      while (v7);
      v9 = vbslq_s8((int8x16_t)vcgtq_s64(v8, v5), (int8x16_t)v5, (int8x16_t)v8);
      v10 = vextq_s8(v9, v9, 8uLL).u64[0];
      v2 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v10, v9.i64[0]), *(int8x8_t *)v9.i8, (int8x8_t)v10);
      if (v3 == (v3 & 0xFFFFFFFFFFFFFFFCLL))
        return v2;
    }
    else
    {
      v4 = 1;
    }
    v11 = v1 - v4;
    v12 = (int64_t *)(a1 + 8 * v4 + 32);
    do
    {
      v14 = *v12++;
      v13 = v14;
      if (v14 < v2)
        v2 = v13;
      --v11;
    }
    while (v11);
  }
  return v2;
}

uint64_t sub_21FC03E0C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);

  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v29 - v8;
  v10 = sub_21FC5AAAC();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v29 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  if (!v17)
  {
    v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v18(v9, 1, 1, v10);
    goto LABEL_7;
  }
  v31 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v34 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  v34(v9, a1 + v31, v10);
  v32 = a1;
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v18(v9, 0, 1, v10);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v19(v9, 1, v10) == 1)
  {
LABEL_7:
    sub_21FA2D1F8((uint64_t)v9, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
    v23 = a2;
    v24 = 1;
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v18)(v23, v24, 1, v10);
  }
  v30 = a2;
  v20 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v20(v16, v9, v10);
  swift_bridgeObjectRetain();
  v21 = v17 - 1;
  if (v21)
  {
    v33 = *(_QWORD *)(v11 + 72);
    v26 = v32 + v33 + v31;
    while (1)
    {
      v34(v7, v26, v10);
      v18(v7, 0, 1, v10);
      if (v19(v7, 1, v10) == 1)
        break;
      v20(v14, v7, v10);
      sub_21FA2A08C((unint64_t *)&qword_255540578, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
      v27 = sub_21FC5B5BC();
      v28 = *(void (**)(char *, uint64_t))(v11 + 8);
      if ((v27 & 1) != 0)
      {
        v28(v16, v10);
        v20(v16, v14, v10);
      }
      else
      {
        v28(v14, v10);
      }
      v26 += v33;
      if (!--v21)
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    v18(v7, 1, 1, v10);
  }
  swift_bridgeObjectRelease();
  sub_21FA2D1F8((uint64_t)v7, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  v22 = v30;
  v20(v30, v16, v10);
  v23 = v22;
  v24 = 0;
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v18)(v23, v24, 1, v10);
}

uint64_t sub_21FC04118@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = a3;
  v7 = sub_21FC5AC08();
  v33 = *(_QWORD *)(v7 - 8);
  v34 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_21FC5A6C8();
  v35 = *(_QWORD *)(v38 - 8);
  v10 = v35;
  MEMORY[0x24BDAC7A8](v38);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ClinicalSharingCycleTrackingQuery();
  v14 = objc_msgSend((id)objc_opt_self(), sel_hk_gregorianCalendarWithUTCTimeZone);
  sub_21FC5AB78();

  v15 = sub_21FC5AAF4();
  v16 = *(_QWORD *)(v15 - 8);
  v36 = v15;
  v37 = v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(a4, a1, v15);
  v17 = (int *)v13;
  *(_QWORD *)(a4 + *(int *)(v13 + 20)) = a2;
  v18 = a4 + *(int *)(v13 + 24);
  v19 = a4;
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  v21 = v38;
  v22 = v39;
  v20(v18, v39, v38);
  v20((uint64_t)v12, v22, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v9, a2 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_gregorianCalendar, v34);
  swift_retain();
  v23 = sub_21FC44600((uint64_t)v12, (uint64_t)v9);
  v24 = v19;
  v25 = (uint64_t *)(v19 + v17[7]);
  *v25 = v23;
  v25[1] = v26;
  v27 = swift_bridgeObjectRetain();
  v28 = sub_21FC08854(v27, a1);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v24 + v17[8]) = v28;
  v29 = *(_QWORD *)(a2 + 56);
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = 0;
  sub_21FC1A908(1, (void *)*MEMORY[0x24BDD2840], v29, a1, v30);
  sub_21FC1A908(2, (void *)*MEMORY[0x24BDD2848], v29, a1, v30);
  sub_21FC1A908(4, (void *)*MEMORY[0x24BDD2850], v29, a1, v30);
  sub_21FC1A908(8, (void *)*MEMORY[0x24BDD2880], v29, a1, v30);
  sub_21FC1A908(16, (void *)*MEMORY[0x24BDD2888], v29, a1, v30);
  sub_21FC1A908(32, (void *)*MEMORY[0x24BDD28A8], v29, a1, v30);
  sub_21FC1A908(64, (void *)*MEMORY[0x24BDD28C0], v29, a1, v30);
  sub_21FC1A908(128, (void *)*MEMORY[0x24BDD2910], v29, a1, v30);
  sub_21FC1A908(256, (void *)*MEMORY[0x24BDD2938], v29, a1, v30);
  sub_21FC1A908(512, (void *)*MEMORY[0x24BDD2988], v29, a1, v30);
  sub_21FC1A908(1024, (void *)*MEMORY[0x24BDD29A8], v29, a1, v30);
  sub_21FC1A908(2048, (void *)*MEMORY[0x24BDD29B0], v29, a1, v30);
  sub_21FC1A908(4096, (void *)*MEMORY[0x24BDD29C8], v29, a1, v30);
  sub_21FC1A908(0x2000, (void *)*MEMORY[0x24BDD2A38], v29, a1, v30);
  sub_21FC1A908(0x4000, (void *)*MEMORY[0x24BDD28E8], v29, a1, v30);
  sub_21FC1A908(0x8000, (void *)*MEMORY[0x24BDD2A50], v29, a1, v30);
  sub_21FC1A908(0x10000, (void *)*MEMORY[0x24BDD29B8], v29, a1, v30);
  sub_21FC1A908(0x20000, (void *)*MEMORY[0x24BDD28A0], v29, a1, v30);
  sub_21FC1A908(0x40000, (void *)*MEMORY[0x24BDD2900], v29, a1, v30);
  sub_21FC1A908(0x80000, (void *)*MEMORY[0x24BDD28D0], v29, a1, v30);
  sub_21FC1A908(0x100000, (void *)*MEMORY[0x24BDD2868], v29, a1, v30);
  sub_21FC1A908(0x200000, (void *)*MEMORY[0x24BDD2990], v29, a1, v30);
  swift_beginAccess();
  v31 = *(_QWORD *)(v30 + 16);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v39, v38);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(a1, v36);
  result = swift_release();
  *(_QWORD *)(v24 + v17[9]) = v31;
  return result;
}

uint64_t sub_21FC04620@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];

  v8 = sub_21FC5A6C8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_21FC5AAF4();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v14, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
  swift_retain();
  sub_21FC04118((uint64_t)v14, a2, (uint64_t)v11, a4);
  v16 = type metadata accessor for ClinicalSharingCycleTrackingQuery();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a4, 0, 1, v16);
}

uint64_t type metadata accessor for ClinicalSharingCycleTrackingQuery()
{
  uint64_t result;

  result = qword_25554D288;
  if (!qword_25554D288)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21FC04784()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  void *v30;
  uint64_t (*v31)(void);
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(void);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[6];

  v1 = v0;
  sub_21FA84A5C(0, (unint64_t *)&qword_255540538, type metadata accessor for ClinicalSharingQueryOutput, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E10]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v52 - v5;
  sub_21FC091F0();
  v64 = v7;
  v67 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v66 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC0951C();
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v69 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC0946C();
  v68 = v13;
  v70 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v62 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v65 = (char *)&v52 - v16;
  v17 = type metadata accessor for ClinicalSharingCycleTrackingQuery();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC092B8();
  v22 = MEMORY[0x24BDAC7A8](v21);
  v23 = MEMORY[0x24BDAC7A8](v22);
  if ((*(_BYTE *)(v1 + *(int *)(v17 + 32)) & 2) != 0)
  {
    v28 = *(_QWORD *)(v1 + *(int *)(v17 + 20));
    v59 = v1;
    v56 = v23;
    v61 = (char *)&v52 - v24;
    v63 = v25;
    v55 = v26;
    sub_21FA2CEA0(v28 + 16, (uint64_t)v72);
    v29 = (void **)__swift_project_boxed_opaque_existential_1(v72, v72[3]);
    v58 = v10;
    v30 = *v29;
    *(_QWORD *)(swift_allocObject() + 16) = v30;
    v31 = MEMORY[0x24BDB9E38];
    sub_21FC0938C(0, &qword_25554D330, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
    v57 = v11;
    swift_allocObject();
    v32 = v30;
    v71 = sub_21FC5B25C();
    sub_21FC0963C(&qword_25554D338, &qword_25554D330, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v31, MEMORY[0x24BDB9E58]);
    v33 = sub_21FC5B280();
    swift_release();
    v71 = v33;
    sub_21FA2D120(v1, (uint64_t)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
    v34 = *(unsigned __int8 *)(v18 + 80);
    v60 = ((v34 + 16) & ~v34) + v19;
    v35 = (v34 + 16) & ~v34;
    v53 = v35;
    v54 = v34 | 7;
    v36 = swift_allocObject();
    sub_21FA2D23C((uint64_t)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v36 + v35, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
    sub_21FC5B184();
    v37 = MEMORY[0x24BDB9AE0];
    sub_21FC0938C(0, &qword_25554D2F0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    type metadata accessor for PBTypedData(0);
    sub_21FA84A5C(0, (unint64_t *)&qword_25554D2E8, type metadata accessor for PBTypedData, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v37);
    sub_21FC0963C(&qword_25554D308, &qword_25554D2F0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v37, MEMORY[0x24BDB9AF8]);
    sub_21FC0940C();
    v38 = v61;
    sub_21FC5B34C();
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
    v39 = v59;
    v72[0] = sub_21FC052F8();
    sub_21FA2D120(v39, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
    v40 = swift_allocObject();
    v41 = v53;
    sub_21FA2D23C((uint64_t)v20, v40 + v53, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
    v42 = MEMORY[0x24BDB9AE0];
    sub_21FC09754(0, (unint64_t *)&qword_25553E0B0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FC097DC(&qword_25553E0C8, (unint64_t *)&qword_25553E0B0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v42, MEMORY[0x24BDB9AF8]);
    v43 = v65;
    sub_21FC5B28C();
    swift_release();
    swift_release();
    v44 = v56;
    (*(void (**)(uint64_t, char *, uint64_t))(v63 + 16))(v55, v38, v56);
    v45 = v68;
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v62, v43, v68);
    sub_21FA2A08C(&qword_25554D310, (uint64_t (*)(uint64_t))sub_21FC092B8, MEMORY[0x24BDB98F0]);
    sub_21FA2A08C(&qword_25554D318, (uint64_t (*)(uint64_t))sub_21FC0946C, MEMORY[0x24BDB94C8]);
    v46 = v66;
    sub_21FC5B0C4();
    sub_21FA2D120(v59, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
    v47 = swift_allocObject();
    sub_21FA2D23C((uint64_t)v20, v47 + v41, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
    type metadata accessor for ClinicalSharingQueryOutput(0);
    sub_21FA2A08C(&qword_25554D328, (uint64_t (*)(uint64_t))sub_21FC091F0, MEMORY[0x24BDB9798]);
    v48 = v69;
    v49 = v64;
    sub_21FC5B2C8();
    swift_release();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v46, v49);
    sub_21FA2A08C(&qword_25554D340, (uint64_t (*)(uint64_t))sub_21FC0951C, MEMORY[0x24BDB96C0]);
    v50 = v58;
    v27 = sub_21FC5B280();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v48, v50);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v43, v45);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v61, v44);
  }
  else
  {
    type metadata accessor for ClinicalSharingQueryOutput(0);
    sub_21FA2CDB4();
    sub_21FC5B238();
    sub_21FC095B0();
    v27 = sub_21FC5B280();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return v27;
}

uint64_t sub_21FC04E90(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  id v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;

  v2 = v1;
  v4 = type metadata accessor for ClinicalSharingCycleTrackingQuery();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC0981C();
  v9 = *(_QWORD *)(v8 - 8);
  v39 = v8;
  v40 = v9;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC09910();
  v41 = *(_QWORD *)(v12 - 8);
  v42 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC09AD8();
  v47 = v15;
  v45 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v43 = (char *)v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC09B50();
  v48 = v17;
  v46 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v44 = (char *)v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = a1;
  v19 = objc_msgSend(a1, sel_cycles);
  if (v19)
  {
    v20 = v19;
    sub_21FA5BE58(0, &qword_25554D370);
    v21 = sub_21FC5B7A8();

  }
  else
  {
    v21 = MEMORY[0x24BEE4AF8];
  }
  v50 = v21;
  sub_21FA7BA1C(0, &qword_25554D368, &qword_25554D370);
  sub_21FC098B0();
  sub_21FC5B748();
  swift_bridgeObjectRelease();
  sub_21FA2D120(v2, (uint64_t)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
  v22 = *(unsigned __int8 *)(v5 + 80);
  v38[0] = v2;
  v23 = (v22 + 16) & ~v22;
  v24 = v23 + v6;
  v38[1] = v22 | 7;
  v25 = swift_allocObject();
  sub_21FA2D23C((uint64_t)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v25 + v23, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
  sub_21FC5B184();
  sub_21FA84A5C(0, &qword_25554D388, type metadata accessor for PBCycleTracking.Cycle, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA2A08C(&qword_25554D398, (uint64_t (*)(uint64_t))sub_21FC0981C, MEMORY[0x24BDB9970]);
  sub_21FC09A78();
  v26 = v14;
  v27 = v39;
  sub_21FC5B388();
  swift_release();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v27);
  sub_21FA2A08C(&qword_25554D3B8, (uint64_t (*)(uint64_t))sub_21FC09910, MEMORY[0x24BDB98F0]);
  v28 = v42;
  v29 = v43;
  sub_21FC5B328();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v26, v28);
  sub_21FA2D120(v38[0], (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
  v30 = swift_allocObject();
  sub_21FA2D23C((uint64_t)v7, v30 + v23, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
  v31 = v49;
  *(_QWORD *)(v30 + ((v24 + 7) & 0xFFFFFFFFFFFFFFF8)) = v49;
  type metadata accessor for PBTypedData(0);
  sub_21FA2A08C(&qword_25554D3C8, (uint64_t (*)(uint64_t))sub_21FC09AD8, MEMORY[0x24BDB98D8]);
  v32 = v31;
  v33 = v44;
  v34 = v47;
  sub_21FC5B28C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v29, v34);
  sub_21FA2A08C(&qword_25554D3D0, (uint64_t (*)(uint64_t))sub_21FC09B50, MEMORY[0x24BDB94C8]);
  v35 = v48;
  v36 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v33, v35);
  return v36;
}

uint64_t sub_21FC052F8()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  _QWORD v55[7];

  sub_21FC09754(0, &qword_25554D350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E10]);
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v39 = (char *)&v36 - v4;
  v44 = sub_21FC5B8E0();
  v43 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v42 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_21FC5ACD4();
  v7 = *(_QWORD *)(v6 - 8);
  v51 = v6;
  v52 = v7;
  MEMORY[0x24BDAC7A8](v6);
  v50 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2CEE4();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21FC71250;
  sub_21FA5BE58(0, (unint64_t *)&qword_255540A30);
  *(_QWORD *)(inited + 32) = MEMORY[0x2207D0390]((id)*MEMORY[0x24BDD28B0]);
  *(_QWORD *)(inited + 40) = MEMORY[0x2207D0390]((id)*MEMORY[0x24BDD2960]);
  *(_QWORD *)(inited + 48) = MEMORY[0x2207D0390]((id)*MEMORY[0x24BDD29D8]);
  v55[0] = inited;
  sub_21FC5B7C0();
  v10 = v55[0];
  v11 = *(int *)(type metadata accessor for ClinicalSharingCycleTrackingQuery() + 20);
  v41 = v0;
  v40 = v11;
  v12 = *(_QWORD *)(*(_QWORD *)(v0 + v11) + 56);
  v55[0] = MEMORY[0x24BEE4AF8];
  v53 = v12;
  if (v10 >> 62)
    goto LABEL_27;
  v13 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_3:
  v14 = MEMORY[0x24BEE4AF8];
  if (v13)
  {
    v37 = v3;
    v38 = v2;
    v3 = 0;
    v49 = v10 & 0xC000000000000001;
    v48 = v10 & 0xFFFFFFFFFFFFFF8;
    v45 = *MEMORY[0x24BE458E8];
    v47 = v10;
    v46 = v13;
    v15 = v50;
    v17 = v52;
    v16 = v53;
    while (1)
    {
      if (v49)
      {
        v18 = (id)MEMORY[0x2207D057C](v3, v10);
      }
      else
      {
        if (v3 >= *(_QWORD *)(v48 + 16))
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          swift_bridgeObjectRetain();
          v13 = sub_21FC5BC7C();
          goto LABEL_3;
        }
        v18 = *(id *)(v10 + 8 * v3 + 32);
      }
      v19 = v18;
      v2 = v3 + 1;
      if (__OFADD__(v3, 1))
        goto LABEL_26;
      *v15 = v18;
      v20 = v51;
      v21 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v17 + 104))(v15, v45, v51);
      MEMORY[0x24BDAC7A8](v21);
      *(&v36 - 2) = (uint64_t)v15;
      swift_bridgeObjectRetain();
      v54 = v19;
      v22 = sub_21FBE9FC4(MEMORY[0x24BEE4AF8], (void (*)(uint64_t *, char *))sub_21FA85168, (uint64_t)(&v36 - 4), v16);
      swift_bridgeObjectRelease();
      v23 = *(_QWORD *)(v22 + 16);
      swift_bridgeObjectRelease();
      (*(void (**)(_QWORD *, uint64_t))(v17 + 8))(v15, v20);
      if (v23)
      {
        sub_21FC5BBE0();
        sub_21FC5BC10();
        sub_21FC5BC1C();
        sub_21FC5BBEC();
      }
      else
      {

      }
      v10 = v47;
      ++v3;
      if (v2 == v46)
      {
        v14 = v55[0];
        v2 = v38;
        v3 = v37;
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v14 & 0x8000000000000000) == 0 && (v14 & 0x4000000000000000) == 0)
  {
    v24 = *(_QWORD *)(v14 + 16);
    if (v24)
    {
      v55[0] = MEMORY[0x24BEE4AF8];
      sub_21FC5BC04();
      goto LABEL_19;
    }
    goto LABEL_32;
  }
  swift_bridgeObjectRetain();
  v33 = sub_21FC5BC7C();
  swift_release();
  if (!v33)
    goto LABEL_32;
  swift_bridgeObjectRetain();
  v24 = sub_21FC5BC7C();
  swift_release();
  if (v24)
  {
    v55[0] = MEMORY[0x24BEE4AF8];
    sub_21FC5BC04();
    if ((v24 & 0x8000000000000000) == 0)
    {
LABEL_19:
      v25 = (void *)objc_opt_self();
      v26 = 0;
      do
      {
        if ((v14 & 0xC000000000000001) != 0)
          v27 = (id)MEMORY[0x2207D057C](v26, v14);
        else
          v27 = *(id *)(v14 + 8 * v26 + 32);
        v28 = v27;
        ++v26;
        v29 = objc_msgSend(v25, sel_queryDescriptorWithSampleType_, v27);

        sub_21FC5BBE0();
        sub_21FC5BC10();
        sub_21FC5BC1C();
        sub_21FC5BBEC();
      }
      while (v24 != v26);
      goto LABEL_24;
    }
    __break(1u);
LABEL_32:
    swift_release();
    sub_21FA7BA1C(0, (unint64_t *)&qword_25553E0B8, (unint64_t *)&qword_25553E0C0);
    sub_21FA2CDB4();
    v34 = v39;
    sub_21FC5B238();
    sub_21FC097DC(&qword_25554D358, &qword_25554D350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E10], MEMORY[0x24BDB9E20]);
    v32 = sub_21FC5B280();
    (*(void (**)(char *, unint64_t))(v3 + 8))(v34, v2);
    return v32;
  }
LABEL_24:
  swift_release();
  sub_21FBE6F50(0x61662D656C637963, 0xED000073726F7463, 0, 5, 1);
  sub_21FA2CEA0(*(_QWORD *)(v41 + v40) + 16, (uint64_t)v55);
  __swift_project_boxed_opaque_existential_1(v55, v55[3]);
  v30 = v42;
  sub_21FC5B8EC();
  sub_21FA2A08C(&qword_25553E0D8, (uint64_t (*)(uint64_t))MEMORY[0x24BE459E0], MEMORY[0x24BE459D8]);
  v31 = v44;
  v32 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v30, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
  return v32;
}

uint64_t sub_21FC059A4@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;

  v77 = a2;
  v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_21FA2D1A0(0, &qword_25553E0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v75 = (char *)&v64 - v6;
  v7 = type metadata accessor for PBDateRange(0);
  MEMORY[0x24BDAC7A8](v7);
  v72 = (uint64_t)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_21FC5A6C8();
  v74 = *(_QWORD *)(v76 - 8);
  MEMORY[0x24BDAC7A8](v76);
  v73 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for ClinicalSharingCycleTrackingQuery();
  MEMORY[0x24BDAC7A8](v68);
  v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], v4);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v64 - v13;
  v15 = sub_21FC5AAAC();
  v67 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v65 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v70 = (char *)&v64 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v64 - v21;
  v23 = MEMORY[0x24BDAC7A8](v20);
  v69 = (char *)&v64 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v78 = (char *)&v64 - v25;
  v26 = type metadata accessor for PBCategorySeries(0);
  v27 = MEMORY[0x24BDAC7A8](v26);
  v71 = (uint64_t)&v64 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)&v64 - v29;
  sub_21FC5AD10();
  v31 = *(int *)(v26 + 20);
  if (qword_25553D868 != -1)
    swift_once();
  v32 = qword_255543A10;
  *(_QWORD *)&v30[v31] = qword_255543A10;
  MEMORY[0x24BDAC7A8](v32);
  v79 = v2;
  *(&v64 - 2) = v2;
  swift_retain();
  v66 = a1;
  v33 = sub_21FC0857C(a1, (void (*)(id **))sub_21FC09730, (uint64_t)(&v64 - 4), &qword_25554D348, type metadata accessor for PBCategorySeries.Event, (uint64_t)sub_21FA7E9D8);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBCategorySeries._StorageClass(0);
    swift_allocObject();
    v34 = swift_retain();
    *(_QWORD *)&v30[v31] = sub_21FB4D47C(v34);
    swift_release();
  }
  v35 = (uint64_t *)(*(_QWORD *)&v30[v31]
                  + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBCategorySeriesP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__events);
  swift_beginAccess();
  *v35 = v33;
  swift_bridgeObjectRelease();
  v36 = *(_QWORD *)&v30[v31]
      + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBCategorySeriesP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__events;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)v36 + 16))
  {
    v37 = sub_21FC03B8C(v66);
    sub_21FC03E0C(v37, v14);
    swift_bridgeObjectRelease();
    sub_21FA2D120(v79, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
    v38 = v67;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v14, 1, v15) == 1)
    {
      v39 = v78;
      sub_21FC5A6A4();
      sub_21FA326EC((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
      sub_21FA2D1F8((uint64_t)v14, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
    }
    else
    {
      sub_21FA326EC((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
      v39 = v78;
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v78, v14, v15);
    }
    sub_21FC5A680();
    sub_21FA2A08C((unint64_t *)&qword_255540578, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
    v42 = sub_21FC5B5BC();
    v43 = v38;
    v44 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
    if ((v42 & 1) != 0)
      v45 = v22;
    else
      v45 = v39;
    v44(v69, v45, v15);
    v46 = v22;
    v47 = *(void (**)(char *, uint64_t))(v43 + 8);
    v47(v46, v15);
    v48 = v65;
    sub_21FC5A680();
    if ((sub_21FC5B5C8() & 1) != 0)
      v49 = v48;
    else
      v49 = v39;
    v44(v70, v49, v15);
    v68 = v15;
    v50 = v15;
    v51 = v47;
    v47(v48, v50);
    v52 = v73;
    sub_21FC5A68C();
    v53 = v77;
    sub_21FC5AD10();
    v54 = type metadata accessor for PBTypedData(0);
    v55 = *(int *)(v54 + 20);
    v56 = v52;
    if (qword_25553D590 != -1)
      swift_once();
    *(_QWORD *)(v53 + v55) = qword_25553E450;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBTypedData._StorageClass(0);
      swift_allocObject();
      v57 = swift_retain();
      *(_QWORD *)(v53 + v55) = sub_21FA3A458(v57);
      swift_release();
    }
    v58 = *(_QWORD *)(v53 + v55);
    swift_beginAccess();
    *(_QWORD *)(v58 + 16) = 116;
    *(_BYTE *)(v58 + 24) = 1;
    v60 = v74;
    v59 = (uint64_t)v75;
    v61 = v76;
    (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v75, v56, v76);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v60 + 56))(v59, 0, 1, v61);
    v62 = v72;
    sub_21FBE842C(5, 1, v59, v72);
    sub_21FA2D1F8(v59, &qword_25553E0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878]);
    PBTypedData.dateRange.setter(v62);
    v63 = v71;
    sub_21FA2D120((uint64_t)v30, v71, type metadata accessor for PBCategorySeries);
    PBTypedData.categorySeries.setter(v63);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v56, v61);
    v51(v78, v68);
    sub_21FA326EC((uint64_t)v30, type metadata accessor for PBCategorySeries);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v53, 0, 1, v54);
  }
  else
  {
    sub_21FA326EC((uint64_t)v30, type metadata accessor for PBCategorySeries);
    v40 = type metadata accessor for PBTypedData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v77, 1, 1, v40);
  }
}

uint64_t sub_21FC0614C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;
  uint64_t v16;

  v6 = type metadata accessor for PBTypedData(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D120(a1, (uint64_t)v8, type metadata accessor for PBTypedData);
  sub_21FA2D1A0(0, &qword_25553ECD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v9 = sub_21FC5AAF4();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_21FC5EE30;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 16))(v12 + v11, a2, v9);
  v13 = sub_21FBF27F0(v12);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_21FA2D23C((uint64_t)v8, a3, type metadata accessor for PBTypedData);
  result = type metadata accessor for ClinicalSharingQueryOutput(0);
  *(_QWORD *)(a3 + *(int *)(result + 20)) = v13;
  v15 = (_QWORD *)(a3 + *(int *)(result + 24));
  *v15 = 0;
  v15[1] = 0;
  return result;
}

uint64_t sub_21FC062B8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  _BYTE *v20;
  id v21;
  void *v22;
  _BYTE *v23;
  uint64_t result;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  int64_t v36;
  void **v37;
  void *v38;
  _QWORD *v39;
  uint64_t (*v40)(void);
  id v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(void);
  char *v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  char *v73;
  uint64_t v74;
  _QWORD v75[6];

  v2 = v1;
  sub_21FA84A5C(0, &qword_25554D3D8, type metadata accessor for PBCycleTracking.Cycle, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E10]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v73 = (char *)&v59 - v7;
  sub_21FC09CAC();
  v64 = *(_QWORD *)(v8 - 8);
  v65 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v63 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC09E3C();
  v69 = v10;
  v67 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v66 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC09EB4();
  v70 = *(_QWORD *)(v12 - 8);
  v71 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v68 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ClinicalSharingCycleTrackingQuery();
  v61 = *(_QWORD *)(v14 - 8);
  v15 = *(_QWORD *)(v61 + 64);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v62 = (uint64_t)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v59 - v17;
  v19 = objc_msgSend(a1, sel_menstruationSegment);
  v20 = objc_msgSend(v19, sel_days);

  v72 = a1;
  v21 = objc_msgSend(a1, sel_lastDayIndex);
  if (v21)
  {
    v22 = v21;
    v23 = objc_msgSend(v21, sel_integerValue);

    sub_21FA2D120(v2, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
    result = sub_21FA326EC((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
    goto LABEL_6;
  }
  v59 = v6;
  sub_21FA2D120(v2, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
  v25 = &v18[*(int *)(v14 + 28)];
  v27 = *(_QWORD *)v25;
  v26 = *((_QWORD *)v25 + 1);
  result = sub_21FA326EC((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
  v28 = v27 + v26;
  if (__OFADD__(v27, v26))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v23 = (_BYTE *)(v28 - 1);
  if (!__OFSUB__(v28, 1))
  {
    v6 = v59;
LABEL_6:
    v29 = (uint64_t *)(v2 + *(int *)(v14 + 28));
    v30 = *v29;
    v31 = v29[1];
    v32 = __OFADD__(v30, v31);
    v33 = v30 + v31;
    if (v32)
    {
      __break(1u);
    }
    else
    {
      v32 = __OFSUB__(v33, 1);
      v34 = v33 - 1;
      if (!v32)
      {
        if ((uint64_t)v20 >= v34 || (uint64_t)v23 < v30)
        {
          type metadata accessor for PBCycleTracking.Cycle(0);
          sub_21FA2CDB4();
          v58 = v73;
          sub_21FC5B238();
          sub_21FC09F48();
          v57 = sub_21FC5B280();
          (*(void (**)(char *, uint64_t))(v6 + 8))(v58, v5);
          return v57;
        }
        v35 = v23 - v20;
        if ((uint64_t)v23 >= (uint64_t)v20)
        {
          if (!__OFSUB__(v23, v20))
          {
            v36 = v35 + 1;
            if (!__OFADD__(v35, 1))
            {
              sub_21FA2CEA0(*(_QWORD *)(v2 + *(int *)(v14 + 20)) + 16, (uint64_t)v75);
              v37 = (void **)__swift_project_boxed_opaque_existential_1(v75, v75[3]);
              v60 = v2;
              v38 = *v37;
              v39 = (_QWORD *)swift_allocObject();
              v39[2] = v20;
              v39[3] = v36;
              v39[4] = v38;
              v40 = MEMORY[0x24BDB9E38];
              sub_21FC09D74(0, &qword_25554D430, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
              swift_allocObject();
              v41 = v38;
              v74 = sub_21FC5B25C();
              sub_21FC09DFC(&qword_25554D438, &qword_25554D430, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v40, MEMORY[0x24BDB9E58]);
              v42 = sub_21FC5B280();
              swift_release();
              v74 = v42;
              v43 = v62;
              sub_21FA2D120(v2, v62, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
              v44 = (*(unsigned __int8 *)(v61 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
              v45 = swift_allocObject();
              sub_21FA2D23C(v43, v45 + v44, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
              v46 = MEMORY[0x24BDB9AE0];
              sub_21FC09D74(0, &qword_25554D3E8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
              sub_21FA2D1A0(0, &qword_25554D3F8, type metadata accessor for PBCycleTracking.Event, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
              sub_21FC09DFC(&qword_25554D400, &qword_25554D3E8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v46, MEMORY[0x24BDB9AF8]);
              v47 = v63;
              sub_21FC5B2C8();
              swift_release();
              swift_release();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
              v75[0] = MEMORY[0x24BEE4AF8];
              sub_21FA2A08C(&qword_25554D410, (uint64_t (*)(uint64_t))sub_21FC09CAC, MEMORY[0x24BDB96C0]);
              v48 = v65;
              v49 = v66;
              sub_21FC5B2B0();
              (*(void (**)(char *, uint64_t))(v64 + 8))(v47, v48);
              sub_21FA2D120(v60, v43, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
              v50 = (v44 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
              v51 = swift_allocObject();
              sub_21FA2D23C(v43, v51 + v44, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCycleTrackingQuery);
              v52 = v72;
              *(_QWORD *)(v51 + v50) = v72;
              type metadata accessor for PBCycleTracking.Cycle(0);
              sub_21FA2A08C(&qword_25554D420, (uint64_t (*)(uint64_t))sub_21FC09E3C, MEMORY[0x24BDB9590]);
              v53 = v52;
              v55 = v68;
              v54 = v69;
              sub_21FC5B28C();
              swift_release();
              (*(void (**)(char *, uint64_t))(v67 + 8))(v49, v54);
              sub_21FA2A08C(&qword_25554D440, (uint64_t (*)(uint64_t))sub_21FC09EB4, MEMORY[0x24BDB94C8]);
              v56 = v71;
              v57 = sub_21FC5B280();
              (*(void (**)(char *, uint64_t))(v70 + 8))(v55, v56);
              return v57;
            }
            goto LABEL_20;
          }
LABEL_19:
          __break(1u);
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
    }
    __break(1u);
    goto LABEL_18;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_21FC06944@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_21FA2D1A0(0, &qword_25553E0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v37 - v10;
  v12 = type metadata accessor for PBDateRange(0);
  MEMORY[0x24BDAC7A8](v12);
  v38 = (uint64_t)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D1A0(0, &qword_25553EBD0, type metadata accessor for PBCycleTracking, v8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v37 - v15;
  v17 = type metadata accessor for PBCycleTracking(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v37 - v22;
  v24 = *a1;
  v25 = objc_msgSend(a3, sel_statistics);
  v39 = a2;
  sub_21FC06CE4(v25, v24, (uint64_t)v16);

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_21FA2D1F8((uint64_t)v16, &qword_25553EBD0, type metadata accessor for PBCycleTracking);
    v26 = type metadata accessor for PBTypedData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(a4, 1, 1, v26);
  }
  else
  {
    sub_21FA2D23C((uint64_t)v16, (uint64_t)v23, type metadata accessor for PBCycleTracking);
    sub_21FC5AD10();
    v28 = type metadata accessor for PBTypedData(0);
    v29 = *(int *)(v28 + 20);
    if (qword_25553D590 != -1)
      swift_once();
    *(_QWORD *)(a4 + v29) = qword_25553E450;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBTypedData._StorageClass(0);
      swift_allocObject();
      v30 = swift_retain();
      *(_QWORD *)(a4 + v29) = sub_21FA3A458(v30);
      swift_release();
    }
    v31 = *(_QWORD *)(a4 + v29);
    swift_beginAccess();
    *(_QWORD *)(v31 + 16) = 109;
    *(_BYTE *)(v31 + 24) = 1;
    v32 = v39 + *(int *)(type metadata accessor for ClinicalSharingCycleTrackingQuery() + 24);
    v33 = sub_21FC5A6C8();
    v34 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878];
    v35 = *(_QWORD *)(v33 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v11, v32, v33);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v11, 0, 1, v33);
    v36 = v38;
    sub_21FBE842C(5, 1, (uint64_t)v11, v38);
    sub_21FA2D1F8((uint64_t)v11, &qword_25553E0E8, v34);
    PBTypedData.dateRange.setter(v36);
    sub_21FA2D120((uint64_t)v23, (uint64_t)v21, type metadata accessor for PBCycleTracking);
    PBTypedData.cycleTracking.setter((uint64_t)v21);
    sub_21FA326EC((uint64_t)v23, type metadata accessor for PBCycleTracking);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a4, 0, 1, v28);
  }
}

uint64_t sub_21FC06CE4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  void *v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int *v61;
  id v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v78)(char *, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v88 = a2;
  v89 = a3;
  sub_21FA2D1A0(0, &qword_2555445E0, type metadata accessor for PBCycleTracking.Range, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v80 = (uint64_t)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v84 = (uint64_t)&v78 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v82 = (uint64_t)&v78 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v78 - v11;
  v13 = type metadata accessor for PBCycleTracking.Range(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v79 = (uint64_t)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v83 = (uint64_t)&v78 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v78 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v78 - v22;
  v24 = type metadata accessor for PBCycleTracking(0);
  v86 = *(_QWORD *)(v24 - 8);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v85 = (char *)&v78 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v78 - v27;
  sub_21FC5AD10();
  v87 = v24;
  v29 = *(int *)(v24 + 20);
  if (qword_25553DA18 != -1)
    swift_once();
  *(_QWORD *)&v28[v29] = qword_255543DC0;
  swift_retain();
  sub_21FC07DCC(objc_msgSend(a1, sel_cycleLengthLowerPercentile), objc_msgSend(a1, sel_cycleLengthUpperPercentile), (uint64_t)v12);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v31 = v30(v12, 1, v13);
  v81 = v14;
  if (v31 == 1)
  {
    sub_21FA2D1F8((uint64_t)v12, &qword_2555445E0, type metadata accessor for PBCycleTracking.Range);
  }
  else
  {
    v78 = v30;
    v32 = v13;
    sub_21FA2D23C((uint64_t)v12, (uint64_t)v23, type metadata accessor for PBCycleTracking.Range);
    sub_21FA2D120((uint64_t)v23, (uint64_t)v21, type metadata accessor for PBCycleTracking.Range);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBCycleTracking._StorageClass(0);
      swift_allocObject();
      v33 = swift_retain();
      *(_QWORD *)&v28[v29] = sub_21FB794CC(v33);
      swift_release();
    }
    v34 = *(_QWORD *)&v28[v29];
    v35 = v82;
    sub_21FA2D23C((uint64_t)v21, v82, type metadata accessor for PBCycleTracking.Range);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v81 + 56))(v35, 0, 1, v32);
    v36 = v35;
    v37 = v84;
    sub_21FA2D280(v36, v84, &qword_2555445E0, type metadata accessor for PBCycleTracking.Range);
    v38 = v34
        + OBJC_IVAR____TtCV19HealthRecordsDaemon15PBCycleTrackingP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__typicalCycleLengthRange;
    swift_beginAccess();
    swift_retain();
    v39 = v37;
    v13 = v32;
    sub_21FA2D2D8(v39, v38, &qword_2555445E0, type metadata accessor for PBCycleTracking.Range);
    swift_endAccess();
    swift_release();
    sub_21FA326EC((uint64_t)v23, type metadata accessor for PBCycleTracking.Range);
    v30 = v78;
  }
  v40 = objc_msgSend(a1, sel_cycleLengthMedian);
  if (v40)
  {
    v41 = v40;
    v42 = objc_msgSend(v40, sel_intValue);

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBCycleTracking._StorageClass(0);
      swift_allocObject();
      v43 = swift_retain();
      *(_QWORD *)&v28[v29] = sub_21FB794CC(v43);
      swift_release();
    }
    v44 = *(_QWORD *)&v28[v29];
    swift_beginAccess();
    *(_DWORD *)(v44 + 24) = v42;
  }
  v45 = objc_msgSend(a1, sel_menstruationLengthLowerPercentile);
  v46 = objc_msgSend(a1, sel_menstruationLengthUpperPercentile);
  v47 = v80;
  sub_21FC07DCC(v45, v46, v80);
  if (v30((char *)v47, 1, v13) == 1)
  {
    sub_21FA2D1F8(v47, &qword_2555445E0, type metadata accessor for PBCycleTracking.Range);
  }
  else
  {
    v48 = v13;
    v49 = v83;
    sub_21FA2D23C(v47, v83, type metadata accessor for PBCycleTracking.Range);
    v50 = v49;
    v51 = v79;
    sub_21FA2D120(v50, v79, type metadata accessor for PBCycleTracking.Range);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBCycleTracking._StorageClass(0);
      swift_allocObject();
      v52 = swift_retain();
      *(_QWORD *)&v28[v29] = sub_21FB794CC(v52);
      swift_release();
    }
    v53 = *(_QWORD *)&v28[v29];
    v54 = v82;
    sub_21FA2D23C(v51, v82, type metadata accessor for PBCycleTracking.Range);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v81 + 56))(v54, 0, 1, v48);
    v55 = v84;
    sub_21FA2D280(v54, v84, &qword_2555445E0, type metadata accessor for PBCycleTracking.Range);
    v56 = v53
        + OBJC_IVAR____TtCV19HealthRecordsDaemon15PBCycleTrackingP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__typicalPeriodLengthRange;
    swift_beginAccess();
    swift_retain();
    sub_21FA2D2D8(v55, v56, &qword_2555445E0, type metadata accessor for PBCycleTracking.Range);
    swift_endAccess();
    swift_release();
    sub_21FA326EC(v83, type metadata accessor for PBCycleTracking.Range);
  }
  v57 = objc_msgSend(a1, sel_menstruationLengthMedian);
  if (v57)
  {
    v58 = v57;
    v59 = objc_msgSend(v57, sel_intValue);

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBCycleTracking._StorageClass(0);
      swift_allocObject();
      v60 = swift_retain();
      *(_QWORD *)&v28[v29] = sub_21FB794CC(v60);
      swift_release();
    }
    v61 = (unsigned int *)(*(_QWORD *)&v28[v29]
                         + OBJC_IVAR____TtCV19HealthRecordsDaemon15PBCycleTrackingP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__typicalPeriodLengthDays);
    swift_beginAccess();
    *v61 = v59;
  }
  v62 = objc_msgSend(a1, sel_lastMenstruationStartDayIndex);
  v63 = v88;
  if (v62)
  {
    v64 = v62;
    v65 = sub_21FC07EDC((uint64_t)objc_msgSend(v62, sel_integerValue));
    v67 = v66;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBCycleTracking._StorageClass(0);
      swift_allocObject();
      v68 = swift_retain();
      *(_QWORD *)&v28[v29] = sub_21FB794CC(v68);
      swift_release();
    }
    v69 = (uint64_t *)(*(_QWORD *)&v28[v29]
                    + OBJC_IVAR____TtCV19HealthRecordsDaemon15PBCycleTrackingP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__lastMenstrualPeriodDate);
    swift_beginAccess();
    *v69 = v65;
    v69[1] = v67;

    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v63 + 16))
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBCycleTracking._StorageClass(0);
      swift_allocObject();
      v70 = swift_retain();
      *(_QWORD *)&v28[v29] = sub_21FB794CC(v70);
      swift_release();
    }
    v71 = *(_QWORD *)&v28[v29];
    swift_beginAccess();
    *(_QWORD *)(v71 + 16) = v63;
    swift_bridgeObjectRelease();
  }
  v72 = (uint64_t)v85;
  sub_21FC5AD10();
  v73 = v87;
  *(_QWORD *)(v72 + *(int *)(v87 + 20)) = qword_255543DC0;
  swift_retain();
  v74 = sub_21FB8CBA8((uint64_t)v28, v72);
  sub_21FA326EC(v72, type metadata accessor for PBCycleTracking);
  if ((v74 & 1) != 0)
  {
    sub_21FA326EC((uint64_t)v28, type metadata accessor for PBCycleTracking);
    v75 = 1;
    v76 = v89;
  }
  else
  {
    v76 = v89;
    sub_21FA2D23C((uint64_t)v28, v89, type metadata accessor for PBCycleTracking);
    v75 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 56))(v76, v75, 1, v73);
}

uint64_t sub_21FC075A4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;

  v64 = a1;
  sub_21FA2D1A0(0, &qword_255544608, type metadata accessor for PBCycleTracking.SexualActivity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v60 = (uint64_t)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v59 = (uint64_t)&v54 - v7;
  v8 = type metadata accessor for PBCycleTracking.SexualActivity(0);
  v57 = *(_QWORD *)(v8 - 8);
  v58 = v8;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v56 = (uint64_t)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v54 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v61 = (uint64_t)&v54 - v14;
  v15 = type metadata accessor for PBCycleTracking.Event(0);
  v63 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v54 - v19;
  sub_21FC5AD10();
  v21 = *(int *)(v15 + 20);
  if (qword_25553DA68 != -1)
    swift_once();
  *(_QWORD *)&v20[v21] = qword_255543E88;
  v22 = type metadata accessor for ClinicalSharingCycleTrackingQuery();
  v23 = *(int *)(v22 + 32);
  v62 = v2;
  v24 = *(_QWORD *)(v2 + v23);
  swift_retain();
  if ((v24 & 2) != 0)
  {
    v25 = objc_msgSend(v64, sel_menstrualFlow);
    if ((unint64_t)v25 <= 5)
    {
      v26 = v25;
      v55 = a2;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for PBCycleTracking.Event._StorageClass(0);
        swift_allocObject();
        v27 = swift_retain();
        *(_QWORD *)&v20[v21] = sub_21FB7BE00(v27);
        swift_release();
      }
      v28 = *(_QWORD *)&v20[v21];
      swift_beginAccess();
      *(_QWORD *)(v28 + 32) = v26;
      *(_BYTE *)(v28 + 40) = 1;
      a2 = v55;
    }
  }
  if ((v24 & 1) != 0 && objc_msgSend(v64, sel_intermenstrualBleeding))
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBCycleTracking.Event._StorageClass(0);
      swift_allocObject();
      v29 = swift_retain();
      *(_QWORD *)&v20[v21] = sub_21FB7BE00(v29);
      swift_release();
    }
    v30 = (_BYTE *)(*(_QWORD *)&v20[v21]
                  + OBJC_IVAR____TtCVV19HealthRecordsDaemon15PBCycleTracking5EventP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__hadSpotting);
    swift_beginAccess();
    *v30 = 1;
  }
  if ((v24 & 4) != 0)
  {
    v31 = objc_msgSend(v64, sel_sexualActivity);
    if (v31)
    {
      v32 = v31;
      v55 = a2;
      v33 = v58;
      sub_21FC5AD10();
      *v13 = 1;
      v13[1] = v32 == (id)1;
      v34 = v61;
      sub_21FA2D23C((uint64_t)v13, v61, type metadata accessor for PBCycleTracking.SexualActivity);
      v35 = v56;
      sub_21FA2D120(v34, v56, type metadata accessor for PBCycleTracking.SexualActivity);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for PBCycleTracking.Event._StorageClass(0);
        swift_allocObject();
        v36 = swift_retain();
        *(_QWORD *)&v20[v21] = sub_21FB7BE00(v36);
        swift_release();
      }
      v37 = *(_QWORD *)&v20[v21];
      v38 = v59;
      sub_21FA2D23C(v35, v59, type metadata accessor for PBCycleTracking.SexualActivity);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v57 + 56))(v38, 0, 1, v33);
      v39 = v60;
      sub_21FA2D280(v38, v60, &qword_255544608, type metadata accessor for PBCycleTracking.SexualActivity);
      v40 = v37
          + OBJC_IVAR____TtCVV19HealthRecordsDaemon15PBCycleTracking5EventP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__sexualActivity;
      swift_beginAccess();
      swift_retain();
      sub_21FA2D2D8(v39, v40, &qword_255544608, type metadata accessor for PBCycleTracking.SexualActivity);
      swift_endAccess();
      swift_release();
      sub_21FA326EC(v61, type metadata accessor for PBCycleTracking.SexualActivity);
      a2 = v55;
    }
  }
  v41 = (unint64_t)objc_msgSend(v64, sel_symptoms);
  v42 = *(_QWORD *)(v62 + *(int *)(v22 + 36)) & v41;
  if (v42)
  {
    v43 = sub_21FC19B14(v42);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBCycleTracking.Event._StorageClass(0);
      swift_allocObject();
      v44 = swift_retain();
      *(_QWORD *)&v20[v21] = sub_21FB7BE00(v44);
      swift_release();
    }
    v45 = (_QWORD *)(*(_QWORD *)&v20[v21]
                   + OBJC_IVAR____TtCVV19HealthRecordsDaemon15PBCycleTracking5EventP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__enumSymptoms);
    swift_beginAccess();
    *v45 = v43;
    swift_bridgeObjectRelease();
  }
  sub_21FC5AD10();
  *(_QWORD *)&v18[*(int *)(v15 + 20)] = qword_255543E88;
  swift_retain();
  v46 = sub_21FB8CD04((uint64_t)v20, (uint64_t)v18);
  sub_21FA326EC((uint64_t)v18, type metadata accessor for PBCycleTracking.Event);
  if ((v46 & 1) != 0)
  {
    sub_21FA326EC((uint64_t)v20, type metadata accessor for PBCycleTracking.Event);
    v47 = 1;
  }
  else
  {
    v48 = sub_21FC07EDC((uint64_t)objc_msgSend(v64, sel_dayIndex));
    v50 = v49;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBCycleTracking.Event._StorageClass(0);
      swift_allocObject();
      v51 = swift_retain();
      *(_QWORD *)&v20[v21] = sub_21FB7BE00(v51);
      swift_release();
    }
    v52 = *(_QWORD *)&v20[v21];
    swift_beginAccess();
    *(_QWORD *)(v52 + 16) = v48;
    *(_QWORD *)(v52 + 24) = v50;
    swift_bridgeObjectRelease();
    sub_21FA2D23C((uint64_t)v20, a2, type metadata accessor for PBCycleTracking.Event);
    v47 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56))(a2, v47, 1, v15);
}

void sub_21FC07BE0(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  _BYTE *v11;
  uint64_t v12;
  id v13;
  void *v14;
  _BYTE *v15;
  uint64_t v16;
  int64_t v17;
  BOOL v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for PBCycleTracking.Cycle(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)v9 + 2) = 0;
  *((_QWORD *)v9 + 3) = 0xE000000000000000;
  *((_DWORD *)v9 + 10) = 0;
  sub_21FC5AD10();
  v10 = objc_msgSend(a1, sel_menstruationSegment);
  v11 = objc_msgSend(v10, sel_days);

  *(_QWORD *)v9 = sub_21FC07EDC((uint64_t)v11);
  *((_QWORD *)v9 + 1) = v12;
  v13 = objc_msgSend(a1, sel_lastDayIndex);
  if (!v13)
    goto LABEL_7;
  v14 = v13;
  v15 = objc_msgSend(v13, sel_integerValue);

  *((_QWORD *)v9 + 2) = sub_21FC07EDC((uint64_t)v15);
  *((_QWORD *)v9 + 3) = v16;
  v17 = v15 - v11;
  if (__OFSUB__(v15, v11))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v19 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v19 <= 0x7FFFFFFF)
  {
    *((_DWORD *)v9 + 10) = v19;
LABEL_7:
    v20 = objc_msgSend(a1, sel_menstruationSegment);
    objc_msgSend(v20, sel_days);
    v22 = v21;

    if (v22 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v22 <= 0x7FFFFFFF)
    {
      *((_DWORD *)v9 + 11) = v22;
      *((_QWORD *)v9 + 4) = a2;
      sub_21FA2D120((uint64_t)v9, a3, type metadata accessor for PBCycleTracking.Cycle);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a3, 0, 1, v6);
      swift_bridgeObjectRetain();
      sub_21FA326EC((uint64_t)v9, type metadata accessor for PBCycleTracking.Cycle);
      return;
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_21FC07DCC@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;

  v6 = type metadata accessor for PBCycleTracking.Range(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v9 = 0;
  sub_21FC5AD10();
  if (!a1)
  {
    if (!a2)
    {
      sub_21FA326EC((uint64_t)v9, type metadata accessor for PBCycleTracking.Range);
      v11 = 1;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, v11, 1, v6);
    }
    goto LABEL_5;
  }
  *(_DWORD *)v9 = objc_msgSend(a1, sel_intValue);
  if (a2)
  {
LABEL_5:
    v10 = objc_msgSend(a2, sel_intValue);

    *((_DWORD *)v9 + 1) = v10;
    goto LABEL_6;
  }

LABEL_6:
  sub_21FA2D23C((uint64_t)v9, a3, type metadata accessor for PBCycleTracking.Range);
  v11 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, v11, 1, v6);
}

uint64_t sub_21FC07EDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = sub_21FC5AAAC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (void *)objc_opt_self();
  v9 = type metadata accessor for ClinicalSharingCycleTrackingQuery();
  v10 = (void *)sub_21FC5AB6C();
  v11 = objc_msgSend(v8, sel_hk_dateOnDayIndex_atHour_calendar_, a1, 0, v10);

  sub_21FC5AA94();
  v12 = objc_retain(*(id *)(*(_QWORD *)(v2 + *(int *)(v9 + 20))
                          + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_isoDateFormatter));
  v13 = (void *)sub_21FC5AA64();
  v14 = objc_msgSend(v12, sel_stringFromDate_, v13);

  v15 = sub_21FC5B604();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v15;
}

uint64_t sub_21FC08038@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  void (*v19)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  id v21;
  uint64_t (*v22)(uint64_t);
  _BYTE v23[4];
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  char v28;

  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v23[-v8];
  v10 = type metadata accessor for PBDateRange(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v23[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_21FC082FC(a1, (uint64_t)&v26);
  if ((v28 & 1) != 0)
  {
    v13 = type metadata accessor for PBCategorySeries.Event(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a2, 1, 1, v13);
  }
  else
  {
    v25 = v26;
    v24 = v27;
    sub_21FC5AD10();
    v15 = type metadata accessor for PBCategorySeries.Event(0);
    v16 = *(int *)(v15 + 20);
    if (qword_25553D890 != -1)
      swift_once();
    *(_QWORD *)(a2 + v16) = qword_255543A68;
    swift_retain();
    v17 = objc_msgSend(a1, sel_startDate);
    sub_21FC5AA94();

    v18 = sub_21FC5AAAC();
    v19 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
    v20 = 1;
    v19(v9, 0, 1, v18);
    if ((objc_msgSend(a1, sel_hasUndeterminedDuration) & 1) == 0)
    {
      v21 = objc_msgSend(a1, sel_endDate);
      sub_21FC5AA94();

      v20 = 0;
    }
    v19(v7, v20, 1, v18);
    sub_21FC0359C((uint64_t)v9, (uint64_t)v7, (uint64_t)v12);
    v22 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
    sub_21FA2D1F8((uint64_t)v7, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
    sub_21FA2D1F8((uint64_t)v9, (unint64_t *)&qword_25406AAE8, v22);
    PBCategorySeries.Event.recordedTime.setter((uint64_t)v12);
    v26 = v25;
    v27 = v24 & 1;
    PBCategorySeries.Event.cycleFactor.setter(&v26);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a2, 0, 1, v15);
  }
}

void sub_21FC082FC(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  char v9;
  char v10;
  uint64_t v11;
  id v12;

  objc_opt_self();
  v4 = swift_dynamicCastObjCClass();
  if (!v4)
    goto LABEL_10;
  v5 = (void *)v4;
  v6 = a1;
  v7 = objc_msgSend(v5, sel_categoryType);
  v8 = objc_msgSend(v7, sel_code);

  if (v8 != (id)193)
  {
    if (v8 == (id)192)
    {

      v9 = 0;
      v11 = 1;
      v10 = 1;
      goto LABEL_11;
    }
    if (v8 == (id)191)
    {

      v9 = 0;
      v10 = 1;
      v11 = 2;
      goto LABEL_11;
    }

LABEL_10:
    v11 = 0;
    v10 = 0;
    v9 = 1;
    goto LABEL_11;
  }
  v12 = objc_msgSend(v5, sel_value);

  v9 = 0;
  v10 = 1;
  v11 = 5;
  switch((unint64_t)v12)
  {
    case 1uLL:
      v9 = 0;
      v11 = 3;
      break;
    case 2uLL:
      v9 = 0;
      v11 = 4;
      break;
    case 3uLL:
      break;
    case 4uLL:
      v9 = 0;
      v11 = 6;
      break;
    case 5uLL:
      v9 = 0;
      v11 = 7;
      break;
    case 6uLL:
      v9 = 0;
      v11 = 8;
      break;
    case 7uLL:
      v9 = 0;
      v11 = 9;
      break;
    default:
      v9 = 0;
      v10 = 1;
      v11 = 3;
      break;
  }
LABEL_11:
  *(_QWORD *)a2 = v11;
  *(_BYTE *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 9) = v9;
}

unint64_t sub_21FC0849C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  if (*(_QWORD *)(a3 + 16))
  {
    v8 = result;
    result = sub_21FA73E18(a4);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * result);
      swift_bridgeObjectRetain();
      v11 = sub_21FC4BDD0(a2, v10);
      result = swift_bridgeObjectRelease();
      if ((v11 & 1) != 0)
      {
        result = swift_beginAccess();
        if ((v8 & ~*(_QWORD *)(a5 + 16)) != 0)
          *(_QWORD *)(a5 + 16) |= v8;
      }
    }
  }
  return result;
}

uint64_t sub_21FC08540@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_21FA2A9C0(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_21FC0857C(unint64_t a1, void (*a2)(id **), uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id *v21;
  void *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  unint64_t v25;
  unint64_t v26;
  _QWORD v28[2];
  uint64_t v29;
  unint64_t *v30;
  id *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(id **);
  uint64_t (*v36)(uint64_t);
  id *v37;

  v9 = v6;
  v35 = a2;
  v30 = a4;
  sub_21FA2D1A0(0, a4, a5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v28 - v12;
  v36 = a5;
  v34 = a5(0);
  v14 = *(_QWORD *)(v34 - 8);
  v15 = MEMORY[0x24BDAC7A8](v34);
  v33 = (uint64_t)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v29 = (uint64_t)v28 - v17;
  if (a1 >> 62)
    goto LABEL_18;
  v18 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v18; v18 = sub_21FC5BC7C())
  {
    v28[0] = a6;
    v28[1] = v9;
    v32 = a1 & 0xC000000000000001;
    v19 = MEMORY[0x24BEE4AF8];
    v20 = 4;
    v31 = (id *)a1;
    while (1)
    {
      a6 = v20 - 4;
      v21 = v32 ? (id *)MEMORY[0x2207D057C](v20 - 4, a1) : (id *)*(id *)(a1 + 8 * v20);
      a1 = (unint64_t)v21;
      v9 = v20 - 3;
      if (__OFADD__(a6, 1))
        break;
      v22 = (void *)MEMORY[0x2207D0ABC]();
      v37 = (id *)a1;
      v35(&v37);
      objc_autoreleasePoolPop(v22);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v34) == 1)
      {
        sub_21FA2D1F8((uint64_t)v13, v30, v36);
      }
      else
      {
        v23 = v29;
        v24 = v36;
        sub_21FA2D23C((uint64_t)v13, v29, v36);
        sub_21FA2D23C(v23, v33, v24);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v19 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))v28[0])(0, *(_QWORD *)(v19 + 16) + 1, 1, v19);
        v26 = *(_QWORD *)(v19 + 16);
        v25 = *(_QWORD *)(v19 + 24);
        if (v26 >= v25 >> 1)
          v19 = ((uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))v28[0])(v25 > 1, v26 + 1, 1, v19);
        *(_QWORD *)(v19 + 16) = v26 + 1;
        sub_21FA2D23C(v33, v19+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v26, v36);
      }
      a1 = (unint64_t)v31;
      ++v20;
      if (v9 == v18)
      {
        swift_bridgeObjectRelease();
        return v19;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_21FC08854(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t);
  void (*v11)(_QWORD *, uint64_t);
  uint64_t v12;
  uint64_t v14;

  v4 = sub_21FC5ACD4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (uint64_t *)((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = 0;
  sub_21FA5BE58(0, (unint64_t *)&qword_255540A30);
  *v7 = MEMORY[0x2207D0390]((id)*MEMORY[0x24BDD2948]);
  v9 = *MEMORY[0x24BE458E8];
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v5 + 104);
  v10(v7, v9, v4);
  sub_21FC0849C(1uLL, (uint64_t)v7, a1, a2, v8);
  v11 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
  v11(v7, v4);
  *v7 = MEMORY[0x2207D0390]((id)*MEMORY[0x24BDD2998]);
  v10(v7, v9, v4);
  sub_21FC0849C(2uLL, (uint64_t)v7, a1, a2, v8);
  v11(v7, v4);
  *v7 = MEMORY[0x2207D0390]((id)*MEMORY[0x24BDD2A08]);
  v10(v7, v9, v4);
  sub_21FC0849C(4uLL, (uint64_t)v7, a1, a2, v8);
  v11(v7, v4);
  swift_beginAccess();
  v12 = *(_QWORD *)(v8 + 16);
  swift_release();
  return v12;
}

uint64_t sub_21FC08A2C()
{
  return swift_deallocObject();
}

uint64_t *sub_21FC08A3C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_21FC5AAF4();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_21FC5A6C8();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_retain();
    v12(v9, v10, v11);
    v13 = a3[8];
    *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
    v14 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = sub_21FC5AC08();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  }
  return a1;
}

uint64_t sub_21FC08B50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_21FC5AAF4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_release();
  v5 = a1 + *(int *)(a2 + 24);
  v6 = sub_21FC5A6C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 40);
  v8 = sub_21FC5AC08();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t sub_21FC08BE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_21FC5AAF4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_21FC5A6C8();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_retain();
  v11(v8, v9, v10);
  v12 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  v13 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_21FC5AC08();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  return a1;
}

uint64_t sub_21FC08CCC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_21FC5AAF4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_retain();
  swift_release();
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_21FC5A6C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[7];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v14 = a3[10];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = sub_21FC5AC08();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t sub_21FC08DCC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_21FC5AAF4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_21FC5A6C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_21FC5AC08();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  return a1;
}

uint64_t sub_21FC08EA0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_21FC5AAF4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_release();
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_21FC5A6C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_21FC5AC08();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_21FC08F80()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FC08F8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_21FC5AAF4();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v13 = sub_21FC5A6C8();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[6];
    }
    else
    {
      v8 = sub_21FC5AC08();
      v14 = *(_QWORD *)(v8 - 8);
      v15 = a3[10];
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[5]);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_21FC09058()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FC09064(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_21FC5AAF4();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[5]) = (a2 - 1);
      return result;
    }
    v13 = sub_21FC5A6C8();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[6];
    }
    else
    {
      v10 = sub_21FC5AC08();
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[10];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_21FC0912C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = sub_21FC5AAF4();
  if (v1 <= 0x3F)
  {
    result = sub_21FC5A6C8();
    if (v2 <= 0x3F)
    {
      result = sub_21FC5AC08();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

void sub_21FC091F0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D2D8)
  {
    sub_21FC092B8();
    sub_21FC0946C();
    sub_21FA2A08C(&qword_25554D310, (uint64_t (*)(uint64_t))sub_21FC092B8, MEMORY[0x24BDB98F0]);
    sub_21FA2A08C(&qword_25554D318, (uint64_t (*)(uint64_t))sub_21FC0946C, MEMORY[0x24BDB94C8]);
    v0 = sub_21FC5B0B8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D2D8);
  }
}

void sub_21FC092B8()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25554D2E0)
  {
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FA84A5C(255, (unint64_t *)&qword_25554D2E8, type metadata accessor for PBTypedData, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FC0938C(255, &qword_25554D2F0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v0);
    sub_21FC0940C();
    sub_21FC0963C(&qword_25554D308, &qword_25554D2F0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    v1 = sub_21FC5B100();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25554D2E0);
  }
}

void sub_21FC0938C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = sub_21FA5BE58(255, &qword_25554D2F8);
    v7 = sub_21FA2CDB4();
    v8 = a3(a1, v6, v7, MEMORY[0x24BEE3F20]);
    if (!v9)
      atomic_store(v8, a2);
  }
}

unint64_t sub_21FC0940C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25554D300;
  if (!qword_25554D300)
  {
    sub_21FA84A5C(255, (unint64_t *)&qword_25554D2E8, type metadata accessor for PBTypedData, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9AF8], v1);
    atomic_store(result, (unint64_t *)&qword_25554D300);
  }
  return result;
}

void sub_21FC0946C()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25553E0A8)
  {
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FC09754(255, (unint64_t *)&qword_25553E0B0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    type metadata accessor for PBTypedData(255);
    sub_21FC097DC(&qword_25553E0C8, (unint64_t *)&qword_25553E0B0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    v1 = sub_21FC5B004();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25553E0A8);
  }
}

void sub_21FC0951C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D320)
  {
    sub_21FC091F0();
    type metadata accessor for ClinicalSharingQueryOutput(255);
    sub_21FA2A08C(&qword_25554D328, (uint64_t (*)(uint64_t))sub_21FC091F0, MEMORY[0x24BDB9798]);
    v0 = sub_21FC5B064();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D320);
  }
}

unint64_t sub_21FC095B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_255540568;
  if (!qword_255540568)
  {
    sub_21FA84A5C(255, (unint64_t *)&qword_255540538, type metadata accessor for ClinicalSharingQueryOutput, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E10]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9E20], v1);
    atomic_store(result, (unint64_t *)&qword_255540568);
  }
  return result;
}

uint64_t sub_21FC09610()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_21FC09634(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_21FBF76FC(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_21FC0963C(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FC0938C(255, a2, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FC09680@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_21FC09BF4(a1, (uint64_t (*)(_QWORD))sub_21FC04E90, a2);
}

uint64_t sub_21FC09690@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for ClinicalSharingCycleTrackingQuery();
  return sub_21FC059A4(*a1, a2);
}

uint64_t sub_21FC096E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ClinicalSharingCycleTrackingQuery() - 8) + 80);
  return sub_21FC0614C(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_21FC09730@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21FC08038(*a1, a2);
}

void sub_21FC09754(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_21FA7BA1C(255, (unint64_t *)&qword_25553E0B8, (unint64_t *)&qword_25553E0C0);
    v7 = v6;
    v8 = sub_21FA2CDB4();
    v9 = a3(a1, v7, v8, MEMORY[0x24BEE3F20]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_21FC097DC(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FC09754(255, a2, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_21FC0981C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D360)
  {
    sub_21FA7BA1C(255, &qword_25554D368, &qword_25554D370);
    sub_21FC098B0();
    v0 = sub_21FC5B130();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D360);
  }
}

unint64_t sub_21FC098B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25554D378;
  if (!qword_25554D378)
  {
    sub_21FA7BA1C(255, &qword_25554D368, &qword_25554D370);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_25554D378);
  }
  return result;
}

void sub_21FC09910()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D380)
  {
    sub_21FA84A5C(255, &qword_25554D388, type metadata accessor for PBCycleTracking.Cycle, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FC099D4();
    sub_21FC09A78();
    sub_21FA2A08C(&qword_25554D3A8, (uint64_t (*)(uint64_t))sub_21FC099D4, MEMORY[0x24BDB95F8]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D380);
  }
}

void sub_21FC099D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D390)
  {
    sub_21FC0981C();
    sub_21FA2CDB4();
    sub_21FA2A08C(&qword_25554D398, (uint64_t (*)(uint64_t))sub_21FC0981C, MEMORY[0x24BDB9970]);
    v0 = sub_21FC5B04C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D390);
  }
}

unint64_t sub_21FC09A78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25554D3A0;
  if (!qword_25554D3A0)
  {
    sub_21FA84A5C(255, &qword_25554D388, type metadata accessor for PBCycleTracking.Cycle, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9AF8], v1);
    atomic_store(result, (unint64_t *)&qword_25554D3A0);
  }
  return result;
}

void sub_21FC09AD8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D3B0)
  {
    sub_21FC09910();
    sub_21FA2A08C(&qword_25554D3B8, (uint64_t (*)(uint64_t))sub_21FC09910, MEMORY[0x24BDB98F0]);
    v0 = sub_21FC5B0F4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D3B0);
  }
}

void sub_21FC09B50()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D3C0)
  {
    sub_21FC09AD8();
    type metadata accessor for PBTypedData(255);
    sub_21FA2A08C(&qword_25554D3C8, (uint64_t (*)(uint64_t))sub_21FC09AD8, MEMORY[0x24BDB98D8]);
    v0 = sub_21FC5B004();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D3C0);
  }
}

uint64_t sub_21FC09BE8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_21FC09BF4(a1, (uint64_t (*)(_QWORD))sub_21FC062B8, a2);
}

uint64_t sub_21FC09BF4@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  type metadata accessor for ClinicalSharingCycleTrackingQuery();
  result = a2(*a1);
  *a3 = result;
  return result;
}

uint64_t sub_21FC09C4C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for ClinicalSharingCycleTrackingQuery() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_21FC06944(a1, v2 + v6, *(void **)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)), a2);
}

void sub_21FC09CAC()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25554D3E0)
  {
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FC09D74(255, &qword_25554D3E8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA2D1A0(255, &qword_25554D3F8, type metadata accessor for PBCycleTracking.Event, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FC09DFC(&qword_25554D400, &qword_25554D3E8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    v1 = sub_21FC5B064();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25554D3E0);
  }
}

void sub_21FC09D74(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_21FA7BA1C(255, &qword_25554D3F0, (unint64_t *)&qword_255540D88);
    v7 = v6;
    v8 = sub_21FA2CDB4();
    v9 = a3(a1, v7, v8, MEMORY[0x24BEE3F20]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_21FC09DFC(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FC09D74(255, a2, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_21FC09E3C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D408)
  {
    sub_21FC09CAC();
    sub_21FA2A08C(&qword_25554D410, (uint64_t (*)(uint64_t))sub_21FC09CAC, MEMORY[0x24BDB96C0]);
    v0 = sub_21FC5B034();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D408);
  }
}

void sub_21FC09EB4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D418)
  {
    sub_21FC09E3C();
    type metadata accessor for PBCycleTracking.Cycle(255);
    sub_21FA2A08C(&qword_25554D420, (uint64_t (*)(uint64_t))sub_21FC09E3C, MEMORY[0x24BDB9590]);
    v0 = sub_21FC5B004();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D418);
  }
}

unint64_t sub_21FC09F48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25554D428;
  if (!qword_25554D428)
  {
    sub_21FA84A5C(255, &qword_25554D3D8, type metadata accessor for PBCycleTracking.Cycle, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E10]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9E20], v1);
    atomic_store(result, (unint64_t *)&qword_25554D428);
  }
  return result;
}

uint64_t sub_21FC09FA8()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_21FC09FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_21FAC6744(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t objectdestroy_6Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for ClinicalSharingCycleTrackingQuery();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = sub_21FC5AAF4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  v5 = v3 + *(int *)(v1 + 24);
  v6 = sub_21FC5A6C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v3 + *(int *)(v1 + 40);
  v8 = sub_21FC5AC08();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return swift_deallocObject();
}

uint64_t sub_21FC0A0AC@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  _QWORD v8[4];

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ClinicalSharingCycleTrackingQuery() - 8) + 80);
  v6 = *a1;
  v8[2] = v2 + ((v5 + 16) & ~v5);
  result = sub_21FC0857C(v6, (void (*)(id **))sub_21FC0A288, (uint64_t)v8, &qword_25554D448, type metadata accessor for PBCycleTracking.Event, (uint64_t)sub_21FA7E9EC);
  *a2 = result;
  return result;
}

uint64_t objectdestroy_18Tm_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for ClinicalSharingCycleTrackingQuery();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = v0 + v3;
  v6 = sub_21FC5AAF4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_release();
  v7 = v5 + *(int *)(v1 + 24);
  v8 = sub_21FC5A6C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v5 + *(int *)(v1 + 40);
  v10 = sub_21FC5AC08();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);

  return swift_deallocObject();
}

void sub_21FC0A220(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = type metadata accessor for ClinicalSharingCycleTrackingQuery();
  sub_21FC07BE0(*(void **)(v2+ ((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64)+ ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))+ 7) & 0xFFFFFFFFFFFFF8)), *a1, a2);
}

uint64_t sub_21FC0A288@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21FC075A4(*a1, a2);
}

ValueMetadata *type metadata accessor for ClinicalSharingCycleTrackingQuery.CachedAuthorizations()
{
  return &type metadata for ClinicalSharingCycleTrackingQuery.CachedAuthorizations;
}

unint64_t sub_21FC0A2C0()
{
  unint64_t result;

  result = qword_25554D450;
  if (!qword_25554D450)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC712F8, &type metadata for ClinicalSharingCycleTrackingQuery.CachedAuthorizations);
    atomic_store(result, (unint64_t *)&qword_25554D450);
  }
  return result;
}

unint64_t sub_21FC0A308()
{
  unint64_t result;

  result = qword_25554D458;
  if (!qword_25554D458)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC712C8, &type metadata for ClinicalSharingCycleTrackingQuery.CachedAuthorizations);
    atomic_store(result, (unint64_t *)&qword_25554D458);
  }
  return result;
}

unint64_t sub_21FC0A350()
{
  unint64_t result;

  result = qword_25554D460;
  if (!qword_25554D460)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC71320, &type metadata for ClinicalSharingCycleTrackingQuery.CachedAuthorizations);
    atomic_store(result, (unint64_t *)&qword_25554D460);
  }
  return result;
}

unint64_t sub_21FC0A398()
{
  unint64_t result;

  result = qword_25554D468;
  if (!qword_25554D468)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC71358, &type metadata for ClinicalSharingCycleTrackingQuery.CachedAuthorizations);
    atomic_store(result, (unint64_t *)&qword_25554D468);
  }
  return result;
}

uint64_t sub_21FC0A3DC@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v20;

  sub_21FA32580();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_21FC5A98C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v20 - v10;
  sub_21FC5A980();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_21FAA51C8((uint64_t)v4);
LABEL_8:
    v18 = 1;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(a1, v18, 1, v5);
  }
  v12 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v12(v11, v4, v5);
  sub_21FC5A974();
  v14 = v13;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  if (!v14)
  {
    v17 = *(void (**)(char *, uint64_t))(v6 + 8);
    v17(v9, v5);
    goto LABEL_7;
  }
  sub_21FC5A95C();
  v16 = v15;
  v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17(v9, v5);
  swift_bridgeObjectRelease();
  if (!v16)
  {
LABEL_7:
    v17(v11, v5);
    goto LABEL_8;
  }
  v12(a1, v11, v5);
  v18 = 0;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(a1, v18, 1, v5);
}

uint64_t sub_21FC0A590()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[4];
  _QWORD v10[2];

  v1 = *(_QWORD *)(sub_21FC5A908() + 16);
  swift_bridgeObjectRelease();
  if (v1 < 3)
    goto LABEL_4;
  v2 = sub_21FC5A908();
  v10[0] = 0xD000000000000011;
  v10[1] = 0x800000021FC76D40;
  MEMORY[0x24BDAC7A8](v2);
  v9[2] = v10;
  v3 = sub_21FC0A9A8(sub_21FC0AA60, (uint64_t)v9, v2);
  v5 = v4;
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0 || (v6 = *(_QWORD *)(sub_21FC5A908() + 16), swift_bridgeObjectRelease(), v6 < v3))
  {
LABEL_4:
    sub_21FAD1BE0();
    swift_allocError();
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)v7 = 2;
    *(_BYTE *)(v7 + 24) = 3;
    swift_willThrow();
    return v0;
  }
  result = sub_21FC5A908();
  if (v3 < -1)
  {
    __break(1u);
  }
  else if ((unint64_t)(v3 + 1) < *(_QWORD *)(result + 16))
  {
    v0 = *(_QWORD *)(result + 16 * (v3 + 1) + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return v0;
  }
  __break(1u);
  return result;
}

uint64_t sub_21FC0A6F4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  _QWORD v25[2];

  v2 = sub_21FC5A98C();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v25 - v7;
  v9 = sub_21FC5A908();
  v10 = (_QWORD *)v9;
  v11 = *(_QWORD *)(v9 + 16);
  if (v11 < 4)
    goto LABEL_10;
  v12 = v9 + 16 * v11;
  v14 = *(_QWORD *)(v12 + 16);
  v13 = *(_QWORD *)(v12 + 24);
  swift_bridgeObjectRetain();
  if ((sub_21FC5B700() & 1) == 0)
  {
LABEL_9:
    swift_bridgeObjectRelease();
LABEL_10:
    swift_bridgeObjectRelease();
    sub_21FA2ECEC();
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a1, 1, 1, v24);
  }
  if (!v10[2])
  {
    __break(1u);
LABEL_12:
    result = (uint64_t)sub_21FC0A92C(v10);
    v10 = (_QWORD *)result;
    v16 = *(_QWORD *)(result + 16);
    if (v16)
      goto LABEL_6;
    goto LABEL_13;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_12;
  v16 = v10[2];
  if (v16)
  {
LABEL_6:
    v10[2] = v16 - 1;
    swift_bridgeObjectRelease();
    v17 = v10[2];
    if (v17 >= 3)
    {
      v10[2] = v17 - 1;
      swift_bridgeObjectRelease();
      v18 = v10[2];
      if (v18 >= 2)
      {
        v19 = (uint64_t)&v10[2 * v18 + 4];
        v20 = *(_QWORD *)(v19 - 8);
        v25[0] = *(_QWORD *)(v19 - 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        sub_21FA2ECEC();
        v22 = v21;
        v25[1] = (char *)a1 + *(int *)(v21 + 64);
        *a1 = v14;
        a1[1] = v13;
        a1[2] = v25[0];
        a1[3] = v20;
        sub_21FC5A944();
        sub_21FC5A944();
        v23 = *(void (**)(char *, uint64_t))(v3 + 8);
        v23(v6, v2);
        sub_21FC5A944();
        v23(v8, v2);
        return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a1, 0, 1, v22);
      }
    }
    goto LABEL_9;
  }
LABEL_13:
  __break(1u);
  return result;
}

_QWORD *sub_21FC0A92C(_QWORD *a1)
{
  return sub_21FA7DD0C(0, a1[2], 0, a1);
}

void sub_21FC0A940(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_21FC5BC7C();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x2207D0588);
}

uint64_t sub_21FC0A9A8(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  _QWORD v10[2];

  v4 = *(_QWORD *)(a3 + 16);
  if (v4)
  {
    v6 = (uint64_t *)(a3 + 16 * v4 + 24);
    do
    {
      v7 = *v6;
      v10[0] = *(v6 - 1);
      v10[1] = v7;
      swift_bridgeObjectRetain();
      v8 = a1(v10);
      swift_bridgeObjectRelease();
      if (v3)
        break;
      v6 -= 2;
      --v4;
    }
    while (!(v8 & 1 | (v4 == 0)));
  }
  return v4;
}

uint64_t sub_21FC0AA60(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return sub_21FC5BDF0() & 1;
}

uint64_t Publisher<>.catchAndRefreshToken(accountIdentifier:accountStore:performer:webRequest:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;

  v37 = a4;
  v38 = a6;
  v49 = a2;
  v50 = a3;
  v40 = a1;
  v9 = sub_21FC5AAF4();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  sub_21FA30BA4(255);
  v13 = v12;
  v46 = v12;
  v45 = sub_21FA2A08C(&qword_25553E2B0, (uint64_t (*)(uint64_t))sub_21FA30BA4, MEMORY[0x24BDB9AF8]);
  *(_QWORD *)&v52 = a5;
  *((_QWORD *)&v52 + 1) = v13;
  v53 = a6;
  v54 = v45;
  v14 = sub_21FC5B13C();
  v15 = *(_QWORD *)(v14 - 8);
  v41 = v14;
  v51 = v15;
  MEMORY[0x24BDAC7A8](v14);
  v39 = (char *)&v37 - v16;
  v17 = type metadata accessor for WebRequestResponseError(255);
  v44 = v17;
  v18 = MEMORY[0x2207D0F78](MEMORY[0x24BDB9998], v14);
  v43 = v18;
  v42 = sub_21FA2A08C(&qword_25553E2A8, type metadata accessor for WebRequestResponseError, (uint64_t)&protocol conformance descriptor for WebRequestResponseError);
  *(_QWORD *)&v52 = v14;
  *((_QWORD *)&v52 + 1) = v17;
  v53 = v18;
  v54 = v42;
  v19 = sub_21FC5B10C();
  v20 = *(_QWORD *)(v19 - 8);
  v47 = v19;
  v48 = v20;
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v37 - v21;
  sub_21FA2CEA0(a4, (uint64_t)&v52);
  v23 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v23, v40, v9);
  v25 = (*(unsigned __int8 *)(v10 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v26 = (v11 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = a5;
  *(_QWORD *)(v27 + 24) = v38;
  sub_21FA3175C(&v52, v27 + 32);
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v27 + v25, v23, v24);
  v28 = v49;
  v29 = v50;
  *(_QWORD *)(v27 + v26) = v49;
  *(_QWORD *)(v27 + ((v26 + 15) & 0xFFFFFFFFFFFFFFF8)) = v29;
  v30 = v28;
  swift_retain();
  v31 = v39;
  sub_21FC5B364();
  swift_release();
  sub_21FA2CEA0(v37, (uint64_t)&v52);
  v32 = swift_allocObject();
  sub_21FA3175C(&v52, v32 + 16);
  v33 = v41;
  sub_21FC5B358();
  swift_release();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v31, v33);
  v34 = v47;
  MEMORY[0x2207D0F78](MEMORY[0x24BDB9938], v47);
  v35 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v22, v34);
  return v35;
}

uint64_t sub_21FC0ADD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int EnumCaseMultiPayload;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  char *v48;
  char v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint8_t *v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t (*v62)(_QWORD);
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  char *v66;
  uint8_t *v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t result;
  uint64_t v71;
  _QWORD v72[2];
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95[3];
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v80 = a7;
  v81 = a6;
  v79 = a5;
  v77 = a4;
  v82 = a8;
  v83 = a3;
  v76 = sub_21FC5AAF4();
  v91 = *(_QWORD *)(v76 - 8);
  MEMORY[0x24BDAC7A8](v76);
  v89 = (char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for HTTPError();
  v12 = MEMORY[0x24BDAC7A8](v84);
  v85 = (_QWORD *)((char *)v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v72 - v14;
  v87 = type metadata accessor for WebRequestResponseError.ErrorType(0);
  MEMORY[0x24BDAC7A8](v87);
  v88 = (uint64_t)v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_21FC5A98C();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for WebRequestResponseError(0);
  MEMORY[0x24BDAC7A8](v92);
  v22 = (char *)v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_25406B7F8 != -1)
    swift_once();
  v23 = sub_21FC5AFD4();
  v24 = __swift_project_value_buffer(v23, (uint64_t)qword_25406D830);
  v90 = (uint8_t *)a1;
  sub_21FA2D120(a1, (uint64_t)v22, type metadata accessor for WebRequestResponseError);
  v78 = a2;
  sub_21FA2CEA0(a2, (uint64_t)v95);
  v86 = v24;
  v25 = sub_21FC5AFC8();
  v26 = sub_21FC5B970();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = swift_slowAlloc();
    v75 = v8;
    v28 = v27;
    v73 = swift_slowAlloc();
    v98 = v73;
    *(_DWORD *)v28 = 136315394;
    v74 = v15;
    v29 = WebRequestResponseError.safelyLoggableDescription.getter();
    v93 = sub_21FABDCF8(v29, v30, &v98);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    sub_21FA326EC((uint64_t)v22, type metadata accessor for WebRequestResponseError);
    *(_WORD *)(v28 + 12) = 2080;
    v72[1] = v28 + 14;
    v31 = v96;
    v32 = v97;
    __swift_project_boxed_opaque_existential_1(v95, v96);
    (*(void (**)(uint64_t, uint64_t))(v32 + 40))(v31, v32);
    v33 = sub_21FC5A8FC();
    v35 = v34;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    v93 = v33;
    v94 = v35;
    swift_bridgeObjectRetain();
    sub_21FC5BE08();
    v36 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_21FC5BAF0();
    swift_unknownObjectRelease();
    v37 = sub_21FC5B64C();
    v39 = v38;
    v15 = v74;
    swift_bridgeObjectRelease();
    v93 = sub_21FABDCF8(v37, v39, &v98);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
    _os_log_impl(&dword_21FA27000, v25, v26, "WebRequestPerformer.catchAndRefreshToken: evaluating error %s for request %s", (uint8_t *)v28, 0x16u);
    v40 = v73;
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v40, -1, -1);
    MEMORY[0x2207D105C](v28, -1, -1);
  }
  else
  {
    sub_21FA326EC((uint64_t)v22, type metadata accessor for WebRequestResponseError);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
  }

  v41 = v91;
  v42 = (uint64_t)v90;
  v43 = v88;
  sub_21FA2D120((uint64_t)&v90[*(int *)(v92 + 20)], v88, type metadata accessor for WebRequestResponseError.ErrorType);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v45 = v89;
  if (EnumCaseMultiPayload != 1)
  {
    v58 = sub_21FC5AFC8();
    v59 = sub_21FC5B97C();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v60 = 0;
      _os_log_impl(&dword_21FA27000, v58, v59, "WebRequestPerformer.catchAndRefreshToken: re-throwing error", v60, 2u);
      MEMORY[0x2207D105C](v60, -1, -1);
    }

    sub_21FA2A08C(&qword_25553E2A8, type metadata accessor for WebRequestResponseError, (uint64_t)&protocol conformance descriptor for WebRequestResponseError);
    swift_allocError();
    sub_21FA2D120(v42, v61, type metadata accessor for WebRequestResponseError);
    swift_willThrow();
    v62 = type metadata accessor for WebRequestResponseError.ErrorType;
    v63 = v43;
    return sub_21FA326EC(v63, v62);
  }
  sub_21FA2D23C(v43, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for HTTPError);
  v46 = v85;
  sub_21FA2D120((uint64_t)v15, (uint64_t)v85, (uint64_t (*)(_QWORD))type metadata accessor for HTTPError);
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    sub_21FA326EC((uint64_t)v46, (uint64_t (*)(_QWORD))type metadata accessor for HTTPError);
LABEL_16:
    v64 = sub_21FC5AFC8();
    v65 = sub_21FC5B97C();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = v15;
      v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v67 = 0;
      _os_log_impl(&dword_21FA27000, v64, v65, "WebRequestPerformer.catchAndRefreshToken: re-throwing error", v67, 2u);
      v68 = v67;
      v15 = v66;
      MEMORY[0x2207D105C](v68, -1, -1);
    }

    sub_21FA2A08C(&qword_25553E2A8, type metadata accessor for WebRequestResponseError, (uint64_t)&protocol conformance descriptor for WebRequestResponseError);
    swift_allocError();
    sub_21FA2D120(v42, v69, type metadata accessor for WebRequestResponseError);
    swift_willThrow();
    v62 = (uint64_t (*)(_QWORD))type metadata accessor for HTTPError;
    v63 = (uint64_t)v15;
    return sub_21FA326EC(v63, v62);
  }
  v47 = v46[1];
  if (!v47)
    goto LABEL_16;
  v95[0] = *v46;
  v95[1] = v47;
  v93 = 0x20726572616542;
  v94 = 0xE700000000000000;
  sub_21FACD1BC();
  v48 = v15;
  sub_21FACD200();
  v49 = sub_21FC5B5A4();
  swift_bridgeObjectRelease();
  if ((v49 & 1) == 0)
    goto LABEL_16;
  v50 = v76;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v45, v83, v76);
  v51 = sub_21FC5AFC8();
  v52 = sub_21FC5B970();
  if (os_log_type_enabled(v51, v52))
  {
    v53 = (uint8_t *)swift_slowAlloc();
    v92 = swift_slowAlloc();
    v95[0] = v92;
    *(_DWORD *)v53 = 136315138;
    v90 = v53 + 4;
    sub_21FA2A08C((unint64_t *)&qword_25553F0F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v54 = sub_21FC5BDCC();
    v93 = sub_21FABDCF8(v54, v55, v95);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v91 + 8))(v45, v50);
    _os_log_impl(&dword_21FA27000, v51, v52, "WebRequestPerformer.catchAndRefreshToken: tryCatch: 401 response, requesting new accessToken for account: %s", v53, 0xCu);
    v56 = v92;
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v56, -1, -1);
    v57 = v53;
    v15 = v48;
    MEMORY[0x2207D105C](v57, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v45, v50);
  }

  v71 = sub_21FC0B7D8(v83, v77, v79, v78);
  result = sub_21FA326EC((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for HTTPError);
  *v82 = v71;
  return result;
}

uint64_t sub_21FC0B6A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_21FC5AAF4();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FC0B748@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(sub_21FC5AAF4() - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_21FC0ADD8(a1, v2 + 32, v2 + v8, *(void **)(v2 + v9), *(_QWORD *)(v2 + ((v9 + 15) & 0xFFFFFFFFFFFFF8)), v5, v6, a2);
}

uint64_t sub_21FC0B7D8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42[2];
  uint64_t v43;

  v34 = a4;
  v38 = a3;
  v6 = sub_21FC5AAF4();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  sub_21FC0C304();
  v10 = *(_QWORD *)(v9 - 8);
  v35 = v9;
  v36 = v10;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC0C400();
  v37 = v13;
  v40 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC0C4C8();
  v39 = v16;
  v41 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v19 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v20 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v20 + v19, (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  *(_QWORD *)(v20 + ((v8 + v19 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
  v21 = MEMORY[0x24BDB9E38];
  sub_21FC0C664(0, &qword_25554D4C0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9E38]);
  swift_allocObject();
  v22 = a2;
  *(_QWORD *)&v42[0] = sub_21FC5B25C();
  sub_21FC0C6FC(&qword_25554D4C8, &qword_25554D4C0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v21, MEMORY[0x24BDB9E58]);
  v23 = sub_21FC5B280();
  swift_release();
  v43 = v23;
  v24 = v34;
  sub_21FA2CEA0(v34, (uint64_t)v42);
  v25 = swift_allocObject();
  sub_21FA3175C(v42, v25 + 16);
  v26 = MEMORY[0x24BDB9AE0];
  sub_21FC0C664(0, &qword_25554D488, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA50724(0, (unint64_t *)&qword_25553FE38);
  v27 = MEMORY[0x24BDB9AF8];
  sub_21FC0C6FC(&qword_25554D498, &qword_25554D488, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v26, MEMORY[0x24BDB9AF8]);
  sub_21FC5B2C8();
  swift_release();
  swift_release();
  sub_21FA2CEA0(v24, (uint64_t)v42);
  v28 = swift_allocObject();
  sub_21FA3175C(v42, v28 + 16);
  type metadata accessor for WebRequestResponseError(0);
  sub_21FA2A08C(&qword_25554D4A8, (uint64_t (*)(uint64_t))sub_21FC0C304, MEMORY[0x24BDB96C0]);
  sub_21FA2A08C(&qword_25553E2A8, type metadata accessor for WebRequestResponseError, (uint64_t)&protocol conformance descriptor for WebRequestResponseError);
  v29 = v35;
  sub_21FC5B358();
  swift_release();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v12, v29);
  swift_retain();
  sub_21FC5B184();
  sub_21FA30BA4(0);
  sub_21FA2A08C(&qword_25554D4B8, (uint64_t (*)(uint64_t))sub_21FC0C400, MEMORY[0x24BDB9938]);
  sub_21FA2A08C(&qword_25553E2B0, (uint64_t (*)(uint64_t))sub_21FA30BA4, v27);
  v30 = v37;
  sub_21FC5B34C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v30);
  sub_21FA2A08C(&qword_25554D4D0, (uint64_t (*)(uint64_t))sub_21FC0C4C8, MEMORY[0x24BDB98F0]);
  v31 = v39;
  v32 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v18, v31);
  return v32;
}

uint64_t sub_21FC0BC80@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint8_t *v27;
  id v28;
  uint64_t v29;
  char v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t);
  id v39;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_21FA2D1A0(0, &qword_25554D470, type metadata accessor for WebRequestResponseError.ErrorType, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v41 - v8;
  v10 = type metadata accessor for WebRequestResponseError.ErrorType(0);
  v45 = *(_QWORD *)(v10 - 8);
  v46 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_21FA2D1A0(0, &qword_25554D478, type metadata accessor for WebRequestResponseError, v6);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v41 - v14;
  v16 = *a1;
  if (qword_25406B7F8 != -1)
    swift_once();
  v17 = sub_21FC5AFD4();
  __swift_project_value_buffer(v17, (uint64_t)qword_25406D830);
  v18 = v16;
  v19 = v16;
  v20 = sub_21FC5AFC8();
  v21 = sub_21FC5B97C();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc();
    v44 = a3;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc();
    v49 = v24;
    v42 = v9;
    v43 = v12;
    *(_DWORD *)v23 = 136315138;
    swift_getErrorValue();
    v25 = sub_21FBADBB8(v48);
    v47 = sub_21FABDCF8(v25, v26, &v49);
    v9 = v42;
    v12 = v43;
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_21FA27000, v20, v21, "WebRequestPerformer.catchAndRefreshToken: final error: %s", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v24, -1, -1);
    v27 = v23;
    a3 = v44;
    MEMORY[0x2207D105C](v27, -1, -1);
  }
  else
  {

  }
  v49 = (uint64_t)v16;
  v28 = v16;
  sub_21FA50724(0, (unint64_t *)&qword_25406BB50);
  v29 = type metadata accessor for WebRequestResponseError(0);
  v30 = swift_dynamicCast();
  v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  if ((v30 & 1) != 0)
  {
    v31(v15, 0, 1, v29);
    v32 = type metadata accessor for WebRequestResponseError;
    v33 = (uint64_t)v15;
    v34 = a3;
  }
  else
  {
    v31(v15, 1, 1, v29);
    sub_21FA2D1F8((uint64_t)v15, &qword_25554D478, type metadata accessor for WebRequestResponseError);
    v49 = (uint64_t)v16;
    v35 = v16;
    v36 = v46;
    v37 = swift_dynamicCast();
    v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56);
    if ((v37 & 1) != 0)
    {
      v38(v9, 0, 1, v36);
      sub_21FA2D23C((uint64_t)v9, (uint64_t)v12, type metadata accessor for WebRequestResponseError.ErrorType);
    }
    else
    {
      v38(v9, 1, 1, v36);
      *v12 = v16;
      swift_storeEnumTagMultiPayload();
      v39 = v16;
      sub_21FA2D1F8((uint64_t)v9, &qword_25554D470, type metadata accessor for WebRequestResponseError.ErrorType);
    }
    sub_21FA2CEA0(a2, a3);
    v34 = a3 + *(int *)(v29 + 20);
    v32 = type metadata accessor for WebRequestResponseError.ErrorType;
    v33 = (uint64_t)v12;
  }
  return sub_21FA2D23C(v33, v34, v32);
}

uint64_t sub_21FC0C0A4@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21FC0BC80(a1, v2 + 16, a2);
}

void sub_21FC0C0AC(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  HealthRecordsDaemon::HTTPHeader v15;

  v4 = *a1;
  sub_21FA2CEA0(a2, a3);
  if (!(v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  if (!sub_21FC5BC7C())
    goto LABEL_11;
LABEL_3:
  if ((v4 & 0xC000000000000001) != 0)
  {
    v6 = (id)MEMORY[0x2207D057C](0, v4);
  }
  else
  {
    if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v6 = *(id *)(v4 + 32);
  }
  v7 = v6;
  swift_bridgeObjectRelease();
  HKFHIRCredential.asAuthorizationHeader()();
  v8 = v14;
  if (v14)
  {
    v9 = v13;
    __swift_mutable_project_boxed_opaque_existential_1(a3, *(_QWORD *)(a3 + 24));
    v10._countAndFlagsBits = 0x7A69726F68747541;
    v10._object = (void *)0xED00006E6F697461;
    WebRequest.removeHeader(name:)(v10);
    v11 = *(void **)(a3 + 24);
    v12 = *(_QWORD *)(a3 + 32);
    v15.value._object = (void *)__swift_mutable_project_boxed_opaque_existential_1(a3, (uint64_t)v11);
    v15.name._countAndFlagsBits = (uint64_t)&v13;
    v15.name._object = v11;
    v15.value._countAndFlagsBits = v12;
    WebRequest.add(header:)(v15);

    sub_21FACD2BC(v9, v8);
  }
  else
  {

  }
}

id sub_21FC0C244@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;

  v4 = *a1;
  sub_21FA2CEA0(a2, a3);
  *(_QWORD *)(a3 + *(int *)(type metadata accessor for WebRequestResponseError(0) + 20)) = v4;
  type metadata accessor for WebRequestResponseError.ErrorType(0);
  swift_storeEnumTagMultiPayload();
  return v4;
}

uint64_t sub_21FC0C2A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v5 = a1[3];
  v6 = a1[4];
  v7 = __swift_project_boxed_opaque_existential_1(a1, v5);
  result = sub_21FC56744((uint64_t)v7, 0, 1, 0, 1, 1, a2, v5, v6);
  *a3 = result;
  return result;
}

void sub_21FC0C304()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25554D480)
  {
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FC0C664(255, &qword_25554D488, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA50724(255, (unint64_t *)&qword_25553FE38);
    sub_21FC0C6FC(&qword_25554D498, &qword_25554D488, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    v1 = sub_21FC5B064();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25554D480);
  }
}

unint64_t sub_21FC0C3C4()
{
  unint64_t result;

  result = qword_25406CB48;
  if (!qword_25406CB48)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25406CB48);
  }
  return result;
}

void sub_21FC0C400()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D4A0)
  {
    sub_21FC0C304();
    type metadata accessor for WebRequestResponseError(255);
    sub_21FA2A08C(&qword_25554D4A8, (uint64_t (*)(uint64_t))sub_21FC0C304, MEMORY[0x24BDB96C0]);
    sub_21FA2A08C(&qword_25553E2A8, type metadata accessor for WebRequestResponseError, (uint64_t)&protocol conformance descriptor for WebRequestResponseError);
    v0 = sub_21FC5B10C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D4A0);
  }
}

void sub_21FC0C4C8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D4B0)
  {
    sub_21FA30BA4(255);
    sub_21FC0C400();
    sub_21FA2A08C(&qword_25553E2B0, (uint64_t (*)(uint64_t))sub_21FA30BA4, MEMORY[0x24BDB9AF8]);
    sub_21FA2A08C(&qword_25554D4B8, (uint64_t (*)(uint64_t))sub_21FC0C400, MEMORY[0x24BDB9938]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D4B0);
  }
}

uint64_t sub_21FC0C590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_21FC5AAF4();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void sub_21FC0C604(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(sub_21FC5AAF4() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_21FBB99B8(a1, a2, v2 + v6, *(void **)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

void sub_21FC0C664(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_21FA2D1A0(255, (unint64_t *)&qword_25554D490, (uint64_t (*)(uint64_t))sub_21FC0C3C4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v7 = v6;
    v8 = sub_21FA50724(255, (unint64_t *)&qword_25406BB50);
    v9 = a3(a1, v7, v8, MEMORY[0x24BEE3F20]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_21FC0C6FC(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FC0C664(255, a2, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_21FC0C73C(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_21FC0C0AC(a1, v2 + 16, a2);
}

uint64_t sub_21FC0C744()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

id sub_21FC0C768@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21FC0C244(a1, v2 + 16, a2);
}

uint64_t sub_21FC0C770@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FC0C2A0(a1, v2, a2);
}

_QWORD *HKClinicalGatewayFeature.webRequestsForInteraction(_:substitutions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v7 = objc_msgSend(v3, sel_interactions);
  sub_21FBA0874();
  v8 = sub_21FC5B7A8();

  swift_bridgeObjectRetain();
  v9 = sub_21FBA0BE8(v8, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v10 = sub_21FBA0A04(v9, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_21FC0C85C()
{
  void **v0;
  void **v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  char isUniquelyReferenced_nonNull_native;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  char v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  char v17;
  unint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  char v22;
  void *v23;
  void *v24;
  uint64_t v25;
  char v26;
  _OWORD v28[2];
  __int128 v29;
  unint64_t v30;
  _BYTE v31[40];

  v1 = v0;
  v2 = sub_21FA7C2D8(MEMORY[0x24BEE4AF8]);
  v3 = *v0;
  if (v3)
  {
    sub_21FC5B604();
    *((_QWORD *)&v29 + 1) = v4;
    v5 = v3;
    sub_21FC5BB38();
    v30 = sub_21FA5F68C();
    *(_QWORD *)&v29 = v5;
    sub_21FA7B73C(&v29, v28);
    v6 = v5;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_21FA789C8(v28, (uint64_t)v31, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    sub_21FA7B74C((uint64_t)v31);

  }
  v8 = v1[1];
  if (v8)
  {
    *(_QWORD *)&v29 = sub_21FC5B604();
    *((_QWORD *)&v29 + 1) = v9;
    v10 = v8;
    sub_21FC5BB38();
    v30 = sub_21FA5F68C();
    *(_QWORD *)&v29 = v10;
    sub_21FA7B73C(&v29, v28);
    v11 = v10;
    v12 = swift_isUniquelyReferenced_nonNull_native();
    sub_21FA789C8(v28, (uint64_t)v31, v12);
    swift_bridgeObjectRelease();
    sub_21FA7B74C((uint64_t)v31);

  }
  v13 = v1[2];
  if (v13)
  {
    *(_QWORD *)&v29 = sub_21FC5B604();
    *((_QWORD *)&v29 + 1) = v14;
    v15 = v13;
    sub_21FC5BB38();
    v30 = sub_21FA5F68C();
    *(_QWORD *)&v29 = v15;
    sub_21FA7B73C(&v29, v28);
    v16 = v15;
    v17 = swift_isUniquelyReferenced_nonNull_native();
    sub_21FA789C8(v28, (uint64_t)v31, v17);
    swift_bridgeObjectRelease();
    sub_21FA7B74C((uint64_t)v31);

  }
  v18 = MEMORY[0x24BEE0D00];
  v19 = v1[4];
  if (v19)
  {
    v20 = v1[3];
    *(_QWORD *)&v29 = sub_21FC5B604();
    *((_QWORD *)&v29 + 1) = v21;
    swift_bridgeObjectRetain();
    sub_21FC5BB38();
    v30 = v18;
    *(_QWORD *)&v29 = v20;
    *((_QWORD *)&v29 + 1) = v19;
    sub_21FA7B73C(&v29, v28);
    v22 = swift_isUniquelyReferenced_nonNull_native();
    sub_21FA789C8(v28, (uint64_t)v31, v22);
    swift_bridgeObjectRelease();
    sub_21FA7B74C((uint64_t)v31);
  }
  v23 = v1[6];
  if (v23)
  {
    v24 = v1[5];
    *(_QWORD *)&v29 = sub_21FC5B604();
    *((_QWORD *)&v29 + 1) = v25;
    swift_bridgeObjectRetain();
    sub_21FC5BB38();
    v30 = v18;
    *(_QWORD *)&v29 = v24;
    *((_QWORD *)&v29 + 1) = v23;
    sub_21FA7B73C(&v29, v28);
    v26 = swift_isUniquelyReferenced_nonNull_native();
    sub_21FA789C8(v28, (uint64_t)v31, v26);
    swift_bridgeObjectRelease();
    sub_21FA7B74C((uint64_t)v31);
  }
  return v2;
}

uint64_t sub_21FC0CB90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  char v37[8];
  _QWORD *v38;

  v2 = (__int128 *)v1;
  v4 = sub_21FC5AD58();
  MEMORY[0x24BDAC7A8](v4);
  sub_21FC0D454(v1 + 32, (uint64_t)v37);
  sub_21FC0D454((uint64_t)v37, (uint64_t)&v38);
  v5 = v38;
  if (v38)
  {
    v6 = v38[2];
    if (v6)
    {
      v7 = v38[7];
      if (v38[4] == 0xD000000000000016 && v38[5] == 0x800000021FC75F20 || (sub_21FC5BDF0() & 1) != 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_20:
        swift_bridgeObjectRelease();
        if (v7)
        {
          sub_21FC5A9A4();
          v22 = v21;
          swift_bridgeObjectRelease();
          if (v22 >> 60 != 15)
          {
            v34 = type metadata accessor for PBLookupInfo(0);
            sub_21FC5AD4C();
            sub_21FC0D624();
            sub_21FC5AE84();
            v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56);
            v31 = a1;
            v32 = 0;
            v29 = v34;
            return v30(v31, v32, 1, v29);
          }
        }
        if (qword_25406B7F8 == -1)
        {
LABEL_23:
          v23 = sub_21FC5AFD4();
          __swift_project_value_buffer(v23, (uint64_t)qword_25406D830);
          sub_21FC0D540(v1);
          sub_21FC0D540(v1);
          v13 = sub_21FC5AFC8();
          v24 = sub_21FC5B97C();
          if (os_log_type_enabled(v13, v24))
          {
            v15 = (uint8_t *)swift_slowAlloc();
            v16 = swift_slowAlloc();
            v35 = v16;
            *(_DWORD *)v15 = 136315138;
            v36 = *v2;
            swift_bridgeObjectRetain_n();
            sub_21FC5BE08();
            v25 = (id)HKSensitiveLogItem();
            swift_unknownObjectRelease();
            sub_21FC5BAF0();
            swift_unknownObjectRelease();
            v26 = sub_21FC5B64C();
            v28 = v27;
            sub_21FC0D5FC((uint64_t)&v36);
            sub_21FABDCF8(v26, v28, &v35);
            sub_21FC5BAC0();
            swift_bridgeObjectRelease();
            sub_21FC0D59C((uint64_t)v2);
            sub_21FC0D59C((uint64_t)v2);
            _os_log_impl(&dword_21FA27000, v13, v24, "Could not get data bytes of PBLookupInfo from docRef. ID: %s.", v15, 0xCu);
            goto LABEL_25;
          }
LABEL_26:
          sub_21FC0D59C((uint64_t)v2);
          sub_21FC0D59C((uint64_t)v2);
          goto LABEL_27;
        }
LABEL_31:
        swift_once();
        goto LABEL_23;
      }
      if (v6 != 1)
      {
        v8 = v5 + 11;
        v9 = 1;
        while (1)
        {
          v10 = a1;
          a1 = v9 + 1;
          if (__OFADD__(v9, 1))
            break;
          v7 = *v8;
          if (*(v8 - 3) == 0xD000000000000016 && *(v8 - 2) == 0x800000021FC75F20 || (sub_21FC5BDF0() & 1) != 0)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            a1 = v10;
            goto LABEL_20;
          }
          v8 += 4;
          ++v9;
          v11 = a1 == v6;
          a1 = v10;
          if (v11)
            goto LABEL_15;
        }
        __break(1u);
        goto LABEL_31;
      }
    }
  }
LABEL_15:
  if (qword_25406B7F8 != -1)
    swift_once();
  v12 = sub_21FC5AFD4();
  __swift_project_value_buffer(v12, (uint64_t)qword_25406D830);
  sub_21FC0D540(v1);
  sub_21FC0D540(v1);
  v13 = sub_21FC5AFC8();
  v14 = sub_21FC5B970();
  if (!os_log_type_enabled(v13, v14))
    goto LABEL_26;
  v15 = (uint8_t *)swift_slowAlloc();
  v16 = swift_slowAlloc();
  v35 = v16;
  *(_DWORD *)v15 = 136315138;
  v36 = *v2;
  swift_bridgeObjectRetain_n();
  sub_21FC5BE08();
  v17 = (id)HKSensitiveLogItem();
  swift_unknownObjectRelease();
  sub_21FC5BAF0();
  swift_unknownObjectRelease();
  v18 = sub_21FC5B64C();
  v20 = v19;
  sub_21FC0D5FC((uint64_t)&v36);
  sub_21FABDCF8(v18, v20, &v35);
  sub_21FC5BAC0();
  swift_bridgeObjectRelease();
  sub_21FC0D59C((uint64_t)v2);
  sub_21FC0D59C((uint64_t)v2);
  _os_log_impl(&dword_21FA27000, v13, v14, "No attachment with contentType of application/x-protobuf found for docRef. ID: %s", v15, 0xCu);
LABEL_25:
  swift_arrayDestroy();
  MEMORY[0x2207D105C](v16, -1, -1);
  MEMORY[0x2207D105C](v15, -1, -1);
LABEL_27:

  v29 = type metadata accessor for PBLookupInfo(0);
  v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v31 = a1;
  v32 = 1;
  return v30(v31, v32, 1, v29);
}

uint64_t sub_21FC0D454(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FC0D498();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_21FC0D498()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D4D8)
  {
    sub_21FC0D4EC();
    v0 = sub_21FC5BAA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D4D8);
  }
}

void sub_21FC0D4EC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D4E0)
  {
    v0 = sub_21FC5B7F0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D4E0);
  }
}

uint64_t sub_21FC0D540(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_21FADBC44(v2, v3);
  return a1;
}

uint64_t sub_21FC0D59C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21FADBC58(v2, v3);
  return a1;
}

uint64_t sub_21FC0D5FC(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_21FC0D624()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25553F710;
  if (!qword_25553F710)
  {
    v1 = type metadata accessor for PBLookupInfo(255);
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBLookupInfo, v1);
    atomic_store(result, (unint64_t *)&qword_25553F710);
  }
  return result;
}

uint64_t sub_21FC0D66C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = type metadata accessor for PBNode(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PBBlob(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BEE4AF8];
  *a2 = MEMORY[0x24BEE4AF8];
  type metadata accessor for PBBlobs(0);
  sub_21FC5AD10();
  v14 = a1;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v23 = a2;
    v26 = v13;
    v16 = v14;
    sub_21FC01C80(0, v15, 0);
    v17 = *(unsigned __int8 *)(v6 + 80);
    v22 = v16;
    v18 = v16 + ((v17 + 32) & ~v17);
    v24 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      sub_21FC0DC54(v18, (uint64_t)v8);
      sub_21FC0D8A4(&v25, (uint64_t)v12);
      sub_21FA326EC((uint64_t)v8, type metadata accessor for PBNode);
      if (v2)
        break;
      v13 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21FC01C80(0, *(_QWORD *)(v13 + 16) + 1, 1);
        v13 = v26;
      }
      v20 = *(_QWORD *)(v13 + 16);
      v19 = *(_QWORD *)(v13 + 24);
      if (v20 >= v19 >> 1)
      {
        sub_21FC01C80(v19 > 1, v20 + 1, 1);
        v13 = v26;
      }
      *(_QWORD *)(v13 + 16) = v20 + 1;
      sub_21FC0DC98((uint64_t)v12, v13+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v20);
      v18 += v24;
      if (!--v15)
      {
        swift_bridgeObjectRelease();
        a2 = v23;
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    return sub_21FA326EC((uint64_t)v23, type metadata accessor for PBBlobs);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_12:
    result = swift_bridgeObjectRelease();
    *a2 = v13;
  }
  return result;
}

uint64_t sub_21FC0D8A4@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;

  sub_21FC5AD10();
  v4 = *(int *)(type metadata accessor for PBBlob(0) + 20);
  if (qword_25553D698 != -1)
    swift_once();
  v5 = v4;
  *(_QWORD *)(a2 + v4) = qword_255541E30;
  type metadata accessor for PBNode(0);
  sub_21FC0DCDC();
  swift_retain();
  v6 = sub_21FC5AE90();
  if (v2)
  {
    result = sub_21FA326EC(a2, type metadata accessor for PBBlob);
    *a1 = v2;
  }
  else
  {
    v8 = v6;
    v9 = v7;
    sub_21FAC8778(v6, v7);
    v11 = v10;
    v13 = v12;
    sub_21FA2D770(v8, v9);
    v14 = v5;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBBlob._StorageClass(0);
      swift_allocObject();
      v15 = (_QWORD *)swift_retain();
      *(_QWORD *)(a2 + v5) = sub_21FAFE3C8(v15);
      swift_release();
    }
    v16 = *(_QWORD *)(a2 + v5);
    swift_beginAccess();
    *(_QWORD *)(v16 + 16) = v11;
    *(_QWORD *)(v16 + 24) = v13;
    swift_bridgeObjectRelease();
    v17 = sub_21FC5AE90();
    v19 = v18;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBBlob._StorageClass(0);
      swift_allocObject();
      v20 = (_QWORD *)swift_retain();
      *(_QWORD *)(a2 + v14) = sub_21FAFE3C8(v20);
      swift_release();
    }
    v21 = *(_QWORD *)(a2 + v14);
    swift_beginAccess();
    v22 = *(_QWORD *)(v21 + 32);
    v23 = *(_QWORD *)(v21 + 40);
    *(_QWORD *)(v21 + 32) = v17;
    *(_QWORD *)(v21 + 40) = v19;
    return sub_21FA2D770(v22, v23);
  }
  return result;
}

uint64_t sub_21FC0DC54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PBNode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FC0DC98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PBBlob(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_21FC0DCDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25554ABE0;
  if (!qword_25554ABE0)
  {
    v1 = type metadata accessor for PBNode(255);
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBNode, v1);
    atomic_store(result, (unint64_t *)&qword_25554ABE0);
  }
  return result;
}

uint64_t sub_21FC0DD24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  void (*v26)(char *, char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v5 = v4;
  v47 = a1;
  v44 = a4;
  sub_21FA2ED54(0, &qword_25554D4E8, (void (*)(uint64_t))MEMORY[0x24BDCBB78]);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v45 = (char *)&v42 - v10;
  v11 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2ED54(0, (unint64_t *)&qword_25406AAC8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v42 - v18;
  v20 = sub_21FC5A98C();
  v21 = *(char **)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v46 = (char *)&v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FBC3310(v47, (uint64_t)v17);
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v47 = v5;
  v23(v13, v5, a2);
  v24 = (uint64_t (*)(char *, uint64_t, uint64_t))*((_QWORD *)v21 + 6);
  v25 = v24(v17, 1, v20);
  v43 = a3;
  if (v25 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a2);
    sub_21FA2EDA0((uint64_t)v17, (unint64_t *)&qword_25406AAC8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    if (v24(v19, 1, v20) != 1)
    {
      v26 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v21 + 4);
      goto LABEL_6;
    }
LABEL_5:
    sub_21FA2EDA0((uint64_t)v19, (unint64_t *)&qword_25406AAC8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    type metadata accessor for WebRequestError();
    sub_21FAA5204();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a2);
  v26 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v21 + 4);
  v26(v19, v17, v20);
  (*((void (**)(char *, _QWORD, uint64_t, uint64_t))v21 + 7))(v19, 0, 1, v20);
  if (v24(v19, 1, v20) == 1)
    goto LABEL_5;
LABEL_6:
  v28 = v46;
  v26(v46, v19, v20);
  v29 = (uint64_t)v45;
  sub_21FC5A6F8();
  v30 = sub_21FC5A740();
  v31 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
  {
    sub_21FA2EDA0(v29, &qword_25554D4E8, (void (*)(uint64_t))MEMORY[0x24BDCBB78]);
    type metadata accessor for WebRequestError();
    sub_21FAA5204();
    swift_allocError();
    (*((void (**)(uint64_t, char *, uint64_t))v21 + 2))(v32, v28, v20);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return (*((uint64_t (**)(char *, uint64_t))v21 + 1))(v28, v20);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v44, v29, v30);
  v33 = a2;
  v34 = v43;
  v35 = *(uint64_t (**)(uint64_t, uint64_t))(v43 + 48);
  v36 = *(_QWORD *)(v35(v33, v43) + 16);
  swift_bridgeObjectRelease();
  if (v36)
  {
    v48 = sub_21FC5A710();
    v49 = v37;
    sub_21FC5B6AC();
    v50 = v35(v33, v34);
    sub_21FA80754(0, (unint64_t *)&qword_25406BA60, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FA80314();
    sub_21FC5B5B0();
    v45 = v21;
    swift_bridgeObjectRelease();
    sub_21FC5B6AC();
    v21 = v45;
    swift_bridgeObjectRelease();
    sub_21FC5A71C();
  }
  v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 56))(v33, v34);
  if (v38)
  {
    if (*(_QWORD *)(v38 + 16))
      sub_21FC5A6EC();
    else
      swift_bridgeObjectRelease();
  }
  v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 64))(v33, v34);
  if (!v40)
    return (*((uint64_t (**)(char *, uint64_t))v21 + 1))(v28, v20);
  v41 = HIBYTE(v40) & 0xF;
  if ((v40 & 0x2000000000000000) == 0)
    v41 = v39 & 0xFFFFFFFFFFFFLL;
  if (v41)
  {
    sub_21FC5A734();
    return (*((uint64_t (**)(char *, uint64_t))v21 + 1))(v28, v20);
  }
  (*((void (**)(char *, uint64_t))v21 + 1))(v28, v20);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall FHIRServerRequest.add(header:)(HealthRecordsDaemon::HTTPHeader header)
{
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD **v8;
  void (*v9)(_BYTE *, _QWORD);
  _QWORD *v10;
  _QWORD *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void (*v17)(uint64_t, void *, uint64_t);
  _BYTE v18[32];

  countAndFlagsBits = header.value._countAndFlagsBits;
  object = header.name._object;
  v4 = *(_QWORD *)header.name._countAndFlagsBits;
  v3 = *(_QWORD *)(header.name._countAndFlagsBits + 8);
  v6 = *(_QWORD *)(header.name._countAndFlagsBits + 16);
  v5 = *(_QWORD *)(header.name._countAndFlagsBits + 24);
  v7 = (*(uint64_t (**)(void *, uint64_t))(header.value._countAndFlagsBits + 16))(header.name._object, header.value._countAndFlagsBits);
  swift_bridgeObjectRelease();
  if (v7)
  {
    v9 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, void *, uint64_t))(countAndFlagsBits + 32))(v18, object, countAndFlagsBits);
    v10 = *v8;
    if (*v8)
    {
      v11 = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v11 = v10;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v10 = sub_21FA7E100(0, v10[2] + 1, 1, v10);
        *v11 = v10;
      }
      v14 = v10[2];
      v13 = v10[3];
      if (v14 >= v13 >> 1)
      {
        v10 = sub_21FA7E100((_QWORD *)(v13 > 1), v14 + 1, 1, v10);
        *v11 = v10;
      }
      v10[2] = v14 + 1;
      v15 = &v10[4 * v14];
      v15[4] = v4;
      v15[5] = v3;
      v15[6] = v6;
      v15[7] = v5;
    }
    v9(v18, 0);
  }
  else
  {
    sub_21FA80754(0, (unint64_t *)&qword_25553FE48, (uint64_t)&type metadata for HTTPHeader, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_21FC5EE30;
    *(_QWORD *)(v16 + 32) = v4;
    *(_QWORD *)(v16 + 40) = v3;
    *(_QWORD *)(v16 + 48) = v6;
    *(_QWORD *)(v16 + 56) = v5;
    v17 = *(void (**)(uint64_t, void *, uint64_t))(countAndFlagsBits + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17(v16, object, countAndFlagsBits);
  }
}

uint64_t FHIRServerRequest.asWebRequest(against:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *boxed_opaque_existential_1;
  char *v51;
  char *v52;
  uint64_t *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v5 = v4;
  v59 = a3;
  v60 = a1;
  v53 = a4;
  v7 = sub_21FC5A98C();
  v8 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
  v9 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v51 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v52 = (char *)&v51 - v12;
  v13 = sub_21FC5A740();
  v55 = *(_QWORD *)(v13 - 8);
  v56 = v13;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v58 = (uint64_t)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2ED54(0, (unint64_t *)&qword_25406AAC8, v8);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v54 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v51 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v51 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v51 - v28;
  sub_21FBC3310(v60, (uint64_t)v27);
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v60 = v5;
  v30(v18, v5, a2);
  v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v31(v27, 1, v7) == 1)
  {
    (*(void (**)(uint64_t))(v59 + 40))(a2);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, a2);
    sub_21FA2EDA0((uint64_t)v27, (unint64_t *)&qword_25406AAC8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    if (v31(v29, 1, v7) != 1)
    {
      v32 = v7;
      v33 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v33(v24, v29, v7);
      goto LABEL_7;
    }
LABEL_5:
    sub_21FA2EDA0((uint64_t)v29, (unint64_t *)&qword_25406AAC8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    type metadata accessor for WebRequestError();
    sub_21FAA5204();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, a2);
  v33 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v33(v29, v27, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v29, 0, 1, v7);
  v32 = v7;
  if (v31(v29, 1, v7) == 1)
    goto LABEL_5;
  v33(v24, v29, v7);
LABEL_7:
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v24, 0, 1, v32);
  v35 = v59;
  v36 = v57;
  sub_21FC0DD24((uint64_t)v24, a2, v59, v58);
  result = sub_21FA2EDA0((uint64_t)v24, (unint64_t *)&qword_25406AAC8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  if (!v36)
  {
    v37 = (uint64_t)v54;
    sub_21FC5A704();
    if (v31((char *)v37, 1, v32) == 1)
    {
      sub_21FA2EDA0(v37, (unint64_t *)&qword_25406AAC8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      type metadata accessor for WebRequestError();
      sub_21FAA5204();
      swift_allocError();
      v39 = v55;
      v38 = v56;
      v40 = v58;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v41, v58, v56);
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v40, v38);
    }
    else
    {
      v42 = v37;
      v43 = v52;
      v33(v52, (char *)v42, v32);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v35 + 8))(&v61, a2, v35);
      v44 = (uint64_t)v51;
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v51, v43, v32);
      v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 72))(a2, v35);
      v46 = v45;
      v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 16))(a2, v35);
      v48 = type metadata accessor for FHIRServerWebRequest();
      v49 = v53;
      v53[3] = v48;
      v49[4] = (uint64_t)&protocol witness table for FHIRServerWebRequest;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v49);
      FHIRServerWebRequest.init(method:url:body:headers:)((unsigned __int8 *)&v61, v44, v57, v46, v47, (uint64_t)boxed_opaque_existential_1);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v43, v32);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 8))(v58, v56);
    }
  }
  return result;
}

uint64_t dispatch thunk of FHIRServerRequest.method.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of FHIRServerRequest.headers.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of FHIRServerRequest.headers.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of FHIRServerRequest.headers.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of FHIRServerRequest.baseURL.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of FHIRServerRequest.pathComponents.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of FHIRServerRequest.queryItems.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of FHIRServerRequest.fragment.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of FHIRServerRequest.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of FHIRServerRequest.title.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t sub_21FC0E944@<X0>(void **a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  id v67;
  void *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  id v72;
  char *v73;
  id v74;
  void *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t v83;
  unsigned __int8 *v84;
  unsigned __int8 v85;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 *v90;
  id v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  id v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  id v105;
  void *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  id v112;
  uint64_t v113;
  void *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  id v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t *v147;
  uint64_t v149;
  void (*v150)(char *, uint64_t);
  char *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  id v163;
  char v164[8];
  char v165[16];

  v154 = a3;
  v155 = a4;
  sub_21FAA42AC(0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v156 = (uint64_t)&v149 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v162 = (uint64_t)&v149 - v9;
  v10 = type metadata accessor for PBHKConcept(0);
  v160 = *(_QWORD *)(v10 - 8);
  v161 = v10;
  v11 = MEMORY[0x24BDAC7A8](v10);
  v158 = (uint64_t)&v149 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v159 = (char *)&v149 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v152 = (uint64_t)&v149 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v149 = (uint64_t)&v149 - v17;
  v18 = sub_21FC5AAAC();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v149 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for PBHKVaccinationRecord(0);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v153 = (uint64_t)&v149 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v149 - v25;
  v27 = *a1;
  sub_21FC5AD10();
  v28 = *(int *)(v22 + 20);
  if (qword_25553D920 != -1)
    swift_once();
  *(_QWORD *)&v26[v28] = qword_255543BA8;
  swift_retain();
  v163 = v27;
  v29 = objc_msgSend(v27, sel_administrationDate);
  v157 = a2;
  v30 = *a2;
  v31 = (void *)sub_21FC5AB6C();
  v32 = objc_msgSend(v29, sel_adjustedDateForCalendar_, v31);

  sub_21FC5AA94();
  v33 = *(id *)(v30 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_isoDateFormatter);
  v34 = (void *)sub_21FC5AA64();
  v35 = objc_msgSend(v33, sel_stringFromDate_, v34);

  v36 = sub_21FC5B604();
  v38 = v37;

  v150 = *(void (**)(char *, uint64_t))(v19 + 8);
  v151 = v21;
  v150(v21, v18);
  v39 = v18;
  v40 = v18;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKVaccinationRecord._StorageClass(0);
    swift_allocObject();
    v41 = swift_retain();
    v39 = v18;
    *(_QWORD *)&v26[v28] = sub_21FB5E6DC(v41);
    swift_release();
  }
  v42 = *(_QWORD *)&v26[v28];
  swift_beginAccess();
  *(_QWORD *)(v42 + 16) = v36;
  *(_QWORD *)(v42 + 24) = v38;
  swift_bridgeObjectRelease();
  v43 = objc_msgSend(v163, sel_bodySite);
  v44 = v157;
  if (v43)
  {
    v45 = v43;
    v46 = v149;
    sub_21FAA1BD0(v43, 1, v149);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKVaccinationRecord._StorageClass(0);
      swift_allocObject();
      v47 = swift_retain();
      *(_QWORD *)&v26[v28] = sub_21FB5E6DC(v47);
      swift_release();
    }
    v48 = *(_QWORD *)&v26[v28];
    v49 = v162;
    sub_21FA2D23C(v46, v162, type metadata accessor for PBHKConcept);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v160 + 56))(v49, 0, 1, v161);
    v50 = v156;
    sub_21FA2D23C(v49, v156, (uint64_t (*)(_QWORD))sub_21FAA42AC);
    v51 = v48
        + OBJC_IVAR____TtCV19HealthRecordsDaemon21PBHKVaccinationRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__bodySite;
    swift_beginAccess();
    swift_retain();
    sub_21FC0F91C(v50, v51);
    swift_endAccess();

    swift_release();
    v39 = v40;
  }
  v52 = v163;
  v53 = objc_msgSend(v163, sel_doseNumber);
  if (v53)
  {
    v54 = v53;
    v55 = sub_21FC5B604();
    v57 = v56;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKVaccinationRecord._StorageClass(0);
      swift_allocObject();
      v58 = swift_retain();
      v39 = v40;
      *(_QWORD *)&v26[v28] = sub_21FB5E6DC(v58);
      swift_release();
    }
    v59 = (uint64_t *)(*(_QWORD *)&v26[v28]
                    + OBJC_IVAR____TtCV19HealthRecordsDaemon21PBHKVaccinationRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__doseNumber);
    swift_beginAccess();
    *v59 = v55;
    v59[1] = v57;
    swift_bridgeObjectRelease();
    v52 = v163;
  }
  v60 = objc_msgSend(v52, sel_doseQuantity);
  if (v60)
  {
    v61 = v60;
    v62 = sub_21FC5B604();
    v64 = v63;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKVaccinationRecord._StorageClass(0);
      swift_allocObject();
      v65 = swift_retain();
      v39 = v40;
      *(_QWORD *)&v26[v28] = sub_21FB5E6DC(v65);
      swift_release();
    }
    v66 = (uint64_t *)(*(_QWORD *)&v26[v28]
                    + OBJC_IVAR____TtCV19HealthRecordsDaemon21PBHKVaccinationRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__doseQuantity);
    swift_beginAccess();
    *v66 = v62;
    v66[1] = v64;
    swift_bridgeObjectRelease();
    v52 = v163;
  }
  v67 = objc_msgSend(v52, sel_expirationDate);
  if (v67)
  {
    v68 = v67;
    v69 = *v44;
    v70 = (void *)sub_21FC5AB6C();
    v71 = v39;
    v72 = objc_msgSend(v68, sel_adjustedDateForCalendar_, v70);

    v73 = v151;
    sub_21FC5AA94();

    v74 = *(id *)(v69 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_isoDateFormatter);
    v75 = (void *)sub_21FC5AA64();
    v76 = objc_msgSend(v74, sel_stringFromDate_, v75);

    v77 = sub_21FC5B604();
    v149 = v78;

    v150(v73, v71);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKVaccinationRecord._StorageClass(0);
      swift_allocObject();
      v79 = swift_retain();
      *(_QWORD *)&v26[v28] = sub_21FB5E6DC(v79);
      swift_release();
    }
    v80 = (uint64_t *)(*(_QWORD *)&v26[v28]
                    + OBJC_IVAR____TtCV19HealthRecordsDaemon21PBHKVaccinationRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__expirationDate);
    swift_beginAccess();
    v81 = v149;
    *v80 = v77;
    v80[1] = v81;

    swift_bridgeObjectRelease();
    v44 = v157;
    v52 = v163;
  }
  v82 = objc_msgSend(v52, sel_notGiven);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKVaccinationRecord._StorageClass(0);
    swift_allocObject();
    v83 = swift_retain();
    *(_QWORD *)&v26[v28] = sub_21FB5E6DC(v83);
    swift_release();
  }
  v84 = (unsigned __int8 *)(*(_QWORD *)&v26[v28]
                          + OBJC_IVAR____TtCV19HealthRecordsDaemon21PBHKVaccinationRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__notGiven);
  swift_beginAccess();
  *v84 = v82;
  v85 = objc_msgSend(v52, sel_patientReported);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v87 = v155;
  v88 = v156;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    type metadata accessor for PBHKVaccinationRecord._StorageClass(0);
    swift_allocObject();
    v89 = swift_retain();
    *(_QWORD *)&v26[v28] = sub_21FB5E6DC(v89);
    swift_release();
  }
  v90 = (unsigned __int8 *)(*(_QWORD *)&v26[v28]
                          + OBJC_IVAR____TtCV19HealthRecordsDaemon21PBHKVaccinationRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__patientReported);
  swift_beginAccess();
  *v90 = v85;
  v91 = objc_msgSend(v52, sel_performer);
  if (v91)
  {
    v92 = v91;
    v93 = sub_21FC5B604();
    v95 = v94;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKVaccinationRecord._StorageClass(0);
      swift_allocObject();
      v96 = swift_retain();
      v52 = v163;
      *(_QWORD *)&v26[v28] = sub_21FB5E6DC(v96);
      swift_release();
    }
    v97 = (uint64_t *)(*(_QWORD *)&v26[v28]
                    + OBJC_IVAR____TtCV19HealthRecordsDaemon21PBHKVaccinationRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__performer);
    swift_beginAccess();
    *v97 = v93;
    v97[1] = v95;
    swift_bridgeObjectRelease();
  }
  v98 = objc_msgSend(v52, sel_reaction);
  if (v98)
  {
    v99 = v98;
    v100 = sub_21FC5B604();
    v102 = v101;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKVaccinationRecord._StorageClass(0);
      swift_allocObject();
      v103 = swift_retain();
      v52 = v163;
      *(_QWORD *)&v26[v28] = sub_21FB5E6DC(v103);
      swift_release();
    }
    v104 = (uint64_t *)(*(_QWORD *)&v26[v28]
                     + OBJC_IVAR____TtCV19HealthRecordsDaemon21PBHKVaccinationRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__reaction);
    swift_beginAccess();
    *v104 = v100;
    v104[1] = v102;
    swift_bridgeObjectRelease();
  }
  v105 = objc_msgSend(v52, sel_reasons);
  if (v105)
  {
    v106 = v105;
    sub_21FBA65D0();
    v107 = sub_21FC5B7A8();

    MEMORY[0x24BDAC7A8](v108);
    *(&v149 - 2) = (uint64_t)v44;
    v109 = sub_21FC41DA0((void (*)(id *))sub_21FAE609C, (uint64_t)(&v149 - 4), v107, (uint64_t)v164);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKVaccinationRecord._StorageClass(0);
      swift_allocObject();
      v110 = swift_retain();
      *(_QWORD *)&v26[v28] = sub_21FB5E6DC(v110);
      swift_release();
    }
    v111 = (uint64_t *)(*(_QWORD *)&v26[v28]
                     + OBJC_IVAR____TtCV19HealthRecordsDaemon21PBHKVaccinationRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__reasons);
    swift_beginAccess();
    *v111 = v109;
    swift_bridgeObjectRelease();
    v52 = v163;
  }
  v112 = objc_msgSend(v52, sel_reasonsNotGiven);
  v113 = (uint64_t)v159;
  if (v112)
  {
    v114 = v112;
    sub_21FBA65D0();
    v115 = sub_21FC5B7A8();

    MEMORY[0x24BDAC7A8](v116);
    *(&v149 - 2) = (uint64_t)v44;
    v117 = sub_21FC41DA0((void (*)(id *))sub_21FAC44A0, (uint64_t)(&v149 - 4), v115, (uint64_t)v165);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKVaccinationRecord._StorageClass(0);
      swift_allocObject();
      v118 = swift_retain();
      *(_QWORD *)&v26[v28] = sub_21FB5E6DC(v118);
      swift_release();
    }
    v119 = (uint64_t *)(*(_QWORD *)&v26[v28]
                     + OBJC_IVAR____TtCV19HealthRecordsDaemon21PBHKVaccinationRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__reasonsNotGiven);
    swift_beginAccess();
    *v119 = v117;
    swift_bridgeObjectRelease();
    v113 = (uint64_t)v159;
  }
  v120 = objc_msgSend(v52, sel_route);
  if (v120)
  {
    v121 = v120;
    v122 = v152;
    sub_21FAA1BD0(v120, 1, v152);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKVaccinationRecord._StorageClass(0);
      swift_allocObject();
      v123 = swift_retain();
      v122 = v152;
      *(_QWORD *)&v26[v28] = sub_21FB5E6DC(v123);
      swift_release();
    }
    v124 = *(_QWORD *)&v26[v28];
    v125 = v122;
    v126 = v162;
    sub_21FA2D23C(v125, v162, type metadata accessor for PBHKConcept);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v160 + 56))(v126, 0, 1, v161);
    sub_21FA2D23C(v126, v88, (uint64_t (*)(_QWORD))sub_21FAA42AC);
    v127 = v124
         + OBJC_IVAR____TtCV19HealthRecordsDaemon21PBHKVaccinationRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__route;
    swift_beginAccess();
    swift_retain();
    sub_21FC0F91C(v88, v127);
    swift_endAccess();

    swift_release();
    v113 = (uint64_t)v159;
  }
  v128 = objc_msgSend(v52, sel_status);
  if (v128)
  {
    v129 = v128;
    sub_21FAA1BD0(v128, 1, v113);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKVaccinationRecord._StorageClass(0);
      swift_allocObject();
      v130 = swift_retain();
      v113 = (uint64_t)v159;
      *(_QWORD *)&v26[v28] = sub_21FB5E6DC(v130);
      swift_release();
    }
    v131 = *(_QWORD *)&v26[v28];
    v132 = v113;
    v133 = v162;
    sub_21FA2D23C(v132, v162, type metadata accessor for PBHKConcept);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v160 + 56))(v133, 0, 1, v161);
    sub_21FA2D23C(v133, v88, (uint64_t (*)(_QWORD))sub_21FAA42AC);
    v134 = v131
         + OBJC_IVAR____TtCV19HealthRecordsDaemon21PBHKVaccinationRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__status;
    swift_beginAccess();
    swift_retain();
    sub_21FC0F91C(v88, v134);
    swift_endAccess();

    swift_release();
  }
  v135 = objc_msgSend(v52, sel_vaccination);
  sub_21FAA1BD0(v135, 1, v158);

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKVaccinationRecord._StorageClass(0);
    swift_allocObject();
    v136 = swift_retain();
    *(_QWORD *)&v26[v28] = sub_21FB5E6DC(v136);
    swift_release();
  }
  v137 = *(_QWORD *)&v26[v28];
  v138 = v162;
  sub_21FA2D23C(v158, v162, type metadata accessor for PBHKConcept);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v160 + 56))(v138, 0, 1, v161);
  sub_21FA2D23C(v138, v88, (uint64_t (*)(_QWORD))sub_21FAA42AC);
  v139 = v137
       + OBJC_IVAR____TtCV19HealthRecordsDaemon21PBHKVaccinationRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__vaccination;
  swift_beginAccess();
  swift_retain();
  sub_21FC0F91C(v88, v139);
  swift_endAccess();
  swift_release();
  sub_21FAA23C8(v52, v154, v87);
  v140 = v153;
  sub_21FC0F960((uint64_t)v26, v153);
  PBClinicalRecord.vaccinationRecord.setter(v140);
  v141 = sub_21FC57788();
  v143 = v142;
  v144 = *(int *)(type metadata accessor for PBClinicalRecord(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBClinicalRecord._StorageClass(0);
    swift_allocObject();
    v145 = (_QWORD *)swift_retain();
    v146 = sub_21FB8E53C(v145);
    swift_release();
    *(_QWORD *)(v87 + v144) = v146;
    swift_release();
  }
  v147 = (uint64_t *)(*(_QWORD *)(v87 + v144)
                   + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBClinicalRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__iosDerivedDisplayName);
  swift_beginAccess();
  *v147 = v141;
  v147[1] = v143;
  swift_bridgeObjectRelease();
  return sub_21FC0F9A4((uint64_t)v26);
}

uint64_t sub_21FC0F91C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FAA42AC(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FC0F960(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PBHKVaccinationRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FC0F9A4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PBHKVaccinationRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t WellKnownJWKSHandler.init(performer:signedClinicalDataStore:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;

  sub_21FBBBA2C();
  result = sub_21FC5B64C();
  *a3 = a1;
  a3[1] = a2;
  a3[2] = result;
  a3[3] = v7;
  return result;
}

uint64_t WellKnownJWKSHandler.extractAndLoadJWKS(from:)(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  unint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  char *v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  id v45;
  uint64_t (*v46)(void);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  sub_21FC10100();
  v4 = v3;
  v64 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v63 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC101BC(0);
  v69 = v6;
  v67 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v65 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC151EC(0, &qword_25554D518, v8, (void (*)(void))sub_21FC101FC);
  v70 = v9;
  v68 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v66 = (char *)&v57 - v10;
  sub_21FC10218();
  v74 = v11;
  v72 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v71 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC102C0();
  v14 = v13;
  v75 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v73 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC10364();
  v17 = v16;
  v18 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC103C8();
  v22 = v21;
  v76 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *v1;
  v26 = (void *)v1[1];
  v59 = v1[2];
  v60 = v26;
  v61 = v1[3];
  v62 = v25;
  if ((objc_msgSend(a1, sel_options) & 1) != 0)
    goto LABEL_6;
  v58 = v4;
  v27 = v14;
  v28 = objc_msgSend(a1, sel_contextItems);
  sub_21FA5BE58(0, &qword_25554D568);
  v29 = sub_21FC5B7A8();

  if (v29 >> 62)
  {
    swift_bridgeObjectRetain();
    v30 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  v31 = v27;
  v32 = v58;
  if (!v30)
  {
LABEL_6:
    v77 = (uint64_t)a1;
    sub_21FA5BE58(0, &qword_25554B200);
    v55 = a1;
    sub_21FC5B22C();
    sub_21FA50724(0, (unint64_t *)&qword_25406BB50);
    sub_21FC5B208();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    sub_21FA2A08C(&qword_25554D578, (uint64_t (*)(uint64_t))sub_21FC103C8, MEMORY[0x24BDBA1D0]);
    v54 = sub_21FC5B280();
    (*(void (**)(char *, uint64_t))(v76 + 8))(v24, v22);
  }
  else
  {
    v76 = v31;
    v33 = objc_msgSend(a1, sel_contextItems);
    v34 = sub_21FC5B7A8();

    v35 = a1;
    v36 = sub_21FC14534(v34, v35);
    swift_bridgeObjectRelease();

    v77 = v36;
    v37 = MEMORY[0x24BEE1250];
    sub_21FA80754(0, &qword_25554D4F8, (uint64_t)&type metadata for WellKnownJWKSProcessingContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FC151A0(&qword_25554D500, &qword_25554D4F8, (uint64_t (*)(_QWORD, uint64_t))v37, MEMORY[0x24BEE12C8]);
    v38 = v63;
    sub_21FC5B748();
    swift_bridgeObjectRelease();
    sub_21FC101E0();
    v39 = v65;
    sub_21FC5B31C();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v38, v32);
    v40 = (_QWORD *)swift_allocObject();
    v41 = v61;
    v42 = v59;
    v43 = v60;
    v40[2] = v62;
    v40[3] = v43;
    v40[4] = v42;
    v40[5] = v41;
    v44 = swift_allocObject();
    *(_QWORD *)(v44 + 16) = sub_21FC146B0;
    *(_QWORD *)(v44 + 24) = v40;
    v45 = v43;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_21FC5B184();
    v46 = MEMORY[0x24BDB9AE0];
    sub_21FA5D3F8(0, &qword_25554D520, (uint64_t)&type metadata for WellKnownJWKSProcessingContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FC101FC();
    sub_21FC1538C(&qword_25554D528, &qword_25554D520, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v46, MEMORY[0x24BDB9AF8]);
    v47 = v66;
    v48 = v69;
    sub_21FC5B34C();
    swift_release();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v39, v48);
    sub_21FC154B4(&qword_25554D540, &qword_25554D518, sub_21FC101BC, (void (*)(void))sub_21FC101FC);
    v49 = v70;
    v50 = v71;
    sub_21FC5B328();
    (*(void (**)(char *, uint64_t))(v68 + 8))(v47, v49);
    sub_21FA5BE58(0, &qword_25554B200);
    sub_21FA2A08C(&qword_25554D550, (uint64_t (*)(uint64_t))sub_21FC10218, MEMORY[0x24BDB98D8]);
    v52 = v73;
    v51 = v74;
    sub_21FC5B31C();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v50, v51);
    sub_21FA2A08C(&qword_25554D570, (uint64_t (*)(uint64_t))sub_21FC102C0, MEMORY[0x24BDB98C8]);
    v53 = v76;
    v54 = sub_21FC5B280();
    (*(void (**)(char *, uint64_t))(v75 + 8))(v52, v53);
  }
  return v54;
}

void sub_21FC10100()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25554D4F0)
  {
    v0 = MEMORY[0x24BEE1250];
    sub_21FA80754(255, &qword_25554D4F8, (uint64_t)&type metadata for WellKnownJWKSProcessingContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FC151A0(&qword_25554D500, &qword_25554D4F8, (uint64_t (*)(_QWORD, uint64_t))v0, MEMORY[0x24BEE12C8]);
    v1 = sub_21FC5B130();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25554D4F0);
  }
}

void sub_21FC101BC(uint64_t a1)
{
  sub_21FC14F38(a1, &qword_25554D508, (uint64_t (*)(uint64_t))sub_21FC10100, sub_21FC101E0, (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *, uint64_t))MEMORY[0x24BDB98B8]);
}

uint64_t sub_21FC101E0()
{
  return sub_21FA2A08C(&qword_25554D510, (uint64_t (*)(uint64_t))sub_21FC10100, MEMORY[0x24BDB9970]);
}

uint64_t sub_21FC101FC()
{
  return sub_21FA2A08C(&qword_25554D530, (uint64_t (*)(uint64_t))sub_21FC101BC, MEMORY[0x24BDB98C8]);
}

void sub_21FC10218()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D538)
  {
    sub_21FC151EC(255, &qword_25554D518, sub_21FC101BC, (void (*)(void))sub_21FC101FC);
    sub_21FC154B4(&qword_25554D540, &qword_25554D518, sub_21FC101BC, (void (*)(void))sub_21FC101FC);
    v0 = sub_21FC5B0F4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D538);
  }
}

void sub_21FC102C0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D548)
  {
    sub_21FC10218();
    sub_21FA5BE58(255, &qword_25554B200);
    sub_21FA2A08C(&qword_25554D550, (uint64_t (*)(uint64_t))sub_21FC10218, MEMORY[0x24BDB98D8]);
    v0 = sub_21FC5B0E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D548);
  }
}

void sub_21FC10364()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D558)
  {
    sub_21FA5BE58(255, &qword_25554B200);
    v0 = sub_21FC5B220();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D558);
  }
}

void sub_21FC103C8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D560)
  {
    sub_21FA5BE58(255, &qword_25554B200);
    sub_21FA50724(255, (unint64_t *)&qword_25406BB50);
    v0 = sub_21FC5BEC8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D560);
  }
}

_QWORD *sub_21FC10454@<X0>(_QWORD *a1@<X8>)
{
  return sub_21FC10474(a1);
}

_QWORD *sub_21FC10474@<X0>(_QWORD *a1@<X8>)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  uint64_t v20;
  uint8_t *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  NSObject *v28;
  uint64_t v29;
  _BYTE *v30;
  _QWORD *result;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  char **v35;
  uint8_t *v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  void *v50;
  void *v51;
  uint64_t *boxed_opaque_existential_1;
  id v53;
  uint64_t v54;
  void *v55;
  void *v56;
  id v57;
  id v58;
  id v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[3];
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70[4];
  _OWORD v71[2];
  uint64_t v72;
  uint64_t v73;

  v3 = v2;
  v4 = v1;
  v6 = type metadata accessor for WellKnownJWKSRequest();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v1[1];
  v10 = objc_msgSend(v9, sel_issuerIdentifier);
  if (v10)
  {
    v11 = v10;
    v12 = sub_21FC5B604();
    v14 = v13;

    v15 = objc_msgSend(v9, sel_sourceType);
    if (v15 == (id)2)
    {
      swift_bridgeObjectRelease();
      if (qword_25406B7F8 != -1)
        swift_once();
      v32 = sub_21FC5AFD4();
      __swift_project_value_buffer(v32, (uint64_t)qword_25406D830);
      sub_21FC14C3C((uint64_t)v4, v71);
      v33 = sub_21FC5AFC8();
      v34 = sub_21FC5B964();
      v35 = &selRef_predicateForDiagnosticTestResultCategory_;
      if (os_log_type_enabled(v33, v34))
      {
        v69 = a1;
        v36 = (uint8_t *)swift_slowAlloc();
        v68 = swift_slowAlloc();
        v73 = v68;
        *(_DWORD *)v36 = 136315138;
        v37 = objc_msgSend(*((id *)&v71[0] + 1), sel_signingKeyID);
        if (v37)
        {
          v38 = v37;
          v39 = sub_21FC5B604();
          v41 = v40;

          v70[0] = v39;
          v70[1] = v41;
          swift_bridgeObjectRetain_n();
          sub_21FC5BE08();
          v42 = (id)HKSensitiveLogItem();
          swift_unknownObjectRelease();
          sub_21FC5BAF0();
          swift_unknownObjectRelease();
          v43 = sub_21FC5B64C();
          v45 = v44;
          v35 = &selRef_predicateForDiagnosticTestResultCategory_;
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v45 = 0xE500000000000000;
          v43 = 0x7D6C696E7BLL;
        }
        v70[0] = sub_21FABDCF8(v43, v45, &v73);
        sub_21FC5BAC0();
        swift_bridgeObjectRelease();
        sub_21FC14C70((uint64_t)v71);
        _os_log_impl(&dword_21FA27000, v33, v34, "WellKnownJWKSProcessingContext: preparing %s for lookup in public key registry", v36, 0xCu);
        v54 = v68;
        swift_arrayDestroy();
        MEMORY[0x2207D105C](v54, -1, -1);
        MEMORY[0x2207D105C](v36, -1, -1);

        a1 = v69;
      }
      else
      {
        sub_21FC14C70((uint64_t)v71);

      }
      v55 = *v4;
      v56 = v4[1];
      v72 = 0;
      memset(v71, 0, sizeof(v71));
      v57 = v55;
      v58 = v56;
      v59 = objc_msgSend(v58, v35[306]);
      if (v59)
      {
        v60 = v59;
        v61 = sub_21FC5B604();
        v63 = v62;

      }
      else
      {
        v61 = 0;
        v63 = 0;
      }
      *a1 = v57;
      a1[1] = v58;
      result = (_QWORD *)sub_21FA2D23C((uint64_t)v71, (uint64_t)(a1 + 2), (uint64_t (*)(_QWORD))sub_21FC14D8C);
      a1[7] = v61;
      a1[8] = v63;
    }
    else if (v15 == (id)1)
    {
      if (qword_25406B7F8 != -1)
        swift_once();
      v16 = sub_21FC5AFD4();
      __swift_project_value_buffer(v16, (uint64_t)qword_25406D830);
      swift_bridgeObjectRetain_n();
      v17 = sub_21FC5AFC8();
      v18 = sub_21FC5B964();
      v19 = v18;
      if (os_log_type_enabled(v17, v18))
      {
        v68 = v12;
        v20 = swift_slowAlloc();
        LODWORD(v67) = v19;
        v21 = (uint8_t *)v20;
        v66 = swift_slowAlloc();
        v70[0] = v66;
        v65 = v21;
        *(_DWORD *)v21 = 136315138;
        v64[2] = v21 + 4;
        *(_QWORD *)&v71[0] = v68;
        *((_QWORD *)&v71[0] + 1) = v14;
        swift_bridgeObjectRetain_n();
        sub_21FC5BE08();
        v69 = a1;
        v22 = (id)HKSensitiveLogItem();
        swift_unknownObjectRelease();
        sub_21FC5BAF0();
        swift_unknownObjectRelease();
        v64[1] = MEMORY[0x24BEE4AD8] + 8;
        v23 = sub_21FC5B64C();
        v25 = v24;
        swift_bridgeObjectRelease();
        v26 = v23;
        a1 = v69;
        *(_QWORD *)&v71[0] = sub_21FABDCF8(v26, v25, v70);
        sub_21FC5BAC0();
        swift_bridgeObjectRelease_n();
        v12 = v68;
        swift_bridgeObjectRelease();
        v27 = v65;
        _os_log_impl(&dword_21FA27000, v17, (os_log_type_t)v67, "WellKnownJWKSProcessingContext: instantiating WellKnownJWKSRequest for issuer %s", v65, 0xCu);
        v67 = v2;
        v28 = v17;
        v29 = v66;
        swift_arrayDestroy();
        MEMORY[0x2207D105C](v29, -1, -1);
        MEMORY[0x2207D105C](v27, -1, -1);

        v3 = v67;
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      result = (_QWORD *)WellKnownJWKSRequest.init(baseURLString:)(v12, v14, (uint64_t)v8);
      if (!v3)
      {
        v50 = *v4;
        v51 = v4[1];
        a1[5] = v6;
        a1[6] = &protocol witness table for WellKnownJWKSRequest;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1 + 2);
        sub_21FA2D23C((uint64_t)v8, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for WellKnownJWKSRequest);
        *a1 = v50;
        a1[1] = v51;
        a1[7] = 0;
        a1[8] = 0;
        v53 = v50;
        return v51;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      if (qword_25406B7F8 != -1)
        swift_once();
      v46 = sub_21FC5AFD4();
      __swift_project_value_buffer(v46, (uint64_t)qword_25406D830);
      v47 = sub_21FC5AFC8();
      v48 = sub_21FC5B988();
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v49 = 0;
        _os_log_impl(&dword_21FA27000, v47, v48, "WellKnownJWKSProcessingContext.contextByCreatingJWKSRequest got unsupported source type", v49, 2u);
        MEMORY[0x2207D105C](v49, -1, -1);
      }

      return sub_21FC14C3C((uint64_t)v4, a1);
    }
  }
  else
  {
    sub_21FC14C9C();
    swift_allocError();
    *v30 = 1;
    return (_QWORD *)swift_willThrow();
  }
  return result;
}

uint64_t sub_21FC10B34(id *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  uint64_t (*v24)(void);
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;

  sub_21FA5D3F8(0, &qword_25554D590, (uint64_t)&type metadata for WellKnownJWKSProcessingContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9DA0]);
  v34 = *(_QWORD *)(v3 - 8);
  v35 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v30 - v4;
  sub_21FC14CE0();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  v11 = (void *)v1[1];
  v36 = a1;
  v13 = (uint64_t)(a1 + 2);
  v14 = v1[2];
  v15 = v1[3];
  sub_21FA2D120(v13, (uint64_t)&v37, (uint64_t (*)(_QWORD))sub_21FC14D8C);
  v16 = v40;
  sub_21FA326EC((uint64_t)&v37, (uint64_t (*)(_QWORD))sub_21FC14D8C);
  if (v16)
  {
    v37 = v12;
    v38 = v11;
    v39 = v14;
    v40 = v15;
    return sub_21FC110C0(v36);
  }
  else
  {
    v18 = v14;
    v20 = v34;
    v19 = v35;
    v31 = v10;
    v32 = v7;
    v33 = v8;
    if (v36[8])
    {
      v37 = v12;
      v38 = v11;
      v21 = v18;
      v39 = v18;
      v40 = v15;
      v37 = sub_21FC116B0((uint64_t)v36);
      v22 = (_QWORD *)swift_allocObject();
      v22[2] = v12;
      v22[3] = v11;
      v22[4] = v21;
      v22[5] = v15;
      v23 = v11;
      swift_bridgeObjectRetain();
      swift_retain();
      sub_21FC5B184();
      v24 = MEMORY[0x24BDB9AE0];
      sub_21FA5D3F8(0, &qword_25554D520, (uint64_t)&type metadata for WellKnownJWKSProcessingContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
      sub_21FC1538C(&qword_25554D528, &qword_25554D520, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v24, MEMORY[0x24BDB9AF8]);
      v25 = v31;
      sub_21FC5B34C();
      swift_release();
      swift_release();
      sub_21FA2A08C(&qword_25554D5A8, (uint64_t (*)(uint64_t))sub_21FC14CE0, MEMORY[0x24BDB98F0]);
      v26 = v32;
      v17 = sub_21FC5B280();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v25, v26);
    }
    else
    {
      sub_21FC14C9C();
      v27 = swift_allocError();
      *v28 = 5;
      v37 = v27;
      sub_21FA50724(0, (unint64_t *)&qword_25406BB50);
      sub_21FC5B1E4();
      sub_21FC1538C(&qword_25554D5A0, &qword_25554D590, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9DA0], MEMORY[0x24BDB9DB0]);
      v17 = sub_21FC5B280();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v19);
    }
  }
  return v17;
}

uint64_t sub_21FC10E44@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t result;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD v31[11];

  v5 = sub_21FC5AAAC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    v29 = a2;
    v30 = v2;
    v11 = v9 + 32;
    v10 = *(void **)(v9 + 32);
    v12 = objc_msgSend(v10, sel_receivedDate);
    sub_21FC5AA94();

    v13 = objc_msgSend(v10, sel_countryCode);
    if (v13)
    {
      v14 = v13;
      v27 = sub_21FC5B604();
      v16 = v15;

    }
    else
    {
      v27 = 0;
      v16 = 0;
    }
    v28 = objc_msgSend(v10, sel_options);
    v19 = *(_QWORD *)(v9 + 16);
    if (v19)
    {
      v31[10] = MEMORY[0x24BEE4AF8];
      sub_21FC5BC04();
      do
      {
        sub_21FC14C3C(v11, v31);
        v20 = (id)v31[1];
        sub_21FC14C70((uint64_t)v31);
        sub_21FC5BBE0();
        sub_21FC5BC10();
        sub_21FC5BC1C();
        sub_21FC5BBEC();
        v11 += 72;
        --v19;
      }
      while (v19);
    }
    v21 = (void *)sub_21FC5AA64();
    if (v16)
    {
      v22 = (void *)sub_21FC5B5E0();
      swift_bridgeObjectRelease();
    }
    else
    {
      v22 = 0;
    }
    v23 = objc_allocWithZone(MEMORY[0x24BE489A0]);
    sub_21FA5BE58(0, &qword_25554D568);
    v24 = (void *)sub_21FC5B79C();
    swift_bridgeObjectRelease();
    v25 = objc_msgSend(v23, sel_initWithReceivedDate_countryCode_options_contextItems_, v21, v22, v28, v24);

    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *v29 = v25;
  }
  else
  {
    sub_21FC14C9C();
    swift_allocError();
    *v17 = 3;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_21FC110C0(id *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  id v35;
  uint64_t (*v36)(void);
  uint64_t v37;
  id v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  id v54;
  id v55;
  id *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _QWORD v63[3];
  uint64_t v64;
  uint64_t v65;

  sub_21FA5D3F8(0, &qword_25554D590, (uint64_t)&type metadata for WellKnownJWKSProcessingContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9DA0]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v47 - v6;
  sub_21FC14E00();
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v52 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC14F38(0, &qword_25554D5C8, v12, sub_21FC14FB0, (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *, uint64_t))MEMORY[0x24BDB96B0]);
  v14 = v13;
  v53 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v51 = (char *)&v47 - v15;
  v16 = *v1;
  v55 = (id)v1[1];
  v56 = a1;
  v17 = (uint64_t)(a1 + 2);
  v18 = v1[2];
  v19 = v1[3];
  sub_21FA2D120(v17, (uint64_t)&v58, (uint64_t (*)(_QWORD))sub_21FC14D8C);
  if (*((_QWORD *)&v59 + 1))
  {
    sub_21FA3175C(&v58, (uint64_t)v63);
    if (qword_25406B7F8 != -1)
      swift_once();
    v48 = v14;
    v49 = v10;
    v50 = v9;
    v20 = sub_21FC5AFD4();
    __swift_project_value_buffer(v20, (uint64_t)qword_25406D830);
    v54 = v55;
    swift_bridgeObjectRetain();
    swift_retain();
    v21 = sub_21FC5AFC8();
    v22 = sub_21FC5B994();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      v24 = swift_slowAlloc();
      *(_QWORD *)&v58 = v24;
      *(_DWORD *)v23 = 136315138;
      swift_bridgeObjectRetain();
      v57 = sub_21FABDCF8(v18, v19, (uint64_t *)&v58);
      sub_21FC5BAC0();

      swift_release();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_21FA27000, v21, v22, "%s: preparing to download well-known JWKS", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v24, -1, -1);
      MEMORY[0x2207D105C](v23, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
      swift_release();
    }
    v28 = objc_msgSend(*v56, sel_options);
    v29 = v28 & 2;
    v30 = ((uint64_t)((_QWORD)v28 << 62) >> 63) & 0x4014000000000000;
    v32 = v64;
    v31 = v65;
    v33 = __swift_project_boxed_opaque_existential_1(v63, v64);
    *(_QWORD *)&v58 = sub_21FC56744((uint64_t)v33, v30, v29 == 0, v29, v29 == 0, 1, v16, v32, v31);
    v34 = (_QWORD *)swift_allocObject();
    v35 = v55;
    v34[2] = v16;
    v34[3] = v35;
    v34[4] = v18;
    v34[5] = v19;
    sub_21FA30BA4(0);
    v36 = MEMORY[0x24BDB9AE0];
    sub_21FA5D3F8(0, &qword_25554D5B8, (uint64_t)&type metadata for WebRequestResponse, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    v37 = MEMORY[0x24BDB9AF8];
    sub_21FA2A08C(&qword_25553E2B0, (uint64_t (*)(uint64_t))sub_21FA30BA4, MEMORY[0x24BDB9AF8]);
    sub_21FC14EEC(&qword_25554D5C0, &qword_25554D5B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v36, v37);
    swift_retain();
    v38 = v54;
    swift_bridgeObjectRetain();
    v39 = v52;
    sub_21FC5B2E0();
    swift_release();
    swift_release();
    sub_21FC14C3C((uint64_t)v56, &v58);
    v40 = swift_allocObject();
    v41 = v61;
    *(_OWORD *)(v40 + 48) = v60;
    *(_OWORD *)(v40 + 64) = v41;
    *(_QWORD *)(v40 + 80) = v62;
    v42 = v59;
    *(_OWORD *)(v40 + 16) = v58;
    *(_OWORD *)(v40 + 32) = v42;
    sub_21FC14FB0();
    v43 = v51;
    v44 = v50;
    sub_21FC5B2C8();
    swift_release();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v39, v44);
    sub_21FC14FE8();
    v45 = v48;
    v27 = sub_21FC5B280();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v43, v45);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
  }
  else
  {
    sub_21FA326EC((uint64_t)&v58, (uint64_t (*)(_QWORD))sub_21FC14D8C);
    sub_21FC14C9C();
    v25 = swift_allocError();
    *v26 = 2;
    *(_QWORD *)&v58 = v25;
    sub_21FA50724(0, (unint64_t *)&qword_25406BB50);
    sub_21FC5B1E4();
    sub_21FC1538C(&qword_25554D5A0, &qword_25554D590, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9DA0], MEMORY[0x24BDB9DB0]);
    v27 = sub_21FC5B280();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v27;
}

uint64_t sub_21FC116B0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  os_log_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t (*v47)(void);
  id v48;
  id v49;
  os_log_t v51[2];
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD v57[4];
  uint64_t v58;

  sub_21FA5D3F8(0, &qword_25554D590, (uint64_t)&type metadata for WellKnownJWKSProcessingContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9DA0]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v51 - v6;
  v8 = (void *)v1[1];
  if (v8)
  {
    v9 = *v1;
    v11 = v1[2];
    v10 = v1[3];
    v12 = *(void **)(a1 + 8);
    v13 = v8;
    v14 = objc_msgSend(v12, sel_signingKeyID);
    if (v14)
    {
      v15 = v14;
      v55 = a1;
      v16 = sub_21FC5B604();
      v18 = v17;

      if (qword_25406B7F8 != -1)
        swift_once();
      v19 = sub_21FC5AFD4();
      __swift_project_value_buffer(v19, (uint64_t)qword_25406D830);
      swift_retain_n();
      v20 = v13;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v21 = v20;
      v22 = sub_21FC5AFC8();
      v23 = sub_21FC5B994();
      v24 = v23;
      if (os_log_type_enabled(v22, v23))
      {
        v25 = swift_slowAlloc();
        v54 = v11;
        v26 = v25;
        v53 = swift_slowAlloc();
        v56 = v53;
        *(_DWORD *)v26 = 136315394;
        v52 = v24;
        swift_bridgeObjectRetain();
        *(_QWORD *)&v57[0] = sub_21FABDCF8(v54, v10, &v56);
        sub_21FC5BAC0();

        swift_release_n();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v26 + 12) = 2080;
        v51[1] = (os_log_t)(v26 + 14);
        *(_QWORD *)&v57[0] = v16;
        *((_QWORD *)&v57[0] + 1) = v18;
        swift_bridgeObjectRetain_n();
        sub_21FC5BE08();
        v27 = (id)HKSensitiveLogItem();
        v51[0] = v22;
        v28 = v10;
        v29 = v18;
        swift_unknownObjectRelease();
        sub_21FC5BAF0();
        swift_unknownObjectRelease();
        v30 = sub_21FC5B64C();
        v31 = v9;
        v32 = v16;
        v34 = v33;
        swift_bridgeObjectRelease();
        v35 = v30;
        v18 = v29;
        v10 = v28;
        *(_QWORD *)&v57[0] = sub_21FABDCF8(v35, v34, &v56);
        sub_21FC5BAC0();
        swift_bridgeObjectRelease_n();
        v16 = v32;
        v9 = v31;
        swift_bridgeObjectRelease();
        v36 = v51[0];
        _os_log_impl(&dword_21FA27000, v51[0], (os_log_type_t)v52, "%s: about to fetch public key “%s” from registry", (uint8_t *)v26, 0x16u);
        v37 = v53;
        swift_arrayDestroy();
        MEMORY[0x2207D105C](v37, -1, -1);
        v38 = v26;
        v11 = v54;
        MEMORY[0x2207D105C](v38, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

        swift_release_n();
      }
      sub_21FC14C3C(v55, v57);
      v44 = swift_allocObject();
      v45 = v57[0];
      *(_OWORD *)(v44 + 88) = v57[1];
      v46 = v57[3];
      *(_OWORD *)(v44 + 104) = v57[2];
      *(_OWORD *)(v44 + 120) = v46;
      *(_QWORD *)(v44 + 16) = v21;
      *(_QWORD *)(v44 + 24) = v16;
      *(_QWORD *)(v44 + 32) = v18;
      *(_QWORD *)(v44 + 40) = v9;
      *(_QWORD *)(v44 + 48) = v8;
      *(_QWORD *)(v44 + 56) = v11;
      *(_QWORD *)(v44 + 64) = v10;
      *(_QWORD *)(v44 + 136) = v58;
      *(_OWORD *)(v44 + 72) = v45;
      v47 = MEMORY[0x24BDB9E38];
      sub_21FA5D3F8(0, &qword_25554D650, (uint64_t)&type metadata for WellKnownJWKSProcessingContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9E38]);
      swift_allocObject();
      v48 = v21;
      swift_retain();
      v49 = v48;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v57[0] = sub_21FC5B25C();
      sub_21FC1538C(&qword_25554D658, &qword_25554D650, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v47, MEMORY[0x24BDB9E58]);
      v41 = sub_21FC5B280();
      swift_release();

    }
    else
    {
      sub_21FC14C9C();
      v42 = swift_allocError();
      *v43 = 6;
      *(_QWORD *)&v57[0] = v42;
      sub_21FA50724(0, (unint64_t *)&qword_25406BB50);
      sub_21FC5B1E4();
      sub_21FC1538C(&qword_25554D5A0, &qword_25554D590, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9DA0], MEMORY[0x24BDB9DB0]);
      v41 = sub_21FC5B280();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);

    }
  }
  else
  {
    sub_21FC14C9C();
    v39 = swift_allocError();
    *v40 = 4;
    *(_QWORD *)&v57[0] = v39;
    sub_21FA50724(0, (unint64_t *)&qword_25406BB50);
    sub_21FC5B1E4();
    sub_21FC1538C(&qword_25554D5A0, &qword_25554D590, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9DA0], MEMORY[0x24BDB9DB0]);
    v41 = sub_21FC5B280();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v41;
}

uint64_t sub_21FC11CB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t (*v30)(void);
  _QWORD *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v42 = a3;
  v43 = a5;
  v44 = a2;
  v45 = a4;
  v46 = a6;
  sub_21FA80754(0, &qword_25554D600, (uint64_t)&type metadata for WellKnownJWKSProcessingContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDB9DE0]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v38 - v10;
  sub_21FA5D3F8(0, &qword_25554D608, (uint64_t)&type metadata for WellKnownJWKSProcessingContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v38 - v15;
  sub_21FC15098();
  v41 = v17;
  v39 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC151EC(0, &qword_25554D620, (void (*)(uint64_t))sub_21FC152BC, (void (*)(void))sub_21FC15370);
  v21 = v20;
  v40 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v38 - v22;
  if (objc_msgSend(*(id *)(a1 + 8), sel_JWKSOutcome) == (id)2)
  {
    v24 = v44;
    v38 = v21;
    v26 = v42;
    v25 = v43;
    *(_QWORD *)&v48 = v44;
    *((_QWORD *)&v48 + 1) = v42;
    *(_QWORD *)&v49 = v45;
    *((_QWORD *)&v49 + 1) = v43;
    v47 = sub_21FC12110(a1);
    sub_21FC14C3C(a1, &v48);
    v27 = swift_allocObject();
    v28 = v51;
    *(_OWORD *)(v27 + 48) = v50;
    *(_OWORD *)(v27 + 64) = v28;
    *(_QWORD *)(v27 + 80) = v52;
    v29 = v49;
    *(_OWORD *)(v27 + 16) = v48;
    *(_OWORD *)(v27 + 32) = v29;
    v30 = MEMORY[0x24BDB9AE0];
    sub_21FA5D3F8(0, &qword_25554D520, (uint64_t)&type metadata for WellKnownJWKSProcessingContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FC1538C(&qword_25554D528, &qword_25554D520, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v30, MEMORY[0x24BDB9AF8]);
    sub_21FC151A0(&qword_25554D618, &qword_25554D600, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDB9DE0], MEMORY[0x24BDB9DF8]);
    sub_21FC5B2E0();
    swift_release();
    swift_release();
    v31 = (_QWORD *)swift_allocObject();
    v31[2] = v24;
    v31[3] = v26;
    v31[4] = v45;
    v31[5] = v25;
    v32 = swift_allocObject();
    *(_QWORD *)(v32 + 16) = sub_21FC15468;
    *(_QWORD *)(v32 + 24) = v31;
    v33 = v26;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_21FC5B184();
    sub_21FA2A08C(&qword_25554D630, (uint64_t (*)(uint64_t))sub_21FC15098, MEMORY[0x24BDB9740]);
    v34 = v41;
    sub_21FC5B388();
    swift_release();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v19, v34);
    sub_21FC154B4(&qword_25554D648, &qword_25554D620, (void (*)(uint64_t))sub_21FC152BC, (void (*)(void))sub_21FC15370);
    v35 = v38;
    v36 = sub_21FC5B280();
    result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v23, v35);
  }
  else
  {
    sub_21FC14C3C(a1, &v48);
    sub_21FC5B22C();
    sub_21FA50724(0, (unint64_t *)&qword_25406BB50);
    sub_21FC5B208();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    sub_21FC1538C(&qword_25554D640, &qword_25554D608, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDBA1B0], MEMORY[0x24BDBA1D0]);
    v36 = sub_21FC5B280();
    result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  *v46 = v36;
  return result;
}

uint64_t sub_21FC12110(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t (*v16)(void);
  id v17;
  uint64_t v18;
  _OWORD v20[4];
  uint64_t v21;

  v3 = *v1;
  v4 = (void *)v1[1];
  v6 = v1[2];
  v5 = v1[3];
  if (qword_25406B7F8 != -1)
    swift_once();
  v7 = sub_21FC5AFD4();
  __swift_project_value_buffer(v7, (uint64_t)qword_25406D830);
  v8 = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  v9 = sub_21FC5AFC8();
  v10 = sub_21FC5B994();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    *(_QWORD *)&v20[0] = v12;
    *(_DWORD *)v11 = 136315138;
    swift_bridgeObjectRetain();
    sub_21FABDCF8(v6, v5, (uint64_t *)v20);
    sub_21FC5BAC0();

    swift_release();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_21FA27000, v9, v10, "%s: triggering public key OTA download", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v12, -1, -1);
    MEMORY[0x2207D105C](v11, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
    swift_release();
  }
  sub_21FC14C3C(a1, v20);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v3;
  *(_QWORD *)(v13 + 24) = v4;
  *(_QWORD *)(v13 + 32) = v6;
  *(_QWORD *)(v13 + 40) = v5;
  v14 = v20[3];
  *(_OWORD *)(v13 + 80) = v20[2];
  *(_OWORD *)(v13 + 96) = v14;
  *(_QWORD *)(v13 + 112) = v21;
  v15 = v20[1];
  *(_OWORD *)(v13 + 48) = v20[0];
  *(_OWORD *)(v13 + 64) = v15;
  v16 = MEMORY[0x24BDB9E38];
  sub_21FA5D3F8(0, &qword_25554D650, (uint64_t)&type metadata for WellKnownJWKSProcessingContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9E38]);
  swift_allocObject();
  swift_retain();
  v17 = v8;
  swift_bridgeObjectRetain();
  *(_QWORD *)&v20[0] = sub_21FC5B25C();
  sub_21FC1538C(&qword_25554D658, &qword_25554D650, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v16, MEMORY[0x24BDB9E58]);
  v18 = sub_21FC5B280();
  swift_release();
  return v18;
}

uint64_t sub_21FC123E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[5];
  __int128 v46;
  uint64_t v47;

  v38 = a4;
  v43 = a2;
  sub_21FA80754(0, &qword_25554D5E8, (uint64_t)&type metadata for WebRequestResponse, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDB9DE0]);
  v11 = v10;
  v41 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v35 - v12;
  sub_21FA5D3F8(0, &qword_25554D5F0, (uint64_t)&type metadata for WebRequestResponse, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
  v15 = v14;
  v42 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v40 = (char *)&v35 - v16;
  v17 = type metadata accessor for WebRequestResponseError(0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_25406B7F8 != -1)
    swift_once();
  v20 = sub_21FC5AFD4();
  __swift_project_value_buffer(v20, (uint64_t)qword_25406D830);
  v39 = a1;
  sub_21FA2D120(a1, (uint64_t)v19, type metadata accessor for WebRequestResponseError);
  v21 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  v22 = sub_21FC5AFC8();
  v23 = sub_21FC5B97C();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = swift_slowAlloc();
    v36 = v11;
    v25 = v24;
    v26 = swift_slowAlloc();
    v37 = a6;
    v27 = v26;
    v45[0] = v26;
    *(_DWORD *)v25 = 136315394;
    swift_bridgeObjectRetain();
    v44 = sub_21FABDCF8(v38, a5, v45);
    v38 = v15;
    sub_21FC5BAC0();

    swift_release();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v25 + 12) = 2080;
    v28 = WebRequestResponseError.safelyLoggableDescription.getter();
    v44 = sub_21FABDCF8(v28, v29, v45);
    v15 = v38;
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    sub_21FA326EC((uint64_t)v19, type metadata accessor for WebRequestResponseError);
    _os_log_impl(&dword_21FA27000, v22, v23, "%s: %s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy();
    v30 = v27;
    a6 = v37;
    MEMORY[0x2207D105C](v30, -1, -1);
    v31 = v25;
    v11 = v36;
    MEMORY[0x2207D105C](v31, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();

    swift_release();
    sub_21FA326EC((uint64_t)v19, type metadata accessor for WebRequestResponseError);
  }

  sub_21FA2CEA0(v39, (uint64_t)v45);
  v46 = xmmword_21FC5E350;
  v47 = 0;
  sub_21FC5B22C();
  sub_21FA50724(0, (unint64_t *)&qword_25406BB50);
  v32 = v40;
  sub_21FC5B208();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v11);
  sub_21FC14EEC(&qword_25554D5F8, &qword_25554D5F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDBA1B0], MEMORY[0x24BDBA1D0]);
  v33 = sub_21FC5B280();
  result = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v32, v15);
  *a6 = v33;
  return result;
}

uint64_t sub_21FC127E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v7 = *(id *)a2;
  v8 = sub_21FC14110(v6, v5, 0);
  sub_21FA2D120(a2 + 16, (uint64_t)(a3 + 2), (uint64_t (*)(_QWORD))sub_21FC14D8C);
  v10 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  *a3 = v7;
  a3[1] = v8;
  a3[7] = v10;
  a3[8] = v9;
  return swift_bridgeObjectRetain();
}

void sub_21FC1285C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  void *v21;
  id v22;
  _QWORD aBlock[6];
  _OWORD v25[4];
  uint64_t v26;

  v17 = (void *)sub_21FC5B5E0();
  sub_21FC14C3C(a10, v25);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a6;
  *(_QWORD *)(v18 + 24) = a7;
  *(_QWORD *)(v18 + 32) = a8;
  *(_QWORD *)(v18 + 40) = a9;
  *(_QWORD *)(v18 + 48) = a4;
  *(_QWORD *)(v18 + 56) = a5;
  *(_QWORD *)(v18 + 64) = a1;
  *(_QWORD *)(v18 + 72) = a2;
  v19 = v25[3];
  *(_OWORD *)(v18 + 112) = v25[2];
  *(_OWORD *)(v18 + 128) = v19;
  *(_QWORD *)(v18 + 144) = v26;
  v20 = v25[1];
  *(_OWORD *)(v18 + 80) = v25[0];
  *(_OWORD *)(v18 + 96) = v20;
  aBlock[4] = sub_21FC15780;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_21FC138B4;
  aBlock[3] = &block_descriptor_19;
  v21 = _Block_copy(aBlock);
  v22 = a7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(a3, sel_fetchPublicKeyWithKeyID_completion_, v17, v21);
  _Block_release(v21);

}

uint64_t sub_21FC129B8(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, void (*a9)(uint64_t *), uint64_t a10, id *a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  const char *v49;
  uint64_t v50;
  id v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  id v59;
  id v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  id v76;
  id *v77;
  id v78;
  id v79;
  id v80;
  id v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  _BYTE *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  id *v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  unint64_t v99;
  id *v100;
  uint64_t v101;
  _BYTE *v102;
  id v103;
  uint64_t v105;
  int v106;
  uint64_t v107;
  unint64_t v108;
  id *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t *);
  id v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  _BYTE v118[40];
  id v119;
  id v120;
  char v121;

  v110 = a5;
  v111 = a7;
  v112 = a10;
  v113 = a9;
  v16 = sub_21FC5B640();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v105 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = objc_msgSend(a1, sel_outcome);
  if (v20 == (id)3)
  {
    v109 = a11;
    if (qword_25406B7F8 != -1)
      swift_once();
    v38 = sub_21FC5AFD4();
    __swift_project_value_buffer(v38, (uint64_t)qword_25406D830);
    v39 = a4;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    v40 = v39;
    v41 = sub_21FC5AFC8();
    v42 = sub_21FC5B994();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = swift_slowAlloc();
      v44 = swift_slowAlloc();
      v115 = v44;
      *(_DWORD *)v43 = 136315394;
      swift_bridgeObjectRetain();
      v116 = sub_21FABDCF8(v110, a6, &v115);
      sub_21FC5BAC0();

      swift_release_n();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v43 + 12) = 2080;
      v116 = v111;
      v117 = a8;
      swift_bridgeObjectRetain_n();
      sub_21FC5BE08();
      v45 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_21FC5BAF0();
      swift_unknownObjectRelease();
      v46 = sub_21FC5B64C();
      v48 = v47;
      swift_bridgeObjectRelease();
      v116 = sub_21FABDCF8(v46, v48, &v115);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      v49 = "%s: key with ID “%s” has been removed";
LABEL_17:
      _os_log_impl(&dword_21FA27000, v41, v42, v49, (uint8_t *)v43, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v44, -1, -1);
      MEMORY[0x2207D105C](v43, -1, -1);

LABEL_25:
      v76 = objc_msgSend(a1, sel_outcome);
      v77 = v109;
      v78 = *v109;
      v79 = sub_21FC14110(0, 0xF000000000000000, (uint64_t)v76);
      sub_21FA2D120((uint64_t)(v77 + 2), (uint64_t)v118, (uint64_t (*)(_QWORD))sub_21FC14D8C);
      v81 = v77[7];
      v80 = v77[8];
      v116 = (uint64_t)v78;
      v117 = (unint64_t)v79;
      v119 = v81;
      v120 = v80;
      v121 = 0;
      swift_bridgeObjectRetain();
LABEL_41:
      v113(&v116);
      return sub_21FC15620((uint64_t)&v116);
    }
LABEL_24:

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    swift_release_n();
    goto LABEL_25;
  }
  if (v20 == (id)2)
  {
    v109 = a11;
    if (qword_25406B7F8 != -1)
      swift_once();
    v50 = sub_21FC5AFD4();
    __swift_project_value_buffer(v50, (uint64_t)qword_25406D830);
    v51 = a4;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    v40 = v51;
    v41 = sub_21FC5AFC8();
    v42 = sub_21FC5B994();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = swift_slowAlloc();
      v44 = swift_slowAlloc();
      v115 = v44;
      *(_DWORD *)v43 = 136315394;
      swift_bridgeObjectRetain();
      v116 = sub_21FABDCF8(v110, a6, &v115);
      sub_21FC5BAC0();

      swift_release_n();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v43 + 12) = 2080;
      v116 = v111;
      v117 = a8;
      swift_bridgeObjectRetain_n();
      sub_21FC5BE08();
      v52 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_21FC5BAF0();
      swift_unknownObjectRelease();
      v53 = sub_21FC5B64C();
      v55 = v54;
      swift_bridgeObjectRelease();
      v116 = sub_21FABDCF8(v53, v55, &v115);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      v49 = "%s: key with ID “%s” not found";
      goto LABEL_17;
    }
    goto LABEL_24;
  }
  if (v20 != (id)1)
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v56 = sub_21FC5AFD4();
    __swift_project_value_buffer(v56, (uint64_t)qword_25406D830);
    swift_retain();
    v57 = a4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v58 = a2;
    swift_retain();
    v59 = v57;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v60 = a2;
    v61 = sub_21FC5AFC8();
    v62 = sub_21FC5B994();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = swift_slowAlloc();
      v109 = (id *)swift_slowAlloc();
      v115 = (uint64_t)v109;
      *(_DWORD *)v63 = 136315650;
      swift_bridgeObjectRetain();
      v116 = sub_21FABDCF8(v110, a6, &v115);
      sub_21FC5BAC0();

      swift_release_n();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v63 + 12) = 2080;
      v116 = v111;
      v117 = a8;
      swift_bridgeObjectRetain_n();
      sub_21FC5BE08();
      v64 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_21FC5BAF0();
      swift_unknownObjectRelease();
      v111 = MEMORY[0x24BEE4AD8] + 8;
      v65 = sub_21FC5B64C();
      v67 = v66;
      swift_bridgeObjectRelease();
      v116 = sub_21FABDCF8(v65, v67, &v115);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v63 + 22) = 2080;
      if (a2)
      {
        v116 = (uint64_t)a2;
        v68 = a2;
        v69 = a2;
        v70 = a2;
        sub_21FA50724(0, (unint64_t *)&qword_25406BB50);
        sub_21FA5BE58(0, &qword_25554D668);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v71 = v114;
          v72 = objc_msgSend(v114, sel_hrs_safelyLoggableDescription);
          v73 = sub_21FC5B604();
          v75 = v74;

        }
        else
        {
          v116 = (uint64_t)a2;
          v97 = a2;
          sub_21FC5BE08();
          v98 = (id)HKSensitiveLogItem();
          swift_unknownObjectRelease();
          sub_21FC5BAF0();
          swift_unknownObjectRelease();
          v73 = sub_21FC5B64C();
          v75 = v99;
        }

      }
      else
      {
        v75 = 0xE500000000000000;
        v73 = 0x7D6C696E7BLL;
      }
      v116 = sub_21FABDCF8(v73, v75, &v115);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_21FA27000, v61, v62, "%s: error retrieving key with ID “%s”: %s", (uint8_t *)v63, 0x20u);
      v100 = v109;
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v100, -1, -1);
      MEMORY[0x2207D105C](v63, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      swift_release_n();
    }

    v101 = (uint64_t)a2;
    if (!a2)
    {
      sub_21FC14C9C();
      v101 = swift_allocError();
      *v102 = 0;
    }
    v116 = v101;
    v121 = 1;
    v103 = a2;
    goto LABEL_41;
  }
  v109 = a11;
  v21 = objc_msgSend(a1, sel_jwkData);
  if (!v21)
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v82 = sub_21FC5AFD4();
    __swift_project_value_buffer(v82, (uint64_t)qword_25406D830);
    v83 = sub_21FC5AFC8();
    v84 = sub_21FC5B988();
    if (os_log_type_enabled(v83, v84))
    {
      v85 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v85 = 0;
      _os_log_impl(&dword_21FA27000, v83, v84, "WellKnownJWKSHandler.retrieveJWKFromPublicKeyRegistry got a \"retrieved\" result but no JWK data", v85, 2u);
      MEMORY[0x2207D105C](v85, -1, -1);
    }

    sub_21FC14C9C();
    v86 = swift_allocError();
    *v87 = 7;
    v116 = v86;
    v121 = 1;
    goto LABEL_41;
  }
  v22 = v21;
  v23 = sub_21FC5A9EC();
  v108 = v24;

  if (qword_25406B7F8 != -1)
    swift_once();
  v25 = sub_21FC5AFD4();
  __swift_project_value_buffer(v25, (uint64_t)qword_25406D830);
  v26 = a4;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  v27 = v26;
  v28 = sub_21FC5AFC8();
  v29 = sub_21FC5B994();
  v30 = v29;
  if (os_log_type_enabled(v28, v29))
  {
    v31 = swift_slowAlloc();
    v106 = v30;
    v32 = v31;
    v105 = swift_slowAlloc();
    v115 = v105;
    *(_DWORD *)v32 = 136315394;
    v107 = v23;
    swift_bridgeObjectRetain();
    v116 = sub_21FABDCF8(v110, a6, &v115);
    sub_21FC5BAC0();

    swift_release_n();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v32 + 12) = 2080;
    v116 = v111;
    v117 = a8;
    swift_bridgeObjectRetain_n();
    sub_21FC5BE08();
    v33 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_21FC5BAF0();
    swift_unknownObjectRelease();
    v34 = sub_21FC5B64C();
    v36 = v35;
    swift_bridgeObjectRelease();
    v116 = sub_21FABDCF8(v34, v36, &v115);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease_n();
    v23 = v107;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v28, (os_log_type_t)v106, "%s: key with ID “%s” found", (uint8_t *)v32, 0x16u);
    v37 = v105;
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v37, -1, -1);
    MEMORY[0x2207D105C](v32, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    swift_release_n();
  }
  v88 = v108;
  sub_21FA32314(v23, v108);
  sub_21FA32314(v23, v88);
  sub_21FC5B634();
  sub_21FC5B61C();
  v116 = 0x3A227379656B227BLL;
  v117 = 0xE90000000000005BLL;
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  sub_21FC5B634();
  v89 = sub_21FC5B610();
  v91 = v90;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  v92 = v109;
  v93 = *v109;
  v94 = sub_21FC14110(v89, v91, 1);
  sub_21FA2D120((uint64_t)(v92 + 2), (uint64_t)v118, (uint64_t (*)(_QWORD))sub_21FC14D8C);
  v96 = v92[7];
  v95 = v92[8];
  v116 = (uint64_t)v93;
  v117 = (unint64_t)v94;
  v119 = v96;
  v120 = v95;
  swift_bridgeObjectRetain();
  sub_21FA3239C(v89, v91);
  sub_21FA2D770(v23, v88);
  sub_21FA2D770(v23, v88);
  v121 = 0;
  v113(&v116);
  sub_21FA2D770(v23, v88);
  return sub_21FC15620((uint64_t)&v116);
}

void sub_21FC138B4(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(id, void *);
  id v6;
  id v7;

  v5 = *(void (**)(id, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(v7, a3);
  swift_release();

}

uint64_t sub_21FC13928(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  id v15;
  _DWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  id v23;
  _OWORD v25[4];
  uint64_t v26;

  type metadata accessor for IssuerDirectoryDownloadTaskScheduler();
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  v15 = a4;
  swift_retain();
  v16 = (_DWORD *)swift_slowAlloc();
  *v16 = 0;
  *(_QWORD *)(v14 + 40) = v16;
  *(_OWORD *)(v14 + 48) = xmmword_21FC6FA90;
  type metadata accessor for IssuerDirectoryDownloadTaskManager();
  v17 = (_QWORD *)swift_allocObject();
  v18 = sub_21FBC9140(v14, a3, a4, v17);
  sub_21FC14C3C(a7, v25);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a3;
  *(_QWORD *)(v19 + 24) = a4;
  *(_QWORD *)(v19 + 32) = a5;
  *(_QWORD *)(v19 + 40) = a6;
  *(_QWORD *)(v19 + 48) = a1;
  *(_QWORD *)(v19 + 56) = a2;
  v20 = v25[3];
  *(_OWORD *)(v19 + 96) = v25[2];
  *(_OWORD *)(v19 + 112) = v20;
  *(_QWORD *)(v19 + 128) = v26;
  v21 = v25[1];
  *(_OWORD *)(v19 + 64) = v25[0];
  *(_OWORD *)(v19 + 80) = v21;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v18;
  *(_BYTE *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 32) = sub_21FC155C4;
  *(_QWORD *)(v22 + 40) = v19;
  swift_retain();
  v23 = v15;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_21FABF0E0(0, (uint64_t)sub_21FBC9298, v22);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_21FC13AD8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, unint64_t a7, void (*a8)(_QWORD), uint64_t a9, uint64_t a10)
{
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  id v37;
  id v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  id v42;
  uint64_t v44;
  void (*v45)(_QWORD);
  id v46;
  uint64_t v47;
  uint64_t v48[9];
  char v49;

  if (a1)
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v14 = sub_21FC5AFD4();
    __swift_project_value_buffer(v14, (uint64_t)qword_25406D830);
    v15 = a5;
    swift_bridgeObjectRetain();
    swift_retain();
    v16 = sub_21FC5AFC8();
    v17 = sub_21FC5B994();
    if (os_log_type_enabled(v16, v17))
    {
      v45 = a8;
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v48[0] = v19;
      *(_DWORD *)v18 = 136315138;
      swift_bridgeObjectRetain();
      v47 = sub_21FABDCF8(a6, a7, v48);
      sub_21FC5BAC0();

      swift_release();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_21FA27000, v16, v17, "%s: public key OTA download completed", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v19, -1, -1);
      v20 = v18;
      a8 = v45;
      MEMORY[0x2207D105C](v20, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
      swift_release();
    }
    sub_21FC14C3C(a10, v48);
    v49 = 0;
  }
  else
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v22 = sub_21FC5AFD4();
    __swift_project_value_buffer(v22, (uint64_t)qword_25406D830);
    swift_retain();
    v23 = a5;
    swift_bridgeObjectRetain();
    v24 = a3;
    swift_retain();
    v25 = v23;
    swift_bridgeObjectRetain();
    v26 = a3;
    v27 = sub_21FC5AFC8();
    v28 = sub_21FC5B97C();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc();
      v44 = swift_slowAlloc();
      v47 = v44;
      *(_DWORD *)v29 = 136315394;
      swift_bridgeObjectRetain();
      v48[0] = sub_21FABDCF8(a6, a7, &v47);
      sub_21FC5BAC0();

      swift_release_n();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v29 + 12) = 2080;
      if (a3)
      {
        v48[0] = (uint64_t)a3;
        v30 = a3;
        v31 = a3;
        v32 = a3;
        sub_21FA50724(0, (unint64_t *)&qword_25406BB50);
        sub_21FA5BE58(0, &qword_25554D668);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v33 = objc_msgSend(v46, sel_hrs_safelyLoggableDescription);
          v34 = sub_21FC5B604();
          v36 = v35;

        }
        else
        {
          v48[0] = (uint64_t)a3;
          v37 = a3;
          sub_21FC5BE08();
          v38 = (id)HKSensitiveLogItem();
          swift_unknownObjectRelease();
          sub_21FC5BAF0();
          swift_unknownObjectRelease();
          v34 = sub_21FC5B64C();
          v36 = v39;
        }

      }
      else
      {
        v36 = 0xE500000000000000;
        v34 = 0x7D6C696E7BLL;
      }
      v48[0] = sub_21FABDCF8(v34, v36, &v47);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_21FA27000, v27, v28, "%s: public key OTA download failed: %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v44, -1, -1);
      MEMORY[0x2207D105C](v29, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n();

      swift_release_n();
    }
    v40 = (uint64_t)a3;
    if (!a3)
    {
      sub_21FC14C9C();
      v40 = swift_allocError();
      *v41 = 0;
    }
    v48[0] = v40;
    v49 = 1;
    v42 = a3;
  }
  a8(v48);
  return sub_21FC15620((uint64_t)v48);
}

BOOL static WellKnownJWKSHandlerError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t WellKnownJWKSHandlerError.hash(into:)()
{
  return sub_21FC5BE98();
}

uint64_t WellKnownJWKSHandlerError.hashValue.getter()
{
  sub_21FC5BE8C();
  sub_21FC5BE98();
  return sub_21FC5BEB0();
}

id sub_21FC14110(uint64_t a1, unint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = v3;
  v35 = a3;
  sub_21FA32580();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(v4, sel_rawData);
  v11 = sub_21FC5A9EC();
  v33 = v12;
  v34 = v11;

  v13 = objc_msgSend(v4, sel_sourceType);
  v14 = objc_msgSend(v4, sel_sourceURL);
  if (v14)
  {
    v15 = v14;
    sub_21FC5A950();

    v16 = sub_21FC5A98C();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v9, 0, 1, v16);
  }
  else
  {
    v17 = sub_21FC5A98C();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 1, 1, v17);
  }
  v18 = objc_msgSend(v4, sel_issuerIdentifier);
  if (v18)
  {
    v19 = v18;
    v20 = sub_21FC5B604();
    v22 = v21;

  }
  else
  {
    v20 = 0;
    v22 = 0;
  }
  v23 = objc_msgSend(v4, sel_signingKeyID);
  if (v23)
  {
    v24 = v23;
    v25 = sub_21FC5B604();
    v27 = v26;

  }
  else
  {
    v25 = 0;
    v27 = 0;
  }
  v28 = objc_msgSend(v4, sel_metadata);
  if (v28)
  {
    v29 = v28;
    sub_21FC15050();
    v30 = sub_21FC5B568();

  }
  else
  {
    v30 = 0;
  }
  objc_allocWithZone(MEMORY[0x24BE48998]);
  sub_21FA3277C(a1, a2);
  return sub_21FC14360(v34, v33, (uint64_t)v13, (uint64_t)v9, v20, v22, v25, v27, a1, a2, v35, v30);
}

id sub_21FC14360(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v29;

  v16 = (void *)sub_21FC5A9D4();
  v17 = sub_21FC5A98C();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(a4, 1, v17) != 1)
  {
    v19 = (void *)sub_21FC5A920();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a4, v17);
  }
  if (a6)
  {
    v20 = (void *)sub_21FC5B5E0();
    swift_bridgeObjectRelease();
    v21 = a10;
    if (a8)
    {
LABEL_5:
      v22 = (void *)sub_21FC5B5E0();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
  }
  else
  {
    v20 = 0;
    v21 = a10;
    if (a8)
      goto LABEL_5;
  }
  v22 = 0;
LABEL_8:
  if (v21 >> 60 != 15)
  {
    v23 = (void *)sub_21FC5A9D4();
    sub_21FA3239C(a9, v21);
    v24 = a11;
    if (a12)
      goto LABEL_10;
LABEL_12:
    v25 = 0;
    goto LABEL_13;
  }
  v23 = 0;
  v24 = a11;
  if (!a12)
    goto LABEL_12;
LABEL_10:
  sub_21FC15050();
  v25 = (void *)sub_21FC5B55C();
  swift_bridgeObjectRelease();
LABEL_13:
  v26 = objc_msgSend(v29, sel_initWithRawData_sourceType_sourceURL_issuerIdentifier_signingKeyID_JWKSData_JWKSOutcome_metadata_, v16, a3, v19, v20, v22, v23, v24, v25);
  sub_21FA2D770(a1, a2);

  return v26;
}

uint64_t sub_21FC14534(unint64_t a1, void *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  id v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v2 = a1;
  if (a1 >> 62)
    goto LABEL_15;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v4 = MEMORY[0x24BEE4AF8];
    if (!v3)
      return v4;
    v16 = MEMORY[0x24BEE4AF8];
    result = sub_21FC01DD8(0, v3 & ~(v3 >> 63), 0);
    if (v3 < 0)
      break;
    v6 = 0;
    v4 = v16;
    v14 = v2 & 0xC000000000000001;
    v7 = v2;
    while (v3 != v6)
    {
      if (v14)
        v8 = (id)MEMORY[0x2207D057C](v6, v2);
      else
        v8 = *(id *)(v2 + 8 * v6 + 32);
      v9 = v8;
      v10 = *(_QWORD *)(v16 + 16);
      v11 = *(_QWORD *)(v16 + 24);
      v12 = a2;
      if (v10 >= v11 >> 1)
        sub_21FC01DD8(v11 > 1, v10 + 1, 1);
      ++v6;
      *(_QWORD *)(v16 + 16) = v10 + 1;
      v13 = v16 + 72 * v10;
      *(_QWORD *)(v13 + 32) = v12;
      *(_QWORD *)(v13 + 40) = v9;
      *(_OWORD *)(v13 + 48) = 0u;
      *(_OWORD *)(v13 + 64) = 0u;
      *(_OWORD *)(v13 + 80) = 0u;
      *(_QWORD *)(v13 + 96) = 0;
      v2 = v7;
      if (v3 == v6)
        return v4;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v3 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_21FC146B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FC15474(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))sub_21FC10B34, a3, a4);
}

uint64_t sub_21FC146BC()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t sub_21FC146E4()
{
  unint64_t result;

  result = qword_25554D580;
  if (!qword_25554D580)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for WellKnownJWKSHandlerError, &type metadata for WellKnownJWKSHandlerError);
    atomic_store(result, (unint64_t *)&qword_25554D580);
  }
  return result;
}

uint64_t destroy for WellKnownJWKSHandler(uint64_t a1)
{
  swift_release();

  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for WellKnownJWKSHandler(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for WellKnownJWKSHandler(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = (void *)a1[1];
  v5 = (void *)a2[1];
  a1[1] = v5;
  v6 = v5;

  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for WellKnownJWKSHandler(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  swift_release();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for WellKnownJWKSHandler()
{
  return &type metadata for WellKnownJWKSHandler;
}

uint64_t storeEnumTagSinglePayload for WellKnownJWKSHandlerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_21FC148C0 + 4 * byte_21FC71485[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_21FC148F4 + 4 * byte_21FC71480[v4]))();
}

uint64_t sub_21FC148F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FC148FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FC14904);
  return result;
}

uint64_t sub_21FC14910(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FC14918);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_21FC1491C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FC14924(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WellKnownJWKSHandlerError()
{
  return &type metadata for WellKnownJWKSHandlerError;
}

uint64_t destroy for WellKnownJWKSProcessingContext(uint64_t a1)
{

  if (*(_QWORD *)(a1 + 40))
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for WellKnownJWKSProcessingContext(_QWORD *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v4 = *(void **)a2;
  v5 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v5;
  v6 = a1 + 2;
  v7 = a2 + 16;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = v4;
  v10 = v5;
  if (v8)
  {
    v11 = *(_QWORD *)(a2 + 48);
    a1[5] = v8;
    a1[6] = v11;
    (**(void (***)(_QWORD *, uint64_t, uint64_t))(v8 - 8))(v6, v7, v8);
  }
  else
  {
    v12 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)v6 = *(_OWORD *)v7;
    *((_OWORD *)v6 + 1) = v12;
    v6[4] = *(_QWORD *)(v7 + 32);
  }
  v13 = *(_QWORD *)(a2 + 64);
  a1[7] = *(_QWORD *)(a2 + 56);
  a1[8] = v13;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WellKnownJWKSProcessingContext(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  v10 = *(_QWORD *)(a2 + 40);
  if (!*(_QWORD *)(a1 + 40))
  {
    if (v10)
    {
      *(_QWORD *)(a1 + 40) = v10;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 16, a2 + 16);
      goto LABEL_8;
    }
LABEL_7:
    v11 = *(_OWORD *)(a2 + 16);
    v12 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 16) = v11;
    *(_OWORD *)(a1 + 32) = v12;
    goto LABEL_8;
  }
  if (!v10)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
LABEL_8:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for WellKnownJWKSProcessingContext(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  if (*(_QWORD *)(a1 + 40))
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WellKnownJWKSProcessingContext(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WellKnownJWKSProcessingContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WellKnownJWKSProcessingContext()
{
  return &type metadata for WellKnownJWKSProcessingContext;
}

_QWORD *sub_21FC14C3C(uint64_t a1, _QWORD *a2)
{
  initializeWithCopy for WellKnownJWKSProcessingContext(a2, a1);
  return a2;
}

uint64_t sub_21FC14C70(uint64_t a1)
{
  destroy for WellKnownJWKSProcessingContext(a1);
  return a1;
}

unint64_t sub_21FC14C9C()
{
  unint64_t result;

  result = qword_25554D588;
  if (!qword_25554D588)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for WellKnownJWKSHandlerError, &type metadata for WellKnownJWKSHandlerError);
    atomic_store(result, (unint64_t *)&qword_25554D588);
  }
  return result;
}

void sub_21FC14CE0()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25554D598)
  {
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FA5D3F8(255, &qword_25554D520, (uint64_t)&type metadata for WellKnownJWKSProcessingContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FC1538C(&qword_25554D528, &qword_25554D520, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    v1 = sub_21FC5B100();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25554D598);
  }
}

void sub_21FC14D8C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554A840)
  {
    sub_21FA50724(255, (unint64_t *)&qword_25553FE38);
    v0 = sub_21FC5BAA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554A840);
  }
}

uint64_t sub_21FC14DF4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FC11CB0(a1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

void sub_21FC14E00()
{
  uint64_t (*v0)(void);
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (!qword_25554D5B0)
  {
    sub_21FA30BA4(255);
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FA5D3F8(255, &qword_25554D5B8, (uint64_t)&type metadata for WebRequestResponse, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    v1 = MEMORY[0x24BDB9AF8];
    sub_21FA2A08C(&qword_25553E2B0, (uint64_t (*)(uint64_t))sub_21FA30BA4, MEMORY[0x24BDB9AF8]);
    sub_21FC14EEC(&qword_25554D5C0, &qword_25554D5B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v0, v1);
    v2 = sub_21FC5B0A0();
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_25554D5B0);
  }
}

uint64_t sub_21FC14EEC(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FA5D3F8(255, a2, (uint64_t)&type metadata for WebRequestResponse, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_21FC14F38(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, ValueMetadata *, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a4();
    v11 = a5(a1, v9, &type metadata for WellKnownJWKSProcessingContext, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

uint64_t sub_21FC14FB0()
{
  return sub_21FA2A08C(&qword_25554D5D0, (uint64_t (*)(uint64_t))sub_21FC14E00, MEMORY[0x24BDB9740]);
}

uint64_t sub_21FC14FD0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FC123E8(a1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

uint64_t sub_21FC14FE0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_21FC127E8(a1, v2 + 16, a2);
}

unint64_t sub_21FC14FE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25554D5D8;
  if (!qword_25554D5D8)
  {
    sub_21FC14F38(255, &qword_25554D5C8, (uint64_t (*)(uint64_t))sub_21FC14E00, sub_21FC14FB0, (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *, uint64_t))MEMORY[0x24BDB96B0]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB96C0], v1);
    atomic_store(result, (unint64_t *)&qword_25554D5D8);
  }
  return result;
}

unint64_t sub_21FC15050()
{
  unint64_t result;

  result = qword_25554D5E0;
  if (!qword_25554D5E0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_25554D5E0);
  }
  return result;
}

void sub_21FC15098()
{
  uint64_t (*v0)(void);
  uint64_t (*v1)(void);
  unint64_t v2;
  uint64_t v3;

  if (!qword_25554D610)
  {
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FA5D3F8(255, &qword_25554D520, (uint64_t)&type metadata for WellKnownJWKSProcessingContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    v1 = MEMORY[0x24BDB9DE0];
    sub_21FA80754(255, &qword_25554D600, (uint64_t)&type metadata for WellKnownJWKSProcessingContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDB9DE0]);
    sub_21FC1538C(&qword_25554D528, &qword_25554D520, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    sub_21FC151A0(&qword_25554D618, &qword_25554D600, (uint64_t (*)(_QWORD, uint64_t))v1, MEMORY[0x24BDB9DF8]);
    v2 = sub_21FC5B0A0();
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_25554D610);
  }
}

uint64_t sub_21FC151A0(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FA80754(255, a2, (uint64_t)&type metadata for WellKnownJWKSProcessingContext, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_21FC151EC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t (*v7)(void);
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = MEMORY[0x24BDB9AE0];
    sub_21FA5D3F8(255, &qword_25554D520, (uint64_t)&type metadata for WellKnownJWKSProcessingContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    a3(255);
    sub_21FC1538C(&qword_25554D528, &qword_25554D520, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v7, MEMORY[0x24BDB9AF8]);
    a4();
    v8 = sub_21FC5B100();
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_21FC152BC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D628)
  {
    sub_21FC15098();
    sub_21FA50724(255, (unint64_t *)&qword_25406BB50);
    sub_21FA2A08C(&qword_25554D630, (uint64_t (*)(uint64_t))sub_21FC15098, MEMORY[0x24BDB9740]);
    v0 = sub_21FC5B04C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D628);
  }
}

uint64_t sub_21FC15370()
{
  return sub_21FA2A08C(&qword_25554D638, (uint64_t (*)(uint64_t))sub_21FC152BC, MEMORY[0x24BDB95F8]);
}

uint64_t sub_21FC1538C(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FA5D3F8(255, a2, (uint64_t)&type metadata for WellKnownJWKSProcessingContext, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t objectdestroy_11Tm_0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 56))
    __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21FC15420()
{
  uint64_t v0;
  _QWORD v2[9];

  sub_21FC14C3C(v0 + 16, v2);
  return sub_21FC5B22C();
}

uint64_t sub_21FC15468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FC15474(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))sub_21FC116B0, a3, a4);
}

uint64_t sub_21FC15474(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  return a2(a1, a2, a3, a4);
}

uint64_t sub_21FC154B4(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    sub_21FC151EC(255, a2, a3, a4);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB98F0], v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FC154F4()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 88))
    __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21FC15550(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_21FC13928(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), v2 + 48);
}

uint64_t sub_21FC15560()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  swift_release();

  if (*(_QWORD *)(v0 + 104))
    __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21FC155C4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_21FC13AD8(a1, a2, a3, *(_QWORD *)(v3 + 16), *(void **)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(void (**)(_QWORD))(v3 + 48), *(_QWORD *)(v3 + 56), v3 + 64);
}

uint64_t sub_21FC155F4()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FC15620(uint64_t a1)
{
  uint64_t v2;

  sub_21FA5D3F8(0, &qword_25554D660, (uint64_t)&type metadata for WellKnownJWKSProcessingContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE4408]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21FC15674()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 112))
    __swift_destroy_boxed_opaque_existential_1(v0 + 88);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_21FC156E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_21FC1285C(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(void **)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), v2 + 72);
}

uint64_t sub_21FC15714()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  if (*(_QWORD *)(v0 + 120))
    __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21FC15780(void *a1, void *a2)
{
  uint64_t v2;

  return sub_21FC129B8(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(void (**)(uint64_t *))(v2 + 64), *(_QWORD *)(v2 + 72), (id *)(v2 + 80));
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

void sub_21FC157D4(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  id v26;
  char v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v31;
  id v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v5 = v4;
  v31 = a3;
  v36 = sub_21FC5AD28();
  v30 = *(_QWORD *)(v36 - 8);
  v9 = MEMORY[0x24BDAC7A8](v36);
  v29 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v29 - v11;
  v13 = type metadata accessor for PBDeleteBlobsResponse(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_21FC5AD58();
  MEMORY[0x24BDAC7A8](v16);
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  sub_21FA32314(a1, a2);
  sub_21FC5AD4C();
  sub_21FA2A08C(&qword_255542368, type metadata accessor for PBDeleteBlobsResponse, (uint64_t)&protocol conformance descriptor for PBDeleteBlobsResponse);
  sub_21FC5AE84();
  if (!v4)
  {
    v25 = v31;
    v26 = objc_msgSend(v32, sel_statusCode);
    sub_21FC15AF4(a4, (uint64_t)v15);
    if (v26 != (id)207 || (v25 & 1) == 0)
    {
      sub_21FC15B38((uint64_t)v15);
      return;
    }
    v27 = sub_21FC51AD8();
    sub_21FC15B38((uint64_t)v15);
    if ((v27 & 1) == 0)
      return;
    sub_21FA6A4E8();
    v5 = (void *)swift_allocError();
    *(_QWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = 0;
    *(_QWORD *)(v28 + 16) = 0;
    *(_QWORD *)(v28 + 24) = 0;
    *(_BYTE *)(v28 + 32) = 6;
    swift_willThrow();
    sub_21FC15B38(a4);
  }
  *(_QWORD *)&v33 = v5;
  v17 = v5;
  sub_21FA2CDB4();
  v18 = v36;
  if (swift_dynamicCast())
  {

    v20 = v29;
    v19 = v30;
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v29, v12, v18);
    sub_21FA2A08C(&qword_255540838, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF78], MEMORY[0x24BE5BF80]);
    v21 = sub_21FC5BE44();
    v23 = v22;
    sub_21FA6A4E8();
    swift_allocError();
    *(_QWORD *)v24 = v21;
    *(_QWORD *)(v24 + 8) = v23;
    *(_QWORD *)(v24 + 16) = 0xD000000000000015;
    *(_QWORD *)(v24 + 24) = 0x800000021FC7DD20;
    *(_BYTE *)(v24 + 32) = 4;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v18);
  }

}

uint64_t sub_21FC15AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PBDeleteBlobsResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FC15B38(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PBDeleteBlobsResponse(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void destroy for ClinicalSharingStatisticsQuery(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for ClinicalSharingStatisticsQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v5 = *(void **)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  v6 = v5;
  return a1;
}

uint64_t assignWithCopy for ClinicalSharingStatisticsQuery(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a2 + 16);
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

__n128 __swift_memcpy34_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ClinicalSharingStatisticsQuery(uint64_t a1, uint64_t a2)
{
  void *v4;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClinicalSharingStatisticsQuery(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 34))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClinicalSharingStatisticsQuery(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 34) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 34) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingStatisticsQuery()
{
  return &type metadata for ClinicalSharingStatisticsQuery;
}

uint64_t sub_21FC15D90(void (*a1)(_QWORD *__return_ptr, char *))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];
  void (*v13)(_QWORD *__return_ptr, char *);

  v13 = a1;
  v3 = sub_21FC5AAAC();
  v4 = (void (*)(uint64_t))MEMORY[0x24BDCE900];
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2ED54(0, (unint64_t *)&qword_25406AAE8, v4);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v12 - v9;
  sub_21FA6A498(v1, (uint64_t)v12 - v9, (unint64_t *)&qword_25406AAE8, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v3) == 1)
    return 0;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v3);
  v13(v12, v7);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v3);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v3);
  return v12[0];
}

uint64_t sub_21FC15F04@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  void (*v19)(char *);

  v5 = v3;
  v18[1] = a2;
  v19 = a1;
  v7 = sub_21FC5A6C8();
  v8 = (void (*)(uint64_t))MEMORY[0x24BDCB878];
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2ED54(0, &qword_25553E0E8, v8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v18 - v13;
  sub_21FA6A498(v5, (uint64_t)v18 - v13, &qword_25553E0E8, v8);
  v15 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v7) == 1)
  {
    v16 = a3;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v7);
    v16 = a3;
    v19(v11);
    if (v4)
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v7);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
    v15 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v16, v15, 1, v7);
}

uint64_t sub_21FC16094()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  uint64_t v46;
  __int128 v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  __int128 v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, uint64_t, uint64_t);
  id v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  _QWORD v110[4];
  __int128 v111;
  __int128 v112;
  __int16 v113;

  sub_21FAA3A14();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_21FC5B94C();
  v91 = *(_QWORD *)(v93 - 8);
  MEMORY[0x24BDAC7A8](v93);
  v88 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FABB1D4();
  v95 = v7;
  v94 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v92 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2ED54(0, &qword_25553E0E8, (void (*)(uint64_t))MEMORY[0x24BDCB878]);
  MEMORY[0x24BDAC7A8](v9);
  v89 = (uint64_t)&v80 - v10;
  v90 = sub_21FC5A83C();
  v87 = *(_QWORD *)(v90 - 8);
  MEMORY[0x24BDAC7A8](v90);
  v86 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_21FC5AC08();
  v101 = *(_QWORD *)(v84 - 8);
  MEMORY[0x24BDAC7A8](v84);
  v100 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC17BC0(0, &qword_25554D670, (void (*)(uint64_t))type metadata accessor for PBTypedData);
  v14 = v13;
  v98 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v96 = (char *)&v80 - v15;
  sub_21FC17BC0(0, &qword_25554D678, (void (*)(uint64_t))type metadata accessor for ClinicalSharingQueryOutput);
  v17 = v16;
  v99 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v97 = (char *)&v80 - v18;
  v102 = sub_21FC5AAAC();
  v107 = *(_QWORD *)(v102 - 8);
  v19 = MEMORY[0x24BDAC7A8](v102);
  v85 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v80 - v21;
  v23 = sub_21FC5A6C8();
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v80 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = *((_WORD *)v0 + 16);
  v27 = v0[1];
  v111 = *v0;
  v112 = v27;
  v28 = *(_QWORD *)(*((_QWORD *)&v111 + 1) + 16);
  if (v28)
  {
    v81 = v14;
    v82 = v17;
    v83 = *((_QWORD *)&v111 + 1);
    if (v28 == 1)
    {
      v29 = v24;
      (*(void (**)(char *, unint64_t, uint64_t))(v24 + 16))(v26, *((_QWORD *)&v111 + 1)+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80)), v23);
      v30 = (void *)objc_opt_self();
      sub_21FC5A6A4();
      v31 = (void *)sub_21FC5AA64();
      v32 = *(void (**)(char *, uint64_t))(v107 + 8);
      v33 = v102;
      v32(v22, v102);
      sub_21FC5A680();
      v34 = (void *)sub_21FC5AA64();
      v32(v22, v33);
      v35 = objc_msgSend(v30, sel_predicateForSamplesWithStartDate_endDate_options_, v31, v34, 0);

      (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v23);
    }
    else
    {
      v110[0] = MEMORY[0x24BEE4AF8];
      v37 = *((_QWORD *)&v111 + 1);
      v38 = v24;
      swift_bridgeObjectRetain();
      sub_21FC5BC04();
      v39 = (void *)objc_opt_self();
      v40 = v37 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80));
      v104 = *(id *)(v38 + 72);
      v105 = v39;
      v106 = v38;
      v103 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 16);
      v41 = v102;
      do
      {
        v103(v26, v40, v23);
        sub_21FC5A6A4();
        v42 = (void *)sub_21FC5AA64();
        v32 = *(void (**)(char *, uint64_t))(v107 + 8);
        v32(v22, v41);
        sub_21FC5A680();
        v43 = (void *)sub_21FC5AA64();
        v32(v22, v41);
        v44 = objc_msgSend(v105, sel_predicateForSamplesWithStartDate_endDate_options_, v42, v43, 0);

        (*(void (**)(char *, uint64_t))(v106 + 8))(v26, v23);
        sub_21FC5BBE0();
        sub_21FC5BC10();
        sub_21FC5BC1C();
        sub_21FC5BBEC();
        v40 += (uint64_t)v104;
        --v28;
      }
      while (v28);
      swift_bridgeObjectRelease();
      sub_21FA5BE58(0, &qword_255540560);
      v45 = (void *)sub_21FC5B79C();
      swift_release();
      v35 = objc_msgSend((id)objc_opt_self(), sel_orPredicateWithSubpredicates_, v45);

    }
    v46 = v113;
    v47 = v112;
    v48 = (id)v112;
    v49 = sub_21FBE6F50(0x7374617473, 0xE500000000000000, v47, *((_QWORD *)&v47 + 1), v46);
    v107 = v50;

    v51 = v111;
    sub_21FA2CEA0(v111 + 16, (uint64_t)v110);
    __swift_project_boxed_opaque_existential_1(v110, v110[3]);
    objc_opt_self();
    v105 = v48;
    v52 = (void *)swift_dynamicCastObjCClass();
    v53 = v35;
    v54 = v84;
    v106 = v49;
    if (v52 && (unint64_t)objc_msgSend(v52, sel_aggregationStyle) <= 2)
      v55 = v53;
    else
      v55 = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v101 + 16))(v100, v51 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_gregorianCalendar, v54);
    v56 = v51 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_date;
    v57 = (uint64_t)v85;
    if ((_DWORD)v46 && ((1 << SBYTE8(v47)) & 0x67) == 0)
    {
      sub_21FBF3FA8((uint64_t)&v111);
      if (*((_QWORD *)&v47 + 1) == 3)
      {
        v78 = v56;
        v58 = v100;
        sub_21FAC9234(0, v78, v57);
      }
      else
      {
        v79 = v56;
        v58 = v100;
        sub_21FAC96CC(v79, v57);
      }
    }
    else
    {
      sub_21FBF3FA8((uint64_t)&v111);
      v58 = v100;
      sub_21FC5AB30();
    }
    (*(void (**)(char *, uint64_t))(v101 + 8))(v58, v54);
    sub_21FBF3FE8((uint64_t)&v111);
    v108 = *((_QWORD *)&v47 + 1);
    v109 = v46;
    v59 = v86;
    sub_21FAAD8F0();
    v60 = swift_bridgeObjectRetain();
    v61 = v89;
    sub_21FBE89DC(v60, v89);
    swift_bridgeObjectRelease();
    v62 = v88;
    v104 = v55;
    sub_21FC5B958();
    sub_21FA5BE58(0, &qword_255540AE8);
    sub_21FA2A08C(&qword_255540B58, (uint64_t (*)(uint64_t))MEMORY[0x24BE45AF0], MEMORY[0x24BE45AE8]);
    v63 = v92;
    v64 = v57;
    v65 = v93;
    sub_21FC5B2C8();
    (*(void (**)(char *, uint64_t))(v91 + 8))(v62, v65);
    sub_21FA2A08C(qword_255540B60, (uint64_t (*)(uint64_t))sub_21FABB1D4, MEMORY[0x24BDB96C0]);
    v66 = v95;
    v67 = sub_21FC5B280();
    (*(void (**)(char *, uint64_t))(v94 + 8))(v63, v66);
    v68 = v104;

    swift_bridgeObjectRelease();
    sub_21FA2EDA0(v61, &qword_25553E0E8, (void (*)(uint64_t))MEMORY[0x24BDCB878]);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v59, v90);
    v32((char *)v64, v102);
    v108 = v67;
    v69 = swift_allocObject();
    v70 = v112;
    *(_OWORD *)(v69 + 16) = v111;
    *(_OWORD *)(v69 + 32) = v70;
    *(_WORD *)(v69 + 48) = v113;
    sub_21FBF3FA8((uint64_t)&v111);
    sub_21FABAC40();
    type metadata accessor for PBTypedData(0);
    sub_21FA2A08C(&qword_255540AF0, (uint64_t (*)(uint64_t))sub_21FABAC40, MEMORY[0x24BDB9AF8]);
    v71 = v96;
    sub_21FC5B28C();
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v110);
    v72 = swift_allocObject();
    v73 = v112;
    *(_OWORD *)(v72 + 16) = v111;
    *(_OWORD *)(v72 + 32) = v73;
    *(_WORD *)(v72 + 48) = v113;
    sub_21FBF3FA8((uint64_t)&v111);
    type metadata accessor for ClinicalSharingQueryOutput(0);
    v74 = v97;
    v75 = v81;
    sub_21FC5AFF8();
    swift_release();
    (*(void (**)(char *, uint64_t))(v98 + 8))(v71, v75);
    sub_21FC17CDC();
    v76 = v82;
    v36 = sub_21FC5B280();

    (*(void (**)(char *, uint64_t))(v99 + 8))(v74, v76);
  }
  else
  {
    type metadata accessor for ClinicalSharingQueryOutput(0);
    sub_21FA2CDB4();
    sub_21FC5B238();
    sub_21FA2A08C((unint64_t *)&qword_255540568, (uint64_t (*)(uint64_t))sub_21FAA3A14, MEMORY[0x24BDB9E20]);
    v36 = sub_21FC5B280();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return v36;
}

void sub_21FC16B9C(void *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  _QWORD *v41;
  id v42;
  uint64_t v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  _QWORD *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  id v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int16 v61;

  v56 = a1;
  v57 = a2;
  sub_21FA2ED54(0, &qword_25553E0F8, (void (*)(uint64_t))type metadata accessor for PBDateRange);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v52 - v4;
  v54 = type metadata accessor for PBDateRange(0);
  v6 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8](v54);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PBTimeSeries(0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v52 - v13;
  sub_21FA2ED54(0, &qword_25553E0E8, (void (*)(uint64_t))MEMORY[0x24BDCB878]);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v52 - v16;
  v18 = v2[1];
  v59 = *v2;
  v60 = v18;
  v61 = *((_WORD *)v2 + 16);
  v19 = (void *)v18;
  objc_opt_self();
  v20 = swift_dynamicCastObjCClass();
  if (!v20)
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v37 = sub_21FC5AFD4();
    __swift_project_value_buffer(v37, (uint64_t)qword_25406D830);
    sub_21FBF3FA8((uint64_t)&v59);
    sub_21FBF3FA8((uint64_t)&v59);
    v38 = sub_21FC5AFC8();
    v39 = sub_21FC5B988();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      v41 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v40 = 138412290;
      v58 = (uint64_t)v19;
      v42 = v19;
      sub_21FC5BAC0();
      *v41 = v19;
      sub_21FBF3FE8((uint64_t)&v59);
      sub_21FBF3FE8((uint64_t)&v59);
      _os_log_impl(&dword_21FA27000, v38, v39, "%@ is not a quantity type", v40, 0xCu);
      sub_21FADEAA0();
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v41, -1, -1);
      MEMORY[0x2207D105C](v40, -1, -1);
    }
    else
    {
      sub_21FBF3FE8((uint64_t)&v59);
      sub_21FBF3FE8((uint64_t)&v59);
    }

    goto LABEL_23;
  }
  v21 = v20;
  v22 = v19;
  v55 = sub_21FC20F30();
  if (!v55)
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v43 = sub_21FC5AFD4();
    __swift_project_value_buffer(v43, (uint64_t)qword_25406D830);
    v44 = v22;
    v45 = sub_21FC5AFC8();
    v46 = sub_21FC5B988();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      v48 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v47 = 138412290;
      v58 = v21;
      v49 = v44;
      sub_21FC5BAC0();
      *v48 = v21;

      _os_log_impl(&dword_21FA27000, v45, v46, "Missing encoding unit for %@", v47, 0xCu);
      sub_21FADEAA0();
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v48, -1, -1);
      MEMORY[0x2207D105C](v47, -1, -1);

    }
    else
    {

    }
LABEL_23:
    v51 = type metadata accessor for PBTypedData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v57, 1, 1, v51);
    return;
  }
  if ((uint64_t)objc_msgSend(v56, sel_statisticsCount) < 1)
  {
    v50 = type metadata accessor for PBTypedData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v57, 1, 1, v50);

  }
  else
  {
    v23 = sub_21FC5A6C8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v17, 1, 1, v23);
    sub_21FC5AD10();
    v24 = *(int *)(v9 + 20);
    if (qword_25553D7F8 != -1)
      swift_once();
    v53 = v22;
    *(_QWORD *)&v14[v24] = qword_2555438F0;
    swift_retain();
    v25 = objc_msgSend(v55, sel_unitString);
    v26 = sub_21FC5B604();
    v28 = v27;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBTimeSeries._StorageClass(0);
      swift_allocObject();
      v52 = v8;
      v29 = swift_retain();
      v8 = v52;
      *(_QWORD *)&v14[v24] = sub_21FB49070(v29);
      swift_release();
    }
    v30 = (uint64_t *)(*(_QWORD *)&v14[v24]
                    + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBTimeSeriesP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__unit);
    swift_beginAccess();
    *v30 = v26;
    v30[1] = v28;
    v31 = swift_bridgeObjectRelease();
    MEMORY[0x24BDAC7A8](v31);
    *(&v52 - 4) = v17;
    *(&v52 - 3) = (char *)&v59;
    *(&v52 - 2) = (char *)v55;
    v32 = sub_21FC178EC((uint64_t)sub_21FC17D34, (uint64_t)(&v52 - 6));
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBTimeSeries._StorageClass(0);
      swift_allocObject();
      v33 = swift_retain();
      *(_QWORD *)&v14[v24] = sub_21FB49070(v33);
      swift_release();
    }
    v34 = (uint64_t *)(*(_QWORD *)&v14[v24]
                    + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBTimeSeriesP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__values);
    swift_beginAccess();
    *v34 = v32;
    swift_bridgeObjectRelease();
    sub_21FBE871C(*((uint64_t *)&v60 + 1), v61, (uint64_t)v17, (uint64_t)v8);
    sub_21FA2D120((uint64_t)v8, (uint64_t)v5, type metadata accessor for PBDateRange);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v5, 0, 1, v54);
    v35 = v57;
    sub_21FBE9834((uint64_t)v5, v57);
    sub_21FA2EDA0((uint64_t)v5, &qword_25553E0F8, (void (*)(uint64_t))type metadata accessor for PBDateRange);
    sub_21FA2D120((uint64_t)v14, (uint64_t)v12, type metadata accessor for PBTimeSeries);
    PBTypedData.timeSeries.setter((uint64_t)v12);

    sub_21FA326EC((uint64_t)v8, type metadata accessor for PBDateRange);
    sub_21FA326EC((uint64_t)v14, type metadata accessor for PBTimeSeries);
    v36 = type metadata accessor for PBTypedData(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 0, 1, v36);
    sub_21FA2EDA0((uint64_t)v17, &qword_25553E0E8, (void (*)(uint64_t))MEMORY[0x24BDCB878]);
  }
}

uint64_t sub_21FC17354@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  id v23;
  id v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  char v35[16];
  char *v36;

  v33 = a4;
  v34 = a3;
  v29 = a2;
  v31 = a5;
  sub_21FA2ED54(0, &qword_25553E0E8, (void (*)(uint64_t))MEMORY[0x24BDCB878]);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v29 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v30 = (char *)&v29 - v13;
  v14 = sub_21FC5AAAC();
  v15 = MEMORY[0x24BDAC7A8](v14);
  MEMORY[0x24BDAC7A8](v15);
  v16 = sub_21FC5A6C8();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v29 - v21;
  v23 = objc_msgSend(a1, sel_startDate);
  sub_21FC5AA94();

  v32 = a1;
  v24 = objc_msgSend(a1, sel_endDate);
  sub_21FC5AA94();

  v25 = v29;
  sub_21FC5A68C();
  v26 = (void (*)(uint64_t))MEMORY[0x24BDCB878];
  sub_21FA6A498(v25, (uint64_t)v9, &qword_25553E0E8, (void (*)(uint64_t))MEMORY[0x24BDCB878]);
  v36 = v22;
  sub_21FC15F04((void (*)(char *))sub_21FC17DE8, (uint64_t)v35, (uint64_t)v12);
  sub_21FA2EDA0((uint64_t)v9, &qword_25553E0E8, v26);
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v22, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v12, 1, v16) == 1)
  {
    v27 = (uint64_t)v30;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v30, v20, v16);
    sub_21FA2EDA0((uint64_t)v12, &qword_25553E0E8, (void (*)(uint64_t))MEMORY[0x24BDCB878]);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    v27 = (uint64_t)v30;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v30, v12, v16);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v27, 0, 1, v16);
  sub_21FC17E10(v27, v25);
  sub_21FC17650(v32, v33, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v22, v16);
}

uint64_t sub_21FC17650@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  id v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v7 = sub_21FC5AAAC();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0xE000000000000000;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0xE000000000000000;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0xE000000000000000;
  *(_OWORD *)(a3 + 80) = 0u;
  v12 = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(a3 + 96) = 0u;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 120) = v12;
  *(_QWORD *)(a3 + 128) = 0;
  *(_WORD *)(a3 + 136) = 256;
  type metadata accessor for PBTimeSeries.Value(0);
  sub_21FC5AD10();
  v13 = objc_msgSend(a1, sel_minimumQuantity);
  if (v13)
  {
    v14 = v13;
    objc_msgSend(v13, sel_doubleValueForUnit_, a2);
    v16 = v15;

    *(_QWORD *)(a3 + 80) = v16;
  }
  v17 = objc_msgSend(a1, sel_maximumQuantity);
  if (v17)
  {
    v18 = v17;
    objc_msgSend(v17, sel_doubleValueForUnit_, a2);
    v20 = v19;

    *(_QWORD *)(a3 + 88) = v20;
  }
  v21 = objc_msgSend(a1, sel_averageQuantity);
  if (v21)
  {
    v22 = v21;
    objc_msgSend(v21, sel_doubleValueForUnit_, a2);
    v24 = v23;

    *(_QWORD *)(a3 + 96) = v24;
  }
  v25 = objc_msgSend(a1, sel_sumQuantity);
  if (v25)
  {
    v26 = v25;
    objc_msgSend(v25, sel_doubleValueForUnit_, a2);
    v28 = v27;

    *(_QWORD *)(a3 + 104) = v28;
  }
  result = (uint64_t)objc_msgSend(a1, sel_dataCount);
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    *(_DWORD *)(a3 + 40) = result;
    v30 = objc_msgSend(a1, sel_startDate);
    sub_21FC5AA94();

    v31 = *(id *)(v11 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_isoDateFormatter);
    v32 = (void *)sub_21FC5AA64();
    v33 = objc_msgSend(v31, sel_stringFromDate_, v32);

    v34 = sub_21FC5B604();
    v36 = v35;

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(a3 + 24) = v34;
    *(_QWORD *)(a3 + 32) = v36;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_21FC178EC(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v6;
  uint64_t v7;
  int isUniquelyReferenced_nonNull_native;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v15;
  _QWORD aBlock[6];
  uint64_t v17;

  v3 = v2;
  v6 = objc_msgSend(v2, sel_statisticsCount);
  v7 = MEMORY[0x24BEE4AF8];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v17 = v7;
  if (!isUniquelyReferenced_nonNull_native || (uint64_t)v6 > *(_QWORD *)(v7 + 24) >> 1)
  {
    if (*(_QWORD *)(v7 + 16) <= (uint64_t)v6)
      v9 = (int64_t)v6;
    else
      v9 = *(_QWORD *)(v7 + 16);
    sub_21FC01940(isUniquelyReferenced_nonNull_native, v9, 0);
  }
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = &v17;
  v10[3] = a1;
  v10[4] = a2;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = sub_21FC17D50;
  *(_QWORD *)(v11 + 24) = v10;
  aBlock[4] = sub_21FC17D6C;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_21FC17B7C;
  aBlock[3] = &block_descriptor_20;
  v12 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_enumeratePopulatedStatisticsWithBlock_, v12);
  _Block_release(v12);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v15 = v17;
    swift_release();
    return v15;
  }
  return result;
}

uint64_t sub_21FC17A7C(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v7 = type metadata accessor for PBTimeSeries.Value(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  a4(a1);
  v11 = *a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_21FC01940(0, *(_QWORD *)(v11 + 16) + 1, 1);
    v11 = *a3;
  }
  v14 = *(_QWORD *)(v11 + 16);
  v13 = *(_QWORD *)(v11 + 24);
  if (v14 >= v13 >> 1)
  {
    sub_21FC01940(v13 > 1, v14 + 1, 1);
    v11 = *a3;
  }
  *(_QWORD *)(v11 + 16) = v14 + 1;
  return sub_21FC17DA4((uint64_t)v10, v11+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v14);
}

void sub_21FC17B7C(uint64_t a1, void *a2)
{
  void (*v2)(void);
  id v3;

  v2 = *(void (**)(void))(a1 + 32);
  v3 = a2;
  v2();

}

void sub_21FC17BC0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_21FABAC40();
    a3(255);
    sub_21FA2A08C(&qword_255540AF0, (uint64_t (*)(uint64_t))sub_21FABAC40, MEMORY[0x24BDB9AF8]);
    v5 = sub_21FC5B004();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_21FC17C5C(void **a1@<X0>, uint64_t a2@<X8>)
{
  sub_21FC16B9C(*a1, a2);
}

uint64_t objectdestroyTm_11()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_21FC17CB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21FBE77DC(a1, 0, a2);
}

unint64_t sub_21FC17CDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25554D680;
  if (!qword_25554D680)
  {
    sub_21FC17BC0(255, &qword_25554D678, (void (*)(uint64_t))type metadata accessor for ClinicalSharingQueryOutput);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB94C8], v1);
    atomic_store(result, (unint64_t *)&qword_25554D680);
  }
  return result;
}

uint64_t sub_21FC17D34@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_21FC17354(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t sub_21FC17D40()
{
  return swift_deallocObject();
}

uint64_t sub_21FC17D50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_21FC17A7C(a1, a2, *(uint64_t **)(v2 + 16), *(void (**)(uint64_t))(v2 + 24));
}

uint64_t sub_21FC17D5C()
{
  return swift_deallocObject();
}

uint64_t sub_21FC17D6C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t sub_21FC17DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PBTimeSeries.Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FC17DE8()
{
  return sub_21FC5A6BC();
}

uint64_t sub_21FC17E10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FA2ED54(0, &qword_25553E0E8, (void (*)(uint64_t))MEMORY[0x24BDCB878]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FC17E64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  char v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  __int128 *v56;
  uint64_t v57;
  __int128 *v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  _QWORD *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v4 = a1;
  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_21FA7C1C4(MEMORY[0x24BEE4AF8]);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 16);
  v59 = v2;
  v55 = a2;
  v10 = v9(v4, a2);
  v60 = 0;
  v11 = *(_QWORD *)(v10 + 64);
  v53 = v10 + 64;
  v57 = v10;
  v12 = 1 << *(_BYTE *)(v10 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v56 = &v64;
  v58 = (__int128 *)&v69;
  v54 = (unint64_t)(v12 + 63) >> 6;
  v52 = v54 - 1;
  while (1)
  {
    if (v14)
    {
      v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v18 = v17 | (v60 << 6);
LABEL_9:
      v19 = *(_QWORD *)(v57 + 56);
      v20 = (_QWORD *)(*(_QWORD *)(v57 + 48) + 16 * v18);
      v21 = v20[1];
      *(_QWORD *)&v63 = *v20;
      *((_QWORD *)&v63 + 1) = v21;
      sub_21FA2CEA0(v19 + 40 * v18, (uint64_t)v56);
      swift_bridgeObjectRetain();
      goto LABEL_28;
    }
    v22 = v60 + 1;
    if (__OFADD__(v60, 1))
      goto LABEL_46;
    if (v22 < v54)
    {
      v23 = *(_QWORD *)(v53 + 8 * v22);
      if (v23)
        goto LABEL_13;
      v24 = v60 + 2;
      ++v60;
      if (v22 + 1 < v54)
      {
        v23 = *(_QWORD *)(v53 + 8 * v24);
        if (v23)
          goto LABEL_16;
        v60 = v22 + 1;
        if (v22 + 2 < v54)
        {
          v23 = *(_QWORD *)(v53 + 8 * (v22 + 2));
          if (v23)
          {
            v22 += 2;
            goto LABEL_13;
          }
          v24 = v22 + 3;
          v60 = v22 + 2;
          if (v22 + 3 < v54)
            break;
        }
      }
    }
LABEL_27:
    v14 = 0;
    v66 = 0;
    v64 = 0u;
    v65 = 0u;
    v63 = 0u;
LABEL_28:
    sub_21FC18520((uint64_t)&v63, (uint64_t)&v67);
    v25 = v68;
    if (!v68)
    {
      swift_release();
      return v8;
    }
    v61 = v67;
    sub_21FA3175C(v58, (uint64_t)&v63);
    v26 = *((_QWORD *)&v64 + 1);
    v27 = v65;
    __swift_project_boxed_opaque_existential_1(&v63, *((uint64_t *)&v64 + 1));
    LOBYTE(v26) = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 16))(v26, v27);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v59, v4);
    if ((v26 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
LABEL_33:
      v29 = v7;
      v30 = v5;
      v31 = v4;
      v32 = *((_QWORD *)&v64 + 1);
      v33 = v65;
      __swift_project_boxed_opaque_existential_1(&v63, *((uint64_t *)&v64 + 1));
      v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v32, v33);
      v35 = v8;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v62 = (_QWORD *)v8;
      v38 = sub_21FA73F34(v61, v25);
      v39 = *(_QWORD *)(v8 + 16);
      v40 = (v37 & 1) == 0;
      v41 = v39 + v40;
      if (__OFADD__(v39, v40))
      {
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      v42 = v37;
      if (*(_QWORD *)(v35 + 24) >= v41)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v45 = v62;
          if ((v37 & 1) == 0)
            goto LABEL_40;
        }
        else
        {
          sub_21FA7AE24();
          v45 = v62;
          if ((v42 & 1) == 0)
            goto LABEL_40;
        }
      }
      else
      {
        sub_21FA77924(v41, isUniquelyReferenced_nonNull_native);
        v43 = sub_21FA73F34(v61, v25);
        if ((v42 & 1) != (v44 & 1))
          goto LABEL_49;
        v38 = v43;
        v45 = v62;
        if ((v42 & 1) == 0)
        {
LABEL_40:
          v45[(v38 >> 6) + 8] |= 1 << v38;
          v46 = (_QWORD *)(v45[6] + 16 * v38);
          *v46 = v61;
          v46[1] = v25;
          *(_QWORD *)(v45[7] + 8 * v38) = v34;
          v47 = v45[2];
          v48 = __OFADD__(v47, 1);
          v49 = v47 + 1;
          if (v48)
            goto LABEL_47;
          v8 = (unint64_t)v45;
          v45[2] = v49;
          swift_bridgeObjectRetain();
          goto LABEL_5;
        }
      }
      v8 = (unint64_t)v45;
      v15 = v45[7];
      v16 = 8 * v38;

      *(_QWORD *)(v15 + v16) = v34;
LABEL_5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 = v31;
      v5 = v30;
      v7 = v29;
      goto LABEL_6;
    }
    v28 = (*(uint64_t (**)(uint64_t))(v55 + 24))(v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if ((v28 & 1) != 0)
      goto LABEL_33;
    swift_bridgeObjectRelease();
LABEL_6:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v63);
  }
  v23 = *(_QWORD *)(v53 + 8 * v24);
  if (v23)
  {
LABEL_16:
    v22 = v24;
LABEL_13:
    v14 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v22 << 6);
    v60 = v22;
    goto LABEL_9;
  }
  while (1)
  {
    v22 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v22 >= v54)
    {
      v60 = v52;
      goto LABEL_27;
    }
    v23 = *(_QWORD *)(v53 + 8 * v22);
    ++v24;
    if (v23)
      goto LABEL_13;
  }
LABEL_48:
  __break(1u);
LABEL_49:
  result = sub_21FC5BE20();
  __break(1u);
  return result;
}

void sub_21FC1832C(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD aBlock[6];
  __int128 v10[2];

  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  v6 = (void *)sub_21FC5B5E0();
  swift_bridgeObjectRelease();
  sub_21FA2CEA0((uint64_t)a1, (uint64_t)v10);
  v7 = swift_allocObject();
  sub_21FA3175C(v10, v7 + 16);
  aBlock[4] = sub_21FC18458;
  aBlock[5] = v7;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_21FC18494;
  aBlock[3] = &block_descriptor_21;
  v8 = _Block_copy(aBlock);
  swift_release();
  LOBYTE(v4) = AnalyticsSendEventLazy();
  _Block_release(v8);

  *a2 = v4;
}

uint64_t sub_21FC18434()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_21FC18458()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0 + 2;
  v2 = v0[5];
  v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return sub_21FC17E64(v2, v3);
}

id sub_21FC18494(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_21FAC7C7C();
    v4 = (void *)sub_21FC5B55C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = 0;
  }
  return v4;
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t sub_21FC18520(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FC18564();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_21FC18564()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406BDF8)
  {
    sub_21FC185B8();
    v0 = sub_21FC5BAA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406BDF8);
  }
}

void sub_21FC185B8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25406BDF0)
  {
    sub_21FAD5398();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25406BDF0);
  }
}

uint64_t sub_21FC18620(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  void **v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[6];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = (void **)__swift_project_boxed_opaque_existential_1(a3, a3[3]);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = sub_21FC18820;
  *(_QWORD *)(v8 + 24) = v6;
  v9 = *v7;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = sub_21FC1882C;
  *(_QWORD *)(v10 + 24) = v8;
  v13[4] = sub_21FC18834;
  v13[5] = v10;
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 1107296256;
  v13[2] = sub_21FA89518;
  v13[3] = &block_descriptor_12;
  v11 = _Block_copy(v13);
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v9, sel_isImproveHealthRecordsAnalyticsSubmissionAllowedWithCompletion_, v11);
  _Block_release(v11);
  return swift_release();
}

void sub_21FC18754(char a1, id a2, void (*a3)(uint64_t, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  unsigned __int8 v9;

  if (a1 == 2)
  {
    v6 = (uint64_t)a2;
    if (!a2)
    {
      sub_21FA720B8();
      v6 = swift_allocError();
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_BYTE *)(v7 + 16) = 2;
    }
    v8 = a2;
  }
  else
  {
    v6 = a1 & 1;
  }
  v9 = a1 == 2;
  a3(v6, v9);
  sub_21FC1883C((id)v6, v9);
}

uint64_t sub_21FC187FC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FC18820(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_21FBBA92C(a1, a2 & 1, *(uint64_t (**)(uint64_t *))(v2 + 16));
}

void sub_21FC1882C(char a1, void *a2)
{
  uint64_t v2;

  sub_21FC18754(a1, a2, *(void (**)(uint64_t, _QWORD))(v2 + 16));
}

uint64_t sub_21FC18834(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_21FB0C84C(a1, a2, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16));
}

void sub_21FC1883C(id a1, char a2)
{
  if ((a2 & 1) != 0)

}

uint64_t sub_21FC18858()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;

  v1 = objc_msgSend(v0, sel_codings);
  sub_21FA5BE58(0, &qword_2555405B0);
  v2 = sub_21FC5B7A8();

  v30 = MEMORY[0x24BEE4AF8];
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
    if (v3)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x24BEE4AF8];
    if ((MEMORY[0x24BEE4AF8] & 0x8000000000000000) != 0)
      goto LABEL_36;
LABEL_21:
    if ((v15 & 0x4000000000000000) != 0)
      goto LABEL_36;
    v16 = *(_QWORD *)(v15 + 16);
    result = swift_retain();
    if (v16)
      goto LABEL_23;
LABEL_37:
    v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_38:
    swift_release_n();
    return (uint64_t)v18;
  }
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v3)
    goto LABEL_20;
LABEL_3:
  result = objc_opt_self();
  if (v3 < 1)
  {
    __break(1u);
    goto LABEL_40;
  }
  v5 = (void *)result;
  v6 = 0;
  v7 = v2 & 0xC000000000000001;
  v29 = v2 & 0xC000000000000001;
  do
  {
    if (v7)
      v8 = (id)MEMORY[0x2207D057C](v6, v2);
    else
      v8 = *(id *)(v2 + 8 * v6 + 32);
    v9 = v8;
    v10 = objc_msgSend(v8, sel_codingSystem, v29);
    v11 = objc_msgSend(v5, sel_RxNormCodeSystem);
    v12 = v11;
    if (v10)
    {
      if (v11)
      {
        sub_21FA5BE58(0, &qword_25554D688);
        v13 = v10;
        v7 = v29;
        v14 = sub_21FC5BA60();

        if ((v14 & 1) != 0)
          goto LABEL_5;

      }
      else
      {

      }
    }
    else
    {
      if (!v11)
      {
LABEL_5:
        sub_21FC5BBE0();
        sub_21FC5BC10();
        sub_21FC5BC1C();
        sub_21FC5BBEC();
        goto LABEL_6;
      }

    }
LABEL_6:
    ++v6;
  }
  while (v3 != v6);
  swift_bridgeObjectRelease();
  v15 = v30;
  if ((v30 & 0x8000000000000000) == 0)
    goto LABEL_21;
LABEL_36:
  swift_retain();
  result = sub_21FC5BC7C();
  v16 = result;
  if (!result)
    goto LABEL_37;
LABEL_23:
  if (v16 >= 1)
  {
    v17 = 0;
    v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      if ((v15 & 0xC000000000000001) != 0)
        v19 = (id)MEMORY[0x2207D057C](v17, v15);
      else
        v19 = *(id *)(v15 + 8 * v17 + 32);
      v20 = v19;
      v21 = objc_msgSend(v19, sel_code);
      if (v21)
      {
        v22 = v21;
        v23 = sub_21FC5B604();
        v25 = v24;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v18 = sub_21FA7DD0C(0, v18[2] + 1, 1, v18);
        v27 = v18[2];
        v26 = v18[3];
        if (v27 >= v26 >> 1)
          v18 = sub_21FA7DD0C((_QWORD *)(v26 > 1), v27 + 1, 1, v18);
        v18[2] = v27 + 1;
        v28 = &v18[2 * v27];
        v28[4] = v23;
        v28[5] = v25;
      }
      else
      {

      }
      ++v17;
    }
    while (v16 != v17);
    goto LABEL_38;
  }
LABEL_40:
  __break(1u);
  return result;
}

void PBNodeType.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

unint64_t PBNodeType.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 4;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t PBNodeType.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

unint64_t sub_21FC18C10@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return PBNodeType.init(rawValue:)(*a1, a2);
}

uint64_t sub_21FC18C18()
{
  sub_21FA64E10();
  return sub_21FC5AD7C();
}

void sub_21FC18C50()
{
  qword_25554D690 = (uint64_t)&unk_24E481B10;
}

uint64_t static PBNodeType.allCases.getter()
{
  if (qword_25553DC98 != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static PBNodeType.allCases.setter(uint64_t a1)
{
  if (qword_25553DC98 != -1)
    swift_once();
  swift_beginAccess();
  qword_25554D690 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static PBNodeType.allCases.modify())()
{
  if (qword_25553DC98 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_21FC18DB0@<X0>(_QWORD *a1@<X8>)
{
  if (qword_25553DC98 != -1)
    swift_once();
  swift_beginAccess();
  *a1 = qword_25554D690;
  return swift_bridgeObjectRetain();
}

uint64_t sub_21FC18E24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;

  v0 = sub_21FC5AF74();
  __swift_allocate_value_buffer(v0, qword_25554D698);
  __swift_project_value_buffer(v0, (uint64_t)qword_25554D698);
  sub_21FA8AF38();
  sub_21FA48EB8();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_21FC603D0;
  v7 = v6 + v5;
  v8 = v6 + v5 + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + v5) = 0;
  *(_QWORD *)v8 = "NODE_TYPE_X";
  *(_QWORD *)(v8 + 8) = 11;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = *MEMORY[0x24BE5C318];
  v10 = sub_21FC5AF5C();
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 1;
  *(_QWORD *)v12 = "ROOT";
  *(_QWORD *)(v12 + 8) = 4;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 2;
  *(_QWORD *)v14 = "CATEGORY";
  *((_QWORD *)v14 + 1) = 8;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 3;
  *(_QWORD *)v16 = "RECORD";
  *((_QWORD *)v16 + 1) = 6;
  v16[16] = 2;
  v11();
  return sub_21FC5AF68();
}

uint64_t static PBNodeType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_25553DCA0 != -1)
    swift_once();
  v2 = sub_21FC5AF74();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_25554D698);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

unint64_t sub_21FC1904C()
{
  unint64_t result;

  result = qword_25554D6B0;
  if (!qword_25554D6B0)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBNodeType, &type metadata for PBNodeType);
    atomic_store(result, (unint64_t *)&qword_25554D6B0);
  }
  return result;
}

unint64_t sub_21FC19094()
{
  unint64_t result;

  result = qword_25554D6B8;
  if (!qword_25554D6B8)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBNodeType, &type metadata for PBNodeType);
    atomic_store(result, (unint64_t *)&qword_25554D6B8);
  }
  return result;
}

unint64_t sub_21FC190DC()
{
  unint64_t result;

  result = qword_25554D6C0;
  if (!qword_25554D6C0)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBNodeType, &type metadata for PBNodeType);
    atomic_store(result, (unint64_t *)&qword_25554D6C0);
  }
  return result;
}

unint64_t sub_21FC19124()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25554D6C8;
  if (!qword_25554D6C8)
  {
    sub_21FC1916C();
    result = MEMORY[0x2207D0F78](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_25554D6C8);
  }
  return result;
}

void sub_21FC1916C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D6D0)
  {
    v0 = sub_21FC5B7F0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D6D0);
  }
}

uint64_t sub_21FC191C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_25553DCA0 != -1)
    swift_once();
  v2 = sub_21FC5AF74();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_25554D698);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

ValueMetadata *type metadata accessor for PBNodeType()
{
  return &type metadata for PBNodeType;
}

double sub_21FC19240@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  double result;
  __int128 v17;
  uint64_t v18;

  v3 = a1[1];
  if (v3 >> 60 == 15)
  {
    sub_21FA8084C();
    v4 = (void *)swift_allocError();
    swift_willThrow();
    if (qword_25406B7F8 != -1)
      swift_once();
    v6 = sub_21FC5AFD4();
    __swift_project_value_buffer(v6, (uint64_t)qword_25406D830);
    v7 = v4;
    v8 = v4;
    v9 = sub_21FC5AFC8();
    v10 = sub_21FC5B97C();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      *(_QWORD *)&v17 = v12;
      *(_DWORD *)v11 = 136315138;
      v18 = (uint64_t)v4;
      v13 = v4;
      sub_21FA2CDB4();
      v14 = sub_21FC5B64C();
      v18 = sub_21FABDCF8(v14, v15, (uint64_t *)&v17);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_21FA27000, v9, v10, "Could not retrieve ClinicalSharingGraphMetadata: %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v12, -1, -1);
      MEMORY[0x2207D105C](v11, -1, -1);

    }
    else
    {

    }
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v5 = *a1;
    sub_21FC5A614();
    swift_allocObject();
    sub_21FA32314(v5, v3);
    sub_21FC5A608();
    sub_21FC194EC();
    sub_21FC5A5FC();
    sub_21FA3239C(v5, v3);
    swift_release();
    result = *(double *)&v17;
    *(_OWORD *)a2 = v17;
  }
  return result;
}

unint64_t sub_21FC194EC()
{
  unint64_t result;

  result = qword_25406B290;
  if (!qword_25406B290)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC60114, &type metadata for ClinicalSharingGraphMetadata);
    atomic_store(result, (unint64_t *)&qword_25406B290);
  }
  return result;
}

uint64_t sub_21FC19530@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;

  v58 = a3;
  v59 = a4;
  v57 = a2;
  sub_21FA2ED54(0, &qword_255542068, (void (*)(uint64_t))type metadata accessor for PBBlobAuth);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v56 = (uint64_t)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v55 = (uint64_t)&v51 - v10;
  v11 = type metadata accessor for PBBlobAuth(0);
  v53 = *(_QWORD *)(v11 - 8);
  v54 = v11;
  v12 = MEMORY[0x24BDAC7A8](v11);
  v52 = (uint64_t)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v62 = (uint64_t *)((char *)&v51 - v14);
  sub_21FA2ED54(0, &qword_2555420A0, (void (*)(uint64_t))type metadata accessor for PBDeleteBlobs);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v51 - v19;
  v21 = type metadata accessor for PBDeleteBlobs(0);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC5AD10();
  v25 = *(int *)(type metadata accessor for PBDeleteBlobsRequest(0) + 20);
  if (qword_25553D6F8 != -1)
    swift_once();
  *(_QWORD *)(a5 + v25) = qword_255541F20;
  v60 = a1;
  sub_21FA2D120(a1, (uint64_t)v24, type metadata accessor for PBDeleteBlobs);
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBDeleteBlobsRequest._StorageClass(0);
    swift_allocObject();
    v26 = swift_retain();
    *(_QWORD *)(a5 + v25) = sub_21FB026E4(v26);
    swift_release();
  }
  v27 = *(_QWORD *)(a5 + v25);
  sub_21FA2D23C((uint64_t)v24, (uint64_t)v20, type metadata accessor for PBDeleteBlobs);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v20, 0, 1, v21);
  sub_21FA87DBC((uint64_t)v20, (uint64_t)v18, &qword_2555420A0, (void (*)(uint64_t))type metadata accessor for PBDeleteBlobs);
  v28 = v27
      + OBJC_IVAR____TtCV19HealthRecordsDaemon20PBDeleteBlobsRequestP33_10BC46EBE4B3F8F600539A521FA688DE13_StorageClass__deleteBlobs;
  swift_beginAccess();
  swift_retain();
  sub_21FA87E08((uint64_t)v18, v28, &qword_2555420A0, (void (*)(uint64_t))type metadata accessor for PBDeleteBlobs);
  swift_endAccess();
  swift_release();
  v29 = sub_21FC5ACF8();
  v31 = v30;
  v32 = v54;
  v33 = v62;
  sub_21FC5AD10();
  v35 = v58;
  v34 = v59;
  sub_21FA32314(v58, v59);
  sub_21FA2D770(v29, v31);
  v36 = v57;
  *v33 = v57;
  v33[1] = v35;
  v33[2] = v34;
  v33[3] = 0x6977363532414853;
  v33[4] = 0xEF41534443456874;
  v37 = (uint64_t)v33;
  v38 = v52;
  sub_21FA2D120(v37, v52, type metadata accessor for PBBlobAuth);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBDeleteBlobsRequest._StorageClass(0);
    swift_allocObject();
    v39 = swift_retain();
    *(_QWORD *)(a5 + v25) = sub_21FB026E4(v39);
    swift_release();
  }
  v40 = *(_QWORD *)(a5 + v25);
  v41 = v55;
  sub_21FA2D23C(v38, v55, type metadata accessor for PBBlobAuth);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v41, 0, 1, v32);
  v42 = v56;
  sub_21FA87DBC(v41, v56, &qword_255542068, (void (*)(uint64_t))type metadata accessor for PBBlobAuth);
  v43 = v40
      + OBJC_IVAR____TtCV19HealthRecordsDaemon20PBDeleteBlobsRequestP33_10BC46EBE4B3F8F600539A521FA688DE13_StorageClass__blobAuth;
  swift_beginAccess();
  swift_retain();
  sub_21FA87E08(v42, v43, &qword_255542068, (void (*)(uint64_t))type metadata accessor for PBBlobAuth);
  swift_endAccess();
  swift_release();
  if (qword_25406B7F8 != -1)
    swift_once();
  v44 = sub_21FC5AFD4();
  __swift_project_value_buffer(v44, (uint64_t)qword_25406D830);
  swift_bridgeObjectRetain();
  sub_21FA32314(v35, v34);
  v45 = sub_21FC5AFC8();
  v46 = sub_21FC5B970();
  v47 = os_log_type_enabled(v45, v46);
  v48 = v60;
  if (v47)
  {
    v49 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v49 = 134217984;
    v61 = *(_QWORD *)(v36 + 16);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    sub_21FA2D770(v35, v34);
    _os_log_impl(&dword_21FA27000, v45, v46, "Generated PBDeleteBlobsRequest containing number of certs: %ld", v49, 0xCu);
    MEMORY[0x2207D105C](v49, -1, -1);
    swift_bridgeObjectRelease();
    sub_21FA2D770(v35, v34);

  }
  else
  {
    swift_bridgeObjectRelease();
    sub_21FA2D770(v35, v34);
    swift_bridgeObjectRelease();

    sub_21FA2D770(v35, v34);
  }
  sub_21FA326EC(v48, type metadata accessor for PBDeleteBlobs);
  return sub_21FA326EC((uint64_t)v62, type metadata accessor for PBBlobAuth);
}

_QWORD *sub_21FC19B14(int a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v70;

  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v70 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if ((a1 & 1) != 0)
  {
    swift_beginAccess();
    v2 = v70;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = sub_21FA7EA00(0, v70[2] + 1, 1, v70);
    v4 = v2[2];
    v3 = v2[3];
    if (v4 >= v3 >> 1)
      v2 = sub_21FA7EA00((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
    v2[2] = v4 + 1;
    v5 = &v2[2 * v4];
    v5[4] = 1;
    *((_BYTE *)v5 + 40) = 1;
    v70 = v2;
    swift_endAccess();
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0)
        goto LABEL_4;
      goto LABEL_34;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  swift_beginAccess();
  v2 = v70;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21FA7EA00(0, v70[2] + 1, 1, v70);
  v7 = v2[2];
  v6 = v2[3];
  if (v7 >= v6 >> 1)
    v2 = sub_21FA7EA00((_QWORD *)(v6 > 1), v7 + 1, 1, v2);
  v2[2] = v7 + 1;
  v8 = &v2[2 * v7];
  v8[4] = 2;
  *((_BYTE *)v8 + 40) = 1;
  v70 = v2;
  swift_endAccess();
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 8) == 0)
      goto LABEL_5;
    goto LABEL_39;
  }
LABEL_34:
  swift_beginAccess();
  v2 = v70;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21FA7EA00(0, v70[2] + 1, 1, v70);
  v10 = v2[2];
  v9 = v2[3];
  if (v10 >= v9 >> 1)
    v2 = sub_21FA7EA00((_QWORD *)(v9 > 1), v10 + 1, 1, v2);
  v2[2] = v10 + 1;
  v11 = &v2[2 * v10];
  v11[4] = 3;
  *((_BYTE *)v11 + 40) = 1;
  v70 = v2;
  swift_endAccess();
  if ((a1 & 8) == 0)
  {
LABEL_5:
    if ((a1 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_44;
  }
LABEL_39:
  swift_beginAccess();
  v2 = v70;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21FA7EA00(0, v70[2] + 1, 1, v70);
  v13 = v2[2];
  v12 = v2[3];
  if (v13 >= v12 >> 1)
    v2 = sub_21FA7EA00((_QWORD *)(v12 > 1), v13 + 1, 1, v2);
  v2[2] = v13 + 1;
  v14 = &v2[2 * v13];
  v14[4] = 4;
  *((_BYTE *)v14 + 40) = 1;
  v70 = v2;
  swift_endAccess();
  if ((a1 & 0x10) == 0)
  {
LABEL_6:
    if ((a1 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_49;
  }
LABEL_44:
  swift_beginAccess();
  v2 = v70;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21FA7EA00(0, v70[2] + 1, 1, v70);
  v16 = v2[2];
  v15 = v2[3];
  if (v16 >= v15 >> 1)
    v2 = sub_21FA7EA00((_QWORD *)(v15 > 1), v16 + 1, 1, v2);
  v2[2] = v16 + 1;
  v17 = &v2[2 * v16];
  v17[4] = 5;
  *((_BYTE *)v17 + 40) = 1;
  v70 = v2;
  swift_endAccess();
  if ((a1 & 0x20) == 0)
  {
LABEL_7:
    if ((a1 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_54;
  }
LABEL_49:
  swift_beginAccess();
  v2 = v70;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21FA7EA00(0, v70[2] + 1, 1, v70);
  v19 = v2[2];
  v18 = v2[3];
  if (v19 >= v18 >> 1)
    v2 = sub_21FA7EA00((_QWORD *)(v18 > 1), v19 + 1, 1, v2);
  v2[2] = v19 + 1;
  v20 = &v2[2 * v19];
  v20[4] = 6;
  *((_BYTE *)v20 + 40) = 1;
  v70 = v2;
  swift_endAccess();
  if ((a1 & 0x40) == 0)
  {
LABEL_8:
    if ((a1 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_59;
  }
LABEL_54:
  swift_beginAccess();
  v2 = v70;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21FA7EA00(0, v70[2] + 1, 1, v70);
  v22 = v2[2];
  v21 = v2[3];
  if (v22 >= v21 >> 1)
    v2 = sub_21FA7EA00((_QWORD *)(v21 > 1), v22 + 1, 1, v2);
  v2[2] = v22 + 1;
  v23 = &v2[2 * v22];
  v23[4] = 7;
  *((_BYTE *)v23 + 40) = 1;
  v70 = v2;
  swift_endAccess();
  if ((a1 & 0x80) == 0)
  {
LABEL_9:
    if ((a1 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_64;
  }
LABEL_59:
  swift_beginAccess();
  v2 = v70;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21FA7EA00(0, v70[2] + 1, 1, v70);
  v25 = v2[2];
  v24 = v2[3];
  if (v25 >= v24 >> 1)
    v2 = sub_21FA7EA00((_QWORD *)(v24 > 1), v25 + 1, 1, v2);
  v2[2] = v25 + 1;
  v26 = &v2[2 * v25];
  v26[4] = 8;
  *((_BYTE *)v26 + 40) = 1;
  v70 = v2;
  swift_endAccess();
  if ((a1 & 0x100) == 0)
  {
LABEL_10:
    if ((a1 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_69;
  }
LABEL_64:
  swift_beginAccess();
  v2 = v70;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21FA7EA00(0, v70[2] + 1, 1, v70);
  v28 = v2[2];
  v27 = v2[3];
  if (v28 >= v27 >> 1)
    v2 = sub_21FA7EA00((_QWORD *)(v27 > 1), v28 + 1, 1, v2);
  v2[2] = v28 + 1;
  v29 = &v2[2 * v28];
  v29[4] = 9;
  *((_BYTE *)v29 + 40) = 1;
  v70 = v2;
  swift_endAccess();
  if ((a1 & 0x200) == 0)
  {
LABEL_11:
    if ((a1 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_74;
  }
LABEL_69:
  swift_beginAccess();
  v2 = v70;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21FA7EA00(0, v70[2] + 1, 1, v70);
  v31 = v2[2];
  v30 = v2[3];
  if (v31 >= v30 >> 1)
    v2 = sub_21FA7EA00((_QWORD *)(v30 > 1), v31 + 1, 1, v2);
  v2[2] = v31 + 1;
  v32 = &v2[2 * v31];
  v32[4] = 10;
  *((_BYTE *)v32 + 40) = 1;
  v70 = v2;
  swift_endAccess();
  if ((a1 & 0x400) == 0)
  {
LABEL_12:
    if ((a1 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_79;
  }
LABEL_74:
  swift_beginAccess();
  v2 = v70;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21FA7EA00(0, v70[2] + 1, 1, v70);
  v34 = v2[2];
  v33 = v2[3];
  if (v34 >= v33 >> 1)
    v2 = sub_21FA7EA00((_QWORD *)(v33 > 1), v34 + 1, 1, v2);
  v2[2] = v34 + 1;
  v35 = &v2[2 * v34];
  v35[4] = 11;
  *((_BYTE *)v35 + 40) = 1;
  v70 = v2;
  swift_endAccess();
  if ((a1 & 0x800) == 0)
  {
LABEL_13:
    if ((a1 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_84;
  }
LABEL_79:
  swift_beginAccess();
  v2 = v70;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21FA7EA00(0, v70[2] + 1, 1, v70);
  v37 = v2[2];
  v36 = v2[3];
  if (v37 >= v36 >> 1)
    v2 = sub_21FA7EA00((_QWORD *)(v36 > 1), v37 + 1, 1, v2);
  v2[2] = v37 + 1;
  v38 = &v2[2 * v37];
  v38[4] = 12;
  *((_BYTE *)v38 + 40) = 1;
  v70 = v2;
  swift_endAccess();
  if ((a1 & 0x1000) == 0)
  {
LABEL_14:
    if ((a1 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_89;
  }
LABEL_84:
  swift_beginAccess();
  v2 = v70;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21FA7EA00(0, v70[2] + 1, 1, v70);
  v40 = v2[2];
  v39 = v2[3];
  if (v40 >= v39 >> 1)
    v2 = sub_21FA7EA00((_QWORD *)(v39 > 1), v40 + 1, 1, v2);
  v2[2] = v40 + 1;
  v41 = &v2[2 * v40];
  v41[4] = 13;
  *((_BYTE *)v41 + 40) = 1;
  v70 = v2;
  swift_endAccess();
  if ((a1 & 0x2000) == 0)
  {
LABEL_15:
    if ((a1 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_94;
  }
LABEL_89:
  swift_beginAccess();
  v2 = v70;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21FA7EA00(0, v70[2] + 1, 1, v70);
  v43 = v2[2];
  v42 = v2[3];
  if (v43 >= v42 >> 1)
    v2 = sub_21FA7EA00((_QWORD *)(v42 > 1), v43 + 1, 1, v2);
  v2[2] = v43 + 1;
  v44 = &v2[2 * v43];
  v44[4] = 14;
  *((_BYTE *)v44 + 40) = 1;
  v70 = v2;
  swift_endAccess();
  if ((a1 & 0x4000) == 0)
  {
LABEL_16:
    if ((a1 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_99;
  }
LABEL_94:
  swift_beginAccess();
  v2 = v70;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21FA7EA00(0, v70[2] + 1, 1, v70);
  v46 = v2[2];
  v45 = v2[3];
  if (v46 >= v45 >> 1)
    v2 = sub_21FA7EA00((_QWORD *)(v45 > 1), v46 + 1, 1, v2);
  v2[2] = v46 + 1;
  v47 = &v2[2 * v46];
  v47[4] = 15;
  *((_BYTE *)v47 + 40) = 1;
  v70 = v2;
  swift_endAccess();
  if ((a1 & 0x8000) == 0)
  {
LABEL_17:
    if ((a1 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_104;
  }
LABEL_99:
  swift_beginAccess();
  v2 = v70;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21FA7EA00(0, v70[2] + 1, 1, v70);
  v49 = v2[2];
  v48 = v2[3];
  if (v49 >= v48 >> 1)
    v2 = sub_21FA7EA00((_QWORD *)(v48 > 1), v49 + 1, 1, v2);
  v2[2] = v49 + 1;
  v50 = &v2[2 * v49];
  v50[4] = 16;
  *((_BYTE *)v50 + 40) = 1;
  v70 = v2;
  swift_endAccess();
  if ((a1 & 0x10000) == 0)
  {
LABEL_18:
    if ((a1 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_109;
  }
LABEL_104:
  swift_beginAccess();
  v2 = v70;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21FA7EA00(0, v70[2] + 1, 1, v70);
  v52 = v2[2];
  v51 = v2[3];
  if (v52 >= v51 >> 1)
    v2 = sub_21FA7EA00((_QWORD *)(v51 > 1), v52 + 1, 1, v2);
  v2[2] = v52 + 1;
  v53 = &v2[2 * v52];
  v53[4] = 17;
  *((_BYTE *)v53 + 40) = 1;
  v70 = v2;
  swift_endAccess();
  if ((a1 & 0x20000) == 0)
  {
LABEL_19:
    if ((a1 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_114;
  }
LABEL_109:
  swift_beginAccess();
  v2 = v70;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21FA7EA00(0, v70[2] + 1, 1, v70);
  v55 = v2[2];
  v54 = v2[3];
  if (v55 >= v54 >> 1)
    v2 = sub_21FA7EA00((_QWORD *)(v54 > 1), v55 + 1, 1, v2);
  v2[2] = v55 + 1;
  v56 = &v2[2 * v55];
  v56[4] = 18;
  *((_BYTE *)v56 + 40) = 1;
  v70 = v2;
  swift_endAccess();
  if ((a1 & 0x40000) == 0)
  {
LABEL_20:
    if ((a1 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_119;
  }
LABEL_114:
  swift_beginAccess();
  v2 = v70;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21FA7EA00(0, v70[2] + 1, 1, v70);
  v58 = v2[2];
  v57 = v2[3];
  if (v58 >= v57 >> 1)
    v2 = sub_21FA7EA00((_QWORD *)(v57 > 1), v58 + 1, 1, v2);
  v2[2] = v58 + 1;
  v59 = &v2[2 * v58];
  v59[4] = 19;
  *((_BYTE *)v59 + 40) = 1;
  v70 = v2;
  swift_endAccess();
  if ((a1 & 0x80000) == 0)
  {
LABEL_21:
    if ((a1 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_124;
  }
LABEL_119:
  swift_beginAccess();
  v2 = v70;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21FA7EA00(0, v70[2] + 1, 1, v70);
  v61 = v2[2];
  v60 = v2[3];
  if (v61 >= v60 >> 1)
    v2 = sub_21FA7EA00((_QWORD *)(v60 > 1), v61 + 1, 1, v2);
  v2[2] = v61 + 1;
  v62 = &v2[2 * v61];
  v62[4] = 20;
  *((_BYTE *)v62 + 40) = 1;
  v70 = v2;
  swift_endAccess();
  if ((a1 & 0x100000) == 0)
  {
LABEL_22:
    if ((a1 & 0x200000) == 0)
      return v2;
    goto LABEL_129;
  }
LABEL_124:
  swift_beginAccess();
  v2 = v70;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21FA7EA00(0, v70[2] + 1, 1, v70);
  v64 = v2[2];
  v63 = v2[3];
  if (v64 >= v63 >> 1)
    v2 = sub_21FA7EA00((_QWORD *)(v63 > 1), v64 + 1, 1, v2);
  v2[2] = v64 + 1;
  v65 = &v2[2 * v64];
  v65[4] = 21;
  *((_BYTE *)v65 + 40) = 1;
  v70 = v2;
  swift_endAccess();
  if ((a1 & 0x200000) != 0)
  {
LABEL_129:
    swift_beginAccess();
    v2 = v70;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = sub_21FA7EA00(0, v70[2] + 1, 1, v70);
    v67 = v2[2];
    v66 = v2[3];
    if (v67 >= v66 >> 1)
      v2 = sub_21FA7EA00((_QWORD *)(v66 > 1), v67 + 1, 1, v2);
    v2[2] = v67 + 1;
    v68 = &v2[2 * v67];
    v68[4] = 22;
    *((_BYTE *)v68 + 40) = 1;
    swift_endAccess();
  }
  return v2;
}

uint64_t sub_21FC1A908(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t result;
  uint64_t v21;

  v10 = sub_21FC5ACD4();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (uint64_t *)((char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_21FC1AA74();
  v14 = (void *)MEMORY[0x2207D0390](a2);
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x24BE458E8], v10);
  if (!*(_QWORD *)(a3 + 16))
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  v15 = v14;
  v16 = sub_21FA73E18(a4);
  if ((v17 & 1) == 0)
  {

    return (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  }
  v18 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v16);
  swift_bridgeObjectRetain();
  v19 = sub_21FC4BDD0((uint64_t)v13, v18);

  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v19 & 1) != 0)
  {
    result = swift_beginAccess();
    if ((a1 & ~*(_QWORD *)(a5 + 16)) != 0)
      *(_QWORD *)(a5 + 16) |= a1;
  }
  return result;
}

unint64_t sub_21FC1AA74()
{
  unint64_t result;

  result = qword_255540A30;
  if (!qword_255540A30)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_255540A30);
  }
  return result;
}

uint64_t sub_21FC1AAB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;

  v4 = 1 << *(_BYTE *)(a3 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a3 + 64);
  v13 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_5;
    }
    v9 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v9 >= v13)
      goto LABEL_23;
    v10 = *(_QWORD *)(v12 + 8 * v9);
    ++v8;
    if (!v10)
    {
      v8 = v9 + 1;
      if (v9 + 1 >= v13)
        goto LABEL_23;
      v10 = *(_QWORD *)(v12 + 8 * v8);
      if (!v10)
      {
        v8 = v9 + 2;
        if (v9 + 2 >= v13)
          goto LABEL_23;
        v10 = *(_QWORD *)(v12 + 8 * v8);
        if (!v10)
        {
          v8 = v9 + 3;
          if (v9 + 3 >= v13)
            goto LABEL_23;
          v10 = *(_QWORD *)(v12 + 8 * v8);
          if (!v10)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v10 - 1) & v10;
LABEL_5:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_21FC5B6AC();
    sub_21FC5B6AC();
    sub_21FA87D78();
    a1 = sub_21FC5BAD8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  v11 = v9 + 4;
  if (v11 >= v13)
  {
LABEL_23:
    swift_release();
    return a1;
  }
  v10 = *(_QWORD *)(v12 + 8 * v11);
  if (v10)
  {
    v8 = v11;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v8 >= v13)
      goto LABEL_23;
    v10 = *(_QWORD *)(v12 + 8 * v8);
    ++v11;
    if (v10)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_21FC1AD2C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  char v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  unint64_t v37;
  unsigned int (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  id v51;
  void *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  id v58;
  void *v59;
  BOOL v60;
  id v61;
  void *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int64_t v68;
  int64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int64_t v78;
  id v79;
  void *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int64_t v87;
  int64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  int64_t v97;
  id v98;
  id v99;
  id v100;
  void *v101;
  void *v102;
  void *v103;
  id v104;
  id v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  void *v116;
  void *v117;
  id v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  id v128;
  id v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;

  v5 = v3;
  v134 = a2;
  v142 = a1;
  v149 = *MEMORY[0x24BDAC8D0];
  v7 = sub_21FC5B640();
  v131 = *(_QWORD *)(v7 - 8);
  v132 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v133 = (char *)&v119 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_21FC5A5D8();
  v135 = *(_QWORD *)(v9 - 8);
  v136 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v119 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_21FC5A740();
  v13 = (void (*)(uint64_t))MEMORY[0x24BDCBB78];
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v119 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2ED54(0, (unint64_t *)&qword_25406AAC8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v119 - v18;
  v20 = sub_21FC5A98C();
  v138 = *(_QWORD *)(v20 - 8);
  v139 = v20;
  v21 = MEMORY[0x24BDAC7A8](v20);
  v141 = (char *)&v119 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v137 = (char *)&v119 - v23;
  sub_21FA2ED54(0, &qword_25554D4E8, v13);
  MEMORY[0x24BDAC7A8](v24);
  v140 = (uint64_t)&v119 - v25;
  if ((uint64_t)objc_msgSend(v5, sel_minCompatibleAPIVersion) < 6)
  {
    v26 = objc_msgSend(v5, sel_minCompatibleAPIVersion);
    sub_21FAC7C38();
    swift_allocError();
    *(_QWORD *)v27 = v26;
    *(_QWORD *)(v27 + 8) = 0;
    v28 = 1;
LABEL_8:
    *(_BYTE *)(v27 + 16) = v28;
    return swift_willThrow();
  }
  if (!objc_msgSend(v5, sel_enabled))
  {
    sub_21FAC7C38();
    swift_allocError();
    *(_QWORD *)v27 = 0;
    *(_QWORD *)(v27 + 8) = 0;
    v28 = 8;
    goto LABEL_8;
  }
  v121 = a3;
  v130 = v11;
  v29 = objc_msgSend(v5, sel_URL);
  v30 = sub_21FC5B604();
  v129 = v5;
  v31 = v30;
  v33 = v32;

  sub_21FC1AAB0(v31, v33, v142);
  swift_bridgeObjectRelease();
  v34 = v140;
  sub_21FC5A728();
  swift_bridgeObjectRelease();
  v35 = objc_msgSend(v129, sel_query);
  if (v35)
  {
    v36 = v35;
    sub_21FABE3D8();
    v37 = sub_21FC5B7A8();

    v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    if (v38(v34, 1, v12))
    {
      v122 = v4;
      swift_bridgeObjectRelease();
    }
    else
    {
      v40 = v142;
      swift_bridgeObjectRetain();
      sub_21FC1BC3C(v37, v40);
      v122 = v4;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_21FC5A6EC();
    }
  }
  else
  {
    v122 = v4;
    v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  }
  v41 = v130;
  v42 = v140;
  if (v38(v140, 1, v12))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v138 + 56))(v19, 1, 1, v139);
LABEL_14:
    sub_21FA2EDA0((uint64_t)v19, (unint64_t *)&qword_25406AAC8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    v45 = objc_msgSend(v129, sel_URL);
    v46 = sub_21FC5B604();
    v48 = v47;

    sub_21FAC7C38();
    swift_allocError();
    *(_QWORD *)v49 = v46;
    *(_QWORD *)(v49 + 8) = v48;
    *(_BYTE *)(v49 + 16) = 0;
    swift_willThrow();
    return sub_21FA2EDA0(v140, &qword_25554D4E8, (void (*)(uint64_t))MEMORY[0x24BDCBB78]);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v42, v12);
  sub_21FC5A704();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v12);
  v44 = v138;
  v43 = v139;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v138 + 48))(v19, 1, v139) == 1)
    goto LABEL_14;
  v50 = v137;
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v137, v19, v43);
  (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v141, v50, v43);
  sub_21FC5A59C();
  sub_21FC5A578();
  v51 = objc_msgSend(v129, sel_headers);
  if (v51)
  {
    v52 = v51;
    sub_21FABE3D8();
    v53 = sub_21FC5B7A8();

    if (v53 >> 62)
      goto LABEL_100;
    v54 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
LABEL_19:
    v123 = v53;
    if (v54)
    {
      v55 = 0;
      v125 = v53 & 0xC000000000000001;
      v119 = v53 + 32;
      v141 = (char *)(v142 + 64);
      v124 = v54;
      while (1)
      {
        while (1)
        {
          if (v125)
            v58 = (id)MEMORY[0x2207D057C](v55, v123);
          else
            v58 = *(id *)(v119 + 8 * v55);
          v59 = v58;
          v60 = __OFADD__(v55++, 1);
          if (v60)
            goto LABEL_97;
          v61 = objc_msgSend(v58, sel_literal);
          if (v61)
          {
            v62 = v61;
            v128 = v59;
            v127 = v55;
            v53 = sub_21FC5B604();
            v64 = v63;

            v65 = 1 << *(_BYTE *)(v142 + 32);
            if (v65 < 64)
              v66 = ~(-1 << v65);
            else
              v66 = -1;
            v67 = v66 & *(_QWORD *)(v142 + 64);
            v68 = (unint64_t)(v65 + 63) >> 6;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v69 = 0;
            v126 = v64;
            while (1)
            {
              if (v67)
              {
                v70 = __clz(__rbit64(v67));
                v67 &= v67 - 1;
                v71 = v70 | (v69 << 6);
              }
              else
              {
                v60 = __OFADD__(v69++, 1);
                if (v60)
                {
                  __break(1u);
                  goto LABEL_96;
                }
                if (v69 >= v68)
                  goto LABEL_21;
                v77 = *(_QWORD *)&v141[8 * v69];
                if (!v77)
                {
                  v78 = v69 + 1;
                  if (v69 + 1 >= v68)
                    goto LABEL_21;
                  v77 = *(_QWORD *)&v141[8 * v78];
                  if (!v77)
                  {
                    v78 = v69 + 2;
                    if (v69 + 2 >= v68)
                      goto LABEL_21;
                    v77 = *(_QWORD *)&v141[8 * v78];
                    if (!v77)
                    {
                      v78 = v69 + 3;
                      if (v69 + 3 >= v68)
                        goto LABEL_21;
                      v77 = *(_QWORD *)&v141[8 * v78];
                      if (!v77)
                      {
                        v78 = v69 + 4;
                        if (v69 + 4 >= v68)
                          goto LABEL_21;
                        v77 = *(_QWORD *)&v141[8 * v78];
                        if (!v77)
                        {
                          v78 = v69 + 5;
                          if (v69 + 5 >= v68)
                          {
LABEL_21:
                            v54 = v124;
                            v55 = v127;
                            swift_bridgeObjectRelease();
                            swift_release();
                            v56 = v128;
                            v57 = objc_msgSend(v128, sel_param);
                            sub_21FC5B604();

                            v53 = (unint64_t)v130;
                            sub_21FC5A5CC();

                            goto LABEL_22;
                          }
                          v77 = *(_QWORD *)&v141[8 * v78];
                          if (!v77)
                          {
                            while (1)
                            {
                              v69 = v78 + 1;
                              if (__OFADD__(v78, 1))
                                break;
                              if (v69 >= v68)
                                goto LABEL_21;
                              v77 = *(_QWORD *)&v141[8 * v69];
                              ++v78;
                              if (v77)
                                goto LABEL_49;
                            }
LABEL_98:
                            __break(1u);
LABEL_99:
                            __break(1u);
LABEL_100:
                            swift_bridgeObjectRetain();
                            v54 = sub_21FC5BC7C();
                            goto LABEL_19;
                          }
                        }
                      }
                    }
                  }
                  v69 = v78;
                }
LABEL_49:
                v67 = (v77 - 1) & v77;
                v71 = __clz(__rbit64(v77)) + (v69 << 6);
              }
              v72 = (uint64_t *)(*(_QWORD *)(v142 + 56) + 16 * v71);
              v73 = *v72;
              v74 = v72[1];
              v147 = v53;
              v148 = v64;
              v145 = 31611;
              v146 = 0xE200000000000000;
              sub_21FC5B6AC();
              sub_21FC5B6AC();
              v143 = v73;
              v144 = v74;
              sub_21FA87D78();
              v53 = sub_21FC5BAD8();
              v76 = v75;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v64 = v76;
            }
          }
          v79 = objc_msgSend(v59, sel_variable);
          if (v79)
            break;

          if (v55 == v54)
            goto LABEL_83;
        }
        v80 = v79;
        v128 = v59;
        v127 = v55;
        sub_21FC5B604();
        v82 = v81;

        v147 = 31611;
        v148 = 0xE200000000000000;
        v126 = v82;
        sub_21FC5B6AC();
        sub_21FC5B6AC();
        v53 = v147;
        v83 = v148;
        v84 = 1 << *(_BYTE *)(v142 + 32);
        v85 = v84 < 64 ? ~(-1 << v84) : -1;
        v86 = v85 & *(_QWORD *)(v142 + 64);
        v87 = (unint64_t)(v84 + 63) >> 6;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v88 = 0;
        v120 = v83;
        while (1)
        {
          if (v86)
          {
            v89 = __clz(__rbit64(v86));
            v86 &= v86 - 1;
            v90 = v89 | (v88 << 6);
            goto LABEL_60;
          }
          v60 = __OFADD__(v88++, 1);
          if (v60)
          {
LABEL_96:
            __break(1u);
LABEL_97:
            __break(1u);
            goto LABEL_98;
          }
          if (v88 >= v87)
            goto LABEL_81;
          v96 = *(_QWORD *)&v141[8 * v88];
          if (!v96)
            break;
LABEL_76:
          v86 = (v96 - 1) & v96;
          v90 = __clz(__rbit64(v96)) + (v88 << 6);
LABEL_60:
          v91 = (uint64_t *)(*(_QWORD *)(v142 + 56) + 16 * v90);
          v92 = *v91;
          v93 = v91[1];
          v147 = v53;
          v148 = v83;
          v145 = 31611;
          v146 = 0xE200000000000000;
          sub_21FC5B6AC();
          sub_21FC5B6AC();
          v143 = v92;
          v144 = v93;
          sub_21FA87D78();
          v53 = sub_21FC5BAD8();
          v95 = v94;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v83 = v95;
        }
        v97 = v88 + 1;
        if (v88 + 1 >= v87)
          goto LABEL_81;
        v96 = *(_QWORD *)&v141[8 * v97];
        if (v96)
          break;
        v97 = v88 + 2;
        if (v88 + 2 >= v87)
          goto LABEL_81;
        v96 = *(_QWORD *)&v141[8 * v97];
        if (v96)
          break;
        v97 = v88 + 3;
        if (v88 + 3 >= v87)
          goto LABEL_81;
        v96 = *(_QWORD *)&v141[8 * v97];
        if (v96)
          break;
        v97 = v88 + 4;
        if (v88 + 4 >= v87)
          goto LABEL_81;
        v96 = *(_QWORD *)&v141[8 * v97];
        if (v96)
          break;
        v97 = v88 + 5;
        if (v88 + 5 >= v87)
          goto LABEL_81;
        v96 = *(_QWORD *)&v141[8 * v97];
        if (v96)
          break;
        while (1)
        {
          v88 = v97 + 1;
          if (__OFADD__(v97, 1))
            goto LABEL_99;
          if (v88 >= v87)
            break;
          v96 = *(_QWORD *)&v141[8 * v88];
          ++v97;
          if (v96)
            goto LABEL_76;
        }
LABEL_81:
        v54 = v124;
        v55 = v127;
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        v98 = v128;
        v99 = objc_msgSend(v128, sel_param);
        sub_21FC5B604();

        v53 = (unint64_t)v130;
        sub_21FC5A5CC();

LABEL_22:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v55 == v54)
          goto LABEL_83;
      }
      v88 = v97;
      goto LABEL_76;
    }
LABEL_83:
    swift_bridgeObjectRelease_n();
    v41 = v130;
    v44 = v138;
  }
  if ((v134 & 1) != 0)
  {
    sub_21FC5A5CC();
    sub_21FC5A584();
  }
  v100 = objc_msgSend(v129, sel_body, v119, v120);
  if (v100)
  {
    v101 = v100;
    sub_21FC5B568();

    v102 = (void *)objc_opt_self();
    v103 = (void *)sub_21FC5B55C();
    swift_bridgeObjectRelease();
    v147 = 0;
    v104 = objc_msgSend(v102, sel_dataWithJSONObject_options_error_, v103, 0, &v147);

    v105 = (id)v147;
    if (v104)
    {
      v106 = sub_21FC5A9EC();
      v108 = v107;

      v109 = v133;
      sub_21FC5B634();
      v110 = sub_21FC5B61C();
      if (v111)
      {
        v112 = v122;
        sub_21FC1AAB0(v110, v111, v142);
        v122 = v112;
        swift_bridgeObjectRelease();
        sub_21FC5B634();
        sub_21FC5B610();
        v114 = v113;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v131 + 8))(v109, v132);
        if (v114 >> 60 == 15)
        {
          sub_21FAC7C38();
          swift_allocError();
          *(_OWORD *)v115 = xmmword_21FC6EF30;
          *(_BYTE *)(v115 + 16) = 8;
          swift_willThrow();
          sub_21FA2D770(v106, v108);
          (*(void (**)(char *, uint64_t))(v44 + 8))(v137, v139);
          (*(void (**)(char *, uint64_t))(v135 + 8))(v41, v136);
          return sub_21FA2EDA0(v140, &qword_25554D4E8, (void (*)(uint64_t))MEMORY[0x24BDCBB78]);
        }
        sub_21FC5A5C0();
      }
      sub_21FA2D770(v106, v108);
    }
    else
    {
      v116 = v105;
      v117 = (void *)sub_21FC5A8E4();

      swift_willThrow();
      v122 = 0;
    }
  }
  v118 = objc_msgSend(v129, sel_method);
  sub_21FC5B604();

  sub_21FC5A56C();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v137, v139);
  (*(void (**)(uint64_t, char *, uint64_t))(v135 + 32))(v121, v41, v136);
  return sub_21FA2EDA0(v140, &qword_25554D4E8, (void (*)(uint64_t))MEMORY[0x24BDCBB78]);
}

unint64_t sub_21FC1BC3C(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  BOOL v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  id v36;
  void *v37;
  unint64_t v38;
  id v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  int64_t v52;
  unint64_t v53;
  int64_t v54;
  int v55;
  void (*v56)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _BYTE v63[16];
  unint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  unint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  id v78;
  uint64_t v79;
  int64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;

  sub_21FA2ED54(0, &qword_25554D6D8, (void (*)(uint64_t))MEMORY[0x24BDCB988]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v63[-v5];
  v7 = sub_21FC5A6E0();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v72 = &v63[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9);
  v66 = &v63[-v11];
  if (a1 >> 62)
    goto LABEL_76;
  v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v12)
  {
LABEL_3:
    v13 = 0;
    v71 = a1 & 0xC000000000000001;
    v64 = a1 + 32;
    v87 = a2 + 64;
    v76 = v8;
    v77 = MEMORY[0x24BEE4AF8];
    v67 = v7;
    v68 = a1;
    v69 = v6;
    v70 = v12;
    while (1)
    {
      if (v71)
      {
        v14 = (id)MEMORY[0x2207D057C](v13, a1);
        v15 = __OFADD__(v13, 1);
        v16 = v13 + 1;
        if (v15)
          goto LABEL_74;
      }
      else
      {
        v14 = *(id *)(v64 + 8 * v13);
        v15 = __OFADD__(v13, 1);
        v16 = v13 + 1;
        if (v15)
          goto LABEL_74;
      }
      v79 = v16;
      v17 = v14;
      v18 = objc_msgSend(v14, sel_literal);
      if (v18)
      {
        v19 = v18;
        v8 = sub_21FC5B604();
        a1 = v20;

        v78 = v17;
        v6 = objc_msgSend(v17, sel_param);
        v73 = sub_21FC5B604();
        v74 = v21;

        v22 = 1 << *(_BYTE *)(a2 + 32);
        if (v22 < 64)
          v23 = ~(-1 << v22);
        else
          v23 = -1;
        v24 = v23 & *(_QWORD *)(a2 + 64);
        v80 = (unint64_t)(v22 + 63) >> 6;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v7 = 0;
        v75 = a1;
        while (1)
        {
          if (v24)
          {
            v25 = __clz(__rbit64(v24));
            v24 &= v24 - 1;
            v26 = v25 | (v7 << 6);
          }
          else
          {
            v33 = v7 + 1;
            if (__OFADD__(v7, 1))
            {
              __break(1u);
              goto LABEL_72;
            }
            if (v33 >= v80)
              goto LABEL_35;
            v34 = *(_QWORD *)(v87 + 8 * v33);
            ++v7;
            if (!v34)
            {
              v7 = v33 + 1;
              if (v33 + 1 >= v80)
                goto LABEL_35;
              v34 = *(_QWORD *)(v87 + 8 * v7);
              if (!v34)
              {
                v7 = v33 + 2;
                if (v33 + 2 >= v80)
                  goto LABEL_35;
                v34 = *(_QWORD *)(v87 + 8 * v7);
                if (!v34)
                {
                  v7 = v33 + 3;
                  if (v33 + 3 >= v80)
                    goto LABEL_35;
                  v34 = *(_QWORD *)(v87 + 8 * v7);
                  if (!v34)
                  {
                    v35 = v33 + 4;
                    if (v35 >= v80)
                    {
LABEL_35:
                      swift_release();
                      swift_bridgeObjectRelease();
                      v6 = v69;
                      sub_21FC5A6D4();
                      swift_bridgeObjectRelease();
                      goto LABEL_61;
                    }
                    v34 = *(_QWORD *)(v87 + 8 * v35);
                    if (!v34)
                    {
                      while (1)
                      {
                        v7 = v35 + 1;
                        if (__OFADD__(v35, 1))
                          break;
                        if (v7 >= v80)
                          goto LABEL_35;
                        v34 = *(_QWORD *)(v87 + 8 * v7);
                        ++v35;
                        if (v34)
                          goto LABEL_34;
                      }
LABEL_73:
                      __break(1u);
LABEL_74:
                      __break(1u);
LABEL_75:
                      __break(1u);
LABEL_76:
                      swift_bridgeObjectRetain();
                      v12 = sub_21FC5BC7C();
                      if (!v12)
                        goto LABEL_77;
                      goto LABEL_3;
                    }
                    v7 = v35;
                  }
                }
              }
            }
LABEL_34:
            v24 = (v34 - 1) & v34;
            v26 = __clz(__rbit64(v34)) + (v7 << 6);
          }
          v27 = 16 * v26;
          v6 = *(_BYTE **)(*(_QWORD *)(a2 + 48) + v27 + 8);
          v28 = (uint64_t *)(*(_QWORD *)(a2 + 56) + v27);
          v30 = *v28;
          v29 = v28[1];
          v85 = v8;
          v86 = a1;
          v83 = 31611;
          v84 = 0xE200000000000000;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_21FC5B6AC();
          sub_21FC5B6AC();
          v81 = v30;
          v82 = v29;
          sub_21FA87D78();
          v8 = sub_21FC5BAD8();
          v32 = v31;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a1 = v32;
        }
      }
      v36 = objc_msgSend(v17, sel_variable);
      if (!v36)
      {
        v8 = v76;
        v6 = v69;
        (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v76 + 56))(v69, 1, 1, v7);

        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
          goto LABEL_62;
LABEL_4:
        sub_21FA2EDA0((uint64_t)v6, &qword_25554D6D8, (void (*)(uint64_t))MEMORY[0x24BDCB988]);
        goto LABEL_5;
      }
      v37 = v36;
      sub_21FC5B604();
      a1 = v38;

      v78 = v17;
      v39 = objc_msgSend(v17, sel_param);
      v73 = sub_21FC5B604();
      v74 = v40;

      v85 = 31611;
      v86 = 0xE200000000000000;
      v75 = a1;
      sub_21FC5B6AC();
      sub_21FC5B6AC();
      v8 = v85;
      v41 = (_BYTE *)v86;
      v42 = 1 << *(_BYTE *)(a2 + 32);
      v43 = v42 < 64 ? ~(-1 << v42) : -1;
      v44 = v43 & *(_QWORD *)(a2 + 64);
      v80 = (unint64_t)(v42 + 63) >> 6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v7 = 0;
      v65 = v41;
      while (1)
      {
        if (v44)
        {
          v45 = __clz(__rbit64(v44));
          v44 &= v44 - 1;
          v46 = v45 | (v7 << 6);
          goto LABEL_42;
        }
        v52 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_72:
          __break(1u);
          goto LABEL_73;
        }
        if (v52 >= v80)
          goto LABEL_60;
        v53 = *(_QWORD *)(v87 + 8 * v52);
        ++v7;
        if (!v53)
        {
          v7 = v52 + 1;
          if (v52 + 1 >= v80)
            goto LABEL_60;
          v53 = *(_QWORD *)(v87 + 8 * v7);
          if (!v53)
          {
            v7 = v52 + 2;
            if (v52 + 2 >= v80)
              goto LABEL_60;
            v53 = *(_QWORD *)(v87 + 8 * v7);
            if (!v53)
            {
              v7 = v52 + 3;
              if (v52 + 3 >= v80)
                goto LABEL_60;
              v53 = *(_QWORD *)(v87 + 8 * v7);
              if (!v53)
                break;
            }
          }
        }
LABEL_59:
        v44 = (v53 - 1) & v53;
        v46 = __clz(__rbit64(v53)) + (v7 << 6);
LABEL_42:
        v47 = 16 * v46;
        a1 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + v47 + 8);
        v48 = (uint64_t *)(*(_QWORD *)(a2 + 56) + v47);
        v49 = *v48;
        v50 = v48[1];
        v85 = v8;
        v86 = (unint64_t)v41;
        v83 = 31611;
        v84 = 0xE200000000000000;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_21FC5B6AC();
        sub_21FC5B6AC();
        v81 = v49;
        v82 = v50;
        sub_21FA87D78();
        v8 = sub_21FC5BAD8();
        v6 = v51;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v41 = v6;
      }
      v54 = v52 + 4;
      if (v54 >= v80)
        goto LABEL_60;
      v53 = *(_QWORD *)(v87 + 8 * v54);
      if (v53)
        break;
      while (1)
      {
        v7 = v54 + 1;
        if (__OFADD__(v54, 1))
          goto LABEL_75;
        if (v7 >= v80)
          break;
        v53 = *(_QWORD *)(v87 + 8 * v7);
        ++v54;
        if (v53)
          goto LABEL_59;
      }
LABEL_60:
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = v69;
      sub_21FC5A6D4();
      swift_bridgeObjectRelease();
LABEL_61:
      swift_bridgeObjectRelease();
      v8 = v76;
      v7 = v67;
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v6, 0, 1, v67);

      v55 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
      a1 = v68;
      if (v55 == 1)
        goto LABEL_4;
LABEL_62:
      v56 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32);
      v57 = v66;
      v56(v66, v6, v7);
      v56(v72, v57, v7);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        v58 = v77;
      else
        v58 = sub_21FA7DE70(0, *(_QWORD *)(v77 + 16) + 1, 1, v77);
      v60 = *(_QWORD *)(v58 + 16);
      v59 = *(_QWORD *)(v58 + 24);
      if (v60 >= v59 >> 1)
        v58 = sub_21FA7DE70(v59 > 1, v60 + 1, 1, v58);
      *(_QWORD *)(v58 + 16) = v60 + 1;
      v8 = v76;
      v61 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v77 = v58;
      v56((_BYTE *)(v58 + v61 + *(_QWORD *)(v76 + 72) * v60), v72, v7);
LABEL_5:
      v13 = v79;
      if (v79 == v70)
      {
        swift_bridgeObjectRelease();
        return v77;
      }
    }
    v7 = v54;
    goto LABEL_59;
  }
LABEL_77:
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_21FC1C520(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v13;

  v4 = (_QWORD *)(a1 + 64);
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v13 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    v8 = __clz(__rbit64(v7));
    goto LABEL_22;
  }
  if (v13 > 1)
  {
    v9 = v4[1];
    v10 = 1;
    if (v9)
      goto LABEL_21;
    v10 = 2;
    if (v13 <= 2)
      goto LABEL_23;
    v9 = v4[2];
    if (v9)
      goto LABEL_21;
    v10 = 3;
    if (v13 <= 3)
      goto LABEL_23;
    v9 = v4[3];
    if (v9)
      goto LABEL_21;
    v10 = 4;
    if (v13 <= 4)
      goto LABEL_23;
    v9 = v4[4];
    if (v9)
      goto LABEL_21;
    v10 = 5;
    if (v13 <= 5)
      goto LABEL_23;
    v9 = v4[5];
    if (v9)
    {
LABEL_21:
      v8 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_22:
      __asm { BR              X8 }
    }
    v11 = 6;
    if (v13 > 6)
    {
      v9 = v4[6];
      if (v9)
      {
        v10 = 6;
        goto LABEL_21;
      }
      while (1)
      {
        v10 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
          JUMPOUT(0x21FC1C8B4);
        }
        if (v10 >= v13)
          break;
        v9 = v4[v10];
        ++v11;
        if (v9)
          goto LABEL_21;
      }
    }
  }
LABEL_23:
  swift_release();
  return a2;
}

uint64_t HDHealthRecordsXPCServiceClient.signedClinicalDataFilePreprocessingPublisher(for:options:)(void *a1, uint64_t a2)
{
  return sub_21FC1CB00(a1, a2);
}

uint64_t HDHealthRecordsXPCServiceClient.signedClinicalDataContextCollectionProcessingPublisher(_:)(void *a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;

  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = a1;
  sub_21FC1D298(0, &qword_25554BB20, (unint64_t *)&unk_25554BB00);
  swift_allocObject();
  v4 = v1;
  v5 = a1;
  sub_21FC5B25C();
  sub_21FC1D30C(&qword_25554B240, &qword_25554BB20, (unint64_t *)&unk_25554BB00);
  v6 = sub_21FC5B280();
  swift_release();
  return v6;
}

uint64_t HDHealthRecordsXPCServiceClient.reprocessingPublisher(_:options:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  _QWORD *v5;
  id v6;
  uint64_t v7;

  v5 = (_QWORD *)swift_allocObject();
  v5[2] = v2;
  v5[3] = a1;
  v5[4] = a2;
  sub_21FC1D298(0, &qword_25554B228, &qword_25554B200);
  swift_allocObject();
  v6 = v2;
  swift_bridgeObjectRetain();
  sub_21FC5B25C();
  sub_21FC1D30C(&qword_25554B230, &qword_25554B228, &qword_25554B200);
  v7 = sub_21FC5B280();
  swift_release();
  return v7;
}

uint64_t HDHealthRecordsXPCServiceClient.signedClinicalDataFHIRResourceDataPreprocessingPublisher(_:options:)(void *a1, uint64_t a2)
{
  return sub_21FC1CB00(a1, a2);
}

uint64_t sub_21FC1CB00(void *a1, uint64_t a2)
{
  void *v2;
  _QWORD *v5;
  id v6;
  id v7;
  uint64_t v8;

  v5 = (_QWORD *)swift_allocObject();
  v5[2] = v2;
  v5[3] = a1;
  v5[4] = a2;
  sub_21FC1D298(0, &qword_25554B228, &qword_25554B200);
  swift_allocObject();
  v6 = v2;
  v7 = a1;
  sub_21FC5B25C();
  sub_21FC1D30C(&qword_25554B230, &qword_25554B228, &qword_25554B200);
  v8 = sub_21FC5B280();
  swift_release();
  return v8;
}

uint64_t HDHealthRecordsXPCServiceClient.originalSignedClinicalDataRecordProcessingPublisher(_:options:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  _QWORD *v5;
  id v6;
  uint64_t v7;

  v5 = (_QWORD *)swift_allocObject();
  v5[2] = v2;
  v5[3] = a1;
  v5[4] = a2;
  sub_21FC1D298(0, &qword_25554BB20, (unint64_t *)&unk_25554BB00);
  swift_allocObject();
  v6 = v2;
  swift_bridgeObjectRetain();
  sub_21FC5B25C();
  sub_21FC1D30C(&qword_25554B240, &qword_25554BB20, (unint64_t *)&unk_25554BB00);
  v7 = sub_21FC5B280();
  swift_release();
  return v7;
}

void sub_21FC1CD00(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[6];

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = sub_21FA5F648;
  *(_QWORD *)(v11 + 24) = v10;
  v13[4] = sub_21FC1D62C;
  v13[5] = v11;
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 1107296256;
  v13[2] = sub_21FC1CE28;
  v13[3] = &block_descriptor_57;
  v12 = _Block_copy(v13);
  swift_retain();
  swift_release();
  objc_msgSend(a3, sel_preprocessSignedClinicalData_options_completion_, a4, a5, v12);
  _Block_release(v12);
}

uint64_t sub_21FC1CDFC()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_21FC1CE2C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[6];

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = sub_21FA5F648;
  *(_QWORD *)(v11 + 24) = v10;
  v13[4] = sub_21FC1D5D0;
  v13[5] = v11;
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 1107296256;
  v13[2] = sub_21FC1CE28;
  v13[3] = &block_descriptor_27;
  v12 = _Block_copy(v13);
  swift_retain();
  swift_release();
  objc_msgSend(a3, sel_preprocessSignedClinicalDataFHIRResourceObject_options_completion_, a4, a5, v12);
  _Block_release(v12);
}

void sub_21FC1CF28(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[6];

  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  sub_21FA5BE58(0, &qword_25554BB18);
  swift_retain();
  v10 = (void *)sub_21FC5B79C();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = sub_21FA5F648;
  *(_QWORD *)(v11 + 24) = v9;
  v13[4] = sub_21FC1D62C;
  v13[5] = v11;
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 1107296256;
  v13[2] = sub_21FC1CE28;
  v13[3] = &block_descriptor_37;
  v12 = _Block_copy(v13);
  swift_release();
  objc_msgSend(a3, sel_reprocessOriginalSignedClinicalDataRecords_options_completion_, v10, a5, v12);
  _Block_release(v12);

}

void sub_21FC1D050(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[6];

  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  sub_21FA5BE58(0, &qword_25554BB18);
  swift_retain();
  v10 = (void *)sub_21FC5B79C();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = sub_21FA5F648;
  *(_QWORD *)(v11 + 24) = v9;
  v13[4] = sub_21FC1D62C;
  v13[5] = v11;
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 1107296256;
  v13[2] = sub_21FC1CE28;
  v13[3] = &block_descriptor_22;
  v12 = _Block_copy(v13);
  swift_release();
  objc_msgSend(a3, sel_processOriginalSignedClinicalDataRecords_options_completion_, v10, a5, v12);
  _Block_release(v12);

}

void sub_21FC1D178(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[6];

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = sub_21FA5F648;
  *(_QWORD *)(v9 + 24) = v8;
  v11[4] = sub_21FC1D62C;
  v11[5] = v9;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1107296256;
  v11[2] = sub_21FC1CE28;
  v11[3] = &block_descriptor_47;
  v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(a3, sel_processSignedClinicalDataContextCollection_completion_, a4, v10);
  _Block_release(v10);
}

uint64_t sub_21FC1D26C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_21FC1D298(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_21FA5BE58(255, a3);
    sub_21FA2CDB4();
    v4 = sub_21FC5B250();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_21FC1D30C(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_21FC1D298(255, a2, a3);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9E58], v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_21FC1D354(void *a1, id a2, void (*a3)(void *, uint64_t))
{
  id v6;
  id v7;
  id v8;

  if (a1)
  {
    v8 = a1;
    a3(a1, 0);

  }
  else
  {
    if (a2)
    {
      v6 = a2;
    }
    else
    {
      sub_21FC1D58C();
      v6 = (id)swift_allocError();
    }
    v7 = a2;
    a3(v6, 1);

  }
}

uint64_t static HDHealthRecordsXPCServiceClientError.== infix(_:_:)()
{
  return 1;
}

uint64_t HDHealthRecordsXPCServiceClientError.hash(into:)()
{
  return sub_21FC5BE98();
}

uint64_t HDHealthRecordsXPCServiceClientError.hashValue.getter()
{
  sub_21FC5BE8C();
  sub_21FC5BE98();
  return sub_21FC5BEB0();
}

unint64_t sub_21FC1D470()
{
  unint64_t result;

  result = qword_25554D6E0;
  if (!qword_25554D6E0)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for HDHealthRecordsXPCServiceClientError, &type metadata for HDHealthRecordsXPCServiceClientError);
    atomic_store(result, (unint64_t *)&qword_25554D6E0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for HDHealthRecordsXPCServiceClientError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21FC1D4F4 + 4 * byte_21FC717F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21FC1D514 + 4 * byte_21FC717F5[v4]))();
}

_BYTE *sub_21FC1D4F4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21FC1D514(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21FC1D51C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21FC1D524(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21FC1D52C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21FC1D534(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for HDHealthRecordsXPCServiceClientError()
{
  return &type metadata for HDHealthRecordsXPCServiceClientError;
}

uint64_t sub_21FC1D550()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

unint64_t sub_21FC1D58C()
{
  unint64_t result;

  result = qword_25554D6E8;
  if (!qword_25554D6E8)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for HDHealthRecordsXPCServiceClientError, &type metadata for HDHealthRecordsXPCServiceClientError);
    atomic_store(result, (unint64_t *)&qword_25554D6E8);
  }
  return result;
}

void sub_21FC1D5D0(void *a1, void *a2)
{
  uint64_t v2;

  sub_21FC1D354(a1, a2, *(void (**)(void *, uint64_t))(v2 + 16));
}

id sub_21FC1D634()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  _QWORD v31[8];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _OWORD v41[2];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v31 - v2;
  v4 = type metadata accessor for EUDCCPublicKey();
  v5 = (char *)v0 + *(int *)(v4 + 28);
  v6 = *((_QWORD *)v5 + 13);
  if (v6)
  {
    v7 = v4;
    v8 = *((_QWORD *)v5 + 12);
    sub_21FC5A65C();
    swift_allocObject();
    swift_bridgeObjectRetain();
    sub_21FC5A650();
    v9 = v5[24];
    v10 = *((_QWORD *)v5 + 16);
    LOWORD(v41[0]) = *(_WORD *)v5;
    *(_OWORD *)((char *)v41 + 8) = *(_OWORD *)(v5 + 8);
    BYTE8(v41[1]) = v9;
    v11 = *((_OWORD *)v5 + 3);
    v42 = *((_OWORD *)v5 + 2);
    v43 = v11;
    v12 = *((_OWORD *)v5 + 5);
    v44 = *((_OWORD *)v5 + 4);
    v45 = v12;
    *(_QWORD *)&v46 = v8;
    *((_QWORD *)&v46 + 1) = v6;
    v47 = *((_OWORD *)v5 + 7);
    v48 = v10;
    v38 = v46;
    v39 = v47;
    v40 = v10;
    v34 = v42;
    v35 = v43;
    v36 = v44;
    v37 = v12;
    v32 = v41[0];
    v33 = v41[1];
    sub_21FBB4048((uint64_t)v41);
    sub_21FC1E4E8();
    v17 = sub_21FC5A644();
    v19 = v18;
    sub_21FBB40D8((uint64_t)v41);
    swift_release();
    sub_21FA7187C((uint64_t)v0 + *(int *)(v7 + 24), (uint64_t)v3);
    v31[1] = *v0;
    swift_bridgeObjectRetain();
    v20 = (void *)sub_21FC5B5E0();
    swift_bridgeObjectRelease();
    v21 = (void *)sub_21FC5AA64();
    v22 = sub_21FC5AAAC();
    v23 = *(_QWORD *)(v22 - 8);
    v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v3, 1, v22);
    v25 = 0;
    if (v24 != 1)
    {
      v25 = (void *)sub_21FC5AA64();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v3, v22);
    }
    v26 = objc_allocWithZone(MEMORY[0x24BE48A88]);
    v27 = (void *)sub_21FC5B5E0();
    swift_bridgeObjectRelease();
    v28 = (void *)sub_21FC5A9D4();
    sub_21FA2D770(v17, v19);
    v29 = objc_msgSend(v26, sel_initWithKeyID_added_removed_source_jwkData_, v20, v21, v25, v27, v28);

  }
  else
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v13 = sub_21FC5AFD4();
    __swift_project_value_buffer(v13, (uint64_t)qword_25406D830);
    v14 = sub_21FC5AFC8();
    v15 = sub_21FC5B964();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      MEMORY[0x2207D105C](v16, -1, -1);
    }

    return 0;
  }
  return v29;
}

uint64_t EUDCCPublicKeys.v.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t EUDCCPublicKeys.v.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*EUDCCPublicKeys.v.modify())()
{
  return nullsub_1;
}

uint64_t EUDCCPublicKeys.keys.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_21FC1DB4C()
{
  _BYTE *v0;

  if (*v0)
    return 1937335659;
  else
    return 118;
}

uint64_t sub_21FC1DB74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_21FC1F9C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_21FC1DB98()
{
  sub_21FC1DD78();
  return sub_21FC5BF10();
}

uint64_t sub_21FC1DBC0()
{
  sub_21FC1DD78();
  return sub_21FC5BF1C();
}

uint64_t EUDCCPublicKeys.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  sub_21FC1E950(0, &qword_25554D6F0, (uint64_t (*)(void))sub_21FC1DD78, (uint64_t)&type metadata for EUDCCPublicKeys.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v10 - v6;
  v11 = *(_QWORD *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_21FC1DD78();
  sub_21FC5BEEC();
  v15 = 0;
  v8 = v12;
  sub_21FC5BD90();
  if (!v8)
  {
    v13 = v11;
    v14 = 1;
    sub_21FA2D1A0(0, &qword_25554D700, (uint64_t (*)(uint64_t))type metadata accessor for EUDCCPublicKey, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FC1DFBC(&qword_25554D708, &qword_25554D710, (uint64_t)&protocol conformance descriptor for EUDCCPublicKey, MEMORY[0x24BEE12A0]);
    sub_21FC5BD9C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_21FC1DD78()
{
  unint64_t result;

  result = qword_25554D6F8;
  if (!qword_25554D6F8)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC71BE4, &type metadata for EUDCCPublicKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554D6F8);
  }
  return result;
}

uint64_t type metadata accessor for EUDCCPublicKey()
{
  uint64_t result;

  result = qword_25554D7A8;
  if (!qword_25554D7A8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t EUDCCPublicKeys.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[2];
  char v14;
  char v15;

  v13[0] = a2;
  sub_21FC1E950(0, &qword_25554D718, (uint64_t (*)(void))sub_21FC1DD78, (uint64_t)&type metadata for EUDCCPublicKeys.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v13 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_21FC1DD78();
  sub_21FC5BEE0();
  if (!v2)
  {
    v9 = (uint64_t *)v13[0];
    v15 = 0;
    v10 = sub_21FC5BD24();
    sub_21FA2D1A0(0, &qword_25554D700, (uint64_t (*)(uint64_t))type metadata accessor for EUDCCPublicKey, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v14 = 1;
    sub_21FC1DFBC(&qword_25554D720, &qword_25554D728, (uint64_t)&protocol conformance descriptor for EUDCCPublicKey, MEMORY[0x24BEE12D0]);
    sub_21FC5BD30();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v12 = v13[1];
    *v9 = v10;
    v9[1] = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_21FC1DFBC(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_21FA2D1A0(255, &qword_25554D700, (uint64_t (*)(uint64_t))type metadata accessor for EUDCCPublicKey, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v10 = v9;
    v11 = sub_21FA2A08C(a2, (uint64_t (*)(uint64_t))type metadata accessor for EUDCCPublicKey, a3);
    result = MEMORY[0x2207D0F78](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FC1E054@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return EUDCCPublicKeys.init(from:)(a1, a2);
}

uint64_t sub_21FC1E068(_QWORD *a1)
{
  return EUDCCPublicKeys.encode(to:)(a1);
}

uint64_t EUDCCPublicKey.source.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EUDCCPublicKey.added.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for EUDCCPublicKey() + 20);
  v4 = sub_21FC5AAAC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t EUDCCPublicKey.removed.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for EUDCCPublicKey() + 24);
  return sub_21FA7187C(v3, a1);
}

uint64_t EUDCCPublicKey.jwk.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v16[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v3 = v1 + *(int *)(type metadata accessor for EUDCCPublicKey() + 28);
  v4 = *(_OWORD *)(v3 + 80);
  v5 = *(_OWORD *)(v3 + 112);
  v21 = *(_OWORD *)(v3 + 96);
  v22 = v5;
  v6 = *(_OWORD *)(v3 + 16);
  v7 = *(_OWORD *)(v3 + 48);
  v17 = *(_OWORD *)(v3 + 32);
  v8 = v17;
  v18 = v7;
  v9 = *(_OWORD *)(v3 + 48);
  v10 = *(_OWORD *)(v3 + 80);
  v19 = *(_OWORD *)(v3 + 64);
  v11 = v19;
  v20 = v10;
  v12 = *(_OWORD *)(v3 + 16);
  v16[0] = *(_OWORD *)v3;
  v13 = v16[0];
  v16[1] = v12;
  v14 = *(_OWORD *)(v3 + 112);
  *(_OWORD *)(a1 + 96) = v21;
  *(_OWORD *)(a1 + 112) = v14;
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 80) = v4;
  v23 = *(_QWORD *)(v3 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(v3 + 128);
  *(_OWORD *)a1 = v13;
  *(_OWORD *)(a1 + 16) = v6;
  return sub_21FBB4048((uint64_t)v16);
}

uint64_t sub_21FC1E1B0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21FC1E1DC + 4 * byte_21FC718E0[*v0]))(0x656372756F73, 0xE600000000000000);
}

uint64_t sub_21FC1E1DC()
{
  return 0x6465646461;
}

uint64_t sub_21FC1E1F0()
{
  return 0x6465766F6D6572;
}

uint64_t sub_21FC1E208()
{
  return 7042922;
}

uint64_t sub_21FC1E218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_21FC1FA88(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_21FC1E23C()
{
  sub_21FC1E4A4();
  return sub_21FC5BF10();
}

uint64_t sub_21FC1E264()
{
  sub_21FC1E4A4();
  return sub_21FC5BF1C();
}

uint64_t EUDCCPublicKey.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[8];
  uint64_t v18;
  char v19;
  char v20;

  v3 = v1;
  sub_21FC1E950(0, &qword_25554D730, (uint64_t (*)(void))sub_21FC1E4A4, (uint64_t)&type metadata for EUDCCPublicKey.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v17 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_21FC1E4A4();
  sub_21FC5BEEC();
  LOBYTE(v17[0]) = 0;
  sub_21FC5BD78();
  if (!v2)
  {
    v10 = type metadata accessor for EUDCCPublicKey();
    LOBYTE(v17[0]) = 1;
    sub_21FC5AAAC();
    sub_21FA2A08C(&qword_25406AAD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    sub_21FC5BD9C();
    v20 = 2;
    sub_21FC5BD6C();
    v11 = v3 + *(int *)(v10 + 28);
    v12 = *(_OWORD *)(v11 + 112);
    v17[6] = *(_OWORD *)(v11 + 96);
    v17[7] = v12;
    v18 = *(_QWORD *)(v11 + 128);
    v13 = *(_OWORD *)(v11 + 48);
    v17[2] = *(_OWORD *)(v11 + 32);
    v17[3] = v13;
    v14 = *(_OWORD *)(v11 + 80);
    v17[4] = *(_OWORD *)(v11 + 64);
    v17[5] = v14;
    v15 = *(_OWORD *)(v11 + 16);
    v17[0] = *(_OWORD *)v11;
    v17[1] = v15;
    v19 = 3;
    sub_21FC1E4E8();
    sub_21FC5BD9C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_21FC1E4A4()
{
  unint64_t result;

  result = qword_25554D738;
  if (!qword_25554D738)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC71B94, &type metadata for EUDCCPublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554D738);
  }
  return result;
}

unint64_t sub_21FC1E4E8()
{
  unint64_t result;

  result = qword_25554D740;
  if (!qword_25554D740)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for VCJWK, &type metadata for VCJWK);
    atomic_store(result, (unint64_t *)&qword_25554D740);
  }
  return result;
}

uint64_t EUDCCPublicKey.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char v46;

  v29 = a2;
  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v30 = (char *)&v27 - v4;
  v33 = sub_21FC5AAAC();
  v32 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v31 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC1E950(0, &qword_25554D748, (uint64_t (*)(void))sub_21FC1E4A4, (uint64_t)&type metadata for EUDCCPublicKey.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v35 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v27 - v8;
  v10 = type metadata accessor for EUDCCPublicKey();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_21FC1E4A4();
  v34 = v9;
  v13 = v36;
  sub_21FC5BEE0();
  if (v13)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v14 = v31;
  v36 = v7;
  v28 = a1;
  v15 = v32;
  v16 = v33;
  LOBYTE(v37) = 0;
  v17 = (uint64_t)v12;
  *v12 = sub_21FC5BD18();
  v12[1] = v18;
  LOBYTE(v37) = 1;
  sub_21FA2A08C(&qword_25406AAE0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
  sub_21FC5BD30();
  v19 = v10;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v17 + *(int *)(v10 + 20), v14, v16);
  LOBYTE(v37) = 2;
  v20 = (uint64_t)v30;
  sub_21FC5BD0C();
  v31 = 0;
  sub_21FA6A41C(v20, v17 + *(int *)(v19 + 24));
  v46 = 3;
  sub_21FBB250C();
  sub_21FC5BD30();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v34, v35);
  v21 = v17 + *(int *)(v19 + 28);
  v22 = v44;
  *(_OWORD *)(v21 + 96) = v43;
  *(_OWORD *)(v21 + 112) = v22;
  *(_QWORD *)(v21 + 128) = v45;
  v23 = v40;
  *(_OWORD *)(v21 + 32) = v39;
  *(_OWORD *)(v21 + 48) = v23;
  v24 = v42;
  *(_OWORD *)(v21 + 64) = v41;
  *(_OWORD *)(v21 + 80) = v24;
  v25 = v38;
  *(_OWORD *)v21 = v37;
  *(_OWORD *)(v21 + 16) = v25;
  sub_21FAC1858(v17, v29);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  return sub_21FAC189C(v17);
}

void sub_21FC1E950(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3();
    v10 = a5(a1, a4, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

uint64_t sub_21FC1E9AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return EUDCCPublicKey.init(from:)(a1, a2);
}

uint64_t sub_21FC1E9C0(_QWORD *a1)
{
  return EUDCCPublicKey.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for EUDCCPublicKeys(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EUDCCPublicKeys(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EUDCCPublicKeys()
{
  return &type metadata for EUDCCPublicKeys;
}

_QWORD *initializeBufferWithCopyOfBuffer for EUDCCPublicKey(_QWORD *a1, char *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *(_QWORD *)a2;
    *v4 = *(_QWORD *)a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *((_QWORD *)a2 + 1);
    *a1 = *(_QWORD *)a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = &a2[v8];
    v11 = sub_21FC5AAAC();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    swift_bridgeObjectRetain();
    v13(v9, v10, v11);
    v14 = a3[6];
    v15 = (char *)v4 + v14;
    v16 = &a2[v14];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v14], 1, v11))
    {
      sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v13(v15, v16, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
    }
    v19 = a3[7];
    v20 = (char *)v4 + v19;
    v21 = &a2[v19];
    *(_WORD *)v20 = *(_WORD *)v21;
    v22 = *((_QWORD *)v21 + 2);
    *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
    *((_QWORD *)v20 + 2) = v22;
    v20[24] = v21[24];
    v23 = *((_QWORD *)v21 + 5);
    *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
    *((_QWORD *)v20 + 5) = v23;
    v24 = *((_QWORD *)v21 + 7);
    *((_QWORD *)v20 + 6) = *((_QWORD *)v21 + 6);
    *((_QWORD *)v20 + 7) = v24;
    v25 = *((_QWORD *)v21 + 9);
    *((_QWORD *)v20 + 8) = *((_QWORD *)v21 + 8);
    *((_QWORD *)v20 + 9) = v25;
    v26 = *((_QWORD *)v21 + 11);
    *((_QWORD *)v20 + 10) = *((_QWORD *)v21 + 10);
    *((_QWORD *)v20 + 11) = v26;
    v27 = *((_QWORD *)v21 + 13);
    *((_QWORD *)v20 + 12) = *((_QWORD *)v21 + 12);
    *((_QWORD *)v20 + 13) = v27;
    v28 = *((_QWORD *)v21 + 15);
    *((_QWORD *)v20 + 14) = *((_QWORD *)v21 + 14);
    *((_QWORD *)v20 + 15) = v28;
    *((_QWORD *)v20 + 16) = *((_QWORD *)v21 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for EUDCCPublicKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_21FC5AAAC();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v8 = a1 + *(int *)(a2 + 24);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5))
    v7(v8, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for EUDCCPublicKey(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *((_QWORD *)a2 + 1);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = &a2[v7];
  v10 = sub_21FC5AAAC();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  swift_bridgeObjectRetain();
  v12(v8, v9, v10);
  v13 = a3[6];
  v14 = (char *)a1 + v13;
  v15 = &a2[v13];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(&a2[v13], 1, v10))
  {
    sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v12(v14, v15, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  v17 = a3[7];
  v18 = (char *)a1 + v17;
  v19 = &a2[v17];
  *(_WORD *)v18 = *(_WORD *)v19;
  v20 = *((_QWORD *)v19 + 2);
  *((_QWORD *)v18 + 1) = *((_QWORD *)v19 + 1);
  *((_QWORD *)v18 + 2) = v20;
  v18[24] = v19[24];
  v21 = *((_QWORD *)v19 + 5);
  *((_QWORD *)v18 + 4) = *((_QWORD *)v19 + 4);
  *((_QWORD *)v18 + 5) = v21;
  v22 = *((_QWORD *)v19 + 7);
  *((_QWORD *)v18 + 6) = *((_QWORD *)v19 + 6);
  *((_QWORD *)v18 + 7) = v22;
  v23 = *((_QWORD *)v19 + 9);
  *((_QWORD *)v18 + 8) = *((_QWORD *)v19 + 8);
  *((_QWORD *)v18 + 9) = v23;
  v24 = *((_QWORD *)v19 + 11);
  *((_QWORD *)v18 + 10) = *((_QWORD *)v19 + 10);
  *((_QWORD *)v18 + 11) = v24;
  v25 = *((_QWORD *)v19 + 13);
  *((_QWORD *)v18 + 12) = *((_QWORD *)v19 + 12);
  *((_QWORD *)v18 + 13) = v25;
  v26 = *((_QWORD *)v19 + 15);
  *((_QWORD *)v18 + 14) = *((_QWORD *)v19 + 14);
  *((_QWORD *)v18 + 15) = v26;
  *((_QWORD *)v18 + 16) = *((_QWORD *)v19 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for EUDCCPublicKey(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = (char *)a2 + v6;
  v9 = sub_21FC5AAAC();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = a3[6];
  v13 = &a1[v12];
  v14 = (char *)a2 + v12;
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v16 = v15(&a1[v12], 1, v9);
  v17 = v15(v14, 1, v9);
  if (!v16)
  {
    if (!v17)
    {
      v11(v13, v14, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v14, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
LABEL_7:
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = (char *)a2 + v19;
  *v20 = *((_BYTE *)a2 + v19);
  v20[1] = *((_BYTE *)a2 + v19 + 1);
  *((_QWORD *)v20 + 1) = *(_QWORD *)((char *)a2 + v19 + 8);
  *((_QWORD *)v20 + 2) = *(_QWORD *)((char *)a2 + v19 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20[24] = v21[24];
  *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
  *((_QWORD *)v20 + 5) = *((_QWORD *)v21 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v20 + 6) = *((_QWORD *)v21 + 6);
  *((_QWORD *)v20 + 7) = *((_QWORD *)v21 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v20 + 8) = *((_QWORD *)v21 + 8);
  *((_QWORD *)v20 + 9) = *((_QWORD *)v21 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v20 + 10) = *((_QWORD *)v21 + 10);
  *((_QWORD *)v20 + 11) = *((_QWORD *)v21 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v20 + 12) = *((_QWORD *)v21 + 12);
  *((_QWORD *)v20 + 13) = *((_QWORD *)v21 + 13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v20 + 14) = *((_QWORD *)v21 + 14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v20 + 15) = *((_QWORD *)v21 + 15);
  *((_QWORD *)v20 + 16) = *((_QWORD *)v21 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for EUDCCPublicKey(_OWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  *a1 = *(_OWORD *)a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = &a2[v6];
  v9 = sub_21FC5AAAC();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = &a2[v12];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a2[v12], 1, v9))
  {
    sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
  }
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = &a2[v16];
  v19 = *((_OWORD *)v18 + 7);
  *((_OWORD *)v17 + 6) = *((_OWORD *)v18 + 6);
  *((_OWORD *)v17 + 7) = v19;
  *((_QWORD *)v17 + 16) = *((_QWORD *)v18 + 16);
  v20 = *((_OWORD *)v18 + 3);
  *((_OWORD *)v17 + 2) = *((_OWORD *)v18 + 2);
  *((_OWORD *)v17 + 3) = v20;
  v21 = *((_OWORD *)v18 + 5);
  *((_OWORD *)v17 + 4) = *((_OWORD *)v18 + 4);
  *((_OWORD *)v17 + 5) = v21;
  v22 = *((_OWORD *)v18 + 1);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v22;
  return a1;
}

char *assignWithTake for EUDCCPublicKey(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2[1];
  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = &a1[v7];
  v9 = (char *)a2 + v7;
  v10 = sub_21FC5AAAC();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = (char *)a2 + v13;
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v17 = v16(&a1[v13], 1, v10);
  v18 = v16(v15, 1, v10);
  if (!v17)
  {
    if (!v18)
    {
      v12(v14, v15, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v15, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
LABEL_7:
  v20 = a3[7];
  v21 = &a1[v20];
  v22 = (char *)a2 + v20;
  *(_WORD *)v21 = *(_WORD *)v22;
  v23 = *((_QWORD *)v22 + 2);
  *((_QWORD *)v21 + 1) = *((_QWORD *)v22 + 1);
  *((_QWORD *)v21 + 2) = v23;
  swift_bridgeObjectRelease();
  v21[24] = v22[24];
  v24 = *((_QWORD *)v22 + 5);
  *((_QWORD *)v21 + 4) = *((_QWORD *)v22 + 4);
  *((_QWORD *)v21 + 5) = v24;
  swift_bridgeObjectRelease();
  v25 = *((_QWORD *)v22 + 7);
  *((_QWORD *)v21 + 6) = *((_QWORD *)v22 + 6);
  *((_QWORD *)v21 + 7) = v25;
  swift_bridgeObjectRelease();
  v26 = *((_QWORD *)v22 + 9);
  *((_QWORD *)v21 + 8) = *((_QWORD *)v22 + 8);
  *((_QWORD *)v21 + 9) = v26;
  swift_bridgeObjectRelease();
  v27 = *((_QWORD *)v22 + 11);
  *((_QWORD *)v21 + 10) = *((_QWORD *)v22 + 10);
  *((_QWORD *)v21 + 11) = v27;
  swift_bridgeObjectRelease();
  v28 = *((_QWORD *)v22 + 13);
  *((_QWORD *)v21 + 12) = *((_QWORD *)v22 + 12);
  *((_QWORD *)v21 + 13) = v28;
  swift_bridgeObjectRelease();
  *((_QWORD *)v21 + 14) = *((_QWORD *)v22 + 14);
  swift_bridgeObjectRelease();
  v29 = *((_QWORD *)v22 + 16);
  *((_QWORD *)v21 + 15) = *((_QWORD *)v22 + 15);
  *((_QWORD *)v21 + 16) = v29;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EUDCCPublicKey()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FC1F450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_21FC5AAAC();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for EUDCCPublicKey()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FC1F514(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_21FC5AAAC();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_21FC1F5C8()
{
  unint64_t v0;
  unint64_t v1;

  sub_21FC5AAAC();
  if (v0 <= 0x3F)
  {
    sub_21FA2D1A0(319, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t storeEnumTagSinglePayload for EUDCCPublicKey.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21FC1F6C4 + 4 * byte_21FC718E9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21FC1F6F8 + 4 * byte_21FC718E4[v4]))();
}

uint64_t sub_21FC1F6F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FC1F700(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FC1F708);
  return result;
}

uint64_t sub_21FC1F714(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FC1F71CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21FC1F720(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FC1F728(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EUDCCPublicKey.CodingKeys()
{
  return &type metadata for EUDCCPublicKey.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for EUDCCPublicKeys.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21FC1F790 + 4 * byte_21FC718F3[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21FC1F7C4 + 4 * byte_21FC718EE[v4]))();
}

uint64_t sub_21FC1F7C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FC1F7CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FC1F7D4);
  return result;
}

uint64_t sub_21FC1F7E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FC1F7E8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21FC1F7EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FC1F7F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EUDCCPublicKeys.CodingKeys()
{
  return &type metadata for EUDCCPublicKeys.CodingKeys;
}

unint64_t sub_21FC1F814()
{
  unint64_t result;

  result = qword_25554D7E8;
  if (!qword_25554D7E8)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC71AB4, &type metadata for EUDCCPublicKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554D7E8);
  }
  return result;
}

unint64_t sub_21FC1F85C()
{
  unint64_t result;

  result = qword_25554D7F0;
  if (!qword_25554D7F0)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC71B6C, &type metadata for EUDCCPublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554D7F0);
  }
  return result;
}

unint64_t sub_21FC1F8A4()
{
  unint64_t result;

  result = qword_25554D7F8;
  if (!qword_25554D7F8)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC71ADC, &type metadata for EUDCCPublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554D7F8);
  }
  return result;
}

unint64_t sub_21FC1F8EC()
{
  unint64_t result;

  result = qword_25554D800;
  if (!qword_25554D800)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC71B04, &type metadata for EUDCCPublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554D800);
  }
  return result;
}

unint64_t sub_21FC1F934()
{
  unint64_t result;

  result = qword_25554D808;
  if (!qword_25554D808)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC71A24, &type metadata for EUDCCPublicKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554D808);
  }
  return result;
}

unint64_t sub_21FC1F97C()
{
  unint64_t result;

  result = qword_25554D810;
  if (!qword_25554D810)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC71A4C, &type metadata for EUDCCPublicKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554D810);
  }
  return result;
}

uint64_t sub_21FC1F9C0(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 118 && a2 == 0xE100000000000000 || (sub_21FC5BDF0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1937335659 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_21FC5BDF0();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_21FC1FA88(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656372756F73 && a2 == 0xE600000000000000;
  if (v2 || (sub_21FC5BDF0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6465646461 && a2 == 0xE500000000000000 || (sub_21FC5BDF0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6465766F6D6572 && a2 == 0xE700000000000000 || (sub_21FC5BDF0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 7042922 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_21FC5BDF0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t destroy for ClinicalSharingQueryDefaultDataProvider(id *a1)
{

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 3));
}

uint64_t initializeWithCopy for ClinicalSharingQueryDefaultDataProvider(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  id v11;
  id v12;
  id v13;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = a1 + 24;
  v7 = a2 + 24;
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  v11 = v3;
  v12 = v4;
  v13 = v5;
  v10(v6, v7, v9);
  return a1;
}

uint64_t assignWithCopy for ClinicalSharingQueryDefaultDataProvider(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  v10 = *(void **)(a2 + 16);
  v11 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  v12 = v10;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  return a1;
}

uint64_t assignWithTake for ClinicalSharingQueryDefaultDataProvider(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  v6 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClinicalSharingQueryDefaultDataProvider(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClinicalSharingQueryDefaultDataProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingQueryDefaultDataProvider()
{
  return &type metadata for ClinicalSharingQueryDefaultDataProvider;
}

id sub_21FC1FE68(uint64_t (*a1)(_BOOL8 *))
{
  id result;
  void *v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  char v8;

  result = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  if (!result)
  {
    __break(1u);
    goto LABEL_8;
  }
  v3 = result;
  result = objc_msgSend(result, sel_getPairedDevices);
  if (!result)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v4 = result;
  sub_21FA5BE58(0, &qword_25554D828);
  v5 = sub_21FC5B7A8();

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = sub_21FC5BC7C();

    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);

  }
  swift_bridgeObjectRelease();
  v7 = v6 != 0;
  v8 = 0;
  return (id)a1(&v7);
}

uint64_t sub_21FC1FF7C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void **v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t (*v21)(void);
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;

  v33 = a5;
  v34 = a1;
  v31 = a4;
  v35 = a2;
  v7 = sub_21FC5A83C();
  v8 = *(_QWORD *)(v7 - 8);
  v30 = v7;
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_21FC5AAAC();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v31, v7);
  v15 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v16 = (v13 + *(unsigned __int8 *)(v8 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v17 = (v9 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject();
  v19 = v35;
  *(_QWORD *)(v18 + 16) = v34;
  *(_QWORD *)(v18 + 24) = v19;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v18 + v15, v14, v11);
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v18 + v16, v10, v30);
  v20 = v32;
  *(_QWORD *)(v18 + v17) = v33;
  *(_QWORD *)(v18 + ((v17 + 15) & 0xFFFFFFFFFFFFFFF8)) = v20;
  v21 = MEMORY[0x24BDB9E38];
  sub_21FC20D5C(0, &qword_25554D830, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
  swift_allocObject();
  v22 = v34;
  v23 = v35;
  swift_bridgeObjectRetain();
  v24 = v20;
  v36 = sub_21FC5B25C();
  sub_21FC20DDC(&qword_25554D838, &qword_25554D830, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v21, MEMORY[0x24BDB9E58]);
  v25 = sub_21FC5B280();
  swift_release();
  v36 = v25;
  v26 = MEMORY[0x24BDB9AE0];
  sub_21FC20D5C(0, (unint64_t *)&qword_255541598, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FC20DDC((unint64_t *)&qword_2555415A8, (unint64_t *)&qword_255541598, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v26, MEMORY[0x24BDB9AF8]);
  v27 = sub_21FC5B280();
  swift_release();
  return v27;
}

uint64_t sub_21FC20200@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_21FC5B940();
  *a1 = result;
  return result;
}

uint64_t sub_21FC20228(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  void **v4;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  id v12;
  id v13;
  uint64_t (*v14)(void);
  uint64_t v15;

  v8 = objc_msgSend((id)objc_opt_self(), sel_predicateForUserDomainConceptsWithTypeIdentifier_, a1);
  v9 = *v4;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v8;
  *(_QWORD *)(v10 + 24) = a3;
  *(_BYTE *)(v10 + 32) = a4 & 1;
  *(_QWORD *)(v10 + 40) = a2;
  *(_QWORD *)(v10 + 48) = v9;
  v11 = MEMORY[0x24BDB9E38];
  sub_21FC203D0(0, &qword_25554D818, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
  swift_allocObject();
  swift_bridgeObjectRetain();
  v12 = v9;
  v13 = v8;
  sub_21FC5B25C();
  sub_21FC20440(&qword_25554D820, &qword_25554D818, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v11, MEMORY[0x24BDB9E58]);
  sub_21FC5B280();
  swift_release();
  v14 = MEMORY[0x24BDB9AE0];
  sub_21FC203D0(0, (unint64_t *)&qword_25554B908, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FC20440((unint64_t *)&qword_25554B928, (unint64_t *)&qword_25554B908, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v14, MEMORY[0x24BDB9AF8]);
  v15 = sub_21FC5B280();
  swift_release();

  return v15;
}

void sub_21FC203D0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_21FBC30A0();
    v7 = v6;
    v8 = sub_21FA2CDB4();
    v9 = a3(a1, v7, v8, MEMORY[0x24BEE3F20]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_21FC20440(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FC203D0(255, a2, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FC20480(uint64_t a1)
{
  void **v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  id v7;
  id v8;
  uint64_t (*v9)(void);
  uint64_t v10;

  v3 = objc_msgSend((id)objc_opt_self(), sel_predicateForListUserDomainConceptWithListType_, 2);
  v4 = *v1;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = 1;
  *(_BYTE *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = a1;
  *(_QWORD *)(v5 + 48) = v4;
  v6 = MEMORY[0x24BDB9E38];
  sub_21FC203D0(0, &qword_25554D818, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
  swift_allocObject();
  swift_bridgeObjectRetain();
  v7 = v4;
  v8 = v3;
  sub_21FC5B25C();
  sub_21FC20440(&qword_25554D820, &qword_25554D818, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v6, MEMORY[0x24BDB9E58]);
  sub_21FC5B280();
  swift_release();
  v9 = MEMORY[0x24BDB9AE0];
  sub_21FC203D0(0, (unint64_t *)&qword_25554B908, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FC20440((unint64_t *)&qword_25554B928, (unint64_t *)&qword_25554B908, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v9, MEMORY[0x24BDB9AF8]);
  v10 = sub_21FC5B280();
  swift_release();

  return v10;
}

uint64_t objectdestroyTm_12()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_21FC2064C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_21FA9B21C(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32), *(_QWORD *)(v2 + 40), *(void **)(v2 + 48));
}

uint64_t sub_21FC2065C()
{
  void **v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  unint64_t v5;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  id v18[2];

  v18[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = *v0;
  v18[0] = 0;
  v2 = objc_msgSend(v1, sel_biologicalSexWithError_, v18);
  if (v2)
  {
    v3 = v2;
    v4 = v18[0];
    v5 = (unint64_t)objc_msgSend(v3, sel_biologicalSex);

    if (v5 > 3)
      return 24942;
    else
      return *(_QWORD *)&aNotSet_0[8 * v5];
  }
  else
  {
    v7 = v18[0];
    v8 = (void *)sub_21FC5A8E4();

    swift_willThrow();
    if (qword_25406B7F8 != -1)
      swift_once();
    v9 = sub_21FC5AFD4();
    __swift_project_value_buffer(v9, (uint64_t)qword_25406D830);
    v10 = v8;
    v11 = v8;
    v12 = sub_21FC5AFC8();
    v13 = sub_21FC5B97C();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = (void *)swift_slowAlloc();
      v18[0] = v15;
      *(_DWORD *)v14 = 136315138;
      swift_getErrorValue();
      v16 = sub_21FC5BE44();
      sub_21FABDCF8(v16, v17, (uint64_t *)v18);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_21FA27000, v12, v13, "Could not get the biologicalSex. Error: %s", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v15, -1, -1);
      MEMORY[0x2207D105C](v14, -1, -1);

    }
    else
    {

    }
    return 0;
  }
}

uint64_t sub_21FC208F4@<X0>(uint64_t a1@<X8>)
{
  void **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26[2];

  v26[1] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = sub_21FC5A83C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0) + 32;
  v7 = *v1;
  v26[0] = 0;
  v8 = objc_msgSend(v7, sel_dateOfBirthComponentsWithError_, v26);
  v9 = v26[0];
  if (v8)
  {
    v10 = v8;
    sub_21FC5A7AC();
    v11 = v9;

    sub_21FC5A7C4();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  else
  {
    v13 = v26[0];
    v14 = (void *)sub_21FC5A8E4();

    swift_willThrow();
    if (qword_25406B7F8 != -1)
      swift_once();
    v15 = sub_21FC5AFD4();
    __swift_project_value_buffer(v15, (uint64_t)qword_25406D830);
    v16 = v14;
    v17 = v14;
    v18 = sub_21FC5AFC8();
    v19 = sub_21FC5B97C();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = (void *)swift_slowAlloc();
      v26[0] = v21;
      *(_DWORD *)v20 = 136315138;
      swift_getErrorValue();
      v22 = sub_21FC5BE44();
      v25 = sub_21FABDCF8(v22, v23, (uint64_t *)v26);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_21FA27000, v18, v19, "Could not get the DOB. Error: %s", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v21, -1, -1);
      MEMORY[0x2207D105C](v20, -1, -1);

    }
    else
    {

    }
    v24 = sub_21FC5AAAC();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a1, 1, 1, v24);
  }
}

uint64_t sub_21FC20BCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = sub_21FC5AAAC();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = sub_21FC5A83C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void sub_21FC20CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD *)(sub_21FC5AAAC() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(sub_21FC5A83C() - 8);
  v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = (*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_21FBAD17C(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24), v2 + v6, v2 + v9, *(_QWORD *)(v2 + v10), *(void **)(v2 + ((v10 + 15) & 0xFFFFFFFFFFFFF8)));
}

void sub_21FC20D5C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = sub_21FA5BE58(255, &qword_2555415A0);
    v7 = sub_21FA2CDB4();
    v8 = a3(a1, v6, v7, MEMORY[0x24BEE3F20]);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_21FC20DDC(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FC20D5C(255, a2, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PairedWatchStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21FC20E68 + 4 * byte_21FC71C45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21FC20E9C + 4 * byte_21FC71C40[v4]))();
}

uint64_t sub_21FC20E9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FC20EA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FC20EACLL);
  return result;
}

uint64_t sub_21FC20EB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FC20EC0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21FC20EC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FC20ECC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PairedWatchStatus()
{
  return &type metadata for PairedWatchStatus;
}

unint64_t sub_21FC20EEC()
{
  unint64_t result;

  result = qword_25554D840;
  if (!qword_25554D840)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC71D14, &type metadata for PairedWatchStatus);
    atomic_store(result, (unint64_t *)&qword_25554D840);
  }
  return result;
}

id sub_21FC20F30()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;

  v1 = objc_msgSend(v0, sel_identifier);
  if (!v1)
  {
    sub_21FC5B604();
    v1 = (id)sub_21FC5B5E0();
    swift_bridgeObjectRelease();
  }
  v2 = sub_21FC5B604();
  v4 = v3;
  if (v2 == sub_21FC5B604() && v4 == v5)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_17;
  }
  v7 = sub_21FC5BDF0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
LABEL_17:

    v18 = objc_msgSend((id)objc_opt_self(), sel_kilocalorieUnit);
    return v18;
  }
  v8 = sub_21FC5B604();
  v10 = v9;
  if (v8 == sub_21FC5B604() && v10 == v11)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v13 = sub_21FC5BDF0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {
      v14 = sub_21FC5B604();
      v16 = v15;
      if (v14 == sub_21FC5B604() && v16 == v17)
        goto LABEL_15;
      v21 = sub_21FC5BDF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v21 & 1) != 0)
        goto LABEL_23;
      v22 = sub_21FC5B604();
      v24 = v23;
      if (v22 == sub_21FC5B604() && v24 == v25)
      {
LABEL_15:
        swift_bridgeObjectRelease_n();
LABEL_23:

        v18 = objc_msgSend((id)objc_opt_self(), sel_millimeterOfMercuryUnit);
        return v18;
      }
      v26 = sub_21FC5BDF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v26 & 1) != 0)
        goto LABEL_23;
      v27 = sub_21FC5B604();
      v29 = v28;
      if (v27 == sub_21FC5B604() && v29 == v30)
      {
        swift_bridgeObjectRelease_n();
LABEL_31:

        v18 = objc_msgSend((id)objc_opt_self(), sel_poundUnit);
        return v18;
      }
      v31 = sub_21FC5BDF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v31 & 1) != 0)
        goto LABEL_31;
      v32 = sub_21FC5B604();
      v34 = v33;
      if (v32 == sub_21FC5B604() && v34 == v35)
        goto LABEL_38;
      v36 = sub_21FC5BDF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v36 & 1) != 0)
        goto LABEL_59;
      v37 = sub_21FC5B604();
      v39 = v38;
      if (v37 == sub_21FC5B604() && v39 == v40)
        goto LABEL_38;
      v41 = sub_21FC5BDF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v41 & 1) != 0)
        goto LABEL_59;
      v42 = sub_21FC5B604();
      v44 = v43;
      if (v42 == sub_21FC5B604() && v44 == v45)
        goto LABEL_77;
      v46 = sub_21FC5BDF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v46 & 1) == 0)
      {
        v47 = sub_21FC5B604();
        v49 = v48;
        if (v47 == sub_21FC5B604() && v49 == v50)
          goto LABEL_77;
        v51 = sub_21FC5BDF0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v51 & 1) == 0)
        {
          v52 = sub_21FC5B604();
          v54 = v53;
          if (v52 != sub_21FC5B604() || v54 != v55)
          {
            v56 = sub_21FC5BDF0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v56 & 1) != 0)
              goto LABEL_50;
            v58 = sub_21FC5B604();
            v60 = v59;
            if (v58 == sub_21FC5B604() && v60 == v61)
              goto LABEL_77;
            v62 = sub_21FC5BDF0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v62 & 1) != 0)
              goto LABEL_50;
            v63 = sub_21FC5B604();
            v65 = v64;
            if (v63 == sub_21FC5B604() && v65 == v66)
            {
LABEL_38:
              swift_bridgeObjectRelease_n();
LABEL_59:

              v18 = objc_msgSend((id)objc_opt_self(), sel_countUnit);
              return v18;
            }
            v67 = sub_21FC5BDF0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v67 & 1) != 0)
              goto LABEL_59;
            v68 = sub_21FC5B604();
            v70 = v69;
            if (v68 == sub_21FC5B604() && v70 == v71)
              goto LABEL_77;
            v72 = sub_21FC5BDF0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v72 & 1) != 0)
              goto LABEL_50;
            v73 = sub_21FC5B604();
            v75 = v74;
            if (v73 == sub_21FC5B604() && v75 == v76)
              goto LABEL_77;
            v77 = sub_21FC5BDF0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v77 & 1) != 0)
              goto LABEL_50;
            v78 = sub_21FC5B604();
            v80 = v79;
            if (v78 == sub_21FC5B604() && v80 == v81)
              goto LABEL_77;
            v82 = sub_21FC5BDF0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v82 & 1) != 0)
              goto LABEL_50;
            v83 = sub_21FC5B604();
            v85 = v84;
            if (v83 == sub_21FC5B604() && v85 == v86)
              goto LABEL_77;
            v87 = sub_21FC5BDF0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v87 & 1) != 0)
              goto LABEL_50;
            v88 = sub_21FC5B604();
            v90 = v89;
            if (v88 == sub_21FC5B604() && v90 == v91)
              goto LABEL_77;
            v92 = sub_21FC5BDF0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v92 & 1) != 0)
              goto LABEL_50;
            v93 = sub_21FC5B604();
            v95 = v94;
            if (v93 == sub_21FC5B604() && v95 == v96)
            {
              swift_bridgeObjectRelease_n();
LABEL_84:

              v18 = objc_msgSend((id)objc_opt_self(), sel_inchUnit);
              return v18;
            }
            v97 = sub_21FC5BDF0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v97 & 1) != 0)
              goto LABEL_84;
            v98 = sub_21FC5B604();
            v100 = v99;
            if (v98 == sub_21FC5B604() && v100 == v101)
              goto LABEL_87;
            v102 = sub_21FC5BDF0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v102 & 1) != 0)
              goto LABEL_89;
            v103 = sub_21FC5B604();
            v105 = v104;
            if (v103 == sub_21FC5B604() && v105 == v106)
            {
LABEL_87:
              swift_bridgeObjectRelease_n();
            }
            else
            {
              v107 = sub_21FC5BDF0();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v107 & 1) == 0)
              {
                v108 = sub_21FC5B604();
                v110 = v109;
                if (v108 == sub_21FC5B604() && v110 == v111)
                {

                  swift_bridgeObjectRelease_n();
                }
                else
                {
                  v112 = sub_21FC5BDF0();

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v112 & 1) == 0)
                    return 0;
                }
                goto LABEL_90;
              }
            }
LABEL_89:

LABEL_90:
            v18 = objc_msgSend((id)objc_opt_self(), sel_percentUnit);
            return v18;
          }
LABEL_77:
          swift_bridgeObjectRelease_n();
        }
      }
LABEL_50:

      v57 = (void *)sub_21FC5B5E0();
      v19 = objc_msgSend((id)objc_opt_self(), sel_unitFromString_, v57);

      return v19;
    }
  }

  v18 = objc_msgSend((id)objc_opt_self(), sel_minuteUnit);
  return v18;
}

uint64_t sub_21FC21B9C()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;

  v1 = objc_msgSend(v0, sel_code);
  if (v1 == (id)118)
  {
    sub_21FA2CEE4();
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_21FC71D80;
    v26 = (void *)objc_opt_self();
    v27 = objc_msgSend(v26, sel__quantityWithBeatsPerMinute_, 0.0);
    v28 = objc_msgSend(v26, sel__quantityWithBeatsPerMinute_, 40.0);
    v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3E60]), sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v27, v28, 1, 0);

    *(_QWORD *)(v4 + 32) = v29;
    v30 = objc_msgSend(v26, sel__quantityWithBeatsPerMinute_, 40.0);
    v31 = objc_msgSend(v26, sel__quantityWithBeatsPerMinute_, 60.0);
    v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3E60]), sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v30, v31, 1, 0);

    *(_QWORD *)(v4 + 40) = v32;
    v33 = objc_msgSend(v26, sel__quantityWithBeatsPerMinute_, 60.0);
    v34 = objc_msgSend(v26, sel__quantityWithBeatsPerMinute_, 100.0);
    v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3E60]), sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v33, v34, 1, 0);

    *(_QWORD *)(v4 + 48) = v35;
    v36 = objc_msgSend(v26, sel__quantityWithBeatsPerMinute_, 100.0);
    v37 = objc_msgSend(v26, sel__quantityWithBeatsPerMinute_, 120.0);
    v38 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3E60]), sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v36, v37, 1, 0);

    *(_QWORD *)(v4 + 56) = v38;
    v39 = objc_msgSend(v26, sel__quantityWithBeatsPerMinute_, 120.0);
    v40 = objc_msgSend(v26, sel__quantityWithBeatsPerMinute_, 1.79769313e308);
    v41 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3E60]), sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v39, v40, 1, 0);

    *(_QWORD *)(v4 + 64) = v41;
    sub_21FC5B7C0();
  }
  else if (v1 == (id)15)
  {
    v2 = (void *)sub_21FC5B5E0();
    v3 = objc_msgSend((id)objc_opt_self(), sel_unitFromString_, v2);

    sub_21FA2CEE4();
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_21FC71D80;
    v5 = (void *)objc_opt_self();
    v6 = v3;
    v7 = objc_msgSend(v5, sel_quantityWithUnit_doubleValue_, v6, 0.0);
    v8 = objc_msgSend(v5, sel_quantityWithUnit_doubleValue_, v6, 55.0);

    v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3E60]), sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v7, v8, 1, 0);
    *(_QWORD *)(v4 + 32) = v9;
    v10 = v6;
    v11 = objc_msgSend(v5, sel_quantityWithUnit_doubleValue_, v10, 55.0);
    v12 = objc_msgSend(v5, sel_quantityWithUnit_doubleValue_, v10, 70.0);

    v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3E60]), sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v11, v12, 1, 0);
    *(_QWORD *)(v4 + 40) = v13;
    v14 = v10;
    v15 = objc_msgSend(v5, sel_quantityWithUnit_doubleValue_, v14, 70.0);
    v16 = objc_msgSend(v5, sel_quantityWithUnit_doubleValue_, v14, 180.0);

    v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3E60]), sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v15, v16, 1, 1);
    *(_QWORD *)(v4 + 48) = v17;
    v18 = v14;
    v19 = objc_msgSend(v5, sel_quantityWithUnit_doubleValue_, v18, 180.0);
    v20 = objc_msgSend(v5, sel_quantityWithUnit_doubleValue_, v18, 250.0);

    v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3E60]), sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v19, v20, 0, 0);
    *(_QWORD *)(v4 + 56) = v21;
    v22 = v18;
    v23 = objc_msgSend(v5, sel_quantityWithUnit_doubleValue_, v22, 250.0);
    v24 = objc_msgSend(v5, sel_quantityWithUnit_doubleValue_, v22, 1.79769313e308);

    v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3E60]), sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v23, v24, 1, 0);
    *(_QWORD *)(v4 + 64) = v25;
    sub_21FC5B7C0();

  }
  else
  {
    return 0;
  }
  return v4;
}

__n128 SignedClinicalDataFHIROperationHandler.init(performer:operationGenerator:accountStore:analyticsAccumulator:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __n128 result;

  *(_QWORD *)a5 = a1;
  result = *a2;
  *(__n128 *)(a5 + 8) = *a2;
  *(_QWORD *)(a5 + 24) = a3;
  *(_QWORD *)(a5 + 32) = a4;
  return result;
}

uint64_t sub_21FC221D8(uint64_t a1)
{
  void **v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v10;
  char *v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  char *v20;
  char *v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  char *v28;
  id v29;
  uint64_t (*v30)(void);
  char *v31;
  uint64_t v32;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  char *v40;
  id v41;
  void *v42;
  void *v43;
  char *v44;
  char *v45;
  id v46;
  void *v47;
  _QWORD *v48;

  v39 = a1;
  sub_21FA97980(0, &qword_25554D850, (uint64_t (*)(uint64_t))sub_21FBBE6E4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9DA0]);
  v41 = (id)*(v2 - 1);
  v42 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v40 = (char *)&v34 - v3;
  sub_21FC24C6C();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v11 = (char *)v1[2];
  v12 = v1[3];
  v13 = v1[4];
  v43 = v1[1];
  v10 = v43;
  v44 = v11;
  v14 = SignedClinicalDataFHIROperationGenerator.healthCardsIssueRequests()();
  v15 = v14;
  v41 = v10;
  v42 = v13;
  v16 = v39;
  v37 = v6;
  v38 = v12;
  v40 = v11;
  v36 = v8;
  v48 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v17 = v14[2];
  if (v17)
  {
    v35 = v5;
    v18 = v14 + 4;
    v19 = v9;
    swift_retain();
    v20 = (char *)v41;
    v21 = v40;
    v22 = v38;
    swift_retain();
    v34 = v15;
    swift_bridgeObjectRetain();
    do
    {
      v43 = v19;
      v44 = v20;
      v45 = v21;
      v46 = v22;
      v47 = v42;
      sub_21FC23610(v18, v16);
      MEMORY[0x2207D0180]();
      if (v48[2] >= v48[3] >> 1)
        sub_21FC5B7CC();
      sub_21FC5B7E4();
      sub_21FC5B7C0();
      v18 += 5;
      --v17;
      v19 = v9;
    }
    while (v17);
    swift_bridgeObjectRelease();
    v23 = v48;
    v5 = v35;
    v25 = v40;
    v24 = v41;
    v26 = v38;
  }
  else
  {
    swift_retain();
    swift_retain();
    v24 = v41;
    v27 = v41;
    v25 = v40;
    v28 = v40;
    v26 = v38;
    v29 = v38;
    v23 = (void *)MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  v43 = v23;
  v30 = MEMORY[0x24BDB9AE0];
  sub_21FA97980(0, (unint64_t *)&qword_25554B378, (uint64_t (*)(uint64_t))sub_21FBBE6E4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FC24D58();
  sub_21FC24D0C(&qword_25554B390, (unint64_t *)&qword_25554B378, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v30, MEMORY[0x24BDB9AF8]);
  sub_21FA2A08C(&qword_25554D870, (uint64_t (*)(uint64_t))sub_21FC24D58, MEMORY[0x24BEE12C8]);
  v31 = v36;
  sub_21FC5B154();
  sub_21FA2A08C(&qword_25554D878, (uint64_t (*)(uint64_t))sub_21FC24C6C, MEMORY[0x24BDB99D8]);
  v32 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v31, v5);
  return v32;
}

uint64_t sub_21FC225C0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35[2];
  uint64_t v36;

  v29 = a4;
  v30 = a3;
  v9 = sub_21FC5AAF4();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC24DC4();
  v31 = v13;
  v33 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC25C80(0, &qword_25554D8C0, v16, (void (*)(void))sub_21FC24EC0);
  v32 = v17;
  v34 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v29 - v18;
  v36 = a5;
  sub_21FA2CEA0(a4, (uint64_t)v35);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  v20 = (*(unsigned __int8 *)(v10 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v21 = (v11 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject();
  sub_21FA3175C(v35, v22 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v22 + v20, v12, v9);
  *(_QWORD *)(v22 + v21) = a2;
  *(_QWORD *)(v22 + ((v21 + 15) & 0xFFFFFFFFFFFFFFF8)) = v30;
  sub_21FA30BA4(0);
  sub_21FA2A08C(&qword_25553E2B0, (uint64_t (*)(uint64_t))sub_21FA30BA4, MEMORY[0x24BDB9AF8]);
  v23 = a2;
  swift_retain();
  sub_21FC5B364();
  swift_release();
  sub_21FA2CEA0(v29, (uint64_t)v35);
  v24 = swift_allocObject();
  sub_21FA3175C(v35, v24 + 16);
  type metadata accessor for WebRequestResponseError(0);
  sub_21FC24EC0();
  sub_21FA2A08C(&qword_25553E2A8, type metadata accessor for WebRequestResponseError, (uint64_t)&protocol conformance descriptor for WebRequestResponseError);
  v25 = v31;
  sub_21FC5B358();
  swift_release();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v25);
  sub_21FC25D44(&qword_25554D8C8, &qword_25554D8C0, (void (*)(uint64_t))sub_21FC24DC4, (void (*)(void))sub_21FC24EC0);
  v26 = v32;
  v27 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v19, v26);
  return v27;
}

uint64_t sub_21FC228C8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int EnumCaseMultiPayload;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char *v48;
  char v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint8_t *v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(_QWORD);
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  char *v66;
  uint8_t *v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91[3];
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v77 = a5;
  v75 = a4;
  v78 = a3;
  v8 = sub_21FC5AAF4();
  v9 = *(_QWORD *)(v8 - 8);
  v85 = v8;
  v86 = v9;
  MEMORY[0x24BDAC7A8](v8);
  v84 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for HTTPError();
  v11 = MEMORY[0x24BDAC7A8](v79);
  v80 = (uint64_t *)((char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v71 - v13;
  v82 = type metadata accessor for WebRequestResponseError.ErrorType(0);
  MEMORY[0x24BDAC7A8](v82);
  v83 = (uint64_t)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_21FC5A98C();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for WebRequestResponseError(0);
  MEMORY[0x24BDAC7A8](v88);
  v21 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_25406B7F8 != -1)
    swift_once();
  v22 = sub_21FC5AFD4();
  v23 = __swift_project_value_buffer(v22, (uint64_t)qword_25406D830);
  v87 = (uint8_t *)a1;
  sub_21FA2D120(a1, (uint64_t)v21, type metadata accessor for WebRequestResponseError);
  v76 = a2;
  sub_21FA2CEA0(a2, (uint64_t)v91);
  v81 = v23;
  v24 = sub_21FC5AFC8();
  v25 = sub_21FC5B970();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc();
    v74 = v5;
    v27 = v26;
    v72 = swift_slowAlloc();
    v94 = v72;
    *(_DWORD *)v27 = 136315394;
    v73 = v14;
    v28 = WebRequestResponseError.safelyLoggableDescription.getter();
    v89 = sub_21FABDCF8(v28, v29, &v94);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    sub_21FA326EC((uint64_t)v21, type metadata accessor for WebRequestResponseError);
    *(_WORD *)(v27 + 12) = 2080;
    v71 = v27 + 14;
    v30 = v92;
    v31 = v93;
    __swift_project_boxed_opaque_existential_1(v91, v92);
    (*(void (**)(uint64_t, uint64_t))(v31 + 40))(v30, v31);
    v32 = sub_21FC5A8FC();
    v34 = v33;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    v89 = v32;
    v90 = v34;
    swift_bridgeObjectRetain();
    sub_21FC5BE08();
    v35 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_21FC5BAF0();
    swift_unknownObjectRelease();
    v36 = sub_21FC5B64C();
    v38 = v37;
    v14 = v73;
    swift_bridgeObjectRelease();
    v89 = sub_21FABDCF8(v36, v38, &v94);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v91);
    _os_log_impl(&dword_21FA27000, v24, v25, "WebRequestPerformer.catchAndRefreshToken: evaluating error %s for request %s", (uint8_t *)v27, 0x16u);
    v39 = v72;
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v39, -1, -1);
    MEMORY[0x2207D105C](v27, -1, -1);
  }
  else
  {
    sub_21FA326EC((uint64_t)v21, type metadata accessor for WebRequestResponseError);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v91);
  }

  v41 = v84;
  v40 = v85;
  v42 = (uint64_t)v87;
  v43 = v83;
  sub_21FA2D120((uint64_t)&v87[*(int *)(v88 + 20)], v83, type metadata accessor for WebRequestResponseError.ErrorType);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v45 = v86;
  if (EnumCaseMultiPayload != 1)
  {
    v57 = sub_21FC5AFC8();
    v58 = sub_21FC5B97C();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v59 = 0;
      _os_log_impl(&dword_21FA27000, v57, v58, "WebRequestPerformer.catchAndRefreshToken: re-throwing error", v59, 2u);
      MEMORY[0x2207D105C](v59, -1, -1);
    }

    v60 = (uint64_t)type metadata accessor for WebRequestResponseError;
    sub_21FA2A08C(&qword_25553E2A8, type metadata accessor for WebRequestResponseError, (uint64_t)&protocol conformance descriptor for WebRequestResponseError);
    swift_allocError();
    sub_21FA2D120(v42, v61, type metadata accessor for WebRequestResponseError);
    swift_willThrow();
    v62 = type metadata accessor for WebRequestResponseError.ErrorType;
    v63 = v43;
    goto LABEL_19;
  }
  sub_21FBA4B80(v43, (uint64_t)v14);
  v46 = v80;
  sub_21FA2D120((uint64_t)v14, (uint64_t)v80, (uint64_t (*)(_QWORD))type metadata accessor for HTTPError);
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    sub_21FA326EC((uint64_t)v46, (uint64_t (*)(_QWORD))type metadata accessor for HTTPError);
LABEL_16:
    v64 = sub_21FC5AFC8();
    v65 = sub_21FC5B97C();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = v14;
      v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v67 = 0;
      _os_log_impl(&dword_21FA27000, v64, v65, "WebRequestPerformer.catchAndRefreshToken: re-throwing error", v67, 2u);
      v68 = v67;
      v14 = v66;
      v42 = (uint64_t)v87;
      MEMORY[0x2207D105C](v68, -1, -1);
    }

    v60 = (uint64_t)type metadata accessor for WebRequestResponseError;
    sub_21FA2A08C(&qword_25553E2A8, type metadata accessor for WebRequestResponseError, (uint64_t)&protocol conformance descriptor for WebRequestResponseError);
    swift_allocError();
    sub_21FA2D120(v42, v69, type metadata accessor for WebRequestResponseError);
    swift_willThrow();
    v62 = (uint64_t (*)(_QWORD))type metadata accessor for HTTPError;
    v63 = (uint64_t)v14;
LABEL_19:
    sub_21FA326EC(v63, v62);
    return v60;
  }
  v47 = v46[1];
  if (!v47)
    goto LABEL_16;
  v91[0] = *v46;
  v91[1] = v47;
  v89 = 0x20726572616542;
  v90 = 0xE700000000000000;
  sub_21FACD1BC();
  v48 = v14;
  sub_21FACD200();
  v49 = sub_21FC5B5A4();
  swift_bridgeObjectRelease();
  if ((v49 & 1) == 0)
    goto LABEL_16;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v41, v78, v40);
  v50 = sub_21FC5AFC8();
  v51 = sub_21FC5B970();
  if (os_log_type_enabled(v50, v51))
  {
    v52 = (uint8_t *)swift_slowAlloc();
    v88 = swift_slowAlloc();
    v91[0] = v88;
    *(_DWORD *)v52 = 136315138;
    v87 = v52 + 4;
    sub_21FA2A08C((unint64_t *)&qword_25553F0F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v53 = sub_21FC5BDCC();
    v89 = sub_21FABDCF8(v53, v54, v91);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v86 + 8))(v41, v40);
    _os_log_impl(&dword_21FA27000, v50, v51, "WebRequestPerformer.catchAndRefreshToken: tryCatch: 401 response, requesting new accessToken for account: %s", v52, 0xCu);
    v55 = v88;
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v55, -1, -1);
    v56 = v52;
    v14 = v48;
    MEMORY[0x2207D105C](v56, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v41, v40);
  }

  v60 = sub_21FC23154(v78, v75, v77, v76);
  sub_21FA326EC((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for HTTPError);
  return v60;
}

uint64_t sub_21FC23154(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43[2];
  uint64_t v44;

  v35 = a4;
  v39 = a3;
  v6 = sub_21FC5AAF4();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  sub_21FC0C304();
  v10 = *(_QWORD *)(v9 - 8);
  v36 = v9;
  v37 = v10;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC25C80(0, (unint64_t *)&qword_25554D4A0, v13, (void (*)(void))sub_21FC25D28);
  v38 = v14;
  v41 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v35 - v15;
  sub_21FC0C4C8();
  v40 = v17;
  v42 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v20 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v21 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v21 + v20, (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  *(_QWORD *)(v21 + ((v8 + v20 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
  v22 = MEMORY[0x24BDB9E38];
  sub_21FA97980(0, &qword_25554D4C0, (uint64_t (*)(uint64_t))sub_21FC25BD0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9E38]);
  swift_allocObject();
  v23 = a2;
  *(_QWORD *)&v43[0] = sub_21FC5B25C();
  sub_21FC25C34(&qword_25554D4C8, &qword_25554D4C0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v22, MEMORY[0x24BDB9E58]);
  v24 = sub_21FC5B280();
  swift_release();
  v44 = v24;
  v25 = v35;
  sub_21FA2CEA0(v35, (uint64_t)v43);
  v26 = swift_allocObject();
  sub_21FA3175C(v43, v26 + 16);
  v27 = MEMORY[0x24BDB9AE0];
  sub_21FA97980(0, &qword_25554D488, (uint64_t (*)(uint64_t))sub_21FC25BD0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA50724(0, (unint64_t *)&qword_25553FE38);
  v28 = MEMORY[0x24BDB9AF8];
  sub_21FC25C34(&qword_25554D498, &qword_25554D488, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v27, MEMORY[0x24BDB9AF8]);
  sub_21FC5B2C8();
  swift_release();
  swift_release();
  sub_21FA2CEA0(v25, (uint64_t)v43);
  v29 = swift_allocObject();
  sub_21FA3175C(v43, v29 + 16);
  type metadata accessor for WebRequestResponseError(0);
  sub_21FC25D28();
  sub_21FA2A08C(&qword_25553E2A8, type metadata accessor for WebRequestResponseError, (uint64_t)&protocol conformance descriptor for WebRequestResponseError);
  v30 = v36;
  sub_21FC5B358();
  swift_release();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v12, v30);
  swift_retain();
  sub_21FC5B184();
  sub_21FA30BA4(0);
  sub_21FC25D44(&qword_25554D4B8, (unint64_t *)&qword_25554D4A0, (void (*)(uint64_t))sub_21FC0C304, (void (*)(void))sub_21FC25D28);
  sub_21FA2A08C(&qword_25553E2B0, (uint64_t (*)(uint64_t))sub_21FA30BA4, v28);
  v31 = v38;
  sub_21FC5B34C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v16, v31);
  sub_21FA2A08C(&qword_25554D4D0, (uint64_t (*)(uint64_t))sub_21FC0C4C8, MEMORY[0x24BDB98F0]);
  v32 = v40;
  v33 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v19, v32);
  return v33;
}

uint64_t sub_21FC23610(_QWORD *a1, uint64_t a2)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  id v27;
  uint64_t v28;
  __int128 v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41[2];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v37 = a2;
  v4 = sub_21FC5AAF4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC24DC4();
  v36 = v8;
  v39 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC24E48();
  v38 = v11;
  v40 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v2[1];
  v43 = *v2;
  v44 = v14;
  v45 = *((_QWORD *)v2 + 4);
  sub_21FC5AA28();
  v16 = v15;
  v17 = objc_msgSend((id)v44, sel_accountInformation);
  v18 = v43;
  v20 = a1[3];
  v19 = a1[4];
  v21 = __swift_project_boxed_opaque_existential_1(a1, v20);
  v22 = sub_21FC56744((uint64_t)v21, 0, 1, 0, 1, 1, v18, v20, v19);
  v23 = objc_msgSend(v17, sel_accountIdentifier);
  sub_21FC5AADC();

  v24 = sub_21FC225C0((uint64_t)v7, *((void **)&v44 + 1), v18, (uint64_t)a1, v22);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_release();
  v42 = v24;
  sub_21FA2CEA0((uint64_t)a1, (uint64_t)v41);
  v25 = swift_allocObject();
  sub_21FA3175C(v41, v25 + 16);
  v26 = v44;
  *(_OWORD *)(v25 + 56) = v43;
  *(_OWORD *)(v25 + 72) = v26;
  *(_QWORD *)(v25 + 88) = v45;
  *(_QWORD *)(v25 + 96) = v17;
  sub_21FC24F04(&v43);
  sub_21FA30BA4(0);
  sub_21FA2A08C(&qword_25553E2B0, (uint64_t (*)(uint64_t))sub_21FA30BA4, MEMORY[0x24BDB9AF8]);
  v27 = v17;
  sub_21FC5B364();
  swift_release();
  swift_release();
  sub_21FA2CEA0((uint64_t)a1, (uint64_t)v41);
  v28 = swift_allocObject();
  sub_21FA3175C(v41, v28 + 16);
  v29 = v44;
  *(_OWORD *)(v28 + 56) = v43;
  *(_OWORD *)(v28 + 72) = v29;
  *(_QWORD *)(v28 + 88) = v45;
  *(_QWORD *)(v28 + 96) = v27;
  *(_QWORD *)(v28 + 104) = v16;
  *(_QWORD *)(v28 + 112) = v37;
  sub_21FC24F04(&v43);
  sub_21FBBE6E4();
  sub_21FC24EC0();
  v30 = v27;
  v31 = v36;
  sub_21FC5B31C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v31);
  sub_21FA2A08C(&qword_25554D898, (uint64_t (*)(uint64_t))sub_21FC24E48, MEMORY[0x24BDB98C8]);
  v32 = v38;
  v33 = sub_21FC5B280();

  (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v32);
  return v33;
}

uint64_t sub_21FC239A4(uint64_t a1, _QWORD *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  id v45;
  unsigned __int8 v46;

  v44 = a3;
  v45 = a4;
  v42 = a2;
  v5 = sub_21FC5AAAC();
  MEMORY[0x24BDAC7A8](v5);
  v41 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_21FC5A98C();
  v38 = *(_QWORD *)(v7 - 8);
  v39 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v40 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WebRequestEndState();
  MEMORY[0x24BDAC7A8](v9);
  v43 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for WebRequestResponseError.ErrorType(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for HTTPError();
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (uint64_t *)((char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v38 - v18;
  v20 = type metadata accessor for WebRequestResponseError(0);
  sub_21FA2D120(a1 + *(int *)(v20 + 20), (uint64_t)v13, type metadata accessor for WebRequestResponseError.ErrorType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_21FBA4B80((uint64_t)v13, (uint64_t)v19);
    sub_21FBA4B80((uint64_t)v19, (uint64_t)v17);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v22 = a1;
    v23 = (uint64_t)v43;
    v24 = v44;
    v25 = v42;
    if (EnumCaseMultiPayload == 1)
    {
      v26 = *v17;
    }
    else
    {
      sub_21FA326EC((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for HTTPError);
      v26 = 0;
    }
  }
  else
  {
    sub_21FA326EC((uint64_t)v13, type metadata accessor for WebRequestResponseError.ErrorType);
    v26 = 0;
    v22 = a1;
    v23 = (uint64_t)v43;
    v24 = v44;
    v25 = v42;
  }
  v27 = v25[3];
  v28 = v25[4];
  __swift_project_boxed_opaque_existential_1(v25, v27);
  (*(void (**)(uint64_t, uint64_t))(v28 + 40))(v27, v28);
  v29 = v23 + *(int *)(v9 + 20);
  *(_QWORD *)v29 = v26;
  *(_BYTE *)(v29 + 8) = 0;
  v30 = v23 + *(int *)(v9 + 24);
  *(_QWORD *)v30 = 0;
  *(_BYTE *)(v30 + 8) = 1;
  v31 = objc_msgSend(v45, sel_gateway);

  v32 = *(_QWORD *)(v24 + 32);
  if (v32)
  {
    v33 = (uint64_t)v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v40, v23, v39);
    v46 = 0;
    swift_retain();
    v34 = (uint64_t)v41;
    sub_21FC5AAA0();
    type metadata accessor for ClinicalIngestionRequestFailureMetricElement();
    swift_allocObject();
    v35 = ClinicalIngestionRequestFailureMetricElement.init(operationURL:interactionType:statusCode:observedDate:)(v33, &v46, v26, v34);
    sub_21FC2502C(v35, v32);
    swift_release();
    swift_release();
  }
  sub_21FA2A08C(&qword_25553E2A8, type metadata accessor for WebRequestResponseError, (uint64_t)&protocol conformance descriptor for WebRequestResponseError);
  swift_allocError();
  sub_21FA2D120(v22, v36, type metadata accessor for WebRequestResponseError);
  swift_willThrow();
  return sub_21FA326EC(v23, (uint64_t (*)(_QWORD))type metadata accessor for WebRequestEndState);
}

id sub_21FC23D4C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>, double a7@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  void (*v49)(uint64_t, uint64_t);
  void *v50;
  id v51;
  uint64_t v52;
  char *v53;
  id v54;
  id v55;
  char *v56;
  char *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  id v75;
  uint64_t v76;
  char *v77;
  id v78;
  uint64_t v79;
  void *v80;
  id result;
  void *v82;
  id v83;
  id v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  id v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  id v104;
  uint64_t v105;
  id v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD v109[2];
  void (*v110)(uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  ValueMetadata *v126;
  id v127;
  id v128;
  ValueMetadata *v129;
  unint64_t v130;
  uint64_t v131;
  id v132;
  _BYTE v133[16];
  uint64_t v134;

  v115 = a5;
  v128 = a4;
  v125 = a3;
  v114 = a6;
  v10 = sub_21FC5B640();
  MEMORY[0x24BDAC7A8](v10);
  v116 = (char *)v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_21FC5AAAC();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v117 = (unint64_t)v109 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v122 = (char *)v109 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v123 = (uint64_t)v109 - v17;
  sub_21FA2ED54(0, (unint64_t *)&qword_25406AAC8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  MEMORY[0x24BDAC7A8](v18);
  v121 = (char *)v109 - v19;
  v20 = sub_21FC5AAF4();
  v119 = *(_QWORD *)(v20 - 8);
  v120 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)v109 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (_QWORD *)sub_21FC5A98C();
  v126 = (ValueMetadata *)*(v23 - 1);
  v127 = v23;
  v24 = MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)v109 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v24);
  v29 = (char *)v109 - v28;
  v30 = MEMORY[0x24BDAC7A8](v27);
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)v109 - v31;
  v33 = type metadata accessor for WebRequestEndState();
  v34 = MEMORY[0x24BDAC7A8](v33);
  v124 = (char *)v109 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v34);
  v37 = (char *)v109 - v36;
  v38 = a1[6];
  if (v38 >> 60 == 15)
  {
    v39 = a2[3];
    v40 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v39);
    (*(void (**)(uint64_t, uint64_t))(v40 + 40))(v39, v40);
    v41 = (void *)a1[7];
    if (v41)
    {
      v42 = (uint64_t)objc_msgSend(v41, sel_statusCode);
      v43 = v42;
    }
    else
    {
      v43 = 0;
      v42 = -1;
    }
    v52 = (uint64_t)v126;
    v53 = v32;
    v55 = v127;
    v54 = v128;
    ((void (*)(char *, char *, id))v126[2].Kind)(v37, v53, v127);
    v56 = &v37[*(int *)(v33 + 20)];
    *(_QWORD *)v56 = v43;
    v56[8] = v41 == 0;
    v57 = &v37[*(int *)(v33 + 24)];
    *(_QWORD *)v57 = 0;
    v57[8] = 1;
    v58 = objc_msgSend(v54, sel_gateway);

    v59 = *(_QWORD *)(v125 + 32);
    if (v59)
    {
      (*(void (**)(char *, char *, id))(v52 + 16))(v26, v37, v55);
      LOBYTE(v129) = 0;
      swift_retain();
      v60 = v117;
      sub_21FC5AAA0();
      type metadata accessor for ClinicalIngestionRequestFailureMetricElement();
      swift_allocObject();
      v61 = ClinicalIngestionRequestFailureMetricElement.init(operationURL:interactionType:statusCode:observedDate:)((uint64_t)v26, (unsigned __int8 *)&v129, v42, v60);
      sub_21FC2502C(v61, v59);
      swift_release();
      swift_release();
    }
    sub_21FC24FE8();
    swift_allocError();
    *v62 = 0;
    swift_willThrow();
    return (id)sub_21FA326EC((uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for WebRequestEndState);
  }
  v113 = a1[5];
  v117 = v38;
  sub_21FA32314(v113, v38);
  sub_21FC5AA28();
  v45 = v44;
  v46 = a2[3];
  v47 = a2[4];
  v48 = __swift_project_boxed_opaque_existential_1(a2, v46);
  v49 = *(void (**)(uint64_t, uint64_t))(v47 + 40);
  v109[1] = v48;
  v49(v46, v47);
  v50 = (void *)a1[7];
  v112 = v46;
  v111 = v47;
  v110 = v49;
  if (v50)
    v51 = objc_msgSend(v50, sel_statusCode);
  else
    v51 = 0;
  v63 = v125;
  v64 = (uint64_t)v126;
  v65 = v45 - a7;
  v66 = (uint64_t)v124;
  v67 = v127;
  ((void (*)(void))v126[2].Kind)();
  v68 = v66 + *(int *)(v33 + 20);
  *(_QWORD *)v68 = v51;
  *(_BYTE *)(v68 + 8) = v50 == 0;
  v69 = v66 + *(int *)(v33 + 24);
  *(double *)v69 = v65;
  *(_BYTE *)(v69 + 8) = 0;
  v70 = objc_msgSend(v128, sel_gateway);

  sub_21FC253C4(v63 + 32, (uint64_t)v133);
  sub_21FC253C4((uint64_t)v133, (uint64_t)&v134);
  v71 = v134;
  if (v134)
  {
    (*(void (**)(char *, uint64_t, id))(v64 + 16))(v29, v66, v67);
    LOBYTE(v129) = 0;
    sub_21FC25A60((uint64_t)v133);
    _s19HealthRecordsDaemon35ClinicalIngestionAnalyticsMetricKeyC09analyticsgH04with15interactionTypeAC10Foundation3URLV_AA0def11InteractionL0OtFZ_0((uint64_t)v29, (unsigned __int8 *)&v129);
    v72 = lround(v65 * 1000.0);
    (*(void (**)(char *, id))(v64 + 8))(v29, v67);
    v73 = swift_retain();
    sub_21FC25418(v73, v72, v71);
    swift_release();
    sub_21FC25A88((uint64_t)v133);
    swift_release();
  }
  v129 = 0;
  v130 = 0xE000000000000000;
  sub_21FC5BB74();
  swift_bridgeObjectRelease();
  v129 = (ValueMetadata *)0xD000000000000015;
  v130 = 0x800000021FC7DE30;
  v74 = v128;
  v75 = objc_msgSend(v128, sel_accountIdentifier);
  sub_21FC5AADC();

  sub_21FA2A08C((unint64_t *)&qword_25553F0F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  v76 = v120;
  sub_21FC5BDCC();
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v119 + 8))(v22, v76);
  v125 = (uint64_t)v129;
  v120 = v130;
  v77 = v121;
  v110(v112, v111);
  (*(void (**)(char *, _QWORD, uint64_t, id))(v64 + 56))(v77, 0, 1, v67);
  v78 = objc_msgSend(v74, sel_gateway);
  v127 = objc_msgSend(v78, sel_FHIRVersion);

  sub_21FC5AAA0();
  v79 = (uint64_t)v122;
  sub_21FC5AAA0();
  v80 = (void *)objc_opt_self();
  objc_msgSend(v80, sel_currentOSVersionStruct);
  v126 = v129;
  v119 = v130;
  v112 = v131;
  result = objc_msgSend(v80, sel_currentOSBuild);
  if (result)
  {
    v82 = result;
    sub_21FA5BE58(0, &qword_25554B388);
    sub_21FC5B604();

    v83 = objc_msgSend(v74, sel_gateway);
    v84 = objc_msgSend(v83, sel_country);

    sub_21FC5B604();
    v85 = v113;
    v86 = v117;
    sub_21FA3277C(v113, v117);
    v87 = (uint64_t)v77;
    v88 = v127;
    v89 = v118;
    v90 = sub_21FC257B0(v125, v120, v85, v86, v87, (uint64_t)v127, v123, v79, 0, (uint64_t)v126, v119, v112);
    if (!v89)
    {
      v106 = v90;

      sub_21FA3239C(v85, v86);
      sub_21FA326EC((uint64_t)v124, (uint64_t (*)(_QWORD))type metadata accessor for WebRequestEndState);
      result = (id)sub_21FA3239C(v85, v86);
      v107 = v114;
      v108 = v115;
      *v114 = v106;
      v107[1] = v108;
      return result;
    }

    sub_21FA3239C(v85, v86);
    sub_21FC5B634();
    v91 = sub_21FC5B61C();
    v93 = v92;
    if (qword_25406B7F8 != -1)
      swift_once();
    v94 = sub_21FC5AFD4();
    __swift_project_value_buffer(v94, (uint64_t)qword_25406D830);
    swift_bridgeObjectRetain();
    v95 = sub_21FC5AFC8();
    v96 = sub_21FC5B97C();
    if (os_log_type_enabled(v95, v96))
    {
      v97 = swift_slowAlloc();
      v128 = (id)swift_slowAlloc();
      v132 = v128;
      *(_DWORD *)v97 = 136315394;
      v129 = &type metadata for SignedClinicalDataFHIROperationHandler;
      sub_21FC25A28();
      v98 = sub_21FC5B64C();
      v129 = (ValueMetadata *)sub_21FABDCF8(v98, v99, (uint64_t *)&v132);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v97 + 12) = 2080;
      v127 = (id)(v97 + 14);
      v129 = (ValueMetadata *)v91;
      v130 = v93;
      sub_21FA32728();
      swift_bridgeObjectRetain_n();
      sub_21FC5BE08();
      v100 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_21FC5BAF0();
      swift_unknownObjectRelease();
      v101 = sub_21FC5B64C();
      v103 = v102;
      swift_bridgeObjectRelease();
      v129 = (ValueMetadata *)sub_21FABDCF8(v101, v103, (uint64_t *)&v132);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21FA27000, v95, v96, "%s failed to parse response data to original FHIR resource object, response data string: %s", (uint8_t *)v97, 0x16u);
      v104 = v128;
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v104, -1, -1);
      v105 = v97;
      v85 = v113;
      MEMORY[0x2207D105C](v105, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v37 = v124;
    swift_willThrow();
    sub_21FA3239C(v85, v117);
    return (id)sub_21FA326EC((uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for WebRequestEndState);
  }
  __break(1u);
  return result;
}

BOOL static SignedClinicalDataFHIROperationHandlerError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SignedClinicalDataFHIROperationHandlerError.hash(into:)()
{
  return sub_21FC5BE98();
}

uint64_t SignedClinicalDataFHIROperationHandlerError.hashValue.getter()
{
  sub_21FC5BE8C();
  sub_21FC5BE98();
  return sub_21FC5BEB0();
}

unint64_t sub_21FC24920()
{
  unint64_t result;

  result = qword_25554D848;
  if (!qword_25554D848)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for SignedClinicalDataFHIROperationHandlerError, &type metadata for SignedClinicalDataFHIROperationHandlerError);
    atomic_store(result, (unint64_t *)&qword_25554D848);
  }
  return result;
}

uint64_t destroy for SignedClinicalDataFHIROperationHandler(id *a1)
{
  swift_release();

  return swift_release();
}

_QWORD *initializeWithCopy for SignedClinicalDataFHIROperationHandler(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  v5 = (void *)a2[3];
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = a2[4];
  swift_retain();
  v6 = v3;
  v7 = v4;
  v8 = v5;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for SignedClinicalDataFHIROperationHandler(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  v7 = (void *)a2[2];
  v8 = (void *)a1[2];
  a1[2] = v7;
  v9 = v7;

  v10 = (void *)a2[3];
  v11 = (void *)a1[3];
  a1[3] = v10;
  v12 = v10;

  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SignedClinicalDataFHIROperationHandler(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  swift_release();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataFHIROperationHandler(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataFHIROperationHandler(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataFHIROperationHandler()
{
  return &type metadata for SignedClinicalDataFHIROperationHandler;
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataFHIROperationHandlerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21FC24BEC + 4 * byte_21FC71D95[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21FC24C20 + 4 * byte_21FC71D90[v4]))();
}

uint64_t sub_21FC24C20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FC24C28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FC24C30);
  return result;
}

uint64_t sub_21FC24C3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FC24C44);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21FC24C48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FC24C50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataFHIROperationHandlerError()
{
  return &type metadata for SignedClinicalDataFHIROperationHandlerError;
}

void sub_21FC24C6C()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25554D858)
  {
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FA97980(255, (unint64_t *)&qword_25554B378, (uint64_t (*)(uint64_t))sub_21FBBE6E4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FC24D0C(&qword_25554B390, (unint64_t *)&qword_25554B378, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    v1 = sub_21FC5B148();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25554D858);
  }
}

uint64_t sub_21FC24D0C(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FA97980(255, a2, (uint64_t (*)(uint64_t))sub_21FBBE6E4, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_21FC24D58()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D868)
  {
    sub_21FA97980(255, (unint64_t *)&qword_25554B378, (uint64_t (*)(uint64_t))sub_21FBBE6E4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    v0 = sub_21FC5B7F0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D868);
  }
}

void sub_21FC24DC4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D880)
  {
    sub_21FA30BA4(255);
    sub_21FA2A08C(&qword_25553E2B0, (uint64_t (*)(uint64_t))sub_21FA30BA4, MEMORY[0x24BDB9AF8]);
    v0 = sub_21FC5B13C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D880);
  }
}

void sub_21FC24E48()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D888)
  {
    sub_21FC24DC4();
    sub_21FBBE6E4();
    sub_21FC24EC0();
    v0 = sub_21FC5B0E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D888);
  }
}

uint64_t sub_21FC24EC0()
{
  return sub_21FA2A08C(&qword_25554D890, (uint64_t (*)(uint64_t))sub_21FC24DC4, MEMORY[0x24BDB9998]);
}

uint64_t sub_21FC24EDC()
{
  return objectdestroyTm_13();
}

uint64_t sub_21FC24EE4(uint64_t a1)
{
  uint64_t v1;

  return sub_21FC239A4(a1, (_QWORD *)(v1 + 16), v1 + 56, *(void **)(v1 + 96));
}

_QWORD *sub_21FC24F04(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;

  v2 = (void *)a1[1];
  v3 = (void *)a1[2];
  v4 = (void *)a1[3];
  swift_retain();
  swift_retain();
  v5 = v2;
  v6 = v3;
  v7 = v4;
  return a1;
}

uint64_t sub_21FC24F58()
{
  return objectdestroyTm_13();
}

uint64_t objectdestroyTm_13()
{
  id *v0;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_release();

  swift_release();
  return swift_deallocObject();
}

id sub_21FC24FC0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_21FC23D4C(a1, (_QWORD *)(v2 + 16), v2 + 56, *(void **)(v2 + 96), *(_QWORD *)(v2 + 112), a2, *(double *)(v2 + 104));
}

unint64_t sub_21FC24FE8()
{
  unint64_t result;

  result = qword_25554D8A0;
  if (!qword_25554D8A0)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for SignedClinicalDataFHIROperationHandlerError, &type metadata for SignedClinicalDataFHIROperationHandlerError);
    atomic_store(result, (unint64_t *)&qword_25554D8A0);
  }
  return result;
}

unint64_t sub_21FC2502C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[40];
  _QWORD v26[6];

  v26[3] = type metadata accessor for ClinicalIngestionRequestFailureMetricElement();
  v26[4] = &protocol witness table for ClinicalIngestionRequestFailureMetricElement;
  v26[0] = a1;
  sub_21FA2CEA0((uint64_t)v26, (uint64_t)v25);
  sub_21FA50724(0, (unint64_t *)&qword_25554D8B8);
  swift_retain();
  if (swift_dynamicCast())
  {
    swift_beginAccess();
    ClinicalIngestionResponseTimeMetric.addResponseTime(metricElement:)(&v23);
LABEL_14:
    swift_endAccess();
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  sub_21FA2CEA0((uint64_t)v26, (uint64_t)v25);
  if ((swift_dynamicCast() & 1) == 0)
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v11 = sub_21FC5AFD4();
    __swift_project_value_buffer(v11, (uint64_t)qword_25406D830);
    sub_21FA2CEA0((uint64_t)v26, (uint64_t)v25);
    v12 = sub_21FC5AFC8();
    v13 = sub_21FC5B97C();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      v24 = v15;
      *(_DWORD *)v14 = 136315138;
      sub_21FA2CEA0((uint64_t)v25, (uint64_t)&v23);
      sub_21FA2CEA0((uint64_t)&v23, (uint64_t)&v22);
      sub_21FC5BE08();
      v16 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_21FC5BAF0();
      swift_unknownObjectRelease();
      v17 = sub_21FC5B64C();
      v19 = v18;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
      v23 = sub_21FABDCF8(v17, v19, &v24);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
      _os_log_impl(&dword_21FA27000, v12, v13, "ClinicalIngestionAnalyticsAccumulator unable to accumulate unknown metric element: %s", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v15, -1, -1);
      MEMORY[0x2207D105C](v14, -1, -1);

    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);

    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  v4 = v23;
  v5 = (uint64_t *)(a2 + 24);
  swift_beginAccess();
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(v6 + 16);
  result = swift_retain();
  if (v7 && (result = sub_21FA740D8(v23), (v9 & 1) != 0))
    v10 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * result);
  else
    v10 = 0;
  v20 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *v5;
    *v5 = 0x8000000000000000;
    sub_21FA78700(v20, v4, isUniquelyReferenced_nonNull_native);
    *v5 = v23;
    swift_release_n();
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t sub_21FC253C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FA2ED54(0, &qword_25554D8A8, (void (*)(uint64_t))type metadata accessor for ClinicalIngestionAnalyticsAccumulator);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_21FC25418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[40];
  _QWORD v26[6];

  v26[3] = &type metadata for ClinicalIngestionResponseTimeMetricElement;
  v26[4] = &protocol witness table for ClinicalIngestionResponseTimeMetricElement;
  v26[0] = a1;
  v26[1] = a2;
  sub_21FA2CEA0((uint64_t)v26, (uint64_t)v25);
  sub_21FA50724(0, (unint64_t *)&qword_25554D8B8);
  swift_retain();
  if (swift_dynamicCast())
  {
    swift_beginAccess();
    ClinicalIngestionResponseTimeMetric.addResponseTime(metricElement:)(&v23);
LABEL_14:
    swift_endAccess();
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  sub_21FA2CEA0((uint64_t)v26, (uint64_t)v25);
  type metadata accessor for ClinicalIngestionRequestFailureMetricElement();
  if ((swift_dynamicCast() & 1) == 0)
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v11 = sub_21FC5AFD4();
    __swift_project_value_buffer(v11, (uint64_t)qword_25406D830);
    sub_21FA2CEA0((uint64_t)v26, (uint64_t)v25);
    v12 = sub_21FC5AFC8();
    v13 = sub_21FC5B97C();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      v24 = v15;
      *(_DWORD *)v14 = 136315138;
      sub_21FA2CEA0((uint64_t)v25, (uint64_t)&v23);
      sub_21FA2CEA0((uint64_t)&v23, (uint64_t)&v22);
      sub_21FC5BE08();
      v16 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_21FC5BAF0();
      swift_unknownObjectRelease();
      v17 = sub_21FC5B64C();
      v19 = v18;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
      v23 = sub_21FABDCF8(v17, v19, &v24);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
      _os_log_impl(&dword_21FA27000, v12, v13, "ClinicalIngestionAnalyticsAccumulator unable to accumulate unknown metric element: %s", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v15, -1, -1);
      MEMORY[0x2207D105C](v14, -1, -1);

    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);

    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  v4 = v23;
  v5 = (uint64_t *)(a3 + 24);
  swift_beginAccess();
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 + 16);
  result = swift_retain();
  if (v7 && (result = sub_21FA740D8(v23), (v9 & 1) != 0))
    v10 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * result);
  else
    v10 = 0;
  v20 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *v5;
    *v5 = 0x8000000000000000;
    sub_21FA78700(v20, v4, isUniquelyReferenced_nonNull_native);
    *v5 = v23;
    swift_release_n();
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

id sub_21FC257B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  id v26;
  id v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  _QWORD v34[3];
  id v35[3];

  v35[1] = *(id *)MEMORY[0x24BDAC8D0];
  v13 = (void *)sub_21FC5B5E0();
  swift_bridgeObjectRelease();
  v14 = (void *)sub_21FC5A9D4();
  v15 = sub_21FC5A98C();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(a5, 1, v15) != 1)
  {
    v17 = (void *)sub_21FC5A920();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a5, v15);
  }
  v18 = (void *)sub_21FC5AA64();
  v19 = (void *)sub_21FC5AA64();
  v20 = (void *)sub_21FC5B5E0();
  swift_bridgeObjectRelease();
  v21 = (void *)sub_21FC5B5E0();
  swift_bridgeObjectRelease();
  v35[0] = 0;
  v34[0] = a10;
  v34[1] = a11;
  v34[2] = a12;
  v22 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_resourceObjectWithStaticIdentifier_data_sourceURL_FHIRVersion_receivedDate_firstSeenDate_extractionHints_originVersion_originBuild_country_error_, v13, v14, v17, a6, v18, v19, a9, v34, v20, v21, v35);

  v23 = v35[0];
  if (v22)
  {
    v24 = sub_21FC5AAAC();
    v25 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8);
    v26 = v23;
    v25(a8, v24);
    v25(a7, v24);
  }
  else
  {
    v27 = v35[0];
    sub_21FC5A8E4();

    swift_willThrow();
    v28 = sub_21FC5AAAC();
    v29 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8);
    v29(a8, v28);
    v29(a7, v28);
  }
  return v22;
}

unint64_t sub_21FC25A28()
{
  unint64_t result;

  result = qword_25554D8B0;
  if (!qword_25554D8B0)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_25554D8B0);
  }
  return result;
}

uint64_t sub_21FC25A60(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t sub_21FC25A88(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t sub_21FC25AB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_21FC5AAF4();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FC25B50@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v6 = *(_QWORD *)(sub_21FC5AAF4() - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  result = sub_21FC228C8(a1, v2 + 16, v2 + v7, *(void **)(v2 + v8), *(_QWORD *)(v2 + ((v8 + 15) & 0xFFFFFFFFFFFFF8)));
  if (!v3)
    *a2 = result;
  return result;
}

void sub_21FC25BD0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D490)
  {
    sub_21FA5BE58(255, (unint64_t *)&qword_25406CB48);
    v0 = sub_21FC5B7F0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D490);
  }
}

uint64_t sub_21FC25C34(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FA97980(255, a2, (uint64_t (*)(uint64_t))sub_21FC25BD0, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_21FC25C80(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    type metadata accessor for WebRequestResponseError(255);
    a4();
    sub_21FA2A08C(&qword_25553E2A8, type metadata accessor for WebRequestResponseError, (uint64_t)&protocol conformance descriptor for WebRequestResponseError);
    v6 = sub_21FC5B10C();
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_21FC25D28()
{
  return sub_21FA2A08C(&qword_25554D4A8, (uint64_t (*)(uint64_t))sub_21FC0C304, MEMORY[0x24BDB96C0]);
}

uint64_t sub_21FC25D44(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    sub_21FC25C80(255, a2, a3, a4);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9938], v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FC25D84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_21FC5AAF4();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_21FC25DF8()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t ClinicalIngestionAnalyticsAccumulator.__allocating_init()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v0 = swift_allocObject();
  v1 = sub_21FA7CAA4(MEMORY[0x24BEE4AF8]);
  v2 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v0 + 16) = v1;
  *(_QWORD *)(v0 + 24) = v2;
  return v0;
}

uint64_t sub_21FC25E6C()
{
  uint64_t v1;

  swift_beginAccess();
  v1 = sub_21FC2C5F4();
  sub_21FC5B6AC();
  swift_beginAccess();
  sub_21FA7CBA8();
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t ClinicalIngestionAnalyticsAccumulator.init()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = sub_21FA7CAA4(MEMORY[0x24BEE4AF8]);
  v2 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v0 + 16) = v1;
  *(_QWORD *)(v0 + 24) = v2;
  return v0;
}

unint64_t sub_21FC25F30(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = a1[3];
  v3 = a1[4];
  v4 = __swift_project_boxed_opaque_existential_1(a1, v2);
  return sub_21FC267E8((uint64_t)v4, v1, v2, v3);
}

uint64_t sub_21FC25F68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  void *v13;
  id v14;
  unint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  void *v37;
  id v38;
  unint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v1 = v0;
  v2 = (uint64_t *)(v0 + 16);
  swift_beginAccess();
  v54 = (uint64_t *)(v0 + 16);
  if (*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16))
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v3 = sub_21FC5AFD4();
    __swift_project_value_buffer(v3, (uint64_t)qword_25406D830);
    swift_retain();
    v4 = sub_21FC5AFC8();
    v5 = sub_21FC5B970();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v6 = 134217984;
      v57 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
      sub_21FC5BAC0();
      swift_release();
      _os_log_impl(&dword_21FA27000, v4, v5, "ClinicalIngestionAnalyticsAccumulator submitting %ld response time metrics to CoreAnalytics", v6, 0xCu);
      MEMORY[0x2207D105C](v6, -1, -1);

    }
    else
    {

      swift_release();
    }
    v57 = *v2;
    v7 = ClinicalIngestionResponseTimeMetric.enumerateElementsAsCoreAnalyticsPayload()();
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
    {
      v9 = v7 + 32;
      do
      {
        v10 = *(_QWORD *)v9;
        if (*(_QWORD *)(*(_QWORD *)v9 + 16))
        {
          swift_bridgeObjectRetain();
          v11 = sub_21FA73F34(0x7463617265746E69, 0xEF657079546E6F69);
          if ((v12 & 1) == 0)
            goto LABEL_9;
          v13 = *(void **)(*(_QWORD *)(v10 + 56) + 8 * v11);
          objc_opt_self();
          if (!swift_dynamicCastObjCClass())
            goto LABEL_9;
          v57 = 0;
          v58 = 0;
          v14 = v13;
          sub_21FC5B5F8();

          if (v58 && (v15 = sub_21FC5BCD0(), swift_bridgeObjectRelease(), v15 <= 1))
          {
            v16 = sub_21FC5AFC8();
            v17 = sub_21FC5B970();
            if (os_log_type_enabled(v16, v17))
            {
              v18 = swift_slowAlloc();
              v19 = swift_slowAlloc();
              v57 = v19;
              *(_DWORD *)v18 = 136315138;
              v20 = (_DWORD)v15 == 0;
              if ((_DWORD)v15)
                v21 = 0xD000000000000029;
              else
                v21 = 0xD00000000000003DLL;
              if (v20)
                v22 = 0x800000021FC7C740;
              else
                v22 = 0x800000021FC7C710;
              *(_QWORD *)(v18 + 4) = sub_21FABDCF8(v21, v22, &v57);
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_21FA27000, v16, v17, "ClinicalIngestionAnalyticsAccumulator submitting response time metrics as \"%s\" to CoreAnalytics", (uint8_t *)v18, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x2207D105C](v19, -1, -1);
              MEMORY[0x2207D105C](v18, -1, -1);

            }
            else
            {

            }
            v23 = (void *)sub_21FC5B5E0();
            swift_bridgeObjectRelease();
            sub_21FAC7C7C();
            v24 = (void *)sub_21FC5B55C();
            AnalyticsSendEvent();
            swift_bridgeObjectRelease();

          }
          else
          {
LABEL_9:
            swift_bridgeObjectRelease();
          }
        }
        v9 += 8;
        --v8;
      }
      while (v8);
    }
    swift_bridgeObjectRelease();
    v2 = v54;
  }
  v25 = (uint64_t *)(v1 + 24);
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v1 + 24) + 16))
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v26 = sub_21FC5AFD4();
    __swift_project_value_buffer(v26, (uint64_t)qword_25406D830);
    swift_retain();
    v27 = sub_21FC5AFC8();
    v28 = sub_21FC5B970();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v29 = 134217984;
      v55 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 16);
      sub_21FC5BAC0();
      swift_release();
      _os_log_impl(&dword_21FA27000, v27, v28, "ClinicalIngestionAnalyticsAccumulator submitting %ld request failures metrics to CoreAnalytics", v29, 0xCu);
      MEMORY[0x2207D105C](v29, -1, -1);

    }
    else
    {

      swift_release();
    }
    v55 = *v25;
    v30 = ClinicalIngestionRequestFailureMetric.enumerateElementsAsCoreAnalyticsPayload()();
    v31 = v30;
    v32 = *(_QWORD *)(v30 + 16);
    if (v32)
    {
      v33 = v30 + 32;
      v53 = v25;
      do
      {
        v34 = *(_QWORD *)v33;
        if (*(_QWORD *)(*(_QWORD *)v33 + 16))
        {
          swift_bridgeObjectRetain();
          v35 = sub_21FA73F34(0x7463617265746E69, 0xEF657079546E6F69);
          if ((v36 & 1) == 0)
            goto LABEL_35;
          v37 = *(void **)(*(_QWORD *)(v34 + 56) + 8 * v35);
          objc_opt_self();
          if (!swift_dynamicCastObjCClass())
            goto LABEL_35;
          v55 = 0;
          v56 = 0;
          v38 = v37;
          sub_21FC5B5F8();

          if (v56 && (v39 = sub_21FC5BCD0(), swift_bridgeObjectRelease(), v39 <= 1))
          {
            v40 = sub_21FC5AFC8();
            v41 = sub_21FC5B970();
            if (os_log_type_enabled(v40, v41))
            {
              v42 = swift_slowAlloc();
              v43 = v31;
              v44 = swift_slowAlloc();
              v55 = v44;
              *(_DWORD *)v42 = 136315138;
              v45 = (_DWORD)v39 == 0;
              if ((_DWORD)v39)
                v46 = 0xD000000000000029;
              else
                v46 = 0xD00000000000003DLL;
              if (v45)
                v47 = 0x800000021FC7C740;
              else
                v47 = 0x800000021FC7C710;
              *(_QWORD *)(v42 + 4) = sub_21FABDCF8(v46, v47, &v55);
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_21FA27000, v40, v41, "ClinicalIngestionAnalyticsAccumulator submitting request failure metrics as \"%s\" to CoreAnalytics", (uint8_t *)v42, 0xCu);
              swift_arrayDestroy();
              v48 = v44;
              v31 = v43;
              v25 = v53;
              MEMORY[0x2207D105C](v48, -1, -1);
              MEMORY[0x2207D105C](v42, -1, -1);

            }
            else
            {

            }
            v49 = (void *)sub_21FC5B5E0();
            swift_bridgeObjectRelease();
            sub_21FAC7C7C();
            v50 = (void *)sub_21FC5B55C();
            AnalyticsSendEvent();
            swift_bridgeObjectRelease();

          }
          else
          {
LABEL_35:
            swift_bridgeObjectRelease();
          }
        }
        v33 += 8;
        --v32;
      }
      while (v32);
    }
    swift_bridgeObjectRelease();
    v2 = v54;
  }
  v51 = MEMORY[0x24BEE4B00];
  *v2 = MEMORY[0x24BEE4B00];
  swift_bridgeObjectRelease();
  *v25 = v51;
  return swift_bridgeObjectRelease();
}

uint64_t ClinicalIngestionAnalyticsAccumulator.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ClinicalIngestionAnalyticsAccumulator.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

unint64_t sub_21FC267E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[40];
  uint64_t v30[6];

  v30[3] = a3;
  v30[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v30);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  sub_21FA2CEA0((uint64_t)v30, (uint64_t)v29);
  sub_21FC26BD0();
  if (swift_dynamicCast())
  {
    swift_beginAccess();
    ClinicalIngestionResponseTimeMetric.addResponseTime(metricElement:)(&v27);
LABEL_14:
    swift_endAccess();
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  }
  sub_21FA2CEA0((uint64_t)v30, (uint64_t)v29);
  type metadata accessor for ClinicalIngestionRequestFailureMetricElement();
  if ((swift_dynamicCast() & 1) == 0)
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v15 = sub_21FC5AFD4();
    __swift_project_value_buffer(v15, (uint64_t)qword_25406D830);
    sub_21FA2CEA0((uint64_t)v30, (uint64_t)v29);
    v16 = sub_21FC5AFC8();
    v17 = sub_21FC5B97C();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v28 = v19;
      *(_DWORD *)v18 = 136315138;
      sub_21FA2CEA0((uint64_t)v29, (uint64_t)&v27);
      sub_21FA2CEA0((uint64_t)&v27, (uint64_t)&v26);
      sub_21FC5BE08();
      v20 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_21FC5BAF0();
      swift_unknownObjectRelease();
      v21 = sub_21FC5B64C();
      v23 = v22;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
      v27 = sub_21FABDCF8(v21, v23, &v28);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
      _os_log_impl(&dword_21FA27000, v16, v17, "ClinicalIngestionAnalyticsAccumulator unable to accumulate unknown metric element: %s", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v19, -1, -1);
      MEMORY[0x2207D105C](v18, -1, -1);

    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);

    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  }
  v8 = v27;
  v9 = (uint64_t *)(a2 + 24);
  swift_beginAccess();
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(v10 + 16);
  result = swift_retain();
  if (v11 && (result = sub_21FA740D8(v27), (v13 & 1) != 0))
    v14 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * result);
  else
    v14 = 0;
  v24 = v14 + 1;
  if (!__OFADD__(v14, 1))
  {
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v27 = *v9;
    *v9 = 0x8000000000000000;
    sub_21FA78700(v24, v8, isUniquelyReferenced_nonNull_native);
    *v9 = v27;
    swift_release_n();
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ClinicalIngestionAnalyticsAccumulator()
{
  return objc_opt_self();
}

uint64_t method lookup function for ClinicalIngestionAnalyticsAccumulator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ClinicalIngestionAnalyticsAccumulator.analyticsString.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of ClinicalIngestionAnalyticsAccumulator.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of ClinicalIngestionAnalyticsAccumulator.accumulateIngestionAnalyticsMetric(metricElement:gatewayCountryCode:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of ClinicalIngestionAnalyticsAccumulator.submitMetrics(analyticsManager:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

unint64_t sub_21FC26BD0()
{
  unint64_t result;

  result = qword_25554D8B8;
  if (!qword_25554D8B8)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_25554D8B8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingMedicationTrackingQuery()
{
  return &type metadata for ClinicalSharingMedicationTrackingQuery;
}

uint64_t sub_21FC26C34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  id *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = type metadata accessor for PBMedicationTracking(0);
  v19 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v18 = v1;
    v20 = MEMORY[0x24BEE4AF8];
    sub_21FC01E3C(0, v6, 0);
    v7 = v20;
    v8 = (id *)(a1 + 48);
    do
    {
      v10 = *(v8 - 2);
      v9 = *(v8 - 1);
      v11 = *v8;
      v12 = *v8;
      v13 = v10;
      v14 = v9;
      sub_21FC28B78(v13, v9, v11, (uint64_t)v5);

      v20 = v7;
      v16 = *(_QWORD *)(v7 + 16);
      v15 = *(_QWORD *)(v7 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_21FC01E3C(v15 > 1, v16 + 1, 1);
        v7 = v20;
      }
      v8 += 3;
      *(_QWORD *)(v7 + 16) = v16 + 1;
      sub_21FC2ABFC((uint64_t)v5, v7+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(_QWORD *)(v19 + 72) * v16);
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t sub_21FC26DA0(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  id v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  id v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  sub_21FC29CA0();
  v5 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  v48 = v5;
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC29DB8();
  v51 = v8;
  v53 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v46 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC29F78();
  v11 = *(_QWORD *)(v10 - 8);
  v55 = v10;
  v56 = v11;
  MEMORY[0x24BDAC7A8](v10);
  v49 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC2A1F0(0, &qword_25554DA48, (void (*)(uint64_t))type metadata accessor for PBTypedData);
  v57 = v13;
  v59 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v52 = (char *)&v46 - v14;
  sub_21FC2A1F0(0, &qword_25554DA58, (void (*)(uint64_t))type metadata accessor for ClinicalSharingQueryOutput);
  v58 = v15;
  v60 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v54 = (char *)&v46 - v16;
  sub_21FC5B604();
  v17 = objc_allocWithZone(MEMORY[0x24BDD17C0]);
  v18 = (void *)sub_21FC5B5E0();
  swift_bridgeObjectRelease();
  v19 = objc_msgSend(v17, sel_initWithKey_ascending_, v18, 0);

  __swift_project_boxed_opaque_existential_1((_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 40));
  sub_21FA2CEE4();
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_21FC5E070;
  *(_QWORD *)(v20 + 32) = v19;
  v61 = v20;
  sub_21FC5B7C0();
  v21 = v61;
  v50 = v19;
  v22 = sub_21FC20228((uint64_t)a2, v21, 0, 1);
  swift_bridgeObjectRelease();
  v61 = v22;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = a1;
  *(_QWORD *)(v23 + 24) = a2;
  sub_21FC2AFF8(0, (unint64_t *)&qword_25554B908, (unint64_t *)&qword_25554B910, &qword_25554B918, 0x24BDD4068);
  v24 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250];
  sub_21FC29D58(0, &qword_25554D9D0, &qword_25554D9D8, 0x24BE45CB8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_21FBC3104();
  swift_retain();
  v25 = a2;
  sub_21FC5B28C();
  swift_release();
  swift_release();
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = a1;
  *(_QWORD *)(v26 + 24) = v25;
  swift_retain();
  v27 = v25;
  sub_21FC5B184();
  sub_21FA2D1A0(0, &qword_25554D9F0, (uint64_t (*)(uint64_t))sub_21FC29E7C, v24);
  sub_21FC2A03C(0, &qword_25554D9E8, &qword_25554D9F0, (uint64_t (*)(uint64_t))sub_21FC29E7C);
  sub_21FA2A08C(&qword_25554DA08, (uint64_t (*)(uint64_t))sub_21FC29CA0, MEMORY[0x24BDB94C8]);
  sub_21FC29F18();
  v28 = v47;
  sub_21FC5B34C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v7, v28);
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = a1;
  *(_QWORD *)(v29 + 24) = v27;
  swift_retain();
  v30 = v27;
  sub_21FC5B184();
  sub_21FA2D1A0(0, &qword_25554DA20, (uint64_t (*)(uint64_t))sub_21FC2A0BC, v24);
  sub_21FC2A03C(0, &qword_25554DA18, &qword_25554DA20, (uint64_t (*)(uint64_t))sub_21FC2A0BC);
  v31 = MEMORY[0x24BDB98F0];
  sub_21FA2A08C(&qword_25554DA40, (uint64_t (*)(uint64_t))sub_21FC29DB8, MEMORY[0x24BDB98F0]);
  sub_21FC2A190();
  v32 = v49;
  v33 = v51;
  v34 = v46;
  sub_21FC5B34C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v34, v33);
  v35 = swift_allocObject();
  *(_QWORD *)(v35 + 16) = a1;
  *(_QWORD *)(v35 + 24) = v30;
  type metadata accessor for PBTypedData(0);
  sub_21FA2A08C(&qword_25554DA50, (uint64_t (*)(uint64_t))sub_21FC29F78, v31);
  swift_retain();
  v36 = v30;
  v37 = v52;
  v38 = v55;
  sub_21FC5B28C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v32, v38);
  v39 = swift_allocObject();
  *(_QWORD *)(v39 + 16) = a1;
  *(_QWORD *)(v39 + 24) = v36;
  type metadata accessor for ClinicalSharingQueryOutput(0);
  swift_retain();
  v40 = v36;
  v41 = v54;
  v42 = v57;
  sub_21FC5AFF8();
  swift_release();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v37, v42);
  sub_21FC2A2F8();
  v43 = v58;
  v44 = sub_21FC5B280();

  (*(void (**)(char *, uint64_t))(v60 + 8))(v41, v43);
  return v44;
}

uint64_t sub_21FC273FC@<X0>(unint64_t *a1@<X0>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;
  id v6;
  id v7;

  result = sub_21FAC1C90(*a1);
  if (result)
  {
    *a3 = result;
  }
  else
  {
    sub_21FC5BB74();
    swift_bridgeObjectRelease();
    v6 = a2;
    v7 = objc_msgSend(v6, sel_description);
    sub_21FC5B604();

    sub_21FC5B6AC();
    swift_bridgeObjectRelease();
    result = sub_21FC5BC70();
    __break(1u);
  }
  return result;
}

uint64_t sub_21FC274F8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v30 = a3;
  sub_21FC2B1F8();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC2B2FC();
  v31 = v10;
  v34 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC2B3A4();
  v14 = *(_QWORD *)(v13 - 8);
  v32 = v13;
  v33 = v14;
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC2B4C8(0, &qword_25554DB18, v17, (void (*)(void))sub_21FC2B52C);
  v19 = v18;
  v35 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v29 - v20;
  v36 = a1;
  sub_21FC29D58(0, &qword_25554D9D0, &qword_25554D9D8, 0x24BE45CB8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_21FC2B294();
  sub_21FC5B748();
  sub_21FA2CDB4();
  sub_21FC5B118();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = a2;
  v23 = v30;
  *(_QWORD *)(v22 + 24) = v30;
  swift_retain();
  v24 = v23;
  sub_21FC5B184();
  sub_21FC29E7C();
  sub_21FA84A5C(0, &qword_25554DB00, (uint64_t (*)(uint64_t))sub_21FC29E7C, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA2A08C(&qword_25554DB10, (uint64_t (*)(uint64_t))sub_21FC2B2FC, MEMORY[0x24BDB9970]);
  sub_21FC2B468();
  v25 = v31;
  sub_21FC5B34C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v25);
  sub_21FC2B52C();
  v26 = v32;
  sub_21FC5B328();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v16, v26);
  sub_21FC2AF38(&qword_25554DB28, &qword_25554DB18, (void (*)(uint64_t))sub_21FC2B3A4, (void (*)(void))sub_21FC2B52C);
  v27 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v21, v19);
  return v27;
}

uint64_t sub_21FC27818(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v30 = a3;
  sub_21FC2AC58();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC2AD4C();
  v31 = v10;
  v34 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC2ADEC();
  v14 = *(_QWORD *)(v13 - 8);
  v32 = v13;
  v33 = v14;
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC2B4C8(0, &qword_25554DAA0, v17, (void (*)(void))sub_21FC2AF10);
  v19 = v18;
  v35 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v29 - v20;
  v36 = a1;
  sub_21FA2D1A0(0, &qword_25554D9F0, (uint64_t (*)(uint64_t))sub_21FC29E7C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_21FC2ACEC();
  sub_21FC5B748();
  sub_21FA2CDB4();
  sub_21FC5B118();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = a2;
  v23 = v30;
  *(_QWORD *)(v22 + 24) = v30;
  swift_retain();
  v24 = v23;
  sub_21FC5B184();
  sub_21FC2A0BC();
  sub_21FA84A5C(0, &qword_25554DA88, (uint64_t (*)(uint64_t))sub_21FC2A0BC, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA2A08C(&qword_25554DA98, (uint64_t (*)(uint64_t))sub_21FC2AD4C, MEMORY[0x24BDB9970]);
  sub_21FC2AEB0();
  v25 = v31;
  sub_21FC5B34C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v25);
  sub_21FC2AF10();
  v26 = v32;
  sub_21FC5B328();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v16, v26);
  sub_21FC2AF38(&qword_25554DAB0, &qword_25554DAA0, (void (*)(uint64_t))sub_21FC2ADEC, (void (*)(void))sub_21FC2AF10);
  v27 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v21, v19);
  return v27;
}

uint64_t sub_21FC27B30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  sub_21FA2D1A0(0, &qword_25553E0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v26 - v7;
  v9 = type metadata accessor for PBDateRange(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PBMedicationTrackings(0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (uint64_t *)((char *)&v26 - v16);
  if (*(_QWORD *)(a1 + 16))
  {
    v18 = sub_21FC26C34(a1);
    sub_21FC5AD10();
    *v17 = v18;
    sub_21FC5AD10();
    v19 = type metadata accessor for PBTypedData(0);
    v20 = *(int *)(v19 + 20);
    if (qword_25553D590 != -1)
      swift_once();
    *(_QWORD *)(a3 + v20) = qword_25553E450;
    v21 = sub_21FC5A6C8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v8, 1, 1, v21);
    swift_retain();
    sub_21FBE816C(5, 1, v8, a2);
    sub_21FC2AB6C((uint64_t)v8);
    PBTypedData.dateRange.setter((uint64_t)v11);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBTypedData._StorageClass(0);
      swift_allocObject();
      v22 = swift_retain();
      *(_QWORD *)(a3 + v20) = sub_21FA3A458(v22);
      swift_release();
    }
    v23 = *(_QWORD *)(a3 + v20);
    swift_beginAccess();
    *(_QWORD *)(v23 + 16) = 127;
    *(_BYTE *)(v23 + 24) = 1;
    sub_21FA2D120((uint64_t)v17, (uint64_t)v15, type metadata accessor for PBMedicationTrackings);
    PBTypedData.medicationTrackings.setter((uint64_t)v15);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a3, 0, 1, v19);
    return sub_21FC2ABC0((uint64_t)v17);
  }
  else
  {
    v25 = type metadata accessor for PBTypedData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a3, 1, 1, v25);
  }
}

void sub_21FC27E18(id *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t (*v44)(void);
  id v45;
  id v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(void);
  uint64_t v51;
  id v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned int v57;
  uint64_t v58;
  id v59;
  char v60;
  uint64_t *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v62 = a2;
  sub_21FA2D1A0(0, &qword_25554DB30, (uint64_t (*)(uint64_t))sub_21FC29E7C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDB9DE0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v61 - v8;
  sub_21FA84A5C(0, &qword_25554DB38, (uint64_t (*)(uint64_t))sub_21FC29E7C, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v61 - v13;
  sub_21FC2B580();
  v64 = *(_QWORD *)(v15 - 8);
  v65 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v63 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC2B6E8();
  v67 = *(_QWORD *)(v17 - 8);
  v68 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v66 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *a1;
  v20 = objc_msgSend(*a1, sel_firstOntologyCoding);
  if (!v20)
    goto LABEL_55;
  v21 = v20;
  v22 = objc_msgSend(v20, sel_code);

  if (!v22)
    goto LABEL_55;
  v61 = a3;
  v23 = sub_21FC5B604();
  v25 = v24;

  v26 = HIBYTE(v25) & 0xF;
  v27 = v23 & 0xFFFFFFFFFFFFLL;
  if ((v25 & 0x2000000000000000) != 0)
    v28 = HIBYTE(v25) & 0xF;
  else
    v28 = v23 & 0xFFFFFFFFFFFFLL;
  if (!v28)
  {
    swift_bridgeObjectRelease();
    a3 = v61;
    goto LABEL_55;
  }
  if ((v25 & 0x1000000000000000) != 0)
  {
    v30 = (uint64_t)sub_21FC2A350(v23, v25, 10);
    LOBYTE(v23) = v60;
    goto LABEL_46;
  }
  if ((v25 & 0x2000000000000000) == 0)
  {
    if ((v23 & 0x1000000000000000) != 0)
      v29 = (unsigned __int8 *)((v25 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v29 = (unsigned __int8 *)sub_21FC5BBD4();
    v30 = (uint64_t)sub_21FC2A434(v29, v27, 10);
    LOBYTE(v23) = v31 & 1;
LABEL_46:
    swift_bridgeObjectRelease();
    a3 = v61;
    if ((v23 & 1) == 0)
    {
      v41 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3A30]), sel_initWithRawIdentifier_, v30);
      v42 = (void *)__swift_project_boxed_opaque_existential_1((_QWORD *)(v62 + 16), *(_QWORD *)(v62 + 40))[2];
      v43 = swift_allocObject();
      *(_QWORD *)(v43 + 16) = v42;
      *(_QWORD *)(v43 + 24) = v41;
      v44 = MEMORY[0x24BDB9E38];
      sub_21FC2B618(0, (unint64_t *)&qword_25554AA58, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
      sub_21FC2B6A8(&qword_25554DB48, (unint64_t *)&qword_25554AA58, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v44, MEMORY[0x24BDB9E58]);
      v45 = v42;
      v46 = v41;
      v47 = v63;
      sub_21FC5B268();
      sub_21FA2A08C(&qword_25554DB70, (uint64_t (*)(uint64_t))sub_21FC2B580, MEMORY[0x24BDB9E90]);
      v48 = v65;
      v49 = sub_21FC5B280();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v47, v48);
      v69 = v49;
      v50 = MEMORY[0x24BDB9AE0];
      sub_21FC2B618(0, &qword_25554DB58, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
      sub_21FC2B6A8(&qword_25554DB60, &qword_25554DB58, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v50, MEMORY[0x24BDB9AF8]);
      v51 = sub_21FC5B280();
      swift_release();
      v69 = v51;
      *(_QWORD *)(swift_allocObject() + 16) = v19;
      sub_21FC29E7C();
      v52 = v19;
      v53 = v66;
      a3 = v61;
      sub_21FC5B2C8();
      swift_release();
      swift_release();
      sub_21FA2A08C(&qword_25554DB78, (uint64_t (*)(uint64_t))sub_21FC2B6E8, MEMORY[0x24BDB96C0]);
      v54 = v68;
      v55 = sub_21FC5B280();

      (*(void (**)(char *, uint64_t))(v67 + 8))(v53, v54);
LABEL_56:
      *a3 = v55;
      return;
    }
LABEL_55:
    v69 = (uint64_t)v19;
    v70 = 0;
    sub_21FC29E7C();
    v59 = v19;
    sub_21FC5B22C();
    sub_21FA2CDB4();
    sub_21FC5B208();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    sub_21FC2B798();
    v55 = sub_21FC5B280();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    goto LABEL_56;
  }
  v69 = v23;
  v70 = v25 & 0xFFFFFFFFFFFFFFLL;
  if (v23 == 43)
  {
    if (!v26)
      goto LABEL_60;
    if (v26 == 1 || (BYTE1(v23) - 48) > 9u)
      goto LABEL_33;
    v30 = (BYTE1(v23) - 48);
    if (v26 != 2)
    {
      if ((BYTE2(v23) - 48) > 9u)
        goto LABEL_33;
      v30 = 10 * (BYTE1(v23) - 48) + (BYTE2(v23) - 48);
      v32 = v26 - 3;
      if (v32)
      {
        v33 = (unsigned __int8 *)&v69 + 3;
        while (1)
        {
          v34 = *v33 - 48;
          if (v34 > 9)
            goto LABEL_33;
          v35 = 10 * v30;
          if ((unsigned __int128)(v30 * (__int128)10) >> 64 != (10 * v30) >> 63)
            goto LABEL_33;
          v30 = v35 + v34;
          if (__OFADD__(v35, v34))
            goto LABEL_33;
          LOBYTE(v23) = 0;
          ++v33;
          if (!--v32)
            goto LABEL_46;
        }
      }
    }
LABEL_45:
    LOBYTE(v23) = 0;
    goto LABEL_46;
  }
  if (v23 != 45)
  {
    if (!v26 || (v23 - 48) > 9u)
      goto LABEL_33;
    v30 = (v23 - 48);
    if (v26 != 1)
    {
      if ((BYTE1(v23) - 48) > 9u)
        goto LABEL_33;
      v30 = 10 * (v23 - 48) + (BYTE1(v23) - 48);
      v36 = v26 - 2;
      if (v36)
      {
        v37 = (unsigned __int8 *)&v69 + 2;
        while (1)
        {
          v38 = *v37 - 48;
          if (v38 > 9)
            goto LABEL_33;
          v39 = 10 * v30;
          if ((unsigned __int128)(v30 * (__int128)10) >> 64 != (10 * v30) >> 63)
            goto LABEL_33;
          v30 = v39 + v38;
          if (__OFADD__(v39, v38))
            goto LABEL_33;
          LOBYTE(v23) = 0;
          ++v37;
          if (!--v36)
            goto LABEL_46;
        }
      }
    }
    goto LABEL_45;
  }
  if (v26)
  {
    if (v26 != 1 && (BYTE1(v23) - 48) <= 9u)
    {
      if (v26 == 2)
      {
        LOBYTE(v23) = 0;
        v30 = -(uint64_t)(BYTE1(v23) - 48);
        goto LABEL_46;
      }
      if ((BYTE2(v23) - 48) <= 9u)
      {
        v30 = -10 * (BYTE1(v23) - 48) - (BYTE2(v23) - 48);
        v40 = v26 - 3;
        if (!v40)
          goto LABEL_45;
        v56 = (unsigned __int8 *)&v69 + 3;
        while (1)
        {
          v57 = *v56 - 48;
          if (v57 > 9)
            break;
          v58 = 10 * v30;
          if ((unsigned __int128)(v30 * (__int128)10) >> 64 != (10 * v30) >> 63)
            break;
          v30 = v58 - v57;
          if (__OFSUB__(v58, v57))
            break;
          LOBYTE(v23) = 0;
          ++v56;
          if (!--v40)
            goto LABEL_46;
        }
      }
    }
LABEL_33:
    v30 = 0;
    LOBYTE(v23) = 1;
    goto LABEL_46;
  }
  __break(1u);
LABEL_60:
  __break(1u);
}

uint64_t sub_21FC28510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  id v35;
  id v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[6];

  v46 = a3;
  v5 = sub_21FC5B8E0();
  v37 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC2AF78();
  v40 = *(_QWORD *)(v8 - 8);
  v41 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC2B07C();
  v42 = *(_QWORD *)(v11 - 8);
  v43 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC2B130();
  v44 = *(_QWORD *)(v14 - 8);
  v45 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(void **)a1;
  v38 = *(id *)(a1 + 8);
  v39 = v38;
  v18 = v17;
  v19 = objc_msgSend(v18, sel_semanticIdentifier);
  v20 = objc_msgSend(v19, sel_stringValue);

  if (!v20)
  {
    sub_21FC5B604();
    v20 = (id)sub_21FC5B5E0();
    swift_bridgeObjectRelease();
  }
  v21 = objc_msgSend((id)objc_opt_self(), sel_predicateForMedicationDoseEventWithMedicationIdentifier_, v20);
  v36 = v21;

  v22 = objc_msgSend((id)objc_opt_self(), sel_medicationDoseEventType);
  v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3E98]), sel_initWithSampleType_predicate_, v22, v21);

  sub_21FA2CEA0(a2 + 16, (uint64_t)v49);
  __swift_project_boxed_opaque_existential_1(v49, v49[3]);
  sub_21FA2CEE4();
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_21FC5E070;
  *(_QWORD *)(v24 + 32) = v23;
  v48 = v24;
  sub_21FC5B7C0();
  v35 = v23;
  sub_21FAADEE8();
  sub_21FC5B8EC();
  sub_21FA2A08C(&qword_25553E0D8, (uint64_t (*)(uint64_t))MEMORY[0x24BE459E0], MEMORY[0x24BE459D8]);
  v25 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v7, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v48 = v25;
  v47 = MEMORY[0x24BEE4AF8];
  sub_21FC2AFF8(0, (unint64_t *)&qword_25553E0B0, (unint64_t *)&qword_25553E0B8, (unint64_t *)&qword_25553E0C0, 0x24BDD3ED8);
  sub_21FA5751C();
  sub_21FC5B2B0();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  sub_21FC29D58(0, &qword_25554DA30, &qword_25553FC20, 0x24BDD3D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  sub_21FA2A08C(&qword_25554DAC8, (uint64_t (*)(uint64_t))sub_21FC2AF78, MEMORY[0x24BDB9590]);
  v26 = v41;
  sub_21FC5B2C8();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v10, v26);
  v27 = swift_allocObject();
  v28 = v38;
  *(_QWORD *)(v27 + 16) = v18;
  *(_QWORD *)(v27 + 24) = v28;
  sub_21FC2A0BC();
  v29 = v18;
  v30 = v39;
  v31 = v43;
  sub_21FC5B058();
  swift_release();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v13, v31);
  sub_21FA2A08C(&qword_25554DAD8, (uint64_t (*)(uint64_t))sub_21FC2B130, MEMORY[0x24BDB96C0]);
  v32 = v45;
  v33 = sub_21FC5B280();

  result = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v16, v32);
  *v46 = v33;
  return result;
}

void sub_21FC289E4(unint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;

  v3 = sub_21FAC1C9C(*a1);
  if (!v3)
  {
    if (qword_25406B7F8 == -1)
    {
LABEL_9:
      v8 = sub_21FC5AFD4();
      __swift_project_value_buffer(v8, (uint64_t)qword_25406D830);
      v9 = sub_21FC5AFC8();
      v10 = sub_21FC5B97C();
      if (os_log_type_enabled(v9, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v11 = 0;
        _os_log_impl(&dword_21FA27000, v9, v10, "[ClinicalSharingMedicationTrackingQuery] Invalid sample type for samples of HKMedicationDoseEvent", v11, 2u);
        MEMORY[0x2207D105C](v11, -1, -1);
      }

      goto LABEL_14;
    }
LABEL_18:
    swift_once();
    goto LABEL_9;
  }
  v4 = v3;
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  if (!(v3 >> 62))
  {
    if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_13:
    swift_bridgeObjectRelease();
LABEL_14:
    v7 = 0;
    goto LABEL_15;
  }
  if (!sub_21FC5BC7C())
    goto LABEL_13;
LABEL_4:
  if ((v4 & 0xC000000000000001) != 0)
  {
    v6 = (id)MEMORY[0x2207D057C](0, v4);
    goto LABEL_7;
  }
  if (!*(_QWORD *)(v5 + 16))
  {
    __break(1u);
    goto LABEL_18;
  }
  v6 = *(id *)(v4 + 32);
LABEL_7:
  v7 = v6;
  swift_bridgeObjectRelease();
LABEL_15:
  *a2 = v7;
}

id sub_21FC28B38@<X0>(void **a1@<X0>, void *a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v5;
  id v6;
  id v7;

  v5 = *a1;
  *a4 = a2;
  a4[1] = a3;
  a4[2] = v5;
  v6 = v5;
  v7 = a2;
  return a3;
}

uint64_t sub_21FC28B78@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  void *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  id v102;
  void *v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  void *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  char *v116;
  void *v117;
  void *v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(char *, uint64_t);
  uint64_t v124;
  uint64_t v125;
  id v126;
  id v127;
  char *v128;
  void *v129;
  void *v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  id v138;
  id v139;
  void *v140;
  id v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  void *v149;
  id v150;
  id v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t result;
  uint64_t v161;
  id v162;
  id v163;
  id v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  id v170;
  void *v171;
  id v172;
  id v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  id v182;
  id v183;
  char *v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  id v188;
  char v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;

  v182 = a3;
  v183 = a2;
  v185 = sub_21FC5AAAC();
  v181 = *(_QWORD *)(v185 - 8);
  MEMORY[0x24BDAC7A8](v185);
  v184 = (char *)&v178 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_21FC5AAF4();
  v179 = *(_QWORD *)(v7 - 8);
  v180 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v178 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC5AD10();
  v10 = *(int *)(type metadata accessor for PBMedicationTracking(0) + 20);
  if (qword_25553DB08 != -1)
    swift_once();
  *(_QWORD *)(a4 + v10) = qword_255544010;
  KeyPath = swift_getKeyPath();
  v186 = (void *)*MEMORY[0x24BDD3818];
  v12 = sub_21FC5B604();
  v14 = v13;
  swift_retain();
  v15 = sub_21FAA460C(KeyPath, v12, v14);
  v17 = v16;
  swift_release();
  swift_bridgeObjectRelease();
  if (v17)
    v18 = v15;
  else
    v18 = 0;
  if (!v17)
    v17 = 0xE000000000000000;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTracking._StorageClass();
    swift_allocObject();
    v19 = swift_retain();
    *(_QWORD *)(a4 + v10) = sub_21FB83948(v19);
    swift_release();
  }
  v20 = *(_QWORD *)(a4 + v10);
  swift_beginAccess();
  *(_QWORD *)(v20 + 64) = v18;
  *(_QWORD *)(v20 + 72) = v17;
  swift_bridgeObjectRelease();
  v21 = swift_getKeyPath();
  v22 = sub_21FC5B604();
  v24 = sub_21FAA460C(v21, v22, v23);
  v26 = v25;
  swift_release();
  swift_bridgeObjectRelease();
  if (v26)
    v27 = v24;
  else
    v27 = 0;
  if (!v26)
    v26 = 0xE000000000000000;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTracking._StorageClass();
    swift_allocObject();
    v28 = swift_retain();
    *(_QWORD *)(a4 + v10) = sub_21FB83948(v28);
    swift_release();
  }
  v29 = *(_QWORD *)(a4 + v10);
  swift_beginAccess();
  *(_QWORD *)(v29 + 32) = v27;
  *(_QWORD *)(v29 + 40) = v26;
  swift_bridgeObjectRelease();
  v30 = swift_getKeyPath();
  v31 = sub_21FC5B604();
  v33 = sub_21FAA460C(v30, v31, v32);
  v35 = v34;
  swift_release();
  swift_bridgeObjectRelease();
  if (v35)
    v36 = v33;
  else
    v36 = 0;
  if (!v35)
    v35 = 0xE000000000000000;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTracking._StorageClass();
    swift_allocObject();
    v37 = swift_retain();
    *(_QWORD *)(a4 + v10) = sub_21FB83948(v37);
    swift_release();
  }
  v38 = *(_QWORD *)(a4 + v10);
  swift_beginAccess();
  *(_QWORD *)(v38 + 48) = v36;
  *(_QWORD *)(v38 + 56) = v35;
  swift_bridgeObjectRelease();
  v39 = objc_msgSend(a1, sel_semanticIdentifier);
  v40 = objc_msgSend(v39, sel_stringValue);
  v41 = sub_21FC5B604();
  v187 = v10;
  v43 = v42;

  v196 = v41;
  v197 = v43;
  v194 = sub_21FC5B604();
  v195 = v44;
  v192 = 124;
  v193 = 0xE100000000000000;
  sub_21FA87D78();
  v45 = sub_21FC5BAD8();
  v47 = v46;

  v48 = v187;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTracking._StorageClass();
    swift_allocObject();
    v49 = swift_retain();
    *(_QWORD *)(a4 + v48) = sub_21FB83948(v49);
    swift_release();
  }
  v50 = *(_QWORD *)(a4 + v48);
  swift_beginAccess();
  *(_QWORD *)(v50 + 16) = v45;
  *(_QWORD *)(v50 + 24) = v47;
  swift_bridgeObjectRelease();
  v51 = objc_msgSend(a1, sel_UUID);
  sub_21FC5AADC();

  v52 = sub_21FC5AAB8();
  v54 = v53;
  (*(void (**)(char *, uint64_t))(v179 + 8))(v9, v180);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTracking._StorageClass();
    swift_allocObject();
    v55 = swift_retain();
    *(_QWORD *)(a4 + v48) = sub_21FB83948(v55);
    swift_release();
  }
  v56 = *(_QWORD *)(a4 + v48);
  swift_beginAccess();
  *(_QWORD *)(v56 + 240) = v52;
  *(_QWORD *)(v56 + 248) = v54;
  swift_bridgeObjectRelease();
  v57 = objc_msgSend(a1, sel_freeTextMedicationStrengthQuantity);
  if (v57)
  {
    v58 = v57;
    objc_msgSend(v57, sel__value);
    v59 = sub_21FC5B880();
    v61 = v60;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBMedicationTracking._StorageClass();
      swift_allocObject();
      v62 = swift_retain();
      *(_QWORD *)(a4 + v48) = sub_21FB83948(v62);
      swift_release();
    }
    v63 = *(_QWORD *)(a4 + v48);
    swift_beginAccess();
    *(_QWORD *)(v63 + 112) = v59;
    *(_QWORD *)(v63 + 120) = v61;
    swift_bridgeObjectRelease();
    v64 = objc_msgSend(v58, sel__unit);
    v65 = objc_msgSend(v64, sel_unitString);

    v66 = sub_21FC5B604();
    v68 = v67;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBMedicationTracking._StorageClass();
      swift_allocObject();
      v69 = swift_retain();
      *(_QWORD *)(a4 + v48) = sub_21FB83948(v69);
      swift_release();
    }
    v70 = *(_QWORD *)(a4 + v48);
    swift_beginAccess();
    *(_QWORD *)(v70 + 304) = v66;
    *(_QWORD *)(v70 + 312) = v68;

    swift_bridgeObjectRelease();
  }
  v71 = swift_getKeyPath();
  v72 = sub_21FC5B604();
  v74 = sub_21FAA460C(v71, v72, v73);
  v76 = v75;
  swift_release();
  swift_bridgeObjectRelease();
  if (v76)
    v77 = v74;
  else
    v77 = 0;
  if (!v76)
    v76 = 0xE000000000000000;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTracking._StorageClass();
    swift_allocObject();
    v78 = swift_retain();
    *(_QWORD *)(a4 + v48) = sub_21FB83948(v78);
    swift_release();
  }
  v79 = *(_QWORD *)(a4 + v48);
  swift_beginAccess();
  *(_QWORD *)(v79 + 128) = v77;
  *(_QWORD *)(v79 + 136) = v76;
  swift_bridgeObjectRelease();
  v80 = swift_getKeyPath();
  v81 = sub_21FAA460C(v80, 0x53552D6E65, 0xE500000000000000);
  v83 = v82;
  swift_release();
  if (v83)
    v84 = v81;
  else
    v84 = 0;
  if (!v83)
    v83 = 0xE000000000000000;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTracking._StorageClass();
    swift_allocObject();
    v85 = swift_retain();
    *(_QWORD *)(a4 + v48) = sub_21FB83948(v85);
    swift_release();
  }
  v86 = *(_QWORD *)(a4 + v48);
  swift_beginAccess();
  *(_QWORD *)(v86 + 144) = v84;
  *(_QWORD *)(v86 + 152) = v83;
  swift_bridgeObjectRelease();
  v87 = swift_getKeyPath();
  v88 = sub_21FAA460C(v87, 0x53552D6E65, 0xE500000000000000);
  v90 = v89;
  swift_release();
  if (v90)
    v91 = v88;
  else
    v91 = 0;
  if (!v90)
    v90 = 0xE000000000000000;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTracking._StorageClass();
    swift_allocObject();
    v92 = swift_retain();
    *(_QWORD *)(a4 + v48) = sub_21FB83948(v92);
    swift_release();
  }
  v93 = *(_QWORD *)(a4 + v48);
  swift_beginAccess();
  *(_QWORD *)(v93 + 160) = v91;
  *(_QWORD *)(v93 + 168) = v90;
  swift_bridgeObjectRelease();
  v94 = objc_msgSend(a1, sel_unlocalizedQuantifiedUnitStrengthPreferredDisplayString);
  if (v94)
  {
    v95 = v94;
    v96 = sub_21FC5B604();
    v98 = v97;

  }
  else
  {
    v96 = 0;
    v98 = 0xE000000000000000;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTracking._StorageClass();
    swift_allocObject();
    v99 = swift_retain();
    *(_QWORD *)(a4 + v48) = sub_21FB83948(v99);
    swift_release();
  }
  v100 = *(_QWORD *)(a4 + v48);
  v101 = 1;
  swift_beginAccess();
  *(_QWORD *)(v100 + 176) = v96;
  *(_QWORD *)(v100 + 184) = v98;
  swift_bridgeObjectRelease();
  v102 = objc_msgSend(a1, sel_freeTextMedicationFormCode);
  if (v102)
  {
    v103 = v102;
    v104 = objc_msgSend(v102, sel_longLongValue);

    sub_21FC40204((uint64_t)v104, (uint64_t)&v190);
    v105 = v190;
    v101 = v191;
  }
  else
  {
    v105 = 0;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTracking._StorageClass();
    swift_allocObject();
    v106 = swift_retain();
    *(_QWORD *)(a4 + v48) = sub_21FB83948(v106);
    swift_release();
  }
  v107 = *(_QWORD *)(a4 + v48);
  swift_beginAccess();
  *(_QWORD *)(v107 + 96) = v105;
  *(_BYTE *)(v107 + 104) = v101;
  v108 = objc_msgSend(a1, sel_freeTextMedicationName);
  if (v108)
  {
    v109 = v108;
    v110 = sub_21FC5B604();
    v112 = v111;

  }
  else
  {
    v110 = 0;
    v112 = 0xE000000000000000;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTracking._StorageClass();
    swift_allocObject();
    v113 = swift_retain();
    *(_QWORD *)(a4 + v48) = sub_21FB83948(v113);
    swift_release();
  }
  v114 = *(_QWORD *)(a4 + v48);
  swift_beginAccess();
  *(_QWORD *)(v114 + 272) = v110;
  *(_QWORD *)(v114 + 280) = v112;
  swift_bridgeObjectRelease();
  v186 = a1;
  v115 = objc_msgSend(a1, sel_creationDate);
  v116 = v184;
  sub_21FC5AA94();

  if (qword_25553DC90 != -1)
    swift_once();
  v117 = (void *)qword_255572F60;
  v118 = (void *)sub_21FC5AA64();
  v119 = objc_msgSend(v117, sel_stringFromDate_, v118);

  v120 = sub_21FC5B604();
  v122 = v121;

  v123 = *(void (**)(char *, uint64_t))(v181 + 8);
  v123(v116, v185);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTracking._StorageClass();
    swift_allocObject();
    v124 = swift_retain();
    *(_QWORD *)(a4 + v48) = sub_21FB83948(v124);
    swift_release();
  }
  v125 = *(_QWORD *)(a4 + v48);
  swift_beginAccess();
  *(_QWORD *)(v125 + 192) = v120;
  *(_QWORD *)(v125 + 200) = v122;
  swift_bridgeObjectRelease();
  if (v182)
  {
    v126 = v182;
    v127 = objc_msgSend(v126, sel_startDate);
    v128 = v184;
    sub_21FC5AA94();

    v129 = (void *)qword_255572F60;
    v130 = (void *)sub_21FC5AA64();
    v131 = objc_msgSend(v129, sel_stringFromDate_, v130);

    v132 = sub_21FC5B604();
    v134 = v133;

    v123(v128, v185);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBMedicationTracking._StorageClass();
      swift_allocObject();
      v135 = swift_retain();
      *(_QWORD *)(a4 + v48) = sub_21FB83948(v135);
      swift_release();
    }
    v136 = *(_QWORD *)(a4 + v48);
    swift_beginAccess();
    *(_QWORD *)(v136 + 208) = v132;
    *(_QWORD *)(v136 + 216) = v134;

    swift_bridgeObjectRelease();
  }
  v137 = v186;
  if (!v183)
    goto LABEL_107;
  v138 = v183;
  v139 = objc_msgSend(v138, sel_RxNormCoding);
  if (v139
    && (v140 = v139, v141 = objc_msgSend(v139, sel_code), v140, v141))
  {
    v142 = sub_21FC5B604();
    v144 = v143;

  }
  else
  {
    v142 = 0;
    v144 = 0xE000000000000000;
  }
  v145 = v187;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTracking._StorageClass();
    swift_allocObject();
    v146 = swift_retain();
    *(_QWORD *)(a4 + v145) = sub_21FB83948(v146);
    swift_release();
  }
  v147 = *(_QWORD *)(a4 + v145);
  swift_beginAccess();
  *(_QWORD *)(v147 + 80) = v142;
  *(_QWORD *)(v147 + 88) = v144;
  swift_bridgeObjectRelease();
  v148 = sub_21FC3D19C();
  v149 = v148;
  if (!v148)
    goto LABEL_90;
  v150 = objc_msgSend(v148, sel_RxNormCoding);

  if (!v150)
  {
    v149 = 0;
LABEL_90:
    v154 = 0xE000000000000000;
    v152 = v187;
    goto LABEL_91;
  }
  v151 = objc_msgSend(v150, sel_code);

  v152 = v187;
  if (v151)
  {
    v149 = (void *)sub_21FC5B604();
    v154 = v153;

  }
  else
  {
    v149 = 0;
    v154 = 0xE000000000000000;
  }
LABEL_91:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTracking._StorageClass();
    swift_allocObject();
    v155 = swift_retain();
    *(_QWORD *)(a4 + v152) = sub_21FB83948(v155);
    swift_release();
  }
  v156 = *(_QWORD *)(a4 + v152);
  swift_beginAccess();
  *(_QWORD *)(v156 + 224) = v149;
  *(_QWORD *)(v156 + 232) = v154;
  swift_bridgeObjectRelease();
  sub_21FC3D2AC((id)0x3F5);
  if (v157)
  {
    v158 = v157;
    v159 = v157 & 0xFFFFFFFFFFFFFF8;
    v137 = v186;
    if (v157 >> 62)
    {
      result = sub_21FC5BC7C();
      if (result)
        goto LABEL_96;
    }
    else
    {
      result = *(_QWORD *)((v157 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (result)
      {
LABEL_96:
        if ((v158 & 0xC000000000000001) != 0)
        {
          v162 = (id)MEMORY[0x2207D057C](0, v158);
          v161 = v187;
        }
        else
        {
          v161 = v187;
          if (!*(_QWORD *)(v159 + 16))
          {
            __break(1u);
            return result;
          }
          v162 = *(id *)(v158 + 32);
        }
        swift_bridgeObjectRelease();
        v163 = objc_msgSend(v162, sel_identifier);
        v164 = objc_msgSend(v163, sel_rawIdentifier);

        v188 = v164;
        v165 = sub_21FC5BDCC();
        v167 = v166;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for PBMedicationTracking._StorageClass();
          swift_allocObject();
          v168 = swift_retain();
          *(_QWORD *)(a4 + v161) = sub_21FB83948(v168);
          swift_release();
        }
        v169 = *(_QWORD *)(a4 + v161);
        swift_beginAccess();
        *(_QWORD *)(v169 + 288) = v165;
        *(_QWORD *)(v169 + 296) = v167;

        swift_bridgeObjectRelease();
        goto LABEL_103;
      }
    }

    swift_bridgeObjectRelease();
    goto LABEL_107;
  }

LABEL_103:
  v137 = v186;
LABEL_107:
  v170 = objc_msgSend(v137, sel_freeTextMedicationLoggingUnitCode);
  if (v170)
  {
    v171 = v170;
    v172 = objc_msgSend(v170, sel_longLongValue);

    sub_21FBE13CC((uint64_t)v172, (uint64_t)&v188);
    v173 = v188;
    v174 = v189;
  }
  else
  {
    v173 = 0;
    v174 = 1;
  }
  v175 = v187;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTracking._StorageClass();
    swift_allocObject();
    v176 = swift_retain();
    *(_QWORD *)(a4 + v175) = sub_21FB83948(v176);
    swift_release();
  }
  v177 = *(_QWORD *)(a4 + v175);
  result = swift_beginAccess();
  *(_QWORD *)(v177 + 256) = v173;
  *(_BYTE *)(v177 + 264) = v174;
  return result;
}

uint64_t sub_21FC29C98()
{
  uint64_t v0;

  return sub_21FC26DA0(*(_QWORD *)v0, *(void **)(v0 + 8));
}

void sub_21FC29CA0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D9C8)
  {
    sub_21FC2AFF8(255, (unint64_t *)&qword_25554B908, (unint64_t *)&qword_25554B910, &qword_25554B918, 0x24BDD4068);
    sub_21FC29D58(255, &qword_25554D9D0, &qword_25554D9D8, 0x24BE45CB8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FBC3104();
    v0 = sub_21FC5B004();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D9C8);
  }
}

void sub_21FC29D58(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = sub_21FA5BE58(255, a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_21FC29DB8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D9E0)
  {
    sub_21FC2A03C(255, &qword_25554D9E8, &qword_25554D9F0, (uint64_t (*)(uint64_t))sub_21FC29E7C);
    sub_21FC29CA0();
    sub_21FC29F18();
    sub_21FA2A08C(&qword_25554DA08, (uint64_t (*)(uint64_t))sub_21FC29CA0, MEMORY[0x24BDB94C8]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D9E0);
  }
}

void sub_21FC29E7C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25554D9F8)
  {
    sub_21FA5BE58(255, &qword_25554D9D8);
    sub_21FC29D58(255, (unint64_t *)&qword_25554AA60, (unint64_t *)&qword_255540D40, 0x24BDD3A28, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25554D9F8);
  }
}

unint64_t sub_21FC29F18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25554DA00;
  if (!qword_25554DA00)
  {
    sub_21FC2A03C(255, &qword_25554D9E8, &qword_25554D9F0, (uint64_t (*)(uint64_t))sub_21FC29E7C);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9AF8], v1);
    atomic_store(result, (unint64_t *)&qword_25554DA00);
  }
  return result;
}

void sub_21FC29F78()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554DA10)
  {
    sub_21FC2A03C(255, &qword_25554DA18, &qword_25554DA20, (uint64_t (*)(uint64_t))sub_21FC2A0BC);
    sub_21FC29DB8();
    sub_21FC2A190();
    sub_21FA2A08C(&qword_25554DA40, (uint64_t (*)(uint64_t))sub_21FC29DB8, MEMORY[0x24BDB98F0]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554DA10);
  }
}

void sub_21FC2A03C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_21FA2D1A0(255, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FA2CDB4();
    v5 = sub_21FC5B190();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_21FC2A0BC()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  unint64_t TupleTypeMetadata3;
  uint64_t v2;

  if (!qword_25554DA28)
  {
    sub_21FA5BE58(255, &qword_25554D9D8);
    v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
    sub_21FC29D58(255, (unint64_t *)&qword_25554AA60, (unint64_t *)&qword_255540D40, 0x24BDD3A28, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    sub_21FC29D58(255, &qword_25554DA30, &qword_25553FC20, 0x24BDD3D30, v0);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v2)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_25554DA28);
  }
}

unint64_t sub_21FC2A190()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25554DA38;
  if (!qword_25554DA38)
  {
    sub_21FC2A03C(255, &qword_25554DA18, &qword_25554DA20, (uint64_t (*)(uint64_t))sub_21FC2A0BC);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9AF8], v1);
    atomic_store(result, (unint64_t *)&qword_25554DA38);
  }
  return result;
}

void sub_21FC2A1F0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_21FC29F78();
    a3(255);
    sub_21FA2A08C(&qword_25554DA50, (uint64_t (*)(uint64_t))sub_21FC29F78, MEMORY[0x24BDB98F0]);
    v5 = sub_21FC5B004();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t sub_21FC2A28C@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FC273FC(a1, *(void **)(v2 + 24), a2);
}

uint64_t sub_21FC2A298@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_21FC2A2B4(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_21FC274F8, a2);
}

uint64_t sub_21FC2A2A8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_21FC2A2B4(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_21FC27818, a2);
}

uint64_t sub_21FC2A2B4@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = a2(*a1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
  *a3 = result;
  return result;
}

uint64_t sub_21FC2A2E8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21FC27B30(*a1, *(_QWORD *)(v2 + 16), a2);
}

unint64_t sub_21FC2A2F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25554DA60;
  if (!qword_25554DA60)
  {
    sub_21FC2A1F0(255, &qword_25554DA58, (void (*)(uint64_t))type metadata accessor for ClinicalSharingQueryOutput);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB94C8], v1);
    atomic_store(result, (unint64_t *)&qword_25554DA60);
  }
  return result;
}

unsigned __int8 *sub_21FC2A350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = sub_21FC5B718();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = sub_21FC2A6B0();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)sub_21FC5BBD4();
  }
LABEL_7:
  v11 = sub_21FC2A434(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_21FC2A434(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_21FC2A6B0()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_21FC5B724();
  v4 = sub_21FC2A72C(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_21FC2A72C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_21FC2A870(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_21FABE188(v9, 0);
      v12 = sub_21FC2A95C((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v13 = MEMORY[0x2207D0060](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x2207D0060);
LABEL_9:
      sub_21FC5BBD4();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x2207D0060]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_21FC2A870(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_21FABE200(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_21FABE200(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return sub_21FC5B6DC();
  }
  __break(1u);
  return result;
}

unint64_t sub_21FC2A95C(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_21FABE200(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = sub_21FC5B6E8();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = sub_21FC5BBD4();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_21FABE200(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = sub_21FC5B6C4();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_21FC2AB6C(uint64_t a1)
{
  uint64_t v2;

  sub_21FA2D1A0(0, &qword_25553E0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21FC2ABC0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PBMedicationTrackings(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21FC2ABFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PBMedicationTracking(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_21FC2AC58()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554DA68)
  {
    sub_21FA2D1A0(255, &qword_25554D9F0, (uint64_t (*)(uint64_t))sub_21FC29E7C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FC2ACEC();
    v0 = sub_21FC5B130();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554DA68);
  }
}

unint64_t sub_21FC2ACEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25554DA70;
  if (!qword_25554DA70)
  {
    sub_21FA2D1A0(255, &qword_25554D9F0, (uint64_t (*)(uint64_t))sub_21FC29E7C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_25554DA70);
  }
  return result;
}

void sub_21FC2AD4C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554DA78)
  {
    sub_21FA2D1A0(255, &qword_25554D9F0, (uint64_t (*)(uint64_t))sub_21FC29E7C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FA2CDB4();
    sub_21FC2ACEC();
    v0 = sub_21FC5B130();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554DA78);
  }
}

void sub_21FC2ADEC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554DA80)
  {
    sub_21FA84A5C(255, &qword_25554DA88, (uint64_t (*)(uint64_t))sub_21FC2A0BC, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FC2AD4C();
    sub_21FC2AEB0();
    sub_21FA2A08C(&qword_25554DA98, (uint64_t (*)(uint64_t))sub_21FC2AD4C, MEMORY[0x24BDB9970]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554DA80);
  }
}

unint64_t sub_21FC2AEB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25554DA90;
  if (!qword_25554DA90)
  {
    sub_21FA84A5C(255, &qword_25554DA88, (uint64_t (*)(uint64_t))sub_21FC2A0BC, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9AF8], v1);
    atomic_store(result, (unint64_t *)&qword_25554DA90);
  }
  return result;
}

uint64_t sub_21FC2AF10()
{
  return sub_21FA2A08C(&qword_25554DAA8, (uint64_t (*)(uint64_t))sub_21FC2ADEC, MEMORY[0x24BDB98F0]);
}

uint64_t sub_21FC2AF30@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FC28510(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_21FC2AF38(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    sub_21FC2B4C8(255, a2, a3, a4);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB98D8], v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_21FC2AF78()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554DAB8)
  {
    sub_21FC2AFF8(255, (unint64_t *)&qword_25553E0B0, (unint64_t *)&qword_25553E0B8, (unint64_t *)&qword_25553E0C0, 0x24BDD3ED8);
    sub_21FA5751C();
    v0 = sub_21FC5B034();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554DAB8);
  }
}

void sub_21FC2AFF8(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    sub_21FC29D58(255, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FA2CDB4();
    v6 = sub_21FC5B190();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_21FC2B07C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554DAC0)
  {
    sub_21FC2AF78();
    sub_21FC29D58(255, &qword_25554DA30, &qword_25553FC20, 0x24BDD3D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    sub_21FA2A08C(&qword_25554DAC8, (uint64_t (*)(uint64_t))sub_21FC2AF78, MEMORY[0x24BDB9590]);
    v0 = sub_21FC5B064();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554DAC0);
  }
}

void sub_21FC2B130()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554DAD0)
  {
    sub_21FC2AF78();
    sub_21FC2A0BC();
    sub_21FA2A08C(&qword_25554DAC8, (uint64_t (*)(uint64_t))sub_21FC2AF78, MEMORY[0x24BDB9590]);
    v0 = sub_21FC5B064();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554DAD0);
  }
}

uint64_t sub_21FC2B1C4()
{
  uint64_t v0;

  return swift_deallocObject();
}

id sub_21FC2B1F0@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_21FC28B38(a1, *(void **)(v2 + 16), *(void **)(v2 + 24), a2);
}

void sub_21FC2B1F8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554DAE0)
  {
    sub_21FC29D58(255, &qword_25554D9D0, &qword_25554D9D8, 0x24BE45CB8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FC2B294();
    v0 = sub_21FC5B130();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554DAE0);
  }
}

unint64_t sub_21FC2B294()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25554DAE8;
  if (!qword_25554DAE8)
  {
    sub_21FC29D58(255, &qword_25554D9D0, &qword_25554D9D8, 0x24BE45CB8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_25554DAE8);
  }
  return result;
}

void sub_21FC2B2FC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554DAF0)
  {
    sub_21FC29D58(255, &qword_25554D9D0, &qword_25554D9D8, 0x24BE45CB8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FA2CDB4();
    sub_21FC2B294();
    v0 = sub_21FC5B130();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554DAF0);
  }
}

void sub_21FC2B3A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554DAF8)
  {
    sub_21FA84A5C(255, &qword_25554DB00, (uint64_t (*)(uint64_t))sub_21FC29E7C, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FC2B2FC();
    sub_21FC2B468();
    sub_21FA2A08C(&qword_25554DB10, (uint64_t (*)(uint64_t))sub_21FC2B2FC, MEMORY[0x24BDB9970]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554DAF8);
  }
}

unint64_t sub_21FC2B468()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25554DB08;
  if (!qword_25554DB08)
  {
    sub_21FA84A5C(255, &qword_25554DB00, (uint64_t (*)(uint64_t))sub_21FC29E7C, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9AF8], v1);
    atomic_store(result, (unint64_t *)&qword_25554DB08);
  }
  return result;
}

void sub_21FC2B4C8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4();
    v6 = sub_21FC5B0F4();
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_21FC2B52C()
{
  return sub_21FA2A08C(&qword_25554DB20, (uint64_t (*)(uint64_t))sub_21FC2B3A4, MEMORY[0x24BDB98F0]);
}

uint64_t objectdestroyTm_14()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void sub_21FC2B578(id *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  sub_21FC27E18(a1, *(_QWORD *)(v2 + 16), a2);
}

void sub_21FC2B580()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25554DB40)
  {
    v0 = MEMORY[0x24BDB9E38];
    sub_21FC2B618(255, (unint64_t *)&qword_25554AA58, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
    sub_21FC2B6A8(&qword_25554DB48, (unint64_t *)&qword_25554AA58, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v0, MEMORY[0x24BDB9E58]);
    v1 = sub_21FC5B274();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25554DB40);
  }
}

void sub_21FC2B618(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_21FC29D58(255, (unint64_t *)&qword_25554AA60, (unint64_t *)&qword_255540D40, 0x24BDD3A28, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v7 = v6;
    v8 = sub_21FA2CDB4();
    v9 = a3(a1, v7, v8, MEMORY[0x24BEE3F20]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_21FC2B6A8(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FC2B618(255, a2, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_21FC2B6E8()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25554DB50)
  {
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FC2B618(255, &qword_25554DB58, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FC29E7C();
    sub_21FC2B6A8(&qword_25554DB60, &qword_25554DB58, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    v1 = sub_21FC5B064();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25554DB50);
  }
}

unint64_t sub_21FC2B798()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25554DB68;
  if (!qword_25554DB68)
  {
    sub_21FA84A5C(255, &qword_25554DB38, (uint64_t (*)(uint64_t))sub_21FC29E7C, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDBA1D0], v1);
    atomic_store(result, (unint64_t *)&qword_25554DB68);
  }
  return result;
}

uint64_t sub_21FC2B7F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_21FBA635C(*(void **)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_21FC2B800()
{
  uint64_t v0;

  return swift_deallocObject();
}

id sub_21FC2B824@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v6;

  v6 = *(id *)(v2 + 16);
  v3 = *a1;
  *a2 = v6;
  a2[1] = v3;
  v4 = v3;
  return v6;
}

uint64_t sub_21FC2B858@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_21FA32580();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v15 - v8;
  if ((a1 & 1) == 0)
  {
    sub_21FC5A980();
    v10 = sub_21FC5A98C();
    v11 = *(_QWORD *)(v10 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
    if ((_DWORD)result != 1)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a2, v9, v10);
    __break(1u);
    goto LABEL_8;
  }
  sub_21FC5A980();
  v13 = sub_21FC5A98C();
  v14 = *(_QWORD *)(v13 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, v13);
  if ((_DWORD)result == 1)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a2, v7, v13);
}

uint64_t sub_21FC2B9A4(char *a1, char *a2)
{
  return sub_21FA2DE40(*a1, *a2);
}

uint64_t sub_21FC2B9B0()
{
  sub_21FC5BE8C();
  sub_21FC5B67C();
  swift_bridgeObjectRelease();
  return sub_21FC5BEB0();
}

uint64_t sub_21FC2BA24()
{
  sub_21FC5B67C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21FC2BA74()
{
  sub_21FC5BE8C();
  sub_21FC5B67C();
  swift_bridgeObjectRelease();
  return sub_21FC5BEB0();
}

uint64_t sub_21FC2BAE4@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_21FC5BCD0();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_21FC2BB40(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1685025392;
  if (*v1)
    v2 = 0x7972726163;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xE500000000000000;
  *a1 = v2;
  a1[1] = v3;
}

ValueMetadata *type metadata accessor for CHRConfigCatalogDownload()
{
  return &type metadata for CHRConfigCatalogDownload;
}

uint64_t storeEnumTagSinglePayload for CHRConfigCatalogDownload.Environment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21FC2BBD0 + 4 * byte_21FC72155[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21FC2BC04 + 4 * byte_21FC72150[v4]))();
}

uint64_t sub_21FC2BC04(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FC2BC0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FC2BC14);
  return result;
}

uint64_t sub_21FC2BC20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FC2BC28);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21FC2BC2C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FC2BC34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CHRConfigCatalogDownload.Environment()
{
  return &type metadata for CHRConfigCatalogDownload.Environment;
}

unint64_t sub_21FC2BC54()
{
  unint64_t result;

  result = qword_25554DB80;
  if (!qword_25554DB80)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC72200, &type metadata for CHRConfigCatalogDownload.Environment);
    atomic_store(result, (unint64_t *)&qword_25554DB80);
  }
  return result;
}

uint64_t VHRDirectory.v.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t VHRDirectory.v.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*VHRDirectory.v.modify())()
{
  return nullsub_1;
}

uint64_t VHRDirectory.issuers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_21FC2BCC0()
{
  _BYTE *v0;

  if (*v0)
    return 0x73726575737369;
  else
    return 118;
}

uint64_t sub_21FC2BCF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_21FC2C3E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_21FC2BD14()
{
  sub_21FC2BECC();
  return sub_21FC5BF10();
}

uint64_t sub_21FC2BD3C()
{
  sub_21FC2BECC();
  return sub_21FC5BF1C();
}

uint64_t VHRDirectory.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];
  char v11;
  char v12;

  sub_21FC2C0F8(0, &qword_25554DB88, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v10 - v7;
  v10[0] = *(_QWORD *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_21FC2BECC();
  sub_21FC5BEEC();
  v12 = 0;
  sub_21FC5BD90();
  if (!v2)
  {
    v10[1] = v10[0];
    v11 = 1;
    sub_21FC2BF10();
    sub_21FC2C154(&qword_25554DBA0, &qword_25554DBA8, (uint64_t)&protocol conformance descriptor for VHRDirectoryIssuer, MEMORY[0x24BEE12A0]);
    sub_21FC5BD9C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_21FC2BECC()
{
  unint64_t result;

  result = qword_25554DB90;
  if (!qword_25554DB90)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC72374, &type metadata for VHRDirectory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554DB90);
  }
  return result;
}

void sub_21FC2BF10()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554DB98)
  {
    type metadata accessor for VHRDirectoryIssuer();
    v0 = sub_21FC5B7F0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554DB98);
  }
}

uint64_t VHRDirectory.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[2];
  char v14;
  char v15;

  sub_21FC2C0F8(0, &qword_25554DBB0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v13 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_21FC2BECC();
  sub_21FC5BEE0();
  if (!v2)
  {
    v15 = 0;
    v10 = sub_21FC5BD24();
    sub_21FC2BF10();
    v14 = 1;
    sub_21FC2C154(&qword_25554DBB8, &qword_25554DBC0, (uint64_t)&protocol conformance descriptor for VHRDirectoryIssuer, MEMORY[0x24BEE12D0]);
    sub_21FC5BD30();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v12 = v13[1];
    *a2 = v10;
    a2[1] = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void sub_21FC2C0F8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_21FC2BECC();
    v7 = a3(a1, &type metadata for VHRDirectory.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_21FC2C154(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_21FC2BF10();
    v10 = v9;
    v11 = sub_21FC2C1CC(a2, a3);
    result = MEMORY[0x2207D0F78](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FC2C1CC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for VHRDirectoryIssuer();
    result = MEMORY[0x2207D0F78](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FC2C20C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return VHRDirectory.init(from:)(a1, a2);
}

uint64_t sub_21FC2C220(_QWORD *a1)
{
  return VHRDirectory.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for VHRDirectory()
{
  return &type metadata for VHRDirectory;
}

uint64_t storeEnumTagSinglePayload for VHRDirectory.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21FC2C290 + 4 * byte_21FC72235[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21FC2C2C4 + 4 * byte_21FC72230[v4]))();
}

uint64_t sub_21FC2C2C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FC2C2CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FC2C2D4);
  return result;
}

uint64_t sub_21FC2C2E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FC2C2E8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21FC2C2EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FC2C2F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VHRDirectory.CodingKeys()
{
  return &type metadata for VHRDirectory.CodingKeys;
}

unint64_t sub_21FC2C314()
{
  unint64_t result;

  result = qword_25554DBC8;
  if (!qword_25554DBC8)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC7234C, &type metadata for VHRDirectory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554DBC8);
  }
  return result;
}

unint64_t sub_21FC2C35C()
{
  unint64_t result;

  result = qword_25554DBD0;
  if (!qword_25554DBD0)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC722BC, &type metadata for VHRDirectory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554DBD0);
  }
  return result;
}

unint64_t sub_21FC2C3A4()
{
  unint64_t result;

  result = qword_25554DBD8;
  if (!qword_25554DBD8)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC722E4, &type metadata for VHRDirectory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554DBD8);
  }
  return result;
}

uint64_t sub_21FC2C3E8(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 118 && a2 == 0xE100000000000000 || (sub_21FC5BDF0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73726575737369 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_21FC5BDF0();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_21FC2C4C0@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t result;

  type metadata accessor for PBHKMedicationScheduleIntervalData.HKReminderWeekdayOptions(0);
  *(_DWORD *)a2 = 0;
  *(_DWORD *)(a2 + 3) = 0;
  result = sub_21FC5AD10();
  if ((a1 & 1) != 0)
  {
    *(_BYTE *)(a2 + 1) = 1;
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_BYTE *)(a2 + 2) = 1;
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  *(_BYTE *)(a2 + 3) = 1;
  if ((a1 & 8) == 0)
  {
LABEL_5:
    if ((a1 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  *(_BYTE *)(a2 + 4) = 1;
  if ((a1 & 0x10) == 0)
  {
LABEL_6:
    if ((a1 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  *(_BYTE *)(a2 + 5) = 1;
  if ((a1 & 0x20) == 0)
  {
LABEL_7:
    if ((a1 & 0x40) == 0)
      return result;
    goto LABEL_8;
  }
LABEL_15:
  *(_BYTE *)(a2 + 6) = 1;
  if ((a1 & 0x40) == 0)
    return result;
LABEL_8:
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t ClinicalIngestionResponseTimeMetricElement.init(operationURL:interactionType:timeInterval:)@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unsigned __int8 v11;

  v11 = *a2;
  v7 = _s19HealthRecordsDaemon35ClinicalIngestionAnalyticsMetricKeyC09analyticsgH04with15interactionTypeAC10Foundation3URLV_AA0def11InteractionL0OtFZ_0(a1, &v11);
  v8 = lround(a4 * 1000.0);
  v9 = sub_21FC5A98C();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
  *a3 = v7;
  a3[1] = v8;
  return result;
}

uint64_t sub_21FC2C5F4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *v0;
  if (!*(_QWORD *)(*v0 + 16))
    return 0xD00000000000002ELL;
  v2 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v23 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    while (v5)
    {
      v12 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v13 = v12 | (v8 << 6);
      if (*(_QWORD *)(v1 + 16))
        goto LABEL_5;
    }
    v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v6)
      goto LABEL_34;
    v15 = *(_QWORD *)(v2 + 8 * v14);
    ++v8;
    if (!v15)
    {
      v8 = v14 + 1;
      if (v14 + 1 >= v6)
        goto LABEL_34;
      v15 = *(_QWORD *)(v2 + 8 * v8);
      if (!v15)
      {
        v8 = v14 + 2;
        if (v14 + 2 >= v6)
          goto LABEL_34;
        v15 = *(_QWORD *)(v2 + 8 * v8);
        if (!v15)
        {
          v8 = v14 + 3;
          if (v14 + 3 >= v6)
            goto LABEL_34;
          v15 = *(_QWORD *)(v2 + 8 * v8);
          if (!v15)
          {
            v8 = v14 + 4;
            if (v14 + 4 >= v6)
              goto LABEL_34;
            v15 = *(_QWORD *)(v2 + 8 * v8);
            if (!v15)
              break;
          }
        }
      }
    }
LABEL_32:
    v5 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v8 << 6);
    if (*(_QWORD *)(v1 + 16))
    {
LABEL_5:
      v9 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v13);
      v10 = swift_retain();
      sub_21FA740D8(v10);
      if ((v11 & 1) != 0)
      {
        v17 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 104);
        v18 = swift_bridgeObjectRetain();
        v24 = v17(v18);
        v25 = v19;
        sub_21FC5B6AC();
        ClinicalIngestionResponseTimeMetricValue.analyticsString.getter();
        swift_bridgeObjectRelease();
        sub_21FC5B6AC();
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v23 = sub_21FA7DD0C(0, v23[2] + 1, 1, v23);
        v21 = v23[2];
        v20 = v23[3];
        if (v21 >= v20 >> 1)
          v23 = sub_21FA7DD0C((_QWORD *)(v20 > 1), v21 + 1, 1, v23);
        v23[2] = v21 + 1;
        v22 = &v23[2 * v21];
        v22[4] = v24;
        v22[5] = v25;
      }
      result = swift_release();
    }
  }
  v16 = v14 + 5;
  if (v16 >= v6)
  {
LABEL_34:
    swift_release();
    sub_21FC5BB74();
    sub_21FC5B6AC();
    sub_21FC5BDCC();
    sub_21FC5B6AC();
    swift_bridgeObjectRelease();
    sub_21FC5B6AC();
    sub_21FAC8DA4();
    sub_21FA80314();
    sub_21FC5B5B0();
    swift_bridgeObjectRelease();
    sub_21FC5B6AC();
    swift_bridgeObjectRelease();
    return 0;
  }
  v15 = *(_QWORD *)(v2 + 8 * v16);
  if (v15)
  {
    v8 = v16;
    goto LABEL_32;
  }
  while (1)
  {
    v8 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v8 >= v6)
      goto LABEL_34;
    v15 = *(_QWORD *)(v2 + 8 * v8);
    ++v16;
    if (v15)
      goto LABEL_32;
  }
LABEL_37:
  __break(1u);
  return result;
}

HealthRecordsDaemon::ClinicalIngestionResponseTimeMetric __swiftcall ClinicalIngestionResponseTimeMetric.init()()
{
  HealthRecordsDaemon::ClinicalIngestionResponseTimeMetric *v0;
  HealthRecordsDaemon::ClinicalIngestionResponseTimeMetric *v1;
  HealthRecordsDaemon::ClinicalIngestionResponseTimeMetric result;

  v1 = v0;
  result.elements._rawValue = (void *)sub_21FA7CAA4(MEMORY[0x24BEE4AF8]);
  v1->elements._rawValue = result.elements._rawValue;
  return result;
}

uint64_t ClinicalIngestionResponseTimeMetric.addResponseTime(metricElement:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _QWORD **v6;
  void (*v7)(_QWORD *);
  _QWORD *v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  double v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  _QWORD v22[4];

  v2 = *a1;
  v3 = a1[1];
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  swift_retain();
  if (v4 && (sub_21FA740D8(v2), (v5 & 1) != 0))
  {
    swift_retain();
    v7 = sub_21FC2CFEC(v22, v2);
    v8 = *v6;
    if (*v6)
    {
      v9 = v6;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v9 = v8;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v8 = sub_21FA7E770(0, v8[2] + 1, 1, v8);
        *v9 = v8;
      }
      v11 = (double)v3;
      v13 = v8[2];
      v12 = v8[3];
      v14 = v13 + 1;
      if (v13 >= v12 >> 1)
      {
        v21 = sub_21FA7E770((_QWORD *)(v12 > 1), v13 + 1, 1, v8);
        v14 = v13 + 1;
        v8 = v21;
        *v9 = v21;
      }
      v8[2] = v14;
      *(double *)&v8[v13 + 4] = v11;
    }
    ((void (*)(_QWORD *, _QWORD))v7)(v22, 0);
    return swift_release_n();
  }
  else
  {
    v16 = (double)v3;
    swift_retain();
    v17 = sub_21FA7E770(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v19 = v17[2];
    v18 = v17[3];
    if (v19 >= v18 >> 1)
      v17 = sub_21FA7E770((_QWORD *)(v18 > 1), v19 + 1, 1, v17);
    v17[2] = v19 + 1;
    *(double *)&v17[v19 + 4] = v16;
    v20 = swift_isUniquelyReferenced_nonNull_native();
    v22[0] = *(_QWORD *)v1;
    *(_QWORD *)v1 = 0x8000000000000000;
    sub_21FA78E84((uint64_t)v17, v2, v20);
    *(_QWORD *)v1 = v22[0];
    swift_release_n();
    return swift_bridgeObjectRelease();
  }
}

uint64_t ClinicalIngestionResponseTimeMetric.enumerateElementsAsCoreAnalyticsPayload()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double *v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  double *v25;
  double v26;
  double v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int64_t v32;

  v1 = *v0;
  v31 = *v0 + 64;
  v2 = 1 << *(_BYTE *)(*v0 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(*v0 + 64);
  v32 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v6 = 0;
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!v4)
    goto LABEL_5;
LABEL_4:
  v8 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  for (i = v8 | (v6 << 6); ; i = __clz(__rbit64(v11)) + (v6 << 6))
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * i);
    sub_21FA7F4F8();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21FC5F3A0;
    *(_QWORD *)(inited + 32) = 1953722216;
    *(_QWORD *)(inited + 40) = 0xE400000000000000;
    swift_retain();
    swift_bridgeObjectRetain();
    *(_QWORD *)(inited + 48) = sub_21FC5B5E0();
    *(_QWORD *)(inited + 56) = 0xD000000000000013;
    *(_QWORD *)(inited + 64) = 0x800000021FC7DFA0;
    *(_QWORD *)(inited + 72) = sub_21FC5B8B0();
    *(_QWORD *)(inited + 80) = 0x7463617265746E69;
    *(_QWORD *)(inited + 88) = 0xEF657079546E6F69;
    v15 = sub_21FC5B5E0();
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 96) = v15;
    *(_QWORD *)(inited + 104) = 0x656D695478616DLL;
    *(_QWORD *)(inited + 112) = 0xE700000000000000;
    v16 = *(_QWORD *)(v13 + 16);
    if (v16)
    {
      v17 = *(double *)(v13 + 32);
      v18 = v16 - 1;
      if (v18)
      {
        v19 = (double *)(v13 + 40);
        do
        {
          v20 = *v19++;
          v21 = v20;
          if (v17 < v20)
            v17 = v21;
          --v18;
        }
        while (v18);
      }
    }
    *(_QWORD *)(inited + 120) = sub_21FC5B874();
    *(_QWORD *)(inited + 128) = 0x69546E616964656DLL;
    *(_QWORD *)(inited + 136) = 0xEA0000000000656DLL;
    ClinicalIngestionResponseTimeMetricValue.median.getter();
    *(_QWORD *)(inited + 144) = sub_21FC5B874();
    *(_QWORD *)(inited + 152) = 0x656D69546E696DLL;
    *(_QWORD *)(inited + 160) = 0xE700000000000000;
    v22 = *(_QWORD *)(v13 + 16);
    if (v22)
    {
      v23 = *(double *)(v13 + 32);
      v24 = v22 - 1;
      if (v24)
      {
        v25 = (double *)(v13 + 40);
        do
        {
          v26 = *v25++;
          v27 = v26;
          if (v26 < v23)
            v23 = v27;
          --v24;
        }
        while (v24);
      }
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 168) = sub_21FC5B874();
    strcpy((char *)(inited + 176), "resourceType");
    *(_BYTE *)(inited + 189) = 0;
    *(_WORD *)(inited + 190) = -5120;
    *(_QWORD *)(inited + 192) = sub_21FC5B5E0();
    v28 = sub_21FA7C1C4(inited);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = sub_21FA7DE98(0, v7[2] + 1, 1, v7);
    v30 = v7[2];
    v29 = v7[3];
    if (v30 >= v29 >> 1)
      v7 = sub_21FA7DE98((_QWORD *)(v29 > 1), v30 + 1, 1, v7);
    v7[2] = v30 + 1;
    v7[v30 + 4] = v28;
    result = swift_release();
    if (v4)
      goto LABEL_4;
LABEL_5:
    v10 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v10 >= v32)
      goto LABEL_37;
    v11 = *(_QWORD *)(v31 + 8 * v10);
    ++v6;
    if (!v11)
    {
      v6 = v10 + 1;
      if (v10 + 1 >= v32)
        goto LABEL_37;
      v11 = *(_QWORD *)(v31 + 8 * v6);
      if (!v11)
      {
        v6 = v10 + 2;
        if (v10 + 2 >= v32)
          goto LABEL_37;
        v11 = *(_QWORD *)(v31 + 8 * v6);
        if (!v11)
          break;
      }
    }
LABEL_18:
    v4 = (v11 - 1) & v11;
  }
  v12 = v10 + 3;
  if (v12 >= v32)
  {
LABEL_37:
    swift_release();
    return (uint64_t)v7;
  }
  v11 = *(_QWORD *)(v31 + 8 * v12);
  if (v11)
  {
    v6 = v12;
    goto LABEL_18;
  }
  while (1)
  {
    v6 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v6 >= v32)
      goto LABEL_37;
    v11 = *(_QWORD *)(v31 + 8 * v6);
    ++v12;
    if (v11)
      goto LABEL_18;
  }
LABEL_39:
  __break(1u);
  return result;
}

Swift::Void __swiftcall ClinicalIngestionResponseTimeMetric.resetMetric()()
{
  _QWORD *v0;

  swift_bridgeObjectRelease();
  *v0 = MEMORY[0x24BEE4B00];
}

void (*sub_21FC2CFEC(_QWORD *a1, uint64_t a2))(_QWORD *a1)
{
  _QWORD *v4;

  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[4] = a2;
  swift_retain();
  v4[5] = sub_21FC2D098(v4, a2);
  return sub_21FC2D048;
}

void sub_21FC2D048(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  swift_release();
  free(v1);
}

uint64_t ClinicalIngestionResponseTimeMetricElement.keyElement.getter()
{
  return swift_retain();
}

uint64_t ClinicalIngestionResponseTimeMetricElement.responseTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t ClinicalIngestionResponseTimeMetricElement.init(keyElement:responseTime:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void (*sub_21FC2D098(_QWORD *a1, uint64_t a2))(uint64_t a1)
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x58uLL);
  *a1 = v4;
  v4[8] = a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_retain();
  v4[9] = sub_21FC2D2C8(v4);
  v4[10] = sub_21FC2D170(v4 + 4, a2, isUniquelyReferenced_nonNull_native);
  return sub_21FC2D120;
}

void sub_21FC2D120(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  swift_release();
  v2(v1, 0);
  free(v1);
}

void (*sub_21FC2D170(_QWORD *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void (*result)(uint64_t **);

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  v8[2] = v4;
  v9 = *v4;
  v11 = sub_21FA740D8(a2);
  *((_BYTE *)v8 + 32) = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(*(_QWORD *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *v8 = v17;
        return sub_21FC2D28C;
      }
LABEL_11:
      v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_21FA7A82C();
      goto LABEL_7;
    }
    sub_21FA77024(v14, a3 & 1);
    v18 = sub_21FA740D8(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      v11 = v18;
      v8[3] = v18;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  type metadata accessor for ClinicalIngestionAnalyticsMetricKey();
  result = (void (*)(uint64_t **))sub_21FC5BE20();
  __break(1u);
  return result;
}

void sub_21FC2D28C(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_21FC2D2F4(*a1, *((_BYTE *)*a1 + 32), (uint64_t *)(*a1)[2], (*a1)[3], (*a1)[1]);
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t (*sub_21FC2D2C8(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_21FC2D2E8;
}

uint64_t sub_21FC2D2E8(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t sub_21FC2D2F4(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _QWORD *v8;

  v7 = *a1;
  if (*a1)
  {
    v8 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(v8[7] + 8 * a4) = v7;
    }
    else
    {
      sub_21FA7933C(a4, a5, v7, v8);
      swift_retain();
    }
  }
  else if ((a2 & 1) != 0)
  {
    type metadata accessor for ClinicalIngestionAnalyticsMetricKey();
    swift_arrayDestroy();
    sub_21FBAECFC(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for ClinicalIngestionResponseTimeMetric()
{
  return &type metadata for ClinicalIngestionResponseTimeMetric;
}

_QWORD *initializeBufferWithCopyOfBuffer for ClinicalIngestionResponseTimeMetricElement(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ClinicalIngestionResponseTimeMetricElement(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for ClinicalIngestionResponseTimeMetricElement(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for ClinicalIngestionResponseTimeMetricElement()
{
  return &type metadata for ClinicalIngestionResponseTimeMetricElement;
}

void sub_21FC2D468(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[3];

  v4 = sub_21FC5A98C();
  MEMORY[0x24BDAC7A8](v4);
  sub_21FC5BB74();
  swift_bridgeObjectRelease();
  v5[1] = 60;
  v5[2] = 0xE100000000000000;
  v5[0] = a1;
  swift_getMetatypeMetadata();
  sub_21FC5B64C();
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  (*(void (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a2 + 8))(v5, a1, a2);
  __asm { BR              X10 }
}

uint64_t sub_21FC2D59C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  (*(void (**)(uint64_t, uint64_t))(v2 + 40))(v3, v2);
  sub_21FA2A08C((unint64_t *)&qword_25553E2C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
  sub_21FC5BDCC();
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v0);
  sub_21FC5B6AC();
  return *(_QWORD *)(v5 - 80);
}

void sub_21FC2D6D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[6];

  v4 = sub_21FC5A98C();
  MEMORY[0x24BDAC7A8](v4);
  v5[1] = 0xE000000000000000;
  sub_21FC5BB74();
  v5[4] = 0;
  v5[5] = 0xE000000000000000;
  sub_21FC5B6AC();
  v5[0] = a1;
  swift_getMetatypeMetadata();
  sub_21FC5B64C();
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  (*(void (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a2 + 8))(v5, a1, a2);
  __asm { BR              X10 }
}

uint64_t sub_21FC2D808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  sub_21FC5B6AC();
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v2, v1);
  v6 = (void *)sub_21FC5A920();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v0);
  v7 = (id)HKSensitiveLogItem();

  sub_21FC5BAF0();
  swift_unknownObjectRelease();
  sub_21FC5BC4C();
  __swift_destroy_boxed_opaque_existential_1(v5 - 112);
  sub_21FC5B6AC();
  return *(_QWORD *)(v5 - 80);
}

Swift::Void __swiftcall WebRequest.add(header:)(HealthRecordsDaemon::HTTPHeader header)
{
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD **v8;
  void (*v9)(_BYTE *, _QWORD);
  _QWORD *v10;
  _QWORD *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void (*v17)(uint64_t, void *, uint64_t);
  _BYTE v18[32];

  countAndFlagsBits = header.value._countAndFlagsBits;
  object = header.name._object;
  v4 = *(_QWORD *)header.name._countAndFlagsBits;
  v3 = *(_QWORD *)(header.name._countAndFlagsBits + 8);
  v6 = *(_QWORD *)(header.name._countAndFlagsBits + 16);
  v5 = *(_QWORD *)(header.name._countAndFlagsBits + 24);
  v7 = (*(uint64_t (**)(void *, uint64_t))(header.value._countAndFlagsBits + 16))(header.name._object, header.value._countAndFlagsBits);
  swift_bridgeObjectRelease();
  if (v7)
  {
    v9 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, void *, uint64_t))(countAndFlagsBits + 32))(v18, object, countAndFlagsBits);
    v10 = *v8;
    if (*v8)
    {
      v11 = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v11 = v10;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v10 = sub_21FA7E100(0, v10[2] + 1, 1, v10);
        *v11 = v10;
      }
      v14 = v10[2];
      v13 = v10[3];
      if (v14 >= v13 >> 1)
      {
        v10 = sub_21FA7E100((_QWORD *)(v13 > 1), v14 + 1, 1, v10);
        *v11 = v10;
      }
      v10[2] = v14 + 1;
      v15 = &v10[4 * v14];
      v15[4] = v4;
      v15[5] = v3;
      v15[6] = v6;
      v15[7] = v5;
    }
    v9(v18, 0);
  }
  else
  {
    sub_21FACD2EC();
    v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_21FC5EE30;
    *(_QWORD *)(v16 + 32) = v4;
    *(_QWORD *)(v16 + 40) = v3;
    *(_QWORD *)(v16 + 48) = v6;
    *(_QWORD *)(v16 + 56) = v5;
    v17 = *(void (**)(uint64_t, void *, uint64_t))(countAndFlagsBits + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17(v16, object, countAndFlagsBits);
  }
}

Swift::Void __swiftcall WebRequest.removeHeader(name:)(Swift::String name)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v2;
  v4 = v1;
  object = name._object;
  countAndFlagsBits = name._countAndFlagsBits;
  v7 = (*(uint64_t (**)())(v2 + 16))();
  if (v7)
  {
    v8 = v7;
    swift_bridgeObjectRetain();
    v9 = sub_21FC2E0AC(v8, countAndFlagsBits, (uint64_t)object);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 24))(v9, v4, v3);
}

uint64_t WebRequest.urlRequest(attribution:timeoutInterval:cachePolicy:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v11 = sub_21FC5A98C();
  MEMORY[0x24BDAC7A8](v11);
  (*(void (**)(uint64_t, uint64_t))(a7 + 40))(a6, a7);
  sub_21FC5A59C();
  sub_21FC5A578();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a7 + 8))(&v15, a6, a7);
  sub_21FC5A56C();
  (*(void (**)(uint64_t, uint64_t))(a7 + 48))(a6, a7);
  sub_21FC5A5C0();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 16))(a6, a7);
  if (result)
  {
    v13 = *(_QWORD *)(result + 16);
    if (v13)
    {
      v14 = result + 56;
      do
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_21FC5A5B4();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v14 += 32;
        --v13;
      }
      while (v13);
    }
    result = swift_bridgeObjectRelease();
  }
  if ((a3 & 1) == 0)
    result = sub_21FC5A590();
  if ((a5 & 1) == 0)
    return sub_21FC5A584();
  return result;
}

void WebRequestError.errorDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v1 = sub_21FC5A740();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_21FC5A98C();
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for WebRequestError();
  MEMORY[0x24BDAC7A8](v3);
  sub_21FC2E2B8(v0, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = (char *)sub_21FC2DEA4 + 4 * byte_21FC72478[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21FC2DEA4()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 96) = 0;
  *(_QWORD *)(v0 - 88) = 0xE000000000000000;
  sub_21FC5BB74();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 - 96) = 0xD000000000000015;
  *(_QWORD *)(v0 - 88) = 0x800000021FC7E060;
  sub_21FC5B6AC();
  swift_bridgeObjectRelease();
  return *(_QWORD *)(v0 - 96);
}

uint64_t sub_21FC2E0AC(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return MEMORY[0x24BEE4AF8];
  v6 = 0;
  v7 = result + 56;
  v8 = -(uint64_t)v3;
  v9 = MEMORY[0x24BEE4AF8];
  v26 = result + 56;
  v29 = -(uint64_t)v3;
  do
  {
    v28 = v9;
    if (v6 <= v3)
      v10 = v3;
    else
      v10 = v6;
    v11 = -(uint64_t)v10;
    for (i = (uint64_t *)(v7 + 32 * v6++); ; i += 4)
    {
      if (v11 + v6 == 1)
      {
        __break(1u);
        return result;
      }
      v14 = *(i - 3);
      v13 = *(i - 2);
      if (v14 != a2 || v13 != a3)
      {
        v16 = *(i - 1);
        v17 = *i;
        v18 = a2;
        v19 = a3;
        v20 = v11;
        result = sub_21FC5BDF0();
        v11 = v20;
        a2 = v18;
        a3 = v19;
        v8 = v29;
        if ((result & 1) == 0)
          break;
      }
      ++v6;
      if (v8 + v6 == 1)
        return v28;
    }
    v25 = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = v28;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_21FC01E20(0, *(_QWORD *)(v28 + 16) + 1, 1);
      v9 = v28;
    }
    v21 = v25;
    v23 = *(_QWORD *)(v9 + 16);
    v22 = *(_QWORD *)(v9 + 24);
    v8 = v29;
    a3 = v19;
    a2 = v18;
    if (v23 >= v22 >> 1)
    {
      result = sub_21FC01E20(v22 > 1, v23 + 1, 1);
      v21 = v25;
      a2 = v18;
      a3 = v19;
      v8 = v29;
      v9 = v28;
    }
    *(_QWORD *)(v9 + 16) = v23 + 1;
    v24 = (_QWORD *)(v9 + 32 * v23);
    v24[4] = v14;
    v24[5] = v13;
    v24[6] = v21;
    v24[7] = v17;
    v3 = v27;
    v7 = v26;
  }
  while (v8 + v6);
  return v9;
}

uint64_t type metadata accessor for WebRequestError()
{
  uint64_t result;

  result = qword_25554DC58;
  if (!qword_25554DC58)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21FC2E2B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WebRequestError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FC2E2FC()
{
  return sub_21FA2A08C((unint64_t *)&qword_2555405E8, (uint64_t (*)(uint64_t))type metadata accessor for WebRequestError, (uint64_t)&protocol conformance descriptor for WebRequestError);
}

uint64_t dispatch thunk of WebRequest.method.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of WebRequest.headers.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of WebRequest.headers.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of WebRequest.headers.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of WebRequest.url.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of WebRequest.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of WebRequest.title.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t *initializeBufferWithCopyOfBuffer for WebRequestError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        v10 = sub_21FC5A98C();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        v11 = sub_21FC5A740();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for WebRequestError(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 1:
      result = swift_bridgeObjectRelease();
      break;
    case 2:
      v3 = sub_21FC5A98C();
      goto LABEL_5;
    case 3:
      v3 = sub_21FC5A740();
LABEL_5:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *initializeWithCopy for WebRequestError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_6;
    case 2u:
      v7 = sub_21FC5A98C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      goto LABEL_6;
    case 3u:
      v8 = sub_21FC5A740();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
LABEL_6:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithCopy for WebRequestError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_21FC2E768((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_7;
      case 2u:
        v6 = sub_21FC5A98C();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        goto LABEL_7;
      case 3u:
        v7 = sub_21FC5A740();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
LABEL_7:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_21FC2E768(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WebRequestError();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for WebRequestError(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    v8 = sub_21FC5A740();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 2)
  {
    v7 = sub_21FC5A98C();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for WebRequestError(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_21FC2E768((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      v8 = sub_21FC5A740();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 2)
    {
      v7 = sub_21FC5A98C();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_21FC2E944()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_21FC5A98C();
  if (v1 <= 0x3F)
  {
    result = sub_21FC5A740();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t sub_21FC2E9D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v57 = a3;
  v58 = a4;
  v56 = a2;
  sub_21FA2ED54(0, &qword_255542068, (void (*)(uint64_t))type metadata accessor for PBBlobAuth);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v55 = (uint64_t)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v54 = (uint64_t)&v51 - v10;
  v11 = type metadata accessor for PBBlobAuth(0);
  v52 = *(_QWORD *)(v11 - 8);
  v53 = v11;
  v12 = MEMORY[0x24BDAC7A8](v11);
  v51 = (uint64_t)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (uint64_t *)((char *)&v51 - v14);
  sub_21FA2ED54(0, &qword_255542058, (void (*)(uint64_t))type metadata accessor for PBBlobs);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v51 - v20;
  v22 = type metadata accessor for PBBlobs(0);
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v51 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC5AD10();
  v26 = *(int *)(type metadata accessor for PBPushBlobsRequest(0) + 20);
  if (qword_25553D678 != -1)
    swift_once();
  *(_QWORD *)(a5 + v26) = qword_255541DE0;
  v59 = a1;
  sub_21FA2D120(a1, (uint64_t)v25, type metadata accessor for PBBlobs);
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPushBlobsRequest._StorageClass(0);
    swift_allocObject();
    v27 = swift_retain();
    *(_QWORD *)(a5 + v26) = sub_21FAFCA5C(v27);
    swift_release();
  }
  v28 = *(_QWORD *)(a5 + v26);
  sub_21FA2D23C((uint64_t)v25, (uint64_t)v21, type metadata accessor for PBBlobs);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v21, 0, 1, v22);
  sub_21FA87DBC((uint64_t)v21, (uint64_t)v19, &qword_255542058, (void (*)(uint64_t))type metadata accessor for PBBlobs);
  v29 = v28
      + OBJC_IVAR____TtCV19HealthRecordsDaemon18PBPushBlobsRequestP33_10BC46EBE4B3F8F600539A521FA688DE13_StorageClass__blobs;
  swift_beginAccess();
  swift_retain();
  sub_21FA87E08((uint64_t)v19, v29, &qword_255542058, (void (*)(uint64_t))type metadata accessor for PBBlobs);
  swift_endAccess();
  swift_release();
  v30 = sub_21FC5ACF8();
  v32 = v31;
  v33 = v53;
  sub_21FC5AD10();
  v34 = v56;
  *v15 = v56;
  swift_bridgeObjectRetain();
  v36 = v57;
  v35 = v58;
  sub_21FA32314(v57, v58);
  sub_21FA2D770(v30, v32);
  v15[1] = v36;
  v15[2] = v35;
  v15[3] = 0x6977363532414853;
  v15[4] = 0xEF41534443456874;
  v37 = v51;
  sub_21FA2D120((uint64_t)v15, v51, type metadata accessor for PBBlobAuth);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPushBlobsRequest._StorageClass(0);
    swift_allocObject();
    v38 = swift_retain();
    *(_QWORD *)(a5 + v26) = sub_21FAFCA5C(v38);
    swift_release();
  }
  v39 = *(_QWORD *)(a5 + v26);
  v40 = v37;
  v41 = v54;
  sub_21FA2D23C(v40, v54, type metadata accessor for PBBlobAuth);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56))(v41, 0, 1, v33);
  v42 = v55;
  sub_21FA87DBC(v41, v55, &qword_255542068, (void (*)(uint64_t))type metadata accessor for PBBlobAuth);
  v43 = v39
      + OBJC_IVAR____TtCV19HealthRecordsDaemon18PBPushBlobsRequestP33_10BC46EBE4B3F8F600539A521FA688DE13_StorageClass__blobAuth;
  swift_beginAccess();
  swift_retain();
  sub_21FA87E08(v42, v43, &qword_255542068, (void (*)(uint64_t))type metadata accessor for PBBlobAuth);
  swift_endAccess();
  swift_release();
  if (qword_25406B7F8 != -1)
    swift_once();
  v44 = sub_21FC5AFD4();
  __swift_project_value_buffer(v44, (uint64_t)qword_25406D830);
  swift_bridgeObjectRetain();
  sub_21FA32314(v36, v35);
  v45 = sub_21FC5AFC8();
  v46 = sub_21FC5B970();
  v47 = os_log_type_enabled(v45, v46);
  v48 = v59;
  if (v47)
  {
    v49 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v49 = 134217984;
    v60 = *(_QWORD *)(v34 + 16);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    sub_21FA2D770(v36, v35);
    _os_log_impl(&dword_21FA27000, v45, v46, "Generated PBPushBlobsRequest containing number of certs: %ld", v49, 0xCu);
    MEMORY[0x2207D105C](v49, -1, -1);
    swift_bridgeObjectRelease();
    sub_21FA2D770(v36, v35);

  }
  else
  {
    swift_bridgeObjectRelease();
    sub_21FA2D770(v36, v35);
    swift_bridgeObjectRelease();

    sub_21FA2D770(v36, v35);
  }
  sub_21FA326EC(v48, type metadata accessor for PBBlobs);
  return sub_21FA326EC((uint64_t)v15, type metadata accessor for PBBlobAuth);
}

uint64_t sub_21FC2EFA4(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(_QWORD *))
{
  _QWORD v5[2];
  char v6;

  v5[0] = a1;
  v5[1] = a2;
  v6 = a3 & 1;
  return a4(v5);
}

uint64_t sub_21FC2EFDC(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_21FC2F238(a1, a2, a3, (unint64_t *)&qword_25406CB68);
}

uint64_t sub_21FC2EFF0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4;
  uint64_t result;

  *(_QWORD *)(swift_allocObject() + 16) = a1;
  sub_21FA97BB8();
  swift_allocObject();
  v4 = a1;
  result = sub_21FC5B25C();
  *a2 = result;
  return result;
}

void sub_21FC2F068(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[6];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_21FA5F648;
  *(_QWORD *)(v7 + 24) = v6;
  v9[4] = sub_21FC2F21C;
  v9[5] = v7;
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 1107296256;
  v9[2] = sub_21FC2F224;
  v9[3] = &block_descriptor_23;
  v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(a3, sel_fetchAllAccountsWithCompletion_, v8);
  _Block_release(v8);
}

uint64_t sub_21FC2F14C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_21FC2F170(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_21FC2F068(a1, a2, *(void **)(v2 + 16));
}

void sub_21FC2F178(void *a1, id a2, void (*a3)(id, BOOL))
{
  id v5;
  uint64_t v7;
  id v8;

  v5 = a1;
  if (!a1)
  {
    v5 = a2;
    if (!a2)
    {
      sub_21FA720B8();
      v5 = (id)swift_allocError();
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_BYTE *)(v7 + 16) = 2;
    }
    v8 = a2;
  }
  swift_bridgeObjectRetain();
  a3(v5, a1 == 0);
  sub_21FAC6A4C(v5, a1 == 0);
}

void sub_21FC2F21C(void *a1, void *a2)
{
  uint64_t v2;

  sub_21FC2F178(a1, a2, *(void (**)(id, BOOL))(v2 + 16));
}

uint64_t sub_21FC2F224(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_21FC2F238(a1, a2, a3, (unint64_t *)&qword_25406BA88);
}

uint64_t sub_21FC2F238(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v5 = a2;
  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_21FA5BE58(0, a4);
    v5 = sub_21FC5B7A8();
  }
  swift_retain();
  v7 = a3;
  v6(v5, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

void sub_21FC2F2D4(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  _QWORD v12[6];

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  swift_retain();
  sub_21FA49070(a3);
  sub_21FC5AAF4();
  v9 = (void *)sub_21FC5B79C();
  swift_bridgeObjectRelease();
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = sub_21FA5F648;
  v10[3] = v8;
  v10[4] = a3;
  v12[4] = sub_21FC302B4;
  v12[5] = v10;
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 1107296256;
  v12[2] = sub_21FC2EFDC;
  v12[3] = &block_descriptor_24_0;
  v11 = _Block_copy(v12);
  swift_bridgeObjectRetain();
  swift_release();
  objc_msgSend(a4, sel_refreshAccountConnectionInformationForAccountsWithIdentifiers_completion_, v9, v11);
  _Block_release(v11);

}

void sub_21FC2F40C(unint64_t a1, uint64_t a2, void (*a3)(_QWORD *, _QWORD), uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  BOOL v28;
  uint8_t *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  void (*v41)(_QWORD *, _QWORD);
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  sub_21FC030A4(0);
  v44 = v10;
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v42 = a5;
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      a2 = sub_21FC5BC7C();
      swift_bridgeObjectRelease();
    }
    else
    {
      a2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    v14 = MEMORY[0x24BEE4AF8];
    if (!a2)
    {
LABEL_14:
      if (*(_QWORD *)(v14 + 16))
      {
        sub_21FC30304();
        v22 = sub_21FC5BCA0();
      }
      else
      {
        v22 = MEMORY[0x24BEE4B00];
      }
      v46 = v22;
      v34 = swift_bridgeObjectRetain();
      sub_21FC3039C(v34, 1, &v46);
      swift_bridgeObjectRelease();
      v35 = v46;
      swift_retain();
      v36 = sub_21FC3081C(v42, v35);
      swift_release_n();
      a3(v36, 0);
      swift_bridgeObjectRelease();
      return;
    }
    v46 = MEMORY[0x24BEE4AF8];
    sub_21FC01E68(0, a2 & ~(a2 >> 63), 0);
    if ((a2 & 0x8000000000000000) == 0)
    {
      v43 = a4;
      v41 = a3;
      v15 = 0;
      v14 = v46;
      do
      {
        if ((a1 & 0xC000000000000001) != 0)
          v16 = (id)MEMORY[0x2207D057C](v15, a1);
        else
          v16 = *(id *)(a1 + 8 * v15 + 32);
        v17 = v16;
        v18 = *(int *)(v44 + 48);
        v19 = objc_msgSend(v16, sel_accountIdentifier);
        sub_21FC5AADC();

        *(_QWORD *)&v13[v18] = v17;
        v46 = v14;
        v21 = *(_QWORD *)(v14 + 16);
        v20 = *(_QWORD *)(v14 + 24);
        if (v21 >= v20 >> 1)
        {
          sub_21FC01E68(v20 > 1, v21 + 1, 1);
          v14 = v46;
        }
        ++v15;
        *(_QWORD *)(v14 + 16) = v21 + 1;
        sub_21FC302C0((uint64_t)v13, v14+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v21);
      }
      while (a2 != v15);
      a3 = v41;
      goto LABEL_14;
    }
    __break(1u);
    goto LABEL_27;
  }
  if (qword_25406B7F8 != -1)
LABEL_27:
    swift_once();
  v23 = sub_21FC5AFD4();
  __swift_project_value_buffer(v23, (uint64_t)qword_25406D830);
  v24 = (id)a2;
  v25 = (id)a2;
  v26 = sub_21FC5AFC8();
  v27 = sub_21FC5B97C();
  v28 = os_log_type_enabled(v26, v27);
  v43 = a4;
  if (v28)
  {
    v29 = (uint8_t *)swift_slowAlloc();
    v30 = swift_slowAlloc();
    v45 = a2;
    v46 = v30;
    *(_DWORD *)v29 = 136315138;
    v31 = (id)a2;
    sub_21FA2D1A0(0, &qword_25406BB60, (uint64_t (*)(uint64_t))sub_21FA2CDB4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v32 = sub_21FC5B64C();
    v45 = sub_21FABDCF8(v32, v33, &v46);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_21FA27000, v26, v27, "Could not refresh account connection info for Accounts. Error: %s", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v30, -1, -1);
    MEMORY[0x2207D105C](v29, -1, -1);
  }
  else
  {

  }
  v37 = (_QWORD *)a2;
  if (!a2)
  {
    sub_21FA720B8();
    v37 = (_QWORD *)swift_allocError();
    *(_QWORD *)v38 = 0;
    *(_QWORD *)(v38 + 8) = 0;
    *(_BYTE *)(v38 + 16) = 2;
  }
  v39 = (id)a2;
  a3(v37, 1);
  sub_21FAC6A4C(v37, 1);
}

void sub_21FC2F880(id *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  unint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t);
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint8_t *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;

  v7 = sub_21FC5AAF4();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v34 - v12;
  v14 = *a1;
  v15 = objc_msgSend(*a1, sel_identifier);
  sub_21FC5AADC();

  if (*(_QWORD *)(a2 + 16) && (v16 = sub_21FA73E18((uint64_t)v13), (v17 & 1) != 0))
  {
    v18 = *(void (**)(char *, uint64_t))(v8 + 8);
    v19 = *(id *)(*(_QWORD *)(a2 + 56) + 8 * v16);
    v18(v13, v7);
    v20 = objc_msgSend(v19, sel_authorization);

    if (v20)
    {
      *a3 = v14;
      a3[1] = v20;
      v21 = v14;
      return;
    }
  }
  else
  {
    v18 = *(void (**)(char *, uint64_t))(v8 + 8);
    v18(v13, v7);
  }
  v37 = a3;
  if (qword_25406B7F8 != -1)
    swift_once();
  v22 = sub_21FC5AFD4();
  __swift_project_value_buffer(v22, (uint64_t)qword_25406D830);
  v23 = v14;
  v24 = sub_21FC5AFC8();
  v25 = sub_21FC5B97C();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc();
    v34[0] = v18;
    v27 = (uint8_t *)v26;
    v35 = swift_slowAlloc();
    v39 = v35;
    v36 = v3;
    *(_DWORD *)v27 = 136315138;
    v34[1] = v27 + 4;
    v28 = objc_msgSend(v23, sel_identifier);
    sub_21FC5AADC();

    sub_21FA822D0((unint64_t *)&qword_25553F0F0, MEMORY[0x24BDCEAB8]);
    v29 = sub_21FC5BDCC();
    v31 = v30;
    ((void (*)(char *, uint64_t))v34[0])(v11, v7);
    v38 = sub_21FABDCF8(v29, v31, &v39);
    sub_21FC5BAC0();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v24, v25, "Could not refresh connection info. Account: %s", v27, 0xCu);
    v32 = v35;
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v32, -1, -1);
    MEMORY[0x2207D105C](v27, -1, -1);

  }
  else
  {

  }
  v33 = v37;
  *v37 = 0;
  v33[1] = 0;
}

void sub_21FC2FBA0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(unint64_t, uint64_t, uint64_t);
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  _QWORD aBlock[6];

  v18 = a2;
  v19 = a3;
  v7 = sub_21FC5AAF4();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
  v9 = *(_QWORD *)(v7 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v7);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  sub_21FA2D1A0(0, &qword_25553ECD0, v8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v12 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_21FC5EE30;
  v14 = *(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 16);
  v14(v13 + v12, a4, v7);
  swift_retain();
  v18 = sub_21FC5B79C();
  swift_bridgeObjectRelease();
  v14((unint64_t)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a4, v7);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = sub_21FA71F40;
  *(_QWORD *)(v15 + 24) = v11;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v15 + v12, (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  aBlock[4] = sub_21FC30214;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_21FC2EFDC;
  aBlock[3] = &block_descriptor_15;
  v16 = _Block_copy(aBlock);
  swift_release();
  v17 = (void *)v18;
  objc_msgSend(v19, sel_refreshAccountConnectionInformationForAccountsWithIdentifiers_completion_, v18, v16);
  _Block_release(v16);

}

void sub_21FC2FD84(unint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;

  v10 = sub_21FC5AAF4();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    goto LABEL_12;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    if (sub_21FC5BC7C())
      goto LABEL_4;
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v14)
    goto LABEL_11;
LABEL_4:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v15 = (id)MEMORY[0x2207D057C](0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v15 = *(id *)(a1 + 32);
  }
  v16 = v15;
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(v16, sel_authorization);

  if (v17)
  {
    v18 = objc_msgSend(v17, sel_accessToken);

    if (v18)
    {
      v19 = sub_21FC5B604();
      v21 = v20;

      a3(v19, v21, 0);
      swift_bridgeObjectRelease();
      return;
    }
  }
LABEL_12:
  v38[1] = a4;
  if (qword_25406B7F8 != -1)
    swift_once();
  v22 = sub_21FC5AFD4();
  __swift_project_value_buffer(v22, (uint64_t)qword_25406D830);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a5, v10);
  v23 = a2;
  v24 = a2;
  v25 = sub_21FC5AFC8();
  v26 = sub_21FC5B994();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = swift_slowAlloc();
    v28 = swift_slowAlloc();
    v38[0] = a3;
    v29 = v28;
    v40 = v28;
    *(_DWORD *)v27 = 136315394;
    sub_21FA822D0((unint64_t *)&qword_25553F0F0, MEMORY[0x24BDCEAB8]);
    v30 = sub_21FC5BDCC();
    v39 = sub_21FABDCF8(v30, v31, &v40);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    *(_WORD *)(v27 + 12) = 2080;
    v39 = (uint64_t)a2;
    v32 = a2;
    sub_21FA2D1A0(0, &qword_25406BB60, (uint64_t (*)(uint64_t))sub_21FA2CDB4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v33 = sub_21FC5B64C();
    v39 = sub_21FABDCF8(v33, v34, &v40);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_21FA27000, v25, v26, "Could not refreshAccessToken. Account: %s. Error: %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    v35 = v29;
    a3 = (void (*)(uint64_t, uint64_t, uint64_t))v38[0];
    MEMORY[0x2207D105C](v35, -1, -1);
    MEMORY[0x2207D105C](v27, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);

  }
  sub_21FAD1BE0();
  v36 = (void *)swift_allocError();
  *(_QWORD *)(v37 + 8) = 0;
  *(_QWORD *)(v37 + 16) = 0;
  *(_QWORD *)v37 = 3;
  *(_BYTE *)(v37 + 24) = 3;
  a3((uint64_t)v36, 0, 1);

}

uint64_t sub_21FC301A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_21FC5AAF4();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void sub_21FC30214(unint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_21FC5AAF4() - 8) + 80);
  sub_21FC2FD84(a1, a2, *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), v2 + ((v5 + 32) & ~v5));
}

uint64_t sub_21FC30264()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FC30288()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_21FC302B4(unint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_21FC2F40C(a1, a2, *(void (**)(_QWORD *, _QWORD))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_21FC302C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FC030A4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_21FC30304()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553FBC8)
  {
    sub_21FC5AAF4();
    sub_21FA5BE58(255, (unint64_t *)&qword_25406CB68);
    sub_21FA822D0((unint64_t *)&qword_25406AAF0, MEMORY[0x24BDCEA88]);
    v0 = sub_21FC5BCAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553FBC8);
  }
}

void sub_21FC3039C(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(unint64_t, char *, uint64_t);
  void *v20;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  void *v30;
  id v31;
  char v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(unint64_t, char *, uint64_t);
  uint64_t v64;
  unint64_t v65;
  id v66;

  v7 = sub_21FC5AAF4();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC030A4(0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  if (!v16)
  {
    swift_bridgeObjectRelease();
    return;
  }
  LODWORD(v59) = a2;
  v56 = v3;
  v17 = *(int *)(v12 + 48);
  v55 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v18 = a1 + v55;
  v61 = *(_QWORD *)(v13 + 72);
  v58 = a1;
  swift_bridgeObjectRetain();
  sub_21FC309D8(v18, (uint64_t)v15);
  v57 = v8;
  v19 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
  v62 = v7;
  v63 = v19;
  v19((unint64_t)v10, v15, v7);
  v60 = v17;
  v20 = *(void **)&v15[v17];
  v21 = (_QWORD *)*a3;
  v23 = sub_21FA73E18((uint64_t)v10);
  v24 = v21[2];
  v25 = (v22 & 1) == 0;
  v26 = v24 + v25;
  if (__OFADD__(v24, v25))
    goto LABEL_24;
  v27 = v22;
  if (v21[3] >= v26)
  {
    if ((v59 & 1) != 0)
    {
      if ((v22 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_21FA7AFF4();
      if ((v27 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v34 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    v35 = v34[6];
    v59 = *(_QWORD *)(v57 + 72);
    v36 = v62;
    v63(v35 + v59 * v23, v10, v62);
    *(_QWORD *)(v34[7] + 8 * v23) = v20;
    v37 = v34[2];
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v34[2] = v39;
    v40 = v16 - 1;
    if (v16 == 1)
    {
LABEL_23:
      swift_bridgeObjectRelease_n();
      return;
    }
    v41 = v58 + v61 + v55;
    while (1)
    {
      sub_21FC309D8(v41, (uint64_t)v15);
      v63((unint64_t)v10, v15, v36);
      v20 = *(void **)&v15[v60];
      v42 = (_QWORD *)*a3;
      v44 = sub_21FA73E18((uint64_t)v10);
      v45 = v42[2];
      v46 = (v43 & 1) == 0;
      v47 = v45 + v46;
      if (__OFADD__(v45, v46))
        break;
      v48 = v43;
      if (v42[3] < v47)
      {
        sub_21FA77C4C(v47, 1);
        v49 = sub_21FA73E18((uint64_t)v10);
        if ((v48 & 1) != (v50 & 1))
          goto LABEL_26;
        v44 = v49;
      }
      if ((v48 & 1) != 0)
        goto LABEL_10;
      v51 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v44 >> 6) + 64) |= 1 << v44;
      v36 = v62;
      v63(v51[6] + v59 * v44, v10, v62);
      *(_QWORD *)(v51[7] + 8 * v44) = v20;
      v52 = v51[2];
      v38 = __OFADD__(v52, 1);
      v53 = v52 + 1;
      if (v38)
        goto LABEL_25;
      v51[2] = v53;
      v41 += v61;
      if (!--v40)
        goto LABEL_23;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_21FA77C4C(v26, v59 & 1);
  v28 = sub_21FA73E18((uint64_t)v10);
  if ((v27 & 1) == (v29 & 1))
  {
    v23 = v28;
    if ((v27 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v30 = (void *)swift_allocError();
    swift_willThrow();
    v66 = v30;
    v31 = v30;
    sub_21FA2CDB4();
    v32 = swift_dynamicCast();
    v33 = v62;
    if ((v32 & 1) == 0)
    {

      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v10, v33);
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_27;
  }
LABEL_26:
  sub_21FC5BE20();
  __break(1u);
LABEL_27:
  v64 = 0;
  v65 = 0xE000000000000000;
  sub_21FC5BB74();
  sub_21FC5B6AC();
  sub_21FC5BC4C();
  sub_21FC5B6AC();
  sub_21FC5BC70();
  __break(1u);
}

_QWORD *sub_21FC3081C(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t i;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  _QWORD *v13;
  __int128 v16;
  __int128 v17;
  id v18;

  if (a1 >> 62)
    goto LABEL_19;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; v4 = sub_21FC5BC7C())
  {
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    for (i = 4; ; ++i)
    {
      v7 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x2207D057C](i - 4, a1) : *(id *)(a1 + 8 * i);
      v8 = v7;
      v9 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v18 = v7;
      sub_21FC2F880(&v18, a2, &v17);
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v5;
      }

      if ((_QWORD)v17)
      {
        v16 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = sub_21FA7EB20(0, v5[2] + 1, 1, v5);
        v11 = v5[2];
        v10 = v5[3];
        v12 = v16;
        if (v11 >= v10 >> 1)
        {
          v13 = sub_21FA7EB20((_QWORD *)(v10 > 1), v11 + 1, 1, v5);
          v12 = v16;
          v5 = v13;
        }
        v5[2] = v11 + 1;
        *(_OWORD *)&v5[2 * v11 + 4] = v12;
      }
      if (v9 == v4)
      {
        swift_bridgeObjectRelease();
        return v5;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return (_QWORD *)MEMORY[0x24BEE4AF8];
}

uint64_t sub_21FC309D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FC030A4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FC30A38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t (*v17)(void);
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v26 = a1;
  v25 = sub_21FC5AAAC();
  v1 = *(_QWORD *)(v25 - 8);
  v2 = *(_QWORD *)(v1 + 64);
  MEMORY[0x24BDAC7A8](v25);
  sub_21FAEF3FC();
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC30DA4();
  v9 = *(_QWORD *)(v8 - 8);
  v27 = v8;
  v28 = v9;
  MEMORY[0x24BDAC7A8](v8);
  v24 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_21FC5B9D0();
  sub_21FC30E58(0, &qword_25406B998, &qword_25406AAD0, MEMORY[0x24BDCDDE8], (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
  sub_21FC30D60(0, (unint64_t *)&qword_25406C420);
  sub_21FA99DAC();
  sub_21FC5B2C8();
  swift_release();
  sub_21FA2A08C(&qword_25406C838, (uint64_t (*)(uint64_t))sub_21FAEF3FC, MEMORY[0x24BDB96C0]);
  v11 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v29 = v11;
  v12 = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))((char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v26, v25);
  v13 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(v14 + v13, (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  v15 = v23;
  *(_QWORD *)(v14 + ((v2 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) = v23;
  v16 = v15;
  sub_21FC5B184();
  v17 = MEMORY[0x24BDB9AE0];
  sub_21FC30E58(0, &qword_25406CA20, (unint64_t *)&qword_25406C420, (uint64_t)&type metadata for ClinicalSharingSyncHistory, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FC30ED0((unint64_t *)&qword_25406CA18, &qword_25406CA20, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v17, MEMORY[0x24BDB9AF8]);
  v18 = v24;
  sub_21FC5B34C();
  swift_release();
  swift_release();
  sub_21FA2A08C(&qword_25406C938, (uint64_t (*)(uint64_t))sub_21FC30DA4, MEMORY[0x24BDB98F0]);
  v19 = v27;
  v20 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v19);
  return v20;
}

void sub_21FC30D60(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_21FC5BAA8();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void sub_21FC30DA4()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25406C940)
  {
    v0 = MEMORY[0x24BDB9AE0];
    sub_21FC30E58(255, &qword_25406CA20, (unint64_t *)&qword_25406C420, (uint64_t)&type metadata for ClinicalSharingSyncHistory, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FC30ED0((unint64_t *)&qword_25406CA18, &qword_25406CA20, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    v1 = sub_21FC5B100();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25406C940);
  }
}

void sub_21FC30E58(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    sub_21FC30D60(255, a3);
    v9 = v8;
    v10 = sub_21FA2CDB4();
    v11 = a5(a1, v9, v10, MEMORY[0x24BEE3F20]);
    if (!v12)
      atomic_store(v11, a2);
  }
}

uint64_t sub_21FC30ED0(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FC30E58(255, a2, (unint64_t *)&qword_25406C420, (uint64_t)&type metadata for ClinicalSharingSyncHistory, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FC30F24@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  id v15;
  uint64_t v16;
  uint64_t result;
  _QWORD v18[2];

  v8 = sub_21FC5AAAC();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v8);
  v11 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v8);
  v12 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v11;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v13 + v12, (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  *(_QWORD *)(v13 + ((v10 + v12 + 7) & 0xFFFFFFFFFFFFFFF8)) = a3;
  v14 = MEMORY[0x24BDB9E38];
  sub_21FC30E58(0, &qword_25406CAC8, (unint64_t *)&qword_25406C420, (uint64_t)&type metadata for ClinicalSharingSyncHistory, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
  swift_allocObject();
  swift_bridgeObjectRetain();
  v15 = a3;
  v18[1] = sub_21FC5B25C();
  sub_21FC30ED0(&qword_25406CAC0, &qword_25406CAC8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v14, MEMORY[0x24BDB9E58]);
  v16 = sub_21FC5B280();
  result = swift_release();
  *a4 = v16;
  return result;
}

uint64_t sub_21FC310B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  _QWORD *v26;
  void *v27;
  uint64_t v29;
  id v30;
  uint64_t v31;
  _QWORD aBlock[7];

  v30 = a5;
  aBlock[6] = *MEMORY[0x24BDAC8D0];
  v9 = sub_21FC5AAAC();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject();
  v31 = a1;
  *(_QWORD *)(v13 + 16) = a1;
  *(_QWORD *)(v13 + 24) = a2;
  if (!a3)
  {
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    swift_retain();
    v18(v12, a4, v9);
LABEL_5:
    sub_21FA2D1A0(0, (unint64_t *)&unk_25406AA58, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v20 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_21FC5EE30;
    v18((char *)(v19 + v20), (uint64_t)v12, v9);
    goto LABEL_6;
  }
  swift_retain();
  v14 = sub_21FAB6FE8(a3);
  sub_21FA2D1A0(0, (unint64_t *)&unk_25406AA58, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v15 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_21FC5EE30;
  v17 = v16 + v15;
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v18((char *)v17, a4, v9);
  aBlock[0] = v14;
  sub_21FBDFF08(v16);
  v19 = aBlock[0];
  v18(v12, a4, v9);
  if (!v19)
    goto LABEL_5;
LABEL_6:
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_21FC5A65C();
  swift_allocObject();
  sub_21FC5A650();
  aBlock[0] = v19;
  sub_21FC31D18();
  v21 = sub_21FC5A644();
  v23 = v22;
  swift_release();
  v24 = (void *)sub_21FC5A9D4();
  v25 = (void *)sub_21FC5B5E0();
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = sub_21FA5F86C;
  v26[3] = v13;
  v26[4] = v19;
  aBlock[4] = sub_21FC31D88;
  aBlock[5] = v26;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_21FBB5FDC;
  aBlock[3] = &block_descriptor_24;
  v27 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v30, sel_setData_forKey_completion_, v24, v25, v27);
  _Block_release(v27);

  return sub_21FA2D770(v21, v23);
}

void sub_21FC315C0(char a1, void *a2, void (*a3)(void *, uint64_t), uint64_t a4, void *a5)
{
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;

  if ((a1 & 1) != 0)
  {
    a3(a5, 0);
  }
  else
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v7 = sub_21FC5AFD4();
    __swift_project_value_buffer(v7, (uint64_t)qword_25406D830);
    v8 = a2;
    v9 = a2;
    v10 = sub_21FC5AFC8();
    v11 = sub_21FC5B97C();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v20 = v13;
      *(_DWORD *)v12 = 136315138;
      v14 = a2;
      sub_21FA2D1A0(0, &qword_25406BB60, (uint64_t (*)(uint64_t))sub_21FA2CDB4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v15 = sub_21FC5B64C();
      sub_21FABDCF8(v15, v16, &v20);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_21FA27000, v10, v11, "Could not save ClinicalSharingSyncHistory: %s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v13, -1, -1);
      MEMORY[0x2207D105C](v12, -1, -1);
    }
    else
    {

    }
    v17 = a2;
    if (!a2)
    {
      sub_21FA720B8();
      v17 = (void *)swift_allocError();
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
      *(_BYTE *)(v18 + 16) = 2;
    }
    v19 = a2;
    a3(v17, 1);

  }
}

void sub_21FC3180C(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1[1];
  if (v3 >> 60 == 15)
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v4 = sub_21FC5AFD4();
    __swift_project_value_buffer(v4, (uint64_t)qword_25406D830);
    v5 = sub_21FC5AFC8();
    v6 = sub_21FC5B970();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_21FA27000, v5, v6, "No sync history available to retrieve", v7, 2u);
      MEMORY[0x2207D105C](v7, -1, -1);
    }

    *a2 = 0;
  }
  else
  {
    v8 = *a1;
    sub_21FC5A614();
    swift_allocObject();
    sub_21FA32314(v8, v3);
    sub_21FC5A608();
    sub_21FC31DAC();
    sub_21FC5A5FC();
    sub_21FA3239C(v8, v3);
    swift_release();
    *a2 = v9;
  }
}

uint64_t sub_21FC31B2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_21FC5AAAC();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_21FC31BA0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(sub_21FC5AAAC() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_21FC30F24(a1, v2 + v6, *(void **)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)), a2);
}

uint64_t sub_21FC31C00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_21FC5AAAC();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_21FC31C90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(sub_21FC5AAAC() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_21FC310B8(a1, a2, *(_QWORD *)(v2 + 16), v2 + v6, *(void **)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_21FC31CF4()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t sub_21FC31D18()
{
  unint64_t result;

  result = qword_25406C418;
  if (!qword_25406C418)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC614BC, &type metadata for ClinicalSharingSyncHistory);
    atomic_store(result, (unint64_t *)&qword_25406C418);
  }
  return result;
}

uint64_t sub_21FC31D5C()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_21FC31D88(char a1, void *a2)
{
  uint64_t v2;

  sub_21FC315C0(a1, a2, *(void (**)(void *, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

unint64_t sub_21FC31DAC()
{
  unint64_t result;

  result = qword_25406BC18;
  if (!qword_25406BC18)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC61494, &type metadata for ClinicalSharingSyncHistory);
    atomic_store(result, (unint64_t *)&qword_25406BC18);
  }
  return result;
}

uint64_t PBPayload.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  sub_21FC5AD10();
  v2 = *(int *)(type metadata accessor for PBPayload(0) + 20);
  if (qword_25553DCB0 != -1)
    swift_once();
  *(_QWORD *)(a1 + v2) = qword_25554DCA8;
  return swift_retain();
}

uint64_t type metadata accessor for PBPayload(uint64_t a1)
{
  return sub_21FA44B58(a1, qword_25554DD30);
}

uint64_t PBPayload.plaintext.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  sub_21FA2D1A0(0, &qword_25554CFF8, type metadata accessor for PBPlainText, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v15 - v7;
  v9 = *(int *)(type metadata accessor for PBPayload(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPayload._StorageClass(0);
    swift_allocObject();
    v10 = swift_retain();
    *(_QWORD *)(v1 + v9) = sub_21FC32E14(v10);
    swift_release();
  }
  v11 = *(_QWORD *)(v1 + v9);
  sub_21FC32F84(a1, (uint64_t)v8);
  v12 = type metadata accessor for PBPlainText(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v8, 0, 1, v12);
  sub_21FC32FC8((uint64_t)v8, (uint64_t)v6);
  v13 = v11
      + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__plaintext;
  swift_beginAccess();
  swift_retain();
  sub_21FC33024((uint64_t)v6, v13);
  swift_endAccess();
  return swift_release();
}

uint64_t PBPayload.plaintext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  sub_21FA2D1A0(0, &qword_25554CFF8, type metadata accessor for PBPlainText, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - v4;
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBPayload(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__plaintext;
  swift_beginAccess();
  sub_21FC33080(v6, (uint64_t)v5);
  v7 = type metadata accessor for PBPlainText(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_21FC32F84((uint64_t)v5, a1);
  sub_21FC5AD10();
  v8 = *(int *)(v7 + 20);
  if (qword_25553D5B8 != -1)
    swift_once();
  *(_QWORD *)(a1 + v8) = qword_25553F300;
  swift_retain();
  return sub_21FC330DC((uint64_t)v5);
}

uint64_t PBPayload.signature.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(int *)(type metadata accessor for PBPayload(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPayload._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = sub_21FC32E14(v6);
    swift_release();
  }
  v7 = (uint64_t *)(*(_QWORD *)(v2 + v5)
                 + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__signature);
  swift_beginAccess();
  v8 = *v7;
  v9 = v7[1];
  *v7 = a1;
  v7[1] = a2;
  return sub_21FA2D770(v8, v9);
}

uint64_t sub_21FC321DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  sub_21FA2D1A0(0, &qword_25554CFF8, type metadata accessor for PBPlainText, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - v5;
  v7 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PBPayload(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__plaintext;
  swift_beginAccess();
  sub_21FC33080(v7, (uint64_t)v6);
  v8 = type metadata accessor for PBPlainText(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return sub_21FC32F84((uint64_t)v6, a2);
  sub_21FC5AD10();
  v9 = *(int *)(v8 + 20);
  if (qword_25553D5B8 != -1)
    swift_once();
  *(_QWORD *)(a2 + v9) = qword_25553F300;
  swift_retain();
  return sub_21FC330DC((uint64_t)v6);
}

uint64_t sub_21FC32318(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for PBPlainText(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC33130(a1, (uint64_t)v4);
  return PBPayload.plaintext.setter((uint64_t)v4);
}

void (*PBPayload.plaintext.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_21FA2D1A0(0, &qword_25554CFF8, type metadata accessor for PBPlainText, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for PBPlainText(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PBPayload(0) + 20))
      + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__plaintext;
  swift_beginAccess();
  sub_21FC33080(v10, (uint64_t)v5);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_21FC5AD10();
    v11 = *(int *)(v6 + 20);
    if (qword_25553D5B8 != -1)
      swift_once();
    *(_QWORD *)&v9[v11] = qword_25553F300;
    swift_retain();
    sub_21FC330DC((uint64_t)v5);
  }
  else
  {
    sub_21FC32F84((uint64_t)v5, (uint64_t)v9);
  }
  return sub_21FC324F0;
}

void sub_21FC324F0(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 40);
  v4 = *(void **)(*(_QWORD *)a1 + 48);
  v5 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    sub_21FC33130((uint64_t)v4, (uint64_t)v3);
    PBPayload.plaintext.setter((uint64_t)v3);
    sub_21FA326EC((uint64_t)v4, type metadata accessor for PBPlainText);
  }
  else
  {
    PBPayload.plaintext.setter((uint64_t)v4);
  }
  free(v4);
  free(v3);
  free(v5);
  free(v2);
}

BOOL PBPayload.hasPlaintext.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  sub_21FA2D1A0(0, &qword_25554CFF8, type metadata accessor for PBPlainText, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - v2;
  v4 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PBPayload(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__plaintext;
  swift_beginAccess();
  sub_21FC33080(v4, (uint64_t)v3);
  v5 = type metadata accessor for PBPlainText(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_21FC330DC((uint64_t)v3);
  return v6;
}

Swift::Void __swiftcall PBPayload.clearPlaintext()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_21FA2D1A0(0, &qword_25554CFF8, type metadata accessor for PBPlainText, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v9 - v2;
  v4 = *(int *)(type metadata accessor for PBPayload(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPayload._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(v0 + v4) = sub_21FC32E14(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(v0 + v4);
  v7 = type metadata accessor for PBPlainText(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v3, 1, 1, v7);
  v8 = v6
     + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__plaintext;
  swift_beginAccess();
  swift_retain();
  sub_21FC33024((uint64_t)v3, v8);
  swift_endAccess();
  swift_release();
}

uint64_t PBPayload.signature.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PBPayload(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__signature;
  swift_beginAccess();
  v2 = *(_QWORD *)v1;
  sub_21FA32314(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t sub_21FC327EC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  v3 = (uint64_t *)(*(_QWORD *)(a1 + *(int *)(type metadata accessor for PBPayload(0) + 20))
                 + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__signature);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  *a2 = *v3;
  a2[1] = v5;
  return sub_21FA32314(v4, v5);
}

uint64_t sub_21FC32850(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;

  v3 = *a1;
  v4 = a1[1];
  v5 = *(int *)(type metadata accessor for PBPayload(0) + 20);
  sub_21FA32314(v3, v4);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPayload._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = sub_21FC32E14(v6);
    swift_release();
  }
  v7 = (uint64_t *)(*(_QWORD *)(a2 + v5)
                 + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__signature);
  swift_beginAccess();
  v8 = *v7;
  v9 = v7[1];
  *v7 = v3;
  v7[1] = v4;
  return sub_21FA2D770(v8, v9);
}

void (*PBPayload.signature.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for PBPayload(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = (uint64_t *)(*(_QWORD *)(v1 + v4)
                 + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__signature);
  swift_beginAccess();
  v6 = *v5;
  v7 = v5[1];
  v3[9] = *v5;
  v3[10] = v7;
  sub_21FA32314(v6, v7);
  return sub_21FC3299C;
}

void sub_21FC3299C(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    sub_21FA32314(*(_QWORD *)(*a1 + 72), v4);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBPayload._StorageClass(0);
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = sub_21FC32E14(v7);
      swift_release();
    }
    v8 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96))
                   + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__signature);
    swift_beginAccess();
    v9 = *v8;
    v10 = v8[1];
    *v8 = v3;
    v8[1] = v4;
    sub_21FA2D770(v9, v10);
    v11 = *(_QWORD *)(v2 + 72);
    v12 = *(_QWORD *)(v2 + 80);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v13 = *(int *)(v2 + 96);
      v14 = *(_QWORD *)(v2 + 88);
      type metadata accessor for PBPayload._StorageClass(0);
      swift_allocObject();
      v15 = swift_retain();
      *(_QWORD *)(v14 + v13) = sub_21FC32E14(v15);
      swift_release();
    }
    v16 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96))
                    + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__signature);
    swift_beginAccess();
    v11 = *v16;
    v12 = v16[1];
    *v16 = v3;
    v16[1] = v4;
  }
  sub_21FA2D770(v11, v12);
  free((void *)v2);
}

uint64_t PBPayload.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t PBPayload.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_21FC5AD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*PBPayload.unknownFields.modify())()
{
  return nullsub_1;
}

unint64_t static PBPayload.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t sub_21FC32BB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  char *v12;

  v0 = sub_21FC5AF74();
  __swift_allocate_value_buffer(v0, qword_25554DC90);
  __swift_project_value_buffer(v0, (uint64_t)qword_25554DC90);
  sub_21FA2D1A0(0, (unint64_t *)&qword_25553EAC0, (uint64_t (*)(uint64_t))sub_21FA48EB8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  sub_21FA48EB8();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_21FC5F720;
  v7 = (_QWORD *)(v6 + v5);
  v8 = v6 + v5 + *(int *)(v2 + 48);
  *v7 = 1;
  *(_QWORD *)v8 = "plaintext";
  *(_QWORD *)(v8 + 8) = 9;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = *MEMORY[0x24BE5C318];
  v10 = sub_21FC5AF5C();
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = (char *)v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v7 + v4) = 2;
  *(_QWORD *)v12 = "signature";
  *((_QWORD *)v12 + 1) = 9;
  v12[16] = 2;
  v11();
  return sub_21FC5AF68();
}

uint64_t static PBPayload._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_25553DCA8 != -1)
    swift_once();
  v2 = sub_21FC5AF74();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_25554DC90);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_21FC32D84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;

  type metadata accessor for PBPayload._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__plaintext;
  v2 = type metadata accessor for PBPlainText(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = (uint64_t *)(v0
                 + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__signature);
  result = sub_21FC5ACF8();
  *v3 = result;
  v3[1] = v5;
  qword_25554DCA8 = v0;
  return result;
}

uint64_t type metadata accessor for PBPayload._StorageClass(uint64_t a1)
{
  return sub_21FA44B58(a1, qword_25554DD90);
}

uint64_t sub_21FC32E14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;

  sub_21FA2D1A0(0, &qword_25554CFF8, type metadata accessor for PBPlainText, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v17 - v4;
  v6 = v1
     + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__plaintext;
  v7 = type metadata accessor for PBPlainText(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = (uint64_t *)(v1
                 + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__signature);
  *v8 = sub_21FC5ACF8();
  v8[1] = v9;
  v10 = a1
      + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__plaintext;
  swift_beginAccess();
  sub_21FC33080(v10, (uint64_t)v5);
  swift_beginAccess();
  sub_21FC33024((uint64_t)v5, v6);
  swift_endAccess();
  v11 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__signature);
  swift_beginAccess();
  v13 = *v11;
  v12 = v11[1];
  sub_21FA32314(v13, v12);
  swift_release();
  swift_beginAccess();
  v14 = *v8;
  v15 = v8[1];
  *v8 = v13;
  v8[1] = v12;
  sub_21FA2D770(v14, v15);
  return v1;
}

uint64_t sub_21FC32F84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PBPlainText(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FC32FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FA2D1A0(0, &qword_25554CFF8, type metadata accessor for PBPlainText, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FC33024(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FA2D1A0(0, &qword_25554CFF8, type metadata accessor for PBPlainText, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FC33080(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FA2D1A0(0, &qword_25554CFF8, type metadata accessor for PBPlainText, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FC330DC(uint64_t a1)
{
  uint64_t v2;

  sub_21FA2D1A0(0, &qword_25554CFF8, type metadata accessor for PBPlainText, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21FC33130(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PBPlainText(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FC33174()
{
  uint64_t v0;

  sub_21FC330DC(v0 + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__plaintext);
  sub_21FA2D770(*(_QWORD *)(v0+ OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__signature), *(_QWORD *)(v0+ OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__signature+ 8));
  return swift_deallocClassInstance();
}

uint64_t PBPayload.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(int *)(type metadata accessor for PBPayload(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPayload._StorageClass(0);
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = sub_21FC32E14(v2);
    swift_release();
  }
  swift_retain();
  sub_21FC33280();
  return swift_release();
}

uint64_t sub_21FC33280()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_21FC5AD88();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 2)
        break;
      if (result == 1)
      {
        swift_beginAccess();
        type metadata accessor for PBPlainText(0);
        sub_21FA2A08C(&qword_25553F328, type metadata accessor for PBPlainText, (uint64_t)&protocol conformance descriptor for PBPlainText);
        v4 = v3;
        sub_21FC5AE60();
        goto LABEL_5;
      }
LABEL_6:
      result = sub_21FC5AD88();
    }
    swift_beginAccess();
    v4 = v3;
    sub_21FC5ADF4();
LABEL_5:
    v3 = v4;
    swift_endAccess();
    goto LABEL_6;
  }
  return result;
}

uint64_t PBPayload.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for PBPayload(0);
  v7 = swift_retain();
  sub_21FC3345C(v7, a1, a2, a3);
  result = swift_release();
  if (!v3)
    return sub_21FC5AD04();
  return result;
}

uint64_t sub_21FC3345C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _BYTE v16[24];
  uint64_t v17;

  v17 = a4;
  sub_21FA2D1A0(0, &qword_25554CFF8, type metadata accessor for PBPlainText, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v16[-v7];
  v9 = type metadata accessor for PBPlainText(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = &v16[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = a1
      + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__plaintext;
  swift_beginAccess();
  sub_21FC33080(v13, (uint64_t)v8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_21FC330DC((uint64_t)v8);
    goto LABEL_4;
  }
  sub_21FC32F84((uint64_t)v8, (uint64_t)v12);
  sub_21FA2A08C(&qword_25553F328, type metadata accessor for PBPlainText, (uint64_t)&protocol conformance descriptor for PBPlainText);
  sub_21FC5AF50();
  result = sub_21FA326EC((uint64_t)v12, type metadata accessor for PBPlainText);
  if (!v4)
  {
LABEL_4:
    v15 = a1
        + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__signature;
    swift_beginAccess();
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_21FC33698(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t, uint64_t, uint64_t);
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  uint64_t v35;
  uint64_t v36;

  v4 = type metadata accessor for PBPlainText(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v36 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC34038();
  v8 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D1A0(0, &qword_25554CFF8, type metadata accessor for PBPlainText, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v35 - v15;
  v17 = a1
      + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__plaintext;
  swift_beginAccess();
  sub_21FC33080(v17, (uint64_t)v16);
  v18 = a2;
  v19 = a2
      + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__plaintext;
  swift_beginAccess();
  v20 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_21FC33080((uint64_t)v16, (uint64_t)v10);
  sub_21FC33080(v19, v20);
  v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v21((uint64_t)v10, 1, v4) != 1)
  {
    sub_21FC33080((uint64_t)v10, (uint64_t)v14);
    if (v21(v20, 1, v4) != 1)
    {
      v24 = v36;
      sub_21FC32F84(v20, v36);
      v23 = a1;
      swift_retain();
      swift_retain();
      v25 = static PBPlainText.== infix(_:_:)((uint64_t)v14, v24);
      sub_21FA326EC(v24, type metadata accessor for PBPlainText);
      sub_21FC330DC((uint64_t)v16);
      sub_21FA326EC((uint64_t)v14, type metadata accessor for PBPlainText);
      sub_21FC330DC((uint64_t)v10);
      if ((v25 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      swift_release();
      swift_release();
      v33 = 0;
      return v33 & 1;
    }
    swift_retain();
    swift_retain();
    sub_21FC330DC((uint64_t)v16);
    sub_21FA326EC((uint64_t)v14, type metadata accessor for PBPlainText);
LABEL_6:
    sub_21FA326EC((uint64_t)v10, (uint64_t (*)(_QWORD))sub_21FC34038);
    goto LABEL_9;
  }
  swift_retain();
  swift_retain();
  sub_21FC330DC((uint64_t)v16);
  v22 = v21(v20, 1, v4);
  v23 = a1;
  if (v22 != 1)
    goto LABEL_6;
  sub_21FC330DC((uint64_t)v10);
LABEL_8:
  v26 = (uint64_t *)(v23
                  + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__signature);
  swift_beginAccess();
  v27 = *v26;
  v28 = v26[1];
  v29 = (uint64_t *)(v18
                  + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBPayloadP33_573E1C6FBD718883057A9C9269C9449613_StorageClass__signature);
  swift_beginAccess();
  v30 = *v29;
  v31 = v29[1];
  sub_21FA32314(v27, v28);
  sub_21FA32314(v30, v31);
  sub_21FB13260(v27, v28);
  v33 = v32;
  swift_release();
  swift_release();
  sub_21FA2D770(v30, v31);
  sub_21FA2D770(v27, v28);
  return v33 & 1;
}

uint64_t PBPayload.hashValue.getter()
{
  sub_21FC5BE8C();
  type metadata accessor for PBPayload(0);
  sub_21FA2A08C(&qword_25554DCC0, type metadata accessor for PBPayload, (uint64_t)&protocol conformance descriptor for PBPayload);
  sub_21FC5B598();
  return sub_21FC5BEB0();
}

uint64_t sub_21FC33A7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  sub_21FC5AD10();
  v4 = *(int *)(a1 + 20);
  if (qword_25553DCB0 != -1)
    swift_once();
  *(_QWORD *)(a2 + v4) = qword_25554DCA8;
  return swift_retain();
}

unint64_t sub_21FC33AD8()
{
  return 0xD000000000000022;
}

uint64_t sub_21FC33AF4()
{
  return PBPayload.decodeMessage<A>(decoder:)();
}

uint64_t sub_21FC33B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PBPayload.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_21FC33B1C()
{
  sub_21FA2A08C(&qword_25554DE58, type metadata accessor for PBPayload, (uint64_t)&protocol conformance descriptor for PBPayload);
  return sub_21FC5AD70();
}

uint64_t sub_21FC33B6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_25553DCA8 != -1)
    swift_once();
  v2 = sub_21FC5AF74();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_25554DC90);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_21FC33BDC()
{
  sub_21FA2A08C(&qword_25554D008, type metadata accessor for PBPayload, (uint64_t)&protocol conformance descriptor for PBPayload);
  return sub_21FC5AE9C();
}

uint64_t sub_21FC33C1C()
{
  sub_21FA2A08C(&qword_25554D008, type metadata accessor for PBPayload, (uint64_t)&protocol conformance descriptor for PBPayload);
  return sub_21FC5AEA8();
}

uint64_t _s19HealthRecordsDaemon9PBPayloadV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = sub_21FC5AD1C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  v11 = *(int *)(type metadata accessor for PBPayload(0) + 20);
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a2 + v11);
  if (v12 == v13
    || (swift_retain(), swift_retain(), v14 = sub_21FC33698(v12, v13), swift_release(), swift_release(), (v14 & 1) != 0))
  {
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    sub_21FA2A08C(&qword_25553EAB8, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = sub_21FC5B5D4();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_21FC33DD8()
{
  return sub_21FA2A08C(&qword_25554DCC8, type metadata accessor for PBPayload, (uint64_t)&protocol conformance descriptor for PBPayload);
}

uint64_t sub_21FC33E04()
{
  return sub_21FA2A08C(&qword_25554D008, type metadata accessor for PBPayload, (uint64_t)&protocol conformance descriptor for PBPayload);
}

uint64_t sub_21FC33E30()
{
  return sub_21FA2A08C(&qword_25554DCC0, type metadata accessor for PBPayload, (uint64_t)&protocol conformance descriptor for PBPayload);
}

uint64_t sub_21FC33E5C()
{
  return sub_21FA2A08C(&qword_25554DCD0, type metadata accessor for PBPayload, (uint64_t)&protocol conformance descriptor for PBPayload);
}

uint64_t getEnumTagSinglePayload for PBPayload()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FC33EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_21FC5AD1C();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for PBPayload()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FC33F2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_21FC5AD1C();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_21FC33FA4()
{
  return type metadata accessor for PBPayload._StorageClass(0);
}

void sub_21FC33FAC()
{
  unint64_t v0;

  sub_21FA2D1A0(319, &qword_25554CFF8, type metadata accessor for PBPlainText, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void sub_21FC34038()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25554DE60)
  {
    sub_21FA2D1A0(255, &qword_25554CFF8, type metadata accessor for PBPlainText, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25554DE60);
  }
}

void sub_21FC340B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14[3];

  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v14[-1] - v2;
  sub_21FC5BA84();
  v4 = sub_21FC5AAAC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0 + OBJC_IVAR____TtC19HealthRecordsDaemonP33_BED11DFC9D090ABA600C4282F599AD2323ClinicalSharingDAIState_startTime;
  swift_beginAccess();
  sub_21FAD4734((uint64_t)v3, v5);
  swift_endAccess();
  sub_21FC5BA90();
  if (qword_25406B7F8 != -1)
    swift_once();
  v6 = sub_21FC5AFD4();
  __swift_project_value_buffer(v6, (uint64_t)qword_25406D830);
  v7 = sub_21FC5AFC8();
  v8 = sub_21FC5B970();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v14[0] = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = sub_21FC5BF28();
    v13 = sub_21FABDCF8(v11, v12, v14);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v7, v8, "%s finish() startTime is set to nil", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v10, -1, -1);
    MEMORY[0x2207D105C](v9, -1, -1);
  }

}

uint64_t sub_21FC342D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint8_t *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = v1;
  v34 = a1;
  sub_21FA2D1A0(0, (unint64_t *)&qword_25553F0D8, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDB9DE0]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v29 - v6;
  sub_21FAD44E0();
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_25406B7F8 != -1)
    swift_once();
  v13 = sub_21FC5AFD4();
  __swift_project_value_buffer(v13, (uint64_t)qword_25406D830);
  swift_retain();
  v14 = sub_21FC5AFC8();
  v15 = sub_21FC5B970();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc();
    v32 = v5;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc();
    v30 = v7;
    v19 = v18;
    v36 = v18;
    v31 = v12;
    *(_DWORD *)v17 = 136315138;
    v29 = v17 + 4;
    v20 = v10;
    v21 = v9;
    v33 = v4;
    v22 = *(_QWORD *)(v2 + 16);
    v23 = *(_QWORD *)(v2 + 24);
    swift_bridgeObjectRetain();
    v24 = v22;
    v9 = v21;
    v10 = v20;
    v35 = sub_21FABDCF8(v24, v23, &v36);
    v12 = v31;
    sub_21FC5BAC0();
    swift_release();
    v4 = v33;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v14, v15, "%s DAI is disabled (HK_ENABLE_OSLO_DAI=0), will not make DAI DocRef.", v17, 0xCu);
    swift_arrayDestroy();
    v25 = v19;
    v7 = v30;
    MEMORY[0x2207D105C](v25, -1, -1);
    v26 = v17;
    v5 = v32;
    MEMORY[0x2207D105C](v26, -1, -1);

  }
  else
  {

    swift_release();
  }
  v36 = v34;
  type metadata accessor for ClinicalSharingSyncContext();
  swift_retain();
  sub_21FC5B22C();
  sub_21FA2CDB4();
  sub_21FC5B208();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_21FC3476C();
  v27 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v27;
}

uint64_t sub_21FC345C0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);

  swift_bridgeObjectRelease();
  swift_release();
  sub_21FA97DF0(*(_QWORD *)(v0 + 112));
  sub_21FA97DF0(*(_QWORD *)(v0 + 128));
  sub_21FA97DF0(*(_QWORD *)(v0 + 144));
  return v0;
}

uint64_t sub_21FC34624()
{
  sub_21FC345C0();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ClinicalSharingDAIManager()
{
  return objc_opt_self();
}

uint64_t sub_21FC34664()
{
  uint64_t v0;

  sub_21FA71828(v0 + OBJC_IVAR____TtC19HealthRecordsDaemonP33_BED11DFC9D090ABA600C4282F599AD2323ClinicalSharingDAIState_startTime);
  return swift_deallocClassInstance();
}

uint64_t sub_21FC34694()
{
  return type metadata accessor for ClinicalSharingDAIState();
}

uint64_t type metadata accessor for ClinicalSharingDAIState()
{
  uint64_t result;

  result = qword_25406C140;
  if (!qword_25406C140)
    return swift_getSingletonMetadata();
  return result;
}

void sub_21FC346D8()
{
  unint64_t v0;

  sub_21FA2D1A0(319, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

unint64_t sub_21FC3476C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25553F0E8;
  if (!qword_25553F0E8)
  {
    sub_21FAD44E0();
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDBA1D0], v1);
    atomic_store(result, (unint64_t *)&qword_25553F0E8);
  }
  return result;
}

uint64_t PBDataType.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

unint64_t PBGranularity.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 7;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

unint64_t sub_21FC347D8@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return PBGranularity.init(rawValue:)(*a1, a2);
}

uint64_t sub_21FC347E0()
{
  sub_21FB8EF7C();
  return sub_21FC5AD7C();
}

void sub_21FC34818()
{
  qword_25554DE68 = (uint64_t)&unk_24E481BC0;
}

uint64_t static PBGranularity.allCases.getter()
{
  return sub_21FAFC660(&qword_25553DCB8);
}

uint64_t static PBGranularity.allCases.setter(uint64_t a1)
{
  return sub_21FAFC6D4(a1, &qword_25553DCB8, &qword_25554DE68);
}

uint64_t (*static PBGranularity.allCases.modify())()
{
  if (qword_25553DCB8 != -1)
    swift_once();
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_21FC348D0@<X0>(_QWORD *a1@<X8>)
{
  return sub_21FAFC7C0(&qword_25553DCB8, &qword_25554DE68, a1);
}

void PBDataType.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

unint64_t PBDataType.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 0x85;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

unint64_t sub_21FC3491C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return PBDataType.init(rawValue:)(*a1, a2);
}

uint64_t sub_21FC34924@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = PBDataType.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_21FC34948()
{
  sub_21FA48F1C();
  return sub_21FC5AD7C();
}

BOOL sub_21FC34980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FC354B4(a1, a2, a3, a4, PBDataType.rawValue.getter);
}

void sub_21FC3498C()
{
  qword_25554DE70 = (uint64_t)&unk_24E481C50;
}

uint64_t static PBDataType.allCases.getter()
{
  return sub_21FAFC660(&qword_25553DCC0);
}

uint64_t static PBDataType.allCases.setter(uint64_t a1)
{
  return sub_21FAFC6D4(a1, &qword_25553DCC0, &qword_25554DE70);
}

uint64_t (*static PBDataType.allCases.modify())()
{
  if (qword_25553DCC0 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_21FC34A44@<X0>(_QWORD *a1@<X8>)
{
  return sub_21FAFC7C0(&qword_25553DCC0, &qword_25554DE70, a1);
}

unint64_t PBGlucoseMealTime.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_21FC34A78()
{
  sub_21FB8EFC0();
  return sub_21FC5AD7C();
}

void sub_21FC34AB0()
{
  qword_25554DE78 = (uint64_t)&unk_24E4824C0;
}

uint64_t static PBGlucoseMealTime.allCases.getter()
{
  return sub_21FAFC660(&qword_25553DCC8);
}

uint64_t static PBGlucoseMealTime.allCases.setter(uint64_t a1)
{
  return sub_21FAFC6D4(a1, &qword_25553DCC8, &qword_25554DE78);
}

uint64_t (*static PBGlucoseMealTime.allCases.modify())()
{
  if (qword_25553DCC8 != -1)
    swift_once();
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_21FC34B68@<X0>(_QWORD *a1@<X8>)
{
  return sub_21FAFC7C0(&qword_25553DCC8, &qword_25554DE78, a1);
}

unint64_t PBSleepAnalysis.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 4;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

unint64_t sub_21FC34BA0@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return PBSleepAnalysis.init(rawValue:)(*a1, a2);
}

uint64_t sub_21FC34BA8()
{
  sub_21FB9E520();
  return sub_21FC5AD7C();
}

void sub_21FC34BE0()
{
  qword_25554DE80 = (uint64_t)&unk_24E482510;
}

uint64_t static PBSleepAnalysis.allCases.getter()
{
  return sub_21FAFC660(&qword_25553DCD0);
}

uint64_t static PBSleepAnalysis.allCases.setter(uint64_t a1)
{
  return sub_21FAFC6D4(a1, &qword_25553DCD0, &qword_25554DE80);
}

uint64_t (*static PBSleepAnalysis.allCases.modify())()
{
  if (qword_25553DCD0 != -1)
    swift_once();
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_21FC34C98@<X0>(_QWORD *a1@<X8>)
{
  return sub_21FAFC7C0(&qword_25553DCD0, &qword_25554DE80, a1);
}

uint64_t sub_21FC34CB4()
{
  sub_21FB9E454();
  return sub_21FC5AD7C();
}

void sub_21FC34CEC()
{
  qword_25554DE88 = (uint64_t)&unk_24E482570;
}

uint64_t static PBAppleWalkingSteadinessClassification.allCases.getter()
{
  return sub_21FAFC660(&qword_25553DCD8);
}

uint64_t static PBAppleWalkingSteadinessClassification.allCases.setter(uint64_t a1)
{
  return sub_21FAFC6D4(a1, &qword_25553DCD8, &qword_25554DE88);
}

uint64_t (*static PBAppleWalkingSteadinessClassification.allCases.modify())()
{
  if (qword_25553DCD8 != -1)
    swift_once();
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_21FC34DA4@<X0>(_QWORD *a1@<X8>)
{
  return sub_21FAFC7C0(&qword_25553DCD8, &qword_25554DE88, a1);
}

unint64_t PBAppleWalkingSteadinessEvent.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 5;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

unint64_t sub_21FC34DDC@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return PBAppleWalkingSteadinessEvent.init(rawValue:)(*a1, a2);
}

uint64_t sub_21FC34DE4()
{
  sub_21FB9E498();
  return sub_21FC5AD7C();
}

void sub_21FC34E1C()
{
  qword_25554DE90 = (uint64_t)&unk_24E4825D0;
}

uint64_t static PBAppleWalkingSteadinessEvent.allCases.getter()
{
  return sub_21FAFC660(&qword_25553DCE0);
}

uint64_t static PBAppleWalkingSteadinessEvent.allCases.setter(uint64_t a1)
{
  return sub_21FAFC6D4(a1, &qword_25553DCE0, &qword_25554DE90);
}

uint64_t (*static PBAppleWalkingSteadinessEvent.allCases.modify())()
{
  if (qword_25553DCE0 != -1)
    swift_once();
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_21FC34ED4@<X0>(_QWORD *a1@<X8>)
{
  return sub_21FAFC7C0(&qword_25553DCE0, &qword_25554DE90, a1);
}

unint64_t PBCycleFactors.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 0xA;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

unint64_t sub_21FC34F0C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return PBCycleFactors.init(rawValue:)(*a1, a2);
}

uint64_t sub_21FC34F14()
{
  sub_21FB9E4DC();
  return sub_21FC5AD7C();
}

void sub_21FC34F4C()
{
  qword_25554DE98 = (uint64_t)&unk_24E482640;
}

uint64_t static PBCycleFactors.allCases.getter()
{
  return sub_21FAFC660(&qword_25553DCE8);
}

uint64_t static PBCycleFactors.allCases.setter(uint64_t a1)
{
  return sub_21FAFC6D4(a1, &qword_25553DCE8, &qword_25554DE98);
}

uint64_t (*static PBCycleFactors.allCases.modify())()
{
  if (qword_25553DCE8 != -1)
    swift_once();
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_21FC35004@<X0>(_QWORD *a1@<X8>)
{
  return sub_21FAFC7C0(&qword_25553DCE8, &qword_25554DE98, a1);
}

unint64_t PBCycleSymptoms.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 0x17;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

unint64_t sub_21FC3503C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return PBCycleSymptoms.init(rawValue:)(*a1, a2);
}

uint64_t sub_21FC35044()
{
  sub_21FB9E3CC();
  return sub_21FC5AD7C();
}

void sub_21FC3507C()
{
  qword_25554DEA0 = (uint64_t)&unk_24E482700;
}

uint64_t static PBCycleSymptoms.allCases.getter()
{
  return sub_21FAFC660(&qword_25553DCF0);
}

uint64_t static PBCycleSymptoms.allCases.setter(uint64_t a1)
{
  return sub_21FAFC6D4(a1, &qword_25553DCF0, &qword_25554DEA0);
}

uint64_t (*static PBCycleSymptoms.allCases.modify())()
{
  if (qword_25553DCF0 != -1)
    swift_once();
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_21FC35134@<X0>(_QWORD *a1@<X8>)
{
  return sub_21FAFC7C0(&qword_25553DCF0, &qword_25554DEA0, a1);
}

unint64_t PBECGClassification.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  BOOL v3;

  v2 = 7;
  if (result != 100)
    v2 = result;
  if (result < 7)
    v2 = result;
  *(_QWORD *)a2 = v2;
  v3 = result < 7 || result == 100;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t PBECGClassification.rawValue.getter()
{
  uint64_t *v0;
  uint64_t result;

  result = *v0;
  if (*((_BYTE *)v0 + 8) == 1)
    return qword_21FC73C48[result];
  return result;
}

uint64_t sub_21FC351A8()
{
  uint64_t *v0;
  uint64_t result;

  result = *v0;
  if (*((_BYTE *)v0 + 8) == 1)
    return qword_21FC73C48[result];
  return result;
}

unint64_t sub_21FC351C8@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return PBECGClassification.init(rawValue:)(*a1, a2);
}

void sub_21FC351D0(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*((_BYTE *)v1 + 8) == 1)
    v2 = qword_21FC73C48[v2];
  *a1 = v2;
}

uint64_t sub_21FC351F4()
{
  sub_21FB8F004();
  return sub_21FC5AD7C();
}

BOOL sub_21FC3522C(uint64_t a1, uint64_t a2)
{
  return sub_21FA2E028(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

void sub_21FC35248()
{
  qword_25554DEA8 = (uint64_t)&unk_24E482890;
}

uint64_t static PBECGClassification.allCases.getter()
{
  return sub_21FAFC660(&qword_25553DCF8);
}

uint64_t static PBECGClassification.allCases.setter(uint64_t a1)
{
  return sub_21FAFC6D4(a1, &qword_25553DCF8, &qword_25554DEA8);
}

uint64_t (*static PBECGClassification.allCases.modify())()
{
  if (qword_25553DCF8 != -1)
    swift_once();
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_21FC35300@<X0>(_QWORD *a1@<X8>)
{
  return sub_21FAFC7C0(&qword_25553DCF8, &qword_25554DEA8, a1);
}

unint64_t PBClinicalType.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 8;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

unint64_t sub_21FC35338@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return PBClinicalType.init(rawValue:)(*a1, a2);
}

uint64_t sub_21FC35340()
{
  sub_21FC3A81C();
  return sub_21FC5AD7C();
}

void sub_21FC35378()
{
  qword_25554DEB0 = (uint64_t)&unk_24E482930;
}

uint64_t static PBClinicalType.allCases.getter()
{
  return sub_21FAFC660(&qword_25553DD00);
}

uint64_t static PBClinicalType.allCases.setter(uint64_t a1)
{
  return sub_21FAFC6D4(a1, &qword_25553DD00, &qword_25554DEB0);
}

uint64_t (*static PBClinicalType.allCases.modify())()
{
  if (qword_25553DD00 != -1)
    swift_once();
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_21FC35430@<X0>(_QWORD *a1@<X8>)
{
  return sub_21FAFC7C0(&qword_25553DD00, &qword_25554DEB0, a1);
}

unint64_t PBActivityType.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 0x51;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

unint64_t sub_21FC35468@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return PBActivityType.init(rawValue:)(*a1, a2);
}

uint64_t sub_21FC35470()
{
  sub_21FB9E410();
  return sub_21FC5AD7C();
}

BOOL sub_21FC354A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FC354B4(a1, a2, a3, a4, (uint64_t (*)(void))PBActivityType.rawValue.getter);
}

BOOL sub_21FC354B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6;

  v6 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))a5)(a1, a2, a3, a4);
  return v6 == a5();
}

void sub_21FC3551C()
{
  qword_25554DEB8 = (uint64_t)&unk_24E4829D0;
}

uint64_t static PBActivityType.allCases.getter()
{
  return sub_21FAFC660(&qword_25553DD08);
}

uint64_t static PBActivityType.allCases.setter(uint64_t a1)
{
  return sub_21FAFC6D4(a1, &qword_25553DD08, &qword_25554DEB8);
}

uint64_t (*static PBActivityType.allCases.modify())()
{
  if (qword_25553DD08 != -1)
    swift_once();
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_21FC355D4@<X0>(_QWORD *a1@<X8>)
{
  return sub_21FAFC7C0(&qword_25553DD08, &qword_25554DEB8, a1);
}

uint64_t sub_21FC355F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;

  v0 = sub_21FC5AF74();
  __swift_allocate_value_buffer(v0, qword_25554DEC0);
  __swift_project_value_buffer(v0, (uint64_t)qword_25554DEC0);
  sub_21FA8AF38();
  sub_21FA48EB8();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_21FC5F3A0;
  v7 = v6 + v5;
  v8 = v6 + v5 + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + v5) = 0;
  *(_QWORD *)v8 = "GRANULARITY_X";
  *(_QWORD *)(v8 + 8) = 13;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = *MEMORY[0x24BE5C318];
  v10 = sub_21FC5AF5C();
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 1;
  *(_QWORD *)v12 = "HOURLY";
  *(_QWORD *)(v12 + 8) = 6;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 2;
  *(_QWORD *)v14 = "DAILY";
  *((_QWORD *)v14 + 1) = 5;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 3;
  *(_QWORD *)v16 = "WEEKLY";
  *((_QWORD *)v16 + 1) = 6;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 4;
  *(_QWORD *)v18 = "MONTHLY";
  *((_QWORD *)v18 + 1) = 7;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 5;
  *(_QWORD *)v20 = "ALL";
  *((_QWORD *)v20 + 1) = 3;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v7 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 6;
  *(_QWORD *)v22 = "QUARTER_HOURLY";
  *((_QWORD *)v22 + 1) = 14;
  v22[16] = 2;
  v11();
  return sub_21FC5AF68();
}

uint64_t static PBGranularity._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA3A338(&qword_25553DD10, (uint64_t)qword_25554DEC0, a1);
}

uint64_t sub_21FC3586C@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA40BC8(&qword_25553DD10, (uint64_t)qword_25554DEC0, a1);
}

uint64_t sub_21FC35888()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  char *v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  _QWORD *v48;
  char *v49;
  _QWORD *v50;
  char *v51;
  _QWORD *v52;
  char *v53;
  _QWORD *v54;
  char *v55;
  _QWORD *v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  _QWORD *v60;
  char *v61;
  _QWORD *v62;
  char *v63;
  _QWORD *v64;
  char *v65;
  _QWORD *v66;
  char *v67;
  _QWORD *v68;
  char *v69;
  uint64_t v70;
  _QWORD *v71;
  char *v72;
  _QWORD *v73;
  char *v74;
  _QWORD *v75;
  char *v76;
  _QWORD *v77;
  char *v78;
  _QWORD *v79;
  char *v80;
  _QWORD *v81;
  char *v82;
  _QWORD *v83;
  char *v84;
  _QWORD *v85;
  char *v86;
  _QWORD *v87;
  char *v88;
  _QWORD *v89;
  char *v90;
  _QWORD *v91;
  char *v92;
  _QWORD *v93;
  char *v94;
  _QWORD *v95;
  char *v96;
  _QWORD *v97;
  char *v98;
  _QWORD *v99;
  char *v100;
  _QWORD *v101;
  char *v102;
  _QWORD *v103;
  char *v104;
  _QWORD *v105;
  char *v106;
  _QWORD *v107;
  char *v108;
  _QWORD *v109;
  char *v110;
  _QWORD *v111;
  char *v112;
  _QWORD *v113;
  char *v114;
  _QWORD *v115;
  char *v116;
  _QWORD *v117;
  char *v118;
  _QWORD *v119;
  char *v120;
  _QWORD *v121;
  char *v122;
  _QWORD *v123;
  char *v124;
  _QWORD *v125;
  char *v126;
  _QWORD *v127;
  char *v128;
  _QWORD *v129;
  char *v130;
  _QWORD *v131;
  char *v132;
  unint64_t v133;
  _QWORD *v134;
  char *v135;
  _QWORD *v136;
  char *v137;
  _QWORD *v138;
  char *v139;
  _QWORD *v140;
  char *v141;
  _QWORD *v142;
  char *v143;
  _QWORD *v144;
  char *v145;
  _QWORD *v146;
  char *v147;
  _QWORD *v148;
  char *v149;
  _QWORD *v150;
  char *v151;
  _QWORD *v152;
  char *v153;
  _QWORD *v154;
  char *v155;
  _QWORD *v156;
  char *v157;
  _QWORD *v158;
  char *v159;
  _QWORD *v160;
  char *v161;
  _QWORD *v162;
  char *v163;
  _QWORD *v164;
  char *v165;
  _QWORD *v166;
  char *v167;
  _QWORD *v168;
  char *v169;
  _QWORD *v170;
  char *v171;
  _QWORD *v172;
  char *v173;
  _QWORD *v174;
  char *v175;
  _QWORD *v176;
  char *v177;
  _QWORD *v178;
  char *v179;
  _QWORD *v180;
  char *v181;
  _QWORD *v182;
  char *v183;
  _QWORD *v184;
  char *v185;
  _QWORD *v186;
  char *v187;
  _QWORD *v188;
  char *v189;
  _QWORD *v190;
  char *v191;
  _QWORD *v192;
  char *v193;
  _QWORD *v194;
  char *v195;
  _QWORD *v196;
  char *v197;
  _QWORD *v198;
  char *v199;
  _QWORD *v200;
  char *v201;
  _QWORD *v202;
  char *v203;
  _QWORD *v204;
  char *v205;
  _QWORD *v206;
  char *v207;
  _QWORD *v208;
  char *v209;
  _QWORD *v210;
  char *v211;
  _QWORD *v212;
  char *v213;
  _QWORD *v214;
  char *v215;
  _QWORD *v216;
  char *v217;
  _QWORD *v218;
  char *v219;
  _QWORD *v220;
  char *v221;
  _QWORD *v222;
  char *v223;
  _QWORD *v224;
  char *v225;
  _QWORD *v226;
  char *v227;
  _QWORD *v228;
  char *v229;
  _QWORD *v230;
  char *v231;
  _QWORD *v232;
  char *v233;
  _QWORD *v234;
  char *v235;
  _QWORD *v236;
  char *v237;
  _QWORD *v238;
  char *v239;
  _QWORD *v240;
  char *v241;
  _QWORD *v242;
  char *v243;
  _QWORD *v244;
  char *v245;
  _QWORD *v246;
  char *v247;
  _QWORD *v248;
  char *v249;
  _QWORD *v250;
  char *v251;
  _QWORD *v252;
  char *v253;
  _QWORD *v254;
  char *v255;
  _QWORD *v256;
  char *v257;
  _QWORD *v258;
  char *v259;
  unint64_t v260;
  _QWORD *v261;
  char *v262;
  _QWORD *v263;
  char *v264;
  _QWORD *v265;
  char *v266;
  _QWORD *v267;
  char *v268;
  uint64_t v270;

  v0 = sub_21FC5AF74();
  __swift_allocate_value_buffer(v0, qword_25554DED8);
  __swift_project_value_buffer(v0, (uint64_t)qword_25554DED8);
  sub_21FA8AF38();
  sub_21FA48EB8();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v270 = swift_allocObject();
  *(_OWORD *)(v270 + 16) = xmmword_21FC72850;
  v6 = v270 + v5;
  v7 = v270 + v5 + *(int *)(v2 + 48);
  *(_QWORD *)(v270 + v5) = 0;
  *(_QWORD *)v7 = "DATA_TYPE_X";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_21FC5AF5C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v270 + v5 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + v4) = 1;
  *(_QWORD *)v11 = "BODY_MASS_INDEX";
  *(_QWORD *)(v11 + 8) = 15;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v270 + v5 + 2 * v4);
  v13 = (char *)v12 + *(int *)(v2 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "BODY_FAT_PERCENTAGE";
  *((_QWORD *)v13 + 1) = 19;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v270 + v5 + 3 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "HEIGHT";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v270 + v5 + 4 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "BODY_MASS";
  *((_QWORD *)v17 + 1) = 9;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v270 + v5 + 5 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "LEAN_BODY_MASS";
  *((_QWORD *)v19 + 1) = 14;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v270 + v5 + 6 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "WAIST_CIRCUMFERENCE";
  *((_QWORD *)v21 + 1) = 19;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v270 + v5 + 7 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "STEP_COUNT";
  *((_QWORD *)v23 + 1) = 10;
  v23[16] = 2;
  v10();
  v24 = v270 + v5 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + 8 * v4) = 8;
  *(_QWORD *)v24 = "DISTANCE_WALKING_RUNNING";
  *(_QWORD *)(v24 + 8) = 24;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v270 + v5 + 9 * v4);
  v26 = (char *)v25 + *(int *)(v2 + 48);
  *v25 = 9;
  *(_QWORD *)v26 = "DISTANCE_CYCLING";
  *((_QWORD *)v26 + 1) = 16;
  v26[16] = 2;
  v10();
  v27 = (_QWORD *)(v270 + v5 + 10 * v4);
  v28 = (char *)v27 + *(int *)(v2 + 48);
  *v27 = 10;
  *(_QWORD *)v28 = "DISTANCE_WHEELCHAIR";
  *((_QWORD *)v28 + 1) = 19;
  v28[16] = 2;
  v10();
  v29 = (_QWORD *)(v270 + v5 + 11 * v4);
  v30 = (char *)v29 + *(int *)(v2 + 48);
  *v29 = 11;
  *(_QWORD *)v30 = "BASAL_ENERGY_BURNED";
  *((_QWORD *)v30 + 1) = 19;
  v30[16] = 2;
  v10();
  v31 = (_QWORD *)(v270 + v5 + 12 * v4);
  v32 = (char *)v31 + *(int *)(v2 + 48);
  *v31 = 12;
  *(_QWORD *)v32 = "ACTIVE_ENERGY_BURNED";
  *((_QWORD *)v32 + 1) = 20;
  v32[16] = 2;
  v10();
  v33 = (_QWORD *)(v270 + v5 + 13 * v4);
  v34 = (char *)v33 + *(int *)(v2 + 48);
  *v33 = 13;
  *(_QWORD *)v34 = "FLIGHTS_CLIMBED";
  *((_QWORD *)v34 + 1) = 15;
  v34[16] = 2;
  v10();
  v35 = (_QWORD *)(v270 + v5 + 14 * v4);
  v36 = (char *)v35 + *(int *)(v2 + 48);
  *v35 = 14;
  *(_QWORD *)v36 = "NIKE_FUEL";
  *((_QWORD *)v36 + 1) = 9;
  v36[16] = 2;
  v10();
  v37 = (_QWORD *)(v270 + v5 + 15 * v4);
  v38 = (char *)v37 + *(int *)(v2 + 48);
  *v37 = 15;
  *(_QWORD *)v38 = "APPLE_EXERCISE_TIME";
  *((_QWORD *)v38 + 1) = 19;
  v38[16] = 2;
  v10();
  v39 = v270 + v5 + 16 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + 16 * v4) = 16;
  *(_QWORD *)v39 = "PUSH_COUNT";
  *(_QWORD *)(v39 + 8) = 10;
  *(_BYTE *)(v39 + 16) = 2;
  v10();
  v40 = (_QWORD *)(v270 + v5 + 17 * v4);
  v41 = (char *)v40 + *(int *)(v2 + 48);
  *v40 = 17;
  *(_QWORD *)v41 = "DISTANCE_SWIMMING";
  *((_QWORD *)v41 + 1) = 17;
  v41[16] = 2;
  v10();
  v42 = (_QWORD *)(v270 + v5 + 18 * v4);
  v43 = (char *)v42 + *(int *)(v2 + 48);
  *v42 = 18;
  *(_QWORD *)v43 = "SWIMMING_STROKE_COUNT";
  *((_QWORD *)v43 + 1) = 21;
  v43[16] = 2;
  v10();
  v44 = (_QWORD *)(v270 + v5 + 19 * v4);
  v45 = (char *)v44 + *(int *)(v2 + 48);
  *v44 = 19;
  *(_QWORD *)v45 = "VO2_MAX";
  *((_QWORD *)v45 + 1) = 7;
  v45[16] = 2;
  v10();
  v46 = (_QWORD *)(v270 + v5 + 20 * v4);
  v47 = (char *)v46 + *(int *)(v2 + 48);
  *v46 = 20;
  *(_QWORD *)v47 = "DISTANCE_DOWNHILL_SNOW_SPORTS";
  *((_QWORD *)v47 + 1) = 29;
  v47[16] = 2;
  v10();
  v48 = (_QWORD *)(v270 + v5 + 21 * v4);
  v49 = (char *)v48 + *(int *)(v2 + 48);
  *v48 = 21;
  *(_QWORD *)v49 = "APPLE_STAND_TIME";
  *((_QWORD *)v49 + 1) = 16;
  v49[16] = 2;
  v10();
  v50 = (_QWORD *)(v270 + v5 + 22 * v4);
  v51 = (char *)v50 + *(int *)(v2 + 48);
  *v50 = 22;
  *(_QWORD *)v51 = "BODY_TEMPERATURE";
  *((_QWORD *)v51 + 1) = 16;
  v51[16] = 2;
  v10();
  v52 = (_QWORD *)(v270 + v5 + 23 * v4);
  v53 = (char *)v52 + *(int *)(v2 + 48);
  *v52 = 23;
  *(_QWORD *)v53 = "BASAL_BODY_TEMPERATURE";
  *((_QWORD *)v53 + 1) = 22;
  v53[16] = 2;
  v10();
  v54 = (_QWORD *)(v270 + v5 + 24 * v4);
  v55 = (char *)v54 + *(int *)(v2 + 48);
  *v54 = 24;
  *(_QWORD *)v55 = "OXYGEN_SATURATION";
  *((_QWORD *)v55 + 1) = 17;
  v55[16] = 2;
  v10();
  v56 = (_QWORD *)(v270 + v5 + 25 * v4);
  v57 = (char *)v56 + *(int *)(v2 + 48);
  *v56 = 25;
  *(_QWORD *)v57 = "PERIPHERAL_PERFUSION_INDEX";
  *((_QWORD *)v57 + 1) = 26;
  v57[16] = 2;
  v10();
  v58 = (_QWORD *)(v270 + v5 + 26 * v4);
  v59 = (char *)v58 + *(int *)(v2 + 48);
  *v58 = 26;
  *(_QWORD *)v59 = "ELECTRODERMAL_ACTIVITY";
  *((_QWORD *)v59 + 1) = 22;
  v59[16] = 2;
  v10();
  v60 = (_QWORD *)(v270 + v5 + 27 * v4);
  v61 = (char *)v60 + *(int *)(v2 + 48);
  *v60 = 27;
  *(_QWORD *)v61 = "BLOOD_PRESSURE_SYSTOLIC";
  *((_QWORD *)v61 + 1) = 23;
  v61[16] = 2;
  v10();
  v62 = (_QWORD *)(v270 + v5 + 28 * v4);
  v63 = (char *)v62 + *(int *)(v2 + 48);
  *v62 = 28;
  *(_QWORD *)v63 = "BLOOD_PRESSURE_DIASTOLIC";
  *((_QWORD *)v63 + 1) = 24;
  v63[16] = 2;
  v10();
  v64 = (_QWORD *)(v270 + v5 + 29 * v4);
  v65 = (char *)v64 + *(int *)(v2 + 48);
  *v64 = 29;
  *(_QWORD *)v65 = "BLOOD_ALCOHOL_CONTENT";
  *((_QWORD *)v65 + 1) = 21;
  v65[16] = 2;
  v10();
  v66 = (_QWORD *)(v270 + v5 + 30 * v4);
  v67 = (char *)v66 + *(int *)(v2 + 48);
  *v66 = 30;
  *(_QWORD *)v67 = "BLOOD_GLUCOSE";
  *((_QWORD *)v67 + 1) = 13;
  v67[16] = 2;
  v10();
  v68 = (_QWORD *)(v270 + v5 + 31 * v4);
  v69 = (char *)v68 + *(int *)(v2 + 48);
  *v68 = 31;
  *(_QWORD *)v69 = "INSULIN_DELIVERY";
  *((_QWORD *)v69 + 1) = 16;
  v69[16] = 2;
  v10();
  v70 = v270 + v5 + 32 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + 32 * v4) = 32;
  *(_QWORD *)v70 = "HEART_RATE";
  *(_QWORD *)(v70 + 8) = 10;
  *(_BYTE *)(v70 + 16) = 2;
  v10();
  v71 = (_QWORD *)(v270 + v5 + 33 * v4);
  v72 = (char *)v71 + *(int *)(v2 + 48);
  *v71 = 33;
  *(_QWORD *)v72 = "RESPIRATORY_RATE";
  *((_QWORD *)v72 + 1) = 16;
  v72[16] = 2;
  v10();
  v73 = (_QWORD *)(v270 + v5 + 34 * v4);
  v74 = (char *)v73 + *(int *)(v2 + 48);
  *v73 = 34;
  *(_QWORD *)v74 = "RESTING_HEART_RATE";
  *((_QWORD *)v74 + 1) = 18;
  v74[16] = 2;
  v10();
  v75 = (_QWORD *)(v270 + v5 + 35 * v4);
  v76 = (char *)v75 + *(int *)(v2 + 48);
  *v75 = 35;
  *(_QWORD *)v76 = "WALKING_HEART_RATE_AVERAGE";
  *((_QWORD *)v76 + 1) = 26;
  v76[16] = 2;
  v10();
  v77 = (_QWORD *)(v270 + v5 + 36 * v4);
  v78 = (char *)v77 + *(int *)(v2 + 48);
  *v77 = 36;
  *(_QWORD *)v78 = "HEART_RATE_VARIABILITY_S_D_N_N";
  *((_QWORD *)v78 + 1) = 30;
  v78[16] = 2;
  v10();
  v79 = (_QWORD *)(v270 + v5 + 37 * v4);
  v80 = (char *)v79 + *(int *)(v2 + 48);
  *v79 = 37;
  *(_QWORD *)v80 = "INHALER_USAGE";
  *((_QWORD *)v80 + 1) = 13;
  v80[16] = 2;
  v10();
  v81 = (_QWORD *)(v270 + v5 + 38 * v4);
  v82 = (char *)v81 + *(int *)(v2 + 48);
  *v81 = 38;
  *(_QWORD *)v82 = "FORCED_VITAL_CAPACITY";
  *((_QWORD *)v82 + 1) = 21;
  v82[16] = 2;
  v10();
  v83 = (_QWORD *)(v270 + v5 + 39 * v4);
  v84 = (char *)v83 + *(int *)(v2 + 48);
  *v83 = 39;
  *(_QWORD *)v84 = "FORCED_EXPIRATORY_VOLUME1";
  *((_QWORD *)v84 + 1) = 25;
  v84[16] = 2;
  v10();
  v85 = (_QWORD *)(v270 + v5 + 40 * v4);
  v86 = (char *)v85 + *(int *)(v2 + 48);
  *v85 = 40;
  *(_QWORD *)v86 = "PEAK_EXPIRATORY_FLOW_RATE";
  *((_QWORD *)v86 + 1) = 25;
  v86[16] = 2;
  v10();
  v87 = (_QWORD *)(v270 + v5 + 41 * v4);
  v88 = (char *)v87 + *(int *)(v2 + 48);
  *v87 = 41;
  *(_QWORD *)v88 = "ENVIRONMENTAL_AUDIO_EXPOSURE";
  *((_QWORD *)v88 + 1) = 28;
  v88[16] = 2;
  v10();
  v89 = (_QWORD *)(v270 + v5 + 42 * v4);
  v90 = (char *)v89 + *(int *)(v2 + 48);
  *v89 = 42;
  *(_QWORD *)v90 = "HEADPHONE_AUDIO_EXPOSURE";
  *((_QWORD *)v90 + 1) = 24;
  v90[16] = 2;
  v10();
  v91 = (_QWORD *)(v270 + v5 + 43 * v4);
  v92 = (char *)v91 + *(int *)(v2 + 48);
  *v91 = 43;
  *(_QWORD *)v92 = "DIETARY_FAT_TOTAL";
  *((_QWORD *)v92 + 1) = 17;
  v92[16] = 2;
  v10();
  v93 = (_QWORD *)(v270 + v5 + 44 * v4);
  v94 = (char *)v93 + *(int *)(v2 + 48);
  *v93 = 44;
  *(_QWORD *)v94 = "DIETARY_FAT_POLYUNSATURATED";
  *((_QWORD *)v94 + 1) = 27;
  v94[16] = 2;
  v10();
  v95 = (_QWORD *)(v270 + v5 + 45 * v4);
  v96 = (char *)v95 + *(int *)(v2 + 48);
  *v95 = 45;
  *(_QWORD *)v96 = "DIETARY_FAT_MONOUNSATURATED";
  *((_QWORD *)v96 + 1) = 27;
  v96[16] = 2;
  v10();
  v97 = (_QWORD *)(v270 + v5 + 46 * v4);
  v98 = (char *)v97 + *(int *)(v2 + 48);
  *v97 = 46;
  *(_QWORD *)v98 = "DIETARY_FAT_SATURATED";
  *((_QWORD *)v98 + 1) = 21;
  v98[16] = 2;
  v10();
  v99 = (_QWORD *)(v270 + v5 + 47 * v4);
  v100 = (char *)v99 + *(int *)(v2 + 48);
  *v99 = 47;
  *(_QWORD *)v100 = "DIETARY_CHOLESTEROL";
  *((_QWORD *)v100 + 1) = 19;
  v100[16] = 2;
  v10();
  v101 = (_QWORD *)(v270 + v5 + 48 * v4);
  v102 = (char *)v101 + *(int *)(v2 + 48);
  *v101 = 48;
  *(_QWORD *)v102 = "DIETARY_SODIUM";
  *((_QWORD *)v102 + 1) = 14;
  v102[16] = 2;
  v10();
  v103 = (_QWORD *)(v270 + v5 + 49 * v4);
  v104 = (char *)v103 + *(int *)(v2 + 48);
  *v103 = 49;
  *(_QWORD *)v104 = "DIETARY_CARBOHYDRATES";
  *((_QWORD *)v104 + 1) = 21;
  v104[16] = 2;
  v10();
  v105 = (_QWORD *)(v270 + v5 + 50 * v4);
  v106 = (char *)v105 + *(int *)(v2 + 48);
  *v105 = 50;
  *(_QWORD *)v106 = "DIETARY_FIBER";
  *((_QWORD *)v106 + 1) = 13;
  v106[16] = 2;
  v10();
  v107 = (_QWORD *)(v270 + v5 + 51 * v4);
  v108 = (char *)v107 + *(int *)(v2 + 48);
  *v107 = 51;
  *(_QWORD *)v108 = "DIETARY_SUGAR";
  *((_QWORD *)v108 + 1) = 13;
  v108[16] = 2;
  v10();
  v109 = (_QWORD *)(v270 + v5 + 52 * v4);
  v110 = (char *)v109 + *(int *)(v2 + 48);
  *v109 = 52;
  *(_QWORD *)v110 = "DIETARY_ENERGY_CONSUMED";
  *((_QWORD *)v110 + 1) = 23;
  v110[16] = 2;
  v10();
  v111 = (_QWORD *)(v270 + v5 + 53 * v4);
  v112 = (char *)v111 + *(int *)(v2 + 48);
  *v111 = 53;
  *(_QWORD *)v112 = "DIETARY_PROTEIN";
  *((_QWORD *)v112 + 1) = 15;
  v112[16] = 2;
  v10();
  v113 = (_QWORD *)(v270 + v5 + 54 * v4);
  v114 = (char *)v113 + *(int *)(v2 + 48);
  *v113 = 54;
  *(_QWORD *)v114 = "DIETARY_VITAMIN_A";
  *((_QWORD *)v114 + 1) = 17;
  v114[16] = 2;
  v10();
  v115 = (_QWORD *)(v270 + v5 + 55 * v4);
  v116 = (char *)v115 + *(int *)(v2 + 48);
  *v115 = 55;
  *(_QWORD *)v116 = "DIETARY_VITAMIN_B6";
  *((_QWORD *)v116 + 1) = 18;
  v116[16] = 2;
  v10();
  v117 = (_QWORD *)(v270 + v5 + 56 * v4);
  v118 = (char *)v117 + *(int *)(v2 + 48);
  *v117 = 56;
  *(_QWORD *)v118 = "DIETARY_VITAMIN_B12";
  *((_QWORD *)v118 + 1) = 19;
  v118[16] = 2;
  v10();
  v119 = (_QWORD *)(v270 + v5 + 57 * v4);
  v120 = (char *)v119 + *(int *)(v2 + 48);
  *v119 = 57;
  *(_QWORD *)v120 = "DIETARY_VITAMIN_C";
  *((_QWORD *)v120 + 1) = 17;
  v120[16] = 2;
  v10();
  v121 = (_QWORD *)(v270 + v5 + 58 * v4);
  v122 = (char *)v121 + *(int *)(v2 + 48);
  *v121 = 58;
  *(_QWORD *)v122 = "DIETARY_VITAMIN_D";
  *((_QWORD *)v122 + 1) = 17;
  v122[16] = 2;
  v10();
  v123 = (_QWORD *)(v270 + v5 + 59 * v4);
  v124 = (char *)v123 + *(int *)(v2 + 48);
  *v123 = 59;
  *(_QWORD *)v124 = "DIETARY_VITAMIN_E";
  *((_QWORD *)v124 + 1) = 17;
  v124[16] = 2;
  v10();
  v125 = (_QWORD *)(v270 + v5 + 60 * v4);
  v126 = (char *)v125 + *(int *)(v2 + 48);
  *v125 = 60;
  *(_QWORD *)v126 = "DIETARY_VITAMIN_K";
  *((_QWORD *)v126 + 1) = 17;
  v126[16] = 2;
  v10();
  v127 = (_QWORD *)(v270 + v5 + 61 * v4);
  v128 = (char *)v127 + *(int *)(v2 + 48);
  *v127 = 61;
  *(_QWORD *)v128 = "DIETARY_CALCIUM";
  *((_QWORD *)v128 + 1) = 15;
  v128[16] = 2;
  v10();
  v129 = (_QWORD *)(v270 + v5 + 62 * v4);
  v130 = (char *)v129 + *(int *)(v2 + 48);
  *v129 = 62;
  *(_QWORD *)v130 = "DIETARY_IRON";
  *((_QWORD *)v130 + 1) = 12;
  v130[16] = 2;
  v10();
  v131 = (_QWORD *)(v270 + v5 + 63 * v4);
  v132 = (char *)v131 + *(int *)(v2 + 48);
  *v131 = 63;
  *(_QWORD *)v132 = "DIETARY_THIAMIN";
  *((_QWORD *)v132 + 1) = 15;
  v132[16] = 2;
  v10();
  v133 = v270 + v5 + (v4 << 6) + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + (v4 << 6)) = 64;
  *(_QWORD *)v133 = "DIETARY_RIBOFLAVIN";
  *(_QWORD *)(v133 + 8) = 18;
  *(_BYTE *)(v133 + 16) = 2;
  v10();
  v134 = (_QWORD *)(v270 + v5 + 65 * v4);
  v135 = (char *)v134 + *(int *)(v2 + 48);
  *v134 = 65;
  *(_QWORD *)v135 = "DIETARY_NIACIN";
  *((_QWORD *)v135 + 1) = 14;
  v135[16] = 2;
  v10();
  v136 = (_QWORD *)(v270 + v5 + 66 * v4);
  v137 = (char *)v136 + *(int *)(v2 + 48);
  *v136 = 66;
  *(_QWORD *)v137 = "DIETARY_FOLATE";
  *((_QWORD *)v137 + 1) = 14;
  v137[16] = 2;
  v10();
  v138 = (_QWORD *)(v270 + v5 + 67 * v4);
  v139 = (char *)v138 + *(int *)(v2 + 48);
  *v138 = 67;
  *(_QWORD *)v139 = "DIETARY_BIOTIN";
  *((_QWORD *)v139 + 1) = 14;
  v139[16] = 2;
  v10();
  v140 = (_QWORD *)(v270 + v5 + 68 * v4);
  v141 = (char *)v140 + *(int *)(v2 + 48);
  *v140 = 68;
  *(_QWORD *)v141 = "DIETARY_PANTOTHENIC_ACID";
  *((_QWORD *)v141 + 1) = 24;
  v141[16] = 2;
  v10();
  v142 = (_QWORD *)(v270 + v5 + 69 * v4);
  v143 = (char *)v142 + *(int *)(v2 + 48);
  *v142 = 69;
  *(_QWORD *)v143 = "DIETARY_PHOSPHORUS";
  *((_QWORD *)v143 + 1) = 18;
  v143[16] = 2;
  v10();
  v144 = (_QWORD *)(v270 + v5 + 70 * v4);
  v145 = (char *)v144 + *(int *)(v2 + 48);
  *v144 = 70;
  *(_QWORD *)v145 = "DIETARY_IODINE";
  *((_QWORD *)v145 + 1) = 14;
  v145[16] = 2;
  v10();
  v146 = (_QWORD *)(v270 + v5 + 71 * v4);
  v147 = (char *)v146 + *(int *)(v2 + 48);
  *v146 = 71;
  *(_QWORD *)v147 = "DIETARY_MAGNESIUM";
  *((_QWORD *)v147 + 1) = 17;
  v147[16] = 2;
  v10();
  v148 = (_QWORD *)(v270 + v5 + 72 * v4);
  v149 = (char *)v148 + *(int *)(v2 + 48);
  *v148 = 72;
  *(_QWORD *)v149 = "DIETARY_ZINC";
  *((_QWORD *)v149 + 1) = 12;
  v149[16] = 2;
  v10();
  v150 = (_QWORD *)(v270 + v5 + 73 * v4);
  v151 = (char *)v150 + *(int *)(v2 + 48);
  *v150 = 73;
  *(_QWORD *)v151 = "DIETARY_SELENIUM";
  *((_QWORD *)v151 + 1) = 16;
  v151[16] = 2;
  v10();
  v152 = (_QWORD *)(v270 + v5 + 74 * v4);
  v153 = (char *)v152 + *(int *)(v2 + 48);
  *v152 = 74;
  *(_QWORD *)v153 = "DIETARY_COPPER";
  *((_QWORD *)v153 + 1) = 14;
  v153[16] = 2;
  v10();
  v154 = (_QWORD *)(v270 + v5 + 75 * v4);
  v155 = (char *)v154 + *(int *)(v2 + 48);
  *v154 = 75;
  *(_QWORD *)v155 = "DIETARY_MANGANESE";
  *((_QWORD *)v155 + 1) = 17;
  v155[16] = 2;
  v10();
  v156 = (_QWORD *)(v270 + v5 + 76 * v4);
  v157 = (char *)v156 + *(int *)(v2 + 48);
  *v156 = 76;
  *(_QWORD *)v157 = "DIETARY_CHROMIUM";
  *((_QWORD *)v157 + 1) = 16;
  v157[16] = 2;
  v10();
  v158 = (_QWORD *)(v270 + v5 + 77 * v4);
  v159 = (char *)v158 + *(int *)(v2 + 48);
  *v158 = 77;
  *(_QWORD *)v159 = "DIETARY_MOLYBDENUM";
  *((_QWORD *)v159 + 1) = 18;
  v159[16] = 2;
  v10();
  v160 = (_QWORD *)(v270 + v5 + 78 * v4);
  v161 = (char *)v160 + *(int *)(v2 + 48);
  *v160 = 78;
  *(_QWORD *)v161 = "DIETARY_CHLORIDE";
  *((_QWORD *)v161 + 1) = 16;
  v161[16] = 2;
  v10();
  v162 = (_QWORD *)(v270 + v5 + 79 * v4);
  v163 = (char *)v162 + *(int *)(v2 + 48);
  *v162 = 79;
  *(_QWORD *)v163 = "DIETARY_POTASSIUM";
  *((_QWORD *)v163 + 1) = 17;
  v163[16] = 2;
  v10();
  v164 = (_QWORD *)(v270 + v5 + 80 * v4);
  v165 = (char *)v164 + *(int *)(v2 + 48);
  *v164 = 80;
  *(_QWORD *)v165 = "DIETARY_CAFFEINE";
  *((_QWORD *)v165 + 1) = 16;
  v165[16] = 2;
  v10();
  v166 = (_QWORD *)(v270 + v5 + 81 * v4);
  v167 = (char *)v166 + *(int *)(v2 + 48);
  *v166 = 81;
  *(_QWORD *)v167 = "DIETARY_WATER";
  *((_QWORD *)v167 + 1) = 13;
  v167[16] = 2;
  v10();
  v168 = (_QWORD *)(v270 + v5 + 82 * v4);
  v169 = (char *)v168 + *(int *)(v2 + 48);
  *v168 = 82;
  *(_QWORD *)v169 = "UV_EXPOSURE";
  *((_QWORD *)v169 + 1) = 11;
  v169[16] = 2;
  v10();
  v170 = (_QWORD *)(v270 + v5 + 83 * v4);
  v171 = (char *)v170 + *(int *)(v2 + 48);
  *v170 = 83;
  *(_QWORD *)v171 = "NUMBER_OF_TIMES_FALLEN";
  *((_QWORD *)v171 + 1) = 22;
  v171[16] = 2;
  v10();
  v172 = (_QWORD *)(v270 + v5 + 84 * v4);
  v173 = (char *)v172 + *(int *)(v2 + 48);
  *v172 = 84;
  *(_QWORD *)v173 = "SLEEP_ANALYSIS";
  *((_QWORD *)v173 + 1) = 14;
  v173[16] = 2;
  v10();
  v174 = (_QWORD *)(v270 + v5 + 85 * v4);
  v175 = (char *)v174 + *(int *)(v2 + 48);
  *v174 = 85;
  *(_QWORD *)v175 = "APPLE_STAND_HOUR";
  *((_QWORD *)v175 + 1) = 16;
  v175[16] = 2;
  v10();
  v176 = (_QWORD *)(v270 + v5 + 86 * v4);
  v177 = (char *)v176 + *(int *)(v2 + 48);
  *v176 = 86;
  *(_QWORD *)v177 = "CERVICAL_MUCUS_QUALITY";
  *((_QWORD *)v177 + 1) = 22;
  v177[16] = 2;
  v10();
  v178 = (_QWORD *)(v270 + v5 + 87 * v4);
  v179 = (char *)v178 + *(int *)(v2 + 48);
  *v178 = 87;
  *(_QWORD *)v179 = "MENSTRUAL_FLOW";
  *((_QWORD *)v179 + 1) = 14;
  v179[16] = 2;
  v10();
  v180 = (_QWORD *)(v270 + v5 + 88 * v4);
  v181 = (char *)v180 + *(int *)(v2 + 48);
  *v180 = 88;
  *(_QWORD *)v181 = "INTERMENSTRUAL_BLEEDING";
  *((_QWORD *)v181 + 1) = 23;
  v181[16] = 2;
  v10();
  v182 = (_QWORD *)(v270 + v5 + 89 * v4);
  v183 = (char *)v182 + *(int *)(v2 + 48);
  *v182 = 89;
  *(_QWORD *)v183 = "OVULATION_TEST_RESULT";
  *((_QWORD *)v183 + 1) = 21;
  v183[16] = 2;
  v10();
  v184 = (_QWORD *)(v270 + v5 + 90 * v4);
  v185 = (char *)v184 + *(int *)(v2 + 48);
  *v184 = 90;
  *(_QWORD *)v185 = "SEXUAL_ACTIVITY";
  *((_QWORD *)v185 + 1) = 15;
  v185[16] = 2;
  v10();
  v186 = (_QWORD *)(v270 + v5 + 91 * v4);
  v187 = (char *)v186 + *(int *)(v2 + 48);
  *v186 = 91;
  *(_QWORD *)v187 = "MINDFUL_SESSION";
  *((_QWORD *)v187 + 1) = 15;
  v187[16] = 2;
  v10();
  v188 = (_QWORD *)(v270 + v5 + 92 * v4);
  v189 = (char *)v188 + *(int *)(v2 + 48);
  *v188 = 92;
  *(_QWORD *)v189 = "HIGH_HEART_RATE_EVENT";
  *((_QWORD *)v189 + 1) = 21;
  v189[16] = 2;
  v10();
  v190 = (_QWORD *)(v270 + v5 + 93 * v4);
  v191 = (char *)v190 + *(int *)(v2 + 48);
  *v190 = 93;
  *(_QWORD *)v191 = "LOW_HEART_RATE_EVENT";
  *((_QWORD *)v191 + 1) = 20;
  v191[16] = 2;
  v10();
  v192 = (_QWORD *)(v270 + v5 + 94 * v4);
  v193 = (char *)v192 + *(int *)(v2 + 48);
  *v192 = 94;
  *(_QWORD *)v193 = "IRREGULAR_HEART_RHYTHM_EVENT";
  *((_QWORD *)v193 + 1) = 28;
  v193[16] = 2;
  v10();
  v194 = (_QWORD *)(v270 + v5 + 95 * v4);
  v195 = (char *)v194 + *(int *)(v2 + 48);
  *v194 = 95;
  *(_QWORD *)v195 = "AUDIO_EXPOSURE_EVENT";
  *((_QWORD *)v195 + 1) = 20;
  v195[16] = 2;
  v10();
  v196 = (_QWORD *)(v270 + v5 + 96 * v4);
  v197 = (char *)v196 + *(int *)(v2 + 48);
  *v196 = 96;
  *(_QWORD *)v197 = "TOOTHBRUSHING_EVENT";
  *((_QWORD *)v197 + 1) = 19;
  v197[16] = 2;
  v10();
  v198 = (_QWORD *)(v270 + v5 + 97 * v4);
  v199 = (char *)v198 + *(int *)(v2 + 48);
  *v198 = 97;
  *(_QWORD *)v199 = "ECG";
  *((_QWORD *)v199 + 1) = 3;
  v199[16] = 2;
  v10();
  v200 = (_QWORD *)(v270 + v5 + 98 * v4);
  v201 = (char *)v200 + *(int *)(v2 + 48);
  *v200 = 98;
  *(_QWORD *)v201 = "WORKOUT";
  *((_QWORD *)v201 + 1) = 7;
  v201[16] = 2;
  v10();
  v202 = (_QWORD *)(v270 + v5 + 99 * v4);
  v203 = (char *)v202 + *(int *)(v2 + 48);
  *v202 = 99;
  *(_QWORD *)v203 = "ALLERGY_TYPE";
  *((_QWORD *)v203 + 1) = 12;
  v203[16] = 2;
  v10();
  v204 = (_QWORD *)(v270 + v5 + 100 * v4);
  v205 = (char *)v204 + *(int *)(v2 + 48);
  *v204 = 100;
  *(_QWORD *)v205 = "CONDITION_TYPE";
  *((_QWORD *)v205 + 1) = 14;
  v205[16] = 2;
  v10();
  v206 = (_QWORD *)(v270 + v5 + 101 * v4);
  v207 = (char *)v206 + *(int *)(v2 + 48);
  *v206 = 101;
  *(_QWORD *)v207 = "IMMUNIZATION_TYPE";
  *((_QWORD *)v207 + 1) = 17;
  v207[16] = 2;
  v10();
  v208 = (_QWORD *)(v270 + v5 + 102 * v4);
  v209 = (char *)v208 + *(int *)(v2 + 48);
  *v208 = 102;
  *(_QWORD *)v209 = "LAB_TYPE";
  *((_QWORD *)v209 + 1) = 8;
  v209[16] = 2;
  v10();
  v210 = (_QWORD *)(v270 + v5 + 103 * v4);
  v211 = (char *)v210 + *(int *)(v2 + 48);
  *v210 = 103;
  *(_QWORD *)v211 = "MEDICATION_TYPE";
  *((_QWORD *)v211 + 1) = 15;
  v211[16] = 2;
  v10();
  v212 = (_QWORD *)(v270 + v5 + 104 * v4);
  v213 = (char *)v212 + *(int *)(v2 + 48);
  *v212 = 104;
  *(_QWORD *)v213 = "PROCEDURE_TYPE";
  *((_QWORD *)v213 + 1) = 14;
  v213[16] = 2;
  v10();
  v214 = (_QWORD *)(v270 + v5 + 105 * v4);
  v215 = (char *)v214 + *(int *)(v2 + 48);
  *v214 = 105;
  *(_QWORD *)v215 = "VITAL_RECORD";
  *((_QWORD *)v215 + 1) = 12;
  v215[16] = 2;
  v10();
  v216 = (_QWORD *)(v270 + v5 + 106 * v4);
  v217 = (char *)v216 + *(int *)(v2 + 48);
  *v216 = 106;
  *(_QWORD *)v217 = "BLOOD_PRESSURE_SYSTOLIC_CLINICAL";
  *((_QWORD *)v217 + 1) = 32;
  v217[16] = 2;
  v10();
  v218 = (_QWORD *)(v270 + v5 + 107 * v4);
  v219 = (char *)v218 + *(int *)(v2 + 48);
  *v218 = 107;
  *(_QWORD *)v219 = "BLOOD_PRESSURE_DIASTOLIC_CLINICAL";
  *((_QWORD *)v219 + 1) = 33;
  v219[16] = 2;
  v10();
  v220 = (_QWORD *)(v270 + v5 + 108 * v4);
  v221 = (char *)v220 + *(int *)(v2 + 48);
  *v220 = 108;
  *(_QWORD *)v221 = "BODY_MASS_CLINICAL";
  *((_QWORD *)v221 + 1) = 18;
  v221[16] = 2;
  v10();
  v222 = (_QWORD *)(v270 + v5 + 109 * v4);
  v223 = (char *)v222 + *(int *)(v2 + 48);
  *v222 = 109;
  *(_QWORD *)v223 = "CYCLE_ANALYSIS";
  *((_QWORD *)v223 + 1) = 14;
  v223[16] = 2;
  v10();
  v224 = (_QWORD *)(v270 + v5 + 110 * v4);
  v225 = (char *)v224 + *(int *)(v2 + 48);
  *v224 = 110;
  *(_QWORD *)v225 = "BODY_MASS_INDEX_CLINICAL";
  *((_QWORD *)v225 + 1) = 24;
  v225[16] = 2;
  v10();
  v226 = (_QWORD *)(v270 + v5 + 111 * v4);
  v227 = (char *)v226 + *(int *)(v2 + 48);
  *v226 = 111;
  *(_QWORD *)v227 = "ACTIVITY_SUMMARY";
  *((_QWORD *)v227 + 1) = 16;
  v227[16] = 2;
  v10();
  v228 = (_QWORD *)(v270 + v5 + 112 * v4);
  v229 = (char *)v228 + *(int *)(v2 + 48);
  *v228 = 112;
  *(_QWORD *)v229 = "PATIENT_META";
  *((_QWORD *)v229 + 1) = 12;
  v229[16] = 2;
  v10();
  v230 = (_QWORD *)(v270 + v5 + 113 * v4);
  v231 = (char *)v230 + *(int *)(v2 + 48);
  *v230 = 113;
  *(_QWORD *)v231 = "SLEEP_SUMMARY";
  *((_QWORD *)v231 + 1) = 13;
  v231[16] = 2;
  v10();
  v232 = (_QWORD *)(v270 + v5 + 114 * v4);
  v233 = (char *)v232 + *(int *)(v2 + 48);
  *v232 = 114;
  *(_QWORD *)v233 = "SLEEP_SERIES";
  *((_QWORD *)v233 + 1) = 12;
  v233[16] = 2;
  v10();
  v234 = (_QWORD *)(v270 + v5 + 115 * v4);
  v235 = (char *)v234 + *(int *)(v2 + 48);
  *v234 = 115;
  *(_QWORD *)v235 = "SLEEP_SCHEDULE";
  *((_QWORD *)v235 + 1) = 14;
  v235[16] = 2;
  v10();
  v236 = (_QWORD *)(v270 + v5 + 116 * v4);
  v237 = (char *)v236 + *(int *)(v2 + 48);
  *v236 = 116;
  *(_QWORD *)v237 = "CYCLE_FACTORS";
  *((_QWORD *)v237 + 1) = 13;
  v237[16] = 2;
  v10();
  v238 = (_QWORD *)(v270 + v5 + 117 * v4);
  v239 = (char *)v238 + *(int *)(v2 + 48);
  *v238 = 117;
  *(_QWORD *)v239 = "WALKING_SPEED";
  *((_QWORD *)v239 + 1) = 13;
  v239[16] = 2;
  v10();
  v240 = (_QWORD *)(v270 + v5 + 118 * v4);
  v241 = (char *)v240 + *(int *)(v2 + 48);
  *v240 = 118;
  *(_QWORD *)v241 = "WALKING_STEP_LENGTH";
  *((_QWORD *)v241 + 1) = 19;
  v241[16] = 2;
  v10();
  v242 = (_QWORD *)(v270 + v5 + 119 * v4);
  v243 = (char *)v242 + *(int *)(v2 + 48);
  *v242 = 119;
  *(_QWORD *)v243 = "WALKING_DOUBLE_SUPPORT_PERCENTAGE";
  *((_QWORD *)v243 + 1) = 33;
  v243[16] = 2;
  v10();
  v244 = (_QWORD *)(v270 + v5 + 120 * v4);
  v245 = (char *)v244 + *(int *)(v2 + 48);
  *v244 = 120;
  *(_QWORD *)v245 = "STAIR_ASCENT_SPEED";
  *((_QWORD *)v245 + 1) = 18;
  v245[16] = 2;
  v10();
  v246 = (_QWORD *)(v270 + v5 + 121 * v4);
  v247 = (char *)v246 + *(int *)(v2 + 48);
  *v246 = 121;
  *(_QWORD *)v247 = "STAIR_DESCENT_SPEED";
  *((_QWORD *)v247 + 1) = 19;
  v247[16] = 2;
  v10();
  v248 = (_QWORD *)(v270 + v5 + 122 * v4);
  v249 = (char *)v248 + *(int *)(v2 + 48);
  *v248 = 122;
  *(_QWORD *)v249 = "SIX_MINUTE_WALK_TEST_DISTANCE";
  *((_QWORD *)v249 + 1) = 29;
  v249[16] = 2;
  v10();
  v250 = (_QWORD *)(v270 + v5 + 123 * v4);
  v251 = (char *)v250 + *(int *)(v2 + 48);
  *v250 = 123;
  *(_QWORD *)v251 = "APPLE_WALKING_STEADINESS";
  *((_QWORD *)v251 + 1) = 24;
  v251[16] = 2;
  v10();
  v252 = (_QWORD *)(v270 + v5 + 124 * v4);
  v253 = (char *)v252 + *(int *)(v2 + 48);
  *v252 = 124;
  *(_QWORD *)v253 = "WALKING_ASYMMETRY_PERCENTAGE";
  *((_QWORD *)v253 + 1) = 28;
  v253[16] = 2;
  v10();
  v254 = (_QWORD *)(v270 + v5 + 125 * v4);
  v255 = (char *)v254 + *(int *)(v2 + 48);
  *v254 = 125;
  *(_QWORD *)v255 = "APPLE_WALKING_STEADINESS_CLASSIFICATION";
  *((_QWORD *)v255 + 1) = 39;
  v255[16] = 2;
  v10();
  v256 = (_QWORD *)(v270 + v5 + 126 * v4);
  v257 = (char *)v256 + *(int *)(v2 + 48);
  *v256 = 126;
  *(_QWORD *)v257 = "APPLE_WALKING_STEADINESS_EVENT";
  *((_QWORD *)v257 + 1) = 30;
  v257[16] = 2;
  v10();
  v258 = (_QWORD *)(v270 + v5 + 127 * v4);
  v259 = (char *)v258 + *(int *)(v2 + 48);
  *v258 = 127;
  *(_QWORD *)v259 = "MEDICATION_TRACKING";
  *((_QWORD *)v259 + 1) = 19;
  v259[16] = 2;
  v10();
  v260 = v270 + v5 + (v4 << 7) + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + (v4 << 7)) = 128;
  *(_QWORD *)v260 = "MEDICATION_TRACKING_DOSE_EVENT";
  *(_QWORD *)(v260 + 8) = 30;
  *(_BYTE *)(v260 + 16) = 2;
  v10();
  v261 = (_QWORD *)(v270 + v5 + 129 * v4);
  v262 = (char *)v261 + *(int *)(v2 + 48);
  *v261 = 129;
  *(_QWORD *)v262 = "MEDICATION_TRACKING_SCHEDULE";
  *((_QWORD *)v262 + 1) = 28;
  v262[16] = 2;
  v10();
  v263 = (_QWORD *)(v270 + v5 + 130 * v4);
  v264 = (char *)v263 + *(int *)(v2 + 48);
  *v263 = 130;
  *(_QWORD *)v264 = "BLOOD_GLUCOSE_HISTOGRAM";
  *((_QWORD *)v264 + 1) = 23;
  v264[16] = 2;
  v10();
  v265 = (_QWORD *)(v270 + v5 + 131 * v4);
  v266 = (char *)v265 + *(int *)(v2 + 48);
  *v265 = 131;
  *(_QWORD *)v266 = "BLOOD_GLUCOSE_LOW_FREQUENCY";
  *((_QWORD *)v266 + 1) = 27;
  v266[16] = 2;
  v10();
  v267 = (_QWORD *)(v270 + v5 + 132 * v4);
  v268 = (char *)v267 + *(int *)(v2 + 48);
  *v267 = 132;
  *(_QWORD *)v268 = "ACTIVE_MEDICATIONS";
  *((_QWORD *)v268 + 1) = 18;
  v268[16] = 2;
  v10();
  return sub_21FC5AF68();
}

uint64_t static PBDataType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA3A338(&qword_25553DD18, (uint64_t)qword_25554DED8, a1);
}

uint64_t sub_21FC37444@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA40BC8(&qword_25553DD18, (uint64_t)qword_25554DED8, a1);
}

uint64_t sub_21FC37460()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  char *v12;
  uint64_t v13;

  v0 = sub_21FC5AF74();
  __swift_allocate_value_buffer(v0, qword_25554DEF0);
  __swift_project_value_buffer(v0, (uint64_t)qword_25554DEF0);
  sub_21FA8AF38();
  sub_21FA48EB8();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_21FC60A70;
  v7 = (_QWORD *)(v6 + v5);
  v8 = v6 + v5 + *(int *)(v2 + 48);
  *v7 = 0;
  *(_QWORD *)v8 = "GLUCOSE_MEAL_TIME_NOT_SET";
  *(_QWORD *)(v8 + 8) = 25;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = *MEMORY[0x24BE5C318];
  v10 = sub_21FC5AF5C();
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = (char *)v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v7 + v4) = 1;
  *(_QWORD *)v12 = "BEFORE_MEAL";
  *((_QWORD *)v12 + 1) = 11;
  v12[16] = 2;
  v11();
  v13 = (uint64_t)v7 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v7 + 2 * v4) = 2;
  *(_QWORD *)v13 = "AFTER_MEAL";
  *(_QWORD *)(v13 + 8) = 10;
  *(_BYTE *)(v13 + 16) = 2;
  v11();
  return sub_21FC5AF68();
}

uint64_t static PBGlucoseMealTime._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA3A338(&qword_25553DD20, (uint64_t)qword_25554DEF0, a1);
}

uint64_t sub_21FC37604@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA40BC8(&qword_25553DD20, (uint64_t)qword_25554DEF0, a1);
}

uint64_t sub_21FC37620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;

  v0 = sub_21FC5AF74();
  __swift_allocate_value_buffer(v0, qword_25554DF08);
  __swift_project_value_buffer(v0, (uint64_t)qword_25554DF08);
  sub_21FA8AF38();
  sub_21FA48EB8();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_21FC603D0;
  v7 = v6 + v5;
  v8 = v6 + v5 + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + v5) = 0;
  *(_QWORD *)v8 = "SLEEP_NOT_SET";
  *(_QWORD *)(v8 + 8) = 13;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = *MEMORY[0x24BE5C318];
  v10 = sub_21FC5AF5C();
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 1;
  *(_QWORD *)v12 = "IN_BED";
  *(_QWORD *)(v12 + 8) = 6;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 2;
  *(_QWORD *)v14 = "ASLEEP";
  *((_QWORD *)v14 + 1) = 6;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 3;
  *(_QWORD *)v16 = "AWAKE";
  *((_QWORD *)v16 + 1) = 5;
  v16[16] = 2;
  v11();
  return sub_21FC5AF68();
}

uint64_t static PBSleepAnalysis._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA3A338(&qword_25553DD28, (uint64_t)qword_25554DF08, a1);
}

uint64_t sub_21FC377F4@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA40BC8(&qword_25553DD28, (uint64_t)qword_25554DF08, a1);
}

uint64_t sub_21FC37810()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;

  v0 = sub_21FC5AF74();
  __swift_allocate_value_buffer(v0, qword_25554DF20);
  __swift_project_value_buffer(v0, (uint64_t)qword_25554DF20);
  sub_21FA8AF38();
  sub_21FA48EB8();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_21FC603D0;
  v7 = v6 + v5;
  v8 = v6 + v5 + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + v5) = 0;
  *(_QWORD *)v8 = "WALKING_STEADINESS_CLASSIFICATION_NOT_SET";
  *(_QWORD *)(v8 + 8) = 41;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = *MEMORY[0x24BE5C318];
  v10 = sub_21FC5AF5C();
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 1;
  *(_QWORD *)v12 = "OK";
  *(_QWORD *)(v12 + 8) = 2;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 2;
  *(_QWORD *)v14 = "LOW";
  *((_QWORD *)v14 + 1) = 3;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 3;
  *(_QWORD *)v16 = "VERY_LOW";
  *((_QWORD *)v16 + 1) = 8;
  v16[16] = 2;
  v11();
  return sub_21FC5AF68();
}

uint64_t static PBAppleWalkingSteadinessClassification._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA3A338(&qword_25553DD30, (uint64_t)qword_25554DF20, a1);
}

uint64_t sub_21FC379E0@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA40BC8(&qword_25553DD30, (uint64_t)qword_25554DF20, a1);
}

uint64_t sub_21FC379FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;

  v0 = sub_21FC5AF74();
  __swift_allocate_value_buffer(v0, qword_25554DF38);
  __swift_project_value_buffer(v0, (uint64_t)qword_25554DF38);
  sub_21FA8AF38();
  sub_21FA48EB8();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_21FC5EE20;
  v7 = v6 + v5;
  v8 = v6 + v5 + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + v5) = 0;
  *(_QWORD *)v8 = "WALKING_STEADINESS_EVENT_NOT_SET";
  *(_QWORD *)(v8 + 8) = 32;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = *MEMORY[0x24BE5C318];
  v10 = sub_21FC5AF5C();
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 1;
  *(_QWORD *)v12 = "INITIAL_LOW";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 2;
  *(_QWORD *)v14 = "INITIAL_VERY_LOW";
  *((_QWORD *)v14 + 1) = 16;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 3;
  *(_QWORD *)v16 = "REPEAT_LOW";
  *((_QWORD *)v16 + 1) = 10;
  v16[16] = 2;
  v11();
  v17 = v7 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 4 * v4) = 4;
  *(_QWORD *)v17 = "REPEAT_VERY_LOW";
  *(_QWORD *)(v17 + 8) = 15;
  *(_BYTE *)(v17 + 16) = 2;
  v11();
  return sub_21FC5AF68();
}

uint64_t static PBAppleWalkingSteadinessEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA3A338(&qword_25553DD38, (uint64_t)qword_25554DF38, a1);
}

uint64_t sub_21FC37C10@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA40BC8(&qword_25553DD38, (uint64_t)qword_25554DF38, a1);
}

uint64_t sub_21FC37C2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;

  v0 = sub_21FC5AF74();
  __swift_allocate_value_buffer(v0, qword_25554DF50);
  __swift_project_value_buffer(v0, (uint64_t)qword_25554DF50);
  sub_21FA8AF38();
  sub_21FA48EB8();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_21FC5F730;
  v7 = v6 + v5;
  v8 = v6 + v5 + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + v5) = 0;
  *(_QWORD *)v8 = "CYCLE_FACTORS_NOT_SET";
  *(_QWORD *)(v8 + 8) = 21;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = *MEMORY[0x24BE5C318];
  v10 = sub_21FC5AF5C();
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 1;
  *(_QWORD *)v12 = "LACTATION";
  *(_QWORD *)(v12 + 8) = 9;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 2;
  *(_QWORD *)v14 = "PREGNANCY";
  *((_QWORD *)v14 + 1) = 9;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 3;
  *(_QWORD *)v16 = "CONTRACEPTIVE_UNSPECIFIED";
  *((_QWORD *)v16 + 1) = 25;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 4;
  *(_QWORD *)v18 = "CONTRACEPTIVE_IMPLANT";
  *((_QWORD *)v18 + 1) = 21;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 5;
  *(_QWORD *)v20 = "CONTRACEPTIVE_INJECTION";
  *((_QWORD *)v20 + 1) = 23;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v7 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 6;
  *(_QWORD *)v22 = "CONTRACEPTIVE_INTRAUTERINE_DEVICE";
  *((_QWORD *)v22 + 1) = 33;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v7 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 7;
  *(_QWORD *)v24 = "CONTRACEPTIVE_INTRAVAGINAL_RING";
  *((_QWORD *)v24 + 1) = 31;
  v24[16] = 2;
  v11();
  v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 8;
  *(_QWORD *)v25 = "CONTRACEPTIVE_ORAL";
  *(_QWORD *)(v25 + 8) = 18;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v7 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 9;
  *(_QWORD *)v27 = "CONTRACEPTIVE_PATCH";
  *((_QWORD *)v27 + 1) = 19;
  v27[16] = 2;
  v11();
  return sub_21FC5AF68();
}

uint64_t static PBCycleFactors._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA3A338(&qword_25553DD40, (uint64_t)qword_25554DF50, a1);
}

uint64_t sub_21FC37F54@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA40BC8(&qword_25553DD40, (uint64_t)qword_25554DF50, a1);
}

uint64_t sub_21FC37F70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  char *v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  _QWORD *v48;
  char *v49;
  _QWORD *v50;
  char *v51;
  uint64_t v53;

  v0 = sub_21FC5AF74();
  __swift_allocate_value_buffer(v0, qword_25554DF68);
  __swift_project_value_buffer(v0, (uint64_t)qword_25554DF68);
  sub_21FA8AF38();
  sub_21FA48EB8();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v53 = swift_allocObject();
  *(_OWORD *)(v53 + 16) = xmmword_21FC72860;
  v6 = v53 + v5;
  v7 = v53 + v5 + *(int *)(v2 + 48);
  *(_QWORD *)(v53 + v5) = 0;
  *(_QWORD *)v7 = "SYMPTOMS_NOT_SET";
  *(_QWORD *)(v7 + 8) = 16;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_21FC5AF5C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v53 + v5 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + v4) = 1;
  *(_QWORD *)v11 = "SYMPTOMS_ABDOMINAL_CRAMPS";
  *(_QWORD *)(v11 + 8) = 25;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v53 + v5 + 2 * v4);
  v13 = (char *)v12 + *(int *)(v2 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "SYMPTOMS_ACNE";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v53 + v5 + 3 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "SYMPTOMS_APPETITE_CHANGES";
  *((_QWORD *)v15 + 1) = 25;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v53 + v5 + 4 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "SYMPTOMS_BLOATING";
  *((_QWORD *)v17 + 1) = 17;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v53 + v5 + 5 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "SYMPTOMS_BREAST_PAIN";
  *((_QWORD *)v19 + 1) = 20;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v53 + v5 + 6 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "SYMPTOMS_CONSTIPATION";
  *((_QWORD *)v21 + 1) = 21;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v53 + v5 + 7 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "SYMPTOMS_DIARRHEA";
  *((_QWORD *)v23 + 1) = 17;
  v23[16] = 2;
  v10();
  v24 = v53 + v5 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + 8 * v4) = 8;
  *(_QWORD *)v24 = "SYMPTOMS_HEADACHE";
  *(_QWORD *)(v24 + 8) = 17;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v53 + v5 + 9 * v4);
  v26 = (char *)v25 + *(int *)(v2 + 48);
  *v25 = 9;
  *(_QWORD *)v26 = "SYMPTOMS_HOT_FLASHES";
  *((_QWORD *)v26 + 1) = 20;
  v26[16] = 2;
  v10();
  v27 = (_QWORD *)(v53 + v5 + 10 * v4);
  v28 = (char *)v27 + *(int *)(v2 + 48);
  *v27 = 10;
  *(_QWORD *)v28 = "SYMPTOMS_LOWER_BACK_PAIN";
  *((_QWORD *)v28 + 1) = 24;
  v28[16] = 2;
  v10();
  v29 = (_QWORD *)(v53 + v5 + 11 * v4);
  v30 = (char *)v29 + *(int *)(v2 + 48);
  *v29 = 11;
  *(_QWORD *)v30 = "SYMPTOMS_MOOD_CHANGES";
  *((_QWORD *)v30 + 1) = 21;
  v30[16] = 2;
  v10();
  v31 = (_QWORD *)(v53 + v5 + 12 * v4);
  v32 = (char *)v31 + *(int *)(v2 + 48);
  *v31 = 12;
  *(_QWORD *)v32 = "SYMPTOMS_NAUSEA";
  *((_QWORD *)v32 + 1) = 15;
  v32[16] = 2;
  v10();
  v33 = (_QWORD *)(v53 + v5 + 13 * v4);
  v34 = (char *)v33 + *(int *)(v2 + 48);
  *v33 = 13;
  *(_QWORD *)v34 = "SYMPTOMS_PELVIC_PAIN";
  *((_QWORD *)v34 + 1) = 20;
  v34[16] = 2;
  v10();
  v35 = (_QWORD *)(v53 + v5 + 14 * v4);
  v36 = (char *)v35 + *(int *)(v2 + 48);
  *v35 = 14;
  *(_QWORD *)v36 = "SYMPTOMS_SLEEP_CHANGES";
  *((_QWORD *)v36 + 1) = 22;
  v36[16] = 2;
  v10();
  v37 = (_QWORD *)(v53 + v5 + 15 * v4);
  v38 = (char *)v37 + *(int *)(v2 + 48);
  *v37 = 15;
  *(_QWORD *)v38 = "SYMPTOMS_FATIGUE";
  *((_QWORD *)v38 + 1) = 16;
  v38[16] = 2;
  v10();
  v39 = v53 + v5 + 16 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + 16 * v4) = 16;
  *(_QWORD *)v39 = "SYMPTOMS_VAGINAL_DRYNESS";
  *(_QWORD *)(v39 + 8) = 24;
  *(_BYTE *)(v39 + 16) = 2;
  v10();
  v40 = (_QWORD *)(v53 + v5 + 17 * v4);
  v41 = (char *)v40 + *(int *)(v2 + 48);
  *v40 = 17;
  *(_QWORD *)v41 = "SYMPTOMS_NIGHT_SWEATS";
  *((_QWORD *)v41 + 1) = 21;
  v41[16] = 2;
  v10();
  v42 = (_QWORD *)(v53 + v5 + 18 * v4);
  v43 = (char *)v42 + *(int *)(v2 + 48);
  *v42 = 18;
  *(_QWORD *)v43 = "SYMPTOMS_CHILLS";
  *((_QWORD *)v43 + 1) = 15;
  v43[16] = 2;
  v10();
  v44 = (_QWORD *)(v53 + v5 + 19 * v4);
  v45 = (char *)v44 + *(int *)(v2 + 48);
  *v44 = 19;
  *(_QWORD *)v45 = "SYMPTOMS_HAIR_LOSS";
  *((_QWORD *)v45 + 1) = 18;
  v45[16] = 2;
  v10();
  v46 = (_QWORD *)(v53 + v5 + 20 * v4);
  v47 = (char *)v46 + *(int *)(v2 + 48);
  *v46 = 20;
  *(_QWORD *)v47 = "SYMPTOMS_DRY_SKIN";
  *((_QWORD *)v47 + 1) = 17;
  v47[16] = 2;
  v10();
  v48 = (_QWORD *)(v53 + v5 + 21 * v4);
  v49 = (char *)v48 + *(int *)(v2 + 48);
  *v48 = 21;
  *(_QWORD *)v49 = "SYMPTOMS_BLADDER_INCONTINENCE";
  *((_QWORD *)v49 + 1) = 29;
  v49[16] = 2;
  v10();
  v50 = (_QWORD *)(v53 + v5 + 22 * v4);
  v51 = (char *)v50 + *(int *)(v2 + 48);
  *v50 = 22;
  *(_QWORD *)v51 = "SYMPTOMS_MEMORY_LAPSE";
  *((_QWORD *)v51 + 1) = 21;
  v51[16] = 2;
  v10();
  return sub_21FC5AF68();
}

uint64_t static PBCycleSymptoms._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA3A338(&qword_25553DD48, (uint64_t)qword_25554DF68, a1);
}

uint64_t sub_21FC38524@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA40BC8(&qword_25553DD48, (uint64_t)qword_25554DF68, a1);
}

uint64_t sub_21FC38540()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;

  v0 = sub_21FC5AF74();
  __swift_allocate_value_buffer(v0, qword_25554DF80);
  __swift_project_value_buffer(v0, (uint64_t)qword_25554DF80);
  sub_21FA8AF38();
  sub_21FA48EB8();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_21FC623E0;
  v7 = v6 + v5;
  v8 = v6 + v5 + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + v5) = 0;
  *(_QWORD *)v8 = "NOT_SET";
  *(_QWORD *)(v8 + 8) = 7;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = *MEMORY[0x24BE5C318];
  v10 = sub_21FC5AF5C();
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 1;
  *(_QWORD *)v12 = "SINUS_RHYTHM";
  *(_QWORD *)(v12 + 8) = 12;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 2;
  *(_QWORD *)v14 = "ATRIAL_FIBRILLATION";
  *((_QWORD *)v14 + 1) = 19;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 3;
  *(_QWORD *)v16 = "INCONCLUSIVE_LOW_HEART_RATE";
  *((_QWORD *)v16 + 1) = 27;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 4;
  *(_QWORD *)v18 = "INCONCLUSIVE_HIGH_HEART_RATE";
  *((_QWORD *)v18 + 1) = 28;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 5;
  *(_QWORD *)v20 = "INCONCLUSIVE_POOR_READING";
  *((_QWORD *)v20 + 1) = 25;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v7 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 6;
  *(_QWORD *)v22 = "INCONCLUSIVE_OTHER";
  *((_QWORD *)v22 + 1) = 18;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v7 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 100;
  *(_QWORD *)v24 = "UNRECOGNIZED_READING";
  *((_QWORD *)v24 + 1) = 20;
  v24[16] = 2;
  v11();
  return sub_21FC5AF68();
}

uint64_t static PBECGClassification._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA3A338(&qword_25553DD50, (uint64_t)qword_25554DF80, a1);
}

uint64_t sub_21FC387F8@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA40BC8(&qword_25553DD50, (uint64_t)qword_25554DF80, a1);
}

uint64_t sub_21FC38814()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;

  v0 = sub_21FC5AF74();
  __swift_allocate_value_buffer(v0, qword_25554DF98);
  __swift_project_value_buffer(v0, (uint64_t)qword_25554DF98);
  sub_21FA8AF38();
  sub_21FA48EB8();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_21FC623E0;
  v7 = v6 + v5;
  v8 = v6 + v5 + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + v5) = 0;
  *(_QWORD *)v8 = "CLINICAL_TYPE";
  *(_QWORD *)(v8 + 8) = 13;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = *MEMORY[0x24BE5C318];
  v10 = sub_21FC5AF5C();
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 1;
  *(_QWORD *)v12 = "ALLERGIES";
  *(_QWORD *)(v12 + 8) = 9;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 2;
  *(_QWORD *)v14 = "CONDITIONS";
  *((_QWORD *)v14 + 1) = 10;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 3;
  *(_QWORD *)v16 = "IMMUNIZATIONS";
  *((_QWORD *)v16 + 1) = 13;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 4;
  *(_QWORD *)v18 = "LABS";
  *((_QWORD *)v18 + 1) = 4;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 5;
  *(_QWORD *)v20 = "MEDICATIONS";
  *((_QWORD *)v20 + 1) = 11;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v7 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 6;
  *(_QWORD *)v22 = "PROCEDURES";
  *((_QWORD *)v22 + 1) = 10;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v7 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 7;
  *(_QWORD *)v24 = "VITALS";
  *((_QWORD *)v24 + 1) = 6;
  v24[16] = 2;
  v11();
  return sub_21FC5AF68();
}

uint64_t static PBClinicalType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA3A338(&qword_25553DD58, (uint64_t)qword_25554DF98, a1);
}

uint64_t sub_21FC38AC4@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA40BC8(&qword_25553DD58, (uint64_t)qword_25554DF98, a1);
}

uint64_t sub_21FC38AE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  char *v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  _QWORD *v48;
  char *v49;
  _QWORD *v50;
  char *v51;
  _QWORD *v52;
  char *v53;
  _QWORD *v54;
  char *v55;
  _QWORD *v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  _QWORD *v60;
  char *v61;
  _QWORD *v62;
  char *v63;
  _QWORD *v64;
  char *v65;
  _QWORD *v66;
  char *v67;
  _QWORD *v68;
  char *v69;
  uint64_t v70;
  _QWORD *v71;
  char *v72;
  _QWORD *v73;
  char *v74;
  _QWORD *v75;
  char *v76;
  _QWORD *v77;
  char *v78;
  _QWORD *v79;
  char *v80;
  _QWORD *v81;
  char *v82;
  _QWORD *v83;
  char *v84;
  _QWORD *v85;
  char *v86;
  _QWORD *v87;
  char *v88;
  _QWORD *v89;
  char *v90;
  _QWORD *v91;
  char *v92;
  _QWORD *v93;
  char *v94;
  _QWORD *v95;
  char *v96;
  _QWORD *v97;
  char *v98;
  _QWORD *v99;
  char *v100;
  _QWORD *v101;
  char *v102;
  _QWORD *v103;
  char *v104;
  _QWORD *v105;
  char *v106;
  _QWORD *v107;
  char *v108;
  _QWORD *v109;
  char *v110;
  _QWORD *v111;
  char *v112;
  _QWORD *v113;
  char *v114;
  _QWORD *v115;
  char *v116;
  _QWORD *v117;
  char *v118;
  _QWORD *v119;
  char *v120;
  _QWORD *v121;
  char *v122;
  _QWORD *v123;
  char *v124;
  _QWORD *v125;
  char *v126;
  _QWORD *v127;
  char *v128;
  _QWORD *v129;
  char *v130;
  _QWORD *v131;
  char *v132;
  unint64_t v133;
  _QWORD *v134;
  char *v135;
  _QWORD *v136;
  char *v137;
  _QWORD *v138;
  char *v139;
  _QWORD *v140;
  char *v141;
  _QWORD *v142;
  char *v143;
  _QWORD *v144;
  char *v145;
  _QWORD *v146;
  char *v147;
  _QWORD *v148;
  char *v149;
  _QWORD *v150;
  char *v151;
  _QWORD *v152;
  char *v153;
  _QWORD *v154;
  char *v155;
  _QWORD *v156;
  char *v157;
  _QWORD *v158;
  char *v159;
  _QWORD *v160;
  char *v161;
  _QWORD *v162;
  char *v163;
  _QWORD *v164;
  char *v165;
  uint64_t v167;

  v0 = sub_21FC5AF74();
  __swift_allocate_value_buffer(v0, qword_25554DFB0);
  __swift_project_value_buffer(v0, (uint64_t)qword_25554DFB0);
  sub_21FA8AF38();
  sub_21FA48EB8();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v167 = swift_allocObject();
  *(_OWORD *)(v167 + 16) = xmmword_21FC72870;
  v6 = v167 + v5;
  v7 = v167 + v5 + *(int *)(v2 + 48);
  *(_QWORD *)(v167 + v5) = 0;
  *(_QWORD *)v7 = "UNKNOWN";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_21FC5AF5C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v167 + v5 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + v4) = 1;
  *(_QWORD *)v11 = "AMERICAN_FOOTBALL";
  *(_QWORD *)(v11 + 8) = 17;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v167 + v5 + 2 * v4);
  v13 = (char *)v12 + *(int *)(v2 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "ARCHERY";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v167 + v5 + 3 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "AUSTRALIAN_FOOTBALL";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v167 + v5 + 4 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "BADMINTON";
  *((_QWORD *)v17 + 1) = 9;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v167 + v5 + 5 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "BASEBALL";
  *((_QWORD *)v19 + 1) = 8;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v167 + v5 + 6 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "BASKETBALL";
  *((_QWORD *)v21 + 1) = 10;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v167 + v5 + 7 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "BOWLING";
  *((_QWORD *)v23 + 1) = 7;
  v23[16] = 2;
  v10();
  v24 = v167 + v5 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + 8 * v4) = 8;
  *(_QWORD *)v24 = "BOXING";
  *(_QWORD *)(v24 + 8) = 6;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v167 + v5 + 9 * v4);
  v26 = (char *)v25 + *(int *)(v2 + 48);
  *v25 = 9;
  *(_QWORD *)v26 = "CLIMBING";
  *((_QWORD *)v26 + 1) = 8;
  v26[16] = 2;
  v10();
  v27 = (_QWORD *)(v167 + v5 + 10 * v4);
  v28 = (char *)v27 + *(int *)(v2 + 48);
  *v27 = 10;
  *(_QWORD *)v28 = "CRICKET";
  *((_QWORD *)v28 + 1) = 7;
  v28[16] = 2;
  v10();
  v29 = (_QWORD *)(v167 + v5 + 11 * v4);
  v30 = (char *)v29 + *(int *)(v2 + 48);
  *v29 = 11;
  *(_QWORD *)v30 = "CROSS_TRAINING";
  *((_QWORD *)v30 + 1) = 14;
  v30[16] = 2;
  v10();
  v31 = (_QWORD *)(v167 + v5 + 12 * v4);
  v32 = (char *)v31 + *(int *)(v2 + 48);
  *v31 = 12;
  *(_QWORD *)v32 = "CURLING";
  *((_QWORD *)v32 + 1) = 7;
  v32[16] = 2;
  v10();
  v33 = (_QWORD *)(v167 + v5 + 13 * v4);
  v34 = (char *)v33 + *(int *)(v2 + 48);
  *v33 = 13;
  *(_QWORD *)v34 = "CYCLING";
  *((_QWORD *)v34 + 1) = 7;
  v34[16] = 2;
  v10();
  v35 = (_QWORD *)(v167 + v5 + 14 * v4);
  v36 = (char *)v35 + *(int *)(v2 + 48);
  *v35 = 14;
  *(_QWORD *)v36 = "DANCE";
  *((_QWORD *)v36 + 1) = 5;
  v36[16] = 2;
  v10();
  v37 = (_QWORD *)(v167 + v5 + 15 * v4);
  v38 = (char *)v37 + *(int *)(v2 + 48);
  *v37 = 15;
  *(_QWORD *)v38 = "DANCE_INSPIRED_TRAINING";
  *((_QWORD *)v38 + 1) = 23;
  v38[16] = 2;
  v10();
  v39 = v167 + v5 + 16 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + 16 * v4) = 16;
  *(_QWORD *)v39 = "ELLIPTICAL";
  *(_QWORD *)(v39 + 8) = 10;
  *(_BYTE *)(v39 + 16) = 2;
  v10();
  v40 = (_QWORD *)(v167 + v5 + 17 * v4);
  v41 = (char *)v40 + *(int *)(v2 + 48);
  *v40 = 17;
  *(_QWORD *)v41 = "EQUESTRIAN_SPORTS";
  *((_QWORD *)v41 + 1) = 17;
  v41[16] = 2;
  v10();
  v42 = (_QWORD *)(v167 + v5 + 18 * v4);
  v43 = (char *)v42 + *(int *)(v2 + 48);
  *v42 = 18;
  *(_QWORD *)v43 = "FENCING";
  *((_QWORD *)v43 + 1) = 7;
  v43[16] = 2;
  v10();
  v44 = (_QWORD *)(v167 + v5 + 19 * v4);
  v45 = (char *)v44 + *(int *)(v2 + 48);
  *v44 = 19;
  *(_QWORD *)v45 = "FISHING";
  *((_QWORD *)v45 + 1) = 7;
  v45[16] = 2;
  v10();
  v46 = (_QWORD *)(v167 + v5 + 20 * v4);
  v47 = (char *)v46 + *(int *)(v2 + 48);
  *v46 = 20;
  *(_QWORD *)v47 = "FUNCTIONAL_STRENGTH_TRAINING";
  *((_QWORD *)v47 + 1) = 28;
  v47[16] = 2;
  v10();
  v48 = (_QWORD *)(v167 + v5 + 21 * v4);
  v49 = (char *)v48 + *(int *)(v2 + 48);
  *v48 = 21;
  *(_QWORD *)v49 = "GOLF";
  *((_QWORD *)v49 + 1) = 4;
  v49[16] = 2;
  v10();
  v50 = (_QWORD *)(v167 + v5 + 22 * v4);
  v51 = (char *)v50 + *(int *)(v2 + 48);
  *v50 = 22;
  *(_QWORD *)v51 = "GYMNASTICS";
  *((_QWORD *)v51 + 1) = 10;
  v51[16] = 2;
  v10();
  v52 = (_QWORD *)(v167 + v5 + 23 * v4);
  v53 = (char *)v52 + *(int *)(v2 + 48);
  *v52 = 23;
  *(_QWORD *)v53 = "HANDBALL";
  *((_QWORD *)v53 + 1) = 8;
  v53[16] = 2;
  v10();
  v54 = (_QWORD *)(v167 + v5 + 24 * v4);
  v55 = (char *)v54 + *(int *)(v2 + 48);
  *v54 = 24;
  *(_QWORD *)v55 = "HIKING";
  *((_QWORD *)v55 + 1) = 6;
  v55[16] = 2;
  v10();
  v56 = (_QWORD *)(v167 + v5 + 25 * v4);
  v57 = (char *)v56 + *(int *)(v2 + 48);
  *v56 = 25;
  *(_QWORD *)v57 = "HOCKEY";
  *((_QWORD *)v57 + 1) = 6;
  v57[16] = 2;
  v10();
  v58 = (_QWORD *)(v167 + v5 + 26 * v4);
  v59 = (char *)v58 + *(int *)(v2 + 48);
  *v58 = 26;
  *(_QWORD *)v59 = "HUNTING";
  *((_QWORD *)v59 + 1) = 7;
  v59[16] = 2;
  v10();
  v60 = (_QWORD *)(v167 + v5 + 27 * v4);
  v61 = (char *)v60 + *(int *)(v2 + 48);
  *v60 = 27;
  *(_QWORD *)v61 = "LACROSSE";
  *((_QWORD *)v61 + 1) = 8;
  v61[16] = 2;
  v10();
  v62 = (_QWORD *)(v167 + v5 + 28 * v4);
  v63 = (char *)v62 + *(int *)(v2 + 48);
  *v62 = 28;
  *(_QWORD *)v63 = "MARTIAL_ARTS";
  *((_QWORD *)v63 + 1) = 12;
  v63[16] = 2;
  v10();
  v64 = (_QWORD *)(v167 + v5 + 29 * v4);
  v65 = (char *)v64 + *(int *)(v2 + 48);
  *v64 = 29;
  *(_QWORD *)v65 = "MIND_AND_BODY";
  *((_QWORD *)v65 + 1) = 13;
  v65[16] = 2;
  v10();
  v66 = (_QWORD *)(v167 + v5 + 30 * v4);
  v67 = (char *)v66 + *(int *)(v2 + 48);
  *v66 = 30;
  *(_QWORD *)v67 = "MIXED_METABOLIC_CARDIO_TRAINING";
  *((_QWORD *)v67 + 1) = 31;
  v67[16] = 2;
  v10();
  v68 = (_QWORD *)(v167 + v5 + 31 * v4);
  v69 = (char *)v68 + *(int *)(v2 + 48);
  *v68 = 31;
  *(_QWORD *)v69 = "PADDLE_SPORTS";
  *((_QWORD *)v69 + 1) = 13;
  v69[16] = 2;
  v10();
  v70 = v167 + v5 + 32 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + 32 * v4) = 32;
  *(_QWORD *)v70 = "PLAY";
  *(_QWORD *)(v70 + 8) = 4;
  *(_BYTE *)(v70 + 16) = 2;
  v10();
  v71 = (_QWORD *)(v167 + v5 + 33 * v4);
  v72 = (char *)v71 + *(int *)(v2 + 48);
  *v71 = 33;
  *(_QWORD *)v72 = "PREPARATION_AND_RECOVERY";
  *((_QWORD *)v72 + 1) = 24;
  v72[16] = 2;
  v10();
  v73 = (_QWORD *)(v167 + v5 + 34 * v4);
  v74 = (char *)v73 + *(int *)(v2 + 48);
  *v73 = 34;
  *(_QWORD *)v74 = "RACQUETBALL";
  *((_QWORD *)v74 + 1) = 11;
  v74[16] = 2;
  v10();
  v75 = (_QWORD *)(v167 + v5 + 35 * v4);
  v76 = (char *)v75 + *(int *)(v2 + 48);
  *v75 = 35;
  *(_QWORD *)v76 = "ROWING";
  *((_QWORD *)v76 + 1) = 6;
  v76[16] = 2;
  v10();
  v77 = (_QWORD *)(v167 + v5 + 36 * v4);
  v78 = (char *)v77 + *(int *)(v2 + 48);
  *v77 = 36;
  *(_QWORD *)v78 = "RUGBY";
  *((_QWORD *)v78 + 1) = 5;
  v78[16] = 2;
  v10();
  v79 = (_QWORD *)(v167 + v5 + 37 * v4);
  v80 = (char *)v79 + *(int *)(v2 + 48);
  *v79 = 37;
  *(_QWORD *)v80 = "RUNNING";
  *((_QWORD *)v80 + 1) = 7;
  v80[16] = 2;
  v10();
  v81 = (_QWORD *)(v167 + v5 + 38 * v4);
  v82 = (char *)v81 + *(int *)(v2 + 48);
  *v81 = 38;
  *(_QWORD *)v82 = "SAILING";
  *((_QWORD *)v82 + 1) = 7;
  v82[16] = 2;
  v10();
  v83 = (_QWORD *)(v167 + v5 + 39 * v4);
  v84 = (char *)v83 + *(int *)(v2 + 48);
  *v83 = 39;
  *(_QWORD *)v84 = "SKATING_SPORTS";
  *((_QWORD *)v84 + 1) = 14;
  v84[16] = 2;
  v10();
  v85 = (_QWORD *)(v167 + v5 + 40 * v4);
  v86 = (char *)v85 + *(int *)(v2 + 48);
  *v85 = 40;
  *(_QWORD *)v86 = "SNOW_SPORTS";
  *((_QWORD *)v86 + 1) = 11;
  v86[16] = 2;
  v10();
  v87 = (_QWORD *)(v167 + v5 + 41 * v4);
  v88 = (char *)v87 + *(int *)(v2 + 48);
  *v87 = 41;
  *(_QWORD *)v88 = "SOCCER";
  *((_QWORD *)v88 + 1) = 6;
  v88[16] = 2;
  v10();
  v89 = (_QWORD *)(v167 + v5 + 42 * v4);
  v90 = (char *)v89 + *(int *)(v2 + 48);
  *v89 = 42;
  *(_QWORD *)v90 = "SOFTBALL";
  *((_QWORD *)v90 + 1) = 8;
  v90[16] = 2;
  v10();
  v91 = (_QWORD *)(v167 + v5 + 43 * v4);
  v92 = (char *)v91 + *(int *)(v2 + 48);
  *v91 = 43;
  *(_QWORD *)v92 = "SQUASH";
  *((_QWORD *)v92 + 1) = 6;
  v92[16] = 2;
  v10();
  v93 = (_QWORD *)(v167 + v5 + 44 * v4);
  v94 = (char *)v93 + *(int *)(v2 + 48);
  *v93 = 44;
  *(_QWORD *)v94 = "STAIR_CLIMBING";
  *((_QWORD *)v94 + 1) = 14;
  v94[16] = 2;
  v10();
  v95 = (_QWORD *)(v167 + v5 + 45 * v4);
  v96 = (char *)v95 + *(int *)(v2 + 48);
  *v95 = 45;
  *(_QWORD *)v96 = "SURFING_SPORTS";
  *((_QWORD *)v96 + 1) = 14;
  v96[16] = 2;
  v10();
  v97 = (_QWORD *)(v167 + v5 + 46 * v4);
  v98 = (char *)v97 + *(int *)(v2 + 48);
  *v97 = 46;
  *(_QWORD *)v98 = "SWIMMING";
  *((_QWORD *)v98 + 1) = 8;
  v98[16] = 2;
  v10();
  v99 = (_QWORD *)(v167 + v5 + 47 * v4);
  v100 = (char *)v99 + *(int *)(v2 + 48);
  *v99 = 47;
  *(_QWORD *)v100 = "TABLE_TENNIS";
  *((_QWORD *)v100 + 1) = 12;
  v100[16] = 2;
  v10();
  v101 = (_QWORD *)(v167 + v5 + 48 * v4);
  v102 = (char *)v101 + *(int *)(v2 + 48);
  *v101 = 48;
  *(_QWORD *)v102 = "TENNIS";
  *((_QWORD *)v102 + 1) = 6;
  v102[16] = 2;
  v10();
  v103 = (_QWORD *)(v167 + v5 + 49 * v4);
  v104 = (char *)v103 + *(int *)(v2 + 48);
  *v103 = 49;
  *(_QWORD *)v104 = "TRACK_AND_FIELD";
  *((_QWORD *)v104 + 1) = 15;
  v104[16] = 2;
  v10();
  v105 = (_QWORD *)(v167 + v5 + 50 * v4);
  v106 = (char *)v105 + *(int *)(v2 + 48);
  *v105 = 50;
  *(_QWORD *)v106 = "TRADITIONAL_STRENGTH_TRAINING";
  *((_QWORD *)v106 + 1) = 29;
  v106[16] = 2;
  v10();
  v107 = (_QWORD *)(v167 + v5 + 51 * v4);
  v108 = (char *)v107 + *(int *)(v2 + 48);
  *v107 = 51;
  *(_QWORD *)v108 = "VOLLEYBALL";
  *((_QWORD *)v108 + 1) = 10;
  v108[16] = 2;
  v10();
  v109 = (_QWORD *)(v167 + v5 + 52 * v4);
  v110 = (char *)v109 + *(int *)(v2 + 48);
  *v109 = 52;
  *(_QWORD *)v110 = "WALKING";
  *((_QWORD *)v110 + 1) = 7;
  v110[16] = 2;
  v10();
  v111 = (_QWORD *)(v167 + v5 + 53 * v4);
  v112 = (char *)v111 + *(int *)(v2 + 48);
  *v111 = 53;
  *(_QWORD *)v112 = "WATER_FITNESS";
  *((_QWORD *)v112 + 1) = 13;
  v112[16] = 2;
  v10();
  v113 = (_QWORD *)(v167 + v5 + 54 * v4);
  v114 = (char *)v113 + *(int *)(v2 + 48);
  *v113 = 54;
  *(_QWORD *)v114 = "WATER_POLO";
  *((_QWORD *)v114 + 1) = 10;
  v114[16] = 2;
  v10();
  v115 = (_QWORD *)(v167 + v5 + 55 * v4);
  v116 = (char *)v115 + *(int *)(v2 + 48);
  *v115 = 55;
  *(_QWORD *)v116 = "WATER_SPORTS";
  *((_QWORD *)v116 + 1) = 12;
  v116[16] = 2;
  v10();
  v117 = (_QWORD *)(v167 + v5 + 56 * v4);
  v118 = (char *)v117 + *(int *)(v2 + 48);
  *v117 = 56;
  *(_QWORD *)v118 = "WRESTLING";
  *((_QWORD *)v118 + 1) = 9;
  v118[16] = 2;
  v10();
  v119 = (_QWORD *)(v167 + v5 + 57 * v4);
  v120 = (char *)v119 + *(int *)(v2 + 48);
  *v119 = 57;
  *(_QWORD *)v120 = "YOGA";
  *((_QWORD *)v120 + 1) = 4;
  v120[16] = 2;
  v10();
  v121 = (_QWORD *)(v167 + v5 + 58 * v4);
  v122 = (char *)v121 + *(int *)(v2 + 48);
  *v121 = 58;
  *(_QWORD *)v122 = "BARRE";
  *((_QWORD *)v122 + 1) = 5;
  v122[16] = 2;
  v10();
  v123 = (_QWORD *)(v167 + v5 + 59 * v4);
  v124 = (char *)v123 + *(int *)(v2 + 48);
  *v123 = 59;
  *(_QWORD *)v124 = "CORE_TRAINING";
  *((_QWORD *)v124 + 1) = 13;
  v124[16] = 2;
  v10();
  v125 = (_QWORD *)(v167 + v5 + 60 * v4);
  v126 = (char *)v125 + *(int *)(v2 + 48);
  *v125 = 60;
  *(_QWORD *)v126 = "CROSS_COUNTRY_SKIING";
  *((_QWORD *)v126 + 1) = 20;
  v126[16] = 2;
  v10();
  v127 = (_QWORD *)(v167 + v5 + 61 * v4);
  v128 = (char *)v127 + *(int *)(v2 + 48);
  *v127 = 61;
  *(_QWORD *)v128 = "DOWNHILL_SKIING";
  *((_QWORD *)v128 + 1) = 15;
  v128[16] = 2;
  v10();
  v129 = (_QWORD *)(v167 + v5 + 62 * v4);
  v130 = (char *)v129 + *(int *)(v2 + 48);
  *v129 = 62;
  *(_QWORD *)v130 = "FLEXIBILITY";
  *((_QWORD *)v130 + 1) = 11;
  v130[16] = 2;
  v10();
  v131 = (_QWORD *)(v167 + v5 + 63 * v4);
  v132 = (char *)v131 + *(int *)(v2 + 48);
  *v131 = 63;
  *(_QWORD *)v132 = "HIGH_INTENSITY_INTERVAL_TRAINING";
  *((_QWORD *)v132 + 1) = 32;
  v132[16] = 2;
  v10();
  v133 = v167 + v5 + (v4 << 6) + *(int *)(v2 + 48);
  *(_QWORD *)(v6 + (v4 << 6)) = 64;
  *(_QWORD *)v133 = "JUMP_ROPE";
  *(_QWORD *)(v133 + 8) = 9;
  *(_BYTE *)(v133 + 16) = 2;
  v10();
  v134 = (_QWORD *)(v167 + v5 + 65 * v4);
  v135 = (char *)v134 + *(int *)(v2 + 48);
  *v134 = 65;
  *(_QWORD *)v135 = "KICKBOXING";
  *((_QWORD *)v135 + 1) = 10;
  v135[16] = 2;
  v10();
  v136 = (_QWORD *)(v167 + v5 + 66 * v4);
  v137 = (char *)v136 + *(int *)(v2 + 48);
  *v136 = 66;
  *(_QWORD *)v137 = "PILATES";
  *((_QWORD *)v137 + 1) = 7;
  v137[16] = 2;
  v10();
  v138 = (_QWORD *)(v167 + v5 + 67 * v4);
  v139 = (char *)v138 + *(int *)(v2 + 48);
  *v138 = 67;
  *(_QWORD *)v139 = "SNOWBOARDING";
  *((_QWORD *)v139 + 1) = 12;
  v139[16] = 2;
  v10();
  v140 = (_QWORD *)(v167 + v5 + 68 * v4);
  v141 = (char *)v140 + *(int *)(v2 + 48);
  *v140 = 68;
  *(_QWORD *)v141 = "STAIRS";
  *((_QWORD *)v141 + 1) = 6;
  v141[16] = 2;
  v10();
  v142 = (_QWORD *)(v167 + v5 + 69 * v4);
  v143 = (char *)v142 + *(int *)(v2 + 48);
  *v142 = 69;
  *(_QWORD *)v143 = "STEP_TRAINING";
  *((_QWORD *)v143 + 1) = 13;
  v143[16] = 2;
  v10();
  v144 = (_QWORD *)(v167 + v5 + 70 * v4);
  v145 = (char *)v144 + *(int *)(v2 + 48);
  *v144 = 70;
  *(_QWORD *)v145 = "WHEELCHAIR_WALK_PACE";
  *((_QWORD *)v145 + 1) = 20;
  v145[16] = 2;
  v10();
  v146 = (_QWORD *)(v167 + v5 + 71 * v4);
  v147 = (char *)v146 + *(int *)(v2 + 48);
  *v146 = 71;
  *(_QWORD *)v147 = "WHEELCHAIR_RUN_PACE";
  *((_QWORD *)v147 + 1) = 19;
  v147[16] = 2;
  v10();
  v148 = (_QWORD *)(v167 + v5 + 72 * v4);
  v149 = (char *)v148 + *(int *)(v2 + 48);
  *v148 = 72;
  *(_QWORD *)v149 = "TAI_CHI";
  *((_QWORD *)v149 + 1) = 7;
  v149[16] = 2;
  v10();
  v150 = (_QWORD *)(v167 + v5 + 73 * v4);
  v151 = (char *)v150 + *(int *)(v2 + 48);
  *v150 = 73;
  *(_QWORD *)v151 = "MIXED_CARDIO";
  *((_QWORD *)v151 + 1) = 12;
  v151[16] = 2;
  v10();
  v152 = (_QWORD *)(v167 + v5 + 74 * v4);
  v153 = (char *)v152 + *(int *)(v2 + 48);
  *v152 = 74;
  *(_QWORD *)v153 = "HAND_CYCLING";
  *((_QWORD *)v153 + 1) = 12;
  v153[16] = 2;
  v10();
  v154 = (_QWORD *)(v167 + v5 + 75 * v4);
  v155 = (char *)v154 + *(int *)(v2 + 48);
  *v154 = 75;
  *(_QWORD *)v155 = "DISC_SPORTS";
  *((_QWORD *)v155 + 1) = 11;
  v155[16] = 2;
  v10();
  v156 = (_QWORD *)(v167 + v5 + 76 * v4);
  v157 = (char *)v156 + *(int *)(v2 + 48);
  *v156 = 76;
  *(_QWORD *)v157 = "FITNESS_GAMING";
  *((_QWORD *)v157 + 1) = 14;
  v157[16] = 2;
  v10();
  v158 = (_QWORD *)(v167 + v5 + 77 * v4);
  v159 = (char *)v158 + *(int *)(v2 + 48);
  *v158 = 77;
  *(_QWORD *)v159 = "CARDIO_DANCE";
  *((_QWORD *)v159 + 1) = 12;
  v159[16] = 2;
  v10();
  v160 = (_QWORD *)(v167 + v5 + 78 * v4);
  v161 = (char *)v160 + *(int *)(v2 + 48);
  *v160 = 78;
  *(_QWORD *)v161 = "SOCIAL_DANCE";
  *((_QWORD *)v161 + 1) = 12;
  v161[16] = 2;
  v10();
  v162 = (_QWORD *)(v167 + v5 + 79 * v4);
  v163 = (char *)v162 + *(int *)(v2 + 48);
  *v162 = 79;
  *(_QWORD *)v163 = "PICKLEBALL";
  *((_QWORD *)v163 + 1) = 10;
  v163[16] = 2;
  v10();
  v164 = (_QWORD *)(v167 + v5 + 80 * v4);
  v165 = (char *)v164 + *(int *)(v2 + 48);
  *v164 = 80;
  *(_QWORD *)v165 = "COOLDOWN";
  *((_QWORD *)v165 + 1) = 8;
  v165[16] = 2;
  v10();
  return sub_21FC5AF68();
}

uint64_t static PBActivityType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA3A338(&qword_25553DD60, (uint64_t)qword_25554DFB0, a1);
}

unint64_t sub_21FC39C28()
{
  unint64_t result;

  result = qword_25554DFC8;
  if (!qword_25554DFC8)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBGranularity, &type metadata for PBGranularity);
    atomic_store(result, (unint64_t *)&qword_25554DFC8);
  }
  return result;
}

unint64_t sub_21FC39C70()
{
  unint64_t result;

  result = qword_25554DFD0;
  if (!qword_25554DFD0)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBGranularity, &type metadata for PBGranularity);
    atomic_store(result, (unint64_t *)&qword_25554DFD0);
  }
  return result;
}

unint64_t sub_21FC39CB8()
{
  unint64_t result;

  result = qword_25554DFD8;
  if (!qword_25554DFD8)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBGranularity, &type metadata for PBGranularity);
    atomic_store(result, (unint64_t *)&qword_25554DFD8);
  }
  return result;
}

uint64_t sub_21FC39CFC()
{
  return sub_21FB095AC(&qword_25554DFE0, &qword_25554DFE8);
}

unint64_t sub_21FC39D2C()
{
  unint64_t result;

  result = qword_25554DFF0;
  if (!qword_25554DFF0)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBDataType, &type metadata for PBDataType);
    atomic_store(result, (unint64_t *)&qword_25554DFF0);
  }
  return result;
}

unint64_t sub_21FC39D74()
{
  unint64_t result;

  result = qword_25554DFF8;
  if (!qword_25554DFF8)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBDataType, &type metadata for PBDataType);
    atomic_store(result, (unint64_t *)&qword_25554DFF8);
  }
  return result;
}

unint64_t sub_21FC39DBC()
{
  unint64_t result;

  result = qword_25554E000;
  if (!qword_25554E000)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBDataType, &type metadata for PBDataType);
    atomic_store(result, (unint64_t *)&qword_25554E000);
  }
  return result;
}

uint64_t sub_21FC39E00()
{
  return sub_21FB095AC(&qword_25554E008, &qword_25554E010);
}

unint64_t sub_21FC39E30()
{
  unint64_t result;

  result = qword_25554E018;
  if (!qword_25554E018)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBGlucoseMealTime, &type metadata for PBGlucoseMealTime);
    atomic_store(result, (unint64_t *)&qword_25554E018);
  }
  return result;
}

unint64_t sub_21FC39E78()
{
  unint64_t result;

  result = qword_25554E020;
  if (!qword_25554E020)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBGlucoseMealTime, &type metadata for PBGlucoseMealTime);
    atomic_store(result, (unint64_t *)&qword_25554E020);
  }
  return result;
}

unint64_t sub_21FC39EC0()
{
  unint64_t result;

  result = qword_25554E028;
  if (!qword_25554E028)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBGlucoseMealTime, &type metadata for PBGlucoseMealTime);
    atomic_store(result, (unint64_t *)&qword_25554E028);
  }
  return result;
}

uint64_t sub_21FC39F04()
{
  return sub_21FB095AC(&qword_25554E030, &qword_25554E038);
}

unint64_t sub_21FC39F34()
{
  unint64_t result;

  result = qword_25554E040;
  if (!qword_25554E040)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBSleepAnalysis, &type metadata for PBSleepAnalysis);
    atomic_store(result, (unint64_t *)&qword_25554E040);
  }
  return result;
}

unint64_t sub_21FC39F7C()
{
  unint64_t result;

  result = qword_25554E048;
  if (!qword_25554E048)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBSleepAnalysis, &type metadata for PBSleepAnalysis);
    atomic_store(result, (unint64_t *)&qword_25554E048);
  }
  return result;
}

unint64_t sub_21FC39FC4()
{
  unint64_t result;

  result = qword_25554E050;
  if (!qword_25554E050)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBSleepAnalysis, &type metadata for PBSleepAnalysis);
    atomic_store(result, (unint64_t *)&qword_25554E050);
  }
  return result;
}

uint64_t sub_21FC3A008()
{
  return sub_21FB095AC(&qword_25554E058, &qword_25554E060);
}

unint64_t sub_21FC3A038()
{
  unint64_t result;

  result = qword_25554E068;
  if (!qword_25554E068)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBAppleWalkingSteadinessClassification, &type metadata for PBAppleWalkingSteadinessClassification);
    atomic_store(result, (unint64_t *)&qword_25554E068);
  }
  return result;
}

unint64_t sub_21FC3A080()
{
  unint64_t result;

  result = qword_25554E070;
  if (!qword_25554E070)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBAppleWalkingSteadinessClassification, &type metadata for PBAppleWalkingSteadinessClassification);
    atomic_store(result, (unint64_t *)&qword_25554E070);
  }
  return result;
}

unint64_t sub_21FC3A0C8()
{
  unint64_t result;

  result = qword_25554E078;
  if (!qword_25554E078)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBAppleWalkingSteadinessClassification, &type metadata for PBAppleWalkingSteadinessClassification);
    atomic_store(result, (unint64_t *)&qword_25554E078);
  }
  return result;
}

uint64_t sub_21FC3A10C()
{
  return sub_21FB095AC(&qword_25554E080, &qword_25554E088);
}

unint64_t sub_21FC3A13C()
{
  unint64_t result;

  result = qword_25554E090;
  if (!qword_25554E090)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBAppleWalkingSteadinessEvent, &type metadata for PBAppleWalkingSteadinessEvent);
    atomic_store(result, (unint64_t *)&qword_25554E090);
  }
  return result;
}

unint64_t sub_21FC3A184()
{
  unint64_t result;

  result = qword_25554E098;
  if (!qword_25554E098)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBAppleWalkingSteadinessEvent, &type metadata for PBAppleWalkingSteadinessEvent);
    atomic_store(result, (unint64_t *)&qword_25554E098);
  }
  return result;
}

unint64_t sub_21FC3A1CC()
{
  unint64_t result;

  result = qword_25554E0A0;
  if (!qword_25554E0A0)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBAppleWalkingSteadinessEvent, &type metadata for PBAppleWalkingSteadinessEvent);
    atomic_store(result, (unint64_t *)&qword_25554E0A0);
  }
  return result;
}

uint64_t sub_21FC3A210()
{
  return sub_21FB095AC(&qword_25554E0A8, &qword_25554E0B0);
}

unint64_t sub_21FC3A240()
{
  unint64_t result;

  result = qword_25554E0B8;
  if (!qword_25554E0B8)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBCycleFactors, &type metadata for PBCycleFactors);
    atomic_store(result, (unint64_t *)&qword_25554E0B8);
  }
  return result;
}

unint64_t sub_21FC3A288()
{
  unint64_t result;

  result = qword_25554E0C0;
  if (!qword_25554E0C0)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBCycleFactors, &type metadata for PBCycleFactors);
    atomic_store(result, (unint64_t *)&qword_25554E0C0);
  }
  return result;
}

unint64_t sub_21FC3A2D0()
{
  unint64_t result;

  result = qword_25554E0C8;
  if (!qword_25554E0C8)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBCycleFactors, &type metadata for PBCycleFactors);
    atomic_store(result, (unint64_t *)&qword_25554E0C8);
  }
  return result;
}

uint64_t sub_21FC3A314()
{
  return sub_21FB095AC(&qword_25554E0D0, &qword_25554E0D8);
}

unint64_t sub_21FC3A344()
{
  unint64_t result;

  result = qword_25554E0E0;
  if (!qword_25554E0E0)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBCycleSymptoms, &type metadata for PBCycleSymptoms);
    atomic_store(result, (unint64_t *)&qword_25554E0E0);
  }
  return result;
}

unint64_t sub_21FC3A38C()
{
  unint64_t result;

  result = qword_25554E0E8;
  if (!qword_25554E0E8)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBCycleSymptoms, &type metadata for PBCycleSymptoms);
    atomic_store(result, (unint64_t *)&qword_25554E0E8);
  }
  return result;
}

unint64_t sub_21FC3A3D4()
{
  unint64_t result;

  result = qword_25554E0F0;
  if (!qword_25554E0F0)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBCycleSymptoms, &type metadata for PBCycleSymptoms);
    atomic_store(result, (unint64_t *)&qword_25554E0F0);
  }
  return result;
}

uint64_t sub_21FC3A418()
{
  return sub_21FB095AC(&qword_25554E0F8, &qword_25554E100);
}

unint64_t sub_21FC3A448()
{
  unint64_t result;

  result = qword_25554E108;
  if (!qword_25554E108)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBECGClassification, &type metadata for PBECGClassification);
    atomic_store(result, (unint64_t *)&qword_25554E108);
  }
  return result;
}

unint64_t sub_21FC3A490()
{
  unint64_t result;

  result = qword_25554E110;
  if (!qword_25554E110)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBECGClassification, &type metadata for PBECGClassification);
    atomic_store(result, (unint64_t *)&qword_25554E110);
  }
  return result;
}

unint64_t sub_21FC3A4D8()
{
  unint64_t result;

  result = qword_25554E118;
  if (!qword_25554E118)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBECGClassification, &type metadata for PBECGClassification);
    atomic_store(result, (unint64_t *)&qword_25554E118);
  }
  return result;
}

uint64_t sub_21FC3A51C()
{
  return sub_21FB095AC(&qword_25554E120, &qword_25554E128);
}

unint64_t sub_21FC3A54C()
{
  unint64_t result;

  result = qword_25554E130;
  if (!qword_25554E130)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBClinicalType, &type metadata for PBClinicalType);
    atomic_store(result, (unint64_t *)&qword_25554E130);
  }
  return result;
}

unint64_t sub_21FC3A594()
{
  unint64_t result;

  result = qword_25554E138;
  if (!qword_25554E138)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBClinicalType, &type metadata for PBClinicalType);
    atomic_store(result, (unint64_t *)&qword_25554E138);
  }
  return result;
}

unint64_t sub_21FC3A5DC()
{
  unint64_t result;

  result = qword_25554E140;
  if (!qword_25554E140)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBClinicalType, &type metadata for PBClinicalType);
    atomic_store(result, (unint64_t *)&qword_25554E140);
  }
  return result;
}

uint64_t sub_21FC3A620()
{
  return sub_21FB095AC(&qword_25554E148, &qword_25554E150);
}

unint64_t sub_21FC3A650()
{
  unint64_t result;

  result = qword_25554E158;
  if (!qword_25554E158)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBActivityType, &type metadata for PBActivityType);
    atomic_store(result, (unint64_t *)&qword_25554E158);
  }
  return result;
}

unint64_t sub_21FC3A698()
{
  unint64_t result;

  result = qword_25554E160;
  if (!qword_25554E160)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBActivityType, &type metadata for PBActivityType);
    atomic_store(result, (unint64_t *)&qword_25554E160);
  }
  return result;
}

unint64_t sub_21FC3A6E0()
{
  unint64_t result;

  result = qword_25554E168;
  if (!qword_25554E168)
  {
    result = MEMORY[0x2207D0F78]("yՁ.", &type metadata for PBActivityType);
    atomic_store(result, (unint64_t *)&qword_25554E168);
  }
  return result;
}

uint64_t sub_21FC3A724()
{
  return sub_21FB095AC(&qword_25554E170, &qword_25554E178);
}

uint64_t sub_21FC3A750@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA40BC8(&qword_25553DD60, (uint64_t)qword_25554DFB0, a1);
}

ValueMetadata *type metadata accessor for PBGranularity()
{
  return &type metadata for PBGranularity;
}

ValueMetadata *type metadata accessor for PBDataType()
{
  return &type metadata for PBDataType;
}

ValueMetadata *type metadata accessor for PBGlucoseMealTime()
{
  return &type metadata for PBGlucoseMealTime;
}

ValueMetadata *type metadata accessor for PBSleepAnalysis()
{
  return &type metadata for PBSleepAnalysis;
}

ValueMetadata *type metadata accessor for PBAppleWalkingSteadinessClassification()
{
  return &type metadata for PBAppleWalkingSteadinessClassification;
}

ValueMetadata *type metadata accessor for PBAppleWalkingSteadinessEvent()
{
  return &type metadata for PBAppleWalkingSteadinessEvent;
}

ValueMetadata *type metadata accessor for PBCycleFactors()
{
  return &type metadata for PBCycleFactors;
}

ValueMetadata *type metadata accessor for PBCycleSymptoms()
{
  return &type metadata for PBCycleSymptoms;
}

ValueMetadata *type metadata accessor for PBECGClassification()
{
  return &type metadata for PBECGClassification;
}

ValueMetadata *type metadata accessor for PBClinicalType()
{
  return &type metadata for PBClinicalType;
}

ValueMetadata *type metadata accessor for PBActivityType()
{
  return &type metadata for PBActivityType;
}

unint64_t sub_21FC3A81C()
{
  unint64_t result;

  result = qword_25554E180;
  if (!qword_25554E180)
  {
    result = MEMORY[0x2207D0F78](&protocol conformance descriptor for PBClinicalType, &type metadata for PBClinicalType);
    atomic_store(result, (unint64_t *)&qword_25554E180);
  }
  return result;
}

void destroy for ClinicalSharingSleepDaySummaryQuery(uint64_t a1)
{
  swift_release();

}

uint64_t initializeWithCopy for ClinicalSharingSleepDaySummaryQuery(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain();
  v4 = v3;
  return a1;
}

_QWORD *assignWithCopy for ClinicalSharingSleepDaySummaryQuery(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = (void *)a2[3];
  v5 = (void *)a1[3];
  a1[3] = v4;
  v6 = v4;

  return a1;
}

uint64_t assignWithTake for ClinicalSharingSleepDaySummaryQuery(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  return a1;
}

ValueMetadata *type metadata accessor for ClinicalSharingSleepDaySummaryQuery()
{
  return &type metadata for ClinicalSharingSleepDaySummaryQuery;
}

uint64_t sub_21FC3A9E4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];

  v8 = sub_21FC5B910();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BE45A98];
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC3C248();
  v14 = *(_QWORD *)(v13 - 8);
  v23 = v13;
  v24 = v14;
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2CEA0(a1 + 16, (uint64_t)v26);
  __swift_project_boxed_opaque_existential_1(v26, v26[3]);
  sub_21FC5B934();
  sub_21FA2A08C(&qword_25554E1B0, v9, MEMORY[0x24BE45A90]);
  v17 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v8);
  v25 = v17;
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a1;
  v18[3] = a2;
  v18[4] = a3;
  v18[5] = a4;
  swift_retain();
  v19 = a4;
  sub_21FC5B184();
  sub_21FAAC968(0, &qword_25554E190, (void (*)(uint64_t))sub_21FC3C330);
  type metadata accessor for ClinicalSharingQueryOutput(0);
  sub_21FAAC968(0, (unint64_t *)&qword_25406CA10, (void (*)(uint64_t))type metadata accessor for ClinicalSharingQueryOutput);
  sub_21FAAB3C8(&qword_25554E1A8, &qword_25554E190, (void (*)(uint64_t))sub_21FC3C330);
  sub_21FAAB3C8(&qword_25406CA08, (unint64_t *)&qword_25406CA10, (void (*)(uint64_t))type metadata accessor for ClinicalSharingQueryOutput);
  sub_21FC5B34C();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  sub_21FA2A08C(&qword_25554E1B8, (uint64_t (*)(uint64_t))sub_21FC3C248, MEMORY[0x24BDB98F0]);
  v20 = v23;
  v21 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v16, v20);
  return v21;
}

uint64_t sub_21FC3AC78@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t, _QWORD, uint64_t, uint64_t)@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(uint64_t, _QWORD, uint64_t, uint64_t);
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;

  v26 = a6;
  sub_21FA84D24();
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC3C3CC();
  v17 = v16;
  v25 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_21FC3AE6C(*a1, a2, a3, a4, a5);
  swift_retain();
  v21 = a5;
  v22 = sub_21FC3C46C(v20, a2, a3, a4, v21);
  swift_bridgeObjectRelease();

  swift_release();
  v27 = v22;
  sub_21FA2D1A0(0, &qword_25553FF10, type metadata accessor for ClinicalSharingQueryOutput, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_21FA84DB8();
  sub_21FC5B748();
  swift_bridgeObjectRelease();
  sub_21FA2CDB4();
  sub_21FC5B118();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  sub_21FA2A08C(&qword_25554E1C8, (uint64_t (*)(uint64_t))sub_21FC3C3CC, MEMORY[0x24BDB9970]);
  v23 = sub_21FC5B280();
  result = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v19, v17);
  *v26 = v23;
  return result;
}

uint64_t sub_21FC3AE6C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, _QWORD, uint64_t, uint64_t))
{
  char *v5;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  id v35;
  void *v36;
  id v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  unint64_t v41;
  uint64_t v42;
  id v43;
  unint64_t v44;
  void *v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v101[2];
  _QWORD *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  void (*v111)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;

  v111 = a5;
  v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_21FA2D1A0(0, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v119 = (uint64_t)v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v118 = (uint64_t)v101 - v14;
  v116 = type metadata accessor for PBCategorySeries(0);
  v15 = MEMORY[0x24BDAC7A8](v116);
  v106 = (char *)v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v107 = (uint64_t)v101 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v104 = (char *)v101 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v105 = (uint64_t)v101 - v21;
  sub_21FA2D1A0(0, &qword_25553E0F8, type metadata accessor for PBDateRange, v10);
  MEMORY[0x24BDAC7A8](v22);
  v115 = (uint64_t)v101 - v23;
  v117 = type metadata accessor for PBTypedData(0);
  v108 = *(_QWORD *)(v117 - 8);
  v24 = MEMORY[0x24BDAC7A8](v117);
  v26 = (char *)v101 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)v101 - v27;
  sub_21FA2D1A0(0, &qword_25553E0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], v10);
  MEMORY[0x24BDAC7A8](v29);
  v103 = (char *)v101 - v30;
  v114 = type metadata accessor for PBDateRange(0);
  v31 = *(_QWORD **)(v114 - 8);
  MEMORY[0x24BDAC7A8](v114);
  v120 = (uint64_t)v101 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v33 = sub_21FC5BC7C();
  }
  else
  {
    v33 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v121 = v28;
  v109 = v26;
  v113 = a4;
  v112 = a3;
  if (v33)
  {
    if (v33 < 1)
    {
      __break(1u);
      goto LABEL_45;
    }
    v102 = v31;
    v110 = a2;
    for (i = 0; i != v33; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v35 = (id)MEMORY[0x2207D057C](i, a1);
      else
        v35 = *(id *)(a1 + 8 * i + 32);
      v36 = v35;
      v37 = objc_msgSend(v35, sel_periods);
      sub_21FA5BE58(0, &qword_25554E1D0);
      v38 = sub_21FC5B7A8();

      if (v38 >> 62)
      {
        swift_bridgeObjectRetain();
        v39 = sub_21FC5BC7C();
        swift_bridgeObjectRelease();
      }
      else
      {
        v39 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v39 > 0)
        goto LABEL_16;
      v40 = objc_msgSend(v36, sel_schedules);
      sub_21FA5BE58(0, &qword_25554E1D8);
      v41 = sub_21FC5B7A8();

      if (v41 >> 62)
      {
        swift_bridgeObjectRetain();
        v42 = sub_21FC5BC7C();
        swift_bridgeObjectRelease();
      }
      else
      {
        v42 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v42 > 0
        || (v43 = objc_msgSend(v36, sel_sleepDurationGoal), v43, v43))
      {
LABEL_16:
        sub_21FC5BBE0();
        sub_21FC5BC10();
        sub_21FC5BC1C();
        sub_21FC5BBEC();
      }
      else
      {

      }
    }
    swift_bridgeObjectRelease();
    v44 = v122;
    v28 = v121;
    a2 = v110;
    a4 = v113;
    a3 = v112;
    v31 = v102;
  }
  else
  {
    swift_bridgeObjectRelease();
    v44 = MEMORY[0x24BEE4AF8];
  }
  v33 = (uint64_t)v111;
  if ((v44 & 0x8000000000000000) == 0 && (v44 & 0x4000000000000000) == 0)
  {
    if (*(_QWORD *)(v44 + 16))
      goto LABEL_26;
LABEL_42:
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  swift_retain();
  v99 = sub_21FC5BC7C();
  swift_release();
  if (!v99)
    goto LABEL_42;
LABEL_26:
  v110 = v44;
  v45 = (void *)objc_opt_self();
  v46 = (void *)sub_21FC5AB6C();
  v47 = objc_msgSend(v45, sel_hk_sleepDayIntervalForMorningIndexRange_calendar_, a3, a4, v46);

  v48 = (uint64_t)v103;
  v102 = v47;
  sub_21FC5A674();
  v49 = sub_21FC5A6C8();
  v50 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878];
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v48, 0, 1, v49);
  v51 = v120;
  sub_21FBE816C(5, 1, v48, a2);
  sub_21FA2D1F8(v48, &qword_25553E0E8, v50);
  v52 = v51;
  v53 = v115;
  sub_21FA2D120(v52, v115, type metadata accessor for PBDateRange);
  v103 = (char *)v31[7];
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v103)(v53, 0, 1, v114);
  sub_21FBE9BFC(v53, (void *)v33, (uint64_t)v28);
  sub_21FA2D1F8(v53, &qword_25553E0F8, type metadata accessor for PBDateRange);
  v5 = v104;
  sub_21FC5AD10();
  v31 = (_QWORD *)*(int *)(v116 + 20);
  if (qword_25553D868 != -1)
LABEL_45:
    swift_once();
  *(_QWORD *)((char *)v31 + (_QWORD)v5) = qword_255543A10;
  swift_retain();
  v54 = (id)v33;
  swift_retain();
  v55 = sub_21FC3C81C(MEMORY[0x24BEE4AF8], v110, a2, a3, a4, (uint64_t)v54);
  v101[1] = 0;
  v56 = v54;

  v57 = a2;
  swift_release();
  v58 = (uint64_t)v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBCategorySeries._StorageClass(0);
    swift_allocObject();
    v59 = swift_retain();
    v28 = v121;
    *(_QWORD *)((char *)v31 + (_QWORD)v5) = sub_21FB4D47C(v59);
    swift_release();
  }
  v60 = (unint64_t *)(*(_QWORD *)((char *)v31 + (_QWORD)v5)
                           + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBCategorySeriesP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__events);
  swift_beginAccess();
  *v60 = v55;
  swift_bridgeObjectRelease();
  v61 = v58;
  v62 = v105;
  sub_21FA2D23C(v61, v105, type metadata accessor for PBCategorySeries);
  v63 = *(int *)(v117 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBTypedData._StorageClass(0);
    swift_allocObject();
    v64 = swift_retain();
    *(_QWORD *)&v28[v63] = sub_21FA3A458(v64);
    swift_release();
  }
  v65 = *(_QWORD *)&v28[v63];
  v66 = v62;
  v67 = v118;
  sub_21FA2D23C(v66, v118, type metadata accessor for PBCategorySeries);
  v68 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  swift_storeEnumTagMultiPayload();
  v111 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56);
  v111(v67, 0, 1, v68);
  v69 = v67;
  v70 = v119;
  sub_21FA2D280(v69, v119, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v71 = v65
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  swift_retain();
  v72 = (uint64_t)v121;
  sub_21FA2D2D8(v70, v71, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  swift_endAccess();
  swift_release();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBTypedData._StorageClass(0);
    swift_allocObject();
    v73 = swift_retain();
    *(_QWORD *)(v72 + v63) = sub_21FA3A458(v73);
    swift_release();
  }
  v74 = *(_QWORD *)(v72 + v63);
  swift_beginAccess();
  *(_QWORD *)(v74 + 16) = 84;
  *(_BYTE *)(v74 + 24) = 1;
  v75 = v115;
  sub_21FA2D120(v120, v115, type metadata accessor for PBDateRange);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v103)(v75, 0, 1, v114);
  v76 = (uint64_t)v109;
  v77 = v112;
  v78 = v113;
  sub_21FBE9BFC(v75, v56, (uint64_t)v109);
  sub_21FA2D1F8(v75, &qword_25553E0F8, type metadata accessor for PBDateRange);
  v79 = (uint64_t)v106;
  sub_21FC5AD10();
  v80 = *(int *)(v116 + 20);
  *(_QWORD *)(v79 + v80) = qword_255543A10;
  swift_retain();
  v81 = v56;
  swift_retain();
  v82 = sub_21FC3C960(MEMORY[0x24BEE4AF8], v110, v57, v77, v78, (uint64_t)v81);

  swift_release();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBCategorySeries._StorageClass(0);
    swift_allocObject();
    v83 = swift_retain();
    *(_QWORD *)(v79 + v80) = sub_21FB4D47C(v83);
    swift_release();
  }
  v84 = (unint64_t *)(*(_QWORD *)(v79 + v80)
                           + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBCategorySeriesP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__events);
  swift_beginAccess();
  *v84 = v82;
  swift_bridgeObjectRelease();
  v85 = v107;
  sub_21FA2D23C(v79, v107, type metadata accessor for PBCategorySeries);
  swift_release();
  v86 = *(int *)(v117 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBTypedData._StorageClass(0);
    swift_allocObject();
    v87 = swift_retain();
    *(_QWORD *)(v76 + v86) = sub_21FA3A458(v87);
    swift_release();
  }
  v88 = *(_QWORD *)(v76 + v86);
  v89 = v118;
  sub_21FA2D23C(v85, v118, type metadata accessor for PBCategorySeries);
  swift_storeEnumTagMultiPayload();
  v111(v89, 0, 1, v68);
  v90 = v119;
  sub_21FA2D280(v89, v119, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  v91 = v88
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  swift_retain();
  sub_21FA2D2D8(v90, v91, &qword_25553E498, type metadata accessor for PBTypedData.OneOf_Raw);
  swift_endAccess();
  swift_release();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBTypedData._StorageClass(0);
    swift_allocObject();
    v92 = swift_retain();
    *(_QWORD *)(v76 + v86) = sub_21FA3A458(v92);
    swift_release();
  }
  v93 = *(_QWORD *)(v76 + v86);
  swift_beginAccess();
  *(_QWORD *)(v93 + 16) = 115;
  *(_BYTE *)(v93 + 24) = 1;
  sub_21FA2D1A0(0, &qword_25553FE70, type metadata accessor for PBTypedData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v94 = *(_QWORD *)(v108 + 72);
  v95 = (*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80);
  v96 = swift_allocObject();
  *(_OWORD *)(v96 + 16) = xmmword_21FC5F720;
  v97 = v96 + v95;
  v98 = (uint64_t)v121;
  sub_21FA2D120((uint64_t)v121, v97, type metadata accessor for PBTypedData);
  sub_21FA2D23C(v76, v97 + v94, type metadata accessor for PBTypedData);

  sub_21FA326EC(v98, type metadata accessor for PBTypedData);
  sub_21FA326EC(v120, type metadata accessor for PBDateRange);
  return v96;
}

uint64_t sub_21FC3BBB4(unint64_t *a1, id *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  id v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  void *v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  id v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v43 = a6;
  v41 = a4;
  v42 = a5;
  v40 = a3;
  v8 = type metadata accessor for PBCategorySeries.Event(0);
  v39 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(*a2, sel_periods);
  sub_21FA5BE58(0, &qword_25554E1D0);
  v12 = sub_21FC5B7A8();

  if (v12 >> 62)
    goto LABEL_29;
  v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v13)
  {
    v14 = 0;
    v34 = a1;
    v35 = v12 & 0xC000000000000001;
    v30 = v12 + 32;
    v31 = v12 & 0xFFFFFFFFFFFFFF8;
    v38 = v10;
    v32 = v13;
    v33 = v12;
    while (1)
    {
      if (v35)
      {
        v15 = (id)MEMORY[0x2207D057C](v14, v12);
      }
      else
      {
        if (v14 >= *(_QWORD *)(v31 + 16))
          goto LABEL_28;
        v15 = *(id *)(v30 + 8 * v14);
      }
      v16 = v15;
      if (__OFADD__(v14++, 1))
        break;
      v18 = objc_msgSend(v15, sel_segments);
      sub_21FA5BE58(0, &qword_25554E1E0);
      v19 = sub_21FC5B7A8();

      if (v19 >> 62)
      {
        swift_bridgeObjectRetain();
        v20 = sub_21FC5BC7C();
        swift_bridgeObjectRelease();
        if (!v20)
          goto LABEL_24;
LABEL_12:
        if (v20 < 1)
          goto LABEL_27;
        v36 = v16;
        v37 = v14;
        v21 = 0;
        v22 = *a1;
        do
        {
          if ((v19 & 0xC000000000000001) != 0)
            v23 = (id)MEMORY[0x2207D057C](v21, v19);
          else
            v23 = *(id *)(v19 + 8 * v21 + 32);
          v24 = v23;
          v25 = (void *)MEMORY[0x2207D0ABC]();
          sub_21FC3BF14(v24, v40, v41, v42, v43, (uint64_t)v10);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v22 = sub_21FA7E9D8(0, *(_QWORD *)(v22 + 16) + 1, 1, v22);
          v27 = *(_QWORD *)(v22 + 16);
          v26 = *(_QWORD *)(v22 + 24);
          if (v27 >= v26 >> 1)
            v22 = sub_21FA7E9D8(v26 > 1, v27 + 1, 1, v22);
          ++v21;
          *(_QWORD *)(v22 + 16) = v27 + 1;
          v10 = v38;
          sub_21FA2D23C((uint64_t)v38, v22+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(_QWORD *)(v39 + 72) * v27, type metadata accessor for PBCategorySeries.Event);
          objc_autoreleasePoolPop(v25);

        }
        while (v20 != v21);

        swift_bridgeObjectRelease();
        v12 = v33;
        a1 = v34;
        *v34 = v22;
        v13 = v32;
        v14 = v37;
        if (v37 == v32)
          return swift_bridgeObjectRelease();
      }
      else
      {
        v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v20)
          goto LABEL_12;
LABEL_24:

        swift_bridgeObjectRelease();
        if (v14 == v13)
          return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    swift_bridgeObjectRetain();
    v13 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_21FC3BF14@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  void (*v24)(char *, _QWORD, uint64_t, uint64_t);
  id v25;
  uint64_t result;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  char v40;

  v36 = a4;
  v37 = a5;
  v34 = a2;
  v35 = a3;
  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v32 - v12;
  v14 = type metadata accessor for PBDateRange(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_21FC5A6C8();
  v32 = *(_QWORD *)(v17 - 8);
  v33 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = a1;
  v20 = objc_msgSend(a1, sel_dateInterval);
  sub_21FC5A674();

  sub_21FC5AD10();
  v21 = *(int *)(type metadata accessor for PBCategorySeries.Event(0) + 20);
  if (qword_25553D890 != -1)
    swift_once();
  *(_QWORD *)(a6 + v21) = qword_255543A68;
  swift_retain();
  sub_21FC5A6A4();
  v22 = sub_21FC5AAAC();
  v23 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
  v24 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v24(v13, 0, 1, v22);
  sub_21FC5A680();
  v24(v11, 0, 1, v22);
  sub_21FC038A4((uint64_t)v13, (uint64_t)v11, v34, (uint64_t)v16);
  sub_21FA2D1F8((uint64_t)v11, (unint64_t *)&qword_25406AAE8, v23);
  sub_21FA2D1F8((uint64_t)v13, (unint64_t *)&qword_25406AAE8, v23);
  PBCategorySeries.Event.recordedTime.setter((uint64_t)v16);
  v25 = v38;
  result = (uint64_t)objc_msgSend(v38, sel_category);
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_11;
  }
  v27 = result;
  if (result > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBCategorySeries.Event._StorageClass(0);
    swift_allocObject();
    v28 = swift_retain();
    *(_QWORD *)(a6 + v21) = sub_21FB4E9EC(v28);
    swift_release();
  }
  v29 = *(_QWORD *)(a6 + v21);
  swift_beginAccess();
  *(_DWORD *)(v29 + 16) = v27;
  v30 = (unint64_t)objc_msgSend(v25, sel_category);
  v31 = 0;
  if (v30 <= 5)
    v31 = qword_21FC73CD8[v30];
  v39 = v31;
  v40 = 1;
  PBCategorySeries.Event.sleepAnalysis.setter(&v39);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v19, v33);
}

uint64_t sub_21FC3C23C()
{
  uint64_t v0;

  return sub_21FC3A9E4(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

void sub_21FC3C248()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554E188)
  {
    sub_21FAAC968(255, (unint64_t *)&qword_25406CA10, (void (*)(uint64_t))type metadata accessor for ClinicalSharingQueryOutput);
    sub_21FAAC968(255, &qword_25554E190, (void (*)(uint64_t))sub_21FC3C330);
    sub_21FAAB3C8(&qword_25406CA08, (unint64_t *)&qword_25406CA10, (void (*)(uint64_t))type metadata accessor for ClinicalSharingQueryOutput);
    sub_21FAAB3C8(&qword_25554E1A8, &qword_25554E190, (void (*)(uint64_t))sub_21FC3C330);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554E188);
  }
}

void sub_21FC3C330()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554E198)
  {
    sub_21FA5BE58(255, &qword_25554E1A0);
    v0 = sub_21FC5B7F0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554E198);
  }
}

uint64_t sub_21FC3C394()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_21FC3C3C0@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FC3AC78(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 40), a2);
}

void sub_21FC3C3CC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554E1C0)
  {
    sub_21FA2D1A0(255, &qword_25553FF10, type metadata accessor for ClinicalSharingQueryOutput, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FA2CDB4();
    sub_21FA84DB8();
    v0 = sub_21FC5B130();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554E1C0);
  }
}

unint64_t sub_21FC3C46C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t Output;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;

  v42 = a4;
  v43 = a5;
  v41 = a3;
  v8 = sub_21FC5ACD4();
  v39 = *(_QWORD *)(v8 - 8);
  v40 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (_QWORD *)((char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_21FA2D1A0(0, &qword_25553FF60, type metadata accessor for ClinicalSharingQueryOutput, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v34 - v12;
  Output = type metadata accessor for ClinicalSharingQueryOutput(0);
  v14 = *(_QWORD *)(Output - 8);
  v15 = MEMORY[0x24BDAC7A8](Output);
  v44 = (uint64_t)v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v35 = (uint64_t)v34 - v17;
  v18 = *(_QWORD *)(a1 + 16);
  if (!v18)
    return MEMORY[0x24BEE4AF8];
  v45 = v5;
  v19 = *(_QWORD *)(type metadata accessor for PBTypedData(0) - 8);
  v20 = a1 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  v37 = a2;
  v21 = *(_QWORD *)(a2 + 56);
  v36 = *(_QWORD *)(v19 + 72);
  v34[1] = a1;
  swift_bridgeObjectRetain();
  v22 = MEMORY[0x24BEE4AF8];
  do
  {
    swift_bridgeObjectRetain();
    v23 = sub_21FBEABD8(v43, v10);
    MEMORY[0x24BDAC7A8](v23);
    v34[-2] = v10;
    swift_bridgeObjectRetain();
    v24 = v45;
    v25 = sub_21FBE9FC4(MEMORY[0x24BEE4AF8], (void (*)(uint64_t *, char *))sub_21FA85168, (uint64_t)&v34[-4], v21);
    v45 = v24;
    swift_bridgeObjectRelease_n();
    (*(void (**)(_QWORD *, uint64_t))(v39 + 8))(v10, v40);
    if (*(_QWORD *)(v25 + 16))
    {
      sub_21FA2D120(v20, (uint64_t)v13, type metadata accessor for PBTypedData);
      v26 = sub_21FBF27F0(v25);
      swift_bridgeObjectRelease();
      v27 = Output;
      *(_QWORD *)&v13[*(int *)(Output + 20)] = v26;
      v28 = &v13[*(int *)(v27 + 24)];
      *(_QWORD *)v28 = 0;
      *((_QWORD *)v28 + 1) = 0;
      (*(void (**)(char *, _QWORD, uint64_t))(v14 + 56))(v13, 0, 1);
    }
    else
    {
      v29 = Output;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v13, 1, 1, Output);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v29) == 1)
      {
        sub_21FA2D1F8((uint64_t)v13, &qword_25553FF60, type metadata accessor for ClinicalSharingQueryOutput);
        goto LABEL_4;
      }
    }
    v30 = v35;
    sub_21FA2D23C((uint64_t)v13, v35, type metadata accessor for ClinicalSharingQueryOutput);
    sub_21FA2D23C(v30, v44, type metadata accessor for ClinicalSharingQueryOutput);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v22 = sub_21FA7E0D8(0, *(_QWORD *)(v22 + 16) + 1, 1, v22);
    v32 = *(_QWORD *)(v22 + 16);
    v31 = *(_QWORD *)(v22 + 24);
    if (v32 >= v31 >> 1)
      v22 = sub_21FA7E0D8(v31 > 1, v32 + 1, 1, v22);
    *(_QWORD *)(v22 + 16) = v32 + 1;
    sub_21FA2D23C(v44, v22+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v32, type metadata accessor for ClinicalSharingQueryOutput);
LABEL_4:
    v20 += v36;
    --v18;
  }
  while (v18);
  swift_bridgeObjectRelease();
  return v22;
}

unint64_t sub_21FC3C81C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v10;
  uint64_t v11;
  uint64_t i;
  id v13;
  uint64_t v14;
  id v18;
  unint64_t v19;

  v19 = a1;
  v10 = (void *)a1;
  if (a2 >> 62)
    goto LABEL_13;
  v11 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v11; v11 = sub_21FC5BC7C())
  {
    for (i = 4; ; ++i)
    {
      v13 = (a2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x2207D057C](i - 4, a2) : *(id *)(a2 + 8 * i);
      v10 = v13;
      v14 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v18 = v13;
      sub_21FC3BBB4(&v19, &v18, a3, a4, a5, a6);
      if (v6)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        return (unint64_t)v10;
      }

      if (v14 == v11)
      {
        swift_bridgeObjectRelease();
        return v19;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return (unint64_t)v10;
}

unint64_t sub_21FC3C960(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  void *v7;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  void *v41;
  char *v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;

  v7 = v6;
  v77 = a5;
  v78 = a6;
  v76 = a4;
  v85 = a3;
  v88 = a1;
  v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_21FA2D1A0(0, &qword_25553E0F8, type metadata accessor for PBDateRange, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v75 = (uint64_t)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v74 = (uint64_t)&v68 - v13;
  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], v9);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v73 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v72 = (char *)&v68 - v17;
  v71 = type metadata accessor for PBDateRange(0);
  v70 = *(_QWORD *)(v71 - 8);
  MEMORY[0x24BDAC7A8](v71);
  v82 = (uint64_t)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D1A0(0, &qword_25553E0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], v9);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v68 - v23;
  v25 = sub_21FC5A6C8();
  v92 = *(_QWORD *)(v25 - 8);
  v93 = v25;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (unint64_t)&v68 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D1A0(0, &qword_25554D348, type metadata accessor for PBCategorySeries.Event, v9);
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v68 - v29;
  v31 = type metadata accessor for PBCategorySeries.Event(0);
  v89 = *(_QWORD *)(v31 - 8);
  v90 = v31;
  v32 = MEMORY[0x24BDAC7A8](v31);
  v81 = (uint64_t)&v68 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v32);
  v80 = (uint64_t)&v68 - v34;
  if (a2 >> 62)
  {
LABEL_27:
    swift_bridgeObjectRetain();
    v35 = sub_21FC5BC7C();
    if (v35)
      goto LABEL_3;
  }
  else
  {
    v35 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v35)
    {
LABEL_3:
      v79 = v27;
      v68 = v7;
      v87 = a2 & 0xC000000000000001;
      v36 = 4;
      v84 = a2;
      v69 = v22;
      v83 = v24;
      v86 = v35;
      do
      {
        v38 = (uint64_t)v30;
        v30 = (char *)(v36 - 4);
        if (v87)
          v39 = (id)MEMORY[0x2207D057C](v36 - 4, a2);
        else
          v39 = *(id *)(a2 + 8 * v36);
        v7 = v39;
        v40 = v36 - 3;
        if (__OFADD__(v30, 1))
        {
          __break(1u);
          goto LABEL_27;
        }
        v41 = (void *)MEMORY[0x2207D0ABC]();
        v42 = (char *)objc_msgSend(v7, sel_primarySchedule);
        v94 = v41;
        if (v42)
        {
          v27 = (unint64_t)v42;
          v91 = v7;
          v43 = objc_msgSend(v7, sel_morningIndex);
          v44 = (void *)sub_21FC5AB6C();
          v45 = objc_msgSend((id)v27, sel_bedtimeDateIntervalForMorningIndex_calendar_, v43, v44);

          if (v45)
          {
            sub_21FC5A674();

            v46 = 0;
          }
          else
          {
            v46 = 1;
          }
          v24 = v83;
          v48 = v92;
          v47 = v93;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v92 + 56))(v22, v46, 1, v93);
          sub_21FA2D280((uint64_t)v22, (uint64_t)v24, &qword_25553E0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878]);
          v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48))(v24, 1, v47);
          a2 = v84;
          v30 = (char *)v38;
          v7 = v91;
          if (v49 != 1)
          {
            (*(void (**)(unint64_t, char *, uint64_t))(v92 + 32))(v79, v24, v93);
            sub_21FC5AD10();
            v50 = *(int *)(v90 + 20);
            if (qword_25553D890 != -1)
              swift_once();
            *(_QWORD *)(v38 + v50) = qword_255543A68;
            swift_retain();
            v51 = (uint64_t)v72;
            sub_21FC5A6A4();
            v52 = sub_21FC5AAAC();
            v53 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56);
            v53(v51, 0, 1, v52);
            v54 = (uint64_t)v73;
            sub_21FC5A680();
            v53(v54, 0, 1, v52);
            sub_21FC038A4(v51, v54, v85, v82);
            v55 = v54;
            v30 = (char *)v38;
            v56 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
            sub_21FA2D1F8(v55, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
            sub_21FA2D1F8(v51, (unint64_t *)&qword_25406AAE8, v56);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              type metadata accessor for PBCategorySeries.Event._StorageClass(0);
              swift_allocObject();
              v57 = swift_retain();
              *(_QWORD *)(v38 + v50) = sub_21FB4E9EC(v57);
              swift_release();
            }
            v58 = *(_QWORD *)(v38 + v50);
            v59 = v74;
            sub_21FA2D23C(v82, v74, type metadata accessor for PBDateRange);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v70 + 56))(v59, 0, 1, v71);
            v60 = v75;
            sub_21FA2D280(v59, v75, &qword_25553E0F8, type metadata accessor for PBDateRange);
            v61 = v58
                + OBJC_IVAR____TtCVV19HealthRecordsDaemon16PBCategorySeries5EventP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__recordedTime;
            swift_beginAccess();
            swift_retain();
            sub_21FA2D2D8(v60, v61, &qword_25553E0F8, type metadata accessor for PBDateRange);
            swift_endAccess();
            swift_release();
            (*(void (**)(unint64_t, uint64_t))(v92 + 8))(v79, v93);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v89 + 56))(v38, 0, 1, v90);
            v62 = v80;
            sub_21FA2D23C(v38, v80, type metadata accessor for PBCategorySeries.Event);
            sub_21FA2D120(v62, v81, type metadata accessor for PBCategorySeries.Event);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v37 = v86;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              v88 = sub_21FA7E9D8(0, *(_QWORD *)(v88 + 16) + 1, 1, v88);
            v24 = v83;
            a2 = v84;
            v22 = v69;
            v27 = *(_QWORD *)(v88 + 16);
            v64 = *(_QWORD *)(v88 + 24);
            if (v27 >= v64 >> 1)
              v88 = sub_21FA7E9D8(v64 > 1, v27 + 1, 1, v88);
            v65 = v88;
            v66 = v89;
            *(_QWORD *)(v88 + 16) = v27 + 1;
            sub_21FA2D23C(v81, v65+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(_QWORD *)(v66 + 72) * v27, type metadata accessor for PBCategorySeries.Event);
            sub_21FA326EC(v80, type metadata accessor for PBCategorySeries.Event);
            v7 = v91;
            goto LABEL_6;
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v92 + 56))(v24, 1, 1, v93);
          v30 = (char *)v38;
        }
        sub_21FA2D1F8((uint64_t)v24, &qword_25553E0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878]);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v89 + 56))(v30, 1, 1, v90);
        sub_21FA2D1F8((uint64_t)v30, &qword_25554D348, type metadata accessor for PBCategorySeries.Event);
        v37 = v86;
LABEL_6:
        objc_autoreleasePoolPop(v94);

        ++v36;
      }
      while (v40 != v37);
    }
  }
  swift_bridgeObjectRelease();
  return v88;
}

void *sub_21FC3D19C()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;

  sub_21FC3D2AC((id)0x31E);
  if (v0)
  {
    v1 = v0;
    if (v0 >> 62)
      goto LABEL_16;
    v2 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v2; v2 = sub_21FC5BC7C())
    {
      v3 = 4;
      while (1)
      {
        v4 = (v1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x2207D057C](v3 - 4, v1) : *(id *)(v1 + 8 * v3);
        v5 = v4;
        v6 = v3 - 3;
        if (__OFADD__(v3 - 4, 1))
          break;
        v7 = objc_msgSend(v4, sel_RxNormCoding);

        if (v7)
        {
          swift_bridgeObjectRelease_n();
          return v5;
        }

        ++v3;
        if (v6 == v2)
          goto LABEL_11;
      }
      __break(1u);
LABEL_16:
      swift_bridgeObjectRetain();
    }
LABEL_11:
    swift_bridgeObjectRelease_n();
  }
  return 0;
}

void sub_21FC3D2AC(id a1)
{
  void *v1;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;

  v3 = objc_msgSend(v1, sel_relationships);
  if (v3)
  {
    sub_21FC3D54C();
    v4 = sub_21FC5B7A8();

    v5 = MEMORY[0x24BEE4AF8];
    v16 = MEMORY[0x24BEE4AF8];
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      v6 = sub_21FC5BC7C();
      swift_bridgeObjectRelease();
      if (v6)
      {
LABEL_4:
        if (v6 < 1)
        {
          __break(1u);
          goto LABEL_34;
        }
        for (i = 0; i != v6; ++i)
        {
          if ((v4 & 0xC000000000000001) != 0)
            v8 = (id)MEMORY[0x2207D057C](i, v4);
          else
            v8 = *(id *)(v4 + 8 * i + 32);
          v9 = v8;
          if (objc_msgSend(v8, sel_type) == a1)
          {
            sub_21FC5BBE0();
            sub_21FC5BC10();
            sub_21FC5BC1C();
            sub_21FC5BBEC();
          }
          else
          {

          }
        }
        swift_bridgeObjectRelease();
        v10 = v16;
        v17 = v5;
        if (v10 < 0)
          goto LABEL_30;
LABEL_17:
        if ((v10 & 0x4000000000000000) == 0)
        {
          v11 = *(_QWORD *)(v10 + 16);
          swift_retain();
          if (!v11)
          {
LABEL_31:
            swift_release();
            swift_release();
            return;
          }
          goto LABEL_19;
        }
LABEL_30:
        swift_retain();
        v11 = sub_21FC5BC7C();
        if (!v11)
          goto LABEL_31;
LABEL_19:
        if (v11 >= 1)
        {
          for (j = 0; j != v11; ++j)
          {
            if ((v10 & 0xC000000000000001) != 0)
              v13 = (id)MEMORY[0x2207D057C](j, v10);
            else
              v13 = *(id *)(v10 + 8 * j + 32);
            v14 = v13;
            v15 = objc_msgSend(v13, sel_destination);

            if (v15)
            {
              MEMORY[0x2207D0180]();
              if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                sub_21FC5B7CC();
              sub_21FC5B7E4();
              sub_21FC5B7C0();
            }
          }
          goto LABEL_31;
        }
LABEL_34:
        __break(1u);
        return;
      }
    }
    else
    {
      v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v6)
        goto LABEL_4;
    }
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
    v17 = v5;
    if ((MEMORY[0x24BEE4AF8] & 0x8000000000000000) != 0)
      goto LABEL_30;
    goto LABEL_17;
  }
}

unint64_t sub_21FC3D54C()
{
  unint64_t result;

  result = qword_25554E1E8;
  if (!qword_25554E1E8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25554E1E8);
  }
  return result;
}

uint64_t destroy for ClinicalSharingFHIRResource(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 48);
  if (result != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for ClinicalSharingFHIRResource(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = a2[4];
  v5 = a2 + 5;
  v6 = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 == 1)
  {
    *(_OWORD *)(a1 + 40) = *v5;
  }
  else
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)v5;
    *(_QWORD *)(a1 + 48) = v6;
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for ClinicalSharingFHIRResource(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[6];
  if (a1[6] != 1)
  {
    if (v4 != 1)
    {
      a1[5] = a2[5];
      a1[6] = a2[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_21FC3D75C((uint64_t)(a1 + 5));
    goto LABEL_6;
  }
  if (v4 == 1)
  {
LABEL_6:
    *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
    return a1;
  }
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21FC3D75C(uint64_t a1)
{
  destroy for SexMetricField();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for ClinicalSharingFHIRResource(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  v6 = a2 + 5;
  if (a1[6] != 1)
  {
    v7 = a2[6];
    if (v7 != 1)
    {
      a1[5] = *v6;
      a1[6] = v7;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_21FC3D75C((uint64_t)(a1 + 5));
  }
  *(_OWORD *)(a1 + 5) = *(_OWORD *)v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for ClinicalSharingFHIRResource(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClinicalSharingFHIRResource(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingFHIRSearchEntry()
{
  return &type metadata for ClinicalSharingFHIRSearchEntry;
}

uint64_t sub_21FC3D8EC()
{
  return 0x656372756F736572;
}

uint64_t sub_21FC3D904@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x656372756F736572 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_21FC5BDF0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_21FC3D998()
{
  sub_21FC3DBEC();
  return sub_21FC5BF10();
}

uint64_t sub_21FC3D9C0()
{
  sub_21FC3DBEC();
  return sub_21FC5BF1C();
}

double sub_21FC3D9E8@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_21FC3DA34(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_21FC3DA34@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  sub_21FC3DB94();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_21FC3DBEC();
  sub_21FC5BEE0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  sub_21FC3DC30();
  sub_21FC5BD30();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v14 = v17;
  v15 = v16;
  v13 = v18;
  v10 = v19;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v12 = v14;
  *(_OWORD *)a2 = v15;
  *(_OWORD *)(a2 + 16) = v12;
  *(_OWORD *)(a2 + 32) = v13;
  *(_QWORD *)(a2 + 48) = v10;
  return result;
}

void sub_21FC3DB94()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554E1F0)
  {
    sub_21FC3DBEC();
    v0 = sub_21FC5BD3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554E1F0);
  }
}

unint64_t sub_21FC3DBEC()
{
  unint64_t result;

  result = qword_25554E1F8;
  if (!qword_25554E1F8)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC73E2C, &type metadata for ClinicalSharingFHIRSearchEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554E1F8);
  }
  return result;
}

unint64_t sub_21FC3DC30()
{
  unint64_t result;

  result = qword_25554E200;
  if (!qword_25554E200)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC746FC, &type metadata for ClinicalSharingFHIRResource);
    atomic_store(result, (unint64_t *)&qword_25554E200);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ClinicalSharingFHIRSearchEntry.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21FC3DCB4 + 4 * byte_21FC73D10[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21FC3DCD4 + 4 * byte_21FC73D15[v4]))();
}

_BYTE *sub_21FC3DCB4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21FC3DCD4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21FC3DCDC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21FC3DCE4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21FC3DCEC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21FC3DCF4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingFHIRSearchEntry.CodingKeys()
{
  return &type metadata for ClinicalSharingFHIRSearchEntry.CodingKeys;
}

unint64_t sub_21FC3DD14()
{
  unint64_t result;

  result = qword_25554E208;
  if (!qword_25554E208)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC73E04, &type metadata for ClinicalSharingFHIRSearchEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554E208);
  }
  return result;
}

unint64_t sub_21FC3DD5C()
{
  unint64_t result;

  result = qword_25554E210;
  if (!qword_25554E210)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC73D74, &type metadata for ClinicalSharingFHIRSearchEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554E210);
  }
  return result;
}

unint64_t sub_21FC3DDA4()
{
  unint64_t result;

  result = qword_25554E218;
  if (!qword_25554E218)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC73D9C, &type metadata for ClinicalSharingFHIRSearchEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554E218);
  }
  return result;
}

uint64_t *sub_21FC3DDE8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_21FC5A98C();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    v10 = v9;
  }
  return a1;
}

void sub_21FC3DE74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_21FC5A98C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

}

uint64_t sub_21FC3DEB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v6 = sub_21FC5A98C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v9 = v8;
  return a1;
}

uint64_t sub_21FC3DF18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v6 = sub_21FC5A98C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  return a1;
}

uint64_t sub_21FC3DF80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_21FC5A98C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_21FC3DFDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = sub_21FC5A98C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  return a1;
}

uint64_t sub_21FC3E040()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FC3E04C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_21FC5A98C();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_21FC3E0C8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FC3E0D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_21FC5A98C();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for PublisherOutputWriter()
{
  uint64_t result;

  result = qword_25554E278;
  if (!qword_25554E278)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21FC3E188()
{
  uint64_t result;
  unint64_t v1;

  result = sub_21FC5A98C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

id sub_21FC3E1FC()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  id v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[2];

  v1 = objc_msgSend(v0, sel_sampleType);
  v2 = objc_msgSend(v1, sel_code);

  if (v2 != (id)15)
    return 0;
  v3 = objc_msgSend(v0, sel_metadata);
  if (v3)
  {
    v4 = sub_21FC5B568();

    v5 = sub_21FC5B604();
    if (*(_QWORD *)(v4 + 16) && (v7 = sub_21FA73F34(v5, v6), (v8 & 1) != 0))
    {
      sub_21FA2DB6C(*(_QWORD *)(v4 + 56) + 32 * v7, (uint64_t)&v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v12 + 1))
      {
        sub_21FA7B73C(&v11, v13);
        sub_21FA2DB6C((uint64_t)v13, (uint64_t)&v11);
        sub_21FA5F68C();
        if (swift_dynamicCast())
        {
          v3 = objc_msgSend(v10, sel_integerValue);

          __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
          return v3;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
        return 0;
      }
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    sub_21FA2DA9C((uint64_t)&v11);
    return 0;
  }
  return v3;
}

ValueMetadata *type metadata accessor for ClinicalSharingFHIRContent()
{
  return &type metadata for ClinicalSharingFHIRContent;
}

uint64_t sub_21FC3E3A8()
{
  return 0x656D686361747461;
}

uint64_t sub_21FC3E3C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x656D686361747461 && a2 == 0xEA0000000000746ELL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_21FC5BDF0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_21FC3E464()
{
  sub_21FC3E674();
  return sub_21FC5BF10();
}

uint64_t sub_21FC3E48C()
{
  sub_21FC3E674();
  return sub_21FC5BF1C();
}

_QWORD *sub_21FC3E4B4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_21FC3E4E0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

_QWORD *sub_21FC3E4E0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v10;

  sub_21FC3E61C();
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_21FC3E674();
  sub_21FC5BEE0();
  if (!v1)
  {
    sub_21FC3E6B8();
    sub_21FC5BD30();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v8 = v10;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v8;
}

void sub_21FC3E61C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554E2B0)
  {
    sub_21FC3E674();
    v0 = sub_21FC5BD3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554E2B0);
  }
}

unint64_t sub_21FC3E674()
{
  unint64_t result;

  result = qword_25554E2B8;
  if (!qword_25554E2B8)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC73FB8, &type metadata for ClinicalSharingFHIRContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554E2B8);
  }
  return result;
}

unint64_t sub_21FC3E6B8()
{
  unint64_t result;

  result = qword_25554E2C0;
  if (!qword_25554E2C0)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC5DF30, &type metadata for ClinicalSharingFHIRAttachment);
    atomic_store(result, (unint64_t *)&qword_25554E2C0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ClinicalSharingFHIRContent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21FC3E73C + 4 * asc_21FC73EA0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21FC3E75C + 4 * byte_21FC73EA5[v4]))();
}

_BYTE *sub_21FC3E73C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21FC3E75C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21FC3E764(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21FC3E76C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21FC3E774(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21FC3E77C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingFHIRContent.CodingKeys()
{
  return &type metadata for ClinicalSharingFHIRContent.CodingKeys;
}

unint64_t sub_21FC3E79C()
{
  unint64_t result;

  result = qword_25554E2C8;
  if (!qword_25554E2C8)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC73F90, &type metadata for ClinicalSharingFHIRContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554E2C8);
  }
  return result;
}

unint64_t sub_21FC3E7E4()
{
  unint64_t result;

  result = qword_25554E2D0;
  if (!qword_25554E2D0)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC73F00, &type metadata for ClinicalSharingFHIRContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554E2D0);
  }
  return result;
}

unint64_t sub_21FC3E82C()
{
  unint64_t result;

  result = qword_25554E2D8;
  if (!qword_25554E2D8)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC73F28, &type metadata for ClinicalSharingFHIRContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554E2D8);
  }
  return result;
}

void sub_21FC3E870(char a1)
{
  sub_21FC5BE8C();
  __asm { BR              X10 }
}

uint64_t sub_21FC3E8B8()
{
  sub_21FC5B67C();
  swift_bridgeObjectRelease();
  return sub_21FC5BEB0();
}

void sub_21FC3E924(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_21FC3E964()
{
  sub_21FC5B67C();
  return swift_bridgeObjectRelease();
}

void sub_21FC3E9F4(uint64_t a1, char a2)
{
  sub_21FC5BE8C();
  __asm { BR              X10 }
}

uint64_t sub_21FC3EA40()
{
  sub_21FC5B67C();
  swift_bridgeObjectRelease();
  return sub_21FC5BEB0();
}

void sub_21FC3EAE4(uint64_t a1, char a2)
{
  sub_21FC5BE8C();
  __asm { BR              X10 }
}

uint64_t sub_21FC3EB28()
{
  sub_21FC5B67C();
  swift_bridgeObjectRelease();
  return sub_21FC5BEB0();
}

void sub_21FC3EB94(char *a1)
{
  sub_21FA2DEE4(*a1);
}

void sub_21FC3EBA0()
{
  char *v0;

  sub_21FC3E870(*v0);
}

void sub_21FC3EBA8()
{
  __asm { BR              X10 }
}

uint64_t sub_21FC3EBDC()
{
  sub_21FC5B67C();
  return swift_bridgeObjectRelease();
}

void sub_21FC3EC34(uint64_t a1)
{
  char *v1;

  sub_21FC3EAE4(a1, *v1);
}

uint64_t sub_21FC3EC3C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_21FC401BC();
  *a1 = result;
  return result;
}

uint64_t sub_21FC3EC68()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_21FC3EC90 + 4 * byte_21FC7402C[*v0]))();
}

void sub_21FC3EC90(_QWORD *a1@<X8>)
{
  *a1 = 1701667182;
  a1[1] = 0xE400000000000000;
}

void sub_21FC3ECA4(_QWORD *a1@<X8>)
{
  *a1 = 0x6972755F6F676F6CLL;
  a1[1] = 0xE800000000000000;
}

void sub_21FC3ECC0(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x800000021FC74B50;
}

uint64_t sub_21FC3ECE0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21FC3ED08 + 4 * byte_21FC74030[*v0]))(7566185, 0xE300000000000000);
}

uint64_t sub_21FC3ED08()
{
  return 1701667182;
}

uint64_t sub_21FC3ED18()
{
  return 0x6972755F6F676F6CLL;
}

unint64_t sub_21FC3ED30()
{
  return 0xD000000000000011;
}

uint64_t sub_21FC3ED4C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_21FC401BC();
  *a1 = result;
  return result;
}

uint64_t sub_21FC3ED70()
{
  sub_21FC3F0B0();
  return sub_21FC5BF10();
}

uint64_t sub_21FC3ED98()
{
  sub_21FC3F0B0();
  return sub_21FC5BF1C();
}

uint64_t VHRDirectoryIssuer.iss.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_21FC5A98C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t VHRDirectoryIssuer.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for VHRDirectoryIssuer() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for VHRDirectoryIssuer()
{
  uint64_t result;

  result = qword_25554E350;
  if (!qword_25554E350)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t VHRDirectoryIssuer.logoURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for VHRDirectoryIssuer();
  return sub_21FA2D120(v1 + *(int *)(v3 + 24), a1, (uint64_t (*)(_QWORD))sub_21FA32580);
}

uint64_t VHRDirectoryIssuer.softwareLogoURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for VHRDirectoryIssuer();
  return sub_21FA2D120(v1 + *(int *)(v3 + 28), a1, (uint64_t (*)(_QWORD))sub_21FA32580);
}

uint64_t VHRDirectoryIssuer.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;

  sub_21FC3F4CC(0, &qword_25554E2E0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_21FC3F0B0();
  sub_21FC5BEEC();
  v13 = 0;
  sub_21FC5A98C();
  sub_21FAE2478(&qword_2555415E0, MEMORY[0x24BDCDAE0]);
  sub_21FC5BD9C();
  if (!v1)
  {
    type metadata accessor for VHRDirectoryIssuer();
    v12 = 1;
    sub_21FC5BD78();
    v11 = 2;
    sub_21FC5BD6C();
    v10 = 3;
    sub_21FC5BD6C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_21FC3F0B0()
{
  unint64_t result;

  result = qword_25554E2E8;
  if (!qword_25554E2E8)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC741DC, &type metadata for VHRDirectoryIssuer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554E2E8);
  }
  return result;
}

uint64_t VHRDirectoryIssuer.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  char v39;

  v28 = a2;
  sub_21FA32580();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v29 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v30 = (char *)&v26 - v6;
  v7 = sub_21FC5A98C();
  v31 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v33 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC3F4CC(0, &qword_25554E2F0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v32 = v9;
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v26 - v11;
  v13 = type metadata accessor for VHRDirectoryIssuer();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_21FC3F0B0();
  v34 = v12;
  v16 = v35;
  sub_21FC5BEE0();
  if (v16)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v35 = v10;
  v27 = a1;
  v17 = v31;
  v39 = 0;
  sub_21FAE2478(&qword_2555415F0, MEMORY[0x24BDCDB10]);
  v18 = v32;
  sub_21FC5BD30();
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v15, v33, v7);
  v38 = 1;
  v19 = sub_21FC5BD18();
  v20 = v13;
  v21 = (uint64_t *)&v15[*(int *)(v13 + 20)];
  *v21 = v19;
  v21[1] = v22;
  v37 = 2;
  v23 = (uint64_t)v30;
  v33 = 0;
  sub_21FC5BD0C();
  sub_21FAA95B4(v23, (uint64_t)&v15[*(int *)(v20 + 24)]);
  v36 = 3;
  v24 = (uint64_t)v29;
  sub_21FC5BD0C();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v34, v18);
  sub_21FAA95B4(v24, (uint64_t)&v15[*(int *)(v20 + 28)]);
  sub_21FA2D120((uint64_t)v15, v28, (uint64_t (*)(_QWORD))type metadata accessor for VHRDirectoryIssuer);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  return sub_21FA326EC((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for VHRDirectoryIssuer);
}

void sub_21FC3F4CC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_21FC3F0B0();
    v7 = a3(a1, &type metadata for VHRDirectoryIssuer.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_21FC3F528@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return VHRDirectoryIssuer.init(from:)(a1, a2);
}

uint64_t sub_21FC3F53C(_QWORD *a1)
{
  return VHRDirectoryIssuer.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for VHRDirectoryIssuer(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_21FC5A98C();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v10 = a3[5];
    v11 = a3[6];
    v12 = (uint64_t *)((char *)a1 + v10);
    v13 = (uint64_t *)((char *)a2 + v10);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    v15 = (char *)a1 + v11;
    v16 = (char *)a2 + v11;
    v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    swift_bridgeObjectRetain();
    if (v17(v16, 1, v7))
    {
      sub_21FA32580();
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v15, (uint64_t *)v16, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v15, 0, 1, v7);
    }
    v20 = a3[7];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    if (v17(v22, 1, v7))
    {
      sub_21FA32580();
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v21, (uint64_t *)v22, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for VHRDirectoryIssuer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t result;
  void (*v10)(uint64_t, uint64_t);

  v4 = sub_21FC5A98C();
  v5 = *(_QWORD *)(v4 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v10(a1, v4);
  swift_bridgeObjectRelease();
  v6 = a1 + *(int *)(a2 + 24);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v7(v6, 1, v4))
    v10(v6, v4);
  v8 = a1 + *(int *)(a2 + 28);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v8, 1, v4);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8, v4);
  return result;
}

char *initializeWithCopy for VHRDirectoryIssuer(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unsigned int (*v16)(const void *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = sub_21FC5A98C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  v13 = *((_QWORD *)v12 + 1);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = v13;
  v14 = &a1[v10];
  v15 = &a2[v10];
  v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  swift_bridgeObjectRetain();
  if (v16(v15, 1, v6))
  {
    sub_21FA32580();
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v8(v14, v15, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
  }
  v18 = a3[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  if (v16(v20, 1, v6))
  {
    sub_21FA32580();
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v8(v19, v20, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v19, 0, 1, v6);
  }
  return a1;
}

char *assignWithCopy for VHRDirectoryIssuer(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t (*v15)(const void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;

  v6 = sub_21FC5A98C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *((_QWORD *)v10 + 1) = *((_QWORD *)v11 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v16 = v15(&a1[v12], 1, v6);
  v17 = v15(v14, 1, v6);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
LABEL_6:
    sub_21FA32580();
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  v8(v13, v14, v6);
LABEL_7:
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = v15(&a1[v19], 1, v6);
  v23 = v15(v21, 1, v6);
  if (!v22)
  {
    if (!v23)
    {
      v8(v20, v21, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    sub_21FA32580();
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v20, v21, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v20, 0, 1, v6);
  return a1;
}

char *initializeWithTake for VHRDirectoryIssuer(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = sub_21FC5A98C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  if (v12(&a2[v9], 1, v6))
  {
    sub_21FA32580();
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  v14 = a3[7];
  v15 = &a1[v14];
  v16 = &a2[v14];
  if (v12(v16, 1, v6))
  {
    sub_21FA32580();
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v8(v15, v16, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
  }
  return a1;
}

char *assignWithTake for VHRDirectoryIssuer(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t (*v17)(const void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  uint64_t v26;

  v6 = sub_21FC5A98C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = (uint64_t *)&a2[v9];
  v13 = *v11;
  v12 = v11[1];
  *(_QWORD *)v10 = v13;
  *((_QWORD *)v10 + 1) = v12;
  swift_bridgeObjectRelease();
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v18 = v17(&a1[v14], 1, v6);
  v19 = v17(v16, 1, v6);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v15, v16, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
LABEL_6:
    sub_21FA32580();
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  v8(v15, v16, v6);
LABEL_7:
  v21 = a3[7];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = v17(&a1[v21], 1, v6);
  v25 = v17(v23, 1, v6);
  if (!v24)
  {
    if (!v25)
    {
      v8(v22, v23, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v22, v6);
    goto LABEL_12;
  }
  if (v25)
  {
LABEL_12:
    sub_21FA32580();
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v22, v23, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v22, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for VHRDirectoryIssuer()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FC3FE2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_21FC5A98C();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    sub_21FA32580();
    v8 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for VHRDirectoryIssuer()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FC3FEE4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = sub_21FC5A98C();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
      return result;
    }
    sub_21FA32580();
    v10 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_21FC3FF8C()
{
  unint64_t v0;
  unint64_t v1;

  sub_21FC5A98C();
  if (v0 <= 0x3F)
  {
    sub_21FA32580();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t storeEnumTagSinglePayload for VHRDirectoryIssuer.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21FC40064 + 4 * byte_21FC74039[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21FC40098 + 4 * byte_21FC74034[v4]))();
}

uint64_t sub_21FC40098(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FC400A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FC400A8);
  return result;
}

uint64_t sub_21FC400B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FC400BCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21FC400C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FC400C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VHRDirectoryIssuer.CodingKeys()
{
  return &type metadata for VHRDirectoryIssuer.CodingKeys;
}

unint64_t sub_21FC400E8()
{
  unint64_t result;

  result = qword_25554E390;
  if (!qword_25554E390)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC741B4, &type metadata for VHRDirectoryIssuer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554E390);
  }
  return result;
}

unint64_t sub_21FC40130()
{
  unint64_t result;

  result = qword_25554E398;
  if (!qword_25554E398)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC740EC, &type metadata for VHRDirectoryIssuer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554E398);
  }
  return result;
}

unint64_t sub_21FC40178()
{
  unint64_t result;

  result = qword_25554E3A0;
  if (!qword_25554E3A0)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC74114, &type metadata for VHRDirectoryIssuer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554E3A0);
  }
  return result;
}

uint64_t sub_21FC401BC()
{
  unint64_t v0;

  v0 = sub_21FC5BCD0();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_21FC40204@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  if ((unint64_t)(result - 1) >= 0x11)
    v2 = 0;
  else
    v2 = result;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = 1;
  return result;
}

_QWORD *sub_21FC40220(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v7;
    v8 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v8;
    v9 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v9;
    v10 = a3[9];
    v21 = a1 + v10;
    v11 = (uint64_t)a2 + v10;
    *(_QWORD *)(a1 + 64) = a2[8];
    v12 = sub_21FC5AAAC();
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v21, v11, v12);
    v14 = a3[11];
    *((_BYTE *)v4 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    *((_BYTE *)v4 + v14) = *((_BYTE *)a2 + v14);
    v15 = a3[12];
    v16 = (_QWORD *)((char *)v4 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_21FC4034C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = sub_21FC5AAAC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_21FC403C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = a3[9];
  v19 = a1 + v9;
  v10 = a2 + v9;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v11 = sub_21FC5AAAC();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v19, v10, v11);
  v13 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[12];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21FC404C4(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = a3[9];
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = sub_21FC5AAAC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_BYTE *)(a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  v11 = a3[12];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (uint64_t *)((char *)a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21FC405F4(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v8 = a3[9];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)(a1 + 48) = v7;
  v11 = sub_21FC5AAAC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_21FC406A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  v9 = a3[9];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_21FC5AAAC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[12];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v18 = *v16;
  v17 = v16[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21FC40784()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FC40790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_21FC5AAAC();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t sub_21FC4080C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FC40818(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 40) = (a2 - 1);
  }
  else
  {
    v7 = sub_21FC5AAAC();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ClinicalSharingOnboardingMetric()
{
  uint64_t result;

  result = qword_25554E400;
  if (!qword_25554E400)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21FC408C8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_21FC5AAAC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_21FC40968()
{
  uint64_t *v0;
  uint64_t inited;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_21FC40BE8();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21FC5F730;
  *(_QWORD *)(inited + 32) = 0xD000000000000016;
  *(_QWORD *)(inited + 40) = 0x800000021FC7FA70;
  *(_QWORD *)(inited + 72) = &type metadata for PairedWatchProductTypeMetricField;
  *(_QWORD *)(inited + 80) = &off_24E4912C0;
  *(_QWORD *)(inited + 88) = 6645601;
  *(_QWORD *)(inited + 96) = 0xE300000000000000;
  v2 = *v0;
  v3 = *((_BYTE *)v0 + 8);
  *(_QWORD *)(inited + 128) = &type metadata for AgeMetricField;
  *(_QWORD *)(inited + 136) = &off_24E484FB8;
  *(_QWORD *)(inited + 104) = v2;
  *(_BYTE *)(inited + 112) = v3;
  *(_QWORD *)(inited + 144) = 0x747865746E6F63;
  *(_QWORD *)(inited + 152) = 0xE700000000000000;
  v4 = v0[6];
  v5 = v0[7];
  *(_QWORD *)(inited + 184) = &type metadata for ContextMetricField;
  *(_QWORD *)(inited + 192) = &off_24E4912A8;
  *(_QWORD *)(inited + 160) = v4;
  *(_QWORD *)(inited + 168) = v5;
  *(_QWORD *)(inited + 200) = 0xD000000000000020;
  *(_QWORD *)(inited + 208) = 0x800000021FC7FA90;
  v6 = v0[8];
  *(_QWORD *)(inited + 240) = &type metadata for ClinicalHealthRecordsOnboardedMetricField;
  *(_QWORD *)(inited + 248) = &off_24E491290;
  *(_QWORD *)(inited + 216) = v6;
  *(_QWORD *)(inited + 256) = 0xD000000000000021;
  *(_QWORD *)(inited + 264) = 0x800000021FC76900;
  v7 = type metadata accessor for ClinicalSharingOnboardingMetric();
  v8 = *((_BYTE *)v0 + *(int *)(v7 + 40));
  *(_QWORD *)(inited + 296) = &type metadata for IHAMetricField;
  *(_QWORD *)(inited + 304) = &off_24E484FA0;
  *(_BYTE *)(inited + 272) = v8;
  *(_QWORD *)(inited + 312) = 0xD00000000000001DLL;
  *(_QWORD *)(inited + 320) = 0x800000021FC76930;
  v9 = *((_BYTE *)v0 + *(int *)(v7 + 44));
  *(_QWORD *)(inited + 352) = &type metadata for IHRMetricField;
  *(_QWORD *)(inited + 360) = &off_24E485000;
  *(_BYTE *)(inited + 328) = v9;
  *(_QWORD *)(inited + 368) = 0xD000000000000025;
  *(_QWORD *)(inited + 376) = 0x800000021FC7FAC0;
  *(_QWORD *)(inited + 408) = &type metadata for NumberOfProvidersPreviouslySharedWithMetricField;
  *(_QWORD *)(inited + 416) = &off_24E491278;
  *(_QWORD *)(inited + 384) = v6;
  *(_QWORD *)(inited + 424) = 7890291;
  *(_QWORD *)(inited + 432) = 0xE300000000000000;
  v11 = v0[2];
  v10 = v0[3];
  *(_QWORD *)(inited + 464) = &type metadata for SexMetricField;
  *(_QWORD *)(inited + 472) = &off_24E484F88;
  *(_QWORD *)(inited + 440) = v11;
  *(_QWORD *)(inited + 448) = v10;
  *(_QWORD *)(inited + 480) = 1885697139;
  *(_QWORD *)(inited + 488) = 0xE400000000000000;
  v12 = v0[4];
  v13 = v0[5];
  *(_QWORD *)(inited + 520) = &type metadata for StepMetricField;
  *(_QWORD *)(inited + 528) = &off_24E491260;
  *(_QWORD *)(inited + 496) = v12;
  *(_QWORD *)(inited + 504) = v13;
  *(_QWORD *)(inited + 536) = 0x6E6F6973726576;
  *(_QWORD *)(inited + 544) = 0xE700000000000000;
  *(_QWORD *)(inited + 576) = &type metadata for VersionMetricField;
  *(_QWORD *)(inited + 584) = &off_24E491248;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  return sub_21FA7C580(inited);
}

void sub_21FC40BE8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406BE50)
  {
    sub_21FAD5334();
    v0 = sub_21FC5BDD8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406BE50);
  }
}

ValueMetadata *type metadata accessor for VersionMetricField()
{
  return &type metadata for VersionMetricField;
}

ValueMetadata *type metadata accessor for StepMetricField()
{
  return &type metadata for StepMetricField;
}

ValueMetadata *type metadata accessor for NumberOfProvidersPreviouslySharedWithMetricField()
{
  return &type metadata for NumberOfProvidersPreviouslySharedWithMetricField;
}

ValueMetadata *type metadata accessor for ClinicalHealthRecordsOnboardedMetricField()
{
  return &type metadata for ClinicalHealthRecordsOnboardedMetricField;
}

ValueMetadata *type metadata accessor for ContextMetricField()
{
  return &type metadata for ContextMetricField;
}

ValueMetadata *type metadata accessor for PairedWatchProductTypeMetricField()
{
  return &type metadata for PairedWatchProductTypeMetricField;
}

void HTTPError.errorDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v1 = sub_21FC5ACA4();
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for HTTPError();
  MEMORY[0x24BDAC7A8](v2);
  sub_21FBA4BC4(v0, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = (char *)sub_21FC40D70 + 4 * byte_21FC74490[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21FC40D70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
  sub_21FA2A08C(&qword_25554E548, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF610], MEMORY[0x24BDCF620]);
  v4 = sub_21FC5BE44();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  return v4;
}

uint64_t type metadata accessor for HTTPError()
{
  uint64_t result;

  result = qword_25554E5C0;
  if (!qword_25554E5C0)
    return swift_getSingletonMetadata();
  return result;
}

void HTTPError.safelyLoggableDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v1 = sub_21FC5ACA4();
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for HTTPError();
  MEMORY[0x24BDAC7A8](v2);
  sub_21FBA4BC4(v0, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = (char *)&loc_21FC40F9C + dword_21FC41174[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21FC40FAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
  v4 = (void *)sub_21FC5AC98();
  v5 = (void *)sub_21FC5A8D8();

  v6 = objc_msgSend(v5, sel_hrs_safelyLoggableDescription);
  v7 = sub_21FC5B604();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  return v7;
}

Swift::Bool __swiftcall HTTPError.isUnauthorizedErrorAskingForBearerToken()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD v8[4];

  v1 = v0;
  v2 = type metadata accessor for HTTPError();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (_QWORD *)((char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_21FBA4BC4(v1, (uint64_t)v4);
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    sub_21FA326EC((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for HTTPError);
    goto LABEL_5;
  }
  v5 = v4[1];
  if (!v5)
  {
LABEL_5:
    v6 = 0;
    return v6 & 1;
  }
  v8[2] = *v4;
  v8[3] = v5;
  v8[0] = 0x20726572616542;
  v8[1] = 0xE700000000000000;
  sub_21FACD1BC();
  sub_21FACD200();
  v6 = sub_21FC5B5A4();
  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t NSHTTPURLResponse.asHTTPError()@<X0>(uint64_t *a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((uint64_t)objc_msgSend(v1, sel_statusCode) >= 400)
  {
    if (objc_msgSend(v1, sel_statusCode) == (id)401)
    {
      v7 = (void *)sub_21FC5B5E0();
      v8 = objc_msgSend(v1, sel_valueForHTTPHeaderField_, v7);

      if (v8)
      {
        v9 = sub_21FC5B604();
        v11 = v10;

      }
      else
      {
        v9 = 0;
        v11 = 0;
      }
      *a1 = v9;
      a1[1] = v11;
      v12 = type metadata accessor for HTTPError();
    }
    else
    {
      *a1 = (uint64_t)objc_msgSend(v1, sel_statusCode);
      v12 = type metadata accessor for HTTPError();
    }
    swift_storeEnumTagMultiPayload();
    v4 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
    v5 = a1;
    v6 = 0;
    v3 = v12;
  }
  else
  {
    v3 = type metadata accessor for HTTPError();
    v4 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56);
    v5 = a1;
    v6 = 1;
  }
  return v4(v5, v6, 1, v3);
}

void _s19HealthRecordsDaemon9HTTPErrorO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD v17[4];

  v4 = sub_21FC5ACA4();
  v17[3] = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v17[2] = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v17[1] = (char *)v17 - v7;
  v8 = type metadata accessor for HTTPError();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v11 = MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v11);
  sub_21FC41CB0();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v17 + *(int *)(v13 + 48) - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FBA4BC4(a1, (uint64_t)v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_21FBA4BC4(a2, (uint64_t)v15);
  v16 = (char *)sub_21FC41560 + 4 * byte_21FC74494[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21FC41560()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  sub_21FBA4BC4(v0, v2);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 88) + 8))(v2, v1);
    v5 = 0;
    v6 = (uint64_t (*)(_QWORD))sub_21FC41CB0;
  }
  else
  {
    v7 = *(_QWORD *)(v4 - 88);
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
    v9 = *(_QWORD *)(v4 - 104);
    v8(v9, v2, v1);
    v10 = *(_QWORD *)(v4 - 96);
    v8(v10, v3, v1);
    sub_21FA2A08C(&qword_25554B1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF610], MEMORY[0x24BDCF608]);
    v5 = sub_21FC5A8A8();
    v11 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v11(v10, v1);
    v11(v9, v1);
    v6 = (uint64_t (*)(_QWORD))type metadata accessor for HTTPError;
  }
  sub_21FA326EC(v0, v6);
  return v5 & 1;
}

uint64_t sub_21FC41798()
{
  return sub_21FA2A08C(&qword_255540E68, (uint64_t (*)(uint64_t))type metadata accessor for HTTPError, (uint64_t)&protocol conformance descriptor for HTTPError);
}

uint64_t *initializeBufferWithCopyOfBuffer for HTTPError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3 || EnumCaseMultiPayload == 2)
    {
      v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v8 = sub_21FC5ACA4();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for HTTPError(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 3 || (_DWORD)result == 2)
    return swift_bridgeObjectRelease();
  if (!(_DWORD)result)
  {
    v3 = sub_21FC5ACA4();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

_QWORD *initializeWithCopy for HTTPError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3 || EnumCaseMultiPayload == 2)
  {
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = sub_21FC5ACA4();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_QWORD *assignWithCopy for HTTPError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_21FA326EC((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for HTTPError);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3 || EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = sub_21FC5ACA4();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *initializeWithTake for HTTPError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = sub_21FC5ACA4();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for HTTPError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_21FA326EC((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for HTTPError);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = sub_21FC5ACA4();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_21FC41C2C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_21FC5ACA4();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void sub_21FC41CB0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25554E5F8)
  {
    type metadata accessor for HTTPError();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25554E5F8);
  }
}

uint64_t sub_21FC41D10(void (*a1)(id *), uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_21FC42028(a1, a2, a3, a4, type metadata accessor for PBCategorySeries.Event, (unint64_t)sub_21FC0186C);
}

uint64_t sub_21FC41D34(void (*a1)(id *), uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_21FC42028(a1, a2, a3, a4, type metadata accessor for PBHKCodedValue, (unint64_t)sub_21FC01B04);
}

uint64_t sub_21FC41D58(void (*a1)(id *), uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_21FC42028(a1, a2, a3, a4, type metadata accessor for PBHKInspectableValue, (unint64_t)sub_21FC01B30);
}

uint64_t sub_21FC41D7C(void (*a1)(id *), uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_21FC42028(a1, a2, a3, a4, type metadata accessor for PBHKReferenceRange, (unint64_t)sub_21FC01B5C);
}

uint64_t sub_21FC41DA0(void (*a1)(id *), uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_21FC42028(a1, a2, a3, a4, type metadata accessor for PBHKConcept, (unint64_t)sub_21FC01CC8);
}

uint64_t sub_21FC41DC4(void (*a1)(id *), uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_21FC42028(a1, a2, a3, a4, type metadata accessor for PBHistogramSeries.Value, (unint64_t)sub_21FC01CF4);
}

uint64_t sub_21FC41DE8(void (*a1)(id *), uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_21FC42028(a1, a2, a3, a4, type metadata accessor for PBMedicationDosage, (unint64_t)sub_21FC01D4C);
}

uint64_t sub_21FC41E0C(void (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t *);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = v3;
  v19 = a1;
  v20 = a2;
  sub_21FA96B9C(0, (unint64_t *)&qword_255540300, sub_21FAB3734, (void (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
  v18 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - v7;
  if (a3 >> 62)
    goto LABEL_18;
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v10 = MEMORY[0x24BEE4AF8];
    if (!v9)
      return v10;
    v22 = MEMORY[0x24BEE4AF8];
    result = sub_21FC01C54(0, v9 & ~(v9 >> 63), 0);
    if (v9 < 0)
      break;
    v12 = 0;
    v10 = v22;
    v17 = a3 & 0xC000000000000001;
    while (v9 != v12)
    {
      if (v17)
      {
        v13 = MEMORY[0x2207D057C](v12, a3);
      }
      else
      {
        v13 = *(_QWORD *)(a3 + 8 * v12 + 32);
        swift_retain();
      }
      v21 = v13;
      v19(&v21);
      if (v4)
      {
        swift_release();
        swift_release();
        return v10;
      }
      v4 = 0;
      swift_release();
      v22 = v10;
      v15 = *(_QWORD *)(v10 + 16);
      v14 = *(_QWORD *)(v10 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_21FC01C54(v14 > 1, v15 + 1, 1);
        v10 = v22;
      }
      ++v12;
      *(_QWORD *)(v10 + 16) = v15 + 1;
      sub_21FC441B8((uint64_t)v8, v10+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(_QWORD *)(v18 + 72) * v15);
      if (v9 == v12)
        return v10;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    v9 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_21FC42004(void (*a1)(id *), uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_21FC42028(a1, a2, a3, a4, type metadata accessor for PBMedicationTrackingDoseEvent, (unint64_t)sub_21FC01EC0);
}

uint64_t sub_21FC42028(void (*a1)(id *), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), unint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  id v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(BOOL, unint64_t, uint64_t);
  unint64_t v23;
  unint64_t v24;
  uint64_t (*v25)(_QWORD);
  void (*v26)(id *);
  uint64_t v27;
  id v28;
  uint64_t v29;

  v8 = v6;
  v26 = a1;
  v27 = a2;
  v25 = a5;
  v10 = a5(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v21 - v12;
  if (a3 >> 62)
    goto LABEL_18;
  v14 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v15 = MEMORY[0x24BEE4AF8];
    if (!v14)
      return v15;
    v29 = MEMORY[0x24BEE4AF8];
    result = ((uint64_t (*)(_QWORD, uint64_t, _QWORD))a6)(0, v14 & ~(v14 >> 63), 0);
    if (v14 < 0)
      break;
    v22 = (void (*)(BOOL, unint64_t, uint64_t))a6;
    v23 = a3;
    v17 = 0;
    v15 = v29;
    v24 = a3 & 0xC000000000000001;
    while (v14 != v17)
    {
      if (v24)
        v18 = (id)MEMORY[0x2207D057C](v17, a3);
      else
        v18 = *(id *)(a3 + 8 * v17 + 32);
      v19 = v18;
      v28 = v18;
      v26(&v28);
      if (v8)
      {
        swift_release();

        return v15;
      }
      v8 = 0;

      v29 = v15;
      a6 = *(_QWORD *)(v15 + 16);
      v20 = *(_QWORD *)(v15 + 24);
      if (a6 >= v20 >> 1)
      {
        v22(v20 > 1, a6 + 1, 1);
        v15 = v29;
      }
      ++v17;
      *(_QWORD *)(v15 + 16) = a6 + 1;
      sub_21FA2D23C((uint64_t)v13, v15+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * a6, v25);
      a3 = v23;
      if (v14 == v17)
        return v15;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    v14 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_21FC4220C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t Output;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint8_t *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  unint64_t v60;

  v52 = a2;
  v54 = a3;
  v5 = sub_21FC5B418();
  v50 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v49 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v57 = (uint64_t)&v47 - v8;
  v51 = type metadata accessor for PBNode(0);
  MEMORY[0x24BDAC7A8](v51);
  v56 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for PBRevocationAuthorization();
  MEMORY[0x24BDAC7A8](v60);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Output = type metadata accessor for ClinicalSharingQueryOutput(0);
  v13 = MEMORY[0x24BDAC7A8](Output);
  v53 = (uint64_t)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v47 - v15;
  if (qword_25406B7F8 != -1)
    swift_once();
  v17 = sub_21FC5AFD4();
  __swift_project_value_buffer(v17, (uint64_t)qword_25406D830);
  v55 = a1;
  sub_21FA2D120(a1, (uint64_t)v16, type metadata accessor for ClinicalSharingQueryOutput);
  v18 = sub_21FC5AFC8();
  v19 = sub_21FC5B970();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    v48 = v5;
    v21 = v20;
    *(_DWORD *)v20 = 134217984;
    v22 = *(_QWORD *)&v16[*(int *)(type metadata accessor for PBTypedData(0) + 20)];
    swift_beginAccess();
    v23 = *(_BYTE *)(v22 + 24);
    v58 = *(_QWORD *)(v22 + 16);
    v59 = v23;
    v24 = PBDataType.rawValue.getter();
    sub_21FA326EC((uint64_t)v16, type metadata accessor for ClinicalSharingQueryOutput);
    v58 = v24;
    sub_21FC5BAC0();
    _os_log_impl(&dword_21FA27000, v18, v19, "Preparing to upload ClinicalSharingDataNode. DataType: %ld", v21, 0xCu);
    v25 = v21;
    v5 = v48;
    MEMORY[0x2207D105C](v25, -1, -1);
  }
  else
  {
    sub_21FA326EC((uint64_t)v16, type metadata accessor for ClinicalSharingQueryOutput);
  }

  v58 = 3;
  v59 = 1;
  result = sub_21FA2D330(&v58, 0, 0xE000000000000000, (uint64_t)v11);
  if (!v3)
  {
    sub_21FA2A08C((unint64_t *)&qword_2555400D8, (uint64_t (*)(uint64_t))type metadata accessor for PBRevocationAuthorization, (uint64_t)&protocol conformance descriptor for PBRevocationAuthorization);
    v27 = sub_21FC5AE90();
    v29 = v28;
    sub_21FA326EC((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PBRevocationAuthorization);
    sub_21FA87EEC(v27, v29);
    v31 = v30;
    v33 = v32;
    v34 = v56;
    v35 = v55;
    sub_21FBF4044(v56, v57, v55, v30, v32);
    v60 = v33;
    sub_21FA2D120(v34, (uint64_t)v54, type metadata accessor for PBNode);
    sub_21FA2D120(v35, v53, type metadata accessor for ClinicalSharingQueryOutput);
    sub_21FA95DE0(v52, (uint64_t)&v58);
    sub_21FA2A08C((unint64_t *)&qword_25554ABE0, type metadata accessor for PBNode, (uint64_t)&protocol conformance descriptor for PBNode);
    v36 = sub_21FC5AE90();
    v38 = v37;
    sub_21FAC8778(v36, v37);
    v40 = v39;
    v42 = v41;
    sub_21FA2D770(v36, v38);
    sub_21FA96B9C(0, &qword_2555403C0, (void (*)(uint64_t))type metadata accessor for PBNode, (void (*)(uint64_t))type metadata accessor for ClinicalSharingDataNodeInfo);
    v54 = (_QWORD *)((char *)v54 + *(int *)(v43 + 48));
    v55 = v29;
    v44 = v50;
    v45 = (uint64_t)v49;
    v46 = v57;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v49, v57, v5);
    sub_21FBABC24(v53, (uint64_t)&v58, v40, v42, v27, v55, v45, v54);
    sub_21FA2D770(v31, v60);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v46, v5);
    return sub_21FA326EC(v56, type metadata accessor for PBNode);
  }
  return result;
}

uint64_t sub_21FC4278C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  _BYTE *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  _BYTE *v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  _BYTE v70[4];
  int v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  _BYTE *v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  unint64_t v96;

  v4 = sub_21FC5AAAC();
  v79 = *(_QWORD *)(v4 - 8);
  v80 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v78 = &v70[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v75 = sub_21FC5B418();
  v74 = *(_QWORD *)(v75 - 8);
  v6 = MEMORY[0x24BDAC7A8](v75);
  v73 = &v70[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v81 = &v70[-v8];
  v76 = type metadata accessor for PBNode(0);
  MEMORY[0x24BDAC7A8](v76);
  v86 = &v70[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v96 = type metadata accessor for ClinicalSharingDataNodeInfo();
  v89 = *(_QWORD *)(v96 - 8);
  MEMORY[0x24BDAC7A8](v96);
  v11 = &v70[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v82 = type metadata accessor for PBRevocationAuthorization();
  MEMORY[0x24BDAC7A8](v82);
  v84 = &v70[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for PBReferences(0);
  MEMORY[0x24BDAC7A8](v13);
  v87 = (uint64_t *)&v70[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v88 = type metadata accessor for PBReference(0);
  v90 = *(uint64_t **)(v88 - 8);
  v15 = MEMORY[0x24BDAC7A8](v88);
  v17 = &v70[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v70[-v18];
  v20 = *a1;
  if (qword_25406B7F8 != -1)
    swift_once();
  v21 = sub_21FC5AFD4();
  __swift_project_value_buffer(v21, (uint64_t)qword_25406D830);
  swift_bridgeObjectRetain();
  v22 = sub_21FC5AFC8();
  v23 = sub_21FC5B970();
  v24 = os_log_type_enabled(v22, v23);
  v91 = v17;
  v77 = a2;
  if (v24)
  {
    v25 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v25 = 134217984;
    if (*(_QWORD *)(v20 + 16))
    {
      sub_21FA2D120(v20+ *(int *)(v96 + 20)+ ((*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80)), (uint64_t)v19, type metadata accessor for PBReference);
      v26 = *(_QWORD *)&v19[*(int *)(v88 + 20)]
          + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
      swift_beginAccess();
      v83 = v13;
      v27 = *(_QWORD *)v26;
      LOBYTE(v26) = *(_BYTE *)(v26 + 8);
      sub_21FA326EC((uint64_t)v19, type metadata accessor for PBReference);
      v94 = v27;
      v13 = v83;
      v95 = v26;
      v28 = PBDataType.rawValue.getter();
    }
    else
    {
      v28 = 0;
    }
    v94 = v28;
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v22, v23, "Preparing to upload ClinicalSharingCategoryNode. DataType:  %ld", v25, 0xCu);
    MEMORY[0x2207D105C](v25, -1, -1);

    v17 = v91;
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  v29 = v89;
  if (*(_QWORD *)(v20 + 16))
  {
    v30 = v20 + ((*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80));
    sub_21FA2D120(v30 + *(int *)(v96 + 20), (uint64_t)v19, type metadata accessor for PBReference);
    v31 = *(_QWORD *)&v19[*(int *)(v88 + 20)]
        + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
    swift_beginAccess();
    v72 = *(_QWORD *)v31;
    v71 = *(unsigned __int8 *)(v31 + 8);
    sub_21FA326EC((uint64_t)v19, type metadata accessor for PBReference);
    v88 = v20;
    v32 = *(_QWORD *)(v20 + 16);
    v33 = MEMORY[0x24BEE4AF8];
    if (v32)
    {
      v83 = v13;
      v92 = MEMORY[0x24BEE4AF8];
      sub_21FC01E94(0, v32, 0);
      v34 = *(_QWORD *)(v29 + 72);
      v33 = v92;
      do
      {
        sub_21FA2D120(v30, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingDataNodeInfo);
        sub_21FA2D120((uint64_t)&v11[*(int *)(v96 + 20)], (uint64_t)v17, type metadata accessor for PBReference);
        sub_21FA326EC((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingDataNodeInfo);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_21FC01E94(0, *(_QWORD *)(v33 + 16) + 1, 1);
          v33 = v92;
        }
        v36 = *(_QWORD *)(v33 + 16);
        v35 = *(_QWORD *)(v33 + 24);
        if (v36 >= v35 >> 1)
        {
          sub_21FC01E94(v35 > 1, v36 + 1, 1);
          v33 = v92;
        }
        *(_QWORD *)(v33 + 16) = v36 + 1;
        v17 = v91;
        sub_21FA2D23C((uint64_t)v91, v33+ ((*((unsigned __int8 *)v90 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v90 + 80))+ v90[9] * v36, type metadata accessor for PBReference);
        v30 += v34;
        --v32;
      }
      while (v32);
    }
    v37 = v87;
    sub_21FC5AD10();
    *v37 = v33;
    v92 = 3;
    v93 = 1;
    v38 = v84;
    v39 = v85;
    sub_21FA2D330(&v92, 0, 0xE000000000000000, (uint64_t)v84);
    v40 = v86;
    if (v39)
    {
      v44 = v37;
    }
    else
    {
      sub_21FA2A08C((unint64_t *)&qword_2555400D8, (uint64_t (*)(uint64_t))type metadata accessor for PBRevocationAuthorization, (uint64_t)&protocol conformance descriptor for PBRevocationAuthorization);
      v41 = sub_21FC5AE90();
      v43 = v42;
      sub_21FA326EC((uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for PBRevocationAuthorization);
      v96 = v43;
      sub_21FA87EEC(v41, v43);
      v48 = v47;
      v50 = v49;
      if (qword_25553DC90 != -1)
        swift_once();
      v51 = (void *)qword_255572F60;
      v52 = v78;
      sub_21FC5AAA0();
      v53 = (void *)sub_21FC5AA64();
      (*(void (**)(_BYTE *, uint64_t))(v79 + 8))(v52, v80);
      v54 = objc_msgSend(v51, sel_stringFromDate_, v53);

      v55 = sub_21FC5B604();
      v57 = v56;

      sub_21FBF5790((uint64_t)v40, (uint64_t)v81, (uint64_t)v87, v55, v57, v48, v50);
      v58 = v48;
      swift_bridgeObjectRelease();
      sub_21FA2D120((uint64_t)v40, v77, type metadata accessor for PBNode);
      sub_21FA2A08C((unint64_t *)&qword_25554ABE0, type metadata accessor for PBNode, (uint64_t)&protocol conformance descriptor for PBNode);
      swift_bridgeObjectRetain();
      v59 = sub_21FC5AE90();
      v61 = v60;
      sub_21FAC8778(v59, v60);
      v63 = v62;
      v91 = (_BYTE *)v64;
      sub_21FA2D770(v59, v61);
      sub_21FA96B9C(0, &qword_255540350, (void (*)(uint64_t))type metadata accessor for PBNode, (void (*)(uint64_t))type metadata accessor for ClinicalSharingCategoryNodeInfo);
      v90 = (uint64_t *)(v77 + *(int *)(v65 + 48));
      v66 = v74;
      v67 = (uint64_t)v73;
      v68 = v81;
      v69 = v75;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v74 + 16))(v73, v81, v75);
      v92 = v72;
      v93 = v71;
      sub_21FA651F4(v88, (uint64_t)v91, v63, v41, v96, v67, (uint64_t)&v92, v90);
      sub_21FA2D770(v58, v50);
      (*(void (**)(_BYTE *, uint64_t))(v66 + 8))(v68, v69);
      sub_21FA326EC((uint64_t)v86, type metadata accessor for PBNode);
      v44 = v87;
    }
    return sub_21FA326EC((uint64_t)v44, type metadata accessor for PBReferences);
  }
  else
  {
    sub_21FA6A4E8();
    swift_allocError();
    *(_QWORD *)v46 = 0xD000000000000018;
    *(_QWORD *)(v46 + 8) = 0x800000021FC7FB50;
    *(_QWORD *)(v46 + 16) = 0;
    *(_QWORD *)(v46 + 24) = 0;
    *(_BYTE *)(v46 + 32) = 5;
    return swift_willThrow();
  }
}

uint64_t sub_21FC43118@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  _QWORD v6[4];

  v6[2] = *a1;
  v6[3] = a3;
  result = sub_21FC41E0C((void (*)(uint64_t *))sub_21FC4419C, (uint64_t)v6, a2);
  *a4 = result;
  return result;
}

uint64_t sub_21FC43170@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint8_t *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint8_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t result;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD v110[2];
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  unint64_t v136;
  int *v137;
  uint8_t *v138;
  uint64_t v139;
  char v140;
  uint64_t v141;

  v5 = v4;
  v130 = a3;
  v124 = a2;
  v114 = sub_21FC5B418();
  v113 = *(_QWORD *)(v114 - 8);
  v8 = MEMORY[0x24BDAC7A8](v114);
  v112 = (uint64_t)v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v110 - v10;
  v133 = type metadata accessor for PBNode(0);
  v12 = *(_QWORD *)(v133 - 8);
  MEMORY[0x24BDAC7A8](v133);
  v115 = (uint64_t)v110 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for PBRevocationAuthorization();
  MEMORY[0x24BDAC7A8](v117);
  v121 = (uint64_t)v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = (int *)type metadata accessor for ClinicalSharingCategoryNodeInfo();
  v122 = *((_QWORD *)v137 - 1);
  MEMORY[0x24BDAC7A8](v137);
  v16 = (char *)v110 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for PBReference(0);
  v136 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v138 = (uint8_t *)v110 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_21FC5B460();
  v119 = *(_QWORD *)(v120 - 8);
  MEMORY[0x24BDAC7A8](v120);
  v131 = (uint64_t)v110 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_21FC5AAAC();
  v127 = *(_QWORD *)(v129 - 8);
  v20 = MEMORY[0x24BDAC7A8](v129);
  v128 = (uint64_t)v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v126 = (uint64_t)v110 - v22;
  v125 = type metadata accessor for PBReferences(0);
  MEMORY[0x24BDAC7A8](v125);
  v134 = (_QWORD *)((char *)v110 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = *a1;
  if (qword_25406B7F8 != -1)
    swift_once();
  v25 = sub_21FC5AFD4();
  v26 = __swift_project_value_buffer(v25, (uint64_t)qword_25406D830);
  swift_retain_n();
  v123 = (void *)v26;
  v27 = sub_21FC5AFC8();
  v28 = sub_21FC5B970();
  v29 = os_log_type_enabled(v27, v28);
  v116 = v11;
  v135 = a4;
  v132 = v12;
  if (v29)
  {
    v30 = swift_slowAlloc();
    v111 = v4;
    v31 = (uint8_t *)v30;
    v32 = swift_slowAlloc();
    *(_DWORD *)v31 = 136315138;
    v139 = v32;
    v110[1] = v31 + 4;
    sub_21FC5AAF4();
    sub_21FA2A08C((unint64_t *)&qword_25553F0F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v33 = sub_21FC5BDCC();
    v141 = sub_21FABDCF8(v33, v34, &v139);
    a4 = v135;
    sub_21FC5BAC0();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v27, v28, "Preparing ClinicalSharingRootNodeInfo. Account: %s", v31, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v32, -1, -1);
    v35 = v31;
    v5 = v111;
    MEMORY[0x2207D105C](v35, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v36 = sub_21FADCE5C();
  swift_retain();
  v37 = (uint64_t)v138;
  if ((v36 & 1) == 0)
  {
    swift_retain();
    v49 = sub_21FC5AFC8();
    v50 = sub_21FC5B970();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = v24;
      v52 = (uint8_t *)swift_slowAlloc();
      v53 = swift_slowAlloc();
      *(_DWORD *)v52 = 136315138;
      v138 = v52 + 4;
      v139 = v53;
      sub_21FC5AAF4();
      sub_21FA2A08C((unint64_t *)&qword_25553F0F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v54 = sub_21FC5BDCC();
      v141 = sub_21FABDCF8(v54, v55, &v139);
      sub_21FC5BAC0();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21FA27000, v49, v50, "Sync is not required. Account: %s", v52, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v53, -1, -1);
      v56 = v52;
      v24 = v51;
      a4 = v135;
      MEMORY[0x2207D105C](v56, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v71 = v132;
    sub_21FA96B9C(0, (unint64_t *)&qword_255540300, sub_21FAB3734, (void (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
    v78 = (uint64_t *)(a4 + *(int *)(v72 + 48));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56))(a4, 1, 1, v133);
    goto LABEL_24;
  }
  v38 = swift_bridgeObjectRetain();
  v39 = sub_21FC44214(v38, v24);
  v40 = (void *)v5;
  swift_bridgeObjectRelease();
  v118 = v24;
  swift_release();
  v41 = *(_QWORD *)(v39 + 16);
  v42 = MEMORY[0x24BEE4AF8];
  if (v41)
  {
    v123 = (void *)v5;
    v139 = MEMORY[0x24BEE4AF8];
    sub_21FC01E94(0, v41, 0);
    v43 = (*(unsigned __int8 *)(v122 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80);
    v124 = v39;
    v44 = v39 + v43;
    v45 = *(_QWORD *)(v122 + 72);
    v42 = v139;
    do
    {
      sub_21FA2D120(v44, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCategoryNodeInfo);
      sub_21FA2D120((uint64_t)&v16[v137[5]], v37, type metadata accessor for PBReference);
      sub_21FA326EC((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCategoryNodeInfo);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21FC01E94(0, *(_QWORD *)(v42 + 16) + 1, 1);
        v42 = v139;
      }
      v47 = *(_QWORD *)(v42 + 16);
      v46 = *(_QWORD *)(v42 + 24);
      if (v47 >= v46 >> 1)
      {
        sub_21FC01E94(v46 > 1, v47 + 1, 1);
        v42 = v139;
      }
      *(_QWORD *)(v42 + 16) = v47 + 1;
      v48 = v42
          + ((*(unsigned __int8 *)(v136 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v136 + 80))
          + *(_QWORD *)(v136 + 72) * v47;
      v37 = (uint64_t)v138;
      sub_21FA2D23C((uint64_t)v138, v48, type metadata accessor for PBReference);
      v44 += v45;
      --v41;
    }
    while (v41);
    v39 = v124;
    v40 = v123;
  }
  v57 = v134;
  sub_21FC5AD10();
  *v57 = v42;
  v58 = v131;
  v59 = v129;
  if (qword_25553DC90 != -1)
    swift_once();
  v60 = (void *)qword_255572F60;
  v61 = v126;
  sub_21FC5AAA0();
  v62 = (void *)sub_21FC5AA64();
  v63 = *(void (**)(uint64_t, uint64_t))(v127 + 8);
  v63(v61, v59);
  v64 = v59;
  v65 = objc_msgSend(v60, sel_stringFromDate_, v62);

  v66 = sub_21FC5B604();
  v68 = v67;

  v69 = v128;
  sub_21FC5AAA0();
  sub_21FAAEEB8(v69, v58);
  if (v40)
  {
    v63(v69, v64);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v70 = v132;
    v24 = v118;
    v76 = (uint64_t)v134;
    sub_21FAD2198(v40);

    sub_21FA326EC(v76, type metadata accessor for PBReferences);
    sub_21FA96B9C(0, (unint64_t *)&qword_255540300, sub_21FAB3734, (void (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
    v78 = (uint64_t *)(v135 + *(int *)(v77 + 48));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56))(v135, 1, 1, v133);
LABEL_24:
    *v78 = v24;
    return swift_retain();
  }
  v138 = (uint8_t *)v68;
  v63(v69, v64);
  v139 = 3;
  v140 = 1;
  v74 = *(_QWORD *)(v118 + 40);
  v73 = *(_QWORD *)(v118 + 48);
  swift_bridgeObjectRetain();
  v75 = v121;
  sub_21FA2D330(&v139, v74, v73, v121);
  sub_21FA2A08C((unint64_t *)&qword_2555400D8, (uint64_t (*)(uint64_t))type metadata accessor for PBRevocationAuthorization, (uint64_t)&protocol conformance descriptor for PBRevocationAuthorization);
  v80 = sub_21FC5AE90();
  v82 = v81;
  v124 = v39;
  sub_21FA326EC(v75, (uint64_t (*)(_QWORD))type metadata accessor for PBRevocationAuthorization);
  sub_21FA87EEC(v80, v82);
  v84 = v83;
  v86 = v85;
  v87 = v66;
  v88 = v66;
  v89 = (uint64_t)v138;
  v90 = (int *)sub_21FBF5B98(v115, (uint64_t)v116, (uint64_t)v134, v88, (uint64_t)v138, v131, v118, v83, v85);
  v130 = v91;
  v136 = v86;
  v137 = v90;
  sub_21FA2A08C((unint64_t *)&qword_25554ABE0, type metadata accessor for PBNode, (uint64_t)&protocol conformance descriptor for PBNode);
  v92 = sub_21FC5AE90();
  v94 = v92;
  v95 = v93;
  sub_21FAC8778(v92, v93);
  v127 = v96;
  v128 = v97;
  sub_21FA2D770(v94, v95);
  (*(void (**)(uint64_t, char *, uint64_t))(v113 + 16))(v112, v116, v114);
  v98 = *(_QWORD *)(v118 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_deviceID + 8);
  v126 = *(_QWORD *)(v118 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_deviceID);
  v99 = (uint64_t *)(v118 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_existingMultiDeviceInfo);
  v100 = *(_QWORD *)(v118 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_existingMultiDeviceInfo + 8);
  v129 = v98;
  if (v100)
  {
    v101 = v99[4];
    v122 = v99[3];
    v102 = v99[2];
    v125 = *v99;
    v123 = (void *)v102;
    sub_21FADE734(v125, v100);
    swift_bridgeObjectRetain();
    sub_21FADE734(v125, v100);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = sub_21FACD2BC(v125, v100);
  }
  else
  {
    result = swift_bridgeObjectRetain();
    v101 = 0;
  }
  v125 = v101 + 1;
  if (!__OFADD__(v101, 1))
  {
    v103 = *(_QWORD *)(v118 + 48);
    v123 = *(void **)(v118 + 40);
    swift_bridgeObjectRetain();
    v104 = (uint64_t)v137;
    v105 = v130;
    sub_21FA32314((uint64_t)v137, v130);
    sub_21FA32314(v80, v82);
    sub_21FB1363C(v124, v128, v127, v80, v82, v112, v104, v105, &v139, v126, v129, v87, v89, v125, (uint64_t)v123, v103);
    sub_21FAD2624((uint64_t)&v139);
    v106 = v132;
    v107 = v136;
    sub_21FC4457C((uint64_t)&v139);
    sub_21FA2D770(v84, v107);
    sub_21FA2D770(v80, v82);
    sub_21FA2D770((uint64_t)v137, v105);
    (*(void (**)(char *, uint64_t))(v113 + 8))(v116, v114);
    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v131, v120);
    sub_21FA326EC((uint64_t)v134, type metadata accessor for PBReferences);
    sub_21FA96B9C(0, (unint64_t *)&qword_255540300, sub_21FAB3734, (void (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
    v109 = v135;
    v78 = (uint64_t *)(v135 + *(int *)(v108 + 48));
    sub_21FA2D23C(v115, v135, type metadata accessor for PBNode);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v106 + 56))(v109, 0, 1, v133);
    v24 = v118;
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t sub_21FC4419C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21FC43170(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_21FC441B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FA96B9C(0, (unint64_t *)&qword_255540300, sub_21FAB3734, (void (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FC44214(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  char v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = sub_21FC5AAF4();
  v37 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ClinicalSharingCategoryNodeInfo();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v31 = (uint64_t)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v29 - v11;
  result = MEMORY[0x24BEE4AF8];
  v39 = MEMORY[0x24BEE4AF8];
  v34 = *(_QWORD *)(a1 + 16);
  if (v34)
  {
    v14 = 0;
    v38 = a2 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_accountID;
    v15 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v35 = *(_QWORD *)(v10 + 72);
    v30 = v15;
    v32 = (char *)&v29 - v11;
    v33 = a1 + v15;
    while (1)
    {
      v36 = v14;
      sub_21FA2D120(v33 + v35 * v14, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCategoryNodeInfo);
      v16 = *(_QWORD *)v12;
      if (*(_QWORD *)(*(_QWORD *)v12 + 16))
      {
        v17 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ClinicalSharingDataNodeInfo() - 8) + 80);
        v18 = *(_QWORD *)(v16 + ((v17 + 32) & ~v17));
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v18 + 16))
          goto LABEL_3;
      }
      else
      {
        v18 = MEMORY[0x24BEE4B08];
        if (!*(_QWORD *)(MEMORY[0x24BEE4B08] + 16))
          goto LABEL_3;
      }
      sub_21FA2A08C((unint64_t *)&qword_25406AAF0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
      v19 = sub_21FC5B58C();
      v20 = -1 << *(_BYTE *)(v18 + 32);
      v21 = v19 & ~v20;
      if (((*(_QWORD *)(v18 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
      {
        v22 = ~v20;
        v23 = *(_QWORD *)(v37 + 72);
        v24 = *(void (**)(char *, unint64_t, uint64_t))(v37 + 16);
        while (1)
        {
          v24(v6, *(_QWORD *)(v18 + 48) + v23 * v21, v4);
          sub_21FA2A08C(&qword_25553FB98, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
          v25 = sub_21FC5B5D4();
          (*(void (**)(char *, uint64_t))(v37 + 8))(v6, v4);
          if ((v25 & 1) != 0)
            break;
          v21 = (v21 + 1) & v22;
          if (((*(_QWORD *)(v18 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
            goto LABEL_3;
        }
        swift_bridgeObjectRelease();
        v12 = v32;
        sub_21FA2D23C((uint64_t)v32, v31, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCategoryNodeInfo);
        v26 = v39;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_21FC01BFC(0, *(_QWORD *)(v26 + 16) + 1, 1);
          v26 = v39;
        }
        v28 = *(_QWORD *)(v26 + 16);
        v27 = *(_QWORD *)(v26 + 24);
        if (v28 >= v27 >> 1)
        {
          sub_21FC01BFC(v27 > 1, v28 + 1, 1);
          v26 = v39;
        }
        *(_QWORD *)(v26 + 16) = v28 + 1;
        sub_21FA2D23C(v31, v26 + v30 + v28 * v35, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCategoryNodeInfo);
        goto LABEL_4;
      }
LABEL_3:
      swift_bridgeObjectRelease();
      v12 = v32;
      sub_21FA326EC((uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingCategoryNodeInfo);
LABEL_4:
      v14 = v36 + 1;
      if (v36 + 1 == v34)
        return v39;
    }
  }
  return result;
}

uint64_t sub_21FC4457C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21FA2D770(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21FC44600(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a1;
  v3 = sub_21FC5AC08();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_21FC5B550();
  v29 = *(_QWORD *)(v7 - 8);
  v30 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_21FC5AAAC();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v24 - v15;
  sub_21FC5A6A4();
  v28 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v28(v14, v16, v10);
  v25 = v4;
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v27(v6, a2, v3);
  sub_21FC5B520();
  v26 = sub_21FC5B538();
  v17 = v30;
  v29 = *(_QWORD *)(v29 + 8);
  ((void (*)(char *, uint64_t))v29)(v9, v30);
  v18 = *(void (**)(char *, uint64_t))(v11 + 8);
  v18(v16, v10);
  sub_21FC5A680();
  v28(v14, v16, v10);
  v28 = (void (*)(char *, char *, uint64_t))v3;
  v27(v6, a2, v3);
  sub_21FC5B520();
  v19 = sub_21FC5B538();
  v20 = v26;
  v21 = v19;
  ((void (*)(char *, uint64_t))v29)(v9, v17);
  result = ((uint64_t (*)(char *, uint64_t))v18)(v16, v10);
  if (v21 < v20)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (__OFSUB__(v21, v20))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (!__OFADD__(v21 - v20, 1))
  {
    (*(void (**)(uint64_t, void (*)(char *, char *, uint64_t)))(v25 + 8))(a2, v28);
    v23 = sub_21FC5A6C8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v31, v23);
    return v20;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for CatalogDownloadResult(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CatalogDownloadResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CatalogDownloadResult()
{
  return &type metadata for CatalogDownloadResult;
}

uint64_t sub_21FC4491C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;

  v1 = v0;
  type metadata accessor for IssuerDirectoryDownloadTaskScheduler();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  v3 = (_DWORD *)swift_slowAlloc();
  *v3 = 0;
  *(_QWORD *)(v2 + 40) = v3;
  *(_OWORD *)(v2 + 48) = xmmword_21FC6FA90;
  sub_21FB9FA54();
  v4 = static NSURLSessionConfiguration.defaultPublicSessionConfiguration.getter();
  v5 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for URLSessionCertVerificationDelegate()), sel_init);
  type metadata accessor for WebRequestPerformer();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 24) = MEMORY[0x24BEE4B08];
  v7 = objc_msgSend((id)objc_opt_self(), sel_sessionWithConfiguration_delegate_delegateQueue_, v4, v5, 0);

  *(_QWORD *)(v6 + 16) = v7;
  type metadata accessor for IssuerDirectoryDownloadTaskManager();
  v8 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v1 + 16) = sub_21FBC9140(v2, v6, 0, v8);
  return v1;
}

uint64_t type metadata accessor for IssuerDirectoryDownloadDaemonPlugin()
{
  return objc_opt_self();
}

uint64_t sub_21FC44A68()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t (*)(uint64_t (*)(void), uint64_t), uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD **)(*(_QWORD *)v0 + 16);
  v2 = v1[5];
  v3 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v2);
  v4 = swift_allocObject();
  swift_weakInit();
  v5 = *(void (**)(uint64_t (*)(uint64_t (*)(void), uint64_t), uint64_t, uint64_t, uint64_t))(v3 + 8);
  swift_retain();
  v5(sub_21FC44B54, v4, v2, v3);
  return swift_release_n();
}

uint64_t sub_21FC44B00()
{
  return sub_21FABE8F0();
}

uint64_t sub_21FC44B24()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_21FC44B30()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_21FC44B54(uint64_t (*a1)(void), uint64_t a2)
{
  return sub_21FABE564(a1, a2);
}

uint64_t sub_21FC44B5C(void *a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  void (*v5)(_QWORD *);
  _QWORD v7[4];
  char v8;
  uint64_t v9;

  v9 = MEMORY[0x24BEE4AF8];
  sub_21FA2D1A0(0, &qword_25406BAE0, (uint64_t (*)(uint64_t))type metadata accessor for os_unfair_lock_s, MEMORY[0x24BEE1C28]);
  sub_21FAA6830();
  sub_21FC5ACBC();
  v7[0] = a1;
  memset(&v7[1], 0, 24);
  v8 = 1;
  v2 = *(_QWORD *)(v9 + 16);
  if (v2)
  {
    v3 = a1;
    swift_bridgeObjectRetain();
    v4 = v9 + 40;
    do
    {
      v5 = *(void (**)(_QWORD *))(v4 - 8);
      swift_retain();
      v5(v7);
      swift_release();
      v4 += 16;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();

  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_21FC44C60(void *a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  void (*v5)(void **);
  void *v7;
  char v8;
  uint64_t v9;

  v9 = MEMORY[0x24BEE4AF8];
  sub_21FA2D1A0(0, &qword_25406BAE0, (uint64_t (*)(uint64_t))type metadata accessor for os_unfair_lock_s, MEMORY[0x24BEE1C28]);
  sub_21FAA6830();
  sub_21FC5ACBC();
  v7 = a1;
  v8 = 1;
  v2 = *(_QWORD *)(v9 + 16);
  if (v2)
  {
    v3 = a1;
    swift_bridgeObjectRetain();
    v4 = v9 + 40;
    do
    {
      v5 = *(void (**)(void **))(v4 - 8);
      swift_retain();
      v5(&v7);
      swift_release();
      v4 += 16;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();

  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_21FC44D60(uint64_t a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _BYTE v27[64];
  uint64_t v28;
  uint64_t v29;

  swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v26 = a1;
    v6 = v4 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_21FC49FD0(v6, (uint64_t)v27, (uint64_t)&qword_25553FDE8, (uint64_t (*)(_QWORD, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))sub_21FC4B9F0);
      v8 = v28;
      v7 = v29;
      swift_retain();
      sub_21FC4A418((uint64_t)v27, (uint64_t)&qword_25553FDE8, (uint64_t (*)(_QWORD, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))sub_21FC4B9F0);
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = v7;
      v10 = *a2;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v10;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v10 = sub_21FA7E4B4(0, v10[2] + 1, 1, v10);
        *a2 = v10;
      }
      v13 = v10[2];
      v12 = v10[3];
      if (v13 >= v12 >> 1)
        v10 = sub_21FA7E4B4((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
      v10[2] = v13 + 1;
      v14 = &v10[2 * v13];
      v14[4] = sub_21FC4BA4C;
      v14[5] = v9;
      *a2 = v10;
      v6 += 80;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    a1 = v26;
  }
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEE4AF8];
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 32))
  {
    swift_retain();
    v16 = sub_21FC466FC();
    if (v16)
    {
      v18 = v16;
      v19 = v17;
      v20 = swift_allocObject();
      *(_QWORD *)(v20 + 16) = v18;
      *(_QWORD *)(v20 + 24) = v19;
      v21 = *a2;
      swift_retain();
      v22 = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v21;
      if ((v22 & 1) == 0)
      {
        v21 = sub_21FA7E4B4(0, v21[2] + 1, 1, v21);
        *a2 = v21;
      }
      v24 = v21[2];
      v23 = v21[3];
      if (v24 >= v23 >> 1)
        v21 = sub_21FA7E4B4((_QWORD *)(v23 > 1), v24 + 1, 1, v21);
      v21[2] = v24 + 1;
      v25 = &v21[2 * v24];
      v25[4] = sub_21FC4BA4C;
      v25[5] = v20;
      *a2 = v21;
      sub_21FA97DF0(v18);
    }
    swift_release();
    *(_QWORD *)(a1 + 32) = 0;
    return swift_release();
  }
  return result;
}

uint64_t sub_21FC44FCC(uint64_t a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD v32[3];
  uint64_t v33;
  uint64_t v34;

  sub_21FC4A3B8(0, (unint64_t *)&qword_25406B3A8, (uint64_t (*)(uint64_t, uint64_t, _UNKNOWN **))type metadata accessor for SingleValuePublisherTaskQueue.PendingTaskWrapper);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v32 - v7;
  swift_beginAccess();
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    v32[2] = a1 + 24;
    v33 = a1;
    v11 = &v8[*(int *)(v5 + 36)];
    v12 = v9 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v34 = *(_QWORD *)(v6 + 72);
    v32[1] = v9;
    swift_bridgeObjectRetain();
    do
    {
      sub_21FC49FD0(v12, (uint64_t)v8, (uint64_t)&qword_25406B3A8, (uint64_t (*)(_QWORD, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))sub_21FC4A3B8);
      v14 = *(_QWORD *)v11;
      v13 = *((_QWORD *)v11 + 1);
      swift_retain();
      sub_21FC4A418((uint64_t)v8, (uint64_t)&qword_25406B3A8, (uint64_t (*)(_QWORD, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))sub_21FC4A3B8);
      v15 = swift_allocObject();
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = v13;
      v16 = *a2;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v16;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v16 = sub_21FA7E4E4(0, v16[2] + 1, 1, v16);
        *a2 = v16;
      }
      v19 = v16[2];
      v18 = v16[3];
      if (v19 >= v18 >> 1)
        v16 = sub_21FA7E4E4((_QWORD *)(v18 > 1), v19 + 1, 1, v16);
      v16[2] = v19 + 1;
      v20 = &v16[2 * v19];
      v20[4] = sub_21FC4A9B8;
      v20[5] = v15;
      *a2 = v16;
      v12 += v34;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    a1 = v33;
  }
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEE4AF8];
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 32))
  {
    swift_retain();
    v22 = sub_21FC46854();
    if (v22)
    {
      v24 = v22;
      v25 = v23;
      v26 = swift_allocObject();
      *(_QWORD *)(v26 + 16) = v24;
      *(_QWORD *)(v26 + 24) = v25;
      v27 = *a2;
      v28 = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v27;
      if ((v28 & 1) == 0)
      {
        v27 = sub_21FA7E4E4(0, v27[2] + 1, 1, v27);
        *a2 = v27;
      }
      v30 = v27[2];
      v29 = v27[3];
      if (v30 >= v29 >> 1)
        v27 = sub_21FA7E4E4((_QWORD *)(v29 > 1), v30 + 1, 1, v27);
      v27[2] = v30 + 1;
      v31 = &v27[2 * v30];
      v31[4] = sub_21FC4A9B8;
      v31[5] = v26;
      *a2 = v27;
    }
    swift_release();
    *(_QWORD *)(a1 + 32) = 0;
    return swift_release();
  }
  return result;
}

uint64_t sub_21FC45288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[4];

  v4 = v3;
  sub_21FA5D850(a1, (uint64_t)v11);
  v7 = swift_allocObject();
  v8 = v11[1];
  *(_OWORD *)(v7 + 24) = v11[0];
  *(_OWORD *)(v7 + 40) = v8;
  v9 = v11[3];
  *(_OWORD *)(v7 + 56) = v11[2];
  *(_QWORD *)(v7 + 16) = v4;
  *(_OWORD *)(v7 + 72) = v9;
  *(_QWORD *)(v7 + 88) = a2;
  *(_QWORD *)(v7 + 96) = a3;
  sub_21FA2D1A0(0, &qword_25406BAE0, (uint64_t (*)(uint64_t))type metadata accessor for os_unfair_lock_s, MEMORY[0x24BEE1C28]);
  sub_21FAA6830();
  swift_retain();
  swift_retain();
  sub_21FC5ACBC();
  return swift_release();
}

uint64_t sub_21FC453AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t (*v17)();
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v4 = v3;
  v8 = type metadata accessor for ClinicalSharingSyncTask();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v8);
  sub_21FA2D120(a1, (uint64_t)&v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
  v11 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v4;
  sub_21FA2D23C((uint64_t)&v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], v12 + v11, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
  v13 = (_QWORD *)(v12 + ((v10 + v11 + 7) & 0xFFFFFFFFFFFFFFF8));
  *v13 = a2;
  v13[1] = a3;
  v21 = *(_QWORD *)(v4 + 16);
  v22 = 0;
  v17 = sub_21FC49B6C;
  v18 = v12;
  v19 = v4;
  v20 = &v22;
  sub_21FA2D1A0(0, &qword_25406BAE0, (uint64_t (*)(uint64_t))type metadata accessor for os_unfair_lock_s, MEMORY[0x24BEE1C28]);
  sub_21FAA6830();
  swift_retain();
  swift_retain();
  sub_21FC5ACBC();
  if (v22)
  {
    v14 = swift_retain();
    sub_21FC45E98(v14);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_21FC45534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[4];
  __int128 v18;

  sub_21FA5D850(a2, (uint64_t)v17);
  *(_QWORD *)&v18 = a3;
  *((_QWORD *)&v18 + 1) = a4;
  v7 = (_QWORD *)(a1 + 24);
  swift_beginAccess();
  v8 = *(_QWORD **)(a1 + 24);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a1 + 24) = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = sub_21FA7E380(0, v8[2] + 1, 1, v8);
    *v7 = v8;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    v8 = sub_21FA7E380((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    *v7 = v8;
  }
  v8[2] = v11 + 1;
  v12 = &v8[10 * v11];
  v12[2] = v17[0];
  v13 = v17[1];
  v14 = v17[2];
  v15 = v18;
  v12[5] = v17[3];
  v12[6] = v15;
  v12[3] = v13;
  v12[4] = v14;
  return swift_endAccess();
}

uint64_t sub_21FC45634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;

  sub_21FC4A3B8(0, (unint64_t *)&qword_25406B3A8, (uint64_t (*)(uint64_t, uint64_t, _UNKNOWN **))type metadata accessor for SingleValuePublisherTaskQueue.PendingTaskWrapper);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v20 - v11;
  sub_21FA2D120(a2, (uint64_t)&v20 - v11, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
  v13 = &v12[*(int *)(v9 + 36)];
  *(_QWORD *)v13 = a3;
  *((_QWORD *)v13 + 1) = a4;
  v14 = (unint64_t *)(a1 + 24);
  swift_beginAccess();
  v15 = *(_QWORD *)(a1 + 24);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a1 + 24) = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v15 = sub_21FA7E4D0(0, *(_QWORD *)(v15 + 16) + 1, 1, v15);
    *v14 = v15;
  }
  v18 = *(_QWORD *)(v15 + 16);
  v17 = *(_QWORD *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    v15 = sub_21FA7E4D0(v17 > 1, v18 + 1, 1, v15);
    *v14 = v15;
  }
  *(_QWORD *)(v15 + 16) = v18 + 1;
  sub_21FC4A364((uint64_t)v12, v15+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v18);
  return swift_endAccess();
}

uint64_t sub_21FC45798(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[5];

  if (result)
  {
    v6 = (void (*)(uint64_t))result;
    v7 = swift_retain();
    v6(v7);
    result = sub_21FA97DF0((uint64_t)v6);
  }
  if (!*(_QWORD *)(a3 + 32))
  {
    swift_beginAccess();
    v8 = *(_QWORD *)(a3 + 24);
    if (*(_QWORD *)(v8 + 16))
    {
      result = sub_21FC49FD0(v8 + 32, (uint64_t)&v12, (uint64_t)&qword_25553FDE8, (uint64_t (*)(_QWORD, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))sub_21FC4B9F0);
      if (!*(_QWORD *)(v8 + 16))
      {
        __break(1u);
        return result;
      }
      sub_21FC4A024(0, 1);
    }
    else
    {
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v12 = 0u;
    }
    swift_endAccess();
    if (*((_QWORD *)&v12 + 1))
    {
      v17[2] = v14;
      v17[3] = v15;
      v17[4] = v16;
      v17[0] = v12;
      v17[1] = v13;
      sub_21FC49FD0((uint64_t)v17, (uint64_t)&v12, (uint64_t)&qword_25553FDE8, (uint64_t (*)(_QWORD, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))sub_21FC4B9F0);
      sub_21FC4B9F0(0, &qword_25554E6E8, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))type metadata accessor for SingleValuePublisherTaskQueue.ActiveTaskWrapper);
      v9 = swift_allocObject();
      *(_OWORD *)(v9 + 96) = 0u;
      *(_OWORD *)(v9 + 112) = 0u;
      *(_QWORD *)(v9 + 128) = 0;
      v10 = v13;
      *(_OWORD *)(v9 + 16) = v12;
      *(_OWORD *)(v9 + 32) = v10;
      v11 = v15;
      *(_OWORD *)(v9 + 48) = v14;
      *(_OWORD *)(v9 + 64) = v11;
      *(_OWORD *)(v9 + 80) = v16;
      sub_21FA97DF0(0);
      sub_21FC4A418((uint64_t)v17, (uint64_t)&qword_25553FDE8, (uint64_t (*)(_QWORD, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))sub_21FC4B9F0);
      *a4 = v9;
      swift_release();
      *(_QWORD *)(a3 + 32) = *a4;
      swift_retain();
      return swift_release();
    }
    else
    {
      return sub_21FC4B960((uint64_t)&v12, &qword_25554E6E0, (uint64_t)&qword_25553FDE8, (uint64_t)type metadata accessor for SingleValuePublisherTaskQueue.PendingTaskWrapper, (void (*)(uint64_t, uint64_t, uint64_t))sub_21FC4B9F0);
    }
  }
  return result;
}

uint64_t sub_21FC45970(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  sub_21FC49F6C();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC4A3B8(0, (unint64_t *)&qword_25406B3A8, (uint64_t (*)(uint64_t, uint64_t, _UNKNOWN **))type metadata accessor for SingleValuePublisherTaskQueue.PendingTaskWrapper);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v27 - v17;
  if (a1)
  {
    v19 = swift_retain();
    a1(v19);
    result = sub_21FA97DF0((uint64_t)a1);
  }
  if (!*(_QWORD *)(a3 + 32))
  {
    swift_beginAccess();
    v20 = *(_QWORD *)(a3 + 24);
    if (*(_QWORD *)(v20 + 16))
    {
      result = sub_21FC49FD0(v20 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)), (uint64_t)v9, (uint64_t)&qword_25406B3A8, (uint64_t (*)(_QWORD, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))sub_21FC4A3B8);
      if (!*(_QWORD *)(v20 + 16))
      {
        __break(1u);
        return result;
      }
      sub_21FC4A1AC(0, 1);
      v21 = 0;
    }
    else
    {
      v21 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v9, v21, 1, v11);
    swift_endAccess();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11) == 1)
    {
      return sub_21FA326EC((uint64_t)v9, (uint64_t (*)(_QWORD))sub_21FC49F6C);
    }
    else
    {
      sub_21FC4A364((uint64_t)v9, (uint64_t)v18);
      sub_21FC49FD0((uint64_t)v18, (uint64_t)v15, (uint64_t)&qword_25406B3A8, (uint64_t (*)(_QWORD, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))sub_21FC4A3B8);
      sub_21FC4A3B8(0, qword_25406B320, (uint64_t (*)(uint64_t, uint64_t, _UNKNOWN **))type metadata accessor for SingleValuePublisherTaskQueue.ActiveTaskWrapper);
      v22 = swift_allocObject();
      v23 = (_QWORD *)(v22 + *(_QWORD *)(*(_QWORD *)v22 + 104));
      *v23 = 0;
      v23[1] = 0;
      v24 = v22 + *(_QWORD *)(*(_QWORD *)v22 + 112);
      *(_OWORD *)v24 = 0u;
      *(_OWORD *)(v24 + 16) = 0u;
      *(_QWORD *)(v24 + 32) = 0;
      sub_21FA2D23C((uint64_t)v15, v22 + *(_QWORD *)(*(_QWORD *)v22 + 96), (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
      v25 = (uint64_t *)(v22 + *(_QWORD *)(*(_QWORD *)v22 + 104));
      v26 = *v25;
      *(_OWORD *)v25 = *(_OWORD *)&v15[*(int *)(v11 + 36)];
      sub_21FA97DF0(v26);
      sub_21FC4A418((uint64_t)v18, (uint64_t)&qword_25406B3A8, (uint64_t (*)(_QWORD, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))sub_21FC4A3B8);
      *a4 = v22;
      swift_release();
      *(_QWORD *)(a3 + 32) = *a4;
      swift_retain();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_21FC45C28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[4];

  sub_21FC4B6D4();
  v4 = *(_QWORD *)(v3 - 8);
  v15 = v3;
  v16 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_21FC61770;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)&v20[0] = sub_21FA5C678();
  sub_21FA5D3F8(0, &qword_25554E6C8, (uint64_t)&type metadata for CatalogDownloadResult, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FC4B774(&qword_25554E6D0, (uint64_t)&qword_25554E6C8, (uint64_t)&type metadata for CatalogDownloadResult, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_21FA5D3F8);
  v8 = sub_21FC5B280();
  swift_release();
  *(_QWORD *)&v20[0] = v8;
  sub_21FC5B2EC();
  swift_release();
  sub_21FA5D850(a1 + 16, (uint64_t)v20);
  v9 = swift_allocObject();
  v10 = v20[1];
  *(_OWORD *)(v9 + 16) = v20[0];
  *(_OWORD *)(v9 + 32) = v10;
  v11 = v20[3];
  *(_OWORD *)(v9 + 48) = v20[2];
  *(_OWORD *)(v9 + 64) = v11;
  *(_QWORD *)(v9 + 80) = v7;
  *(_QWORD *)(v9 + 88) = v1;
  *(_QWORD *)(v9 + 96) = a1;
  sub_21FA2A08C(&qword_25554E6D8, (uint64_t (*)(uint64_t))sub_21FC4B6D4, MEMORY[0x24BDB9770]);
  swift_retain_n();
  swift_retain();
  swift_retain();
  v12 = v15;
  v13 = sub_21FC5B2D4();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v12);
  *(_QWORD *)&v20[0] = *(_QWORD *)(v1 + 16);
  v17 = a1;
  v18 = v1;
  v19 = v13;
  sub_21FA2D1A0(0, &qword_25406BAE0, (uint64_t (*)(uint64_t))type metadata accessor for os_unfair_lock_s, MEMORY[0x24BEE1C28]);
  sub_21FAA6830();
  sub_21FC5ACBC();
  swift_release();
  return swift_release();
}

uint64_t sub_21FC45E98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = type metadata accessor for ClinicalSharingSyncTask();
  v20 = *(_QWORD *)(v2 - 8);
  v3 = *(_QWORD *)(v20 + 64);
  MEMORY[0x24BDAC7A8](v2);
  sub_21FC49BC0();
  v5 = *(_QWORD *)(v4 - 8);
  v22 = v4;
  v23 = v5;
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = 0;
  v9 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 96);
  v27 = sub_21FA8F234();
  sub_21FA97980(0, (unint64_t *)&unk_25406CA90, (uint64_t (*)(uint64_t))sub_21FA80020, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FC4B774((unint64_t *)&qword_25406CA88, (uint64_t)&unk_25406CA90, (uint64_t)sub_21FA80020, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_21FA97980);
  sub_21FC5B2EC();
  swift_release();
  sub_21FA2D120(v9, (uint64_t)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
  v10 = (*(unsigned __int8 *)(v20 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v11 = (v3 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = swift_allocObject();
  sub_21FA2D23C((uint64_t)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v10, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
  *(_QWORD *)(v13 + v11) = v8;
  v14 = v21;
  *(_QWORD *)(v13 + v12) = v21;
  *(_QWORD *)(v13 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8)) = a1;
  sub_21FA2A08C(&qword_25406C868, (uint64_t (*)(uint64_t))sub_21FC49BC0, MEMORY[0x24BDB9770]);
  swift_retain_n();
  v15 = v14;
  swift_retain();
  swift_retain();
  v16 = v22;
  v17 = sub_21FC5B2D4();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v16);
  v18 = *(_QWORD *)(v15 + 16);
  v26 = v17;
  v27 = v18;
  v24 = a1;
  v25 = v15;
  sub_21FA2D1A0(0, &qword_25406BAE0, (uint64_t (*)(uint64_t))type metadata accessor for os_unfair_lock_s, MEMORY[0x24BEE1C28]);
  sub_21FAA6830();
  sub_21FC5ACBC();
  swift_release();
  return swift_release();
}

void sub_21FC4615C(void *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  id v7;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  if (a1)
  {
    v15 = a1;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 1;
    v7 = a1;
    sub_21FC463F8(a5, (uint64_t)&v15);

  }
  else
  {
    swift_beginAccess();
    v9 = a3[2];
    v10 = a3[3];
    if (v10 == 1)
      v11 = 0;
    else
      v11 = (void *)a3[2];
    if (v10 == 1)
      v12 = 0;
    else
      v12 = a3[3];
    if (v10 == 1)
      v13 = 0;
    else
      v13 = a3[4];
    if (v10 == 1)
      v14 = 0;
    else
      v14 = a3[5];
    v15 = v11;
    v16 = v12;
    v17 = v13;
    v18 = v14;
    v19 = 0;
    sub_21FC4B8A4(v9, v10);
    sub_21FC463F8(a5, (uint64_t)&v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_21FC4622C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v7;
  uint64_t v9;

  if (a1)
  {
    v7 = a1;
    sub_21FC46548(a5, (uint64_t)a1, 1);

  }
  else
  {
    swift_beginAccess();
    if (*(_QWORD *)(a3 + 16))
      v9 = *(_QWORD *)(a3 + 16);
    else
      v9 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_21FC46548(a5, v9, 0);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_21FC462D8(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  _BYTE v6[40];
  _QWORD v7[5];

  v3 = *(_QWORD *)(a2 + 32);
  if (v3)
    v4 = v3 == result;
  else
    v4 = 0;
  if (v4)
  {
    v5 = result;
    v7[3] = *a3;
    v7[4] = MEMORY[0x24BDB9B58];
    v7[0] = a3;
    sub_21FC49798((uint64_t)v7, (uint64_t)v6);
    swift_beginAccess();
    swift_retain();
    sub_21FC497FC((uint64_t)v6, v5 + 96);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_21FC46364(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[40];
  _QWORD v8[5];

  v3 = *(_QWORD *)(a2 + 32);
  if (v3)
    v4 = v3 == result;
  else
    v4 = 0;
  if (v4)
  {
    v5 = result;
    v8[3] = *a3;
    v8[4] = MEMORY[0x24BDB9B58];
    v8[0] = a3;
    sub_21FC49798((uint64_t)v8, (uint64_t)v7);
    v6 = v5 + *(_QWORD *)(*(_QWORD *)v5 + 112);
    swift_beginAccess();
    swift_retain();
    sub_21FC497FC((uint64_t)v7, v6);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_21FC463F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v4[40];

  sub_21FC4B8D8(a2, (uint64_t)v4);
  sub_21FA2D1A0(0, &qword_25406BAE0, (uint64_t (*)(uint64_t))type metadata accessor for os_unfair_lock_s, MEMORY[0x24BEE1C28]);
  sub_21FAA6830();
  v2 = sub_21FC5ACBC();
  MEMORY[0x24BDAC7A8](v2);
  sub_21FC5ACBC();
  return sub_21FA97DF0(0);
}

uint64_t sub_21FC46548(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v5;
  char v6;

  v5 = a2;
  v6 = a3 & 1;
  sub_21FA2D1A0(0, &qword_25406BAE0, (uint64_t (*)(uint64_t))type metadata accessor for os_unfair_lock_s, MEMORY[0x24BEE1C28]);
  sub_21FAA6830();
  v3 = sub_21FC5ACBC();
  MEMORY[0x24BDAC7A8](v3);
  sub_21FC5ACBC();
  return sub_21FA97DF0(0);
}

uint64_t sub_21FC4668C(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void), void (*a5)(uint64_t, uint64_t))
{
  uint64_t v5;
  BOOL v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a2 + 32);
  if (v5)
    v6 = v5 == result;
  else
    v6 = 0;
  if (v6)
  {
    v10 = a4();
    v11 = *a3;
    v12 = a3[1];
    *a3 = v10;
    a3[1] = v13;
    a5(v11, v12);
    *(_QWORD *)(a2 + 32) = 0;
    return swift_release();
  }
  return result;
}

uint64_t sub_21FC466FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[4];
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 80);
  swift_beginAccess();
  sub_21FC49F08(v0 + 96, (uint64_t)&v5);
  if (*((_QWORD *)&v6 + 1))
  {
    sub_21FA2CEA0((uint64_t)&v5, (uint64_t)v4);
    sub_21FA97D28(v1);
    sub_21FC4B960((uint64_t)&v5, (unint64_t *)&qword_25406B8C0, (uint64_t)&qword_25406B8B8, MEMORY[0x24BDB9A48], (void (*)(uint64_t, uint64_t, uint64_t))sub_21FA50724);
    __swift_project_boxed_opaque_existential_1(v4, v4[3]);
    sub_21FC5B160();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  }
  else
  {
    sub_21FA97D28(v1);
    sub_21FC4B960((uint64_t)&v5, (unint64_t *)&qword_25406B8C0, (uint64_t)&qword_25406B8B8, MEMORY[0x24BDB9A48], (void (*)(uint64_t, uint64_t, uint64_t))sub_21FA50724);
  }
  v7 = 0;
  v5 = 0u;
  v6 = 0u;
  swift_beginAccess();
  sub_21FC497FC((uint64_t)&v5, v0 + 96);
  swift_endAccess();
  v2 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 88) = 0;
  sub_21FA97DF0(v2);
  return v1;
}

uint64_t sub_21FC46854()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v1 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104));
  v2 = *v1;
  v3 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_beginAccess();
  sub_21FC49F08(v3, (uint64_t)&v7);
  if (*((_QWORD *)&v8 + 1))
  {
    sub_21FA2CEA0((uint64_t)&v7, (uint64_t)v6);
    sub_21FA97D28(v2);
    sub_21FC4B960((uint64_t)&v7, (unint64_t *)&qword_25406B8C0, (uint64_t)&qword_25406B8B8, MEMORY[0x24BDB9A48], (void (*)(uint64_t, uint64_t, uint64_t))sub_21FA50724);
    __swift_project_boxed_opaque_existential_1(v6, v6[3]);
    sub_21FC5B160();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }
  else
  {
    sub_21FA97D28(v2);
    sub_21FC4B960((uint64_t)&v7, (unint64_t *)&qword_25406B8C0, (uint64_t)&qword_25406B8B8, MEMORY[0x24BDB9A48], (void (*)(uint64_t, uint64_t, uint64_t))sub_21FA50724);
  }
  v9 = 0;
  v7 = 0u;
  v8 = 0u;
  swift_beginAccess();
  sub_21FC497FC((uint64_t)&v7, v3);
  swift_endAccess();
  v4 = *v1;
  *v1 = 0;
  v1[1] = 0;
  sub_21FA97DF0(v4);
  return v2;
}

void sub_21FC469B0(void *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  id v7;

  v5 = a1;
  if (a1)
  {
    sub_21FA5BE58(0, &qword_25406CB60);
    v5 = (void *)sub_21FC5B79C();
  }
  if (a2)
    v6 = sub_21FC5A8D8();
  else
    v6 = 0;
  v7 = (id)v6;
  (*(void (**)(uint64_t, void *))(a3 + 16))(a3, v5);

}

uint64_t sub_21FC46A44(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Strong;
  _QWORD *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v14;

  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - v7;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
    return a2();
  v10 = (_QWORD *)Strong;
  v11 = sub_21FC5AAAC();
  v12 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
  swift_retain();
  sub_21FC4B02C(0, a1, (uint64_t)v8, v10, (void (*)(_QWORD))a2, a3);
  swift_release();
  swift_release();
  return sub_21FA2D1F8((uint64_t)v8, (unint64_t *)&qword_25406AAE8, v12);
}

void sub_21FC46B70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  swift_getMetatypeMetadata();
  v1 = sub_21FC5B64C();
  v3 = v2;
  sub_21FA720B8();
  v4 = (void *)swift_allocError();
  *(_QWORD *)v5 = v1;
  *(_QWORD *)(v5 + 8) = v3;
  *(_BYTE *)(v5 + 16) = 1;
  sub_21FC44C60(v4);

  sub_21FBB5B70();
  v6 = *(_QWORD *)(v0 + 64);
  objc_msgSend(*(id *)(v6 + 88), sel_invalidate);
  v7 = *(void **)(v6 + 88);
  *(_QWORD *)(v6 + 88) = 0;

  sub_21FC340B0();
}

void sub_21FC46C30(unint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v3 = *a1;
  if (qword_25406B7F8 != -1)
    swift_once();
  v4 = sub_21FC5AFD4();
  __swift_project_value_buffer(v4, (uint64_t)qword_25406D830);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v5 = sub_21FC5AFC8();
  v6 = sub_21FC5B994();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v11 = v8;
    *(_DWORD *)v7 = 136315394;
    v9 = *(_QWORD *)(a2 + 72);
    v10 = *(_QWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    sub_21FABDCF8(v9, v10, &v11);
    sub_21FC5BAC0();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2048;
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      sub_21FC5BC7C();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v5, v6, "%s: Paused %ld accounts successfully", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v8, -1, -1);
    MEMORY[0x2207D105C](v7, -1, -1);

  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_21FC46E60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[5];

  v1 = v0;
  sub_21FA50814();
  v3 = v2;
  v25 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA50928();
  v7 = *(_QWORD *)(v6 - 8);
  v26 = v6;
  v27 = v7;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC4A4C0();
  v11 = *(_QWORD *)(v10 - 8);
  v28 = v10;
  v29 = v11;
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (void *)__swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40))[2];
  v31[3] = &type metadata for ClinicalSharingAccountStore;
  v31[4] = &off_24E484B78;
  v31[0] = v14;
  v15 = (void *)*__swift_project_boxed_opaque_existential_1(v31, (uint64_t)&type metadata for ClinicalSharingAccountStore);
  *(_QWORD *)(swift_allocObject() + 16) = v15;
  sub_21FA97980(0, (unint64_t *)&qword_25406B9B8, (uint64_t (*)(uint64_t))sub_21FA849F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9E38]);
  sub_21FC4A460();
  v16 = v14;
  v17 = v15;
  sub_21FC5B268();
  sub_21FA2A08C(&qword_25406B9D0, (uint64_t (*)(uint64_t))sub_21FA50814, MEMORY[0x24BDB9E90]);
  v18 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v3);
  v30 = v18;
  sub_21FA97980(0, &qword_25406B968, (uint64_t (*)(uint64_t))sub_21FA849F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA849F8();
  sub_21FC4B774((unint64_t *)&qword_25406B960, (uint64_t)&qword_25406B968, (uint64_t)sub_21FA849F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_21FA97980);
  sub_21FC5B2C8();
  swift_release();
  sub_21FA2A08C(&qword_25406B848, (uint64_t (*)(uint64_t))sub_21FA50928, MEMORY[0x24BDB96C0]);
  v19 = v26;
  v20 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v19);
  v30 = v20;
  swift_retain();
  sub_21FC5B184();
  sub_21FC5B34C();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  sub_21FA2A08C(&qword_25554E648, (uint64_t (*)(uint64_t))sub_21FC4A4C0, MEMORY[0x24BDB98F0]);
  v21 = v28;
  v22 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v13, v21);
  return v22;
}

uint64_t sub_21FC471A0@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t i;
  id v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;

  sub_21FC4A598();
  v38 = *(_QWORD *)(v6 - 8);
  v39 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC4A62C();
  v43 = v9;
  v41 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v40 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC4A6E0();
  v12 = v11;
  v44 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v42 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC4A834();
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v45 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *a1;
  v47 = MEMORY[0x24BEE4AF8];
  if (!(v18 >> 62))
  {
    v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    v46 = v12;
    if (v19)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease();
    v26 = MEMORY[0x24BEE4AF8];
LABEL_15:
    v47 = v26;
    sub_21FA849F8();
    sub_21FA2A08C(&qword_25554E658, (uint64_t (*)(uint64_t))sub_21FA849F8, MEMORY[0x24BEE12C8]);
    sub_21FC5B748();
    swift_release();
    sub_21FA50724(0, (unint64_t *)&qword_25406BB50);
    v27 = v39;
    v28 = v40;
    sub_21FC5B118();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v8, v27);
    swift_retain();
    sub_21FC5B184();
    sub_21FA5BE58(0, (unint64_t *)&qword_25406BA88);
    sub_21FC4A7A8();
    sub_21FA2A08C(&qword_25554E680, (uint64_t (*)(uint64_t))sub_21FC4A62C, MEMORY[0x24BDB9970]);
    sub_21FA2A08C(&qword_25554E678, (uint64_t (*)(uint64_t))sub_21FC4A7A8, MEMORY[0x24BDB9AF8]);
    v29 = v42;
    v30 = v43;
    sub_21FC5B34C();
    swift_release();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v28, v30);
    sub_21FA2A08C(&qword_25554E690, (uint64_t (*)(uint64_t))sub_21FC4A6E0, MEMORY[0x24BDB98F0]);
    v32 = v45;
    v31 = v46;
    sub_21FC5B328();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v29, v31);
    sub_21FA2A08C(&qword_25554E698, (uint64_t (*)(uint64_t))sub_21FC4A834, MEMORY[0x24BDB98D8]);
    v33 = sub_21FC5B280();
    result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v32, v15);
    *a3 = v33;
    return result;
  }
  swift_bridgeObjectRetain();
  result = sub_21FC5BC7C();
  v19 = result;
  v46 = v12;
  if (!result)
    goto LABEL_14;
LABEL_3:
  if (v19 >= 1)
  {
    v34 = v16;
    v35 = v15;
    v36 = a2;
    v37 = a3;
    for (i = 0; i != v19; ++i)
    {
      if ((v18 & 0xC000000000000001) != 0)
        v22 = (id)MEMORY[0x2207D057C](i, v18);
      else
        v22 = *(id *)(v18 + 8 * i + 32);
      v23 = v22;
      v24 = objc_msgSend(v22, sel_clinicalSharingStatus, v34, v35, v36);
      v25 = objc_msgSend(v24, sel_multiDeviceStatus);

      if (v25 == (id)1)
      {
        sub_21FC5BBE0();
        sub_21FC5BC10();
        sub_21FC5BC1C();
        sub_21FC5BBEC();
      }
      else
      {

      }
    }
    swift_bridgeObjectRelease();
    v26 = v47;
    a3 = v37;
    v16 = v34;
    v15 = v35;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t sub_21FC47600@<X0>(void **a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  void (*v39)(char *, uint64_t, uint64_t, uint64_t);
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t *v52;
  id v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60[5];

  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v49 - v10;
  sub_21FC4A8B4();
  v56 = *(_QWORD *)(v12 - 8);
  v57 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v55 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_21FC5AAF4();
  v58 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a1;
  v53 = (id)sub_21FC5B8B0();
  if (qword_25406B7F8 != -1)
    swift_once();
  v18 = sub_21FC5AFD4();
  __swift_project_value_buffer(v18, (uint64_t)qword_25406D830);
  v19 = v17;
  swift_retain();
  v20 = sub_21FC5AFC8();
  v21 = sub_21FC5B994();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc();
    v52 = a3;
    v23 = v22;
    v24 = swift_slowAlloc();
    v54 = v14;
    v25 = v24;
    v60[0] = v24;
    *(_DWORD *)v23 = 136315394;
    v50 = v11;
    v51 = v9;
    v26 = a2[9];
    v27 = a2[10];
    swift_bridgeObjectRetain();
    v59 = sub_21FABDCF8(v26, v27, v60);
    sub_21FC5BAC0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2080;
    v28 = objc_msgSend(v19, sel_identifier, v23 + 14);
    sub_21FC5AADC();

    sub_21FA2A08C((unint64_t *)&qword_25553F0F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v29 = sub_21FC5BDCC();
    v31 = v30;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v16, v54);
    v59 = sub_21FABDCF8(v29, v31, v60);
    v9 = v51;
    sub_21FC5BAC0();

    v11 = v50;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v20, v21, "%s: Pausing sync for %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    v32 = v25;
    v14 = v54;
    MEMORY[0x2207D105C](v32, -1, -1);
    v33 = v23;
    a3 = v52;
    MEMORY[0x2207D105C](v33, -1, -1);

  }
  else
  {

    swift_release();
  }
  v34 = (void *)__swift_project_boxed_opaque_existential_1(a2 + 2, a2[5])[2];
  v60[3] = (uint64_t)&type metadata for ClinicalSharingAccountStore;
  v60[4] = (uint64_t)&off_24E484B78;
  v60[0] = (uint64_t)v34;
  __swift_project_boxed_opaque_existential_1(v60, (uint64_t)&type metadata for ClinicalSharingAccountStore);
  v35 = v34;
  v36 = objc_msgSend(v19, sel_identifier);
  sub_21FC5AADC();

  v37 = sub_21FC5AAAC();
  v38 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
  v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56);
  v39(v11, 1, 1, v37);
  v39(v9, 1, 1, v37);
  v40 = v53;
  v41 = v53;
  v42 = sub_21FBB9444((uint64_t)v16, (uint64_t)v11, (uint64_t)v9, 0, v40, 0, 0);
  sub_21FA2D1F8((uint64_t)v9, (unint64_t *)&qword_25406AAE8, v38);
  sub_21FA2D1F8((uint64_t)v11, (unint64_t *)&qword_25406AAE8, v38);

  (*(void (**)(char *, uint64_t))(v58 + 8))(v16, v14);
  v59 = v42;
  *(_QWORD *)(swift_allocObject() + 16) = v19;
  v43 = MEMORY[0x24BEE1328];
  sub_21FA5D3F8(0, (unint64_t *)&qword_25406B980, MEMORY[0x24BEE1328], (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FA5BE58(0, (unint64_t *)&qword_25406BA88);
  sub_21FC4B774((unint64_t *)&qword_25406B970, (uint64_t)&qword_25406B980, v43, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_21FA5D3F8);
  v44 = v19;
  v45 = v55;
  sub_21FC5B2C8();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
  sub_21FA2A08C(&qword_25554E6A8, (uint64_t (*)(uint64_t))sub_21FC4A8B4, MEMORY[0x24BDB96C0]);
  v46 = v57;
  v47 = sub_21FC5B280();

  result = (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v45, v46);
  *a3 = v47;
  return result;
}

uint64_t sub_21FC47BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  os_log_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  os_log_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[7];

  v6 = v5;
  v46 = a4;
  v47 = a5;
  v10 = type metadata accessor for ClinicalSharingSyncTask();
  MEMORY[0x24BDAC7A8](v10);
  v48 = (uint64_t)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v43 - v13;
  v15 = sub_21FC5AAAC();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA7187C(a3, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_21FC5AAA0();
    sub_21FA2D1F8((uint64_t)v14, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
  }
  v19 = swift_allocBox();
  v21 = v20;
  v22 = v6[8];
  sub_21FA2CEA0((uint64_t)(v6 + 2), (uint64_t)v52);
  swift_retain();
  v23 = v49;
  sub_21FA8EC80(a1, a2, (uint64_t)v18, v22, v52, v21);
  if (v23)
    return swift_deallocBox();
  v25 = (uint64_t *)(v21 + *(int *)(v10 + 60));
  v26 = *v25;
  *v25 = (uint64_t)sub_21FC4986C;
  v25[1] = (uint64_t)v6;
  swift_retain();
  sub_21FA97DF0(v26);
  if (qword_25406B7F8 != -1)
    swift_once();
  v27 = sub_21FC5AFD4();
  __swift_project_value_buffer(v27, (uint64_t)qword_25406D830);
  swift_retain_n();
  swift_retain_n();
  v28 = sub_21FC5AFC8();
  v29 = sub_21FC5B994();
  v30 = v29;
  v31 = os_log_type_enabled(v28, v29);
  v32 = v48;
  if (v31)
  {
    v33 = swift_slowAlloc();
    v49 = swift_slowAlloc();
    v52[0] = v49;
    *(_DWORD *)v33 = 136315650;
    v45 = v30;
    v34 = v6[9];
    v35 = v6[10];
    swift_bridgeObjectRetain();
    v51 = sub_21FABDCF8(v34, v35, v52);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2080;
    swift_beginAccess();
    v44 = v28;
    sub_21FA2D120(v21, v32, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
    v36 = sub_21FA92EB4();
    v38 = v37;
    sub_21FA326EC(v48, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
    v52[6] = sub_21FABDCF8(v36, v38, v52);
    sub_21FC5BAC0();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 22) = 2048;
    v50 = *(_QWORD *)(v6[12] + 16);
    sub_21FA2D1A0(0, &qword_25406BAE0, (uint64_t (*)(uint64_t))type metadata accessor for os_unfair_lock_s, MEMORY[0x24BEE1C28]);
    sub_21FAA6830();
    v32 = v48;
    sub_21FC5ACB0();
    swift_release();
    sub_21FC5BAC0();
    swift_release();
    v39 = v44;
    _os_log_impl(&dword_21FA27000, v44, (os_log_type_t)v45, "%s: Enqueuing sync task %s (%ld tasks already enqueued)", (uint8_t *)v33, 0x20u);
    v40 = v49;
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v40, -1, -1);
    MEMORY[0x2207D105C](v33, -1, -1);

  }
  else
  {

    swift_release_n();
    swift_release_n();
  }
  swift_beginAccess();
  sub_21FA2D120(v21, v32, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
  v41 = (_QWORD *)swift_allocObject();
  v41[2] = v6;
  v41[3] = v19;
  v42 = v47;
  v41[4] = v46;
  v41[5] = v42;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_21FC453AC(v32, (uint64_t)sub_21FC498A8, (uint64_t)v41);
  swift_release();
  sub_21FA326EC(v32, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
  return swift_release();
}

void sub_21FC48100(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  char v13;

  v2 = sub_21FC5AAAC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC5AAA0();
  v6 = sub_21FA49070(a1);
  sub_21FBF27F0(v6);
  swift_bridgeObjectRelease();
  v7 = objc_allocWithZone(MEMORY[0x24BE48A28]);
  v8 = (void *)sub_21FC5AA64();
  sub_21FC5AAF4();
  sub_21FA2A08C((unint64_t *)&qword_25406AAF0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  v9 = (void *)sub_21FC5B88C();
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v7, sel_initWithStartDate_accountIdentifiers_, v8, v9);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v12 = v10;
  v13 = 0;
  v11 = v10;
  sub_21FC5B1C0();

}

uint64_t sub_21FC48258(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;

  v8 = type metadata accessor for ClinicalSharingSyncTask();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)a1;
  LOBYTE(a1) = *(_BYTE *)(a1 + 8);
  v12 = swift_projectBox();
  swift_beginAccess();
  sub_21FA2D120(v12, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
  sub_21FC4833C((uint64_t)v10, v11, a1, a4, a5);
  return sub_21FA326EC((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
}

void sub_21FC4833C(uint64_t a1, void *a2, char a3, char *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;

  v49 = a5;
  v10 = type metadata accessor for ClinicalSharingSyncTask();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v45 - v14;
  sub_21FBB68A8();
  v16 = 0;
  if ((a3 & 1) != 0)
  {
    v48 = v15;
    v51 = (uint64_t)a2;
    v17 = a2;
    sub_21FA50724(0, (unint64_t *)&qword_25406BB50);
    v18 = sub_21FC5BDE4();
    if (v18)
    {
      v16 = (void *)v18;
      sub_21FAC6A4C(a2, 1);
    }
    else
    {
      v16 = (void *)swift_allocError();
      *v19 = v51;
    }
    v15 = v48;
  }
  v51 = (uint64_t)v16;
  v52 = 1;
  sub_21FC5B1C0();

  v51 = 0;
  v52 = 2;
  sub_21FC5B1C0();
  if ((a3 & 1) != 0)
  {
    v29 = a2;
    if (qword_25406B7F8 != -1)
      swift_once();
    v30 = sub_21FC5AFD4();
    __swift_project_value_buffer(v30, (uint64_t)qword_25406D830);
    sub_21FA2D120(a1, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
    sub_21FC49860(a2, 1);
    sub_21FC49860(a2, 1);
    swift_retain();
    v31 = sub_21FC5AFC8();
    v32 = sub_21FC5B97C();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = swift_slowAlloc();
      v47 = a1;
      v34 = v33;
      v46 = swift_slowAlloc();
      v51 = v46;
      *(_DWORD *)v34 = 136315650;
      v48 = a4;
      v36 = *(_QWORD *)(v5 + 72);
      v35 = *(_QWORD *)(v5 + 80);
      swift_bridgeObjectRetain();
      v50 = sub_21FABDCF8(v36, v35, &v51);
      sub_21FC5BAC0();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 12) = 2080;
      v37 = sub_21FA92EB4();
      v50 = sub_21FABDCF8(v37, v38, &v51);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();
      sub_21FA326EC((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
      *(_WORD *)(v34 + 22) = 2080;
      v50 = (uint64_t)a2;
      v39 = a2;
      sub_21FA50724(0, (unint64_t *)&qword_25406BB50);
      v40 = sub_21FC5B64C();
      v50 = sub_21FABDCF8(v40, v41, &v51);
      a4 = v48;
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();
      sub_21FAC6A4C(a2, 1);
      sub_21FAC6A4C(a2, 1);
      _os_log_impl(&dword_21FA27000, v31, v32, "%s: Sync task %s failed: %s", (uint8_t *)v34, 0x20u);
      v42 = v46;
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v42, -1, -1);
      v43 = v34;
      a1 = v47;
      MEMORY[0x2207D105C](v43, -1, -1);
    }
    else
    {
      swift_release();
      sub_21FA326EC((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
      sub_21FAC6A4C(a2, 1);
      sub_21FAC6A4C(a2, 1);
    }

    sub_21FBB603C(a2, *(_QWORD *)(a1 + 8));
    v44 = a2;
    ((void (*)(_QWORD, void *))a4)(0, a2);
    sub_21FAC6A4C(a2, 1);
    sub_21FAC6A4C(a2, 1);
  }
  else
  {
    v48 = a4;
    if (qword_25406B7F8 != -1)
      swift_once();
    v20 = sub_21FC5AFD4();
    __swift_project_value_buffer(v20, (uint64_t)qword_25406D830);
    sub_21FA2D120(a1, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
    swift_retain();
    v21 = sub_21FC5AFC8();
    v22 = sub_21FC5B994();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc();
      v24 = swift_slowAlloc();
      v51 = v24;
      *(_DWORD *)v23 = 136315394;
      v25 = *(_QWORD *)(v5 + 72);
      v26 = *(_QWORD *)(v5 + 80);
      swift_bridgeObjectRetain();
      v50 = sub_21FABDCF8(v25, v26, &v51);
      sub_21FC5BAC0();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      v27 = sub_21FA92EB4();
      v50 = sub_21FABDCF8(v27, v28, &v51);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();
      sub_21FA326EC((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
      _os_log_impl(&dword_21FA27000, v21, v22, "%s: Sync task %s finished successfully", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v24, -1, -1);
      MEMORY[0x2207D105C](v23, -1, -1);
    }
    else
    {
      swift_release();
      sub_21FA326EC((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingSyncTask);
    }

    ((void (*)(void *, _QWORD))v48)(a2, 0);
  }
}

uint64_t sub_21FC48984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t DiagnosticsTask;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[5];
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v5 = v4;
  v44 = a3;
  v9 = sub_21FC5AAAC();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  DiagnosticsTask = type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0);
  v42 = *(_QWORD *)(DiagnosticsTask - 8);
  v14 = *(_QWORD *)(v42 + 64);
  v15 = MEMORY[0x24BDAC7A8](DiagnosticsTask);
  v43 = (uint64_t)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v39 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v39 - v19;
  sub_21FA2CEA0(v5 + 16, (uint64_t)&v46);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  sub_21FA4923C(&v46, a1, (uint64_t)v12, (uint64_t)v20);
  if (qword_25406B7F8 != -1)
    swift_once();
  v21 = sub_21FC5AFD4();
  __swift_project_value_buffer(v21, (uint64_t)qword_25406D830);
  sub_21FA2D120((uint64_t)v20, (uint64_t)v18, type metadata accessor for ClinicalSharingQueryDiagnosticsTask);
  swift_retain();
  v22 = sub_21FC5AFC8();
  v23 = sub_21FC5B994();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = swift_slowAlloc();
    v41 = a4;
    v25 = v24;
    v40 = swift_slowAlloc();
    *(_QWORD *)&v46 = v40;
    *(_DWORD *)v25 = 136315394;
    v27 = *(_QWORD *)(v5 + 72);
    v26 = *(_QWORD *)(v5 + 80);
    swift_bridgeObjectRetain();
    v45[0] = sub_21FABDCF8(v27, v26, (uint64_t *)&v46);
    sub_21FC5BAC0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2080;
    v39 = v25 + 14;
    sub_21FC5AAF4();
    sub_21FA2A08C((unint64_t *)&qword_25553F0F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v28 = sub_21FC5BDCC();
    v45[0] = sub_21FABDCF8(v28, v29, (uint64_t *)&v46);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    sub_21FA326EC((uint64_t)v18, type metadata accessor for ClinicalSharingQueryDiagnosticsTask);
    _os_log_impl(&dword_21FA27000, v22, v23, "%s: Diagnostic query task %s beginning", (uint8_t *)v25, 0x16u);
    v30 = v40;
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v30, -1, -1);
    v31 = v25;
    a4 = v41;
    MEMORY[0x2207D105C](v31, -1, -1);
  }
  else
  {
    swift_release();
    sub_21FA326EC((uint64_t)v18, type metadata accessor for ClinicalSharingQueryDiagnosticsTask);
  }

  *(_QWORD *)&v46 = sub_21FA49510();
  v32 = v43;
  sub_21FA2D120((uint64_t)v20, v43, type metadata accessor for ClinicalSharingQueryDiagnosticsTask);
  v33 = (*(unsigned __int8 *)(v42 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = v5;
  sub_21FA2D23C(v32, v34 + v33, type metadata accessor for ClinicalSharingQueryDiagnosticsTask);
  v35 = (_QWORD *)(v34 + ((v14 + v33 + 7) & 0xFFFFFFFFFFFFFFF8));
  *v35 = v44;
  v35[1] = a4;
  v36 = MEMORY[0x24BEE4AE0] + 8;
  sub_21FA5D3F8(0, &qword_25554E630, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FC4B774(&qword_25554E638, (uint64_t)&qword_25554E630, v36, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_21FA5D3F8);
  swift_retain();
  swift_retain();
  v37 = sub_21FC5B2D4();
  swift_release();
  swift_release();
  v47 = sub_21FC5B1B4();
  v48 = MEMORY[0x24BDB9B58];
  *(_QWORD *)&v46 = v37;
  sub_21FA326EC((uint64_t)v20, type metadata accessor for ClinicalSharingQueryDiagnosticsTask);
  sub_21FC49798((uint64_t)&v46, (uint64_t)v45);
  swift_beginAccess();
  sub_21FC497FC((uint64_t)v45, v5 + 104);
  return swift_endAccess();
}

uint64_t sub_21FC48E34(void **a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, _QWORD), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t DiagnosticsTask;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  void *v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v50[4];
  int v51;
  uint64_t v52;
  void (*v53)(_QWORD, _QWORD);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v54 = a5;
  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v50[-v10];
  DiagnosticsTask = type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0);
  v13 = MEMORY[0x24BDAC7A8](DiagnosticsTask);
  v15 = &v50[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v13);
  v17 = &v50[-v16];
  v18 = *a1;
  if (*a1)
  {
    v19 = v18;
    if (qword_25406B7F8 != -1)
      swift_once();
    v20 = sub_21FC5AFD4();
    __swift_project_value_buffer(v20, (uint64_t)qword_25406D830);
    sub_21FA2D120(a3, (uint64_t)v15, type metadata accessor for ClinicalSharingQueryDiagnosticsTask);
    v21 = v18;
    swift_retain();
    v22 = v18;
    v23 = sub_21FC5AFC8();
    v24 = sub_21FC5B97C();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc();
      v52 = swift_slowAlloc();
      v56 = v52;
      *(_DWORD *)v25 = 136315650;
      v53 = a4;
      v27 = *(_QWORD *)(a2 + 72);
      v26 = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      v55 = sub_21FABDCF8(v27, v26, &v56);
      sub_21FC5BAC0();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2080;
      sub_21FC5AAF4();
      sub_21FA2A08C((unint64_t *)&qword_25553F0F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v28 = sub_21FC5BDCC();
      v55 = sub_21FABDCF8(v28, v29, &v56);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();
      sub_21FA326EC((uint64_t)v15, type metadata accessor for ClinicalSharingQueryDiagnosticsTask);
      *(_WORD *)(v25 + 22) = 2080;
      swift_getErrorValue();
      v30 = sub_21FC5BE44();
      v55 = sub_21FABDCF8(v30, v31, &v56);
      a4 = v53;
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_21FA27000, v23, v24, "%s: Query task %s failed: %s", (uint8_t *)v25, 0x20u);
      v32 = v52;
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v32, -1, -1);
      MEMORY[0x2207D105C](v25, -1, -1);
    }
    else
    {
      swift_release();
      sub_21FA326EC((uint64_t)v15, type metadata accessor for ClinicalSharingQueryDiagnosticsTask);

    }
    v44 = sub_21FC5A98C();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v11, 1, 1, v44);
    v45 = v18;
    a4(v11, v18);

  }
  else
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v53 = a4;
    v33 = sub_21FC5AFD4();
    __swift_project_value_buffer(v33, (uint64_t)qword_25406D830);
    sub_21FA2D120(a3, (uint64_t)v17, type metadata accessor for ClinicalSharingQueryDiagnosticsTask);
    swift_retain();
    v34 = sub_21FC5AFC8();
    v35 = sub_21FC5B994();
    v36 = v35;
    if (os_log_type_enabled(v34, v35))
    {
      v37 = swift_slowAlloc();
      v51 = v36;
      v38 = v37;
      v52 = swift_slowAlloc();
      v56 = v52;
      *(_DWORD *)v38 = 136315394;
      v39 = *(_QWORD *)(a2 + 72);
      v40 = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      v55 = sub_21FABDCF8(v39, v40, &v56);
      sub_21FC5BAC0();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 12) = 2080;
      sub_21FC5AAF4();
      sub_21FA2A08C((unint64_t *)&qword_25553F0F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v41 = sub_21FC5BDCC();
      v55 = sub_21FABDCF8(v41, v42, &v56);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();
      sub_21FA326EC((uint64_t)v17, type metadata accessor for ClinicalSharingQueryDiagnosticsTask);
      _os_log_impl(&dword_21FA27000, v34, (os_log_type_t)v51, "%s: Query task %s finished successfully", (uint8_t *)v38, 0x16u);
      v43 = v52;
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v43, -1, -1);
      MEMORY[0x2207D105C](v38, -1, -1);
    }
    else
    {
      swift_release();
      sub_21FA326EC((uint64_t)v17, type metadata accessor for ClinicalSharingQueryDiagnosticsTask);
    }

    v46 = a3 + *(int *)(DiagnosticsTask + 28);
    v47 = sub_21FC5A98C();
    v48 = *(_QWORD *)(v47 - 8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v48 + 16))(v11, v46, v47);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v11, 0, 1, v47);
    v53(v11, 0);
  }
  return sub_21FA2D1F8((uint64_t)v11, (unint64_t *)&qword_25406AAC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
}

uint64_t sub_21FC4947C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_21FC4B960(v0 + 104, (unint64_t *)&qword_25406B8C0, (uint64_t)&qword_25406B8B8, MEMORY[0x24BDB9A48], (void (*)(uint64_t, uint64_t, uint64_t))sub_21FA50724);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ClinicalSharingSyncTaskCoordinator()
{
  return objc_opt_self();
}

uint64_t initializeBufferWithCopyOfBuffer for ClinicalSharingSyncState(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_21FAEB688(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

void destroy for ClinicalSharingSyncState(uint64_t a1)
{
  sub_21FAEB61C(*(id *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for ClinicalSharingSyncState(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v4;
  void *v5;
  unsigned __int8 v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_21FAEB688(*(id *)a2, v4);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_21FAEB61C(v5, v6);
  return a1;
}

uint64_t assignWithTake for ClinicalSharingSyncState(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  unsigned __int8 v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_21FAEB61C(v4, v5);
  return a1;
}

uint64_t sub_21FC495F0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_21FC49608(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingSyncState()
{
  return &type metadata for ClinicalSharingSyncState;
}

uint64_t sub_21FC49630()
{
  uint64_t v0;
  int *DiagnosticsTask;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  DiagnosticsTask = (int *)type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0);
  v2 = *(unsigned __int8 *)(*((_QWORD *)DiagnosticsTask - 1) + 80);
  v3 = (v2 + 24) & ~v2;
  swift_release();
  v4 = v0 + v3;
  v5 = sub_21FC5AAF4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

  swift_release();
  v6 = v4 + DiagnosticsTask[7];
  v7 = sub_21FC5A98C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  __swift_destroy_boxed_opaque_existential_1(v4 + DiagnosticsTask[8]);
  v8 = v4 + DiagnosticsTask[10];
  v9 = sub_21FC5AAAC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FC49740(void **a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_21FC48E34(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(void (**)(_QWORD, _QWORD))v5, *(_QWORD *)(v5 + 8));
}

uint64_t sub_21FC49798(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FC4B99C(0, (unint64_t *)&qword_25406B8C0, (uint64_t)&qword_25406B8B8, MEMORY[0x24BDB9A48], (void (*)(uint64_t, uint64_t, uint64_t))sub_21FA50724);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FC497FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FC4B99C(0, (unint64_t *)&qword_25406B8C0, (uint64_t)&qword_25406B8B8, MEMORY[0x24BDB9A48], (void (*)(uint64_t, uint64_t, uint64_t))sub_21FA50724);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id sub_21FC49860(id a1, char a2)
{
  if ((a2 & 1) != 0)
    return a1;
  else
    return (id)swift_bridgeObjectRetain();
}

void sub_21FC4986C(unint64_t a1)
{
  sub_21FC48100(a1);
}

uint64_t sub_21FC49874()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FC498A8(uint64_t a1)
{
  uint64_t v1;

  return sub_21FC48258(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(char **)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_21FC498B4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  v3 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  swift_beginAccess();
  v7 = a2[2];
  v8 = a2[3];
  a2[2] = v4;
  a2[3] = v3;
  a2[4] = v6;
  a2[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_21FC4B870(v7, v8);
}

uint64_t sub_21FC49948(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *(_QWORD *)(a2 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21FC499A4()
{
  uint64_t v0;
  int *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void (*v10)(unint64_t, uint64_t);
  uint64_t v11;

  v1 = (int *)type metadata accessor for ClinicalSharingSyncTask();
  v2 = (*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  swift_release();
  v3 = v0 + v2 + v1[6];
  v4 = sub_21FC5AAAC();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  __swift_destroy_boxed_opaque_existential_1(v0 + v2 + v1[7]);
  v5 = v0 + v2 + v1[8];
  v6 = sub_21FC5AAF4();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();

  v7 = v0 + v2 + v1[11];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v7 + 48);
  v8 = v0 + v2 + v1[12];
  v9 = sub_21FC5A98C();
  v10 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v11 = type metadata accessor for ClinicalSharingCloudStandardAPI();
  v10(v8 + *(int *)(v11 + 20), v9);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  if (*(_QWORD *)(v0 + v2 + v1[15]))
    swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FC49B6C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;

  v1 = *(_QWORD *)(type metadata accessor for ClinicalSharingSyncTask() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (uint64_t *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_21FC45634(*(_QWORD *)(v0 + 16), v0 + v2, *v3, v3[1]);
}

uint64_t sub_21FC49BB4()
{
  uint64_t v0;

  return sub_21FC45970(*(void (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(uint64_t **)(v0 + 40));
}

void sub_21FC49BC0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C870)
  {
    sub_21FA97980(255, (unint64_t *)&unk_25406CA90, (uint64_t (*)(uint64_t))sub_21FA80020, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FC4B774((unint64_t *)&qword_25406CA88, (uint64_t)&unk_25406CA90, (uint64_t)sub_21FA80020, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_21FA97980);
    v0 = sub_21FC5B0AC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C870);
  }
}

uint64_t sub_21FC49C60()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21FC49C84()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;

  v1 = (int *)type metadata accessor for ClinicalSharingSyncTask();
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  v3 = v2 + v1[6];
  v4 = sub_21FC5AAAC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  __swift_destroy_boxed_opaque_existential_1(v2 + v1[7]);
  v5 = v2 + v1[8];
  v6 = sub_21FC5AAF4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();

  v7 = v2 + v1[11];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v7 + 48);
  v8 = v2 + v1[12];
  v9 = sub_21FC5A98C();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v11 = type metadata accessor for ClinicalSharingCloudStandardAPI();
  v10(v8 + *(int *)(v11 + 20), v9);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  if (*(_QWORD *)(v2 + v1[15]))
    swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_21FC49E60(void **a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for ClinicalSharingSyncTask() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_21FC4622C(*a1, v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_21FC49EC8(uint64_t *a1)
{
  uint64_t v1;

  return sub_21FC49948(a1, v1);
}

uint64_t sub_21FC49ED0()
{
  uint64_t v0;

  return sub_21FC46364(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD **)(v0 + 32));
}

uint64_t sub_21FC49EDC()
{
  uint64_t v0;

  return sub_21FC4668C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t **)(v0 + 32), sub_21FC46854, (void (*)(uint64_t, uint64_t))sub_21FC4BA98);
}

uint64_t sub_21FC49F08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FC4B99C(0, (unint64_t *)&qword_25406B8C0, (uint64_t)&qword_25406B8B8, MEMORY[0x24BDB9A48], (void (*)(uint64_t, uint64_t, uint64_t))sub_21FA50724);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_21FC49F6C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406B3B0[0])
  {
    sub_21FC4A3B8(255, (unint64_t *)&qword_25406B3A8, (uint64_t (*)(uint64_t, uint64_t, _UNKNOWN **))type metadata accessor for SingleValuePublisherTaskQueue.PendingTaskWrapper);
    v0 = sub_21FC5BAA8();
    if (!v1)
      atomic_store(v0, qword_25406B3B0);
  }
}

uint64_t sub_21FC49FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t (*)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)))
{
  uint64_t v6;

  v6 = a4(0, a3, type metadata accessor for SingleValuePublisherTaskQueue.PendingTaskWrapper);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_21FC4A024(uint64_t a1, int64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_21FA7E380(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  sub_21FC4B9F0(0, (unint64_t *)&qword_25553FDE8, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))type metadata accessor for SingleValuePublisherTaskQueue.PendingTaskWrapper);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[10 * a2 + 4];
    if (a1 != a2 || &v4[10 * a1 + 4] >= (_QWORD *)&v16[80 * v15])
      result = (uint64_t)memmove(&v4[10 * a1 + 4], v16, 80 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

uint64_t sub_21FC4A1AC(uint64_t a1, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_21FA7E4D0(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  sub_21FC4A3B8(0, (unint64_t *)&qword_25406B3A8, (uint64_t (*)(uint64_t, uint64_t, _UNKNOWN **))type metadata accessor for SingleValuePublisherTaskQueue.PendingTaskWrapper);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = v4 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v15 * a1;
  v17 = v14 + v15 * a1;
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_25;
  v19 = *(_QWORD *)(v4 + 16);
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
    goto LABEL_31;
  if ((v20 & 0x8000000000000000) == 0)
  {
    if (v16 < v15 * a2 || v17 >= v14 + v15 * a2 + v20 * v15)
    {
      result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != v15 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront();
    }
    v22 = *(_QWORD *)(v4 + 16);
    v23 = __OFADD__(v22, v8);
    v24 = v22 - v7;
    if (!v23)
    {
      *(_QWORD *)(v4 + 16) = v24;
LABEL_25:
      *v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  result = sub_21FC5BCB8();
  __break(1u);
  return result;
}

uint64_t sub_21FC4A364(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FC4A3B8(0, (unint64_t *)&qword_25406B3A8, (uint64_t (*)(uint64_t, uint64_t, _UNKNOWN **))type metadata accessor for SingleValuePublisherTaskQueue.PendingTaskWrapper);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_21FC4A3B8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, _UNKNOWN **))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for ClinicalSharingSyncTask();
    v7 = a3(a1, v6, &off_25554E600);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_21FC4A418(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, uint64_t, uint64_t (*)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)))
{
  uint64_t v4;

  v4 = a3(0, a2, type metadata accessor for SingleValuePublisherTaskQueue.PendingTaskWrapper);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

unint64_t sub_21FC4A460()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25406B9B0;
  if (!qword_25406B9B0)
  {
    sub_21FA97980(255, (unint64_t *)&qword_25406B9B8, (uint64_t (*)(uint64_t))sub_21FA849F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9E38]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9E58], v1);
    atomic_store(result, (unint64_t *)&qword_25406B9B0);
  }
  return result;
}

void sub_21FC4A4C0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554E640)
  {
    sub_21FA97980(255, &qword_25406B968, (uint64_t (*)(uint64_t))sub_21FA849F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FC4B774((unint64_t *)&qword_25406B960, (uint64_t)&qword_25406B968, (uint64_t)sub_21FA849F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_21FA97980);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554E640);
  }
}

uint64_t sub_21FC4A56C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_21FC4A590@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21FC471A0(a1, v2, a2);
}

void sub_21FC4A598()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554E650)
  {
    sub_21FA849F8();
    sub_21FA2A08C(&qword_25554E658, (uint64_t (*)(uint64_t))sub_21FA849F8, MEMORY[0x24BEE12C8]);
    v0 = sub_21FC5B130();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554E650);
  }
}

void sub_21FC4A62C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554E660)
  {
    sub_21FA849F8();
    sub_21FA50724(255, (unint64_t *)&qword_25406BB50);
    sub_21FA2A08C(&qword_25554E658, (uint64_t (*)(uint64_t))sub_21FA849F8, MEMORY[0x24BEE12C8]);
    v0 = sub_21FC5B130();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554E660);
  }
}

void sub_21FC4A6E0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554E668)
  {
    sub_21FC4A7A8();
    sub_21FC4A62C();
    sub_21FA2A08C(&qword_25554E678, (uint64_t (*)(uint64_t))sub_21FC4A7A8, MEMORY[0x24BDB9AF8]);
    sub_21FA2A08C(&qword_25554E680, (uint64_t (*)(uint64_t))sub_21FC4A62C, MEMORY[0x24BDB9970]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554E668);
  }
}

void sub_21FC4A7A8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554E670)
  {
    sub_21FA5BE58(255, (unint64_t *)&qword_25406BA88);
    sub_21FA50724(255, (unint64_t *)&qword_25406BB50);
    v0 = sub_21FC5B190();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554E670);
  }
}

void sub_21FC4A834()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554E688)
  {
    sub_21FC4A6E0();
    sub_21FA2A08C(&qword_25554E690, (uint64_t (*)(uint64_t))sub_21FC4A6E0, MEMORY[0x24BDB98F0]);
    v0 = sub_21FC5B0F4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554E688);
  }
}

uint64_t sub_21FC4A8AC@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;

  return sub_21FC47600(a1, v2, a2);
}

void sub_21FC4A8B4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  if (!qword_25554E6A0)
  {
    v0 = MEMORY[0x24BEE1328];
    sub_21FA5D3F8(255, (unint64_t *)&qword_25406B980, MEMORY[0x24BEE1328], (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA5BE58(255, (unint64_t *)&qword_25406BA88);
    sub_21FC4B774((unint64_t *)&qword_25406B970, (uint64_t)&qword_25406B980, v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_21FA5D3F8);
    v1 = sub_21FC5B064();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25554E6A0);
  }
}

id sub_21FC4A980@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 16);
  *a1 = v2;
  return v2;
}

uint64_t sub_21FC4A98C()
{
  uint64_t v0;

  return sub_21FC44FCC(*(_QWORD *)(v0 + 16), *(_QWORD ***)(v0 + 24));
}

uint64_t sub_21FC4A994()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FC4A9BC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  char v3;
  uint64_t v5;
  char v6;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v3 = *((_BYTE *)a1 + 8);
  v5 = *a1;
  v6 = v3;
  return v2(&v5);
}

void sub_21FC4A9F8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, void (**a5)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a5;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = sub_21FC4B664;
  *(_QWORD *)(v11 + 24) = v10;
  v12 = (void *)__swift_project_boxed_opaque_existential_1(a4 + 2, a4[5])[1];
  _Block_copy(a5);
  _Block_copy(a5);
  swift_retain();
  if (objc_msgSend(v12, sel_healthAppNotInstalled))
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v13 = sub_21FC5AFD4();
    __swift_project_value_buffer(v13, (uint64_t)qword_25406D830);
    swift_retain();
    v14 = sub_21FC5AFC8();
    v15 = sub_21FC5B994();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v21 = v17;
      *(_DWORD *)v16 = 136315138;
      v19 = a4[9];
      v18 = a4[10];
      swift_bridgeObjectRetain();
      sub_21FABDCF8(v19, v18, &v21);
      sub_21FC5BAC0();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21FA27000, v14, v15, "%s: Health App is not installed", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v17, -1, -1);
      MEMORY[0x2207D105C](v16, -1, -1);

    }
    else
    {

      swift_release();
    }
    v21 = sub_21FC46E60();
    sub_21FA97980(0, &qword_25554E6B0, (uint64_t (*)(uint64_t))sub_21FA849F8, MEMORY[0x24BDB9A90]);
    swift_allocObject();
    swift_retain();
    sub_21FC5B178();
    sub_21FA97980(0, &qword_25406B968, (uint64_t (*)(uint64_t))sub_21FA849F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FC4B774((unint64_t *)&qword_25406B960, (uint64_t)&qword_25406B968, (uint64_t)sub_21FA849F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_21FA97980);
    sub_21FC4B5E0();
    sub_21FC5B370();
    swift_release();
    swift_release();
    _Block_copy(a5);
    sub_21FA5BE58(0, &qword_25406CB60);
    v20 = (void *)sub_21FC5B79C();
    ((void (**)(_QWORD, void *, _QWORD))a5)[2](a5, v20, 0);

    _Block_release(a5);
  }
  else
  {
    sub_21FC47BB4(a1, a2, a3, (uint64_t)sub_21FAE9EE0, v11);
  }
  swift_release();
  swift_release();
  _Block_release(a5);
}

uint64_t sub_21FC4B02C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, void (*a5)(_QWORD), uint64_t a6)
{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;

  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a5;
  *(_QWORD *)(v12 + 24) = a6;
  v13 = (void *)__swift_project_boxed_opaque_existential_1(a4 + 2, a4[5])[1];
  swift_retain();
  if (objc_msgSend(v13, sel_healthAppNotInstalled))
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v14 = sub_21FC5AFD4();
    __swift_project_value_buffer(v14, (uint64_t)qword_25406D830);
    swift_retain();
    v15 = sub_21FC5AFC8();
    v16 = sub_21FC5B994();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v22 = v18;
      *(_DWORD *)v17 = 136315138;
      v19 = a4[9];
      v20 = a4[10];
      swift_bridgeObjectRetain();
      sub_21FABDCF8(v19, v20, &v22);
      sub_21FC5BAC0();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21FA27000, v15, v16, "%s: Health App is not installed", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v18, -1, -1);
      MEMORY[0x2207D105C](v17, -1, -1);

    }
    else
    {

      swift_release();
    }
    v22 = sub_21FC46E60();
    sub_21FA97980(0, &qword_25554E6B0, (uint64_t (*)(uint64_t))sub_21FA849F8, MEMORY[0x24BDB9A90]);
    swift_allocObject();
    swift_retain();
    sub_21FC5B178();
    sub_21FA97980(0, &qword_25406B968, (uint64_t (*)(uint64_t))sub_21FA849F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FC4B774((unint64_t *)&qword_25406B960, (uint64_t)&qword_25406B968, (uint64_t)sub_21FA849F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_21FA97980);
    sub_21FC4B5E0();
    sub_21FC5B370();
    swift_release();
    swift_release();
    a5(0);
    return swift_release();
  }
  else
  {
    sub_21FC47BB4(a1, a2, a3, (uint64_t)sub_21FC4B5B4, v12);
    return swift_release();
  }
}

uint64_t sub_21FC4B5B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 16))(a2);
}

void sub_21FC4B5D8(unint64_t *a1)
{
  uint64_t v1;

  sub_21FC46C30(a1, v1);
}

unint64_t sub_21FC4B5E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25554E6B8;
  if (!qword_25554E6B8)
  {
    sub_21FA97980(255, &qword_25554E6B0, (uint64_t (*)(uint64_t))sub_21FA849F8, MEMORY[0x24BDB9A90]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9AA0], v1);
    atomic_store(result, (unint64_t *)&qword_25554E6B8);
  }
  return result;
}

uint64_t sub_21FC4B640()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_21FC4B664(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_21FC469B0(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_21FC4B66C()
{
  uint64_t v0;

  swift_release();
  swift_release();

  if (*(_QWORD *)(v0 + 72))
    __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FC4B6B8()
{
  uint64_t *v0;

  return sub_21FC45534(v0[2], (uint64_t)(v0 + 3), v0[11], v0[12]);
}

uint64_t sub_21FC4B6C8()
{
  uint64_t v0;

  return sub_21FC45798(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(uint64_t **)(v0 + 40));
}

void sub_21FC4B6D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554E6C0)
  {
    sub_21FA5D3F8(255, &qword_25554E6C8, (uint64_t)&type metadata for CatalogDownloadResult, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FC4B774(&qword_25554E6D0, (uint64_t)&qword_25554E6C8, (uint64_t)&type metadata for CatalogDownloadResult, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_21FA5D3F8);
    v0 = sub_21FC5B0AC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554E6C0);
  }
}

uint64_t sub_21FC4B774(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a4(255, a2, a3, MEMORY[0x24BDB9AE0]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB9AF8], v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FC4B7C0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t sub_21FC4B7F4()
{
  uint64_t v0;

  swift_release();

  if (*(_QWORD *)(v0 + 64))
    __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_21FC4B848(void **a1)
{
  uint64_t v1;

  sub_21FC4615C(*a1, v1 + 16, *(_QWORD **)(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96));
}

uint64_t sub_21FC4B85C(uint64_t *a1)
{
  _QWORD *v1;

  return sub_21FC498B4(a1, v1);
}

uint64_t sub_21FC4B864()
{
  uint64_t v0;

  return sub_21FC462D8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD **)(v0 + 32));
}

uint64_t sub_21FC4B870(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21FC4B8A4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_21FC4B8D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FA5D3F8(0, (unint64_t *)&qword_25553FE00, (uint64_t)&type metadata for CatalogDownloadResult, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE4408]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FC4B934()
{
  uint64_t v0;

  return sub_21FC4668C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t **)(v0 + 32), sub_21FC466FC, (void (*)(uint64_t, uint64_t))sub_21FC4BA98);
}

uint64_t sub_21FC4B960(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;

  sub_21FC4B99C(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

void sub_21FC4B99C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a5(255, a3, a4);
    v6 = sub_21FC5BAA8();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_21FC4B9F0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *, _UNKNOWN **))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for IssuerDirectoryDownloadTask, &off_255540CC0);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_21FC4BA44()
{
  uint64_t v0;

  return sub_21FC44D60(*(_QWORD *)(v0 + 16), *(_QWORD ***)(v0 + 24));
}

uint64_t sub_21FC4BA50(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_OWORD *);
  char v3;
  __int128 v4;
  _OWORD v6[2];
  char v7;

  v2 = *(uint64_t (**)(_OWORD *))(v1 + 16);
  v3 = *(_BYTE *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  v7 = v3;
  return v2(v6);
}

ValueMetadata *type metadata accessor for ClinicalSharingAuthorizations()
{
  return &type metadata for ClinicalSharingAuthorizations;
}

uint64_t sub_21FC4BAC4(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = v1;
  sub_21FC4C93C();
  v24 = v4;
  v29 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC4CA20();
  v25 = v7;
  v28 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FABB048(0, &qword_25406BD38, v10, sub_21FC4CCE8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB98D0]);
  v12 = v11;
  v27 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v24 - v13;
  sub_21FC4CD04();
  v26 = v15;
  v30 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = a1;
  sub_21FC4CBF8(0, &qword_25406BA28, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
  sub_21FC4C9C8();
  sub_21FC5B748();
  *(_QWORD *)(swift_allocObject() + 16) = v2;
  v18 = v2;
  sub_21FC5B184();
  sub_21FC4CAE8();
  sub_21FA2A08C(&qword_25406B898, (uint64_t (*)(uint64_t))sub_21FC4C93C, MEMORY[0x24BDB9970]);
  sub_21FA2A08C(&qword_25406BCB0, (uint64_t (*)(uint64_t))sub_21FC4CAE8, MEMORY[0x24BDB96C0]);
  v19 = v24;
  sub_21FC5B388();
  swift_release();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v19);
  sub_21FC4CCE8();
  v20 = v25;
  sub_21FC5B328();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v20);
  sub_21FC4CD8C();
  sub_21FC5B2C8();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v14, v12);
  sub_21FA2A08C(&qword_25406BCD0, (uint64_t (*)(uint64_t))sub_21FC4CD04, MEMORY[0x24BDB96C0]);
  v21 = v26;
  v22 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v21);
  return v22;
}

uint64_t sub_21FC4BDD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  char v12;
  uint64_t v14;
  uint64_t v15;

  v3 = sub_21FC5ACD4();
  v15 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (sub_21FBF3020(),
        v6 = sub_21FC5B58C(),
        v7 = -1 << *(_BYTE *)(a2 + 32),
        v8 = v6 & ~v7,
        ((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0))
  {
    v9 = ~v7;
    v10 = *(_QWORD *)(v15 + 72);
    v11 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
    do
    {
      v11(v5, *(_QWORD *)(a2 + 48) + v10 * v8, v3);
      sub_21FA2A08C(&qword_25553ECD8, (uint64_t (*)(uint64_t))MEMORY[0x24BE45940], MEMORY[0x24BE45958]);
      v12 = sub_21FC5B5D4();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v3);
      if ((v12 & 1) != 0)
        break;
      v8 = (v8 + 1) & v9;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t sub_21FC4BF3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t result;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;

  v12 = MEMORY[0x24BEE4B08];
  v1 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v5 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain_n();
  v7 = 0;
  while (1)
  {
    if (v4)
    {
      v4 &= v4 - 1;
      goto LABEL_5;
    }
    v9 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v9 >= v5)
      goto LABEL_25;
    v10 = *(_QWORD *)(v1 + 8 * v9);
    ++v7;
    if (!v10)
    {
      v7 = v9 + 1;
      if (v9 + 1 >= v5)
        goto LABEL_25;
      v10 = *(_QWORD *)(v1 + 8 * v7);
      if (!v10)
      {
        v7 = v9 + 2;
        if (v9 + 2 >= v5)
          goto LABEL_25;
        v10 = *(_QWORD *)(v1 + 8 * v7);
        if (!v10)
        {
          v7 = v9 + 3;
          if (v9 + 3 >= v5)
            goto LABEL_25;
          v10 = *(_QWORD *)(v1 + 8 * v7);
          if (!v10)
          {
            v7 = v9 + 4;
            if (v9 + 4 >= v5)
              goto LABEL_25;
            v10 = *(_QWORD *)(v1 + 8 * v7);
            if (!v10)
              break;
          }
        }
      }
    }
LABEL_24:
    v4 = (v10 - 1) & v10;
LABEL_5:
    v8 = swift_bridgeObjectRetain();
    result = sub_21FC4C0C0(v8);
  }
  v11 = v9 + 5;
  if (v11 >= v5)
  {
LABEL_25:
    swift_release();
    swift_bridgeObjectRelease();
    return v12;
  }
  v10 = *(_QWORD *)(v1 + 8 * v11);
  if (v10)
  {
    v7 = v11;
    goto LABEL_24;
  }
  while (1)
  {
    v7 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v7 >= v5)
      goto LABEL_25;
    v10 = *(_QWORD *)(v1 + 8 * v7);
    ++v11;
    if (v10)
      goto LABEL_24;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_21FC4C0C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_21FC5ACD4();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v24 - v8;
  result = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v24 - v11;
  v13 = 0;
  v14 = *(_QWORD *)(a1 + 56);
  v25 = a1 + 56;
  v15 = 1 << *(_BYTE *)(a1 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_5;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v18)
      return swift_release();
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v18)
        return swift_release();
      v22 = *(_QWORD *)(v25 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v18)
          return swift_release();
        v22 = *(_QWORD *)(v25 + 8 * v13);
        if (!v22)
        {
          v13 = v21 + 3;
          if (v21 + 3 >= v18)
            return swift_release();
          v22 = *(_QWORD *)(v25 + 8 * v13);
          if (!v22)
            break;
        }
      }
    }
LABEL_22:
    v17 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v12, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v3 + 72) * v20, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v12, v2);
    sub_21FBED03C((uint64_t)v9, v6);
    result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
  }
  v23 = v21 + 4;
  if (v23 >= v18)
    return swift_release();
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v18)
      return swift_release();
    v22 = *(_QWORD *)(v25 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_21FC4C2E4(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  sub_21FBF2F90();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_21FC4BDD0(a3, *(_QWORD *)(a2 + *(int *)(v7 + 48)));
  if ((result & 1) != 0)
  {
    v11 = sub_21FC5AAF4();
    v12 = *(_QWORD *)(v11 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v9, a2, v11);
    v13 = *a1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = sub_21FA7EC40(0, *(_QWORD *)(v13 + 16) + 1, 1, v13);
    v15 = *(_QWORD *)(v13 + 16);
    v14 = *(_QWORD *)(v13 + 24);
    if (v15 >= v14 >> 1)
      v13 = sub_21FA7EC40(v14 > 1, v15 + 1, 1, v13);
    *(_QWORD *)(v13 + 16) = v15 + 1;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v12 + 32))(v13+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v15, v9, v11);
    *a1 = v13;
  }
  return result;
}

uint64_t sub_21FC4C428(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v4 = sub_21FC5AAF4();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  sub_21FC5AAB8();
  v7 = objc_allocWithZone(MEMORY[0x24BDD3F60]);
  v8 = (void *)sub_21FC5B5E0();
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(v7, sel_initForClinicalAccountIdentifier_, v8);

  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3F58]), sel_initWithHealthStore_recipientIdentifier_, a2, v9);
  v11 = sub_21FC5BA30();

  v15[1] = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v12 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v13 + v12, (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  sub_21FC4CB7C();
  sub_21FA7FE24();
  sub_21FA2A08C(&qword_25406BDD8, (uint64_t (*)(uint64_t))sub_21FC4CB7C, MEMORY[0x24BDB9E58]);
  sub_21FC5B2C8();
  swift_release();
  return swift_release();
}

uint64_t sub_21FC4C5F0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *a1;
  sub_21FA7FE24();
  v7 = *(int *)(v6 + 48);
  v8 = sub_21FC5AAF4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a3, a2, v8);
  *(_QWORD *)(a3 + v7) = v5;
  return swift_bridgeObjectRetain();
}

uint64_t sub_21FC4C650@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  int isUniquelyReferenced_nonNull_native;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;

  sub_21FA7FE24();
  v46 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v41 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v41 - v12;
  v14 = *a1;
  v15 = (_QWORD *)sub_21FA7BE00(MEMORY[0x24BEE4AF8]);
  v16 = *(_QWORD *)(v14 + 16);
  if (!v16)
  {
LABEL_17:
    v39 = sub_21FA4ED60((uint64_t)v15);
    result = swift_bridgeObjectRelease();
    *a2 = v39;
    return result;
  }
  v41 = v14;
  v42 = a2;
  v17 = v14 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v43 = *(_QWORD *)(v5 + 72);
  swift_bridgeObjectRetain();
  v44 = v13;
  v45 = v8;
  while (1)
  {
    v47 = v17;
    v48 = v16;
    sub_21FC4CE20(v17, (uint64_t)v13);
    v20 = v46;
    v21 = *(int *)(v46 + 48);
    v22 = sub_21FC5AAF4();
    v23 = *(_QWORD **)(v22 - 8);
    v24 = (void (*)(char *, char *, uint64_t))v23[2];
    v24(v11, v13, v22);
    v25 = *(_QWORD *)&v13[v21];
    *(_QWORD *)&v11[v21] = v25;
    v26 = *(int *)(v20 + 48);
    v24(v8, v13, v22);
    *(_QWORD *)&v8[v26] = v25;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v49 = v15;
    v29 = sub_21FA73E18((uint64_t)v11);
    v30 = v15[2];
    v31 = (v28 & 1) == 0;
    v32 = v30 + v31;
    if (__OFADD__(v30, v31))
      break;
    v33 = v28;
    if (v15[3] >= v32)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v15 = v49;
        if ((v28 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_21FA7B24C();
        v15 = v49;
        if ((v33 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      sub_21FA78014(v32, isUniquelyReferenced_nonNull_native);
      v34 = sub_21FA73E18((uint64_t)v11);
      if ((v33 & 1) != (v35 & 1))
        goto LABEL_20;
      v29 = v34;
      v15 = v49;
      if ((v33 & 1) != 0)
      {
LABEL_3:
        v18 = v15[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v18 + 8 * v29) = v25;
        goto LABEL_4;
      }
    }
    v15[(v29 >> 6) + 8] |= 1 << v29;
    v24((char *)(v15[6] + v23[9] * v29), v11, v22);
    *(_QWORD *)(v15[7] + 8 * v29) = v25;
    v36 = v15[2];
    v37 = __OFADD__(v36, 1);
    v38 = v36 + 1;
    if (v37)
      goto LABEL_19;
    v15[2] = v38;
LABEL_4:
    swift_bridgeObjectRelease();
    v19 = (void (*)(char *, uint64_t))v23[1];
    v19(v11, v22);
    v8 = v45;
    v19(v45, v22);
    v13 = v44;
    sub_21FC4CE64((uint64_t)v44);
    v17 = v47 + v43;
    v16 = v48 - 1;
    if (v48 == 1)
    {
      swift_bridgeObjectRelease();
      a2 = v42;
      goto LABEL_17;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  result = sub_21FC5BE20();
  __break(1u);
  return result;
}

void sub_21FC4C93C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406B8A0)
  {
    sub_21FC4CBF8(255, &qword_25406BA28, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
    sub_21FC4C9C8();
    v0 = sub_21FC5B130();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406B8A0);
  }
}

unint64_t sub_21FC4C9C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25406BA30;
  if (!qword_25406BA30)
  {
    sub_21FC4CBF8(255, &qword_25406BA28, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_25406BA30);
  }
  return result;
}

void sub_21FC4CA20()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406BD98)
  {
    sub_21FC4CAE8();
    sub_21FC4CC44();
    sub_21FA2A08C(&qword_25406BCB0, (uint64_t (*)(uint64_t))sub_21FC4CAE8, MEMORY[0x24BDB96C0]);
    sub_21FA2A08C(&qword_25406B818, (uint64_t (*)(uint64_t))sub_21FC4CC44, MEMORY[0x24BDB95F8]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406BD98);
  }
}

void sub_21FC4CAE8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406BCB8)
  {
    sub_21FC4CB7C();
    sub_21FA7FE24();
    sub_21FA2A08C(&qword_25406BDD8, (uint64_t (*)(uint64_t))sub_21FC4CB7C, MEMORY[0x24BDB9E58]);
    v0 = sub_21FC5B064();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406BCB8);
  }
}

void sub_21FC4CB7C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406BDE0)
  {
    sub_21FC4CBF8(255, &qword_25406BE08, (void (*)(uint64_t))MEMORY[0x24BE45940]);
    sub_21FA2CDB4();
    v0 = sub_21FC5B250();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406BDE0);
  }
}

void sub_21FC4CBF8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_21FC5B7F0();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_21FC4CC44()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406B820)
  {
    sub_21FC4C93C();
    sub_21FA2CDB4();
    sub_21FA2A08C(&qword_25406B898, (uint64_t (*)(uint64_t))sub_21FC4C93C, MEMORY[0x24BDB9970]);
    v0 = sub_21FC5B04C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406B820);
  }
}

uint64_t sub_21FC4CCE8()
{
  return sub_21FA2A08C(&qword_25406BD90, (uint64_t (*)(uint64_t))sub_21FC4CA20, MEMORY[0x24BDB98F0]);
}

void sub_21FC4CD04()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406BCD8)
  {
    sub_21FABB048(255, &qword_25406BD38, (uint64_t (*)(uint64_t))sub_21FC4CA20, sub_21FC4CCE8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB98D0]);
    sub_21FC4CD8C();
    v0 = sub_21FC5B064();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406BCD8);
  }
}

unint64_t sub_21FC4CD8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25406BD30;
  if (!qword_25406BD30)
  {
    sub_21FABB048(255, &qword_25406BD38, (uint64_t (*)(uint64_t))sub_21FC4CA20, sub_21FC4CCE8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB98D0]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BDB98D8], v1);
    atomic_store(result, (unint64_t *)&qword_25406BD30);
  }
  return result;
}

uint64_t sub_21FC4CDF4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_21FC4CE18(uint64_t a1)
{
  uint64_t v1;

  return sub_21FC4C428(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_21FC4CE20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FA7FE24();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FC4CE64(uint64_t a1)
{
  uint64_t v2;

  sub_21FA7FE24();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21FC4CEA0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_21FC5AAF4();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_21FC4CF00@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_21FC5AAF4() - 8) + 80);
  return sub_21FC4C5F0(a1, v2 + ((v5 + 16) & ~v5), a2);
}

ValueMetadata *type metadata accessor for ClinicalSharingFHIRResource()
{
  return &type metadata for ClinicalSharingFHIRResource;
}

uint64_t sub_21FC4CF5C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21FC4CF80 + 4 * byte_21FC746D0[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_21FC4CF80()
{
  return 0x656372756F736572;
}

uint64_t sub_21FC4CFA0()
{
  return 0x746E65746E6F63;
}

uint64_t sub_21FC4CFB8()
{
  return 1635018093;
}

uint64_t sub_21FC4CFC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_21FC4D088(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_21FC4CFEC()
{
  sub_21FC4D5E8();
  return sub_21FC5BF10();
}

uint64_t sub_21FC4D014()
{
  sub_21FC4D5E8();
  return sub_21FC5BF1C();
}

double sub_21FC4D03C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_21FC4D230(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_21FC4D088(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_21FC5BDF0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656372756F736572 && a2 == 0xEC00000065707954 || (sub_21FC5BDF0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000 || (sub_21FC5BDF0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1635018093 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_21FC5BDF0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_21FC4D230@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  sub_21FC4D590();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_21FC4D5E8();
  sub_21FC5BEE0();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    return sub_21FADBC58(0, 1);
  }
  else
  {
    LOBYTE(v26) = 0;
    v10 = sub_21FC5BD18();
    v12 = v11;
    v25 = v10;
    LOBYTE(v26) = 1;
    swift_bridgeObjectRetain();
    v13 = sub_21FC5BD18();
    v15 = v14;
    v23 = v13;
    sub_21FC0D4EC();
    v28 = 2;
    sub_21FC4D62C();
    v24 = v15;
    swift_bridgeObjectRetain();
    sub_21FC5BD0C();
    v22 = a2;
    v16 = v26;
    v28 = 3;
    sub_21FC4D6D0();
    swift_bridgeObjectRetain();
    sub_21FC5BD0C();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v17 = v26;
    v18 = v27;
    sub_21FADBC44(v26, v27);
    sub_21FADBC58(0, 1);
    swift_bridgeObjectRetain();
    v19 = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_21FADBC44(v17, v18);
    sub_21FADBC58(v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = sub_21FADBC58(v17, v18);
    v21 = v22;
    *v22 = v25;
    v21[1] = v12;
    v21[2] = v23;
    v21[3] = v19;
    v21[4] = v16;
    v21[5] = v17;
    v21[6] = v18;
  }
  return result;
}

void sub_21FC4D590()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554E6F0)
  {
    sub_21FC4D5E8();
    v0 = sub_21FC5BD3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554E6F0);
  }
}

unint64_t sub_21FC4D5E8()
{
  unint64_t result;

  result = qword_25554E6F8;
  if (!qword_25554E6F8)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC747E8, &type metadata for ClinicalSharingFHIRResource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554E6F8);
  }
  return result;
}

unint64_t sub_21FC4D62C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_25554E700;
  if (!qword_25554E700)
  {
    sub_21FC0D4EC();
    v2 = v1;
    v3 = sub_21FC4D68C();
    result = MEMORY[0x2207D0F78](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_25554E700);
  }
  return result;
}

unint64_t sub_21FC4D68C()
{
  unint64_t result;

  result = qword_25554E708;
  if (!qword_25554E708)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC73ECC, &type metadata for ClinicalSharingFHIRContent);
    atomic_store(result, (unint64_t *)&qword_25554E708);
  }
  return result;
}

unint64_t sub_21FC4D6D0()
{
  unint64_t result;

  result = qword_25554E710;
  if (!qword_25554E710)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC61108, &type metadata for ClinicalSharingFHIRMeta);
    atomic_store(result, (unint64_t *)&qword_25554E710);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ClinicalSharingFHIRResource.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21FC4D760 + 4 * byte_21FC746D9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21FC4D794 + 4 * byte_21FC746D4[v4]))();
}

uint64_t sub_21FC4D794(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FC4D79C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FC4D7A4);
  return result;
}

uint64_t sub_21FC4D7B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FC4D7B8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21FC4D7BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FC4D7C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingFHIRResource.CodingKeys()
{
  return &type metadata for ClinicalSharingFHIRResource.CodingKeys;
}

unint64_t sub_21FC4D7E4()
{
  unint64_t result;

  result = qword_25554E718;
  if (!qword_25554E718)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC747C0, &type metadata for ClinicalSharingFHIRResource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554E718);
  }
  return result;
}

unint64_t sub_21FC4D82C()
{
  unint64_t result;

  result = qword_25554E720;
  if (!qword_25554E720)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC74730, &type metadata for ClinicalSharingFHIRResource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554E720);
  }
  return result;
}

unint64_t sub_21FC4D874()
{
  unint64_t result;

  result = qword_25554E728;
  if (!qword_25554E728)
  {
    result = MEMORY[0x2207D0F78](&unk_21FC74758, &type metadata for ClinicalSharingFHIRResource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25554E728);
  }
  return result;
}

uint64_t *sub_21FC4D8B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  id v15;
  uint64_t v16;
  char *v17;
  char *v18;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v9 = (void *)a2[1];
    v8 = a2[2];
    a1[1] = (uint64_t)v9;
    a1[2] = v8;
    v10 = *(int *)(a3 + 28);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = sub_21FC5A6C8();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_retain();
    v15 = v9;
    v14(v11, v12, v13);
    v16 = *(int *)(a3 + 32);
    v17 = (char *)v7 + v16;
    v18 = (char *)a2 + v16;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = v18[8];
  }
  return v7;
}

uint64_t sub_21FC4D990(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release();

  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_21FC5A6C8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_21FC4D9E0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  id v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_21FC5A6C8();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_retain();
  v12 = v6;
  v11(v8, v9, v10);
  v13 = *(int *)(a3 + 32);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  return a1;
}

_QWORD *sub_21FC4DA90(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char v16;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = (void *)a2[1];
  v7 = (void *)a1[1];
  a1[1] = v6;
  v8 = v6;

  a1[2] = a2[2];
  v9 = *(int *)(a3 + 28);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_21FC5A6C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  v13 = *(int *)(a3 + 32);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = v15[8];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v16;
  return a1;
}

uint64_t sub_21FC4DB44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_21FC5A6C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 32);
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  return a1;
}

_QWORD *sub_21FC4DBD4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  *a1 = *a2;
  swift_release();
  v6 = (void *)a1[1];
  a1[1] = a2[1];

  a1[2] = a2[2];
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_21FC5A6C8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 32);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  return a1;
}

uint64_t sub_21FC4DC7C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FC4DC88(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_21FC5A6C8();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t sub_21FC4DD04()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_21FC4DD10(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_21FC5A6C8();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ClinicalSharingMedicationDoseEventQuery()
{
  uint64_t result;

  result = qword_25554E788;
  if (!qword_25554E788)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21FC4DDC0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_21FC5A6C8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21FC4DE5C(unint64_t a1, void (*a2)(id *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  void *v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t result;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(id *);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  _QWORD *v40;

  v4 = v3;
  v35 = a2;
  v36 = a3;
  v6 = sub_21FC5AAAC();
  v33 = *(_QWORD *)(v6 - 8);
  v34 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = (_QWORD *)MEMORY[0x24BEE4B00];
  if (a1 >> 62)
  {
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
    if (v9)
      goto LABEL_3;
  }
  else
  {
    v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v9)
    {
LABEL_3:
      v32 = a1 & 0xC000000000000001;
      v10 = (_QWORD *)MEMORY[0x24BEE4B00];
      v11 = 4;
      v30 = xmmword_21FC5E070;
      v31 = v9;
      while (1)
      {
        if (v32)
          v14 = (id)MEMORY[0x2207D057C](v11 - 4, a1);
        else
          v14 = *(id *)(a1 + 8 * v11);
        v15 = v14;
        if (__OFADD__(v11 - 4, 1))
        {
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
        v39 = v14;
        v35(&v39);
        if (v4)
        {
          swift_release();
          swift_bridgeObjectRelease();

          return (uint64_t)v10;
        }
        v37 = v11 - 3;
        v16 = a1;
        v4 = (uint64_t)v8;
        a1 = sub_21FA741E8((uint64_t)v8);
        v18 = v10[2];
        v19 = (v17 & 1) == 0;
        v20 = v18 + v19;
        if (__OFADD__(v18, v19))
          goto LABEL_23;
        v21 = v17;
        if (v10[3] < v20)
        {
          sub_21FA78044(v20, 1);
          v10 = v40;
          v22 = sub_21FA741E8(v4);
          if ((v21 & 1) != (v23 & 1))
          {
            result = sub_21FC5BE20();
            __break(1u);
            return result;
          }
          a1 = v22;
        }
        if ((v21 & 1) != 0)
        {
          v8 = (char *)v4;
          v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v4, v34);
          v10 = v40;
          v13 = (_QWORD *)(v40[7] + 8 * a1);
          MEMORY[0x2207D0180](v12);
          if (*(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_21FC5B7CC();
          sub_21FC5B7E4();
          sub_21FC5B7C0();
        }
        else
        {
          sub_21FA2CEE4();
          v24 = swift_allocObject();
          *(_OWORD *)(v24 + 16) = v30;
          *(_QWORD *)(v24 + 32) = v15;
          v38 = v24;
          sub_21FC5B7C0();
          v25 = v38;
          v10[(a1 >> 6) + 8] |= 1 << a1;
          v8 = (char *)v4;
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v33 + 32))(v10[6] + *(_QWORD *)(v33 + 72) * a1, v4, v34);
          *(_QWORD *)(v10[7] + 8 * a1) = v25;
          v26 = v10[2];
          v27 = __OFADD__(v26, 1);
          v28 = v26 + 1;
          if (v27)
            goto LABEL_24;
          v10[2] = v28;
        }
        a1 = v16;
        v4 = 0;
        ++v11;
        if (v37 == v31)
        {
          swift_bridgeObjectRelease();
          return (uint64_t)v10;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4B00];
}

uint64_t sub_21FC4E178()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  void *v20;
  void (*v21)(char *, uint64_t);
  void *v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  char *v51;
  id v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[6];

  v1 = v0;
  v2 = type metadata accessor for ClinicalSharingMedicationDoseEventQuery();
  v3 = *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64);
  v48 = *(_QWORD *)(v2 - 8);
  v49 = v3;
  MEMORY[0x24BDAC7A8](v2);
  v47 = (uint64_t)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_21FC5B8F8();
  v46 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC505C4();
  v9 = *(_QWORD *)(v8 - 8);
  v54 = v8;
  v55 = v9;
  MEMORY[0x24BDAC7A8](v8);
  v51 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC50670();
  v57 = v11;
  v59 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v53 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC507A4();
  v58 = v13;
  v60 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v56 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_21FC5AAAC();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (void *)objc_opt_self();
  sub_21FC5A6A4();
  v20 = (void *)sub_21FC5AA64();
  v21 = *(void (**)(char *, uint64_t))(v16 + 8);
  v21(v18, v15);
  sub_21FC5A680();
  v22 = (void *)sub_21FC5AA64();
  v21(v18, v15);
  v23 = objc_msgSend(v19, sel_predicateForSamplesWithStartDate_endDate_options_, v20, v22, 0);
  v52 = v23;

  v24 = (uint64_t)v1;
  v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3E98]), sel_initWithSampleType_predicate_, v1[1], v23);
  sub_21FA2CEA0(*v1 + 16, (uint64_t)v62);
  __swift_project_boxed_opaque_existential_1(v62, v62[3]);
  sub_21FA2CEE4();
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_21FC5E070;
  *(_QWORD *)(v26 + 32) = v25;
  v61 = v26;
  sub_21FC5B7C0();
  v50 = v25;
  sub_21FAADEE8();
  sub_21FC5B91C();
  sub_21FA2A08C(&qword_25553F088, (uint64_t (*)(uint64_t))MEMORY[0x24BE45A48], MEMORY[0x24BE45A40]);
  v27 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v7, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v61 = v27;
  v28 = (uint64_t)v1;
  v45 = v1;
  v29 = v47;
  sub_21FA2D120(v28, v47, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingMedicationDoseEventQuery);
  v30 = *(unsigned __int8 *)(v48 + 80);
  v31 = (v30 + 16) & ~v30;
  v46 = v31;
  v48 = v30 | 7;
  v49 += v31;
  v32 = swift_allocObject();
  sub_21FA2D23C(v29, v32 + v31, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingMedicationDoseEventQuery);
  sub_21FA2CCF4();
  sub_21FA7BA1C(0, &qword_25553FC18, &qword_25553FC20);
  sub_21FA2A08C(&qword_25553E0C8, (uint64_t (*)(uint64_t))sub_21FA2CCF4, MEMORY[0x24BDB9AF8]);
  v33 = v51;
  sub_21FC5B28C();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  sub_21FA2D120(v24, v29, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingMedicationDoseEventQuery);
  v34 = swift_allocObject();
  v35 = v46;
  sub_21FA2D23C(v29, v34 + v46, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingMedicationDoseEventQuery);
  sub_21FC5B184();
  type metadata accessor for PBTypedData(0);
  sub_21FC50738();
  sub_21FA2A08C(&qword_25554E7E0, (uint64_t (*)(uint64_t))sub_21FC505C4, MEMORY[0x24BDB94C8]);
  sub_21FA2A08C((unint64_t *)&qword_25554D300, (uint64_t (*)(uint64_t))sub_21FC50738, MEMORY[0x24BDB9AF8]);
  v37 = v53;
  v36 = v54;
  sub_21FC5B34C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v33, v36);
  sub_21FA2D120((uint64_t)v45, v29, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingMedicationDoseEventQuery);
  v38 = swift_allocObject();
  sub_21FA2D23C(v29, v38 + v35, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalSharingMedicationDoseEventQuery);
  type metadata accessor for ClinicalSharingQueryOutput(0);
  sub_21FA2A08C(&qword_25554E7F0, (uint64_t (*)(uint64_t))sub_21FC50670, MEMORY[0x24BDB98F0]);
  v40 = v56;
  v39 = v57;
  sub_21FC5B28C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v37, v39);
  sub_21FA2A08C(&qword_25554E7F8, (uint64_t (*)(uint64_t))sub_21FC507A4, MEMORY[0x24BDB94C8]);
  v41 = v58;
  v42 = sub_21FC5B280();

  (*(void (**)(char *, uint64_t))(v60 + 8))(v40, v41);
  return v42;
}

uint64_t sub_21FC4E7E0@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_21FAC1C9C(*a1);
  if (result)
  {
    *a2 = result;
  }
  else
  {
    result = sub_21FC5BC70();
    __break(1u);
  }
  return result;
}

uint64_t sub_21FC4E860@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  _QWORD v40[2];
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;

  v47 = a2;
  v3 = type metadata accessor for PBTypedData(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v50 = (uint64_t)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v49 = (uint64_t)v40 - v7;
  sub_21FC50E0C();
  v44 = v8;
  v42 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v41 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC50F00();
  v45 = *(_QWORD *)(v10 - 8);
  v46 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v43 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D1A0(0, &qword_25553F0A0, type metadata accessor for PBTypedData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)v40 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)v40 - v20;
  v48 = *a1;
  sub_21FC4ECC8(v48, (uint64_t)v40 - v20);
  v22 = sub_21FA7EC68(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v24 = *(_QWORD *)(v22 + 16);
  v23 = *(_QWORD *)(v22 + 24);
  if (v24 >= v23 >> 1)
    v22 = sub_21FA7EC68(v23 > 1, v24 + 1, 1, v22);
  *(_QWORD *)(v22 + 16) = v24 + 1;
  v25 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v26 = *(_QWORD *)(v13 + 72);
  sub_21FC50FA0((uint64_t)v21, v22 + v25 + v26 * v24);
  v52 = v22;
  v27 = sub_21FC4F024(v48);
  sub_21FBE0200(v27);
  v28 = *(_QWORD *)(v52 + 16);
  if (v28)
  {
    v29 = v52 + v25;
    v40[1] = v52;
    swift_bridgeObjectRetain();
    v30 = MEMORY[0x24BEE4AF8];
    v48 = v3;
    do
    {
      sub_21FC50FFC(v29, (uint64_t)v19);
      sub_21FC50FA0((uint64_t)v19, (uint64_t)v16);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v16, 1, v3) == 1)
      {
        sub_21FA2D1F8((uint64_t)v16, &qword_25553F0A0, type metadata accessor for PBTypedData);
      }
      else
      {
        v31 = v49;
        sub_21FA2D23C((uint64_t)v16, v49, type metadata accessor for PBTypedData);
        sub_21FA2D23C(v31, v50, type metadata accessor for PBTypedData);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v30 = sub_21FA7EC54(0, *(_QWORD *)(v30 + 16) + 1, 1, v30);
        v33 = *(_QWORD *)(v30 + 16);
        v32 = *(_QWORD *)(v30 + 24);
        if (v33 >= v32 >> 1)
          v30 = sub_21FA7EC54(v32 > 1, v33 + 1, 1, v30);
        *(_QWORD *)(v30 + 16) = v33 + 1;
        sub_21FA2D23C(v50, v30+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v33, type metadata accessor for PBTypedData);
        v3 = v48;
      }
      v29 += v26;
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease();
  }
  else
  {
    v30 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  v51 = v30;
  sub_21FA2D1A0(0, &qword_25554E808, type metadata accessor for PBTypedData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_21FC50EA0();
  v34 = v41;
  sub_21FC5B748();
  swift_bridgeObjectRelease();
  sub_21FA2CDB4();
  v36 = v43;
  v35 = v44;
  sub_21FC5B118();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v34, v35);
  sub_21FA2A08C(&qword_25554E820, (uint64_t (*)(uint64_t))sub_21FC50F00, MEMORY[0x24BDB9970]);
  v37 = v46;
  v38 = sub_21FC5B280();
  result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v36, v37);
  *v47 = v38;
  return result;
}

uint64_t sub_21FC4ECC8@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[16];

  sub_21FA2D1A0(0, &qword_25553E0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = v29 - v6 + 16;
  v8 = type metadata accessor for PBDateRange(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  v11 = type metadata accessor for PBMedicationTrackingDoseEvents(0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (uint64_t *)(v29 - v16 + 16);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v26 = sub_21FC5BC7C();
    v15 = swift_bridgeObjectRelease();
    if (v26)
      goto LABEL_3;
LABEL_9:
    v27 = type metadata accessor for PBTypedData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(a2, 1, 1, v27);
  }
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_9;
LABEL_3:
  MEMORY[0x24BDAC7A8](v15);
  *(&v28 - 2) = v2;
  v18 = sub_21FC42004((void (*)(id *))sub_21FC51ABC, (uint64_t)(&v28 - 4), a1, (uint64_t)v29);
  sub_21FC5AD10();
  *v17 = v18;
  sub_21FC5AD10();
  v19 = type metadata accessor for PBTypedData(0);
  v20 = *(int *)(v19 + 20);
  if (qword_25553D590 != -1)
    swift_once();
  *(_QWORD *)(a2 + v20) = qword_25553E450;
  v21 = sub_21FC5A6C8();
  v22 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v7, 1, 1, v21);
  swift_retain();
  sub_21FBE7E8C(5, 1, v7);
  sub_21FA2D1F8((uint64_t)v7, &qword_25553E0E8, v22);
  PBTypedData.dateRange.setter((uint64_t)v10);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBTypedData._StorageClass(0);
    swift_allocObject();
    v23 = swift_retain();
    *(_QWORD *)(a2 + v20) = sub_21FA3A458(v23);
    swift_release();
  }
  v24 = *(_QWORD *)(a2 + v20);
  swift_beginAccess();
  *(_QWORD *)(v24 + 16) = 128;
  *(_BYTE *)(v24 + 24) = 1;
  sub_21FA2D120((uint64_t)v17, (uint64_t)v14, type metadata accessor for PBMedicationTrackingDoseEvents);
  PBTypedData.medicationTrackingDoseEvents.setter((uint64_t)v14);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a2, 0, 1, v19);
  return sub_21FA326EC((uint64_t)v17, type metadata accessor for PBMedicationTrackingDoseEvents);
}

uint64_t sub_21FC4F024(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  v1 = a1;
  if (a1 >> 62)
  {
LABEL_24:
    swift_bridgeObjectRetain();
    v2 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v2)
    {
LABEL_3:
      v3 = (_QWORD *)MEMORY[0x24BEE4B00];
      v36 = (_QWORD *)MEMORY[0x24BEE4B00];
      v33 = v1 & 0xC000000000000001;
      swift_bridgeObjectRetain();
      for (i = 4; ; ++i)
      {
        v7 = i - 4;
        if (v33)
        {
          v8 = (id)MEMORY[0x2207D057C](i - 4, v1);
          v9 = i - 3;
          if (__OFADD__(v7, 1))
            goto LABEL_21;
        }
        else
        {
          v8 = *(id *)(v1 + 8 * i);
          v9 = i - 3;
          if (__OFADD__(v7, 1))
          {
LABEL_21:
            __break(1u);
LABEL_22:
            __break(1u);
LABEL_23:
            __break(1u);
            goto LABEL_24;
          }
        }
        v34 = v9;
        v10 = v1;
        v11 = v8;
        v12 = objc_msgSend(v8, sel_medicationIdentifier);
        sub_21FC5B604();
        v1 = v13;

        sub_21FC5B604();
        sub_21FA87D78();
        v14 = sub_21FC5BAD8();
        v16 = v15;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v18 = sub_21FA73F34(v14, v16);
        v19 = v3[2];
        v20 = (v17 & 1) == 0;
        v21 = v19 + v20;
        if (__OFADD__(v19, v20))
          goto LABEL_22;
        v1 = v17;
        if (v3[3] < v21)
        {
          sub_21FA78038(v21, 1);
          v3 = v36;
          v22 = sub_21FA73F34(v14, v16);
          if ((v1 & 1) != (v23 & 1))
          {
            result = sub_21FC5BE20();
            __break(1u);
            return result;
          }
          v18 = v22;
        }
        if ((v1 & 1) != 0)
        {
          v5 = swift_bridgeObjectRelease();
          v6 = (_QWORD *)(v3[7] + 8 * v18);
          MEMORY[0x2207D0180](v5);
          if (*(_QWORD *)((*v6 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_21FC5B7CC();
          sub_21FC5B7E4();
          sub_21FC5B7C0();
        }
        else
        {
          sub_21FA2CEE4();
          v24 = swift_allocObject();
          *(_OWORD *)(v24 + 16) = xmmword_21FC5E070;
          *(_QWORD *)(v24 + 32) = v11;
          v35 = v24;
          sub_21FC5B7C0();
          v3[(v18 >> 6) + 8] |= 1 << v18;
          v25 = (uint64_t *)(v3[6] + 16 * v18);
          *v25 = v14;
          v25[1] = v16;
          *(_QWORD *)(v3[7] + 8 * v18) = v35;
          v26 = v3[2];
          v27 = __OFADD__(v26, 1);
          v28 = v26 + 1;
          if (v27)
            goto LABEL_23;
          v3[2] = v28;
        }
        v1 = v10;
        if (v34 == v2)
        {
          v29 = swift_bridgeObjectRelease();
          MEMORY[0x24BDAC7A8](v29);
          v30 = sub_21FC51078((uint64_t)v3, (void (*)(uint64_t, uint64_t, uint64_t))sub_21FC51058);
          swift_release();
          v31 = sub_21FBFECE8(v30);
          swift_bridgeObjectRelease();
          return v31;
        }
      }
    }
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_21FC4F3B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Output;
  _QWORD *v13;
  uint64_t v15;
  _BYTE v16[16];
  _BYTE *v17;

  v5 = sub_21FC5ACD4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = *(_QWORD *)(*(_QWORD *)v2 + 56);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BE45938], v5);
  v17 = v8;
  swift_bridgeObjectRetain();
  v10 = sub_21FBE9FC4(MEMORY[0x24BEE4AF8], (void (*)(uint64_t *, char *))sub_21FA85168, (uint64_t)v16, v9);
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  if (*(_QWORD *)(v10 + 16))
  {
    sub_21FA2D120(a1, a2, type metadata accessor for PBTypedData);
    v11 = sub_21FBF27F0(v10);
    swift_bridgeObjectRelease();
    Output = type metadata accessor for ClinicalSharingQueryOutput(0);
    *(_QWORD *)(a2 + *(int *)(Output + 20)) = v11;
    v13 = (_QWORD *)(a2 + *(int *)(Output + 24));
    *v13 = 0;
    v13[1] = 0;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(Output - 8) + 56))(a2, 0, 1, Output);
  }
  else
  {
    v15 = type metadata accessor for ClinicalSharingQueryOutput(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a2, 1, 1, v15);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_21FC4F530@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[12];
  unsigned int v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;

  v45 = a2;
  sub_21FA2D1A0(0, &qword_25553E0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v41[-v9];
  v11 = type metadata accessor for PBDateRange(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = &v41[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for PBHistogramSeries(0);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = &v41[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (uint64_t *)&v41[-v19];
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v39 = sub_21FC5BC7C();
    v18 = swift_bridgeObjectRelease();
    if (v39)
      goto LABEL_3;
LABEL_9:
    v40 = type metadata accessor for PBTypedData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(a4, 1, 1, v40);
  }
  if (!*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_9;
LABEL_3:
  v43 = v13;
  v44 = v17;
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)&v41[-16] = v4;
  v21 = swift_bridgeObjectRetain();
  v22 = sub_21FC4DE5C(v21, (void (*)(id *))sub_21FC51404, (uint64_t)&v41[-32]);
  *v20 = MEMORY[0x24BEE4AF8];
  v20[1] = 0;
  v20[2] = 0xE000000000000000;
  v23 = sub_21FC5AD10();
  MEMORY[0x24BDAC7A8](v23);
  *(_QWORD *)&v41[-32] = v4;
  *(_QWORD *)&v41[-24] = a1;
  *(_QWORD *)&v41[-16] = v45;
  v24 = sub_21FC508C0(v22, (void (*)(uint64_t, _QWORD))sub_21FC5141C, (uint64_t)&v41[-48]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *v20 = v24;
  sub_21FC5AD10();
  v45 = type metadata accessor for PBTypedData(0);
  v25 = *(int *)(v45 + 20);
  if (qword_25553D590 != -1)
    swift_once();
  *(_QWORD *)(a4 + v25) = qword_25553E450;
  v26 = type metadata accessor for ClinicalSharingMedicationDoseEventQuery();
  v27 = *(int *)(v26 + 28);
  v28 = (uint64_t *)(v4 + *(int *)(v26 + 32));
  v29 = *v28;
  v42 = *((unsigned __int8 *)v28 + 8);
  v30 = v4 + v27;
  v31 = sub_21FC5A6C8();
  v32 = a4;
  v33 = *(_QWORD *)(v31 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v33 + 16))(v10, v30, v31);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v10, 0, 1, v31);
  swift_retain();
  v34 = (uint64_t)v43;
  sub_21FBE7E8C(v29, v42, v10);
  sub_21FA2D1F8((uint64_t)v10, &qword_25553E0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878]);
  PBTypedData.dateRange.setter(v34);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBTypedData._StorageClass(0);
    swift_allocObject();
    v35 = swift_retain();
    *(_QWORD *)(v32 + v25) = sub_21FA3A458(v35);
    swift_release();
  }
  v36 = *(_QWORD *)(v32 + v25);
  swift_beginAccess();
  *(_QWORD *)(v36 + 16) = 128;
  *(_BYTE *)(v36 + 24) = 1;
  v37 = (uint64_t)v44;
  sub_21FA2D120((uint64_t)v20, (uint64_t)v44, type metadata accessor for PBHistogramSeries);
  PBTypedData.histogramSeries.setter(v37);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v32, 0, 1);
  return sub_21FA326EC((uint64_t)v20, type metadata accessor for PBHistogramSeries);
}

uint64_t sub_21FC4F94C@<X0>(void **a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  id v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;

  v6 = sub_21FC5AAAC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_21FC5AC08();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, *a2 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_gregorianCalendar, v10);
  v15 = objc_msgSend(v14, sel_startDate);
  sub_21FC5AA94();

  v16 = (char *)a2 + *(int *)(type metadata accessor for ClinicalSharingMedicationDoseEventQuery() + 32);
  if (v16[8] == 1 && (v17 = *(_QWORD *)v16, ((1 << v17) & 0x67) == 0))
  {
    if (v17 == 3)
      sub_21FAC9234(0, (uint64_t)v9, a3);
    else
      sub_21FAC96CC((uint64_t)v9, a3);
  }
  else
  {
    sub_21FC5AB30();
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_21FC4FAF4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;

  v51 = a1;
  v52 = a3;
  v8 = type metadata accessor for PBBucket(0);
  v50 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v53 = (unint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v54 = (uint64_t)&v48 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v48 - v14;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v48 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v48 - v19;
  v21 = swift_bridgeObjectRetain();
  v22 = sub_21FC514B0(v21);
  swift_bridgeObjectRelease();
  *((_QWORD *)v20 + 1) = 0;
  sub_21FC5AD10();
  *(_QWORD *)v20 = 0;
  if (v22 >> 62)
  {
    swift_bridgeObjectRetain();
    v23 = sub_21FC5BC7C();
    swift_bridgeObjectRelease_n();
    if (v23 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
      goto LABEL_20;
    }
  }
  else
  {
    v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease();
  }
  if (v23 > 0x7FFFFFFF)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  *((_DWORD *)v20 + 4) = v23;
  v24 = swift_bridgeObjectRetain();
  v25 = sub_21FC5163C(v24);
  swift_bridgeObjectRelease();
  *((_QWORD *)v18 + 1) = 0;
  sub_21FC5AD10();
  *(_QWORD *)v18 = 0x3FF0000000000000;
  if (!(v25 >> 62))
  {
    v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
LABEL_21:
  swift_bridgeObjectRetain();
  v26 = sub_21FC5BC7C();
  swift_bridgeObjectRelease_n();
  if (v26 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_23;
  }
LABEL_6:
  if (v26 > 0x7FFFFFFF)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  *((_DWORD *)v18 + 4) = v26;
  v27 = swift_bridgeObjectRetain();
  v28 = sub_21FC517C8(v27);
  swift_bridgeObjectRelease();
  *((_QWORD *)v15 + 1) = 0;
  sub_21FC5AD10();
  *(_QWORD *)v15 = 0x4000000000000000;
  if (!(v28 >> 62))
  {
    v29 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
LABEL_24:
  swift_bridgeObjectRetain();
  v29 = sub_21FC5BC7C();
  swift_bridgeObjectRelease_n();
  if (v29 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_26;
  }
LABEL_9:
  if (v29 > 0x7FFFFFFF)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  *((_DWORD *)v15 + 4) = v29;
  v30 = swift_bridgeObjectRetain();
  v31 = sub_21FC51954(v30);
  swift_bridgeObjectRelease();
  v32 = (_QWORD *)v54;
  *(_QWORD *)(v54 + 8) = 0;
  sub_21FC5AD10();
  *v32 = 0x4008000000000000;
  if (!(v31 >> 62))
  {
    v33 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
LABEL_27:
  swift_bridgeObjectRetain();
  v33 = sub_21FC5BC7C();
  swift_bridgeObjectRelease_n();
  if (v33 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_29;
  }
LABEL_12:
  v29 = v53;
  if (v33 > 0x7FFFFFFF)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  *(_DWORD *)(v54 + 16) = v33;
  *(_QWORD *)(v29 + 8) = 0;
  swift_bridgeObjectRetain();
  sub_21FC5AD10();
  *(_QWORD *)v29 = 0x4010000000000000;
  if (!(a2 >> 62))
  {
    v34 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
LABEL_30:
  swift_bridgeObjectRetain();
  v34 = sub_21FC5BC7C();
  swift_bridgeObjectRelease_n();
  if (v34 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_32;
  }
LABEL_15:
  if (v34 > 0x7FFFFFFF)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v49 = a4;
  *(_DWORD *)(v29 + 16) = v34;
  *a5 = 0;
  a5[1] = 0xE000000000000000;
  a5[3] = 0;
  a5[4] = 0xE000000000000000;
  type metadata accessor for PBHistogramSeries.Value(0);
  sub_21FC5AD10();
  sub_21FA2D1A0(0, &qword_25554D220, type metadata accessor for PBBucket, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v35 = *(_QWORD *)(v50 + 72);
  v36 = (*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
  v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_21FC5EE20;
  v38 = v37 + v36;
  sub_21FA2D120((uint64_t)v20, v38, type metadata accessor for PBBucket);
  sub_21FA2D120((uint64_t)v18, v38 + v35, type metadata accessor for PBBucket);
  sub_21FA2D120((uint64_t)v15, v38 + 2 * v35, type metadata accessor for PBBucket);
  a4 = v54;
  sub_21FA2D120(v54, v38 + 3 * v35, type metadata accessor for PBBucket);
  v39 = v38 + 4 * v35;
  a2 = v53;
  sub_21FA2D120(v53, v39, type metadata accessor for PBBucket);
  a5[2] = v37;
  if (qword_25553DC90 != -1)
LABEL_33:
    swift_once();
  v40 = (void *)qword_255572F60;
  v41 = (void *)sub_21FC5AA64();
  v42 = objc_msgSend(v40, sel_stringFromDate_, v41);

  v43 = sub_21FC5B604();
  v45 = v44;

  sub_21FA326EC(a2, type metadata accessor for PBBucket);
  sub_21FA326EC(a4, type metadata accessor for PBBucket);
  sub_21FA326EC((uint64_t)v15, type metadata accessor for PBBucket);
  sub_21FA326EC((uint64_t)v18, type metadata accessor for PBBucket);
  sub_21FA326EC((uint64_t)v20, type metadata accessor for PBBucket);
  swift_bridgeObjectRelease();
  *a5 = v43;
  a5[1] = v45;
  v46 = v49;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  a5[3] = v52;
  a5[4] = v46;
  return result;
}

uint64_t sub_21FC500BC@<X0>(void **a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  unint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  int v28;
  id v29;
  int v30;
  char *v31;
  char *v32;
  id v33;
  uint64_t v34;
  id v35;
  void *v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  id v43;
  void *v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  char *v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;

  v56 = a2;
  sub_21FA2D1A0(0, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v64 = (char *)&v55 - v6;
  v7 = sub_21FC5AAAC();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v57 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v55 - v11;
  v13 = *a1;
  v14 = 0xE000000000000000;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0xE000000000000000;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0xE000000000000000;
  type metadata accessor for PBMedicationTrackingDoseEvent(0);
  sub_21FC5AD10();
  v15 = objc_msgSend(v13, sel_scheduleItemIdentifier);
  if (v15)
  {
    v16 = v15;
    v17 = sub_21FC5B604();
    v14 = v18;

  }
  else
  {
    v17 = 0;
  }
  *(_QWORD *)(a3 + 32) = v17;
  *(_QWORD *)(a3 + 40) = v14;
  v19 = objc_msgSend(v13, sel_medicationIdentifier);
  v20 = sub_21FC5B604();
  v22 = v21;

  v62 = v20;
  v63 = v22;
  v60 = sub_21FC5B604();
  v61 = v23;
  v58 = 124;
  v59 = 0xE100000000000000;
  sub_21FA87D78();
  v24 = sub_21FC5BAD8();
  v26 = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a3 + 48) = v24;
  *(_QWORD *)(a3 + 56) = v26;
  v27 = objc_msgSend(v13, sel_scheduledDoseQuantity);
  if (!v27)
  {
    sub_21FA5BE58(0, (unint64_t *)&qword_25406BAC8);
    v27 = (id)sub_21FC5BA48();
  }
  v28 = sub_21FC5BE80();

  *(_DWORD *)(a3 + 64) = v28;
  v29 = objc_msgSend(v13, sel_doseQuantity);
  if (!v29)
  {
    sub_21FA5BE58(0, (unint64_t *)&qword_25406BAC8);
    v29 = (id)sub_21FC5BA48();
  }
  v30 = sub_21FC5BE80();

  *(_DWORD *)(a3 + 68) = v30;
  v31 = (char *)objc_msgSend(v13, sel_status);
  if ((unint64_t)(v31 - 1) >= 6)
    v32 = 0;
  else
    v32 = v31;
  *(_QWORD *)(a3 + 16) = v32;
  *(_BYTE *)(a3 + 24) = 1;
  v33 = objc_msgSend(v13, sel_logOrigin);
  v34 = v33 == (id)1;
  if (v33 == (id)2)
    v34 = 2;
  *(_QWORD *)a3 = v34;
  *(_BYTE *)(a3 + 8) = 1;
  v35 = objc_msgSend(v13, sel_startDate);
  sub_21FC5AA94();

  if (qword_25553DC90 != -1)
    swift_once();
  v36 = (void *)qword_255572F60;
  v37 = (void *)sub_21FC5AA64();
  v38 = objc_msgSend(v36, sel_stringFromDate_, v37);

  v39 = sub_21FC5B604();
  v41 = v40;

  v42 = *(void (**)(char *, uint64_t))(v8 + 8);
  v42(v12, v7);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a3 + 88) = v39;
  *(_QWORD *)(a3 + 96) = v41;
  v43 = objc_msgSend(v13, sel_scheduledDate);
  if (v43)
  {
    v44 = v43;
    sub_21FC5AA94();

    v45 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v46 = (uint64_t)v64;
    v45(v64, v12, v7);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v46, 0, 1, v7);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v46, 1, v7) != 1)
    {
      v47 = v57;
      v45(v57, (char *)v46, v7);
      v48 = objc_retain(*(id *)(*v56
                              + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_isoDateFormatter));
      v49 = (void *)sub_21FC5AA64();
      v50 = objc_msgSend(v48, sel_stringFromDate_, v49);

      v51 = sub_21FC5B604();
      v53 = v52;

      v42(v47, v7);
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(a3 + 72) = v51;
      *(_QWORD *)(a3 + 80) = v53;
      return result;
    }
  }
  else
  {
    v46 = (uint64_t)v64;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v64, 1, 1, v7);
  }
  return sub_21FA2D1F8(v46, (unint64_t *)&qword_25406AAE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
}

void sub_21FC505C4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554E7D0)
  {
    sub_21FA2CCF4();
    sub_21FA7BA1C(255, &qword_25553FC18, &qword_25553FC20);
    sub_21FA2A08C(&qword_25553E0C8, (uint64_t (*)(uint64_t))sub_21FA2CCF4, MEMORY[0x24BDB9AF8]);
    v0 = sub_21FC5B004();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554E7D0);
  }
}

void sub_21FC50670()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554E7D8)
  {
    sub_21FC50738();
    sub_21FC505C4();
    sub_21FA2A08C((unint64_t *)&qword_25554D300, (uint64_t (*)(uint64_t))sub_21FC50738, MEMORY[0x24BDB9AF8]);
    sub_21FA2A08C(&qword_25554E7E0, (uint64_t (*)(uint64_t))sub_21FC505C4, MEMORY[0x24BDB94C8]);
    v0 = sub_21FC5B100();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554E7D8);
  }
}

void sub_21FC50738()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554D2E8)
  {
    type metadata accessor for PBTypedData(255);
    sub_21FA2CDB4();
    v0 = sub_21FC5B190();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554D2E8);
  }
}

void sub_21FC507A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554E7E8)
  {
    sub_21FC50670();
    type metadata accessor for ClinicalSharingQueryOutput(255);
    sub_21FA2A08C(&qword_25554E7F0, (uint64_t (*)(uint64_t))sub_21FC50670, MEMORY[0x24BDB98F0]);
    v0 = sub_21FC5B004();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554E7E8);
  }
}

uint64_t sub_21FC50838(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_21FC508C0(uint64_t a1, void (*a2)(uint64_t, _QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v43[2];
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, _QWORD);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v54 = a2;
  v55 = a3;
  sub_21FC51428();
  v53 = v5;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v52 = (uint64_t)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v51 = (char *)v43 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v50 = (char *)v43 - v10;
  v11 = type metadata accessor for PBHistogramSeries.Value(0);
  v49 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = MEMORY[0x24BEE4AF8];
  if (!v14)
    return v15;
  v43[1] = v3;
  v58 = MEMORY[0x24BEE4AF8];
  sub_21FC01CF4(0, v14, 0);
  result = sub_21FC50838(a1);
  v18 = result;
  v19 = 0;
  v20 = a1 + 64;
  v44 = a1 + 80;
  v45 = v14;
  v47 = a1 + 64;
  v48 = a1;
  v46 = v17;
  v21 = (uint64_t)v50;
  while ((v18 & 0x8000000000000000) == 0 && v18 < 1 << *(_BYTE *)(a1 + 32))
  {
    v24 = (unint64_t)v18 >> 6;
    if ((*(_QWORD *)(v20 + 8 * ((unint64_t)v18 >> 6)) & (1 << v18)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v17)
      goto LABEL_26;
    v56 = v19;
    v57 = 1 << v18;
    v25 = v53;
    v26 = *(int *)(v53 + 48);
    v27 = *(_QWORD *)(a1 + 48);
    v28 = sub_21FC5AAAC();
    v29 = *(_QWORD *)(v28 - 8);
    v30 = v27 + *(_QWORD *)(v29 + 72) * v18;
    v31 = a1;
    v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
    v32(v21, v30, v28);
    v33 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v18);
    *(_QWORD *)(v21 + v26) = v33;
    v34 = (uint64_t)v51;
    v32((uint64_t)v51, v21, v28);
    *(_QWORD *)(v34 + *(int *)(v25 + 48)) = v33;
    v35 = v52;
    sub_21FA2D23C(v34, v52, (uint64_t (*)(_QWORD))sub_21FC51428);
    swift_bridgeObjectRetain_n();
    sub_21FA326EC(v21, (uint64_t (*)(_QWORD))sub_21FC51428);
    v54(v35, *(_QWORD *)(v35 + *(int *)(v25 + 48)));
    sub_21FA326EC(v35, (uint64_t (*)(_QWORD))sub_21FC51428);
    v15 = v58;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_21FC01CF4(0, *(_QWORD *)(v15 + 16) + 1, 1);
      v15 = v58;
    }
    v37 = *(_QWORD *)(v15 + 16);
    v36 = *(_QWORD *)(v15 + 24);
    a1 = v48;
    if (v37 >= v36 >> 1)
    {
      sub_21FC01CF4(v36 > 1, v37 + 1, 1);
      v15 = v58;
    }
    *(_QWORD *)(v15 + 16) = v37 + 1;
    result = sub_21FA2D23C((uint64_t)v13, v15+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(_QWORD *)(v49 + 72) * v37, type metadata accessor for PBHistogramSeries.Value);
    v22 = 1 << *(_BYTE *)(a1 + 32);
    if (v18 >= v22)
      goto LABEL_27;
    v20 = v47;
    v38 = *(_QWORD *)(v47 + 8 * v24);
    if ((v38 & v57) == 0)
      goto LABEL_28;
    LODWORD(v17) = v46;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v46)
      goto LABEL_29;
    v39 = v38 & (-2 << (v18 & 0x3F));
    if (v39)
    {
      v22 = __clz(__rbit64(v39)) | v18 & 0xFFFFFFFFFFFFFFC0;
      v23 = v45;
    }
    else
    {
      v40 = v24 + 1;
      v41 = (unint64_t)(v22 + 63) >> 6;
      v23 = v45;
      if (v24 + 1 < v41)
      {
        v42 = *(_QWORD *)(v47 + 8 * v40);
        if (v42)
        {
LABEL_22:
          v22 = __clz(__rbit64(v42)) + (v40 << 6);
        }
        else
        {
          while (v41 - 2 != v24)
          {
            v42 = *(_QWORD *)(v44 + 8 * v24++);
            if (v42)
            {
              v40 = v24 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    v19 = v56 + 1;
    v18 = v22;
    if (v56 + 1 == v23)
      return v15;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_21FC50C88@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for ClinicalSharingMedicationDoseEventQuery();
  return sub_21FC4E7E0(a1, a2);
}

uint64_t sub_21FC50CD8@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for ClinicalSharingMedicationDoseEventQuery();
  return sub_21FC4E860(a1, a2);
}

uint64_t objectdestroyTm_15()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for ClinicalSharingMedicationDoseEventQuery();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();

  v4 = v3 + *(int *)(v1 + 28);
  v5 = sub_21FC5A6C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocObject();
}

uint64_t sub_21FC50DBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for ClinicalSharingMedicationDoseEventQuery();
  return sub_21FC4F3B4(a1, a2);
}

void sub_21FC50E0C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554E800)
  {
    sub_21FA2D1A0(255, &qword_25554E808, type metadata accessor for PBTypedData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FC50EA0();
    v0 = sub_21FC5B130();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554E800);
  }
}

unint64_t sub_21FC50EA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25554E810;
  if (!qword_25554E810)
  {
    sub_21FA2D1A0(255, &qword_25554E808, type metadata accessor for PBTypedData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x2207D0F78](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_25554E810);
  }
  return result;
}

void sub_21FC50F00()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554E818)
  {
    sub_21FA2D1A0(255, &qword_25554E808, type metadata accessor for PBTypedData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_21FA2CDB4();
    sub_21FC50EA0();
    v0 = sub_21FC5B130();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554E818);
  }
}

uint64_t sub_21FC50FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FA2D1A0(0, &qword_25553F0A0, type metadata accessor for PBTypedData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FC50FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FA2D1A0(0, &qword_25553F0A0, type metadata accessor for PBTypedData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FC51058@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_21FC4F530(a1, a2, a3, a4);
}

uint64_t sub_21FC51078(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t i;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);

  v37 = a2;
  sub_21FA2D1A0(0, &qword_25553F0A0, type metadata accessor for PBTypedData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v31 - v4;
  v6 = type metadata accessor for PBTypedData(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v33 = (uint64_t)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v32 = (uint64_t)&v31 - v10;
  v11 = *(_QWORD *)(a1 + 64);
  v35 = a1 + 64;
  v12 = 1 << *(_BYTE *)(a1 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v36 = (unint64_t)(v12 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v16 = 0;
  v34 = MEMORY[0x24BEE4AF8];
  if (!v14)
    goto LABEL_7;
LABEL_4:
  v17 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (i = v17 | (v16 << 6); ; i = __clz(__rbit64(v24)) + (v16 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v21 = *v19;
    v20 = v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v37(v21, v20, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      result = sub_21FA2D1F8((uint64_t)v5, &qword_25553F0A0, type metadata accessor for PBTypedData);
      if (v14)
        goto LABEL_4;
    }
    else
    {
      v26 = v32;
      sub_21FA2D23C((uint64_t)v5, v32, type metadata accessor for PBTypedData);
      sub_21FA2D23C(v26, v33, type metadata accessor for PBTypedData);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v34 = sub_21FA7EC54(0, *(_QWORD *)(v34 + 16) + 1, 1, v34);
      v28 = *(_QWORD *)(v34 + 16);
      v27 = *(_QWORD *)(v34 + 24);
      if (v28 >= v27 >> 1)
        v34 = sub_21FA7EC54(v27 > 1, v28 + 1, 1, v34);
      v29 = v33;
      v30 = v34;
      *(_QWORD *)(v34 + 16) = v28 + 1;
      result = sub_21FA2D23C(v29, v30+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v28, type metadata accessor for PBTypedData);
      if (v14)
        goto LABEL_4;
    }
LABEL_7:
    v23 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v23 >= v36)
      goto LABEL_29;
    v24 = *(_QWORD *)(v35 + 8 * v23);
    ++v16;
    if (!v24)
    {
      v16 = v23 + 1;
      if (v23 + 1 >= v36)
        goto LABEL_29;
      v24 = *(_QWORD *)(v35 + 8 * v16);
      if (!v24)
      {
        v16 = v23 + 2;
        if (v23 + 2 >= v36)
          goto LABEL_29;
        v24 = *(_QWORD *)(v35 + 8 * v16);
        if (!v24)
        {
          v16 = v23 + 3;
          if (v23 + 3 >= v36)
            goto LABEL_29;
          v24 = *(_QWORD *)(v35 + 8 * v16);
          if (!v24)
            break;
        }
      }
    }
LABEL_22:
    v14 = (v24 - 1) & v24;
  }
  v25 = v23 + 4;
  if (v25 >= v36)
  {
LABEL_29:
    swift_release();
    return v34;
  }
  v24 = *(_QWORD *)(v35 + 8 * v25);
  if (v24)
  {
    v16 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    v16 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v16 >= v36)
      goto LABEL_29;
    v24 = *(_QWORD *)(v35 + 8 * v16);
    ++v25;
    if (v24)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_21FC51404@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21FC4F94C(a1, *(_QWORD **)(v2 + 16), a2);
}

uint64_t sub_21FC5141C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_21FC4FAF4(a1, a2, *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), a3);
}

void sub_21FC51428()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25554E828)
  {
    sub_21FC5AAAC();
    sub_21FA7BA1C(255, &qword_25553FC18, &qword_25553FC20);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25554E828);
  }
}

uint64_t sub_21FC514B0(unint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_17;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      v9 = v2;
      v3 = 0;
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v5 = (id)MEMORY[0x2207D057C](v3, a1);
LABEL_9:
        v6 = v5;
        v7 = v3 + 1;
        if (__OFADD__(v3, 1))
          goto LABEL_16;
        if (objc_msgSend(v5, sel_logOrigin) == (id)2 && objc_msgSend(v6, sel_status) == (id)5)
        {
          sub_21FC5BBE0();
          sub_21FC5BC10();
          sub_21FC5BC1C();
          sub_21FC5BBEC();
          v2 = v9;
          v4 = a1 & 0xFFFFFFFFFFFFFF8;
        }
        else
        {

        }
        ++v3;
        if (v7 == v2)
          return v10;
      }
      if (v3 < *(_QWORD *)(v4 + 16))
        break;
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      v2 = sub_21FC5BC7C();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    v5 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_21FC5163C(unint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_17;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      v9 = v2;
      v3 = 0;
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v5 = (id)MEMORY[0x2207D057C](v3, a1);
LABEL_9:
        v6 = v5;
        v7 = v3 + 1;
        if (__OFADD__(v3, 1))
          goto LABEL_16;
        if (objc_msgSend(v5, sel_logOrigin) == (id)2 && objc_msgSend(v6, sel_status) == (id)4)
        {
          sub_21FC5BBE0();
          sub_21FC5BC10();
          sub_21FC5BC1C();
          sub_21FC5BBEC();
          v2 = v9;
          v4 = a1 & 0xFFFFFFFFFFFFFF8;
        }
        else
        {

        }
        ++v3;
        if (v7 == v2)
          return v10;
      }
      if (v3 < *(_QWORD *)(v4 + 16))
        break;
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      v2 = sub_21FC5BC7C();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    v5 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_21FC517C8(unint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_17;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      v9 = v2;
      v3 = 0;
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v5 = (id)MEMORY[0x2207D057C](v3, a1);
LABEL_9:
        v6 = v5;
        v7 = v3 + 1;
        if (__OFADD__(v3, 1))
          goto LABEL_16;
        if (objc_msgSend(v5, sel_logOrigin) == (id)1 && objc_msgSend(v6, sel_status) == (id)4)
        {
          sub_21FC5BBE0();
          sub_21FC5BC10();
          sub_21FC5BC1C();
          sub_21FC5BBEC();
          v2 = v9;
          v4 = a1 & 0xFFFFFFFFFFFFFF8;
        }
        else
        {

        }
        ++v3;
        if (v7 == v2)
          return v10;
      }
      if (v3 < *(_QWORD *)(v4 + 16))
        break;
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      v2 = sub_21FC5BC7C();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    v5 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_21FC51954(unint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  unint64_t v7;
  uint64_t v9;

  v9 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_16;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      v3 = 0;
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v5 = (id)MEMORY[0x2207D057C](v3, a1);
LABEL_9:
        v6 = v5;
        v7 = v3 + 1;
        if (__OFADD__(v3, 1))
          goto LABEL_15;
        if (objc_msgSend(v5, sel_logOrigin) == (id)2)
        {
          sub_21FC5BBE0();
          sub_21FC5BC10();
          sub_21FC5BC1C();
          sub_21FC5BBEC();
          v4 = a1 & 0xFFFFFFFFFFFFFF8;
        }
        else
        {

        }
        ++v3;
        if (v7 == v2)
          return v9;
      }
      if (v3 < *(_QWORD *)(v4 + 16))
        break;
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      v2 = sub_21FC5BC7C();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    v5 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_21FC51ABC@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21FC500BC(a1, *(_QWORD **)(v2 + 16), a2);
}

uint64_t sub_21FC51AD8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v12;

  v1 = type metadata accessor for PBBlobDeleteResult(0);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  v6 = *(_QWORD *)(*v0 + 16);
  if (!v6)
    return v6;
  v7 = v5 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v8 = *(_QWORD *)(v2 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_21FC51BBC(v7, (uint64_t)v4);
    v9 = *((_QWORD *)v4 + 4);
    v10 = v4[40];
    sub_21FC51C00((uint64_t)v4);
    if (v10 == 1)
      break;
    if (v9 == 5)
      goto LABEL_7;
LABEL_4:
    v7 += v8;
    if (!--v6)
      goto LABEL_8;
  }
  if (v9 < 4)
    goto LABEL_4;
LABEL_7:
  v6 = 1;
LABEL_8:
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_21FC51BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PBBlobDeleteResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FC51C00(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PBBlobDeleteResult(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21FC51C3C@<X0>(uint64_t *a1@<X0>, int a2@<W1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(void);
  _BYTE *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t (*v46)(void);
  _BYTE v47[4];
  int v48;
  void *v49;
  _BYTE *v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58[3];
  uint64_t v59;
  uint64_t v60;

  v49 = a3;
  v48 = a2;
  v56 = a4;
  sub_21FA5B848();
  v53 = v5;
  v51 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v50 = &v47[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_21FAD1388(0, (unint64_t *)&qword_25553F110, v7, (void (*)(void))sub_21FAD0A64);
  v54 = *(_QWORD *)(v8 - 8);
  v55 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v52 = &v47[-v9];
  sub_21FA2D1A0(0, (unint64_t *)&qword_25553F0D8, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDB9DE0]);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v14 = &v47[-v13];
  v15 = MEMORY[0x24BDBA1B0];
  sub_21FA5B0CC(0, (unint64_t *)&qword_25553F0E0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDBA1B0]);
  v17 = v16;
  v18 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v20 = &v47[-v19];
  v58[0] = *a1;
  v21 = v58[0];
  type metadata accessor for ClinicalSharingSyncContext();
  swift_retain();
  sub_21FC5B22C();
  sub_21FA2CDB4();
  sub_21FC5B208();
  (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v11);
  sub_21FA5B13C((unint64_t *)&qword_25553F0E8, (unint64_t *)&qword_25553F0E0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v15, MEMORY[0x24BDBA1D0]);
  v22 = sub_21FC5B280();
  (*(void (**)(_BYTE *, uint64_t))(v18 + 8))(v20, v17);
  v23 = v21 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_docRefInfo;
  swift_beginAccess();
  sub_21FA2CEA0(v23, (uint64_t)v58);
  v24 = v59;
  v25 = v60;
  __swift_project_boxed_opaque_existential_1(v58, v59);
  (*(void (**)(uint64_t, uint64_t))(v25 + 16))(v24, v25);
  v27 = v26;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
  swift_bridgeObjectRelease();
  if (v27)
  {
    v58[0] = v22;
    *(_BYTE *)(swift_allocObject() + 16) = v48 & 1;
    v28 = MEMORY[0x24BDB9AE0];
    sub_21FA5B0CC(0, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA5B8F8();
    sub_21FA5B13C((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v28, MEMORY[0x24BDB9AF8]);
    v29 = v50;
    sub_21FC5B31C();
    swift_release();
    v30 = swift_allocObject();
    v31 = v49;
    *(_QWORD *)(v30 + 16) = v49;
    v32 = swift_allocObject();
    *(_QWORD *)(v32 + 16) = sub_21FC52FD0;
    *(_QWORD *)(v32 + 24) = v30;
    v33 = v31;
    sub_21FC5B184();
    sub_21FAD0A64();
    v35 = v52;
    v34 = v53;
    sub_21FC5B34C();
    swift_release();
    (*(void (**)(_BYTE *, uint64_t))(v51 + 8))(v29, v34);
    sub_21FAD124C(&qword_25553F128, (unint64_t *)&qword_25553F110, (void (*)(uint64_t))sub_21FA5B848, (void (*)(void))sub_21FAD0A64);
    v36 = v55;
    v37 = sub_21FC5B280();
    swift_release();
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(v54 + 8))(v35, v36);
  }
  else
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v39 = sub_21FC5AFD4();
    __swift_project_value_buffer(v39, (uint64_t)qword_25406D830);
    swift_retain_n();
    v40 = sub_21FC5AFC8();
    v41 = sub_21FC5B970();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      v43 = swift_slowAlloc();
      *(_DWORD *)v42 = 136315138;
      v58[0] = v43;
      sub_21FC5AAF4();
      sub_21FA2A08C((unint64_t *)&qword_25553F0F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v44 = sub_21FC5BDCC();
      v57 = sub_21FABDCF8(v44, v45, v58);
      sub_21FC5BAC0();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21FA27000, v40, v41, "No DocRef exists to read. Account: %s. ResourceID is missing", v42, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v43, -1, -1);
      MEMORY[0x2207D105C](v42, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v58[0] = v22;
    v46 = MEMORY[0x24BDB9AE0];
    sub_21FA5B0CC(0, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_21FA5B13C((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v46, MEMORY[0x24BDB9AF8]);
    v37 = sub_21FC5B280();
    result = swift_release();
  }
  *v56 = v37;
  return result;
}

uint64_t sub_21FC5226C@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21[3];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = v3;
  v7 = *a1;
  if (qword_25406B7F8 != -1)
    swift_once();
  v8 = sub_21FC5AFD4();
  __swift_project_value_buffer(v8, (uint64_t)qword_25406D830);
  swift_retain_n();
  v9 = sub_21FC5AFC8();
  v10 = sub_21FC5B970();
  if (os_log_type_enabled(v9, v10))
  {
    v24 = a3;
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    *(_DWORD *)v11 = 136315138;
    v21[0] = v12;
    sub_21FC5AAF4();
    sub_21FA2A08C((unint64_t *)&qword_25553F0F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v13 = sub_21FC5BDCC();
    sub_21FABDCF8(v13, v14, v21);
    v4 = v3;
    sub_21FC5BAC0();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v9, v10, "Preparing read request. Account: %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v12, -1, -1);
    v15 = v11;
    a3 = v24;
    MEMORY[0x2207D105C](v15, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v16 = v7 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_docRefInfo;
  swift_beginAccess();
  sub_21FA2CEA0(v16, (uint64_t)v21);
  v17 = v22;
  v18 = v23;
  __swift_project_boxed_opaque_existential_1(v21, v22);
  sub_21FBA6110(a2 & 1, v17, v18, a3);
  if (!v4)
  {
    sub_21FA5B8F8();
    *(_QWORD *)(a3 + *(int *)(v19 + 48)) = v7;
    swift_retain();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
}

uint64_t sub_21FC524FC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = sub_21FC5A5D8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  sub_21FA5BD2C();
  v10 = v9;
  v30 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC52FD8();
  v32 = v13;
  v34 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FAD1388(0, &qword_25554E840, v16, (void (*)(void))sub_21FC530F4);
  v33 = v17;
  v35 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v31 = (char *)&v29 - v18;
  v36 = sub_21FC531A8(a1, a2, 3, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v19 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v20 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v20 + v19, (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = sub_21FA5C118;
  *(_QWORD *)(v21 + 24) = v20;
  sub_21FA5BFD8(0, (unint64_t *)&qword_25553F148, (unint64_t *)&qword_25553F150, (unint64_t *)&qword_25553F158);
  sub_21FA5BDDC(0, &qword_25553F160, (unint64_t *)&qword_25553F168);
  sub_21FA5BE90();
  sub_21FC5B31C();
  swift_release();
  swift_release();
  sub_21FA2A08C(&qword_25553F190, (uint64_t (*)(uint64_t))sub_21FA5BD2C, MEMORY[0x24BDB98C8]);
  v22 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v10);
  v36 = v22;
  sub_21FA5BFD8(0, &qword_25553F180, &qword_25553F160, (unint64_t *)&qword_25553F168);
  sub_21FC53070();
  sub_21FA5C050();
  sub_21FC5B31C();
  swift_release();
  sub_21FC5B184();
  type metadata accessor for ClinicalSharingSyncContext();
  v23 = MEMORY[0x24BDB9AE0];
  sub_21FA5B0CC(0, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_21FC530F4();
  sub_21FA5B13C((unint64_t *)&qword_25406B910, &qword_25406B918, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v23, MEMORY[0x24BDB9AF8]);
  v24 = v31;
  v25 = v32;
  sub_21FC5B34C();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v25);
  sub_21FAD124C(&qword_25554E850, &qword_25554E840, (void (*)(uint64_t))sub_21FC52FD8, (void (*)(void))sub_21FC530F4);
  v26 = v33;
  v27 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v24, v26);
  return v27;
}

uint64_t sub_21FC52908(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[3];
  uint64_t v37;
  _OWORD v38[3];
  uint64_t v39;
  uint64_t v40;

  v6 = v5;
  v10 = (void *)sub_21FC5B5E0();
  v11 = objc_msgSend(a4, sel_valueForHTTPHeaderField_, v10);

  if (v11)
  {
    v35 = sub_21FC5B604();
    v13 = v12;

    if (qword_25406B7F8 != -1)
      swift_once();
    v14 = sub_21FC5AFD4();
    __swift_project_value_buffer(v14, (uint64_t)qword_25406D830);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    v15 = sub_21FC5AFC8();
    v16 = sub_21FC5B970();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc();
      v34 = swift_slowAlloc();
      v40 = v34;
      *(_DWORD *)v17 = 136315394;
      sub_21FC5AAF4();
      sub_21FA2A08C((unint64_t *)&qword_25553F0F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v18 = sub_21FC5BDCC();
      sub_21FABDCF8(v18, v19, &v40);
      sub_21FC5BAC0();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2080;
      *((_QWORD *)&v36[0] + 1) = v13;
      swift_bridgeObjectRetain_n();
      sub_21FC5BE08();
      v20 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_21FC5BAF0();
      swift_unknownObjectRelease();
      v21 = sub_21FC5B64C();
      v22 = a1;
      v24 = v23;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v36[0] = sub_21FABDCF8(v21, v24, &v40);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease_n();
      a1 = v22;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21FA27000, v15, v16, "ETag found while reading DocRef. Account: %s eTag: %s", (uint8_t *)v17, 0x16u);
      v6 = v5;
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v34, -1, -1);
      MEMORY[0x2207D105C](v17, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
    sub_21FC5A614();
    swift_allocObject();
    sub_21FC5A608();
    sub_21FC3DC30();
    sub_21FC5A5FC();
    swift_release();
    if (v6)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v38[0] = v36[0];
      v38[1] = v36[1];
      v38[2] = v36[2];
      v39 = v37;
      sub_21FAD2E74(v35, v13);
      swift_bridgeObjectRelease();
      sub_21FC0CB90(a1);
      sub_21FC0D59C((uint64_t)v38);
      swift_retain();
    }
  }
  else
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v25 = sub_21FC5AFD4();
    __swift_project_value_buffer(v25, (uint64_t)qword_25406D830);
    swift_retain_n();
    v26 = sub_21FC5AFC8();
    v27 = sub_21FC5B97C();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      v29 = swift_slowAlloc();
      *(_DWORD *)v28 = 136315138;
      *(_QWORD *)&v36[0] = v29;
      sub_21FC5AAF4();
      sub_21FA2A08C((unint64_t *)&qword_25553F0F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v30 = sub_21FC5BDCC();
      v40 = sub_21FABDCF8(v30, v31, (uint64_t *)v36);
      sub_21FC5BAC0();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21FA27000, v26, v27, "No eTag found while reading DocRef. Account: %s", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v29, -1, -1);
      MEMORY[0x2207D105C](v28, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    sub_21FAD1BE0();
    swift_allocError();
    *(_QWORD *)(v32 + 8) = 0;
    *(_QWORD *)(v32 + 16) = 0;
    *(_QWORD *)v32 = 0;
    *(_BYTE *)(v32 + 24) = 3;
    swift_willThrow();
  }
  return a5;
}

uint64_t sub_21FC52ED8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = (void *)a1[2];
  v7 = a1[3];
  sub_21FC53070();
  result = sub_21FC52908((uint64_t)a2 + *(int *)(v8 + 48), v4, v5, v6, v7);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_21FC52F40@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  sub_21FC53070();
  result = sub_21FAD30F8(a1 + *(int *)(v4 + 48));
  *a2 = result;
  return result;
}

uint64_t sub_21FC52F84()
{
  return swift_deallocObject();
}

uint64_t sub_21FC52F94@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21FC5226C(a1, *(_BYTE *)(v2 + 16), a2);
}

uint64_t sub_21FC52FAC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_21FC52FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_21FC524FC(a1, a2, *(void **)(v2 + 16));
}

void sub_21FC52FD8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554E830)
  {
    sub_21FA5BFD8(255, &qword_25553F180, &qword_25553F160, (unint64_t *)&qword_25553F168);
    sub_21FC53070();
    sub_21FA5C050();
    v0 = sub_21FC5B0E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554E830);
  }
}

void sub_21FC53070()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25554E838)
  {
    type metadata accessor for ClinicalSharingSyncContext();
    sub_21FA2D1A0(255, &qword_2555410A8, type metadata accessor for PBLookupInfo, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25554E838);
  }
}

uint64_t sub_21FC530F4()
{
  return sub_21FA2A08C(&qword_25554E848, (uint64_t (*)(uint64_t))sub_21FC52FD8, MEMORY[0x24BDB98C8]);
}

uint64_t sub_21FC53110()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_21FC5A5D8();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_21FC53170()
{
  swift_release();
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for ClinicalSharingFHIRAPI()
{
  return &type metadata for ClinicalSharingFHIRAPI;
}

uint64_t sub_21FC531A8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;

  v50 = a2;
  v51 = a4;
  v45 = a3;
  v5 = sub_21FC5A5D8();
  v6 = *(_QWORD *)(v5 - 8);
  v40 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_21FC5B8BC();
  v43 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v38[0] = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC53748();
  v46 = v10;
  v48 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v52 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC53850();
  v47 = v12;
  v49 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v44 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = swift_allocBox();
  v15 = v14;
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v39 = a1;
  v16(v14, a1, v5);
  v53 = 0x20726572616542;
  v54 = 0xE700000000000000;
  swift_bridgeObjectRetain();
  sub_21FC5B6AC();
  sub_21FC5A5CC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16((uint64_t)v8, v15, v5);
  sub_21FC5B8C8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v16((uint64_t)v8, a1, v5);
  v17 = *(unsigned __int8 *)(v6 + 80);
  v18 = (v17 + 16) & ~v17;
  v38[1] = v17 | 7;
  v19 = v40 + 7;
  v20 = (v40 + 7 + v18) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject();
  v22 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
  v22(v21 + v18, v8, v5);
  *(_QWORD *)(v21 + v20) = v50;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = sub_21FC53F20;
  *(_QWORD *)(v23 + 24) = v21;
  sub_21FC537DC();
  sub_21FA2A08C(&qword_25553E2F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCFEB8], MEMORY[0x24BDCFEB0]);
  swift_retain();
  v24 = v41;
  v25 = v38[0];
  sub_21FC5B31C();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v25, v24);
  v16((uint64_t)v8, v39, v5);
  v26 = (v17 + 24) & ~v17;
  v27 = (v19 + v26) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF8;
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = v45;
  v22(v29 + v26, v8, v5);
  *(_QWORD *)(v29 + v27) = v50;
  v30 = v51;
  *(_QWORD *)(v29 + v28) = v51;
  *(_QWORD *)(v29 + ((v28 + 15) & 0xFFFFFFFFFFFFFFF8)) = v42;
  sub_21FC53918();
  sub_21FA2A08C(&qword_25554E868, (uint64_t (*)(uint64_t))sub_21FC53748, MEMORY[0x24BDB98C8]);
  sub_21FA2A08C((unint64_t *)&qword_25553F170, (uint64_t (*)(uint64_t))sub_21FC53918, MEMORY[0x24BDB9AF8]);
  swift_retain();
  v31 = v30;
  swift_retain();
  v32 = v44;
  v33 = v46;
  v34 = v52;
  sub_21FC5B364();
  swift_release();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v34, v33);
  sub_21FA2A08C(&qword_25554E870, (uint64_t (*)(uint64_t))sub_21FC53850, MEMORY[0x24BDB9998]);
  v35 = v47;
  v36 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v32, v35);
  swift_release();
  return v36;
}

uint64_t sub_21FC5364C(uint64_t a1, unint64_t a2, void *a3)
{
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  objc_opt_self();
  v6 = (void *)swift_dynamicCastObjCClass();
  if (v6 && (v7 = a3, (char *)objc_msgSend(v6, sel_statusCode) - 200 < (char *)0x64))
  {
    sub_21FA32314(a1, a2);
    swift_retain();
  }
  else
  {
    v8 = sub_21FC5A560();
    v10 = v9;
    sub_21FAD1BE0();
    swift_allocError();
    *(_QWORD *)v11 = v8;
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)(v11 + 16) = v6;
    *(_BYTE *)(v11 + 24) = 1;
    swift_willThrow();
  }
  return a1;
}

void sub_21FC53748()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25554E858)
  {
    sub_21FC5B8BC();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCFEB8];
    sub_21FC537DC();
    sub_21FA2A08C(&qword_25553E2F0, v0, MEMORY[0x24BDCFEB0]);
    v1 = sub_21FC5B0E8();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25554E858);
  }
}

void sub_21FC537DC()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_25553F150)
  {
    sub_21FA8B850();
    type metadata accessor for ClinicalSharingSyncContext();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_25553F150);
  }
}

void sub_21FC53850()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554E860)
  {
    sub_21FC53748();
    sub_21FC53918();
    sub_21FA2A08C(&qword_25554E868, (uint64_t (*)(uint64_t))sub_21FC53748, MEMORY[0x24BDB98C8]);
    sub_21FA2A08C((unint64_t *)&qword_25553F170, (uint64_t (*)(uint64_t))sub_21FC53918, MEMORY[0x24BDB9AF8]);
    v0 = sub_21FC5B13C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554E860);
  }
}

void sub_21FC53918()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553F148)
  {
    sub_21FC537DC();
    sub_21FA2CDB4();
    v0 = sub_21FC5B190();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553F148);
  }
}

uint64_t sub_21FC53984(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  id v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  int v51;
  id v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v57 = a5;
  v55 = a1;
  v56 = a2;
  v8 = sub_21FC5A5D8();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v53 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v54 = (char *)&v49 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v49 - v14;
  objc_opt_self();
  v16 = swift_dynamicCastObjCClass();
  if (v16)
  {
    v17 = (void *)v16;
    v18 = a3;
    if (objc_msgSend(v17, sel_statusCode) == (id)401)
    {
      v5 = sub_21FC5B5E0();
      v19 = objc_msgSend(v17, sel_valueForHTTPHeaderField_, v5);

      if (v19)
      {
        sub_21FC5B604();
        v52 = v18;

        v5 = sub_21FC5B700();
        v18 = v52;
        swift_bridgeObjectRelease();
        if ((v5 & 1) != 0)
        {
          v20 = sub_21FC5A560();
          v22 = v21;
          sub_21FAD1BE0();
          swift_allocError();
          v24 = 0;
          *(_QWORD *)v23 = v20;
LABEL_8:
          *(_QWORD *)(v23 + 8) = v22;
          *(_QWORD *)(v23 + 16) = 0;
          *(_BYTE *)(v23 + 24) = v24;
          swift_willThrow();

          return v5;
        }
      }
    }
    if (objc_msgSend(v17, sel_statusCode) == (id)409)
    {
      v52 = v18;
      v25 = sub_21FC5A560();
      v22 = v26;
      sub_21FAD1BE0();
      swift_allocError();
      *(_QWORD *)v23 = v25;
      v24 = 2;
      goto LABEL_8;
    }

  }
  if (qword_25406B7F8 != -1)
    swift_once();
  v27 = sub_21FC5AFD4();
  __swift_project_value_buffer(v27, (uint64_t)qword_25406D830);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v28(v15, a4, v8);
  v29 = a3;
  v30 = sub_21FC5AFC8();
  v31 = sub_21FC5B970();
  v32 = v31;
  if (os_log_type_enabled(v30, v31))
  {
    v33 = swift_slowAlloc();
    v51 = v32;
    v34 = v33;
    v50 = swift_slowAlloc();
    v59 = v50;
    *(_DWORD *)v34 = 136315394;
    v49 = v34 + 4;
    v52 = v29;
    v35 = v54;
    v28(v54, (uint64_t)v15, v8);
    v28(v53, (uint64_t)v35, v8);
    sub_21FC5BE08();
    v36 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_21FC5BAF0();
    swift_unknownObjectRelease();
    v37 = sub_21FC5B64C();
    v39 = v38;
    v40 = *(void (**)(char *, uint64_t))(v9 + 8);
    v41 = v35;
    v29 = v52;
    v40(v41, v8);
    v58 = sub_21FABDCF8(v37, v39, &v59);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();
    v40(v15, v8);
    *(_WORD *)(v34 + 12) = 2080;
    v42 = v29;
    v43 = (id)HKSensitiveLogItem();
    sub_21FC5BAF0();
    swift_unknownObjectRelease();
    v44 = sub_21FC5B64C();
    v46 = v45;

    v58 = sub_21FABDCF8(v44, v46, &v59);
    sub_21FC5BAC0();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v30, (os_log_type_t)v51, "HTTPURLResponse received. Request: %s. Response: %s", (uint8_t *)v34, 0x16u);
    v47 = v50;
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v47, -1, -1);
    MEMORY[0x2207D105C](v34, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);

  }
  v5 = v55;
  v29;
  sub_21FA32314(v5, v56);
  swift_retain();
  return v5;
}

uint64_t sub_21FC53EAC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_21FC5A5D8();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FC53F20(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;

  v7 = *(_QWORD *)(sub_21FC5A5D8() - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return sub_21FC53984(a1, a2, a3, v3 + v8, *(_QWORD *)(v3 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_21FC53F94()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FC53FB8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v2 + 16))(*a1, a1[1], a1[2]);
  if (!v3)
  {
    *a2 = result;
    a2[1] = v6;
    a2[2] = v7;
    a2[3] = v8;
  }
  return result;
}

void sub_21FC53FF4(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  id v24;
  id v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  id v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void (*v42)(char *, uint64_t);
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  NSObject *v54;
  os_log_type_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  void (*v64)(char *, uint64_t);
  char *v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  void **v70;
  _QWORD *v71;
  uint64_t v72;
  void *v73;
  id v74;
  uint64_t v75;
  os_log_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[2];
  int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  os_log_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  char v97;
  id v98;

  v85 = a6;
  v83 = a4;
  v84 = a5;
  v90 = a2;
  sub_21FC54978();
  v88 = *(_QWORD *)(v10 - 8);
  v89 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v87 = (os_log_t)((char *)v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_21FC5A5D8();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)v79 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  v91 = (char *)v79 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)v79 - v22;
  v98 = *a1;
  v24 = v98;
  v25 = v98;
  v26 = sub_21FA2CDB4();
  if (!swift_dynamicCast())
  {
    v90 = v26;
    goto LABEL_5;
  }
  if (v97)
  {
    v90 = v26;
    sub_21FA5BB74(v94, v95, v96, v97);
LABEL_5:
    v27 = v13;

    if (qword_25406B7F8 != -1)
      swift_once();
    v28 = sub_21FC5AFD4();
    __swift_project_value_buffer(v28, (uint64_t)qword_25406D830);
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v29(v16, a3, v12);
    v30 = v24;
    v31 = v24;
    v32 = sub_21FC5AFC8();
    v33 = sub_21FC5B970();
    v34 = v33;
    if (os_log_type_enabled(v32, v33))
    {
      v35 = swift_slowAlloc();
      LODWORD(v89) = v34;
      v36 = v35;
      v88 = swift_slowAlloc();
      v94 = v88;
      *(_DWORD *)v36 = 136315394;
      v86 = v36 + 4;
      v87 = v32;
      v37 = v91;
      v29(v91, (uint64_t)v16, v12);
      v29(v19, (uint64_t)v37, v12);
      sub_21FC5BE08();
      v38 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_21FC5BAF0();
      swift_unknownObjectRelease();
      v39 = sub_21FC5B64C();
      v41 = v40;
      v42 = *(void (**)(char *, uint64_t))(v27 + 8);
      v42(v37, v12);
      v93 = sub_21FABDCF8(v39, v41, &v94);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();
      v42(v16, v12);
      *(_WORD *)(v36 + 12) = 2080;
      v93 = (uint64_t)v24;
      v43 = v24;
      v44 = v24;
      sub_21FC5BE08();
      v45 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_21FC5BAF0();
      swift_unknownObjectRelease();
      v46 = sub_21FC5B64C();
      v48 = v47;

      v93 = sub_21FABDCF8(v46, v48, &v94);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();

      v32 = v87;
      _os_log_impl(&dword_21FA27000, v87, (os_log_type_t)v89, "Error received for request. Request: %s. Error: %s", (uint8_t *)v36, 0x16u);
      v49 = v88;
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v49, -1, -1);
      MEMORY[0x2207D105C](v36, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v27 + 8))(v16, v12);

    }
    v50 = v24;
    swift_willThrow();
    return;
  }
  sub_21FA5BB74(v94, v95, v96, 0);
  if (v90 < 1)
  {
    v68 = v24;
    swift_willThrow();

  }
  else
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v82 = a7;
    v51 = sub_21FC5AFD4();
    __swift_project_value_buffer(v51, (uint64_t)qword_25406D830);
    v52 = v13;
    v53 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v53(v23, a3, v12);
    v54 = sub_21FC5AFC8();
    v55 = sub_21FC5B970();
    v56 = v55;
    if (os_log_type_enabled(v54, v55))
    {
      v57 = swift_slowAlloc();
      v58 = swift_slowAlloc();
      v81 = v58;
      *(_DWORD *)v57 = 134218242;
      v92 = v58;
      v93 = v90;
      sub_21FC5BAC0();
      *(_WORD *)(v57 + 12) = 2080;
      v79[1] = v57 + 14;
      v80 = v56;
      v59 = v91;
      v53(v91, (uint64_t)v23, v12);
      v53(v19, (uint64_t)v59, v12);
      sub_21FC5BE08();
      v60 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_21FC5BAF0();
      swift_unknownObjectRelease();
      v61 = sub_21FC5B64C();
      v63 = v62;
      v64 = *(void (**)(char *, uint64_t))(v52 + 8);
      v64(v59, v12);
      v93 = sub_21FABDCF8(v61, v63, &v92);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();
      v65 = v23;
      v66 = v90;
      v64(v65, v12);
      _os_log_impl(&dword_21FA27000, v54, (os_log_type_t)v80, "Access denied. Refresh access token and trying again. Retries left: %ld. Request: %s", (uint8_t *)v57, 0x16u);
      v67 = v81;
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v67, -1, -1);
      MEMORY[0x2207D105C](v57, -1, -1);

    }
    else
    {
      (*(void (**)(char *, uint64_t))(v52 + 8))(v23, v12);

      v66 = v90;
    }
    v69 = v83;
    v70 = (void **)__swift_project_boxed_opaque_existential_1((_QWORD *)(v83 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_accountStore), *(_QWORD *)(v83+ OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_accountStore+ 24));
    v93 = sub_21FA709AC(v69 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_accountID, *v70);
    v71 = (_QWORD *)swift_allocObject();
    v73 = v84;
    v72 = v85;
    v71[2] = v69;
    v71[3] = v73;
    v71[4] = v72;
    v71[5] = v66;
    swift_retain();
    v74 = v73;
    swift_retain();
    sub_21FC5B184();
    sub_21FC54A40();
    sub_21FC537DC();
    sub_21FC53918();
    v75 = MEMORY[0x24BDB9AF8];
    sub_21FA2A08C((unint64_t *)&qword_25406B940, (uint64_t (*)(uint64_t))sub_21FC54A40, MEMORY[0x24BDB9AF8]);
    sub_21FA2A08C((unint64_t *)&qword_25553F170, (uint64_t (*)(uint64_t))sub_21FC53918, v75);
    v76 = v87;
    sub_21FC5B34C();
    swift_release();
    swift_release();
    sub_21FA2A08C(&qword_25554E880, (uint64_t (*)(uint64_t))sub_21FC54978, MEMORY[0x24BDB98F0]);
    v77 = v89;
    v78 = sub_21FC5B280();
    (*(void (**)(os_log_t, uint64_t))(v88 + 8))(v76, v77);
    *v82 = v78;

  }
}

uint64_t sub_21FC54854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_21FC5A5D8();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();

  swift_release();
  return swift_deallocObject();
}

void sub_21FC548F0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(sub_21FC5A5D8() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_21FC53FF4(a1, *(_QWORD *)(v2 + 16), v2 + v6, *(_QWORD *)(v2 + v7), *(void **)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)), a2);
}

void sub_21FC54978()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  if (!qword_25554E878)
  {
    sub_21FC53918();
    sub_21FC54A40();
    v0 = MEMORY[0x24BDB9AF8];
    sub_21FA2A08C((unint64_t *)&qword_25553F170, (uint64_t (*)(uint64_t))sub_21FC53918, MEMORY[0x24BDB9AF8]);
    sub_21FA2A08C((unint64_t *)&qword_25406B940, (uint64_t (*)(uint64_t))sub_21FC54A40, v0);
    v1 = sub_21FC5B100();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25554E878);
  }
}

void sub_21FC54A40()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406B948)
  {
    sub_21FA2CDB4();
    v0 = sub_21FC5B190();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406B948);
  }
}

uint64_t sub_21FC54AA4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  v10 = sub_21FC5A5D8();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v14 = a1[1];
  v16 = swift_projectBox();
  sub_21FAD2C58(v15, v14);
  swift_beginAccess();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v16, v10);
  if (__OFSUB__(a4, 1))
  {
    __break(1u);
  }
  else
  {
    v18 = sub_21FC531A8(v13, a2, a4 - 1, a3);
    result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    *a5 = v18;
  }
  return result;
}

uint64_t sub_21FC54BAC()
{
  uint64_t v0;

  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21FC54BE0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return sub_21FC54AA4(a1, v2[2], v2[3], v2[5], a2);
}

uint64_t WebRequestPerformer.dataPublisher(for:timeoutInterval:cachePolicy:attribution:)(_QWORD *a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;

  v10 = a3 & 1;
  v11 = a1[3];
  v12 = a1[4];
  v13 = a5 & 1;
  v14 = __swift_project_boxed_opaque_existential_1(a1, v11);
  return sub_21FC56744((uint64_t)v14, a2, v10, a4, v13, a6, v6, v11, v12);
}

uint64_t WebRequestPerformer.__allocating_init(sessionConfiguration:)(void *a1)
{
  id v2;
  uint64_t v3;
  id v4;

  v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for URLSessionCertVerificationDelegate()), sel_init);
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 24) = MEMORY[0x24BEE4B08];
  v4 = objc_msgSend((id)objc_opt_self(), sel_sessionWithConfiguration_delegate_delegateQueue_, a1, v2, 0);

  *(_QWORD *)(v3 + 16) = v4;
  return v3;
}

uint64_t WebRequestPerformer.performFileDownload(for:timeoutInterval:cachePolicy:attribution:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v8 + 48) = a7;
  *(_QWORD *)(v8 + 56) = v7;
  *(_BYTE *)(v8 + 145) = a6;
  *(_BYTE *)(v8 + 144) = a4;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 40) = a5;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  sub_21FA2ED54(0, &qword_25554E890, (void (*)(uint64_t))type metadata accessor for HTTPError);
  *(_QWORD *)(v8 + 64) = swift_task_alloc();
  v9 = type metadata accessor for HTTPError();
  *(_QWORD *)(v8 + 72) = v9;
  *(_QWORD *)(v8 + 80) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 88) = swift_task_alloc();
  v10 = sub_21FC5A5D8();
  *(_QWORD *)(v8 + 96) = v10;
  *(_QWORD *)(v8 + 104) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 112) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_21FC54DD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD **)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_BYTE *)(v0 + 144) & 1;
  v6 = *(_BYTE *)(v0 + 145) & 1;
  v7 = v3[3];
  v8 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v7);
  WebRequest.urlRequest(attribution:timeoutInterval:cachePolicy:)(v1, v4, v5, v2, v6, v7, v8);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v9;
  *v9 = v0;
  v9[1] = sub_21FC54EF4;
  return sub_21FC5B8D4();
}

uint64_t sub_21FC54EF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 128) = a1;
  *(_QWORD *)(v3 + 136) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_21FC54F60()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  id v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  objc_opt_self();
  v1 = swift_dynamicCastObjCClass();
  v2 = (void *)v0[16];
  if (!v1)
  {
    v11 = v0[2];
    type metadata accessor for WebRequestResponseError.ErrorType(0);
    sub_21FA2A08C((unint64_t *)&qword_255540190, type metadata accessor for WebRequestResponseError.ErrorType, (uint64_t)&protocol conformance descriptor for WebRequestResponseError.ErrorType);
    swift_allocError();
    *v12 = v2;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
LABEL_6:
    v15 = sub_21FC5A98C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v11, v15);
    (*(void (**)(_QWORD, _QWORD))(v0[13] + 8))(v0[14], v0[12]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  v3 = v0[9];
  v4 = v0[10];
  v5 = (uint64_t *)v0[8];
  v6 = v2;
  NSHTTPURLResponse.asHTTPError()(v5);
  v7 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3);
  v8 = (void *)v0[16];
  if (v7 != 1)
  {
    v13 = v0[11];
    v11 = v0[2];
    sub_21FA2D23C(v0[8], v13, (uint64_t (*)(_QWORD))type metadata accessor for HTTPError);
    sub_21FA2A08C(&qword_255540E68, (uint64_t (*)(uint64_t))type metadata accessor for HTTPError, (uint64_t)&protocol conformance descriptor for HTTPError);
    swift_allocError();
    sub_21FA2D120(v13, v14, (uint64_t (*)(_QWORD))type metadata accessor for HTTPError);
    swift_willThrow();

    sub_21FA326EC(v13, (uint64_t (*)(_QWORD))type metadata accessor for HTTPError);
    goto LABEL_6;
  }
  v9 = v0[8];
  (*(void (**)(_QWORD, _QWORD))(v0[13] + 8))(v0[14], v0[12]);

  sub_21FA2EDA0(v9, &qword_25554E890, (void (*)(uint64_t))type metadata accessor for HTTPError);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_21FC5517C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t WebRequestPerformer.data(for:timeoutInterval:cachePolicy:attribution:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v8 + 48) = a7;
  *(_QWORD *)(v8 + 56) = v7;
  *(_BYTE *)(v8 + 89) = a6;
  *(_BYTE *)(v8 + 88) = a4;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 40) = a5;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  return swift_task_switch();
}

uint64_t sub_21FC55208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_BYTE *)(v0 + 89);
  v5 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v6 = *(_BYTE *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 24);
  v8 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  *(_QWORD *)(v8 + 24) = v7;
  *(_QWORD *)(v8 + 32) = v5;
  *(_BYTE *)(v8 + 40) = v6 & 1;
  *(_QWORD *)(v8 + 48) = v4;
  *(_BYTE *)(v8 + 56) = v3 & 1;
  *(_QWORD *)(v8 + 64) = v2;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v9;
  *v9 = v0;
  v9[1] = sub_21FC552E8;
  return sub_21FC5BDFC();
}

uint64_t sub_21FC552E8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_21FC5535C()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id WebRequestPerformer.session.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t sub_21FC55398(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(unint64_t, char *, uint64_t);
  uint64_t v25;
  uint64_t (*v26)(uint64_t, ValueMetadata *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v30 = a6;
  v31 = a8;
  v29 = a4;
  v32 = a1;
  v10 = a5 & 1;
  v11 = a7 & 1;
  sub_21FC572E8();
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a3[3];
  v18 = a3[4];
  v19 = __swift_project_boxed_opaque_existential_1(a3, v17);
  v33 = sub_21FC56744((uint64_t)v19, v29, v10, v30, v11, v31, a2, v17, v18);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v21 = v32;
  v20(v16, v32, v13);
  v22 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v23 = swift_allocObject();
  v24 = *(void (**)(unint64_t, char *, uint64_t))(v14 + 32);
  v24(v23 + v22, v16, v13);
  v20(v16, v21, v13);
  v25 = swift_allocObject();
  v24(v25 + v22, v16, v13);
  v26 = (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, uint64_t))MEMORY[0x24BDB9AE0];
  sub_21FA325D4(0, &qword_25553E2A0, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, uint64_t))MEMORY[0x24BDB9AE0]);
  sub_21FC5742C(&qword_25553E2B0, &qword_25553E2A0, v26, MEMORY[0x24BDB9AF8]);
  sub_21FC5B2D4();
  swift_release();
  swift_release();
  swift_release();
  swift_beginAccess();
  sub_21FC5B19C();
  swift_endAccess();
  return swift_release();
}

void sub_21FC555AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(_QWORD);
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;

  v4 = type metadata accessor for WebRequestResponseError(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v29 - v9;
  sub_21FC574A8();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2D120(a1, (uint64_t)v13, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4) == 1)
  {
    if (qword_25406B7F8 != -1)
      swift_once();
    v15 = sub_21FC5AFD4();
    __swift_project_value_buffer(v15, (uint64_t)qword_25406D830);
    v16 = sub_21FC5AFC8();
    v17 = sub_21FC5B970();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_21FA27000, v16, v17, "WebRequestPerformer.data (async) finished successfully", v18, 2u);
      MEMORY[0x2207D105C](v18, -1, -1);
    }

  }
  else
  {
    sub_21FA2D23C((uint64_t)v13, (uint64_t)v10, type metadata accessor for WebRequestResponseError);
    if (qword_25406B7F8 != -1)
      swift_once();
    v19 = sub_21FC5AFD4();
    __swift_project_value_buffer(v19, (uint64_t)qword_25406D830);
    sub_21FA2D120((uint64_t)v10, (uint64_t)v8, type metadata accessor for WebRequestResponseError);
    v20 = sub_21FC5AFC8();
    v21 = sub_21FC5B97C();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc();
      v29[1] = a2;
      v23 = (uint8_t *)v22;
      v24 = swift_slowAlloc();
      v30 = v24;
      *(_DWORD *)v23 = 136315138;
      v25 = WebRequestResponseError.safelyLoggableDescription.getter();
      v29[2] = sub_21FABDCF8(v25, v26, &v30);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();
      sub_21FA326EC((uint64_t)v8, type metadata accessor for WebRequestResponseError);
      _os_log_impl(&dword_21FA27000, v20, v21, "WebRequestPerformer.data (async) failed with %s", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v24, -1, -1);
      MEMORY[0x2207D105C](v23, -1, -1);
    }
    else
    {
      sub_21FA326EC((uint64_t)v8, type metadata accessor for WebRequestResponseError);
    }

    sub_21FA2A08C(&qword_25553E2A8, type metadata accessor for WebRequestResponseError, (uint64_t)&protocol conformance descriptor for WebRequestResponseError);
    v27 = swift_allocError();
    sub_21FA2D120((uint64_t)v10, v28, type metadata accessor for WebRequestResponseError);
    v30 = v27;
    sub_21FC572E8();
    sub_21FC5B814();
    sub_21FA326EC((uint64_t)v10, type metadata accessor for WebRequestResponseError);
  }
}

uint64_t sub_21FC55950(uint64_t a1)
{
  uint64_t v2;

  sub_21FC5746C(a1, (uint64_t)&v2);
  sub_21FC572E8();
  return sub_21FC5B820();
}

uint64_t sub_21FC55990@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  _QWORD *v16;
  _QWORD *v17;
  id v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v41 = a2;
  v3 = sub_21FC5B640();
  MEMORY[0x24BDAC7A8](v3);
  sub_21FA2ED54(0, &qword_25554E890, (void (*)(uint64_t))type metadata accessor for HTTPError);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t *)((char *)&v39 - v5);
  v7 = type metadata accessor for HTTPError();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v40 = (uint64_t)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v42 = (uint64_t)&v39 - v11;
  v13 = *a1;
  v12 = a1[1];
  v14 = (void *)a1[2];
  sub_21FA32314(v13, v12);
  v15 = v14;
  sub_21FA2D770(v13, v12);
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v39 = v15;
    NSHTTPURLResponse.asHTTPError()(v6);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      sub_21FA2EDA0((uint64_t)v6, &qword_25554E890, (void (*)(uint64_t))type metadata accessor for HTTPError);
      sub_21FA32314(v13, v12);
      __asm { BR              X10 }
    }
    v20 = v42;
    sub_21FA2D23C((uint64_t)v6, v42, (uint64_t (*)(_QWORD))type metadata accessor for HTTPError);
    sub_21FC5B634();
    v21 = sub_21FC5B61C();
    v23 = v39;
    if (v22)
    {
      v24 = v21;
      v25 = v22;
      if (qword_25406B7F8 != -1)
        swift_once();
      v26 = sub_21FC5AFD4();
      __swift_project_value_buffer(v26, (uint64_t)qword_25406D830);
      v27 = v40;
      sub_21FA2D120(v20, v40, (uint64_t (*)(_QWORD))type metadata accessor for HTTPError);
      swift_bridgeObjectRetain();
      v28 = sub_21FC5AFC8();
      v29 = sub_21FC5B97C();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = swift_slowAlloc();
        v41 = swift_slowAlloc();
        v45 = v41;
        *(_DWORD *)v30 = 136315394;
        HTTPError.safelyLoggableDescription.getter();
        v43 = sub_21FABDCF8(v31, v32, &v45);
        sub_21FC5BAC0();
        swift_bridgeObjectRelease();
        sub_21FA326EC(v27, (uint64_t (*)(_QWORD))type metadata accessor for HTTPError);
        *(_WORD *)(v30 + 12) = 2080;
        v43 = v24;
        v44 = v25;
        swift_bridgeObjectRetain_n();
        sub_21FC5BE08();
        v33 = (id)HKSensitiveLogItem();
        swift_unknownObjectRelease();
        sub_21FC5BAF0();
        swift_unknownObjectRelease();
        v34 = sub_21FC5B64C();
        v36 = v35;
        swift_bridgeObjectRelease();
        v43 = sub_21FABDCF8(v34, v36, &v45);
        sub_21FC5BAC0();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_21FA27000, v28, v29, "WebRequestPerformer: HTTP error: %s data: %s", (uint8_t *)v30, 0x16u);
        v37 = v41;
        swift_arrayDestroy();
        MEMORY[0x2207D105C](v37, -1, -1);
        v23 = v39;
        MEMORY[0x2207D105C](v30, -1, -1);

      }
      else
      {
        sub_21FA326EC(v27, (uint64_t (*)(_QWORD))type metadata accessor for HTTPError);

        swift_bridgeObjectRelease_n();
      }
      v20 = v42;
    }
    type metadata accessor for WebRequestResponseError.ErrorType(0);
    sub_21FA2A08C((unint64_t *)&qword_255540190, type metadata accessor for WebRequestResponseError.ErrorType, (uint64_t)&protocol conformance descriptor for WebRequestResponseError.ErrorType);
    swift_allocError();
    sub_21FA2D120(v20, v38, (uint64_t (*)(_QWORD))type metadata accessor for HTTPError);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    return sub_21FA326EC(v20, (uint64_t (*)(_QWORD))type metadata accessor for HTTPError);
  }
  else
  {

    type metadata accessor for WebRequestResponseError.ErrorType(0);
    sub_21FA2A08C((unint64_t *)&qword_255540190, type metadata accessor for WebRequestResponseError.ErrorType, (uint64_t)&protocol conformance descriptor for WebRequestResponseError.ErrorType);
    swift_allocError();
    v17 = v16;
    sub_21FA32314(v13, v12);
    v18 = v15;
    sub_21FA2D770(v13, v12);
    *v17 = v18;
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
}

uint64_t sub_21FC55F88@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  id v27;
  int v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  id v30;
  uint64_t v31;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  sub_21FA2ED54(0, &qword_25554D470, (void (*)(uint64_t))type metadata accessor for WebRequestResponseError.ErrorType);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v33 - v7;
  v9 = type metadata accessor for WebRequestResponseError.ErrorType(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (uint64_t *)((char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *a1;
  if (qword_25406B7F8 != -1)
    swift_once();
  v14 = sub_21FC5AFD4();
  __swift_project_value_buffer(v14, (uint64_t)qword_25406D830);
  v15 = v13;
  v16 = v13;
  v17 = sub_21FC5AFC8();
  v18 = sub_21FC5B97C();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v36 = a3;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc();
    v35 = a2;
    v22 = v21;
    v39 = v21;
    v33 = v10;
    v34 = v12;
    *(_DWORD *)v20 = 136315138;
    swift_getErrorValue();
    v23 = sub_21FBADBB8(v38);
    v37 = sub_21FABDCF8(v23, v24, &v39);
    v10 = v33;
    v12 = v34;
    sub_21FC5BAC0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_21FA27000, v17, v18, "WebRequestPerformer: error response: %s", v20, 0xCu);
    swift_arrayDestroy();
    v25 = v22;
    a2 = v35;
    MEMORY[0x2207D105C](v25, -1, -1);
    v26 = v20;
    a3 = v36;
    MEMORY[0x2207D105C](v26, -1, -1);
  }
  else
  {

  }
  v39 = (uint64_t)v13;
  v27 = v13;
  sub_21FA2CDB4();
  v28 = swift_dynamicCast();
  v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v28)
  {
    v29(v8, 0, 1, v9);
    sub_21FA2D23C((uint64_t)v8, (uint64_t)v12, type metadata accessor for WebRequestResponseError.ErrorType);
  }
  else
  {
    v29(v8, 1, 1, v9);
    *v12 = v13;
    swift_storeEnumTagMultiPayload();
    v30 = v13;
    sub_21FA2EDA0((uint64_t)v8, &qword_25554D470, (void (*)(uint64_t))type metadata accessor for WebRequestResponseError.ErrorType);
  }
  sub_21FA2CEA0(a2, a3);
  v31 = type metadata accessor for WebRequestResponseError(0);
  return sub_21FA2D23C((uint64_t)v12, a3 + *(int *)(v31 + 20), type metadata accessor for WebRequestResponseError.ErrorType);
}

id sub_21FC562B8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v6 = sub_21FC5A98C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v39 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2ED54(0, (unint64_t *)&qword_25406AAC8, v9);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v34 - v11;
  v13 = *a1;
  v14 = a1[1];
  v40 = (id)a1[2];
  if (qword_25406B7F8 != -1)
    swift_once();
  v15 = sub_21FC5AFD4();
  __swift_project_value_buffer(v15, (uint64_t)qword_25406D830);
  swift_retain_n();
  v16 = sub_21FC5AFC8();
  v17 = sub_21FC5B970();
  if (os_log_type_enabled(v16, (os_log_type_t)v17))
  {
    v35 = v17;
    v36 = v14;
    v37 = v13;
    v38 = a2;
    v18 = swift_slowAlloc();
    v34 = swift_slowAlloc();
    v43 = v34;
    *(_DWORD *)v18 = 136315394;
    sub_21FC5A5D8();
    swift_projectBox();
    swift_beginAccess();
    v19 = sub_21FC5A560();
    v21 = v20;
    swift_endAccess();
    if (v21)
      v22 = v19;
    else
      v22 = 0xD000000000000010;
    if (v21)
      v23 = v21;
    else
      v23 = 0x800000021FC74D70;
    v41 = sub_21FABDCF8(v22, v23, &v43);
    sub_21FC5BAC0();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    swift_beginAccess();
    sub_21FC5A5A8();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6))
    {
      sub_21FA2EDA0((uint64_t)v12, (unint64_t *)&qword_25406AAC8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      swift_endAccess();
      v24 = 0;
      v25 = 0;
    }
    else
    {
      v26 = v39;
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v39, v12, v6);
      sub_21FA2EDA0((uint64_t)v12, (unint64_t *)&qword_25406AAC8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      swift_endAccess();
      v24 = sub_21FC5A8FC();
      v25 = v27;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v26, v6);
    }
    v41 = v24;
    v42 = v25;
    sub_21FA32728();
    swift_bridgeObjectRetain();
    sub_21FC5BE08();
    v28 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_21FC5BAF0();
    swift_unknownObjectRelease();
    v29 = sub_21FC5B64C();
    v31 = v30;
    swift_bridgeObjectRelease();
    v41 = sub_21FABDCF8(v29, v31, &v43);
    sub_21FC5BAC0();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v16, (os_log_type_t)v35, "WebRequestPerformer: request succeeded for: %s %s", (uint8_t *)v18, 0x16u);
    v32 = v34;
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v32, -1, -1);
    MEMORY[0x2207D105C](v18, -1, -1);

    v13 = v37;
    a2 = v38;
    v14 = v36;
  }
  else
  {

    swift_release_n();
  }
  sub_21FA2CEA0(a2, (uint64_t)a3);
  a3[5] = v13;
  a3[6] = v14;
  a3[7] = v40;
  sub_21FA3277C(v13, v14);
  return v40;
}

uint64_t WebRequestPerformer.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t WebRequestPerformer.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_21FC56744(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  void (*v38)(uint64_t, char *, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  NSObject *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  os_log_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD v79[3];
  char *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  os_log_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107[2];
  uint64_t v108;
  uint64_t v109[5];

  v85 = a7;
  v104 = a6;
  v83 = a5;
  v79[2] = a4;
  v84 = a3;
  v79[1] = a2;
  v87 = sub_21FC5B8BC();
  v92 = *(_QWORD *)(v87 - 8);
  MEMORY[0x24BDAC7A8](v87);
  v91 = (char *)v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC57520();
  v96 = v11;
  v93 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v95 = (char *)v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA323CC();
  v88 = v13;
  v94 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v97 = (char *)v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA32500();
  v90 = v15;
  v89 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v98 = (char *)v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_21FC5A98C();
  v81 = *(_QWORD *)(v82 - 8);
  MEMORY[0x24BDAC7A8](v82);
  v86 = (char *)v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA2ED54(0, (unint64_t *)&qword_25406AAC8, v18);
  MEMORY[0x24BDAC7A8](v19);
  v80 = (char *)v79 - v20;
  sub_21FA325D4(0, &qword_25553E318, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, uint64_t))MEMORY[0x24BDB9DA0]);
  v102 = *(_QWORD *)(v21 - 8);
  v103 = v21;
  MEMORY[0x24BDAC7A8](v21);
  v101 = (char *)v79 - v22;
  v105 = type metadata accessor for WebRequestResponseError(0);
  v23 = MEMORY[0x24BDAC7A8](v105);
  v99 = (char *)v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v100 = (os_log_t)((char *)v79 - v25);
  v26 = type metadata accessor for WebRequestResponseError.ErrorType(0);
  MEMORY[0x24BDAC7A8](v26);
  v27 = sub_21FC5A5D8();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)v79 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)v79 - v32;
  v109[3] = a8;
  v109[4] = a9;
  __swift_allocate_boxed_opaque_existential_1(v109);
  v34 = a8;
  (*(void (**)(void))(*(_QWORD *)(a8 - 8) + 16))();
  v106 = swift_allocBox();
  v36 = v35;
  WebRequest.urlRequest(attribution:timeoutInterval:cachePolicy:)(v104, 0, 1, 0, 1, v34, a9);
  v37 = v83;
  v101 = v31;
  v102 = v28;
  v38 = *(void (**)(uint64_t, char *, uint64_t))(v28 + 32);
  v103 = v27;
  v38(v36, v33, v27);
  v39 = v36;
  if ((v84 & 1) == 0)
    sub_21FC5A590();
  v40 = v98;
  v41 = v97;
  v42 = v96;
  v43 = v95;
  if ((v37 & 1) == 0)
    sub_21FC5A584();
  v104 = v39;
  v44 = v86;
  if (qword_25406B7F8 != -1)
    swift_once();
  v45 = sub_21FC5AFD4();
  __swift_project_value_buffer(v45, (uint64_t)qword_25406D830);
  swift_retain_n();
  v46 = sub_21FC5AFC8();
  v47 = sub_21FC5B970();
  if (os_log_type_enabled(v46, (os_log_type_t)v47))
  {
    LODWORD(v99) = v47;
    v100 = v46;
    v48 = swift_slowAlloc();
    v49 = swift_slowAlloc();
    v108 = v49;
    *(_DWORD *)v48 = 136315394;
    swift_beginAccess();
    v50 = sub_21FC5A560();
    v52 = v51;
    swift_endAccess();
    if (v52)
      v53 = v50;
    else
      v53 = 0xD000000000000010;
    if (v52)
      v54 = v52;
    else
      v54 = 0x800000021FC74D70;
    *(_QWORD *)&v107[0] = sub_21FABDCF8(v53, v54, &v108);
    sub_21FC5BAC0();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v48 + 12) = 2080;
    swift_beginAccess();
    v55 = (uint64_t)v80;
    sub_21FC5A5A8();
    v56 = v81;
    v57 = v82;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v55, 1, v82))
    {
      sub_21FA2EDA0(v55, (unint64_t *)&qword_25406AAC8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      swift_endAccess();
      v58 = 0;
      v59 = 0;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v44, v55, v57);
      sub_21FA2EDA0(v55, (unint64_t *)&qword_25406AAC8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      swift_endAccess();
      v58 = sub_21FC5A8FC();
      v59 = v60;
      (*(void (**)(char *, uint64_t))(v56 + 8))(v44, v57);
    }
    *(_QWORD *)&v107[0] = v58;
    *((_QWORD *)&v107[0] + 1) = v59;
    sub_21FA32728();
    swift_bridgeObjectRetain();
    sub_21FC5BE08();
    v61 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_21FC5BAF0();
    swift_unknownObjectRelease();
    v62 = sub_21FC5B64C();
    v64 = v63;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v107[0] = sub_21FABDCF8(v62, v64, &v108);
    sub_21FC5BAC0();
    swift_release_n();
    swift_bridgeObjectRelease();
    v65 = v100;
    _os_log_impl(&dword_21FA27000, v100, (os_log_type_t)v99, "WebRequestPerformer: making request: %s %s", (uint8_t *)v48, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v49, -1, -1);
    MEMORY[0x2207D105C](v48, -1, -1);

    v40 = v98;
    v41 = v97;
    v42 = v96;
    v43 = v95;
  }
  else
  {

    swift_release_n();
  }
  v66 = v92;
  v67 = v103;
  v68 = v104;
  swift_beginAccess();
  v70 = v101;
  v69 = v102;
  (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v101, v68, v67);
  v71 = v91;
  sub_21FC5B8C8();
  (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v67);
  sub_21FA2A08C(&qword_25553E2F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCFEB8], MEMORY[0x24BDCFEB0]);
  v72 = v87;
  sub_21FC5B31C();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v71, v72);
  sub_21FA2CEA0((uint64_t)v109, (uint64_t)v107);
  v73 = swift_allocObject();
  sub_21FA3175C(v107, v73 + 16);
  sub_21FA2A08C((unint64_t *)&qword_25553E300, (uint64_t (*)(uint64_t))sub_21FC57520, MEMORY[0x24BDB98C8]);
  sub_21FA2A08C(&qword_25553E2A8, type metadata accessor for WebRequestResponseError, (uint64_t)&protocol conformance descriptor for WebRequestResponseError);
  sub_21FC5B358();
  swift_release();
  (*(void (**)(char *, uint64_t))(v93 + 8))(v43, v42);
  sub_21FA2CEA0((uint64_t)v109, (uint64_t)v107);
  v74 = swift_allocObject();
  *(_QWORD *)(v74 + 16) = v106;
  sub_21FA3175C(v107, v74 + 24);
  sub_21FA2A08C(&qword_25553E310, (uint64_t (*)(uint64_t))sub_21FA323CC, MEMORY[0x24BDB9938]);
  swift_retain();
  v75 = v88;
  sub_21FC5B2C8();
  swift_release();
  (*(void (**)(char *, uint64_t))(v94 + 8))(v41, v75);
  sub_21FA2A08C(&qword_25553E328, (uint64_t (*)(uint64_t))sub_21FA32500, MEMORY[0x24BDB96C0]);
  v76 = v90;
  v77 = sub_21FC5B280();
  (*(void (**)(char *, uint64_t))(v89 + 8))(v40, v76);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v109);
  return v77;
}

uint64_t type metadata accessor for WebRequestPerformer()
{
  return objc_opt_self();
}

uint64_t method lookup function for WebRequestPerformer()
{
  return swift_lookUpClassMethod();
}

void sub_21FC572E8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554E8A0)
  {
    sub_21FA2CDB4();
    v0 = sub_21FC5B82C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554E8A0);
  }
}

void sub_21FC57350(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  sub_21FC572E8();
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  sub_21FC555AC(a1, v1 + ((v4 + 16) & ~v4));
}

uint64_t objectdestroyTm_16()
{
  uint64_t v0;
  uint64_t v1;

  sub_21FC572E8();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_21FC573F0(uint64_t a1)
{
  sub_21FC572E8();
  return sub_21FC55950(a1);
}

uint64_t sub_21FC5742C(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_21FA325D4(255, a2, a3);
    result = MEMORY[0x2207D0F78](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21FC5746C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for WebRequestResponse(a2, a1);
  return a2;
}

void sub_21FC574A8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554E8A8)
  {
    type metadata accessor for WebRequestResponseError(255);
    sub_21FA2A08C(&qword_25553E2A8, type metadata accessor for WebRequestResponseError, (uint64_t)&protocol conformance descriptor for WebRequestResponseError);
    v0 = sub_21FC5B16C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554E8A8);
  }
}

void sub_21FC57520()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25553E2E8)
  {
    sub_21FC5B8BC();
    sub_21FA2A08C(&qword_25553E2F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCFEB8], MEMORY[0x24BDCFEB0]);
    v0 = sub_21FC5B0E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25553E2E8);
  }
}

uint64_t sub_21FC575A0()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_21FC575C4()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return swift_deallocObject();
}

uint64_t SymmetricKey.rawRepresentation.getter()
{
  uint64_t v1;

  sub_21FC5B400();
  return v1;
}

uint64_t sub_21FC57634@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = sub_21FC57688(a1, a2);
  v5 = sub_21FA8869C(v4);
  v7 = v6;
  result = swift_release();
  *a3 = v5;
  a3[1] = v7;
  return result;
}

size_t sub_21FC57688(size_t result, unint64_t a2)
{
  const void *v3;
  int64_t v4;
  _QWORD *v5;

  if (!result)
    return MEMORY[0x24BEE4AF8];
  v3 = (const void *)result;
  v4 = a2 - result;
  if (a2 == result)
    return MEMORY[0x24BEE4AF8];
  if (v4 < 1)
  {
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (!a2)
      goto LABEL_13;
  }
  else
  {
    sub_21FC57734();
    v5 = (_QWORD *)swift_allocObject();
    result = _swift_stdlib_malloc_size(v5);
    v5[2] = v4;
    v5[3] = 2 * result - 64;
    if (!a2)
      goto LABEL_13;
  }
  if ((unint64_t)v3 < a2)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      memmove(v5 + 4, v3, v4);
      return (size_t)v5;
    }
    __break(1u);
  }
LABEL_13:
  __break(1u);
  return result;
}

void sub_21FC57734()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406BB48)
  {
    v0 = sub_21FC5BDD8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406BB48);
  }
}

uint64_t sub_21FC57788()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v13;
  uint64_t v14;

  v1 = objc_msgSend(v0, sel_primaryConcept);
  v2 = objc_msgSend(v1, sel_localizedPreferredName);

  if (v2)
  {
    v3 = sub_21FC5B604();
    v5 = v4;

    v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v6 = v3 & 0xFFFFFFFFFFFFLL;
    if (v6)
      return v3;
    swift_bridgeObjectRelease();
  }
  v7 = sub_21FC578A0();
  v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0)
    v9 = v7 & 0xFFFFFFFFFFFFLL;
  if (v9)
    return v7;
  swift_bridgeObjectRelease();
  v7 = sub_21FC57AB4();
  v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0)
    v11 = v7 & 0xFFFFFFFFFFFFLL;
  if (v11)
    return v7;
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(v0, sel_fallbackDisplayString);
  v14 = sub_21FC5B604();

  return v14;
}

uint64_t sub_21FC578A0()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  char v11;
  id v12;
  uint64_t v13;
  id v15;

  v1 = objc_msgSend(v0, sel_medicalRecordCodings);
  sub_21FA5BE58(0, &qword_2555405B0);
  v2 = sub_21FC5B7A8();

  if (v2 >> 62)
  {
LABEL_16:
    swift_bridgeObjectRetain();
    v3 = sub_21FC5BC7C();
    if (v3)
      goto LABEL_3;
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
    {
LABEL_3:
      v15 = (id)objc_opt_self();
      v4 = 4;
      do
      {
        if ((v2 & 0xC000000000000001) != 0)
          v5 = (id)MEMORY[0x2207D057C](v4 - 4, v2);
        else
          v5 = *(id *)(v2 + 8 * v4);
        v6 = v5;
        v7 = v4 - 3;
        if (__OFADD__(v4 - 4, 1))
        {
          __break(1u);
          goto LABEL_16;
        }
        v8 = objc_msgSend(v5, sel_codingSystem);
        v9 = objc_msgSend(v15, sel_textSystem);
        if (v8)
        {
          sub_21FA5BE58(0, &qword_25554D688);
          v10 = v8;
          v11 = sub_21FC5BA60();

          if ((v11 & 1) != 0)
          {
            swift_bridgeObjectRelease_n();
            v12 = objc_msgSend(v6, sel_displayString);

            if (!v12)
              return 0;
            v13 = sub_21FC5B604();

            return v13;
          }
          v9 = v6;
        }
        else
        {

        }
        ++v4;
      }
      while (v7 != v3);
    }
  }
  swift_bridgeObjectRelease_n();
  return 0;
}

uint64_t sub_21FC57AB4()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;

  v1 = objc_msgSend(v0, sel_medicalRecordCodings);
  sub_21FA5BE58(0, &qword_2555405B0);
  v2 = sub_21FC5B7A8();

  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease_n();
    return 0;
  }
LABEL_16:
  swift_bridgeObjectRetain();
  v3 = sub_21FC5BC7C();
  if (!v3)
    goto LABEL_17;
LABEL_3:
  v4 = 4;
  while (1)
  {
    if ((v2 & 0xC000000000000001) != 0)
      v5 = (id)MEMORY[0x2207D057C](v4 - 4, v2);
    else
      v5 = *(id *)(v2 + 8 * v4);
    v6 = v5;
    v7 = v4 - 3;
    if (__OFADD__(v4 - 4, 1))
    {
      __break(1u);
      goto LABEL_16;
    }
    v8 = objc_msgSend(v5, sel_displayString);
    if (v8)
    {
      v9 = v8;
      v10 = sub_21FC5B604();
      v12 = v11;

      swift_bridgeObjectRelease();
      v13 = HIBYTE(v12) & 0xF;
      if ((v12 & 0x2000000000000000) == 0)
        v13 = v10 & 0xFFFFFFFFFFFFLL;
      if (v13)
        break;
    }

    ++v4;
    if (v7 == v3)
      goto LABEL_17;
  }
  swift_bridgeObjectRelease_n();
  v14 = objc_msgSend(v6, sel_displayString);

  if (!v14)
    return 0;
  v15 = sub_21FC5B604();

  return v15;
}

uint64_t sub_21FC57C6C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v41 = a5;
  v42 = a4;
  v40 = a2;
  v11 = sub_21FC5B4FC();
  v37 = *(_QWORD *)(v11 - 8);
  v38 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v36 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FC57EC4();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_21FC5B460();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v35 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *a1;
  v39 = *((unsigned __int8 *)a1 + 8);
  v20 = sub_21FC5ACF8();
  v22 = v21;
  *(_QWORD *)(a7 + 32) = sub_21FC5ACF8();
  *(_QWORD *)(a7 + 40) = v23;
  *(_QWORD *)(a7 + 64) = 0;
  *(_BYTE *)(a7 + 72) = 1;
  type metadata accessor for PBAssociatedData(0);
  sub_21FC5AD10();
  v24 = v41;
  if (!a6)
    v24 = 0;
  v25 = 0xE000000000000000;
  if (a6)
    v25 = a6;
  v26 = v40;
  *(_QWORD *)a7 = v24;
  *(_QWORD *)(a7 + 8) = v25;
  sub_21FA32314(v26, a3);
  sub_21FA2D770(v20, v22);
  *(_QWORD *)(a7 + 16) = v26;
  *(_QWORD *)(a7 + 24) = a3;
  *(_QWORD *)(a7 + 48) = v19;
  *(_BYTE *)(a7 + 56) = v39;
  v27 = v42;
  sub_21FC57F18(v42, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_21FA2D770(v26, a3);
    sub_21FC57F5C(v27);
    return sub_21FC57F5C((uint64_t)v15);
  }
  else
  {
    v29 = v35;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v35, v15, v16);
    v30 = v36;
    v31 = sub_21FC5B424();
    v32 = MEMORY[0x2207CFEE0](v31);
    v41 = v33;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v30, v38);
    sub_21FA2D770(v26, a3);
    sub_21FC57F5C(v27);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v29, v16);
    result = sub_21FA2D770(*(_QWORD *)(a7 + 32), *(_QWORD *)(a7 + 40));
    v34 = v41;
    *(_QWORD *)(a7 + 32) = v32;
    *(_QWORD *)(a7 + 40) = v34;
  }
  return result;
}

void sub_21FC57EC4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554CFF0)
  {
    sub_21FC5B460();
    v0 = sub_21FC5BAA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554CFF0);
  }
}

uint64_t sub_21FC57F18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21FC57EC4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FC57F5C(uint64_t a1)
{
  uint64_t v2;

  sub_21FC57EC4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_21FC57F98(unint64_t *a1, uint64_t a2, unint64_t a3, void (*a4)(unint64_t), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  id v25;
  id v26;
  unint64_t v27;
  unint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  os_log_t v33;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  int v37;
  uint8_t *v38;
  os_log_t v39;
  uint64_t v40;
  uint64_t v41;

  v10 = sub_21FC5AAF4();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  if (qword_25406B7F8 != -1)
    swift_once();
  v15 = sub_21FC5AFD4();
  __swift_project_value_buffer(v15, (uint64_t)qword_25406D830);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v16 = sub_21FC5AFC8();
  v17 = sub_21FC5B994();
  if (!os_log_type_enabled(v16, (os_log_type_t)v17))
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (!a4)
      return;
    goto LABEL_17;
  }
  v37 = v17;
  v39 = v16;
  v18 = swift_slowAlloc();
  v36 = swift_slowAlloc();
  v41 = v36;
  *(_DWORD *)v18 = 136315394;
  swift_bridgeObjectRetain();
  v40 = sub_21FABDCF8(a2, a3, &v41);
  sub_21FC5BAC0();
  swift_bridgeObjectRelease_n();
  v38 = (uint8_t *)v18;
  *(_WORD *)(v18 + 12) = 2080;
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    v19 = sub_21FC5BC7C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v20 = MEMORY[0x24BEE4AF8];
  if (v19)
  {
    v40 = MEMORY[0x24BEE4AF8];
    sub_21FC01898(0, v19 & ~(v19 >> 63), 0);
    if (v19 < 0)
    {
      __break(1u);
      return;
    }
    v35[0] = a4;
    v35[1] = a5;
    v21 = 0;
    v20 = v40;
    v22 = v14 & 0xC000000000000001;
    v23 = v14;
    do
    {
      if (v22)
        v24 = (id)MEMORY[0x2207D057C](v21, v14);
      else
        v24 = *(id *)(v14 + 8 * v21 + 32);
      v25 = v24;
      v26 = objc_msgSend(v25, sel_identifier);
      sub_21FC5AADC();

      v40 = v20;
      v28 = *(_QWORD *)(v20 + 16);
      v27 = *(_QWORD *)(v20 + 24);
      if (v28 >= v27 >> 1)
      {
        sub_21FC01898(v27 > 1, v28 + 1, 1);
        v20 = v40;
      }
      ++v21;
      *(_QWORD *)(v20 + 16) = v28 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v20+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v28, v13, v10);
      v14 = v23;
    }
    while (v19 != v21);
    a4 = (void (*)(unint64_t))v35[0];
  }
  v29 = v38;
  v30 = MEMORY[0x2207D01A4](v20, v10);
  v32 = v31;
  swift_bridgeObjectRelease();
  v40 = sub_21FABDCF8(v30, v32, &v41);
  sub_21FC5BAC0();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  v33 = v39;
  _os_log_impl(&dword_21FA27000, v39, (os_log_type_t)v37, "%s Found accounts %s with SharingToProvider feature", v29, 0x16u);
  v34 = v36;
  swift_arrayDestroy();
  MEMORY[0x2207D105C](v34, -1, -1);
  MEMORY[0x2207D105C](v29, -1, -1);

  if (a4)
  {
LABEL_17:
    swift_retain();
    a4(v14);
    sub_21FA97DF0((uint64_t)a4);
  }
}

uint64_t sub_21FC58388@<X0>(unint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v4;
  void **v5;
  uint64_t result;

  v4 = *a1;
  v5 = (void **)__swift_project_boxed_opaque_existential_1(a2, a2[3]);
  result = sub_21FA70CC0(v4, *v5);
  *a3 = result;
  return result;
}

uint64_t sub_21FC583C8@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[2];

  sub_21FC58AD0();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v14[1] = sub_21FAB021C(a2);
  *(_QWORD *)(swift_allocObject() + 16) = v11;
  sub_21FC54A40();
  sub_21FA9786C(0);
  sub_21FA2A08C((unint64_t *)&qword_25406B940, (uint64_t (*)(uint64_t))sub_21FC54A40, MEMORY[0x24BDB9AF8]);
  swift_bridgeObjectRetain();
  sub_21FC5B2C8();
  swift_release();
  swift_release();
  sub_21FA2A08C(&qword_25406C818, (uint64_t (*)(uint64_t))sub_21FC58AD0, MEMORY[0x24BDB96C0]);
  v12 = sub_21FC5B280();
  result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  *a3 = v12;
  return result;
}

uint64_t sub_21FC58534(uint64_t a1)
{
  return sub_21FC589D4(a1, (void (*)(id, id))sub_21FC589B8);
}

uint64_t sub_21FC58564(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9;
  id v10;
  _BYTE v12[40];

  sub_21FA2CEA0(a3, (uint64_t)v12);
  type metadata accessor for ClinicalSharingSyncContext();
  swift_allocObject();
  v9 = a1;
  v10 = a2;
  swift_bridgeObjectRetain();
  return sub_21FADC54C(v9, v10, (uint64_t)v12, a4, a5);
}

uint64_t sub_21FC58604@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[2];

  sub_21FA9594C();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FAC4EC8();
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = *a1;
  sub_21FC4CBF8(0, &qword_25406BA38, (void (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
  sub_21FA959C8();
  sub_21FC5B748();
  sub_21FA2CDB4();
  sub_21FC5B118();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_21FA2A08C((unint64_t *)&qword_25406B8A8, (uint64_t (*)(uint64_t))sub_21FAC4EC8, MEMORY[0x24BDB9970]);
  v14 = sub_21FC5B280();
  result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  *a2 = v14;
  return result;
}

void sub_21FC58774(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (qword_25406B7F8 != -1)
    swift_once();
  v5 = sub_21FC5AFD4();
  __swift_project_value_buffer(v5, (uint64_t)qword_25406D830);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  v6 = sub_21FC5AFC8();
  v7 = sub_21FC5B994();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc();
    v9 = swift_slowAlloc();
    v12 = v9;
    *(_DWORD *)v8 = 136315394;
    swift_bridgeObjectRetain();
    sub_21FABDCF8(a2, a3, &v12);
    sub_21FC5BAC0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v8 + 12) = 2080;
    sub_21FC5AAF4();
    sub_21FA2A08C((unint64_t *)&qword_25553F0F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v10 = sub_21FC5BDCC();
    sub_21FABDCF8(v10, v11, &v12);
    sub_21FC5BAC0();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FA27000, v6, v7, "%s Fetching multi device details for  %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2207D105C](v9, -1, -1);
    MEMORY[0x2207D105C](v8, -1, -1);

  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_21FC589B8(void *a1, void *a2)
{
  uint64_t *v2;

  return sub_21FC58564(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_21FC589D4(uint64_t a1, void (*a2)(id, id))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  void **i;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_21FC5BC04();
    for (i = (void **)(a1 + 40); ; i += 2)
    {
      v8 = *i;
      v9 = *(i - 1);
      v10 = v8;
      a2(v9, v10);

      if (v2)
        break;
      sub_21FC5BBE0();
      sub_21FC5BC10();
      sub_21FC5BC1C();
      sub_21FC5BBEC();
      if (!--v4)
        return v11;
    }
    return swift_release();
  }
  return result;
}

void sub_21FC58AD0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406C820)
  {
    sub_21FC54A40();
    sub_21FA9786C(255);
    sub_21FA2A08C((unint64_t *)&qword_25406B940, (uint64_t (*)(uint64_t))sub_21FC54A40, MEMORY[0x24BDB9AF8]);
    v0 = sub_21FC5B064();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406C820);
  }
}

uint64_t sub_21FC58B64()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21FC58B88@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *a2 = *(_QWORD *)(v2 + 16);
  a2[1] = v3;
  a2[2] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

unint64_t sub_21FC58BC0(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD v6[2];

  if (!a3)
  {
    sub_21FC5BB74();
    swift_bridgeObjectRelease();
    strcpy((char *)v6, "Feature flag ");
    HIWORD(v6[1]) = -4864;
    sub_21FC5B6AC();
    goto LABEL_5;
  }
  if (a3 == 1)
  {
    sub_21FC5BB74();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v6[0] = a1;
    v6[1] = a2;
LABEL_5:
    sub_21FC5B6AC();
    return v6[0];
  }
  if (a1 | a2)
    return 0xD00000000000002ALL;
  else
    return 0xD000000000000016;
}

unint64_t sub_21FC58D0C()
{
  uint64_t v0;

  return sub_21FC58BC0(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_21FC58D1C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for DaemonError(uint64_t a1)
{
  return sub_21FC58D44(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_21FC58D44(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s19HealthRecordsDaemon11DaemonErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_21FC58D1C(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for DaemonError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_21FC58D1C(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_21FC58D44(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for DaemonError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_21FC58D44(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DaemonError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DaemonError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_21FC58EC8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_21FC58EE0(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DaemonError()
{
  return &type metadata for DaemonError;
}

id sub_21FC58F08(uint64_t a1, uint64_t a2)
{
  char *v2;
  id v3;
  char *v4;
  void *v5;
  id v6;
  id v7;
  char *v8;
  id v9;
  objc_super v11;

  if (a2)
  {
    v3 = objc_allocWithZone(MEMORY[0x24BE40E58]);
    v4 = v2;
    v5 = (void *)sub_21FC5B5E0();
    swift_bridgeObjectRelease();
    v6 = objc_msgSend(v3, sel_initWithMachServiceName_, v5);
  }
  else
  {
    v7 = objc_allocWithZone(MEMORY[0x24BE40E58]);
    v8 = v2;
    v5 = (void *)sub_21FC5B5E0();
    v6 = objc_msgSend(v7, sel_initWithLabel_, v5);
  }
  v9 = v6;

  *(_QWORD *)&v2[OBJC_IVAR____TtC19HealthRecordsDaemon26DaemonXPCConnectionManager_listener] = v9;
  *(_QWORD *)&v2[OBJC_IVAR____TtC19HealthRecordsDaemon26DaemonXPCConnectionManager_serviceMap] = sub_21FA7C940(MEMORY[0x24BEE4AF8]);

  v11.receiver = v2;
  v11.super_class = (Class)type metadata accessor for DaemonXPCConnectionManager();
  return objc_msgSendSuper2(&v11, sel_init);
}

id sub_21FC59008()
{
  void *v0;
  objc_super v2;

  sub_21FC59350();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DaemonXPCConnectionManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_21FC590B8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  id result;
  int64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _OWORD v22[2];
  uint64_t v23;
  char v24[8];
  uint64_t v25;
  __int128 v26;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC19HealthRecordsDaemon26DaemonXPCConnectionManager_serviceMap);
  swift_beginAccess();
  v2 = *v1;
  v20 = v2 + 64;
  v3 = 1 << *(_BYTE *)(v2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v2 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = (id)swift_bridgeObjectRetain();
  v8 = 0;
  if (!v5)
    goto LABEL_8;
LABEL_6:
  v10 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  v11 = v10 | (v8 << 6);
  while (2)
  {
    v12 = *(_QWORD *)(v2 + 56);
    v13 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v11);
    v14 = v13[1];
    *(_QWORD *)&v21 = *v13;
    *((_QWORD *)&v21 + 1) = v14;
    sub_21FA2CEA0(v12 + 40 * v11, (uint64_t)v22);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_21FA2D23C((uint64_t)&v21, (uint64_t)v24, (uint64_t (*)(_QWORD))sub_21FC5A1E8);
      if (!v25)
      {
        swift_release();
        v18 = *(void **)(v19 + OBJC_IVAR____TtC19HealthRecordsDaemon26DaemonXPCConnectionManager_listener);
        objc_msgSend(v18, sel_setDelegate_);
        return objc_msgSend(v18, sel_resume);
      }
      swift_bridgeObjectRelease();
      sub_21FA3175C(&v26, (uint64_t)&v21);
      v9 = *(void **)(*__swift_project_boxed_opaque_existential_1(&v21, *((uint64_t *)&v22[0] + 1))
                    + OBJC_IVAR____TtC19HealthRecordsDaemon23DefaultDaemonXPCService_listener);
      objc_msgSend(v9, sel_setDelegate_);
      objc_msgSend(v9, sel_resume);
      result = (id)__swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
      if (v5)
        goto LABEL_6;
LABEL_8:
      v15 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v15 < v6)
      {
        v16 = *(_QWORD *)(v20 + 8 * v15);
        if (v16)
          goto LABEL_11;
        v17 = v8 + 2;
        ++v8;
        if (v15 + 1 < v6)
        {
          v16 = *(_QWORD *)(v20 + 8 * v17);
          if (v16)
            goto LABEL_14;
          v8 = v15 + 1;
          if (v15 + 2 < v6)
          {
            v16 = *(_QWORD *)(v20 + 8 * (v15 + 2));
            if (v16)
            {
              v15 += 2;
              goto LABEL_11;
            }
            v17 = v15 + 3;
            v8 = v15 + 2;
            if (v15 + 3 < v6)
              break;
          }
        }
      }
LABEL_25:
      v5 = 0;
      v23 = 0;
      memset(v22, 0, sizeof(v22));
      v21 = 0u;
    }
    v16 = *(_QWORD *)(v20 + 8 * v17);
    if (v16)
    {
LABEL_14:
      v15 = v17;
LABEL_11:
      v5 = (v16 - 1) & v16;
      v11 = __clz(__rbit64(v16)) + (v15 << 6);
      v8 = v15;
      continue;
    }
    break;
  }
  while (1)
  {
    v15 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v15 >= v6)
    {
      v8 = v6 - 1;
      goto LABEL_25;
    }
    v16 = *(_QWORD *)(v20 + 8 * v15);
    ++v17;
    if (v16)
      goto LABEL_11;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_21FC59350()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  __int128 v19;
  _OWORD v20[2];
  uint64_t v21;
  char v22[8];
  uint64_t v23;
  __int128 v24;

  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC19HealthRecordsDaemon26DaemonXPCConnectionManager_listener), sel_invalidate);
  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC19HealthRecordsDaemon26DaemonXPCConnectionManager_serviceMap);
  swift_beginAccess();
  v2 = *v1;
  v18 = v2 + 64;
  v3 = 1 << *(_BYTE *)(v2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v2 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  if (!v5)
    goto LABEL_8;
LABEL_6:
  v10 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  v11 = v10 | (v8 << 6);
  while (2)
  {
    v12 = *(_QWORD *)(v2 + 56);
    v13 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v11);
    v14 = v13[1];
    *(_QWORD *)&v19 = *v13;
    *((_QWORD *)&v19 + 1) = v14;
    sub_21FA2CEA0(v12 + 40 * v11, (uint64_t)v20);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_21FA2D23C((uint64_t)&v19, (uint64_t)v22, (uint64_t (*)(_QWORD))sub_21FC5A1E8);
      if (!v23)
        return swift_release();
      swift_bridgeObjectRelease();
      sub_21FA3175C(&v24, (uint64_t)&v19);
      v9 = *(void **)(*__swift_project_boxed_opaque_existential_1(&v19, *((uint64_t *)&v20[0] + 1))
                    + OBJC_IVAR____TtC19HealthRecordsDaemon23DefaultDaemonXPCService_listener);
      objc_msgSend(v9, sel_setDelegate_, 0);
      objc_msgSend(v9, sel_invalidate);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
      if (v5)
        goto LABEL_6;
LABEL_8:
      v15 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v15 < v6)
      {
        v16 = *(_QWORD *)(v18 + 8 * v15);
        if (v16)
          goto LABEL_11;
        v17 = v8 + 2;
        ++v8;
        if (v15 + 1 < v6)
        {
          v16 = *(_QWORD *)(v18 + 8 * v17);
          if (v16)
            goto LABEL_14;
          v8 = v15 + 1;
          if (v15 + 2 < v6)
          {
            v16 = *(_QWORD *)(v18 + 8 * (v15 + 2));
            if (v16)
            {
              v15 += 2;
              goto LABEL_11;
            }
            v17 = v15 + 3;
            v8 = v15 + 2;
            if (v15 + 3 < v6)
              break;
          }
        }
      }
LABEL_25:
      v5 = 0;
      v21 = 0;
      memset(v20, 0, sizeof(v20));
      v19 = 0u;
    }
    v16 = *(_QWORD *)(v18 + 8 * v17);
    if (v16)
    {
LABEL_14:
      v15 = v17;
LABEL_11:
      v5 = (v16 - 1) & v16;
      v11 = __clz(__rbit64(v16)) + (v15 << 6);
      v8 = v15;
      continue;
    }
    break;
  }
  while (1)
  {
    v15 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v15 >= v6)
    {
      v8 = v6 - 1;
      goto LABEL_25;
    }
    v16 = *(_QWORD *)(v18 + 8 * v15);
    ++v17;
    if (v16)
      goto LABEL_11;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DaemonXPCConnectionManager()
{
  return objc_opt_self();
}

id sub_21FC59720()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DaemonConnectionServer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for DaemonConnectionServer()
{
  return objc_opt_self();
}

void sub_21FC59850(uint64_t a1, id a2, uint64_t a3, unint64_t a4, void *a5, uint64_t a6)
{
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  NSObject *log;
  uint64_t v31;
  os_log_type_t type;
  uint64_t v33;

  if (a2)
  {
    v12 = a2;
    if (qword_25406B7F8 != -1)
      swift_once();
    v13 = sub_21FC5AFD4();
    __swift_project_value_buffer(v13, (uint64_t)qword_25406D830);
    v14 = a2;
    swift_bridgeObjectRetain();
    v15 = a5;
    v16 = a2;
    swift_bridgeObjectRetain();
    v17 = (char *)v15;
    v18 = sub_21FC5AFC8();
    v19 = sub_21FC5B97C();
    if (os_log_type_enabled(v18, v19))
    {
      type = v19;
      v20 = swift_slowAlloc();
      v31 = swift_slowAlloc();
      v33 = v31;
      *(_DWORD *)v20 = 136315650;
      swift_bridgeObjectRetain();
      sub_21FABDCF8(a3, a4, &v33);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v20 + 12) = 2080;
      v21 = *(id *)&v17[OBJC_IVAR____TtC19HealthRecordsDaemon22DaemonConnectionServer_client];
      v22 = objc_msgSend(v21, sel_description);
      v23 = sub_21FC5B604();
      log = v18;
      v25 = v24;

      sub_21FABDCF8(v23, v25, &v33);
      sub_21FC5BAC0();

      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 22) = 2080;
      v26 = a2;
      sub_21FA50724(0, (unint64_t *)&qword_25406BB50);
      v27 = sub_21FC5B64C();
      sub_21FABDCF8(v27, v28, &v33);
      sub_21FC5BAC0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_21FA27000, log, type, "Not returning endpoint for %s to %s: %s", (uint8_t *)v20, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x2207D105C](v31, -1, -1);
      MEMORY[0x2207D105C](v20, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v29 = (void *)sub_21FC5A8D8();
  }
  else
  {
    v29 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, void *))(a6 + 16))(a6, a1, v29);

}

void sub_21FC59BA0(uint64_t a1, unint64_t a2, char *a3, void *aBlock)
{
  uint64_t v8;
  unint64_t v9;
  char v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  id v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;

  v8 = *(_QWORD *)&a3[OBJC_IVAR____TtC19HealthRecordsDaemon22DaemonConnectionServer_serviceMap];
  if (*(_QWORD *)(v8 + 16))
  {
    _Block_copy(aBlock);
    _Block_copy(aBlock);
    _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    v9 = sub_21FA73F34(a1, a2);
    if ((v10 & 1) != 0)
    {
      sub_21FA2CEA0(*(_QWORD *)(v8 + 56) + 40 * v9, (uint64_t)&v31);
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v32 + 1))
      {
        sub_21FA3175C(&v31, (uint64_t)&v34);
        __swift_project_boxed_opaque_existential_1(&v34, v36);
        v14 = *(void **)&a3[OBJC_IVAR____TtC19HealthRecordsDaemon22DaemonConnectionServer_client];
        swift_bridgeObjectRetain();
        v15 = objc_msgSend(v14, sel_connection);
        if (v15)
        {
          v16 = v15;
          v17 = (void *)sub_21FC5B5E0();
          v18 = objc_msgSend(v16, sel_valueForEntitlement_, v17);

          if (v18)
          {
            sub_21FC5BAF0();
            swift_unknownObjectRelease();
          }
          else
          {
            *(_OWORD *)v27 = 0u;
            v28 = 0u;
          }
          sub_21FA2D23C((uint64_t)v27, (uint64_t)&v29, (uint64_t (*)(_QWORD))sub_21FA2DAD8);
          if (*((_QWORD *)&v30 + 1))
          {
            sub_21FA7B73C(&v29, &v31);
            sub_21FA2DB6C((uint64_t)&v31, (uint64_t)&v29);
            sub_21FA5F68C();
            if (swift_dynamicCast())
            {
              v19 = v27[0];
              if ((objc_msgSend(v27[0], sel_BOOLValue) & 1) != 0)
              {
                swift_bridgeObjectRelease();
                v20 = objc_msgSend(*(id *)(*__swift_project_boxed_opaque_existential_1(&v34, v36)+ OBJC_IVAR____TtC19HealthRecordsDaemon23DefaultDaemonXPCService_listener), sel_endpoint);
                (*((void (**)(void *, id, _QWORD))aBlock + 2))(aBlock, v20, 0);

LABEL_21:
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
                goto LABEL_22;
              }

            }
            v24 = (void *)objc_opt_self();
            *(_QWORD *)&v29 = 0;
            *((_QWORD *)&v29 + 1) = 0xE000000000000000;
            sub_21FC5BB74();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v29 = 0xD000000000000013;
            *((_QWORD *)&v29 + 1) = 0x800000021FC7FE80;
            sub_21FC5B6AC();
            swift_bridgeObjectRelease();
            sub_21FC5B6AC();
            v25 = (void *)sub_21FC5B5E0();
            swift_bridgeObjectRelease();
            v26 = objc_msgSend(v24, sel_hk_error_description_, 4, v25);

            _Block_copy(aBlock);
            sub_21FC59850(0, v26, a1, a2, a3, (uint64_t)aBlock);
            _Block_release(aBlock);

            goto LABEL_21;
          }
        }
        else
        {
          v29 = 0u;
          v30 = 0u;
        }
        sub_21FA326EC((uint64_t)&v29, (uint64_t (*)(_QWORD))sub_21FA2DAD8);
        v21 = (void *)objc_opt_self();
        *(_QWORD *)&v31 = 0;
        *((_QWORD *)&v31 + 1) = 0xE000000000000000;
        sub_21FC5BB74();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v31 = 0x20676E697373694DLL;
        *((_QWORD *)&v31 + 1) = 0xE900000000000022;
        sub_21FC5B6AC();
        swift_bridgeObjectRelease();
        sub_21FC5B6AC();
        v22 = (void *)sub_21FC5B5E0();
        swift_bridgeObjectRelease();
        v23 = objc_msgSend(v21, sel_hk_error_description_, 4, v22);

        _Block_copy(aBlock);
        sub_21FC59850(0, v23, a1, a2, a3, (uint64_t)aBlock);
        _Block_release(aBlock);

LABEL_22:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v34);
        goto LABEL_8;
      }
    }
    else
    {
      v33 = 0;
      v31 = 0u;
      v32 = 0u;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v33 = 0;
    v31 = 0u;
    v32 = 0u;
    _Block_copy(aBlock);
    _Block_copy(aBlock);
    _Block_copy(aBlock);
  }
  sub_21FA326EC((uint64_t)&v31, (uint64_t (*)(_QWORD))sub_21FC5A184);
  v11 = (void *)objc_opt_self();
  v34 = 0;
  v35 = 0xE000000000000000;
  sub_21FC5BB74();
  swift_bridgeObjectRelease();
  v34 = 0x2065636976726553;
  v35 = 0xE900000000000022;
  sub_21FC5B6AC();
  sub_21FC5B6AC();
  v12 = (void *)sub_21FC5B5E0();
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(v11, sel_hk_error_description_, 3, v12);

  _Block_copy(aBlock);
  sub_21FC59850(0, v13, a1, a2, a3, (uint64_t)aBlock);
  _Block_release(aBlock);

LABEL_8:
  _Block_release(aBlock);
  _Block_release(aBlock);
  _Block_release(aBlock);
}

void sub_21FC5A184()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25554E940)
  {
    sub_21FA50724(255, (unint64_t *)&qword_25406ACD0);
    v0 = sub_21FC5BAA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25554E940);
  }
}

void sub_21FC5A1E8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25406B9F8)
  {
    sub_21FC5A23C();
    v0 = sub_21FC5BAA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25406B9F8);
  }
}

void sub_21FC5A23C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25406B9E0[0])
  {
    sub_21FA50724(255, (unint64_t *)&qword_25406ACD0);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, qword_25406B9E0);
  }
}

void sub_21FC5A2B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[6];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = objc_allocWithZone(MEMORY[0x24BE45C90]);
  swift_retain();
  v8 = objc_msgSend(v7, sel_initWithHealthStore_, a3);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = sub_21FA5F86C;
  *(_QWORD *)(v9 + 24) = v6;
  v11[4] = sub_21FC5A484;
  v11[5] = v9;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1107296256;
  v11[2] = sub_21FC5A48C;
  v11[3] = &block_descriptor_25;
  v10 = _Block_copy(v11);
  swift_release();
  objc_msgSend(v8, sel_fetchAllSchedulesWithCompletion_, v10);
  _Block_release(v10);

}

uint64_t sub_21FC5A3C0()
{
  swift_release();
  return swift_deallocObject();
}

void sub_21FC5A3E4(void *a1, id a2, void (*a3)(id, BOOL))
{
  id v5;
  uint64_t v7;
  id v8;

  v5 = a1;
  if (!a1)
  {
    v5 = a2;
    if (!a2)
    {
      sub_21FA720B8();
      v5 = (id)swift_allocError();
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_BYTE *)(v7 + 16) = 2;
    }
    v8 = a2;
  }
  swift_bridgeObjectRetain();
  a3(v5, a1 == 0);
  sub_21FAC6A4C(v5, a1 == 0);
}

void sub_21FC5A484(void *a1, void *a2)
{
  uint64_t v2;

  sub_21FC5A3E4(a1, a2, *(void (**)(id, BOOL))(v2 + 16));
}

uint64_t sub_21FC5A48C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  id v6;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_21FC5A520();
    v4 = sub_21FC5B7A8();
  }
  swift_retain();
  v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

unint64_t sub_21FC5A520()
{
  unint64_t result;

  result = qword_25553FFA0;
  if (!qword_25553FFA0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25553FFA0);
  }
  return result;
}

uint64_t sub_21FC5A560()
{
  return MEMORY[0x24BDCAFF0]();
}

uint64_t sub_21FC5A56C()
{
  return MEMORY[0x24BDCAFF8]();
}

uint64_t sub_21FC5A578()
{
  return MEMORY[0x24BDCB000]();
}

uint64_t sub_21FC5A584()
{
  return MEMORY[0x24BDCB008]();
}

uint64_t sub_21FC5A590()
{
  return MEMORY[0x24BDCB020]();
}

uint64_t sub_21FC5A59C()
{
  return MEMORY[0x24BDCB070]();
}

uint64_t sub_21FC5A5A8()
{
  return MEMORY[0x24BDCB088]();
}

uint64_t sub_21FC5A5B4()
{
  return MEMORY[0x24BDCB098]();
}

uint64_t sub_21FC5A5C0()
{
  return MEMORY[0x24BDCB0A8]();
}

uint64_t sub_21FC5A5CC()
{
  return MEMORY[0x24BDCB0B0]();
}

uint64_t sub_21FC5A5D8()
{
  return MEMORY[0x24BDCB0C0]();
}

uint64_t sub_21FC5A5E4()
{
  return MEMORY[0x24BDCB1E0]();
}

uint64_t sub_21FC5A5F0()
{
  return MEMORY[0x24BDCB1F0]();
}

uint64_t sub_21FC5A5FC()
{
  return MEMORY[0x24BDCB220]();
}

uint64_t sub_21FC5A608()
{
  return MEMORY[0x24BDCB260]();
}

uint64_t sub_21FC5A614()
{
  return MEMORY[0x24BDCB268]();
}

uint64_t sub_21FC5A620()
{
  return MEMORY[0x24BDCB290]();
}

uint64_t sub_21FC5A62C()
{
  return MEMORY[0x24BDCB2A8]();
}

uint64_t sub_21FC5A638()
{
  return MEMORY[0x24BDCB2E0]();
}

uint64_t sub_21FC5A644()
{
  return MEMORY[0x24BDCB3B8]();
}

uint64_t sub_21FC5A650()
{
  return MEMORY[0x24BDCB400]();
}

uint64_t sub_21FC5A65C()
{
  return MEMORY[0x24BDCB410]();
}

uint64_t sub_21FC5A668()
{
  return MEMORY[0x24BDCB810]();
}

uint64_t sub_21FC5A674()
{
  return MEMORY[0x24BDCB828]();
}

uint64_t sub_21FC5A680()
{
  return MEMORY[0x24BDCB830]();
}

uint64_t sub_21FC5A68C()
{
  return MEMORY[0x24BDCB838]();
}

uint64_t sub_21FC5A698()
{
  return MEMORY[0x24BDCB840]();
}

uint64_t sub_21FC5A6A4()
{
  return MEMORY[0x24BDCB848]();
}

uint64_t sub_21FC5A6B0()
{
  return MEMORY[0x24BDCB858]();
}

uint64_t sub_21FC5A6BC()
{
  return MEMORY[0x24BDD2018]();
}

uint64_t sub_21FC5A6C8()
{
  return MEMORY[0x24BDCB878]();
}

uint64_t sub_21FC5A6D4()
{
  return MEMORY[0x24BDCB958]();
}

uint64_t sub_21FC5A6E0()
{
  return MEMORY[0x24BDCB988]();
}

uint64_t sub_21FC5A6EC()
{
  return MEMORY[0x24BDCBA60]();
}

uint64_t sub_21FC5A6F8()
{
  return MEMORY[0x24BDCBAB0]();
}

uint64_t sub_21FC5A704()
{
  return MEMORY[0x24BDCBAC0]();
}

uint64_t sub_21FC5A710()
{
  return MEMORY[0x24BDCBAE0]();
}

uint64_t sub_21FC5A71C()
{
  return MEMORY[0x24BDCBAE8]();
}

uint64_t sub_21FC5A728()
{
  return MEMORY[0x24BDCBB30]();
}

uint64_t sub_21FC5A734()
{
  return MEMORY[0x24BDCBB50]();
}

uint64_t sub_21FC5A740()
{
  return MEMORY[0x24BDCBB78]();
}

uint64_t sub_21FC5A74C()
{
  return MEMORY[0x24BDCBBA0]();
}

uint64_t sub_21FC5A758()
{
  return MEMORY[0x24BDCBBB0]();
}

uint64_t sub_21FC5A764()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t sub_21FC5A770()
{
  return MEMORY[0x24BDCBBD0]();
}

uint64_t sub_21FC5A77C()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t sub_21FC5A788()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t sub_21FC5A794()
{
  return MEMORY[0x24BDCBC10]();
}

uint64_t sub_21FC5A7A0()
{
  return MEMORY[0x24BDCBCA0]();
}

uint64_t sub_21FC5A7AC()
{
  return MEMORY[0x24BDCBCC0]();
}

uint64_t sub_21FC5A7B8()
{
  return MEMORY[0x24BDCBCE0]();
}

uint64_t sub_21FC5A7C4()
{
  return MEMORY[0x24BDCBD00]();
}

uint64_t sub_21FC5A7D0()
{
  return MEMORY[0x24BDCBD08]();
}

uint64_t sub_21FC5A7DC()
{
  return MEMORY[0x24BDCBD10]();
}

uint64_t sub_21FC5A7E8()
{
  return MEMORY[0x24BDCBD28]();
}

uint64_t sub_21FC5A7F4()
{
  return MEMORY[0x24BDCBD48]();
}

uint64_t sub_21FC5A800()
{
  return MEMORY[0x24BDCBD60]();
}

uint64_t sub_21FC5A80C()
{
  return MEMORY[0x24BDCBD68]();
}

uint64_t sub_21FC5A818()
{
  return MEMORY[0x24BDCBD70]();
}

uint64_t sub_21FC5A824()
{
  return MEMORY[0x24BDCBDA8]();
}

uint64_t sub_21FC5A830()
{
  return MEMORY[0x24BDCBDB8]();
}

uint64_t sub_21FC5A83C()
{
  return MEMORY[0x24BDCBDE0]();
}

uint64_t sub_21FC5A848()
{
  return MEMORY[0x24BDCBE48]();
}

uint64_t sub_21FC5A854()
{
  return MEMORY[0x24BDCBE60]();
}

uint64_t sub_21FC5A860()
{
  return MEMORY[0x24BDCBE68]();
}

uint64_t sub_21FC5A86C()
{
  return MEMORY[0x24BDCBE80]();
}

uint64_t sub_21FC5A878()
{
  return MEMORY[0x24BDCC1E0]();
}

uint64_t sub_21FC5A884()
{
  return MEMORY[0x24BDCD280]();
}

uint64_t sub_21FC5A890()
{
  return MEMORY[0x24BDCD288]();
}

uint64_t sub_21FC5A89C()
{
  return MEMORY[0x24BDCD290]();
}

uint64_t sub_21FC5A8A8()
{
  return MEMORY[0x24BDCD298]();
}

uint64_t sub_21FC5A8B4()
{
  return MEMORY[0x24BDCD2A0]();
}

uint64_t sub_21FC5A8C0()
{
  return MEMORY[0x24BDCD2A8]();
}

uint64_t sub_21FC5A8CC()
{
  return MEMORY[0x24BDCD2B8]();
}

uint64_t sub_21FC5A8D8()
{
  return MEMORY[0x24BDCD2F0]();
}

uint64_t sub_21FC5A8E4()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t sub_21FC5A8F0()
{
  return MEMORY[0x24BDCD750]();
}

uint64_t sub_21FC5A8FC()
{
  return MEMORY[0x24BDCD820]();
}

uint64_t sub_21FC5A908()
{
  return MEMORY[0x24BDCD830]();
}

uint64_t sub_21FC5A914()
{
  return MEMORY[0x24BDCD860]();
}

uint64_t sub_21FC5A920()
{
  return MEMORY[0x24BDCD8D0]();
}

uint64_t sub_21FC5A92C()
{
  return MEMORY[0x24BDCD918]();
}

uint64_t sub_21FC5A938()
{
  return MEMORY[0x24BDCD928]();
}

uint64_t sub_21FC5A944()
{
  return MEMORY[0x24BDCD968]();
}

uint64_t sub_21FC5A950()
{
  return MEMORY[0x24BDCD9C0]();
}

uint64_t sub_21FC5A95C()
{
  return MEMORY[0x24BDCD9D8]();
}

uint64_t sub_21FC5A968()
{
  return MEMORY[0x24BDCD9F8]();
}

uint64_t sub_21FC5A974()
{
  return MEMORY[0x24BDCDA48]();
}

uint64_t sub_21FC5A980()
{
  return MEMORY[0x24BDCDA68]();
}

uint64_t sub_21FC5A98C()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t sub_21FC5A998()
{
  return MEMORY[0x24BDCDB60]();
}

uint64_t sub_21FC5A9A4()
{
  return MEMORY[0x24BDCDC08]();
}

uint64_t sub_21FC5A9B0()
{
  return MEMORY[0x24BDCDC10]();
}

uint64_t sub_21FC5A9BC()
{
  return MEMORY[0x24BDCDC28]();
}

uint64_t sub_21FC5A9C8()
{
  return MEMORY[0x24BDCDC40]();
}

uint64_t sub_21FC5A9D4()
{
  return MEMORY[0x24BDCDCA0]();
}

uint64_t sub_21FC5A9E0()
{
  return MEMORY[0x24BDCDCA8]();
}

uint64_t sub_21FC5A9EC()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t sub_21FC5A9F8()
{
  return MEMORY[0x24BDCDCF8]();
}

uint64_t sub_21FC5AA04()
{
  return MEMORY[0x24BDCDD20]();
}

uint64_t sub_21FC5AA10()
{
  return MEMORY[0x24BDCDE78]();
}

uint64_t sub_21FC5AA1C()
{
  return MEMORY[0x24BDCDE90]();
}

uint64_t sub_21FC5AA28()
{
  return MEMORY[0x24BDCDE98]();
}

uint64_t sub_21FC5AA34()
{
  return MEMORY[0x24BDCE2D8]();
}

uint64_t sub_21FC5AA40()
{
  return MEMORY[0x24BDCE2F8]();
}

uint64_t sub_21FC5AA4C()
{
  return MEMORY[0x24BDCE330]();
}

uint64_t sub_21FC5AA58()
{
  return MEMORY[0x24BDCE468]();
}

uint64_t sub_21FC5AA64()
{
  return MEMORY[0x24BDCE5D8]();
}

uint64_t sub_21FC5AA70()
{
  return MEMORY[0x24BDCE5E8]();
}

uint64_t sub_21FC5AA7C()
{
  return MEMORY[0x24BDCE5F0]();
}

uint64_t sub_21FC5AA88()
{
  return MEMORY[0x24BDCE628]();
}

uint64_t sub_21FC5AA94()
{
  return MEMORY[0x24BDCE878]();
}

uint64_t sub_21FC5AAA0()
{
  return MEMORY[0x24BDCE8F8]();
}

uint64_t sub_21FC5AAAC()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t sub_21FC5AAB8()
{
  return MEMORY[0x24BDCE9B0]();
}

uint64_t sub_21FC5AAC4()
{
  return MEMORY[0x24BDCE9D0]();
}

uint64_t sub_21FC5AAD0()
{
  return MEMORY[0x24BDCE9E0]();
}

uint64_t sub_21FC5AADC()
{
  return MEMORY[0x24BDCE9F8]();
}

uint64_t sub_21FC5AAE8()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t sub_21FC5AAF4()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t sub_21FC5AB00()
{
  return MEMORY[0x24BDCEC88]();
}

uint64_t sub_21FC5AB0C()
{
  return MEMORY[0x24BDCEF80]();
}

uint64_t sub_21FC5AB18()
{
  return MEMORY[0x24BDCEFA0]();
}

uint64_t sub_21FC5AB24()
{
  return MEMORY[0x24BDCEFB0]();
}

uint64_t sub_21FC5AB30()
{
  return MEMORY[0x24BDCEFC8]();
}

uint64_t sub_21FC5AB3C()
{
  return MEMORY[0x24BDCF028]();
}

uint64_t sub_21FC5AB48()
{
  return MEMORY[0x24BDCF050]();
}

uint64_t sub_21FC5AB54()
{
  return MEMORY[0x24BDCF078]();
}

uint64_t sub_21FC5AB60()
{
  return MEMORY[0x24BDCF0B8]();
}

uint64_t sub_21FC5AB6C()
{
  return MEMORY[0x24BDCF0C0]();
}

uint64_t sub_21FC5AB78()
{
  return MEMORY[0x24BDCF128]();
}

uint64_t sub_21FC5AB84()
{
  return MEMORY[0x24BDCF140]();
}

uint64_t sub_21FC5AB90()
{
  return MEMORY[0x24BDCF150]();
}

uint64_t sub_21FC5AB9C()
{
  return MEMORY[0x24BDCF160]();
}

uint64_t sub_21FC5ABA8()
{
  return MEMORY[0x24BDCF198]();
}

uint64_t sub_21FC5ABB4()
{
  return MEMORY[0x24BDCF1A0]();
}

uint64_t sub_21FC5ABC0()
{
  return MEMORY[0x24BDCF1B0]();
}

uint64_t sub_21FC5ABCC()
{
  return MEMORY[0x24BDCF1C0]();
}

uint64_t sub_21FC5ABD8()
{
  return MEMORY[0x24BDCF1C8]();
}

uint64_t sub_21FC5ABE4()
{
  return MEMORY[0x24BDCF1D0]();
}

uint64_t sub_21FC5ABF0()
{
  return MEMORY[0x24BDCF290]();
}

uint64_t sub_21FC5ABFC()
{
  return MEMORY[0x24BDCF2D0]();
}

uint64_t sub_21FC5AC08()
{
  return MEMORY[0x24BDCF2D8]();
}

uint64_t sub_21FC5AC14()
{
  return MEMORY[0x24BDCF4A0]();
}

uint64_t sub_21FC5AC20()
{
  return MEMORY[0x24BDCF4A8]();
}

uint64_t sub_21FC5AC2C()
{
  return MEMORY[0x24BDCF4C8]();
}

uint64_t sub_21FC5AC38()
{
  return MEMORY[0x24BDCF4D8]();
}

uint64_t sub_21FC5AC44()
{
  return MEMORY[0x24BDCF4F0]();
}

uint64_t sub_21FC5AC50()
{
  return MEMORY[0x24BDCF500]();
}

uint64_t sub_21FC5AC5C()
{
  return MEMORY[0x24BDCF510]();
}

uint64_t sub_21FC5AC68()
{
  return MEMORY[0x24BDCF598]();
}

uint64_t sub_21FC5AC74()
{
  return MEMORY[0x24BDCF5A0]();
}

uint64_t sub_21FC5AC80()
{
  return MEMORY[0x24BDCF5C0]();
}

uint64_t sub_21FC5AC8C()
{
  return MEMORY[0x24BDCF5D8]();
}

uint64_t sub_21FC5AC98()
{
  return MEMORY[0x24BDCF5F8]();
}

uint64_t sub_21FC5ACA4()
{
  return MEMORY[0x24BDCF610]();
}

uint64_t sub_21FC5ACB0()
{
  return MEMORY[0x24BE45778]();
}

uint64_t sub_21FC5ACBC()
{
  return MEMORY[0x24BE45780]();
}

uint64_t sub_21FC5ACC8()
{
  return MEMORY[0x24BE45930]();
}

uint64_t sub_21FC5ACD4()
{
  return MEMORY[0x24BE45940]();
}

uint64_t sub_21FC5ACE0()
{
  return MEMORY[0x24BE5B988]();
}

uint64_t sub_21FC5ACEC()
{
  return MEMORY[0x24BE5B990]();
}

uint64_t sub_21FC5ACF8()
{
  return MEMORY[0x24BE5BE30]();
}

uint64_t sub_21FC5AD04()
{
  return MEMORY[0x24BE5BF00]();
}

uint64_t sub_21FC5AD10()
{
  return MEMORY[0x24BE5BF08]();
}

uint64_t sub_21FC5AD1C()
{
  return MEMORY[0x24BE5BF10]();
}

uint64_t sub_21FC5AD28()
{
  return MEMORY[0x24BE5BF78]();
}

uint64_t sub_21FC5AD34()
{
  return MEMORY[0x24BE5BFA8]();
}

uint64_t sub_21FC5AD40()
{
  return MEMORY[0x24BE5BFB0]();
}

uint64_t sub_21FC5AD4C()
{
  return MEMORY[0x24BE5BFC0]();
}

uint64_t sub_21FC5AD58()
{
  return MEMORY[0x24BE5BFC8]();
}

uint64_t sub_21FC5AD64()
{
  return MEMORY[0x24BE5C008]();
}

uint64_t sub_21FC5AD70()
{
  return MEMORY[0x24BE5C010]();
}

uint64_t sub_21FC5AD7C()
{
  return MEMORY[0x24BE5C018]();
}

uint64_t sub_21FC5AD88()
{
  return MEMORY[0x24BE5C038]();
}

uint64_t sub_21FC5AD94()
{
  return MEMORY[0x24BE5C048]();
}

uint64_t sub_21FC5ADA0()
{
  return MEMORY[0x24BE5C058]();
}

uint64_t sub_21FC5ADAC()
{
  return MEMORY[0x24BE5C068]();
}

uint64_t sub_21FC5ADB8()
{
  return MEMORY[0x24BE5C070]();
}

uint64_t sub_21FC5ADC4()
{
  return MEMORY[0x24BE5C078]();
}

uint64_t sub_21FC5ADD0()
{
  return MEMORY[0x24BE5C080]();
}

uint64_t sub_21FC5ADDC()
{
  return MEMORY[0x24BE5C088]();
}

uint64_t sub_21FC5ADE8()
{
  return MEMORY[0x24BE5C0A0]();
}

uint64_t sub_21FC5ADF4()
{
  return MEMORY[0x24BE5C0A8]();
}

uint64_t sub_21FC5AE00()
{
  return MEMORY[0x24BE5C0B8]();
}

uint64_t sub_21FC5AE0C()
{
  return MEMORY[0x24BE5C0C8]();
}

uint64_t sub_21FC5AE18()
{
  return MEMORY[0x24BE5C0E8]();
}

uint64_t sub_21FC5AE24()
{
  return MEMORY[0x24BE5C108]();
}

uint64_t sub_21FC5AE30()
{
  return MEMORY[0x24BE5C118]();
}

uint64_t sub_21FC5AE3C()
{
  return MEMORY[0x24BE5C120]();
}

uint64_t sub_21FC5AE48()
{
  return MEMORY[0x24BE5C130]();
}

uint64_t sub_21FC5AE54()
{
  return MEMORY[0x24BE5C148]();
}

uint64_t sub_21FC5AE60()
{
  return MEMORY[0x24BE5C160]();
}

uint64_t sub_21FC5AE6C()
{
  return MEMORY[0x24BE5C198]();
}

uint64_t sub_21FC5AE78()
{
  return MEMORY[0x24BE5C1B0]();
}

uint64_t sub_21FC5AE84()
{
  return MEMORY[0x24BE5C1B8]();
}

uint64_t sub_21FC5AE90()
{
  return MEMORY[0x24BE5C1C0]();
}

uint64_t sub_21FC5AE9C()
{
  return MEMORY[0x24BE5C1D0]();
}

uint64_t sub_21FC5AEA8()
{
  return MEMORY[0x24BE5C1E8]();
}

uint64_t sub_21FC5AEB4()
{
  return MEMORY[0x24BE5C230]();
}

uint64_t sub_21FC5AEC0()
{
  return MEMORY[0x24BE5C238]();
}

uint64_t sub_21FC5AECC()
{
  return MEMORY[0x24BE5C270]();
}

uint64_t sub_21FC5AED8()
{
  return MEMORY[0x24BE5C278]();
}

uint64_t sub_21FC5AEE4()
{
  return MEMORY[0x24BE5C280]();
}

uint64_t sub_21FC5AEF0()
{
  return MEMORY[0x24BE5C298]();
}

uint64_t sub_21FC5AEFC()
{
  return MEMORY[0x24BE5C2A0]();
}

uint64_t sub_21FC5AF08()
{
  return MEMORY[0x24BE5C2A8]();
}

uint64_t sub_21FC5AF14()
{
  return MEMORY[0x24BE5C2C0]();
}

uint64_t sub_21FC5AF20()
{
  return MEMORY[0x24BE5C2D8]();
}

uint64_t sub_21FC5AF2C()
{
  return MEMORY[0x24BE5C2E8]();
}

uint64_t sub_21FC5AF38()
{
  return MEMORY[0x24BE5C2F0]();
}

uint64_t sub_21FC5AF44()
{
  return MEMORY[0x24BE5C300]();
}

uint64_t sub_21FC5AF50()
{
  return MEMORY[0x24BE5C310]();
}

uint64_t sub_21FC5AF5C()
{
  return MEMORY[0x24BE5C330]();
}

uint64_t sub_21FC5AF68()
{
  return MEMORY[0x24BE5C340]();
}

uint64_t sub_21FC5AF74()
{
  return MEMORY[0x24BE5C350]();
}

uint64_t sub_21FC5AF80()
{
  return MEMORY[0x24BE49BD8]();
}

uint64_t sub_21FC5AF8C()
{
  return MEMORY[0x24BE49BE0]();
}

uint64_t sub_21FC5AF98()
{
  return MEMORY[0x24BE49BE8]();
}

uint64_t sub_21FC5AFA4()
{
  return MEMORY[0x24BE49BF0]();
}

uint64_t sub_21FC5AFB0()
{
  return MEMORY[0x24BE49BF8]();
}

uint64_t sub_21FC5AFBC()
{
  return MEMORY[0x24BE49C00]();
}

uint64_t sub_21FC5AFC8()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_21FC5AFD4()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_21FC5AFE0()
{
  return MEMORY[0x24BEE78E8]();
}

uint64_t sub_21FC5AFEC()
{
  return MEMORY[0x24BDB9438]();
}

uint64_t sub_21FC5AFF8()
{
  return MEMORY[0x24BDB94A8]();
}

uint64_t sub_21FC5B004()
{
  return MEMORY[0x24BDB94B8]();
}

uint64_t sub_21FC5B010()
{
  return MEMORY[0x24BDB9520]();
}

uint64_t sub_21FC5B01C()
{
  return MEMORY[0x24BDB9558]();
}

uint64_t sub_21FC5B028()
{
  return MEMORY[0x24BDB9570]();
}

uint64_t sub_21FC5B034()
{
  return MEMORY[0x24BDB9588]();
}

uint64_t sub_21FC5B040()
{
  return MEMORY[0x24BDB95D8]();
}

uint64_t sub_21FC5B04C()
{
  return MEMORY[0x24BDB95E8]();
}

uint64_t sub_21FC5B058()
{
  return MEMORY[0x24BDB96A8]();
}

uint64_t sub_21FC5B064()
{
  return MEMORY[0x24BDB96B0]();
}

uint64_t sub_21FC5B070()
{
  return MEMORY[0x24BDB96C8]();
}

uint64_t sub_21FC5B07C()
{
  return MEMORY[0x24BDB96D8]();
}

uint64_t sub_21FC5B088()
{
  return MEMORY[0x24BDB9718]();
}

uint64_t sub_21FC5B094()
{
  return MEMORY[0x24BDB9720]();
}

uint64_t sub_21FC5B0A0()
{
  return MEMORY[0x24BDB9730]();
}

uint64_t sub_21FC5B0AC()
{
  return MEMORY[0x24BDB9760]();
}

uint64_t sub_21FC5B0B8()
{
  return MEMORY[0x24BDB9780]();
}

uint64_t sub_21FC5B0C4()
{
  return MEMORY[0x24BDB9790]();
}

uint64_t sub_21FC5B0D0()
{
  return MEMORY[0x24BDB97B8]();
}

uint64_t sub_21FC5B0DC()
{
  return MEMORY[0x24BDB98B0]();
}

uint64_t sub_21FC5B0E8()
{
  return MEMORY[0x24BDB98B8]();
}

uint64_t sub_21FC5B0F4()
{
  return MEMORY[0x24BDB98D0]();
}

uint64_t sub_21FC5B100()
{
  return MEMORY[0x24BDB98E0]();
}

uint64_t sub_21FC5B10C()
{
  return MEMORY[0x24BDB9928]();
}

uint64_t sub_21FC5B118()
{
  return MEMORY[0x24BDB9940]();
}

uint64_t sub_21FC5B124()
{
  return MEMORY[0x24BDB9948]();
}

uint64_t sub_21FC5B130()
{
  return MEMORY[0x24BDB9960]();
}

uint64_t sub_21FC5B13C()
{
  return MEMORY[0x24BDB9990]();
}

uint64_t sub_21FC5B148()
{
  return MEMORY[0x24BDB99B8]();
}

uint64_t sub_21FC5B154()
{
  return MEMORY[0x24BDB99C8]();
}

uint64_t sub_21FC5B160()
{
  return MEMORY[0x24BDB9A50]();
}

uint64_t sub_21FC5B16C()
{
  return MEMORY[0x24BDB9A68]();
}

uint64_t sub_21FC5B178()
{
  return MEMORY[0x24BDB9A80]();
}

uint64_t sub_21FC5B184()
{
  return MEMORY[0x24BDB9AC0]();
}

uint64_t sub_21FC5B190()
{
  return MEMORY[0x24BDB9AE0]();
}

uint64_t sub_21FC5B19C()
{
  return MEMORY[0x24BDB9B40]();
}

uint64_t sub_21FC5B1A8()
{
  return MEMORY[0x24BDB9B50]();
}

uint64_t sub_21FC5B1B4()
{
  return MEMORY[0x24BDB9B60]();
}

uint64_t sub_21FC5B1C0()
{
  return MEMORY[0x24BDB9CC0]();
}

uint64_t sub_21FC5B1CC()
{
  return MEMORY[0x24BDB9CE0]();
}

uint64_t sub_21FC5B1D8()
{
  return MEMORY[0x24BDB9D00]();
}

uint64_t sub_21FC5B1E4()
{
  return MEMORY[0x24BDB9D90]();
}

uint64_t sub_21FC5B1F0()
{
  return MEMORY[0x24BDB9D98]();
}

uint64_t sub_21FC5B1FC()
{
  return MEMORY[0x24BDB9DA0]();
}

uint64_t sub_21FC5B208()
{
  return MEMORY[0x24BDB9DC0]();
}

uint64_t sub_21FC5B214()
{
  return MEMORY[0x24BDB9DD8]();
}

uint64_t sub_21FC5B220()
{
  return MEMORY[0x24BDB9DE0]();
}

uint64_t sub_21FC5B22C()
{
  return MEMORY[0x24BDB9DF0]();
}

uint64_t sub_21FC5B238()
{
  return MEMORY[0x24BDB9E08]();
}

uint64_t sub_21FC5B244()
{
  return MEMORY[0x24BDB9E10]();
}

uint64_t sub_21FC5B250()
{
  return MEMORY[0x24BDB9E38]();
}

uint64_t sub_21FC5B25C()
{
  return MEMORY[0x24BDB9E50]();
}

uint64_t sub_21FC5B268()
{
  return MEMORY[0x24BDB9E78]();
}

uint64_t sub_21FC5B274()
{
  return MEMORY[0x24BDB9E80]();
}

uint64_t sub_21FC5B280()
{
  return MEMORY[0x24BDB9F20]();
}

uint64_t sub_21FC5B28C()
{
  return MEMORY[0x24BDB9F30]();
}

uint64_t sub_21FC5B298()
{
  return MEMORY[0x24BDB9F38]();
}

uint64_t sub_21FC5B2A4()
{
  return MEMORY[0x24BDB9F40]();
}

uint64_t sub_21FC5B2B0()
{
  return MEMORY[0x24BDB9F48]();
}

uint64_t sub_21FC5B2BC()
{
  return MEMORY[0x24BDB9F68]();
}

uint64_t sub_21FC5B2C8()
{
  return MEMORY[0x24BDB9F90]();
}

uint64_t sub_21FC5B2D4()
{
  return MEMORY[0x24BDB9FB0]();
}

uint64_t sub_21FC5B2E0()
{
  return MEMORY[0x24BDB9FB8]();
}

uint64_t sub_21FC5B2EC()
{
  return MEMORY[0x24BDB9FD0]();
}

uint64_t sub_21FC5B2F8()
{
  return MEMORY[0x24BDBA010]();
}

uint64_t sub_21FC5B304()
{
  return MEMORY[0x24BDBA018]();
}

uint64_t sub_21FC5B310()
{
  return MEMORY[0x24BDBA020]();
}

uint64_t sub_21FC5B31C()
{
  return MEMORY[0x24BDBA048]();
}

uint64_t sub_21FC5B328()
{
  return MEMORY[0x24BDBA058]();
}

uint64_t sub_21FC5B334()
{
  return MEMORY[0x24BDBA068]();
}

uint64_t sub_21FC5B340()
{
  return MEMORY[0x24BDBA070]();
}

uint64_t sub_21FC5B34C()
{
  return MEMORY[0x24BDBA078]();
}

uint64_t sub_21FC5B358()
{
  return MEMORY[0x24BDBA0A8]();
}

uint64_t sub_21FC5B364()
{
  return MEMORY[0x24BDBA0B8]();
}

uint64_t sub_21FC5B370()
{
  return MEMORY[0x24BDBA0E0]();
}

uint64_t sub_21FC5B37C()
{
  return MEMORY[0x24BDBA110]();
}

uint64_t sub_21FC5B388()
{
  return MEMORY[0x24BDBA130]();
}

uint64_t sub_21FC5B394()
{
  return MEMORY[0x24BDBA138]();
}

uint64_t sub_21FC5B3A0()
{
  return MEMORY[0x24BEE5458]();
}

uint64_t sub_21FC5B3AC()
{
  return MEMORY[0x24BEE54B0]();
}

uint64_t sub_21FC5B3B8()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t sub_21FC5B3C4()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t sub_21FC5B3D0()
{
  return MEMORY[0x24BDC62A8]();
}

uint64_t sub_21FC5B3DC()
{
  return MEMORY[0x24BDC62B0]();
}

uint64_t sub_21FC5B3E8()
{
  return MEMORY[0x24BDC62C8]();
}

uint64_t sub_21FC5B3F4()
{
  return MEMORY[0x24BDC62F0]();
}

uint64_t sub_21FC5B400()
{
  return MEMORY[0x24BDC63A0]();
}

uint64_t sub_21FC5B40C()
{
  return MEMORY[0x24BDC63C0]();
}

uint64_t sub_21FC5B418()
{
  return MEMORY[0x24BDC63E0]();
}

uint64_t sub_21FC5B424()
{
  return MEMORY[0x24BDC6490]();
}

uint64_t sub_21FC5B430()
{
  return MEMORY[0x24BDC6498]();
}

uint64_t sub_21FC5B43C()
{
  return MEMORY[0x24BDC64A0]();
}

uint64_t sub_21FC5B448()
{
  return MEMORY[0x24BDC64A8]();
}

uint64_t sub_21FC5B454()
{
  return MEMORY[0x24BDC64B0]();
}

uint64_t sub_21FC5B460()
{
  return MEMORY[0x24BDC64B8]();
}

uint64_t sub_21FC5B46C()
{
  return MEMORY[0x24BDC64F0]();
}

uint64_t sub_21FC5B478()
{
  return MEMORY[0x24BDC6510]();
}

uint64_t sub_21FC5B484()
{
  return MEMORY[0x24BDC6598]();
}

uint64_t sub_21FC5B490()
{
  return MEMORY[0x24BDC65B8]();
}

uint64_t sub_21FC5B49C()
{
  return MEMORY[0x24BDC65C8]();
}

uint64_t sub_21FC5B4A8()
{
  return MEMORY[0x24BDC65D0]();
}

uint64_t sub_21FC5B4B4()
{
  return MEMORY[0x24BDC65F8]();
}

uint64_t sub_21FC5B4C0()
{
  return MEMORY[0x24BDC6600]();
}

uint64_t sub_21FC5B4CC()
{
  return MEMORY[0x24BDC6638]();
}

uint64_t sub_21FC5B4D8()
{
  return MEMORY[0x24BDC69F0]();
}

uint64_t sub_21FC5B4E4()
{
  return MEMORY[0x24BDC6A00]();
}

uint64_t sub_21FC5B4F0()
{
  return MEMORY[0x24BDC6A28]();
}

uint64_t sub_21FC5B4FC()
{
  return MEMORY[0x24BDC6A60]();
}

uint64_t sub_21FC5B508()
{
  return MEMORY[0x24BDC6AC0]();
}

uint64_t sub_21FC5B514()
{
  return MEMORY[0x24BDC6AF8]();
}

uint64_t sub_21FC5B520()
{
  return MEMORY[0x24BDD2458]();
}

uint64_t sub_21FC5B52C()
{
  return MEMORY[0x24BDD2460]();
}

uint64_t sub_21FC5B538()
{
  return MEMORY[0x24BDD2468]();
}

uint64_t sub_21FC5B544()
{
  return MEMORY[0x24BDD2480]();
}

uint64_t sub_21FC5B550()
{
  return MEMORY[0x24BDD2488]();
}

uint64_t sub_21FC5B55C()
{
  return MEMORY[0x24BDCF808]();
}

uint64_t sub_21FC5B568()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t sub_21FC5B574()
{
  return MEMORY[0x24BEE03B0]();
}

uint64_t sub_21FC5B580()
{
  return MEMORY[0x24BEE0460]();
}

uint64_t sub_21FC5B58C()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t sub_21FC5B598()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t sub_21FC5B5A4()
{
  return MEMORY[0x24BEE75F0]();
}

uint64_t sub_21FC5B5B0()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t sub_21FC5B5BC()
{
  return MEMORY[0x24BEE07E0]();
}

uint64_t sub_21FC5B5C8()
{
  return MEMORY[0x24BEE07E8]();
}

uint64_t sub_21FC5B5D4()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_21FC5B5E0()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_21FC5B5EC()
{
  return MEMORY[0x24BDCFA08]();
}

uint64_t sub_21FC5B5F8()
{
  return MEMORY[0x24BDCFA18]();
}

uint64_t sub_21FC5B604()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_21FC5B610()
{
  return MEMORY[0x24BDCFA38]();
}

uint64_t sub_21FC5B61C()
{
  return MEMORY[0x24BDCFA48]();
}

uint64_t sub_21FC5B628()
{
  return MEMORY[0x24BDCFA78]();
}

uint64_t sub_21FC5B634()
{
  return MEMORY[0x24BDCFAC8]();
}

uint64_t sub_21FC5B640()
{
  return MEMORY[0x24BDCFAF8]();
}

uint64_t sub_21FC5B64C()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t sub_21FC5B658()
{
  return MEMORY[0x24BEE0A30]();
}

uint64_t sub_21FC5B664()
{
  return MEMORY[0x24BEE0A50]();
}

uint64_t sub_21FC5B670()
{
  return MEMORY[0x24BEE0AD8]();
}

uint64_t sub_21FC5B67C()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_21FC5B688()
{
  return MEMORY[0x24BEE0B78]();
}

uint64_t sub_21FC5B694()
{
  return MEMORY[0x24BEE0B80]();
}

uint64_t sub_21FC5B6A0()
{
  return MEMORY[0x24BEE0BB0]();
}

uint64_t sub_21FC5B6AC()
{
  return MEMORY[0x24BEE0BC0]();
}

uint64_t sub_21FC5B6B8()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t sub_21FC5B6C4()
{
  return MEMORY[0x24BEE0C18]();
}

uint64_t sub_21FC5B6D0()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t sub_21FC5B6DC()
{
  return MEMORY[0x24BEE0C38]();
}

uint64_t sub_21FC5B6E8()
{
  return MEMORY[0x24BEE0C40]();
}

uint64_t sub_21FC5B6F4()
{
  return MEMORY[0x24BEE0CA0]();
}

uint64_t sub_21FC5B700()
{
  return MEMORY[0x24BEE0CC8]();
}

uint64_t sub_21FC5B70C()
{
  return MEMORY[0x24BEE0D98]();
}

uint64_t sub_21FC5B718()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t sub_21FC5B724()
{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t sub_21FC5B730()
{
  return MEMORY[0x24BEE0DE8]();
}

uint64_t sub_21FC5B73C()
{
  return MEMORY[0x24BEE0DF8]();
}

uint64_t sub_21FC5B748()
{
  return MEMORY[0x24BDBA170]();
}

uint64_t sub_21FC5B754()
{
  return MEMORY[0x24BEE0E40]();
}

uint64_t sub_21FC5B760()
{
  return MEMORY[0x24BEE1000]();
}

uint64_t sub_21FC5B76C()
{
  return MEMORY[0x24BEE1018]();
}

uint64_t sub_21FC5B778()
{
  return MEMORY[0x24BEE1080]();
}

uint64_t sub_21FC5B784()
{
  return MEMORY[0x24BEE1098]();
}

uint64_t sub_21FC5B790()
{
  return MEMORY[0x24BEE1110]();
}

uint64_t sub_21FC5B79C()
{
  return MEMORY[0x24BDCFBA8]();
}

uint64_t sub_21FC5B7A8()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t sub_21FC5B7B4()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t sub_21FC5B7C0()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t sub_21FC5B7CC()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t sub_21FC5B7D8()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t sub_21FC5B7E4()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t sub_21FC5B7F0()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t sub_21FC5B7FC()
{
  return MEMORY[0x24BDCFC08]();
}

uint64_t sub_21FC5B808()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t sub_21FC5B814()
{
  return MEMORY[0x24BEE6820]();
}

uint64_t sub_21FC5B820()
{
  return MEMORY[0x24BEE6828]();
}

uint64_t sub_21FC5B82C()
{
  return MEMORY[0x24BEE6830]();
}

uint64_t sub_21FC5B838()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t sub_21FC5B844()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t sub_21FC5B850()
{
  return MEMORY[0x24BEE6B98]();
}

uint64_t sub_21FC5B85C()
{
  return MEMORY[0x24BEE6BB8]();
}

uint64_t sub_21FC5B868()
{
  return MEMORY[0x24BEE6BC8]();
}

uint64_t sub_21FC5B874()
{
  return MEMORY[0x24BDCFC58]();
}

uint64_t sub_21FC5B880()
{
  return MEMORY[0x24BEE1370]();
}

uint64_t sub_21FC5B88C()
{
  return MEMORY[0x24BDCFCC0]();
}

uint64_t sub_21FC5B898()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t sub_21FC5B8A4()
{
  return MEMORY[0x24BEE16D8]();
}

uint64_t sub_21FC5B8B0()
{
  return MEMORY[0x24BDCFD28]();
}

uint64_t sub_21FC5B8BC()
{
  return MEMORY[0x24BDCFEB8]();
}

uint64_t sub_21FC5B8C8()
{
  return MEMORY[0x24BDCFEC8]();
}

uint64_t sub_21FC5B8D4()
{
  return MEMORY[0x24BDCFF28]();
}

uint64_t sub_21FC5B8E0()
{
  return MEMORY[0x24BE459E0]();
}

uint64_t sub_21FC5B8EC()
{
  return MEMORY[0x24BE45A00]();
}

uint64_t sub_21FC5B8F8()
{
  return MEMORY[0x24BE45A48]();
}

uint64_t sub_21FC5B904()
{
  return MEMORY[0x24BE45A58]();
}

uint64_t sub_21FC5B910()
{
  return MEMORY[0x24BE45A98]();
}

uint64_t sub_21FC5B91C()
{
  return MEMORY[0x24BE45AB0]();
}

uint64_t sub_21FC5B928()
{
  return MEMORY[0x24BE45AB8]();
}

uint64_t sub_21FC5B934()
{
  return MEMORY[0x24BE45AC8]();
}

uint64_t sub_21FC5B940()
{
  return MEMORY[0x24BE45AD0]();
}

uint64_t sub_21FC5B94C()
{
  return MEMORY[0x24BE45AF0]();
}

uint64_t sub_21FC5B958()
{
  return MEMORY[0x24BE45AF8]();
}

uint64_t sub_21FC5B964()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t sub_21FC5B970()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t sub_21FC5B97C()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t sub_21FC5B988()
{
  return MEMORY[0x24BEE7920]();
}

uint64_t sub_21FC5B994()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t sub_21FC5B9A0()
{
  return MEMORY[0x24BDD2520]();
}

uint64_t sub_21FC5B9AC()
{
  return MEMORY[0x24BDD2528]();
}

uint64_t sub_21FC5B9B8()
{
  return MEMORY[0x24BE45B08]();
}

uint64_t sub_21FC5B9C4()
{
  return MEMORY[0x24BDD2530]();
}

uint64_t sub_21FC5B9D0()
{
  return MEMORY[0x24BE45B20]();
}

uint64_t sub_21FC5B9DC()
{
  return MEMORY[0x24BE45B38]();
}

uint64_t sub_21FC5B9E8()
{
  return MEMORY[0x24BE48820]();
}

uint64_t sub_21FC5B9F4()
{
  return MEMORY[0x24BEE5790]();
}

uint64_t sub_21FC5BA00()
{
  return MEMORY[0x24BEE57B0]();
}

uint64_t sub_21FC5BA0C()
{
  return MEMORY[0x24BDD2658]();
}

uint64_t sub_21FC5BA18()
{
  return MEMORY[0x24BDD2660]();
}

uint64_t sub_21FC5BA24()
{
  return MEMORY[0x24BDD26E0]();
}

uint64_t sub_21FC5BA30()
{
  return MEMORY[0x24BE45BE0]();
}

uint64_t sub_21FC5BA3C()
{
  return MEMORY[0x24BDD2710]();
}

uint64_t sub_21FC5BA48()
{
  return MEMORY[0x24BDD01F8]();
}

uint64_t sub_21FC5BA54()
{
  return MEMORY[0x24BEE5BB8]();
}

uint64_t sub_21FC5BA60()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t sub_21FC5BA6C()
{
  return MEMORY[0x24BEE5BD0]();
}

uint64_t sub_21FC5BA78()
{
  return MEMORY[0x24BDD0248]();
}

uint64_t sub_21FC5BA84()
{
  return MEMORY[0x24BE45BF8]();
}

uint64_t sub_21FC5BA90()
{
  return MEMORY[0x24BE45C00]();
}

uint64_t sub_21FC5BA9C()
{
  return MEMORY[0x24BEE1C58]();
}

uint64_t sub_21FC5BAA8()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_21FC5BAB4()
{
  return MEMORY[0x24BEE1E70]();
}

uint64_t sub_21FC5BAC0()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t sub_21FC5BACC()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t sub_21FC5BAD8()
{
  return MEMORY[0x24BDD0568]();
}

uint64_t sub_21FC5BAE4()
{
  return MEMORY[0x24BEE2090]();
}

uint64_t sub_21FC5BAF0()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t sub_21FC5BAFC()
{
  return MEMORY[0x24BEE22B0]();
}

uint64_t sub_21FC5BB08()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t sub_21FC5BB14()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t sub_21FC5BB20()
{
  return MEMORY[0x24BEE23A0]();
}

uint64_t sub_21FC5BB2C()
{
  return MEMORY[0x24BEE23A8]();
}

uint64_t sub_21FC5BB38()
{
  return MEMORY[0x24BEE23E8]();
}

uint64_t sub_21FC5BB44()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t sub_21FC5BB50()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t sub_21FC5BB5C()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t sub_21FC5BB68()
{
  return MEMORY[0x24BEE24D8]();
}

uint64_t sub_21FC5BB74()
{
  return MEMORY[0x24BEE2510]();
}

uint64_t sub_21FC5BB80()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t sub_21FC5BB8C()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t sub_21FC5BB98()
{
  return MEMORY[0x24BEE2660]();
}

uint64_t sub_21FC5BBA4()
{
  return MEMORY[0x24BEE26F0]();
}

uint64_t sub_21FC5BBB0()
{
  return MEMORY[0x24BEE26F8]();
}

uint64_t sub_21FC5BBBC()
{
  return MEMORY[0x24BEE2700]();
}

uint64_t sub_21FC5BBC8()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t sub_21FC5BBD4()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_21FC5BBE0()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t sub_21FC5BBEC()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t sub_21FC5BBF8()
{
  return MEMORY[0x24BEE2950]();
}

uint64_t sub_21FC5BC04()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t sub_21FC5BC10()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t sub_21FC5BC1C()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t sub_21FC5BC28()
{
  return MEMORY[0x24BEE29C0]();
}

uint64_t sub_21FC5BC34()
{
  return MEMORY[0x24BEE2A00]();
}

uint64_t sub_21FC5BC40()
{
  return MEMORY[0x24BEE2A08]();
}

uint64_t sub_21FC5BC4C()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t sub_21FC5BC58()
{
  return MEMORY[0x24BEE2C00]();
}

uint64_t sub_21FC5BC64()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_21FC5BC70()
{
  return MEMORY[0x24BEE2F48]();
}

uint64_t sub_21FC5BC7C()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t sub_21FC5BC88()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_21FC5BC94()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_21FC5BCA0()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_21FC5BCAC()
{
  return MEMORY[0x24BEE30A0]();
}

uint64_t sub_21FC5BCB8()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_21FC5BCC4()
{
  return MEMORY[0x24BEE31D0]();
}

uint64_t sub_21FC5BCD0()
{
  return MEMORY[0x24BEE3290]();
}

uint64_t sub_21FC5BCDC()
{
  return MEMORY[0x24BEE6FA8]();
}

uint64_t sub_21FC5BCE8()
{
  return MEMORY[0x24BEE32D8]();
}

uint64_t sub_21FC5BCF4()
{
  return MEMORY[0x24BEE32E0]();
}

uint64_t sub_21FC5BD00()
{
  return MEMORY[0x24BEE32F8]();
}

uint64_t sub_21FC5BD0C()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t sub_21FC5BD18()
{
  return MEMORY[0x24BEE3350]();
}

uint64_t sub_21FC5BD24()
{
  return MEMORY[0x24BEE3370]();
}

uint64_t sub_21FC5BD30()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t sub_21FC5BD3C()
{
  return MEMORY[0x24BEE33E0]();
}

uint64_t sub_21FC5BD48()
{
  return MEMORY[0x24BEE3428]();
}

uint64_t sub_21FC5BD54()
{
  return MEMORY[0x24BEE3430]();
}

uint64_t sub_21FC5BD60()
{
  return MEMORY[0x24BEE3448]();
}

uint64_t sub_21FC5BD6C()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t sub_21FC5BD78()
{
  return MEMORY[0x24BEE34A0]();
}

uint64_t sub_21FC5BD84()
{
  return MEMORY[0x24BEE34B0]();
}

uint64_t sub_21FC5BD90()
{
  return MEMORY[0x24BEE34C0]();
}

uint64_t sub_21FC5BD9C()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t sub_21FC5BDA8()
{
  return MEMORY[0x24BEE3520]();
}

uint64_t sub_21FC5BDB4()
{
  return MEMORY[0x24BEE3540]();
}

uint64_t sub_21FC5BDC0()
{
  return MEMORY[0x24BEE3548]();
}

uint64_t sub_21FC5BDCC()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t sub_21FC5BDD8()
{
  return MEMORY[0x24BEE3598]();
}

uint64_t sub_21FC5BDE4()
{
  return MEMORY[0x24BEE3880]();
}

uint64_t sub_21FC5BDF0()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_21FC5BDFC()
{
  return MEMORY[0x24BEE70E0]();
}

uint64_t sub_21FC5BE08()
{
  return MEMORY[0x24BEE3DE0]();
}

uint64_t sub_21FC5BE14()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t sub_21FC5BE20()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_21FC5BE2C()
{
  return MEMORY[0x24BDD06E0]();
}

uint64_t sub_21FC5BE38()
{
  return MEMORY[0x24BDD06F0]();
}

uint64_t sub_21FC5BE44()
{
  return MEMORY[0x24BDD0708]();
}

uint64_t sub_21FC5BE50()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t sub_21FC5BE5C()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t sub_21FC5BE68()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t sub_21FC5BE74()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_21FC5BE80()
{
  return MEMORY[0x24BDD0728]();
}

uint64_t sub_21FC5BE8C()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_21FC5BE98()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_21FC5BEA4()
{
  return MEMORY[0x24BEE4300]();
}

uint64_t sub_21FC5BEB0()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_21FC5BEBC()
{
  return MEMORY[0x24BDBA1A0]();
}

uint64_t sub_21FC5BEC8()
{
  return MEMORY[0x24BDBA1B0]();
}

uint64_t sub_21FC5BED4()
{
  return MEMORY[0x24BEE4408]();
}

uint64_t sub_21FC5BEE0()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_21FC5BEEC()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_21FC5BEF8()
{
  return MEMORY[0x24BEE49E8]();
}

uint64_t sub_21FC5BF04()
{
  return MEMORY[0x24BEE49F8]();
}

uint64_t sub_21FC5BF10()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_21FC5BF1C()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t sub_21FC5BF28()
{
  return MEMORY[0x24BEE4A98]();
}

uint64_t AnalyticsSendEvent()
{
  return MEMORY[0x24BE1A1B0]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x24BE1A1C8]();
}

uint64_t DeviceIdentityIssueClientCertificateWithCompletion()
{
  return MEMORY[0x24BE2C378]();
}

uint64_t HDHealthRecordsIngestionServiceInterface()
{
  return MEMORY[0x24BE48848]();
}

uint64_t HDHealthRecordsPublicUserAgentString()
{
  return MEMORY[0x24BE48850]();
}

uint64_t HKAcceptAuthenticationChallengeWithTrust()
{
  return MEMORY[0x24BE48858]();
}

uint64_t HKClinicalDocumentDownloaderInterface()
{
  return MEMORY[0x24BE48860]();
}

uint64_t HKClinicalSharingFeatureStatusToString()
{
  return MEMORY[0x24BE488A0]();
}

uint64_t HKClinicalSharingMultiDeviceStatusToString()
{
  return MEMORY[0x24BE488B0]();
}

uint64_t HKClinicalSharingServerInterface()
{
  return MEMORY[0x24BE488B8]();
}

uint64_t HKClinicalSharingSyncObserverClientInterface()
{
  return MEMORY[0x24BE488C8]();
}

uint64_t HKClinicalSharingSyncObserverServerInterface()
{
  return MEMORY[0x24BE488D0]();
}

uint64_t HKClinicalSharingUserStatusToString()
{
  return MEMORY[0x24BE488E0]();
}

uint64_t HKFHIRResourceQueryModeIncludesFullMode()
{
  return MEMORY[0x24BE488F0]();
}

uint64_t HKHealthRecordsCurrentEnvironment()
{
  return MEMORY[0x24BE488F8]();
}

uint64_t HKHealthRecordsDaemonConnectionServerInterface()
{
  return MEMORY[0x24BE48900]();
}

uint64_t HKImproveHealthAndActivityAnalyticsAllowed()
{
  return MEMORY[0x24BDD2F40]();
}

uint64_t HKReleaseSecKey()
{
  return MEMORY[0x24BE48918]();
}

uint64_t HKSecPolicyNameAppleHealthProviderService()
{
  return MEMORY[0x24BE48920]();
}

uint64_t HKSensitiveLogItem()
{
  return MEMORY[0x24BDD3730]();
}

uint64_t HKVerifiableHealthRecordsParsingServiceInterface()
{
  return MEMORY[0x24BE48940]();
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x24BDD1280]();
}

SecAccessControlRef SecAccessControlCreateWithFlags(CFAllocatorRef allocator, CFTypeRef protection, SecAccessControlCreateFlags flags, CFErrorRef *error)
{
  return (SecAccessControlRef)MEMORY[0x24BDE87A0](allocator, protection, flags, error);
}

CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
{
  return (CFDataRef)MEMORY[0x24BDE8850](certificate);
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return MEMORY[0x24BDE8A70](attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x24BDE8A78](query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return MEMORY[0x24BDE8A80](query);
}

CFDataRef SecKeyCreateSignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x24BDE8B38](key, algorithm, dataToSign, error);
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return MEMORY[0x24BDE8CC8](rnd, count, bytes);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

uint64_t _HKInitializeLogging()
{
  return MEMORY[0x24BDD4338]();
}

uint64_t _objc_autoreleasePoolPop()
{
  return MEMORY[0x24BEDCE10]();
}

uint64_t _objc_autoreleasePoolPush()
{
  return MEMORY[0x24BEDCE18]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

uint64_t lround(long double __x)
{
  return MEMORY[0x24BDAEB10](__x);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x24BDAF160](name);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x24BEE71B8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x24BEE71C0]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x24BEE71D0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x24BEE71D8]();
}

uint64_t swift_deallocBox()
{
  return MEMORY[0x24BEE4BF8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x24BEE4C60]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x24BEE4CE8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getExistentialMetatypeMetadata()
{
  return MEMORY[0x24BEE4D20]();
}

uint64_t swift_getExistentialTypeMetadata()
{
  return MEMORY[0x24BEE4D28]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getFunctionTypeMetadata0()
{
  return MEMORY[0x24BEE4D58]();
}

uint64_t swift_getFunctionTypeMetadata1()
{
  return MEMORY[0x24BEE4D60]();
}

uint64_t swift_getFunctionTypeMetadata2()
{
  return MEMORY[0x24BEE4D68]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x24BEE4D98]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x24BEE4E00]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initEnumMetadataSingleCase()
{
  return MEMORY[0x24BEE4E38]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x24BEE4E68]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x24BEE4E90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x24BEE4EB0]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x24BEE4ED0]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x24BEE4FC8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x24BEE4FD0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x24BEE4FD8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x24BEE5028]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

